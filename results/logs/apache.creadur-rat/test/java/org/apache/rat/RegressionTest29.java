package org.apache.rat;

import org.junit.FixMethodOrder;
import org.junit.Test;
import org.junit.runners.MethodSorters;

@FixMethodOrder(MethodSorters.NAME_ASCENDING)
public class RegressionTest29 {

    public static boolean debug = false;

    @Test
    public void test14501() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest29.test14501");
        org.apache.rat.utils.DefaultLog defaultLog0 = org.apache.rat.utils.DefaultLog.INSTANCE;
        org.apache.rat.annotation.ApacheV2LicenseAppender apacheV2LicenseAppender1 = new org.apache.rat.annotation.ApacheV2LicenseAppender((org.apache.rat.utils.Log) defaultLog0);
        org.apache.rat.ReportConfiguration reportConfiguration2 = new org.apache.rat.ReportConfiguration((org.apache.rat.utils.Log) defaultLog0);
        reportConfiguration2.addApprovedLicenseCategory("archi");
        reportConfiguration2.addApprovedLicenseCategory("null f1fc8dc8-990d-4a2d-9540-4e9ece3bd92c");
        org.apache.rat.utils.Log log7 = reportConfiguration2.getLog();
        org.apache.rat.utils.Log log8 = null;
        org.apache.rat.ReportConfiguration reportConfiguration9 = new org.apache.rat.ReportConfiguration(log8);
        java.io.FilenameFilter filenameFilter10 = reportConfiguration9.getInputFileFilter();
        org.apache.rat.license.LicenseSetFactory.LicenseFilter licenseFilter11 = org.apache.rat.license.LicenseSetFactory.LicenseFilter.all;
        java.util.SortedSet<org.apache.rat.license.ILicense> iLicenseSet12 = reportConfiguration9.getLicenses(licenseFilter11);
        org.apache.rat.license.ILicenseFamily iLicenseFamily13 = null;
        reportConfiguration9.addFamily(iLicenseFamily13);
        org.apache.commons.io.filefilter.IOFileFilter iOFileFilter15 = reportConfiguration9.getDirectoryFilter();
        org.apache.rat.utils.Log log16 = null;
        org.apache.rat.ReportConfiguration reportConfiguration17 = new org.apache.rat.ReportConfiguration(log16);
        java.io.FilenameFilter filenameFilter18 = reportConfiguration17.getInputFileFilter();
        org.apache.rat.license.LicenseSetFactory.LicenseFilter licenseFilter19 = org.apache.rat.license.LicenseSetFactory.LicenseFilter.all;
        java.util.SortedSet<org.apache.rat.license.ILicense> iLicenseSet20 = reportConfiguration17.getLicenses(licenseFilter19);
        org.apache.rat.config.AddLicenseHeaders addLicenseHeaders21 = org.apache.rat.config.AddLicenseHeaders.FALSE;
        reportConfiguration17.setAddLicenseHeaders(addLicenseHeaders21);
        org.apache.rat.utils.Log log23 = null;
        org.apache.rat.ReportConfiguration reportConfiguration24 = new org.apache.rat.ReportConfiguration(log23);
        org.apache.rat.report.claim.ClaimStatistic claimStatistic25 = org.apache.rat.Reporter.report(reportConfiguration24);
        org.apache.rat.license.LicenseSetFactory.LicenseFilter licenseFilter26 = org.apache.rat.license.LicenseSetFactory.LicenseFilter.all;
        org.apache.rat.Reporter.listLicenses(reportConfiguration24, licenseFilter26);
        org.apache.rat.Reporter.listLicenses(reportConfiguration17, licenseFilter26);
        org.apache.rat.utils.Log log29 = null;
        org.apache.rat.ReportConfiguration reportConfiguration30 = new org.apache.rat.ReportConfiguration(log29);
        java.io.FilenameFilter filenameFilter31 = reportConfiguration30.getInputFileFilter();
        org.apache.rat.license.LicenseSetFactory.LicenseFilter licenseFilter32 = org.apache.rat.license.LicenseSetFactory.LicenseFilter.all;
        java.util.SortedSet<org.apache.rat.license.ILicense> iLicenseSet33 = reportConfiguration30.getLicenses(licenseFilter32);
        org.apache.rat.config.AddLicenseHeaders addLicenseHeaders34 = org.apache.rat.config.AddLicenseHeaders.FALSE;
        reportConfiguration30.setAddLicenseHeaders(addLicenseHeaders34);
        org.apache.rat.utils.Log log36 = null;
        org.apache.rat.ReportConfiguration reportConfiguration37 = new org.apache.rat.ReportConfiguration(log36);
        org.apache.rat.report.claim.ClaimStatistic claimStatistic38 = org.apache.rat.Reporter.report(reportConfiguration37);
        org.apache.rat.license.LicenseSetFactory.LicenseFilter licenseFilter39 = org.apache.rat.license.LicenseSetFactory.LicenseFilter.all;
        org.apache.rat.Reporter.listLicenses(reportConfiguration37, licenseFilter39);
        org.apache.rat.Reporter.listLicenses(reportConfiguration30, licenseFilter39);
        org.apache.rat.Reporter.listLicenses(reportConfiguration17, licenseFilter39);
        org.apache.rat.utils.Log log43 = null;
        org.apache.rat.ReportConfiguration reportConfiguration44 = new org.apache.rat.ReportConfiguration(log43);
        org.apache.commons.io.function.IOSupplier<java.io.OutputStream> outputStreamIOSupplier45 = reportConfiguration44.getOutput();
        reportConfiguration17.setOut(outputStreamIOSupplier45);
        org.apache.rat.utils.Log.Level level47 = org.apache.rat.utils.Log.Level.WARN;
        reportConfiguration17.logLicenseCollisions(level47);
        org.apache.commons.io.filefilter.IOFileFilter iOFileFilter49 = reportConfiguration17.getDirectoryFilter();
        java.nio.file.Path path50 = null;
        boolean boolean51 = iOFileFilter49.matches(path50);
        java.nio.file.Path path52 = null;
        java.nio.file.attribute.BasicFileAttributes basicFileAttributes53 = null;
        java.nio.file.FileVisitResult fileVisitResult54 = iOFileFilter49.accept(path52, basicFileAttributes53);
        org.apache.commons.io.filefilter.IOFileFilter iOFileFilter55 = iOFileFilter15.or(iOFileFilter49);
        org.apache.commons.io.filefilter.IOFileFilter iOFileFilter56 = iOFileFilter49.negate();
        java.nio.file.Path path57 = null;
        java.nio.file.attribute.BasicFileAttributes basicFileAttributes58 = null;
        java.nio.file.FileVisitResult fileVisitResult59 = iOFileFilter49.accept(path57, basicFileAttributes58);
        org.apache.commons.io.filefilter.IOFileFilter iOFileFilter60 = iOFileFilter49.negate();
        reportConfiguration2.setInputFileFilter((java.io.FilenameFilter) iOFileFilter60);
        org.apache.rat.report.claim.ClaimStatistic claimStatistic62 = org.apache.rat.Reporter.report(reportConfiguration2);
        org.junit.Assert.assertNotNull(defaultLog0);
        org.junit.Assert.assertNotNull(log7);
        org.junit.Assert.assertNull(filenameFilter10);
        org.junit.Assert.assertTrue("'" + licenseFilter11 + "' != '" + org.apache.rat.license.LicenseSetFactory.LicenseFilter.all + "'", licenseFilter11.equals(org.apache.rat.license.LicenseSetFactory.LicenseFilter.all));
        org.junit.Assert.assertNotNull(iLicenseSet12);
        org.junit.Assert.assertNotNull(iOFileFilter15);
        org.junit.Assert.assertNull(filenameFilter18);
        org.junit.Assert.assertTrue("'" + licenseFilter19 + "' != '" + org.apache.rat.license.LicenseSetFactory.LicenseFilter.all + "'", licenseFilter19.equals(org.apache.rat.license.LicenseSetFactory.LicenseFilter.all));
        org.junit.Assert.assertNotNull(iLicenseSet20);
        org.junit.Assert.assertTrue("'" + addLicenseHeaders21 + "' != '" + org.apache.rat.config.AddLicenseHeaders.FALSE + "'", addLicenseHeaders21.equals(org.apache.rat.config.AddLicenseHeaders.FALSE));
        org.junit.Assert.assertNull(claimStatistic25);
        org.junit.Assert.assertTrue("'" + licenseFilter26 + "' != '" + org.apache.rat.license.LicenseSetFactory.LicenseFilter.all + "'", licenseFilter26.equals(org.apache.rat.license.LicenseSetFactory.LicenseFilter.all));
        org.junit.Assert.assertNull(filenameFilter31);
        org.junit.Assert.assertTrue("'" + licenseFilter32 + "' != '" + org.apache.rat.license.LicenseSetFactory.LicenseFilter.all + "'", licenseFilter32.equals(org.apache.rat.license.LicenseSetFactory.LicenseFilter.all));
        org.junit.Assert.assertNotNull(iLicenseSet33);
        org.junit.Assert.assertTrue("'" + addLicenseHeaders34 + "' != '" + org.apache.rat.config.AddLicenseHeaders.FALSE + "'", addLicenseHeaders34.equals(org.apache.rat.config.AddLicenseHeaders.FALSE));
        org.junit.Assert.assertNull(claimStatistic38);
        org.junit.Assert.assertTrue("'" + licenseFilter39 + "' != '" + org.apache.rat.license.LicenseSetFactory.LicenseFilter.all + "'", licenseFilter39.equals(org.apache.rat.license.LicenseSetFactory.LicenseFilter.all));
        org.junit.Assert.assertNotNull(outputStreamIOSupplier45);
        org.junit.Assert.assertTrue("'" + level47 + "' != '" + org.apache.rat.utils.Log.Level.WARN + "'", level47.equals(org.apache.rat.utils.Log.Level.WARN));
        org.junit.Assert.assertNotNull(iOFileFilter49);
        org.junit.Assert.assertTrue("'" + boolean51 + "' != '" + false + "'", boolean51 == false);
        org.junit.Assert.assertTrue("'" + fileVisitResult54 + "' != '" + java.nio.file.FileVisitResult.TERMINATE + "'", fileVisitResult54.equals(java.nio.file.FileVisitResult.TERMINATE));
        org.junit.Assert.assertNotNull(iOFileFilter55);
        org.junit.Assert.assertNotNull(iOFileFilter56);
        org.junit.Assert.assertTrue("'" + fileVisitResult59 + "' != '" + java.nio.file.FileVisitResult.TERMINATE + "'", fileVisitResult59.equals(java.nio.file.FileVisitResult.TERMINATE));
        org.junit.Assert.assertNotNull(iOFileFilter60);
        org.junit.Assert.assertNull(claimStatistic62);
    }

    @Test
    public void test14502() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest29.test14502");
        java.io.Writer writer0 = null;
        org.apache.rat.report.xml.writer.impl.base.XmlWriter xmlWriter1 = new org.apache.rat.report.xml.writer.impl.base.XmlWriter(writer0);
        org.apache.rat.report.claim.impl.xml.SimpleXmlClaimReporter simpleXmlClaimReporter2 = new org.apache.rat.report.claim.impl.xml.SimpleXmlClaimReporter((org.apache.rat.report.xml.writer.IXmlWriter) xmlWriter1);
        org.apache.rat.report.claim.impl.xml.SimpleXmlClaimReporter simpleXmlClaimReporter3 = new org.apache.rat.report.claim.impl.xml.SimpleXmlClaimReporter((org.apache.rat.report.xml.writer.IXmlWriter) xmlWriter1);
        org.apache.rat.report.claim.impl.xml.SimpleXmlClaimReporter simpleXmlClaimReporter4 = new org.apache.rat.report.claim.impl.xml.SimpleXmlClaimReporter((org.apache.rat.report.xml.writer.IXmlWriter) xmlWriter1);
        org.apache.rat.report.claim.impl.xml.SimpleXmlClaimReporter simpleXmlClaimReporter5 = new org.apache.rat.report.claim.impl.xml.SimpleXmlClaimReporter((org.apache.rat.report.xml.writer.IXmlWriter) xmlWriter1);
        org.apache.rat.report.claim.impl.xml.SimpleXmlClaimReporter simpleXmlClaimReporter6 = new org.apache.rat.report.claim.impl.xml.SimpleXmlClaimReporter((org.apache.rat.report.xml.writer.IXmlWriter) xmlWriter1);
        org.apache.rat.report.claim.impl.xml.SimpleXmlClaimReporter simpleXmlClaimReporter7 = new org.apache.rat.report.claim.impl.xml.SimpleXmlClaimReporter((org.apache.rat.report.xml.writer.IXmlWriter) xmlWriter1);
        org.apache.rat.report.claim.impl.xml.SimpleXmlClaimReporter simpleXmlClaimReporter8 = new org.apache.rat.report.claim.impl.xml.SimpleXmlClaimReporter((org.apache.rat.report.xml.writer.IXmlWriter) xmlWriter1);
        org.apache.rat.report.claim.impl.xml.SimpleXmlClaimReporter simpleXmlClaimReporter9 = new org.apache.rat.report.claim.impl.xml.SimpleXmlClaimReporter((org.apache.rat.report.xml.writer.IXmlWriter) xmlWriter1);
        org.apache.rat.report.claim.impl.xml.SimpleXmlClaimReporter simpleXmlClaimReporter10 = new org.apache.rat.report.claim.impl.xml.SimpleXmlClaimReporter((org.apache.rat.report.xml.writer.IXmlWriter) xmlWriter1);
        org.apache.rat.report.claim.impl.xml.SimpleXmlClaimReporter simpleXmlClaimReporter11 = new org.apache.rat.report.claim.impl.xml.SimpleXmlClaimReporter((org.apache.rat.report.xml.writer.IXmlWriter) xmlWriter1);
        org.apache.rat.report.claim.impl.xml.SimpleXmlClaimReporter simpleXmlClaimReporter12 = new org.apache.rat.report.claim.impl.xml.SimpleXmlClaimReporter((org.apache.rat.report.xml.writer.IXmlWriter) xmlWriter1);
        org.apache.rat.report.claim.impl.xml.SimpleXmlClaimReporter simpleXmlClaimReporter13 = new org.apache.rat.report.claim.impl.xml.SimpleXmlClaimReporter((org.apache.rat.report.xml.writer.IXmlWriter) xmlWriter1);
        // The following exception was thrown during execution in test generation
        try {
            org.apache.rat.report.xml.writer.IXmlWriter iXmlWriter15 = xmlWriter1.content((java.lang.CharSequence) "TextBuilder: 30657c35-59d9-408c-b...");
            org.junit.Assert.fail("Expected exception of type org.apache.rat.report.xml.writer.OperationNotAllowedException; message: An element must be opened before content can be written.");
        } catch (org.apache.rat.report.xml.writer.OperationNotAllowedException e) {
            // Expected exception.
        }
    }

    @Test
    public void test14503() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest29.test14503");
        org.apache.rat.utils.Log log0 = null;
        org.apache.rat.ReportConfiguration reportConfiguration1 = new org.apache.rat.ReportConfiguration(log0);
        org.apache.commons.io.function.IOSupplier<java.io.OutputStream> outputStreamIOSupplier2 = reportConfiguration1.getOutput();
        org.apache.commons.io.filefilter.IOFileFilter iOFileFilter3 = reportConfiguration1.getDirectoryFilter();
        org.apache.commons.io.function.IOSupplier<java.io.InputStream> inputStreamIOSupplier4 = reportConfiguration1.getStyleSheet();
        org.apache.rat.utils.Log log5 = null;
        org.apache.rat.ReportConfiguration reportConfiguration6 = new org.apache.rat.ReportConfiguration(log5);
        java.io.FilenameFilter filenameFilter7 = reportConfiguration6.getInputFileFilter();
        org.apache.rat.license.LicenseSetFactory.LicenseFilter licenseFilter8 = org.apache.rat.license.LicenseSetFactory.LicenseFilter.all;
        java.util.SortedSet<org.apache.rat.license.ILicense> iLicenseSet9 = reportConfiguration6.getLicenses(licenseFilter8);
        org.apache.rat.utils.ReportingSet<org.apache.rat.license.ILicense> iLicenseSet10 = new org.apache.rat.utils.ReportingSet<org.apache.rat.license.ILicense>(iLicenseSet9);
        reportConfiguration1.addLicenses((java.util.Collection<org.apache.rat.license.ILicense>) iLicenseSet10);
        org.apache.rat.utils.Log log12 = null;
        org.apache.rat.ReportConfiguration reportConfiguration13 = new org.apache.rat.ReportConfiguration(log12);
        org.apache.rat.report.claim.ClaimStatistic claimStatistic14 = org.apache.rat.Reporter.report(reportConfiguration13);
        org.apache.commons.io.function.IOSupplier<java.io.OutputStream> outputStreamIOSupplier15 = reportConfiguration13.getOutput();
        boolean boolean16 = reportConfiguration13.isAddingLicensesForced();
        org.apache.rat.license.ILicense[] iLicenseArray17 = new org.apache.rat.license.ILicense[] {};
        java.util.TreeSet<org.apache.rat.license.ILicense> iLicenseSet18 = new java.util.TreeSet<org.apache.rat.license.ILicense>();
        boolean boolean19 = java.util.Collections.addAll((java.util.Collection<org.apache.rat.license.ILicense>) iLicenseSet18, iLicenseArray17);
        java.lang.String[] strArray32 = new java.lang.String[] { "GPL2 ", "GPL1 ", "notice", "http://org/apache/rat/meta-data#LicenseFamilyName", "notice", "GPL2 ", "http://org/apache/rat/meta-data#LicenseFamilyName", "", "GPL2 ", "", "GPL1 ", "hi!" };
        java.util.ArrayList<java.lang.String> strList33 = new java.util.ArrayList<java.lang.String>();
        boolean boolean34 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strList33, strArray32);
        org.apache.rat.license.LicenseSetFactory licenseSetFactory35 = new org.apache.rat.license.LicenseSetFactory((java.util.SortedSet<org.apache.rat.license.ILicense>) iLicenseSet18, (java.util.Collection<java.lang.String>) strList33);
        reportConfiguration13.addLicenses((java.util.Collection<org.apache.rat.license.ILicense>) iLicenseSet18);
        reportConfiguration13.setStyleReport(true);
        org.apache.commons.io.function.IOSupplier<java.io.OutputStream> outputStreamIOSupplier39 = reportConfiguration13.getOutput();
        reportConfiguration13.setStyleReport(false);
        boolean boolean42 = reportConfiguration13.isStyleReport();
        org.apache.rat.utils.Log log43 = null;
        org.apache.rat.ReportConfiguration reportConfiguration44 = new org.apache.rat.ReportConfiguration(log43);
        org.apache.rat.report.claim.ClaimStatistic claimStatistic45 = org.apache.rat.Reporter.report(reportConfiguration44);
        org.apache.commons.io.function.IOSupplier<java.io.OutputStream> outputStreamIOSupplier46 = reportConfiguration44.getOutput();
        org.apache.rat.license.ILicense iLicense47 = null;
        reportConfiguration44.addLicense(iLicense47);
        reportConfiguration44.removeApprovedLicenseCategory("F FALSE");
        boolean boolean51 = reportConfiguration44.isAddingLicenses();
        org.apache.rat.utils.Log log52 = null;
        org.apache.rat.ReportConfiguration reportConfiguration53 = new org.apache.rat.ReportConfiguration(log52);
        java.io.FilenameFilter filenameFilter54 = reportConfiguration53.getInputFileFilter();
        org.apache.rat.license.LicenseSetFactory.LicenseFilter licenseFilter55 = org.apache.rat.license.LicenseSetFactory.LicenseFilter.all;
        java.util.SortedSet<org.apache.rat.license.ILicense> iLicenseSet56 = reportConfiguration53.getLicenses(licenseFilter55);
        org.apache.rat.config.AddLicenseHeaders addLicenseHeaders57 = org.apache.rat.config.AddLicenseHeaders.FALSE;
        reportConfiguration53.setAddLicenseHeaders(addLicenseHeaders57);
        org.apache.rat.utils.Log log59 = null;
        org.apache.rat.ReportConfiguration reportConfiguration60 = new org.apache.rat.ReportConfiguration(log59);
        org.apache.rat.report.claim.ClaimStatistic claimStatistic61 = org.apache.rat.Reporter.report(reportConfiguration60);
        org.apache.rat.license.LicenseSetFactory.LicenseFilter licenseFilter62 = org.apache.rat.license.LicenseSetFactory.LicenseFilter.all;
        org.apache.rat.Reporter.listLicenses(reportConfiguration60, licenseFilter62);
        org.apache.rat.Reporter.listLicenses(reportConfiguration53, licenseFilter62);
        org.apache.rat.utils.Log log65 = null;
        org.apache.rat.ReportConfiguration reportConfiguration66 = new org.apache.rat.ReportConfiguration(log65);
        java.io.FilenameFilter filenameFilter67 = reportConfiguration66.getInputFileFilter();
        org.apache.rat.license.LicenseSetFactory.LicenseFilter licenseFilter68 = org.apache.rat.license.LicenseSetFactory.LicenseFilter.all;
        java.util.SortedSet<org.apache.rat.license.ILicense> iLicenseSet69 = reportConfiguration66.getLicenses(licenseFilter68);
        org.apache.rat.config.AddLicenseHeaders addLicenseHeaders70 = org.apache.rat.config.AddLicenseHeaders.FALSE;
        reportConfiguration66.setAddLicenseHeaders(addLicenseHeaders70);
        org.apache.rat.utils.Log log72 = null;
        org.apache.rat.ReportConfiguration reportConfiguration73 = new org.apache.rat.ReportConfiguration(log72);
        org.apache.rat.report.claim.ClaimStatistic claimStatistic74 = org.apache.rat.Reporter.report(reportConfiguration73);
        org.apache.rat.license.LicenseSetFactory.LicenseFilter licenseFilter75 = org.apache.rat.license.LicenseSetFactory.LicenseFilter.all;
        org.apache.rat.Reporter.listLicenses(reportConfiguration73, licenseFilter75);
        org.apache.rat.Reporter.listLicenses(reportConfiguration66, licenseFilter75);
        org.apache.rat.Reporter.listLicenses(reportConfiguration53, licenseFilter75);
        org.apache.rat.Reporter.listLicenses(reportConfiguration44, licenseFilter75);
        java.util.SortedSet<org.apache.rat.license.ILicenseFamily> iLicenseFamilySet80 = reportConfiguration13.getLicenseFamilies(licenseFilter75);
        java.util.SortedSet<org.apache.rat.license.ILicenseFamily> iLicenseFamilySet81 = reportConfiguration1.getLicenseFamilies(licenseFilter75);
        org.apache.rat.policy.DefaultPolicy defaultPolicy82 = new org.apache.rat.policy.DefaultPolicy((java.util.Collection<org.apache.rat.license.ILicenseFamily>) iLicenseFamilySet81);
        org.junit.Assert.assertNotNull(outputStreamIOSupplier2);
        org.junit.Assert.assertNotNull(iOFileFilter3);
        org.junit.Assert.assertNull(inputStreamIOSupplier4);
        org.junit.Assert.assertNull(filenameFilter7);
        org.junit.Assert.assertTrue("'" + licenseFilter8 + "' != '" + org.apache.rat.license.LicenseSetFactory.LicenseFilter.all + "'", licenseFilter8.equals(org.apache.rat.license.LicenseSetFactory.LicenseFilter.all));
        org.junit.Assert.assertNotNull(iLicenseSet9);
        org.junit.Assert.assertNull(claimStatistic14);
        org.junit.Assert.assertNotNull(outputStreamIOSupplier15);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
        org.junit.Assert.assertNotNull(iLicenseArray17);
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + false + "'", boolean19 == false);
        org.junit.Assert.assertNotNull(strArray32);
        org.junit.Assert.assertTrue("'" + boolean34 + "' != '" + true + "'", boolean34 == true);
        org.junit.Assert.assertNotNull(outputStreamIOSupplier39);
        org.junit.Assert.assertTrue("'" + boolean42 + "' != '" + false + "'", boolean42 == false);
        org.junit.Assert.assertNull(claimStatistic45);
        org.junit.Assert.assertNotNull(outputStreamIOSupplier46);
        org.junit.Assert.assertTrue("'" + boolean51 + "' != '" + false + "'", boolean51 == false);
        org.junit.Assert.assertNull(filenameFilter54);
        org.junit.Assert.assertTrue("'" + licenseFilter55 + "' != '" + org.apache.rat.license.LicenseSetFactory.LicenseFilter.all + "'", licenseFilter55.equals(org.apache.rat.license.LicenseSetFactory.LicenseFilter.all));
        org.junit.Assert.assertNotNull(iLicenseSet56);
        org.junit.Assert.assertTrue("'" + addLicenseHeaders57 + "' != '" + org.apache.rat.config.AddLicenseHeaders.FALSE + "'", addLicenseHeaders57.equals(org.apache.rat.config.AddLicenseHeaders.FALSE));
        org.junit.Assert.assertNull(claimStatistic61);
        org.junit.Assert.assertTrue("'" + licenseFilter62 + "' != '" + org.apache.rat.license.LicenseSetFactory.LicenseFilter.all + "'", licenseFilter62.equals(org.apache.rat.license.LicenseSetFactory.LicenseFilter.all));
        org.junit.Assert.assertNull(filenameFilter67);
        org.junit.Assert.assertTrue("'" + licenseFilter68 + "' != '" + org.apache.rat.license.LicenseSetFactory.LicenseFilter.all + "'", licenseFilter68.equals(org.apache.rat.license.LicenseSetFactory.LicenseFilter.all));
        org.junit.Assert.assertNotNull(iLicenseSet69);
        org.junit.Assert.assertTrue("'" + addLicenseHeaders70 + "' != '" + org.apache.rat.config.AddLicenseHeaders.FALSE + "'", addLicenseHeaders70.equals(org.apache.rat.config.AddLicenseHeaders.FALSE));
        org.junit.Assert.assertNull(claimStatistic74);
        org.junit.Assert.assertTrue("'" + licenseFilter75 + "' != '" + org.apache.rat.license.LicenseSetFactory.LicenseFilter.all + "'", licenseFilter75.equals(org.apache.rat.license.LicenseSetFactory.LicenseFilter.all));
        org.junit.Assert.assertNotNull(iLicenseFamilySet80);
        org.junit.Assert.assertNotNull(iLicenseFamilySet81);
    }

    @Test
    public void test14504() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest29.test14504");
        org.apache.rat.analysis.license.FullTextMatchingLicense fullTextMatchingLicense0 = new org.apache.rat.analysis.license.FullTextMatchingLicense();
        fullTextMatchingLicense0.setLicenseFamilyName("hi!");
        java.lang.String str3 = fullTextMatchingLicense0.getLicenseFamilyCategory();
        java.lang.String str4 = fullTextMatchingLicense0.getLicenseFamilyName();
        fullTextMatchingLicense0.setFullText("AnyBuilder:\nAllBuilder:");
        java.lang.String str7 = fullTextMatchingLicense0.getLicenseFamilyName();
        java.lang.String str8 = fullTextMatchingLicense0.getLicenseFamilyCategory();
        org.apache.rat.license.ILicense.Builder builder9 = fullTextMatchingLicense0.getLicense();
        fullTextMatchingLicense0.setFullText("336987e8-9ddb-46d8-8c1c-67ab8c91d714");
        fullTextMatchingLicense0.setFullText("fe6be119881745678d33352365bfa7c8");
        java.lang.String str14 = fullTextMatchingLicense0.getLicenseFamilyCategory();
        org.junit.Assert.assertNull(str3);
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "hi!" + "'", str4, "hi!");
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "hi!" + "'", str7, "hi!");
        org.junit.Assert.assertNull(str8);
        org.junit.Assert.assertNotNull(builder9);
        org.junit.Assert.assertNull(str14);
    }

    @Test
    public void test14505() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest29.test14505");
        java.lang.String[] strArray5 = new java.lang.String[] { "http://org/apache/rat/meta-data#LicenseFamilyCategory", "Datum [ name ='http://org/apache/rat/meta-data#LicenseFamilyCategory',value ='GPL1  ']", "MANIFEST.MF", "AllBuilder:", "The MIT License" };
        org.apache.rat.utils.ReportingSet<java.lang.String> strSet6 = new org.apache.rat.utils.ReportingSet<java.lang.String>();
        boolean boolean7 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strSet6, strArray5);
        boolean boolean9 = strSet6.addIfNotPresent("http://org/apache/rat/meta-data#LicenseFamilyName");
        java.util.Iterator<java.lang.String> strItor10 = strSet6.iterator();
        strSet6.clear();
        strSet6.clear();
        java.lang.Object[] objArray13 = strSet6.toArray();
        java.util.stream.Stream<java.lang.String> strStream14 = strSet6.stream();
        java.util.Comparator<? super java.lang.String> wildcardComparator15 = strSet6.comparator();
        java.util.stream.Stream<java.lang.String> strStream16 = strSet6.stream();
        java.util.Comparator<? super java.lang.String> wildcardComparator17 = strSet6.comparator();
        java.util.Iterator<java.lang.String> strItor18 = strSet6.iterator();
        java.lang.String[] strArray24 = new java.lang.String[] { "http://org/apache/rat/meta-data#LicenseFamilyCategory", "Datum [ name ='http://org/apache/rat/meta-data#LicenseFamilyCategory',value ='GPL1  ']", "MANIFEST.MF", "AllBuilder:", "The MIT License" };
        org.apache.rat.utils.ReportingSet<java.lang.String> strSet25 = new org.apache.rat.utils.ReportingSet<java.lang.String>();
        boolean boolean26 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strSet25, strArray24);
        boolean boolean28 = strSet25.addIfNotPresent("http://org/apache/rat/meta-data#LicenseFamilyName");
        java.util.Iterator<java.lang.String> strItor29 = strSet25.iterator();
        strSet25.clear();
        int int31 = strSet25.size();
        java.util.function.Function<java.lang.String, java.lang.String> strFunction32 = null;
        org.apache.rat.utils.ReportingSet<java.lang.String> strSet33 = strSet25.setMsgFormat(strFunction32);
        org.apache.rat.utils.Log log34 = null;
        org.apache.rat.utils.ReportingSet<java.lang.String> strSet35 = strSet25.setLog(log34);
        org.apache.rat.utils.Log log36 = null;
        org.apache.rat.ReportConfiguration reportConfiguration37 = new org.apache.rat.ReportConfiguration(log36);
        org.apache.rat.report.claim.ClaimStatistic claimStatistic38 = org.apache.rat.Reporter.report(reportConfiguration37);
        org.apache.rat.report.IReportable iReportable39 = null;
        reportConfiguration37.setReportable(iReportable39);
        org.apache.rat.utils.Log log41 = null;
        org.apache.rat.ReportConfiguration reportConfiguration42 = new org.apache.rat.ReportConfiguration(log41);
        java.io.FilenameFilter filenameFilter43 = reportConfiguration42.getInputFileFilter();
        org.apache.rat.license.LicenseSetFactory.LicenseFilter licenseFilter44 = org.apache.rat.license.LicenseSetFactory.LicenseFilter.all;
        java.util.SortedSet<org.apache.rat.license.ILicense> iLicenseSet45 = reportConfiguration42.getLicenses(licenseFilter44);
        org.apache.rat.config.AddLicenseHeaders addLicenseHeaders46 = org.apache.rat.config.AddLicenseHeaders.FALSE;
        reportConfiguration42.setAddLicenseHeaders(addLicenseHeaders46);
        org.apache.rat.utils.Log log48 = null;
        org.apache.rat.ReportConfiguration reportConfiguration49 = new org.apache.rat.ReportConfiguration(log48);
        org.apache.rat.report.claim.ClaimStatistic claimStatistic50 = org.apache.rat.Reporter.report(reportConfiguration49);
        org.apache.rat.license.LicenseSetFactory.LicenseFilter licenseFilter51 = org.apache.rat.license.LicenseSetFactory.LicenseFilter.all;
        org.apache.rat.Reporter.listLicenses(reportConfiguration49, licenseFilter51);
        org.apache.rat.Reporter.listLicenses(reportConfiguration42, licenseFilter51);
        org.apache.rat.utils.Log log54 = null;
        org.apache.rat.ReportConfiguration reportConfiguration55 = new org.apache.rat.ReportConfiguration(log54);
        java.io.FilenameFilter filenameFilter56 = reportConfiguration55.getInputFileFilter();
        org.apache.rat.license.LicenseSetFactory.LicenseFilter licenseFilter57 = org.apache.rat.license.LicenseSetFactory.LicenseFilter.all;
        java.util.SortedSet<org.apache.rat.license.ILicense> iLicenseSet58 = reportConfiguration55.getLicenses(licenseFilter57);
        org.apache.rat.config.AddLicenseHeaders addLicenseHeaders59 = org.apache.rat.config.AddLicenseHeaders.FALSE;
        reportConfiguration55.setAddLicenseHeaders(addLicenseHeaders59);
        org.apache.rat.utils.Log log61 = null;
        org.apache.rat.ReportConfiguration reportConfiguration62 = new org.apache.rat.ReportConfiguration(log61);
        org.apache.rat.report.claim.ClaimStatistic claimStatistic63 = org.apache.rat.Reporter.report(reportConfiguration62);
        org.apache.rat.license.LicenseSetFactory.LicenseFilter licenseFilter64 = org.apache.rat.license.LicenseSetFactory.LicenseFilter.all;
        org.apache.rat.Reporter.listLicenses(reportConfiguration62, licenseFilter64);
        org.apache.rat.Reporter.listLicenses(reportConfiguration55, licenseFilter64);
        org.apache.rat.Reporter.listLicenses(reportConfiguration42, licenseFilter64);
        org.apache.rat.utils.Log log68 = null;
        org.apache.rat.ReportConfiguration reportConfiguration69 = new org.apache.rat.ReportConfiguration(log68);
        org.apache.commons.io.function.IOSupplier<java.io.OutputStream> outputStreamIOSupplier70 = reportConfiguration69.getOutput();
        reportConfiguration42.setOut(outputStreamIOSupplier70);
        org.apache.rat.utils.Log log72 = null;
        org.apache.rat.ReportConfiguration reportConfiguration73 = new org.apache.rat.ReportConfiguration(log72);
        org.apache.rat.report.claim.ClaimStatistic claimStatistic74 = org.apache.rat.Reporter.report(reportConfiguration73);
        org.apache.rat.utils.Log log75 = null;
        org.apache.rat.ReportConfiguration reportConfiguration76 = new org.apache.rat.ReportConfiguration(log75);
        org.apache.rat.report.claim.ClaimStatistic claimStatistic77 = org.apache.rat.Reporter.report(reportConfiguration76);
        org.apache.rat.utils.ReportingSet.Options options78 = org.apache.rat.utils.ReportingSet.Options.OVERWRITE;
        reportConfiguration76.licenseDuplicateOption(options78);
        reportConfiguration73.familyDuplicateOption(options78);
        reportConfiguration42.licenseDuplicateOption(options78);
        reportConfiguration37.familyDuplicateOption(options78);
        org.apache.rat.utils.ReportingSet<java.lang.String> strSet83 = strSet25.setDuplicateOption(options78);
        org.apache.rat.utils.ReportingSet<java.lang.String> strSet84 = strSet6.setDuplicateOption(options78);
        org.junit.Assert.assertNotNull(strArray5);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + true + "'", boolean7 == true);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + true + "'", boolean9 == true);
        org.junit.Assert.assertNotNull(strItor10);
        org.junit.Assert.assertNotNull(objArray13);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray13), "[]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray13), "[]");
        org.junit.Assert.assertNotNull(strStream14);
        org.junit.Assert.assertNull(wildcardComparator15);
        org.junit.Assert.assertNotNull(strStream16);
        org.junit.Assert.assertNull(wildcardComparator17);
        org.junit.Assert.assertNotNull(strItor18);
        org.junit.Assert.assertNotNull(strArray24);
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + true + "'", boolean26 == true);
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + true + "'", boolean28 == true);
        org.junit.Assert.assertNotNull(strItor29);
        org.junit.Assert.assertTrue("'" + int31 + "' != '" + 0 + "'", int31 == 0);
        org.junit.Assert.assertNotNull(strSet33);
        org.junit.Assert.assertNotNull(strSet35);
        org.junit.Assert.assertNull(claimStatistic38);
        org.junit.Assert.assertNull(filenameFilter43);
        org.junit.Assert.assertTrue("'" + licenseFilter44 + "' != '" + org.apache.rat.license.LicenseSetFactory.LicenseFilter.all + "'", licenseFilter44.equals(org.apache.rat.license.LicenseSetFactory.LicenseFilter.all));
        org.junit.Assert.assertNotNull(iLicenseSet45);
        org.junit.Assert.assertTrue("'" + addLicenseHeaders46 + "' != '" + org.apache.rat.config.AddLicenseHeaders.FALSE + "'", addLicenseHeaders46.equals(org.apache.rat.config.AddLicenseHeaders.FALSE));
        org.junit.Assert.assertNull(claimStatistic50);
        org.junit.Assert.assertTrue("'" + licenseFilter51 + "' != '" + org.apache.rat.license.LicenseSetFactory.LicenseFilter.all + "'", licenseFilter51.equals(org.apache.rat.license.LicenseSetFactory.LicenseFilter.all));
        org.junit.Assert.assertNull(filenameFilter56);
        org.junit.Assert.assertTrue("'" + licenseFilter57 + "' != '" + org.apache.rat.license.LicenseSetFactory.LicenseFilter.all + "'", licenseFilter57.equals(org.apache.rat.license.LicenseSetFactory.LicenseFilter.all));
        org.junit.Assert.assertNotNull(iLicenseSet58);
        org.junit.Assert.assertTrue("'" + addLicenseHeaders59 + "' != '" + org.apache.rat.config.AddLicenseHeaders.FALSE + "'", addLicenseHeaders59.equals(org.apache.rat.config.AddLicenseHeaders.FALSE));
        org.junit.Assert.assertNull(claimStatistic63);
        org.junit.Assert.assertTrue("'" + licenseFilter64 + "' != '" + org.apache.rat.license.LicenseSetFactory.LicenseFilter.all + "'", licenseFilter64.equals(org.apache.rat.license.LicenseSetFactory.LicenseFilter.all));
        org.junit.Assert.assertNotNull(outputStreamIOSupplier70);
        org.junit.Assert.assertNull(claimStatistic74);
        org.junit.Assert.assertNull(claimStatistic77);
        org.junit.Assert.assertTrue("'" + options78 + "' != '" + org.apache.rat.utils.ReportingSet.Options.OVERWRITE + "'", options78.equals(org.apache.rat.utils.ReportingSet.Options.OVERWRITE));
        org.junit.Assert.assertNotNull(strSet83);
        org.junit.Assert.assertNotNull(strSet84);
    }

    @Test
    public void test14506() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest29.test14506");
        org.apache.rat.analysis.matchers.SimpleTextMatcher simpleTextMatcher1 = new org.apache.rat.analysis.matchers.SimpleTextMatcher("1e96b21e-f913-4d52-87cc-09323c460281");
        org.apache.rat.analysis.IHeaderMatcher.State state2 = simpleTextMatcher1.finalizeState();
        org.apache.rat.analysis.matchers.NotMatcher notMatcher3 = new org.apache.rat.analysis.matchers.NotMatcher((org.apache.rat.analysis.IHeaderMatcher) simpleTextMatcher1);
        org.junit.Assert.assertTrue("'" + state2 + "' != '" + org.apache.rat.analysis.IHeaderMatcher.State.f + "'", state2.equals(org.apache.rat.analysis.IHeaderMatcher.State.f));
    }

    @Test
    public void test14507() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest29.test14507");
        org.apache.rat.analysis.license.FullTextMatchingLicense fullTextMatchingLicense0 = new org.apache.rat.analysis.license.FullTextMatchingLicense();
        fullTextMatchingLicense0.setLicenseFamilyName("hi!");
        java.lang.String str3 = fullTextMatchingLicense0.getLicenseFamilyCategory();
        java.lang.String str4 = fullTextMatchingLicense0.getLicenseFamilyName();
        fullTextMatchingLicense0.setLicenseFamilyName("SpdxBuilder: null");
        java.lang.String str7 = fullTextMatchingLicense0.getNotes();
        java.lang.String str8 = fullTextMatchingLicense0.getLicenseFamilyCategory();
        org.junit.Assert.assertNull(str3);
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "hi!" + "'", str4, "hi!");
        org.junit.Assert.assertNull(str7);
        org.junit.Assert.assertNull(str8);
    }

    @Test
    public void test14508() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest29.test14508");
        // The following exception was thrown during execution in test generation
        try {
            org.apache.rat.license.LicenseSetFactory.LicenseFilter licenseFilter1 = org.apache.rat.license.LicenseSetFactory.LicenseFilter.fromText("Datum [ name ='9DF69CA9-2229-47B6-966B-221652FD7D08',value ='SpdxBuilder: null ']");
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: No enum constant org.apache.rat.license.LicenseSetFactory.LicenseFilter.datum [ name ='9df69ca9-2229-47b6-966b-221652fd7d08',value ='spdxbuilder: null ']");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
    }

    @Test
    public void test14509() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest29.test14509");
        org.apache.rat.report.claim.ClaimStatistic claimStatistic0 = new org.apache.rat.report.claim.ClaimStatistic();
        claimStatistic0.setNumApproved((int) (short) 10);
        java.util.Map<java.lang.String, java.lang.Integer> strMap3 = null;
        claimStatistic0.setDocumentCategoryMap(strMap3);
        java.util.Map<java.lang.String, java.lang.Integer> strMap5 = claimStatistic0.getLicenseFileNameMap();
        claimStatistic0.setNumUnknown((int) (byte) -1);
        java.util.Map<java.lang.String, java.lang.Integer> strMap8 = null;
        claimStatistic0.setLicenseFileCodeMap(strMap8);
        java.util.Map<java.lang.String, java.lang.Integer> strMap10 = claimStatistic0.getLicenseFileCodeMap();
        int int11 = claimStatistic0.getNumApproved();
        claimStatistic0.setNumGenerated((int) (byte) -1);
        java.util.Map<java.lang.String, java.lang.Integer> strMap14 = claimStatistic0.getLicenseFileCodeMap();
        java.util.Map<java.lang.String, java.lang.Integer> strMap15 = claimStatistic0.getDocumentCategoryMap();
        int int16 = claimStatistic0.getNumGenerated();
        org.junit.Assert.assertNull(strMap5);
        org.junit.Assert.assertNull(strMap10);
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 10 + "'", int11 == 10);
        org.junit.Assert.assertNull(strMap14);
        org.junit.Assert.assertNull(strMap15);
        org.junit.Assert.assertTrue("'" + int16 + "' != '" + (-1) + "'", int16 == (-1));
    }

    @Test
    public void test14510() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest29.test14510");
        org.apache.rat.configuration.Format format0 = org.apache.rat.configuration.Format.XML;
        org.apache.rat.configuration.LicenseReader licenseReader1 = format0.licenseReader();
        java.util.SortedSet<org.apache.rat.license.ILicense> iLicenseSet2 = licenseReader1.readLicenses();
        java.lang.String[] strArray8 = new java.lang.String[] { "http://org/apache/rat/meta-data#LicenseFamilyCategory", "Datum [ name ='http://org/apache/rat/meta-data#LicenseFamilyCategory',value ='GPL1  ']", "MANIFEST.MF", "AllBuilder:", "The MIT License" };
        org.apache.rat.utils.ReportingSet<java.lang.String> strSet9 = new org.apache.rat.utils.ReportingSet<java.lang.String>();
        boolean boolean10 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strSet9, strArray8);
        boolean boolean12 = strSet9.addIfNotPresent("http://org/apache/rat/meta-data#LicenseFamilyName");
        boolean boolean14 = strSet9.addIfNotPresent("ef7a8b13-64c3-4510-bb0c-dbf208e1e73f");
        java.util.function.Function<java.lang.String, java.lang.String> strFunction15 = null;
        org.apache.rat.utils.ReportingSet<java.lang.String> strSet16 = strSet9.setMsgFormat(strFunction15);
        boolean boolean17 = strSet9.isEmpty();
        org.apache.rat.license.LicenseSetFactory licenseSetFactory18 = new org.apache.rat.license.LicenseSetFactory(iLicenseSet2, (java.util.Collection<java.lang.String>) strSet9);
        boolean boolean19 = strSet9.isEmpty();
        org.apache.rat.utils.ReportingSet<java.lang.String> strSet21 = strSet9.tailSet("MANIFEST.MF");
        java.util.Comparator<? super java.lang.String> wildcardComparator22 = strSet9.comparator();
        org.apache.rat.utils.ReportingSet<java.lang.String> strSet24 = strSet9.headSet("c819f60c-c781-49b6-ae3a-5a74de014a4d");
        java.lang.String str25 = strSet9.first();
        org.apache.rat.analysis.matchers.FullTextMatcher fullTextMatcher28 = new org.apache.rat.analysis.matchers.FullTextMatcher("notice");
        boolean boolean30 = fullTextMatcher28.doMatch("2953E6CB-20A5-4DCF-A9F5-85C51CC8C635");
        java.lang.String str31 = fullTextMatcher28.getId();
        fullTextMatcher28.reset();
        org.apache.rat.analysis.matchers.NotMatcher notMatcher33 = new org.apache.rat.analysis.matchers.NotMatcher("http://org/apache/rat/meta-data#HeaderSample", (org.apache.rat.analysis.IHeaderMatcher) fullTextMatcher28);
        org.apache.rat.analysis.IHeaderMatcher.State state34 = notMatcher33.finalizeState();
        java.lang.String str35 = state34.toString();
        boolean boolean36 = strSet9.equals((java.lang.Object) state34);
        org.junit.Assert.assertTrue("'" + format0 + "' != '" + org.apache.rat.configuration.Format.XML + "'", format0.equals(org.apache.rat.configuration.Format.XML));
        org.junit.Assert.assertNotNull(licenseReader1);
        org.junit.Assert.assertNotNull(iLicenseSet2);
        org.junit.Assert.assertNotNull(strArray8);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + true + "'", boolean10 == true);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + true + "'", boolean12 == true);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + true + "'", boolean14 == true);
        org.junit.Assert.assertNotNull(strSet16);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + false + "'", boolean17 == false);
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + false + "'", boolean19 == false);
        org.junit.Assert.assertNotNull(strSet21);
        org.junit.Assert.assertNull(wildcardComparator22);
        org.junit.Assert.assertNotNull(strSet24);
        org.junit.Assert.assertEquals("'" + str25 + "' != '" + "AllBuilder:" + "'", str25, "AllBuilder:");
        org.junit.Assert.assertTrue("'" + boolean30 + "' != '" + false + "'", boolean30 == false);
// flaky:         org.junit.Assert.assertEquals("'" + str31 + "' != '" + "7de4305d-8409-4495-a80e-9977700e7c00" + "'", str31, "7de4305d-8409-4495-a80e-9977700e7c00");
        org.junit.Assert.assertTrue("'" + state34 + "' != '" + org.apache.rat.analysis.IHeaderMatcher.State.t + "'", state34.equals(org.apache.rat.analysis.IHeaderMatcher.State.t));
        org.junit.Assert.assertEquals("'" + str35 + "' != '" + "t true" + "'", str35, "t true");
        org.junit.Assert.assertTrue("'" + boolean36 + "' != '" + false + "'", boolean36 == false);
    }

    @Test
    public void test14511() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest29.test14511");
        org.apache.rat.configuration.builders.NotBuilder notBuilder0 = org.apache.rat.analysis.IHeaderMatcher.Builder.not();
        boolean boolean1 = notBuilder0.hasId();
        org.apache.rat.configuration.builders.CopyrightBuilder copyrightBuilder2 = org.apache.rat.analysis.IHeaderMatcher.Builder.copyright();
        org.apache.rat.configuration.builders.CopyrightBuilder copyrightBuilder4 = copyrightBuilder2.setStart("OASIS");
        org.apache.rat.analysis.IHeaderMatcher iHeaderMatcher5 = copyrightBuilder2.build();
        org.apache.rat.configuration.builders.CopyrightBuilder copyrightBuilder7 = copyrightBuilder2.setStart(".cvsignore");
        java.lang.String str8 = copyrightBuilder7.toString();
        org.apache.rat.configuration.builders.AbstractBuilder abstractBuilder9 = notBuilder0.add((org.apache.rat.analysis.IHeaderMatcher.Builder) copyrightBuilder7);
        java.lang.String str10 = notBuilder0.toString();
        org.apache.rat.configuration.builders.AllBuilder allBuilder11 = new org.apache.rat.configuration.builders.AllBuilder();
        java.lang.String str12 = allBuilder11.toString();
        java.util.List<org.apache.rat.analysis.IHeaderMatcher> iHeaderMatcherList13 = allBuilder11.getChildren();
        org.apache.rat.configuration.builders.MatcherRefBuilder matcherRefBuilder14 = new org.apache.rat.configuration.builders.MatcherRefBuilder();
        org.apache.rat.configuration.builders.AbstractBuilder abstractBuilder15 = allBuilder11.add((org.apache.rat.analysis.IHeaderMatcher.Builder) matcherRefBuilder14);
        org.apache.rat.configuration.builders.MatcherRefBuilder matcherRefBuilder17 = matcherRefBuilder14.setRefId("http:");
        java.util.Map<java.lang.String, org.apache.rat.analysis.IHeaderMatcher> strMap18 = null;
        org.apache.rat.configuration.builders.MatcherRefBuilder matcherRefBuilder19 = matcherRefBuilder17.setMatchers(strMap18);
        org.apache.rat.configuration.builders.MatcherRefBuilder matcherRefBuilder21 = matcherRefBuilder19.setRefId("");
        java.util.Map<java.lang.String, org.apache.rat.analysis.IHeaderMatcher> strMap22 = null;
        org.apache.rat.configuration.builders.MatcherRefBuilder matcherRefBuilder23 = matcherRefBuilder21.setMatchers(strMap22);
        java.lang.String str24 = matcherRefBuilder23.toString();
        org.apache.rat.configuration.builders.MatcherRefBuilder matcherRefBuilder26 = matcherRefBuilder23.setRefId("RegexBuilder: 6f2b4022-35cc-4b09-8df5-79e286566ad3");
        java.lang.String str27 = matcherRefBuilder26.toString();
        org.apache.rat.configuration.builders.MatcherRefBuilder matcherRefBuilder29 = matcherRefBuilder26.setRefId("W3C  ");
        org.apache.rat.configuration.builders.AbstractBuilder abstractBuilder30 = notBuilder0.add((org.apache.rat.analysis.IHeaderMatcher.Builder) matcherRefBuilder29);
        // The following exception was thrown during execution in test generation
        try {
            org.apache.rat.configuration.builders.AbstractBuilder abstractBuilder32 = notBuilder0.setResource("TMF");
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(notBuilder0);
        org.junit.Assert.assertTrue("'" + boolean1 + "' != '" + false + "'", boolean1 == false);
        org.junit.Assert.assertNotNull(copyrightBuilder2);
        org.junit.Assert.assertNotNull(copyrightBuilder4);
        org.junit.Assert.assertNotNull(iHeaderMatcher5);
        org.junit.Assert.assertNotNull(copyrightBuilder7);
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "Copyright Builder: s:.cvsignore e:null o:null" + "'", str8, "Copyright Builder: s:.cvsignore e:null o:null");
        org.junit.Assert.assertNotNull(abstractBuilder9);
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "NotBuilder: Copyright Builder: s:.cvsignore e:null o:null" + "'", str10, "NotBuilder: Copyright Builder: s:.cvsignore e:null o:null");
        org.junit.Assert.assertEquals("'" + str12 + "' != '" + "AllBuilder:" + "'", str12, "AllBuilder:");
        org.junit.Assert.assertNotNull(iHeaderMatcherList13);
        org.junit.Assert.assertNotNull(abstractBuilder15);
        org.junit.Assert.assertNotNull(matcherRefBuilder17);
        org.junit.Assert.assertNotNull(matcherRefBuilder19);
        org.junit.Assert.assertNotNull(matcherRefBuilder21);
        org.junit.Assert.assertNotNull(matcherRefBuilder23);
        org.junit.Assert.assertEquals("'" + str24 + "' != '" + "MathcerRefBuilder: " + "'", str24, "MathcerRefBuilder: ");
        org.junit.Assert.assertNotNull(matcherRefBuilder26);
        org.junit.Assert.assertEquals("'" + str27 + "' != '" + "MathcerRefBuilder: RegexBuilder: 6f2b4022-35cc-4b09-8df5-79e286566ad3" + "'", str27, "MathcerRefBuilder: RegexBuilder: 6f2b4022-35cc-4b09-8df5-79e286566ad3");
        org.junit.Assert.assertNotNull(matcherRefBuilder29);
        org.junit.Assert.assertNotNull(abstractBuilder30);
    }

    @Test
    public void test14512() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest29.test14512");
        org.apache.rat.utils.ReportingSet<java.lang.String> strSet0 = new org.apache.rat.utils.ReportingSet<java.lang.String>();
        org.apache.rat.utils.ReportingSet<java.lang.String> strSet2 = strSet0.tailSet("hi!");
        org.apache.rat.configuration.LicenseReader[] licenseReaderArray3 = new org.apache.rat.configuration.LicenseReader[] {};
        org.apache.rat.configuration.LicenseReader[] licenseReaderArray4 = strSet2.toArray(licenseReaderArray3);
        strSet2.clear();
        boolean boolean6 = strSet2.isEmpty();
        java.lang.Object[] objArray7 = strSet2.toArray();
        java.util.stream.Stream<java.lang.String> strStream8 = strSet2.parallelStream();
        org.apache.rat.utils.Log log9 = null;
        org.apache.rat.ReportConfiguration reportConfiguration10 = new org.apache.rat.ReportConfiguration(log9);
        org.apache.rat.report.claim.ClaimStatistic claimStatistic11 = org.apache.rat.Reporter.report(reportConfiguration10);
        org.apache.commons.io.function.IOSupplier<java.io.OutputStream> outputStreamIOSupplier12 = reportConfiguration10.getOutput();
        org.apache.rat.license.ILicense iLicense13 = null;
        reportConfiguration10.addLicense(iLicense13);
        org.apache.rat.Defaults.Builder builder15 = org.apache.rat.Defaults.builder();
        org.apache.rat.Defaults defaults16 = builder15.build();
        reportConfiguration10.setFrom(defaults16);
        org.apache.rat.license.LicenseSetFactory.LicenseFilter licenseFilter18 = org.apache.rat.license.LicenseSetFactory.LicenseFilter.all;
        java.util.SortedSet<org.apache.rat.license.ILicense> iLicenseSet19 = defaults16.getLicenses(licenseFilter18);
        boolean boolean20 = strSet2.equals((java.lang.Object) defaults16);
        boolean boolean22 = strSet2.add("http://org/apache/rat/meta-data#HeaderSample null");
        org.junit.Assert.assertNotNull(strSet2);
        org.junit.Assert.assertNotNull(licenseReaderArray3);
        org.junit.Assert.assertNotNull(licenseReaderArray4);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + true + "'", boolean6 == true);
        org.junit.Assert.assertNotNull(objArray7);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray7), "[]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray7), "[]");
        org.junit.Assert.assertNotNull(strStream8);
        org.junit.Assert.assertNull(claimStatistic11);
        org.junit.Assert.assertNotNull(outputStreamIOSupplier12);
        org.junit.Assert.assertNotNull(builder15);
        org.junit.Assert.assertNotNull(defaults16);
        org.junit.Assert.assertTrue("'" + licenseFilter18 + "' != '" + org.apache.rat.license.LicenseSetFactory.LicenseFilter.all + "'", licenseFilter18.equals(org.apache.rat.license.LicenseSetFactory.LicenseFilter.all));
        org.junit.Assert.assertNotNull(iLicenseSet19);
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + false + "'", boolean20 == false);
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + true + "'", boolean22 == true);
    }

    @Test
    public void test14513() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest29.test14513");
        java.io.File file0 = null;
        org.apache.rat.config.SourceCodeManagementSystems sourceCodeManagementSystems1 = org.apache.rat.config.SourceCodeManagementSystems.CVS;
        java.util.List<java.lang.String> strList2 = sourceCodeManagementSystems1.getExclusions();
        boolean boolean3 = sourceCodeManagementSystems1.hasIgnoreFile();
        java.lang.String str4 = sourceCodeManagementSystems1.getIgnoreFile();
        java.util.List<java.lang.String> strList5 = sourceCodeManagementSystems1.getExclusions();
        java.io.FilenameFilter filenameFilter6 = org.apache.rat.Report.parseExclusions(strList5);
        // The following exception was thrown during execution in test generation
        try {
            org.apache.rat.walker.ArchiveWalker archiveWalker7 = new org.apache.rat.walker.ArchiveWalker(file0, filenameFilter6);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + sourceCodeManagementSystems1 + "' != '" + org.apache.rat.config.SourceCodeManagementSystems.CVS + "'", sourceCodeManagementSystems1.equals(org.apache.rat.config.SourceCodeManagementSystems.CVS));
        org.junit.Assert.assertNotNull(strList2);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + true + "'", boolean3 == true);
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + ".cvsignore" + "'", str4, ".cvsignore");
        org.junit.Assert.assertNotNull(strList5);
        org.junit.Assert.assertNotNull(filenameFilter6);
    }

    @Test
    public void test14514() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest29.test14514");
        org.apache.rat.api.MetaData.Datum datum2 = new org.apache.rat.api.MetaData.Datum("11370891-c763-426b-9547-57e87d991d61 null", "997eb9b0-0c36-41cf-b2ac-fd643b67e667");
    }

    @Test
    public void test14515() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest29.test14515");
        org.apache.rat.analysis.matchers.CopyrightMatcher copyrightMatcher4 = new org.apache.rat.analysis.matchers.CopyrightMatcher("", ".cvsignore", "aba50df1-5ba7-491a-a427-87194604c00d", "DOJO ");
        java.lang.Class<?> wildcardClass5 = copyrightMatcher4.getClass();
        org.junit.Assert.assertNotNull(wildcardClass5);
    }

    @Test
    public void test14516() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest29.test14516");
        org.apache.rat.analysis.matchers.FullTextMatcher fullTextMatcher2 = new org.apache.rat.analysis.matchers.FullTextMatcher("notice", "3c840dc2-bef0-42b5-b26c-35a568d53a24");
        java.lang.String str3 = fullTextMatcher2.getId();
        fullTextMatcher2.reset();
        org.junit.Assert.assertEquals("'" + str3 + "' != '" + "notice" + "'", str3, "notice");
    }

    @Test
    public void test14517() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest29.test14517");
        org.apache.rat.Defaults.Builder builder0 = org.apache.rat.Defaults.builder();
        org.apache.rat.Defaults.Builder builder2 = builder0.add("META-DATA#LICENSEFAMILYNAME");
        org.apache.rat.Defaults.Builder builder4 = builder0.remove("Copyright Builder: s:null e:null o:null");
        org.apache.rat.Defaults.Builder builder5 = builder4.noDefault();
        org.apache.rat.Defaults.Builder builder7 = builder4.add("MathcerRefBuilder: MathcerRefBuilder: null");
        java.net.URL uRL8 = null;
        // The following exception was thrown during execution in test generation
        try {
            org.apache.rat.Defaults.Builder builder9 = builder7.add(uRL8);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(builder0);
        org.junit.Assert.assertNotNull(builder2);
        org.junit.Assert.assertNotNull(builder4);
        org.junit.Assert.assertNotNull(builder5);
        org.junit.Assert.assertNotNull(builder7);
    }

    @Test
    public void test14518() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest29.test14518");
        org.apache.rat.report.claim.ClaimStatistic claimStatistic0 = new org.apache.rat.report.claim.ClaimStatistic();
        claimStatistic0.setNumUnApproved((int) (short) 10);
        claimStatistic0.setNumUnApproved((-3));
    }

    @Test
    public void test14519() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest29.test14519");
        org.apache.rat.document.ToNameTransformer toNameTransformer0 = new org.apache.rat.document.ToNameTransformer();
        org.apache.rat.report.claim.ClaimStatistic claimStatistic1 = new org.apache.rat.report.claim.ClaimStatistic();
        claimStatistic1.setNumApproved((int) (short) 10);
        claimStatistic1.setNumUnknown(30);
        java.lang.Object obj6 = toNameTransformer0.transform((java.lang.Object) claimStatistic1);
        org.apache.rat.license.ILicenseFamily[] iLicenseFamilyArray7 = new org.apache.rat.license.ILicenseFamily[] {};
        java.util.ArrayList<org.apache.rat.license.ILicenseFamily> iLicenseFamilyList8 = new java.util.ArrayList<org.apache.rat.license.ILicenseFamily>();
        boolean boolean9 = java.util.Collections.addAll((java.util.Collection<org.apache.rat.license.ILicenseFamily>) iLicenseFamilyList8, iLicenseFamilyArray7);
        org.apache.rat.policy.DefaultPolicy defaultPolicy10 = new org.apache.rat.policy.DefaultPolicy((java.util.Collection<org.apache.rat.license.ILicenseFamily>) iLicenseFamilyList8);
        org.apache.rat.api.Document document11 = null;
        defaultPolicy10.analyse(document11);
        org.apache.rat.api.Document document13 = null;
        defaultPolicy10.analyse(document13);
        org.apache.rat.api.Document document15 = null;
        defaultPolicy10.analyse(document15);
        java.lang.Object obj17 = toNameTransformer0.transform((java.lang.Object) defaultPolicy10);
        org.apache.rat.utils.Log log18 = null;
        org.apache.rat.ReportConfiguration reportConfiguration19 = new org.apache.rat.ReportConfiguration(log18);
        org.apache.rat.utils.ReportingSet.Options options20 = org.apache.rat.utils.ReportingSet.Options.OVERWRITE;
        reportConfiguration19.licenseDuplicateOption(options20);
        org.apache.rat.utils.Log log22 = null;
        org.apache.rat.ReportConfiguration reportConfiguration23 = new org.apache.rat.ReportConfiguration(log22);
        java.io.FilenameFilter filenameFilter24 = reportConfiguration23.getInputFileFilter();
        org.apache.rat.license.LicenseSetFactory.LicenseFilter licenseFilter25 = org.apache.rat.license.LicenseSetFactory.LicenseFilter.all;
        java.util.SortedSet<org.apache.rat.license.ILicense> iLicenseSet26 = reportConfiguration23.getLicenses(licenseFilter25);
        org.apache.rat.config.AddLicenseHeaders addLicenseHeaders27 = org.apache.rat.config.AddLicenseHeaders.FALSE;
        reportConfiguration23.setAddLicenseHeaders(addLicenseHeaders27);
        org.apache.rat.utils.Log log29 = null;
        org.apache.rat.ReportConfiguration reportConfiguration30 = new org.apache.rat.ReportConfiguration(log29);
        org.apache.rat.report.claim.ClaimStatistic claimStatistic31 = org.apache.rat.Reporter.report(reportConfiguration30);
        org.apache.rat.license.LicenseSetFactory.LicenseFilter licenseFilter32 = org.apache.rat.license.LicenseSetFactory.LicenseFilter.all;
        org.apache.rat.Reporter.listLicenses(reportConfiguration30, licenseFilter32);
        org.apache.rat.Reporter.listLicenses(reportConfiguration23, licenseFilter32);
        org.apache.rat.utils.Log log35 = null;
        org.apache.rat.ReportConfiguration reportConfiguration36 = new org.apache.rat.ReportConfiguration(log35);
        java.io.FilenameFilter filenameFilter37 = reportConfiguration36.getInputFileFilter();
        org.apache.rat.license.LicenseSetFactory.LicenseFilter licenseFilter38 = org.apache.rat.license.LicenseSetFactory.LicenseFilter.all;
        java.util.SortedSet<org.apache.rat.license.ILicense> iLicenseSet39 = reportConfiguration36.getLicenses(licenseFilter38);
        org.apache.rat.config.AddLicenseHeaders addLicenseHeaders40 = org.apache.rat.config.AddLicenseHeaders.FALSE;
        reportConfiguration36.setAddLicenseHeaders(addLicenseHeaders40);
        org.apache.rat.utils.Log log42 = null;
        org.apache.rat.ReportConfiguration reportConfiguration43 = new org.apache.rat.ReportConfiguration(log42);
        org.apache.rat.report.claim.ClaimStatistic claimStatistic44 = org.apache.rat.Reporter.report(reportConfiguration43);
        org.apache.rat.license.LicenseSetFactory.LicenseFilter licenseFilter45 = org.apache.rat.license.LicenseSetFactory.LicenseFilter.all;
        org.apache.rat.Reporter.listLicenses(reportConfiguration43, licenseFilter45);
        org.apache.rat.Reporter.listLicenses(reportConfiguration36, licenseFilter45);
        org.apache.rat.Reporter.listLicenses(reportConfiguration23, licenseFilter45);
        org.apache.rat.utils.Log log49 = null;
        org.apache.rat.ReportConfiguration reportConfiguration50 = new org.apache.rat.ReportConfiguration(log49);
        org.apache.commons.io.function.IOSupplier<java.io.OutputStream> outputStreamIOSupplier51 = reportConfiguration50.getOutput();
        reportConfiguration23.setOut(outputStreamIOSupplier51);
        org.apache.rat.utils.Log.Level level53 = org.apache.rat.utils.Log.Level.WARN;
        reportConfiguration23.logLicenseCollisions(level53);
        org.apache.commons.io.filefilter.IOFileFilter iOFileFilter55 = reportConfiguration23.getDirectoryFilter();
        reportConfiguration19.setInputFileFilter((java.io.FilenameFilter) iOFileFilter55);
        java.nio.file.Path path57 = null;
        boolean boolean58 = iOFileFilter55.matches(path57);
        org.apache.commons.io.filefilter.IOFileFilter iOFileFilter59 = iOFileFilter55.negate();
        java.nio.file.Path path60 = null;
        boolean boolean61 = iOFileFilter55.matches(path60);
        org.apache.commons.io.filefilter.IOFileFilter iOFileFilter62 = iOFileFilter55.negate();
        org.apache.rat.utils.Log log63 = null;
        org.apache.rat.ReportConfiguration reportConfiguration64 = new org.apache.rat.ReportConfiguration(log63);
        org.apache.rat.report.claim.ClaimStatistic claimStatistic65 = org.apache.rat.Reporter.report(reportConfiguration64);
        org.apache.rat.utils.Log log66 = null;
        org.apache.rat.ReportConfiguration reportConfiguration67 = new org.apache.rat.ReportConfiguration(log66);
        org.apache.rat.report.claim.ClaimStatistic claimStatistic68 = org.apache.rat.Reporter.report(reportConfiguration67);
        org.apache.rat.utils.ReportingSet.Options options69 = org.apache.rat.utils.ReportingSet.Options.OVERWRITE;
        reportConfiguration67.licenseDuplicateOption(options69);
        reportConfiguration64.familyDuplicateOption(options69);
        org.apache.commons.io.function.IOSupplier<java.io.PrintWriter> printWriterIOSupplier72 = reportConfiguration64.getWriter();
        boolean boolean73 = reportConfiguration64.isAddingLicensesForced();
        java.io.FilenameFilter filenameFilter74 = reportConfiguration64.getInputFileFilter();
        java.io.FilenameFilter filenameFilter75 = reportConfiguration64.getInputFileFilter();
        boolean boolean76 = reportConfiguration64.isStyleReport();
        org.apache.commons.io.function.IOSupplier<java.io.OutputStream> outputStreamIOSupplier77 = reportConfiguration64.getOutput();
        org.apache.commons.io.filefilter.IOFileFilter iOFileFilter78 = reportConfiguration64.getDirectoryFilter();
        org.apache.commons.io.filefilter.IOFileFilter iOFileFilter79 = reportConfiguration64.getDirectoryFilter();
        org.apache.commons.io.filefilter.IOFileFilter iOFileFilter80 = iOFileFilter55.and(iOFileFilter79);
        java.lang.Object obj81 = toNameTransformer0.transform((java.lang.Object) iOFileFilter55);
        java.lang.Object obj82 = null;
        java.lang.Object obj83 = toNameTransformer0.transform(obj82);
        java.lang.Object obj85 = toNameTransformer0.transform((java.lang.Object) "AnyBuilder:\nMathcerRefBuilder: null\nAllBuilder:\nCopyright Builder: s:223f0aba-15d4-49e9-901e-5740c137aebf e:null o:null\nMathcerRefBuilder: null\nCopyright Builder: s:223f0aba-15d4-49e9-901e-5740c137aebf e:null o:null\nCopyright Builder: s:null e:null o:null\nCopyright Builder: s:null e:.cvsignore o:null\nCopyright Builder: s:null e:.cvsignore o:null\nCopyright Builder: s:OASIS e:null o:null\nAnyBuilder:\nMathcerRefBuilder: null\nCopyright Builder: s:null e:null o:null\nMathcerRefBuilder: null\nRegexBuilder: ef75a6e8-7197-4e9e-83bf-f8b367e6b3c5");
        org.junit.Assert.assertNull(obj6);
        org.junit.Assert.assertNotNull(iLicenseFamilyArray7);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertNull(obj17);
        org.junit.Assert.assertTrue("'" + options20 + "' != '" + org.apache.rat.utils.ReportingSet.Options.OVERWRITE + "'", options20.equals(org.apache.rat.utils.ReportingSet.Options.OVERWRITE));
        org.junit.Assert.assertNull(filenameFilter24);
        org.junit.Assert.assertTrue("'" + licenseFilter25 + "' != '" + org.apache.rat.license.LicenseSetFactory.LicenseFilter.all + "'", licenseFilter25.equals(org.apache.rat.license.LicenseSetFactory.LicenseFilter.all));
        org.junit.Assert.assertNotNull(iLicenseSet26);
        org.junit.Assert.assertTrue("'" + addLicenseHeaders27 + "' != '" + org.apache.rat.config.AddLicenseHeaders.FALSE + "'", addLicenseHeaders27.equals(org.apache.rat.config.AddLicenseHeaders.FALSE));
        org.junit.Assert.assertNull(claimStatistic31);
        org.junit.Assert.assertTrue("'" + licenseFilter32 + "' != '" + org.apache.rat.license.LicenseSetFactory.LicenseFilter.all + "'", licenseFilter32.equals(org.apache.rat.license.LicenseSetFactory.LicenseFilter.all));
        org.junit.Assert.assertNull(filenameFilter37);
        org.junit.Assert.assertTrue("'" + licenseFilter38 + "' != '" + org.apache.rat.license.LicenseSetFactory.LicenseFilter.all + "'", licenseFilter38.equals(org.apache.rat.license.LicenseSetFactory.LicenseFilter.all));
        org.junit.Assert.assertNotNull(iLicenseSet39);
        org.junit.Assert.assertTrue("'" + addLicenseHeaders40 + "' != '" + org.apache.rat.config.AddLicenseHeaders.FALSE + "'", addLicenseHeaders40.equals(org.apache.rat.config.AddLicenseHeaders.FALSE));
        org.junit.Assert.assertNull(claimStatistic44);
        org.junit.Assert.assertTrue("'" + licenseFilter45 + "' != '" + org.apache.rat.license.LicenseSetFactory.LicenseFilter.all + "'", licenseFilter45.equals(org.apache.rat.license.LicenseSetFactory.LicenseFilter.all));
        org.junit.Assert.assertNotNull(outputStreamIOSupplier51);
        org.junit.Assert.assertTrue("'" + level53 + "' != '" + org.apache.rat.utils.Log.Level.WARN + "'", level53.equals(org.apache.rat.utils.Log.Level.WARN));
        org.junit.Assert.assertNotNull(iOFileFilter55);
        org.junit.Assert.assertTrue("'" + boolean58 + "' != '" + false + "'", boolean58 == false);
        org.junit.Assert.assertNotNull(iOFileFilter59);
        org.junit.Assert.assertTrue("'" + boolean61 + "' != '" + false + "'", boolean61 == false);
        org.junit.Assert.assertNotNull(iOFileFilter62);
        org.junit.Assert.assertNull(claimStatistic65);
        org.junit.Assert.assertNull(claimStatistic68);
        org.junit.Assert.assertTrue("'" + options69 + "' != '" + org.apache.rat.utils.ReportingSet.Options.OVERWRITE + "'", options69.equals(org.apache.rat.utils.ReportingSet.Options.OVERWRITE));
        org.junit.Assert.assertNotNull(printWriterIOSupplier72);
        org.junit.Assert.assertTrue("'" + boolean73 + "' != '" + false + "'", boolean73 == false);
        org.junit.Assert.assertNull(filenameFilter74);
        org.junit.Assert.assertNull(filenameFilter75);
        org.junit.Assert.assertTrue("'" + boolean76 + "' != '" + true + "'", boolean76 == true);
        org.junit.Assert.assertNotNull(outputStreamIOSupplier77);
        org.junit.Assert.assertNotNull(iOFileFilter78);
        org.junit.Assert.assertNotNull(iOFileFilter79);
        org.junit.Assert.assertNotNull(iOFileFilter80);
        org.junit.Assert.assertNull(obj81);
        org.junit.Assert.assertNull(obj83);
        org.junit.Assert.assertNull(obj85);
    }

    @Test
    public void test14520() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest29.test14520");
        org.apache.rat.api.MetaData metaData0 = new org.apache.rat.api.MetaData();
        java.lang.String str2 = metaData0.value("COMMON DEVELOPMENT AND DISTRIBUTION LICENSE Version 1.0");
        java.lang.String str4 = metaData0.value("W3C Document Copyright");
        boolean boolean6 = metaData0.clear("hi!");
        java.lang.String str8 = metaData0.value("true");
        metaData0.clear();
        boolean boolean11 = metaData0.clear("W3CD ");
        org.apache.rat.api.MetaData.Datum datum13 = metaData0.get("");
        org.apache.rat.api.MetaData metaData14 = new org.apache.rat.api.MetaData();
        java.lang.String str16 = metaData14.value("COMMON DEVELOPMENT AND DISTRIBUTION LICENSE Version 1.0");
        org.apache.rat.api.MetaData.Datum datum18 = metaData14.get("Copyright Builder: s:null e:.cvsignore o:null");
        java.lang.String str20 = metaData14.value("W3C Software Copyright");
        org.apache.rat.api.MetaData.Datum datum22 = metaData14.get("255ef7d8-e270-4908-9de7-bebc7df6eb88");
        org.apache.rat.api.MetaData.Datum datum24 = metaData14.get(".bzrignore");
        java.lang.String str26 = metaData14.value("SpdxBuilder: 7d01b1b3-e7b9-4f85-b3dd-e0334dea8844");
        org.apache.rat.api.MetaData.Datum datum27 = org.apache.rat.api.MetaData.RAT_LICENSE_FAMILY_NAME_DATUM_UNKNOWN;
        java.lang.String str28 = datum27.toString();
        metaData14.add(datum27);
        metaData0.set(datum27);
        java.lang.String str31 = datum27.getValue();
        org.junit.Assert.assertNull(str2);
        org.junit.Assert.assertNull(str4);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertNull(str8);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
        org.junit.Assert.assertNull(datum13);
        org.junit.Assert.assertNull(str16);
        org.junit.Assert.assertNull(datum18);
        org.junit.Assert.assertNull(str20);
        org.junit.Assert.assertNull(datum22);
        org.junit.Assert.assertNull(datum24);
        org.junit.Assert.assertNull(str26);
        org.junit.Assert.assertNotNull(datum27);
        org.junit.Assert.assertEquals("'" + str28 + "' != '" + "Datum [ name ='http://org/apache/rat/meta-data#LicenseFamilyName',value ='????? ']" + "'", str28, "Datum [ name ='http://org/apache/rat/meta-data#LicenseFamilyName',value ='????? ']");
        org.junit.Assert.assertEquals("'" + str31 + "' != '" + "?????" + "'", str31, "?????");
    }

    @Test
    public void test14521() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest29.test14521");
        boolean boolean1 = org.apache.rat.document.impl.guesser.BinaryGuesser.isAudio("38e4211d0f244ec0aa5c260c68412f39");
        org.junit.Assert.assertTrue("'" + boolean1 + "' != '" + false + "'", boolean1 == false);
    }

    @Test
    public void test14522() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest29.test14522");
        org.apache.rat.utils.Log log0 = null;
        org.apache.rat.ReportConfiguration reportConfiguration1 = new org.apache.rat.ReportConfiguration(log0);
        reportConfiguration1.addApprovedLicenseCategory(".cvsignore");
        org.apache.rat.utils.Log log4 = null;
        org.apache.rat.ReportConfiguration reportConfiguration5 = new org.apache.rat.ReportConfiguration(log4);
        java.io.FilenameFilter filenameFilter6 = reportConfiguration5.getInputFileFilter();
        org.apache.rat.license.LicenseSetFactory.LicenseFilter licenseFilter7 = org.apache.rat.license.LicenseSetFactory.LicenseFilter.all;
        java.util.SortedSet<org.apache.rat.license.ILicense> iLicenseSet8 = reportConfiguration5.getLicenses(licenseFilter7);
        reportConfiguration1.addLicensesIfNotPresent((java.util.Collection<org.apache.rat.license.ILicense>) iLicenseSet8);
        reportConfiguration1.removeApprovedLicenseCategory("The MIT License");
        org.apache.rat.license.ILicense iLicense12 = null;
        reportConfiguration1.addLicense(iLicense12);
        org.apache.rat.license.ILicense iLicense14 = null;
        reportConfiguration1.addLicense(iLicense14);
        org.apache.rat.utils.Log log16 = null;
        org.apache.rat.ReportConfiguration reportConfiguration17 = new org.apache.rat.ReportConfiguration(log16);
        org.apache.rat.report.claim.ClaimStatistic claimStatistic18 = org.apache.rat.Reporter.report(reportConfiguration17);
        org.apache.commons.io.function.IOSupplier<java.io.OutputStream> outputStreamIOSupplier19 = reportConfiguration17.getOutput();
        org.apache.rat.license.ILicense iLicense20 = null;
        reportConfiguration17.addLicense(iLicense20);
        reportConfiguration17.removeApprovedLicenseCategory("F FALSE");
        boolean boolean24 = reportConfiguration17.isAddingLicenses();
        org.apache.rat.utils.Log log25 = null;
        org.apache.rat.ReportConfiguration reportConfiguration26 = new org.apache.rat.ReportConfiguration(log25);
        java.io.FilenameFilter filenameFilter27 = reportConfiguration26.getInputFileFilter();
        org.apache.rat.license.LicenseSetFactory.LicenseFilter licenseFilter28 = org.apache.rat.license.LicenseSetFactory.LicenseFilter.all;
        java.util.SortedSet<org.apache.rat.license.ILicense> iLicenseSet29 = reportConfiguration26.getLicenses(licenseFilter28);
        org.apache.rat.config.AddLicenseHeaders addLicenseHeaders30 = org.apache.rat.config.AddLicenseHeaders.FALSE;
        reportConfiguration26.setAddLicenseHeaders(addLicenseHeaders30);
        org.apache.rat.utils.Log log32 = null;
        org.apache.rat.ReportConfiguration reportConfiguration33 = new org.apache.rat.ReportConfiguration(log32);
        org.apache.rat.report.claim.ClaimStatistic claimStatistic34 = org.apache.rat.Reporter.report(reportConfiguration33);
        org.apache.rat.license.LicenseSetFactory.LicenseFilter licenseFilter35 = org.apache.rat.license.LicenseSetFactory.LicenseFilter.all;
        org.apache.rat.Reporter.listLicenses(reportConfiguration33, licenseFilter35);
        org.apache.rat.Reporter.listLicenses(reportConfiguration26, licenseFilter35);
        org.apache.rat.utils.Log log38 = null;
        org.apache.rat.ReportConfiguration reportConfiguration39 = new org.apache.rat.ReportConfiguration(log38);
        java.io.FilenameFilter filenameFilter40 = reportConfiguration39.getInputFileFilter();
        org.apache.rat.license.LicenseSetFactory.LicenseFilter licenseFilter41 = org.apache.rat.license.LicenseSetFactory.LicenseFilter.all;
        java.util.SortedSet<org.apache.rat.license.ILicense> iLicenseSet42 = reportConfiguration39.getLicenses(licenseFilter41);
        org.apache.rat.config.AddLicenseHeaders addLicenseHeaders43 = org.apache.rat.config.AddLicenseHeaders.FALSE;
        reportConfiguration39.setAddLicenseHeaders(addLicenseHeaders43);
        org.apache.rat.utils.Log log45 = null;
        org.apache.rat.ReportConfiguration reportConfiguration46 = new org.apache.rat.ReportConfiguration(log45);
        org.apache.rat.report.claim.ClaimStatistic claimStatistic47 = org.apache.rat.Reporter.report(reportConfiguration46);
        org.apache.rat.license.LicenseSetFactory.LicenseFilter licenseFilter48 = org.apache.rat.license.LicenseSetFactory.LicenseFilter.all;
        org.apache.rat.Reporter.listLicenses(reportConfiguration46, licenseFilter48);
        org.apache.rat.Reporter.listLicenses(reportConfiguration39, licenseFilter48);
        org.apache.rat.Reporter.listLicenses(reportConfiguration26, licenseFilter48);
        org.apache.rat.Reporter.listLicenses(reportConfiguration17, licenseFilter48);
        org.apache.rat.Reporter.listLicenses(reportConfiguration1, licenseFilter48);
        java.io.FilenameFilter filenameFilter54 = reportConfiguration1.getInputFileFilter();
        org.junit.Assert.assertNull(filenameFilter6);
        org.junit.Assert.assertTrue("'" + licenseFilter7 + "' != '" + org.apache.rat.license.LicenseSetFactory.LicenseFilter.all + "'", licenseFilter7.equals(org.apache.rat.license.LicenseSetFactory.LicenseFilter.all));
        org.junit.Assert.assertNotNull(iLicenseSet8);
        org.junit.Assert.assertNull(claimStatistic18);
        org.junit.Assert.assertNotNull(outputStreamIOSupplier19);
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + false + "'", boolean24 == false);
        org.junit.Assert.assertNull(filenameFilter27);
        org.junit.Assert.assertTrue("'" + licenseFilter28 + "' != '" + org.apache.rat.license.LicenseSetFactory.LicenseFilter.all + "'", licenseFilter28.equals(org.apache.rat.license.LicenseSetFactory.LicenseFilter.all));
        org.junit.Assert.assertNotNull(iLicenseSet29);
        org.junit.Assert.assertTrue("'" + addLicenseHeaders30 + "' != '" + org.apache.rat.config.AddLicenseHeaders.FALSE + "'", addLicenseHeaders30.equals(org.apache.rat.config.AddLicenseHeaders.FALSE));
        org.junit.Assert.assertNull(claimStatistic34);
        org.junit.Assert.assertTrue("'" + licenseFilter35 + "' != '" + org.apache.rat.license.LicenseSetFactory.LicenseFilter.all + "'", licenseFilter35.equals(org.apache.rat.license.LicenseSetFactory.LicenseFilter.all));
        org.junit.Assert.assertNull(filenameFilter40);
        org.junit.Assert.assertTrue("'" + licenseFilter41 + "' != '" + org.apache.rat.license.LicenseSetFactory.LicenseFilter.all + "'", licenseFilter41.equals(org.apache.rat.license.LicenseSetFactory.LicenseFilter.all));
        org.junit.Assert.assertNotNull(iLicenseSet42);
        org.junit.Assert.assertTrue("'" + addLicenseHeaders43 + "' != '" + org.apache.rat.config.AddLicenseHeaders.FALSE + "'", addLicenseHeaders43.equals(org.apache.rat.config.AddLicenseHeaders.FALSE));
        org.junit.Assert.assertNull(claimStatistic47);
        org.junit.Assert.assertTrue("'" + licenseFilter48 + "' != '" + org.apache.rat.license.LicenseSetFactory.LicenseFilter.all + "'", licenseFilter48.equals(org.apache.rat.license.LicenseSetFactory.LicenseFilter.all));
        org.junit.Assert.assertNull(filenameFilter54);
    }

    @Test
    public void test14523() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest29.test14523");
        org.apache.rat.utils.Log log0 = null;
        org.apache.rat.ReportConfiguration reportConfiguration1 = new org.apache.rat.ReportConfiguration(log0);
        org.apache.rat.report.claim.ClaimStatistic claimStatistic2 = org.apache.rat.Reporter.report(reportConfiguration1);
        reportConfiguration1.addApprovedLicenseCategory("Copyright Builder: s:null e:null o:null");
        java.lang.String[] strArray10 = new java.lang.String[] { "http://org/apache/rat/meta-data#LicenseFamilyCategory", "Datum [ name ='http://org/apache/rat/meta-data#LicenseFamilyCategory',value ='GPL1  ']", "MANIFEST.MF", "AllBuilder:", "The MIT License" };
        org.apache.rat.utils.ReportingSet<java.lang.String> strSet11 = new org.apache.rat.utils.ReportingSet<java.lang.String>();
        boolean boolean12 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strSet11, strArray10);
        boolean boolean14 = strSet11.addIfNotPresent("http://org/apache/rat/meta-data#LicenseFamilyName");
        java.util.Iterator<java.lang.String> strItor15 = strSet11.iterator();
        java.lang.Object[] objArray16 = strSet11.toArray();
        java.lang.String[] strArray22 = new java.lang.String[] { "http://org/apache/rat/meta-data#LicenseFamilyCategory", "Datum [ name ='http://org/apache/rat/meta-data#LicenseFamilyCategory',value ='GPL1  ']", "MANIFEST.MF", "AllBuilder:", "The MIT License" };
        org.apache.rat.utils.ReportingSet<java.lang.String> strSet23 = new org.apache.rat.utils.ReportingSet<java.lang.String>();
        boolean boolean24 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strSet23, strArray22);
        boolean boolean26 = strSet23.addIfNotPresent("http://org/apache/rat/meta-data#LicenseFamilyName");
        java.util.SortedSet<org.apache.rat.license.ILicenseFamily> iLicenseFamilySet27 = org.apache.rat.license.LicenseFamilySetFactory.emptyLicenseFamilySet();
        boolean boolean28 = strSet23.removeAll((java.util.Collection<org.apache.rat.license.ILicenseFamily>) iLicenseFamilySet27);
        boolean boolean29 = strSet11.containsAll((java.util.Collection<org.apache.rat.license.ILicenseFamily>) iLicenseFamilySet27);
        java.util.Spliterator<java.lang.String> strSpliterator30 = strSet11.spliterator();
        org.apache.rat.utils.DefaultLog defaultLog31 = org.apache.rat.utils.DefaultLog.INSTANCE;
        org.apache.rat.utils.Log log32 = null;
        org.apache.rat.ReportConfiguration reportConfiguration33 = new org.apache.rat.ReportConfiguration(log32);
        reportConfiguration33.addApprovedLicenseCategory(".cvsignore");
        org.apache.rat.utils.Log.Level level36 = org.apache.rat.utils.Log.Level.ERROR;
        reportConfiguration33.logFamilyCollisions(level36);
        defaultLog31.setLevel(level36);
        org.apache.rat.utils.Log log39 = null;
        org.apache.rat.ReportConfiguration reportConfiguration40 = new org.apache.rat.ReportConfiguration(log39);
        java.io.FilenameFilter filenameFilter41 = reportConfiguration40.getInputFileFilter();
        org.apache.rat.license.LicenseSetFactory.LicenseFilter licenseFilter42 = org.apache.rat.license.LicenseSetFactory.LicenseFilter.all;
        java.util.SortedSet<org.apache.rat.license.ILicense> iLicenseSet43 = reportConfiguration40.getLicenses(licenseFilter42);
        org.apache.rat.config.AddLicenseHeaders addLicenseHeaders44 = org.apache.rat.config.AddLicenseHeaders.FALSE;
        reportConfiguration40.setAddLicenseHeaders(addLicenseHeaders44);
        org.apache.rat.utils.Log log46 = null;
        org.apache.rat.ReportConfiguration reportConfiguration47 = new org.apache.rat.ReportConfiguration(log46);
        org.apache.rat.report.claim.ClaimStatistic claimStatistic48 = org.apache.rat.Reporter.report(reportConfiguration47);
        org.apache.rat.license.LicenseSetFactory.LicenseFilter licenseFilter49 = org.apache.rat.license.LicenseSetFactory.LicenseFilter.all;
        org.apache.rat.Reporter.listLicenses(reportConfiguration47, licenseFilter49);
        org.apache.rat.Reporter.listLicenses(reportConfiguration40, licenseFilter49);
        org.apache.rat.utils.Log log52 = null;
        org.apache.rat.ReportConfiguration reportConfiguration53 = new org.apache.rat.ReportConfiguration(log52);
        java.io.FilenameFilter filenameFilter54 = reportConfiguration53.getInputFileFilter();
        org.apache.rat.license.LicenseSetFactory.LicenseFilter licenseFilter55 = org.apache.rat.license.LicenseSetFactory.LicenseFilter.all;
        java.util.SortedSet<org.apache.rat.license.ILicense> iLicenseSet56 = reportConfiguration53.getLicenses(licenseFilter55);
        org.apache.rat.config.AddLicenseHeaders addLicenseHeaders57 = org.apache.rat.config.AddLicenseHeaders.FALSE;
        reportConfiguration53.setAddLicenseHeaders(addLicenseHeaders57);
        org.apache.rat.utils.Log log59 = null;
        org.apache.rat.ReportConfiguration reportConfiguration60 = new org.apache.rat.ReportConfiguration(log59);
        org.apache.rat.report.claim.ClaimStatistic claimStatistic61 = org.apache.rat.Reporter.report(reportConfiguration60);
        org.apache.rat.license.LicenseSetFactory.LicenseFilter licenseFilter62 = org.apache.rat.license.LicenseSetFactory.LicenseFilter.all;
        org.apache.rat.Reporter.listLicenses(reportConfiguration60, licenseFilter62);
        org.apache.rat.Reporter.listLicenses(reportConfiguration53, licenseFilter62);
        org.apache.rat.Reporter.listLicenses(reportConfiguration40, licenseFilter62);
        org.apache.rat.utils.Log log66 = null;
        org.apache.rat.ReportConfiguration reportConfiguration67 = new org.apache.rat.ReportConfiguration(log66);
        org.apache.commons.io.function.IOSupplier<java.io.OutputStream> outputStreamIOSupplier68 = reportConfiguration67.getOutput();
        reportConfiguration40.setOut(outputStreamIOSupplier68);
        org.apache.rat.utils.Log log70 = null;
        org.apache.rat.ReportConfiguration reportConfiguration71 = new org.apache.rat.ReportConfiguration(log70);
        org.apache.rat.report.claim.ClaimStatistic claimStatistic72 = org.apache.rat.Reporter.report(reportConfiguration71);
        org.apache.rat.utils.Log log73 = null;
        org.apache.rat.ReportConfiguration reportConfiguration74 = new org.apache.rat.ReportConfiguration(log73);
        org.apache.rat.report.claim.ClaimStatistic claimStatistic75 = org.apache.rat.Reporter.report(reportConfiguration74);
        org.apache.rat.utils.ReportingSet.Options options76 = org.apache.rat.utils.ReportingSet.Options.OVERWRITE;
        reportConfiguration74.licenseDuplicateOption(options76);
        reportConfiguration71.familyDuplicateOption(options76);
        reportConfiguration40.licenseDuplicateOption(options76);
        reportConfiguration40.addApprovedLicenseCategory("W3C Document Copyright");
        org.apache.rat.utils.Log log82 = null;
        org.apache.rat.ReportConfiguration reportConfiguration83 = new org.apache.rat.ReportConfiguration(log82);
        reportConfiguration83.addApprovedLicenseCategory(".cvsignore");
        org.apache.rat.utils.Log.Level level86 = org.apache.rat.utils.Log.Level.ERROR;
        reportConfiguration83.logLicenseCollisions(level86);
        reportConfiguration40.logLicenseCollisions(level86);
        defaultLog31.log(level86, "GNU General Public License, version 1");
        org.apache.rat.utils.ReportingSet<java.lang.String> strSet91 = strSet11.setLog((org.apache.rat.utils.Log) defaultLog31);
        org.apache.rat.utils.ReportingSet<java.lang.String> strSet93 = strSet11.tailSet("Copyright Builder: s:null e:W3C Software Copyright o:null");
        reportConfiguration1.addApprovedLicenseCategories((java.util.Collection<java.lang.String>) strSet11);
        org.apache.commons.io.filefilter.IOFileFilter iOFileFilter95 = reportConfiguration1.getDirectoryFilter();
        org.junit.Assert.assertNull(claimStatistic2);
        org.junit.Assert.assertNotNull(strArray10);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + true + "'", boolean12 == true);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + true + "'", boolean14 == true);
        org.junit.Assert.assertNotNull(strItor15);
        org.junit.Assert.assertNotNull(objArray16);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray16), "[AllBuilder:, Datum [ name ='http://org/apache/rat/meta-data#LicenseFamilyCategory',value ='GPL1  '], MANIFEST.MF, The MIT License, http://org/apache/rat/meta-data#LicenseFamilyCategory, http://org/apache/rat/meta-data#LicenseFamilyName]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray16), "[AllBuilder:, Datum [ name ='http://org/apache/rat/meta-data#LicenseFamilyCategory',value ='GPL1  '], MANIFEST.MF, The MIT License, http://org/apache/rat/meta-data#LicenseFamilyCategory, http://org/apache/rat/meta-data#LicenseFamilyName]");
        org.junit.Assert.assertNotNull(strArray22);
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + true + "'", boolean24 == true);
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + true + "'", boolean26 == true);
        org.junit.Assert.assertNotNull(iLicenseFamilySet27);
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + false + "'", boolean28 == false);
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + true + "'", boolean29 == true);
        org.junit.Assert.assertNotNull(strSpliterator30);
        org.junit.Assert.assertNotNull(defaultLog31);
        org.junit.Assert.assertTrue("'" + level36 + "' != '" + org.apache.rat.utils.Log.Level.ERROR + "'", level36.equals(org.apache.rat.utils.Log.Level.ERROR));
        org.junit.Assert.assertNull(filenameFilter41);
        org.junit.Assert.assertTrue("'" + licenseFilter42 + "' != '" + org.apache.rat.license.LicenseSetFactory.LicenseFilter.all + "'", licenseFilter42.equals(org.apache.rat.license.LicenseSetFactory.LicenseFilter.all));
        org.junit.Assert.assertNotNull(iLicenseSet43);
        org.junit.Assert.assertTrue("'" + addLicenseHeaders44 + "' != '" + org.apache.rat.config.AddLicenseHeaders.FALSE + "'", addLicenseHeaders44.equals(org.apache.rat.config.AddLicenseHeaders.FALSE));
        org.junit.Assert.assertNull(claimStatistic48);
        org.junit.Assert.assertTrue("'" + licenseFilter49 + "' != '" + org.apache.rat.license.LicenseSetFactory.LicenseFilter.all + "'", licenseFilter49.equals(org.apache.rat.license.LicenseSetFactory.LicenseFilter.all));
        org.junit.Assert.assertNull(filenameFilter54);
        org.junit.Assert.assertTrue("'" + licenseFilter55 + "' != '" + org.apache.rat.license.LicenseSetFactory.LicenseFilter.all + "'", licenseFilter55.equals(org.apache.rat.license.LicenseSetFactory.LicenseFilter.all));
        org.junit.Assert.assertNotNull(iLicenseSet56);
        org.junit.Assert.assertTrue("'" + addLicenseHeaders57 + "' != '" + org.apache.rat.config.AddLicenseHeaders.FALSE + "'", addLicenseHeaders57.equals(org.apache.rat.config.AddLicenseHeaders.FALSE));
        org.junit.Assert.assertNull(claimStatistic61);
        org.junit.Assert.assertTrue("'" + licenseFilter62 + "' != '" + org.apache.rat.license.LicenseSetFactory.LicenseFilter.all + "'", licenseFilter62.equals(org.apache.rat.license.LicenseSetFactory.LicenseFilter.all));
        org.junit.Assert.assertNotNull(outputStreamIOSupplier68);
        org.junit.Assert.assertNull(claimStatistic72);
        org.junit.Assert.assertNull(claimStatistic75);
        org.junit.Assert.assertTrue("'" + options76 + "' != '" + org.apache.rat.utils.ReportingSet.Options.OVERWRITE + "'", options76.equals(org.apache.rat.utils.ReportingSet.Options.OVERWRITE));
        org.junit.Assert.assertTrue("'" + level86 + "' != '" + org.apache.rat.utils.Log.Level.ERROR + "'", level86.equals(org.apache.rat.utils.Log.Level.ERROR));
        org.junit.Assert.assertNotNull(strSet91);
        org.junit.Assert.assertNotNull(strSet93);
        org.junit.Assert.assertNotNull(iOFileFilter95);
    }

    @Test
    public void test14524() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest29.test14524");
        // The following exception was thrown during execution in test generation
        try {
            org.apache.rat.configuration.builders.AbstractBuilder abstractBuilder1 = org.apache.rat.configuration.MatcherBuilderTracker.getMatcherBuilder("6c0998ab-78f9-48d9-a6db-29d70234253c");
            org.junit.Assert.fail("Expected exception of type org.apache.rat.ConfigurationException; message: ?Valid builders?all?matcherRef?copyright?not?regex?spdx?text?any?ERROR MSG?No matcher builder named 6c0998ab-78f9-48d9-a6db-29d70234253c");
        } catch (org.apache.rat.ConfigurationException e) {
            // Expected exception.
        }
    }

    @Test
    public void test14525() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest29.test14525");
        // The following exception was thrown during execution in test generation
        try {
            org.apache.rat.configuration.MatcherBuilderTracker.addBuilder("RegexBuilder: b4045e53-e706-40d9-a143-f2808a4bc773", "987e1c25-0334-44a1-bb8e-96395b8caec8");
            org.junit.Assert.fail("Expected exception of type org.apache.rat.ConfigurationException; message: java.lang.ClassNotFoundException: RegexBuilder: b4045e53-e706-40d9-a143-f2808a4bc773");
        } catch (org.apache.rat.ConfigurationException e) {
            // Expected exception.
        }
    }

    @Test
    public void test14526() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest29.test14526");
        org.apache.rat.utils.DefaultLog defaultLog0 = org.apache.rat.utils.DefaultLog.INSTANCE;
        org.apache.rat.license.ILicense.Builder builder1 = org.apache.rat.license.ILicense.builder();
        org.apache.rat.license.ILicense.Builder builder3 = builder1.setLicenseFamilyCategory("");
        org.apache.rat.analysis.matchers.CopyrightMatcher copyrightMatcher7 = new org.apache.rat.analysis.matchers.CopyrightMatcher("", "GPL1 ", "hi!");
        org.apache.rat.analysis.IHeaderMatcher.State state8 = copyrightMatcher7.finalizeState();
        org.apache.rat.license.ILicense.Builder builder9 = builder3.setMatcher((org.apache.rat.analysis.IHeaderMatcher) copyrightMatcher7);
        org.apache.rat.license.ILicense.Builder builder11 = builder9.setLicenseFamilyCategory("");
        defaultLog0.error((java.lang.Object) builder11);
        org.apache.rat.utils.Log.Level level13 = null;
        org.apache.rat.configuration.builders.CopyrightBuilder copyrightBuilder14 = org.apache.rat.analysis.IHeaderMatcher.Builder.copyright();
        org.apache.rat.configuration.builders.CopyrightBuilder copyrightBuilder16 = copyrightBuilder14.setStart("OASIS");
        org.apache.rat.configuration.builders.CopyrightBuilder copyrightBuilder18 = copyrightBuilder14.setOwner("Copyright Builder: s:null e:274c6a15-09f6-4bfd-ac53-1827770eb507 o:null");
        org.apache.rat.configuration.builders.CopyrightBuilder copyrightBuilder20 = copyrightBuilder18.setStart("7E27CD62-4403-40AB-A9F5-16E7C59AB2F1");
        org.apache.rat.configuration.builders.CopyrightBuilder copyrightBuilder22 = copyrightBuilder18.setEnd("");
        org.apache.rat.analysis.IHeaderMatcher iHeaderMatcher23 = copyrightBuilder18.build();
        // The following exception was thrown during execution in test generation
        try {
            defaultLog0.log(level13, (java.lang.Object) copyrightBuilder18);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(defaultLog0);
        org.junit.Assert.assertNotNull(builder1);
        org.junit.Assert.assertNotNull(builder3);
        org.junit.Assert.assertTrue("'" + state8 + "' != '" + org.apache.rat.analysis.IHeaderMatcher.State.f + "'", state8.equals(org.apache.rat.analysis.IHeaderMatcher.State.f));
        org.junit.Assert.assertNotNull(builder9);
        org.junit.Assert.assertNotNull(builder11);
        org.junit.Assert.assertNotNull(copyrightBuilder14);
        org.junit.Assert.assertNotNull(copyrightBuilder16);
        org.junit.Assert.assertNotNull(copyrightBuilder18);
        org.junit.Assert.assertNotNull(copyrightBuilder20);
        org.junit.Assert.assertNotNull(copyrightBuilder22);
        org.junit.Assert.assertNotNull(iHeaderMatcher23);
    }

    @Test
    public void test14527() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest29.test14527");
        java.util.regex.Pattern pattern2 = null;
        org.apache.rat.analysis.matchers.SimpleRegexMatcher simpleRegexMatcher3 = new org.apache.rat.analysis.matchers.SimpleRegexMatcher("", pattern2);
        simpleRegexMatcher3.reset();
        org.apache.rat.analysis.IHeaderMatcher.State state5 = simpleRegexMatcher3.finalizeState();
        java.lang.String str6 = simpleRegexMatcher3.getId();
        org.apache.rat.analysis.IHeaderMatcher.State state7 = simpleRegexMatcher3.currentState();
        simpleRegexMatcher3.reset();
        org.apache.rat.analysis.matchers.NotMatcher notMatcher9 = new org.apache.rat.analysis.matchers.NotMatcher("36a35c09-5bed-4cc7-bced-eb6089cfc980", (org.apache.rat.analysis.IHeaderMatcher) simpleRegexMatcher3);
        org.junit.Assert.assertTrue("'" + state5 + "' != '" + org.apache.rat.analysis.IHeaderMatcher.State.f + "'", state5.equals(org.apache.rat.analysis.IHeaderMatcher.State.f));
// flaky:         org.junit.Assert.assertEquals("'" + str6 + "' != '" + "54648938-a577-4e85-8ef6-5c54256f928d" + "'", str6, "54648938-a577-4e85-8ef6-5c54256f928d");
        org.junit.Assert.assertTrue("'" + state7 + "' != '" + org.apache.rat.analysis.IHeaderMatcher.State.f + "'", state7.equals(org.apache.rat.analysis.IHeaderMatcher.State.f));
    }

    @Test
    public void test14528() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest29.test14528");
        org.apache.rat.utils.Log log0 = null;
        org.apache.rat.ReportConfiguration reportConfiguration1 = new org.apache.rat.ReportConfiguration(log0);
        java.io.FilenameFilter filenameFilter2 = reportConfiguration1.getInputFileFilter();
        org.apache.rat.license.LicenseSetFactory.LicenseFilter licenseFilter3 = org.apache.rat.license.LicenseSetFactory.LicenseFilter.all;
        java.util.SortedSet<org.apache.rat.license.ILicense> iLicenseSet4 = reportConfiguration1.getLicenses(licenseFilter3);
        org.apache.rat.license.ILicenseFamily iLicenseFamily5 = null;
        reportConfiguration1.addFamily(iLicenseFamily5);
        org.apache.commons.io.filefilter.IOFileFilter iOFileFilter7 = reportConfiguration1.getDirectoryFilter();
        org.apache.rat.utils.Log log8 = null;
        org.apache.rat.ReportConfiguration reportConfiguration9 = new org.apache.rat.ReportConfiguration(log8);
        java.io.FilenameFilter filenameFilter10 = reportConfiguration9.getInputFileFilter();
        org.apache.rat.license.LicenseSetFactory.LicenseFilter licenseFilter11 = org.apache.rat.license.LicenseSetFactory.LicenseFilter.all;
        java.util.SortedSet<org.apache.rat.license.ILicense> iLicenseSet12 = reportConfiguration9.getLicenses(licenseFilter11);
        org.apache.rat.config.AddLicenseHeaders addLicenseHeaders13 = org.apache.rat.config.AddLicenseHeaders.FALSE;
        reportConfiguration9.setAddLicenseHeaders(addLicenseHeaders13);
        org.apache.rat.utils.Log log15 = null;
        org.apache.rat.ReportConfiguration reportConfiguration16 = new org.apache.rat.ReportConfiguration(log15);
        org.apache.rat.report.claim.ClaimStatistic claimStatistic17 = org.apache.rat.Reporter.report(reportConfiguration16);
        org.apache.rat.license.LicenseSetFactory.LicenseFilter licenseFilter18 = org.apache.rat.license.LicenseSetFactory.LicenseFilter.all;
        org.apache.rat.Reporter.listLicenses(reportConfiguration16, licenseFilter18);
        org.apache.rat.Reporter.listLicenses(reportConfiguration9, licenseFilter18);
        org.apache.rat.utils.Log log21 = null;
        org.apache.rat.ReportConfiguration reportConfiguration22 = new org.apache.rat.ReportConfiguration(log21);
        java.io.FilenameFilter filenameFilter23 = reportConfiguration22.getInputFileFilter();
        org.apache.rat.license.LicenseSetFactory.LicenseFilter licenseFilter24 = org.apache.rat.license.LicenseSetFactory.LicenseFilter.all;
        java.util.SortedSet<org.apache.rat.license.ILicense> iLicenseSet25 = reportConfiguration22.getLicenses(licenseFilter24);
        org.apache.rat.config.AddLicenseHeaders addLicenseHeaders26 = org.apache.rat.config.AddLicenseHeaders.FALSE;
        reportConfiguration22.setAddLicenseHeaders(addLicenseHeaders26);
        org.apache.rat.utils.Log log28 = null;
        org.apache.rat.ReportConfiguration reportConfiguration29 = new org.apache.rat.ReportConfiguration(log28);
        org.apache.rat.report.claim.ClaimStatistic claimStatistic30 = org.apache.rat.Reporter.report(reportConfiguration29);
        org.apache.rat.license.LicenseSetFactory.LicenseFilter licenseFilter31 = org.apache.rat.license.LicenseSetFactory.LicenseFilter.all;
        org.apache.rat.Reporter.listLicenses(reportConfiguration29, licenseFilter31);
        org.apache.rat.Reporter.listLicenses(reportConfiguration22, licenseFilter31);
        org.apache.rat.Reporter.listLicenses(reportConfiguration9, licenseFilter31);
        org.apache.rat.utils.Log log35 = null;
        org.apache.rat.ReportConfiguration reportConfiguration36 = new org.apache.rat.ReportConfiguration(log35);
        org.apache.commons.io.function.IOSupplier<java.io.OutputStream> outputStreamIOSupplier37 = reportConfiguration36.getOutput();
        reportConfiguration9.setOut(outputStreamIOSupplier37);
        org.apache.rat.utils.Log.Level level39 = org.apache.rat.utils.Log.Level.WARN;
        reportConfiguration9.logLicenseCollisions(level39);
        org.apache.commons.io.filefilter.IOFileFilter iOFileFilter41 = reportConfiguration9.getDirectoryFilter();
        java.nio.file.Path path42 = null;
        boolean boolean43 = iOFileFilter41.matches(path42);
        java.nio.file.Path path44 = null;
        java.nio.file.attribute.BasicFileAttributes basicFileAttributes45 = null;
        java.nio.file.FileVisitResult fileVisitResult46 = iOFileFilter41.accept(path44, basicFileAttributes45);
        org.apache.commons.io.filefilter.IOFileFilter iOFileFilter47 = iOFileFilter7.or(iOFileFilter41);
        org.apache.commons.io.filefilter.IOFileFilter iOFileFilter48 = iOFileFilter41.negate();
        java.nio.file.Path path49 = null;
        java.nio.file.attribute.BasicFileAttributes basicFileAttributes50 = null;
        java.nio.file.FileVisitResult fileVisitResult51 = iOFileFilter41.accept(path49, basicFileAttributes50);
        org.apache.commons.io.filefilter.IOFileFilter iOFileFilter52 = iOFileFilter41.negate();
        java.nio.file.Path path53 = null;
        boolean boolean54 = iOFileFilter52.matches(path53);
        org.apache.rat.utils.Log log55 = null;
        org.apache.rat.ReportConfiguration reportConfiguration56 = new org.apache.rat.ReportConfiguration(log55);
        org.apache.rat.report.claim.ClaimStatistic claimStatistic57 = org.apache.rat.Reporter.report(reportConfiguration56);
        org.apache.rat.utils.Log log58 = null;
        org.apache.rat.ReportConfiguration reportConfiguration59 = new org.apache.rat.ReportConfiguration(log58);
        org.apache.rat.report.claim.ClaimStatistic claimStatistic60 = org.apache.rat.Reporter.report(reportConfiguration59);
        org.apache.rat.utils.ReportingSet.Options options61 = org.apache.rat.utils.ReportingSet.Options.OVERWRITE;
        reportConfiguration59.licenseDuplicateOption(options61);
        reportConfiguration56.familyDuplicateOption(options61);
        org.apache.commons.io.function.IOSupplier<java.io.PrintWriter> printWriterIOSupplier64 = reportConfiguration56.getWriter();
        org.apache.rat.utils.Log log65 = null;
        org.apache.rat.ReportConfiguration reportConfiguration66 = new org.apache.rat.ReportConfiguration(log65);
        reportConfiguration66.addApprovedLicenseCategory(".cvsignore");
        org.apache.rat.utils.Log.Level level69 = org.apache.rat.utils.Log.Level.ERROR;
        reportConfiguration66.logFamilyCollisions(level69);
        reportConfiguration56.logFamilyCollisions(level69);
        org.apache.commons.io.filefilter.IOFileFilter iOFileFilter72 = reportConfiguration56.getDirectoryFilter();
        org.apache.rat.utils.Log log73 = null;
        org.apache.rat.ReportConfiguration reportConfiguration74 = new org.apache.rat.ReportConfiguration(log73);
        reportConfiguration74.addApprovedLicenseCategory(".cvsignore");
        org.apache.rat.utils.Log.Level level77 = org.apache.rat.utils.Log.Level.ERROR;
        reportConfiguration74.logFamilyCollisions(level77);
        org.apache.commons.io.filefilter.IOFileFilter iOFileFilter79 = reportConfiguration74.getDirectoryFilter();
        org.apache.commons.io.filefilter.IOFileFilter iOFileFilter80 = iOFileFilter72.or(iOFileFilter79);
        org.apache.commons.io.filefilter.IOFileFilter iOFileFilter81 = iOFileFilter72.negate();
        org.apache.commons.io.filefilter.IOFileFilter iOFileFilter82 = iOFileFilter52.or(iOFileFilter81);
        java.nio.file.Path path83 = null;
        java.nio.file.attribute.BasicFileAttributes basicFileAttributes84 = null;
        java.nio.file.FileVisitResult fileVisitResult85 = iOFileFilter81.accept(path83, basicFileAttributes84);
        org.junit.Assert.assertNull(filenameFilter2);
        org.junit.Assert.assertTrue("'" + licenseFilter3 + "' != '" + org.apache.rat.license.LicenseSetFactory.LicenseFilter.all + "'", licenseFilter3.equals(org.apache.rat.license.LicenseSetFactory.LicenseFilter.all));
        org.junit.Assert.assertNotNull(iLicenseSet4);
        org.junit.Assert.assertNotNull(iOFileFilter7);
        org.junit.Assert.assertNull(filenameFilter10);
        org.junit.Assert.assertTrue("'" + licenseFilter11 + "' != '" + org.apache.rat.license.LicenseSetFactory.LicenseFilter.all + "'", licenseFilter11.equals(org.apache.rat.license.LicenseSetFactory.LicenseFilter.all));
        org.junit.Assert.assertNotNull(iLicenseSet12);
        org.junit.Assert.assertTrue("'" + addLicenseHeaders13 + "' != '" + org.apache.rat.config.AddLicenseHeaders.FALSE + "'", addLicenseHeaders13.equals(org.apache.rat.config.AddLicenseHeaders.FALSE));
        org.junit.Assert.assertNull(claimStatistic17);
        org.junit.Assert.assertTrue("'" + licenseFilter18 + "' != '" + org.apache.rat.license.LicenseSetFactory.LicenseFilter.all + "'", licenseFilter18.equals(org.apache.rat.license.LicenseSetFactory.LicenseFilter.all));
        org.junit.Assert.assertNull(filenameFilter23);
        org.junit.Assert.assertTrue("'" + licenseFilter24 + "' != '" + org.apache.rat.license.LicenseSetFactory.LicenseFilter.all + "'", licenseFilter24.equals(org.apache.rat.license.LicenseSetFactory.LicenseFilter.all));
        org.junit.Assert.assertNotNull(iLicenseSet25);
        org.junit.Assert.assertTrue("'" + addLicenseHeaders26 + "' != '" + org.apache.rat.config.AddLicenseHeaders.FALSE + "'", addLicenseHeaders26.equals(org.apache.rat.config.AddLicenseHeaders.FALSE));
        org.junit.Assert.assertNull(claimStatistic30);
        org.junit.Assert.assertTrue("'" + licenseFilter31 + "' != '" + org.apache.rat.license.LicenseSetFactory.LicenseFilter.all + "'", licenseFilter31.equals(org.apache.rat.license.LicenseSetFactory.LicenseFilter.all));
        org.junit.Assert.assertNotNull(outputStreamIOSupplier37);
        org.junit.Assert.assertTrue("'" + level39 + "' != '" + org.apache.rat.utils.Log.Level.WARN + "'", level39.equals(org.apache.rat.utils.Log.Level.WARN));
        org.junit.Assert.assertNotNull(iOFileFilter41);
        org.junit.Assert.assertTrue("'" + boolean43 + "' != '" + false + "'", boolean43 == false);
        org.junit.Assert.assertTrue("'" + fileVisitResult46 + "' != '" + java.nio.file.FileVisitResult.TERMINATE + "'", fileVisitResult46.equals(java.nio.file.FileVisitResult.TERMINATE));
        org.junit.Assert.assertNotNull(iOFileFilter47);
        org.junit.Assert.assertNotNull(iOFileFilter48);
        org.junit.Assert.assertTrue("'" + fileVisitResult51 + "' != '" + java.nio.file.FileVisitResult.TERMINATE + "'", fileVisitResult51.equals(java.nio.file.FileVisitResult.TERMINATE));
        org.junit.Assert.assertNotNull(iOFileFilter52);
        org.junit.Assert.assertTrue("'" + boolean54 + "' != '" + true + "'", boolean54 == true);
        org.junit.Assert.assertNull(claimStatistic57);
        org.junit.Assert.assertNull(claimStatistic60);
        org.junit.Assert.assertTrue("'" + options61 + "' != '" + org.apache.rat.utils.ReportingSet.Options.OVERWRITE + "'", options61.equals(org.apache.rat.utils.ReportingSet.Options.OVERWRITE));
        org.junit.Assert.assertNotNull(printWriterIOSupplier64);
        org.junit.Assert.assertTrue("'" + level69 + "' != '" + org.apache.rat.utils.Log.Level.ERROR + "'", level69.equals(org.apache.rat.utils.Log.Level.ERROR));
        org.junit.Assert.assertNotNull(iOFileFilter72);
        org.junit.Assert.assertTrue("'" + level77 + "' != '" + org.apache.rat.utils.Log.Level.ERROR + "'", level77.equals(org.apache.rat.utils.Log.Level.ERROR));
        org.junit.Assert.assertNotNull(iOFileFilter79);
        org.junit.Assert.assertNotNull(iOFileFilter80);
        org.junit.Assert.assertNotNull(iOFileFilter81);
        org.junit.Assert.assertNotNull(iOFileFilter82);
        org.junit.Assert.assertTrue("'" + fileVisitResult85 + "' != '" + java.nio.file.FileVisitResult.CONTINUE + "'", fileVisitResult85.equals(java.nio.file.FileVisitResult.CONTINUE));
    }

    @Test
    public void test14529() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest29.test14529");
        org.apache.rat.analysis.license.FullTextMatchingLicense fullTextMatchingLicense0 = new org.apache.rat.analysis.license.FullTextMatchingLicense();
        fullTextMatchingLicense0.setLicenseFamilyName("hi!");
        java.lang.String str3 = fullTextMatchingLicense0.getLicenseFamilyCategory();
        java.lang.String str4 = fullTextMatchingLicense0.getLicenseFamilyCategory();
        fullTextMatchingLicense0.setLicenseFamilyCategory("DOJO ");
        java.lang.String str7 = fullTextMatchingLicense0.getNotes();
        java.lang.String str8 = fullTextMatchingLicense0.getLicenseFamilyCategory();
        org.apache.rat.license.ILicenseFamily iLicenseFamily9 = fullTextMatchingLicense0.getLicenseFamily();
        java.lang.String str10 = fullTextMatchingLicense0.getLicenseFamilyName();
        org.apache.rat.license.ILicenseFamily iLicenseFamily11 = fullTextMatchingLicense0.getLicenseFamily();
        org.junit.Assert.assertNull(str3);
        org.junit.Assert.assertNull(str4);
        org.junit.Assert.assertNull(str7);
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "DOJO " + "'", str8, "DOJO ");
        org.junit.Assert.assertNotNull(iLicenseFamily9);
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "hi!" + "'", str10, "hi!");
        org.junit.Assert.assertNotNull(iLicenseFamily11);
    }

    @Test
    public void test14530() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest29.test14530");
        boolean boolean1 = org.apache.rat.document.impl.guesser.BinaryGuesser.isNonBinary("1c7b9d4c-9a7b-4710-b879-db32e19e06e1");
        org.junit.Assert.assertTrue("'" + boolean1 + "' != '" + false + "'", boolean1 == false);
    }

    @Test
    public void test14531() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest29.test14531");
        org.apache.rat.analysis.matchers.FullTextMatcher fullTextMatcher2 = new org.apache.rat.analysis.matchers.FullTextMatcher("http://org/apache/rat/meta-data#FileCategory", "8f82a952-5bfd-446b-ac79-15beef5b3f17");
        fullTextMatcher2.reset();
        org.apache.rat.analysis.IHeaderMatcher.State state4 = fullTextMatcher2.currentState();
        fullTextMatcher2.reset();
        org.junit.Assert.assertTrue("'" + state4 + "' != '" + org.apache.rat.analysis.IHeaderMatcher.State.i + "'", state4.equals(org.apache.rat.analysis.IHeaderMatcher.State.i));
    }

    @Test
    public void test14532() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest29.test14532");
        org.apache.rat.utils.Log log0 = null;
        org.apache.rat.ReportConfiguration reportConfiguration1 = new org.apache.rat.ReportConfiguration(log0);
        org.apache.rat.report.claim.ClaimStatistic claimStatistic2 = org.apache.rat.Reporter.report(reportConfiguration1);
        reportConfiguration1.addApprovedLicenseCategory("Copyright Builder: s:null e:null o:null");
        java.util.SortedSet<java.lang.String> strSet5 = reportConfiguration1.getApprovedLicenseCategories();
        org.apache.rat.Defaults.Builder builder6 = org.apache.rat.Defaults.builder();
        org.apache.rat.Defaults.Builder builder7 = builder6.noDefault();
        org.apache.rat.Defaults defaults8 = builder7.build();
        org.apache.rat.Defaults.Builder builder9 = org.apache.rat.Defaults.builder();
        org.apache.rat.Defaults defaults10 = builder9.build();
        org.apache.rat.license.LicenseSetFactory.LicenseFilter licenseFilter11 = org.apache.rat.license.LicenseSetFactory.LicenseFilter.approved;
        java.util.SortedSet<org.apache.rat.license.ILicenseFamily> iLicenseFamilySet12 = defaults10.getLicenseFamilies(licenseFilter11);
        java.util.SortedSet<org.apache.rat.license.ILicenseFamily> iLicenseFamilySet13 = defaults8.getLicenseFamilies(licenseFilter11);
        org.apache.rat.utils.Log log14 = null;
        org.apache.rat.ReportConfiguration reportConfiguration15 = new org.apache.rat.ReportConfiguration(log14);
        org.apache.rat.report.claim.ClaimStatistic claimStatistic16 = org.apache.rat.Reporter.report(reportConfiguration15);
        org.apache.commons.io.function.IOSupplier<java.io.OutputStream> outputStreamIOSupplier17 = reportConfiguration15.getOutput();
        boolean boolean18 = reportConfiguration15.isAddingLicensesForced();
        java.lang.String str19 = reportConfiguration15.getCopyrightMessage();
        reportConfiguration15.removeApprovedLicenseCategory("AnyBuilder:\nAllBuilder:");
        org.apache.rat.utils.Log log22 = null;
        org.apache.rat.ReportConfiguration reportConfiguration23 = new org.apache.rat.ReportConfiguration(log22);
        org.apache.rat.report.claim.ClaimStatistic claimStatistic24 = org.apache.rat.Reporter.report(reportConfiguration23);
        org.apache.commons.io.function.IOSupplier<java.io.OutputStream> outputStreamIOSupplier25 = reportConfiguration23.getOutput();
        org.apache.rat.license.ILicense iLicense26 = null;
        reportConfiguration23.addLicense(iLicense26);
        org.apache.rat.Defaults.Builder builder28 = org.apache.rat.Defaults.builder();
        org.apache.rat.Defaults defaults29 = builder28.build();
        reportConfiguration23.setFrom(defaults29);
        org.apache.rat.license.ILicense[] iLicenseArray31 = new org.apache.rat.license.ILicense[] {};
        java.util.TreeSet<org.apache.rat.license.ILicense> iLicenseSet32 = new java.util.TreeSet<org.apache.rat.license.ILicense>();
        boolean boolean33 = java.util.Collections.addAll((java.util.Collection<org.apache.rat.license.ILicense>) iLicenseSet32, iLicenseArray31);
        java.lang.String[] strArray46 = new java.lang.String[] { "GPL2 ", "GPL1 ", "notice", "http://org/apache/rat/meta-data#LicenseFamilyName", "notice", "GPL2 ", "http://org/apache/rat/meta-data#LicenseFamilyName", "", "GPL2 ", "", "GPL1 ", "hi!" };
        java.util.ArrayList<java.lang.String> strList47 = new java.util.ArrayList<java.lang.String>();
        boolean boolean48 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strList47, strArray46);
        org.apache.rat.license.LicenseSetFactory licenseSetFactory49 = new org.apache.rat.license.LicenseSetFactory((java.util.SortedSet<org.apache.rat.license.ILicense>) iLicenseSet32, (java.util.Collection<java.lang.String>) strList47);
        org.apache.rat.license.LicenseSetFactory.LicenseFilter licenseFilter50 = org.apache.rat.license.LicenseSetFactory.LicenseFilter.all;
        java.util.SortedSet<org.apache.rat.license.ILicenseFamily> iLicenseFamilySet51 = licenseSetFactory49.getLicenseFamilies(licenseFilter50);
        java.util.SortedSet<org.apache.rat.license.ILicense> iLicenseSet52 = defaults29.getLicenses(licenseFilter50);
        org.apache.rat.Reporter.listLicenses(reportConfiguration15, licenseFilter50);
        java.util.SortedSet<java.lang.String> strSet54 = defaults8.getLicenseIds(licenseFilter50);
        org.apache.rat.Reporter.listLicenseFamilies(reportConfiguration1, licenseFilter50);
        org.junit.Assert.assertNull(claimStatistic2);
        org.junit.Assert.assertNotNull(strSet5);
        org.junit.Assert.assertNotNull(builder6);
        org.junit.Assert.assertNotNull(builder7);
        org.junit.Assert.assertNotNull(defaults8);
        org.junit.Assert.assertNotNull(builder9);
        org.junit.Assert.assertNotNull(defaults10);
        org.junit.Assert.assertTrue("'" + licenseFilter11 + "' != '" + org.apache.rat.license.LicenseSetFactory.LicenseFilter.approved + "'", licenseFilter11.equals(org.apache.rat.license.LicenseSetFactory.LicenseFilter.approved));
        org.junit.Assert.assertNotNull(iLicenseFamilySet12);
        org.junit.Assert.assertNotNull(iLicenseFamilySet13);
        org.junit.Assert.assertNull(claimStatistic16);
        org.junit.Assert.assertNotNull(outputStreamIOSupplier17);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + false + "'", boolean18 == false);
        org.junit.Assert.assertNull(str19);
        org.junit.Assert.assertNull(claimStatistic24);
        org.junit.Assert.assertNotNull(outputStreamIOSupplier25);
        org.junit.Assert.assertNotNull(builder28);
        org.junit.Assert.assertNotNull(defaults29);
        org.junit.Assert.assertNotNull(iLicenseArray31);
        org.junit.Assert.assertTrue("'" + boolean33 + "' != '" + false + "'", boolean33 == false);
        org.junit.Assert.assertNotNull(strArray46);
        org.junit.Assert.assertTrue("'" + boolean48 + "' != '" + true + "'", boolean48 == true);
        org.junit.Assert.assertTrue("'" + licenseFilter50 + "' != '" + org.apache.rat.license.LicenseSetFactory.LicenseFilter.all + "'", licenseFilter50.equals(org.apache.rat.license.LicenseSetFactory.LicenseFilter.all));
        org.junit.Assert.assertNotNull(iLicenseFamilySet51);
        org.junit.Assert.assertNotNull(iLicenseSet52);
        org.junit.Assert.assertNotNull(strSet54);
    }

    @Test
    public void test14533() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest29.test14533");
        org.apache.rat.utils.DefaultLog defaultLog0 = org.apache.rat.utils.DefaultLog.INSTANCE;
        org.apache.rat.utils.Log log1 = null;
        org.apache.rat.ReportConfiguration reportConfiguration2 = new org.apache.rat.ReportConfiguration(log1);
        java.io.FilenameFilter filenameFilter3 = reportConfiguration2.getInputFileFilter();
        org.apache.rat.license.LicenseSetFactory.LicenseFilter licenseFilter4 = org.apache.rat.license.LicenseSetFactory.LicenseFilter.all;
        java.util.SortedSet<org.apache.rat.license.ILicense> iLicenseSet5 = reportConfiguration2.getLicenses(licenseFilter4);
        org.apache.rat.config.AddLicenseHeaders addLicenseHeaders6 = org.apache.rat.config.AddLicenseHeaders.FALSE;
        reportConfiguration2.setAddLicenseHeaders(addLicenseHeaders6);
        org.apache.rat.utils.Log log8 = null;
        org.apache.rat.ReportConfiguration reportConfiguration9 = new org.apache.rat.ReportConfiguration(log8);
        org.apache.rat.report.claim.ClaimStatistic claimStatistic10 = org.apache.rat.Reporter.report(reportConfiguration9);
        org.apache.rat.license.LicenseSetFactory.LicenseFilter licenseFilter11 = org.apache.rat.license.LicenseSetFactory.LicenseFilter.all;
        org.apache.rat.Reporter.listLicenses(reportConfiguration9, licenseFilter11);
        org.apache.rat.Reporter.listLicenses(reportConfiguration2, licenseFilter11);
        org.apache.rat.utils.Log log14 = null;
        org.apache.rat.ReportConfiguration reportConfiguration15 = new org.apache.rat.ReportConfiguration(log14);
        java.io.FilenameFilter filenameFilter16 = reportConfiguration15.getInputFileFilter();
        org.apache.rat.license.LicenseSetFactory.LicenseFilter licenseFilter17 = org.apache.rat.license.LicenseSetFactory.LicenseFilter.all;
        java.util.SortedSet<org.apache.rat.license.ILicense> iLicenseSet18 = reportConfiguration15.getLicenses(licenseFilter17);
        org.apache.rat.config.AddLicenseHeaders addLicenseHeaders19 = org.apache.rat.config.AddLicenseHeaders.FALSE;
        reportConfiguration15.setAddLicenseHeaders(addLicenseHeaders19);
        org.apache.rat.utils.Log log21 = null;
        org.apache.rat.ReportConfiguration reportConfiguration22 = new org.apache.rat.ReportConfiguration(log21);
        org.apache.rat.report.claim.ClaimStatistic claimStatistic23 = org.apache.rat.Reporter.report(reportConfiguration22);
        org.apache.rat.license.LicenseSetFactory.LicenseFilter licenseFilter24 = org.apache.rat.license.LicenseSetFactory.LicenseFilter.all;
        org.apache.rat.Reporter.listLicenses(reportConfiguration22, licenseFilter24);
        org.apache.rat.Reporter.listLicenses(reportConfiguration15, licenseFilter24);
        org.apache.rat.Reporter.listLicenses(reportConfiguration2, licenseFilter24);
        org.apache.rat.utils.Log log28 = null;
        org.apache.rat.ReportConfiguration reportConfiguration29 = new org.apache.rat.ReportConfiguration(log28);
        org.apache.commons.io.function.IOSupplier<java.io.OutputStream> outputStreamIOSupplier30 = reportConfiguration29.getOutput();
        reportConfiguration2.setOut(outputStreamIOSupplier30);
        org.apache.rat.utils.Log log32 = null;
        org.apache.rat.ReportConfiguration reportConfiguration33 = new org.apache.rat.ReportConfiguration(log32);
        org.apache.rat.report.claim.ClaimStatistic claimStatistic34 = org.apache.rat.Reporter.report(reportConfiguration33);
        org.apache.rat.utils.Log log35 = null;
        org.apache.rat.ReportConfiguration reportConfiguration36 = new org.apache.rat.ReportConfiguration(log35);
        org.apache.rat.report.claim.ClaimStatistic claimStatistic37 = org.apache.rat.Reporter.report(reportConfiguration36);
        org.apache.rat.utils.ReportingSet.Options options38 = org.apache.rat.utils.ReportingSet.Options.OVERWRITE;
        reportConfiguration36.licenseDuplicateOption(options38);
        reportConfiguration33.familyDuplicateOption(options38);
        reportConfiguration2.licenseDuplicateOption(options38);
        reportConfiguration2.addApprovedLicenseCategory("W3C Document Copyright");
        org.apache.rat.utils.Log log44 = null;
        org.apache.rat.ReportConfiguration reportConfiguration45 = new org.apache.rat.ReportConfiguration(log44);
        reportConfiguration45.addApprovedLicenseCategory(".cvsignore");
        org.apache.rat.utils.Log.Level level48 = org.apache.rat.utils.Log.Level.ERROR;
        reportConfiguration45.logLicenseCollisions(level48);
        reportConfiguration2.logLicenseCollisions(level48);
        defaultLog0.setLevel(level48);
        defaultLog0.warn((java.lang.Object) "GNU General Public License, version 3");
        org.apache.rat.ReportConfiguration reportConfiguration54 = new org.apache.rat.ReportConfiguration((org.apache.rat.utils.Log) defaultLog0);
        org.apache.rat.utils.DefaultLog defaultLog55 = org.apache.rat.utils.DefaultLog.INSTANCE;
        org.apache.rat.utils.Log log56 = null;
        org.apache.rat.ReportConfiguration reportConfiguration57 = new org.apache.rat.ReportConfiguration(log56);
        reportConfiguration57.addApprovedLicenseCategory(".cvsignore");
        org.apache.rat.utils.Log.Level level60 = org.apache.rat.utils.Log.Level.ERROR;
        reportConfiguration57.logFamilyCollisions(level60);
        defaultLog55.setLevel(level60);
        defaultLog0.debug((java.lang.Object) level60);
        org.apache.rat.utils.Log.Level level64 = defaultLog0.getLevel();
        java.lang.Object obj65 = null;
        defaultLog0.warn(obj65);
        org.apache.rat.configuration.builders.TextBuilder textBuilder67 = new org.apache.rat.configuration.builders.TextBuilder();
        org.apache.rat.configuration.builders.TextBuilder textBuilder69 = textBuilder67.setText("true");
        org.apache.rat.configuration.builders.TextBuilder textBuilder71 = textBuilder69.setText("http://org/apache/rat/meta-data#HeaderSample");
        org.apache.rat.analysis.IHeaderMatcher iHeaderMatcher72 = textBuilder71.build();
        org.apache.rat.configuration.builders.TextCaptureBuilder textCaptureBuilder74 = textBuilder71.setText("W3C  ");
        java.lang.Throwable throwable75 = null;
        // The following exception was thrown during execution in test generation
        try {
            defaultLog0.debug((java.lang.Object) textBuilder71, throwable75);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(defaultLog0);
        org.junit.Assert.assertNull(filenameFilter3);
        org.junit.Assert.assertTrue("'" + licenseFilter4 + "' != '" + org.apache.rat.license.LicenseSetFactory.LicenseFilter.all + "'", licenseFilter4.equals(org.apache.rat.license.LicenseSetFactory.LicenseFilter.all));
        org.junit.Assert.assertNotNull(iLicenseSet5);
        org.junit.Assert.assertTrue("'" + addLicenseHeaders6 + "' != '" + org.apache.rat.config.AddLicenseHeaders.FALSE + "'", addLicenseHeaders6.equals(org.apache.rat.config.AddLicenseHeaders.FALSE));
        org.junit.Assert.assertNull(claimStatistic10);
        org.junit.Assert.assertTrue("'" + licenseFilter11 + "' != '" + org.apache.rat.license.LicenseSetFactory.LicenseFilter.all + "'", licenseFilter11.equals(org.apache.rat.license.LicenseSetFactory.LicenseFilter.all));
        org.junit.Assert.assertNull(filenameFilter16);
        org.junit.Assert.assertTrue("'" + licenseFilter17 + "' != '" + org.apache.rat.license.LicenseSetFactory.LicenseFilter.all + "'", licenseFilter17.equals(org.apache.rat.license.LicenseSetFactory.LicenseFilter.all));
        org.junit.Assert.assertNotNull(iLicenseSet18);
        org.junit.Assert.assertTrue("'" + addLicenseHeaders19 + "' != '" + org.apache.rat.config.AddLicenseHeaders.FALSE + "'", addLicenseHeaders19.equals(org.apache.rat.config.AddLicenseHeaders.FALSE));
        org.junit.Assert.assertNull(claimStatistic23);
        org.junit.Assert.assertTrue("'" + licenseFilter24 + "' != '" + org.apache.rat.license.LicenseSetFactory.LicenseFilter.all + "'", licenseFilter24.equals(org.apache.rat.license.LicenseSetFactory.LicenseFilter.all));
        org.junit.Assert.assertNotNull(outputStreamIOSupplier30);
        org.junit.Assert.assertNull(claimStatistic34);
        org.junit.Assert.assertNull(claimStatistic37);
        org.junit.Assert.assertTrue("'" + options38 + "' != '" + org.apache.rat.utils.ReportingSet.Options.OVERWRITE + "'", options38.equals(org.apache.rat.utils.ReportingSet.Options.OVERWRITE));
        org.junit.Assert.assertTrue("'" + level48 + "' != '" + org.apache.rat.utils.Log.Level.ERROR + "'", level48.equals(org.apache.rat.utils.Log.Level.ERROR));
        org.junit.Assert.assertNotNull(defaultLog55);
        org.junit.Assert.assertTrue("'" + level60 + "' != '" + org.apache.rat.utils.Log.Level.ERROR + "'", level60.equals(org.apache.rat.utils.Log.Level.ERROR));
        org.junit.Assert.assertTrue("'" + level64 + "' != '" + org.apache.rat.utils.Log.Level.ERROR + "'", level64.equals(org.apache.rat.utils.Log.Level.ERROR));
        org.junit.Assert.assertNotNull(textBuilder69);
        org.junit.Assert.assertNotNull(textBuilder71);
        org.junit.Assert.assertNotNull(iHeaderMatcher72);
        org.junit.Assert.assertNotNull(textCaptureBuilder74);
    }

    @Test
    public void test14534() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest29.test14534");
        org.apache.rat.analysis.matchers.SPDXMatcherFactory sPDXMatcherFactory0 = org.apache.rat.analysis.matchers.SPDXMatcherFactory.INSTANCE;
        org.apache.rat.analysis.IHeaderMatcher iHeaderMatcher2 = sPDXMatcherFactory0.create("GPL3 ");
        org.apache.rat.analysis.IHeaderMatcher iHeaderMatcher4 = sPDXMatcherFactory0.create("6620e9ee-d651-4c18-8162-edad6d18368e");
        org.apache.rat.analysis.IHeaderMatcher iHeaderMatcher6 = sPDXMatcherFactory0.create("Copyright Builder: s:null e:null o:null");
        org.apache.rat.analysis.IHeaderMatcher iHeaderMatcher8 = sPDXMatcherFactory0.create("46eea23e-d320-45bc-aa7f-844d2e1597ce");
        org.apache.rat.analysis.IHeaderMatcher iHeaderMatcher10 = sPDXMatcherFactory0.create("Datum [ name ='http://org/apache/rat/meta-data#LicenseFamilyCategory',value ='OASIS ']");
        org.junit.Assert.assertNotNull(sPDXMatcherFactory0);
        org.junit.Assert.assertNotNull(iHeaderMatcher2);
        org.junit.Assert.assertNotNull(iHeaderMatcher4);
        org.junit.Assert.assertNotNull(iHeaderMatcher6);
        org.junit.Assert.assertNotNull(iHeaderMatcher8);
        org.junit.Assert.assertNotNull(iHeaderMatcher10);
    }

    @Test
    public void test14535() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest29.test14535");
        org.apache.rat.api.MetaData metaData0 = new org.apache.rat.api.MetaData();
        java.lang.String str2 = metaData0.value("COMMON DEVELOPMENT AND DISTRIBUTION LICENSE Version 1.0");
        java.lang.String str4 = metaData0.value("W3C Document Copyright");
        boolean boolean6 = metaData0.clear("hi!");
        java.lang.String str8 = metaData0.value("true");
        org.apache.rat.api.MetaData.Datum datum10 = metaData0.get("GNU General Public License, version 1");
        org.apache.rat.api.MetaData.Datum datum11 = org.apache.rat.api.MetaData.RAT_LICENSE_FAMILY_CATEGORY_DATUM_MIT;
        java.lang.String str12 = datum11.getName();
        metaData0.set(datum11);
        boolean boolean15 = metaData0.clear("TextBuilder: true http://org/apache/rat/meta-data#LicenseFamilyName");
        metaData0.clear();
        org.apache.rat.api.MetaData.Datum datum17 = org.apache.rat.api.MetaData.RAT_LICENSE_FAMILY_CATEGORY_DATUM_UNKNOWN;
        java.lang.String str18 = datum17.getValue();
        java.lang.String str19 = datum17.getValue();
        metaData0.set(datum17);
        java.util.Collection<org.apache.rat.api.MetaData.Datum> datumCollection21 = metaData0.getData();
        java.util.Collection<org.apache.rat.api.MetaData.Datum> datumCollection22 = metaData0.getData();
        org.apache.rat.api.MetaData.Datum datum24 = metaData0.get("fc0640a9-0c0c-4acd-9007-70024fefe678");
        org.junit.Assert.assertNull(str2);
        org.junit.Assert.assertNull(str4);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertNull(str8);
        org.junit.Assert.assertNull(datum10);
        org.junit.Assert.assertNotNull(datum11);
        org.junit.Assert.assertEquals("'" + str12 + "' != '" + "http://org/apache/rat/meta-data#LicenseFamilyCategory" + "'", str12, "http://org/apache/rat/meta-data#LicenseFamilyCategory");
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + false + "'", boolean15 == false);
        org.junit.Assert.assertNotNull(datum17);
        org.junit.Assert.assertEquals("'" + str18 + "' != '" + "?????" + "'", str18, "?????");
        org.junit.Assert.assertEquals("'" + str19 + "' != '" + "?????" + "'", str19, "?????");
        org.junit.Assert.assertNotNull(datumCollection21);
        org.junit.Assert.assertNotNull(datumCollection22);
        org.junit.Assert.assertNull(datum24);
    }

    @Test
    public void test14536() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest29.test14536");
        org.apache.rat.license.ILicenseFamily[] iLicenseFamilyArray0 = new org.apache.rat.license.ILicenseFamily[] {};
        java.util.ArrayList<org.apache.rat.license.ILicenseFamily> iLicenseFamilyList1 = new java.util.ArrayList<org.apache.rat.license.ILicenseFamily>();
        boolean boolean2 = java.util.Collections.addAll((java.util.Collection<org.apache.rat.license.ILicenseFamily>) iLicenseFamilyList1, iLicenseFamilyArray0);
        org.apache.rat.policy.DefaultPolicy defaultPolicy3 = new org.apache.rat.policy.DefaultPolicy((java.util.Collection<org.apache.rat.license.ILicenseFamily>) iLicenseFamilyList1);
        java.util.SortedSet<org.apache.rat.license.ILicenseFamily> iLicenseFamilySet4 = defaultPolicy3.getApprovedLicenseNames();
        org.apache.rat.license.ILicense[] iLicenseArray5 = new org.apache.rat.license.ILicense[] {};
        java.util.TreeSet<org.apache.rat.license.ILicense> iLicenseSet6 = new java.util.TreeSet<org.apache.rat.license.ILicense>();
        boolean boolean7 = java.util.Collections.addAll((java.util.Collection<org.apache.rat.license.ILicense>) iLicenseSet6, iLicenseArray5);
        java.lang.String[] strArray20 = new java.lang.String[] { "GPL2 ", "GPL1 ", "notice", "http://org/apache/rat/meta-data#LicenseFamilyName", "notice", "GPL2 ", "http://org/apache/rat/meta-data#LicenseFamilyName", "", "GPL2 ", "", "GPL1 ", "hi!" };
        java.util.ArrayList<java.lang.String> strList21 = new java.util.ArrayList<java.lang.String>();
        boolean boolean22 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strList21, strArray20);
        org.apache.rat.license.LicenseSetFactory licenseSetFactory23 = new org.apache.rat.license.LicenseSetFactory((java.util.SortedSet<org.apache.rat.license.ILicense>) iLicenseSet6, (java.util.Collection<java.lang.String>) strList21);
        org.apache.rat.license.LicenseSetFactory.LicenseFilter licenseFilter24 = org.apache.rat.license.LicenseSetFactory.LicenseFilter.all;
        java.util.SortedSet<org.apache.rat.license.ILicenseFamily> iLicenseFamilySet25 = licenseSetFactory23.getLicenseFamilies(licenseFilter24);
        org.apache.rat.license.ILicense[] iLicenseArray26 = new org.apache.rat.license.ILicense[] {};
        java.util.TreeSet<org.apache.rat.license.ILicense> iLicenseSet27 = new java.util.TreeSet<org.apache.rat.license.ILicense>();
        boolean boolean28 = java.util.Collections.addAll((java.util.Collection<org.apache.rat.license.ILicense>) iLicenseSet27, iLicenseArray26);
        java.lang.String[] strArray41 = new java.lang.String[] { "GPL2 ", "GPL1 ", "notice", "http://org/apache/rat/meta-data#LicenseFamilyName", "notice", "GPL2 ", "http://org/apache/rat/meta-data#LicenseFamilyName", "", "GPL2 ", "", "GPL1 ", "hi!" };
        java.util.ArrayList<java.lang.String> strList42 = new java.util.ArrayList<java.lang.String>();
        boolean boolean43 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strList42, strArray41);
        org.apache.rat.license.LicenseSetFactory licenseSetFactory44 = new org.apache.rat.license.LicenseSetFactory((java.util.SortedSet<org.apache.rat.license.ILicense>) iLicenseSet27, (java.util.Collection<java.lang.String>) strList42);
        org.apache.rat.utils.Log log45 = null;
        org.apache.rat.ReportConfiguration reportConfiguration46 = new org.apache.rat.ReportConfiguration(log45);
        java.io.FilenameFilter filenameFilter47 = reportConfiguration46.getInputFileFilter();
        org.apache.rat.license.LicenseSetFactory.LicenseFilter licenseFilter48 = org.apache.rat.license.LicenseSetFactory.LicenseFilter.all;
        java.util.SortedSet<org.apache.rat.license.ILicense> iLicenseSet49 = reportConfiguration46.getLicenses(licenseFilter48);
        org.apache.rat.config.AddLicenseHeaders addLicenseHeaders50 = org.apache.rat.config.AddLicenseHeaders.FALSE;
        reportConfiguration46.setAddLicenseHeaders(addLicenseHeaders50);
        org.apache.rat.utils.Log log52 = null;
        org.apache.rat.ReportConfiguration reportConfiguration53 = new org.apache.rat.ReportConfiguration(log52);
        org.apache.rat.report.claim.ClaimStatistic claimStatistic54 = org.apache.rat.Reporter.report(reportConfiguration53);
        org.apache.rat.license.LicenseSetFactory.LicenseFilter licenseFilter55 = org.apache.rat.license.LicenseSetFactory.LicenseFilter.all;
        org.apache.rat.Reporter.listLicenses(reportConfiguration53, licenseFilter55);
        org.apache.rat.Reporter.listLicenses(reportConfiguration46, licenseFilter55);
        org.apache.rat.utils.Log log58 = null;
        org.apache.rat.ReportConfiguration reportConfiguration59 = new org.apache.rat.ReportConfiguration(log58);
        java.io.FilenameFilter filenameFilter60 = reportConfiguration59.getInputFileFilter();
        org.apache.rat.license.LicenseSetFactory.LicenseFilter licenseFilter61 = org.apache.rat.license.LicenseSetFactory.LicenseFilter.all;
        java.util.SortedSet<org.apache.rat.license.ILicense> iLicenseSet62 = reportConfiguration59.getLicenses(licenseFilter61);
        org.apache.rat.config.AddLicenseHeaders addLicenseHeaders63 = org.apache.rat.config.AddLicenseHeaders.FALSE;
        reportConfiguration59.setAddLicenseHeaders(addLicenseHeaders63);
        org.apache.rat.utils.Log log65 = null;
        org.apache.rat.ReportConfiguration reportConfiguration66 = new org.apache.rat.ReportConfiguration(log65);
        org.apache.rat.report.claim.ClaimStatistic claimStatistic67 = org.apache.rat.Reporter.report(reportConfiguration66);
        org.apache.rat.license.LicenseSetFactory.LicenseFilter licenseFilter68 = org.apache.rat.license.LicenseSetFactory.LicenseFilter.all;
        org.apache.rat.Reporter.listLicenses(reportConfiguration66, licenseFilter68);
        org.apache.rat.Reporter.listLicenses(reportConfiguration59, licenseFilter68);
        org.apache.rat.Reporter.listLicenses(reportConfiguration46, licenseFilter68);
        java.util.SortedSet<org.apache.rat.license.ILicense> iLicenseSet72 = licenseSetFactory44.getLicenses(licenseFilter68);
        java.util.SortedSet<org.apache.rat.license.ILicenseFamily> iLicenseFamilySet73 = licenseSetFactory23.getLicenseFamilies(licenseFilter68);
        org.apache.rat.policy.DefaultPolicy defaultPolicy74 = new org.apache.rat.policy.DefaultPolicy((java.util.Collection<org.apache.rat.license.ILicenseFamily>) iLicenseFamilySet73);
        org.apache.rat.api.Document document75 = null;
        defaultPolicy74.analyse(document75);
        org.apache.rat.document.IDocumentAnalyser[] iDocumentAnalyserArray77 = new org.apache.rat.document.IDocumentAnalyser[] {};
        org.apache.rat.document.impl.util.DocumentAnalyserMultiplexer documentAnalyserMultiplexer78 = new org.apache.rat.document.impl.util.DocumentAnalyserMultiplexer(iDocumentAnalyserArray77);
        org.apache.rat.api.Document document79 = null;
        documentAnalyserMultiplexer78.analyse(document79);
        org.apache.rat.document.IDocumentAnalyser[] iDocumentAnalyserArray81 = new org.apache.rat.document.IDocumentAnalyser[] { defaultPolicy3, defaultPolicy74, documentAnalyserMultiplexer78 };
        org.apache.rat.document.impl.util.DocumentAnalyserMultiplexer documentAnalyserMultiplexer82 = new org.apache.rat.document.impl.util.DocumentAnalyserMultiplexer(iDocumentAnalyserArray81);
        org.apache.rat.document.impl.util.DocumentAnalyserMultiplexer documentAnalyserMultiplexer83 = new org.apache.rat.document.impl.util.DocumentAnalyserMultiplexer(iDocumentAnalyserArray81);
        org.apache.rat.document.impl.util.DocumentAnalyserMultiplexer documentAnalyserMultiplexer84 = new org.apache.rat.document.impl.util.DocumentAnalyserMultiplexer(iDocumentAnalyserArray81);
        org.apache.rat.document.impl.util.DocumentAnalyserMultiplexer documentAnalyserMultiplexer85 = new org.apache.rat.document.impl.util.DocumentAnalyserMultiplexer(iDocumentAnalyserArray81);
        org.apache.rat.document.impl.util.DocumentAnalyserMultiplexer documentAnalyserMultiplexer86 = new org.apache.rat.document.impl.util.DocumentAnalyserMultiplexer(iDocumentAnalyserArray81);
        org.apache.rat.api.Document document87 = null;
        documentAnalyserMultiplexer86.analyse(document87);
        org.apache.rat.api.Document document89 = null;
        documentAnalyserMultiplexer86.analyse(document89);
        org.apache.rat.api.Document document91 = null;
        documentAnalyserMultiplexer86.analyse(document91);
        org.junit.Assert.assertNotNull(iLicenseFamilyArray0);
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + false + "'", boolean2 == false);
        org.junit.Assert.assertNotNull(iLicenseFamilySet4);
        org.junit.Assert.assertNotNull(iLicenseArray5);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertNotNull(strArray20);
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + true + "'", boolean22 == true);
        org.junit.Assert.assertTrue("'" + licenseFilter24 + "' != '" + org.apache.rat.license.LicenseSetFactory.LicenseFilter.all + "'", licenseFilter24.equals(org.apache.rat.license.LicenseSetFactory.LicenseFilter.all));
        org.junit.Assert.assertNotNull(iLicenseFamilySet25);
        org.junit.Assert.assertNotNull(iLicenseArray26);
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + false + "'", boolean28 == false);
        org.junit.Assert.assertNotNull(strArray41);
        org.junit.Assert.assertTrue("'" + boolean43 + "' != '" + true + "'", boolean43 == true);
        org.junit.Assert.assertNull(filenameFilter47);
        org.junit.Assert.assertTrue("'" + licenseFilter48 + "' != '" + org.apache.rat.license.LicenseSetFactory.LicenseFilter.all + "'", licenseFilter48.equals(org.apache.rat.license.LicenseSetFactory.LicenseFilter.all));
        org.junit.Assert.assertNotNull(iLicenseSet49);
        org.junit.Assert.assertTrue("'" + addLicenseHeaders50 + "' != '" + org.apache.rat.config.AddLicenseHeaders.FALSE + "'", addLicenseHeaders50.equals(org.apache.rat.config.AddLicenseHeaders.FALSE));
        org.junit.Assert.assertNull(claimStatistic54);
        org.junit.Assert.assertTrue("'" + licenseFilter55 + "' != '" + org.apache.rat.license.LicenseSetFactory.LicenseFilter.all + "'", licenseFilter55.equals(org.apache.rat.license.LicenseSetFactory.LicenseFilter.all));
        org.junit.Assert.assertNull(filenameFilter60);
        org.junit.Assert.assertTrue("'" + licenseFilter61 + "' != '" + org.apache.rat.license.LicenseSetFactory.LicenseFilter.all + "'", licenseFilter61.equals(org.apache.rat.license.LicenseSetFactory.LicenseFilter.all));
        org.junit.Assert.assertNotNull(iLicenseSet62);
        org.junit.Assert.assertTrue("'" + addLicenseHeaders63 + "' != '" + org.apache.rat.config.AddLicenseHeaders.FALSE + "'", addLicenseHeaders63.equals(org.apache.rat.config.AddLicenseHeaders.FALSE));
        org.junit.Assert.assertNull(claimStatistic67);
        org.junit.Assert.assertTrue("'" + licenseFilter68 + "' != '" + org.apache.rat.license.LicenseSetFactory.LicenseFilter.all + "'", licenseFilter68.equals(org.apache.rat.license.LicenseSetFactory.LicenseFilter.all));
        org.junit.Assert.assertNotNull(iLicenseSet72);
        org.junit.Assert.assertNotNull(iLicenseFamilySet73);
        org.junit.Assert.assertNotNull(iDocumentAnalyserArray77);
        org.junit.Assert.assertNotNull(iDocumentAnalyserArray81);
    }

    @Test
    public void test14537() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest29.test14537");
        org.apache.rat.utils.ReportingSet<java.lang.String> strSet0 = new org.apache.rat.utils.ReportingSet<java.lang.String>();
        java.lang.Object[] objArray1 = strSet0.toArray();
        org.apache.rat.utils.Log log2 = null;
        org.apache.rat.ReportConfiguration reportConfiguration3 = new org.apache.rat.ReportConfiguration(log2);
        reportConfiguration3.addApprovedLicenseCategory(".cvsignore");
        org.apache.rat.utils.Log.Level level6 = org.apache.rat.utils.Log.Level.ERROR;
        reportConfiguration3.logFamilyCollisions(level6);
        org.apache.commons.io.function.IOSupplier<java.io.OutputStream> outputStreamIOSupplier8 = reportConfiguration3.getOutput();
        org.apache.rat.utils.Log log9 = null;
        org.apache.rat.ReportConfiguration reportConfiguration10 = new org.apache.rat.ReportConfiguration(log9);
        reportConfiguration10.addApprovedLicenseCategory(".cvsignore");
        org.apache.rat.utils.Log log13 = null;
        org.apache.rat.ReportConfiguration reportConfiguration14 = new org.apache.rat.ReportConfiguration(log13);
        java.io.FilenameFilter filenameFilter15 = reportConfiguration14.getInputFileFilter();
        org.apache.rat.license.LicenseSetFactory.LicenseFilter licenseFilter16 = org.apache.rat.license.LicenseSetFactory.LicenseFilter.all;
        java.util.SortedSet<org.apache.rat.license.ILicense> iLicenseSet17 = reportConfiguration14.getLicenses(licenseFilter16);
        reportConfiguration10.addLicensesIfNotPresent((java.util.Collection<org.apache.rat.license.ILicense>) iLicenseSet17);
        java.io.FilenameFilter filenameFilter19 = reportConfiguration10.getInputFileFilter();
        org.apache.rat.utils.Log log20 = null;
        org.apache.rat.ReportConfiguration reportConfiguration21 = new org.apache.rat.ReportConfiguration(log20);
        java.io.FilenameFilter filenameFilter22 = reportConfiguration21.getInputFileFilter();
        org.apache.rat.license.LicenseSetFactory.LicenseFilter licenseFilter23 = org.apache.rat.license.LicenseSetFactory.LicenseFilter.all;
        java.util.SortedSet<org.apache.rat.license.ILicense> iLicenseSet24 = reportConfiguration21.getLicenses(licenseFilter23);
        org.apache.rat.config.AddLicenseHeaders addLicenseHeaders25 = org.apache.rat.config.AddLicenseHeaders.FALSE;
        reportConfiguration21.setAddLicenseHeaders(addLicenseHeaders25);
        org.apache.rat.utils.Log log27 = null;
        org.apache.rat.ReportConfiguration reportConfiguration28 = new org.apache.rat.ReportConfiguration(log27);
        org.apache.rat.report.claim.ClaimStatistic claimStatistic29 = org.apache.rat.Reporter.report(reportConfiguration28);
        org.apache.rat.license.LicenseSetFactory.LicenseFilter licenseFilter30 = org.apache.rat.license.LicenseSetFactory.LicenseFilter.all;
        org.apache.rat.Reporter.listLicenses(reportConfiguration28, licenseFilter30);
        org.apache.rat.Reporter.listLicenses(reportConfiguration21, licenseFilter30);
        org.apache.rat.utils.Log log33 = null;
        org.apache.rat.ReportConfiguration reportConfiguration34 = new org.apache.rat.ReportConfiguration(log33);
        java.io.FilenameFilter filenameFilter35 = reportConfiguration34.getInputFileFilter();
        org.apache.rat.license.LicenseSetFactory.LicenseFilter licenseFilter36 = org.apache.rat.license.LicenseSetFactory.LicenseFilter.all;
        java.util.SortedSet<org.apache.rat.license.ILicense> iLicenseSet37 = reportConfiguration34.getLicenses(licenseFilter36);
        org.apache.rat.config.AddLicenseHeaders addLicenseHeaders38 = org.apache.rat.config.AddLicenseHeaders.FALSE;
        reportConfiguration34.setAddLicenseHeaders(addLicenseHeaders38);
        org.apache.rat.utils.Log log40 = null;
        org.apache.rat.ReportConfiguration reportConfiguration41 = new org.apache.rat.ReportConfiguration(log40);
        org.apache.rat.report.claim.ClaimStatistic claimStatistic42 = org.apache.rat.Reporter.report(reportConfiguration41);
        org.apache.rat.license.LicenseSetFactory.LicenseFilter licenseFilter43 = org.apache.rat.license.LicenseSetFactory.LicenseFilter.all;
        org.apache.rat.Reporter.listLicenses(reportConfiguration41, licenseFilter43);
        org.apache.rat.Reporter.listLicenses(reportConfiguration34, licenseFilter43);
        java.util.SortedSet<org.apache.rat.license.ILicenseFamily> iLicenseFamilySet46 = reportConfiguration21.getLicenseFamilies(licenseFilter43);
        org.apache.rat.Reporter.listLicenseFamilies(reportConfiguration10, licenseFilter43);
        java.util.SortedSet<org.apache.rat.license.ILicenseFamily> iLicenseFamilySet48 = reportConfiguration3.getLicenseFamilies(licenseFilter43);
        java.util.Collection<java.lang.String> strCollection49 = null;
        org.apache.rat.license.LicenseFamilySetFactory licenseFamilySetFactory50 = new org.apache.rat.license.LicenseFamilySetFactory(iLicenseFamilySet48, strCollection49);
        boolean boolean51 = strSet0.removeAll((java.util.Collection<org.apache.rat.license.ILicenseFamily>) iLicenseFamilySet48);
        boolean boolean53 = strSet0.addIfNotPresent("22d821a7-325b-4a40-8f38-f9cfc616d71a");
        org.apache.rat.utils.ReportingSet<java.lang.String> strSet55 = strSet0.headSet("Datum [ name ='3c840dc2-bef0-42b5-b26c-35a568d53a24',value ='NotBuilder: null ']");
        boolean boolean57 = strSet55.addIfNotPresent("9df69ca9-2229-47b6-966b-221652fd7d08");
        java.lang.Object[] objArray58 = strSet55.toArray();
        org.junit.Assert.assertNotNull(objArray1);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray1), "[]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray1), "[]");
        org.junit.Assert.assertTrue("'" + level6 + "' != '" + org.apache.rat.utils.Log.Level.ERROR + "'", level6.equals(org.apache.rat.utils.Log.Level.ERROR));
        org.junit.Assert.assertNotNull(outputStreamIOSupplier8);
        org.junit.Assert.assertNull(filenameFilter15);
        org.junit.Assert.assertTrue("'" + licenseFilter16 + "' != '" + org.apache.rat.license.LicenseSetFactory.LicenseFilter.all + "'", licenseFilter16.equals(org.apache.rat.license.LicenseSetFactory.LicenseFilter.all));
        org.junit.Assert.assertNotNull(iLicenseSet17);
        org.junit.Assert.assertNull(filenameFilter19);
        org.junit.Assert.assertNull(filenameFilter22);
        org.junit.Assert.assertTrue("'" + licenseFilter23 + "' != '" + org.apache.rat.license.LicenseSetFactory.LicenseFilter.all + "'", licenseFilter23.equals(org.apache.rat.license.LicenseSetFactory.LicenseFilter.all));
        org.junit.Assert.assertNotNull(iLicenseSet24);
        org.junit.Assert.assertTrue("'" + addLicenseHeaders25 + "' != '" + org.apache.rat.config.AddLicenseHeaders.FALSE + "'", addLicenseHeaders25.equals(org.apache.rat.config.AddLicenseHeaders.FALSE));
        org.junit.Assert.assertNull(claimStatistic29);
        org.junit.Assert.assertTrue("'" + licenseFilter30 + "' != '" + org.apache.rat.license.LicenseSetFactory.LicenseFilter.all + "'", licenseFilter30.equals(org.apache.rat.license.LicenseSetFactory.LicenseFilter.all));
        org.junit.Assert.assertNull(filenameFilter35);
        org.junit.Assert.assertTrue("'" + licenseFilter36 + "' != '" + org.apache.rat.license.LicenseSetFactory.LicenseFilter.all + "'", licenseFilter36.equals(org.apache.rat.license.LicenseSetFactory.LicenseFilter.all));
        org.junit.Assert.assertNotNull(iLicenseSet37);
        org.junit.Assert.assertTrue("'" + addLicenseHeaders38 + "' != '" + org.apache.rat.config.AddLicenseHeaders.FALSE + "'", addLicenseHeaders38.equals(org.apache.rat.config.AddLicenseHeaders.FALSE));
        org.junit.Assert.assertNull(claimStatistic42);
        org.junit.Assert.assertTrue("'" + licenseFilter43 + "' != '" + org.apache.rat.license.LicenseSetFactory.LicenseFilter.all + "'", licenseFilter43.equals(org.apache.rat.license.LicenseSetFactory.LicenseFilter.all));
        org.junit.Assert.assertNotNull(iLicenseFamilySet46);
        org.junit.Assert.assertNotNull(iLicenseFamilySet48);
        org.junit.Assert.assertTrue("'" + boolean51 + "' != '" + false + "'", boolean51 == false);
        org.junit.Assert.assertTrue("'" + boolean53 + "' != '" + true + "'", boolean53 == true);
        org.junit.Assert.assertNotNull(strSet55);
        org.junit.Assert.assertTrue("'" + boolean57 + "' != '" + true + "'", boolean57 == true);
        org.junit.Assert.assertNotNull(objArray58);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray58), "[22d821a7-325b-4a40-8f38-f9cfc616d71a, 9df69ca9-2229-47b6-966b-221652fd7d08]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray58), "[22d821a7-325b-4a40-8f38-f9cfc616d71a, 9df69ca9-2229-47b6-966b-221652fd7d08]");
    }

    @Test
    public void test14538() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest29.test14538");
        org.apache.rat.analysis.matchers.SimpleTextMatcher simpleTextMatcher2 = new org.apache.rat.analysis.matchers.SimpleTextMatcher("094643d4-94c6-478a-b861-15e14bd2e656", "Datum [ name ='d25f13bc-1910-4451-97b5-b72663551a5d',value ='a8ad40e5-63d4-4711-aeee-d32efcd029a3 ']");
    }

    @Test
    public void test14539() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest29.test14539");
        org.apache.rat.utils.Log log0 = null;
        org.apache.rat.ReportConfiguration reportConfiguration1 = new org.apache.rat.ReportConfiguration(log0);
        java.io.FilenameFilter filenameFilter2 = reportConfiguration1.getInputFileFilter();
        org.apache.rat.license.LicenseSetFactory.LicenseFilter licenseFilter3 = org.apache.rat.license.LicenseSetFactory.LicenseFilter.all;
        java.util.SortedSet<org.apache.rat.license.ILicense> iLicenseSet4 = reportConfiguration1.getLicenses(licenseFilter3);
        org.apache.rat.config.AddLicenseHeaders addLicenseHeaders5 = org.apache.rat.config.AddLicenseHeaders.FALSE;
        reportConfiguration1.setAddLicenseHeaders(addLicenseHeaders5);
        org.apache.rat.utils.Log log7 = null;
        org.apache.rat.ReportConfiguration reportConfiguration8 = new org.apache.rat.ReportConfiguration(log7);
        org.apache.rat.report.claim.ClaimStatistic claimStatistic9 = org.apache.rat.Reporter.report(reportConfiguration8);
        org.apache.rat.license.LicenseSetFactory.LicenseFilter licenseFilter10 = org.apache.rat.license.LicenseSetFactory.LicenseFilter.all;
        org.apache.rat.Reporter.listLicenses(reportConfiguration8, licenseFilter10);
        org.apache.rat.Reporter.listLicenses(reportConfiguration1, licenseFilter10);
        org.apache.rat.utils.Log log13 = null;
        org.apache.rat.ReportConfiguration reportConfiguration14 = new org.apache.rat.ReportConfiguration(log13);
        java.io.FilenameFilter filenameFilter15 = reportConfiguration14.getInputFileFilter();
        org.apache.rat.license.LicenseSetFactory.LicenseFilter licenseFilter16 = org.apache.rat.license.LicenseSetFactory.LicenseFilter.all;
        java.util.SortedSet<org.apache.rat.license.ILicense> iLicenseSet17 = reportConfiguration14.getLicenses(licenseFilter16);
        org.apache.rat.config.AddLicenseHeaders addLicenseHeaders18 = org.apache.rat.config.AddLicenseHeaders.FALSE;
        reportConfiguration14.setAddLicenseHeaders(addLicenseHeaders18);
        org.apache.rat.utils.Log log20 = null;
        org.apache.rat.ReportConfiguration reportConfiguration21 = new org.apache.rat.ReportConfiguration(log20);
        org.apache.rat.report.claim.ClaimStatistic claimStatistic22 = org.apache.rat.Reporter.report(reportConfiguration21);
        org.apache.rat.license.LicenseSetFactory.LicenseFilter licenseFilter23 = org.apache.rat.license.LicenseSetFactory.LicenseFilter.all;
        org.apache.rat.Reporter.listLicenses(reportConfiguration21, licenseFilter23);
        org.apache.rat.Reporter.listLicenses(reportConfiguration14, licenseFilter23);
        org.apache.rat.Reporter.listLicenses(reportConfiguration1, licenseFilter23);
        org.apache.rat.license.ILicenseFamily[] iLicenseFamilyArray27 = new org.apache.rat.license.ILicenseFamily[] {};
        java.util.ArrayList<org.apache.rat.license.ILicenseFamily> iLicenseFamilyList28 = new java.util.ArrayList<org.apache.rat.license.ILicenseFamily>();
        boolean boolean29 = java.util.Collections.addAll((java.util.Collection<org.apache.rat.license.ILicenseFamily>) iLicenseFamilyList28, iLicenseFamilyArray27);
        org.apache.rat.policy.DefaultPolicy defaultPolicy30 = new org.apache.rat.policy.DefaultPolicy((java.util.Collection<org.apache.rat.license.ILicenseFamily>) iLicenseFamilyList28);
        java.util.SortedSet<org.apache.rat.license.ILicenseFamily> iLicenseFamilySet31 = defaultPolicy30.getApprovedLicenseNames();
        reportConfiguration1.addFamilies((java.util.Collection<org.apache.rat.license.ILicenseFamily>) iLicenseFamilySet31);
        org.apache.rat.utils.Log log33 = reportConfiguration1.getLog();
        java.lang.String[] strArray39 = new java.lang.String[] { "http://org/apache/rat/meta-data#LicenseFamilyCategory", "Datum [ name ='http://org/apache/rat/meta-data#LicenseFamilyCategory',value ='GPL1  ']", "MANIFEST.MF", "AllBuilder:", "The MIT License" };
        org.apache.rat.utils.ReportingSet<java.lang.String> strSet40 = new org.apache.rat.utils.ReportingSet<java.lang.String>();
        boolean boolean41 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strSet40, strArray39);
        boolean boolean43 = strSet40.addIfNotPresent("http://org/apache/rat/meta-data#LicenseFamilyName");
        boolean boolean45 = strSet40.addIfNotPresent("ef7a8b13-64c3-4510-bb0c-dbf208e1e73f");
        org.apache.rat.utils.Log log46 = null;
        org.apache.rat.ReportConfiguration reportConfiguration47 = new org.apache.rat.ReportConfiguration(log46);
        org.apache.commons.io.function.IOSupplier<java.io.OutputStream> outputStreamIOSupplier48 = reportConfiguration47.getOutput();
        org.apache.commons.io.filefilter.IOFileFilter iOFileFilter49 = reportConfiguration47.getDirectoryFilter();
        org.apache.rat.utils.Log log50 = null;
        org.apache.rat.ReportConfiguration reportConfiguration51 = new org.apache.rat.ReportConfiguration(log50);
        reportConfiguration51.addApprovedLicenseCategory(".cvsignore");
        org.apache.rat.utils.Log log54 = null;
        org.apache.rat.ReportConfiguration reportConfiguration55 = new org.apache.rat.ReportConfiguration(log54);
        java.io.FilenameFilter filenameFilter56 = reportConfiguration55.getInputFileFilter();
        org.apache.rat.license.LicenseSetFactory.LicenseFilter licenseFilter57 = org.apache.rat.license.LicenseSetFactory.LicenseFilter.all;
        java.util.SortedSet<org.apache.rat.license.ILicense> iLicenseSet58 = reportConfiguration55.getLicenses(licenseFilter57);
        reportConfiguration51.addLicensesIfNotPresent((java.util.Collection<org.apache.rat.license.ILicense>) iLicenseSet58);
        java.io.FilenameFilter filenameFilter60 = reportConfiguration51.getInputFileFilter();
        org.apache.rat.utils.Log log61 = null;
        org.apache.rat.ReportConfiguration reportConfiguration62 = new org.apache.rat.ReportConfiguration(log61);
        java.io.FilenameFilter filenameFilter63 = reportConfiguration62.getInputFileFilter();
        org.apache.rat.license.LicenseSetFactory.LicenseFilter licenseFilter64 = org.apache.rat.license.LicenseSetFactory.LicenseFilter.all;
        java.util.SortedSet<org.apache.rat.license.ILicense> iLicenseSet65 = reportConfiguration62.getLicenses(licenseFilter64);
        org.apache.rat.config.AddLicenseHeaders addLicenseHeaders66 = org.apache.rat.config.AddLicenseHeaders.FALSE;
        reportConfiguration62.setAddLicenseHeaders(addLicenseHeaders66);
        org.apache.rat.utils.Log log68 = null;
        org.apache.rat.ReportConfiguration reportConfiguration69 = new org.apache.rat.ReportConfiguration(log68);
        org.apache.rat.report.claim.ClaimStatistic claimStatistic70 = org.apache.rat.Reporter.report(reportConfiguration69);
        org.apache.rat.license.LicenseSetFactory.LicenseFilter licenseFilter71 = org.apache.rat.license.LicenseSetFactory.LicenseFilter.all;
        org.apache.rat.Reporter.listLicenses(reportConfiguration69, licenseFilter71);
        org.apache.rat.Reporter.listLicenses(reportConfiguration62, licenseFilter71);
        org.apache.rat.utils.Log log74 = null;
        org.apache.rat.ReportConfiguration reportConfiguration75 = new org.apache.rat.ReportConfiguration(log74);
        java.io.FilenameFilter filenameFilter76 = reportConfiguration75.getInputFileFilter();
        org.apache.rat.license.LicenseSetFactory.LicenseFilter licenseFilter77 = org.apache.rat.license.LicenseSetFactory.LicenseFilter.all;
        java.util.SortedSet<org.apache.rat.license.ILicense> iLicenseSet78 = reportConfiguration75.getLicenses(licenseFilter77);
        org.apache.rat.config.AddLicenseHeaders addLicenseHeaders79 = org.apache.rat.config.AddLicenseHeaders.FALSE;
        reportConfiguration75.setAddLicenseHeaders(addLicenseHeaders79);
        org.apache.rat.utils.Log log81 = null;
        org.apache.rat.ReportConfiguration reportConfiguration82 = new org.apache.rat.ReportConfiguration(log81);
        org.apache.rat.report.claim.ClaimStatistic claimStatistic83 = org.apache.rat.Reporter.report(reportConfiguration82);
        org.apache.rat.license.LicenseSetFactory.LicenseFilter licenseFilter84 = org.apache.rat.license.LicenseSetFactory.LicenseFilter.all;
        org.apache.rat.Reporter.listLicenses(reportConfiguration82, licenseFilter84);
        org.apache.rat.Reporter.listLicenses(reportConfiguration75, licenseFilter84);
        java.util.SortedSet<org.apache.rat.license.ILicenseFamily> iLicenseFamilySet87 = reportConfiguration62.getLicenseFamilies(licenseFilter84);
        org.apache.rat.Reporter.listLicenseFamilies(reportConfiguration51, licenseFilter84);
        java.util.SortedSet<org.apache.rat.license.ILicenseFamily> iLicenseFamilySet89 = reportConfiguration47.getLicenseFamilies(licenseFilter84);
        org.apache.rat.policy.DefaultPolicy defaultPolicy90 = new org.apache.rat.policy.DefaultPolicy((java.util.Collection<org.apache.rat.license.ILicenseFamily>) iLicenseFamilySet89);
        boolean boolean91 = strSet40.retainAll((java.util.Collection<org.apache.rat.license.ILicenseFamily>) iLicenseFamilySet89);
        reportConfiguration1.addFamilies((java.util.Collection<org.apache.rat.license.ILicenseFamily>) iLicenseFamilySet89);
        reportConfiguration1.setStyleReport(false);
        org.junit.Assert.assertNull(filenameFilter2);
        org.junit.Assert.assertTrue("'" + licenseFilter3 + "' != '" + org.apache.rat.license.LicenseSetFactory.LicenseFilter.all + "'", licenseFilter3.equals(org.apache.rat.license.LicenseSetFactory.LicenseFilter.all));
        org.junit.Assert.assertNotNull(iLicenseSet4);
        org.junit.Assert.assertTrue("'" + addLicenseHeaders5 + "' != '" + org.apache.rat.config.AddLicenseHeaders.FALSE + "'", addLicenseHeaders5.equals(org.apache.rat.config.AddLicenseHeaders.FALSE));
        org.junit.Assert.assertNull(claimStatistic9);
        org.junit.Assert.assertTrue("'" + licenseFilter10 + "' != '" + org.apache.rat.license.LicenseSetFactory.LicenseFilter.all + "'", licenseFilter10.equals(org.apache.rat.license.LicenseSetFactory.LicenseFilter.all));
        org.junit.Assert.assertNull(filenameFilter15);
        org.junit.Assert.assertTrue("'" + licenseFilter16 + "' != '" + org.apache.rat.license.LicenseSetFactory.LicenseFilter.all + "'", licenseFilter16.equals(org.apache.rat.license.LicenseSetFactory.LicenseFilter.all));
        org.junit.Assert.assertNotNull(iLicenseSet17);
        org.junit.Assert.assertTrue("'" + addLicenseHeaders18 + "' != '" + org.apache.rat.config.AddLicenseHeaders.FALSE + "'", addLicenseHeaders18.equals(org.apache.rat.config.AddLicenseHeaders.FALSE));
        org.junit.Assert.assertNull(claimStatistic22);
        org.junit.Assert.assertTrue("'" + licenseFilter23 + "' != '" + org.apache.rat.license.LicenseSetFactory.LicenseFilter.all + "'", licenseFilter23.equals(org.apache.rat.license.LicenseSetFactory.LicenseFilter.all));
        org.junit.Assert.assertNotNull(iLicenseFamilyArray27);
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + false + "'", boolean29 == false);
        org.junit.Assert.assertNotNull(iLicenseFamilySet31);
        org.junit.Assert.assertNull(log33);
        org.junit.Assert.assertNotNull(strArray39);
        org.junit.Assert.assertTrue("'" + boolean41 + "' != '" + true + "'", boolean41 == true);
        org.junit.Assert.assertTrue("'" + boolean43 + "' != '" + true + "'", boolean43 == true);
        org.junit.Assert.assertTrue("'" + boolean45 + "' != '" + true + "'", boolean45 == true);
        org.junit.Assert.assertNotNull(outputStreamIOSupplier48);
        org.junit.Assert.assertNotNull(iOFileFilter49);
        org.junit.Assert.assertNull(filenameFilter56);
        org.junit.Assert.assertTrue("'" + licenseFilter57 + "' != '" + org.apache.rat.license.LicenseSetFactory.LicenseFilter.all + "'", licenseFilter57.equals(org.apache.rat.license.LicenseSetFactory.LicenseFilter.all));
        org.junit.Assert.assertNotNull(iLicenseSet58);
        org.junit.Assert.assertNull(filenameFilter60);
        org.junit.Assert.assertNull(filenameFilter63);
        org.junit.Assert.assertTrue("'" + licenseFilter64 + "' != '" + org.apache.rat.license.LicenseSetFactory.LicenseFilter.all + "'", licenseFilter64.equals(org.apache.rat.license.LicenseSetFactory.LicenseFilter.all));
        org.junit.Assert.assertNotNull(iLicenseSet65);
        org.junit.Assert.assertTrue("'" + addLicenseHeaders66 + "' != '" + org.apache.rat.config.AddLicenseHeaders.FALSE + "'", addLicenseHeaders66.equals(org.apache.rat.config.AddLicenseHeaders.FALSE));
        org.junit.Assert.assertNull(claimStatistic70);
        org.junit.Assert.assertTrue("'" + licenseFilter71 + "' != '" + org.apache.rat.license.LicenseSetFactory.LicenseFilter.all + "'", licenseFilter71.equals(org.apache.rat.license.LicenseSetFactory.LicenseFilter.all));
        org.junit.Assert.assertNull(filenameFilter76);
        org.junit.Assert.assertTrue("'" + licenseFilter77 + "' != '" + org.apache.rat.license.LicenseSetFactory.LicenseFilter.all + "'", licenseFilter77.equals(org.apache.rat.license.LicenseSetFactory.LicenseFilter.all));
        org.junit.Assert.assertNotNull(iLicenseSet78);
        org.junit.Assert.assertTrue("'" + addLicenseHeaders79 + "' != '" + org.apache.rat.config.AddLicenseHeaders.FALSE + "'", addLicenseHeaders79.equals(org.apache.rat.config.AddLicenseHeaders.FALSE));
        org.junit.Assert.assertNull(claimStatistic83);
        org.junit.Assert.assertTrue("'" + licenseFilter84 + "' != '" + org.apache.rat.license.LicenseSetFactory.LicenseFilter.all + "'", licenseFilter84.equals(org.apache.rat.license.LicenseSetFactory.LicenseFilter.all));
        org.junit.Assert.assertNotNull(iLicenseFamilySet87);
        org.junit.Assert.assertNotNull(iLicenseFamilySet89);
        org.junit.Assert.assertTrue("'" + boolean91 + "' != '" + true + "'", boolean91 == true);
    }

    @Test
    public void test14540() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest29.test14540");
        org.apache.rat.configuration.builders.CopyrightBuilder copyrightBuilder0 = org.apache.rat.analysis.IHeaderMatcher.Builder.copyright();
        java.lang.String str1 = copyrightBuilder0.toString();
        org.apache.rat.configuration.builders.CopyrightBuilder copyrightBuilder3 = copyrightBuilder0.setEnd(".cvsignore");
        boolean boolean4 = copyrightBuilder0.hasId();
        boolean boolean5 = copyrightBuilder0.hasId();
        org.apache.rat.analysis.IHeaderMatcher iHeaderMatcher6 = copyrightBuilder0.build();
        org.apache.rat.configuration.builders.CopyrightBuilder copyrightBuilder8 = copyrightBuilder0.setEnd("AnyBuilderNotBuilderMathcerRefBuildernull");
        org.apache.rat.configuration.builders.CopyrightBuilder copyrightBuilder10 = copyrightBuilder0.setOwner("56d7f968-79c2-49f5-a5bd-2e3ac5c2057d");
        org.junit.Assert.assertNotNull(copyrightBuilder0);
        org.junit.Assert.assertEquals("'" + str1 + "' != '" + "Copyright Builder: s:null e:null o:null" + "'", str1, "Copyright Builder: s:null e:null o:null");
        org.junit.Assert.assertNotNull(copyrightBuilder3);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertNotNull(iHeaderMatcher6);
        org.junit.Assert.assertNotNull(copyrightBuilder8);
        org.junit.Assert.assertNotNull(copyrightBuilder10);
    }

    @Test
    public void test14541() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest29.test14541");
        org.apache.rat.license.ILicense.Builder builder2 = org.apache.rat.license.ILicense.builder();
        org.apache.rat.license.ILicense.Builder builder4 = builder2.setLicenseFamilyCategory("");
        org.apache.rat.analysis.matchers.FullTextMatcher fullTextMatcher6 = new org.apache.rat.analysis.matchers.FullTextMatcher("ef7a8b13-64c3-4510-bb0c-dbf208e1e73f");
        org.apache.rat.license.ILicense.Builder builder7 = builder2.setMatcher((org.apache.rat.analysis.IHeaderMatcher) fullTextMatcher6);
        org.apache.rat.license.ILicense.Builder builder9 = builder2.setId("CDDL1");
        org.apache.rat.configuration.builders.AnyBuilder anyBuilder10 = org.apache.rat.analysis.IHeaderMatcher.Builder.any();
        org.apache.rat.analysis.IHeaderMatcher iHeaderMatcher11 = anyBuilder10.build();
        org.apache.rat.analysis.IHeaderMatcher.State state12 = iHeaderMatcher11.finalizeState();
        org.apache.rat.license.ILicense.Builder builder13 = builder9.setMatcher(iHeaderMatcher11);
        org.apache.rat.analysis.matchers.NotMatcher notMatcher14 = new org.apache.rat.analysis.matchers.NotMatcher("SpdxBuilder: true", iHeaderMatcher11);
        org.apache.rat.analysis.matchers.NotMatcher notMatcher15 = new org.apache.rat.analysis.matchers.NotMatcher("8b0f465d-8e20-4a9a-bf18-a9071da56719", (org.apache.rat.analysis.IHeaderMatcher) notMatcher14);
        org.junit.Assert.assertNotNull(builder2);
        org.junit.Assert.assertNotNull(builder4);
        org.junit.Assert.assertNotNull(builder7);
        org.junit.Assert.assertNotNull(builder9);
        org.junit.Assert.assertNotNull(anyBuilder10);
        org.junit.Assert.assertNotNull(iHeaderMatcher11);
        org.junit.Assert.assertTrue("'" + state12 + "' != '" + org.apache.rat.analysis.IHeaderMatcher.State.f + "'", state12.equals(org.apache.rat.analysis.IHeaderMatcher.State.f));
        org.junit.Assert.assertNotNull(builder13);
    }

    @Test
    public void test14542() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest29.test14542");
        org.apache.rat.configuration.builders.MatcherRefBuilder matcherRefBuilder0 = org.apache.rat.analysis.IHeaderMatcher.Builder.matcherRef();
        boolean boolean1 = matcherRefBuilder0.hasId();
        java.util.Map<java.lang.String, org.apache.rat.analysis.IHeaderMatcher> strMap2 = null;
        org.apache.rat.configuration.builders.MatcherRefBuilder matcherRefBuilder3 = matcherRefBuilder0.setMatchers(strMap2);
        java.util.Map<java.lang.String, org.apache.rat.analysis.IHeaderMatcher> strMap4 = null;
        org.apache.rat.configuration.builders.MatcherRefBuilder matcherRefBuilder5 = matcherRefBuilder0.setMatchers(strMap4);
        // The following exception was thrown during execution in test generation
        try {
            org.apache.rat.analysis.IHeaderMatcher iHeaderMatcher6 = matcherRefBuilder0.build();
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(matcherRefBuilder0);
        org.junit.Assert.assertTrue("'" + boolean1 + "' != '" + false + "'", boolean1 == false);
        org.junit.Assert.assertNotNull(matcherRefBuilder3);
        org.junit.Assert.assertNotNull(matcherRefBuilder5);
    }

    @Test
    public void test14543() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest29.test14543");
        org.apache.rat.license.ILicense.Builder builder0 = org.apache.rat.license.ILicense.builder();
        org.apache.rat.license.ILicense.Builder builder2 = builder0.setLicenseFamilyCategory("");
        org.apache.rat.analysis.matchers.CopyrightMatcher copyrightMatcher6 = new org.apache.rat.analysis.matchers.CopyrightMatcher("", "GPL1 ", "hi!");
        org.apache.rat.analysis.IHeaderMatcher.State state7 = copyrightMatcher6.finalizeState();
        org.apache.rat.license.ILicense.Builder builder8 = builder2.setMatcher((org.apache.rat.analysis.IHeaderMatcher) copyrightMatcher6);
        org.apache.rat.license.ILicense.Builder builder10 = builder8.setNotes("8f0ee536-38ae-476a-a728-de95e24c13c3");
        org.apache.rat.license.ILicense.Builder builder12 = builder8.setDerivedFrom("274c6a15-09f6-4bfd-ac53-1827770eb507");
        java.util.regex.Pattern pattern14 = null;
        org.apache.rat.analysis.matchers.SimpleRegexMatcher simpleRegexMatcher15 = new org.apache.rat.analysis.matchers.SimpleRegexMatcher("", pattern14);
        java.lang.String str16 = simpleRegexMatcher15.toString();
        org.apache.rat.analysis.IHeaderMatcher.State state17 = simpleRegexMatcher15.currentState();
        org.apache.rat.license.ILicense.Builder builder18 = builder12.setMatcher((org.apache.rat.analysis.IHeaderMatcher) simpleRegexMatcher15);
        java.util.regex.Pattern pattern21 = null;
        org.apache.rat.analysis.matchers.SimpleRegexMatcher simpleRegexMatcher22 = new org.apache.rat.analysis.matchers.SimpleRegexMatcher("", pattern21);
        java.lang.String str23 = simpleRegexMatcher22.toString();
        org.apache.rat.analysis.IHeaderMatcher.State state24 = simpleRegexMatcher22.currentState();
        org.apache.rat.analysis.matchers.NotMatcher notMatcher25 = new org.apache.rat.analysis.matchers.NotMatcher("01febb9b-15b8-4e6d-baab-05a93d5dc033", (org.apache.rat.analysis.IHeaderMatcher) simpleRegexMatcher22);
        org.apache.rat.analysis.IHeaderMatcher.State state26 = simpleRegexMatcher22.finalizeState();
        org.apache.rat.license.ILicense.Builder builder27 = builder18.setMatcher((org.apache.rat.analysis.IHeaderMatcher) simpleRegexMatcher22);
        org.apache.rat.license.ILicense.Builder builder29 = builder27.setLicenseFamilyCategory("d8d2dbc5-dfb4-44f5-bfba-1260a4a118a6");
        org.junit.Assert.assertNotNull(builder0);
        org.junit.Assert.assertNotNull(builder2);
        org.junit.Assert.assertTrue("'" + state7 + "' != '" + org.apache.rat.analysis.IHeaderMatcher.State.f + "'", state7.equals(org.apache.rat.analysis.IHeaderMatcher.State.f));
        org.junit.Assert.assertNotNull(builder8);
        org.junit.Assert.assertNotNull(builder10);
        org.junit.Assert.assertNotNull(builder12);
// flaky:         org.junit.Assert.assertEquals("'" + str16 + "' != '" + "6d64b195-69c1-4aa8-9960-80d06fb1aba5" + "'", str16, "6d64b195-69c1-4aa8-9960-80d06fb1aba5");
        org.junit.Assert.assertTrue("'" + state17 + "' != '" + org.apache.rat.analysis.IHeaderMatcher.State.i + "'", state17.equals(org.apache.rat.analysis.IHeaderMatcher.State.i));
        org.junit.Assert.assertNotNull(builder18);
// flaky:         org.junit.Assert.assertEquals("'" + str23 + "' != '" + "fd14d528-2264-48dc-8824-389459dd42c0" + "'", str23, "fd14d528-2264-48dc-8824-389459dd42c0");
        org.junit.Assert.assertTrue("'" + state24 + "' != '" + org.apache.rat.analysis.IHeaderMatcher.State.i + "'", state24.equals(org.apache.rat.analysis.IHeaderMatcher.State.i));
        org.junit.Assert.assertTrue("'" + state26 + "' != '" + org.apache.rat.analysis.IHeaderMatcher.State.f + "'", state26.equals(org.apache.rat.analysis.IHeaderMatcher.State.f));
        org.junit.Assert.assertNotNull(builder27);
        org.junit.Assert.assertNotNull(builder29);
    }

    @Test
    public void test14544() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest29.test14544");
        org.apache.rat.analysis.license.FullTextMatchingLicense fullTextMatchingLicense0 = new org.apache.rat.analysis.license.FullTextMatchingLicense();
        fullTextMatchingLicense0.setLicenseFamilyName("hi!");
        java.lang.String str3 = fullTextMatchingLicense0.getLicenseFamilyCategory();
        java.lang.String str4 = fullTextMatchingLicense0.getLicenseFamilyCategory();
        fullTextMatchingLicense0.setLicenseFamilyCategory("DOJO ");
        java.lang.String str7 = fullTextMatchingLicense0.getNotes();
        fullTextMatchingLicense0.setLicenseFamilyName("Datum");
        org.apache.rat.license.ILicenseFamily iLicenseFamily10 = fullTextMatchingLicense0.getLicenseFamily();
        java.lang.String str11 = iLicenseFamily10.getFamilyCategory();
        org.junit.Assert.assertNull(str3);
        org.junit.Assert.assertNull(str4);
        org.junit.Assert.assertNull(str7);
        org.junit.Assert.assertNotNull(iLicenseFamily10);
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "DOJO " + "'", str11, "DOJO ");
    }

    @Test
    public void test14545() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest29.test14545");
        org.apache.rat.report.claim.ClaimStatistic claimStatistic0 = new org.apache.rat.report.claim.ClaimStatistic();
        claimStatistic0.setNumApproved((int) (short) 10);
        claimStatistic0.setNumUnknown((int) '#');
        int int5 = claimStatistic0.getNumUnApproved();
        java.util.Map<java.lang.String, java.lang.Integer> strMap6 = claimStatistic0.getLicenseFileCodeMap();
        claimStatistic0.setNumGenerated((int) (short) 1);
        java.util.Map<java.lang.String, java.lang.Integer> strMap9 = claimStatistic0.getLicenseFileNameMap();
        java.util.Map<java.lang.String, java.lang.Integer> strMap10 = claimStatistic0.getLicenseFileNameMap();
        int int11 = claimStatistic0.getNumUnApproved();
        java.util.Map<java.lang.String, java.lang.Integer> strMap12 = null;
        claimStatistic0.setLicenseFileCodeMap(strMap12);
        int int14 = claimStatistic0.getNumApproved();
        claimStatistic0.setNumUnknown((-28));
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 0 + "'", int5 == 0);
        org.junit.Assert.assertNull(strMap6);
        org.junit.Assert.assertNull(strMap9);
        org.junit.Assert.assertNull(strMap10);
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 0 + "'", int11 == 0);
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + 10 + "'", int14 == 10);
    }

    @Test
    public void test14546() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest29.test14546");
        org.apache.rat.configuration.builders.TextBuilder textBuilder0 = org.apache.rat.analysis.IHeaderMatcher.Builder.text();
        org.apache.rat.configuration.builders.TextBuilder textBuilder2 = textBuilder0.setText("");
        java.lang.String str3 = textBuilder2.toString();
        org.apache.rat.configuration.builders.TextBuilder textBuilder5 = textBuilder2.setText("d4148d3a-edbc-4672-b347-0fa619553f91");
        org.apache.rat.configuration.builders.TextCaptureBuilder textCaptureBuilder7 = textBuilder2.setText("ba9961f9-a0de-4a54-bd1f-a2e9df26a188");
        org.apache.rat.configuration.builders.TextBuilder textBuilder9 = textBuilder2.setText("RegexBuilder: b1db9857-a506-44af-b49f-cf1fc4c885c7");
        org.junit.Assert.assertNotNull(textBuilder0);
        org.junit.Assert.assertNotNull(textBuilder2);
        org.junit.Assert.assertEquals("'" + str3 + "' != '" + "TextBuilder: " + "'", str3, "TextBuilder: ");
        org.junit.Assert.assertNotNull(textBuilder5);
        org.junit.Assert.assertNotNull(textCaptureBuilder7);
        org.junit.Assert.assertNotNull(textBuilder9);
    }

    @Test
    public void test14547() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest29.test14547");
        org.apache.rat.configuration.builders.NotBuilder notBuilder0 = new org.apache.rat.configuration.builders.NotBuilder();
        java.lang.String str1 = notBuilder0.toString();
        org.apache.rat.configuration.builders.MatcherRefBuilder matcherRefBuilder2 = org.apache.rat.analysis.IHeaderMatcher.Builder.matcherRef();
        boolean boolean3 = matcherRefBuilder2.hasId();
        java.util.Map<java.lang.String, org.apache.rat.analysis.IHeaderMatcher> strMap4 = null;
        org.apache.rat.configuration.builders.MatcherRefBuilder matcherRefBuilder5 = matcherRefBuilder2.setMatchers(strMap4);
        org.apache.rat.configuration.builders.AllBuilder allBuilder6 = new org.apache.rat.configuration.builders.AllBuilder();
        org.apache.rat.configuration.builders.CopyrightBuilder copyrightBuilder7 = org.apache.rat.analysis.IHeaderMatcher.Builder.copyright();
        org.apache.rat.configuration.builders.CopyrightBuilder copyrightBuilder9 = copyrightBuilder7.setStart("OASIS");
        java.lang.String str10 = copyrightBuilder7.toString();
        org.apache.rat.configuration.builders.CopyrightBuilder copyrightBuilder12 = copyrightBuilder7.setStart("223f0aba-15d4-49e9-901e-5740c137aebf");
        org.apache.rat.configuration.builders.MatcherRefBuilder matcherRefBuilder13 = org.apache.rat.analysis.IHeaderMatcher.Builder.matcherRef();
        boolean boolean14 = matcherRefBuilder13.hasId();
        org.apache.rat.configuration.builders.CopyrightBuilder copyrightBuilder15 = org.apache.rat.analysis.IHeaderMatcher.Builder.copyright();
        org.apache.rat.configuration.builders.CopyrightBuilder copyrightBuilder17 = copyrightBuilder15.setStart("OASIS");
        java.lang.String str18 = copyrightBuilder15.toString();
        org.apache.rat.configuration.builders.CopyrightBuilder copyrightBuilder20 = copyrightBuilder15.setStart("223f0aba-15d4-49e9-901e-5740c137aebf");
        org.apache.rat.configuration.builders.CopyrightBuilder copyrightBuilder21 = org.apache.rat.analysis.IHeaderMatcher.Builder.copyright();
        org.apache.rat.configuration.builders.CopyrightBuilder copyrightBuilder22 = org.apache.rat.analysis.IHeaderMatcher.Builder.copyright();
        java.lang.String str23 = copyrightBuilder22.toString();
        org.apache.rat.configuration.builders.CopyrightBuilder copyrightBuilder25 = copyrightBuilder22.setEnd(".cvsignore");
        boolean boolean26 = copyrightBuilder22.hasId();
        org.apache.rat.configuration.builders.CopyrightBuilder copyrightBuilder27 = org.apache.rat.analysis.IHeaderMatcher.Builder.copyright();
        java.lang.String str28 = copyrightBuilder27.toString();
        org.apache.rat.configuration.builders.CopyrightBuilder copyrightBuilder30 = copyrightBuilder27.setEnd(".cvsignore");
        boolean boolean31 = copyrightBuilder27.hasId();
        java.lang.String str32 = copyrightBuilder27.toString();
        org.apache.rat.configuration.builders.CopyrightBuilder copyrightBuilder33 = org.apache.rat.analysis.IHeaderMatcher.Builder.copyright();
        org.apache.rat.configuration.builders.CopyrightBuilder copyrightBuilder35 = copyrightBuilder33.setStart("OASIS");
        org.apache.rat.configuration.builders.AnyBuilder anyBuilder36 = org.apache.rat.analysis.IHeaderMatcher.Builder.any();
        org.apache.rat.configuration.builders.MatcherRefBuilder matcherRefBuilder37 = org.apache.rat.analysis.IHeaderMatcher.Builder.matcherRef();
        boolean boolean38 = matcherRefBuilder37.hasId();
        java.util.Map<java.lang.String, org.apache.rat.analysis.IHeaderMatcher> strMap39 = null;
        org.apache.rat.configuration.builders.MatcherRefBuilder matcherRefBuilder40 = matcherRefBuilder37.setMatchers(strMap39);
        org.apache.rat.configuration.builders.CopyrightBuilder copyrightBuilder41 = org.apache.rat.analysis.IHeaderMatcher.Builder.copyright();
        org.apache.rat.configuration.builders.MatcherRefBuilder matcherRefBuilder42 = org.apache.rat.analysis.IHeaderMatcher.Builder.matcherRef();
        boolean boolean43 = matcherRefBuilder42.hasId();
        java.lang.String str44 = matcherRefBuilder42.toString();
        java.util.Map<java.lang.String, org.apache.rat.analysis.IHeaderMatcher> strMap45 = null;
        org.apache.rat.configuration.builders.MatcherRefBuilder matcherRefBuilder46 = matcherRefBuilder42.setMatchers(strMap45);
        org.apache.rat.analysis.IHeaderMatcher.Builder[] builderArray47 = new org.apache.rat.analysis.IHeaderMatcher.Builder[] { matcherRefBuilder2, allBuilder6, copyrightBuilder12, matcherRefBuilder13, copyrightBuilder15, copyrightBuilder21, copyrightBuilder22, copyrightBuilder27, copyrightBuilder33, anyBuilder36, matcherRefBuilder37, copyrightBuilder41, matcherRefBuilder42 };
        java.util.ArrayList<org.apache.rat.analysis.IHeaderMatcher.Builder> builderList48 = new java.util.ArrayList<org.apache.rat.analysis.IHeaderMatcher.Builder>();
        boolean boolean49 = java.util.Collections.addAll((java.util.Collection<org.apache.rat.analysis.IHeaderMatcher.Builder>) builderList48, builderArray47);
        org.apache.rat.configuration.builders.AbstractBuilder abstractBuilder50 = notBuilder0.add((java.util.Collection<org.apache.rat.analysis.IHeaderMatcher.Builder>) builderList48);
        org.apache.rat.configuration.builders.CopyrightBuilder copyrightBuilder51 = org.apache.rat.analysis.IHeaderMatcher.Builder.copyright();
        java.lang.String str52 = copyrightBuilder51.toString();
        org.apache.rat.configuration.builders.AbstractBuilder abstractBuilder53 = notBuilder0.add((org.apache.rat.analysis.IHeaderMatcher.Builder) copyrightBuilder51);
        java.lang.String str54 = notBuilder0.toString();
        java.lang.String str55 = notBuilder0.toString();
        java.lang.String str56 = notBuilder0.toString();
        org.apache.rat.configuration.builders.CopyrightBuilder copyrightBuilder57 = org.apache.rat.analysis.IHeaderMatcher.Builder.copyright();
        java.lang.String str58 = copyrightBuilder57.toString();
        org.apache.rat.configuration.builders.CopyrightBuilder copyrightBuilder60 = copyrightBuilder57.setEnd(".cvsignore");
        boolean boolean61 = copyrightBuilder57.hasId();
        org.apache.rat.configuration.builders.CopyrightBuilder copyrightBuilder63 = copyrightBuilder57.setOwner("3c840dc2-bef0-42b5-b26c-35a568d53a24");
        org.apache.rat.configuration.builders.CopyrightBuilder copyrightBuilder65 = copyrightBuilder63.setOwner("GPL1 ");
        java.lang.String str66 = copyrightBuilder63.toString();
        org.apache.rat.configuration.builders.CopyrightBuilder copyrightBuilder68 = copyrightBuilder63.setStart("Datum [ name ='http://org/apache/rat/meta-data#LicenseFamilyCategory',value ='GPL1  ']");
        org.apache.rat.analysis.IHeaderMatcher iHeaderMatcher69 = copyrightBuilder63.build();
        org.apache.rat.configuration.builders.AbstractBuilder abstractBuilder70 = notBuilder0.add((org.apache.rat.analysis.IHeaderMatcher.Builder) copyrightBuilder63);
        // The following exception was thrown during execution in test generation
        try {
            java.util.List<org.apache.rat.analysis.IHeaderMatcher> iHeaderMatcherList71 = notBuilder0.getChildren();
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertEquals("'" + str1 + "' != '" + "NotBuilder: null" + "'", str1, "NotBuilder: null");
        org.junit.Assert.assertNotNull(matcherRefBuilder2);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertNotNull(matcherRefBuilder5);
        org.junit.Assert.assertNotNull(copyrightBuilder7);
        org.junit.Assert.assertNotNull(copyrightBuilder9);
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "Copyright Builder: s:OASIS e:null o:null" + "'", str10, "Copyright Builder: s:OASIS e:null o:null");
        org.junit.Assert.assertNotNull(copyrightBuilder12);
        org.junit.Assert.assertNotNull(matcherRefBuilder13);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
        org.junit.Assert.assertNotNull(copyrightBuilder15);
        org.junit.Assert.assertNotNull(copyrightBuilder17);
        org.junit.Assert.assertEquals("'" + str18 + "' != '" + "Copyright Builder: s:OASIS e:null o:null" + "'", str18, "Copyright Builder: s:OASIS e:null o:null");
        org.junit.Assert.assertNotNull(copyrightBuilder20);
        org.junit.Assert.assertNotNull(copyrightBuilder21);
        org.junit.Assert.assertNotNull(copyrightBuilder22);
        org.junit.Assert.assertEquals("'" + str23 + "' != '" + "Copyright Builder: s:null e:null o:null" + "'", str23, "Copyright Builder: s:null e:null o:null");
        org.junit.Assert.assertNotNull(copyrightBuilder25);
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + false + "'", boolean26 == false);
        org.junit.Assert.assertNotNull(copyrightBuilder27);
        org.junit.Assert.assertEquals("'" + str28 + "' != '" + "Copyright Builder: s:null e:null o:null" + "'", str28, "Copyright Builder: s:null e:null o:null");
        org.junit.Assert.assertNotNull(copyrightBuilder30);
        org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + false + "'", boolean31 == false);
        org.junit.Assert.assertEquals("'" + str32 + "' != '" + "Copyright Builder: s:null e:.cvsignore o:null" + "'", str32, "Copyright Builder: s:null e:.cvsignore o:null");
        org.junit.Assert.assertNotNull(copyrightBuilder33);
        org.junit.Assert.assertNotNull(copyrightBuilder35);
        org.junit.Assert.assertNotNull(anyBuilder36);
        org.junit.Assert.assertNotNull(matcherRefBuilder37);
        org.junit.Assert.assertTrue("'" + boolean38 + "' != '" + false + "'", boolean38 == false);
        org.junit.Assert.assertNotNull(matcherRefBuilder40);
        org.junit.Assert.assertNotNull(copyrightBuilder41);
        org.junit.Assert.assertNotNull(matcherRefBuilder42);
        org.junit.Assert.assertTrue("'" + boolean43 + "' != '" + false + "'", boolean43 == false);
        org.junit.Assert.assertEquals("'" + str44 + "' != '" + "MathcerRefBuilder: null" + "'", str44, "MathcerRefBuilder: null");
        org.junit.Assert.assertNotNull(matcherRefBuilder46);
        org.junit.Assert.assertNotNull(builderArray47);
        org.junit.Assert.assertTrue("'" + boolean49 + "' != '" + true + "'", boolean49 == true);
        org.junit.Assert.assertNotNull(abstractBuilder50);
        org.junit.Assert.assertNotNull(copyrightBuilder51);
        org.junit.Assert.assertEquals("'" + str52 + "' != '" + "Copyright Builder: s:null e:null o:null" + "'", str52, "Copyright Builder: s:null e:null o:null");
        org.junit.Assert.assertNotNull(abstractBuilder53);
        org.junit.Assert.assertEquals("'" + str54 + "' != '" + "NotBuilder: MathcerRefBuilder: null" + "'", str54, "NotBuilder: MathcerRefBuilder: null");
        org.junit.Assert.assertEquals("'" + str55 + "' != '" + "NotBuilder: MathcerRefBuilder: null" + "'", str55, "NotBuilder: MathcerRefBuilder: null");
        org.junit.Assert.assertEquals("'" + str56 + "' != '" + "NotBuilder: MathcerRefBuilder: null" + "'", str56, "NotBuilder: MathcerRefBuilder: null");
        org.junit.Assert.assertNotNull(copyrightBuilder57);
        org.junit.Assert.assertEquals("'" + str58 + "' != '" + "Copyright Builder: s:null e:null o:null" + "'", str58, "Copyright Builder: s:null e:null o:null");
        org.junit.Assert.assertNotNull(copyrightBuilder60);
        org.junit.Assert.assertTrue("'" + boolean61 + "' != '" + false + "'", boolean61 == false);
        org.junit.Assert.assertNotNull(copyrightBuilder63);
        org.junit.Assert.assertNotNull(copyrightBuilder65);
        org.junit.Assert.assertEquals("'" + str66 + "' != '" + "Copyright Builder: s:null e:.cvsignore o:GPL1 " + "'", str66, "Copyright Builder: s:null e:.cvsignore o:GPL1 ");
        org.junit.Assert.assertNotNull(copyrightBuilder68);
        org.junit.Assert.assertNotNull(iHeaderMatcher69);
        org.junit.Assert.assertNotNull(abstractBuilder70);
    }

    @Test
    public void test14548() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest29.test14548");
        org.apache.rat.utils.Log log0 = null;
        org.apache.rat.ReportConfiguration reportConfiguration1 = new org.apache.rat.ReportConfiguration(log0);
        org.apache.rat.report.claim.ClaimStatistic claimStatistic2 = org.apache.rat.Reporter.report(reportConfiguration1);
        org.apache.rat.utils.Log log3 = null;
        org.apache.rat.ReportConfiguration reportConfiguration4 = new org.apache.rat.ReportConfiguration(log3);
        org.apache.rat.report.claim.ClaimStatistic claimStatistic5 = org.apache.rat.Reporter.report(reportConfiguration4);
        org.apache.rat.utils.ReportingSet.Options options6 = org.apache.rat.utils.ReportingSet.Options.OVERWRITE;
        reportConfiguration4.licenseDuplicateOption(options6);
        reportConfiguration1.familyDuplicateOption(options6);
        org.apache.commons.io.function.IOSupplier<java.io.PrintWriter> printWriterIOSupplier9 = reportConfiguration1.getWriter();
        reportConfiguration1.addApprovedLicenseCategory("ed42033c-bb2d-4a0c-b6fe-b912f4d3a137");
        java.io.FilenameFilter filenameFilter12 = reportConfiguration1.getInputFileFilter();
        org.junit.Assert.assertNull(claimStatistic2);
        org.junit.Assert.assertNull(claimStatistic5);
        org.junit.Assert.assertTrue("'" + options6 + "' != '" + org.apache.rat.utils.ReportingSet.Options.OVERWRITE + "'", options6.equals(org.apache.rat.utils.ReportingSet.Options.OVERWRITE));
        org.junit.Assert.assertNotNull(printWriterIOSupplier9);
        org.junit.Assert.assertNull(filenameFilter12);
    }

    @Test
    public void test14549() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest29.test14549");
        org.apache.rat.utils.Log log0 = null;
        org.apache.rat.ReportConfiguration reportConfiguration1 = new org.apache.rat.ReportConfiguration(log0);
        java.io.FilenameFilter filenameFilter2 = reportConfiguration1.getInputFileFilter();
        org.apache.rat.license.LicenseSetFactory.LicenseFilter licenseFilter3 = org.apache.rat.license.LicenseSetFactory.LicenseFilter.all;
        java.util.SortedSet<org.apache.rat.license.ILicense> iLicenseSet4 = reportConfiguration1.getLicenses(licenseFilter3);
        org.apache.rat.license.ILicenseFamily iLicenseFamily5 = null;
        reportConfiguration1.addFamily(iLicenseFamily5);
        org.apache.commons.io.filefilter.IOFileFilter iOFileFilter7 = reportConfiguration1.getDirectoryFilter();
        reportConfiguration1.addApprovedLicenseCategory("GPL1 ");
        java.io.FilenameFilter filenameFilter10 = reportConfiguration1.getInputFileFilter();
        org.apache.rat.utils.Log log11 = null;
        org.apache.rat.ReportConfiguration reportConfiguration12 = new org.apache.rat.ReportConfiguration(log11);
        org.apache.commons.io.function.IOSupplier<java.io.OutputStream> outputStreamIOSupplier13 = reportConfiguration12.getOutput();
        org.apache.commons.io.filefilter.IOFileFilter iOFileFilter14 = reportConfiguration12.getDirectoryFilter();
        java.nio.file.Path path15 = null;
        java.nio.file.attribute.BasicFileAttributes basicFileAttributes16 = null;
        java.nio.file.FileVisitResult fileVisitResult17 = iOFileFilter14.accept(path15, basicFileAttributes16);
        org.apache.commons.io.filefilter.IOFileFilter iOFileFilter18 = iOFileFilter14.negate();
        java.nio.file.Path path19 = null;
        boolean boolean20 = iOFileFilter18.matches(path19);
        reportConfiguration1.setInputFileFilter((java.io.FilenameFilter) iOFileFilter18);
        org.apache.rat.report.IReportable iReportable22 = null;
        reportConfiguration1.setReportable(iReportable22);
        org.junit.Assert.assertNull(filenameFilter2);
        org.junit.Assert.assertTrue("'" + licenseFilter3 + "' != '" + org.apache.rat.license.LicenseSetFactory.LicenseFilter.all + "'", licenseFilter3.equals(org.apache.rat.license.LicenseSetFactory.LicenseFilter.all));
        org.junit.Assert.assertNotNull(iLicenseSet4);
        org.junit.Assert.assertNotNull(iOFileFilter7);
        org.junit.Assert.assertNull(filenameFilter10);
        org.junit.Assert.assertNotNull(outputStreamIOSupplier13);
        org.junit.Assert.assertNotNull(iOFileFilter14);
        org.junit.Assert.assertTrue("'" + fileVisitResult17 + "' != '" + java.nio.file.FileVisitResult.TERMINATE + "'", fileVisitResult17.equals(java.nio.file.FileVisitResult.TERMINATE));
        org.junit.Assert.assertNotNull(iOFileFilter18);
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + true + "'", boolean20 == true);
    }

    @Test
    public void test14550() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest29.test14550");
        org.apache.rat.utils.Log log0 = null;
        org.apache.rat.ReportConfiguration reportConfiguration1 = new org.apache.rat.ReportConfiguration(log0);
        java.io.FilenameFilter filenameFilter2 = reportConfiguration1.getInputFileFilter();
        org.apache.rat.license.LicenseSetFactory.LicenseFilter licenseFilter3 = org.apache.rat.license.LicenseSetFactory.LicenseFilter.all;
        java.util.SortedSet<org.apache.rat.license.ILicense> iLicenseSet4 = reportConfiguration1.getLicenses(licenseFilter3);
        org.apache.rat.configuration.Format format6 = org.apache.rat.configuration.Format.XML;
        org.apache.rat.configuration.LicenseReader licenseReader7 = format6.licenseReader();
        org.apache.rat.configuration.MatcherReader matcherReader8 = format6.matcherReader();
        org.apache.rat.configuration.LicenseReader licenseReader9 = format6.licenseReader();
        java.util.SortedSet<org.apache.rat.license.ILicense> iLicenseSet10 = licenseReader9.readLicenses();
        org.apache.rat.license.ILicense iLicense11 = org.apache.rat.license.LicenseSetFactory.search("Datum [ name ='http://org/apache/rat/meta-data#LicenseFamilyCategory',value ='GPL1  ']", iLicenseSet10);
        java.lang.String[] strArray17 = new java.lang.String[] { "http://org/apache/rat/meta-data#LicenseFamilyCategory", "Datum [ name ='http://org/apache/rat/meta-data#LicenseFamilyCategory',value ='GPL1  ']", "MANIFEST.MF", "AllBuilder:", "The MIT License" };
        org.apache.rat.utils.ReportingSet<java.lang.String> strSet18 = new org.apache.rat.utils.ReportingSet<java.lang.String>();
        boolean boolean19 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strSet18, strArray17);
        boolean boolean21 = strSet18.addIfNotPresent("http://org/apache/rat/meta-data#LicenseFamilyName");
        boolean boolean23 = strSet18.addIfNotPresent("ef7a8b13-64c3-4510-bb0c-dbf208e1e73f");
        java.util.function.Function<java.lang.String, java.lang.String> strFunction24 = null;
        org.apache.rat.utils.ReportingSet<java.lang.String> strSet25 = strSet18.setMsgFormat(strFunction24);
        org.apache.rat.utils.DefaultLog defaultLog26 = org.apache.rat.utils.DefaultLog.INSTANCE;
        org.apache.rat.utils.Log log27 = null;
        org.apache.rat.ReportConfiguration reportConfiguration28 = new org.apache.rat.ReportConfiguration(log27);
        java.io.FilenameFilter filenameFilter29 = reportConfiguration28.getInputFileFilter();
        org.apache.rat.license.LicenseSetFactory.LicenseFilter licenseFilter30 = org.apache.rat.license.LicenseSetFactory.LicenseFilter.all;
        java.util.SortedSet<org.apache.rat.license.ILicense> iLicenseSet31 = reportConfiguration28.getLicenses(licenseFilter30);
        org.apache.rat.config.AddLicenseHeaders addLicenseHeaders32 = org.apache.rat.config.AddLicenseHeaders.FALSE;
        reportConfiguration28.setAddLicenseHeaders(addLicenseHeaders32);
        org.apache.rat.utils.Log log34 = null;
        org.apache.rat.ReportConfiguration reportConfiguration35 = new org.apache.rat.ReportConfiguration(log34);
        org.apache.rat.report.claim.ClaimStatistic claimStatistic36 = org.apache.rat.Reporter.report(reportConfiguration35);
        org.apache.rat.license.LicenseSetFactory.LicenseFilter licenseFilter37 = org.apache.rat.license.LicenseSetFactory.LicenseFilter.all;
        org.apache.rat.Reporter.listLicenses(reportConfiguration35, licenseFilter37);
        org.apache.rat.Reporter.listLicenses(reportConfiguration28, licenseFilter37);
        org.apache.rat.utils.Log log40 = null;
        org.apache.rat.ReportConfiguration reportConfiguration41 = new org.apache.rat.ReportConfiguration(log40);
        java.io.FilenameFilter filenameFilter42 = reportConfiguration41.getInputFileFilter();
        org.apache.rat.license.LicenseSetFactory.LicenseFilter licenseFilter43 = org.apache.rat.license.LicenseSetFactory.LicenseFilter.all;
        java.util.SortedSet<org.apache.rat.license.ILicense> iLicenseSet44 = reportConfiguration41.getLicenses(licenseFilter43);
        org.apache.rat.config.AddLicenseHeaders addLicenseHeaders45 = org.apache.rat.config.AddLicenseHeaders.FALSE;
        reportConfiguration41.setAddLicenseHeaders(addLicenseHeaders45);
        org.apache.rat.utils.Log log47 = null;
        org.apache.rat.ReportConfiguration reportConfiguration48 = new org.apache.rat.ReportConfiguration(log47);
        org.apache.rat.report.claim.ClaimStatistic claimStatistic49 = org.apache.rat.Reporter.report(reportConfiguration48);
        org.apache.rat.license.LicenseSetFactory.LicenseFilter licenseFilter50 = org.apache.rat.license.LicenseSetFactory.LicenseFilter.all;
        org.apache.rat.Reporter.listLicenses(reportConfiguration48, licenseFilter50);
        org.apache.rat.Reporter.listLicenses(reportConfiguration41, licenseFilter50);
        org.apache.rat.Reporter.listLicenses(reportConfiguration28, licenseFilter50);
        org.apache.rat.utils.Log log54 = null;
        org.apache.rat.ReportConfiguration reportConfiguration55 = new org.apache.rat.ReportConfiguration(log54);
        org.apache.commons.io.function.IOSupplier<java.io.OutputStream> outputStreamIOSupplier56 = reportConfiguration55.getOutput();
        reportConfiguration28.setOut(outputStreamIOSupplier56);
        org.apache.rat.utils.Log log58 = null;
        org.apache.rat.ReportConfiguration reportConfiguration59 = new org.apache.rat.ReportConfiguration(log58);
        org.apache.rat.report.claim.ClaimStatistic claimStatistic60 = org.apache.rat.Reporter.report(reportConfiguration59);
        org.apache.rat.utils.Log log61 = null;
        org.apache.rat.ReportConfiguration reportConfiguration62 = new org.apache.rat.ReportConfiguration(log61);
        org.apache.rat.report.claim.ClaimStatistic claimStatistic63 = org.apache.rat.Reporter.report(reportConfiguration62);
        org.apache.rat.utils.ReportingSet.Options options64 = org.apache.rat.utils.ReportingSet.Options.OVERWRITE;
        reportConfiguration62.licenseDuplicateOption(options64);
        reportConfiguration59.familyDuplicateOption(options64);
        reportConfiguration28.licenseDuplicateOption(options64);
        reportConfiguration28.addApprovedLicenseCategory("W3C Document Copyright");
        org.apache.rat.utils.Log log70 = null;
        org.apache.rat.ReportConfiguration reportConfiguration71 = new org.apache.rat.ReportConfiguration(log70);
        reportConfiguration71.addApprovedLicenseCategory(".cvsignore");
        org.apache.rat.utils.Log.Level level74 = org.apache.rat.utils.Log.Level.ERROR;
        reportConfiguration71.logLicenseCollisions(level74);
        reportConfiguration28.logLicenseCollisions(level74);
        defaultLog26.setLevel(level74);
        defaultLog26.warn((java.lang.Object) "GNU General Public License, version 3");
        org.apache.rat.ReportConfiguration reportConfiguration80 = new org.apache.rat.ReportConfiguration((org.apache.rat.utils.Log) defaultLog26);
        org.apache.rat.utils.DefaultLog defaultLog81 = org.apache.rat.utils.DefaultLog.INSTANCE;
        org.apache.rat.utils.Log log82 = null;
        org.apache.rat.ReportConfiguration reportConfiguration83 = new org.apache.rat.ReportConfiguration(log82);
        reportConfiguration83.addApprovedLicenseCategory(".cvsignore");
        org.apache.rat.utils.Log.Level level86 = org.apache.rat.utils.Log.Level.ERROR;
        reportConfiguration83.logFamilyCollisions(level86);
        defaultLog81.setLevel(level86);
        defaultLog26.debug((java.lang.Object) level86);
        org.apache.rat.utils.ReportingSet<java.lang.String> strSet90 = strSet25.setLogLevel(level86);
        org.apache.rat.license.LicenseSetFactory licenseSetFactory91 = new org.apache.rat.license.LicenseSetFactory(iLicenseSet10, (java.util.Collection<java.lang.String>) strSet90);
        org.apache.rat.license.LicenseSetFactory licenseSetFactory92 = new org.apache.rat.license.LicenseSetFactory(iLicenseSet4, (java.util.Collection<java.lang.String>) strSet90);
        strSet90.clear();
        java.util.stream.Stream<java.lang.String> strStream94 = strSet90.parallelStream();
        org.apache.rat.utils.ReportingSet<java.lang.String> strSet96 = strSet90.tailSet("SpdxBuilder: 8200bc17-9b9b-4381-a04f-ddf2e7a1c072");
        org.junit.Assert.assertNull(filenameFilter2);
        org.junit.Assert.assertTrue("'" + licenseFilter3 + "' != '" + org.apache.rat.license.LicenseSetFactory.LicenseFilter.all + "'", licenseFilter3.equals(org.apache.rat.license.LicenseSetFactory.LicenseFilter.all));
        org.junit.Assert.assertNotNull(iLicenseSet4);
        org.junit.Assert.assertTrue("'" + format6 + "' != '" + org.apache.rat.configuration.Format.XML + "'", format6.equals(org.apache.rat.configuration.Format.XML));
        org.junit.Assert.assertNotNull(licenseReader7);
        org.junit.Assert.assertNotNull(matcherReader8);
        org.junit.Assert.assertNotNull(licenseReader9);
        org.junit.Assert.assertNotNull(iLicenseSet10);
        org.junit.Assert.assertNull(iLicense11);
        org.junit.Assert.assertNotNull(strArray17);
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + true + "'", boolean19 == true);
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + true + "'", boolean21 == true);
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + true + "'", boolean23 == true);
        org.junit.Assert.assertNotNull(strSet25);
        org.junit.Assert.assertNotNull(defaultLog26);
        org.junit.Assert.assertNull(filenameFilter29);
        org.junit.Assert.assertTrue("'" + licenseFilter30 + "' != '" + org.apache.rat.license.LicenseSetFactory.LicenseFilter.all + "'", licenseFilter30.equals(org.apache.rat.license.LicenseSetFactory.LicenseFilter.all));
        org.junit.Assert.assertNotNull(iLicenseSet31);
        org.junit.Assert.assertTrue("'" + addLicenseHeaders32 + "' != '" + org.apache.rat.config.AddLicenseHeaders.FALSE + "'", addLicenseHeaders32.equals(org.apache.rat.config.AddLicenseHeaders.FALSE));
        org.junit.Assert.assertNull(claimStatistic36);
        org.junit.Assert.assertTrue("'" + licenseFilter37 + "' != '" + org.apache.rat.license.LicenseSetFactory.LicenseFilter.all + "'", licenseFilter37.equals(org.apache.rat.license.LicenseSetFactory.LicenseFilter.all));
        org.junit.Assert.assertNull(filenameFilter42);
        org.junit.Assert.assertTrue("'" + licenseFilter43 + "' != '" + org.apache.rat.license.LicenseSetFactory.LicenseFilter.all + "'", licenseFilter43.equals(org.apache.rat.license.LicenseSetFactory.LicenseFilter.all));
        org.junit.Assert.assertNotNull(iLicenseSet44);
        org.junit.Assert.assertTrue("'" + addLicenseHeaders45 + "' != '" + org.apache.rat.config.AddLicenseHeaders.FALSE + "'", addLicenseHeaders45.equals(org.apache.rat.config.AddLicenseHeaders.FALSE));
        org.junit.Assert.assertNull(claimStatistic49);
        org.junit.Assert.assertTrue("'" + licenseFilter50 + "' != '" + org.apache.rat.license.LicenseSetFactory.LicenseFilter.all + "'", licenseFilter50.equals(org.apache.rat.license.LicenseSetFactory.LicenseFilter.all));
        org.junit.Assert.assertNotNull(outputStreamIOSupplier56);
        org.junit.Assert.assertNull(claimStatistic60);
        org.junit.Assert.assertNull(claimStatistic63);
        org.junit.Assert.assertTrue("'" + options64 + "' != '" + org.apache.rat.utils.ReportingSet.Options.OVERWRITE + "'", options64.equals(org.apache.rat.utils.ReportingSet.Options.OVERWRITE));
        org.junit.Assert.assertTrue("'" + level74 + "' != '" + org.apache.rat.utils.Log.Level.ERROR + "'", level74.equals(org.apache.rat.utils.Log.Level.ERROR));
        org.junit.Assert.assertNotNull(defaultLog81);
        org.junit.Assert.assertTrue("'" + level86 + "' != '" + org.apache.rat.utils.Log.Level.ERROR + "'", level86.equals(org.apache.rat.utils.Log.Level.ERROR));
        org.junit.Assert.assertNotNull(strSet90);
        org.junit.Assert.assertNotNull(strStream94);
        org.junit.Assert.assertNotNull(strSet96);
    }

    @Test
    public void test14551() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest29.test14551");
        java.util.regex.Pattern pattern1 = null;
        org.apache.rat.analysis.matchers.SimpleRegexMatcher simpleRegexMatcher2 = new org.apache.rat.analysis.matchers.SimpleRegexMatcher("8128040d-ca94-4f3f-9deb-6252acd449bd", pattern1);
        org.apache.rat.analysis.IHeaderMatcher.State state3 = simpleRegexMatcher2.currentState();
        java.lang.String str4 = state3.toString();
        org.junit.Assert.assertTrue("'" + state3 + "' != '" + org.apache.rat.analysis.IHeaderMatcher.State.i + "'", state3.equals(org.apache.rat.analysis.IHeaderMatcher.State.i));
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "i indeterminent" + "'", str4, "i indeterminent");
    }

    @Test
    public void test14552() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest29.test14552");
        java.lang.String[] strArray6 = org.apache.commons.io.filefilter.IOFileFilter.EMPTY_STRING_ARRAY;
        boolean boolean7 = org.apache.rat.document.impl.guesser.BinaryGuesser.extensionMatches("Copyright Builder: s:null e:.cvsignore o:null", strArray6);
        boolean boolean8 = org.apache.rat.document.impl.guesser.BinaryGuesser.containsExtension("http://org/apache/rat/meta-data#HeaderCategory", strArray6);
        boolean boolean9 = org.apache.rat.document.impl.guesser.BinaryGuesser.extensionMatches("NotBuilder: MathcerRefBuilder: null", strArray6);
        boolean boolean10 = org.apache.rat.document.impl.guesser.BinaryGuesser.extensionMatches("Datum [ name ='http://org/apache/rat/meta-data#LicenseFamilyCategory',value ='GPL1  ']", strArray6);
        boolean boolean11 = org.apache.rat.document.impl.guesser.BinaryGuesser.containsExtension("Datum [ name ='http://org/apache/rat/meta-data#LicenseFamilyName',value ='W3C Software Copyright ']", strArray6);
        boolean boolean12 = org.apache.rat.document.impl.guesser.BinaryGuesser.containsExtension("Datum [ name ='021187d7-27c2-4fd9-bc74-8cc00413ee52',value ='094643d4-94c6-478a-b861-15e14bd2e656 ']", strArray6);
        org.junit.Assert.assertNotNull(strArray6);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
    }

    @Test
    public void test14553() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest29.test14553");
        org.apache.rat.analysis.license.FullTextMatchingLicense fullTextMatchingLicense0 = new org.apache.rat.analysis.license.FullTextMatchingLicense();
        fullTextMatchingLicense0.setLicenseFamilyName("hi!");
        java.lang.String str3 = fullTextMatchingLicense0.getLicenseFamilyCategory();
        java.lang.String str4 = fullTextMatchingLicense0.getLicenseFamilyCategory();
        fullTextMatchingLicense0.setFullText("NotBuilder: MathcerRefBuilder: null");
        org.apache.rat.license.ILicense.Builder builder7 = fullTextMatchingLicense0.getLicense();
        fullTextMatchingLicense0.setFullText("META-DATA#LICENSEFAMILYNAME',VALUE ='GNU GENERAL PUBLIC LICENSE, VERSION 1 ']");
        org.apache.rat.license.ILicense.Builder builder10 = fullTextMatchingLicense0.getLicense();
        fullTextMatchingLicense0.setLicenseFamilyCategory("c6439e17-b289-4e1a-a191-0a99e37e0519");
        org.junit.Assert.assertNull(str3);
        org.junit.Assert.assertNull(str4);
        org.junit.Assert.assertNotNull(builder7);
        org.junit.Assert.assertNotNull(builder10);
    }

    @Test
    public void test14554() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest29.test14554");
        org.apache.rat.license.ILicense.Builder builder0 = org.apache.rat.license.ILicense.builder();
        org.apache.rat.license.ILicense.Builder builder2 = builder0.setLicenseFamilyCategory("");
        org.apache.rat.analysis.matchers.FullTextMatcher fullTextMatcher4 = new org.apache.rat.analysis.matchers.FullTextMatcher("ef7a8b13-64c3-4510-bb0c-dbf208e1e73f");
        org.apache.rat.license.ILicense.Builder builder5 = builder0.setMatcher((org.apache.rat.analysis.IHeaderMatcher) fullTextMatcher4);
        org.apache.rat.license.ILicense.Builder builder7 = builder0.setLicenseFamilyCategory("Copyright Builder: s:null e:null o:null");
        org.apache.rat.analysis.matchers.SPDXMatcherFactory sPDXMatcherFactory8 = org.apache.rat.analysis.matchers.SPDXMatcherFactory.INSTANCE;
        org.apache.rat.analysis.IHeaderMatcher iHeaderMatcher10 = sPDXMatcherFactory8.create("standard");
        org.apache.rat.license.ILicense.Builder builder11 = builder7.setMatcher(iHeaderMatcher10);
        org.apache.rat.license.ILicense.Builder builder13 = builder11.setName("da5fe944-291b-4f2c-8b38-a63be532e7b8");
        org.junit.Assert.assertNotNull(builder0);
        org.junit.Assert.assertNotNull(builder2);
        org.junit.Assert.assertNotNull(builder5);
        org.junit.Assert.assertNotNull(builder7);
        org.junit.Assert.assertNotNull(sPDXMatcherFactory8);
        org.junit.Assert.assertNotNull(iHeaderMatcher10);
        org.junit.Assert.assertNotNull(builder11);
        org.junit.Assert.assertNotNull(builder13);
    }

    @Test
    public void test14555() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest29.test14555");
        java.io.Writer writer0 = null;
        org.apache.rat.report.xml.writer.impl.base.XmlWriter xmlWriter1 = new org.apache.rat.report.xml.writer.impl.base.XmlWriter(writer0);
        org.apache.rat.report.claim.impl.xml.SimpleXmlClaimReporter simpleXmlClaimReporter2 = new org.apache.rat.report.claim.impl.xml.SimpleXmlClaimReporter((org.apache.rat.report.xml.writer.IXmlWriter) xmlWriter1);
        org.apache.rat.report.claim.impl.xml.SimpleXmlClaimReporter simpleXmlClaimReporter3 = new org.apache.rat.report.claim.impl.xml.SimpleXmlClaimReporter((org.apache.rat.report.xml.writer.IXmlWriter) xmlWriter1);
        org.apache.rat.report.claim.impl.xml.SimpleXmlClaimReporter simpleXmlClaimReporter4 = new org.apache.rat.report.claim.impl.xml.SimpleXmlClaimReporter((org.apache.rat.report.xml.writer.IXmlWriter) xmlWriter1);
        org.apache.rat.report.claim.impl.xml.SimpleXmlClaimReporter simpleXmlClaimReporter5 = new org.apache.rat.report.claim.impl.xml.SimpleXmlClaimReporter((org.apache.rat.report.xml.writer.IXmlWriter) xmlWriter1);
        org.apache.rat.report.claim.impl.xml.SimpleXmlClaimReporter simpleXmlClaimReporter6 = new org.apache.rat.report.claim.impl.xml.SimpleXmlClaimReporter((org.apache.rat.report.xml.writer.IXmlWriter) xmlWriter1);
        org.apache.rat.report.claim.impl.xml.SimpleXmlClaimReporter simpleXmlClaimReporter7 = new org.apache.rat.report.claim.impl.xml.SimpleXmlClaimReporter((org.apache.rat.report.xml.writer.IXmlWriter) xmlWriter1);
        org.apache.rat.report.claim.impl.xml.SimpleXmlClaimReporter simpleXmlClaimReporter8 = new org.apache.rat.report.claim.impl.xml.SimpleXmlClaimReporter((org.apache.rat.report.xml.writer.IXmlWriter) xmlWriter1);
        org.apache.rat.report.claim.impl.xml.SimpleXmlClaimReporter simpleXmlClaimReporter9 = new org.apache.rat.report.claim.impl.xml.SimpleXmlClaimReporter((org.apache.rat.report.xml.writer.IXmlWriter) xmlWriter1);
        // The following exception was thrown during execution in test generation
        try {
            org.apache.rat.report.xml.writer.IXmlWriter iXmlWriter11 = xmlWriter1.content((java.lang.CharSequence) "4c28f857-0c2e-4167-a80d-341acfe0bda7");
            org.junit.Assert.fail("Expected exception of type org.apache.rat.report.xml.writer.OperationNotAllowedException; message: An element must be opened before content can be written.");
        } catch (org.apache.rat.report.xml.writer.OperationNotAllowedException e) {
            // Expected exception.
        }
    }

    @Test
    public void test14556() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest29.test14556");
        org.apache.rat.utils.Log log0 = null;
        org.apache.rat.ReportConfiguration reportConfiguration1 = new org.apache.rat.ReportConfiguration(log0);
        org.apache.rat.license.ILicenseFamily[] iLicenseFamilyArray2 = new org.apache.rat.license.ILicenseFamily[] {};
        java.util.ArrayList<org.apache.rat.license.ILicenseFamily> iLicenseFamilyList3 = new java.util.ArrayList<org.apache.rat.license.ILicenseFamily>();
        boolean boolean4 = java.util.Collections.addAll((java.util.Collection<org.apache.rat.license.ILicenseFamily>) iLicenseFamilyList3, iLicenseFamilyArray2);
        reportConfiguration1.addFamilies((java.util.Collection<org.apache.rat.license.ILicenseFamily>) iLicenseFamilyList3);
        org.apache.rat.utils.Log.Level level6 = org.apache.rat.utils.Log.Level.ERROR;
        reportConfiguration1.logLicenseCollisions(level6);
        org.apache.rat.report.IReportable iReportable8 = reportConfiguration1.getReportable();
        org.apache.rat.utils.Log log9 = null;
        org.apache.rat.ReportConfiguration reportConfiguration10 = new org.apache.rat.ReportConfiguration(log9);
        reportConfiguration10.addApprovedLicenseCategory(".cvsignore");
        org.apache.rat.utils.Log.Level level13 = org.apache.rat.utils.Log.Level.ERROR;
        reportConfiguration10.logLicenseCollisions(level13);
        reportConfiguration10.addApprovedLicenseCategory("73fbee1b-7ed9-442a-968e-b2b525ca688f");
        org.apache.rat.utils.Log log17 = null;
        org.apache.rat.ReportConfiguration reportConfiguration18 = new org.apache.rat.ReportConfiguration(log17);
        java.io.FilenameFilter filenameFilter19 = reportConfiguration18.getInputFileFilter();
        org.apache.rat.license.LicenseSetFactory.LicenseFilter licenseFilter20 = org.apache.rat.license.LicenseSetFactory.LicenseFilter.all;
        java.util.SortedSet<org.apache.rat.license.ILicense> iLicenseSet21 = reportConfiguration18.getLicenses(licenseFilter20);
        org.apache.rat.config.AddLicenseHeaders addLicenseHeaders22 = org.apache.rat.config.AddLicenseHeaders.FALSE;
        reportConfiguration18.setAddLicenseHeaders(addLicenseHeaders22);
        org.apache.rat.utils.Log log24 = null;
        org.apache.rat.ReportConfiguration reportConfiguration25 = new org.apache.rat.ReportConfiguration(log24);
        org.apache.rat.report.claim.ClaimStatistic claimStatistic26 = org.apache.rat.Reporter.report(reportConfiguration25);
        org.apache.rat.license.LicenseSetFactory.LicenseFilter licenseFilter27 = org.apache.rat.license.LicenseSetFactory.LicenseFilter.all;
        org.apache.rat.Reporter.listLicenses(reportConfiguration25, licenseFilter27);
        org.apache.rat.Reporter.listLicenses(reportConfiguration18, licenseFilter27);
        org.apache.rat.utils.Log log30 = null;
        org.apache.rat.ReportConfiguration reportConfiguration31 = new org.apache.rat.ReportConfiguration(log30);
        java.io.FilenameFilter filenameFilter32 = reportConfiguration31.getInputFileFilter();
        org.apache.rat.license.LicenseSetFactory.LicenseFilter licenseFilter33 = org.apache.rat.license.LicenseSetFactory.LicenseFilter.all;
        java.util.SortedSet<org.apache.rat.license.ILicense> iLicenseSet34 = reportConfiguration31.getLicenses(licenseFilter33);
        org.apache.rat.config.AddLicenseHeaders addLicenseHeaders35 = org.apache.rat.config.AddLicenseHeaders.FALSE;
        reportConfiguration31.setAddLicenseHeaders(addLicenseHeaders35);
        org.apache.rat.utils.Log log37 = null;
        org.apache.rat.ReportConfiguration reportConfiguration38 = new org.apache.rat.ReportConfiguration(log37);
        org.apache.rat.report.claim.ClaimStatistic claimStatistic39 = org.apache.rat.Reporter.report(reportConfiguration38);
        org.apache.rat.license.LicenseSetFactory.LicenseFilter licenseFilter40 = org.apache.rat.license.LicenseSetFactory.LicenseFilter.all;
        org.apache.rat.Reporter.listLicenses(reportConfiguration38, licenseFilter40);
        org.apache.rat.Reporter.listLicenses(reportConfiguration31, licenseFilter40);
        org.apache.rat.Reporter.listLicenses(reportConfiguration18, licenseFilter40);
        java.io.FilenameFilter filenameFilter44 = reportConfiguration18.getInputFileFilter();
        reportConfiguration18.setStyleReport(false);
        org.apache.rat.report.IReportable iReportable47 = null;
        reportConfiguration18.setReportable(iReportable47);
        org.apache.rat.Defaults.Builder builder50 = org.apache.rat.Defaults.builder();
        org.apache.rat.Defaults defaults51 = builder50.build();
        org.apache.rat.utils.Log log52 = null;
        org.apache.rat.ReportConfiguration reportConfiguration53 = new org.apache.rat.ReportConfiguration(log52);
        java.io.FilenameFilter filenameFilter54 = reportConfiguration53.getInputFileFilter();
        org.apache.rat.license.LicenseSetFactory.LicenseFilter licenseFilter55 = org.apache.rat.license.LicenseSetFactory.LicenseFilter.all;
        java.util.SortedSet<org.apache.rat.license.ILicense> iLicenseSet56 = reportConfiguration53.getLicenses(licenseFilter55);
        org.apache.rat.config.AddLicenseHeaders addLicenseHeaders57 = org.apache.rat.config.AddLicenseHeaders.FALSE;
        reportConfiguration53.setAddLicenseHeaders(addLicenseHeaders57);
        org.apache.rat.utils.Log log59 = null;
        org.apache.rat.ReportConfiguration reportConfiguration60 = new org.apache.rat.ReportConfiguration(log59);
        org.apache.rat.report.claim.ClaimStatistic claimStatistic61 = org.apache.rat.Reporter.report(reportConfiguration60);
        org.apache.rat.license.LicenseSetFactory.LicenseFilter licenseFilter62 = org.apache.rat.license.LicenseSetFactory.LicenseFilter.all;
        org.apache.rat.Reporter.listLicenses(reportConfiguration60, licenseFilter62);
        org.apache.rat.Reporter.listLicenses(reportConfiguration53, licenseFilter62);
        org.apache.rat.utils.Log log65 = null;
        org.apache.rat.ReportConfiguration reportConfiguration66 = new org.apache.rat.ReportConfiguration(log65);
        java.io.FilenameFilter filenameFilter67 = reportConfiguration66.getInputFileFilter();
        org.apache.rat.license.LicenseSetFactory.LicenseFilter licenseFilter68 = org.apache.rat.license.LicenseSetFactory.LicenseFilter.all;
        java.util.SortedSet<org.apache.rat.license.ILicense> iLicenseSet69 = reportConfiguration66.getLicenses(licenseFilter68);
        org.apache.rat.config.AddLicenseHeaders addLicenseHeaders70 = org.apache.rat.config.AddLicenseHeaders.FALSE;
        reportConfiguration66.setAddLicenseHeaders(addLicenseHeaders70);
        org.apache.rat.utils.Log log72 = null;
        org.apache.rat.ReportConfiguration reportConfiguration73 = new org.apache.rat.ReportConfiguration(log72);
        org.apache.rat.report.claim.ClaimStatistic claimStatistic74 = org.apache.rat.Reporter.report(reportConfiguration73);
        org.apache.rat.license.LicenseSetFactory.LicenseFilter licenseFilter75 = org.apache.rat.license.LicenseSetFactory.LicenseFilter.all;
        org.apache.rat.Reporter.listLicenses(reportConfiguration73, licenseFilter75);
        org.apache.rat.Reporter.listLicenses(reportConfiguration66, licenseFilter75);
        java.util.SortedSet<org.apache.rat.license.ILicenseFamily> iLicenseFamilySet78 = reportConfiguration53.getLicenseFamilies(licenseFilter75);
        java.util.SortedSet<org.apache.rat.license.ILicense> iLicenseSet79 = defaults51.getLicenses(licenseFilter75);
        org.apache.rat.utils.ReportingSet<org.apache.rat.license.ILicense> iLicenseSet80 = new org.apache.rat.utils.ReportingSet<org.apache.rat.license.ILicense>(iLicenseSet79);
        org.apache.rat.license.ILicense iLicense81 = org.apache.rat.license.LicenseSetFactory.search("TMF", iLicenseSet79);
        reportConfiguration18.addLicense(iLicense81);
        java.lang.String str83 = iLicense81.derivedFrom();
        reportConfiguration10.addLicense(iLicense81);
        reportConfiguration1.addLicense(iLicense81);
        org.apache.rat.configuration.Format format87 = org.apache.rat.configuration.Format.XML;
        org.apache.rat.configuration.LicenseReader licenseReader88 = format87.licenseReader();
        org.apache.rat.configuration.MatcherReader matcherReader89 = format87.matcherReader();
        org.apache.rat.configuration.LicenseReader licenseReader90 = format87.licenseReader();
        java.util.SortedSet<org.apache.rat.license.ILicense> iLicenseSet91 = licenseReader90.readLicenses();
        org.apache.rat.license.ILicense iLicense92 = org.apache.rat.license.LicenseSetFactory.search("Datum [ name ='http://org/apache/rat/meta-data#LicenseFamilyCategory',value ='GPL1  ']", iLicenseSet91);
        org.apache.rat.utils.ReportingSet<org.apache.rat.license.ILicense> iLicenseSet93 = new org.apache.rat.utils.ReportingSet<org.apache.rat.license.ILicense>(iLicenseSet91);
        org.apache.rat.license.ILicense iLicense94 = org.apache.rat.license.LicenseSetFactory.search(iLicense81, iLicenseSet91);
        org.junit.Assert.assertNotNull(iLicenseFamilyArray2);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertTrue("'" + level6 + "' != '" + org.apache.rat.utils.Log.Level.ERROR + "'", level6.equals(org.apache.rat.utils.Log.Level.ERROR));
        org.junit.Assert.assertNull(iReportable8);
        org.junit.Assert.assertTrue("'" + level13 + "' != '" + org.apache.rat.utils.Log.Level.ERROR + "'", level13.equals(org.apache.rat.utils.Log.Level.ERROR));
        org.junit.Assert.assertNull(filenameFilter19);
        org.junit.Assert.assertTrue("'" + licenseFilter20 + "' != '" + org.apache.rat.license.LicenseSetFactory.LicenseFilter.all + "'", licenseFilter20.equals(org.apache.rat.license.LicenseSetFactory.LicenseFilter.all));
        org.junit.Assert.assertNotNull(iLicenseSet21);
        org.junit.Assert.assertTrue("'" + addLicenseHeaders22 + "' != '" + org.apache.rat.config.AddLicenseHeaders.FALSE + "'", addLicenseHeaders22.equals(org.apache.rat.config.AddLicenseHeaders.FALSE));
        org.junit.Assert.assertNull(claimStatistic26);
        org.junit.Assert.assertTrue("'" + licenseFilter27 + "' != '" + org.apache.rat.license.LicenseSetFactory.LicenseFilter.all + "'", licenseFilter27.equals(org.apache.rat.license.LicenseSetFactory.LicenseFilter.all));
        org.junit.Assert.assertNull(filenameFilter32);
        org.junit.Assert.assertTrue("'" + licenseFilter33 + "' != '" + org.apache.rat.license.LicenseSetFactory.LicenseFilter.all + "'", licenseFilter33.equals(org.apache.rat.license.LicenseSetFactory.LicenseFilter.all));
        org.junit.Assert.assertNotNull(iLicenseSet34);
        org.junit.Assert.assertTrue("'" + addLicenseHeaders35 + "' != '" + org.apache.rat.config.AddLicenseHeaders.FALSE + "'", addLicenseHeaders35.equals(org.apache.rat.config.AddLicenseHeaders.FALSE));
        org.junit.Assert.assertNull(claimStatistic39);
        org.junit.Assert.assertTrue("'" + licenseFilter40 + "' != '" + org.apache.rat.license.LicenseSetFactory.LicenseFilter.all + "'", licenseFilter40.equals(org.apache.rat.license.LicenseSetFactory.LicenseFilter.all));
        org.junit.Assert.assertNull(filenameFilter44);
        org.junit.Assert.assertNotNull(builder50);
        org.junit.Assert.assertNotNull(defaults51);
        org.junit.Assert.assertNull(filenameFilter54);
        org.junit.Assert.assertTrue("'" + licenseFilter55 + "' != '" + org.apache.rat.license.LicenseSetFactory.LicenseFilter.all + "'", licenseFilter55.equals(org.apache.rat.license.LicenseSetFactory.LicenseFilter.all));
        org.junit.Assert.assertNotNull(iLicenseSet56);
        org.junit.Assert.assertTrue("'" + addLicenseHeaders57 + "' != '" + org.apache.rat.config.AddLicenseHeaders.FALSE + "'", addLicenseHeaders57.equals(org.apache.rat.config.AddLicenseHeaders.FALSE));
        org.junit.Assert.assertNull(claimStatistic61);
        org.junit.Assert.assertTrue("'" + licenseFilter62 + "' != '" + org.apache.rat.license.LicenseSetFactory.LicenseFilter.all + "'", licenseFilter62.equals(org.apache.rat.license.LicenseSetFactory.LicenseFilter.all));
        org.junit.Assert.assertNull(filenameFilter67);
        org.junit.Assert.assertTrue("'" + licenseFilter68 + "' != '" + org.apache.rat.license.LicenseSetFactory.LicenseFilter.all + "'", licenseFilter68.equals(org.apache.rat.license.LicenseSetFactory.LicenseFilter.all));
        org.junit.Assert.assertNotNull(iLicenseSet69);
        org.junit.Assert.assertTrue("'" + addLicenseHeaders70 + "' != '" + org.apache.rat.config.AddLicenseHeaders.FALSE + "'", addLicenseHeaders70.equals(org.apache.rat.config.AddLicenseHeaders.FALSE));
        org.junit.Assert.assertNull(claimStatistic74);
        org.junit.Assert.assertTrue("'" + licenseFilter75 + "' != '" + org.apache.rat.license.LicenseSetFactory.LicenseFilter.all + "'", licenseFilter75.equals(org.apache.rat.license.LicenseSetFactory.LicenseFilter.all));
        org.junit.Assert.assertNotNull(iLicenseFamilySet78);
        org.junit.Assert.assertNotNull(iLicenseSet79);
        org.junit.Assert.assertNotNull(iLicense81);
        org.junit.Assert.assertEquals("'" + str83 + "' != '" + "BSD-3" + "'", str83, "BSD-3");
        org.junit.Assert.assertTrue("'" + format87 + "' != '" + org.apache.rat.configuration.Format.XML + "'", format87.equals(org.apache.rat.configuration.Format.XML));
        org.junit.Assert.assertNotNull(licenseReader88);
        org.junit.Assert.assertNotNull(matcherReader89);
        org.junit.Assert.assertNotNull(licenseReader90);
        org.junit.Assert.assertNotNull(iLicenseSet91);
        org.junit.Assert.assertNull(iLicense92);
        org.junit.Assert.assertNull(iLicense94);
    }

    @Test
    public void test14557() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest29.test14557");
        org.apache.rat.configuration.builders.TextBuilder textBuilder0 = new org.apache.rat.configuration.builders.TextBuilder();
        org.apache.rat.configuration.builders.TextBuilder textBuilder2 = textBuilder0.setText("true");
        org.apache.rat.configuration.builders.TextBuilder textBuilder4 = textBuilder2.setText("http://org/apache/rat/meta-data#HeaderSample");
        org.apache.rat.analysis.IHeaderMatcher iHeaderMatcher5 = textBuilder4.build();
        java.lang.String str6 = textBuilder4.toString();
        org.apache.rat.configuration.builders.TextBuilder textBuilder8 = textBuilder4.setText("2e3deed3-f517-459b-ae48-d6ddb543fe1f");
        org.junit.Assert.assertNotNull(textBuilder2);
        org.junit.Assert.assertNotNull(textBuilder4);
        org.junit.Assert.assertNotNull(iHeaderMatcher5);
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "TextBuilder: http://org/apache/ra..." + "'", str6, "TextBuilder: http://org/apache/ra...");
        org.junit.Assert.assertNotNull(textBuilder8);
    }

    @Test
    public void test14558() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest29.test14558");
        org.apache.rat.utils.Log log0 = null;
        org.apache.rat.ReportConfiguration reportConfiguration1 = new org.apache.rat.ReportConfiguration(log0);
        org.apache.rat.report.claim.ClaimStatistic claimStatistic2 = org.apache.rat.Reporter.report(reportConfiguration1);
        reportConfiguration1.addApprovedLicenseCategory("Copyright Builder: s:null e:null o:null");
        java.util.SortedSet<java.lang.String> strSet5 = reportConfiguration1.getApprovedLicenseCategories();
        boolean boolean6 = reportConfiguration1.isAddingLicensesForced();
        org.apache.rat.utils.Log log7 = null;
        org.apache.rat.ReportConfiguration reportConfiguration8 = new org.apache.rat.ReportConfiguration(log7);
        java.io.FilenameFilter filenameFilter9 = reportConfiguration8.getInputFileFilter();
        org.apache.rat.license.LicenseSetFactory.LicenseFilter licenseFilter10 = org.apache.rat.license.LicenseSetFactory.LicenseFilter.all;
        java.util.SortedSet<org.apache.rat.license.ILicense> iLicenseSet11 = reportConfiguration8.getLicenses(licenseFilter10);
        org.apache.rat.config.AddLicenseHeaders addLicenseHeaders12 = org.apache.rat.config.AddLicenseHeaders.FALSE;
        reportConfiguration8.setAddLicenseHeaders(addLicenseHeaders12);
        org.apache.rat.utils.Log log14 = null;
        org.apache.rat.ReportConfiguration reportConfiguration15 = new org.apache.rat.ReportConfiguration(log14);
        org.apache.rat.report.claim.ClaimStatistic claimStatistic16 = org.apache.rat.Reporter.report(reportConfiguration15);
        org.apache.rat.license.LicenseSetFactory.LicenseFilter licenseFilter17 = org.apache.rat.license.LicenseSetFactory.LicenseFilter.all;
        org.apache.rat.Reporter.listLicenses(reportConfiguration15, licenseFilter17);
        org.apache.rat.Reporter.listLicenses(reportConfiguration8, licenseFilter17);
        org.apache.rat.config.AddLicenseHeaders addLicenseHeaders20 = org.apache.rat.config.AddLicenseHeaders.FORCED;
        reportConfiguration8.setAddLicenseHeaders(addLicenseHeaders20);
        reportConfiguration1.setAddLicenseHeaders(addLicenseHeaders20);
        boolean boolean23 = reportConfiguration1.isStyleReport();
        reportConfiguration1.setStyleReport(true);
        org.junit.Assert.assertNull(claimStatistic2);
        org.junit.Assert.assertNotNull(strSet5);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertNull(filenameFilter9);
        org.junit.Assert.assertTrue("'" + licenseFilter10 + "' != '" + org.apache.rat.license.LicenseSetFactory.LicenseFilter.all + "'", licenseFilter10.equals(org.apache.rat.license.LicenseSetFactory.LicenseFilter.all));
        org.junit.Assert.assertNotNull(iLicenseSet11);
        org.junit.Assert.assertTrue("'" + addLicenseHeaders12 + "' != '" + org.apache.rat.config.AddLicenseHeaders.FALSE + "'", addLicenseHeaders12.equals(org.apache.rat.config.AddLicenseHeaders.FALSE));
        org.junit.Assert.assertNull(claimStatistic16);
        org.junit.Assert.assertTrue("'" + licenseFilter17 + "' != '" + org.apache.rat.license.LicenseSetFactory.LicenseFilter.all + "'", licenseFilter17.equals(org.apache.rat.license.LicenseSetFactory.LicenseFilter.all));
        org.junit.Assert.assertTrue("'" + addLicenseHeaders20 + "' != '" + org.apache.rat.config.AddLicenseHeaders.FORCED + "'", addLicenseHeaders20.equals(org.apache.rat.config.AddLicenseHeaders.FORCED));
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + true + "'", boolean23 == true);
    }

    @Test
    public void test14559() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest29.test14559");
        org.apache.rat.configuration.builders.TextBuilder textBuilder0 = new org.apache.rat.configuration.builders.TextBuilder();
        org.apache.rat.configuration.builders.TextBuilder textBuilder2 = textBuilder0.setText("true");
        org.apache.rat.analysis.IHeaderMatcher iHeaderMatcher3 = textBuilder0.build();
        org.apache.rat.configuration.builders.TextBuilder textBuilder5 = textBuilder0.setText("SpdxBuilder: null");
        org.apache.rat.configuration.builders.TextBuilder textBuilder7 = textBuilder5.setText("Apache License Version 2.0");
        org.apache.rat.configuration.builders.TextBuilder textBuilder9 = textBuilder5.setText("MathcerRefBuilder: Copyright Builder: s:null e:.cvsignore o:3c840dc2-bef0-42b5-b26c-35a568d53a24");
        org.apache.rat.analysis.IHeaderMatcher iHeaderMatcher10 = textBuilder5.build();
        org.junit.Assert.assertNotNull(textBuilder2);
        org.junit.Assert.assertNotNull(iHeaderMatcher3);
        org.junit.Assert.assertNotNull(textBuilder5);
        org.junit.Assert.assertNotNull(textBuilder7);
        org.junit.Assert.assertNotNull(textBuilder9);
        org.junit.Assert.assertNotNull(iHeaderMatcher10);
    }

    @Test
    public void test14560() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest29.test14560");
        org.apache.rat.analysis.license.FullTextMatchingLicense fullTextMatchingLicense0 = new org.apache.rat.analysis.license.FullTextMatchingLicense();
        fullTextMatchingLicense0.setFullText("f03158f7-b7b2-4d1f-90b1-98481344f604");
        fullTextMatchingLicense0.setFullText("http://org/apache/rat/meta-data#LicenseFamilyName");
        fullTextMatchingLicense0.setLicenseFamilyName("3136db71-7b49-4c17-a09c-dca53cc533ad");
        java.lang.String str7 = fullTextMatchingLicense0.getNotes();
        org.junit.Assert.assertNull(str7);
    }

    @Test
    public void test14561() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest29.test14561");
        org.apache.rat.utils.DefaultLog defaultLog0 = org.apache.rat.utils.DefaultLog.INSTANCE;
        org.apache.rat.annotation.ApacheV2LicenseAppender apacheV2LicenseAppender1 = new org.apache.rat.annotation.ApacheV2LicenseAppender((org.apache.rat.utils.Log) defaultLog0);
        org.apache.rat.ReportConfiguration reportConfiguration2 = new org.apache.rat.ReportConfiguration((org.apache.rat.utils.Log) defaultLog0);
        org.apache.rat.license.LicenseSetFactory.LicenseFilter licenseFilter3 = org.apache.rat.license.LicenseSetFactory.LicenseFilter.approved;
        org.apache.rat.Reporter.listLicenses(reportConfiguration2, licenseFilter3);
        org.apache.rat.Defaults.Builder builder5 = org.apache.rat.Defaults.builder();
        org.apache.rat.Defaults.Builder builder6 = builder5.noDefault();
        org.apache.rat.Defaults defaults7 = builder6.build();
        org.apache.rat.Defaults.Builder builder8 = org.apache.rat.Defaults.builder();
        org.apache.rat.Defaults defaults9 = builder8.build();
        org.apache.rat.utils.Log log10 = null;
        org.apache.rat.ReportConfiguration reportConfiguration11 = new org.apache.rat.ReportConfiguration(log10);
        java.io.FilenameFilter filenameFilter12 = reportConfiguration11.getInputFileFilter();
        org.apache.rat.license.LicenseSetFactory.LicenseFilter licenseFilter13 = org.apache.rat.license.LicenseSetFactory.LicenseFilter.all;
        java.util.SortedSet<org.apache.rat.license.ILicense> iLicenseSet14 = reportConfiguration11.getLicenses(licenseFilter13);
        org.apache.rat.config.AddLicenseHeaders addLicenseHeaders15 = org.apache.rat.config.AddLicenseHeaders.FALSE;
        reportConfiguration11.setAddLicenseHeaders(addLicenseHeaders15);
        org.apache.rat.utils.Log log17 = null;
        org.apache.rat.ReportConfiguration reportConfiguration18 = new org.apache.rat.ReportConfiguration(log17);
        org.apache.rat.report.claim.ClaimStatistic claimStatistic19 = org.apache.rat.Reporter.report(reportConfiguration18);
        org.apache.rat.license.LicenseSetFactory.LicenseFilter licenseFilter20 = org.apache.rat.license.LicenseSetFactory.LicenseFilter.all;
        org.apache.rat.Reporter.listLicenses(reportConfiguration18, licenseFilter20);
        org.apache.rat.Reporter.listLicenses(reportConfiguration11, licenseFilter20);
        org.apache.rat.utils.Log log23 = null;
        org.apache.rat.ReportConfiguration reportConfiguration24 = new org.apache.rat.ReportConfiguration(log23);
        java.io.FilenameFilter filenameFilter25 = reportConfiguration24.getInputFileFilter();
        org.apache.rat.license.LicenseSetFactory.LicenseFilter licenseFilter26 = org.apache.rat.license.LicenseSetFactory.LicenseFilter.all;
        java.util.SortedSet<org.apache.rat.license.ILicense> iLicenseSet27 = reportConfiguration24.getLicenses(licenseFilter26);
        org.apache.rat.config.AddLicenseHeaders addLicenseHeaders28 = org.apache.rat.config.AddLicenseHeaders.FALSE;
        reportConfiguration24.setAddLicenseHeaders(addLicenseHeaders28);
        org.apache.rat.utils.Log log30 = null;
        org.apache.rat.ReportConfiguration reportConfiguration31 = new org.apache.rat.ReportConfiguration(log30);
        org.apache.rat.report.claim.ClaimStatistic claimStatistic32 = org.apache.rat.Reporter.report(reportConfiguration31);
        org.apache.rat.license.LicenseSetFactory.LicenseFilter licenseFilter33 = org.apache.rat.license.LicenseSetFactory.LicenseFilter.all;
        org.apache.rat.Reporter.listLicenses(reportConfiguration31, licenseFilter33);
        org.apache.rat.Reporter.listLicenses(reportConfiguration24, licenseFilter33);
        java.util.SortedSet<org.apache.rat.license.ILicenseFamily> iLicenseFamilySet36 = reportConfiguration11.getLicenseFamilies(licenseFilter33);
        java.util.SortedSet<org.apache.rat.license.ILicense> iLicenseSet37 = defaults9.getLicenses(licenseFilter33);
        java.util.SortedSet<org.apache.rat.license.ILicenseFamily> iLicenseFamilySet38 = defaults7.getLicenseFamilies(licenseFilter33);
        org.apache.rat.utils.Log log39 = null;
        org.apache.rat.ReportConfiguration reportConfiguration40 = new org.apache.rat.ReportConfiguration(log39);
        java.io.FilenameFilter filenameFilter41 = reportConfiguration40.getInputFileFilter();
        org.apache.rat.license.LicenseSetFactory.LicenseFilter licenseFilter42 = org.apache.rat.license.LicenseSetFactory.LicenseFilter.all;
        java.util.SortedSet<org.apache.rat.license.ILicense> iLicenseSet43 = reportConfiguration40.getLicenses(licenseFilter42);
        org.apache.rat.config.AddLicenseHeaders addLicenseHeaders44 = org.apache.rat.config.AddLicenseHeaders.FALSE;
        reportConfiguration40.setAddLicenseHeaders(addLicenseHeaders44);
        org.apache.rat.utils.Log log46 = null;
        org.apache.rat.ReportConfiguration reportConfiguration47 = new org.apache.rat.ReportConfiguration(log46);
        org.apache.rat.report.claim.ClaimStatistic claimStatistic48 = org.apache.rat.Reporter.report(reportConfiguration47);
        org.apache.rat.license.LicenseSetFactory.LicenseFilter licenseFilter49 = org.apache.rat.license.LicenseSetFactory.LicenseFilter.all;
        org.apache.rat.Reporter.listLicenses(reportConfiguration47, licenseFilter49);
        org.apache.rat.Reporter.listLicenses(reportConfiguration40, licenseFilter49);
        java.util.SortedSet<java.lang.String> strSet52 = defaults7.getLicenseIds(licenseFilter49);
        reportConfiguration2.setFrom(defaults7);
        org.apache.rat.license.ILicenseFamilyBuilder iLicenseFamilyBuilder54 = new org.apache.rat.license.ILicenseFamilyBuilder();
        java.lang.String str55 = iLicenseFamilyBuilder54.getCategory();
        org.apache.rat.license.ILicenseFamily.Builder builder57 = iLicenseFamilyBuilder54.setLicenseFamilyCategory("AL   ");
        java.lang.String str58 = iLicenseFamilyBuilder54.getCategory();
        org.apache.rat.license.ILicenseFamily.Builder builder60 = iLicenseFamilyBuilder54.setLicenseFamilyName("535b5d01-f553-45e5-bb29-a646e4b8b66f");
        org.apache.rat.license.ILicenseFamily.Builder builder62 = iLicenseFamilyBuilder54.setLicenseFamilyName("GPL1 ");
        reportConfiguration2.addFamily(builder62);
        reportConfiguration2.addApprovedLicenseCategory("ED0FAF32-F32C-46F1-A629-4FE87704CB0E");
        reportConfiguration2.setCopyrightMessage("SPDX:");
        org.junit.Assert.assertNotNull(defaultLog0);
        org.junit.Assert.assertTrue("'" + licenseFilter3 + "' != '" + org.apache.rat.license.LicenseSetFactory.LicenseFilter.approved + "'", licenseFilter3.equals(org.apache.rat.license.LicenseSetFactory.LicenseFilter.approved));
        org.junit.Assert.assertNotNull(builder5);
        org.junit.Assert.assertNotNull(builder6);
        org.junit.Assert.assertNotNull(defaults7);
        org.junit.Assert.assertNotNull(builder8);
        org.junit.Assert.assertNotNull(defaults9);
        org.junit.Assert.assertNull(filenameFilter12);
        org.junit.Assert.assertTrue("'" + licenseFilter13 + "' != '" + org.apache.rat.license.LicenseSetFactory.LicenseFilter.all + "'", licenseFilter13.equals(org.apache.rat.license.LicenseSetFactory.LicenseFilter.all));
        org.junit.Assert.assertNotNull(iLicenseSet14);
        org.junit.Assert.assertTrue("'" + addLicenseHeaders15 + "' != '" + org.apache.rat.config.AddLicenseHeaders.FALSE + "'", addLicenseHeaders15.equals(org.apache.rat.config.AddLicenseHeaders.FALSE));
        org.junit.Assert.assertNull(claimStatistic19);
        org.junit.Assert.assertTrue("'" + licenseFilter20 + "' != '" + org.apache.rat.license.LicenseSetFactory.LicenseFilter.all + "'", licenseFilter20.equals(org.apache.rat.license.LicenseSetFactory.LicenseFilter.all));
        org.junit.Assert.assertNull(filenameFilter25);
        org.junit.Assert.assertTrue("'" + licenseFilter26 + "' != '" + org.apache.rat.license.LicenseSetFactory.LicenseFilter.all + "'", licenseFilter26.equals(org.apache.rat.license.LicenseSetFactory.LicenseFilter.all));
        org.junit.Assert.assertNotNull(iLicenseSet27);
        org.junit.Assert.assertTrue("'" + addLicenseHeaders28 + "' != '" + org.apache.rat.config.AddLicenseHeaders.FALSE + "'", addLicenseHeaders28.equals(org.apache.rat.config.AddLicenseHeaders.FALSE));
        org.junit.Assert.assertNull(claimStatistic32);
        org.junit.Assert.assertTrue("'" + licenseFilter33 + "' != '" + org.apache.rat.license.LicenseSetFactory.LicenseFilter.all + "'", licenseFilter33.equals(org.apache.rat.license.LicenseSetFactory.LicenseFilter.all));
        org.junit.Assert.assertNotNull(iLicenseFamilySet36);
        org.junit.Assert.assertNotNull(iLicenseSet37);
        org.junit.Assert.assertNotNull(iLicenseFamilySet38);
        org.junit.Assert.assertNull(filenameFilter41);
        org.junit.Assert.assertTrue("'" + licenseFilter42 + "' != '" + org.apache.rat.license.LicenseSetFactory.LicenseFilter.all + "'", licenseFilter42.equals(org.apache.rat.license.LicenseSetFactory.LicenseFilter.all));
        org.junit.Assert.assertNotNull(iLicenseSet43);
        org.junit.Assert.assertTrue("'" + addLicenseHeaders44 + "' != '" + org.apache.rat.config.AddLicenseHeaders.FALSE + "'", addLicenseHeaders44.equals(org.apache.rat.config.AddLicenseHeaders.FALSE));
        org.junit.Assert.assertNull(claimStatistic48);
        org.junit.Assert.assertTrue("'" + licenseFilter49 + "' != '" + org.apache.rat.license.LicenseSetFactory.LicenseFilter.all + "'", licenseFilter49.equals(org.apache.rat.license.LicenseSetFactory.LicenseFilter.all));
        org.junit.Assert.assertNotNull(strSet52);
        org.junit.Assert.assertNull(str55);
        org.junit.Assert.assertNotNull(builder57);
        org.junit.Assert.assertEquals("'" + str58 + "' != '" + "AL   " + "'", str58, "AL   ");
        org.junit.Assert.assertNotNull(builder60);
        org.junit.Assert.assertNotNull(builder62);
    }

    @Test
    public void test14562() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest29.test14562");
        org.apache.rat.utils.Log log0 = null;
        org.apache.rat.ReportConfiguration reportConfiguration1 = new org.apache.rat.ReportConfiguration(log0);
        java.io.FilenameFilter filenameFilter2 = reportConfiguration1.getInputFileFilter();
        org.apache.rat.license.LicenseSetFactory.LicenseFilter licenseFilter3 = org.apache.rat.license.LicenseSetFactory.LicenseFilter.all;
        java.util.SortedSet<org.apache.rat.license.ILicense> iLicenseSet4 = reportConfiguration1.getLicenses(licenseFilter3);
        org.apache.rat.config.AddLicenseHeaders addLicenseHeaders5 = org.apache.rat.config.AddLicenseHeaders.FALSE;
        reportConfiguration1.setAddLicenseHeaders(addLicenseHeaders5);
        org.apache.rat.utils.Log log7 = null;
        org.apache.rat.ReportConfiguration reportConfiguration8 = new org.apache.rat.ReportConfiguration(log7);
        org.apache.rat.report.claim.ClaimStatistic claimStatistic9 = org.apache.rat.Reporter.report(reportConfiguration8);
        org.apache.rat.license.LicenseSetFactory.LicenseFilter licenseFilter10 = org.apache.rat.license.LicenseSetFactory.LicenseFilter.all;
        org.apache.rat.Reporter.listLicenses(reportConfiguration8, licenseFilter10);
        org.apache.rat.Reporter.listLicenses(reportConfiguration1, licenseFilter10);
        java.lang.String[] strArray51 = new java.lang.String[] { "274c6a15-09f6-4bfd-ac53-1827770eb507", "true|false|forced", "GEN  ", "Apache License Version 2.0", "OASIS", "Apache License Version 2.0", "hi!", "http://org/apache/rat/meta-data", "standard", "", "GEN  ", "W3C Document Copyright", "COMMON DEVELOPMENT AND DISTRIBUTION LICENSE Version 1.0", "Copyright Builder: s:null e:null o:null", "MANIFEST.MF", "Modified BSD License", "true|false|forced", "t true", "GPL2 ", "Modified BSD License", "hi!", "MANIFEST.MF", "GPL2 ", "W3C Software Copyright", "W3C Software Copyright", "021187d7-27c2-4fd9-bc74-8cc00413ee52", "Apache License Version 2.0", "W3C Software Copyright", ".cvsignore", "?????", "274c6a15-09f6-4bfd-ac53-1827770eb507", "GNU General Public License, version 1", "GNU General Public License, version 1", "TMF  ", "6486879f-fc81-4b57-aec7-c4c77d540c30", "org/apache/rat/plain-rat.xsl", "GNU General Public License, version 2", "?????" };
        java.util.ArrayList<java.lang.String> strList52 = new java.util.ArrayList<java.lang.String>();
        boolean boolean53 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strList52, strArray51);
        reportConfiguration1.removeApprovedLicenseCategories((java.util.Collection<java.lang.String>) strList52);
        reportConfiguration1.setCopyrightMessage("COMMON DEVELOPMENT AND DISTRIBUTION LICENSE Version 1.0");
        java.io.FilenameFilter filenameFilter57 = reportConfiguration1.getInputFileFilter();
        org.apache.rat.Defaults.Builder builder58 = org.apache.rat.Defaults.builder();
        org.apache.rat.Defaults.Builder builder59 = builder58.noDefault();
        org.apache.rat.Defaults defaults60 = builder59.build();
        reportConfiguration1.setFrom(defaults60);
        java.net.URL uRL62 = null;
        // The following exception was thrown during execution in test generation
        try {
            reportConfiguration1.setStyleSheet(uRL62);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: styleSheet file should not be null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNull(filenameFilter2);
        org.junit.Assert.assertTrue("'" + licenseFilter3 + "' != '" + org.apache.rat.license.LicenseSetFactory.LicenseFilter.all + "'", licenseFilter3.equals(org.apache.rat.license.LicenseSetFactory.LicenseFilter.all));
        org.junit.Assert.assertNotNull(iLicenseSet4);
        org.junit.Assert.assertTrue("'" + addLicenseHeaders5 + "' != '" + org.apache.rat.config.AddLicenseHeaders.FALSE + "'", addLicenseHeaders5.equals(org.apache.rat.config.AddLicenseHeaders.FALSE));
        org.junit.Assert.assertNull(claimStatistic9);
        org.junit.Assert.assertTrue("'" + licenseFilter10 + "' != '" + org.apache.rat.license.LicenseSetFactory.LicenseFilter.all + "'", licenseFilter10.equals(org.apache.rat.license.LicenseSetFactory.LicenseFilter.all));
        org.junit.Assert.assertNotNull(strArray51);
        org.junit.Assert.assertTrue("'" + boolean53 + "' != '" + true + "'", boolean53 == true);
        org.junit.Assert.assertNull(filenameFilter57);
        org.junit.Assert.assertNotNull(builder58);
        org.junit.Assert.assertNotNull(builder59);
        org.junit.Assert.assertNotNull(defaults60);
    }

    @Test
    public void test14563() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest29.test14563");
        org.apache.rat.configuration.builders.AllBuilder allBuilder0 = new org.apache.rat.configuration.builders.AllBuilder();
        java.lang.String str1 = allBuilder0.toString();
        java.util.List<org.apache.rat.analysis.IHeaderMatcher> iHeaderMatcherList2 = allBuilder0.getChildren();
        org.apache.rat.configuration.builders.MatcherRefBuilder matcherRefBuilder3 = new org.apache.rat.configuration.builders.MatcherRefBuilder();
        org.apache.rat.configuration.builders.AbstractBuilder abstractBuilder4 = allBuilder0.add((org.apache.rat.analysis.IHeaderMatcher.Builder) matcherRefBuilder3);
        org.apache.rat.configuration.builders.MatcherRefBuilder matcherRefBuilder6 = matcherRefBuilder3.setRefId("http:");
        java.util.Map<java.lang.String, org.apache.rat.analysis.IHeaderMatcher> strMap7 = null;
        org.apache.rat.configuration.builders.MatcherRefBuilder matcherRefBuilder8 = matcherRefBuilder6.setMatchers(strMap7);
        org.apache.rat.configuration.builders.MatcherRefBuilder matcherRefBuilder10 = matcherRefBuilder8.setRefId("");
        org.apache.rat.configuration.builders.MatcherRefBuilder matcherRefBuilder12 = matcherRefBuilder8.setRefId("F FALSE");
        java.util.Map<java.lang.String, org.apache.rat.analysis.IHeaderMatcher> strMap13 = null;
        org.apache.rat.configuration.builders.MatcherRefBuilder matcherRefBuilder14 = matcherRefBuilder12.setMatchers(strMap13);
        java.lang.String str15 = matcherRefBuilder14.toString();
        // The following exception was thrown during execution in test generation
        try {
            org.apache.rat.analysis.IHeaderMatcher iHeaderMatcher16 = matcherRefBuilder14.build();
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertEquals("'" + str1 + "' != '" + "AllBuilder:" + "'", str1, "AllBuilder:");
        org.junit.Assert.assertNotNull(iHeaderMatcherList2);
        org.junit.Assert.assertNotNull(abstractBuilder4);
        org.junit.Assert.assertNotNull(matcherRefBuilder6);
        org.junit.Assert.assertNotNull(matcherRefBuilder8);
        org.junit.Assert.assertNotNull(matcherRefBuilder10);
        org.junit.Assert.assertNotNull(matcherRefBuilder12);
        org.junit.Assert.assertNotNull(matcherRefBuilder14);
        org.junit.Assert.assertEquals("'" + str15 + "' != '" + "MathcerRefBuilder: F FALSE" + "'", str15, "MathcerRefBuilder: F FALSE");
    }

    @Test
    public void test14564() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest29.test14564");
        org.apache.rat.utils.DefaultLog defaultLog0 = org.apache.rat.utils.DefaultLog.INSTANCE;
        org.apache.rat.utils.Log log1 = null;
        org.apache.rat.ReportConfiguration reportConfiguration2 = new org.apache.rat.ReportConfiguration(log1);
        java.io.FilenameFilter filenameFilter3 = reportConfiguration2.getInputFileFilter();
        org.apache.rat.license.LicenseSetFactory.LicenseFilter licenseFilter4 = org.apache.rat.license.LicenseSetFactory.LicenseFilter.all;
        java.util.SortedSet<org.apache.rat.license.ILicense> iLicenseSet5 = reportConfiguration2.getLicenses(licenseFilter4);
        org.apache.rat.config.AddLicenseHeaders addLicenseHeaders6 = org.apache.rat.config.AddLicenseHeaders.FALSE;
        reportConfiguration2.setAddLicenseHeaders(addLicenseHeaders6);
        org.apache.rat.utils.Log log8 = null;
        org.apache.rat.ReportConfiguration reportConfiguration9 = new org.apache.rat.ReportConfiguration(log8);
        org.apache.rat.report.claim.ClaimStatistic claimStatistic10 = org.apache.rat.Reporter.report(reportConfiguration9);
        org.apache.rat.license.LicenseSetFactory.LicenseFilter licenseFilter11 = org.apache.rat.license.LicenseSetFactory.LicenseFilter.all;
        org.apache.rat.Reporter.listLicenses(reportConfiguration9, licenseFilter11);
        org.apache.rat.Reporter.listLicenses(reportConfiguration2, licenseFilter11);
        org.apache.rat.utils.Log log14 = null;
        org.apache.rat.ReportConfiguration reportConfiguration15 = new org.apache.rat.ReportConfiguration(log14);
        java.io.FilenameFilter filenameFilter16 = reportConfiguration15.getInputFileFilter();
        org.apache.rat.license.LicenseSetFactory.LicenseFilter licenseFilter17 = org.apache.rat.license.LicenseSetFactory.LicenseFilter.all;
        java.util.SortedSet<org.apache.rat.license.ILicense> iLicenseSet18 = reportConfiguration15.getLicenses(licenseFilter17);
        org.apache.rat.config.AddLicenseHeaders addLicenseHeaders19 = org.apache.rat.config.AddLicenseHeaders.FALSE;
        reportConfiguration15.setAddLicenseHeaders(addLicenseHeaders19);
        org.apache.rat.utils.Log log21 = null;
        org.apache.rat.ReportConfiguration reportConfiguration22 = new org.apache.rat.ReportConfiguration(log21);
        org.apache.rat.report.claim.ClaimStatistic claimStatistic23 = org.apache.rat.Reporter.report(reportConfiguration22);
        org.apache.rat.license.LicenseSetFactory.LicenseFilter licenseFilter24 = org.apache.rat.license.LicenseSetFactory.LicenseFilter.all;
        org.apache.rat.Reporter.listLicenses(reportConfiguration22, licenseFilter24);
        org.apache.rat.Reporter.listLicenses(reportConfiguration15, licenseFilter24);
        org.apache.rat.Reporter.listLicenses(reportConfiguration2, licenseFilter24);
        org.apache.rat.utils.Log log28 = null;
        org.apache.rat.ReportConfiguration reportConfiguration29 = new org.apache.rat.ReportConfiguration(log28);
        org.apache.commons.io.function.IOSupplier<java.io.OutputStream> outputStreamIOSupplier30 = reportConfiguration29.getOutput();
        reportConfiguration2.setOut(outputStreamIOSupplier30);
        org.apache.rat.utils.Log log32 = null;
        org.apache.rat.ReportConfiguration reportConfiguration33 = new org.apache.rat.ReportConfiguration(log32);
        org.apache.rat.report.claim.ClaimStatistic claimStatistic34 = org.apache.rat.Reporter.report(reportConfiguration33);
        org.apache.rat.utils.Log log35 = null;
        org.apache.rat.ReportConfiguration reportConfiguration36 = new org.apache.rat.ReportConfiguration(log35);
        org.apache.rat.report.claim.ClaimStatistic claimStatistic37 = org.apache.rat.Reporter.report(reportConfiguration36);
        org.apache.rat.utils.ReportingSet.Options options38 = org.apache.rat.utils.ReportingSet.Options.OVERWRITE;
        reportConfiguration36.licenseDuplicateOption(options38);
        reportConfiguration33.familyDuplicateOption(options38);
        reportConfiguration2.licenseDuplicateOption(options38);
        reportConfiguration2.addApprovedLicenseCategory("W3C Document Copyright");
        org.apache.rat.utils.Log log44 = null;
        org.apache.rat.ReportConfiguration reportConfiguration45 = new org.apache.rat.ReportConfiguration(log44);
        reportConfiguration45.addApprovedLicenseCategory(".cvsignore");
        org.apache.rat.utils.Log.Level level48 = org.apache.rat.utils.Log.Level.ERROR;
        reportConfiguration45.logLicenseCollisions(level48);
        reportConfiguration2.logLicenseCollisions(level48);
        defaultLog0.setLevel(level48);
        org.apache.rat.ReportConfiguration reportConfiguration52 = new org.apache.rat.ReportConfiguration((org.apache.rat.utils.Log) defaultLog0);
        org.apache.rat.annotation.ApacheV2LicenseAppender apacheV2LicenseAppender53 = new org.apache.rat.annotation.ApacheV2LicenseAppender((org.apache.rat.utils.Log) defaultLog0);
        apacheV2LicenseAppender53.setForce(true);
        org.junit.Assert.assertNotNull(defaultLog0);
        org.junit.Assert.assertNull(filenameFilter3);
        org.junit.Assert.assertTrue("'" + licenseFilter4 + "' != '" + org.apache.rat.license.LicenseSetFactory.LicenseFilter.all + "'", licenseFilter4.equals(org.apache.rat.license.LicenseSetFactory.LicenseFilter.all));
        org.junit.Assert.assertNotNull(iLicenseSet5);
        org.junit.Assert.assertTrue("'" + addLicenseHeaders6 + "' != '" + org.apache.rat.config.AddLicenseHeaders.FALSE + "'", addLicenseHeaders6.equals(org.apache.rat.config.AddLicenseHeaders.FALSE));
        org.junit.Assert.assertNull(claimStatistic10);
        org.junit.Assert.assertTrue("'" + licenseFilter11 + "' != '" + org.apache.rat.license.LicenseSetFactory.LicenseFilter.all + "'", licenseFilter11.equals(org.apache.rat.license.LicenseSetFactory.LicenseFilter.all));
        org.junit.Assert.assertNull(filenameFilter16);
        org.junit.Assert.assertTrue("'" + licenseFilter17 + "' != '" + org.apache.rat.license.LicenseSetFactory.LicenseFilter.all + "'", licenseFilter17.equals(org.apache.rat.license.LicenseSetFactory.LicenseFilter.all));
        org.junit.Assert.assertNotNull(iLicenseSet18);
        org.junit.Assert.assertTrue("'" + addLicenseHeaders19 + "' != '" + org.apache.rat.config.AddLicenseHeaders.FALSE + "'", addLicenseHeaders19.equals(org.apache.rat.config.AddLicenseHeaders.FALSE));
        org.junit.Assert.assertNull(claimStatistic23);
        org.junit.Assert.assertTrue("'" + licenseFilter24 + "' != '" + org.apache.rat.license.LicenseSetFactory.LicenseFilter.all + "'", licenseFilter24.equals(org.apache.rat.license.LicenseSetFactory.LicenseFilter.all));
        org.junit.Assert.assertNotNull(outputStreamIOSupplier30);
        org.junit.Assert.assertNull(claimStatistic34);
        org.junit.Assert.assertNull(claimStatistic37);
        org.junit.Assert.assertTrue("'" + options38 + "' != '" + org.apache.rat.utils.ReportingSet.Options.OVERWRITE + "'", options38.equals(org.apache.rat.utils.ReportingSet.Options.OVERWRITE));
        org.junit.Assert.assertTrue("'" + level48 + "' != '" + org.apache.rat.utils.Log.Level.ERROR + "'", level48.equals(org.apache.rat.utils.Log.Level.ERROR));
    }

    @Test
    public void test14565() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest29.test14565");
        org.apache.rat.analysis.matchers.FullTextMatcher fullTextMatcher2 = new org.apache.rat.analysis.matchers.FullTextMatcher("9340895e-47fd-411d-8917-58c71f9a32c4", "6486879ffc814b57aec7c4c77d540c30");
        boolean boolean4 = fullTextMatcher2.doMatch("SpdxBuilder: 9d334763-6150-4fa3-86d4-32f09aebbaad");
        java.lang.String str5 = fullTextMatcher2.getId();
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertEquals("'" + str5 + "' != '" + "9340895e-47fd-411d-8917-58c71f9a32c4" + "'", str5, "9340895e-47fd-411d-8917-58c71f9a32c4");
    }

    @Test
    public void test14566() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest29.test14566");
        org.apache.rat.utils.Log log0 = null;
        org.apache.rat.ReportConfiguration reportConfiguration1 = new org.apache.rat.ReportConfiguration(log0);
        org.apache.rat.report.claim.ClaimStatistic claimStatistic2 = org.apache.rat.Reporter.report(reportConfiguration1);
        org.apache.rat.utils.Log log3 = null;
        org.apache.rat.ReportConfiguration reportConfiguration4 = new org.apache.rat.ReportConfiguration(log3);
        org.apache.rat.report.claim.ClaimStatistic claimStatistic5 = org.apache.rat.Reporter.report(reportConfiguration4);
        org.apache.rat.utils.ReportingSet.Options options6 = org.apache.rat.utils.ReportingSet.Options.OVERWRITE;
        reportConfiguration4.licenseDuplicateOption(options6);
        reportConfiguration1.familyDuplicateOption(options6);
        boolean boolean9 = reportConfiguration1.isStyleReport();
        org.apache.rat.license.ILicense[] iLicenseArray10 = new org.apache.rat.license.ILicense[] {};
        java.util.TreeSet<org.apache.rat.license.ILicense> iLicenseSet11 = new java.util.TreeSet<org.apache.rat.license.ILicense>();
        boolean boolean12 = java.util.Collections.addAll((java.util.Collection<org.apache.rat.license.ILicense>) iLicenseSet11, iLicenseArray10);
        java.lang.String[] strArray25 = new java.lang.String[] { "GPL2 ", "GPL1 ", "notice", "http://org/apache/rat/meta-data#LicenseFamilyName", "notice", "GPL2 ", "http://org/apache/rat/meta-data#LicenseFamilyName", "", "GPL2 ", "", "GPL1 ", "hi!" };
        java.util.ArrayList<java.lang.String> strList26 = new java.util.ArrayList<java.lang.String>();
        boolean boolean27 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strList26, strArray25);
        org.apache.rat.license.LicenseSetFactory licenseSetFactory28 = new org.apache.rat.license.LicenseSetFactory((java.util.SortedSet<org.apache.rat.license.ILicense>) iLicenseSet11, (java.util.Collection<java.lang.String>) strList26);
        java.io.FilenameFilter filenameFilter29 = org.apache.rat.Report.parseExclusions((java.util.List<java.lang.String>) strList26);
        java.io.FilenameFilter filenameFilter30 = org.apache.rat.Report.parseExclusions((java.util.List<java.lang.String>) strList26);
        reportConfiguration1.addApprovedLicenseCategories((java.util.Collection<java.lang.String>) strList26);
        org.apache.rat.report.claim.ClaimStatistic claimStatistic32 = org.apache.rat.Reporter.report(reportConfiguration1);
        boolean boolean33 = reportConfiguration1.isAddingLicensesForced();
        org.apache.rat.analysis.license.FullTextMatchingLicense fullTextMatchingLicense34 = new org.apache.rat.analysis.license.FullTextMatchingLicense();
        fullTextMatchingLicense34.setLicenseFamilyName("hi!");
        java.lang.String str37 = fullTextMatchingLicense34.getLicenseFamilyCategory();
        java.lang.String str38 = fullTextMatchingLicense34.getLicenseFamilyName();
        fullTextMatchingLicense34.setLicenseFamilyName("SpdxBuilder: null");
        fullTextMatchingLicense34.setLicenseFamilyCategory("TMF");
        fullTextMatchingLicense34.setFullText("W3C  ");
        java.lang.String str45 = fullTextMatchingLicense34.getLicenseFamilyCategory();
        org.apache.rat.license.ILicense.Builder builder46 = fullTextMatchingLicense34.getLicense();
        org.apache.rat.license.ILicense.Builder builder47 = fullTextMatchingLicense34.getLicense();
        java.lang.String str48 = fullTextMatchingLicense34.getLicenseFamilyCategory();
        java.lang.String str49 = fullTextMatchingLicense34.getLicenseFamilyCategory();
        org.apache.rat.license.ILicenseFamily iLicenseFamily50 = fullTextMatchingLicense34.getLicenseFamily();
        reportConfiguration1.addApprovedLicenseCategory(iLicenseFamily50);
        org.junit.Assert.assertNull(claimStatistic2);
        org.junit.Assert.assertNull(claimStatistic5);
        org.junit.Assert.assertTrue("'" + options6 + "' != '" + org.apache.rat.utils.ReportingSet.Options.OVERWRITE + "'", options6.equals(org.apache.rat.utils.ReportingSet.Options.OVERWRITE));
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + true + "'", boolean9 == true);
        org.junit.Assert.assertNotNull(iLicenseArray10);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertNotNull(strArray25);
        org.junit.Assert.assertTrue("'" + boolean27 + "' != '" + true + "'", boolean27 == true);
        org.junit.Assert.assertNotNull(filenameFilter29);
        org.junit.Assert.assertNotNull(filenameFilter30);
        org.junit.Assert.assertNull(claimStatistic32);
        org.junit.Assert.assertTrue("'" + boolean33 + "' != '" + false + "'", boolean33 == false);
        org.junit.Assert.assertNull(str37);
        org.junit.Assert.assertEquals("'" + str38 + "' != '" + "hi!" + "'", str38, "hi!");
        org.junit.Assert.assertEquals("'" + str45 + "' != '" + "TMF" + "'", str45, "TMF");
        org.junit.Assert.assertNotNull(builder46);
        org.junit.Assert.assertNotNull(builder47);
        org.junit.Assert.assertEquals("'" + str48 + "' != '" + "TMF" + "'", str48, "TMF");
        org.junit.Assert.assertEquals("'" + str49 + "' != '" + "TMF" + "'", str49, "TMF");
        org.junit.Assert.assertNotNull(iLicenseFamily50);
    }

    @Test
    public void test14567() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest29.test14567");
        org.apache.rat.report.claim.ClaimStatistic claimStatistic0 = new org.apache.rat.report.claim.ClaimStatistic();
        java.util.Map<java.lang.String, java.lang.Integer> strMap1 = null;
        claimStatistic0.setDocumentCategoryMap(strMap1);
        int int3 = claimStatistic0.getNumUnApproved();
        java.util.Map<java.lang.String, java.lang.Integer> strMap4 = claimStatistic0.getDocumentCategoryMap();
        claimStatistic0.setNumUnknown((-1));
        java.util.Map<java.lang.String, java.lang.Integer> strMap7 = null;
        claimStatistic0.setLicenseFileNameMap(strMap7);
        java.util.Map<java.lang.String, java.lang.Integer> strMap9 = claimStatistic0.getDocumentCategoryMap();
        java.util.Map<java.lang.String, java.lang.Integer> strMap10 = null;
        claimStatistic0.setDocumentCategoryMap(strMap10);
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 0 + "'", int3 == 0);
        org.junit.Assert.assertNull(strMap4);
        org.junit.Assert.assertNull(strMap9);
    }

    @Test
    public void test14568() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest29.test14568");
        org.apache.rat.configuration.builders.MatcherRefBuilder matcherRefBuilder0 = org.apache.rat.analysis.IHeaderMatcher.Builder.matcherRef();
        boolean boolean1 = matcherRefBuilder0.hasId();
        java.lang.String str2 = matcherRefBuilder0.toString();
        java.util.Map<java.lang.String, org.apache.rat.analysis.IHeaderMatcher> strMap3 = null;
        org.apache.rat.configuration.builders.MatcherRefBuilder matcherRefBuilder4 = matcherRefBuilder0.setMatchers(strMap3);
        java.util.Map<java.lang.String, org.apache.rat.analysis.IHeaderMatcher> strMap5 = null;
        org.apache.rat.configuration.builders.MatcherRefBuilder matcherRefBuilder6 = matcherRefBuilder0.setMatchers(strMap5);
        java.util.Map<java.lang.String, org.apache.rat.analysis.IHeaderMatcher> strMap7 = null;
        org.apache.rat.configuration.builders.MatcherRefBuilder matcherRefBuilder8 = matcherRefBuilder0.setMatchers(strMap7);
        java.util.Map<java.lang.String, org.apache.rat.analysis.IHeaderMatcher> strMap9 = null;
        org.apache.rat.configuration.builders.MatcherRefBuilder matcherRefBuilder10 = matcherRefBuilder8.setMatchers(strMap9);
        java.lang.String str11 = matcherRefBuilder8.toString();
        java.util.Map<java.lang.String, org.apache.rat.analysis.IHeaderMatcher> strMap12 = null;
        org.apache.rat.configuration.builders.MatcherRefBuilder matcherRefBuilder13 = matcherRefBuilder8.setMatchers(strMap12);
        java.lang.String str14 = matcherRefBuilder8.toString();
        java.lang.String str15 = matcherRefBuilder8.toString();
        org.junit.Assert.assertNotNull(matcherRefBuilder0);
        org.junit.Assert.assertTrue("'" + boolean1 + "' != '" + false + "'", boolean1 == false);
        org.junit.Assert.assertEquals("'" + str2 + "' != '" + "MathcerRefBuilder: null" + "'", str2, "MathcerRefBuilder: null");
        org.junit.Assert.assertNotNull(matcherRefBuilder4);
        org.junit.Assert.assertNotNull(matcherRefBuilder6);
        org.junit.Assert.assertNotNull(matcherRefBuilder8);
        org.junit.Assert.assertNotNull(matcherRefBuilder10);
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "MathcerRefBuilder: null" + "'", str11, "MathcerRefBuilder: null");
        org.junit.Assert.assertNotNull(matcherRefBuilder13);
        org.junit.Assert.assertEquals("'" + str14 + "' != '" + "MathcerRefBuilder: null" + "'", str14, "MathcerRefBuilder: null");
        org.junit.Assert.assertEquals("'" + str15 + "' != '" + "MathcerRefBuilder: null" + "'", str15, "MathcerRefBuilder: null");
    }

    @Test
    public void test14569() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest29.test14569");
        // The following exception was thrown during execution in test generation
        try {
            org.apache.rat.license.LicenseSetFactory.LicenseFilter licenseFilter1 = org.apache.rat.license.LicenseSetFactory.LicenseFilter.fromText("Copyright Builder: s:Apache License Version 2.0 e:9df69ca9-2229-47b6-966b-221652fd7d08 o:null");
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: No enum constant org.apache.rat.license.LicenseSetFactory.LicenseFilter.copyright builder: s:apache license version 2.0 e:9df69ca9-2229-47b6-966b-221652fd7d08 o:null");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
    }

    @Test
    public void test14570() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest29.test14570");
        org.apache.rat.analysis.license.FullTextMatchingLicense fullTextMatchingLicense0 = new org.apache.rat.analysis.license.FullTextMatchingLicense();
        fullTextMatchingLicense0.setLicenseFamilyName("hi!");
        java.lang.String str3 = fullTextMatchingLicense0.getLicenseFamilyCategory();
        java.lang.String str4 = fullTextMatchingLicense0.getLicenseFamilyName();
        fullTextMatchingLicense0.setLicenseFamilyName("http://org/apache/rat/meta-data#LicenseFamilyName");
        fullTextMatchingLicense0.setFullText("9c36f068-9920-4c66-98c2-ba24e3dffa9c");
        fullTextMatchingLicense0.setNotes("0925e382-79b7-417a-85be-aed683d949e2");
        fullTextMatchingLicense0.setLicenseFamilyCategory("");
        fullTextMatchingLicense0.setLicenseFamilyName("");
        java.lang.String str15 = fullTextMatchingLicense0.getNotes();
        // The following exception was thrown during execution in test generation
        try {
            org.apache.rat.license.ILicenseFamily iLicenseFamily16 = fullTextMatchingLicense0.getLicenseFamily();
            org.junit.Assert.fail("Expected exception of type org.apache.rat.ConfigurationException; message: LicenseFamily Category must be specified");
        } catch (org.apache.rat.ConfigurationException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNull(str3);
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "hi!" + "'", str4, "hi!");
        org.junit.Assert.assertEquals("'" + str15 + "' != '" + "0925e382-79b7-417a-85be-aed683d949e2" + "'", str15, "0925e382-79b7-417a-85be-aed683d949e2");
    }

    @Test
    public void test14571() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest29.test14571");
        java.util.Map<java.lang.String, java.lang.String> strMap2 = null;
        // The following exception was thrown during execution in test generation
        try {
            org.apache.rat.api.ContentType contentType3 = new org.apache.rat.api.ContentType("", "null e15853fc-6f47-4f3f-a346-63fe009915e5", strMap2);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
    }

    @Test
    public void test14572() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest29.test14572");
        org.apache.rat.Defaults.Builder builder0 = org.apache.rat.Defaults.builder();
        org.apache.rat.Defaults defaults1 = builder0.build();
        org.apache.rat.Defaults.Builder builder2 = builder0.noDefault();
        org.apache.rat.Defaults.Builder builder4 = builder0.add("W3C Document Copyright");
        org.apache.rat.Defaults.Builder builder6 = builder4.remove("i indeterminent");
        org.apache.rat.Defaults.Builder builder8 = builder6.add("MathcerRefBuilder: .giti");
        // The following exception was thrown during execution in test generation
        try {
            org.apache.rat.Defaults defaults9 = builder8.build();
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: No such suffix: giti");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(builder0);
        org.junit.Assert.assertNotNull(defaults1);
        org.junit.Assert.assertNotNull(builder2);
        org.junit.Assert.assertNotNull(builder4);
        org.junit.Assert.assertNotNull(builder6);
        org.junit.Assert.assertNotNull(builder8);
    }

    @Test
    public void test14573() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest29.test14573");
        java.lang.String[] strArray5 = new java.lang.String[] { "http://org/apache/rat/meta-data#LicenseFamilyCategory", "Datum [ name ='http://org/apache/rat/meta-data#LicenseFamilyCategory',value ='GPL1  ']", "MANIFEST.MF", "AllBuilder:", "The MIT License" };
        org.apache.rat.utils.ReportingSet<java.lang.String> strSet6 = new org.apache.rat.utils.ReportingSet<java.lang.String>();
        boolean boolean7 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strSet6, strArray5);
        boolean boolean9 = strSet6.addIfNotPresent("http://org/apache/rat/meta-data#LicenseFamilyName");
        boolean boolean11 = strSet6.addIfNotPresent("ef7a8b13-64c3-4510-bb0c-dbf208e1e73f");
        java.util.function.Function<java.lang.String, java.lang.String> strFunction12 = null;
        org.apache.rat.utils.ReportingSet<java.lang.String> strSet13 = strSet6.setMsgFormat(strFunction12);
        java.lang.String str14 = strSet6.last();
        org.apache.rat.utils.ReportingSet<java.lang.String> strSet16 = strSet6.tailSet("SpdxBuilder: null");
        org.apache.rat.utils.Log log17 = null;
        org.apache.rat.ReportConfiguration reportConfiguration18 = new org.apache.rat.ReportConfiguration(log17);
        org.apache.rat.license.ILicenseFamily[] iLicenseFamilyArray19 = new org.apache.rat.license.ILicenseFamily[] {};
        java.util.ArrayList<org.apache.rat.license.ILicenseFamily> iLicenseFamilyList20 = new java.util.ArrayList<org.apache.rat.license.ILicenseFamily>();
        boolean boolean21 = java.util.Collections.addAll((java.util.Collection<org.apache.rat.license.ILicenseFamily>) iLicenseFamilyList20, iLicenseFamilyArray19);
        reportConfiguration18.addFamilies((java.util.Collection<org.apache.rat.license.ILicenseFamily>) iLicenseFamilyList20);
        boolean boolean23 = strSet16.retainAll((java.util.Collection<org.apache.rat.license.ILicenseFamily>) iLicenseFamilyList20);
        boolean boolean25 = strSet16.equals((java.lang.Object) "OASIS Open License");
        boolean boolean27 = strSet16.add("TextBuilder: META-DATA#LICENSEFAM...");
        strSet16.clear();
        // The following exception was thrown during execution in test generation
        try {
            org.apache.rat.utils.ReportingSet<java.lang.String> strSet31 = strSet16.subSet("0220269ffc2a4386ad2d6c8cb9ef0d91", "http://org/apache/rat/meta-data");
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: fromKey out of range");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(strArray5);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + true + "'", boolean7 == true);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + true + "'", boolean9 == true);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + true + "'", boolean11 == true);
        org.junit.Assert.assertNotNull(strSet13);
        org.junit.Assert.assertEquals("'" + str14 + "' != '" + "http://org/apache/rat/meta-data#LicenseFamilyName" + "'", str14, "http://org/apache/rat/meta-data#LicenseFamilyName");
        org.junit.Assert.assertNotNull(strSet16);
        org.junit.Assert.assertNotNull(iLicenseFamilyArray19);
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + false + "'", boolean21 == false);
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + true + "'", boolean23 == true);
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + false + "'", boolean25 == false);
        org.junit.Assert.assertTrue("'" + boolean27 + "' != '" + true + "'", boolean27 == true);
    }

    @Test
    public void test14574() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest29.test14574");
        org.apache.rat.analysis.matchers.FullTextMatcher fullTextMatcher1 = new org.apache.rat.analysis.matchers.FullTextMatcher("Copyright Builder: s:null e:null o:null");
        boolean boolean3 = fullTextMatcher1.doMatch("JAVA");
        org.apache.rat.analysis.IHeaderMatcher.State state5 = fullTextMatcher1.matches("5442eadd-c5c2-4028-96d7-364d7d405280");
        fullTextMatcher1.reset();
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertTrue("'" + state5 + "' != '" + org.apache.rat.analysis.IHeaderMatcher.State.i + "'", state5.equals(org.apache.rat.analysis.IHeaderMatcher.State.i));
    }

    @Test
    public void test14575() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest29.test14575");
        org.apache.rat.utils.Log log0 = null;
        org.apache.rat.ReportConfiguration reportConfiguration1 = new org.apache.rat.ReportConfiguration(log0);
        java.io.FilenameFilter filenameFilter2 = reportConfiguration1.getInputFileFilter();
        org.apache.rat.license.LicenseSetFactory.LicenseFilter licenseFilter3 = org.apache.rat.license.LicenseSetFactory.LicenseFilter.all;
        java.util.SortedSet<org.apache.rat.license.ILicense> iLicenseSet4 = reportConfiguration1.getLicenses(licenseFilter3);
        org.apache.rat.config.AddLicenseHeaders addLicenseHeaders5 = org.apache.rat.config.AddLicenseHeaders.FALSE;
        reportConfiguration1.setAddLicenseHeaders(addLicenseHeaders5);
        org.apache.rat.utils.Log log7 = null;
        org.apache.rat.ReportConfiguration reportConfiguration8 = new org.apache.rat.ReportConfiguration(log7);
        org.apache.rat.report.claim.ClaimStatistic claimStatistic9 = org.apache.rat.Reporter.report(reportConfiguration8);
        org.apache.rat.license.LicenseSetFactory.LicenseFilter licenseFilter10 = org.apache.rat.license.LicenseSetFactory.LicenseFilter.all;
        org.apache.rat.Reporter.listLicenses(reportConfiguration8, licenseFilter10);
        org.apache.rat.Reporter.listLicenses(reportConfiguration1, licenseFilter10);
        org.apache.rat.utils.Log log13 = null;
        org.apache.rat.ReportConfiguration reportConfiguration14 = new org.apache.rat.ReportConfiguration(log13);
        java.io.FilenameFilter filenameFilter15 = reportConfiguration14.getInputFileFilter();
        org.apache.rat.license.LicenseSetFactory.LicenseFilter licenseFilter16 = org.apache.rat.license.LicenseSetFactory.LicenseFilter.all;
        java.util.SortedSet<org.apache.rat.license.ILicense> iLicenseSet17 = reportConfiguration14.getLicenses(licenseFilter16);
        org.apache.rat.config.AddLicenseHeaders addLicenseHeaders18 = org.apache.rat.config.AddLicenseHeaders.FALSE;
        reportConfiguration14.setAddLicenseHeaders(addLicenseHeaders18);
        org.apache.rat.utils.Log log20 = null;
        org.apache.rat.ReportConfiguration reportConfiguration21 = new org.apache.rat.ReportConfiguration(log20);
        org.apache.rat.report.claim.ClaimStatistic claimStatistic22 = org.apache.rat.Reporter.report(reportConfiguration21);
        org.apache.rat.license.LicenseSetFactory.LicenseFilter licenseFilter23 = org.apache.rat.license.LicenseSetFactory.LicenseFilter.all;
        org.apache.rat.Reporter.listLicenses(reportConfiguration21, licenseFilter23);
        org.apache.rat.Reporter.listLicenses(reportConfiguration14, licenseFilter23);
        org.apache.rat.Reporter.listLicenses(reportConfiguration1, licenseFilter23);
        java.io.FilenameFilter filenameFilter27 = reportConfiguration1.getInputFileFilter();
        org.apache.rat.utils.Log log28 = null;
        org.apache.rat.ReportConfiguration reportConfiguration29 = new org.apache.rat.ReportConfiguration(log28);
        java.io.FilenameFilter filenameFilter30 = reportConfiguration29.getInputFileFilter();
        org.apache.rat.license.LicenseSetFactory.LicenseFilter licenseFilter31 = org.apache.rat.license.LicenseSetFactory.LicenseFilter.all;
        java.util.SortedSet<org.apache.rat.license.ILicense> iLicenseSet32 = reportConfiguration29.getLicenses(licenseFilter31);
        org.apache.rat.config.AddLicenseHeaders addLicenseHeaders33 = org.apache.rat.config.AddLicenseHeaders.FALSE;
        reportConfiguration29.setAddLicenseHeaders(addLicenseHeaders33);
        org.apache.rat.utils.Log log35 = null;
        org.apache.rat.ReportConfiguration reportConfiguration36 = new org.apache.rat.ReportConfiguration(log35);
        org.apache.rat.report.claim.ClaimStatistic claimStatistic37 = org.apache.rat.Reporter.report(reportConfiguration36);
        org.apache.rat.license.LicenseSetFactory.LicenseFilter licenseFilter38 = org.apache.rat.license.LicenseSetFactory.LicenseFilter.all;
        org.apache.rat.Reporter.listLicenses(reportConfiguration36, licenseFilter38);
        org.apache.rat.Reporter.listLicenses(reportConfiguration29, licenseFilter38);
        org.apache.rat.utils.Log log41 = null;
        org.apache.rat.ReportConfiguration reportConfiguration42 = new org.apache.rat.ReportConfiguration(log41);
        java.io.FilenameFilter filenameFilter43 = reportConfiguration42.getInputFileFilter();
        org.apache.rat.license.LicenseSetFactory.LicenseFilter licenseFilter44 = org.apache.rat.license.LicenseSetFactory.LicenseFilter.all;
        java.util.SortedSet<org.apache.rat.license.ILicense> iLicenseSet45 = reportConfiguration42.getLicenses(licenseFilter44);
        org.apache.rat.config.AddLicenseHeaders addLicenseHeaders46 = org.apache.rat.config.AddLicenseHeaders.FALSE;
        reportConfiguration42.setAddLicenseHeaders(addLicenseHeaders46);
        org.apache.rat.utils.Log log48 = null;
        org.apache.rat.ReportConfiguration reportConfiguration49 = new org.apache.rat.ReportConfiguration(log48);
        org.apache.rat.report.claim.ClaimStatistic claimStatistic50 = org.apache.rat.Reporter.report(reportConfiguration49);
        org.apache.rat.license.LicenseSetFactory.LicenseFilter licenseFilter51 = org.apache.rat.license.LicenseSetFactory.LicenseFilter.all;
        org.apache.rat.Reporter.listLicenses(reportConfiguration49, licenseFilter51);
        org.apache.rat.Reporter.listLicenses(reportConfiguration42, licenseFilter51);
        org.apache.rat.Reporter.listLicenses(reportConfiguration29, licenseFilter51);
        java.util.SortedSet<org.apache.rat.license.ILicense> iLicenseSet55 = reportConfiguration1.getLicenses(licenseFilter51);
        org.apache.rat.license.ILicense iLicense56 = null;
        reportConfiguration1.addLicense(iLicense56);
        org.apache.commons.io.function.IOSupplier<java.io.InputStream> inputStreamIOSupplier58 = reportConfiguration1.getStyleSheet();
        org.apache.rat.utils.Log log59 = reportConfiguration1.getLog();
        boolean boolean60 = reportConfiguration1.isStyleReport();
        java.net.URL uRL61 = null;
        // The following exception was thrown during execution in test generation
        try {
            reportConfiguration1.setStyleSheet(uRL61);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: styleSheet file should not be null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNull(filenameFilter2);
        org.junit.Assert.assertTrue("'" + licenseFilter3 + "' != '" + org.apache.rat.license.LicenseSetFactory.LicenseFilter.all + "'", licenseFilter3.equals(org.apache.rat.license.LicenseSetFactory.LicenseFilter.all));
        org.junit.Assert.assertNotNull(iLicenseSet4);
        org.junit.Assert.assertTrue("'" + addLicenseHeaders5 + "' != '" + org.apache.rat.config.AddLicenseHeaders.FALSE + "'", addLicenseHeaders5.equals(org.apache.rat.config.AddLicenseHeaders.FALSE));
        org.junit.Assert.assertNull(claimStatistic9);
        org.junit.Assert.assertTrue("'" + licenseFilter10 + "' != '" + org.apache.rat.license.LicenseSetFactory.LicenseFilter.all + "'", licenseFilter10.equals(org.apache.rat.license.LicenseSetFactory.LicenseFilter.all));
        org.junit.Assert.assertNull(filenameFilter15);
        org.junit.Assert.assertTrue("'" + licenseFilter16 + "' != '" + org.apache.rat.license.LicenseSetFactory.LicenseFilter.all + "'", licenseFilter16.equals(org.apache.rat.license.LicenseSetFactory.LicenseFilter.all));
        org.junit.Assert.assertNotNull(iLicenseSet17);
        org.junit.Assert.assertTrue("'" + addLicenseHeaders18 + "' != '" + org.apache.rat.config.AddLicenseHeaders.FALSE + "'", addLicenseHeaders18.equals(org.apache.rat.config.AddLicenseHeaders.FALSE));
        org.junit.Assert.assertNull(claimStatistic22);
        org.junit.Assert.assertTrue("'" + licenseFilter23 + "' != '" + org.apache.rat.license.LicenseSetFactory.LicenseFilter.all + "'", licenseFilter23.equals(org.apache.rat.license.LicenseSetFactory.LicenseFilter.all));
        org.junit.Assert.assertNull(filenameFilter27);
        org.junit.Assert.assertNull(filenameFilter30);
        org.junit.Assert.assertTrue("'" + licenseFilter31 + "' != '" + org.apache.rat.license.LicenseSetFactory.LicenseFilter.all + "'", licenseFilter31.equals(org.apache.rat.license.LicenseSetFactory.LicenseFilter.all));
        org.junit.Assert.assertNotNull(iLicenseSet32);
        org.junit.Assert.assertTrue("'" + addLicenseHeaders33 + "' != '" + org.apache.rat.config.AddLicenseHeaders.FALSE + "'", addLicenseHeaders33.equals(org.apache.rat.config.AddLicenseHeaders.FALSE));
        org.junit.Assert.assertNull(claimStatistic37);
        org.junit.Assert.assertTrue("'" + licenseFilter38 + "' != '" + org.apache.rat.license.LicenseSetFactory.LicenseFilter.all + "'", licenseFilter38.equals(org.apache.rat.license.LicenseSetFactory.LicenseFilter.all));
        org.junit.Assert.assertNull(filenameFilter43);
        org.junit.Assert.assertTrue("'" + licenseFilter44 + "' != '" + org.apache.rat.license.LicenseSetFactory.LicenseFilter.all + "'", licenseFilter44.equals(org.apache.rat.license.LicenseSetFactory.LicenseFilter.all));
        org.junit.Assert.assertNotNull(iLicenseSet45);
        org.junit.Assert.assertTrue("'" + addLicenseHeaders46 + "' != '" + org.apache.rat.config.AddLicenseHeaders.FALSE + "'", addLicenseHeaders46.equals(org.apache.rat.config.AddLicenseHeaders.FALSE));
        org.junit.Assert.assertNull(claimStatistic50);
        org.junit.Assert.assertTrue("'" + licenseFilter51 + "' != '" + org.apache.rat.license.LicenseSetFactory.LicenseFilter.all + "'", licenseFilter51.equals(org.apache.rat.license.LicenseSetFactory.LicenseFilter.all));
        org.junit.Assert.assertNotNull(iLicenseSet55);
        org.junit.Assert.assertNull(inputStreamIOSupplier58);
        org.junit.Assert.assertNull(log59);
        org.junit.Assert.assertTrue("'" + boolean60 + "' != '" + true + "'", boolean60 == true);
    }

    @Test
    public void test14576() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest29.test14576");
        org.apache.rat.utils.Log log0 = null;
        org.apache.rat.ReportConfiguration reportConfiguration1 = new org.apache.rat.ReportConfiguration(log0);
        org.apache.rat.report.claim.ClaimStatistic claimStatistic2 = org.apache.rat.Reporter.report(reportConfiguration1);
        org.apache.commons.io.function.IOSupplier<java.io.InputStream> inputStreamIOSupplier3 = reportConfiguration1.getStyleSheet();
        org.apache.rat.utils.Log log4 = null;
        org.apache.rat.ReportConfiguration reportConfiguration5 = new org.apache.rat.ReportConfiguration(log4);
        java.io.FilenameFilter filenameFilter6 = reportConfiguration5.getInputFileFilter();
        org.apache.rat.license.LicenseSetFactory.LicenseFilter licenseFilter7 = org.apache.rat.license.LicenseSetFactory.LicenseFilter.all;
        java.util.SortedSet<org.apache.rat.license.ILicense> iLicenseSet8 = reportConfiguration5.getLicenses(licenseFilter7);
        org.apache.rat.config.AddLicenseHeaders addLicenseHeaders9 = org.apache.rat.config.AddLicenseHeaders.FALSE;
        reportConfiguration5.setAddLicenseHeaders(addLicenseHeaders9);
        org.apache.rat.utils.Log log11 = null;
        org.apache.rat.ReportConfiguration reportConfiguration12 = new org.apache.rat.ReportConfiguration(log11);
        org.apache.rat.report.claim.ClaimStatistic claimStatistic13 = org.apache.rat.Reporter.report(reportConfiguration12);
        org.apache.rat.license.LicenseSetFactory.LicenseFilter licenseFilter14 = org.apache.rat.license.LicenseSetFactory.LicenseFilter.all;
        org.apache.rat.Reporter.listLicenses(reportConfiguration12, licenseFilter14);
        org.apache.rat.Reporter.listLicenses(reportConfiguration5, licenseFilter14);
        org.apache.rat.utils.Log log17 = null;
        org.apache.rat.ReportConfiguration reportConfiguration18 = new org.apache.rat.ReportConfiguration(log17);
        java.io.FilenameFilter filenameFilter19 = reportConfiguration18.getInputFileFilter();
        org.apache.rat.license.LicenseSetFactory.LicenseFilter licenseFilter20 = org.apache.rat.license.LicenseSetFactory.LicenseFilter.all;
        java.util.SortedSet<org.apache.rat.license.ILicense> iLicenseSet21 = reportConfiguration18.getLicenses(licenseFilter20);
        org.apache.rat.config.AddLicenseHeaders addLicenseHeaders22 = org.apache.rat.config.AddLicenseHeaders.FALSE;
        reportConfiguration18.setAddLicenseHeaders(addLicenseHeaders22);
        org.apache.rat.utils.Log log24 = null;
        org.apache.rat.ReportConfiguration reportConfiguration25 = new org.apache.rat.ReportConfiguration(log24);
        org.apache.rat.report.claim.ClaimStatistic claimStatistic26 = org.apache.rat.Reporter.report(reportConfiguration25);
        org.apache.rat.license.LicenseSetFactory.LicenseFilter licenseFilter27 = org.apache.rat.license.LicenseSetFactory.LicenseFilter.all;
        org.apache.rat.Reporter.listLicenses(reportConfiguration25, licenseFilter27);
        org.apache.rat.Reporter.listLicenses(reportConfiguration18, licenseFilter27);
        org.apache.rat.Reporter.listLicenses(reportConfiguration5, licenseFilter27);
        org.apache.rat.utils.Log log31 = null;
        org.apache.rat.ReportConfiguration reportConfiguration32 = new org.apache.rat.ReportConfiguration(log31);
        org.apache.commons.io.function.IOSupplier<java.io.OutputStream> outputStreamIOSupplier33 = reportConfiguration32.getOutput();
        reportConfiguration5.setOut(outputStreamIOSupplier33);
        org.apache.rat.utils.Log.Level level35 = org.apache.rat.utils.Log.Level.WARN;
        reportConfiguration5.logLicenseCollisions(level35);
        org.apache.commons.io.filefilter.IOFileFilter iOFileFilter37 = reportConfiguration5.getDirectoryFilter();
        java.nio.file.Path path38 = null;
        java.nio.file.attribute.BasicFileAttributes basicFileAttributes39 = null;
        java.nio.file.FileVisitResult fileVisitResult40 = iOFileFilter37.accept(path38, basicFileAttributes39);
        org.apache.commons.io.filefilter.IOFileFilter iOFileFilter41 = iOFileFilter37.negate();
        java.nio.file.Path path42 = null;
        java.nio.file.attribute.BasicFileAttributes basicFileAttributes43 = null;
        java.nio.file.FileVisitResult fileVisitResult44 = iOFileFilter37.accept(path42, basicFileAttributes43);
        reportConfiguration1.addDirectoryFilter(iOFileFilter37);
        org.apache.rat.utils.Log log46 = null;
        org.apache.rat.ReportConfiguration reportConfiguration47 = new org.apache.rat.ReportConfiguration(log46);
        java.io.FilenameFilter filenameFilter48 = reportConfiguration47.getInputFileFilter();
        org.apache.rat.license.LicenseSetFactory.LicenseFilter licenseFilter49 = org.apache.rat.license.LicenseSetFactory.LicenseFilter.all;
        java.util.SortedSet<org.apache.rat.license.ILicense> iLicenseSet50 = reportConfiguration47.getLicenses(licenseFilter49);
        org.apache.rat.config.AddLicenseHeaders addLicenseHeaders51 = org.apache.rat.config.AddLicenseHeaders.FALSE;
        reportConfiguration47.setAddLicenseHeaders(addLicenseHeaders51);
        org.apache.rat.utils.Log log53 = null;
        org.apache.rat.ReportConfiguration reportConfiguration54 = new org.apache.rat.ReportConfiguration(log53);
        org.apache.rat.report.claim.ClaimStatistic claimStatistic55 = org.apache.rat.Reporter.report(reportConfiguration54);
        org.apache.rat.license.LicenseSetFactory.LicenseFilter licenseFilter56 = org.apache.rat.license.LicenseSetFactory.LicenseFilter.all;
        org.apache.rat.Reporter.listLicenses(reportConfiguration54, licenseFilter56);
        org.apache.rat.Reporter.listLicenses(reportConfiguration47, licenseFilter56);
        org.apache.rat.utils.Log log59 = null;
        org.apache.rat.ReportConfiguration reportConfiguration60 = new org.apache.rat.ReportConfiguration(log59);
        java.io.FilenameFilter filenameFilter61 = reportConfiguration60.getInputFileFilter();
        org.apache.rat.license.LicenseSetFactory.LicenseFilter licenseFilter62 = org.apache.rat.license.LicenseSetFactory.LicenseFilter.all;
        java.util.SortedSet<org.apache.rat.license.ILicense> iLicenseSet63 = reportConfiguration60.getLicenses(licenseFilter62);
        org.apache.rat.config.AddLicenseHeaders addLicenseHeaders64 = org.apache.rat.config.AddLicenseHeaders.FALSE;
        reportConfiguration60.setAddLicenseHeaders(addLicenseHeaders64);
        org.apache.rat.utils.Log log66 = null;
        org.apache.rat.ReportConfiguration reportConfiguration67 = new org.apache.rat.ReportConfiguration(log66);
        org.apache.rat.report.claim.ClaimStatistic claimStatistic68 = org.apache.rat.Reporter.report(reportConfiguration67);
        org.apache.rat.license.LicenseSetFactory.LicenseFilter licenseFilter69 = org.apache.rat.license.LicenseSetFactory.LicenseFilter.all;
        org.apache.rat.Reporter.listLicenses(reportConfiguration67, licenseFilter69);
        org.apache.rat.Reporter.listLicenses(reportConfiguration60, licenseFilter69);
        org.apache.rat.Reporter.listLicenses(reportConfiguration47, licenseFilter69);
        org.apache.rat.utils.Log log73 = null;
        org.apache.rat.ReportConfiguration reportConfiguration74 = new org.apache.rat.ReportConfiguration(log73);
        org.apache.commons.io.function.IOSupplier<java.io.OutputStream> outputStreamIOSupplier75 = reportConfiguration74.getOutput();
        reportConfiguration47.setOut(outputStreamIOSupplier75);
        org.apache.rat.utils.Log.Level level77 = org.apache.rat.utils.Log.Level.WARN;
        reportConfiguration47.logLicenseCollisions(level77);
        org.apache.commons.io.filefilter.IOFileFilter iOFileFilter79 = reportConfiguration47.getDirectoryFilter();
        java.nio.file.Path path80 = null;
        java.nio.file.attribute.BasicFileAttributes basicFileAttributes81 = null;
        java.nio.file.FileVisitResult fileVisitResult82 = iOFileFilter79.accept(path80, basicFileAttributes81);
        org.apache.commons.io.filefilter.IOFileFilter iOFileFilter83 = iOFileFilter79.negate();
        org.apache.commons.io.filefilter.IOFileFilter iOFileFilter84 = iOFileFilter83.negate();
        java.nio.file.Path path85 = null;
        boolean boolean86 = iOFileFilter84.matches(path85);
        java.nio.file.Path path87 = null;
        boolean boolean88 = iOFileFilter84.matches(path87);
        org.apache.commons.io.filefilter.IOFileFilter iOFileFilter89 = iOFileFilter84.negate();
        org.apache.commons.io.filefilter.IOFileFilter iOFileFilter90 = iOFileFilter37.or(iOFileFilter84);
        java.nio.file.Path path91 = null;
        boolean boolean92 = iOFileFilter90.matches(path91);
        org.junit.Assert.assertNull(claimStatistic2);
        org.junit.Assert.assertNull(inputStreamIOSupplier3);
        org.junit.Assert.assertNull(filenameFilter6);
        org.junit.Assert.assertTrue("'" + licenseFilter7 + "' != '" + org.apache.rat.license.LicenseSetFactory.LicenseFilter.all + "'", licenseFilter7.equals(org.apache.rat.license.LicenseSetFactory.LicenseFilter.all));
        org.junit.Assert.assertNotNull(iLicenseSet8);
        org.junit.Assert.assertTrue("'" + addLicenseHeaders9 + "' != '" + org.apache.rat.config.AddLicenseHeaders.FALSE + "'", addLicenseHeaders9.equals(org.apache.rat.config.AddLicenseHeaders.FALSE));
        org.junit.Assert.assertNull(claimStatistic13);
        org.junit.Assert.assertTrue("'" + licenseFilter14 + "' != '" + org.apache.rat.license.LicenseSetFactory.LicenseFilter.all + "'", licenseFilter14.equals(org.apache.rat.license.LicenseSetFactory.LicenseFilter.all));
        org.junit.Assert.assertNull(filenameFilter19);
        org.junit.Assert.assertTrue("'" + licenseFilter20 + "' != '" + org.apache.rat.license.LicenseSetFactory.LicenseFilter.all + "'", licenseFilter20.equals(org.apache.rat.license.LicenseSetFactory.LicenseFilter.all));
        org.junit.Assert.assertNotNull(iLicenseSet21);
        org.junit.Assert.assertTrue("'" + addLicenseHeaders22 + "' != '" + org.apache.rat.config.AddLicenseHeaders.FALSE + "'", addLicenseHeaders22.equals(org.apache.rat.config.AddLicenseHeaders.FALSE));
        org.junit.Assert.assertNull(claimStatistic26);
        org.junit.Assert.assertTrue("'" + licenseFilter27 + "' != '" + org.apache.rat.license.LicenseSetFactory.LicenseFilter.all + "'", licenseFilter27.equals(org.apache.rat.license.LicenseSetFactory.LicenseFilter.all));
        org.junit.Assert.assertNotNull(outputStreamIOSupplier33);
        org.junit.Assert.assertTrue("'" + level35 + "' != '" + org.apache.rat.utils.Log.Level.WARN + "'", level35.equals(org.apache.rat.utils.Log.Level.WARN));
        org.junit.Assert.assertNotNull(iOFileFilter37);
        org.junit.Assert.assertTrue("'" + fileVisitResult40 + "' != '" + java.nio.file.FileVisitResult.TERMINATE + "'", fileVisitResult40.equals(java.nio.file.FileVisitResult.TERMINATE));
        org.junit.Assert.assertNotNull(iOFileFilter41);
        org.junit.Assert.assertTrue("'" + fileVisitResult44 + "' != '" + java.nio.file.FileVisitResult.TERMINATE + "'", fileVisitResult44.equals(java.nio.file.FileVisitResult.TERMINATE));
        org.junit.Assert.assertNull(filenameFilter48);
        org.junit.Assert.assertTrue("'" + licenseFilter49 + "' != '" + org.apache.rat.license.LicenseSetFactory.LicenseFilter.all + "'", licenseFilter49.equals(org.apache.rat.license.LicenseSetFactory.LicenseFilter.all));
        org.junit.Assert.assertNotNull(iLicenseSet50);
        org.junit.Assert.assertTrue("'" + addLicenseHeaders51 + "' != '" + org.apache.rat.config.AddLicenseHeaders.FALSE + "'", addLicenseHeaders51.equals(org.apache.rat.config.AddLicenseHeaders.FALSE));
        org.junit.Assert.assertNull(claimStatistic55);
        org.junit.Assert.assertTrue("'" + licenseFilter56 + "' != '" + org.apache.rat.license.LicenseSetFactory.LicenseFilter.all + "'", licenseFilter56.equals(org.apache.rat.license.LicenseSetFactory.LicenseFilter.all));
        org.junit.Assert.assertNull(filenameFilter61);
        org.junit.Assert.assertTrue("'" + licenseFilter62 + "' != '" + org.apache.rat.license.LicenseSetFactory.LicenseFilter.all + "'", licenseFilter62.equals(org.apache.rat.license.LicenseSetFactory.LicenseFilter.all));
        org.junit.Assert.assertNotNull(iLicenseSet63);
        org.junit.Assert.assertTrue("'" + addLicenseHeaders64 + "' != '" + org.apache.rat.config.AddLicenseHeaders.FALSE + "'", addLicenseHeaders64.equals(org.apache.rat.config.AddLicenseHeaders.FALSE));
        org.junit.Assert.assertNull(claimStatistic68);
        org.junit.Assert.assertTrue("'" + licenseFilter69 + "' != '" + org.apache.rat.license.LicenseSetFactory.LicenseFilter.all + "'", licenseFilter69.equals(org.apache.rat.license.LicenseSetFactory.LicenseFilter.all));
        org.junit.Assert.assertNotNull(outputStreamIOSupplier75);
        org.junit.Assert.assertTrue("'" + level77 + "' != '" + org.apache.rat.utils.Log.Level.WARN + "'", level77.equals(org.apache.rat.utils.Log.Level.WARN));
        org.junit.Assert.assertNotNull(iOFileFilter79);
        org.junit.Assert.assertTrue("'" + fileVisitResult82 + "' != '" + java.nio.file.FileVisitResult.TERMINATE + "'", fileVisitResult82.equals(java.nio.file.FileVisitResult.TERMINATE));
        org.junit.Assert.assertNotNull(iOFileFilter83);
        org.junit.Assert.assertNotNull(iOFileFilter84);
        org.junit.Assert.assertTrue("'" + boolean86 + "' != '" + false + "'", boolean86 == false);
        org.junit.Assert.assertTrue("'" + boolean88 + "' != '" + false + "'", boolean88 == false);
        org.junit.Assert.assertNotNull(iOFileFilter89);
        org.junit.Assert.assertNotNull(iOFileFilter90);
        org.junit.Assert.assertTrue("'" + boolean92 + "' != '" + false + "'", boolean92 == false);
    }

    @Test
    public void test14577() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest29.test14577");
        org.apache.rat.report.claim.ClaimStatistic claimStatistic0 = new org.apache.rat.report.claim.ClaimStatistic();
        claimStatistic0.setNumApproved((int) (short) 10);
        java.util.Map<java.lang.String, java.lang.Integer> strMap3 = null;
        claimStatistic0.setDocumentCategoryMap(strMap3);
        int int5 = claimStatistic0.getNumGenerated();
        java.util.Map<java.lang.String, java.lang.Integer> strMap6 = claimStatistic0.getLicenseFileNameMap();
        claimStatistic0.setNumGenerated((int) (byte) 10);
        claimStatistic0.setNumUnknown(0);
        int int11 = claimStatistic0.getNumUnApproved();
        claimStatistic0.setNumUnknown(10);
        java.util.Map<java.lang.String, java.lang.Integer> strMap14 = null;
        claimStatistic0.setLicenseFileCodeMap(strMap14);
        claimStatistic0.setNumUnknown(14);
        claimStatistic0.setNumUnknown(0);
        java.util.Map<java.lang.String, java.lang.Integer> strMap20 = claimStatistic0.getLicenseFileCodeMap();
        java.util.Map<java.lang.String, java.lang.Integer> strMap21 = claimStatistic0.getLicenseFileNameMap();
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 0 + "'", int5 == 0);
        org.junit.Assert.assertNull(strMap6);
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 0 + "'", int11 == 0);
        org.junit.Assert.assertNull(strMap20);
        org.junit.Assert.assertNull(strMap21);
    }

    @Test
    public void test14578() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest29.test14578");
        java.util.regex.Pattern pattern1 = null;
        org.apache.rat.analysis.matchers.SimpleRegexMatcher simpleRegexMatcher2 = new org.apache.rat.analysis.matchers.SimpleRegexMatcher("f5f3fb9b-540a-43ef-a018-8ce5779e23f4", pattern1);
        simpleRegexMatcher2.reset();
    }

    @Test
    public void test14579() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest29.test14579");
        org.apache.rat.header.HeaderBean headerBean0 = new org.apache.rat.header.HeaderBean();
        boolean boolean1 = headerBean0.isMatch();
        java.util.regex.Pattern pattern2 = null;
        headerBean0.setHeaderPattern(pattern2);
        boolean boolean4 = headerBean0.isMatch();
        java.util.regex.Pattern pattern5 = headerBean0.getHeaderPattern();
        java.util.regex.Pattern pattern6 = headerBean0.getHeaderPattern();
        headerBean0.setMatch(false);
        java.util.regex.Pattern pattern9 = null;
        headerBean0.setHeaderPattern(pattern9);
        boolean boolean11 = headerBean0.isMatch();
        org.junit.Assert.assertTrue("'" + boolean1 + "' != '" + false + "'", boolean1 == false);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertNull(pattern5);
        org.junit.Assert.assertNull(pattern6);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
    }

    @Test
    public void test14580() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest29.test14580");
        org.apache.rat.utils.Log log0 = null;
        org.apache.rat.ReportConfiguration reportConfiguration1 = new org.apache.rat.ReportConfiguration(log0);
        reportConfiguration1.addApprovedLicenseCategory(".cvsignore");
        org.apache.rat.utils.Log log4 = null;
        org.apache.rat.ReportConfiguration reportConfiguration5 = new org.apache.rat.ReportConfiguration(log4);
        java.io.FilenameFilter filenameFilter6 = reportConfiguration5.getInputFileFilter();
        org.apache.rat.license.LicenseSetFactory.LicenseFilter licenseFilter7 = org.apache.rat.license.LicenseSetFactory.LicenseFilter.all;
        java.util.SortedSet<org.apache.rat.license.ILicense> iLicenseSet8 = reportConfiguration5.getLicenses(licenseFilter7);
        reportConfiguration1.addLicensesIfNotPresent((java.util.Collection<org.apache.rat.license.ILicense>) iLicenseSet8);
        reportConfiguration1.removeApprovedLicenseCategory("The MIT License");
        org.apache.rat.license.ILicense iLicense12 = null;
        reportConfiguration1.addLicense(iLicense12);
        org.apache.rat.license.ILicense iLicense14 = null;
        reportConfiguration1.addLicense(iLicense14);
        org.apache.rat.utils.Log log16 = null;
        org.apache.rat.ReportConfiguration reportConfiguration17 = new org.apache.rat.ReportConfiguration(log16);
        java.io.FilenameFilter filenameFilter18 = reportConfiguration17.getInputFileFilter();
        org.apache.rat.license.LicenseSetFactory.LicenseFilter licenseFilter19 = org.apache.rat.license.LicenseSetFactory.LicenseFilter.all;
        java.util.SortedSet<org.apache.rat.license.ILicense> iLicenseSet20 = reportConfiguration17.getLicenses(licenseFilter19);
        org.apache.rat.license.ILicenseFamily iLicenseFamily21 = null;
        reportConfiguration17.addFamily(iLicenseFamily21);
        reportConfiguration17.setCopyrightMessage("hi!");
        org.apache.rat.utils.Log log25 = null;
        org.apache.rat.ReportConfiguration reportConfiguration26 = new org.apache.rat.ReportConfiguration(log25);
        reportConfiguration26.addApprovedLicenseCategory(".cvsignore");
        org.apache.rat.utils.Log log29 = null;
        org.apache.rat.ReportConfiguration reportConfiguration30 = new org.apache.rat.ReportConfiguration(log29);
        java.io.FilenameFilter filenameFilter31 = reportConfiguration30.getInputFileFilter();
        org.apache.rat.license.LicenseSetFactory.LicenseFilter licenseFilter32 = org.apache.rat.license.LicenseSetFactory.LicenseFilter.all;
        java.util.SortedSet<org.apache.rat.license.ILicense> iLicenseSet33 = reportConfiguration30.getLicenses(licenseFilter32);
        reportConfiguration26.addLicensesIfNotPresent((java.util.Collection<org.apache.rat.license.ILicense>) iLicenseSet33);
        reportConfiguration26.setCopyrightMessage("MathcerRefBuilder: null");
        org.apache.commons.io.function.IOSupplier<java.io.InputStream> inputStreamIOSupplier37 = org.apache.rat.Defaults.getUnapprovedLicensesStyleSheet();
        reportConfiguration26.setStyleSheet(inputStreamIOSupplier37);
        reportConfiguration17.setStyleSheet(inputStreamIOSupplier37);
        reportConfiguration1.setStyleSheet(inputStreamIOSupplier37);
        reportConfiguration1.removeApprovedLicenseCategory("3a9308bd-e9ee-4b6a-bbac-7bb1dfd181d8");
        java.io.FilenameFilter filenameFilter43 = reportConfiguration1.getInputFileFilter();
        java.lang.String[] strArray49 = new java.lang.String[] { "http://org/apache/rat/meta-data#LicenseFamilyCategory", "Datum [ name ='http://org/apache/rat/meta-data#LicenseFamilyCategory',value ='GPL1  ']", "MANIFEST.MF", "AllBuilder:", "The MIT License" };
        org.apache.rat.utils.ReportingSet<java.lang.String> strSet50 = new org.apache.rat.utils.ReportingSet<java.lang.String>();
        boolean boolean51 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strSet50, strArray49);
        boolean boolean53 = strSet50.addIfNotPresent("http://org/apache/rat/meta-data#LicenseFamilyName");
        boolean boolean55 = strSet50.addIfNotPresent("ef7a8b13-64c3-4510-bb0c-dbf208e1e73f");
        java.util.function.Function<java.lang.String, java.lang.String> strFunction56 = null;
        org.apache.rat.utils.ReportingSet<java.lang.String> strSet57 = strSet50.setMsgFormat(strFunction56);
        java.util.Spliterator<java.lang.String> strSpliterator58 = strSet50.spliterator();
        org.apache.rat.utils.Log log59 = null;
        org.apache.rat.ReportConfiguration reportConfiguration60 = new org.apache.rat.ReportConfiguration(log59);
        org.apache.rat.license.ILicenseFamily[] iLicenseFamilyArray61 = new org.apache.rat.license.ILicenseFamily[] {};
        java.util.ArrayList<org.apache.rat.license.ILicenseFamily> iLicenseFamilyList62 = new java.util.ArrayList<org.apache.rat.license.ILicenseFamily>();
        boolean boolean63 = java.util.Collections.addAll((java.util.Collection<org.apache.rat.license.ILicenseFamily>) iLicenseFamilyList62, iLicenseFamilyArray61);
        reportConfiguration60.addFamilies((java.util.Collection<org.apache.rat.license.ILicenseFamily>) iLicenseFamilyList62);
        boolean boolean65 = strSet50.containsAll((java.util.Collection<org.apache.rat.license.ILicenseFamily>) iLicenseFamilyList62);
        java.util.Spliterator<java.lang.String> strSpliterator66 = strSet50.spliterator();
        int int67 = strSet50.size();
        org.apache.rat.configuration.Format format68 = org.apache.rat.configuration.Format.XML;
        org.apache.rat.configuration.LicenseReader licenseReader69 = format68.licenseReader();
        org.apache.rat.configuration.MatcherReader matcherReader70 = format68.matcherReader();
        org.apache.rat.configuration.LicenseReader licenseReader71 = format68.licenseReader();
        java.util.SortedSet<org.apache.rat.license.ILicenseFamily> iLicenseFamilySet72 = licenseReader71.readFamilies();
        boolean boolean73 = strSet50.retainAll((java.util.Collection<org.apache.rat.license.ILicenseFamily>) iLicenseFamilySet72);
        reportConfiguration1.addFamilies((java.util.Collection<org.apache.rat.license.ILicenseFamily>) iLicenseFamilySet72);
        org.apache.rat.policy.DefaultPolicy defaultPolicy75 = new org.apache.rat.policy.DefaultPolicy((java.util.Collection<org.apache.rat.license.ILicenseFamily>) iLicenseFamilySet72);
        org.junit.Assert.assertNull(filenameFilter6);
        org.junit.Assert.assertTrue("'" + licenseFilter7 + "' != '" + org.apache.rat.license.LicenseSetFactory.LicenseFilter.all + "'", licenseFilter7.equals(org.apache.rat.license.LicenseSetFactory.LicenseFilter.all));
        org.junit.Assert.assertNotNull(iLicenseSet8);
        org.junit.Assert.assertNull(filenameFilter18);
        org.junit.Assert.assertTrue("'" + licenseFilter19 + "' != '" + org.apache.rat.license.LicenseSetFactory.LicenseFilter.all + "'", licenseFilter19.equals(org.apache.rat.license.LicenseSetFactory.LicenseFilter.all));
        org.junit.Assert.assertNotNull(iLicenseSet20);
        org.junit.Assert.assertNull(filenameFilter31);
        org.junit.Assert.assertTrue("'" + licenseFilter32 + "' != '" + org.apache.rat.license.LicenseSetFactory.LicenseFilter.all + "'", licenseFilter32.equals(org.apache.rat.license.LicenseSetFactory.LicenseFilter.all));
        org.junit.Assert.assertNotNull(iLicenseSet33);
        org.junit.Assert.assertNotNull(inputStreamIOSupplier37);
        org.junit.Assert.assertNull(filenameFilter43);
        org.junit.Assert.assertNotNull(strArray49);
        org.junit.Assert.assertTrue("'" + boolean51 + "' != '" + true + "'", boolean51 == true);
        org.junit.Assert.assertTrue("'" + boolean53 + "' != '" + true + "'", boolean53 == true);
        org.junit.Assert.assertTrue("'" + boolean55 + "' != '" + true + "'", boolean55 == true);
        org.junit.Assert.assertNotNull(strSet57);
        org.junit.Assert.assertNotNull(strSpliterator58);
        org.junit.Assert.assertNotNull(iLicenseFamilyArray61);
        org.junit.Assert.assertTrue("'" + boolean63 + "' != '" + false + "'", boolean63 == false);
        org.junit.Assert.assertTrue("'" + boolean65 + "' != '" + true + "'", boolean65 == true);
        org.junit.Assert.assertNotNull(strSpliterator66);
        org.junit.Assert.assertTrue("'" + int67 + "' != '" + 7 + "'", int67 == 7);
        org.junit.Assert.assertTrue("'" + format68 + "' != '" + org.apache.rat.configuration.Format.XML + "'", format68.equals(org.apache.rat.configuration.Format.XML));
        org.junit.Assert.assertNotNull(licenseReader69);
        org.junit.Assert.assertNotNull(matcherReader70);
        org.junit.Assert.assertNotNull(licenseReader71);
        org.junit.Assert.assertNotNull(iLicenseFamilySet72);
        org.junit.Assert.assertTrue("'" + boolean73 + "' != '" + true + "'", boolean73 == true);
    }

    @Test
    public void test14581() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest29.test14581");
        org.apache.rat.analysis.matchers.FullTextMatcher fullTextMatcher2 = new org.apache.rat.analysis.matchers.FullTextMatcher("notice");
        boolean boolean4 = fullTextMatcher2.doMatch("2953E6CB-20A5-4DCF-A9F5-85C51CC8C635");
        java.lang.String str5 = fullTextMatcher2.getId();
        fullTextMatcher2.reset();
        org.apache.rat.analysis.matchers.NotMatcher notMatcher7 = new org.apache.rat.analysis.matchers.NotMatcher("http://org/apache/rat/meta-data#HeaderSample", (org.apache.rat.analysis.IHeaderMatcher) fullTextMatcher2);
        org.apache.rat.analysis.IHeaderMatcher.State state9 = notMatcher7.matches("a3b9f6f5-22c8-487e-8289-73eb5482e732");
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
// flaky:         org.junit.Assert.assertEquals("'" + str5 + "' != '" + "a342f59d-9131-4fc4-bb11-48fa5de4a7cb" + "'", str5, "a342f59d-9131-4fc4-bb11-48fa5de4a7cb");
        org.junit.Assert.assertTrue("'" + state9 + "' != '" + org.apache.rat.analysis.IHeaderMatcher.State.i + "'", state9.equals(org.apache.rat.analysis.IHeaderMatcher.State.i));
    }

    @Test
    public void test14582() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest29.test14582");
        org.apache.rat.utils.DefaultLog defaultLog0 = org.apache.rat.utils.DefaultLog.INSTANCE;
        org.apache.rat.annotation.ApacheV2LicenseAppender apacheV2LicenseAppender1 = new org.apache.rat.annotation.ApacheV2LicenseAppender((org.apache.rat.utils.Log) defaultLog0);
        org.apache.rat.utils.Log log2 = null;
        org.apache.rat.ReportConfiguration reportConfiguration3 = new org.apache.rat.ReportConfiguration(log2);
        org.apache.rat.report.claim.ClaimStatistic claimStatistic4 = org.apache.rat.Reporter.report(reportConfiguration3);
        org.apache.rat.utils.Log log5 = null;
        org.apache.rat.ReportConfiguration reportConfiguration6 = new org.apache.rat.ReportConfiguration(log5);
        org.apache.rat.report.claim.ClaimStatistic claimStatistic7 = org.apache.rat.Reporter.report(reportConfiguration6);
        org.apache.rat.utils.ReportingSet.Options options8 = org.apache.rat.utils.ReportingSet.Options.OVERWRITE;
        reportConfiguration6.licenseDuplicateOption(options8);
        reportConfiguration3.familyDuplicateOption(options8);
        org.apache.commons.io.function.IOSupplier<java.io.PrintWriter> printWriterIOSupplier11 = reportConfiguration3.getWriter();
        org.apache.rat.utils.Log log12 = null;
        org.apache.rat.ReportConfiguration reportConfiguration13 = new org.apache.rat.ReportConfiguration(log12);
        reportConfiguration13.addApprovedLicenseCategory(".cvsignore");
        org.apache.rat.utils.Log.Level level16 = org.apache.rat.utils.Log.Level.ERROR;
        reportConfiguration13.logFamilyCollisions(level16);
        reportConfiguration3.logFamilyCollisions(level16);
        org.apache.rat.Defaults.Builder builder19 = org.apache.rat.Defaults.builder();
        org.apache.rat.Defaults.Builder builder20 = builder19.noDefault();
        defaultLog0.log(level16, (java.lang.Object) builder19);
        org.apache.rat.Defaults.Builder builder22 = builder19.noDefault();
        org.apache.rat.Defaults.Builder builder24 = builder22.remove("Copyright Builder: s:021187d7-27c2-4fd9-bc74-8cc00413ee52 e: o:null");
        java.io.File file25 = null;
        // The following exception was thrown during execution in test generation
        try {
            org.apache.rat.Defaults.Builder builder26 = builder24.add(file25);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(defaultLog0);
        org.junit.Assert.assertNull(claimStatistic4);
        org.junit.Assert.assertNull(claimStatistic7);
        org.junit.Assert.assertTrue("'" + options8 + "' != '" + org.apache.rat.utils.ReportingSet.Options.OVERWRITE + "'", options8.equals(org.apache.rat.utils.ReportingSet.Options.OVERWRITE));
        org.junit.Assert.assertNotNull(printWriterIOSupplier11);
        org.junit.Assert.assertTrue("'" + level16 + "' != '" + org.apache.rat.utils.Log.Level.ERROR + "'", level16.equals(org.apache.rat.utils.Log.Level.ERROR));
        org.junit.Assert.assertNotNull(builder19);
        org.junit.Assert.assertNotNull(builder20);
        org.junit.Assert.assertNotNull(builder22);
        org.junit.Assert.assertNotNull(builder24);
    }

    @Test
    public void test14583() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest29.test14583");
        org.apache.rat.utils.DefaultLog defaultLog0 = org.apache.rat.utils.DefaultLog.INSTANCE;
        org.apache.rat.configuration.builders.AllBuilder allBuilder1 = new org.apache.rat.configuration.builders.AllBuilder();
        org.apache.rat.configuration.builders.MatcherRefBuilder matcherRefBuilder2 = org.apache.rat.analysis.IHeaderMatcher.Builder.matcherRef();
        boolean boolean3 = matcherRefBuilder2.hasId();
        java.lang.String str4 = matcherRefBuilder2.toString();
        org.apache.rat.configuration.builders.AnyBuilder anyBuilder5 = org.apache.rat.analysis.IHeaderMatcher.Builder.any();
        org.apache.rat.configuration.builders.NotBuilder notBuilder6 = new org.apache.rat.configuration.builders.NotBuilder();
        java.lang.String str7 = notBuilder6.toString();
        org.apache.rat.configuration.builders.MatcherRefBuilder matcherRefBuilder8 = org.apache.rat.analysis.IHeaderMatcher.Builder.matcherRef();
        boolean boolean9 = matcherRefBuilder8.hasId();
        java.util.Map<java.lang.String, org.apache.rat.analysis.IHeaderMatcher> strMap10 = null;
        org.apache.rat.configuration.builders.MatcherRefBuilder matcherRefBuilder11 = matcherRefBuilder8.setMatchers(strMap10);
        org.apache.rat.configuration.builders.AllBuilder allBuilder12 = new org.apache.rat.configuration.builders.AllBuilder();
        org.apache.rat.configuration.builders.CopyrightBuilder copyrightBuilder13 = org.apache.rat.analysis.IHeaderMatcher.Builder.copyright();
        org.apache.rat.configuration.builders.CopyrightBuilder copyrightBuilder15 = copyrightBuilder13.setStart("OASIS");
        java.lang.String str16 = copyrightBuilder13.toString();
        org.apache.rat.configuration.builders.CopyrightBuilder copyrightBuilder18 = copyrightBuilder13.setStart("223f0aba-15d4-49e9-901e-5740c137aebf");
        org.apache.rat.configuration.builders.MatcherRefBuilder matcherRefBuilder19 = org.apache.rat.analysis.IHeaderMatcher.Builder.matcherRef();
        boolean boolean20 = matcherRefBuilder19.hasId();
        org.apache.rat.configuration.builders.CopyrightBuilder copyrightBuilder21 = org.apache.rat.analysis.IHeaderMatcher.Builder.copyright();
        org.apache.rat.configuration.builders.CopyrightBuilder copyrightBuilder23 = copyrightBuilder21.setStart("OASIS");
        java.lang.String str24 = copyrightBuilder21.toString();
        org.apache.rat.configuration.builders.CopyrightBuilder copyrightBuilder26 = copyrightBuilder21.setStart("223f0aba-15d4-49e9-901e-5740c137aebf");
        org.apache.rat.configuration.builders.CopyrightBuilder copyrightBuilder27 = org.apache.rat.analysis.IHeaderMatcher.Builder.copyright();
        org.apache.rat.configuration.builders.CopyrightBuilder copyrightBuilder28 = org.apache.rat.analysis.IHeaderMatcher.Builder.copyright();
        java.lang.String str29 = copyrightBuilder28.toString();
        org.apache.rat.configuration.builders.CopyrightBuilder copyrightBuilder31 = copyrightBuilder28.setEnd(".cvsignore");
        boolean boolean32 = copyrightBuilder28.hasId();
        org.apache.rat.configuration.builders.CopyrightBuilder copyrightBuilder33 = org.apache.rat.analysis.IHeaderMatcher.Builder.copyright();
        java.lang.String str34 = copyrightBuilder33.toString();
        org.apache.rat.configuration.builders.CopyrightBuilder copyrightBuilder36 = copyrightBuilder33.setEnd(".cvsignore");
        boolean boolean37 = copyrightBuilder33.hasId();
        java.lang.String str38 = copyrightBuilder33.toString();
        org.apache.rat.configuration.builders.CopyrightBuilder copyrightBuilder39 = org.apache.rat.analysis.IHeaderMatcher.Builder.copyright();
        org.apache.rat.configuration.builders.CopyrightBuilder copyrightBuilder41 = copyrightBuilder39.setStart("OASIS");
        org.apache.rat.configuration.builders.AnyBuilder anyBuilder42 = org.apache.rat.analysis.IHeaderMatcher.Builder.any();
        org.apache.rat.configuration.builders.MatcherRefBuilder matcherRefBuilder43 = org.apache.rat.analysis.IHeaderMatcher.Builder.matcherRef();
        boolean boolean44 = matcherRefBuilder43.hasId();
        java.util.Map<java.lang.String, org.apache.rat.analysis.IHeaderMatcher> strMap45 = null;
        org.apache.rat.configuration.builders.MatcherRefBuilder matcherRefBuilder46 = matcherRefBuilder43.setMatchers(strMap45);
        org.apache.rat.configuration.builders.CopyrightBuilder copyrightBuilder47 = org.apache.rat.analysis.IHeaderMatcher.Builder.copyright();
        org.apache.rat.configuration.builders.MatcherRefBuilder matcherRefBuilder48 = org.apache.rat.analysis.IHeaderMatcher.Builder.matcherRef();
        boolean boolean49 = matcherRefBuilder48.hasId();
        java.lang.String str50 = matcherRefBuilder48.toString();
        java.util.Map<java.lang.String, org.apache.rat.analysis.IHeaderMatcher> strMap51 = null;
        org.apache.rat.configuration.builders.MatcherRefBuilder matcherRefBuilder52 = matcherRefBuilder48.setMatchers(strMap51);
        org.apache.rat.analysis.IHeaderMatcher.Builder[] builderArray53 = new org.apache.rat.analysis.IHeaderMatcher.Builder[] { matcherRefBuilder8, allBuilder12, copyrightBuilder18, matcherRefBuilder19, copyrightBuilder21, copyrightBuilder27, copyrightBuilder28, copyrightBuilder33, copyrightBuilder39, anyBuilder42, matcherRefBuilder43, copyrightBuilder47, matcherRefBuilder48 };
        java.util.ArrayList<org.apache.rat.analysis.IHeaderMatcher.Builder> builderList54 = new java.util.ArrayList<org.apache.rat.analysis.IHeaderMatcher.Builder>();
        boolean boolean55 = java.util.Collections.addAll((java.util.Collection<org.apache.rat.analysis.IHeaderMatcher.Builder>) builderList54, builderArray53);
        org.apache.rat.configuration.builders.AbstractBuilder abstractBuilder56 = notBuilder6.add((java.util.Collection<org.apache.rat.analysis.IHeaderMatcher.Builder>) builderList54);
        org.apache.rat.configuration.builders.MatcherRefBuilder matcherRefBuilder57 = new org.apache.rat.configuration.builders.MatcherRefBuilder();
        org.apache.rat.analysis.IHeaderMatcher.Builder[] builderArray58 = new org.apache.rat.analysis.IHeaderMatcher.Builder[] { matcherRefBuilder2, anyBuilder5, notBuilder6, matcherRefBuilder57 };
        java.util.ArrayList<org.apache.rat.analysis.IHeaderMatcher.Builder> builderList59 = new java.util.ArrayList<org.apache.rat.analysis.IHeaderMatcher.Builder>();
        boolean boolean60 = java.util.Collections.addAll((java.util.Collection<org.apache.rat.analysis.IHeaderMatcher.Builder>) builderList59, builderArray58);
        org.apache.rat.configuration.builders.AbstractBuilder abstractBuilder61 = allBuilder1.add((java.util.Collection<org.apache.rat.analysis.IHeaderMatcher.Builder>) builderList59);
        defaultLog0.info((java.lang.Object) allBuilder1);
        org.apache.rat.ReportConfiguration reportConfiguration63 = new org.apache.rat.ReportConfiguration((org.apache.rat.utils.Log) defaultLog0);
        org.apache.rat.utils.Log log64 = null;
        org.apache.rat.ReportConfiguration reportConfiguration65 = new org.apache.rat.ReportConfiguration(log64);
        reportConfiguration65.addApprovedLicenseCategory(".cvsignore");
        org.apache.rat.utils.Log.Level level68 = org.apache.rat.utils.Log.Level.ERROR;
        reportConfiguration65.logFamilyCollisions(level68);
        defaultLog0.setLevel(level68);
        org.apache.rat.ReportConfiguration reportConfiguration71 = new org.apache.rat.ReportConfiguration((org.apache.rat.utils.Log) defaultLog0);
        reportConfiguration71.addApprovedLicenseCategory("58515");
        org.apache.rat.report.IReportable iReportable74 = reportConfiguration71.getReportable();
        org.junit.Assert.assertNotNull(defaultLog0);
        org.junit.Assert.assertNotNull(matcherRefBuilder2);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "MathcerRefBuilder: null" + "'", str4, "MathcerRefBuilder: null");
        org.junit.Assert.assertNotNull(anyBuilder5);
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "NotBuilder: null" + "'", str7, "NotBuilder: null");
        org.junit.Assert.assertNotNull(matcherRefBuilder8);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertNotNull(matcherRefBuilder11);
        org.junit.Assert.assertNotNull(copyrightBuilder13);
        org.junit.Assert.assertNotNull(copyrightBuilder15);
        org.junit.Assert.assertEquals("'" + str16 + "' != '" + "Copyright Builder: s:OASIS e:null o:null" + "'", str16, "Copyright Builder: s:OASIS e:null o:null");
        org.junit.Assert.assertNotNull(copyrightBuilder18);
        org.junit.Assert.assertNotNull(matcherRefBuilder19);
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + false + "'", boolean20 == false);
        org.junit.Assert.assertNotNull(copyrightBuilder21);
        org.junit.Assert.assertNotNull(copyrightBuilder23);
        org.junit.Assert.assertEquals("'" + str24 + "' != '" + "Copyright Builder: s:OASIS e:null o:null" + "'", str24, "Copyright Builder: s:OASIS e:null o:null");
        org.junit.Assert.assertNotNull(copyrightBuilder26);
        org.junit.Assert.assertNotNull(copyrightBuilder27);
        org.junit.Assert.assertNotNull(copyrightBuilder28);
        org.junit.Assert.assertEquals("'" + str29 + "' != '" + "Copyright Builder: s:null e:null o:null" + "'", str29, "Copyright Builder: s:null e:null o:null");
        org.junit.Assert.assertNotNull(copyrightBuilder31);
        org.junit.Assert.assertTrue("'" + boolean32 + "' != '" + false + "'", boolean32 == false);
        org.junit.Assert.assertNotNull(copyrightBuilder33);
        org.junit.Assert.assertEquals("'" + str34 + "' != '" + "Copyright Builder: s:null e:null o:null" + "'", str34, "Copyright Builder: s:null e:null o:null");
        org.junit.Assert.assertNotNull(copyrightBuilder36);
        org.junit.Assert.assertTrue("'" + boolean37 + "' != '" + false + "'", boolean37 == false);
        org.junit.Assert.assertEquals("'" + str38 + "' != '" + "Copyright Builder: s:null e:.cvsignore o:null" + "'", str38, "Copyright Builder: s:null e:.cvsignore o:null");
        org.junit.Assert.assertNotNull(copyrightBuilder39);
        org.junit.Assert.assertNotNull(copyrightBuilder41);
        org.junit.Assert.assertNotNull(anyBuilder42);
        org.junit.Assert.assertNotNull(matcherRefBuilder43);
        org.junit.Assert.assertTrue("'" + boolean44 + "' != '" + false + "'", boolean44 == false);
        org.junit.Assert.assertNotNull(matcherRefBuilder46);
        org.junit.Assert.assertNotNull(copyrightBuilder47);
        org.junit.Assert.assertNotNull(matcherRefBuilder48);
        org.junit.Assert.assertTrue("'" + boolean49 + "' != '" + false + "'", boolean49 == false);
        org.junit.Assert.assertEquals("'" + str50 + "' != '" + "MathcerRefBuilder: null" + "'", str50, "MathcerRefBuilder: null");
        org.junit.Assert.assertNotNull(matcherRefBuilder52);
        org.junit.Assert.assertNotNull(builderArray53);
        org.junit.Assert.assertTrue("'" + boolean55 + "' != '" + true + "'", boolean55 == true);
        org.junit.Assert.assertNotNull(abstractBuilder56);
        org.junit.Assert.assertNotNull(builderArray58);
        org.junit.Assert.assertTrue("'" + boolean60 + "' != '" + true + "'", boolean60 == true);
        org.junit.Assert.assertNotNull(abstractBuilder61);
        org.junit.Assert.assertTrue("'" + level68 + "' != '" + org.apache.rat.utils.Log.Level.ERROR + "'", level68.equals(org.apache.rat.utils.Log.Level.ERROR));
        org.junit.Assert.assertNull(iReportable74);
    }

    @Test
    public void test14584() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest29.test14584");
        org.apache.rat.analysis.matchers.FullTextMatcher fullTextMatcher3 = new org.apache.rat.analysis.matchers.FullTextMatcher("http://org/apache/rat/meta-data", "Apache License Version 2.0");
        org.apache.rat.analysis.matchers.NotMatcher notMatcher4 = new org.apache.rat.analysis.matchers.NotMatcher((org.apache.rat.analysis.IHeaderMatcher) fullTextMatcher3);
        org.apache.rat.analysis.IHeaderMatcher.State state6 = notMatcher4.matches("Apache License Version 2.0");
        org.apache.rat.analysis.IHeaderMatcher.State state8 = notMatcher4.matches("90663eff-7ed8-41bd-85a8-e8f189198bc6");
        org.apache.rat.analysis.matchers.NotMatcher notMatcher9 = new org.apache.rat.analysis.matchers.NotMatcher("58c3174c-fc6b-4541-afe9-d85151f37797", (org.apache.rat.analysis.IHeaderMatcher) notMatcher4);
        org.apache.rat.analysis.IHeaderMatcher.State state11 = notMatcher4.matches("c5cfce34-49e3-4912-a548-9776e14cea08");
        org.junit.Assert.assertTrue("'" + state6 + "' != '" + org.apache.rat.analysis.IHeaderMatcher.State.f + "'", state6.equals(org.apache.rat.analysis.IHeaderMatcher.State.f));
        org.junit.Assert.assertTrue("'" + state8 + "' != '" + org.apache.rat.analysis.IHeaderMatcher.State.f + "'", state8.equals(org.apache.rat.analysis.IHeaderMatcher.State.f));
        org.junit.Assert.assertTrue("'" + state11 + "' != '" + org.apache.rat.analysis.IHeaderMatcher.State.f + "'", state11.equals(org.apache.rat.analysis.IHeaderMatcher.State.f));
    }

    @Test
    public void test14585() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest29.test14585");
        java.lang.String[] strArray5 = new java.lang.String[] { "http://org/apache/rat/meta-data#LicenseFamilyCategory", "Datum [ name ='http://org/apache/rat/meta-data#LicenseFamilyCategory',value ='GPL1  ']", "MANIFEST.MF", "AllBuilder:", "The MIT License" };
        org.apache.rat.utils.ReportingSet<java.lang.String> strSet6 = new org.apache.rat.utils.ReportingSet<java.lang.String>();
        boolean boolean7 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strSet6, strArray5);
        boolean boolean9 = strSet6.addIfNotPresent("http://org/apache/rat/meta-data#LicenseFamilyName");
        java.util.Iterator<java.lang.String> strItor10 = strSet6.iterator();
        java.lang.Object[] objArray11 = strSet6.toArray();
        org.apache.rat.utils.ReportingSet.Options options12 = null;
        org.apache.rat.utils.ReportingSet<java.lang.String> strSet13 = strSet6.setDuplicateOption(options12);
        java.util.SortedSet<org.apache.rat.license.ILicenseFamily> iLicenseFamilySet14 = org.apache.rat.license.LicenseFamilySetFactory.emptyLicenseFamilySet();
        boolean boolean15 = strSet6.removeAll((java.util.Collection<org.apache.rat.license.ILicenseFamily>) iLicenseFamilySet14);
        strSet6.clear();
        boolean boolean17 = strSet6.isEmpty();
        org.apache.rat.utils.Log log18 = null;
        org.apache.rat.ReportConfiguration reportConfiguration19 = new org.apache.rat.ReportConfiguration(log18);
        org.apache.commons.io.function.IOSupplier<java.io.OutputStream> outputStreamIOSupplier20 = reportConfiguration19.getOutput();
        org.apache.commons.io.filefilter.IOFileFilter iOFileFilter21 = reportConfiguration19.getDirectoryFilter();
        org.apache.rat.utils.Log log22 = null;
        org.apache.rat.ReportConfiguration reportConfiguration23 = new org.apache.rat.ReportConfiguration(log22);
        reportConfiguration23.addApprovedLicenseCategory(".cvsignore");
        org.apache.rat.utils.Log log26 = null;
        org.apache.rat.ReportConfiguration reportConfiguration27 = new org.apache.rat.ReportConfiguration(log26);
        java.io.FilenameFilter filenameFilter28 = reportConfiguration27.getInputFileFilter();
        org.apache.rat.license.LicenseSetFactory.LicenseFilter licenseFilter29 = org.apache.rat.license.LicenseSetFactory.LicenseFilter.all;
        java.util.SortedSet<org.apache.rat.license.ILicense> iLicenseSet30 = reportConfiguration27.getLicenses(licenseFilter29);
        reportConfiguration23.addLicensesIfNotPresent((java.util.Collection<org.apache.rat.license.ILicense>) iLicenseSet30);
        java.io.FilenameFilter filenameFilter32 = reportConfiguration23.getInputFileFilter();
        org.apache.rat.utils.Log log33 = null;
        org.apache.rat.ReportConfiguration reportConfiguration34 = new org.apache.rat.ReportConfiguration(log33);
        java.io.FilenameFilter filenameFilter35 = reportConfiguration34.getInputFileFilter();
        org.apache.rat.license.LicenseSetFactory.LicenseFilter licenseFilter36 = org.apache.rat.license.LicenseSetFactory.LicenseFilter.all;
        java.util.SortedSet<org.apache.rat.license.ILicense> iLicenseSet37 = reportConfiguration34.getLicenses(licenseFilter36);
        org.apache.rat.config.AddLicenseHeaders addLicenseHeaders38 = org.apache.rat.config.AddLicenseHeaders.FALSE;
        reportConfiguration34.setAddLicenseHeaders(addLicenseHeaders38);
        org.apache.rat.utils.Log log40 = null;
        org.apache.rat.ReportConfiguration reportConfiguration41 = new org.apache.rat.ReportConfiguration(log40);
        org.apache.rat.report.claim.ClaimStatistic claimStatistic42 = org.apache.rat.Reporter.report(reportConfiguration41);
        org.apache.rat.license.LicenseSetFactory.LicenseFilter licenseFilter43 = org.apache.rat.license.LicenseSetFactory.LicenseFilter.all;
        org.apache.rat.Reporter.listLicenses(reportConfiguration41, licenseFilter43);
        org.apache.rat.Reporter.listLicenses(reportConfiguration34, licenseFilter43);
        org.apache.rat.utils.Log log46 = null;
        org.apache.rat.ReportConfiguration reportConfiguration47 = new org.apache.rat.ReportConfiguration(log46);
        java.io.FilenameFilter filenameFilter48 = reportConfiguration47.getInputFileFilter();
        org.apache.rat.license.LicenseSetFactory.LicenseFilter licenseFilter49 = org.apache.rat.license.LicenseSetFactory.LicenseFilter.all;
        java.util.SortedSet<org.apache.rat.license.ILicense> iLicenseSet50 = reportConfiguration47.getLicenses(licenseFilter49);
        org.apache.rat.config.AddLicenseHeaders addLicenseHeaders51 = org.apache.rat.config.AddLicenseHeaders.FALSE;
        reportConfiguration47.setAddLicenseHeaders(addLicenseHeaders51);
        org.apache.rat.utils.Log log53 = null;
        org.apache.rat.ReportConfiguration reportConfiguration54 = new org.apache.rat.ReportConfiguration(log53);
        org.apache.rat.report.claim.ClaimStatistic claimStatistic55 = org.apache.rat.Reporter.report(reportConfiguration54);
        org.apache.rat.license.LicenseSetFactory.LicenseFilter licenseFilter56 = org.apache.rat.license.LicenseSetFactory.LicenseFilter.all;
        org.apache.rat.Reporter.listLicenses(reportConfiguration54, licenseFilter56);
        org.apache.rat.Reporter.listLicenses(reportConfiguration47, licenseFilter56);
        java.util.SortedSet<org.apache.rat.license.ILicenseFamily> iLicenseFamilySet59 = reportConfiguration34.getLicenseFamilies(licenseFilter56);
        org.apache.rat.Reporter.listLicenseFamilies(reportConfiguration23, licenseFilter56);
        java.util.SortedSet<org.apache.rat.license.ILicenseFamily> iLicenseFamilySet61 = reportConfiguration19.getLicenseFamilies(licenseFilter56);
        org.apache.rat.policy.DefaultPolicy defaultPolicy62 = new org.apache.rat.policy.DefaultPolicy((java.util.Collection<org.apache.rat.license.ILicenseFamily>) iLicenseFamilySet61);
        org.apache.rat.api.Document document63 = null;
        defaultPolicy62.analyse(document63);
        org.apache.rat.api.Document document65 = null;
        defaultPolicy62.analyse(document65);
        java.util.SortedSet<org.apache.rat.license.ILicenseFamily> iLicenseFamilySet67 = defaultPolicy62.getApprovedLicenseNames();
        boolean boolean68 = strSet6.retainAll((java.util.Collection<org.apache.rat.license.ILicenseFamily>) iLicenseFamilySet67);
        org.junit.Assert.assertNotNull(strArray5);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + true + "'", boolean7 == true);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + true + "'", boolean9 == true);
        org.junit.Assert.assertNotNull(strItor10);
        org.junit.Assert.assertNotNull(objArray11);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray11), "[AllBuilder:, Datum [ name ='http://org/apache/rat/meta-data#LicenseFamilyCategory',value ='GPL1  '], MANIFEST.MF, The MIT License, http://org/apache/rat/meta-data#LicenseFamilyCategory, http://org/apache/rat/meta-data#LicenseFamilyName]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray11), "[AllBuilder:, Datum [ name ='http://org/apache/rat/meta-data#LicenseFamilyCategory',value ='GPL1  '], MANIFEST.MF, The MIT License, http://org/apache/rat/meta-data#LicenseFamilyCategory, http://org/apache/rat/meta-data#LicenseFamilyName]");
        org.junit.Assert.assertNotNull(strSet13);
        org.junit.Assert.assertNotNull(iLicenseFamilySet14);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + false + "'", boolean15 == false);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + true + "'", boolean17 == true);
        org.junit.Assert.assertNotNull(outputStreamIOSupplier20);
        org.junit.Assert.assertNotNull(iOFileFilter21);
        org.junit.Assert.assertNull(filenameFilter28);
        org.junit.Assert.assertTrue("'" + licenseFilter29 + "' != '" + org.apache.rat.license.LicenseSetFactory.LicenseFilter.all + "'", licenseFilter29.equals(org.apache.rat.license.LicenseSetFactory.LicenseFilter.all));
        org.junit.Assert.assertNotNull(iLicenseSet30);
        org.junit.Assert.assertNull(filenameFilter32);
        org.junit.Assert.assertNull(filenameFilter35);
        org.junit.Assert.assertTrue("'" + licenseFilter36 + "' != '" + org.apache.rat.license.LicenseSetFactory.LicenseFilter.all + "'", licenseFilter36.equals(org.apache.rat.license.LicenseSetFactory.LicenseFilter.all));
        org.junit.Assert.assertNotNull(iLicenseSet37);
        org.junit.Assert.assertTrue("'" + addLicenseHeaders38 + "' != '" + org.apache.rat.config.AddLicenseHeaders.FALSE + "'", addLicenseHeaders38.equals(org.apache.rat.config.AddLicenseHeaders.FALSE));
        org.junit.Assert.assertNull(claimStatistic42);
        org.junit.Assert.assertTrue("'" + licenseFilter43 + "' != '" + org.apache.rat.license.LicenseSetFactory.LicenseFilter.all + "'", licenseFilter43.equals(org.apache.rat.license.LicenseSetFactory.LicenseFilter.all));
        org.junit.Assert.assertNull(filenameFilter48);
        org.junit.Assert.assertTrue("'" + licenseFilter49 + "' != '" + org.apache.rat.license.LicenseSetFactory.LicenseFilter.all + "'", licenseFilter49.equals(org.apache.rat.license.LicenseSetFactory.LicenseFilter.all));
        org.junit.Assert.assertNotNull(iLicenseSet50);
        org.junit.Assert.assertTrue("'" + addLicenseHeaders51 + "' != '" + org.apache.rat.config.AddLicenseHeaders.FALSE + "'", addLicenseHeaders51.equals(org.apache.rat.config.AddLicenseHeaders.FALSE));
        org.junit.Assert.assertNull(claimStatistic55);
        org.junit.Assert.assertTrue("'" + licenseFilter56 + "' != '" + org.apache.rat.license.LicenseSetFactory.LicenseFilter.all + "'", licenseFilter56.equals(org.apache.rat.license.LicenseSetFactory.LicenseFilter.all));
        org.junit.Assert.assertNotNull(iLicenseFamilySet59);
        org.junit.Assert.assertNotNull(iLicenseFamilySet61);
        org.junit.Assert.assertNotNull(iLicenseFamilySet67);
        org.junit.Assert.assertTrue("'" + boolean68 + "' != '" + false + "'", boolean68 == false);
    }

    @Test
    public void test14586() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest29.test14586");
        org.apache.rat.license.ILicense.Builder builder0 = org.apache.rat.license.ILicense.builder();
        org.apache.rat.license.ILicense.Builder builder2 = builder0.setLicenseFamilyCategory("");
        org.apache.rat.license.ILicense.Builder builder4 = builder2.setDerivedFrom("GEN  ");
        org.apache.rat.license.ILicense.Builder builder6 = builder4.setId("DOJO ");
        org.apache.rat.license.ILicense.Builder builder8 = builder6.setName("GPL3 ");
        org.apache.rat.license.ILicense.Builder builder10 = builder6.setName("?????");
        org.apache.rat.license.ILicense.Builder builder12 = builder10.setName("GNU GENERAL PUBLIC LICENSE, VERSION 2");
        org.apache.rat.license.ILicense.Builder builder14 = builder10.setId("ANYBUILDER:");
        org.apache.rat.license.ILicense.Builder builder16 = builder10.setName("PLAIN");
        org.apache.rat.license.ILicense.Builder builder18 = builder16.setNotes("a1d7a6cd-e548-4846-82aa-06426863977c");
        org.junit.Assert.assertNotNull(builder0);
        org.junit.Assert.assertNotNull(builder2);
        org.junit.Assert.assertNotNull(builder4);
        org.junit.Assert.assertNotNull(builder6);
        org.junit.Assert.assertNotNull(builder8);
        org.junit.Assert.assertNotNull(builder10);
        org.junit.Assert.assertNotNull(builder12);
        org.junit.Assert.assertNotNull(builder14);
        org.junit.Assert.assertNotNull(builder16);
        org.junit.Assert.assertNotNull(builder18);
    }

    @Test
    public void test14587() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest29.test14587");
        org.apache.rat.api.MetaData metaData0 = new org.apache.rat.api.MetaData();
        java.lang.String str2 = metaData0.value("COMMON DEVELOPMENT AND DISTRIBUTION LICENSE Version 1.0");
        java.lang.String str4 = metaData0.value("W3C Document Copyright");
        boolean boolean6 = metaData0.clear("hi!");
        java.lang.String str8 = metaData0.value("COMMON DEVELOPMENT AND DISTRIBUTION LICENSE Version 1.0");
        java.lang.String str10 = metaData0.value("58515fd1-71f9-42a1-b033-b509624129a7");
        org.apache.rat.api.MetaData.Datum datum11 = org.apache.rat.api.MetaData.RAT_LICENSE_FAMILY_CATEGORY_DATUM_GPL2;
        metaData0.set(datum11);
        org.apache.rat.api.MetaData.Datum datum14 = metaData0.get("AL   ");
        boolean boolean16 = metaData0.clear("TextBuilder: SpdxBuilder: null");
        org.apache.rat.api.MetaData.Datum datum18 = metaData0.get("MathcerRefBuilder: 58515fd1-71f9-42a1-b033-b509624129a7");
        org.apache.rat.utils.Log log19 = null;
        org.apache.rat.ReportConfiguration reportConfiguration20 = new org.apache.rat.ReportConfiguration(log19);
        java.io.FilenameFilter filenameFilter21 = reportConfiguration20.getInputFileFilter();
        org.apache.rat.license.LicenseSetFactory.LicenseFilter licenseFilter22 = org.apache.rat.license.LicenseSetFactory.LicenseFilter.all;
        java.util.SortedSet<org.apache.rat.license.ILicense> iLicenseSet23 = reportConfiguration20.getLicenses(licenseFilter22);
        org.apache.rat.config.AddLicenseHeaders addLicenseHeaders24 = org.apache.rat.config.AddLicenseHeaders.FALSE;
        reportConfiguration20.setAddLicenseHeaders(addLicenseHeaders24);
        org.apache.rat.utils.Log log26 = null;
        org.apache.rat.ReportConfiguration reportConfiguration27 = new org.apache.rat.ReportConfiguration(log26);
        org.apache.rat.report.claim.ClaimStatistic claimStatistic28 = org.apache.rat.Reporter.report(reportConfiguration27);
        org.apache.rat.license.LicenseSetFactory.LicenseFilter licenseFilter29 = org.apache.rat.license.LicenseSetFactory.LicenseFilter.all;
        org.apache.rat.Reporter.listLicenses(reportConfiguration27, licenseFilter29);
        org.apache.rat.Reporter.listLicenses(reportConfiguration20, licenseFilter29);
        org.apache.rat.utils.Log log32 = null;
        org.apache.rat.ReportConfiguration reportConfiguration33 = new org.apache.rat.ReportConfiguration(log32);
        java.io.FilenameFilter filenameFilter34 = reportConfiguration33.getInputFileFilter();
        org.apache.rat.license.LicenseSetFactory.LicenseFilter licenseFilter35 = org.apache.rat.license.LicenseSetFactory.LicenseFilter.all;
        java.util.SortedSet<org.apache.rat.license.ILicense> iLicenseSet36 = reportConfiguration33.getLicenses(licenseFilter35);
        org.apache.rat.config.AddLicenseHeaders addLicenseHeaders37 = org.apache.rat.config.AddLicenseHeaders.FALSE;
        reportConfiguration33.setAddLicenseHeaders(addLicenseHeaders37);
        org.apache.rat.utils.Log log39 = null;
        org.apache.rat.ReportConfiguration reportConfiguration40 = new org.apache.rat.ReportConfiguration(log39);
        org.apache.rat.report.claim.ClaimStatistic claimStatistic41 = org.apache.rat.Reporter.report(reportConfiguration40);
        org.apache.rat.license.LicenseSetFactory.LicenseFilter licenseFilter42 = org.apache.rat.license.LicenseSetFactory.LicenseFilter.all;
        org.apache.rat.Reporter.listLicenses(reportConfiguration40, licenseFilter42);
        org.apache.rat.Reporter.listLicenses(reportConfiguration33, licenseFilter42);
        org.apache.rat.Reporter.listLicenses(reportConfiguration20, licenseFilter42);
        java.io.FilenameFilter filenameFilter46 = reportConfiguration20.getInputFileFilter();
        reportConfiguration20.setStyleReport(false);
        org.apache.rat.report.IReportable iReportable49 = null;
        reportConfiguration20.setReportable(iReportable49);
        org.apache.rat.Defaults.Builder builder52 = org.apache.rat.Defaults.builder();
        org.apache.rat.Defaults defaults53 = builder52.build();
        org.apache.rat.utils.Log log54 = null;
        org.apache.rat.ReportConfiguration reportConfiguration55 = new org.apache.rat.ReportConfiguration(log54);
        java.io.FilenameFilter filenameFilter56 = reportConfiguration55.getInputFileFilter();
        org.apache.rat.license.LicenseSetFactory.LicenseFilter licenseFilter57 = org.apache.rat.license.LicenseSetFactory.LicenseFilter.all;
        java.util.SortedSet<org.apache.rat.license.ILicense> iLicenseSet58 = reportConfiguration55.getLicenses(licenseFilter57);
        org.apache.rat.config.AddLicenseHeaders addLicenseHeaders59 = org.apache.rat.config.AddLicenseHeaders.FALSE;
        reportConfiguration55.setAddLicenseHeaders(addLicenseHeaders59);
        org.apache.rat.utils.Log log61 = null;
        org.apache.rat.ReportConfiguration reportConfiguration62 = new org.apache.rat.ReportConfiguration(log61);
        org.apache.rat.report.claim.ClaimStatistic claimStatistic63 = org.apache.rat.Reporter.report(reportConfiguration62);
        org.apache.rat.license.LicenseSetFactory.LicenseFilter licenseFilter64 = org.apache.rat.license.LicenseSetFactory.LicenseFilter.all;
        org.apache.rat.Reporter.listLicenses(reportConfiguration62, licenseFilter64);
        org.apache.rat.Reporter.listLicenses(reportConfiguration55, licenseFilter64);
        org.apache.rat.utils.Log log67 = null;
        org.apache.rat.ReportConfiguration reportConfiguration68 = new org.apache.rat.ReportConfiguration(log67);
        java.io.FilenameFilter filenameFilter69 = reportConfiguration68.getInputFileFilter();
        org.apache.rat.license.LicenseSetFactory.LicenseFilter licenseFilter70 = org.apache.rat.license.LicenseSetFactory.LicenseFilter.all;
        java.util.SortedSet<org.apache.rat.license.ILicense> iLicenseSet71 = reportConfiguration68.getLicenses(licenseFilter70);
        org.apache.rat.config.AddLicenseHeaders addLicenseHeaders72 = org.apache.rat.config.AddLicenseHeaders.FALSE;
        reportConfiguration68.setAddLicenseHeaders(addLicenseHeaders72);
        org.apache.rat.utils.Log log74 = null;
        org.apache.rat.ReportConfiguration reportConfiguration75 = new org.apache.rat.ReportConfiguration(log74);
        org.apache.rat.report.claim.ClaimStatistic claimStatistic76 = org.apache.rat.Reporter.report(reportConfiguration75);
        org.apache.rat.license.LicenseSetFactory.LicenseFilter licenseFilter77 = org.apache.rat.license.LicenseSetFactory.LicenseFilter.all;
        org.apache.rat.Reporter.listLicenses(reportConfiguration75, licenseFilter77);
        org.apache.rat.Reporter.listLicenses(reportConfiguration68, licenseFilter77);
        java.util.SortedSet<org.apache.rat.license.ILicenseFamily> iLicenseFamilySet80 = reportConfiguration55.getLicenseFamilies(licenseFilter77);
        java.util.SortedSet<org.apache.rat.license.ILicense> iLicenseSet81 = defaults53.getLicenses(licenseFilter77);
        org.apache.rat.utils.ReportingSet<org.apache.rat.license.ILicense> iLicenseSet82 = new org.apache.rat.utils.ReportingSet<org.apache.rat.license.ILicense>(iLicenseSet81);
        org.apache.rat.license.ILicense iLicense83 = org.apache.rat.license.LicenseSetFactory.search("TMF", iLicenseSet81);
        reportConfiguration20.addLicense(iLicense83);
        java.lang.String str85 = iLicense83.derivedFrom();
        org.apache.rat.license.ILicenseFamily iLicenseFamily86 = iLicense83.getLicenseFamily();
        org.apache.rat.license.ILicenseFamily iLicenseFamily87 = iLicense83.getLicenseFamily();
        java.lang.String str88 = iLicense83.getName();
        java.lang.String str89 = iLicense83.getNotes();
        metaData0.reportOnLicense(iLicense83);
        java.lang.String str92 = metaData0.value("A80AAD6C-340E-4343-88DF-EFE4FDBF9C47");
        org.junit.Assert.assertNull(str2);
        org.junit.Assert.assertNull(str4);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertNull(str8);
        org.junit.Assert.assertNull(str10);
        org.junit.Assert.assertNotNull(datum11);
        org.junit.Assert.assertNull(datum14);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
        org.junit.Assert.assertNull(datum18);
        org.junit.Assert.assertNull(filenameFilter21);
        org.junit.Assert.assertTrue("'" + licenseFilter22 + "' != '" + org.apache.rat.license.LicenseSetFactory.LicenseFilter.all + "'", licenseFilter22.equals(org.apache.rat.license.LicenseSetFactory.LicenseFilter.all));
        org.junit.Assert.assertNotNull(iLicenseSet23);
        org.junit.Assert.assertTrue("'" + addLicenseHeaders24 + "' != '" + org.apache.rat.config.AddLicenseHeaders.FALSE + "'", addLicenseHeaders24.equals(org.apache.rat.config.AddLicenseHeaders.FALSE));
        org.junit.Assert.assertNull(claimStatistic28);
        org.junit.Assert.assertTrue("'" + licenseFilter29 + "' != '" + org.apache.rat.license.LicenseSetFactory.LicenseFilter.all + "'", licenseFilter29.equals(org.apache.rat.license.LicenseSetFactory.LicenseFilter.all));
        org.junit.Assert.assertNull(filenameFilter34);
        org.junit.Assert.assertTrue("'" + licenseFilter35 + "' != '" + org.apache.rat.license.LicenseSetFactory.LicenseFilter.all + "'", licenseFilter35.equals(org.apache.rat.license.LicenseSetFactory.LicenseFilter.all));
        org.junit.Assert.assertNotNull(iLicenseSet36);
        org.junit.Assert.assertTrue("'" + addLicenseHeaders37 + "' != '" + org.apache.rat.config.AddLicenseHeaders.FALSE + "'", addLicenseHeaders37.equals(org.apache.rat.config.AddLicenseHeaders.FALSE));
        org.junit.Assert.assertNull(claimStatistic41);
        org.junit.Assert.assertTrue("'" + licenseFilter42 + "' != '" + org.apache.rat.license.LicenseSetFactory.LicenseFilter.all + "'", licenseFilter42.equals(org.apache.rat.license.LicenseSetFactory.LicenseFilter.all));
        org.junit.Assert.assertNull(filenameFilter46);
        org.junit.Assert.assertNotNull(builder52);
        org.junit.Assert.assertNotNull(defaults53);
        org.junit.Assert.assertNull(filenameFilter56);
        org.junit.Assert.assertTrue("'" + licenseFilter57 + "' != '" + org.apache.rat.license.LicenseSetFactory.LicenseFilter.all + "'", licenseFilter57.equals(org.apache.rat.license.LicenseSetFactory.LicenseFilter.all));
        org.junit.Assert.assertNotNull(iLicenseSet58);
        org.junit.Assert.assertTrue("'" + addLicenseHeaders59 + "' != '" + org.apache.rat.config.AddLicenseHeaders.FALSE + "'", addLicenseHeaders59.equals(org.apache.rat.config.AddLicenseHeaders.FALSE));
        org.junit.Assert.assertNull(claimStatistic63);
        org.junit.Assert.assertTrue("'" + licenseFilter64 + "' != '" + org.apache.rat.license.LicenseSetFactory.LicenseFilter.all + "'", licenseFilter64.equals(org.apache.rat.license.LicenseSetFactory.LicenseFilter.all));
        org.junit.Assert.assertNull(filenameFilter69);
        org.junit.Assert.assertTrue("'" + licenseFilter70 + "' != '" + org.apache.rat.license.LicenseSetFactory.LicenseFilter.all + "'", licenseFilter70.equals(org.apache.rat.license.LicenseSetFactory.LicenseFilter.all));
        org.junit.Assert.assertNotNull(iLicenseSet71);
        org.junit.Assert.assertTrue("'" + addLicenseHeaders72 + "' != '" + org.apache.rat.config.AddLicenseHeaders.FALSE + "'", addLicenseHeaders72.equals(org.apache.rat.config.AddLicenseHeaders.FALSE));
        org.junit.Assert.assertNull(claimStatistic76);
        org.junit.Assert.assertTrue("'" + licenseFilter77 + "' != '" + org.apache.rat.license.LicenseSetFactory.LicenseFilter.all + "'", licenseFilter77.equals(org.apache.rat.license.LicenseSetFactory.LicenseFilter.all));
        org.junit.Assert.assertNotNull(iLicenseFamilySet80);
        org.junit.Assert.assertNotNull(iLicenseSet81);
        org.junit.Assert.assertNotNull(iLicense83);
        org.junit.Assert.assertEquals("'" + str85 + "' != '" + "BSD-3" + "'", str85, "BSD-3");
        org.junit.Assert.assertNotNull(iLicenseFamily86);
        org.junit.Assert.assertNotNull(iLicenseFamily87);
        org.junit.Assert.assertEquals("'" + str88 + "' != '" + "The Telemanagement Forum License" + "'", str88, "The Telemanagement Forum License");
        org.junit.Assert.assertNull(str89);
        org.junit.Assert.assertNull(str92);
    }

    @Test
    public void test14588() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest29.test14588");
        org.apache.rat.utils.DefaultLog defaultLog0 = org.apache.rat.utils.DefaultLog.INSTANCE;
        org.apache.rat.license.ILicense.Builder builder1 = org.apache.rat.license.ILicense.builder();
        org.apache.rat.license.ILicense.Builder builder3 = builder1.setLicenseFamilyCategory("");
        org.apache.rat.analysis.matchers.CopyrightMatcher copyrightMatcher7 = new org.apache.rat.analysis.matchers.CopyrightMatcher("", "GPL1 ", "hi!");
        org.apache.rat.analysis.IHeaderMatcher.State state8 = copyrightMatcher7.finalizeState();
        org.apache.rat.license.ILicense.Builder builder9 = builder3.setMatcher((org.apache.rat.analysis.IHeaderMatcher) copyrightMatcher7);
        org.apache.rat.license.ILicense.Builder builder11 = builder9.setLicenseFamilyCategory("");
        defaultLog0.error((java.lang.Object) builder11);
        org.apache.rat.analysis.matchers.CopyrightMatcher copyrightMatcher16 = new org.apache.rat.analysis.matchers.CopyrightMatcher("", "GPL1 ", "hi!");
        copyrightMatcher16.reset();
        org.apache.rat.license.ILicense.Builder builder18 = builder11.setMatcher((org.apache.rat.analysis.IHeaderMatcher) copyrightMatcher16);
        org.apache.rat.configuration.builders.SpdxBuilder spdxBuilder19 = org.apache.rat.analysis.IHeaderMatcher.Builder.spdx();
        java.lang.String str20 = spdxBuilder19.toString();
        org.apache.rat.configuration.builders.SpdxBuilder spdxBuilder22 = spdxBuilder19.setName("ef7a8b13-64c3-4510-bb0c-dbf208e1e73f");
        org.apache.rat.license.ILicense.Builder builder23 = builder18.setMatcher((org.apache.rat.analysis.IHeaderMatcher.Builder) spdxBuilder19);
        org.apache.rat.license.ILicense.Builder builder25 = builder23.setName("DOJO ");
        org.apache.rat.license.ILicense.Builder builder27 = builder25.setLicenseFamilyCategory("RegexBuilder: http://org/apache/rat/meta-data#LicenseFamilyName");
        org.apache.rat.configuration.builders.MatcherRefBuilder matcherRefBuilder28 = org.apache.rat.analysis.IHeaderMatcher.Builder.matcherRef();
        boolean boolean29 = matcherRefBuilder28.hasId();
        java.util.Map<java.lang.String, org.apache.rat.analysis.IHeaderMatcher> strMap30 = null;
        org.apache.rat.configuration.builders.MatcherRefBuilder matcherRefBuilder31 = matcherRefBuilder28.setMatchers(strMap30);
        java.util.Map<java.lang.String, org.apache.rat.analysis.IHeaderMatcher> strMap32 = null;
        org.apache.rat.configuration.builders.MatcherRefBuilder matcherRefBuilder33 = matcherRefBuilder31.setMatchers(strMap32);
        org.apache.rat.license.ILicense.Builder builder34 = builder27.setMatcher((org.apache.rat.analysis.IHeaderMatcher.Builder) matcherRefBuilder31);
        org.apache.rat.license.ILicense.Builder builder36 = builder34.setLicenseFamilyCategory("Datum");
        org.apache.rat.configuration.builders.CopyrightBuilder copyrightBuilder37 = org.apache.rat.analysis.IHeaderMatcher.Builder.copyright();
        java.lang.String str38 = copyrightBuilder37.toString();
        boolean boolean39 = copyrightBuilder37.hasId();
        org.apache.rat.configuration.builders.CopyrightBuilder copyrightBuilder41 = copyrightBuilder37.setEnd("6486879ffc814b57aec7c4c77d540c30");
        org.apache.rat.license.ILicense.Builder builder42 = builder34.setMatcher((org.apache.rat.analysis.IHeaderMatcher.Builder) copyrightBuilder37);
        org.apache.rat.configuration.builders.MatcherRefBuilder matcherRefBuilder43 = org.apache.rat.analysis.IHeaderMatcher.Builder.matcherRef();
        boolean boolean44 = matcherRefBuilder43.hasId();
        java.lang.String str45 = matcherRefBuilder43.toString();
        java.util.Map<java.lang.String, org.apache.rat.analysis.IHeaderMatcher> strMap46 = null;
        org.apache.rat.configuration.builders.MatcherRefBuilder matcherRefBuilder47 = matcherRefBuilder43.setMatchers(strMap46);
        java.util.Map<java.lang.String, org.apache.rat.analysis.IHeaderMatcher> strMap48 = null;
        org.apache.rat.configuration.builders.MatcherRefBuilder matcherRefBuilder49 = matcherRefBuilder43.setMatchers(strMap48);
        java.util.Map<java.lang.String, org.apache.rat.analysis.IHeaderMatcher> strMap50 = null;
        org.apache.rat.configuration.builders.MatcherRefBuilder matcherRefBuilder51 = matcherRefBuilder43.setMatchers(strMap50);
        java.util.Map<java.lang.String, org.apache.rat.analysis.IHeaderMatcher> strMap52 = null;
        org.apache.rat.configuration.builders.MatcherRefBuilder matcherRefBuilder53 = matcherRefBuilder51.setMatchers(strMap52);
        java.util.Map<java.lang.String, org.apache.rat.analysis.IHeaderMatcher> strMap54 = null;
        org.apache.rat.configuration.builders.MatcherRefBuilder matcherRefBuilder55 = matcherRefBuilder53.setMatchers(strMap54);
        org.apache.rat.license.ILicense.Builder builder56 = builder42.setMatcher((org.apache.rat.analysis.IHeaderMatcher.Builder) matcherRefBuilder55);
        org.apache.rat.configuration.builders.MatcherRefBuilder matcherRefBuilder58 = matcherRefBuilder55.setRefId("SpdxBuilder: a1abad46-6a98-44f8-aa20-7839919a8270");
        org.junit.Assert.assertNotNull(defaultLog0);
        org.junit.Assert.assertNotNull(builder1);
        org.junit.Assert.assertNotNull(builder3);
        org.junit.Assert.assertTrue("'" + state8 + "' != '" + org.apache.rat.analysis.IHeaderMatcher.State.f + "'", state8.equals(org.apache.rat.analysis.IHeaderMatcher.State.f));
        org.junit.Assert.assertNotNull(builder9);
        org.junit.Assert.assertNotNull(builder11);
        org.junit.Assert.assertNotNull(builder18);
        org.junit.Assert.assertNotNull(spdxBuilder19);
        org.junit.Assert.assertEquals("'" + str20 + "' != '" + "SpdxBuilder: null" + "'", str20, "SpdxBuilder: null");
        org.junit.Assert.assertNotNull(spdxBuilder22);
        org.junit.Assert.assertNotNull(builder23);
        org.junit.Assert.assertNotNull(builder25);
        org.junit.Assert.assertNotNull(builder27);
        org.junit.Assert.assertNotNull(matcherRefBuilder28);
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + false + "'", boolean29 == false);
        org.junit.Assert.assertNotNull(matcherRefBuilder31);
        org.junit.Assert.assertNotNull(matcherRefBuilder33);
        org.junit.Assert.assertNotNull(builder34);
        org.junit.Assert.assertNotNull(builder36);
        org.junit.Assert.assertNotNull(copyrightBuilder37);
        org.junit.Assert.assertEquals("'" + str38 + "' != '" + "Copyright Builder: s:null e:null o:null" + "'", str38, "Copyright Builder: s:null e:null o:null");
        org.junit.Assert.assertTrue("'" + boolean39 + "' != '" + false + "'", boolean39 == false);
        org.junit.Assert.assertNotNull(copyrightBuilder41);
        org.junit.Assert.assertNotNull(builder42);
        org.junit.Assert.assertNotNull(matcherRefBuilder43);
        org.junit.Assert.assertTrue("'" + boolean44 + "' != '" + false + "'", boolean44 == false);
        org.junit.Assert.assertEquals("'" + str45 + "' != '" + "MathcerRefBuilder: null" + "'", str45, "MathcerRefBuilder: null");
        org.junit.Assert.assertNotNull(matcherRefBuilder47);
        org.junit.Assert.assertNotNull(matcherRefBuilder49);
        org.junit.Assert.assertNotNull(matcherRefBuilder51);
        org.junit.Assert.assertNotNull(matcherRefBuilder53);
        org.junit.Assert.assertNotNull(matcherRefBuilder55);
        org.junit.Assert.assertNotNull(builder56);
        org.junit.Assert.assertNotNull(matcherRefBuilder58);
    }

    @Test
    public void test14589() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest29.test14589");
        org.apache.rat.Defaults.Builder builder0 = org.apache.rat.Defaults.builder();
        org.apache.rat.Defaults defaults1 = builder0.build();
        org.apache.rat.Defaults.Builder builder2 = builder0.noDefault();
        org.apache.rat.Defaults.Builder builder4 = builder0.remove("AllBuilder:");
        org.apache.rat.Defaults.Builder builder6 = builder0.remove("GNU General Public License, version 2");
        org.apache.rat.Defaults.Builder builder8 = builder0.remove("NotBuilder: MathcerRefBuilder: null");
        org.apache.rat.Defaults.Builder builder10 = builder0.remove("MathcerRefBuilder: t true");
        java.net.URL uRL11 = null;
        // The following exception was thrown during execution in test generation
        try {
            org.apache.rat.Defaults.Builder builder12 = builder0.add(uRL11);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(builder0);
        org.junit.Assert.assertNotNull(defaults1);
        org.junit.Assert.assertNotNull(builder2);
        org.junit.Assert.assertNotNull(builder4);
        org.junit.Assert.assertNotNull(builder6);
        org.junit.Assert.assertNotNull(builder8);
        org.junit.Assert.assertNotNull(builder10);
    }

    @Test
    public void test14590() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest29.test14590");
        org.apache.rat.license.ILicense.Builder builder0 = new org.apache.rat.license.ILicense.Builder();
        org.apache.rat.configuration.builders.AllBuilder allBuilder1 = org.apache.rat.analysis.IHeaderMatcher.Builder.all();
        org.apache.rat.license.ILicense.Builder builder2 = builder0.setMatcher((org.apache.rat.analysis.IHeaderMatcher.Builder) allBuilder1);
        org.apache.rat.analysis.IHeaderMatcher iHeaderMatcher3 = allBuilder1.build();
        org.apache.rat.configuration.builders.AnyBuilder anyBuilder4 = org.apache.rat.analysis.IHeaderMatcher.Builder.any();
        org.apache.rat.analysis.IHeaderMatcher iHeaderMatcher5 = anyBuilder4.build();
        org.apache.rat.analysis.IHeaderMatcher iHeaderMatcher6 = anyBuilder4.build();
        java.lang.String str7 = anyBuilder4.toString();
        org.apache.rat.document.ToNameTransformer toNameTransformer8 = new org.apache.rat.document.ToNameTransformer();
        org.apache.rat.configuration.builders.AllBuilder allBuilder9 = org.apache.rat.analysis.IHeaderMatcher.Builder.all();
        java.util.List<org.apache.rat.analysis.IHeaderMatcher> iHeaderMatcherList10 = allBuilder9.getChildren();
        org.apache.rat.analysis.IHeaderMatcher iHeaderMatcher11 = allBuilder9.build();
        java.util.List<org.apache.rat.analysis.IHeaderMatcher> iHeaderMatcherList12 = allBuilder9.getChildren();
        java.lang.Object obj13 = toNameTransformer8.transform((java.lang.Object) allBuilder9);
        org.apache.rat.configuration.builders.SpdxBuilder spdxBuilder14 = org.apache.rat.analysis.IHeaderMatcher.Builder.spdx();
        java.lang.String str15 = spdxBuilder14.toString();
        org.apache.rat.configuration.builders.SpdxBuilder spdxBuilder17 = spdxBuilder14.setName("ef7a8b13-64c3-4510-bb0c-dbf208e1e73f");
        org.apache.rat.analysis.IHeaderMatcher iHeaderMatcher18 = spdxBuilder14.build();
        org.apache.rat.analysis.IHeaderMatcher iHeaderMatcher19 = spdxBuilder14.build();
        org.apache.rat.analysis.IHeaderMatcher iHeaderMatcher20 = spdxBuilder14.build();
        org.apache.rat.analysis.IHeaderMatcher iHeaderMatcher21 = spdxBuilder14.build();
        org.apache.rat.configuration.builders.SpdxBuilder spdxBuilder23 = spdxBuilder14.setName("7d01b1b3-e7b9-4f85-b3dd-e0334dea8844");
        org.apache.rat.configuration.builders.AbstractBuilder abstractBuilder24 = allBuilder9.add((org.apache.rat.analysis.IHeaderMatcher.Builder) spdxBuilder14);
        org.apache.rat.configuration.builders.AnyBuilder anyBuilder25 = org.apache.rat.analysis.IHeaderMatcher.Builder.any();
        java.lang.String str26 = anyBuilder25.toString();
        java.util.List<org.apache.rat.analysis.IHeaderMatcher> iHeaderMatcherList27 = anyBuilder25.getChildren();
        org.apache.rat.analysis.IHeaderMatcher iHeaderMatcher28 = anyBuilder25.build();
        org.apache.rat.analysis.IHeaderMatcher iHeaderMatcher29 = anyBuilder25.build();
        java.util.List<org.apache.rat.analysis.IHeaderMatcher> iHeaderMatcherList30 = anyBuilder25.getChildren();
        org.apache.rat.configuration.builders.NotBuilder notBuilder31 = new org.apache.rat.configuration.builders.NotBuilder();
        java.lang.String str32 = notBuilder31.toString();
        org.apache.rat.configuration.builders.MatcherRefBuilder matcherRefBuilder33 = org.apache.rat.analysis.IHeaderMatcher.Builder.matcherRef();
        boolean boolean34 = matcherRefBuilder33.hasId();
        java.util.Map<java.lang.String, org.apache.rat.analysis.IHeaderMatcher> strMap35 = null;
        org.apache.rat.configuration.builders.MatcherRefBuilder matcherRefBuilder36 = matcherRefBuilder33.setMatchers(strMap35);
        org.apache.rat.configuration.builders.AllBuilder allBuilder37 = new org.apache.rat.configuration.builders.AllBuilder();
        org.apache.rat.configuration.builders.CopyrightBuilder copyrightBuilder38 = org.apache.rat.analysis.IHeaderMatcher.Builder.copyright();
        org.apache.rat.configuration.builders.CopyrightBuilder copyrightBuilder40 = copyrightBuilder38.setStart("OASIS");
        java.lang.String str41 = copyrightBuilder38.toString();
        org.apache.rat.configuration.builders.CopyrightBuilder copyrightBuilder43 = copyrightBuilder38.setStart("223f0aba-15d4-49e9-901e-5740c137aebf");
        org.apache.rat.configuration.builders.MatcherRefBuilder matcherRefBuilder44 = org.apache.rat.analysis.IHeaderMatcher.Builder.matcherRef();
        boolean boolean45 = matcherRefBuilder44.hasId();
        org.apache.rat.configuration.builders.CopyrightBuilder copyrightBuilder46 = org.apache.rat.analysis.IHeaderMatcher.Builder.copyright();
        org.apache.rat.configuration.builders.CopyrightBuilder copyrightBuilder48 = copyrightBuilder46.setStart("OASIS");
        java.lang.String str49 = copyrightBuilder46.toString();
        org.apache.rat.configuration.builders.CopyrightBuilder copyrightBuilder51 = copyrightBuilder46.setStart("223f0aba-15d4-49e9-901e-5740c137aebf");
        org.apache.rat.configuration.builders.CopyrightBuilder copyrightBuilder52 = org.apache.rat.analysis.IHeaderMatcher.Builder.copyright();
        org.apache.rat.configuration.builders.CopyrightBuilder copyrightBuilder53 = org.apache.rat.analysis.IHeaderMatcher.Builder.copyright();
        java.lang.String str54 = copyrightBuilder53.toString();
        org.apache.rat.configuration.builders.CopyrightBuilder copyrightBuilder56 = copyrightBuilder53.setEnd(".cvsignore");
        boolean boolean57 = copyrightBuilder53.hasId();
        org.apache.rat.configuration.builders.CopyrightBuilder copyrightBuilder58 = org.apache.rat.analysis.IHeaderMatcher.Builder.copyright();
        java.lang.String str59 = copyrightBuilder58.toString();
        org.apache.rat.configuration.builders.CopyrightBuilder copyrightBuilder61 = copyrightBuilder58.setEnd(".cvsignore");
        boolean boolean62 = copyrightBuilder58.hasId();
        java.lang.String str63 = copyrightBuilder58.toString();
        org.apache.rat.configuration.builders.CopyrightBuilder copyrightBuilder64 = org.apache.rat.analysis.IHeaderMatcher.Builder.copyright();
        org.apache.rat.configuration.builders.CopyrightBuilder copyrightBuilder66 = copyrightBuilder64.setStart("OASIS");
        org.apache.rat.configuration.builders.AnyBuilder anyBuilder67 = org.apache.rat.analysis.IHeaderMatcher.Builder.any();
        org.apache.rat.configuration.builders.MatcherRefBuilder matcherRefBuilder68 = org.apache.rat.analysis.IHeaderMatcher.Builder.matcherRef();
        boolean boolean69 = matcherRefBuilder68.hasId();
        java.util.Map<java.lang.String, org.apache.rat.analysis.IHeaderMatcher> strMap70 = null;
        org.apache.rat.configuration.builders.MatcherRefBuilder matcherRefBuilder71 = matcherRefBuilder68.setMatchers(strMap70);
        org.apache.rat.configuration.builders.CopyrightBuilder copyrightBuilder72 = org.apache.rat.analysis.IHeaderMatcher.Builder.copyright();
        org.apache.rat.configuration.builders.MatcherRefBuilder matcherRefBuilder73 = org.apache.rat.analysis.IHeaderMatcher.Builder.matcherRef();
        boolean boolean74 = matcherRefBuilder73.hasId();
        java.lang.String str75 = matcherRefBuilder73.toString();
        java.util.Map<java.lang.String, org.apache.rat.analysis.IHeaderMatcher> strMap76 = null;
        org.apache.rat.configuration.builders.MatcherRefBuilder matcherRefBuilder77 = matcherRefBuilder73.setMatchers(strMap76);
        org.apache.rat.analysis.IHeaderMatcher.Builder[] builderArray78 = new org.apache.rat.analysis.IHeaderMatcher.Builder[] { matcherRefBuilder33, allBuilder37, copyrightBuilder43, matcherRefBuilder44, copyrightBuilder46, copyrightBuilder52, copyrightBuilder53, copyrightBuilder58, copyrightBuilder64, anyBuilder67, matcherRefBuilder68, copyrightBuilder72, matcherRefBuilder73 };
        java.util.ArrayList<org.apache.rat.analysis.IHeaderMatcher.Builder> builderList79 = new java.util.ArrayList<org.apache.rat.analysis.IHeaderMatcher.Builder>();
        boolean boolean80 = java.util.Collections.addAll((java.util.Collection<org.apache.rat.analysis.IHeaderMatcher.Builder>) builderList79, builderArray78);
        org.apache.rat.configuration.builders.AbstractBuilder abstractBuilder81 = notBuilder31.add((java.util.Collection<org.apache.rat.analysis.IHeaderMatcher.Builder>) builderList79);
        org.apache.rat.configuration.builders.AbstractBuilder abstractBuilder82 = anyBuilder25.add((java.util.Collection<org.apache.rat.analysis.IHeaderMatcher.Builder>) builderList79);
        org.apache.rat.configuration.builders.AbstractBuilder abstractBuilder83 = allBuilder9.add((java.util.Collection<org.apache.rat.analysis.IHeaderMatcher.Builder>) builderList79);
        org.apache.rat.configuration.builders.AbstractBuilder abstractBuilder84 = anyBuilder4.add((java.util.Collection<org.apache.rat.analysis.IHeaderMatcher.Builder>) builderList79);
        org.apache.rat.configuration.builders.AbstractBuilder abstractBuilder85 = allBuilder1.add((java.util.Collection<org.apache.rat.analysis.IHeaderMatcher.Builder>) builderList79);
        org.junit.Assert.assertNotNull(allBuilder1);
        org.junit.Assert.assertNotNull(builder2);
        org.junit.Assert.assertNotNull(iHeaderMatcher3);
        org.junit.Assert.assertNotNull(anyBuilder4);
        org.junit.Assert.assertNotNull(iHeaderMatcher5);
        org.junit.Assert.assertNotNull(iHeaderMatcher6);
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "AnyBuilder:" + "'", str7, "AnyBuilder:");
        org.junit.Assert.assertNotNull(allBuilder9);
        org.junit.Assert.assertNotNull(iHeaderMatcherList10);
        org.junit.Assert.assertNotNull(iHeaderMatcher11);
        org.junit.Assert.assertNotNull(iHeaderMatcherList12);
        org.junit.Assert.assertNull(obj13);
        org.junit.Assert.assertNotNull(spdxBuilder14);
        org.junit.Assert.assertEquals("'" + str15 + "' != '" + "SpdxBuilder: null" + "'", str15, "SpdxBuilder: null");
        org.junit.Assert.assertNotNull(spdxBuilder17);
        org.junit.Assert.assertNotNull(iHeaderMatcher18);
        org.junit.Assert.assertNotNull(iHeaderMatcher19);
        org.junit.Assert.assertNotNull(iHeaderMatcher20);
        org.junit.Assert.assertNotNull(iHeaderMatcher21);
        org.junit.Assert.assertNotNull(spdxBuilder23);
        org.junit.Assert.assertNotNull(abstractBuilder24);
        org.junit.Assert.assertNotNull(anyBuilder25);
        org.junit.Assert.assertEquals("'" + str26 + "' != '" + "AnyBuilder:" + "'", str26, "AnyBuilder:");
        org.junit.Assert.assertNotNull(iHeaderMatcherList27);
        org.junit.Assert.assertNotNull(iHeaderMatcher28);
        org.junit.Assert.assertNotNull(iHeaderMatcher29);
        org.junit.Assert.assertNotNull(iHeaderMatcherList30);
        org.junit.Assert.assertEquals("'" + str32 + "' != '" + "NotBuilder: null" + "'", str32, "NotBuilder: null");
        org.junit.Assert.assertNotNull(matcherRefBuilder33);
        org.junit.Assert.assertTrue("'" + boolean34 + "' != '" + false + "'", boolean34 == false);
        org.junit.Assert.assertNotNull(matcherRefBuilder36);
        org.junit.Assert.assertNotNull(copyrightBuilder38);
        org.junit.Assert.assertNotNull(copyrightBuilder40);
        org.junit.Assert.assertEquals("'" + str41 + "' != '" + "Copyright Builder: s:OASIS e:null o:null" + "'", str41, "Copyright Builder: s:OASIS e:null o:null");
        org.junit.Assert.assertNotNull(copyrightBuilder43);
        org.junit.Assert.assertNotNull(matcherRefBuilder44);
        org.junit.Assert.assertTrue("'" + boolean45 + "' != '" + false + "'", boolean45 == false);
        org.junit.Assert.assertNotNull(copyrightBuilder46);
        org.junit.Assert.assertNotNull(copyrightBuilder48);
        org.junit.Assert.assertEquals("'" + str49 + "' != '" + "Copyright Builder: s:OASIS e:null o:null" + "'", str49, "Copyright Builder: s:OASIS e:null o:null");
        org.junit.Assert.assertNotNull(copyrightBuilder51);
        org.junit.Assert.assertNotNull(copyrightBuilder52);
        org.junit.Assert.assertNotNull(copyrightBuilder53);
        org.junit.Assert.assertEquals("'" + str54 + "' != '" + "Copyright Builder: s:null e:null o:null" + "'", str54, "Copyright Builder: s:null e:null o:null");
        org.junit.Assert.assertNotNull(copyrightBuilder56);
        org.junit.Assert.assertTrue("'" + boolean57 + "' != '" + false + "'", boolean57 == false);
        org.junit.Assert.assertNotNull(copyrightBuilder58);
        org.junit.Assert.assertEquals("'" + str59 + "' != '" + "Copyright Builder: s:null e:null o:null" + "'", str59, "Copyright Builder: s:null e:null o:null");
        org.junit.Assert.assertNotNull(copyrightBuilder61);
        org.junit.Assert.assertTrue("'" + boolean62 + "' != '" + false + "'", boolean62 == false);
        org.junit.Assert.assertEquals("'" + str63 + "' != '" + "Copyright Builder: s:null e:.cvsignore o:null" + "'", str63, "Copyright Builder: s:null e:.cvsignore o:null");
        org.junit.Assert.assertNotNull(copyrightBuilder64);
        org.junit.Assert.assertNotNull(copyrightBuilder66);
        org.junit.Assert.assertNotNull(anyBuilder67);
        org.junit.Assert.assertNotNull(matcherRefBuilder68);
        org.junit.Assert.assertTrue("'" + boolean69 + "' != '" + false + "'", boolean69 == false);
        org.junit.Assert.assertNotNull(matcherRefBuilder71);
        org.junit.Assert.assertNotNull(copyrightBuilder72);
        org.junit.Assert.assertNotNull(matcherRefBuilder73);
        org.junit.Assert.assertTrue("'" + boolean74 + "' != '" + false + "'", boolean74 == false);
        org.junit.Assert.assertEquals("'" + str75 + "' != '" + "MathcerRefBuilder: null" + "'", str75, "MathcerRefBuilder: null");
        org.junit.Assert.assertNotNull(matcherRefBuilder77);
        org.junit.Assert.assertNotNull(builderArray78);
        org.junit.Assert.assertTrue("'" + boolean80 + "' != '" + true + "'", boolean80 == true);
        org.junit.Assert.assertNotNull(abstractBuilder81);
        org.junit.Assert.assertNotNull(abstractBuilder82);
        org.junit.Assert.assertNotNull(abstractBuilder83);
        org.junit.Assert.assertNotNull(abstractBuilder84);
        org.junit.Assert.assertNotNull(abstractBuilder85);
    }

    @Test
    public void test14591() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest29.test14591");
        org.apache.rat.report.claim.ClaimStatistic claimStatistic0 = new org.apache.rat.report.claim.ClaimStatistic();
        claimStatistic0.setNumUnApproved((int) (short) 10);
        java.util.Map<java.lang.String, java.lang.Integer> strMap3 = null;
        claimStatistic0.setDocumentCategoryMap(strMap3);
        claimStatistic0.setNumUnknown((int) ' ');
        claimStatistic0.setNumUnknown((int) (short) 10);
        java.util.Map<java.lang.String, java.lang.Integer> strMap9 = claimStatistic0.getLicenseFileCodeMap();
        java.util.Map<java.lang.String, java.lang.Integer> strMap10 = claimStatistic0.getLicenseFileNameMap();
        org.junit.Assert.assertNull(strMap9);
        org.junit.Assert.assertNull(strMap10);
    }

    @Test
    public void test14592() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest29.test14592");
        java.lang.String[] strArray5 = new java.lang.String[] { "http://org/apache/rat/meta-data#LicenseFamilyCategory", "Datum [ name ='http://org/apache/rat/meta-data#LicenseFamilyCategory',value ='GPL1  ']", "MANIFEST.MF", "AllBuilder:", "The MIT License" };
        org.apache.rat.utils.ReportingSet<java.lang.String> strSet6 = new org.apache.rat.utils.ReportingSet<java.lang.String>();
        boolean boolean7 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strSet6, strArray5);
        boolean boolean9 = strSet6.addIfNotPresent("http://org/apache/rat/meta-data#LicenseFamilyName");
        boolean boolean11 = strSet6.addIfNotPresent("ef7a8b13-64c3-4510-bb0c-dbf208e1e73f");
        org.apache.rat.utils.Log log12 = null;
        org.apache.rat.ReportConfiguration reportConfiguration13 = new org.apache.rat.ReportConfiguration(log12);
        org.apache.commons.io.function.IOSupplier<java.io.OutputStream> outputStreamIOSupplier14 = reportConfiguration13.getOutput();
        org.apache.commons.io.filefilter.IOFileFilter iOFileFilter15 = reportConfiguration13.getDirectoryFilter();
        org.apache.rat.utils.Log log16 = null;
        org.apache.rat.ReportConfiguration reportConfiguration17 = new org.apache.rat.ReportConfiguration(log16);
        reportConfiguration17.addApprovedLicenseCategory(".cvsignore");
        org.apache.rat.utils.Log log20 = null;
        org.apache.rat.ReportConfiguration reportConfiguration21 = new org.apache.rat.ReportConfiguration(log20);
        java.io.FilenameFilter filenameFilter22 = reportConfiguration21.getInputFileFilter();
        org.apache.rat.license.LicenseSetFactory.LicenseFilter licenseFilter23 = org.apache.rat.license.LicenseSetFactory.LicenseFilter.all;
        java.util.SortedSet<org.apache.rat.license.ILicense> iLicenseSet24 = reportConfiguration21.getLicenses(licenseFilter23);
        reportConfiguration17.addLicensesIfNotPresent((java.util.Collection<org.apache.rat.license.ILicense>) iLicenseSet24);
        java.io.FilenameFilter filenameFilter26 = reportConfiguration17.getInputFileFilter();
        org.apache.rat.utils.Log log27 = null;
        org.apache.rat.ReportConfiguration reportConfiguration28 = new org.apache.rat.ReportConfiguration(log27);
        java.io.FilenameFilter filenameFilter29 = reportConfiguration28.getInputFileFilter();
        org.apache.rat.license.LicenseSetFactory.LicenseFilter licenseFilter30 = org.apache.rat.license.LicenseSetFactory.LicenseFilter.all;
        java.util.SortedSet<org.apache.rat.license.ILicense> iLicenseSet31 = reportConfiguration28.getLicenses(licenseFilter30);
        org.apache.rat.config.AddLicenseHeaders addLicenseHeaders32 = org.apache.rat.config.AddLicenseHeaders.FALSE;
        reportConfiguration28.setAddLicenseHeaders(addLicenseHeaders32);
        org.apache.rat.utils.Log log34 = null;
        org.apache.rat.ReportConfiguration reportConfiguration35 = new org.apache.rat.ReportConfiguration(log34);
        org.apache.rat.report.claim.ClaimStatistic claimStatistic36 = org.apache.rat.Reporter.report(reportConfiguration35);
        org.apache.rat.license.LicenseSetFactory.LicenseFilter licenseFilter37 = org.apache.rat.license.LicenseSetFactory.LicenseFilter.all;
        org.apache.rat.Reporter.listLicenses(reportConfiguration35, licenseFilter37);
        org.apache.rat.Reporter.listLicenses(reportConfiguration28, licenseFilter37);
        org.apache.rat.utils.Log log40 = null;
        org.apache.rat.ReportConfiguration reportConfiguration41 = new org.apache.rat.ReportConfiguration(log40);
        java.io.FilenameFilter filenameFilter42 = reportConfiguration41.getInputFileFilter();
        org.apache.rat.license.LicenseSetFactory.LicenseFilter licenseFilter43 = org.apache.rat.license.LicenseSetFactory.LicenseFilter.all;
        java.util.SortedSet<org.apache.rat.license.ILicense> iLicenseSet44 = reportConfiguration41.getLicenses(licenseFilter43);
        org.apache.rat.config.AddLicenseHeaders addLicenseHeaders45 = org.apache.rat.config.AddLicenseHeaders.FALSE;
        reportConfiguration41.setAddLicenseHeaders(addLicenseHeaders45);
        org.apache.rat.utils.Log log47 = null;
        org.apache.rat.ReportConfiguration reportConfiguration48 = new org.apache.rat.ReportConfiguration(log47);
        org.apache.rat.report.claim.ClaimStatistic claimStatistic49 = org.apache.rat.Reporter.report(reportConfiguration48);
        org.apache.rat.license.LicenseSetFactory.LicenseFilter licenseFilter50 = org.apache.rat.license.LicenseSetFactory.LicenseFilter.all;
        org.apache.rat.Reporter.listLicenses(reportConfiguration48, licenseFilter50);
        org.apache.rat.Reporter.listLicenses(reportConfiguration41, licenseFilter50);
        java.util.SortedSet<org.apache.rat.license.ILicenseFamily> iLicenseFamilySet53 = reportConfiguration28.getLicenseFamilies(licenseFilter50);
        org.apache.rat.Reporter.listLicenseFamilies(reportConfiguration17, licenseFilter50);
        java.util.SortedSet<org.apache.rat.license.ILicenseFamily> iLicenseFamilySet55 = reportConfiguration13.getLicenseFamilies(licenseFilter50);
        org.apache.rat.policy.DefaultPolicy defaultPolicy56 = new org.apache.rat.policy.DefaultPolicy((java.util.Collection<org.apache.rat.license.ILicenseFamily>) iLicenseFamilySet55);
        boolean boolean57 = strSet6.retainAll((java.util.Collection<org.apache.rat.license.ILicenseFamily>) iLicenseFamilySet55);
        org.apache.rat.utils.ReportingSet<java.lang.String> strSet58 = new org.apache.rat.utils.ReportingSet<java.lang.String>();
        org.apache.rat.license.ILicense[] iLicenseArray59 = new org.apache.rat.license.ILicense[] {};
        java.util.TreeSet<org.apache.rat.license.ILicense> iLicenseSet60 = new java.util.TreeSet<org.apache.rat.license.ILicense>();
        boolean boolean61 = java.util.Collections.addAll((java.util.Collection<org.apache.rat.license.ILicense>) iLicenseSet60, iLicenseArray59);
        java.lang.String[] strArray74 = new java.lang.String[] { "GPL2 ", "GPL1 ", "notice", "http://org/apache/rat/meta-data#LicenseFamilyName", "notice", "GPL2 ", "http://org/apache/rat/meta-data#LicenseFamilyName", "", "GPL2 ", "", "GPL1 ", "hi!" };
        java.util.ArrayList<java.lang.String> strList75 = new java.util.ArrayList<java.lang.String>();
        boolean boolean76 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strList75, strArray74);
        org.apache.rat.license.LicenseSetFactory licenseSetFactory77 = new org.apache.rat.license.LicenseSetFactory((java.util.SortedSet<org.apache.rat.license.ILicense>) iLicenseSet60, (java.util.Collection<java.lang.String>) strList75);
        org.apache.rat.license.LicenseSetFactory.LicenseFilter licenseFilter78 = org.apache.rat.license.LicenseSetFactory.LicenseFilter.all;
        java.util.SortedSet<org.apache.rat.license.ILicenseFamily> iLicenseFamilySet79 = licenseSetFactory77.getLicenseFamilies(licenseFilter78);
        org.apache.rat.policy.DefaultPolicy defaultPolicy80 = new org.apache.rat.policy.DefaultPolicy((java.util.Collection<org.apache.rat.license.ILicenseFamily>) iLicenseFamilySet79);
        boolean boolean81 = strSet58.containsAll((java.util.Collection<org.apache.rat.license.ILicenseFamily>) iLicenseFamilySet79);
        java.lang.Object[] objArray82 = strSet58.toArray();
        org.apache.rat.utils.ReportingSet<java.lang.String> strSet84 = strSet58.tailSet("f7c80ac5-f6d7-4a47-993b-a27ea27d7efb");
        org.apache.rat.license.LicenseFamilySetFactory licenseFamilySetFactory85 = new org.apache.rat.license.LicenseFamilySetFactory(iLicenseFamilySet55, (java.util.Collection<java.lang.String>) strSet58);
        boolean boolean87 = strSet58.addIfNotPresent("848b009f-06b4-4f45-8a37-354dca5d046b");
        org.junit.Assert.assertNotNull(strArray5);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + true + "'", boolean7 == true);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + true + "'", boolean9 == true);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + true + "'", boolean11 == true);
        org.junit.Assert.assertNotNull(outputStreamIOSupplier14);
        org.junit.Assert.assertNotNull(iOFileFilter15);
        org.junit.Assert.assertNull(filenameFilter22);
        org.junit.Assert.assertTrue("'" + licenseFilter23 + "' != '" + org.apache.rat.license.LicenseSetFactory.LicenseFilter.all + "'", licenseFilter23.equals(org.apache.rat.license.LicenseSetFactory.LicenseFilter.all));
        org.junit.Assert.assertNotNull(iLicenseSet24);
        org.junit.Assert.assertNull(filenameFilter26);
        org.junit.Assert.assertNull(filenameFilter29);
        org.junit.Assert.assertTrue("'" + licenseFilter30 + "' != '" + org.apache.rat.license.LicenseSetFactory.LicenseFilter.all + "'", licenseFilter30.equals(org.apache.rat.license.LicenseSetFactory.LicenseFilter.all));
        org.junit.Assert.assertNotNull(iLicenseSet31);
        org.junit.Assert.assertTrue("'" + addLicenseHeaders32 + "' != '" + org.apache.rat.config.AddLicenseHeaders.FALSE + "'", addLicenseHeaders32.equals(org.apache.rat.config.AddLicenseHeaders.FALSE));
        org.junit.Assert.assertNull(claimStatistic36);
        org.junit.Assert.assertTrue("'" + licenseFilter37 + "' != '" + org.apache.rat.license.LicenseSetFactory.LicenseFilter.all + "'", licenseFilter37.equals(org.apache.rat.license.LicenseSetFactory.LicenseFilter.all));
        org.junit.Assert.assertNull(filenameFilter42);
        org.junit.Assert.assertTrue("'" + licenseFilter43 + "' != '" + org.apache.rat.license.LicenseSetFactory.LicenseFilter.all + "'", licenseFilter43.equals(org.apache.rat.license.LicenseSetFactory.LicenseFilter.all));
        org.junit.Assert.assertNotNull(iLicenseSet44);
        org.junit.Assert.assertTrue("'" + addLicenseHeaders45 + "' != '" + org.apache.rat.config.AddLicenseHeaders.FALSE + "'", addLicenseHeaders45.equals(org.apache.rat.config.AddLicenseHeaders.FALSE));
        org.junit.Assert.assertNull(claimStatistic49);
        org.junit.Assert.assertTrue("'" + licenseFilter50 + "' != '" + org.apache.rat.license.LicenseSetFactory.LicenseFilter.all + "'", licenseFilter50.equals(org.apache.rat.license.LicenseSetFactory.LicenseFilter.all));
        org.junit.Assert.assertNotNull(iLicenseFamilySet53);
        org.junit.Assert.assertNotNull(iLicenseFamilySet55);
        org.junit.Assert.assertTrue("'" + boolean57 + "' != '" + true + "'", boolean57 == true);
        org.junit.Assert.assertNotNull(iLicenseArray59);
        org.junit.Assert.assertTrue("'" + boolean61 + "' != '" + false + "'", boolean61 == false);
        org.junit.Assert.assertNotNull(strArray74);
        org.junit.Assert.assertTrue("'" + boolean76 + "' != '" + true + "'", boolean76 == true);
        org.junit.Assert.assertTrue("'" + licenseFilter78 + "' != '" + org.apache.rat.license.LicenseSetFactory.LicenseFilter.all + "'", licenseFilter78.equals(org.apache.rat.license.LicenseSetFactory.LicenseFilter.all));
        org.junit.Assert.assertNotNull(iLicenseFamilySet79);
        org.junit.Assert.assertTrue("'" + boolean81 + "' != '" + true + "'", boolean81 == true);
        org.junit.Assert.assertNotNull(objArray82);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray82), "[]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray82), "[]");
        org.junit.Assert.assertNotNull(strSet84);
        org.junit.Assert.assertTrue("'" + boolean87 + "' != '" + true + "'", boolean87 == true);
    }

    @Test
    public void test14593() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest29.test14593");
        java.lang.String str1 = org.apache.rat.analysis.matchers.FullTextMatcher.prune("72712f96-1d98-4589-8b3c-557ed1a823cb");
        org.junit.Assert.assertEquals("'" + str1 + "' != '" + "72712f961d9845898b3c557ed1a823cb" + "'", str1, "72712f961d9845898b3c557ed1a823cb");
    }

    @Test
    public void test14594() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest29.test14594");
        org.apache.rat.analysis.matchers.FullTextMatcher fullTextMatcher1 = new org.apache.rat.analysis.matchers.FullTextMatcher("17bfd5c7-2f9f-4f3d-bf66-58a0bed90bd9");
    }

    @Test
    public void test14595() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest29.test14595");
        org.apache.rat.utils.Log log0 = null;
        org.apache.rat.ReportConfiguration reportConfiguration1 = new org.apache.rat.ReportConfiguration(log0);
        org.apache.rat.report.claim.ClaimStatistic claimStatistic2 = org.apache.rat.Reporter.report(reportConfiguration1);
        org.apache.rat.report.IReportable iReportable3 = null;
        reportConfiguration1.setReportable(iReportable3);
        org.apache.rat.utils.Log log5 = null;
        org.apache.rat.ReportConfiguration reportConfiguration6 = new org.apache.rat.ReportConfiguration(log5);
        java.io.FilenameFilter filenameFilter7 = reportConfiguration6.getInputFileFilter();
        org.apache.rat.license.LicenseSetFactory.LicenseFilter licenseFilter8 = org.apache.rat.license.LicenseSetFactory.LicenseFilter.all;
        java.util.SortedSet<org.apache.rat.license.ILicense> iLicenseSet9 = reportConfiguration6.getLicenses(licenseFilter8);
        org.apache.rat.config.AddLicenseHeaders addLicenseHeaders10 = org.apache.rat.config.AddLicenseHeaders.FALSE;
        reportConfiguration6.setAddLicenseHeaders(addLicenseHeaders10);
        org.apache.rat.utils.Log log12 = null;
        org.apache.rat.ReportConfiguration reportConfiguration13 = new org.apache.rat.ReportConfiguration(log12);
        org.apache.rat.report.claim.ClaimStatistic claimStatistic14 = org.apache.rat.Reporter.report(reportConfiguration13);
        org.apache.rat.license.LicenseSetFactory.LicenseFilter licenseFilter15 = org.apache.rat.license.LicenseSetFactory.LicenseFilter.all;
        org.apache.rat.Reporter.listLicenses(reportConfiguration13, licenseFilter15);
        org.apache.rat.Reporter.listLicenses(reportConfiguration6, licenseFilter15);
        org.apache.rat.utils.Log log18 = null;
        org.apache.rat.ReportConfiguration reportConfiguration19 = new org.apache.rat.ReportConfiguration(log18);
        java.io.FilenameFilter filenameFilter20 = reportConfiguration19.getInputFileFilter();
        org.apache.rat.license.LicenseSetFactory.LicenseFilter licenseFilter21 = org.apache.rat.license.LicenseSetFactory.LicenseFilter.all;
        java.util.SortedSet<org.apache.rat.license.ILicense> iLicenseSet22 = reportConfiguration19.getLicenses(licenseFilter21);
        org.apache.rat.config.AddLicenseHeaders addLicenseHeaders23 = org.apache.rat.config.AddLicenseHeaders.FALSE;
        reportConfiguration19.setAddLicenseHeaders(addLicenseHeaders23);
        org.apache.rat.utils.Log log25 = null;
        org.apache.rat.ReportConfiguration reportConfiguration26 = new org.apache.rat.ReportConfiguration(log25);
        org.apache.rat.report.claim.ClaimStatistic claimStatistic27 = org.apache.rat.Reporter.report(reportConfiguration26);
        org.apache.rat.license.LicenseSetFactory.LicenseFilter licenseFilter28 = org.apache.rat.license.LicenseSetFactory.LicenseFilter.all;
        org.apache.rat.Reporter.listLicenses(reportConfiguration26, licenseFilter28);
        org.apache.rat.Reporter.listLicenses(reportConfiguration19, licenseFilter28);
        org.apache.rat.Reporter.listLicenses(reportConfiguration6, licenseFilter28);
        org.apache.rat.utils.Log log32 = null;
        org.apache.rat.ReportConfiguration reportConfiguration33 = new org.apache.rat.ReportConfiguration(log32);
        org.apache.commons.io.function.IOSupplier<java.io.OutputStream> outputStreamIOSupplier34 = reportConfiguration33.getOutput();
        reportConfiguration6.setOut(outputStreamIOSupplier34);
        org.apache.rat.utils.Log log36 = null;
        org.apache.rat.ReportConfiguration reportConfiguration37 = new org.apache.rat.ReportConfiguration(log36);
        org.apache.rat.report.claim.ClaimStatistic claimStatistic38 = org.apache.rat.Reporter.report(reportConfiguration37);
        org.apache.rat.utils.Log log39 = null;
        org.apache.rat.ReportConfiguration reportConfiguration40 = new org.apache.rat.ReportConfiguration(log39);
        org.apache.rat.report.claim.ClaimStatistic claimStatistic41 = org.apache.rat.Reporter.report(reportConfiguration40);
        org.apache.rat.utils.ReportingSet.Options options42 = org.apache.rat.utils.ReportingSet.Options.OVERWRITE;
        reportConfiguration40.licenseDuplicateOption(options42);
        reportConfiguration37.familyDuplicateOption(options42);
        reportConfiguration6.licenseDuplicateOption(options42);
        reportConfiguration1.familyDuplicateOption(options42);
        reportConfiguration1.setStyleReport(true);
        java.io.File file49 = null;
        // The following exception was thrown during execution in test generation
        try {
            reportConfiguration1.setStyleSheet(file49);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: styleSheet file should not be null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNull(claimStatistic2);
        org.junit.Assert.assertNull(filenameFilter7);
        org.junit.Assert.assertTrue("'" + licenseFilter8 + "' != '" + org.apache.rat.license.LicenseSetFactory.LicenseFilter.all + "'", licenseFilter8.equals(org.apache.rat.license.LicenseSetFactory.LicenseFilter.all));
        org.junit.Assert.assertNotNull(iLicenseSet9);
        org.junit.Assert.assertTrue("'" + addLicenseHeaders10 + "' != '" + org.apache.rat.config.AddLicenseHeaders.FALSE + "'", addLicenseHeaders10.equals(org.apache.rat.config.AddLicenseHeaders.FALSE));
        org.junit.Assert.assertNull(claimStatistic14);
        org.junit.Assert.assertTrue("'" + licenseFilter15 + "' != '" + org.apache.rat.license.LicenseSetFactory.LicenseFilter.all + "'", licenseFilter15.equals(org.apache.rat.license.LicenseSetFactory.LicenseFilter.all));
        org.junit.Assert.assertNull(filenameFilter20);
        org.junit.Assert.assertTrue("'" + licenseFilter21 + "' != '" + org.apache.rat.license.LicenseSetFactory.LicenseFilter.all + "'", licenseFilter21.equals(org.apache.rat.license.LicenseSetFactory.LicenseFilter.all));
        org.junit.Assert.assertNotNull(iLicenseSet22);
        org.junit.Assert.assertTrue("'" + addLicenseHeaders23 + "' != '" + org.apache.rat.config.AddLicenseHeaders.FALSE + "'", addLicenseHeaders23.equals(org.apache.rat.config.AddLicenseHeaders.FALSE));
        org.junit.Assert.assertNull(claimStatistic27);
        org.junit.Assert.assertTrue("'" + licenseFilter28 + "' != '" + org.apache.rat.license.LicenseSetFactory.LicenseFilter.all + "'", licenseFilter28.equals(org.apache.rat.license.LicenseSetFactory.LicenseFilter.all));
        org.junit.Assert.assertNotNull(outputStreamIOSupplier34);
        org.junit.Assert.assertNull(claimStatistic38);
        org.junit.Assert.assertNull(claimStatistic41);
        org.junit.Assert.assertTrue("'" + options42 + "' != '" + org.apache.rat.utils.ReportingSet.Options.OVERWRITE + "'", options42.equals(org.apache.rat.utils.ReportingSet.Options.OVERWRITE));
    }

    @Test
    public void test14596() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest29.test14596");
        java.io.Writer writer0 = null;
        org.apache.rat.report.xml.writer.impl.base.XmlWriter xmlWriter1 = new org.apache.rat.report.xml.writer.impl.base.XmlWriter(writer0);
        org.apache.rat.report.claim.impl.xml.SimpleXmlClaimReporter simpleXmlClaimReporter2 = new org.apache.rat.report.claim.impl.xml.SimpleXmlClaimReporter((org.apache.rat.report.xml.writer.IXmlWriter) xmlWriter1);
        org.apache.rat.report.claim.impl.xml.SimpleXmlClaimReporter simpleXmlClaimReporter3 = new org.apache.rat.report.claim.impl.xml.SimpleXmlClaimReporter((org.apache.rat.report.xml.writer.IXmlWriter) xmlWriter1);
        org.apache.rat.report.claim.impl.xml.SimpleXmlClaimReporter simpleXmlClaimReporter4 = new org.apache.rat.report.claim.impl.xml.SimpleXmlClaimReporter((org.apache.rat.report.xml.writer.IXmlWriter) xmlWriter1);
        org.apache.rat.report.claim.impl.xml.SimpleXmlClaimReporter simpleXmlClaimReporter5 = new org.apache.rat.report.claim.impl.xml.SimpleXmlClaimReporter((org.apache.rat.report.xml.writer.IXmlWriter) xmlWriter1);
        org.apache.rat.report.claim.impl.xml.SimpleXmlClaimReporter simpleXmlClaimReporter6 = new org.apache.rat.report.claim.impl.xml.SimpleXmlClaimReporter((org.apache.rat.report.xml.writer.IXmlWriter) xmlWriter1);
        org.apache.rat.report.claim.impl.xml.SimpleXmlClaimReporter simpleXmlClaimReporter7 = new org.apache.rat.report.claim.impl.xml.SimpleXmlClaimReporter((org.apache.rat.report.xml.writer.IXmlWriter) xmlWriter1);
        org.apache.rat.report.claim.impl.xml.SimpleXmlClaimReporter simpleXmlClaimReporter8 = new org.apache.rat.report.claim.impl.xml.SimpleXmlClaimReporter((org.apache.rat.report.xml.writer.IXmlWriter) xmlWriter1);
        org.apache.rat.report.claim.impl.xml.SimpleXmlClaimReporter simpleXmlClaimReporter9 = new org.apache.rat.report.claim.impl.xml.SimpleXmlClaimReporter((org.apache.rat.report.xml.writer.IXmlWriter) xmlWriter1);
        org.apache.rat.report.claim.impl.xml.SimpleXmlClaimReporter simpleXmlClaimReporter10 = new org.apache.rat.report.claim.impl.xml.SimpleXmlClaimReporter((org.apache.rat.report.xml.writer.IXmlWriter) xmlWriter1);
        org.apache.rat.report.claim.impl.xml.SimpleXmlClaimReporter simpleXmlClaimReporter11 = new org.apache.rat.report.claim.impl.xml.SimpleXmlClaimReporter((org.apache.rat.report.xml.writer.IXmlWriter) xmlWriter1);
        org.apache.rat.report.claim.impl.xml.SimpleXmlClaimReporter simpleXmlClaimReporter12 = new org.apache.rat.report.claim.impl.xml.SimpleXmlClaimReporter((org.apache.rat.report.xml.writer.IXmlWriter) xmlWriter1);
        org.apache.rat.report.claim.impl.xml.SimpleXmlClaimReporter simpleXmlClaimReporter13 = new org.apache.rat.report.claim.impl.xml.SimpleXmlClaimReporter((org.apache.rat.report.xml.writer.IXmlWriter) xmlWriter1);
        org.apache.rat.report.claim.impl.xml.SimpleXmlClaimReporter simpleXmlClaimReporter14 = new org.apache.rat.report.claim.impl.xml.SimpleXmlClaimReporter((org.apache.rat.report.xml.writer.IXmlWriter) xmlWriter1);
        org.apache.rat.report.claim.impl.xml.SimpleXmlClaimReporter simpleXmlClaimReporter15 = new org.apache.rat.report.claim.impl.xml.SimpleXmlClaimReporter((org.apache.rat.report.xml.writer.IXmlWriter) xmlWriter1);
        org.apache.rat.report.claim.impl.xml.SimpleXmlClaimReporter simpleXmlClaimReporter16 = new org.apache.rat.report.claim.impl.xml.SimpleXmlClaimReporter((org.apache.rat.report.xml.writer.IXmlWriter) xmlWriter1);
        org.apache.rat.report.claim.impl.xml.SimpleXmlClaimReporter simpleXmlClaimReporter17 = new org.apache.rat.report.claim.impl.xml.SimpleXmlClaimReporter((org.apache.rat.report.xml.writer.IXmlWriter) xmlWriter1);
        org.apache.rat.report.claim.impl.xml.SimpleXmlClaimReporter simpleXmlClaimReporter18 = new org.apache.rat.report.claim.impl.xml.SimpleXmlClaimReporter((org.apache.rat.report.xml.writer.IXmlWriter) xmlWriter1);
        org.apache.rat.report.claim.impl.xml.SimpleXmlClaimReporter simpleXmlClaimReporter19 = new org.apache.rat.report.claim.impl.xml.SimpleXmlClaimReporter((org.apache.rat.report.xml.writer.IXmlWriter) xmlWriter1);
        org.apache.rat.api.Document document20 = null;
        // The following exception was thrown during execution in test generation
        try {
            simpleXmlClaimReporter19.report(document20);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
    }

    @Test
    public void test14597() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest29.test14597");
        org.apache.rat.utils.DefaultLog defaultLog0 = org.apache.rat.utils.DefaultLog.INSTANCE;
        org.apache.rat.configuration.builders.AllBuilder allBuilder1 = new org.apache.rat.configuration.builders.AllBuilder();
        org.apache.rat.configuration.builders.MatcherRefBuilder matcherRefBuilder2 = org.apache.rat.analysis.IHeaderMatcher.Builder.matcherRef();
        boolean boolean3 = matcherRefBuilder2.hasId();
        java.lang.String str4 = matcherRefBuilder2.toString();
        org.apache.rat.configuration.builders.AnyBuilder anyBuilder5 = org.apache.rat.analysis.IHeaderMatcher.Builder.any();
        org.apache.rat.configuration.builders.NotBuilder notBuilder6 = new org.apache.rat.configuration.builders.NotBuilder();
        java.lang.String str7 = notBuilder6.toString();
        org.apache.rat.configuration.builders.MatcherRefBuilder matcherRefBuilder8 = org.apache.rat.analysis.IHeaderMatcher.Builder.matcherRef();
        boolean boolean9 = matcherRefBuilder8.hasId();
        java.util.Map<java.lang.String, org.apache.rat.analysis.IHeaderMatcher> strMap10 = null;
        org.apache.rat.configuration.builders.MatcherRefBuilder matcherRefBuilder11 = matcherRefBuilder8.setMatchers(strMap10);
        org.apache.rat.configuration.builders.AllBuilder allBuilder12 = new org.apache.rat.configuration.builders.AllBuilder();
        org.apache.rat.configuration.builders.CopyrightBuilder copyrightBuilder13 = org.apache.rat.analysis.IHeaderMatcher.Builder.copyright();
        org.apache.rat.configuration.builders.CopyrightBuilder copyrightBuilder15 = copyrightBuilder13.setStart("OASIS");
        java.lang.String str16 = copyrightBuilder13.toString();
        org.apache.rat.configuration.builders.CopyrightBuilder copyrightBuilder18 = copyrightBuilder13.setStart("223f0aba-15d4-49e9-901e-5740c137aebf");
        org.apache.rat.configuration.builders.MatcherRefBuilder matcherRefBuilder19 = org.apache.rat.analysis.IHeaderMatcher.Builder.matcherRef();
        boolean boolean20 = matcherRefBuilder19.hasId();
        org.apache.rat.configuration.builders.CopyrightBuilder copyrightBuilder21 = org.apache.rat.analysis.IHeaderMatcher.Builder.copyright();
        org.apache.rat.configuration.builders.CopyrightBuilder copyrightBuilder23 = copyrightBuilder21.setStart("OASIS");
        java.lang.String str24 = copyrightBuilder21.toString();
        org.apache.rat.configuration.builders.CopyrightBuilder copyrightBuilder26 = copyrightBuilder21.setStart("223f0aba-15d4-49e9-901e-5740c137aebf");
        org.apache.rat.configuration.builders.CopyrightBuilder copyrightBuilder27 = org.apache.rat.analysis.IHeaderMatcher.Builder.copyright();
        org.apache.rat.configuration.builders.CopyrightBuilder copyrightBuilder28 = org.apache.rat.analysis.IHeaderMatcher.Builder.copyright();
        java.lang.String str29 = copyrightBuilder28.toString();
        org.apache.rat.configuration.builders.CopyrightBuilder copyrightBuilder31 = copyrightBuilder28.setEnd(".cvsignore");
        boolean boolean32 = copyrightBuilder28.hasId();
        org.apache.rat.configuration.builders.CopyrightBuilder copyrightBuilder33 = org.apache.rat.analysis.IHeaderMatcher.Builder.copyright();
        java.lang.String str34 = copyrightBuilder33.toString();
        org.apache.rat.configuration.builders.CopyrightBuilder copyrightBuilder36 = copyrightBuilder33.setEnd(".cvsignore");
        boolean boolean37 = copyrightBuilder33.hasId();
        java.lang.String str38 = copyrightBuilder33.toString();
        org.apache.rat.configuration.builders.CopyrightBuilder copyrightBuilder39 = org.apache.rat.analysis.IHeaderMatcher.Builder.copyright();
        org.apache.rat.configuration.builders.CopyrightBuilder copyrightBuilder41 = copyrightBuilder39.setStart("OASIS");
        org.apache.rat.configuration.builders.AnyBuilder anyBuilder42 = org.apache.rat.analysis.IHeaderMatcher.Builder.any();
        org.apache.rat.configuration.builders.MatcherRefBuilder matcherRefBuilder43 = org.apache.rat.analysis.IHeaderMatcher.Builder.matcherRef();
        boolean boolean44 = matcherRefBuilder43.hasId();
        java.util.Map<java.lang.String, org.apache.rat.analysis.IHeaderMatcher> strMap45 = null;
        org.apache.rat.configuration.builders.MatcherRefBuilder matcherRefBuilder46 = matcherRefBuilder43.setMatchers(strMap45);
        org.apache.rat.configuration.builders.CopyrightBuilder copyrightBuilder47 = org.apache.rat.analysis.IHeaderMatcher.Builder.copyright();
        org.apache.rat.configuration.builders.MatcherRefBuilder matcherRefBuilder48 = org.apache.rat.analysis.IHeaderMatcher.Builder.matcherRef();
        boolean boolean49 = matcherRefBuilder48.hasId();
        java.lang.String str50 = matcherRefBuilder48.toString();
        java.util.Map<java.lang.String, org.apache.rat.analysis.IHeaderMatcher> strMap51 = null;
        org.apache.rat.configuration.builders.MatcherRefBuilder matcherRefBuilder52 = matcherRefBuilder48.setMatchers(strMap51);
        org.apache.rat.analysis.IHeaderMatcher.Builder[] builderArray53 = new org.apache.rat.analysis.IHeaderMatcher.Builder[] { matcherRefBuilder8, allBuilder12, copyrightBuilder18, matcherRefBuilder19, copyrightBuilder21, copyrightBuilder27, copyrightBuilder28, copyrightBuilder33, copyrightBuilder39, anyBuilder42, matcherRefBuilder43, copyrightBuilder47, matcherRefBuilder48 };
        java.util.ArrayList<org.apache.rat.analysis.IHeaderMatcher.Builder> builderList54 = new java.util.ArrayList<org.apache.rat.analysis.IHeaderMatcher.Builder>();
        boolean boolean55 = java.util.Collections.addAll((java.util.Collection<org.apache.rat.analysis.IHeaderMatcher.Builder>) builderList54, builderArray53);
        org.apache.rat.configuration.builders.AbstractBuilder abstractBuilder56 = notBuilder6.add((java.util.Collection<org.apache.rat.analysis.IHeaderMatcher.Builder>) builderList54);
        org.apache.rat.configuration.builders.MatcherRefBuilder matcherRefBuilder57 = new org.apache.rat.configuration.builders.MatcherRefBuilder();
        org.apache.rat.analysis.IHeaderMatcher.Builder[] builderArray58 = new org.apache.rat.analysis.IHeaderMatcher.Builder[] { matcherRefBuilder2, anyBuilder5, notBuilder6, matcherRefBuilder57 };
        java.util.ArrayList<org.apache.rat.analysis.IHeaderMatcher.Builder> builderList59 = new java.util.ArrayList<org.apache.rat.analysis.IHeaderMatcher.Builder>();
        boolean boolean60 = java.util.Collections.addAll((java.util.Collection<org.apache.rat.analysis.IHeaderMatcher.Builder>) builderList59, builderArray58);
        org.apache.rat.configuration.builders.AbstractBuilder abstractBuilder61 = allBuilder1.add((java.util.Collection<org.apache.rat.analysis.IHeaderMatcher.Builder>) builderList59);
        defaultLog0.info((java.lang.Object) allBuilder1);
        org.apache.rat.ReportConfiguration reportConfiguration63 = new org.apache.rat.ReportConfiguration((org.apache.rat.utils.Log) defaultLog0);
        org.apache.rat.utils.Log log64 = null;
        org.apache.rat.ReportConfiguration reportConfiguration65 = new org.apache.rat.ReportConfiguration(log64);
        reportConfiguration65.addApprovedLicenseCategory(".cvsignore");
        org.apache.rat.utils.Log.Level level68 = org.apache.rat.utils.Log.Level.ERROR;
        reportConfiguration65.logFamilyCollisions(level68);
        defaultLog0.setLevel(level68);
        org.apache.rat.license.ILicense.Builder builder71 = org.apache.rat.license.ILicense.builder();
        org.apache.rat.license.ILicense.Builder builder73 = builder71.setLicenseFamilyCategory("");
        org.apache.rat.analysis.matchers.CopyrightMatcher copyrightMatcher77 = new org.apache.rat.analysis.matchers.CopyrightMatcher("", "GPL1 ", "hi!");
        org.apache.rat.analysis.IHeaderMatcher.State state78 = copyrightMatcher77.finalizeState();
        org.apache.rat.license.ILicense.Builder builder79 = builder73.setMatcher((org.apache.rat.analysis.IHeaderMatcher) copyrightMatcher77);
        org.apache.rat.license.ILicense.Builder builder81 = builder79.setNotes("8f0ee536-38ae-476a-a728-de95e24c13c3");
        org.apache.rat.license.ILicense.Builder builder83 = builder81.setDerivedFrom("2953E6CB-20A5-4DCF-A9F5-85C51CC8C635");
        org.apache.rat.analysis.matchers.CopyrightMatcher copyrightMatcher88 = new org.apache.rat.analysis.matchers.CopyrightMatcher("a3b53609-8989-4241-8aa6-1cc947f0d382", "", "RegexBuilder: GNU General Public License, version 1", "TextBuilder: true");
        org.apache.rat.license.ILicense.Builder builder89 = builder81.setMatcher((org.apache.rat.analysis.IHeaderMatcher) copyrightMatcher88);
        org.apache.rat.license.ILicense.Builder builder91 = builder89.setLicenseFamilyCategory("EBC30EB7B3EA4F39BAEA5FEA4FA0278B");
        java.lang.Throwable throwable92 = null;
        // The following exception was thrown during execution in test generation
        try {
            defaultLog0.warn((java.lang.Object) builder91, throwable92);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(defaultLog0);
        org.junit.Assert.assertNotNull(matcherRefBuilder2);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "MathcerRefBuilder: null" + "'", str4, "MathcerRefBuilder: null");
        org.junit.Assert.assertNotNull(anyBuilder5);
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "NotBuilder: null" + "'", str7, "NotBuilder: null");
        org.junit.Assert.assertNotNull(matcherRefBuilder8);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertNotNull(matcherRefBuilder11);
        org.junit.Assert.assertNotNull(copyrightBuilder13);
        org.junit.Assert.assertNotNull(copyrightBuilder15);
        org.junit.Assert.assertEquals("'" + str16 + "' != '" + "Copyright Builder: s:OASIS e:null o:null" + "'", str16, "Copyright Builder: s:OASIS e:null o:null");
        org.junit.Assert.assertNotNull(copyrightBuilder18);
        org.junit.Assert.assertNotNull(matcherRefBuilder19);
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + false + "'", boolean20 == false);
        org.junit.Assert.assertNotNull(copyrightBuilder21);
        org.junit.Assert.assertNotNull(copyrightBuilder23);
        org.junit.Assert.assertEquals("'" + str24 + "' != '" + "Copyright Builder: s:OASIS e:null o:null" + "'", str24, "Copyright Builder: s:OASIS e:null o:null");
        org.junit.Assert.assertNotNull(copyrightBuilder26);
        org.junit.Assert.assertNotNull(copyrightBuilder27);
        org.junit.Assert.assertNotNull(copyrightBuilder28);
        org.junit.Assert.assertEquals("'" + str29 + "' != '" + "Copyright Builder: s:null e:null o:null" + "'", str29, "Copyright Builder: s:null e:null o:null");
        org.junit.Assert.assertNotNull(copyrightBuilder31);
        org.junit.Assert.assertTrue("'" + boolean32 + "' != '" + false + "'", boolean32 == false);
        org.junit.Assert.assertNotNull(copyrightBuilder33);
        org.junit.Assert.assertEquals("'" + str34 + "' != '" + "Copyright Builder: s:null e:null o:null" + "'", str34, "Copyright Builder: s:null e:null o:null");
        org.junit.Assert.assertNotNull(copyrightBuilder36);
        org.junit.Assert.assertTrue("'" + boolean37 + "' != '" + false + "'", boolean37 == false);
        org.junit.Assert.assertEquals("'" + str38 + "' != '" + "Copyright Builder: s:null e:.cvsignore o:null" + "'", str38, "Copyright Builder: s:null e:.cvsignore o:null");
        org.junit.Assert.assertNotNull(copyrightBuilder39);
        org.junit.Assert.assertNotNull(copyrightBuilder41);
        org.junit.Assert.assertNotNull(anyBuilder42);
        org.junit.Assert.assertNotNull(matcherRefBuilder43);
        org.junit.Assert.assertTrue("'" + boolean44 + "' != '" + false + "'", boolean44 == false);
        org.junit.Assert.assertNotNull(matcherRefBuilder46);
        org.junit.Assert.assertNotNull(copyrightBuilder47);
        org.junit.Assert.assertNotNull(matcherRefBuilder48);
        org.junit.Assert.assertTrue("'" + boolean49 + "' != '" + false + "'", boolean49 == false);
        org.junit.Assert.assertEquals("'" + str50 + "' != '" + "MathcerRefBuilder: null" + "'", str50, "MathcerRefBuilder: null");
        org.junit.Assert.assertNotNull(matcherRefBuilder52);
        org.junit.Assert.assertNotNull(builderArray53);
        org.junit.Assert.assertTrue("'" + boolean55 + "' != '" + true + "'", boolean55 == true);
        org.junit.Assert.assertNotNull(abstractBuilder56);
        org.junit.Assert.assertNotNull(builderArray58);
        org.junit.Assert.assertTrue("'" + boolean60 + "' != '" + true + "'", boolean60 == true);
        org.junit.Assert.assertNotNull(abstractBuilder61);
        org.junit.Assert.assertTrue("'" + level68 + "' != '" + org.apache.rat.utils.Log.Level.ERROR + "'", level68.equals(org.apache.rat.utils.Log.Level.ERROR));
        org.junit.Assert.assertNotNull(builder71);
        org.junit.Assert.assertNotNull(builder73);
        org.junit.Assert.assertTrue("'" + state78 + "' != '" + org.apache.rat.analysis.IHeaderMatcher.State.f + "'", state78.equals(org.apache.rat.analysis.IHeaderMatcher.State.f));
        org.junit.Assert.assertNotNull(builder79);
        org.junit.Assert.assertNotNull(builder81);
        org.junit.Assert.assertNotNull(builder83);
        org.junit.Assert.assertNotNull(builder89);
        org.junit.Assert.assertNotNull(builder91);
    }

    @Test
    public void test14598() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest29.test14598");
        org.apache.rat.utils.ReportingSet<java.lang.String> strSet0 = new org.apache.rat.utils.ReportingSet<java.lang.String>();
        org.apache.rat.utils.ReportingSet<java.lang.String> strSet2 = strSet0.tailSet("hi!");
        java.util.stream.Stream<java.lang.String> strStream3 = strSet2.parallelStream();
        org.apache.rat.utils.DefaultLog defaultLog4 = org.apache.rat.utils.DefaultLog.INSTANCE;
        org.apache.rat.license.ILicense.Builder builder5 = org.apache.rat.license.ILicense.builder();
        org.apache.rat.license.ILicense.Builder builder7 = builder5.setLicenseFamilyCategory("");
        org.apache.rat.analysis.matchers.CopyrightMatcher copyrightMatcher11 = new org.apache.rat.analysis.matchers.CopyrightMatcher("", "GPL1 ", "hi!");
        org.apache.rat.analysis.IHeaderMatcher.State state12 = copyrightMatcher11.finalizeState();
        org.apache.rat.license.ILicense.Builder builder13 = builder7.setMatcher((org.apache.rat.analysis.IHeaderMatcher) copyrightMatcher11);
        org.apache.rat.license.ILicense.Builder builder15 = builder13.setLicenseFamilyCategory("");
        defaultLog4.error((java.lang.Object) builder15);
        org.apache.rat.license.ILicense[] iLicenseArray17 = new org.apache.rat.license.ILicense[] {};
        java.util.TreeSet<org.apache.rat.license.ILicense> iLicenseSet18 = new java.util.TreeSet<org.apache.rat.license.ILicense>();
        boolean boolean19 = java.util.Collections.addAll((java.util.Collection<org.apache.rat.license.ILicense>) iLicenseSet18, iLicenseArray17);
        java.lang.String[] strArray32 = new java.lang.String[] { "GPL2 ", "GPL1 ", "notice", "http://org/apache/rat/meta-data#LicenseFamilyName", "notice", "GPL2 ", "http://org/apache/rat/meta-data#LicenseFamilyName", "", "GPL2 ", "", "GPL1 ", "hi!" };
        java.util.ArrayList<java.lang.String> strList33 = new java.util.ArrayList<java.lang.String>();
        boolean boolean34 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strList33, strArray32);
        org.apache.rat.license.LicenseSetFactory licenseSetFactory35 = new org.apache.rat.license.LicenseSetFactory((java.util.SortedSet<org.apache.rat.license.ILicense>) iLicenseSet18, (java.util.Collection<java.lang.String>) strList33);
        org.apache.rat.utils.Log log36 = null;
        org.apache.rat.ReportConfiguration reportConfiguration37 = new org.apache.rat.ReportConfiguration(log36);
        java.io.FilenameFilter filenameFilter38 = reportConfiguration37.getInputFileFilter();
        org.apache.rat.license.LicenseSetFactory.LicenseFilter licenseFilter39 = org.apache.rat.license.LicenseSetFactory.LicenseFilter.all;
        java.util.SortedSet<org.apache.rat.license.ILicense> iLicenseSet40 = reportConfiguration37.getLicenses(licenseFilter39);
        org.apache.rat.config.AddLicenseHeaders addLicenseHeaders41 = org.apache.rat.config.AddLicenseHeaders.FALSE;
        reportConfiguration37.setAddLicenseHeaders(addLicenseHeaders41);
        org.apache.rat.utils.Log log43 = null;
        org.apache.rat.ReportConfiguration reportConfiguration44 = new org.apache.rat.ReportConfiguration(log43);
        org.apache.rat.report.claim.ClaimStatistic claimStatistic45 = org.apache.rat.Reporter.report(reportConfiguration44);
        org.apache.rat.license.LicenseSetFactory.LicenseFilter licenseFilter46 = org.apache.rat.license.LicenseSetFactory.LicenseFilter.all;
        org.apache.rat.Reporter.listLicenses(reportConfiguration44, licenseFilter46);
        org.apache.rat.Reporter.listLicenses(reportConfiguration37, licenseFilter46);
        org.apache.rat.utils.Log log49 = null;
        org.apache.rat.ReportConfiguration reportConfiguration50 = new org.apache.rat.ReportConfiguration(log49);
        java.io.FilenameFilter filenameFilter51 = reportConfiguration50.getInputFileFilter();
        org.apache.rat.license.LicenseSetFactory.LicenseFilter licenseFilter52 = org.apache.rat.license.LicenseSetFactory.LicenseFilter.all;
        java.util.SortedSet<org.apache.rat.license.ILicense> iLicenseSet53 = reportConfiguration50.getLicenses(licenseFilter52);
        org.apache.rat.config.AddLicenseHeaders addLicenseHeaders54 = org.apache.rat.config.AddLicenseHeaders.FALSE;
        reportConfiguration50.setAddLicenseHeaders(addLicenseHeaders54);
        org.apache.rat.utils.Log log56 = null;
        org.apache.rat.ReportConfiguration reportConfiguration57 = new org.apache.rat.ReportConfiguration(log56);
        org.apache.rat.report.claim.ClaimStatistic claimStatistic58 = org.apache.rat.Reporter.report(reportConfiguration57);
        org.apache.rat.license.LicenseSetFactory.LicenseFilter licenseFilter59 = org.apache.rat.license.LicenseSetFactory.LicenseFilter.all;
        org.apache.rat.Reporter.listLicenses(reportConfiguration57, licenseFilter59);
        org.apache.rat.Reporter.listLicenses(reportConfiguration50, licenseFilter59);
        org.apache.rat.Reporter.listLicenses(reportConfiguration37, licenseFilter59);
        java.util.SortedSet<org.apache.rat.license.ILicense> iLicenseSet63 = licenseSetFactory35.getLicenses(licenseFilter59);
        defaultLog4.warn((java.lang.Object) licenseSetFactory35);
        org.apache.rat.utils.DefaultLog defaultLog65 = org.apache.rat.utils.DefaultLog.INSTANCE;
        org.apache.rat.license.ILicense.Builder builder66 = org.apache.rat.license.ILicense.builder();
        org.apache.rat.license.ILicense.Builder builder68 = builder66.setLicenseFamilyCategory("");
        org.apache.rat.analysis.matchers.CopyrightMatcher copyrightMatcher72 = new org.apache.rat.analysis.matchers.CopyrightMatcher("", "GPL1 ", "hi!");
        org.apache.rat.analysis.IHeaderMatcher.State state73 = copyrightMatcher72.finalizeState();
        org.apache.rat.license.ILicense.Builder builder74 = builder68.setMatcher((org.apache.rat.analysis.IHeaderMatcher) copyrightMatcher72);
        org.apache.rat.license.ILicense.Builder builder76 = builder74.setLicenseFamilyCategory("");
        defaultLog65.error((java.lang.Object) builder76);
        org.apache.rat.analysis.matchers.CopyrightMatcher copyrightMatcher81 = new org.apache.rat.analysis.matchers.CopyrightMatcher("", "GPL1 ", "hi!");
        copyrightMatcher81.reset();
        org.apache.rat.license.ILicense.Builder builder83 = builder76.setMatcher((org.apache.rat.analysis.IHeaderMatcher) copyrightMatcher81);
        org.apache.rat.configuration.builders.SpdxBuilder spdxBuilder84 = org.apache.rat.analysis.IHeaderMatcher.Builder.spdx();
        java.lang.String str85 = spdxBuilder84.toString();
        org.apache.rat.configuration.builders.SpdxBuilder spdxBuilder87 = spdxBuilder84.setName("ef7a8b13-64c3-4510-bb0c-dbf208e1e73f");
        org.apache.rat.license.ILicense.Builder builder88 = builder83.setMatcher((org.apache.rat.analysis.IHeaderMatcher.Builder) spdxBuilder84);
        defaultLog4.info((java.lang.Object) builder88);
        org.apache.rat.utils.Log.Level level90 = defaultLog4.getLevel();
        org.apache.rat.utils.ReportingSet<java.lang.String> strSet91 = strSet2.setLogLevel(level90);
        // The following exception was thrown during execution in test generation
        try {
            java.lang.String str92 = strSet91.last();
            org.junit.Assert.fail("Expected exception of type java.util.NoSuchElementException; message: null");
        } catch (java.util.NoSuchElementException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(strSet2);
        org.junit.Assert.assertNotNull(strStream3);
        org.junit.Assert.assertNotNull(defaultLog4);
        org.junit.Assert.assertNotNull(builder5);
        org.junit.Assert.assertNotNull(builder7);
        org.junit.Assert.assertTrue("'" + state12 + "' != '" + org.apache.rat.analysis.IHeaderMatcher.State.f + "'", state12.equals(org.apache.rat.analysis.IHeaderMatcher.State.f));
        org.junit.Assert.assertNotNull(builder13);
        org.junit.Assert.assertNotNull(builder15);
        org.junit.Assert.assertNotNull(iLicenseArray17);
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + false + "'", boolean19 == false);
        org.junit.Assert.assertNotNull(strArray32);
        org.junit.Assert.assertTrue("'" + boolean34 + "' != '" + true + "'", boolean34 == true);
        org.junit.Assert.assertNull(filenameFilter38);
        org.junit.Assert.assertTrue("'" + licenseFilter39 + "' != '" + org.apache.rat.license.LicenseSetFactory.LicenseFilter.all + "'", licenseFilter39.equals(org.apache.rat.license.LicenseSetFactory.LicenseFilter.all));
        org.junit.Assert.assertNotNull(iLicenseSet40);
        org.junit.Assert.assertTrue("'" + addLicenseHeaders41 + "' != '" + org.apache.rat.config.AddLicenseHeaders.FALSE + "'", addLicenseHeaders41.equals(org.apache.rat.config.AddLicenseHeaders.FALSE));
        org.junit.Assert.assertNull(claimStatistic45);
        org.junit.Assert.assertTrue("'" + licenseFilter46 + "' != '" + org.apache.rat.license.LicenseSetFactory.LicenseFilter.all + "'", licenseFilter46.equals(org.apache.rat.license.LicenseSetFactory.LicenseFilter.all));
        org.junit.Assert.assertNull(filenameFilter51);
        org.junit.Assert.assertTrue("'" + licenseFilter52 + "' != '" + org.apache.rat.license.LicenseSetFactory.LicenseFilter.all + "'", licenseFilter52.equals(org.apache.rat.license.LicenseSetFactory.LicenseFilter.all));
        org.junit.Assert.assertNotNull(iLicenseSet53);
        org.junit.Assert.assertTrue("'" + addLicenseHeaders54 + "' != '" + org.apache.rat.config.AddLicenseHeaders.FALSE + "'", addLicenseHeaders54.equals(org.apache.rat.config.AddLicenseHeaders.FALSE));
        org.junit.Assert.assertNull(claimStatistic58);
        org.junit.Assert.assertTrue("'" + licenseFilter59 + "' != '" + org.apache.rat.license.LicenseSetFactory.LicenseFilter.all + "'", licenseFilter59.equals(org.apache.rat.license.LicenseSetFactory.LicenseFilter.all));
        org.junit.Assert.assertNotNull(iLicenseSet63);
        org.junit.Assert.assertNotNull(defaultLog65);
        org.junit.Assert.assertNotNull(builder66);
        org.junit.Assert.assertNotNull(builder68);
        org.junit.Assert.assertTrue("'" + state73 + "' != '" + org.apache.rat.analysis.IHeaderMatcher.State.f + "'", state73.equals(org.apache.rat.analysis.IHeaderMatcher.State.f));
        org.junit.Assert.assertNotNull(builder74);
        org.junit.Assert.assertNotNull(builder76);
        org.junit.Assert.assertNotNull(builder83);
        org.junit.Assert.assertNotNull(spdxBuilder84);
        org.junit.Assert.assertEquals("'" + str85 + "' != '" + "SpdxBuilder: null" + "'", str85, "SpdxBuilder: null");
        org.junit.Assert.assertNotNull(spdxBuilder87);
        org.junit.Assert.assertNotNull(builder88);
        org.junit.Assert.assertTrue("'" + level90 + "' != '" + org.apache.rat.utils.Log.Level.ERROR + "'", level90.equals(org.apache.rat.utils.Log.Level.ERROR));
        org.junit.Assert.assertNotNull(strSet91);
    }

    @Test
    public void test14599() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest29.test14599");
        org.apache.rat.utils.Log log0 = null;
        org.apache.rat.ReportConfiguration reportConfiguration1 = new org.apache.rat.ReportConfiguration(log0);
        java.io.FilenameFilter filenameFilter2 = reportConfiguration1.getInputFileFilter();
        java.io.FilenameFilter filenameFilter3 = reportConfiguration1.getInputFileFilter();
        org.apache.rat.utils.Log log5 = null;
        org.apache.rat.ReportConfiguration reportConfiguration6 = new org.apache.rat.ReportConfiguration(log5);
        java.io.FilenameFilter filenameFilter7 = reportConfiguration6.getInputFileFilter();
        org.apache.rat.license.LicenseSetFactory.LicenseFilter licenseFilter8 = org.apache.rat.license.LicenseSetFactory.LicenseFilter.all;
        java.util.SortedSet<org.apache.rat.license.ILicense> iLicenseSet9 = reportConfiguration6.getLicenses(licenseFilter8);
        org.apache.rat.config.AddLicenseHeaders addLicenseHeaders10 = org.apache.rat.config.AddLicenseHeaders.FALSE;
        reportConfiguration6.setAddLicenseHeaders(addLicenseHeaders10);
        org.apache.rat.utils.Log log12 = null;
        org.apache.rat.ReportConfiguration reportConfiguration13 = new org.apache.rat.ReportConfiguration(log12);
        org.apache.rat.report.claim.ClaimStatistic claimStatistic14 = org.apache.rat.Reporter.report(reportConfiguration13);
        org.apache.rat.license.LicenseSetFactory.LicenseFilter licenseFilter15 = org.apache.rat.license.LicenseSetFactory.LicenseFilter.all;
        org.apache.rat.Reporter.listLicenses(reportConfiguration13, licenseFilter15);
        org.apache.rat.Reporter.listLicenses(reportConfiguration6, licenseFilter15);
        org.apache.rat.utils.Log log18 = null;
        org.apache.rat.ReportConfiguration reportConfiguration19 = new org.apache.rat.ReportConfiguration(log18);
        java.io.FilenameFilter filenameFilter20 = reportConfiguration19.getInputFileFilter();
        org.apache.rat.license.LicenseSetFactory.LicenseFilter licenseFilter21 = org.apache.rat.license.LicenseSetFactory.LicenseFilter.all;
        java.util.SortedSet<org.apache.rat.license.ILicense> iLicenseSet22 = reportConfiguration19.getLicenses(licenseFilter21);
        org.apache.rat.config.AddLicenseHeaders addLicenseHeaders23 = org.apache.rat.config.AddLicenseHeaders.FALSE;
        reportConfiguration19.setAddLicenseHeaders(addLicenseHeaders23);
        org.apache.rat.utils.Log log25 = null;
        org.apache.rat.ReportConfiguration reportConfiguration26 = new org.apache.rat.ReportConfiguration(log25);
        org.apache.rat.report.claim.ClaimStatistic claimStatistic27 = org.apache.rat.Reporter.report(reportConfiguration26);
        org.apache.rat.license.LicenseSetFactory.LicenseFilter licenseFilter28 = org.apache.rat.license.LicenseSetFactory.LicenseFilter.all;
        org.apache.rat.Reporter.listLicenses(reportConfiguration26, licenseFilter28);
        org.apache.rat.Reporter.listLicenses(reportConfiguration19, licenseFilter28);
        org.apache.rat.Reporter.listLicenses(reportConfiguration6, licenseFilter28);
        org.apache.rat.utils.Log log32 = null;
        org.apache.rat.ReportConfiguration reportConfiguration33 = new org.apache.rat.ReportConfiguration(log32);
        org.apache.commons.io.function.IOSupplier<java.io.OutputStream> outputStreamIOSupplier34 = reportConfiguration33.getOutput();
        reportConfiguration6.setOut(outputStreamIOSupplier34);
        org.apache.rat.utils.Log.Level level36 = org.apache.rat.utils.Log.Level.WARN;
        reportConfiguration6.logLicenseCollisions(level36);
        org.apache.commons.io.filefilter.IOFileFilter iOFileFilter38 = reportConfiguration6.getDirectoryFilter();
        org.apache.rat.configuration.Format format40 = org.apache.rat.configuration.Format.XML;
        org.apache.rat.configuration.LicenseReader licenseReader41 = format40.licenseReader();
        org.apache.rat.configuration.MatcherReader matcherReader42 = format40.matcherReader();
        org.apache.rat.configuration.LicenseReader licenseReader43 = format40.licenseReader();
        java.util.SortedSet<org.apache.rat.license.ILicense> iLicenseSet44 = licenseReader43.readLicenses();
        org.apache.rat.license.ILicense iLicense45 = org.apache.rat.license.LicenseSetFactory.search("Datum [ name ='http://org/apache/rat/meta-data#LicenseFamilyCategory',value ='GPL1  ']", iLicenseSet44);
        reportConfiguration6.addLicensesIfNotPresent((java.util.Collection<org.apache.rat.license.ILicense>) iLicenseSet44);
        org.apache.rat.utils.ReportingSet<org.apache.rat.license.ILicense> iLicenseSet47 = new org.apache.rat.utils.ReportingSet<org.apache.rat.license.ILicense>(iLicenseSet44);
        org.apache.rat.license.ILicense iLicense48 = org.apache.rat.license.LicenseSetFactory.search("f5f3fb9b-540a-43ef-a018-8ce5779e23f4", iLicenseSet44);
        reportConfiguration1.addLicenses((java.util.Collection<org.apache.rat.license.ILicense>) iLicenseSet44);
        java.util.Collection<java.lang.String> strCollection50 = null;
        org.apache.rat.license.LicenseSetFactory licenseSetFactory51 = new org.apache.rat.license.LicenseSetFactory(iLicenseSet44, strCollection50);
        org.junit.Assert.assertNull(filenameFilter2);
        org.junit.Assert.assertNull(filenameFilter3);
        org.junit.Assert.assertNull(filenameFilter7);
        org.junit.Assert.assertTrue("'" + licenseFilter8 + "' != '" + org.apache.rat.license.LicenseSetFactory.LicenseFilter.all + "'", licenseFilter8.equals(org.apache.rat.license.LicenseSetFactory.LicenseFilter.all));
        org.junit.Assert.assertNotNull(iLicenseSet9);
        org.junit.Assert.assertTrue("'" + addLicenseHeaders10 + "' != '" + org.apache.rat.config.AddLicenseHeaders.FALSE + "'", addLicenseHeaders10.equals(org.apache.rat.config.AddLicenseHeaders.FALSE));
        org.junit.Assert.assertNull(claimStatistic14);
        org.junit.Assert.assertTrue("'" + licenseFilter15 + "' != '" + org.apache.rat.license.LicenseSetFactory.LicenseFilter.all + "'", licenseFilter15.equals(org.apache.rat.license.LicenseSetFactory.LicenseFilter.all));
        org.junit.Assert.assertNull(filenameFilter20);
        org.junit.Assert.assertTrue("'" + licenseFilter21 + "' != '" + org.apache.rat.license.LicenseSetFactory.LicenseFilter.all + "'", licenseFilter21.equals(org.apache.rat.license.LicenseSetFactory.LicenseFilter.all));
        org.junit.Assert.assertNotNull(iLicenseSet22);
        org.junit.Assert.assertTrue("'" + addLicenseHeaders23 + "' != '" + org.apache.rat.config.AddLicenseHeaders.FALSE + "'", addLicenseHeaders23.equals(org.apache.rat.config.AddLicenseHeaders.FALSE));
        org.junit.Assert.assertNull(claimStatistic27);
        org.junit.Assert.assertTrue("'" + licenseFilter28 + "' != '" + org.apache.rat.license.LicenseSetFactory.LicenseFilter.all + "'", licenseFilter28.equals(org.apache.rat.license.LicenseSetFactory.LicenseFilter.all));
        org.junit.Assert.assertNotNull(outputStreamIOSupplier34);
        org.junit.Assert.assertTrue("'" + level36 + "' != '" + org.apache.rat.utils.Log.Level.WARN + "'", level36.equals(org.apache.rat.utils.Log.Level.WARN));
        org.junit.Assert.assertNotNull(iOFileFilter38);
        org.junit.Assert.assertTrue("'" + format40 + "' != '" + org.apache.rat.configuration.Format.XML + "'", format40.equals(org.apache.rat.configuration.Format.XML));
        org.junit.Assert.assertNotNull(licenseReader41);
        org.junit.Assert.assertNotNull(matcherReader42);
        org.junit.Assert.assertNotNull(licenseReader43);
        org.junit.Assert.assertNotNull(iLicenseSet44);
        org.junit.Assert.assertNull(iLicense45);
        org.junit.Assert.assertNull(iLicense48);
    }

    @Test
    public void test14600() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest29.test14600");
        org.apache.rat.license.ILicense[] iLicenseArray1 = new org.apache.rat.license.ILicense[] {};
        java.util.TreeSet<org.apache.rat.license.ILicense> iLicenseSet2 = new java.util.TreeSet<org.apache.rat.license.ILicense>();
        boolean boolean3 = java.util.Collections.addAll((java.util.Collection<org.apache.rat.license.ILicense>) iLicenseSet2, iLicenseArray1);
        java.lang.String[] strArray16 = new java.lang.String[] { "GPL2 ", "GPL1 ", "notice", "http://org/apache/rat/meta-data#LicenseFamilyName", "notice", "GPL2 ", "http://org/apache/rat/meta-data#LicenseFamilyName", "", "GPL2 ", "", "GPL1 ", "hi!" };
        java.util.ArrayList<java.lang.String> strList17 = new java.util.ArrayList<java.lang.String>();
        boolean boolean18 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strList17, strArray16);
        org.apache.rat.license.LicenseSetFactory licenseSetFactory19 = new org.apache.rat.license.LicenseSetFactory((java.util.SortedSet<org.apache.rat.license.ILicense>) iLicenseSet2, (java.util.Collection<java.lang.String>) strList17);
        org.apache.rat.license.ILicense iLicense20 = org.apache.rat.license.LicenseSetFactory.search("GNU General Public License, version 1", (java.util.SortedSet<org.apache.rat.license.ILicense>) iLicenseSet2);
        org.apache.rat.configuration.Format format22 = org.apache.rat.configuration.Format.XML;
        org.apache.rat.configuration.LicenseReader licenseReader23 = format22.licenseReader();
        org.apache.rat.configuration.MatcherReader matcherReader24 = format22.matcherReader();
        org.apache.rat.configuration.LicenseReader licenseReader25 = format22.licenseReader();
        java.util.SortedSet<org.apache.rat.license.ILicense> iLicenseSet26 = licenseReader25.readLicenses();
        org.apache.rat.license.ILicense iLicense27 = org.apache.rat.license.LicenseSetFactory.search("Datum [ name ='http://org/apache/rat/meta-data#LicenseFamilyCategory',value ='GPL1  ']", iLicenseSet26);
        org.apache.rat.utils.ReportingSet<java.lang.String> strSet28 = new org.apache.rat.utils.ReportingSet<java.lang.String>();
        int int29 = strSet28.size();
        org.apache.rat.license.LicenseSetFactory licenseSetFactory30 = new org.apache.rat.license.LicenseSetFactory(iLicenseSet26, (java.util.Collection<java.lang.String>) strSet28);
        org.apache.rat.license.LicenseSetFactory licenseSetFactory31 = new org.apache.rat.license.LicenseSetFactory((java.util.SortedSet<org.apache.rat.license.ILicense>) iLicenseSet2, (java.util.Collection<java.lang.String>) strSet28);
        java.util.stream.Stream<java.lang.String> strStream32 = strSet28.parallelStream();
        strStream32.close();
        org.junit.Assert.assertNotNull(iLicenseArray1);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertNotNull(strArray16);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + true + "'", boolean18 == true);
        org.junit.Assert.assertNull(iLicense20);
        org.junit.Assert.assertTrue("'" + format22 + "' != '" + org.apache.rat.configuration.Format.XML + "'", format22.equals(org.apache.rat.configuration.Format.XML));
        org.junit.Assert.assertNotNull(licenseReader23);
        org.junit.Assert.assertNotNull(matcherReader24);
        org.junit.Assert.assertNotNull(licenseReader25);
        org.junit.Assert.assertNotNull(iLicenseSet26);
        org.junit.Assert.assertNull(iLicense27);
        org.junit.Assert.assertTrue("'" + int29 + "' != '" + 0 + "'", int29 == 0);
        org.junit.Assert.assertNotNull(strStream32);
    }

    @Test
    public void test14601() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest29.test14601");
        org.apache.rat.analysis.matchers.FullTextMatcher fullTextMatcher2 = new org.apache.rat.analysis.matchers.FullTextMatcher("http://org/apache/rat/meta-data#FileCategory", "8f82a952-5bfd-446b-ac79-15beef5b3f17");
        fullTextMatcher2.reset();
        java.lang.String str4 = fullTextMatcher2.getId();
        org.apache.rat.analysis.IHeaderMatcher.State state5 = fullTextMatcher2.finalizeState();
        org.apache.rat.analysis.IHeaderMatcher.State state6 = fullTextMatcher2.currentState();
        java.lang.String str7 = state6.toString();
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "http://org/apache/rat/meta-data#FileCategory" + "'", str4, "http://org/apache/rat/meta-data#FileCategory");
        org.junit.Assert.assertTrue("'" + state5 + "' != '" + org.apache.rat.analysis.IHeaderMatcher.State.f + "'", state5.equals(org.apache.rat.analysis.IHeaderMatcher.State.f));
        org.junit.Assert.assertTrue("'" + state6 + "' != '" + org.apache.rat.analysis.IHeaderMatcher.State.f + "'", state6.equals(org.apache.rat.analysis.IHeaderMatcher.State.f));
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "f false" + "'", str7, "f false");
    }

    @Test
    public void test14602() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest29.test14602");
        org.apache.rat.utils.Log log0 = null;
        org.apache.rat.ReportConfiguration reportConfiguration1 = new org.apache.rat.ReportConfiguration(log0);
        reportConfiguration1.addApprovedLicenseCategory(".cvsignore");
        org.apache.rat.utils.Log.Level level4 = org.apache.rat.utils.Log.Level.ERROR;
        reportConfiguration1.logFamilyCollisions(level4);
        org.apache.commons.io.filefilter.IOFileFilter iOFileFilter6 = reportConfiguration1.getDirectoryFilter();
        org.apache.rat.utils.Log log7 = null;
        org.apache.rat.ReportConfiguration reportConfiguration8 = new org.apache.rat.ReportConfiguration(log7);
        org.apache.rat.utils.ReportingSet.Options options9 = org.apache.rat.utils.ReportingSet.Options.OVERWRITE;
        reportConfiguration8.licenseDuplicateOption(options9);
        org.apache.rat.utils.Log log11 = null;
        org.apache.rat.ReportConfiguration reportConfiguration12 = new org.apache.rat.ReportConfiguration(log11);
        java.io.FilenameFilter filenameFilter13 = reportConfiguration12.getInputFileFilter();
        org.apache.rat.license.LicenseSetFactory.LicenseFilter licenseFilter14 = org.apache.rat.license.LicenseSetFactory.LicenseFilter.all;
        java.util.SortedSet<org.apache.rat.license.ILicense> iLicenseSet15 = reportConfiguration12.getLicenses(licenseFilter14);
        org.apache.rat.config.AddLicenseHeaders addLicenseHeaders16 = org.apache.rat.config.AddLicenseHeaders.FALSE;
        reportConfiguration12.setAddLicenseHeaders(addLicenseHeaders16);
        org.apache.rat.utils.Log log18 = null;
        org.apache.rat.ReportConfiguration reportConfiguration19 = new org.apache.rat.ReportConfiguration(log18);
        org.apache.rat.report.claim.ClaimStatistic claimStatistic20 = org.apache.rat.Reporter.report(reportConfiguration19);
        org.apache.rat.license.LicenseSetFactory.LicenseFilter licenseFilter21 = org.apache.rat.license.LicenseSetFactory.LicenseFilter.all;
        org.apache.rat.Reporter.listLicenses(reportConfiguration19, licenseFilter21);
        org.apache.rat.Reporter.listLicenses(reportConfiguration12, licenseFilter21);
        org.apache.rat.utils.Log log24 = null;
        org.apache.rat.ReportConfiguration reportConfiguration25 = new org.apache.rat.ReportConfiguration(log24);
        java.io.FilenameFilter filenameFilter26 = reportConfiguration25.getInputFileFilter();
        org.apache.rat.license.LicenseSetFactory.LicenseFilter licenseFilter27 = org.apache.rat.license.LicenseSetFactory.LicenseFilter.all;
        java.util.SortedSet<org.apache.rat.license.ILicense> iLicenseSet28 = reportConfiguration25.getLicenses(licenseFilter27);
        org.apache.rat.config.AddLicenseHeaders addLicenseHeaders29 = org.apache.rat.config.AddLicenseHeaders.FALSE;
        reportConfiguration25.setAddLicenseHeaders(addLicenseHeaders29);
        org.apache.rat.utils.Log log31 = null;
        org.apache.rat.ReportConfiguration reportConfiguration32 = new org.apache.rat.ReportConfiguration(log31);
        org.apache.rat.report.claim.ClaimStatistic claimStatistic33 = org.apache.rat.Reporter.report(reportConfiguration32);
        org.apache.rat.license.LicenseSetFactory.LicenseFilter licenseFilter34 = org.apache.rat.license.LicenseSetFactory.LicenseFilter.all;
        org.apache.rat.Reporter.listLicenses(reportConfiguration32, licenseFilter34);
        org.apache.rat.Reporter.listLicenses(reportConfiguration25, licenseFilter34);
        org.apache.rat.Reporter.listLicenses(reportConfiguration12, licenseFilter34);
        org.apache.rat.utils.Log log38 = null;
        org.apache.rat.ReportConfiguration reportConfiguration39 = new org.apache.rat.ReportConfiguration(log38);
        org.apache.commons.io.function.IOSupplier<java.io.OutputStream> outputStreamIOSupplier40 = reportConfiguration39.getOutput();
        reportConfiguration12.setOut(outputStreamIOSupplier40);
        org.apache.rat.utils.Log.Level level42 = org.apache.rat.utils.Log.Level.WARN;
        reportConfiguration12.logLicenseCollisions(level42);
        org.apache.commons.io.filefilter.IOFileFilter iOFileFilter44 = reportConfiguration12.getDirectoryFilter();
        reportConfiguration8.setInputFileFilter((java.io.FilenameFilter) iOFileFilter44);
        java.nio.file.Path path46 = null;
        boolean boolean47 = iOFileFilter44.matches(path46);
        org.apache.commons.io.filefilter.IOFileFilter iOFileFilter48 = iOFileFilter44.negate();
        org.apache.commons.io.filefilter.IOFileFilter iOFileFilter49 = iOFileFilter48.negate();
        org.apache.rat.utils.Log log50 = null;
        org.apache.rat.ReportConfiguration reportConfiguration51 = new org.apache.rat.ReportConfiguration(log50);
        java.io.FilenameFilter filenameFilter52 = reportConfiguration51.getInputFileFilter();
        org.apache.rat.license.LicenseSetFactory.LicenseFilter licenseFilter53 = org.apache.rat.license.LicenseSetFactory.LicenseFilter.all;
        java.util.SortedSet<org.apache.rat.license.ILicense> iLicenseSet54 = reportConfiguration51.getLicenses(licenseFilter53);
        org.apache.rat.config.AddLicenseHeaders addLicenseHeaders55 = org.apache.rat.config.AddLicenseHeaders.FALSE;
        reportConfiguration51.setAddLicenseHeaders(addLicenseHeaders55);
        org.apache.rat.utils.Log log57 = null;
        org.apache.rat.ReportConfiguration reportConfiguration58 = new org.apache.rat.ReportConfiguration(log57);
        org.apache.rat.report.claim.ClaimStatistic claimStatistic59 = org.apache.rat.Reporter.report(reportConfiguration58);
        org.apache.rat.license.LicenseSetFactory.LicenseFilter licenseFilter60 = org.apache.rat.license.LicenseSetFactory.LicenseFilter.all;
        org.apache.rat.Reporter.listLicenses(reportConfiguration58, licenseFilter60);
        org.apache.rat.Reporter.listLicenses(reportConfiguration51, licenseFilter60);
        org.apache.rat.utils.Log log63 = null;
        org.apache.rat.ReportConfiguration reportConfiguration64 = new org.apache.rat.ReportConfiguration(log63);
        java.io.FilenameFilter filenameFilter65 = reportConfiguration64.getInputFileFilter();
        org.apache.rat.license.LicenseSetFactory.LicenseFilter licenseFilter66 = org.apache.rat.license.LicenseSetFactory.LicenseFilter.all;
        java.util.SortedSet<org.apache.rat.license.ILicense> iLicenseSet67 = reportConfiguration64.getLicenses(licenseFilter66);
        org.apache.rat.config.AddLicenseHeaders addLicenseHeaders68 = org.apache.rat.config.AddLicenseHeaders.FALSE;
        reportConfiguration64.setAddLicenseHeaders(addLicenseHeaders68);
        org.apache.rat.utils.Log log70 = null;
        org.apache.rat.ReportConfiguration reportConfiguration71 = new org.apache.rat.ReportConfiguration(log70);
        org.apache.rat.report.claim.ClaimStatistic claimStatistic72 = org.apache.rat.Reporter.report(reportConfiguration71);
        org.apache.rat.license.LicenseSetFactory.LicenseFilter licenseFilter73 = org.apache.rat.license.LicenseSetFactory.LicenseFilter.all;
        org.apache.rat.Reporter.listLicenses(reportConfiguration71, licenseFilter73);
        org.apache.rat.Reporter.listLicenses(reportConfiguration64, licenseFilter73);
        org.apache.rat.Reporter.listLicenses(reportConfiguration51, licenseFilter73);
        org.apache.rat.utils.Log log77 = null;
        org.apache.rat.ReportConfiguration reportConfiguration78 = new org.apache.rat.ReportConfiguration(log77);
        org.apache.commons.io.function.IOSupplier<java.io.OutputStream> outputStreamIOSupplier79 = reportConfiguration78.getOutput();
        reportConfiguration51.setOut(outputStreamIOSupplier79);
        org.apache.rat.utils.Log.Level level81 = org.apache.rat.utils.Log.Level.WARN;
        reportConfiguration51.logLicenseCollisions(level81);
        org.apache.commons.io.filefilter.IOFileFilter iOFileFilter83 = reportConfiguration51.getDirectoryFilter();
        java.nio.file.Path path84 = null;
        java.nio.file.attribute.BasicFileAttributes basicFileAttributes85 = null;
        java.nio.file.FileVisitResult fileVisitResult86 = iOFileFilter83.accept(path84, basicFileAttributes85);
        org.apache.commons.io.filefilter.IOFileFilter iOFileFilter87 = iOFileFilter83.negate();
        org.apache.commons.io.filefilter.IOFileFilter iOFileFilter88 = iOFileFilter87.negate();
        java.nio.file.Path path89 = null;
        java.nio.file.attribute.BasicFileAttributes basicFileAttributes90 = null;
        java.nio.file.FileVisitResult fileVisitResult91 = iOFileFilter88.accept(path89, basicFileAttributes90);
        org.apache.commons.io.filefilter.IOFileFilter iOFileFilter92 = iOFileFilter49.or(iOFileFilter88);
        org.apache.commons.io.filefilter.IOFileFilter iOFileFilter93 = iOFileFilter6.or(iOFileFilter92);
        java.nio.file.Path path94 = null;
        boolean boolean95 = iOFileFilter92.matches(path94);
        org.junit.Assert.assertTrue("'" + level4 + "' != '" + org.apache.rat.utils.Log.Level.ERROR + "'", level4.equals(org.apache.rat.utils.Log.Level.ERROR));
        org.junit.Assert.assertNotNull(iOFileFilter6);
        org.junit.Assert.assertTrue("'" + options9 + "' != '" + org.apache.rat.utils.ReportingSet.Options.OVERWRITE + "'", options9.equals(org.apache.rat.utils.ReportingSet.Options.OVERWRITE));
        org.junit.Assert.assertNull(filenameFilter13);
        org.junit.Assert.assertTrue("'" + licenseFilter14 + "' != '" + org.apache.rat.license.LicenseSetFactory.LicenseFilter.all + "'", licenseFilter14.equals(org.apache.rat.license.LicenseSetFactory.LicenseFilter.all));
        org.junit.Assert.assertNotNull(iLicenseSet15);
        org.junit.Assert.assertTrue("'" + addLicenseHeaders16 + "' != '" + org.apache.rat.config.AddLicenseHeaders.FALSE + "'", addLicenseHeaders16.equals(org.apache.rat.config.AddLicenseHeaders.FALSE));
        org.junit.Assert.assertNull(claimStatistic20);
        org.junit.Assert.assertTrue("'" + licenseFilter21 + "' != '" + org.apache.rat.license.LicenseSetFactory.LicenseFilter.all + "'", licenseFilter21.equals(org.apache.rat.license.LicenseSetFactory.LicenseFilter.all));
        org.junit.Assert.assertNull(filenameFilter26);
        org.junit.Assert.assertTrue("'" + licenseFilter27 + "' != '" + org.apache.rat.license.LicenseSetFactory.LicenseFilter.all + "'", licenseFilter27.equals(org.apache.rat.license.LicenseSetFactory.LicenseFilter.all));
        org.junit.Assert.assertNotNull(iLicenseSet28);
        org.junit.Assert.assertTrue("'" + addLicenseHeaders29 + "' != '" + org.apache.rat.config.AddLicenseHeaders.FALSE + "'", addLicenseHeaders29.equals(org.apache.rat.config.AddLicenseHeaders.FALSE));
        org.junit.Assert.assertNull(claimStatistic33);
        org.junit.Assert.assertTrue("'" + licenseFilter34 + "' != '" + org.apache.rat.license.LicenseSetFactory.LicenseFilter.all + "'", licenseFilter34.equals(org.apache.rat.license.LicenseSetFactory.LicenseFilter.all));
        org.junit.Assert.assertNotNull(outputStreamIOSupplier40);
        org.junit.Assert.assertTrue("'" + level42 + "' != '" + org.apache.rat.utils.Log.Level.WARN + "'", level42.equals(org.apache.rat.utils.Log.Level.WARN));
        org.junit.Assert.assertNotNull(iOFileFilter44);
        org.junit.Assert.assertTrue("'" + boolean47 + "' != '" + false + "'", boolean47 == false);
        org.junit.Assert.assertNotNull(iOFileFilter48);
        org.junit.Assert.assertNotNull(iOFileFilter49);
        org.junit.Assert.assertNull(filenameFilter52);
        org.junit.Assert.assertTrue("'" + licenseFilter53 + "' != '" + org.apache.rat.license.LicenseSetFactory.LicenseFilter.all + "'", licenseFilter53.equals(org.apache.rat.license.LicenseSetFactory.LicenseFilter.all));
        org.junit.Assert.assertNotNull(iLicenseSet54);
        org.junit.Assert.assertTrue("'" + addLicenseHeaders55 + "' != '" + org.apache.rat.config.AddLicenseHeaders.FALSE + "'", addLicenseHeaders55.equals(org.apache.rat.config.AddLicenseHeaders.FALSE));
        org.junit.Assert.assertNull(claimStatistic59);
        org.junit.Assert.assertTrue("'" + licenseFilter60 + "' != '" + org.apache.rat.license.LicenseSetFactory.LicenseFilter.all + "'", licenseFilter60.equals(org.apache.rat.license.LicenseSetFactory.LicenseFilter.all));
        org.junit.Assert.assertNull(filenameFilter65);
        org.junit.Assert.assertTrue("'" + licenseFilter66 + "' != '" + org.apache.rat.license.LicenseSetFactory.LicenseFilter.all + "'", licenseFilter66.equals(org.apache.rat.license.LicenseSetFactory.LicenseFilter.all));
        org.junit.Assert.assertNotNull(iLicenseSet67);
        org.junit.Assert.assertTrue("'" + addLicenseHeaders68 + "' != '" + org.apache.rat.config.AddLicenseHeaders.FALSE + "'", addLicenseHeaders68.equals(org.apache.rat.config.AddLicenseHeaders.FALSE));
        org.junit.Assert.assertNull(claimStatistic72);
        org.junit.Assert.assertTrue("'" + licenseFilter73 + "' != '" + org.apache.rat.license.LicenseSetFactory.LicenseFilter.all + "'", licenseFilter73.equals(org.apache.rat.license.LicenseSetFactory.LicenseFilter.all));
        org.junit.Assert.assertNotNull(outputStreamIOSupplier79);
        org.junit.Assert.assertTrue("'" + level81 + "' != '" + org.apache.rat.utils.Log.Level.WARN + "'", level81.equals(org.apache.rat.utils.Log.Level.WARN));
        org.junit.Assert.assertNotNull(iOFileFilter83);
        org.junit.Assert.assertTrue("'" + fileVisitResult86 + "' != '" + java.nio.file.FileVisitResult.TERMINATE + "'", fileVisitResult86.equals(java.nio.file.FileVisitResult.TERMINATE));
        org.junit.Assert.assertNotNull(iOFileFilter87);
        org.junit.Assert.assertNotNull(iOFileFilter88);
        org.junit.Assert.assertTrue("'" + fileVisitResult91 + "' != '" + java.nio.file.FileVisitResult.TERMINATE + "'", fileVisitResult91.equals(java.nio.file.FileVisitResult.TERMINATE));
        org.junit.Assert.assertNotNull(iOFileFilter92);
        org.junit.Assert.assertNotNull(iOFileFilter93);
        org.junit.Assert.assertTrue("'" + boolean95 + "' != '" + false + "'", boolean95 == false);
    }

    @Test
    public void test14603() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest29.test14603");
        org.apache.rat.utils.Log log0 = null;
        org.apache.rat.ReportConfiguration reportConfiguration1 = new org.apache.rat.ReportConfiguration(log0);
        org.apache.rat.report.claim.ClaimStatistic claimStatistic2 = org.apache.rat.Reporter.report(reportConfiguration1);
        org.apache.rat.utils.Log log3 = null;
        org.apache.rat.ReportConfiguration reportConfiguration4 = new org.apache.rat.ReportConfiguration(log3);
        org.apache.rat.report.claim.ClaimStatistic claimStatistic5 = org.apache.rat.Reporter.report(reportConfiguration4);
        org.apache.rat.utils.ReportingSet.Options options6 = org.apache.rat.utils.ReportingSet.Options.OVERWRITE;
        reportConfiguration4.licenseDuplicateOption(options6);
        reportConfiguration1.familyDuplicateOption(options6);
        org.apache.commons.io.function.IOSupplier<java.io.PrintWriter> printWriterIOSupplier9 = reportConfiguration1.getWriter();
        boolean boolean10 = reportConfiguration1.isAddingLicensesForced();
        java.io.FilenameFilter filenameFilter11 = reportConfiguration1.getInputFileFilter();
        java.io.FilenameFilter filenameFilter12 = reportConfiguration1.getInputFileFilter();
        boolean boolean13 = reportConfiguration1.isStyleReport();
        org.apache.commons.io.function.IOSupplier<java.io.InputStream> inputStreamIOSupplier14 = reportConfiguration1.getStyleSheet();
        org.apache.rat.utils.Log log15 = null;
        org.apache.rat.ReportConfiguration reportConfiguration16 = new org.apache.rat.ReportConfiguration(log15);
        org.apache.rat.report.claim.ClaimStatistic claimStatistic17 = org.apache.rat.Reporter.report(reportConfiguration16);
        reportConfiguration16.addApprovedLicenseCategory("Copyright Builder: s:null e:null o:null");
        java.util.SortedSet<java.lang.String> strSet20 = reportConfiguration16.getApprovedLicenseCategories();
        java.io.FilenameFilter filenameFilter21 = reportConfiguration16.getInputFileFilter();
        org.apache.rat.utils.Log log22 = null;
        org.apache.rat.ReportConfiguration reportConfiguration23 = new org.apache.rat.ReportConfiguration(log22);
        org.apache.rat.report.claim.ClaimStatistic claimStatistic24 = org.apache.rat.Reporter.report(reportConfiguration23);
        org.apache.rat.utils.ReportingSet.Options options25 = org.apache.rat.utils.ReportingSet.Options.OVERWRITE;
        reportConfiguration23.licenseDuplicateOption(options25);
        java.util.SortedSet<org.apache.rat.license.ILicenseFamily> iLicenseFamilySet28 = org.apache.rat.license.LicenseFamilySetFactory.emptyLicenseFamilySet();
        org.apache.rat.license.ILicenseFamily iLicenseFamily29 = org.apache.rat.license.LicenseFamilySetFactory.search("http://org/apache/rat/meta-data", iLicenseFamilySet28);
        org.apache.rat.policy.DefaultPolicy defaultPolicy30 = new org.apache.rat.policy.DefaultPolicy((java.util.Collection<org.apache.rat.license.ILicenseFamily>) iLicenseFamilySet28);
        reportConfiguration23.addFamilies((java.util.Collection<org.apache.rat.license.ILicenseFamily>) iLicenseFamilySet28);
        org.apache.rat.utils.ReportingSet<java.lang.String> strSet32 = new org.apache.rat.utils.ReportingSet<java.lang.String>();
        java.lang.Object[] objArray33 = strSet32.toArray();
        org.apache.rat.license.LicenseFamilySetFactory licenseFamilySetFactory34 = new org.apache.rat.license.LicenseFamilySetFactory(iLicenseFamilySet28, (java.util.Collection<java.lang.String>) strSet32);
        reportConfiguration16.addApprovedLicenseCategories((java.util.Collection<java.lang.String>) strSet32);
        org.apache.rat.document.ToNameTransformer toNameTransformer36 = new org.apache.rat.document.ToNameTransformer();
        org.apache.rat.utils.DefaultLog defaultLog37 = org.apache.rat.utils.DefaultLog.INSTANCE;
        org.apache.rat.license.ILicense.Builder builder38 = org.apache.rat.license.ILicense.builder();
        org.apache.rat.license.ILicense.Builder builder40 = builder38.setLicenseFamilyCategory("");
        org.apache.rat.analysis.matchers.CopyrightMatcher copyrightMatcher44 = new org.apache.rat.analysis.matchers.CopyrightMatcher("", "GPL1 ", "hi!");
        org.apache.rat.analysis.IHeaderMatcher.State state45 = copyrightMatcher44.finalizeState();
        org.apache.rat.license.ILicense.Builder builder46 = builder40.setMatcher((org.apache.rat.analysis.IHeaderMatcher) copyrightMatcher44);
        org.apache.rat.license.ILicense.Builder builder48 = builder46.setLicenseFamilyCategory("");
        defaultLog37.error((java.lang.Object) builder48);
        java.lang.Object obj50 = toNameTransformer36.transform((java.lang.Object) defaultLog37);
        org.apache.rat.utils.Log log51 = null;
        org.apache.rat.ReportConfiguration reportConfiguration52 = new org.apache.rat.ReportConfiguration(log51);
        org.apache.rat.report.claim.ClaimStatistic claimStatistic53 = org.apache.rat.Reporter.report(reportConfiguration52);
        org.apache.rat.utils.Log log54 = null;
        org.apache.rat.ReportConfiguration reportConfiguration55 = new org.apache.rat.ReportConfiguration(log54);
        org.apache.rat.report.claim.ClaimStatistic claimStatistic56 = org.apache.rat.Reporter.report(reportConfiguration55);
        org.apache.rat.utils.ReportingSet.Options options57 = org.apache.rat.utils.ReportingSet.Options.OVERWRITE;
        reportConfiguration55.licenseDuplicateOption(options57);
        reportConfiguration52.familyDuplicateOption(options57);
        org.apache.commons.io.function.IOSupplier<java.io.PrintWriter> printWriterIOSupplier60 = reportConfiguration52.getWriter();
        boolean boolean61 = reportConfiguration52.isAddingLicensesForced();
        org.apache.rat.utils.Log log62 = null;
        org.apache.rat.ReportConfiguration reportConfiguration63 = new org.apache.rat.ReportConfiguration(log62);
        reportConfiguration63.addApprovedLicenseCategory(".cvsignore");
        org.apache.rat.utils.Log.Level level66 = org.apache.rat.utils.Log.Level.ERROR;
        reportConfiguration63.logFamilyCollisions(level66);
        reportConfiguration52.logLicenseCollisions(level66);
        defaultLog37.setLevel(level66);
        boolean boolean70 = strSet32.equals((java.lang.Object) level66);
        reportConfiguration1.logFamilyCollisions(level66);
        org.apache.commons.io.function.IOSupplier<java.io.InputStream> inputStreamIOSupplier72 = reportConfiguration1.getStyleSheet();
        org.apache.rat.license.ILicenseFamilyBuilder iLicenseFamilyBuilder73 = new org.apache.rat.license.ILicenseFamilyBuilder();
        org.apache.rat.license.ILicenseFamily.Builder builder75 = iLicenseFamilyBuilder73.setLicenseFamilyCategory("Modified BSD License");
        org.apache.rat.license.ILicenseFamily.Builder builder77 = iLicenseFamilyBuilder73.setLicenseFamilyCategory("6486879f-fc81-4b57-aec7-c4c77d540c30");
        org.apache.rat.license.ILicenseFamily.Builder builder79 = iLicenseFamilyBuilder73.setLicenseFamilyName("MathcerRefBuilder: ");
        org.apache.rat.license.ILicenseFamily.Builder builder81 = iLicenseFamilyBuilder73.setLicenseFamilyName("Copyright Builder: s:6481fb19-38f0-43f5-ab95-caf84a069ee1 e:null o:null");
        org.apache.rat.license.ILicenseFamily iLicenseFamily82 = iLicenseFamilyBuilder73.build();
        org.apache.rat.license.ILicenseFamily.Builder builder84 = iLicenseFamilyBuilder73.setLicenseFamilyCategory("7E27CD62-4403-40AB-A9F5-16E7C59AB2F1");
        org.apache.rat.license.ILicenseFamily.Builder builder86 = iLicenseFamilyBuilder73.setLicenseFamilyCategory("4fcae176-e574-46ed-b9e4-dea2e2f3b458 http://org/apache/rat/meta-data#LicenseFamilyName");
        reportConfiguration1.addFamily((org.apache.rat.license.ILicenseFamily.Builder) iLicenseFamilyBuilder73);
        org.apache.rat.license.ILicenseFamily.Builder builder89 = iLicenseFamilyBuilder73.setLicenseFamilyCategory("Datum [ name ='http://org/apache/rat/meta-data#ApprovedLicense',value ='false ']");
        org.apache.rat.license.ILicenseFamily.Builder builder91 = iLicenseFamilyBuilder73.setLicenseFamilyCategory("2376a0e1-496c-4c88-9c9f-b046171bfce7");
        org.junit.Assert.assertNull(claimStatistic2);
        org.junit.Assert.assertNull(claimStatistic5);
        org.junit.Assert.assertTrue("'" + options6 + "' != '" + org.apache.rat.utils.ReportingSet.Options.OVERWRITE + "'", options6.equals(org.apache.rat.utils.ReportingSet.Options.OVERWRITE));
        org.junit.Assert.assertNotNull(printWriterIOSupplier9);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertNull(filenameFilter11);
        org.junit.Assert.assertNull(filenameFilter12);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + true + "'", boolean13 == true);
        org.junit.Assert.assertNull(inputStreamIOSupplier14);
        org.junit.Assert.assertNull(claimStatistic17);
        org.junit.Assert.assertNotNull(strSet20);
        org.junit.Assert.assertNull(filenameFilter21);
        org.junit.Assert.assertNull(claimStatistic24);
        org.junit.Assert.assertTrue("'" + options25 + "' != '" + org.apache.rat.utils.ReportingSet.Options.OVERWRITE + "'", options25.equals(org.apache.rat.utils.ReportingSet.Options.OVERWRITE));
        org.junit.Assert.assertNotNull(iLicenseFamilySet28);
        org.junit.Assert.assertNull(iLicenseFamily29);
        org.junit.Assert.assertNotNull(objArray33);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray33), "[]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray33), "[]");
        org.junit.Assert.assertNotNull(defaultLog37);
        org.junit.Assert.assertNotNull(builder38);
        org.junit.Assert.assertNotNull(builder40);
        org.junit.Assert.assertTrue("'" + state45 + "' != '" + org.apache.rat.analysis.IHeaderMatcher.State.f + "'", state45.equals(org.apache.rat.analysis.IHeaderMatcher.State.f));
        org.junit.Assert.assertNotNull(builder46);
        org.junit.Assert.assertNotNull(builder48);
        org.junit.Assert.assertNull(obj50);
        org.junit.Assert.assertNull(claimStatistic53);
        org.junit.Assert.assertNull(claimStatistic56);
        org.junit.Assert.assertTrue("'" + options57 + "' != '" + org.apache.rat.utils.ReportingSet.Options.OVERWRITE + "'", options57.equals(org.apache.rat.utils.ReportingSet.Options.OVERWRITE));
        org.junit.Assert.assertNotNull(printWriterIOSupplier60);
        org.junit.Assert.assertTrue("'" + boolean61 + "' != '" + false + "'", boolean61 == false);
        org.junit.Assert.assertTrue("'" + level66 + "' != '" + org.apache.rat.utils.Log.Level.ERROR + "'", level66.equals(org.apache.rat.utils.Log.Level.ERROR));
        org.junit.Assert.assertTrue("'" + boolean70 + "' != '" + false + "'", boolean70 == false);
        org.junit.Assert.assertNull(inputStreamIOSupplier72);
        org.junit.Assert.assertNotNull(builder75);
        org.junit.Assert.assertNotNull(builder77);
        org.junit.Assert.assertNotNull(builder79);
        org.junit.Assert.assertNotNull(builder81);
        org.junit.Assert.assertNotNull(iLicenseFamily82);
        org.junit.Assert.assertNotNull(builder84);
        org.junit.Assert.assertNotNull(builder86);
        org.junit.Assert.assertNotNull(builder89);
        org.junit.Assert.assertNotNull(builder91);
    }

    @Test
    public void test14604() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest29.test14604");
        org.apache.rat.report.claim.ClaimStatistic claimStatistic0 = new org.apache.rat.report.claim.ClaimStatistic();
        claimStatistic0.setNumUnApproved((-1));
        java.util.Map<java.lang.String, java.lang.Integer> strMap3 = claimStatistic0.getDocumentCategoryMap();
        java.util.Map<java.lang.String, java.lang.Integer> strMap4 = null;
        claimStatistic0.setLicenseFileNameMap(strMap4);
        java.util.Map<java.lang.String, java.lang.Integer> strMap6 = null;
        claimStatistic0.setDocumentCategoryMap(strMap6);
        claimStatistic0.setNumUnApproved((int) (byte) 0);
        org.junit.Assert.assertNull(strMap3);
    }

    @Test
    public void test14605() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest29.test14605");
        org.apache.rat.utils.Log log0 = null;
        org.apache.rat.ReportConfiguration reportConfiguration1 = new org.apache.rat.ReportConfiguration(log0);
        reportConfiguration1.addApprovedLicenseCategory(".cvsignore");
        org.apache.rat.utils.Log.Level level4 = org.apache.rat.utils.Log.Level.ERROR;
        reportConfiguration1.logLicenseCollisions(level4);
        org.apache.rat.license.ILicense iLicense6 = null;
        reportConfiguration1.addLicense(iLicense6);
        org.apache.commons.io.function.IOSupplier<java.io.PrintWriter> printWriterIOSupplier8 = reportConfiguration1.getWriter();
        org.apache.rat.Defaults.Builder builder9 = org.apache.rat.Defaults.builder();
        org.apache.rat.Defaults defaults10 = builder9.build();
        org.apache.rat.utils.Log log11 = null;
        org.apache.rat.ReportConfiguration reportConfiguration12 = new org.apache.rat.ReportConfiguration(log11);
        reportConfiguration12.addApprovedLicenseCategory(".cvsignore");
        org.apache.rat.utils.Log log15 = null;
        org.apache.rat.ReportConfiguration reportConfiguration16 = new org.apache.rat.ReportConfiguration(log15);
        java.io.FilenameFilter filenameFilter17 = reportConfiguration16.getInputFileFilter();
        org.apache.rat.license.LicenseSetFactory.LicenseFilter licenseFilter18 = org.apache.rat.license.LicenseSetFactory.LicenseFilter.all;
        java.util.SortedSet<org.apache.rat.license.ILicense> iLicenseSet19 = reportConfiguration16.getLicenses(licenseFilter18);
        reportConfiguration12.addLicensesIfNotPresent((java.util.Collection<org.apache.rat.license.ILicense>) iLicenseSet19);
        java.io.FilenameFilter filenameFilter21 = reportConfiguration12.getInputFileFilter();
        org.apache.rat.utils.Log log22 = null;
        org.apache.rat.ReportConfiguration reportConfiguration23 = new org.apache.rat.ReportConfiguration(log22);
        java.io.FilenameFilter filenameFilter24 = reportConfiguration23.getInputFileFilter();
        org.apache.rat.license.LicenseSetFactory.LicenseFilter licenseFilter25 = org.apache.rat.license.LicenseSetFactory.LicenseFilter.all;
        java.util.SortedSet<org.apache.rat.license.ILicense> iLicenseSet26 = reportConfiguration23.getLicenses(licenseFilter25);
        org.apache.rat.config.AddLicenseHeaders addLicenseHeaders27 = org.apache.rat.config.AddLicenseHeaders.FALSE;
        reportConfiguration23.setAddLicenseHeaders(addLicenseHeaders27);
        org.apache.rat.utils.Log log29 = null;
        org.apache.rat.ReportConfiguration reportConfiguration30 = new org.apache.rat.ReportConfiguration(log29);
        org.apache.rat.report.claim.ClaimStatistic claimStatistic31 = org.apache.rat.Reporter.report(reportConfiguration30);
        org.apache.rat.license.LicenseSetFactory.LicenseFilter licenseFilter32 = org.apache.rat.license.LicenseSetFactory.LicenseFilter.all;
        org.apache.rat.Reporter.listLicenses(reportConfiguration30, licenseFilter32);
        org.apache.rat.Reporter.listLicenses(reportConfiguration23, licenseFilter32);
        org.apache.rat.utils.Log log35 = null;
        org.apache.rat.ReportConfiguration reportConfiguration36 = new org.apache.rat.ReportConfiguration(log35);
        java.io.FilenameFilter filenameFilter37 = reportConfiguration36.getInputFileFilter();
        org.apache.rat.license.LicenseSetFactory.LicenseFilter licenseFilter38 = org.apache.rat.license.LicenseSetFactory.LicenseFilter.all;
        java.util.SortedSet<org.apache.rat.license.ILicense> iLicenseSet39 = reportConfiguration36.getLicenses(licenseFilter38);
        org.apache.rat.config.AddLicenseHeaders addLicenseHeaders40 = org.apache.rat.config.AddLicenseHeaders.FALSE;
        reportConfiguration36.setAddLicenseHeaders(addLicenseHeaders40);
        org.apache.rat.utils.Log log42 = null;
        org.apache.rat.ReportConfiguration reportConfiguration43 = new org.apache.rat.ReportConfiguration(log42);
        org.apache.rat.report.claim.ClaimStatistic claimStatistic44 = org.apache.rat.Reporter.report(reportConfiguration43);
        org.apache.rat.license.LicenseSetFactory.LicenseFilter licenseFilter45 = org.apache.rat.license.LicenseSetFactory.LicenseFilter.all;
        org.apache.rat.Reporter.listLicenses(reportConfiguration43, licenseFilter45);
        org.apache.rat.Reporter.listLicenses(reportConfiguration36, licenseFilter45);
        java.util.SortedSet<org.apache.rat.license.ILicenseFamily> iLicenseFamilySet48 = reportConfiguration23.getLicenseFamilies(licenseFilter45);
        org.apache.rat.Reporter.listLicenseFamilies(reportConfiguration12, licenseFilter45);
        java.util.SortedSet<java.lang.String> strSet50 = defaults10.getLicenseIds(licenseFilter45);
        org.apache.rat.Reporter.listLicenseFamilies(reportConfiguration1, licenseFilter45);
        org.apache.rat.utils.Log log52 = reportConfiguration1.getLog();
        java.util.Collection<org.apache.rat.license.ILicenseFamily> iLicenseFamilyCollection53 = null;
        // The following exception was thrown during execution in test generation
        try {
            reportConfiguration1.addFamilies(iLicenseFamilyCollection53);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + level4 + "' != '" + org.apache.rat.utils.Log.Level.ERROR + "'", level4.equals(org.apache.rat.utils.Log.Level.ERROR));
        org.junit.Assert.assertNotNull(printWriterIOSupplier8);
        org.junit.Assert.assertNotNull(builder9);
        org.junit.Assert.assertNotNull(defaults10);
        org.junit.Assert.assertNull(filenameFilter17);
        org.junit.Assert.assertTrue("'" + licenseFilter18 + "' != '" + org.apache.rat.license.LicenseSetFactory.LicenseFilter.all + "'", licenseFilter18.equals(org.apache.rat.license.LicenseSetFactory.LicenseFilter.all));
        org.junit.Assert.assertNotNull(iLicenseSet19);
        org.junit.Assert.assertNull(filenameFilter21);
        org.junit.Assert.assertNull(filenameFilter24);
        org.junit.Assert.assertTrue("'" + licenseFilter25 + "' != '" + org.apache.rat.license.LicenseSetFactory.LicenseFilter.all + "'", licenseFilter25.equals(org.apache.rat.license.LicenseSetFactory.LicenseFilter.all));
        org.junit.Assert.assertNotNull(iLicenseSet26);
        org.junit.Assert.assertTrue("'" + addLicenseHeaders27 + "' != '" + org.apache.rat.config.AddLicenseHeaders.FALSE + "'", addLicenseHeaders27.equals(org.apache.rat.config.AddLicenseHeaders.FALSE));
        org.junit.Assert.assertNull(claimStatistic31);
        org.junit.Assert.assertTrue("'" + licenseFilter32 + "' != '" + org.apache.rat.license.LicenseSetFactory.LicenseFilter.all + "'", licenseFilter32.equals(org.apache.rat.license.LicenseSetFactory.LicenseFilter.all));
        org.junit.Assert.assertNull(filenameFilter37);
        org.junit.Assert.assertTrue("'" + licenseFilter38 + "' != '" + org.apache.rat.license.LicenseSetFactory.LicenseFilter.all + "'", licenseFilter38.equals(org.apache.rat.license.LicenseSetFactory.LicenseFilter.all));
        org.junit.Assert.assertNotNull(iLicenseSet39);
        org.junit.Assert.assertTrue("'" + addLicenseHeaders40 + "' != '" + org.apache.rat.config.AddLicenseHeaders.FALSE + "'", addLicenseHeaders40.equals(org.apache.rat.config.AddLicenseHeaders.FALSE));
        org.junit.Assert.assertNull(claimStatistic44);
        org.junit.Assert.assertTrue("'" + licenseFilter45 + "' != '" + org.apache.rat.license.LicenseSetFactory.LicenseFilter.all + "'", licenseFilter45.equals(org.apache.rat.license.LicenseSetFactory.LicenseFilter.all));
        org.junit.Assert.assertNotNull(iLicenseFamilySet48);
        org.junit.Assert.assertNotNull(strSet50);
        org.junit.Assert.assertNull(log52);
    }

    @Test
    public void test14606() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest29.test14606");
        org.apache.rat.license.ILicense[] iLicenseArray2 = new org.apache.rat.license.ILicense[] {};
        java.util.TreeSet<org.apache.rat.license.ILicense> iLicenseSet3 = new java.util.TreeSet<org.apache.rat.license.ILicense>();
        boolean boolean4 = java.util.Collections.addAll((java.util.Collection<org.apache.rat.license.ILicense>) iLicenseSet3, iLicenseArray2);
        java.lang.String[] strArray17 = new java.lang.String[] { "GPL2 ", "GPL1 ", "notice", "http://org/apache/rat/meta-data#LicenseFamilyName", "notice", "GPL2 ", "http://org/apache/rat/meta-data#LicenseFamilyName", "", "GPL2 ", "", "GPL1 ", "hi!" };
        java.util.ArrayList<java.lang.String> strList18 = new java.util.ArrayList<java.lang.String>();
        boolean boolean19 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strList18, strArray17);
        org.apache.rat.license.LicenseSetFactory licenseSetFactory20 = new org.apache.rat.license.LicenseSetFactory((java.util.SortedSet<org.apache.rat.license.ILicense>) iLicenseSet3, (java.util.Collection<java.lang.String>) strList18);
        org.apache.rat.utils.ReportingSet<org.apache.rat.license.ILicense> iLicenseSet21 = new org.apache.rat.utils.ReportingSet<org.apache.rat.license.ILicense>((java.util.SortedSet<org.apache.rat.license.ILicense>) iLicenseSet3);
        org.apache.rat.license.ILicense iLicense22 = org.apache.rat.license.LicenseSetFactory.search("fa18f31b-9be2-44d6-b5f4-146ebd73ca12", (java.util.SortedSet<org.apache.rat.license.ILicense>) iLicenseSet3);
        org.apache.rat.license.ILicense iLicense23 = org.apache.rat.license.LicenseSetFactory.search("Copyright Builder: s:null e:ef75a6e8-7197-4e9e-83bf-f8b367e6b3c5 o:null", (java.util.SortedSet<org.apache.rat.license.ILicense>) iLicenseSet3);
        org.apache.rat.utils.ReportingSet<org.apache.rat.license.ILicense> iLicenseSet24 = new org.apache.rat.utils.ReportingSet<org.apache.rat.license.ILicense>((java.util.SortedSet<org.apache.rat.license.ILicense>) iLicenseSet3);
        org.junit.Assert.assertNotNull(iLicenseArray2);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertNotNull(strArray17);
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + true + "'", boolean19 == true);
        org.junit.Assert.assertNull(iLicense22);
        org.junit.Assert.assertNull(iLicense23);
    }

    @Test
    public void test14607() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest29.test14607");
        org.apache.rat.api.MetaData metaData0 = new org.apache.rat.api.MetaData();
        java.lang.String str2 = metaData0.value("COMMON DEVELOPMENT AND DISTRIBUTION LICENSE Version 1.0");
        java.lang.String str4 = metaData0.value("W3C Document Copyright");
        boolean boolean6 = metaData0.clear("hi!");
        metaData0.clear();
        org.apache.rat.api.MetaData.Datum datum8 = org.apache.rat.api.MetaData.RAT_LICENSE_FAMILY_NAME_DATUM_GPL_VERSION_1;
        metaData0.set(datum8);
        org.apache.rat.utils.Log log10 = null;
        org.apache.rat.ReportConfiguration reportConfiguration11 = new org.apache.rat.ReportConfiguration(log10);
        java.io.FilenameFilter filenameFilter12 = reportConfiguration11.getInputFileFilter();
        org.apache.rat.license.LicenseSetFactory.LicenseFilter licenseFilter13 = org.apache.rat.license.LicenseSetFactory.LicenseFilter.all;
        java.util.SortedSet<org.apache.rat.license.ILicense> iLicenseSet14 = reportConfiguration11.getLicenses(licenseFilter13);
        org.apache.rat.config.AddLicenseHeaders addLicenseHeaders15 = org.apache.rat.config.AddLicenseHeaders.FALSE;
        reportConfiguration11.setAddLicenseHeaders(addLicenseHeaders15);
        org.apache.rat.utils.Log log17 = null;
        org.apache.rat.ReportConfiguration reportConfiguration18 = new org.apache.rat.ReportConfiguration(log17);
        org.apache.rat.report.claim.ClaimStatistic claimStatistic19 = org.apache.rat.Reporter.report(reportConfiguration18);
        org.apache.rat.license.LicenseSetFactory.LicenseFilter licenseFilter20 = org.apache.rat.license.LicenseSetFactory.LicenseFilter.all;
        org.apache.rat.Reporter.listLicenses(reportConfiguration18, licenseFilter20);
        org.apache.rat.Reporter.listLicenses(reportConfiguration11, licenseFilter20);
        org.apache.rat.utils.Log log23 = null;
        org.apache.rat.ReportConfiguration reportConfiguration24 = new org.apache.rat.ReportConfiguration(log23);
        java.io.FilenameFilter filenameFilter25 = reportConfiguration24.getInputFileFilter();
        org.apache.rat.license.LicenseSetFactory.LicenseFilter licenseFilter26 = org.apache.rat.license.LicenseSetFactory.LicenseFilter.all;
        java.util.SortedSet<org.apache.rat.license.ILicense> iLicenseSet27 = reportConfiguration24.getLicenses(licenseFilter26);
        org.apache.rat.config.AddLicenseHeaders addLicenseHeaders28 = org.apache.rat.config.AddLicenseHeaders.FALSE;
        reportConfiguration24.setAddLicenseHeaders(addLicenseHeaders28);
        org.apache.rat.utils.Log log30 = null;
        org.apache.rat.ReportConfiguration reportConfiguration31 = new org.apache.rat.ReportConfiguration(log30);
        org.apache.rat.report.claim.ClaimStatistic claimStatistic32 = org.apache.rat.Reporter.report(reportConfiguration31);
        org.apache.rat.license.LicenseSetFactory.LicenseFilter licenseFilter33 = org.apache.rat.license.LicenseSetFactory.LicenseFilter.all;
        org.apache.rat.Reporter.listLicenses(reportConfiguration31, licenseFilter33);
        org.apache.rat.Reporter.listLicenses(reportConfiguration24, licenseFilter33);
        org.apache.rat.Reporter.listLicenses(reportConfiguration11, licenseFilter33);
        java.io.FilenameFilter filenameFilter37 = reportConfiguration11.getInputFileFilter();
        reportConfiguration11.setStyleReport(false);
        org.apache.rat.report.IReportable iReportable40 = null;
        reportConfiguration11.setReportable(iReportable40);
        org.apache.rat.Defaults.Builder builder43 = org.apache.rat.Defaults.builder();
        org.apache.rat.Defaults defaults44 = builder43.build();
        org.apache.rat.utils.Log log45 = null;
        org.apache.rat.ReportConfiguration reportConfiguration46 = new org.apache.rat.ReportConfiguration(log45);
        java.io.FilenameFilter filenameFilter47 = reportConfiguration46.getInputFileFilter();
        org.apache.rat.license.LicenseSetFactory.LicenseFilter licenseFilter48 = org.apache.rat.license.LicenseSetFactory.LicenseFilter.all;
        java.util.SortedSet<org.apache.rat.license.ILicense> iLicenseSet49 = reportConfiguration46.getLicenses(licenseFilter48);
        org.apache.rat.config.AddLicenseHeaders addLicenseHeaders50 = org.apache.rat.config.AddLicenseHeaders.FALSE;
        reportConfiguration46.setAddLicenseHeaders(addLicenseHeaders50);
        org.apache.rat.utils.Log log52 = null;
        org.apache.rat.ReportConfiguration reportConfiguration53 = new org.apache.rat.ReportConfiguration(log52);
        org.apache.rat.report.claim.ClaimStatistic claimStatistic54 = org.apache.rat.Reporter.report(reportConfiguration53);
        org.apache.rat.license.LicenseSetFactory.LicenseFilter licenseFilter55 = org.apache.rat.license.LicenseSetFactory.LicenseFilter.all;
        org.apache.rat.Reporter.listLicenses(reportConfiguration53, licenseFilter55);
        org.apache.rat.Reporter.listLicenses(reportConfiguration46, licenseFilter55);
        org.apache.rat.utils.Log log58 = null;
        org.apache.rat.ReportConfiguration reportConfiguration59 = new org.apache.rat.ReportConfiguration(log58);
        java.io.FilenameFilter filenameFilter60 = reportConfiguration59.getInputFileFilter();
        org.apache.rat.license.LicenseSetFactory.LicenseFilter licenseFilter61 = org.apache.rat.license.LicenseSetFactory.LicenseFilter.all;
        java.util.SortedSet<org.apache.rat.license.ILicense> iLicenseSet62 = reportConfiguration59.getLicenses(licenseFilter61);
        org.apache.rat.config.AddLicenseHeaders addLicenseHeaders63 = org.apache.rat.config.AddLicenseHeaders.FALSE;
        reportConfiguration59.setAddLicenseHeaders(addLicenseHeaders63);
        org.apache.rat.utils.Log log65 = null;
        org.apache.rat.ReportConfiguration reportConfiguration66 = new org.apache.rat.ReportConfiguration(log65);
        org.apache.rat.report.claim.ClaimStatistic claimStatistic67 = org.apache.rat.Reporter.report(reportConfiguration66);
        org.apache.rat.license.LicenseSetFactory.LicenseFilter licenseFilter68 = org.apache.rat.license.LicenseSetFactory.LicenseFilter.all;
        org.apache.rat.Reporter.listLicenses(reportConfiguration66, licenseFilter68);
        org.apache.rat.Reporter.listLicenses(reportConfiguration59, licenseFilter68);
        java.util.SortedSet<org.apache.rat.license.ILicenseFamily> iLicenseFamilySet71 = reportConfiguration46.getLicenseFamilies(licenseFilter68);
        java.util.SortedSet<org.apache.rat.license.ILicense> iLicenseSet72 = defaults44.getLicenses(licenseFilter68);
        org.apache.rat.utils.ReportingSet<org.apache.rat.license.ILicense> iLicenseSet73 = new org.apache.rat.utils.ReportingSet<org.apache.rat.license.ILicense>(iLicenseSet72);
        org.apache.rat.license.ILicense iLicense74 = org.apache.rat.license.LicenseSetFactory.search("TMF", iLicenseSet72);
        reportConfiguration11.addLicense(iLicense74);
        java.lang.String str76 = iLicense74.derivedFrom();
        java.lang.String str77 = iLicense74.getName();
        java.lang.String str78 = iLicense74.getName();
        java.lang.String str79 = iLicense74.getName();
        metaData0.reportOnLicense(iLicense74);
        java.lang.String str81 = iLicense74.getNotes();
        org.junit.Assert.assertNull(str2);
        org.junit.Assert.assertNull(str4);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertNotNull(datum8);
        org.junit.Assert.assertNull(filenameFilter12);
        org.junit.Assert.assertTrue("'" + licenseFilter13 + "' != '" + org.apache.rat.license.LicenseSetFactory.LicenseFilter.all + "'", licenseFilter13.equals(org.apache.rat.license.LicenseSetFactory.LicenseFilter.all));
        org.junit.Assert.assertNotNull(iLicenseSet14);
        org.junit.Assert.assertTrue("'" + addLicenseHeaders15 + "' != '" + org.apache.rat.config.AddLicenseHeaders.FALSE + "'", addLicenseHeaders15.equals(org.apache.rat.config.AddLicenseHeaders.FALSE));
        org.junit.Assert.assertNull(claimStatistic19);
        org.junit.Assert.assertTrue("'" + licenseFilter20 + "' != '" + org.apache.rat.license.LicenseSetFactory.LicenseFilter.all + "'", licenseFilter20.equals(org.apache.rat.license.LicenseSetFactory.LicenseFilter.all));
        org.junit.Assert.assertNull(filenameFilter25);
        org.junit.Assert.assertTrue("'" + licenseFilter26 + "' != '" + org.apache.rat.license.LicenseSetFactory.LicenseFilter.all + "'", licenseFilter26.equals(org.apache.rat.license.LicenseSetFactory.LicenseFilter.all));
        org.junit.Assert.assertNotNull(iLicenseSet27);
        org.junit.Assert.assertTrue("'" + addLicenseHeaders28 + "' != '" + org.apache.rat.config.AddLicenseHeaders.FALSE + "'", addLicenseHeaders28.equals(org.apache.rat.config.AddLicenseHeaders.FALSE));
        org.junit.Assert.assertNull(claimStatistic32);
        org.junit.Assert.assertTrue("'" + licenseFilter33 + "' != '" + org.apache.rat.license.LicenseSetFactory.LicenseFilter.all + "'", licenseFilter33.equals(org.apache.rat.license.LicenseSetFactory.LicenseFilter.all));
        org.junit.Assert.assertNull(filenameFilter37);
        org.junit.Assert.assertNotNull(builder43);
        org.junit.Assert.assertNotNull(defaults44);
        org.junit.Assert.assertNull(filenameFilter47);
        org.junit.Assert.assertTrue("'" + licenseFilter48 + "' != '" + org.apache.rat.license.LicenseSetFactory.LicenseFilter.all + "'", licenseFilter48.equals(org.apache.rat.license.LicenseSetFactory.LicenseFilter.all));
        org.junit.Assert.assertNotNull(iLicenseSet49);
        org.junit.Assert.assertTrue("'" + addLicenseHeaders50 + "' != '" + org.apache.rat.config.AddLicenseHeaders.FALSE + "'", addLicenseHeaders50.equals(org.apache.rat.config.AddLicenseHeaders.FALSE));
        org.junit.Assert.assertNull(claimStatistic54);
        org.junit.Assert.assertTrue("'" + licenseFilter55 + "' != '" + org.apache.rat.license.LicenseSetFactory.LicenseFilter.all + "'", licenseFilter55.equals(org.apache.rat.license.LicenseSetFactory.LicenseFilter.all));
        org.junit.Assert.assertNull(filenameFilter60);
        org.junit.Assert.assertTrue("'" + licenseFilter61 + "' != '" + org.apache.rat.license.LicenseSetFactory.LicenseFilter.all + "'", licenseFilter61.equals(org.apache.rat.license.LicenseSetFactory.LicenseFilter.all));
        org.junit.Assert.assertNotNull(iLicenseSet62);
        org.junit.Assert.assertTrue("'" + addLicenseHeaders63 + "' != '" + org.apache.rat.config.AddLicenseHeaders.FALSE + "'", addLicenseHeaders63.equals(org.apache.rat.config.AddLicenseHeaders.FALSE));
        org.junit.Assert.assertNull(claimStatistic67);
        org.junit.Assert.assertTrue("'" + licenseFilter68 + "' != '" + org.apache.rat.license.LicenseSetFactory.LicenseFilter.all + "'", licenseFilter68.equals(org.apache.rat.license.LicenseSetFactory.LicenseFilter.all));
        org.junit.Assert.assertNotNull(iLicenseFamilySet71);
        org.junit.Assert.assertNotNull(iLicenseSet72);
        org.junit.Assert.assertNotNull(iLicense74);
        org.junit.Assert.assertEquals("'" + str76 + "' != '" + "BSD-3" + "'", str76, "BSD-3");
        org.junit.Assert.assertEquals("'" + str77 + "' != '" + "The Telemanagement Forum License" + "'", str77, "The Telemanagement Forum License");
        org.junit.Assert.assertEquals("'" + str78 + "' != '" + "The Telemanagement Forum License" + "'", str78, "The Telemanagement Forum License");
        org.junit.Assert.assertEquals("'" + str79 + "' != '" + "The Telemanagement Forum License" + "'", str79, "The Telemanagement Forum License");
        org.junit.Assert.assertNull(str81);
    }

    @Test
    public void test14608() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest29.test14608");
        org.apache.rat.license.ILicenseFamily.Builder builder0 = org.apache.rat.license.ILicenseFamily.builder();
        java.lang.String str1 = builder0.getCategory();
        org.apache.rat.license.ILicenseFamily.Builder builder3 = builder0.setLicenseFamilyCategory("Copyright Builder: s:null e:null o:null");
        org.apache.rat.license.ILicenseFamily.Builder builder5 = builder3.setLicenseFamilyName("6486879f-fc81-4b57-aec7-c4c77d540c30");
        org.apache.rat.license.ILicenseFamily.Builder builder7 = builder3.setLicenseFamilyCategory("Datum [ name ='http://org/apache/rat/meta-data#LicenseFamilyCategory',value ='OASIS ']");
        org.apache.rat.license.ILicenseFamily.Builder builder9 = builder7.setLicenseFamilyName("standard");
        org.apache.rat.license.ILicenseFamily iLicenseFamily10 = builder7.build();
        org.apache.rat.license.ILicenseFamily.Builder builder12 = builder7.setLicenseFamilyName("274c6a1509f64bfdac531827770eb507");
        org.junit.Assert.assertNotNull(builder0);
        org.junit.Assert.assertNull(str1);
        org.junit.Assert.assertNotNull(builder3);
        org.junit.Assert.assertNotNull(builder5);
        org.junit.Assert.assertNotNull(builder7);
        org.junit.Assert.assertNotNull(builder9);
        org.junit.Assert.assertNotNull(iLicenseFamily10);
        org.junit.Assert.assertNotNull(builder12);
    }

    @Test
    public void test14609() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest29.test14609");
        org.apache.rat.report.claim.ClaimStatistic claimStatistic0 = new org.apache.rat.report.claim.ClaimStatistic();
        claimStatistic0.setNumApproved((int) (short) 10);
        java.util.Map<java.lang.String, java.lang.Integer> strMap3 = null;
        claimStatistic0.setDocumentCategoryMap(strMap3);
        java.util.Map<java.lang.String, java.lang.Integer> strMap5 = claimStatistic0.getLicenseFileNameMap();
        claimStatistic0.setNumUnknown((int) (byte) -1);
        claimStatistic0.setNumApproved((int) (byte) -1);
        java.util.Map<java.lang.String, java.lang.Integer> strMap10 = claimStatistic0.getLicenseFileCodeMap();
        int int11 = claimStatistic0.getNumApproved();
        int int12 = claimStatistic0.getNumApproved();
        java.util.Map<java.lang.String, java.lang.Integer> strMap13 = claimStatistic0.getLicenseFileNameMap();
        org.junit.Assert.assertNull(strMap5);
        org.junit.Assert.assertNull(strMap10);
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + (-1) + "'", int11 == (-1));
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + (-1) + "'", int12 == (-1));
        org.junit.Assert.assertNull(strMap13);
    }

    @Test
    public void test14610() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest29.test14610");
        org.apache.rat.configuration.builders.TextBuilder textBuilder0 = new org.apache.rat.configuration.builders.TextBuilder();
        org.apache.rat.configuration.builders.TextBuilder textBuilder2 = textBuilder0.setText("true");
        boolean boolean3 = textBuilder2.hasId();
        org.apache.rat.analysis.IHeaderMatcher iHeaderMatcher4 = textBuilder2.build();
        org.apache.rat.configuration.builders.TextBuilder textBuilder6 = textBuilder2.setText("");
        org.junit.Assert.assertNotNull(textBuilder2);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertNotNull(iHeaderMatcher4);
        org.junit.Assert.assertNotNull(textBuilder6);
    }

    @Test
    public void test14611() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest29.test14611");
        org.apache.rat.configuration.builders.MatcherRefBuilder matcherRefBuilder0 = org.apache.rat.analysis.IHeaderMatcher.Builder.matcherRef();
        boolean boolean1 = matcherRefBuilder0.hasId();
        java.lang.String str2 = matcherRefBuilder0.toString();
        java.util.Map<java.lang.String, org.apache.rat.analysis.IHeaderMatcher> strMap3 = null;
        org.apache.rat.configuration.builders.MatcherRefBuilder matcherRefBuilder4 = matcherRefBuilder0.setMatchers(strMap3);
        java.util.Map<java.lang.String, org.apache.rat.analysis.IHeaderMatcher> strMap5 = null;
        org.apache.rat.configuration.builders.MatcherRefBuilder matcherRefBuilder6 = matcherRefBuilder0.setMatchers(strMap5);
        java.util.Map<java.lang.String, org.apache.rat.analysis.IHeaderMatcher> strMap7 = null;
        org.apache.rat.configuration.builders.MatcherRefBuilder matcherRefBuilder8 = matcherRefBuilder0.setMatchers(strMap7);
        java.util.Map<java.lang.String, org.apache.rat.analysis.IHeaderMatcher> strMap9 = null;
        org.apache.rat.configuration.builders.MatcherRefBuilder matcherRefBuilder10 = matcherRefBuilder8.setMatchers(strMap9);
        org.apache.rat.configuration.builders.MatcherRefBuilder matcherRefBuilder12 = matcherRefBuilder10.setRefId("TextBuilder: SpdxBuilder: null");
        org.apache.rat.configuration.builders.MatcherRefBuilder matcherRefBuilder14 = matcherRefBuilder12.setRefId("151234cb-e980-4752-a4a0-64f20f78657d");
        boolean boolean15 = matcherRefBuilder14.hasId();
        org.junit.Assert.assertNotNull(matcherRefBuilder0);
        org.junit.Assert.assertTrue("'" + boolean1 + "' != '" + false + "'", boolean1 == false);
        org.junit.Assert.assertEquals("'" + str2 + "' != '" + "MathcerRefBuilder: null" + "'", str2, "MathcerRefBuilder: null");
        org.junit.Assert.assertNotNull(matcherRefBuilder4);
        org.junit.Assert.assertNotNull(matcherRefBuilder6);
        org.junit.Assert.assertNotNull(matcherRefBuilder8);
        org.junit.Assert.assertNotNull(matcherRefBuilder10);
        org.junit.Assert.assertNotNull(matcherRefBuilder12);
        org.junit.Assert.assertNotNull(matcherRefBuilder14);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + false + "'", boolean15 == false);
    }

    @Test
    public void test14612() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest29.test14612");
        org.apache.rat.configuration.Format format0 = org.apache.rat.configuration.Format.TXT;
        org.apache.rat.configuration.LicenseReader licenseReader1 = format0.licenseReader();
        org.apache.rat.configuration.MatcherReader matcherReader2 = format0.matcherReader();
        org.apache.rat.configuration.LicenseReader licenseReader3 = format0.licenseReader();
        org.apache.rat.configuration.MatcherReader matcherReader4 = format0.matcherReader();
        org.apache.rat.configuration.LicenseReader licenseReader5 = format0.licenseReader();
        org.apache.rat.configuration.LicenseReader licenseReader6 = format0.licenseReader();
        org.apache.rat.configuration.MatcherReader matcherReader7 = format0.matcherReader();
        org.apache.rat.configuration.MatcherReader matcherReader8 = format0.matcherReader();
        org.junit.Assert.assertTrue("'" + format0 + "' != '" + org.apache.rat.configuration.Format.TXT + "'", format0.equals(org.apache.rat.configuration.Format.TXT));
        org.junit.Assert.assertNull(licenseReader1);
        org.junit.Assert.assertNull(matcherReader2);
        org.junit.Assert.assertNull(licenseReader3);
        org.junit.Assert.assertNull(matcherReader4);
        org.junit.Assert.assertNull(licenseReader5);
        org.junit.Assert.assertNull(licenseReader6);
        org.junit.Assert.assertNull(matcherReader7);
        org.junit.Assert.assertNull(matcherReader8);
    }

    @Test
    public void test14613() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest29.test14613");
        org.apache.rat.utils.Log log0 = null;
        org.apache.rat.ReportConfiguration reportConfiguration1 = new org.apache.rat.ReportConfiguration(log0);
        java.io.FilenameFilter filenameFilter2 = reportConfiguration1.getInputFileFilter();
        org.apache.rat.license.LicenseSetFactory.LicenseFilter licenseFilter3 = org.apache.rat.license.LicenseSetFactory.LicenseFilter.all;
        java.util.SortedSet<org.apache.rat.license.ILicense> iLicenseSet4 = reportConfiguration1.getLicenses(licenseFilter3);
        org.apache.commons.io.function.IOSupplier<java.io.InputStream> inputStreamIOSupplier5 = reportConfiguration1.getStyleSheet();
        reportConfiguration1.addApprovedLicenseCategory("true");
        reportConfiguration1.removeApprovedLicenseCategory("http://org/apache/rat/meta-data#ApprovedLicense");
        java.io.File file10 = null;
        // The following exception was thrown during execution in test generation
        try {
            reportConfiguration1.setOut(file10);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: output file should not be null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNull(filenameFilter2);
        org.junit.Assert.assertTrue("'" + licenseFilter3 + "' != '" + org.apache.rat.license.LicenseSetFactory.LicenseFilter.all + "'", licenseFilter3.equals(org.apache.rat.license.LicenseSetFactory.LicenseFilter.all));
        org.junit.Assert.assertNotNull(iLicenseSet4);
        org.junit.Assert.assertNull(inputStreamIOSupplier5);
    }

    @Test
    public void test14614() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest29.test14614");
        org.apache.rat.utils.Log log0 = null;
        org.apache.rat.ReportConfiguration reportConfiguration1 = new org.apache.rat.ReportConfiguration(log0);
        java.lang.String[] strArray45 = new java.lang.String[] { "http://org/apache/rat/meta-data", "GNU General Public License, version 2", "Modified BSD License", "COMMON DEVELOPMENT AND DISTRIBUTION LICENSE Version 1.0", "The MIT License", "OASIS", "?????", "Datum [ name ='http://org/apache/rat/meta-data#LicenseFamilyCategory',value ='OASIS ']", "6486879f-fc81-4b57-aec7-c4c77d540c30", "MANIFEST.MF", "?????", "GEN  ", "GPL3 ", "http://org/apache/rat/meta-data#HeaderCategory", "DOJO ", "true", "GPL2 ", "?????", "Apache License Version 2.0", "OASIS", "W3CD ", "OASIS", "?????", "OASIS Open License", "", "standard", "GPL2 ", "GEN  ", "W3CD ", "TMF  ", ".cvsignore", "Copyright Builder: s:null e:null o:null", "ef7a8b13-64c3-4510-bb0c-dbf208e1e73f", "274c6a15-09f6-4bfd-ac53-1827770eb507", "GNU General Public License, version 2", "W3CD ", ".cvsignore", "Apache License Version 2.0", "GEN  ", "W3C Software Copyright", "Modified BSD License", "GPL2 ", "JAVA" };
        java.util.ArrayList<java.lang.String> strList46 = new java.util.ArrayList<java.lang.String>();
        boolean boolean47 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strList46, strArray45);
        reportConfiguration1.removeApprovedLicenseCategories((java.util.Collection<java.lang.String>) strList46);
        java.lang.String str49 = reportConfiguration1.getCopyrightMessage();
        org.apache.rat.utils.Log log50 = null;
        org.apache.rat.ReportConfiguration reportConfiguration51 = new org.apache.rat.ReportConfiguration(log50);
        reportConfiguration51.addApprovedLicenseCategory(".cvsignore");
        boolean boolean54 = reportConfiguration51.isStyleReport();
        org.apache.commons.io.function.IOSupplier<java.io.InputStream> inputStreamIOSupplier55 = org.apache.rat.Defaults.getPlainStyleSheet();
        reportConfiguration51.setStyleSheet(inputStreamIOSupplier55);
        reportConfiguration1.setStyleSheet(inputStreamIOSupplier55);
        org.apache.rat.report.IReportable iReportable58 = reportConfiguration1.getReportable();
        org.apache.rat.analysis.license.FullTextMatchingLicense fullTextMatchingLicense59 = new org.apache.rat.analysis.license.FullTextMatchingLicense();
        fullTextMatchingLicense59.setLicenseFamilyName("hi!");
        java.lang.String str62 = fullTextMatchingLicense59.getLicenseFamilyCategory();
        java.lang.String str63 = fullTextMatchingLicense59.getLicenseFamilyName();
        fullTextMatchingLicense59.setLicenseFamilyName("SpdxBuilder: null");
        fullTextMatchingLicense59.setLicenseFamilyCategory("TMF");
        org.apache.rat.license.ILicenseFamily iLicenseFamily68 = fullTextMatchingLicense59.getLicenseFamily();
        fullTextMatchingLicense59.setFullText("Datum [ name ='http://org/apache/rat/meta-data#LicenseFamilyName',value ='GNU General Public License, version 1 ']");
        fullTextMatchingLicense59.setLicenseFamilyCategory("22d821a7-325b-4a40-8f38-f9cfc616d71a");
        java.lang.String str73 = fullTextMatchingLicense59.getLicenseFamilyName();
        org.apache.rat.license.ILicenseFamily iLicenseFamily74 = fullTextMatchingLicense59.getLicenseFamily();
        reportConfiguration1.addFamily(iLicenseFamily74);
        org.junit.Assert.assertNotNull(strArray45);
        org.junit.Assert.assertTrue("'" + boolean47 + "' != '" + true + "'", boolean47 == true);
        org.junit.Assert.assertNull(str49);
        org.junit.Assert.assertTrue("'" + boolean54 + "' != '" + true + "'", boolean54 == true);
        org.junit.Assert.assertNotNull(inputStreamIOSupplier55);
        org.junit.Assert.assertNull(iReportable58);
        org.junit.Assert.assertNull(str62);
        org.junit.Assert.assertEquals("'" + str63 + "' != '" + "hi!" + "'", str63, "hi!");
        org.junit.Assert.assertNotNull(iLicenseFamily68);
        org.junit.Assert.assertEquals("'" + str73 + "' != '" + "SpdxBuilder: null" + "'", str73, "SpdxBuilder: null");
        org.junit.Assert.assertNotNull(iLicenseFamily74);
    }

    @Test
    public void test14615() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest29.test14615");
        org.apache.rat.analysis.matchers.FullTextMatcher fullTextMatcher1 = new org.apache.rat.analysis.matchers.FullTextMatcher("2a9c4fbb-1cac-42b2-a01d-6ca9b606c9d9");
    }

    @Test
    public void test14616() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest29.test14616");
        java.lang.String[] strArray5 = new java.lang.String[] { "http://org/apache/rat/meta-data#LicenseFamilyCategory", "Datum [ name ='http://org/apache/rat/meta-data#LicenseFamilyCategory',value ='GPL1  ']", "MANIFEST.MF", "AllBuilder:", "The MIT License" };
        org.apache.rat.utils.ReportingSet<java.lang.String> strSet6 = new org.apache.rat.utils.ReportingSet<java.lang.String>();
        boolean boolean7 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strSet6, strArray5);
        boolean boolean9 = strSet6.addIfNotPresent("http://org/apache/rat/meta-data#LicenseFamilyName");
        boolean boolean11 = strSet6.addIfNotPresent("ef7a8b13-64c3-4510-bb0c-dbf208e1e73f");
        java.util.function.Function<java.lang.String, java.lang.String> strFunction12 = null;
        org.apache.rat.utils.ReportingSet<java.lang.String> strSet13 = strSet6.setMsgFormat(strFunction12);
        int int14 = strSet13.size();
        java.util.stream.Stream<java.lang.String> strStream15 = strSet13.parallelStream();
        java.util.stream.Stream<java.lang.String> strStream16 = strSet13.stream();
        strStream16.close();
        strStream16.close();
        org.junit.Assert.assertNotNull(strArray5);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + true + "'", boolean7 == true);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + true + "'", boolean9 == true);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + true + "'", boolean11 == true);
        org.junit.Assert.assertNotNull(strSet13);
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + 7 + "'", int14 == 7);
        org.junit.Assert.assertNotNull(strStream15);
        org.junit.Assert.assertNotNull(strStream16);
    }

    @Test
    public void test14617() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest29.test14617");
        org.apache.rat.Defaults.Builder builder0 = org.apache.rat.Defaults.builder();
        org.apache.rat.Defaults defaults1 = builder0.build();
        org.apache.rat.Defaults.Builder builder2 = builder0.noDefault();
        org.apache.rat.Defaults.Builder builder3 = builder0.noDefault();
        org.apache.rat.Defaults.Builder builder5 = builder0.add("Datum [ name ='http://org/apache/rat/meta-data#LicenseFamilyName',value ='Academic Free License, Version 2.1 ']");
        org.apache.rat.Defaults.Builder builder7 = builder5.add("RegexBuilder: f5f3fb9b-540a-43ef-a018-8ce5779e23f4");
        org.junit.Assert.assertNotNull(builder0);
        org.junit.Assert.assertNotNull(defaults1);
        org.junit.Assert.assertNotNull(builder2);
        org.junit.Assert.assertNotNull(builder3);
        org.junit.Assert.assertNotNull(builder5);
        org.junit.Assert.assertNotNull(builder7);
    }

    @Test
    public void test14618() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest29.test14618");
        java.lang.String[] strArray5 = new java.lang.String[] { "http://org/apache/rat/meta-data#LicenseFamilyCategory", "Datum [ name ='http://org/apache/rat/meta-data#LicenseFamilyCategory',value ='GPL1  ']", "MANIFEST.MF", "AllBuilder:", "The MIT License" };
        org.apache.rat.utils.ReportingSet<java.lang.String> strSet6 = new org.apache.rat.utils.ReportingSet<java.lang.String>();
        boolean boolean7 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strSet6, strArray5);
        boolean boolean9 = strSet6.addIfNotPresent("http://org/apache/rat/meta-data#LicenseFamilyName");
        java.util.Iterator<java.lang.String> strItor10 = strSet6.iterator();
        strSet6.clear();
        strSet6.clear();
        org.apache.rat.utils.ReportingSet<java.lang.String> strSet14 = strSet6.headSet("5442eadd-c5c2-4028-96d7-364d7d405280");
        org.apache.rat.utils.ReportingSet<java.lang.String> strSet17 = strSet6.subSet("a3e11a81-9a98-401d-8ec7-2ff3ae515be9", "b02ae01b-da48-4f95-b825-8ab7c1751418");
        java.util.function.Function<java.lang.String, java.lang.String> strFunction18 = null;
        org.apache.rat.utils.ReportingSet<java.lang.String> strSet19 = strSet17.setMsgFormat(strFunction18);
        org.junit.Assert.assertNotNull(strArray5);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + true + "'", boolean7 == true);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + true + "'", boolean9 == true);
        org.junit.Assert.assertNotNull(strItor10);
        org.junit.Assert.assertNotNull(strSet14);
        org.junit.Assert.assertNotNull(strSet17);
        org.junit.Assert.assertNotNull(strSet19);
    }

    @Test
    public void test14619() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest29.test14619");
        org.apache.rat.analysis.matchers.FullTextMatcher fullTextMatcher1 = new org.apache.rat.analysis.matchers.FullTextMatcher("notice");
        boolean boolean3 = fullTextMatcher1.doMatch("http://org/apache/rat/meta-data#HeaderSample");
        fullTextMatcher1.reset();
        org.apache.rat.analysis.IHeaderMatcher.State state5 = fullTextMatcher1.currentState();
        org.apache.rat.analysis.IHeaderMatcher.State state7 = fullTextMatcher1.matches("ccc13818-cf35-442a-af8c-b5d308aa81fe");
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertTrue("'" + state5 + "' != '" + org.apache.rat.analysis.IHeaderMatcher.State.i + "'", state5.equals(org.apache.rat.analysis.IHeaderMatcher.State.i));
        org.junit.Assert.assertTrue("'" + state7 + "' != '" + org.apache.rat.analysis.IHeaderMatcher.State.i + "'", state7.equals(org.apache.rat.analysis.IHeaderMatcher.State.i));
    }

    @Test
    public void test14620() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest29.test14620");
        org.apache.rat.utils.Log log0 = null;
        org.apache.rat.ReportConfiguration reportConfiguration1 = new org.apache.rat.ReportConfiguration(log0);
        java.io.FilenameFilter filenameFilter2 = reportConfiguration1.getInputFileFilter();
        org.apache.rat.license.LicenseSetFactory.LicenseFilter licenseFilter3 = org.apache.rat.license.LicenseSetFactory.LicenseFilter.all;
        java.util.SortedSet<org.apache.rat.license.ILicense> iLicenseSet4 = reportConfiguration1.getLicenses(licenseFilter3);
        org.apache.rat.config.AddLicenseHeaders addLicenseHeaders5 = org.apache.rat.config.AddLicenseHeaders.FALSE;
        reportConfiguration1.setAddLicenseHeaders(addLicenseHeaders5);
        org.apache.rat.utils.Log log7 = null;
        org.apache.rat.ReportConfiguration reportConfiguration8 = new org.apache.rat.ReportConfiguration(log7);
        org.apache.rat.report.claim.ClaimStatistic claimStatistic9 = org.apache.rat.Reporter.report(reportConfiguration8);
        org.apache.rat.license.LicenseSetFactory.LicenseFilter licenseFilter10 = org.apache.rat.license.LicenseSetFactory.LicenseFilter.all;
        org.apache.rat.Reporter.listLicenses(reportConfiguration8, licenseFilter10);
        org.apache.rat.Reporter.listLicenses(reportConfiguration1, licenseFilter10);
        reportConfiguration1.addApprovedLicenseCategory("W3C Software Copyright");
        java.lang.String str15 = reportConfiguration1.getCopyrightMessage();
        org.apache.commons.io.function.IOSupplier<java.io.PrintWriter> printWriterIOSupplier16 = reportConfiguration1.getWriter();
        org.apache.rat.utils.Log log17 = reportConfiguration1.getLog();
        reportConfiguration1.addApprovedLicenseCategory("c523095e-4421-4cc4-93e2-039f23b91f76 http://org/apache/rat/meta-data#ApprovedLicense");
        org.apache.rat.report.IReportable iReportable20 = reportConfiguration1.getReportable();
        org.junit.Assert.assertNull(filenameFilter2);
        org.junit.Assert.assertTrue("'" + licenseFilter3 + "' != '" + org.apache.rat.license.LicenseSetFactory.LicenseFilter.all + "'", licenseFilter3.equals(org.apache.rat.license.LicenseSetFactory.LicenseFilter.all));
        org.junit.Assert.assertNotNull(iLicenseSet4);
        org.junit.Assert.assertTrue("'" + addLicenseHeaders5 + "' != '" + org.apache.rat.config.AddLicenseHeaders.FALSE + "'", addLicenseHeaders5.equals(org.apache.rat.config.AddLicenseHeaders.FALSE));
        org.junit.Assert.assertNull(claimStatistic9);
        org.junit.Assert.assertTrue("'" + licenseFilter10 + "' != '" + org.apache.rat.license.LicenseSetFactory.LicenseFilter.all + "'", licenseFilter10.equals(org.apache.rat.license.LicenseSetFactory.LicenseFilter.all));
        org.junit.Assert.assertNull(str15);
        org.junit.Assert.assertNotNull(printWriterIOSupplier16);
        org.junit.Assert.assertNull(log17);
        org.junit.Assert.assertNull(iReportable20);
    }

    @Test
    public void test14621() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest29.test14621");
        org.apache.rat.configuration.builders.TextBuilder textBuilder0 = org.apache.rat.analysis.IHeaderMatcher.Builder.text();
        org.apache.rat.configuration.builders.TextBuilder textBuilder2 = textBuilder0.setText("");
        java.lang.String str3 = textBuilder0.toString();
        java.lang.String str4 = textBuilder0.toString();
        org.junit.Assert.assertNotNull(textBuilder0);
        org.junit.Assert.assertNotNull(textBuilder2);
        org.junit.Assert.assertEquals("'" + str3 + "' != '" + "TextBuilder: " + "'", str3, "TextBuilder: ");
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "TextBuilder: " + "'", str4, "TextBuilder: ");
    }

    @Test
    public void test14622() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest29.test14622");
        org.apache.rat.report.claim.ClaimStatistic claimStatistic0 = new org.apache.rat.report.claim.ClaimStatistic();
        java.util.Map<java.lang.String, java.lang.Integer> strMap1 = null;
        claimStatistic0.setDocumentCategoryMap(strMap1);
        java.util.Map<java.lang.String, java.lang.Integer> strMap3 = claimStatistic0.getLicenseFileCodeMap();
        claimStatistic0.setNumGenerated(100);
        int int6 = claimStatistic0.getNumApproved();
        org.junit.Assert.assertNull(strMap3);
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 0 + "'", int6 == 0);
    }

    @Test
    public void test14623() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest29.test14623");
        java.io.Writer writer0 = null;
        org.apache.rat.report.xml.writer.impl.base.XmlWriter xmlWriter1 = new org.apache.rat.report.xml.writer.impl.base.XmlWriter(writer0);
        org.apache.rat.report.claim.impl.xml.SimpleXmlClaimReporter simpleXmlClaimReporter2 = new org.apache.rat.report.claim.impl.xml.SimpleXmlClaimReporter((org.apache.rat.report.xml.writer.IXmlWriter) xmlWriter1);
        org.apache.rat.report.claim.impl.xml.SimpleXmlClaimReporter simpleXmlClaimReporter3 = new org.apache.rat.report.claim.impl.xml.SimpleXmlClaimReporter((org.apache.rat.report.xml.writer.IXmlWriter) xmlWriter1);
        org.apache.rat.report.claim.impl.xml.SimpleXmlClaimReporter simpleXmlClaimReporter4 = new org.apache.rat.report.claim.impl.xml.SimpleXmlClaimReporter((org.apache.rat.report.xml.writer.IXmlWriter) xmlWriter1);
        org.apache.rat.report.claim.impl.xml.SimpleXmlClaimReporter simpleXmlClaimReporter5 = new org.apache.rat.report.claim.impl.xml.SimpleXmlClaimReporter((org.apache.rat.report.xml.writer.IXmlWriter) xmlWriter1);
        org.apache.rat.report.claim.impl.xml.SimpleXmlClaimReporter simpleXmlClaimReporter6 = new org.apache.rat.report.claim.impl.xml.SimpleXmlClaimReporter((org.apache.rat.report.xml.writer.IXmlWriter) xmlWriter1);
        org.apache.rat.report.claim.impl.xml.SimpleXmlClaimReporter simpleXmlClaimReporter7 = new org.apache.rat.report.claim.impl.xml.SimpleXmlClaimReporter((org.apache.rat.report.xml.writer.IXmlWriter) xmlWriter1);
        org.apache.rat.report.claim.impl.xml.SimpleXmlClaimReporter simpleXmlClaimReporter8 = new org.apache.rat.report.claim.impl.xml.SimpleXmlClaimReporter((org.apache.rat.report.xml.writer.IXmlWriter) xmlWriter1);
        org.apache.rat.report.claim.impl.xml.SimpleXmlClaimReporter simpleXmlClaimReporter9 = new org.apache.rat.report.claim.impl.xml.SimpleXmlClaimReporter((org.apache.rat.report.xml.writer.IXmlWriter) xmlWriter1);
        org.apache.rat.report.claim.impl.xml.SimpleXmlClaimReporter simpleXmlClaimReporter10 = new org.apache.rat.report.claim.impl.xml.SimpleXmlClaimReporter((org.apache.rat.report.xml.writer.IXmlWriter) xmlWriter1);
        org.apache.rat.report.claim.impl.xml.SimpleXmlClaimReporter simpleXmlClaimReporter11 = new org.apache.rat.report.claim.impl.xml.SimpleXmlClaimReporter((org.apache.rat.report.xml.writer.IXmlWriter) xmlWriter1);
        org.apache.rat.report.claim.impl.xml.SimpleXmlClaimReporter simpleXmlClaimReporter12 = new org.apache.rat.report.claim.impl.xml.SimpleXmlClaimReporter((org.apache.rat.report.xml.writer.IXmlWriter) xmlWriter1);
        org.apache.rat.report.claim.impl.xml.SimpleXmlClaimReporter simpleXmlClaimReporter13 = new org.apache.rat.report.claim.impl.xml.SimpleXmlClaimReporter((org.apache.rat.report.xml.writer.IXmlWriter) xmlWriter1);
        org.apache.rat.report.claim.impl.xml.SimpleXmlClaimReporter simpleXmlClaimReporter14 = new org.apache.rat.report.claim.impl.xml.SimpleXmlClaimReporter((org.apache.rat.report.xml.writer.IXmlWriter) xmlWriter1);
        org.apache.rat.report.claim.impl.xml.SimpleXmlClaimReporter simpleXmlClaimReporter15 = new org.apache.rat.report.claim.impl.xml.SimpleXmlClaimReporter((org.apache.rat.report.xml.writer.IXmlWriter) xmlWriter1);
        org.apache.rat.report.claim.impl.xml.SimpleXmlClaimReporter simpleXmlClaimReporter16 = new org.apache.rat.report.claim.impl.xml.SimpleXmlClaimReporter((org.apache.rat.report.xml.writer.IXmlWriter) xmlWriter1);
        org.apache.rat.report.claim.impl.xml.SimpleXmlClaimReporter simpleXmlClaimReporter17 = new org.apache.rat.report.claim.impl.xml.SimpleXmlClaimReporter((org.apache.rat.report.xml.writer.IXmlWriter) xmlWriter1);
        // The following exception was thrown during execution in test generation
        try {
            org.apache.rat.report.xml.writer.IXmlWriter iXmlWriter19 = xmlWriter1.content((java.lang.CharSequence) "c4c5acb2-02ad-4f96-b6df-314bdbafc9ce");
            org.junit.Assert.fail("Expected exception of type org.apache.rat.report.xml.writer.OperationNotAllowedException; message: An element must be opened before content can be written.");
        } catch (org.apache.rat.report.xml.writer.OperationNotAllowedException e) {
            // Expected exception.
        }
    }

    @Test
    public void test14624() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest29.test14624");
        org.apache.rat.analysis.license.FullTextMatchingLicense fullTextMatchingLicense0 = new org.apache.rat.analysis.license.FullTextMatchingLicense();
        fullTextMatchingLicense0.setLicenseFamilyName("hi!");
        java.lang.String str3 = fullTextMatchingLicense0.getLicenseFamilyCategory();
        java.lang.String str4 = fullTextMatchingLicense0.getLicenseFamilyName();
        fullTextMatchingLicense0.setLicenseFamilyName("SpdxBuilder: null");
        fullTextMatchingLicense0.setLicenseFamilyCategory("TMF");
        org.apache.rat.license.ILicenseFamily iLicenseFamily9 = fullTextMatchingLicense0.getLicenseFamily();
        fullTextMatchingLicense0.setFullText("Datum [ name ='http://org/apache/rat/meta-data#LicenseFamilyName',value ='GNU General Public License, version 1 ']");
        java.lang.String str12 = fullTextMatchingLicense0.getLicenseFamilyCategory();
        fullTextMatchingLicense0.setFullText("true|false|forced");
        org.apache.rat.license.ILicense.Builder builder15 = fullTextMatchingLicense0.getLicense();
        org.apache.rat.license.ILicense.Builder builder16 = fullTextMatchingLicense0.getLicense();
        org.apache.rat.license.ILicenseFamily iLicenseFamily17 = fullTextMatchingLicense0.getLicenseFamily();
        org.junit.Assert.assertNull(str3);
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "hi!" + "'", str4, "hi!");
        org.junit.Assert.assertNotNull(iLicenseFamily9);
        org.junit.Assert.assertEquals("'" + str12 + "' != '" + "TMF" + "'", str12, "TMF");
        org.junit.Assert.assertNotNull(builder15);
        org.junit.Assert.assertNotNull(builder16);
        org.junit.Assert.assertNotNull(iLicenseFamily17);
    }

    @Test
    public void test14625() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest29.test14625");
        java.lang.String[] strArray5 = new java.lang.String[] { "http://org/apache/rat/meta-data#LicenseFamilyCategory", "Datum [ name ='http://org/apache/rat/meta-data#LicenseFamilyCategory',value ='GPL1  ']", "MANIFEST.MF", "AllBuilder:", "The MIT License" };
        org.apache.rat.utils.ReportingSet<java.lang.String> strSet6 = new org.apache.rat.utils.ReportingSet<java.lang.String>();
        boolean boolean7 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strSet6, strArray5);
        boolean boolean9 = strSet6.addIfNotPresent("http://org/apache/rat/meta-data#LicenseFamilyName");
        org.apache.rat.api.MetaData metaData10 = new org.apache.rat.api.MetaData();
        boolean boolean11 = strSet6.equals((java.lang.Object) metaData10);
        java.lang.String[] strArray17 = new java.lang.String[] { "http://org/apache/rat/meta-data#LicenseFamilyCategory", "Datum [ name ='http://org/apache/rat/meta-data#LicenseFamilyCategory',value ='GPL1  ']", "MANIFEST.MF", "AllBuilder:", "The MIT License" };
        org.apache.rat.utils.ReportingSet<java.lang.String> strSet18 = new org.apache.rat.utils.ReportingSet<java.lang.String>();
        boolean boolean19 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strSet18, strArray17);
        boolean boolean21 = strSet18.addIfNotPresent("http://org/apache/rat/meta-data#LicenseFamilyName");
        boolean boolean23 = strSet18.addIfNotPresent("ef7a8b13-64c3-4510-bb0c-dbf208e1e73f");
        java.util.function.Function<java.lang.String, java.lang.String> strFunction24 = null;
        org.apache.rat.utils.ReportingSet<java.lang.String> strSet25 = strSet18.setMsgFormat(strFunction24);
        java.lang.String str26 = strSet18.last();
        org.apache.rat.utils.ReportingSet<java.lang.String> strSet28 = strSet18.tailSet("ece24682-3459-4761-bb85-7fc8538fa181");
        java.lang.String str29 = strSet18.last();
        org.apache.rat.license.ILicenseFamily[] iLicenseFamilyArray30 = new org.apache.rat.license.ILicenseFamily[] {};
        java.util.ArrayList<org.apache.rat.license.ILicenseFamily> iLicenseFamilyList31 = new java.util.ArrayList<org.apache.rat.license.ILicenseFamily>();
        boolean boolean32 = java.util.Collections.addAll((java.util.Collection<org.apache.rat.license.ILicenseFamily>) iLicenseFamilyList31, iLicenseFamilyArray30);
        org.apache.rat.policy.DefaultPolicy defaultPolicy33 = new org.apache.rat.policy.DefaultPolicy((java.util.Collection<org.apache.rat.license.ILicenseFamily>) iLicenseFamilyList31);
        java.util.SortedSet<org.apache.rat.license.ILicenseFamily> iLicenseFamilySet34 = defaultPolicy33.getApprovedLicenseNames();
        org.apache.rat.api.Document document35 = null;
        defaultPolicy33.analyse(document35);
        java.util.SortedSet<org.apache.rat.license.ILicenseFamily> iLicenseFamilySet37 = defaultPolicy33.getApprovedLicenseNames();
        org.apache.rat.api.Document document38 = null;
        defaultPolicy33.analyse(document38);
        java.util.SortedSet<org.apache.rat.license.ILicenseFamily> iLicenseFamilySet40 = defaultPolicy33.getApprovedLicenseNames();
        boolean boolean41 = strSet18.removeAll((java.util.Collection<org.apache.rat.license.ILicenseFamily>) iLicenseFamilySet40);
        boolean boolean42 = strSet6.containsAll((java.util.Collection<org.apache.rat.license.ILicenseFamily>) iLicenseFamilySet40);
        org.junit.Assert.assertNotNull(strArray5);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + true + "'", boolean7 == true);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + true + "'", boolean9 == true);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
        org.junit.Assert.assertNotNull(strArray17);
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + true + "'", boolean19 == true);
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + true + "'", boolean21 == true);
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + true + "'", boolean23 == true);
        org.junit.Assert.assertNotNull(strSet25);
        org.junit.Assert.assertEquals("'" + str26 + "' != '" + "http://org/apache/rat/meta-data#LicenseFamilyName" + "'", str26, "http://org/apache/rat/meta-data#LicenseFamilyName");
        org.junit.Assert.assertNotNull(strSet28);
        org.junit.Assert.assertEquals("'" + str29 + "' != '" + "http://org/apache/rat/meta-data#LicenseFamilyName" + "'", str29, "http://org/apache/rat/meta-data#LicenseFamilyName");
        org.junit.Assert.assertNotNull(iLicenseFamilyArray30);
        org.junit.Assert.assertTrue("'" + boolean32 + "' != '" + false + "'", boolean32 == false);
        org.junit.Assert.assertNotNull(iLicenseFamilySet34);
        org.junit.Assert.assertNotNull(iLicenseFamilySet37);
        org.junit.Assert.assertNotNull(iLicenseFamilySet40);
        org.junit.Assert.assertTrue("'" + boolean41 + "' != '" + false + "'", boolean41 == false);
        org.junit.Assert.assertTrue("'" + boolean42 + "' != '" + true + "'", boolean42 == true);
    }

    @Test
    public void test14626() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest29.test14626");
        org.apache.rat.analysis.matchers.FullTextMatcher fullTextMatcher1 = new org.apache.rat.analysis.matchers.FullTextMatcher("0e4cf59d-6e23-47eb-854e-2c010e384f16");
        org.apache.rat.analysis.IHeaderMatcher.State state3 = fullTextMatcher1.matches("904bc88b-928c-4c8f-95f7-0cc95faab098");
        fullTextMatcher1.reset();
        org.apache.rat.analysis.IHeaderMatcher.State state6 = fullTextMatcher1.matches("GEN  ");
        org.junit.Assert.assertTrue("'" + state3 + "' != '" + org.apache.rat.analysis.IHeaderMatcher.State.i + "'", state3.equals(org.apache.rat.analysis.IHeaderMatcher.State.i));
        org.junit.Assert.assertTrue("'" + state6 + "' != '" + org.apache.rat.analysis.IHeaderMatcher.State.i + "'", state6.equals(org.apache.rat.analysis.IHeaderMatcher.State.i));
    }

    @Test
    public void test14627() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest29.test14627");
        java.io.File file0 = null;
        byte[] byteArray3 = new byte[] { (byte) 1, (byte) 1 };
        // The following exception was thrown during execution in test generation
        try {
            org.apache.rat.document.impl.ArchiveEntryDocument archiveEntryDocument4 = new org.apache.rat.document.impl.ArchiveEntryDocument(file0, byteArray3);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(byteArray3);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray3), "[1, 1]");
    }

    @Test
    public void test14628() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest29.test14628");
        org.apache.rat.configuration.builders.TextBuilder textBuilder0 = org.apache.rat.analysis.IHeaderMatcher.Builder.text();
        org.apache.rat.configuration.builders.TextBuilder textBuilder2 = textBuilder0.setText("");
        org.apache.rat.configuration.builders.TextBuilder textBuilder4 = textBuilder0.setText("Datum [ name ='http://org/apache/rat/meta-data#LicenseFamilyCategory',value ='DOJO  ']");
        org.apache.rat.configuration.builders.TextBuilder textBuilder6 = textBuilder4.setText("bc97cad8-1b92-449d-8dd7-6a0a69c8774d");
        org.apache.rat.configuration.builders.TextBuilder textBuilder8 = textBuilder4.setText("RegexBuilder67eb96c283b2456dbfb023ff916bf212");
        java.lang.String str9 = textBuilder4.toString();
        boolean boolean10 = textBuilder4.hasId();
        org.junit.Assert.assertNotNull(textBuilder0);
        org.junit.Assert.assertNotNull(textBuilder2);
        org.junit.Assert.assertNotNull(textBuilder4);
        org.junit.Assert.assertNotNull(textBuilder6);
        org.junit.Assert.assertNotNull(textBuilder8);
        org.junit.Assert.assertEquals("'" + str9 + "' != '" + "TextBuilder: RegexBuilder67eb96c2..." + "'", str9, "TextBuilder: RegexBuilder67eb96c2...");
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
    }

    @Test
    public void test14629() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest29.test14629");
        org.apache.rat.configuration.builders.TextBuilder textBuilder0 = new org.apache.rat.configuration.builders.TextBuilder();
        org.apache.rat.configuration.builders.TextBuilder textBuilder2 = textBuilder0.setText("t true");
        org.apache.rat.analysis.IHeaderMatcher iHeaderMatcher3 = textBuilder0.build();
        org.apache.rat.analysis.IHeaderMatcher iHeaderMatcher4 = textBuilder0.build();
        org.apache.rat.configuration.builders.TextBuilder textBuilder6 = textBuilder0.setText("null http://org/apache/rat/meta-data#LicenseFamilyName");
        org.apache.rat.analysis.IHeaderMatcher iHeaderMatcher7 = textBuilder6.build();
        org.apache.rat.configuration.builders.TextBuilder textBuilder9 = textBuilder6.setText(".giti");
        org.apache.rat.configuration.builders.TextBuilder textBuilder11 = textBuilder6.setText("b02ae01b-da48-4f95-b825-8ab7c1751418");
        org.apache.rat.configuration.builders.TextBuilder textBuilder13 = textBuilder11.setText("2a9c4fbb-1cac-42b2-a01d-6ca9b606c9d9");
        org.junit.Assert.assertNotNull(textBuilder2);
        org.junit.Assert.assertNotNull(iHeaderMatcher3);
        org.junit.Assert.assertNotNull(iHeaderMatcher4);
        org.junit.Assert.assertNotNull(textBuilder6);
        org.junit.Assert.assertNotNull(iHeaderMatcher7);
        org.junit.Assert.assertNotNull(textBuilder9);
        org.junit.Assert.assertNotNull(textBuilder11);
        org.junit.Assert.assertNotNull(textBuilder13);
    }

    @Test
    public void test14630() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest29.test14630");
        org.apache.rat.analysis.matchers.FullTextMatcher fullTextMatcher2 = new org.apache.rat.analysis.matchers.FullTextMatcher("ff805", "AnyBuilder:\nAllBuilder:\nMathcerRefBuilder: null\nAllBuilder:\nCopyright Builder: s:223f0aba-15d4-49e9-901e-5740c137aebf e:null o:null\nMathcerRefBuilder: null\nCopyright Builder: s:223f0aba-15d4-49e9-901e-5740c137aebf e:null o:null\nCopyright Builder: s:null e:null o:null\nCopyright Builder: s:null e:.cvsignore o:null\nCopyright Builder: s:null e:.cvsignore o:null\nCopyright Builder: s:OASIS e:null o:null\nAnyBuilder:\nMathcerRefBuilder: null\nCopyright Builder: s:null e:null o:null\nMathcerRefBuilder: null");
    }

    @Test
    public void test14631() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest29.test14631");
        org.apache.rat.api.MetaData metaData0 = new org.apache.rat.api.MetaData();
        java.lang.String str2 = metaData0.value("COMMON DEVELOPMENT AND DISTRIBUTION LICENSE Version 1.0");
        java.lang.String str4 = metaData0.value("W3C Document Copyright");
        boolean boolean6 = metaData0.clear("hi!");
        java.lang.String str8 = metaData0.value("true");
        metaData0.clear();
        org.apache.rat.api.MetaData.Datum datum11 = metaData0.get("W3C  ");
        org.apache.rat.api.MetaData metaData12 = new org.apache.rat.api.MetaData();
        java.lang.String str14 = metaData12.value("COMMON DEVELOPMENT AND DISTRIBUTION LICENSE Version 1.0");
        java.util.Collection<org.apache.rat.api.MetaData.Datum> datumCollection15 = metaData12.getData();
        java.lang.String str17 = metaData12.value("hi!");
        boolean boolean19 = metaData12.clear("6481fb19-38f0-43f5-ab95-caf84a069ee1");
        org.apache.rat.api.MetaData.Datum datum20 = org.apache.rat.api.MetaData.RAT_LICENSE_FAMILY_NAME_DATUM_APACHE_LICENSE_VERSION_2_0;
        metaData12.set(datum20);
        metaData0.add(datum20);
        java.lang.String str23 = datum20.getName();
        org.junit.Assert.assertNull(str2);
        org.junit.Assert.assertNull(str4);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertNull(str8);
        org.junit.Assert.assertNull(datum11);
        org.junit.Assert.assertNull(str14);
        org.junit.Assert.assertNotNull(datumCollection15);
        org.junit.Assert.assertNull(str17);
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + false + "'", boolean19 == false);
        org.junit.Assert.assertNotNull(datum20);
        org.junit.Assert.assertEquals("'" + str23 + "' != '" + "http://org/apache/rat/meta-data#LicenseFamilyName" + "'", str23, "http://org/apache/rat/meta-data#LicenseFamilyName");
    }

    @Test
    public void test14632() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest29.test14632");
        org.apache.rat.api.MetaData metaData0 = new org.apache.rat.api.MetaData();
        java.lang.String str2 = metaData0.value("COMMON DEVELOPMENT AND DISTRIBUTION LICENSE Version 1.0");
        org.apache.rat.api.MetaData.Datum datum3 = org.apache.rat.api.MetaData.RAT_LICENSE_FAMILY_CATEGORY_DATUM_DOJO;
        java.lang.String str4 = datum3.toString();
        java.lang.String str5 = datum3.getName();
        metaData0.add(datum3);
        java.util.Collection<org.apache.rat.api.MetaData.Datum> datumCollection7 = metaData0.getData();
        java.util.Collection<org.apache.rat.api.MetaData.Datum> datumCollection8 = metaData0.getData();
        org.apache.rat.Defaults.Builder builder10 = org.apache.rat.Defaults.builder();
        org.apache.rat.Defaults defaults11 = builder10.build();
        org.apache.rat.utils.Log log12 = null;
        org.apache.rat.ReportConfiguration reportConfiguration13 = new org.apache.rat.ReportConfiguration(log12);
        java.io.FilenameFilter filenameFilter14 = reportConfiguration13.getInputFileFilter();
        org.apache.rat.license.LicenseSetFactory.LicenseFilter licenseFilter15 = org.apache.rat.license.LicenseSetFactory.LicenseFilter.all;
        java.util.SortedSet<org.apache.rat.license.ILicense> iLicenseSet16 = reportConfiguration13.getLicenses(licenseFilter15);
        org.apache.rat.config.AddLicenseHeaders addLicenseHeaders17 = org.apache.rat.config.AddLicenseHeaders.FALSE;
        reportConfiguration13.setAddLicenseHeaders(addLicenseHeaders17);
        org.apache.rat.utils.Log log19 = null;
        org.apache.rat.ReportConfiguration reportConfiguration20 = new org.apache.rat.ReportConfiguration(log19);
        org.apache.rat.report.claim.ClaimStatistic claimStatistic21 = org.apache.rat.Reporter.report(reportConfiguration20);
        org.apache.rat.license.LicenseSetFactory.LicenseFilter licenseFilter22 = org.apache.rat.license.LicenseSetFactory.LicenseFilter.all;
        org.apache.rat.Reporter.listLicenses(reportConfiguration20, licenseFilter22);
        org.apache.rat.Reporter.listLicenses(reportConfiguration13, licenseFilter22);
        org.apache.rat.utils.Log log25 = null;
        org.apache.rat.ReportConfiguration reportConfiguration26 = new org.apache.rat.ReportConfiguration(log25);
        java.io.FilenameFilter filenameFilter27 = reportConfiguration26.getInputFileFilter();
        org.apache.rat.license.LicenseSetFactory.LicenseFilter licenseFilter28 = org.apache.rat.license.LicenseSetFactory.LicenseFilter.all;
        java.util.SortedSet<org.apache.rat.license.ILicense> iLicenseSet29 = reportConfiguration26.getLicenses(licenseFilter28);
        org.apache.rat.config.AddLicenseHeaders addLicenseHeaders30 = org.apache.rat.config.AddLicenseHeaders.FALSE;
        reportConfiguration26.setAddLicenseHeaders(addLicenseHeaders30);
        org.apache.rat.utils.Log log32 = null;
        org.apache.rat.ReportConfiguration reportConfiguration33 = new org.apache.rat.ReportConfiguration(log32);
        org.apache.rat.report.claim.ClaimStatistic claimStatistic34 = org.apache.rat.Reporter.report(reportConfiguration33);
        org.apache.rat.license.LicenseSetFactory.LicenseFilter licenseFilter35 = org.apache.rat.license.LicenseSetFactory.LicenseFilter.all;
        org.apache.rat.Reporter.listLicenses(reportConfiguration33, licenseFilter35);
        org.apache.rat.Reporter.listLicenses(reportConfiguration26, licenseFilter35);
        java.util.SortedSet<org.apache.rat.license.ILicenseFamily> iLicenseFamilySet38 = reportConfiguration13.getLicenseFamilies(licenseFilter35);
        java.util.SortedSet<org.apache.rat.license.ILicense> iLicenseSet39 = defaults11.getLicenses(licenseFilter35);
        org.apache.rat.utils.ReportingSet<org.apache.rat.license.ILicense> iLicenseSet40 = new org.apache.rat.utils.ReportingSet<org.apache.rat.license.ILicense>(iLicenseSet39);
        org.apache.rat.license.ILicense iLicense41 = org.apache.rat.license.LicenseSetFactory.search("TMF", iLicenseSet39);
        java.lang.String str42 = iLicense41.derivedFrom();
        java.lang.String str43 = iLicense41.getNotes();
        org.apache.rat.license.ILicenseFamily iLicenseFamily44 = iLicense41.getLicenseFamily();
        metaData0.reportOnLicense(iLicense41);
        org.junit.Assert.assertNull(str2);
        org.junit.Assert.assertNotNull(datum3);
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "Datum [ name ='http://org/apache/rat/meta-data#LicenseFamilyCategory',value ='DOJO  ']" + "'", str4, "Datum [ name ='http://org/apache/rat/meta-data#LicenseFamilyCategory',value ='DOJO  ']");
        org.junit.Assert.assertEquals("'" + str5 + "' != '" + "http://org/apache/rat/meta-data#LicenseFamilyCategory" + "'", str5, "http://org/apache/rat/meta-data#LicenseFamilyCategory");
        org.junit.Assert.assertNotNull(datumCollection7);
        org.junit.Assert.assertNotNull(datumCollection8);
        org.junit.Assert.assertNotNull(builder10);
        org.junit.Assert.assertNotNull(defaults11);
        org.junit.Assert.assertNull(filenameFilter14);
        org.junit.Assert.assertTrue("'" + licenseFilter15 + "' != '" + org.apache.rat.license.LicenseSetFactory.LicenseFilter.all + "'", licenseFilter15.equals(org.apache.rat.license.LicenseSetFactory.LicenseFilter.all));
        org.junit.Assert.assertNotNull(iLicenseSet16);
        org.junit.Assert.assertTrue("'" + addLicenseHeaders17 + "' != '" + org.apache.rat.config.AddLicenseHeaders.FALSE + "'", addLicenseHeaders17.equals(org.apache.rat.config.AddLicenseHeaders.FALSE));
        org.junit.Assert.assertNull(claimStatistic21);
        org.junit.Assert.assertTrue("'" + licenseFilter22 + "' != '" + org.apache.rat.license.LicenseSetFactory.LicenseFilter.all + "'", licenseFilter22.equals(org.apache.rat.license.LicenseSetFactory.LicenseFilter.all));
        org.junit.Assert.assertNull(filenameFilter27);
        org.junit.Assert.assertTrue("'" + licenseFilter28 + "' != '" + org.apache.rat.license.LicenseSetFactory.LicenseFilter.all + "'", licenseFilter28.equals(org.apache.rat.license.LicenseSetFactory.LicenseFilter.all));
        org.junit.Assert.assertNotNull(iLicenseSet29);
        org.junit.Assert.assertTrue("'" + addLicenseHeaders30 + "' != '" + org.apache.rat.config.AddLicenseHeaders.FALSE + "'", addLicenseHeaders30.equals(org.apache.rat.config.AddLicenseHeaders.FALSE));
        org.junit.Assert.assertNull(claimStatistic34);
        org.junit.Assert.assertTrue("'" + licenseFilter35 + "' != '" + org.apache.rat.license.LicenseSetFactory.LicenseFilter.all + "'", licenseFilter35.equals(org.apache.rat.license.LicenseSetFactory.LicenseFilter.all));
        org.junit.Assert.assertNotNull(iLicenseFamilySet38);
        org.junit.Assert.assertNotNull(iLicenseSet39);
        org.junit.Assert.assertNotNull(iLicense41);
        org.junit.Assert.assertEquals("'" + str42 + "' != '" + "BSD-3" + "'", str42, "BSD-3");
        org.junit.Assert.assertNull(str43);
        org.junit.Assert.assertNotNull(iLicenseFamily44);
    }

    @Test
    public void test14633() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest29.test14633");
        // The following exception was thrown during execution in test generation
        try {
            org.apache.rat.configuration.builders.AbstractBuilder abstractBuilder1 = org.apache.rat.configuration.MatcherBuilderTracker.getMatcherBuilder("50c28f7d-da22-40ef-b49c-a556a6e26ddc");
            org.junit.Assert.fail("Expected exception of type org.apache.rat.ConfigurationException; message: ?Valid builders?all?matcherRef?copyright?not?regex?spdx?text?any?ERROR MSG?No matcher builder named 50c28f7d-da22-40ef-b49c-a556a6e26ddc");
        } catch (org.apache.rat.ConfigurationException e) {
            // Expected exception.
        }
    }

    @Test
    public void test14634() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest29.test14634");
        org.apache.rat.license.ILicense[] iLicenseArray0 = new org.apache.rat.license.ILicense[] {};
        java.util.TreeSet<org.apache.rat.license.ILicense> iLicenseSet1 = new java.util.TreeSet<org.apache.rat.license.ILicense>();
        boolean boolean2 = java.util.Collections.addAll((java.util.Collection<org.apache.rat.license.ILicense>) iLicenseSet1, iLicenseArray0);
        java.lang.String[] strArray15 = new java.lang.String[] { "GPL2 ", "GPL1 ", "notice", "http://org/apache/rat/meta-data#LicenseFamilyName", "notice", "GPL2 ", "http://org/apache/rat/meta-data#LicenseFamilyName", "", "GPL2 ", "", "GPL1 ", "hi!" };
        java.util.ArrayList<java.lang.String> strList16 = new java.util.ArrayList<java.lang.String>();
        boolean boolean17 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strList16, strArray15);
        org.apache.rat.license.LicenseSetFactory licenseSetFactory18 = new org.apache.rat.license.LicenseSetFactory((java.util.SortedSet<org.apache.rat.license.ILicense>) iLicenseSet1, (java.util.Collection<java.lang.String>) strList16);
        org.apache.rat.license.LicenseSetFactory.LicenseFilter licenseFilter19 = org.apache.rat.license.LicenseSetFactory.LicenseFilter.all;
        java.util.SortedSet<org.apache.rat.license.ILicenseFamily> iLicenseFamilySet20 = licenseSetFactory18.getLicenseFamilies(licenseFilter19);
        org.apache.rat.license.ILicense[] iLicenseArray21 = new org.apache.rat.license.ILicense[] {};
        java.util.TreeSet<org.apache.rat.license.ILicense> iLicenseSet22 = new java.util.TreeSet<org.apache.rat.license.ILicense>();
        boolean boolean23 = java.util.Collections.addAll((java.util.Collection<org.apache.rat.license.ILicense>) iLicenseSet22, iLicenseArray21);
        java.lang.String[] strArray36 = new java.lang.String[] { "GPL2 ", "GPL1 ", "notice", "http://org/apache/rat/meta-data#LicenseFamilyName", "notice", "GPL2 ", "http://org/apache/rat/meta-data#LicenseFamilyName", "", "GPL2 ", "", "GPL1 ", "hi!" };
        java.util.ArrayList<java.lang.String> strList37 = new java.util.ArrayList<java.lang.String>();
        boolean boolean38 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strList37, strArray36);
        org.apache.rat.license.LicenseSetFactory licenseSetFactory39 = new org.apache.rat.license.LicenseSetFactory((java.util.SortedSet<org.apache.rat.license.ILicense>) iLicenseSet22, (java.util.Collection<java.lang.String>) strList37);
        org.apache.rat.utils.Log log40 = null;
        org.apache.rat.ReportConfiguration reportConfiguration41 = new org.apache.rat.ReportConfiguration(log40);
        java.io.FilenameFilter filenameFilter42 = reportConfiguration41.getInputFileFilter();
        org.apache.rat.license.LicenseSetFactory.LicenseFilter licenseFilter43 = org.apache.rat.license.LicenseSetFactory.LicenseFilter.all;
        java.util.SortedSet<org.apache.rat.license.ILicense> iLicenseSet44 = reportConfiguration41.getLicenses(licenseFilter43);
        org.apache.rat.config.AddLicenseHeaders addLicenseHeaders45 = org.apache.rat.config.AddLicenseHeaders.FALSE;
        reportConfiguration41.setAddLicenseHeaders(addLicenseHeaders45);
        org.apache.rat.utils.Log log47 = null;
        org.apache.rat.ReportConfiguration reportConfiguration48 = new org.apache.rat.ReportConfiguration(log47);
        org.apache.rat.report.claim.ClaimStatistic claimStatistic49 = org.apache.rat.Reporter.report(reportConfiguration48);
        org.apache.rat.license.LicenseSetFactory.LicenseFilter licenseFilter50 = org.apache.rat.license.LicenseSetFactory.LicenseFilter.all;
        org.apache.rat.Reporter.listLicenses(reportConfiguration48, licenseFilter50);
        org.apache.rat.Reporter.listLicenses(reportConfiguration41, licenseFilter50);
        org.apache.rat.utils.Log log53 = null;
        org.apache.rat.ReportConfiguration reportConfiguration54 = new org.apache.rat.ReportConfiguration(log53);
        java.io.FilenameFilter filenameFilter55 = reportConfiguration54.getInputFileFilter();
        org.apache.rat.license.LicenseSetFactory.LicenseFilter licenseFilter56 = org.apache.rat.license.LicenseSetFactory.LicenseFilter.all;
        java.util.SortedSet<org.apache.rat.license.ILicense> iLicenseSet57 = reportConfiguration54.getLicenses(licenseFilter56);
        org.apache.rat.config.AddLicenseHeaders addLicenseHeaders58 = org.apache.rat.config.AddLicenseHeaders.FALSE;
        reportConfiguration54.setAddLicenseHeaders(addLicenseHeaders58);
        org.apache.rat.utils.Log log60 = null;
        org.apache.rat.ReportConfiguration reportConfiguration61 = new org.apache.rat.ReportConfiguration(log60);
        org.apache.rat.report.claim.ClaimStatistic claimStatistic62 = org.apache.rat.Reporter.report(reportConfiguration61);
        org.apache.rat.license.LicenseSetFactory.LicenseFilter licenseFilter63 = org.apache.rat.license.LicenseSetFactory.LicenseFilter.all;
        org.apache.rat.Reporter.listLicenses(reportConfiguration61, licenseFilter63);
        org.apache.rat.Reporter.listLicenses(reportConfiguration54, licenseFilter63);
        org.apache.rat.Reporter.listLicenses(reportConfiguration41, licenseFilter63);
        java.util.SortedSet<org.apache.rat.license.ILicense> iLicenseSet67 = licenseSetFactory39.getLicenses(licenseFilter63);
        java.util.SortedSet<org.apache.rat.license.ILicenseFamily> iLicenseFamilySet68 = licenseSetFactory18.getLicenseFamilies(licenseFilter63);
        org.apache.rat.policy.DefaultPolicy defaultPolicy69 = new org.apache.rat.policy.DefaultPolicy((java.util.Collection<org.apache.rat.license.ILicenseFamily>) iLicenseFamilySet68);
        org.apache.rat.api.Document document70 = null;
        defaultPolicy69.analyse(document70);
        java.util.SortedSet<org.apache.rat.license.ILicenseFamily> iLicenseFamilySet72 = defaultPolicy69.getApprovedLicenseNames();
        org.apache.rat.policy.DefaultPolicy defaultPolicy73 = new org.apache.rat.policy.DefaultPolicy((java.util.Collection<org.apache.rat.license.ILicenseFamily>) iLicenseFamilySet72);
        org.apache.rat.api.Document document74 = null;
        defaultPolicy73.analyse(document74);
        org.apache.rat.analysis.license.FullTextMatchingLicense fullTextMatchingLicense76 = new org.apache.rat.analysis.license.FullTextMatchingLicense();
        fullTextMatchingLicense76.setLicenseFamilyName("hi!");
        java.lang.String str79 = fullTextMatchingLicense76.getLicenseFamilyCategory();
        java.lang.String str80 = fullTextMatchingLicense76.getLicenseFamilyName();
        fullTextMatchingLicense76.setLicenseFamilyName("SpdxBuilder: null");
        fullTextMatchingLicense76.setLicenseFamilyCategory("TMF");
        fullTextMatchingLicense76.setFullText("W3C  ");
        java.lang.String str87 = fullTextMatchingLicense76.getLicenseFamilyCategory();
        fullTextMatchingLicense76.setLicenseFamilyCategory("http://org/apache/rat/meta-data#ApprovedLicense");
        org.apache.rat.license.ILicenseFamily iLicenseFamily90 = fullTextMatchingLicense76.getLicenseFamily();
        defaultPolicy73.add(iLicenseFamily90);
        java.util.SortedSet<org.apache.rat.license.ILicenseFamily> iLicenseFamilySet92 = defaultPolicy73.getApprovedLicenseNames();
        org.apache.rat.policy.DefaultPolicy defaultPolicy93 = new org.apache.rat.policy.DefaultPolicy((java.util.Collection<org.apache.rat.license.ILicenseFamily>) iLicenseFamilySet92);
        org.junit.Assert.assertNotNull(iLicenseArray0);
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + false + "'", boolean2 == false);
        org.junit.Assert.assertNotNull(strArray15);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + true + "'", boolean17 == true);
        org.junit.Assert.assertTrue("'" + licenseFilter19 + "' != '" + org.apache.rat.license.LicenseSetFactory.LicenseFilter.all + "'", licenseFilter19.equals(org.apache.rat.license.LicenseSetFactory.LicenseFilter.all));
        org.junit.Assert.assertNotNull(iLicenseFamilySet20);
        org.junit.Assert.assertNotNull(iLicenseArray21);
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + false + "'", boolean23 == false);
        org.junit.Assert.assertNotNull(strArray36);
        org.junit.Assert.assertTrue("'" + boolean38 + "' != '" + true + "'", boolean38 == true);
        org.junit.Assert.assertNull(filenameFilter42);
        org.junit.Assert.assertTrue("'" + licenseFilter43 + "' != '" + org.apache.rat.license.LicenseSetFactory.LicenseFilter.all + "'", licenseFilter43.equals(org.apache.rat.license.LicenseSetFactory.LicenseFilter.all));
        org.junit.Assert.assertNotNull(iLicenseSet44);
        org.junit.Assert.assertTrue("'" + addLicenseHeaders45 + "' != '" + org.apache.rat.config.AddLicenseHeaders.FALSE + "'", addLicenseHeaders45.equals(org.apache.rat.config.AddLicenseHeaders.FALSE));
        org.junit.Assert.assertNull(claimStatistic49);
        org.junit.Assert.assertTrue("'" + licenseFilter50 + "' != '" + org.apache.rat.license.LicenseSetFactory.LicenseFilter.all + "'", licenseFilter50.equals(org.apache.rat.license.LicenseSetFactory.LicenseFilter.all));
        org.junit.Assert.assertNull(filenameFilter55);
        org.junit.Assert.assertTrue("'" + licenseFilter56 + "' != '" + org.apache.rat.license.LicenseSetFactory.LicenseFilter.all + "'", licenseFilter56.equals(org.apache.rat.license.LicenseSetFactory.LicenseFilter.all));
        org.junit.Assert.assertNotNull(iLicenseSet57);
        org.junit.Assert.assertTrue("'" + addLicenseHeaders58 + "' != '" + org.apache.rat.config.AddLicenseHeaders.FALSE + "'", addLicenseHeaders58.equals(org.apache.rat.config.AddLicenseHeaders.FALSE));
        org.junit.Assert.assertNull(claimStatistic62);
        org.junit.Assert.assertTrue("'" + licenseFilter63 + "' != '" + org.apache.rat.license.LicenseSetFactory.LicenseFilter.all + "'", licenseFilter63.equals(org.apache.rat.license.LicenseSetFactory.LicenseFilter.all));
        org.junit.Assert.assertNotNull(iLicenseSet67);
        org.junit.Assert.assertNotNull(iLicenseFamilySet68);
        org.junit.Assert.assertNotNull(iLicenseFamilySet72);
        org.junit.Assert.assertNull(str79);
        org.junit.Assert.assertEquals("'" + str80 + "' != '" + "hi!" + "'", str80, "hi!");
        org.junit.Assert.assertEquals("'" + str87 + "' != '" + "TMF" + "'", str87, "TMF");
        org.junit.Assert.assertNotNull(iLicenseFamily90);
        org.junit.Assert.assertNotNull(iLicenseFamilySet92);
    }

    @Test
    public void test14635() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest29.test14635");
        org.apache.rat.analysis.matchers.FullTextMatcher fullTextMatcher1 = new org.apache.rat.analysis.matchers.FullTextMatcher("77509541-7301-4b4f-b283-f39fe4654431");
    }

    @Test
    public void test14636() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest29.test14636");
        org.apache.rat.utils.DefaultLog defaultLog0 = org.apache.rat.utils.DefaultLog.INSTANCE;
        org.apache.rat.license.ILicense.Builder builder1 = org.apache.rat.license.ILicense.builder();
        org.apache.rat.license.ILicense.Builder builder3 = builder1.setLicenseFamilyCategory("");
        org.apache.rat.analysis.matchers.CopyrightMatcher copyrightMatcher7 = new org.apache.rat.analysis.matchers.CopyrightMatcher("", "GPL1 ", "hi!");
        org.apache.rat.analysis.IHeaderMatcher.State state8 = copyrightMatcher7.finalizeState();
        org.apache.rat.license.ILicense.Builder builder9 = builder3.setMatcher((org.apache.rat.analysis.IHeaderMatcher) copyrightMatcher7);
        org.apache.rat.license.ILicense.Builder builder11 = builder9.setLicenseFamilyCategory("");
        defaultLog0.error((java.lang.Object) builder11);
        org.apache.rat.ReportConfiguration reportConfiguration13 = new org.apache.rat.ReportConfiguration((org.apache.rat.utils.Log) defaultLog0);
        org.apache.rat.license.SimpleLicenseFamily simpleLicenseFamily14 = new org.apache.rat.license.SimpleLicenseFamily();
        java.lang.String str15 = simpleLicenseFamily14.getFamilyName();
        java.lang.String str16 = simpleLicenseFamily14.getFamilyCategory();
        simpleLicenseFamily14.setFamilyCategory("W3C  ");
        java.lang.String str19 = simpleLicenseFamily14.getFamilyName();
        simpleLicenseFamily14.setFamilyCategory("223f0aba-15d4-49e9-901e-5740c137aebf");
        simpleLicenseFamily14.setFamilyCategory("Copyright Builder: s:null e:.cvsignore o:GPL1 ");
        simpleLicenseFamily14.setFamilyCategory("");
        defaultLog0.error((java.lang.Object) "");
        org.apache.rat.annotation.ApacheV2LicenseAppender apacheV2LicenseAppender27 = new org.apache.rat.annotation.ApacheV2LicenseAppender((org.apache.rat.utils.Log) defaultLog0);
        java.lang.Object obj28 = null;
        defaultLog0.error(obj28);
        org.apache.rat.utils.DefaultLog defaultLog30 = org.apache.rat.utils.DefaultLog.INSTANCE;
        org.apache.rat.annotation.ApacheV2LicenseAppender apacheV2LicenseAppender32 = new org.apache.rat.annotation.ApacheV2LicenseAppender((org.apache.rat.utils.Log) defaultLog30, "2953e6cb-20a5-4dcf-a9f5-85c51cc8c635");
        org.apache.rat.utils.Log.Level level33 = defaultLog30.getLevel();
        org.apache.rat.utils.Log.Level level34 = org.apache.rat.utils.Log.Level.DEBUG;
        defaultLog30.log(level34, "W3CD ");
        org.apache.rat.document.ToNameTransformer toNameTransformer37 = new org.apache.rat.document.ToNameTransformer();
        org.apache.rat.utils.DefaultLog defaultLog38 = org.apache.rat.utils.DefaultLog.INSTANCE;
        org.apache.rat.license.ILicense.Builder builder39 = org.apache.rat.license.ILicense.builder();
        org.apache.rat.license.ILicense.Builder builder41 = builder39.setLicenseFamilyCategory("");
        org.apache.rat.analysis.matchers.CopyrightMatcher copyrightMatcher45 = new org.apache.rat.analysis.matchers.CopyrightMatcher("", "GPL1 ", "hi!");
        org.apache.rat.analysis.IHeaderMatcher.State state46 = copyrightMatcher45.finalizeState();
        org.apache.rat.license.ILicense.Builder builder47 = builder41.setMatcher((org.apache.rat.analysis.IHeaderMatcher) copyrightMatcher45);
        org.apache.rat.license.ILicense.Builder builder49 = builder47.setLicenseFamilyCategory("");
        defaultLog38.error((java.lang.Object) builder49);
        java.lang.Object obj51 = toNameTransformer37.transform((java.lang.Object) defaultLog38);
        org.apache.rat.document.ToNameTransformer toNameTransformer52 = new org.apache.rat.document.ToNameTransformer();
        org.apache.rat.utils.DefaultLog defaultLog53 = org.apache.rat.utils.DefaultLog.INSTANCE;
        org.apache.rat.license.ILicense.Builder builder54 = org.apache.rat.license.ILicense.builder();
        org.apache.rat.license.ILicense.Builder builder56 = builder54.setLicenseFamilyCategory("");
        org.apache.rat.analysis.matchers.CopyrightMatcher copyrightMatcher60 = new org.apache.rat.analysis.matchers.CopyrightMatcher("", "GPL1 ", "hi!");
        org.apache.rat.analysis.IHeaderMatcher.State state61 = copyrightMatcher60.finalizeState();
        org.apache.rat.license.ILicense.Builder builder62 = builder56.setMatcher((org.apache.rat.analysis.IHeaderMatcher) copyrightMatcher60);
        org.apache.rat.license.ILicense.Builder builder64 = builder62.setLicenseFamilyCategory("");
        defaultLog53.error((java.lang.Object) builder64);
        java.lang.Object obj66 = toNameTransformer52.transform((java.lang.Object) defaultLog53);
        org.apache.rat.utils.Log log67 = null;
        org.apache.rat.ReportConfiguration reportConfiguration68 = new org.apache.rat.ReportConfiguration(log67);
        org.apache.rat.report.claim.ClaimStatistic claimStatistic69 = org.apache.rat.Reporter.report(reportConfiguration68);
        org.apache.rat.utils.Log log70 = null;
        org.apache.rat.ReportConfiguration reportConfiguration71 = new org.apache.rat.ReportConfiguration(log70);
        org.apache.rat.report.claim.ClaimStatistic claimStatistic72 = org.apache.rat.Reporter.report(reportConfiguration71);
        org.apache.rat.utils.ReportingSet.Options options73 = org.apache.rat.utils.ReportingSet.Options.OVERWRITE;
        reportConfiguration71.licenseDuplicateOption(options73);
        reportConfiguration68.familyDuplicateOption(options73);
        org.apache.commons.io.function.IOSupplier<java.io.PrintWriter> printWriterIOSupplier76 = reportConfiguration68.getWriter();
        boolean boolean77 = reportConfiguration68.isAddingLicensesForced();
        org.apache.rat.utils.Log log78 = null;
        org.apache.rat.ReportConfiguration reportConfiguration79 = new org.apache.rat.ReportConfiguration(log78);
        reportConfiguration79.addApprovedLicenseCategory(".cvsignore");
        org.apache.rat.utils.Log.Level level82 = org.apache.rat.utils.Log.Level.ERROR;
        reportConfiguration79.logFamilyCollisions(level82);
        reportConfiguration68.logLicenseCollisions(level82);
        defaultLog53.setLevel(level82);
        defaultLog38.setLevel(level82);
        defaultLog30.log(level82, "f1fc8dc8-990d-4a2d-9540-4e9ece3bd92c");
        defaultLog0.setLevel(level82);
        org.junit.Assert.assertNotNull(defaultLog0);
        org.junit.Assert.assertNotNull(builder1);
        org.junit.Assert.assertNotNull(builder3);
        org.junit.Assert.assertTrue("'" + state8 + "' != '" + org.apache.rat.analysis.IHeaderMatcher.State.f + "'", state8.equals(org.apache.rat.analysis.IHeaderMatcher.State.f));
        org.junit.Assert.assertNotNull(builder9);
        org.junit.Assert.assertNotNull(builder11);
        org.junit.Assert.assertNull(str15);
        org.junit.Assert.assertNull(str16);
        org.junit.Assert.assertNull(str19);
        org.junit.Assert.assertNotNull(defaultLog30);
        org.junit.Assert.assertTrue("'" + level33 + "' != '" + org.apache.rat.utils.Log.Level.ERROR + "'", level33.equals(org.apache.rat.utils.Log.Level.ERROR));
        org.junit.Assert.assertTrue("'" + level34 + "' != '" + org.apache.rat.utils.Log.Level.DEBUG + "'", level34.equals(org.apache.rat.utils.Log.Level.DEBUG));
        org.junit.Assert.assertNotNull(defaultLog38);
        org.junit.Assert.assertNotNull(builder39);
        org.junit.Assert.assertNotNull(builder41);
        org.junit.Assert.assertTrue("'" + state46 + "' != '" + org.apache.rat.analysis.IHeaderMatcher.State.f + "'", state46.equals(org.apache.rat.analysis.IHeaderMatcher.State.f));
        org.junit.Assert.assertNotNull(builder47);
        org.junit.Assert.assertNotNull(builder49);
        org.junit.Assert.assertNull(obj51);
        org.junit.Assert.assertNotNull(defaultLog53);
        org.junit.Assert.assertNotNull(builder54);
        org.junit.Assert.assertNotNull(builder56);
        org.junit.Assert.assertTrue("'" + state61 + "' != '" + org.apache.rat.analysis.IHeaderMatcher.State.f + "'", state61.equals(org.apache.rat.analysis.IHeaderMatcher.State.f));
        org.junit.Assert.assertNotNull(builder62);
        org.junit.Assert.assertNotNull(builder64);
        org.junit.Assert.assertNull(obj66);
        org.junit.Assert.assertNull(claimStatistic69);
        org.junit.Assert.assertNull(claimStatistic72);
        org.junit.Assert.assertTrue("'" + options73 + "' != '" + org.apache.rat.utils.ReportingSet.Options.OVERWRITE + "'", options73.equals(org.apache.rat.utils.ReportingSet.Options.OVERWRITE));
        org.junit.Assert.assertNotNull(printWriterIOSupplier76);
        org.junit.Assert.assertTrue("'" + boolean77 + "' != '" + false + "'", boolean77 == false);
        org.junit.Assert.assertTrue("'" + level82 + "' != '" + org.apache.rat.utils.Log.Level.ERROR + "'", level82.equals(org.apache.rat.utils.Log.Level.ERROR));
    }

    @Test
    public void test14637() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest29.test14637");
        org.apache.rat.utils.Log log3 = null;
        org.apache.rat.ReportConfiguration reportConfiguration4 = new org.apache.rat.ReportConfiguration(log3);
        org.apache.commons.io.function.IOSupplier<java.io.OutputStream> outputStreamIOSupplier5 = reportConfiguration4.getOutput();
        reportConfiguration4.setCopyrightMessage("MANIFEST.MF");
        org.apache.rat.utils.Log log8 = reportConfiguration4.getLog();
        org.apache.rat.utils.Log log9 = null;
        org.apache.rat.ReportConfiguration reportConfiguration10 = new org.apache.rat.ReportConfiguration(log9);
        java.io.FilenameFilter filenameFilter11 = reportConfiguration10.getInputFileFilter();
        org.apache.rat.license.LicenseSetFactory.LicenseFilter licenseFilter12 = org.apache.rat.license.LicenseSetFactory.LicenseFilter.all;
        java.util.SortedSet<org.apache.rat.license.ILicense> iLicenseSet13 = reportConfiguration10.getLicenses(licenseFilter12);
        org.apache.rat.config.AddLicenseHeaders addLicenseHeaders14 = org.apache.rat.config.AddLicenseHeaders.FALSE;
        reportConfiguration10.setAddLicenseHeaders(addLicenseHeaders14);
        org.apache.rat.utils.Log log16 = null;
        org.apache.rat.ReportConfiguration reportConfiguration17 = new org.apache.rat.ReportConfiguration(log16);
        org.apache.rat.report.claim.ClaimStatistic claimStatistic18 = org.apache.rat.Reporter.report(reportConfiguration17);
        org.apache.rat.license.LicenseSetFactory.LicenseFilter licenseFilter19 = org.apache.rat.license.LicenseSetFactory.LicenseFilter.all;
        org.apache.rat.Reporter.listLicenses(reportConfiguration17, licenseFilter19);
        org.apache.rat.Reporter.listLicenses(reportConfiguration10, licenseFilter19);
        org.apache.rat.utils.Log log22 = null;
        org.apache.rat.ReportConfiguration reportConfiguration23 = new org.apache.rat.ReportConfiguration(log22);
        java.io.FilenameFilter filenameFilter24 = reportConfiguration23.getInputFileFilter();
        org.apache.rat.license.LicenseSetFactory.LicenseFilter licenseFilter25 = org.apache.rat.license.LicenseSetFactory.LicenseFilter.all;
        java.util.SortedSet<org.apache.rat.license.ILicense> iLicenseSet26 = reportConfiguration23.getLicenses(licenseFilter25);
        org.apache.rat.config.AddLicenseHeaders addLicenseHeaders27 = org.apache.rat.config.AddLicenseHeaders.FALSE;
        reportConfiguration23.setAddLicenseHeaders(addLicenseHeaders27);
        org.apache.rat.utils.Log log29 = null;
        org.apache.rat.ReportConfiguration reportConfiguration30 = new org.apache.rat.ReportConfiguration(log29);
        org.apache.rat.report.claim.ClaimStatistic claimStatistic31 = org.apache.rat.Reporter.report(reportConfiguration30);
        org.apache.rat.license.LicenseSetFactory.LicenseFilter licenseFilter32 = org.apache.rat.license.LicenseSetFactory.LicenseFilter.all;
        org.apache.rat.Reporter.listLicenses(reportConfiguration30, licenseFilter32);
        org.apache.rat.Reporter.listLicenses(reportConfiguration23, licenseFilter32);
        java.util.SortedSet<org.apache.rat.license.ILicenseFamily> iLicenseFamilySet35 = reportConfiguration10.getLicenseFamilies(licenseFilter32);
        org.apache.rat.license.ILicense[] iLicenseArray37 = new org.apache.rat.license.ILicense[] {};
        java.util.TreeSet<org.apache.rat.license.ILicense> iLicenseSet38 = new java.util.TreeSet<org.apache.rat.license.ILicense>();
        boolean boolean39 = java.util.Collections.addAll((java.util.Collection<org.apache.rat.license.ILicense>) iLicenseSet38, iLicenseArray37);
        java.lang.String[] strArray52 = new java.lang.String[] { "GPL2 ", "GPL1 ", "notice", "http://org/apache/rat/meta-data#LicenseFamilyName", "notice", "GPL2 ", "http://org/apache/rat/meta-data#LicenseFamilyName", "", "GPL2 ", "", "GPL1 ", "hi!" };
        java.util.ArrayList<java.lang.String> strList53 = new java.util.ArrayList<java.lang.String>();
        boolean boolean54 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strList53, strArray52);
        org.apache.rat.license.LicenseSetFactory licenseSetFactory55 = new org.apache.rat.license.LicenseSetFactory((java.util.SortedSet<org.apache.rat.license.ILicense>) iLicenseSet38, (java.util.Collection<java.lang.String>) strList53);
        org.apache.rat.license.ILicense iLicense56 = org.apache.rat.license.LicenseSetFactory.search("JAVA", (java.util.SortedSet<org.apache.rat.license.ILicense>) iLicenseSet38);
        reportConfiguration10.addLicensesIfNotPresent((java.util.Collection<org.apache.rat.license.ILicense>) iLicenseSet38);
        reportConfiguration4.addLicensesIfNotPresent((java.util.Collection<org.apache.rat.license.ILicense>) iLicenseSet38);
        org.apache.rat.license.ILicense iLicense59 = org.apache.rat.license.LicenseSetFactory.search("c819f60c-c781-49b6-ae3a-5a74de014a4d", (java.util.SortedSet<org.apache.rat.license.ILicense>) iLicenseSet38);
        org.apache.rat.license.ILicense iLicense60 = org.apache.rat.license.LicenseSetFactory.search("926d91f2-b796-4973-9500-471c4a650c96", (java.util.SortedSet<org.apache.rat.license.ILicense>) iLicenseSet38);
        org.apache.rat.utils.ReportingSet<org.apache.rat.license.ILicense> iLicenseSet61 = new org.apache.rat.utils.ReportingSet<org.apache.rat.license.ILicense>((java.util.SortedSet<org.apache.rat.license.ILicense>) iLicenseSet38);
        org.apache.rat.license.ILicense iLicense62 = org.apache.rat.license.LicenseSetFactory.search("SpdxBuilder: Datum [ name ='http://org/apache/rat/meta-data#LicenseFamilyCategory',value ='MIT   ']", (java.util.SortedSet<org.apache.rat.license.ILicense>) iLicenseSet38);
        org.junit.Assert.assertNotNull(outputStreamIOSupplier5);
        org.junit.Assert.assertNull(log8);
        org.junit.Assert.assertNull(filenameFilter11);
        org.junit.Assert.assertTrue("'" + licenseFilter12 + "' != '" + org.apache.rat.license.LicenseSetFactory.LicenseFilter.all + "'", licenseFilter12.equals(org.apache.rat.license.LicenseSetFactory.LicenseFilter.all));
        org.junit.Assert.assertNotNull(iLicenseSet13);
        org.junit.Assert.assertTrue("'" + addLicenseHeaders14 + "' != '" + org.apache.rat.config.AddLicenseHeaders.FALSE + "'", addLicenseHeaders14.equals(org.apache.rat.config.AddLicenseHeaders.FALSE));
        org.junit.Assert.assertNull(claimStatistic18);
        org.junit.Assert.assertTrue("'" + licenseFilter19 + "' != '" + org.apache.rat.license.LicenseSetFactory.LicenseFilter.all + "'", licenseFilter19.equals(org.apache.rat.license.LicenseSetFactory.LicenseFilter.all));
        org.junit.Assert.assertNull(filenameFilter24);
        org.junit.Assert.assertTrue("'" + licenseFilter25 + "' != '" + org.apache.rat.license.LicenseSetFactory.LicenseFilter.all + "'", licenseFilter25.equals(org.apache.rat.license.LicenseSetFactory.LicenseFilter.all));
        org.junit.Assert.assertNotNull(iLicenseSet26);
        org.junit.Assert.assertTrue("'" + addLicenseHeaders27 + "' != '" + org.apache.rat.config.AddLicenseHeaders.FALSE + "'", addLicenseHeaders27.equals(org.apache.rat.config.AddLicenseHeaders.FALSE));
        org.junit.Assert.assertNull(claimStatistic31);
        org.junit.Assert.assertTrue("'" + licenseFilter32 + "' != '" + org.apache.rat.license.LicenseSetFactory.LicenseFilter.all + "'", licenseFilter32.equals(org.apache.rat.license.LicenseSetFactory.LicenseFilter.all));
        org.junit.Assert.assertNotNull(iLicenseFamilySet35);
        org.junit.Assert.assertNotNull(iLicenseArray37);
        org.junit.Assert.assertTrue("'" + boolean39 + "' != '" + false + "'", boolean39 == false);
        org.junit.Assert.assertNotNull(strArray52);
        org.junit.Assert.assertTrue("'" + boolean54 + "' != '" + true + "'", boolean54 == true);
        org.junit.Assert.assertNull(iLicense56);
        org.junit.Assert.assertNull(iLicense59);
        org.junit.Assert.assertNull(iLicense60);
        org.junit.Assert.assertNull(iLicense62);
    }

    @Test
    public void test14638() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest29.test14638");
        org.apache.rat.license.ILicenseFamilyBuilder iLicenseFamilyBuilder0 = new org.apache.rat.license.ILicenseFamilyBuilder();
        java.lang.String str1 = iLicenseFamilyBuilder0.getCategory();
        org.apache.rat.license.ILicenseFamily.Builder builder3 = iLicenseFamilyBuilder0.setLicenseFamilyCategory("AL   ");
        java.lang.String str4 = iLicenseFamilyBuilder0.getCategory();
        org.apache.rat.license.ILicenseFamily.Builder builder6 = iLicenseFamilyBuilder0.setLicenseFamilyCategory("SpdxB");
        org.apache.rat.license.ILicenseFamily.Builder builder8 = iLicenseFamilyBuilder0.setLicenseFamilyCategory("a357a28e-849d-4383-9cc0-95ecd482d23e");
        org.apache.rat.license.ILicenseFamily.Builder builder10 = iLicenseFamilyBuilder0.setLicenseFamilyName("TextBuilder: COMMON DEVELOPMENT A...");
        org.apache.rat.license.ILicenseFamily.Builder builder12 = iLicenseFamilyBuilder0.setLicenseFamilyName("");
        org.apache.rat.license.ILicenseFamily.Builder builder14 = iLicenseFamilyBuilder0.setLicenseFamilyCategory("15ff671b-67b8-4791-9e1e-208f319fb7e2");
        org.junit.Assert.assertNull(str1);
        org.junit.Assert.assertNotNull(builder3);
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "AL   " + "'", str4, "AL   ");
        org.junit.Assert.assertNotNull(builder6);
        org.junit.Assert.assertNotNull(builder8);
        org.junit.Assert.assertNotNull(builder10);
        org.junit.Assert.assertNotNull(builder12);
        org.junit.Assert.assertNotNull(builder14);
    }

    @Test
    public void test14639() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest29.test14639");
        org.apache.rat.license.SimpleLicenseFamily simpleLicenseFamily0 = new org.apache.rat.license.SimpleLicenseFamily();
        simpleLicenseFamily0.setFamilyName("http://org/apache/rat/meta-data#LicenseFamilyName");
        simpleLicenseFamily0.setFamilyName("f1fc8dc8-990d-4a2d-9540-4e9ece3bd92c");
        simpleLicenseFamily0.setFamilyCategory("9DF69CA9-2229-47B6-966B-221652FD7D08");
        simpleLicenseFamily0.setFamilyName("fe6be119-8817-4567-8d33-352365bfa7c8");
        simpleLicenseFamily0.setFamilyName("6486879ffc814b57aec7c4c77d540c30");
    }

    @Test
    public void test14640() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest29.test14640");
        java.lang.String[] strArray5 = new java.lang.String[] { "http://org/apache/rat/meta-data#LicenseFamilyCategory", "Datum [ name ='http://org/apache/rat/meta-data#LicenseFamilyCategory',value ='GPL1  ']", "MANIFEST.MF", "AllBuilder:", "The MIT License" };
        org.apache.rat.utils.ReportingSet<java.lang.String> strSet6 = new org.apache.rat.utils.ReportingSet<java.lang.String>();
        boolean boolean7 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strSet6, strArray5);
        boolean boolean9 = strSet6.addIfNotPresent("http://org/apache/rat/meta-data#LicenseFamilyName");
        java.util.Iterator<java.lang.String> strItor10 = strSet6.iterator();
        java.lang.Object[] objArray11 = strSet6.toArray();
        java.lang.String[] strArray17 = new java.lang.String[] { "http://org/apache/rat/meta-data#LicenseFamilyCategory", "Datum [ name ='http://org/apache/rat/meta-data#LicenseFamilyCategory',value ='GPL1  ']", "MANIFEST.MF", "AllBuilder:", "The MIT License" };
        org.apache.rat.utils.ReportingSet<java.lang.String> strSet18 = new org.apache.rat.utils.ReportingSet<java.lang.String>();
        boolean boolean19 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strSet18, strArray17);
        boolean boolean21 = strSet18.addIfNotPresent("http://org/apache/rat/meta-data#LicenseFamilyName");
        java.util.SortedSet<org.apache.rat.license.ILicenseFamily> iLicenseFamilySet22 = org.apache.rat.license.LicenseFamilySetFactory.emptyLicenseFamilySet();
        boolean boolean23 = strSet18.removeAll((java.util.Collection<org.apache.rat.license.ILicenseFamily>) iLicenseFamilySet22);
        boolean boolean24 = strSet6.containsAll((java.util.Collection<org.apache.rat.license.ILicenseFamily>) iLicenseFamilySet22);
        boolean boolean26 = strSet6.add("hi!");
        java.util.Iterator<java.lang.String> strItor27 = strSet6.iterator();
        org.apache.rat.report.claim.ClaimStatistic claimStatistic28 = new org.apache.rat.report.claim.ClaimStatistic();
        int int29 = claimStatistic28.getNumUnApproved();
        int int30 = claimStatistic28.getNumUnknown();
        java.util.Map<java.lang.String, java.lang.Integer> strMap31 = claimStatistic28.getLicenseFileNameMap();
        int int32 = claimStatistic28.getNumGenerated();
        java.util.Map<java.lang.String, java.lang.Integer> strMap33 = null;
        claimStatistic28.setLicenseFileCodeMap(strMap33);
        boolean boolean35 = strSet6.equals((java.lang.Object) claimStatistic28);
        java.util.function.Function<java.lang.String, java.lang.String> strFunction36 = null;
        org.apache.rat.utils.ReportingSet<java.lang.String> strSet37 = strSet6.setMsgFormat(strFunction36);
        java.util.stream.Stream<java.lang.String> strStream38 = strSet6.stream();
        org.junit.Assert.assertNotNull(strArray5);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + true + "'", boolean7 == true);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + true + "'", boolean9 == true);
        org.junit.Assert.assertNotNull(strItor10);
        org.junit.Assert.assertNotNull(objArray11);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray11), "[AllBuilder:, Datum [ name ='http://org/apache/rat/meta-data#LicenseFamilyCategory',value ='GPL1  '], MANIFEST.MF, The MIT License, http://org/apache/rat/meta-data#LicenseFamilyCategory, http://org/apache/rat/meta-data#LicenseFamilyName]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray11), "[AllBuilder:, Datum [ name ='http://org/apache/rat/meta-data#LicenseFamilyCategory',value ='GPL1  '], MANIFEST.MF, The MIT License, http://org/apache/rat/meta-data#LicenseFamilyCategory, http://org/apache/rat/meta-data#LicenseFamilyName]");
        org.junit.Assert.assertNotNull(strArray17);
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + true + "'", boolean19 == true);
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + true + "'", boolean21 == true);
        org.junit.Assert.assertNotNull(iLicenseFamilySet22);
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + false + "'", boolean23 == false);
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + true + "'", boolean24 == true);
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + true + "'", boolean26 == true);
        org.junit.Assert.assertNotNull(strItor27);
        org.junit.Assert.assertTrue("'" + int29 + "' != '" + 0 + "'", int29 == 0);
        org.junit.Assert.assertTrue("'" + int30 + "' != '" + 0 + "'", int30 == 0);
        org.junit.Assert.assertNull(strMap31);
        org.junit.Assert.assertTrue("'" + int32 + "' != '" + 0 + "'", int32 == 0);
        org.junit.Assert.assertTrue("'" + boolean35 + "' != '" + false + "'", boolean35 == false);
        org.junit.Assert.assertNotNull(strSet37);
        org.junit.Assert.assertNotNull(strStream38);
    }

    @Test
    public void test14641() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest29.test14641");
        org.apache.rat.api.MetaData metaData0 = new org.apache.rat.api.MetaData();
        java.lang.String str2 = metaData0.value("COMMON DEVELOPMENT AND DISTRIBUTION LICENSE Version 1.0");
        java.util.Collection<org.apache.rat.api.MetaData.Datum> datumCollection3 = metaData0.getData();
        java.lang.String str5 = metaData0.value("61afd79a-82bd-404a-ae8f-c555f3916a3e");
        org.junit.Assert.assertNull(str2);
        org.junit.Assert.assertNotNull(datumCollection3);
        org.junit.Assert.assertNull(str5);
    }

    @Test
    public void test14642() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest29.test14642");
        java.lang.String[] strArray5 = new java.lang.String[] { "http://org/apache/rat/meta-data#LicenseFamilyCategory", "Datum [ name ='http://org/apache/rat/meta-data#LicenseFamilyCategory',value ='GPL1  ']", "MANIFEST.MF", "AllBuilder:", "The MIT License" };
        org.apache.rat.utils.ReportingSet<java.lang.String> strSet6 = new org.apache.rat.utils.ReportingSet<java.lang.String>();
        boolean boolean7 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strSet6, strArray5);
        boolean boolean9 = strSet6.addIfNotPresent("http://org/apache/rat/meta-data#LicenseFamilyName");
        boolean boolean11 = strSet6.addIfNotPresent("ef7a8b13-64c3-4510-bb0c-dbf208e1e73f");
        java.util.function.Function<java.lang.String, java.lang.String> strFunction12 = null;
        org.apache.rat.utils.ReportingSet<java.lang.String> strSet13 = strSet6.setMsgFormat(strFunction12);
        java.util.SortedSet<org.apache.rat.license.ILicenseFamily> iLicenseFamilySet15 = org.apache.rat.license.LicenseFamilySetFactory.emptyLicenseFamilySet();
        org.apache.rat.license.ILicenseFamily iLicenseFamily16 = org.apache.rat.license.LicenseFamilySetFactory.search("http://org/apache/rat/meta-data", iLicenseFamilySet15);
        boolean boolean17 = strSet6.containsAll((java.util.Collection<org.apache.rat.license.ILicenseFamily>) iLicenseFamilySet15);
        org.apache.rat.utils.ReportingSet<java.lang.String> strSet19 = strSet6.tailSet("http://org/apache/rat/meta-data#HeaderCategory");
        org.apache.rat.license.ILicenseFamily[] iLicenseFamilyArray20 = new org.apache.rat.license.ILicenseFamily[] {};
        java.util.ArrayList<org.apache.rat.license.ILicenseFamily> iLicenseFamilyList21 = new java.util.ArrayList<org.apache.rat.license.ILicenseFamily>();
        boolean boolean22 = java.util.Collections.addAll((java.util.Collection<org.apache.rat.license.ILicenseFamily>) iLicenseFamilyList21, iLicenseFamilyArray20);
        org.apache.rat.policy.DefaultPolicy defaultPolicy23 = new org.apache.rat.policy.DefaultPolicy((java.util.Collection<org.apache.rat.license.ILicenseFamily>) iLicenseFamilyList21);
        java.util.SortedSet<org.apache.rat.license.ILicenseFamily> iLicenseFamilySet24 = defaultPolicy23.getApprovedLicenseNames();
        boolean boolean25 = strSet19.removeAll((java.util.Collection<org.apache.rat.license.ILicenseFamily>) iLicenseFamilySet24);
        org.apache.rat.configuration.builders.AllBuilder allBuilder26 = new org.apache.rat.configuration.builders.AllBuilder();
        java.lang.String str27 = allBuilder26.toString();
        java.lang.String str28 = allBuilder26.toString();
        java.lang.String str29 = allBuilder26.toString();
        org.apache.rat.analysis.IHeaderMatcher iHeaderMatcher30 = allBuilder26.build();
        org.apache.rat.configuration.builders.AnyBuilder anyBuilder31 = new org.apache.rat.configuration.builders.AnyBuilder();
        java.lang.String str32 = anyBuilder31.toString();
        org.apache.rat.analysis.IHeaderMatcher iHeaderMatcher33 = anyBuilder31.build();
        org.apache.rat.configuration.builders.AnyBuilder anyBuilder34 = org.apache.rat.analysis.IHeaderMatcher.Builder.any();
        java.lang.String str35 = anyBuilder34.toString();
        java.util.List<org.apache.rat.analysis.IHeaderMatcher> iHeaderMatcherList36 = anyBuilder34.getChildren();
        org.apache.rat.analysis.IHeaderMatcher iHeaderMatcher37 = anyBuilder34.build();
        org.apache.rat.analysis.IHeaderMatcher iHeaderMatcher38 = anyBuilder34.build();
        java.util.List<org.apache.rat.analysis.IHeaderMatcher> iHeaderMatcherList39 = anyBuilder34.getChildren();
        org.apache.rat.configuration.builders.NotBuilder notBuilder40 = new org.apache.rat.configuration.builders.NotBuilder();
        java.lang.String str41 = notBuilder40.toString();
        org.apache.rat.configuration.builders.MatcherRefBuilder matcherRefBuilder42 = org.apache.rat.analysis.IHeaderMatcher.Builder.matcherRef();
        boolean boolean43 = matcherRefBuilder42.hasId();
        java.util.Map<java.lang.String, org.apache.rat.analysis.IHeaderMatcher> strMap44 = null;
        org.apache.rat.configuration.builders.MatcherRefBuilder matcherRefBuilder45 = matcherRefBuilder42.setMatchers(strMap44);
        org.apache.rat.configuration.builders.AllBuilder allBuilder46 = new org.apache.rat.configuration.builders.AllBuilder();
        org.apache.rat.configuration.builders.CopyrightBuilder copyrightBuilder47 = org.apache.rat.analysis.IHeaderMatcher.Builder.copyright();
        org.apache.rat.configuration.builders.CopyrightBuilder copyrightBuilder49 = copyrightBuilder47.setStart("OASIS");
        java.lang.String str50 = copyrightBuilder47.toString();
        org.apache.rat.configuration.builders.CopyrightBuilder copyrightBuilder52 = copyrightBuilder47.setStart("223f0aba-15d4-49e9-901e-5740c137aebf");
        org.apache.rat.configuration.builders.MatcherRefBuilder matcherRefBuilder53 = org.apache.rat.analysis.IHeaderMatcher.Builder.matcherRef();
        boolean boolean54 = matcherRefBuilder53.hasId();
        org.apache.rat.configuration.builders.CopyrightBuilder copyrightBuilder55 = org.apache.rat.analysis.IHeaderMatcher.Builder.copyright();
        org.apache.rat.configuration.builders.CopyrightBuilder copyrightBuilder57 = copyrightBuilder55.setStart("OASIS");
        java.lang.String str58 = copyrightBuilder55.toString();
        org.apache.rat.configuration.builders.CopyrightBuilder copyrightBuilder60 = copyrightBuilder55.setStart("223f0aba-15d4-49e9-901e-5740c137aebf");
        org.apache.rat.configuration.builders.CopyrightBuilder copyrightBuilder61 = org.apache.rat.analysis.IHeaderMatcher.Builder.copyright();
        org.apache.rat.configuration.builders.CopyrightBuilder copyrightBuilder62 = org.apache.rat.analysis.IHeaderMatcher.Builder.copyright();
        java.lang.String str63 = copyrightBuilder62.toString();
        org.apache.rat.configuration.builders.CopyrightBuilder copyrightBuilder65 = copyrightBuilder62.setEnd(".cvsignore");
        boolean boolean66 = copyrightBuilder62.hasId();
        org.apache.rat.configuration.builders.CopyrightBuilder copyrightBuilder67 = org.apache.rat.analysis.IHeaderMatcher.Builder.copyright();
        java.lang.String str68 = copyrightBuilder67.toString();
        org.apache.rat.configuration.builders.CopyrightBuilder copyrightBuilder70 = copyrightBuilder67.setEnd(".cvsignore");
        boolean boolean71 = copyrightBuilder67.hasId();
        java.lang.String str72 = copyrightBuilder67.toString();
        org.apache.rat.configuration.builders.CopyrightBuilder copyrightBuilder73 = org.apache.rat.analysis.IHeaderMatcher.Builder.copyright();
        org.apache.rat.configuration.builders.CopyrightBuilder copyrightBuilder75 = copyrightBuilder73.setStart("OASIS");
        org.apache.rat.configuration.builders.AnyBuilder anyBuilder76 = org.apache.rat.analysis.IHeaderMatcher.Builder.any();
        org.apache.rat.configuration.builders.MatcherRefBuilder matcherRefBuilder77 = org.apache.rat.analysis.IHeaderMatcher.Builder.matcherRef();
        boolean boolean78 = matcherRefBuilder77.hasId();
        java.util.Map<java.lang.String, org.apache.rat.analysis.IHeaderMatcher> strMap79 = null;
        org.apache.rat.configuration.builders.MatcherRefBuilder matcherRefBuilder80 = matcherRefBuilder77.setMatchers(strMap79);
        org.apache.rat.configuration.builders.CopyrightBuilder copyrightBuilder81 = org.apache.rat.analysis.IHeaderMatcher.Builder.copyright();
        org.apache.rat.configuration.builders.MatcherRefBuilder matcherRefBuilder82 = org.apache.rat.analysis.IHeaderMatcher.Builder.matcherRef();
        boolean boolean83 = matcherRefBuilder82.hasId();
        java.lang.String str84 = matcherRefBuilder82.toString();
        java.util.Map<java.lang.String, org.apache.rat.analysis.IHeaderMatcher> strMap85 = null;
        org.apache.rat.configuration.builders.MatcherRefBuilder matcherRefBuilder86 = matcherRefBuilder82.setMatchers(strMap85);
        org.apache.rat.analysis.IHeaderMatcher.Builder[] builderArray87 = new org.apache.rat.analysis.IHeaderMatcher.Builder[] { matcherRefBuilder42, allBuilder46, copyrightBuilder52, matcherRefBuilder53, copyrightBuilder55, copyrightBuilder61, copyrightBuilder62, copyrightBuilder67, copyrightBuilder73, anyBuilder76, matcherRefBuilder77, copyrightBuilder81, matcherRefBuilder82 };
        java.util.ArrayList<org.apache.rat.analysis.IHeaderMatcher.Builder> builderList88 = new java.util.ArrayList<org.apache.rat.analysis.IHeaderMatcher.Builder>();
        boolean boolean89 = java.util.Collections.addAll((java.util.Collection<org.apache.rat.analysis.IHeaderMatcher.Builder>) builderList88, builderArray87);
        org.apache.rat.configuration.builders.AbstractBuilder abstractBuilder90 = notBuilder40.add((java.util.Collection<org.apache.rat.analysis.IHeaderMatcher.Builder>) builderList88);
        org.apache.rat.configuration.builders.AbstractBuilder abstractBuilder91 = anyBuilder34.add((java.util.Collection<org.apache.rat.analysis.IHeaderMatcher.Builder>) builderList88);
        org.apache.rat.configuration.builders.AbstractBuilder abstractBuilder92 = anyBuilder31.add((java.util.Collection<org.apache.rat.analysis.IHeaderMatcher.Builder>) builderList88);
        org.apache.rat.configuration.builders.AbstractBuilder abstractBuilder93 = allBuilder26.add((java.util.Collection<org.apache.rat.analysis.IHeaderMatcher.Builder>) builderList88);
        boolean boolean94 = strSet19.equals((java.lang.Object) allBuilder26);
        org.junit.Assert.assertNotNull(strArray5);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + true + "'", boolean7 == true);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + true + "'", boolean9 == true);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + true + "'", boolean11 == true);
        org.junit.Assert.assertNotNull(strSet13);
        org.junit.Assert.assertNotNull(iLicenseFamilySet15);
        org.junit.Assert.assertNull(iLicenseFamily16);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + true + "'", boolean17 == true);
        org.junit.Assert.assertNotNull(strSet19);
        org.junit.Assert.assertNotNull(iLicenseFamilyArray20);
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + false + "'", boolean22 == false);
        org.junit.Assert.assertNotNull(iLicenseFamilySet24);
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + false + "'", boolean25 == false);
        org.junit.Assert.assertEquals("'" + str27 + "' != '" + "AllBuilder:" + "'", str27, "AllBuilder:");
        org.junit.Assert.assertEquals("'" + str28 + "' != '" + "AllBuilder:" + "'", str28, "AllBuilder:");
        org.junit.Assert.assertEquals("'" + str29 + "' != '" + "AllBuilder:" + "'", str29, "AllBuilder:");
        org.junit.Assert.assertNotNull(iHeaderMatcher30);
        org.junit.Assert.assertEquals("'" + str32 + "' != '" + "AnyBuilder:" + "'", str32, "AnyBuilder:");
        org.junit.Assert.assertNotNull(iHeaderMatcher33);
        org.junit.Assert.assertNotNull(anyBuilder34);
        org.junit.Assert.assertEquals("'" + str35 + "' != '" + "AnyBuilder:" + "'", str35, "AnyBuilder:");
        org.junit.Assert.assertNotNull(iHeaderMatcherList36);
        org.junit.Assert.assertNotNull(iHeaderMatcher37);
        org.junit.Assert.assertNotNull(iHeaderMatcher38);
        org.junit.Assert.assertNotNull(iHeaderMatcherList39);
        org.junit.Assert.assertEquals("'" + str41 + "' != '" + "NotBuilder: null" + "'", str41, "NotBuilder: null");
        org.junit.Assert.assertNotNull(matcherRefBuilder42);
        org.junit.Assert.assertTrue("'" + boolean43 + "' != '" + false + "'", boolean43 == false);
        org.junit.Assert.assertNotNull(matcherRefBuilder45);
        org.junit.Assert.assertNotNull(copyrightBuilder47);
        org.junit.Assert.assertNotNull(copyrightBuilder49);
        org.junit.Assert.assertEquals("'" + str50 + "' != '" + "Copyright Builder: s:OASIS e:null o:null" + "'", str50, "Copyright Builder: s:OASIS e:null o:null");
        org.junit.Assert.assertNotNull(copyrightBuilder52);
        org.junit.Assert.assertNotNull(matcherRefBuilder53);
        org.junit.Assert.assertTrue("'" + boolean54 + "' != '" + false + "'", boolean54 == false);
        org.junit.Assert.assertNotNull(copyrightBuilder55);
        org.junit.Assert.assertNotNull(copyrightBuilder57);
        org.junit.Assert.assertEquals("'" + str58 + "' != '" + "Copyright Builder: s:OASIS e:null o:null" + "'", str58, "Copyright Builder: s:OASIS e:null o:null");
        org.junit.Assert.assertNotNull(copyrightBuilder60);
        org.junit.Assert.assertNotNull(copyrightBuilder61);
        org.junit.Assert.assertNotNull(copyrightBuilder62);
        org.junit.Assert.assertEquals("'" + str63 + "' != '" + "Copyright Builder: s:null e:null o:null" + "'", str63, "Copyright Builder: s:null e:null o:null");
        org.junit.Assert.assertNotNull(copyrightBuilder65);
        org.junit.Assert.assertTrue("'" + boolean66 + "' != '" + false + "'", boolean66 == false);
        org.junit.Assert.assertNotNull(copyrightBuilder67);
        org.junit.Assert.assertEquals("'" + str68 + "' != '" + "Copyright Builder: s:null e:null o:null" + "'", str68, "Copyright Builder: s:null e:null o:null");
        org.junit.Assert.assertNotNull(copyrightBuilder70);
        org.junit.Assert.assertTrue("'" + boolean71 + "' != '" + false + "'", boolean71 == false);
        org.junit.Assert.assertEquals("'" + str72 + "' != '" + "Copyright Builder: s:null e:.cvsignore o:null" + "'", str72, "Copyright Builder: s:null e:.cvsignore o:null");
        org.junit.Assert.assertNotNull(copyrightBuilder73);
        org.junit.Assert.assertNotNull(copyrightBuilder75);
        org.junit.Assert.assertNotNull(anyBuilder76);
        org.junit.Assert.assertNotNull(matcherRefBuilder77);
        org.junit.Assert.assertTrue("'" + boolean78 + "' != '" + false + "'", boolean78 == false);
        org.junit.Assert.assertNotNull(matcherRefBuilder80);
        org.junit.Assert.assertNotNull(copyrightBuilder81);
        org.junit.Assert.assertNotNull(matcherRefBuilder82);
        org.junit.Assert.assertTrue("'" + boolean83 + "' != '" + false + "'", boolean83 == false);
        org.junit.Assert.assertEquals("'" + str84 + "' != '" + "MathcerRefBuilder: null" + "'", str84, "MathcerRefBuilder: null");
        org.junit.Assert.assertNotNull(matcherRefBuilder86);
        org.junit.Assert.assertNotNull(builderArray87);
        org.junit.Assert.assertTrue("'" + boolean89 + "' != '" + true + "'", boolean89 == true);
        org.junit.Assert.assertNotNull(abstractBuilder90);
        org.junit.Assert.assertNotNull(abstractBuilder91);
        org.junit.Assert.assertNotNull(abstractBuilder92);
        org.junit.Assert.assertNotNull(abstractBuilder93);
        org.junit.Assert.assertTrue("'" + boolean94 + "' != '" + false + "'", boolean94 == false);
    }

    @Test
    public void test14643() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest29.test14643");
        org.apache.rat.config.SourceCodeManagementSystems sourceCodeManagementSystems0 = org.apache.rat.config.SourceCodeManagementSystems.BAZAAR;
        java.lang.String str1 = sourceCodeManagementSystems0.getIgnoreFile();
        java.util.List<java.lang.String> strList2 = sourceCodeManagementSystems0.getExclusions();
        java.lang.String str3 = sourceCodeManagementSystems0.getIgnoreFile();
        boolean boolean4 = sourceCodeManagementSystems0.hasIgnoreFile();
        org.junit.Assert.assertTrue("'" + sourceCodeManagementSystems0 + "' != '" + org.apache.rat.config.SourceCodeManagementSystems.BAZAAR + "'", sourceCodeManagementSystems0.equals(org.apache.rat.config.SourceCodeManagementSystems.BAZAAR));
        org.junit.Assert.assertEquals("'" + str1 + "' != '" + ".bzrignore" + "'", str1, ".bzrignore");
        org.junit.Assert.assertNotNull(strList2);
        org.junit.Assert.assertEquals("'" + str3 + "' != '" + ".bzrignore" + "'", str3, ".bzrignore");
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + true + "'", boolean4 == true);
    }

    @Test
    public void test14644() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest29.test14644");
        org.apache.rat.header.HeaderBean headerBean0 = new org.apache.rat.header.HeaderBean();
        boolean boolean1 = headerBean0.isMatch();
        java.util.regex.Pattern pattern2 = null;
        headerBean0.setHeaderPattern(pattern2);
        boolean boolean4 = headerBean0.isMatch();
        java.util.regex.Pattern pattern5 = headerBean0.getHeaderPattern();
        java.util.regex.Pattern pattern6 = headerBean0.getHeaderPattern();
        headerBean0.setMatch(false);
        headerBean0.setMatch(true);
        java.util.regex.Pattern pattern11 = null;
        headerBean0.setHeaderPattern(pattern11);
        org.junit.Assert.assertTrue("'" + boolean1 + "' != '" + false + "'", boolean1 == false);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertNull(pattern5);
        org.junit.Assert.assertNull(pattern6);
    }

    @Test
    public void test14645() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest29.test14645");
        java.util.regex.Pattern pattern1 = null;
        org.apache.rat.analysis.matchers.SimpleRegexMatcher simpleRegexMatcher2 = new org.apache.rat.analysis.matchers.SimpleRegexMatcher("cf0b2491-f3c2-4580-8ac7-e69e3a8cba75", pattern1);
        org.apache.rat.analysis.IHeaderMatcher.State state3 = simpleRegexMatcher2.finalizeState();
        org.apache.rat.analysis.IHeaderMatcher.State state4 = simpleRegexMatcher2.currentState();
        org.junit.Assert.assertTrue("'" + state3 + "' != '" + org.apache.rat.analysis.IHeaderMatcher.State.f + "'", state3.equals(org.apache.rat.analysis.IHeaderMatcher.State.f));
        org.junit.Assert.assertTrue("'" + state4 + "' != '" + org.apache.rat.analysis.IHeaderMatcher.State.f + "'", state4.equals(org.apache.rat.analysis.IHeaderMatcher.State.f));
    }

    @Test
    public void test14646() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest29.test14646");
        java.lang.String str1 = org.apache.rat.document.impl.guesser.GuessUtils.normalise("httporgapacheratmetadataHeaderSamplenull");
        org.junit.Assert.assertEquals("'" + str1 + "' != '" + "HTTPORGAPACHERATMETADATAHEADERSAMPLENULL" + "'", str1, "HTTPORGAPACHERATMETADATAHEADERSAMPLENULL");
    }

    @Test
    public void test14647() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest29.test14647");
        java.lang.String[] strArray8 = org.apache.commons.io.filefilter.IOFileFilter.EMPTY_STRING_ARRAY;
        boolean boolean9 = org.apache.rat.document.impl.guesser.BinaryGuesser.extensionMatches("Copyright Builder: s:null e:.cvsignore o:null", strArray8);
        boolean boolean10 = org.apache.rat.document.impl.guesser.BinaryGuesser.containsExtension("http://org/apache/rat/meta-data#HeaderCategory", strArray8);
        boolean boolean11 = org.apache.rat.document.impl.guesser.BinaryGuesser.extensionMatches("NotBuilder: MathcerRefBuilder: null", strArray8);
        boolean boolean12 = org.apache.rat.document.impl.guesser.BinaryGuesser.extensionMatches("ef75a6e8-7197-4e9e-83bf-f8b367e6b3c5", strArray8);
        boolean boolean13 = org.apache.rat.document.impl.guesser.BinaryGuesser.containsExtension("Datum [ name ='binary',value =' ']", strArray8);
        boolean boolean14 = org.apache.rat.document.impl.guesser.BinaryGuesser.extensionMatches(".cvsignore", strArray8);
        boolean boolean15 = org.apache.rat.document.impl.guesser.BinaryGuesser.containsExtension("Datum", strArray8);
        boolean boolean16 = org.apache.rat.document.impl.guesser.BinaryGuesser.extensionMatches("135b2f8b-af23-4280-a559-bfbbb062a0ec", strArray8);
        org.junit.Assert.assertNotNull(strArray8);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + false + "'", boolean15 == false);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
    }

    @Test
    public void test14648() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest29.test14648");
        java.lang.String[] strArray5 = new java.lang.String[] { "http://org/apache/rat/meta-data#LicenseFamilyCategory", "Datum [ name ='http://org/apache/rat/meta-data#LicenseFamilyCategory',value ='GPL1  ']", "MANIFEST.MF", "AllBuilder:", "The MIT License" };
        org.apache.rat.utils.ReportingSet<java.lang.String> strSet6 = new org.apache.rat.utils.ReportingSet<java.lang.String>();
        boolean boolean7 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strSet6, strArray5);
        boolean boolean9 = strSet6.addIfNotPresent("http://org/apache/rat/meta-data#LicenseFamilyName");
        org.apache.rat.api.MetaData metaData10 = new org.apache.rat.api.MetaData();
        boolean boolean11 = strSet6.equals((java.lang.Object) metaData10);
        java.util.Collection<org.apache.rat.api.MetaData.Datum> datumCollection12 = metaData10.getData();
        org.apache.rat.api.MetaData.Datum datum13 = org.apache.rat.api.MetaData.RAT_LICENSE_FAMILY_NAME_DATUM_CDDL1;
        java.lang.String str14 = datum13.getValue();
        metaData10.set(datum13);
        metaData10.clear();
        org.apache.rat.api.MetaData.Datum datum19 = new org.apache.rat.api.MetaData.Datum("binary", "");
        metaData10.add(datum19);
        java.lang.String str22 = metaData10.value("48BB897A-E27B-468D-AF85-D73DCAACFB7F");
        org.junit.Assert.assertNotNull(strArray5);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + true + "'", boolean7 == true);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + true + "'", boolean9 == true);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
        org.junit.Assert.assertNotNull(datumCollection12);
        org.junit.Assert.assertNotNull(datum13);
        org.junit.Assert.assertEquals("'" + str14 + "' != '" + "COMMON DEVELOPMENT AND DISTRIBUTION LICENSE Version 1.0" + "'", str14, "COMMON DEVELOPMENT AND DISTRIBUTION LICENSE Version 1.0");
        org.junit.Assert.assertNull(str22);
    }

    @Test
    public void test14649() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest29.test14649");
        org.apache.rat.Defaults.Builder builder0 = org.apache.rat.Defaults.builder();
        org.apache.rat.Defaults defaults1 = builder0.build();
        org.apache.rat.Defaults.Builder builder2 = builder0.noDefault();
        org.apache.rat.Defaults.Builder builder4 = builder0.remove("AllBuilder:");
        org.apache.rat.Defaults.Builder builder6 = builder4.add("?????");
        org.apache.rat.Defaults.Builder builder8 = builder6.remove("");
        org.apache.rat.Defaults.Builder builder10 = builder8.remove("COMMON DEVELOPMENT AND DISTRIBUTION LICENSE Version 1.0");
        org.apache.rat.Defaults.Builder builder12 = builder8.remove("8F0EE536-38AE-476A-A728-DE95E24C13C3");
        org.apache.rat.Defaults.Builder builder14 = builder12.remove("A3B53609-8989-4241-8AA6-1CC947F0D382");
        org.apache.rat.Defaults.Builder builder16 = builder14.add("9df69ca9222947b6966b221652fd7d08");
        org.apache.rat.Defaults.Builder builder18 = builder14.remove("bc97cad8-1b92-449d-8dd7-6a0a69c8774d");
        org.junit.Assert.assertNotNull(builder0);
        org.junit.Assert.assertNotNull(defaults1);
        org.junit.Assert.assertNotNull(builder2);
        org.junit.Assert.assertNotNull(builder4);
        org.junit.Assert.assertNotNull(builder6);
        org.junit.Assert.assertNotNull(builder8);
        org.junit.Assert.assertNotNull(builder10);
        org.junit.Assert.assertNotNull(builder12);
        org.junit.Assert.assertNotNull(builder14);
        org.junit.Assert.assertNotNull(builder16);
        org.junit.Assert.assertNotNull(builder18);
    }

    @Test
    public void test14650() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest29.test14650");
        org.apache.rat.analysis.matchers.SimpleTextMatcher simpleTextMatcher2 = new org.apache.rat.analysis.matchers.SimpleTextMatcher("Copyright Builder: s:OASIS e:null o:null", "Datum [ name ='MANIFEST.MF',value ='GPL2  ']");
        java.lang.String str3 = simpleTextMatcher2.getId();
        org.apache.rat.analysis.IHeaderMatcher.State state5 = simpleTextMatcher2.matches("4fcae176-e574-46ed-b9e4-dea2e2f3b458 http://org/apache/rat/meta-data#LicenseFamilyName");
        boolean boolean7 = simpleTextMatcher2.doMatch("88f984ae-3d8f-493c-b1f7-62ece6bef7c8");
        org.junit.Assert.assertEquals("'" + str3 + "' != '" + "Copyright Builder: s:OASIS e:null o:null" + "'", str3, "Copyright Builder: s:OASIS e:null o:null");
        org.junit.Assert.assertTrue("'" + state5 + "' != '" + org.apache.rat.analysis.IHeaderMatcher.State.i + "'", state5.equals(org.apache.rat.analysis.IHeaderMatcher.State.i));
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
    }

    @Test
    public void test14651() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest29.test14651");
        org.apache.rat.utils.DefaultLog defaultLog0 = org.apache.rat.utils.DefaultLog.INSTANCE;
        org.apache.rat.license.ILicense.Builder builder1 = org.apache.rat.license.ILicense.builder();
        org.apache.rat.license.ILicense.Builder builder3 = builder1.setLicenseFamilyCategory("");
        org.apache.rat.analysis.matchers.CopyrightMatcher copyrightMatcher7 = new org.apache.rat.analysis.matchers.CopyrightMatcher("", "GPL1 ", "hi!");
        org.apache.rat.analysis.IHeaderMatcher.State state8 = copyrightMatcher7.finalizeState();
        org.apache.rat.license.ILicense.Builder builder9 = builder3.setMatcher((org.apache.rat.analysis.IHeaderMatcher) copyrightMatcher7);
        org.apache.rat.license.ILicense.Builder builder11 = builder9.setLicenseFamilyCategory("");
        defaultLog0.error((java.lang.Object) builder11);
        org.apache.rat.utils.Log log13 = null;
        org.apache.rat.ReportConfiguration reportConfiguration14 = new org.apache.rat.ReportConfiguration(log13);
        java.io.FilenameFilter filenameFilter15 = reportConfiguration14.getInputFileFilter();
        org.apache.rat.license.LicenseSetFactory.LicenseFilter licenseFilter16 = org.apache.rat.license.LicenseSetFactory.LicenseFilter.all;
        java.util.SortedSet<org.apache.rat.license.ILicense> iLicenseSet17 = reportConfiguration14.getLicenses(licenseFilter16);
        org.apache.rat.config.AddLicenseHeaders addLicenseHeaders18 = org.apache.rat.config.AddLicenseHeaders.FALSE;
        reportConfiguration14.setAddLicenseHeaders(addLicenseHeaders18);
        org.apache.rat.utils.Log log20 = null;
        org.apache.rat.ReportConfiguration reportConfiguration21 = new org.apache.rat.ReportConfiguration(log20);
        org.apache.rat.report.claim.ClaimStatistic claimStatistic22 = org.apache.rat.Reporter.report(reportConfiguration21);
        org.apache.rat.license.LicenseSetFactory.LicenseFilter licenseFilter23 = org.apache.rat.license.LicenseSetFactory.LicenseFilter.all;
        org.apache.rat.Reporter.listLicenses(reportConfiguration21, licenseFilter23);
        org.apache.rat.Reporter.listLicenses(reportConfiguration14, licenseFilter23);
        org.apache.rat.utils.Log log26 = null;
        org.apache.rat.ReportConfiguration reportConfiguration27 = new org.apache.rat.ReportConfiguration(log26);
        java.io.FilenameFilter filenameFilter28 = reportConfiguration27.getInputFileFilter();
        org.apache.rat.license.LicenseSetFactory.LicenseFilter licenseFilter29 = org.apache.rat.license.LicenseSetFactory.LicenseFilter.all;
        java.util.SortedSet<org.apache.rat.license.ILicense> iLicenseSet30 = reportConfiguration27.getLicenses(licenseFilter29);
        org.apache.rat.config.AddLicenseHeaders addLicenseHeaders31 = org.apache.rat.config.AddLicenseHeaders.FALSE;
        reportConfiguration27.setAddLicenseHeaders(addLicenseHeaders31);
        org.apache.rat.utils.Log log33 = null;
        org.apache.rat.ReportConfiguration reportConfiguration34 = new org.apache.rat.ReportConfiguration(log33);
        org.apache.rat.report.claim.ClaimStatistic claimStatistic35 = org.apache.rat.Reporter.report(reportConfiguration34);
        org.apache.rat.license.LicenseSetFactory.LicenseFilter licenseFilter36 = org.apache.rat.license.LicenseSetFactory.LicenseFilter.all;
        org.apache.rat.Reporter.listLicenses(reportConfiguration34, licenseFilter36);
        org.apache.rat.Reporter.listLicenses(reportConfiguration27, licenseFilter36);
        org.apache.rat.Reporter.listLicenses(reportConfiguration14, licenseFilter36);
        org.apache.rat.utils.Log log40 = null;
        org.apache.rat.ReportConfiguration reportConfiguration41 = new org.apache.rat.ReportConfiguration(log40);
        org.apache.commons.io.function.IOSupplier<java.io.OutputStream> outputStreamIOSupplier42 = reportConfiguration41.getOutput();
        reportConfiguration14.setOut(outputStreamIOSupplier42);
        org.apache.rat.utils.Log.Level level44 = org.apache.rat.utils.Log.Level.WARN;
        reportConfiguration14.logLicenseCollisions(level44);
        defaultLog0.warn((java.lang.Object) level44);
        defaultLog0.info((java.lang.Object) "TextBuilder: Datum [ name ='http:...");
        org.apache.rat.utils.Log log49 = null;
        org.apache.rat.ReportConfiguration reportConfiguration50 = new org.apache.rat.ReportConfiguration(log49);
        java.io.FilenameFilter filenameFilter51 = reportConfiguration50.getInputFileFilter();
        org.apache.rat.license.LicenseSetFactory.LicenseFilter licenseFilter52 = org.apache.rat.license.LicenseSetFactory.LicenseFilter.all;
        java.util.SortedSet<org.apache.rat.license.ILicense> iLicenseSet53 = reportConfiguration50.getLicenses(licenseFilter52);
        org.apache.rat.license.ILicenseFamily iLicenseFamily54 = null;
        reportConfiguration50.addFamily(iLicenseFamily54);
        reportConfiguration50.setCopyrightMessage("hi!");
        defaultLog0.error((java.lang.Object) reportConfiguration50);
        org.apache.rat.annotation.ApacheV2LicenseAppender apacheV2LicenseAppender60 = new org.apache.rat.annotation.ApacheV2LicenseAppender((org.apache.rat.utils.Log) defaultLog0, "03f7b314-6887-4617-9c7e-bf1600b331cd");
        apacheV2LicenseAppender60.setForce(true);
        apacheV2LicenseAppender60.setForce(false);
        java.io.File file65 = null;
        // The following exception was thrown during execution in test generation
        try {
            java.lang.String str66 = apacheV2LicenseAppender60.getLicenseHeader(file65);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(defaultLog0);
        org.junit.Assert.assertNotNull(builder1);
        org.junit.Assert.assertNotNull(builder3);
        org.junit.Assert.assertTrue("'" + state8 + "' != '" + org.apache.rat.analysis.IHeaderMatcher.State.f + "'", state8.equals(org.apache.rat.analysis.IHeaderMatcher.State.f));
        org.junit.Assert.assertNotNull(builder9);
        org.junit.Assert.assertNotNull(builder11);
        org.junit.Assert.assertNull(filenameFilter15);
        org.junit.Assert.assertTrue("'" + licenseFilter16 + "' != '" + org.apache.rat.license.LicenseSetFactory.LicenseFilter.all + "'", licenseFilter16.equals(org.apache.rat.license.LicenseSetFactory.LicenseFilter.all));
        org.junit.Assert.assertNotNull(iLicenseSet17);
        org.junit.Assert.assertTrue("'" + addLicenseHeaders18 + "' != '" + org.apache.rat.config.AddLicenseHeaders.FALSE + "'", addLicenseHeaders18.equals(org.apache.rat.config.AddLicenseHeaders.FALSE));
        org.junit.Assert.assertNull(claimStatistic22);
        org.junit.Assert.assertTrue("'" + licenseFilter23 + "' != '" + org.apache.rat.license.LicenseSetFactory.LicenseFilter.all + "'", licenseFilter23.equals(org.apache.rat.license.LicenseSetFactory.LicenseFilter.all));
        org.junit.Assert.assertNull(filenameFilter28);
        org.junit.Assert.assertTrue("'" + licenseFilter29 + "' != '" + org.apache.rat.license.LicenseSetFactory.LicenseFilter.all + "'", licenseFilter29.equals(org.apache.rat.license.LicenseSetFactory.LicenseFilter.all));
        org.junit.Assert.assertNotNull(iLicenseSet30);
        org.junit.Assert.assertTrue("'" + addLicenseHeaders31 + "' != '" + org.apache.rat.config.AddLicenseHeaders.FALSE + "'", addLicenseHeaders31.equals(org.apache.rat.config.AddLicenseHeaders.FALSE));
        org.junit.Assert.assertNull(claimStatistic35);
        org.junit.Assert.assertTrue("'" + licenseFilter36 + "' != '" + org.apache.rat.license.LicenseSetFactory.LicenseFilter.all + "'", licenseFilter36.equals(org.apache.rat.license.LicenseSetFactory.LicenseFilter.all));
        org.junit.Assert.assertNotNull(outputStreamIOSupplier42);
        org.junit.Assert.assertTrue("'" + level44 + "' != '" + org.apache.rat.utils.Log.Level.WARN + "'", level44.equals(org.apache.rat.utils.Log.Level.WARN));
        org.junit.Assert.assertNull(filenameFilter51);
        org.junit.Assert.assertTrue("'" + licenseFilter52 + "' != '" + org.apache.rat.license.LicenseSetFactory.LicenseFilter.all + "'", licenseFilter52.equals(org.apache.rat.license.LicenseSetFactory.LicenseFilter.all));
        org.junit.Assert.assertNotNull(iLicenseSet53);
    }

    @Test
    public void test14652() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest29.test14652");
        java.io.Writer writer0 = null;
        org.apache.rat.report.xml.writer.impl.base.XmlWriter xmlWriter1 = new org.apache.rat.report.xml.writer.impl.base.XmlWriter(writer0);
        org.apache.rat.report.claim.impl.xml.SimpleXmlClaimReporter simpleXmlClaimReporter2 = new org.apache.rat.report.claim.impl.xml.SimpleXmlClaimReporter((org.apache.rat.report.xml.writer.IXmlWriter) xmlWriter1);
        org.apache.rat.report.claim.impl.xml.SimpleXmlClaimReporter simpleXmlClaimReporter3 = new org.apache.rat.report.claim.impl.xml.SimpleXmlClaimReporter((org.apache.rat.report.xml.writer.IXmlWriter) xmlWriter1);
        org.apache.rat.report.claim.impl.xml.SimpleXmlClaimReporter simpleXmlClaimReporter4 = new org.apache.rat.report.claim.impl.xml.SimpleXmlClaimReporter((org.apache.rat.report.xml.writer.IXmlWriter) xmlWriter1);
        org.apache.rat.report.claim.impl.xml.SimpleXmlClaimReporter simpleXmlClaimReporter5 = new org.apache.rat.report.claim.impl.xml.SimpleXmlClaimReporter((org.apache.rat.report.xml.writer.IXmlWriter) xmlWriter1);
        org.apache.rat.report.claim.impl.xml.SimpleXmlClaimReporter simpleXmlClaimReporter6 = new org.apache.rat.report.claim.impl.xml.SimpleXmlClaimReporter((org.apache.rat.report.xml.writer.IXmlWriter) xmlWriter1);
        org.apache.rat.report.claim.impl.xml.SimpleXmlClaimReporter simpleXmlClaimReporter7 = new org.apache.rat.report.claim.impl.xml.SimpleXmlClaimReporter((org.apache.rat.report.xml.writer.IXmlWriter) xmlWriter1);
        org.apache.rat.report.claim.impl.xml.SimpleXmlClaimReporter simpleXmlClaimReporter8 = new org.apache.rat.report.claim.impl.xml.SimpleXmlClaimReporter((org.apache.rat.report.xml.writer.IXmlWriter) xmlWriter1);
        org.apache.rat.report.claim.impl.xml.SimpleXmlClaimReporter simpleXmlClaimReporter9 = new org.apache.rat.report.claim.impl.xml.SimpleXmlClaimReporter((org.apache.rat.report.xml.writer.IXmlWriter) xmlWriter1);
        org.apache.rat.report.claim.impl.xml.SimpleXmlClaimReporter simpleXmlClaimReporter10 = new org.apache.rat.report.claim.impl.xml.SimpleXmlClaimReporter((org.apache.rat.report.xml.writer.IXmlWriter) xmlWriter1);
        org.apache.rat.report.claim.impl.xml.SimpleXmlClaimReporter simpleXmlClaimReporter11 = new org.apache.rat.report.claim.impl.xml.SimpleXmlClaimReporter((org.apache.rat.report.xml.writer.IXmlWriter) xmlWriter1);
        org.apache.rat.report.claim.impl.xml.SimpleXmlClaimReporter simpleXmlClaimReporter12 = new org.apache.rat.report.claim.impl.xml.SimpleXmlClaimReporter((org.apache.rat.report.xml.writer.IXmlWriter) xmlWriter1);
        org.apache.rat.report.claim.impl.xml.SimpleXmlClaimReporter simpleXmlClaimReporter13 = new org.apache.rat.report.claim.impl.xml.SimpleXmlClaimReporter((org.apache.rat.report.xml.writer.IXmlWriter) xmlWriter1);
        org.apache.rat.report.claim.impl.xml.SimpleXmlClaimReporter simpleXmlClaimReporter14 = new org.apache.rat.report.claim.impl.xml.SimpleXmlClaimReporter((org.apache.rat.report.xml.writer.IXmlWriter) xmlWriter1);
        org.apache.rat.report.claim.impl.xml.SimpleXmlClaimReporter simpleXmlClaimReporter15 = new org.apache.rat.report.claim.impl.xml.SimpleXmlClaimReporter((org.apache.rat.report.xml.writer.IXmlWriter) xmlWriter1);
        org.apache.rat.report.claim.impl.xml.SimpleXmlClaimReporter simpleXmlClaimReporter16 = new org.apache.rat.report.claim.impl.xml.SimpleXmlClaimReporter((org.apache.rat.report.xml.writer.IXmlWriter) xmlWriter1);
        org.apache.rat.report.claim.impl.xml.SimpleXmlClaimReporter simpleXmlClaimReporter17 = new org.apache.rat.report.claim.impl.xml.SimpleXmlClaimReporter((org.apache.rat.report.xml.writer.IXmlWriter) xmlWriter1);
        // The following exception was thrown during execution in test generation
        try {
            org.apache.rat.report.xml.writer.IXmlWriter iXmlWriter20 = xmlWriter1.attribute((java.lang.CharSequence) "fc895282-dbf8-4a21-a51c-e82935e8ff46", (java.lang.CharSequence) "a01d0592-1bc2-4ba6-9f0d-d5a765002396");
            org.junit.Assert.fail("Expected exception of type org.apache.rat.report.xml.writer.OperationNotAllowedException; message: Close called before an element has been opened.");
        } catch (org.apache.rat.report.xml.writer.OperationNotAllowedException e) {
            // Expected exception.
        }
    }

    @Test
    public void test14653() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest29.test14653");
        org.apache.rat.configuration.Format format0 = org.apache.rat.configuration.Format.XML;
        org.apache.rat.configuration.LicenseReader licenseReader1 = format0.licenseReader();
        org.apache.rat.configuration.LicenseReader licenseReader2 = format0.licenseReader();
        org.apache.rat.configuration.LicenseReader licenseReader3 = format0.licenseReader();
        org.apache.rat.configuration.MatcherReader matcherReader4 = format0.matcherReader();
        matcherReader4.readMatcherBuilders();
        matcherReader4.readMatcherBuilders();
        org.junit.Assert.assertTrue("'" + format0 + "' != '" + org.apache.rat.configuration.Format.XML + "'", format0.equals(org.apache.rat.configuration.Format.XML));
        org.junit.Assert.assertNotNull(licenseReader1);
        org.junit.Assert.assertNotNull(licenseReader2);
        org.junit.Assert.assertNotNull(licenseReader3);
        org.junit.Assert.assertNotNull(matcherReader4);
    }

    @Test
    public void test14654() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest29.test14654");
        org.apache.rat.configuration.builders.NotBuilder notBuilder0 = org.apache.rat.analysis.IHeaderMatcher.Builder.not();
        boolean boolean1 = notBuilder0.hasId();
        org.apache.rat.configuration.builders.AllBuilder allBuilder2 = new org.apache.rat.configuration.builders.AllBuilder();
        java.lang.String str3 = allBuilder2.toString();
        org.apache.rat.analysis.IHeaderMatcher iHeaderMatcher4 = allBuilder2.build();
        org.apache.rat.configuration.builders.AnyBuilder anyBuilder5 = org.apache.rat.analysis.IHeaderMatcher.Builder.any();
        java.lang.String str6 = anyBuilder5.toString();
        java.util.List<org.apache.rat.analysis.IHeaderMatcher> iHeaderMatcherList7 = anyBuilder5.getChildren();
        org.apache.rat.analysis.IHeaderMatcher iHeaderMatcher8 = anyBuilder5.build();
        org.apache.rat.configuration.builders.AnyBuilder anyBuilder9 = org.apache.rat.analysis.IHeaderMatcher.Builder.any();
        java.lang.String str10 = anyBuilder9.toString();
        java.util.List<org.apache.rat.analysis.IHeaderMatcher> iHeaderMatcherList11 = anyBuilder9.getChildren();
        org.apache.rat.analysis.IHeaderMatcher iHeaderMatcher12 = anyBuilder9.build();
        org.apache.rat.analysis.IHeaderMatcher iHeaderMatcher13 = anyBuilder9.build();
        java.util.List<org.apache.rat.analysis.IHeaderMatcher> iHeaderMatcherList14 = anyBuilder9.getChildren();
        org.apache.rat.configuration.builders.NotBuilder notBuilder15 = new org.apache.rat.configuration.builders.NotBuilder();
        java.lang.String str16 = notBuilder15.toString();
        org.apache.rat.configuration.builders.MatcherRefBuilder matcherRefBuilder17 = org.apache.rat.analysis.IHeaderMatcher.Builder.matcherRef();
        boolean boolean18 = matcherRefBuilder17.hasId();
        java.util.Map<java.lang.String, org.apache.rat.analysis.IHeaderMatcher> strMap19 = null;
        org.apache.rat.configuration.builders.MatcherRefBuilder matcherRefBuilder20 = matcherRefBuilder17.setMatchers(strMap19);
        org.apache.rat.configuration.builders.AllBuilder allBuilder21 = new org.apache.rat.configuration.builders.AllBuilder();
        org.apache.rat.configuration.builders.CopyrightBuilder copyrightBuilder22 = org.apache.rat.analysis.IHeaderMatcher.Builder.copyright();
        org.apache.rat.configuration.builders.CopyrightBuilder copyrightBuilder24 = copyrightBuilder22.setStart("OASIS");
        java.lang.String str25 = copyrightBuilder22.toString();
        org.apache.rat.configuration.builders.CopyrightBuilder copyrightBuilder27 = copyrightBuilder22.setStart("223f0aba-15d4-49e9-901e-5740c137aebf");
        org.apache.rat.configuration.builders.MatcherRefBuilder matcherRefBuilder28 = org.apache.rat.analysis.IHeaderMatcher.Builder.matcherRef();
        boolean boolean29 = matcherRefBuilder28.hasId();
        org.apache.rat.configuration.builders.CopyrightBuilder copyrightBuilder30 = org.apache.rat.analysis.IHeaderMatcher.Builder.copyright();
        org.apache.rat.configuration.builders.CopyrightBuilder copyrightBuilder32 = copyrightBuilder30.setStart("OASIS");
        java.lang.String str33 = copyrightBuilder30.toString();
        org.apache.rat.configuration.builders.CopyrightBuilder copyrightBuilder35 = copyrightBuilder30.setStart("223f0aba-15d4-49e9-901e-5740c137aebf");
        org.apache.rat.configuration.builders.CopyrightBuilder copyrightBuilder36 = org.apache.rat.analysis.IHeaderMatcher.Builder.copyright();
        org.apache.rat.configuration.builders.CopyrightBuilder copyrightBuilder37 = org.apache.rat.analysis.IHeaderMatcher.Builder.copyright();
        java.lang.String str38 = copyrightBuilder37.toString();
        org.apache.rat.configuration.builders.CopyrightBuilder copyrightBuilder40 = copyrightBuilder37.setEnd(".cvsignore");
        boolean boolean41 = copyrightBuilder37.hasId();
        org.apache.rat.configuration.builders.CopyrightBuilder copyrightBuilder42 = org.apache.rat.analysis.IHeaderMatcher.Builder.copyright();
        java.lang.String str43 = copyrightBuilder42.toString();
        org.apache.rat.configuration.builders.CopyrightBuilder copyrightBuilder45 = copyrightBuilder42.setEnd(".cvsignore");
        boolean boolean46 = copyrightBuilder42.hasId();
        java.lang.String str47 = copyrightBuilder42.toString();
        org.apache.rat.configuration.builders.CopyrightBuilder copyrightBuilder48 = org.apache.rat.analysis.IHeaderMatcher.Builder.copyright();
        org.apache.rat.configuration.builders.CopyrightBuilder copyrightBuilder50 = copyrightBuilder48.setStart("OASIS");
        org.apache.rat.configuration.builders.AnyBuilder anyBuilder51 = org.apache.rat.analysis.IHeaderMatcher.Builder.any();
        org.apache.rat.configuration.builders.MatcherRefBuilder matcherRefBuilder52 = org.apache.rat.analysis.IHeaderMatcher.Builder.matcherRef();
        boolean boolean53 = matcherRefBuilder52.hasId();
        java.util.Map<java.lang.String, org.apache.rat.analysis.IHeaderMatcher> strMap54 = null;
        org.apache.rat.configuration.builders.MatcherRefBuilder matcherRefBuilder55 = matcherRefBuilder52.setMatchers(strMap54);
        org.apache.rat.configuration.builders.CopyrightBuilder copyrightBuilder56 = org.apache.rat.analysis.IHeaderMatcher.Builder.copyright();
        org.apache.rat.configuration.builders.MatcherRefBuilder matcherRefBuilder57 = org.apache.rat.analysis.IHeaderMatcher.Builder.matcherRef();
        boolean boolean58 = matcherRefBuilder57.hasId();
        java.lang.String str59 = matcherRefBuilder57.toString();
        java.util.Map<java.lang.String, org.apache.rat.analysis.IHeaderMatcher> strMap60 = null;
        org.apache.rat.configuration.builders.MatcherRefBuilder matcherRefBuilder61 = matcherRefBuilder57.setMatchers(strMap60);
        org.apache.rat.analysis.IHeaderMatcher.Builder[] builderArray62 = new org.apache.rat.analysis.IHeaderMatcher.Builder[] { matcherRefBuilder17, allBuilder21, copyrightBuilder27, matcherRefBuilder28, copyrightBuilder30, copyrightBuilder36, copyrightBuilder37, copyrightBuilder42, copyrightBuilder48, anyBuilder51, matcherRefBuilder52, copyrightBuilder56, matcherRefBuilder57 };
        java.util.ArrayList<org.apache.rat.analysis.IHeaderMatcher.Builder> builderList63 = new java.util.ArrayList<org.apache.rat.analysis.IHeaderMatcher.Builder>();
        boolean boolean64 = java.util.Collections.addAll((java.util.Collection<org.apache.rat.analysis.IHeaderMatcher.Builder>) builderList63, builderArray62);
        org.apache.rat.configuration.builders.AbstractBuilder abstractBuilder65 = notBuilder15.add((java.util.Collection<org.apache.rat.analysis.IHeaderMatcher.Builder>) builderList63);
        org.apache.rat.configuration.builders.AbstractBuilder abstractBuilder66 = anyBuilder9.add((java.util.Collection<org.apache.rat.analysis.IHeaderMatcher.Builder>) builderList63);
        org.apache.rat.configuration.builders.AbstractBuilder abstractBuilder67 = anyBuilder5.add((java.util.Collection<org.apache.rat.analysis.IHeaderMatcher.Builder>) builderList63);
        org.apache.rat.configuration.builders.AbstractBuilder abstractBuilder68 = allBuilder2.add((java.util.Collection<org.apache.rat.analysis.IHeaderMatcher.Builder>) builderList63);
        org.apache.rat.configuration.builders.AbstractBuilder abstractBuilder69 = notBuilder0.add((java.util.Collection<org.apache.rat.analysis.IHeaderMatcher.Builder>) builderList63);
        java.lang.String str70 = notBuilder0.toString();
        java.lang.String str71 = notBuilder0.toString();
        org.junit.Assert.assertNotNull(notBuilder0);
        org.junit.Assert.assertTrue("'" + boolean1 + "' != '" + false + "'", boolean1 == false);
        org.junit.Assert.assertEquals("'" + str3 + "' != '" + "AllBuilder:" + "'", str3, "AllBuilder:");
        org.junit.Assert.assertNotNull(iHeaderMatcher4);
        org.junit.Assert.assertNotNull(anyBuilder5);
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "AnyBuilder:" + "'", str6, "AnyBuilder:");
        org.junit.Assert.assertNotNull(iHeaderMatcherList7);
        org.junit.Assert.assertNotNull(iHeaderMatcher8);
        org.junit.Assert.assertNotNull(anyBuilder9);
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "AnyBuilder:" + "'", str10, "AnyBuilder:");
        org.junit.Assert.assertNotNull(iHeaderMatcherList11);
        org.junit.Assert.assertNotNull(iHeaderMatcher12);
        org.junit.Assert.assertNotNull(iHeaderMatcher13);
        org.junit.Assert.assertNotNull(iHeaderMatcherList14);
        org.junit.Assert.assertEquals("'" + str16 + "' != '" + "NotBuilder: null" + "'", str16, "NotBuilder: null");
        org.junit.Assert.assertNotNull(matcherRefBuilder17);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + false + "'", boolean18 == false);
        org.junit.Assert.assertNotNull(matcherRefBuilder20);
        org.junit.Assert.assertNotNull(copyrightBuilder22);
        org.junit.Assert.assertNotNull(copyrightBuilder24);
        org.junit.Assert.assertEquals("'" + str25 + "' != '" + "Copyright Builder: s:OASIS e:null o:null" + "'", str25, "Copyright Builder: s:OASIS e:null o:null");
        org.junit.Assert.assertNotNull(copyrightBuilder27);
        org.junit.Assert.assertNotNull(matcherRefBuilder28);
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + false + "'", boolean29 == false);
        org.junit.Assert.assertNotNull(copyrightBuilder30);
        org.junit.Assert.assertNotNull(copyrightBuilder32);
        org.junit.Assert.assertEquals("'" + str33 + "' != '" + "Copyright Builder: s:OASIS e:null o:null" + "'", str33, "Copyright Builder: s:OASIS e:null o:null");
        org.junit.Assert.assertNotNull(copyrightBuilder35);
        org.junit.Assert.assertNotNull(copyrightBuilder36);
        org.junit.Assert.assertNotNull(copyrightBuilder37);
        org.junit.Assert.assertEquals("'" + str38 + "' != '" + "Copyright Builder: s:null e:null o:null" + "'", str38, "Copyright Builder: s:null e:null o:null");
        org.junit.Assert.assertNotNull(copyrightBuilder40);
        org.junit.Assert.assertTrue("'" + boolean41 + "' != '" + false + "'", boolean41 == false);
        org.junit.Assert.assertNotNull(copyrightBuilder42);
        org.junit.Assert.assertEquals("'" + str43 + "' != '" + "Copyright Builder: s:null e:null o:null" + "'", str43, "Copyright Builder: s:null e:null o:null");
        org.junit.Assert.assertNotNull(copyrightBuilder45);
        org.junit.Assert.assertTrue("'" + boolean46 + "' != '" + false + "'", boolean46 == false);
        org.junit.Assert.assertEquals("'" + str47 + "' != '" + "Copyright Builder: s:null e:.cvsignore o:null" + "'", str47, "Copyright Builder: s:null e:.cvsignore o:null");
        org.junit.Assert.assertNotNull(copyrightBuilder48);
        org.junit.Assert.assertNotNull(copyrightBuilder50);
        org.junit.Assert.assertNotNull(anyBuilder51);
        org.junit.Assert.assertNotNull(matcherRefBuilder52);
        org.junit.Assert.assertTrue("'" + boolean53 + "' != '" + false + "'", boolean53 == false);
        org.junit.Assert.assertNotNull(matcherRefBuilder55);
        org.junit.Assert.assertNotNull(copyrightBuilder56);
        org.junit.Assert.assertNotNull(matcherRefBuilder57);
        org.junit.Assert.assertTrue("'" + boolean58 + "' != '" + false + "'", boolean58 == false);
        org.junit.Assert.assertEquals("'" + str59 + "' != '" + "MathcerRefBuilder: null" + "'", str59, "MathcerRefBuilder: null");
        org.junit.Assert.assertNotNull(matcherRefBuilder61);
        org.junit.Assert.assertNotNull(builderArray62);
        org.junit.Assert.assertTrue("'" + boolean64 + "' != '" + true + "'", boolean64 == true);
        org.junit.Assert.assertNotNull(abstractBuilder65);
        org.junit.Assert.assertNotNull(abstractBuilder66);
        org.junit.Assert.assertNotNull(abstractBuilder67);
        org.junit.Assert.assertNotNull(abstractBuilder68);
        org.junit.Assert.assertNotNull(abstractBuilder69);
        org.junit.Assert.assertEquals("'" + str70 + "' != '" + "NotBuilder: MathcerRefBuilder: null" + "'", str70, "NotBuilder: MathcerRefBuilder: null");
        org.junit.Assert.assertEquals("'" + str71 + "' != '" + "NotBuilder: MathcerRefBuilder: null" + "'", str71, "NotBuilder: MathcerRefBuilder: null");
    }

    @Test
    public void test14655() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest29.test14655");
        java.util.regex.Pattern pattern1 = null;
        org.apache.rat.analysis.matchers.SimpleRegexMatcher simpleRegexMatcher2 = new org.apache.rat.analysis.matchers.SimpleRegexMatcher("", pattern1);
        simpleRegexMatcher2.reset();
        org.apache.rat.analysis.IHeaderMatcher.State state4 = simpleRegexMatcher2.finalizeState();
        java.lang.String str5 = simpleRegexMatcher2.toString();
        java.lang.String str6 = simpleRegexMatcher2.getId();
        // The following exception was thrown during execution in test generation
        try {
            boolean boolean8 = simpleRegexMatcher2.doMatch("0c5b2bd2-284e-4146-88ab-f447552c02f1");
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + state4 + "' != '" + org.apache.rat.analysis.IHeaderMatcher.State.f + "'", state4.equals(org.apache.rat.analysis.IHeaderMatcher.State.f));
// flaky:         org.junit.Assert.assertEquals("'" + str5 + "' != '" + "6b4f422a-9308-44a3-af40-9e1118a261ca" + "'", str5, "6b4f422a-9308-44a3-af40-9e1118a261ca");
// flaky:         org.junit.Assert.assertEquals("'" + str6 + "' != '" + "6b4f422a-9308-44a3-af40-9e1118a261ca" + "'", str6, "6b4f422a-9308-44a3-af40-9e1118a261ca");
    }

    @Test
    public void test14656() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest29.test14656");
        java.lang.String[] strArray10 = new java.lang.String[] { "NotBuilder: null", "Datum [ name ='http://org/apache/rat/meta-data#LicenseFamilyCategory',value ='OASIS ']", "Copyright Builder: s:null e:null o:null", "Datum [ name ='http://org/apache/rat/meta-data#LicenseFamilyCategory',value ='DOJO  ']", "Datum [ name ='http://org/apache/rat/meta-data#LicenseFamilyCategory',value ='OASIS ']", "http://org/apache/rat/meta-data#HeaderCategory" };
        boolean boolean11 = org.apache.rat.document.impl.guesser.BinaryGuesser.extensionMatches("Modified BSD License", strArray10);
        boolean boolean12 = org.apache.rat.document.impl.guesser.BinaryGuesser.containsExtension("true", strArray10);
        boolean boolean13 = org.apache.rat.document.impl.guesser.BinaryGuesser.containsExtension("3c840dc2-bef0-42b5-b26c-35a568d53a24", strArray10);
        boolean boolean14 = org.apache.rat.document.impl.guesser.BinaryGuesser.extensionMatches("Copyright Builder: s:null e:6486879ffc814b57aec7c4c77d540c30 o:null", strArray10);
        org.junit.Assert.assertNotNull(strArray10);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
    }

    @Test
    public void test14657() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest29.test14657");
        org.apache.rat.analysis.matchers.FullTextMatcher fullTextMatcher1 = new org.apache.rat.analysis.matchers.FullTextMatcher("standard");
        boolean boolean3 = fullTextMatcher1.doMatch("AnyBuilder:");
        boolean boolean5 = fullTextMatcher1.doMatch("ba9961f9-a0de-4a54-bd1f-a2e9df26a188");
        java.lang.String str6 = fullTextMatcher1.getId();
        org.apache.rat.analysis.IHeaderMatcher.State state7 = fullTextMatcher1.finalizeState();
        fullTextMatcher1.reset();
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
// flaky:         org.junit.Assert.assertEquals("'" + str6 + "' != '" + "ba035bb0-505f-45c8-b30c-1aa452f1af4b" + "'", str6, "ba035bb0-505f-45c8-b30c-1aa452f1af4b");
        org.junit.Assert.assertTrue("'" + state7 + "' != '" + org.apache.rat.analysis.IHeaderMatcher.State.f + "'", state7.equals(org.apache.rat.analysis.IHeaderMatcher.State.f));
    }

    @Test
    public void test14658() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest29.test14658");
        org.apache.rat.license.ILicenseFamilyBuilder iLicenseFamilyBuilder0 = new org.apache.rat.license.ILicenseFamilyBuilder();
        java.lang.String str1 = iLicenseFamilyBuilder0.getCategory();
        org.apache.rat.license.ILicenseFamily.Builder builder3 = iLicenseFamilyBuilder0.setLicenseFamilyCategory("AL   ");
        org.apache.rat.license.ILicenseFamily.Builder builder5 = iLicenseFamilyBuilder0.setLicenseFamilyCategory("MIT  ");
        org.apache.rat.license.ILicenseFamily.Builder builder7 = iLicenseFamilyBuilder0.setLicenseFamilyName("4a00cf7d-fe76-423e-917e-b03bbae6b8a5");
        java.lang.String str8 = iLicenseFamilyBuilder0.getCategory();
        org.apache.rat.license.ILicenseFamily iLicenseFamily9 = iLicenseFamilyBuilder0.build();
        java.lang.String str10 = iLicenseFamilyBuilder0.getCategory();
        org.apache.rat.license.ILicenseFamily.Builder builder12 = iLicenseFamilyBuilder0.setLicenseFamilyName("A");
        org.junit.Assert.assertNull(str1);
        org.junit.Assert.assertNotNull(builder3);
        org.junit.Assert.assertNotNull(builder5);
        org.junit.Assert.assertNotNull(builder7);
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "MIT  " + "'", str8, "MIT  ");
        org.junit.Assert.assertNotNull(iLicenseFamily9);
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "MIT  " + "'", str10, "MIT  ");
        org.junit.Assert.assertNotNull(builder12);
    }

    @Test
    public void test14659() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest29.test14659");
        org.apache.rat.Defaults.Builder builder0 = org.apache.rat.Defaults.builder();
        org.apache.rat.Defaults defaults1 = builder0.build();
        org.apache.rat.Defaults.Builder builder2 = builder0.noDefault();
        org.apache.rat.Defaults.Builder builder4 = builder0.remove("AllBuilder:");
        org.apache.rat.Defaults.Builder builder6 = builder4.add("?????");
        org.apache.rat.Defaults.Builder builder7 = builder6.noDefault();
        org.apache.rat.Defaults.Builder builder9 = builder7.remove("SpdxBuilder: 641dafc1-13c3-45d4-8272-f36f10392c53");
        org.apache.rat.Defaults.Builder builder11 = builder9.add("d4dd3824-2602-4624-aa0f-4dff524ea8ef");
        org.apache.rat.Defaults.Builder builder13 = builder9.add("Datum [ name ='http://org/apache/rat/meta-data#LicenseFamilyCategory',value ='DOJO  ']");
        org.junit.Assert.assertNotNull(builder0);
        org.junit.Assert.assertNotNull(defaults1);
        org.junit.Assert.assertNotNull(builder2);
        org.junit.Assert.assertNotNull(builder4);
        org.junit.Assert.assertNotNull(builder6);
        org.junit.Assert.assertNotNull(builder7);
        org.junit.Assert.assertNotNull(builder9);
        org.junit.Assert.assertNotNull(builder11);
        org.junit.Assert.assertNotNull(builder13);
    }

    @Test
    public void test14660() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest29.test14660");
        java.io.Writer writer0 = null;
        org.apache.rat.report.xml.writer.impl.base.XmlWriter xmlWriter1 = new org.apache.rat.report.xml.writer.impl.base.XmlWriter(writer0);
        org.apache.rat.report.claim.impl.xml.SimpleXmlClaimReporter simpleXmlClaimReporter2 = new org.apache.rat.report.claim.impl.xml.SimpleXmlClaimReporter((org.apache.rat.report.xml.writer.IXmlWriter) xmlWriter1);
        org.apache.rat.report.claim.impl.xml.SimpleXmlClaimReporter simpleXmlClaimReporter3 = new org.apache.rat.report.claim.impl.xml.SimpleXmlClaimReporter((org.apache.rat.report.xml.writer.IXmlWriter) xmlWriter1);
        org.apache.rat.report.claim.impl.xml.SimpleXmlClaimReporter simpleXmlClaimReporter4 = new org.apache.rat.report.claim.impl.xml.SimpleXmlClaimReporter((org.apache.rat.report.xml.writer.IXmlWriter) xmlWriter1);
        org.apache.rat.report.claim.impl.xml.SimpleXmlClaimReporter simpleXmlClaimReporter5 = new org.apache.rat.report.claim.impl.xml.SimpleXmlClaimReporter((org.apache.rat.report.xml.writer.IXmlWriter) xmlWriter1);
        // The following exception was thrown during execution in test generation
        try {
            org.apache.rat.report.xml.writer.IXmlWriter iXmlWriter7 = xmlWriter1.content((java.lang.CharSequence) "MathcerRefBuilder: 3e2b228d-d5ff-4444-8d8c-d614494b2426");
            org.junit.Assert.fail("Expected exception of type org.apache.rat.report.xml.writer.OperationNotAllowedException; message: An element must be opened before content can be written.");
        } catch (org.apache.rat.report.xml.writer.OperationNotAllowedException e) {
            // Expected exception.
        }
    }

    @Test
    public void test14661() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest29.test14661");
        org.apache.rat.utils.Log log0 = null;
        org.apache.rat.ReportConfiguration reportConfiguration1 = new org.apache.rat.ReportConfiguration(log0);
        java.io.FilenameFilter filenameFilter2 = reportConfiguration1.getInputFileFilter();
        org.apache.rat.license.LicenseSetFactory.LicenseFilter licenseFilter3 = org.apache.rat.license.LicenseSetFactory.LicenseFilter.all;
        java.util.SortedSet<org.apache.rat.license.ILicense> iLicenseSet4 = reportConfiguration1.getLicenses(licenseFilter3);
        org.apache.rat.license.ILicenseFamily iLicenseFamily5 = null;
        reportConfiguration1.addFamily(iLicenseFamily5);
        org.apache.commons.io.filefilter.IOFileFilter iOFileFilter7 = reportConfiguration1.getDirectoryFilter();
        org.apache.rat.utils.Log log8 = null;
        org.apache.rat.ReportConfiguration reportConfiguration9 = new org.apache.rat.ReportConfiguration(log8);
        java.io.FilenameFilter filenameFilter10 = reportConfiguration9.getInputFileFilter();
        org.apache.rat.license.LicenseSetFactory.LicenseFilter licenseFilter11 = org.apache.rat.license.LicenseSetFactory.LicenseFilter.all;
        java.util.SortedSet<org.apache.rat.license.ILicense> iLicenseSet12 = reportConfiguration9.getLicenses(licenseFilter11);
        org.apache.rat.config.AddLicenseHeaders addLicenseHeaders13 = org.apache.rat.config.AddLicenseHeaders.FALSE;
        reportConfiguration9.setAddLicenseHeaders(addLicenseHeaders13);
        org.apache.rat.utils.Log log15 = null;
        org.apache.rat.ReportConfiguration reportConfiguration16 = new org.apache.rat.ReportConfiguration(log15);
        org.apache.rat.report.claim.ClaimStatistic claimStatistic17 = org.apache.rat.Reporter.report(reportConfiguration16);
        org.apache.rat.license.LicenseSetFactory.LicenseFilter licenseFilter18 = org.apache.rat.license.LicenseSetFactory.LicenseFilter.all;
        org.apache.rat.Reporter.listLicenses(reportConfiguration16, licenseFilter18);
        org.apache.rat.Reporter.listLicenses(reportConfiguration9, licenseFilter18);
        org.apache.rat.utils.Log log21 = null;
        org.apache.rat.ReportConfiguration reportConfiguration22 = new org.apache.rat.ReportConfiguration(log21);
        java.io.FilenameFilter filenameFilter23 = reportConfiguration22.getInputFileFilter();
        org.apache.rat.license.LicenseSetFactory.LicenseFilter licenseFilter24 = org.apache.rat.license.LicenseSetFactory.LicenseFilter.all;
        java.util.SortedSet<org.apache.rat.license.ILicense> iLicenseSet25 = reportConfiguration22.getLicenses(licenseFilter24);
        org.apache.rat.config.AddLicenseHeaders addLicenseHeaders26 = org.apache.rat.config.AddLicenseHeaders.FALSE;
        reportConfiguration22.setAddLicenseHeaders(addLicenseHeaders26);
        org.apache.rat.utils.Log log28 = null;
        org.apache.rat.ReportConfiguration reportConfiguration29 = new org.apache.rat.ReportConfiguration(log28);
        org.apache.rat.report.claim.ClaimStatistic claimStatistic30 = org.apache.rat.Reporter.report(reportConfiguration29);
        org.apache.rat.license.LicenseSetFactory.LicenseFilter licenseFilter31 = org.apache.rat.license.LicenseSetFactory.LicenseFilter.all;
        org.apache.rat.Reporter.listLicenses(reportConfiguration29, licenseFilter31);
        org.apache.rat.Reporter.listLicenses(reportConfiguration22, licenseFilter31);
        org.apache.rat.Reporter.listLicenses(reportConfiguration9, licenseFilter31);
        org.apache.rat.utils.Log log35 = null;
        org.apache.rat.ReportConfiguration reportConfiguration36 = new org.apache.rat.ReportConfiguration(log35);
        org.apache.commons.io.function.IOSupplier<java.io.OutputStream> outputStreamIOSupplier37 = reportConfiguration36.getOutput();
        reportConfiguration9.setOut(outputStreamIOSupplier37);
        org.apache.rat.utils.Log.Level level39 = org.apache.rat.utils.Log.Level.WARN;
        reportConfiguration9.logLicenseCollisions(level39);
        org.apache.commons.io.filefilter.IOFileFilter iOFileFilter41 = reportConfiguration9.getDirectoryFilter();
        java.nio.file.Path path42 = null;
        boolean boolean43 = iOFileFilter41.matches(path42);
        java.nio.file.Path path44 = null;
        java.nio.file.attribute.BasicFileAttributes basicFileAttributes45 = null;
        java.nio.file.FileVisitResult fileVisitResult46 = iOFileFilter41.accept(path44, basicFileAttributes45);
        org.apache.commons.io.filefilter.IOFileFilter iOFileFilter47 = iOFileFilter7.or(iOFileFilter41);
        org.apache.commons.io.filefilter.IOFileFilter iOFileFilter48 = iOFileFilter41.negate();
        org.apache.commons.io.filefilter.IOFileFilter iOFileFilter49 = iOFileFilter48.negate();
        java.nio.file.Path path50 = null;
        java.nio.file.attribute.BasicFileAttributes basicFileAttributes51 = null;
        java.nio.file.FileVisitResult fileVisitResult52 = iOFileFilter49.accept(path50, basicFileAttributes51);
        org.apache.commons.io.filefilter.IOFileFilter iOFileFilter53 = iOFileFilter49.negate();
        org.junit.Assert.assertNull(filenameFilter2);
        org.junit.Assert.assertTrue("'" + licenseFilter3 + "' != '" + org.apache.rat.license.LicenseSetFactory.LicenseFilter.all + "'", licenseFilter3.equals(org.apache.rat.license.LicenseSetFactory.LicenseFilter.all));
        org.junit.Assert.assertNotNull(iLicenseSet4);
        org.junit.Assert.assertNotNull(iOFileFilter7);
        org.junit.Assert.assertNull(filenameFilter10);
        org.junit.Assert.assertTrue("'" + licenseFilter11 + "' != '" + org.apache.rat.license.LicenseSetFactory.LicenseFilter.all + "'", licenseFilter11.equals(org.apache.rat.license.LicenseSetFactory.LicenseFilter.all));
        org.junit.Assert.assertNotNull(iLicenseSet12);
        org.junit.Assert.assertTrue("'" + addLicenseHeaders13 + "' != '" + org.apache.rat.config.AddLicenseHeaders.FALSE + "'", addLicenseHeaders13.equals(org.apache.rat.config.AddLicenseHeaders.FALSE));
        org.junit.Assert.assertNull(claimStatistic17);
        org.junit.Assert.assertTrue("'" + licenseFilter18 + "' != '" + org.apache.rat.license.LicenseSetFactory.LicenseFilter.all + "'", licenseFilter18.equals(org.apache.rat.license.LicenseSetFactory.LicenseFilter.all));
        org.junit.Assert.assertNull(filenameFilter23);
        org.junit.Assert.assertTrue("'" + licenseFilter24 + "' != '" + org.apache.rat.license.LicenseSetFactory.LicenseFilter.all + "'", licenseFilter24.equals(org.apache.rat.license.LicenseSetFactory.LicenseFilter.all));
        org.junit.Assert.assertNotNull(iLicenseSet25);
        org.junit.Assert.assertTrue("'" + addLicenseHeaders26 + "' != '" + org.apache.rat.config.AddLicenseHeaders.FALSE + "'", addLicenseHeaders26.equals(org.apache.rat.config.AddLicenseHeaders.FALSE));
        org.junit.Assert.assertNull(claimStatistic30);
        org.junit.Assert.assertTrue("'" + licenseFilter31 + "' != '" + org.apache.rat.license.LicenseSetFactory.LicenseFilter.all + "'", licenseFilter31.equals(org.apache.rat.license.LicenseSetFactory.LicenseFilter.all));
        org.junit.Assert.assertNotNull(outputStreamIOSupplier37);
        org.junit.Assert.assertTrue("'" + level39 + "' != '" + org.apache.rat.utils.Log.Level.WARN + "'", level39.equals(org.apache.rat.utils.Log.Level.WARN));
        org.junit.Assert.assertNotNull(iOFileFilter41);
        org.junit.Assert.assertTrue("'" + boolean43 + "' != '" + false + "'", boolean43 == false);
        org.junit.Assert.assertTrue("'" + fileVisitResult46 + "' != '" + java.nio.file.FileVisitResult.TERMINATE + "'", fileVisitResult46.equals(java.nio.file.FileVisitResult.TERMINATE));
        org.junit.Assert.assertNotNull(iOFileFilter47);
        org.junit.Assert.assertNotNull(iOFileFilter48);
        org.junit.Assert.assertNotNull(iOFileFilter49);
        org.junit.Assert.assertTrue("'" + fileVisitResult52 + "' != '" + java.nio.file.FileVisitResult.TERMINATE + "'", fileVisitResult52.equals(java.nio.file.FileVisitResult.TERMINATE));
        org.junit.Assert.assertNotNull(iOFileFilter53);
    }

    @Test
    public void test14662() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest29.test14662");
        org.apache.rat.document.ToNameTransformer toNameTransformer0 = new org.apache.rat.document.ToNameTransformer();
        org.apache.rat.utils.DefaultLog defaultLog1 = org.apache.rat.utils.DefaultLog.INSTANCE;
        org.apache.rat.license.ILicense.Builder builder2 = org.apache.rat.license.ILicense.builder();
        org.apache.rat.license.ILicense.Builder builder4 = builder2.setLicenseFamilyCategory("");
        org.apache.rat.analysis.matchers.CopyrightMatcher copyrightMatcher8 = new org.apache.rat.analysis.matchers.CopyrightMatcher("", "GPL1 ", "hi!");
        org.apache.rat.analysis.IHeaderMatcher.State state9 = copyrightMatcher8.finalizeState();
        org.apache.rat.license.ILicense.Builder builder10 = builder4.setMatcher((org.apache.rat.analysis.IHeaderMatcher) copyrightMatcher8);
        org.apache.rat.license.ILicense.Builder builder12 = builder10.setLicenseFamilyCategory("");
        defaultLog1.error((java.lang.Object) builder12);
        java.lang.Object obj14 = toNameTransformer0.transform((java.lang.Object) defaultLog1);
        org.apache.rat.configuration.builders.AllBuilder allBuilder15 = new org.apache.rat.configuration.builders.AllBuilder();
        java.lang.String str16 = allBuilder15.toString();
        java.util.List<org.apache.rat.analysis.IHeaderMatcher> iHeaderMatcherList17 = allBuilder15.getChildren();
        java.lang.Object obj18 = toNameTransformer0.transform((java.lang.Object) allBuilder15);
        org.apache.rat.configuration.builders.AllBuilder allBuilder19 = org.apache.rat.analysis.IHeaderMatcher.Builder.all();
        org.apache.rat.configuration.builders.AbstractBuilder abstractBuilder20 = allBuilder15.add((org.apache.rat.analysis.IHeaderMatcher.Builder) allBuilder19);
        java.util.List<org.apache.rat.analysis.IHeaderMatcher> iHeaderMatcherList21 = allBuilder19.getChildren();
        org.junit.Assert.assertNotNull(defaultLog1);
        org.junit.Assert.assertNotNull(builder2);
        org.junit.Assert.assertNotNull(builder4);
        org.junit.Assert.assertTrue("'" + state9 + "' != '" + org.apache.rat.analysis.IHeaderMatcher.State.f + "'", state9.equals(org.apache.rat.analysis.IHeaderMatcher.State.f));
        org.junit.Assert.assertNotNull(builder10);
        org.junit.Assert.assertNotNull(builder12);
        org.junit.Assert.assertNull(obj14);
        org.junit.Assert.assertEquals("'" + str16 + "' != '" + "AllBuilder:" + "'", str16, "AllBuilder:");
        org.junit.Assert.assertNotNull(iHeaderMatcherList17);
        org.junit.Assert.assertNull(obj18);
        org.junit.Assert.assertNotNull(allBuilder19);
        org.junit.Assert.assertNotNull(abstractBuilder20);
        org.junit.Assert.assertNotNull(iHeaderMatcherList21);
    }

    @Test
    public void test14663() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest29.test14663");
        org.apache.rat.license.ILicenseFamilyBuilder iLicenseFamilyBuilder0 = new org.apache.rat.license.ILicenseFamilyBuilder();
        java.lang.String str1 = iLicenseFamilyBuilder0.getCategory();
        org.apache.rat.license.ILicenseFamily.Builder builder3 = iLicenseFamilyBuilder0.setLicenseFamilyCategory("AL   ");
        org.apache.rat.license.ILicenseFamily.Builder builder5 = iLicenseFamilyBuilder0.setLicenseFamilyCategory("MIT  ");
        org.apache.rat.license.ILicenseFamily.Builder builder7 = iLicenseFamilyBuilder0.setLicenseFamilyName("4a00cf7d-fe76-423e-917e-b03bbae6b8a5");
        java.lang.String str8 = iLicenseFamilyBuilder0.getCategory();
        org.apache.rat.license.ILicenseFamily.Builder builder10 = iLicenseFamilyBuilder0.setLicenseFamilyName("8ecb8cce-06e4-400f-84d9-ad1cf6289fda");
        java.lang.String str11 = iLicenseFamilyBuilder0.getCategory();
        org.apache.rat.license.ILicenseFamily.Builder builder13 = iLicenseFamilyBuilder0.setLicenseFamilyCategory("ffalse");
        java.lang.String str14 = iLicenseFamilyBuilder0.getCategory();
        org.apache.rat.license.ILicenseFamily.Builder builder16 = iLicenseFamilyBuilder0.setLicenseFamilyName("1179c");
        org.apache.rat.license.ILicenseFamily iLicenseFamily17 = iLicenseFamilyBuilder0.build();
        java.lang.String str18 = iLicenseFamilyBuilder0.getCategory();
        org.junit.Assert.assertNull(str1);
        org.junit.Assert.assertNotNull(builder3);
        org.junit.Assert.assertNotNull(builder5);
        org.junit.Assert.assertNotNull(builder7);
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "MIT  " + "'", str8, "MIT  ");
        org.junit.Assert.assertNotNull(builder10);
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "MIT  " + "'", str11, "MIT  ");
        org.junit.Assert.assertNotNull(builder13);
        org.junit.Assert.assertEquals("'" + str14 + "' != '" + "ffalse" + "'", str14, "ffalse");
        org.junit.Assert.assertNotNull(builder16);
        org.junit.Assert.assertNotNull(iLicenseFamily17);
        org.junit.Assert.assertEquals("'" + str18 + "' != '" + "ffalse" + "'", str18, "ffalse");
    }

    @Test
    public void test14664() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest29.test14664");
        // The following exception was thrown during execution in test generation
        try {
            org.apache.rat.configuration.Format format1 = org.apache.rat.configuration.Format.fromName("RegexBuilder: 6f2b4022-35cc-4b09-8df5-79e286566ad3");
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: No such suffix: RegexBuilder: 6f2b4022-35cc-4b09-8df5-79e286566ad3");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
    }

    @Test
    public void test14665() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest29.test14665");
        org.apache.rat.utils.DefaultLog defaultLog0 = org.apache.rat.utils.DefaultLog.INSTANCE;
        org.apache.rat.license.ILicense.Builder builder1 = org.apache.rat.license.ILicense.builder();
        org.apache.rat.license.ILicense.Builder builder3 = builder1.setLicenseFamilyCategory("");
        org.apache.rat.analysis.matchers.CopyrightMatcher copyrightMatcher7 = new org.apache.rat.analysis.matchers.CopyrightMatcher("", "GPL1 ", "hi!");
        org.apache.rat.analysis.IHeaderMatcher.State state8 = copyrightMatcher7.finalizeState();
        org.apache.rat.license.ILicense.Builder builder9 = builder3.setMatcher((org.apache.rat.analysis.IHeaderMatcher) copyrightMatcher7);
        org.apache.rat.license.ILicense.Builder builder11 = builder9.setLicenseFamilyCategory("");
        defaultLog0.error((java.lang.Object) builder11);
        org.apache.rat.analysis.matchers.CopyrightMatcher copyrightMatcher16 = new org.apache.rat.analysis.matchers.CopyrightMatcher("", "GPL1 ", "hi!");
        copyrightMatcher16.reset();
        org.apache.rat.license.ILicense.Builder builder18 = builder11.setMatcher((org.apache.rat.analysis.IHeaderMatcher) copyrightMatcher16);
        org.apache.rat.configuration.builders.SpdxBuilder spdxBuilder19 = org.apache.rat.analysis.IHeaderMatcher.Builder.spdx();
        java.lang.String str20 = spdxBuilder19.toString();
        org.apache.rat.configuration.builders.SpdxBuilder spdxBuilder22 = spdxBuilder19.setName("ef7a8b13-64c3-4510-bb0c-dbf208e1e73f");
        org.apache.rat.license.ILicense.Builder builder23 = builder18.setMatcher((org.apache.rat.analysis.IHeaderMatcher.Builder) spdxBuilder19);
        org.apache.rat.license.ILicense.Builder builder25 = builder23.setName("DOJO ");
        org.apache.rat.license.ILicense.Builder builder27 = builder25.setLicenseFamilyCategory("RegexBuilder: http://org/apache/rat/meta-data#LicenseFamilyName");
        org.apache.rat.license.ILicense.Builder builder29 = builder27.setNotes("MathcerRefBuilder: TextBuilder: SpdxBuilder: null");
        org.apache.rat.license.ILicense.Builder builder31 = builder29.setLicenseFamilyCategory("TMF  ");
        org.apache.rat.configuration.builders.TextBuilder textBuilder32 = org.apache.rat.analysis.IHeaderMatcher.Builder.text();
        org.apache.rat.configuration.builders.TextBuilder textBuilder34 = textBuilder32.setText("");
        java.lang.String str35 = textBuilder34.toString();
        org.apache.rat.configuration.builders.TextBuilder textBuilder37 = textBuilder34.setText("META-DATA#LICENSEFAMILYNAME");
        org.apache.rat.analysis.IHeaderMatcher iHeaderMatcher38 = textBuilder37.build();
        org.apache.rat.analysis.IHeaderMatcher.State state39 = iHeaderMatcher38.currentState();
        org.apache.rat.analysis.matchers.NotMatcher notMatcher40 = new org.apache.rat.analysis.matchers.NotMatcher(iHeaderMatcher38);
        org.apache.rat.license.ILicense.Builder builder41 = builder29.setMatcher((org.apache.rat.analysis.IHeaderMatcher) notMatcher40);
        org.apache.rat.analysis.IHeaderMatcher.State state42 = notMatcher40.currentState();
        org.apache.rat.analysis.IHeaderMatcher.State state44 = notMatcher40.matches("5742ca8d-5ff2-44a3-b3ef-a27bfa90ea89");
        org.junit.Assert.assertNotNull(defaultLog0);
        org.junit.Assert.assertNotNull(builder1);
        org.junit.Assert.assertNotNull(builder3);
        org.junit.Assert.assertTrue("'" + state8 + "' != '" + org.apache.rat.analysis.IHeaderMatcher.State.f + "'", state8.equals(org.apache.rat.analysis.IHeaderMatcher.State.f));
        org.junit.Assert.assertNotNull(builder9);
        org.junit.Assert.assertNotNull(builder11);
        org.junit.Assert.assertNotNull(builder18);
        org.junit.Assert.assertNotNull(spdxBuilder19);
        org.junit.Assert.assertEquals("'" + str20 + "' != '" + "SpdxBuilder: null" + "'", str20, "SpdxBuilder: null");
        org.junit.Assert.assertNotNull(spdxBuilder22);
        org.junit.Assert.assertNotNull(builder23);
        org.junit.Assert.assertNotNull(builder25);
        org.junit.Assert.assertNotNull(builder27);
        org.junit.Assert.assertNotNull(builder29);
        org.junit.Assert.assertNotNull(builder31);
        org.junit.Assert.assertNotNull(textBuilder32);
        org.junit.Assert.assertNotNull(textBuilder34);
        org.junit.Assert.assertEquals("'" + str35 + "' != '" + "TextBuilder: " + "'", str35, "TextBuilder: ");
        org.junit.Assert.assertNotNull(textBuilder37);
        org.junit.Assert.assertNotNull(iHeaderMatcher38);
        org.junit.Assert.assertTrue("'" + state39 + "' != '" + org.apache.rat.analysis.IHeaderMatcher.State.i + "'", state39.equals(org.apache.rat.analysis.IHeaderMatcher.State.i));
        org.junit.Assert.assertNotNull(builder41);
        org.junit.Assert.assertTrue("'" + state42 + "' != '" + org.apache.rat.analysis.IHeaderMatcher.State.i + "'", state42.equals(org.apache.rat.analysis.IHeaderMatcher.State.i));
        org.junit.Assert.assertTrue("'" + state44 + "' != '" + org.apache.rat.analysis.IHeaderMatcher.State.i + "'", state44.equals(org.apache.rat.analysis.IHeaderMatcher.State.i));
    }

    @Test
    public void test14666() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest29.test14666");
        org.apache.rat.license.ILicense[] iLicenseArray1 = new org.apache.rat.license.ILicense[] {};
        java.util.TreeSet<org.apache.rat.license.ILicense> iLicenseSet2 = new java.util.TreeSet<org.apache.rat.license.ILicense>();
        boolean boolean3 = java.util.Collections.addAll((java.util.Collection<org.apache.rat.license.ILicense>) iLicenseSet2, iLicenseArray1);
        java.lang.String[] strArray16 = new java.lang.String[] { "GPL2 ", "GPL1 ", "notice", "http://org/apache/rat/meta-data#LicenseFamilyName", "notice", "GPL2 ", "http://org/apache/rat/meta-data#LicenseFamilyName", "", "GPL2 ", "", "GPL1 ", "hi!" };
        java.util.ArrayList<java.lang.String> strList17 = new java.util.ArrayList<java.lang.String>();
        boolean boolean18 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strList17, strArray16);
        org.apache.rat.license.LicenseSetFactory licenseSetFactory19 = new org.apache.rat.license.LicenseSetFactory((java.util.SortedSet<org.apache.rat.license.ILicense>) iLicenseSet2, (java.util.Collection<java.lang.String>) strList17);
        org.apache.rat.license.LicenseSetFactory.LicenseFilter licenseFilter20 = org.apache.rat.license.LicenseSetFactory.LicenseFilter.all;
        java.util.SortedSet<org.apache.rat.license.ILicenseFamily> iLicenseFamilySet21 = licenseSetFactory19.getLicenseFamilies(licenseFilter20);
        org.apache.rat.license.ILicense[] iLicenseArray22 = new org.apache.rat.license.ILicense[] {};
        java.util.TreeSet<org.apache.rat.license.ILicense> iLicenseSet23 = new java.util.TreeSet<org.apache.rat.license.ILicense>();
        boolean boolean24 = java.util.Collections.addAll((java.util.Collection<org.apache.rat.license.ILicense>) iLicenseSet23, iLicenseArray22);
        java.lang.String[] strArray37 = new java.lang.String[] { "GPL2 ", "GPL1 ", "notice", "http://org/apache/rat/meta-data#LicenseFamilyName", "notice", "GPL2 ", "http://org/apache/rat/meta-data#LicenseFamilyName", "", "GPL2 ", "", "GPL1 ", "hi!" };
        java.util.ArrayList<java.lang.String> strList38 = new java.util.ArrayList<java.lang.String>();
        boolean boolean39 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strList38, strArray37);
        org.apache.rat.license.LicenseSetFactory licenseSetFactory40 = new org.apache.rat.license.LicenseSetFactory((java.util.SortedSet<org.apache.rat.license.ILicense>) iLicenseSet23, (java.util.Collection<java.lang.String>) strList38);
        org.apache.rat.utils.Log log41 = null;
        org.apache.rat.ReportConfiguration reportConfiguration42 = new org.apache.rat.ReportConfiguration(log41);
        java.io.FilenameFilter filenameFilter43 = reportConfiguration42.getInputFileFilter();
        org.apache.rat.license.LicenseSetFactory.LicenseFilter licenseFilter44 = org.apache.rat.license.LicenseSetFactory.LicenseFilter.all;
        java.util.SortedSet<org.apache.rat.license.ILicense> iLicenseSet45 = reportConfiguration42.getLicenses(licenseFilter44);
        org.apache.rat.config.AddLicenseHeaders addLicenseHeaders46 = org.apache.rat.config.AddLicenseHeaders.FALSE;
        reportConfiguration42.setAddLicenseHeaders(addLicenseHeaders46);
        org.apache.rat.utils.Log log48 = null;
        org.apache.rat.ReportConfiguration reportConfiguration49 = new org.apache.rat.ReportConfiguration(log48);
        org.apache.rat.report.claim.ClaimStatistic claimStatistic50 = org.apache.rat.Reporter.report(reportConfiguration49);
        org.apache.rat.license.LicenseSetFactory.LicenseFilter licenseFilter51 = org.apache.rat.license.LicenseSetFactory.LicenseFilter.all;
        org.apache.rat.Reporter.listLicenses(reportConfiguration49, licenseFilter51);
        org.apache.rat.Reporter.listLicenses(reportConfiguration42, licenseFilter51);
        org.apache.rat.utils.Log log54 = null;
        org.apache.rat.ReportConfiguration reportConfiguration55 = new org.apache.rat.ReportConfiguration(log54);
        java.io.FilenameFilter filenameFilter56 = reportConfiguration55.getInputFileFilter();
        org.apache.rat.license.LicenseSetFactory.LicenseFilter licenseFilter57 = org.apache.rat.license.LicenseSetFactory.LicenseFilter.all;
        java.util.SortedSet<org.apache.rat.license.ILicense> iLicenseSet58 = reportConfiguration55.getLicenses(licenseFilter57);
        org.apache.rat.config.AddLicenseHeaders addLicenseHeaders59 = org.apache.rat.config.AddLicenseHeaders.FALSE;
        reportConfiguration55.setAddLicenseHeaders(addLicenseHeaders59);
        org.apache.rat.utils.Log log61 = null;
        org.apache.rat.ReportConfiguration reportConfiguration62 = new org.apache.rat.ReportConfiguration(log61);
        org.apache.rat.report.claim.ClaimStatistic claimStatistic63 = org.apache.rat.Reporter.report(reportConfiguration62);
        org.apache.rat.license.LicenseSetFactory.LicenseFilter licenseFilter64 = org.apache.rat.license.LicenseSetFactory.LicenseFilter.all;
        org.apache.rat.Reporter.listLicenses(reportConfiguration62, licenseFilter64);
        org.apache.rat.Reporter.listLicenses(reportConfiguration55, licenseFilter64);
        org.apache.rat.Reporter.listLicenses(reportConfiguration42, licenseFilter64);
        java.util.SortedSet<org.apache.rat.license.ILicense> iLicenseSet68 = licenseSetFactory40.getLicenses(licenseFilter64);
        java.util.SortedSet<org.apache.rat.license.ILicenseFamily> iLicenseFamilySet69 = licenseSetFactory19.getLicenseFamilies(licenseFilter64);
        org.apache.rat.policy.DefaultPolicy defaultPolicy70 = new org.apache.rat.policy.DefaultPolicy((java.util.Collection<org.apache.rat.license.ILicenseFamily>) iLicenseFamilySet69);
        org.apache.rat.license.ILicenseFamily iLicenseFamily71 = org.apache.rat.license.LicenseFamilySetFactory.search("The MIT License", iLicenseFamilySet69);
        org.apache.rat.utils.ReportingSet<java.lang.String> strSet72 = new org.apache.rat.utils.ReportingSet<java.lang.String>();
        java.lang.Object[] objArray73 = strSet72.toArray();
        org.apache.rat.utils.Log log74 = null;
        org.apache.rat.ReportConfiguration reportConfiguration75 = new org.apache.rat.ReportConfiguration(log74);
        org.apache.rat.report.claim.ClaimStatistic claimStatistic76 = org.apache.rat.Reporter.report(reportConfiguration75);
        org.apache.rat.utils.Log log77 = null;
        org.apache.rat.ReportConfiguration reportConfiguration78 = new org.apache.rat.ReportConfiguration(log77);
        org.apache.rat.report.claim.ClaimStatistic claimStatistic79 = org.apache.rat.Reporter.report(reportConfiguration78);
        org.apache.rat.utils.ReportingSet.Options options80 = org.apache.rat.utils.ReportingSet.Options.OVERWRITE;
        reportConfiguration78.licenseDuplicateOption(options80);
        reportConfiguration75.familyDuplicateOption(options80);
        org.apache.commons.io.function.IOSupplier<java.io.PrintWriter> printWriterIOSupplier83 = reportConfiguration75.getWriter();
        boolean boolean84 = reportConfiguration75.isAddingLicensesForced();
        org.apache.rat.utils.Log log85 = null;
        org.apache.rat.ReportConfiguration reportConfiguration86 = new org.apache.rat.ReportConfiguration(log85);
        reportConfiguration86.addApprovedLicenseCategory(".cvsignore");
        org.apache.rat.utils.Log.Level level89 = org.apache.rat.utils.Log.Level.ERROR;
        reportConfiguration86.logFamilyCollisions(level89);
        reportConfiguration75.logLicenseCollisions(level89);
        org.apache.rat.utils.ReportingSet<java.lang.String> strSet92 = strSet72.setLogLevel(level89);
        org.apache.rat.license.LicenseFamilySetFactory licenseFamilySetFactory93 = new org.apache.rat.license.LicenseFamilySetFactory(iLicenseFamilySet69, (java.util.Collection<java.lang.String>) strSet92);
        strSet92.clear();
        org.apache.rat.utils.ReportingSet.Options options95 = null;
        org.apache.rat.utils.ReportingSet<java.lang.String> strSet96 = strSet92.setDuplicateOption(options95);
        java.util.Spliterator<java.lang.String> strSpliterator97 = strSet92.spliterator();
        java.lang.Object obj98 = null;
        // The following exception was thrown during execution in test generation
        try {
            boolean boolean99 = strSet92.remove(obj98);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(iLicenseArray1);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertNotNull(strArray16);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + true + "'", boolean18 == true);
        org.junit.Assert.assertTrue("'" + licenseFilter20 + "' != '" + org.apache.rat.license.LicenseSetFactory.LicenseFilter.all + "'", licenseFilter20.equals(org.apache.rat.license.LicenseSetFactory.LicenseFilter.all));
        org.junit.Assert.assertNotNull(iLicenseFamilySet21);
        org.junit.Assert.assertNotNull(iLicenseArray22);
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + false + "'", boolean24 == false);
        org.junit.Assert.assertNotNull(strArray37);
        org.junit.Assert.assertTrue("'" + boolean39 + "' != '" + true + "'", boolean39 == true);
        org.junit.Assert.assertNull(filenameFilter43);
        org.junit.Assert.assertTrue("'" + licenseFilter44 + "' != '" + org.apache.rat.license.LicenseSetFactory.LicenseFilter.all + "'", licenseFilter44.equals(org.apache.rat.license.LicenseSetFactory.LicenseFilter.all));
        org.junit.Assert.assertNotNull(iLicenseSet45);
        org.junit.Assert.assertTrue("'" + addLicenseHeaders46 + "' != '" + org.apache.rat.config.AddLicenseHeaders.FALSE + "'", addLicenseHeaders46.equals(org.apache.rat.config.AddLicenseHeaders.FALSE));
        org.junit.Assert.assertNull(claimStatistic50);
        org.junit.Assert.assertTrue("'" + licenseFilter51 + "' != '" + org.apache.rat.license.LicenseSetFactory.LicenseFilter.all + "'", licenseFilter51.equals(org.apache.rat.license.LicenseSetFactory.LicenseFilter.all));
        org.junit.Assert.assertNull(filenameFilter56);
        org.junit.Assert.assertTrue("'" + licenseFilter57 + "' != '" + org.apache.rat.license.LicenseSetFactory.LicenseFilter.all + "'", licenseFilter57.equals(org.apache.rat.license.LicenseSetFactory.LicenseFilter.all));
        org.junit.Assert.assertNotNull(iLicenseSet58);
        org.junit.Assert.assertTrue("'" + addLicenseHeaders59 + "' != '" + org.apache.rat.config.AddLicenseHeaders.FALSE + "'", addLicenseHeaders59.equals(org.apache.rat.config.AddLicenseHeaders.FALSE));
        org.junit.Assert.assertNull(claimStatistic63);
        org.junit.Assert.assertTrue("'" + licenseFilter64 + "' != '" + org.apache.rat.license.LicenseSetFactory.LicenseFilter.all + "'", licenseFilter64.equals(org.apache.rat.license.LicenseSetFactory.LicenseFilter.all));
        org.junit.Assert.assertNotNull(iLicenseSet68);
        org.junit.Assert.assertNotNull(iLicenseFamilySet69);
        org.junit.Assert.assertNull(iLicenseFamily71);
        org.junit.Assert.assertNotNull(objArray73);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray73), "[]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray73), "[]");
        org.junit.Assert.assertNull(claimStatistic76);
        org.junit.Assert.assertNull(claimStatistic79);
        org.junit.Assert.assertTrue("'" + options80 + "' != '" + org.apache.rat.utils.ReportingSet.Options.OVERWRITE + "'", options80.equals(org.apache.rat.utils.ReportingSet.Options.OVERWRITE));
        org.junit.Assert.assertNotNull(printWriterIOSupplier83);
        org.junit.Assert.assertTrue("'" + boolean84 + "' != '" + false + "'", boolean84 == false);
        org.junit.Assert.assertTrue("'" + level89 + "' != '" + org.apache.rat.utils.Log.Level.ERROR + "'", level89.equals(org.apache.rat.utils.Log.Level.ERROR));
        org.junit.Assert.assertNotNull(strSet92);
        org.junit.Assert.assertNotNull(strSet96);
        org.junit.Assert.assertNotNull(strSpliterator97);
    }

    @Test
    public void test14667() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest29.test14667");
        org.apache.rat.api.MetaData metaData0 = new org.apache.rat.api.MetaData();
        java.lang.String str2 = metaData0.value("COMMON DEVELOPMENT AND DISTRIBUTION LICENSE Version 1.0");
        java.lang.String str4 = metaData0.value("W3C Document Copyright");
        boolean boolean6 = metaData0.clear("hi!");
        java.lang.String str8 = metaData0.value("true");
        org.apache.rat.api.MetaData.Datum datum10 = metaData0.get("GNU General Public License, version 1");
        org.apache.rat.api.MetaData.Datum datum11 = org.apache.rat.api.MetaData.RAT_LICENSE_FAMILY_CATEGORY_DATUM_MIT;
        java.lang.String str12 = datum11.getName();
        metaData0.set(datum11);
        java.util.Collection<org.apache.rat.api.MetaData.Datum> datumCollection14 = metaData0.getData();
        org.apache.rat.api.MetaData.Datum datum17 = new org.apache.rat.api.MetaData.Datum("d25f13bc-1910-4451-97b5-b72663551a5d", "a8ad40e5-63d4-4711-aeee-d32efcd029a3");
        metaData0.set(datum17);
        metaData0.clear();
        org.apache.rat.api.MetaData.Datum datum21 = metaData0.get("49BA0523-306F-4984-949F-9DB17B9667D9");
        org.junit.Assert.assertNull(str2);
        org.junit.Assert.assertNull(str4);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertNull(str8);
        org.junit.Assert.assertNull(datum10);
        org.junit.Assert.assertNotNull(datum11);
        org.junit.Assert.assertEquals("'" + str12 + "' != '" + "http://org/apache/rat/meta-data#LicenseFamilyCategory" + "'", str12, "http://org/apache/rat/meta-data#LicenseFamilyCategory");
        org.junit.Assert.assertNotNull(datumCollection14);
        org.junit.Assert.assertNull(datum21);
    }

    @Test
    public void test14668() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest29.test14668");
        org.apache.rat.license.SimpleLicenseFamily simpleLicenseFamily0 = new org.apache.rat.license.SimpleLicenseFamily();
        java.lang.String str1 = simpleLicenseFamily0.getFamilyName();
        java.lang.String str2 = simpleLicenseFamily0.getFamilyCategory();
        simpleLicenseFamily0.setFamilyCategory("archive");
        simpleLicenseFamily0.setFamilyName("W3CD ");
        java.lang.String str7 = simpleLicenseFamily0.getFamilyCategory();
        simpleLicenseFamily0.setFamilyCategory("false");
        java.lang.String str10 = simpleLicenseFamily0.toString();
        org.junit.Assert.assertNull(str1);
        org.junit.Assert.assertNull(str2);
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "archive" + "'", str7, "archive");
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "false W3CD " + "'", str10, "false W3CD ");
    }

    @Test
    public void test14669() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest29.test14669");
        org.apache.rat.utils.Log log0 = null;
        org.apache.rat.ReportConfiguration reportConfiguration1 = new org.apache.rat.ReportConfiguration(log0);
        java.io.FilenameFilter filenameFilter2 = reportConfiguration1.getInputFileFilter();
        org.apache.rat.license.LicenseSetFactory.LicenseFilter licenseFilter3 = org.apache.rat.license.LicenseSetFactory.LicenseFilter.all;
        java.util.SortedSet<org.apache.rat.license.ILicense> iLicenseSet4 = reportConfiguration1.getLicenses(licenseFilter3);
        org.apache.rat.config.AddLicenseHeaders addLicenseHeaders5 = org.apache.rat.config.AddLicenseHeaders.FALSE;
        reportConfiguration1.setAddLicenseHeaders(addLicenseHeaders5);
        org.apache.rat.utils.Log log7 = null;
        org.apache.rat.ReportConfiguration reportConfiguration8 = new org.apache.rat.ReportConfiguration(log7);
        org.apache.rat.report.claim.ClaimStatistic claimStatistic9 = org.apache.rat.Reporter.report(reportConfiguration8);
        org.apache.rat.license.LicenseSetFactory.LicenseFilter licenseFilter10 = org.apache.rat.license.LicenseSetFactory.LicenseFilter.all;
        org.apache.rat.Reporter.listLicenses(reportConfiguration8, licenseFilter10);
        org.apache.rat.Reporter.listLicenses(reportConfiguration1, licenseFilter10);
        org.apache.rat.utils.Log log13 = null;
        org.apache.rat.ReportConfiguration reportConfiguration14 = new org.apache.rat.ReportConfiguration(log13);
        java.io.FilenameFilter filenameFilter15 = reportConfiguration14.getInputFileFilter();
        org.apache.rat.license.LicenseSetFactory.LicenseFilter licenseFilter16 = org.apache.rat.license.LicenseSetFactory.LicenseFilter.all;
        java.util.SortedSet<org.apache.rat.license.ILicense> iLicenseSet17 = reportConfiguration14.getLicenses(licenseFilter16);
        org.apache.rat.config.AddLicenseHeaders addLicenseHeaders18 = org.apache.rat.config.AddLicenseHeaders.FALSE;
        reportConfiguration14.setAddLicenseHeaders(addLicenseHeaders18);
        org.apache.rat.utils.Log log20 = null;
        org.apache.rat.ReportConfiguration reportConfiguration21 = new org.apache.rat.ReportConfiguration(log20);
        org.apache.rat.report.claim.ClaimStatistic claimStatistic22 = org.apache.rat.Reporter.report(reportConfiguration21);
        org.apache.rat.license.LicenseSetFactory.LicenseFilter licenseFilter23 = org.apache.rat.license.LicenseSetFactory.LicenseFilter.all;
        org.apache.rat.Reporter.listLicenses(reportConfiguration21, licenseFilter23);
        org.apache.rat.Reporter.listLicenses(reportConfiguration14, licenseFilter23);
        java.util.SortedSet<org.apache.rat.license.ILicenseFamily> iLicenseFamilySet26 = reportConfiguration1.getLicenseFamilies(licenseFilter23);
        org.apache.rat.license.ILicense[] iLicenseArray28 = new org.apache.rat.license.ILicense[] {};
        java.util.TreeSet<org.apache.rat.license.ILicense> iLicenseSet29 = new java.util.TreeSet<org.apache.rat.license.ILicense>();
        boolean boolean30 = java.util.Collections.addAll((java.util.Collection<org.apache.rat.license.ILicense>) iLicenseSet29, iLicenseArray28);
        java.lang.String[] strArray43 = new java.lang.String[] { "GPL2 ", "GPL1 ", "notice", "http://org/apache/rat/meta-data#LicenseFamilyName", "notice", "GPL2 ", "http://org/apache/rat/meta-data#LicenseFamilyName", "", "GPL2 ", "", "GPL1 ", "hi!" };
        java.util.ArrayList<java.lang.String> strList44 = new java.util.ArrayList<java.lang.String>();
        boolean boolean45 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strList44, strArray43);
        org.apache.rat.license.LicenseSetFactory licenseSetFactory46 = new org.apache.rat.license.LicenseSetFactory((java.util.SortedSet<org.apache.rat.license.ILicense>) iLicenseSet29, (java.util.Collection<java.lang.String>) strList44);
        org.apache.rat.license.ILicense iLicense47 = org.apache.rat.license.LicenseSetFactory.search("JAVA", (java.util.SortedSet<org.apache.rat.license.ILicense>) iLicenseSet29);
        reportConfiguration1.addLicensesIfNotPresent((java.util.Collection<org.apache.rat.license.ILicense>) iLicenseSet29);
        org.apache.rat.utils.ReportingSet<java.lang.String> strSet49 = new org.apache.rat.utils.ReportingSet<java.lang.String>();
        org.apache.rat.utils.ReportingSet<java.lang.String> strSet51 = strSet49.tailSet("hi!");
        org.apache.rat.utils.Log log52 = null;
        org.apache.rat.ReportConfiguration reportConfiguration53 = new org.apache.rat.ReportConfiguration(log52);
        java.io.FilenameFilter filenameFilter54 = reportConfiguration53.getInputFileFilter();
        org.apache.rat.license.LicenseSetFactory.LicenseFilter licenseFilter55 = org.apache.rat.license.LicenseSetFactory.LicenseFilter.all;
        java.util.SortedSet<org.apache.rat.license.ILicense> iLicenseSet56 = reportConfiguration53.getLicenses(licenseFilter55);
        org.apache.rat.config.AddLicenseHeaders addLicenseHeaders57 = org.apache.rat.config.AddLicenseHeaders.FALSE;
        reportConfiguration53.setAddLicenseHeaders(addLicenseHeaders57);
        org.apache.rat.utils.Log log59 = null;
        org.apache.rat.ReportConfiguration reportConfiguration60 = new org.apache.rat.ReportConfiguration(log59);
        org.apache.rat.report.claim.ClaimStatistic claimStatistic61 = org.apache.rat.Reporter.report(reportConfiguration60);
        org.apache.rat.license.LicenseSetFactory.LicenseFilter licenseFilter62 = org.apache.rat.license.LicenseSetFactory.LicenseFilter.all;
        org.apache.rat.Reporter.listLicenses(reportConfiguration60, licenseFilter62);
        org.apache.rat.Reporter.listLicenses(reportConfiguration53, licenseFilter62);
        org.apache.rat.utils.Log log65 = null;
        org.apache.rat.ReportConfiguration reportConfiguration66 = new org.apache.rat.ReportConfiguration(log65);
        java.io.FilenameFilter filenameFilter67 = reportConfiguration66.getInputFileFilter();
        org.apache.rat.license.LicenseSetFactory.LicenseFilter licenseFilter68 = org.apache.rat.license.LicenseSetFactory.LicenseFilter.all;
        java.util.SortedSet<org.apache.rat.license.ILicense> iLicenseSet69 = reportConfiguration66.getLicenses(licenseFilter68);
        org.apache.rat.config.AddLicenseHeaders addLicenseHeaders70 = org.apache.rat.config.AddLicenseHeaders.FALSE;
        reportConfiguration66.setAddLicenseHeaders(addLicenseHeaders70);
        org.apache.rat.utils.Log log72 = null;
        org.apache.rat.ReportConfiguration reportConfiguration73 = new org.apache.rat.ReportConfiguration(log72);
        org.apache.rat.report.claim.ClaimStatistic claimStatistic74 = org.apache.rat.Reporter.report(reportConfiguration73);
        org.apache.rat.license.LicenseSetFactory.LicenseFilter licenseFilter75 = org.apache.rat.license.LicenseSetFactory.LicenseFilter.all;
        org.apache.rat.Reporter.listLicenses(reportConfiguration73, licenseFilter75);
        org.apache.rat.Reporter.listLicenses(reportConfiguration66, licenseFilter75);
        org.apache.rat.Reporter.listLicenses(reportConfiguration53, licenseFilter75);
        org.apache.rat.utils.Log log79 = null;
        org.apache.rat.ReportConfiguration reportConfiguration80 = new org.apache.rat.ReportConfiguration(log79);
        org.apache.commons.io.function.IOSupplier<java.io.OutputStream> outputStreamIOSupplier81 = reportConfiguration80.getOutput();
        reportConfiguration53.setOut(outputStreamIOSupplier81);
        org.apache.rat.utils.Log log83 = null;
        org.apache.rat.ReportConfiguration reportConfiguration84 = new org.apache.rat.ReportConfiguration(log83);
        org.apache.commons.io.function.IOSupplier<java.io.OutputStream> outputStreamIOSupplier85 = reportConfiguration84.getOutput();
        reportConfiguration53.setOut(outputStreamIOSupplier85);
        boolean boolean87 = strSet49.equals((java.lang.Object) outputStreamIOSupplier85);
        reportConfiguration1.setOut(outputStreamIOSupplier85);
        reportConfiguration1.setCopyrightMessage("ab913e1f-22c2-4747-9d4b-1a549cb028f0");
        org.apache.commons.io.function.IOSupplier<java.io.PrintWriter> printWriterIOSupplier91 = reportConfiguration1.getWriter();
        boolean boolean92 = reportConfiguration1.isAddingLicenses();
        java.util.SortedSet<java.lang.String> strSet93 = reportConfiguration1.getApprovedLicenseCategories();
        org.junit.Assert.assertNull(filenameFilter2);
        org.junit.Assert.assertTrue("'" + licenseFilter3 + "' != '" + org.apache.rat.license.LicenseSetFactory.LicenseFilter.all + "'", licenseFilter3.equals(org.apache.rat.license.LicenseSetFactory.LicenseFilter.all));
        org.junit.Assert.assertNotNull(iLicenseSet4);
        org.junit.Assert.assertTrue("'" + addLicenseHeaders5 + "' != '" + org.apache.rat.config.AddLicenseHeaders.FALSE + "'", addLicenseHeaders5.equals(org.apache.rat.config.AddLicenseHeaders.FALSE));
        org.junit.Assert.assertNull(claimStatistic9);
        org.junit.Assert.assertTrue("'" + licenseFilter10 + "' != '" + org.apache.rat.license.LicenseSetFactory.LicenseFilter.all + "'", licenseFilter10.equals(org.apache.rat.license.LicenseSetFactory.LicenseFilter.all));
        org.junit.Assert.assertNull(filenameFilter15);
        org.junit.Assert.assertTrue("'" + licenseFilter16 + "' != '" + org.apache.rat.license.LicenseSetFactory.LicenseFilter.all + "'", licenseFilter16.equals(org.apache.rat.license.LicenseSetFactory.LicenseFilter.all));
        org.junit.Assert.assertNotNull(iLicenseSet17);
        org.junit.Assert.assertTrue("'" + addLicenseHeaders18 + "' != '" + org.apache.rat.config.AddLicenseHeaders.FALSE + "'", addLicenseHeaders18.equals(org.apache.rat.config.AddLicenseHeaders.FALSE));
        org.junit.Assert.assertNull(claimStatistic22);
        org.junit.Assert.assertTrue("'" + licenseFilter23 + "' != '" + org.apache.rat.license.LicenseSetFactory.LicenseFilter.all + "'", licenseFilter23.equals(org.apache.rat.license.LicenseSetFactory.LicenseFilter.all));
        org.junit.Assert.assertNotNull(iLicenseFamilySet26);
        org.junit.Assert.assertNotNull(iLicenseArray28);
        org.junit.Assert.assertTrue("'" + boolean30 + "' != '" + false + "'", boolean30 == false);
        org.junit.Assert.assertNotNull(strArray43);
        org.junit.Assert.assertTrue("'" + boolean45 + "' != '" + true + "'", boolean45 == true);
        org.junit.Assert.assertNull(iLicense47);
        org.junit.Assert.assertNotNull(strSet51);
        org.junit.Assert.assertNull(filenameFilter54);
        org.junit.Assert.assertTrue("'" + licenseFilter55 + "' != '" + org.apache.rat.license.LicenseSetFactory.LicenseFilter.all + "'", licenseFilter55.equals(org.apache.rat.license.LicenseSetFactory.LicenseFilter.all));
        org.junit.Assert.assertNotNull(iLicenseSet56);
        org.junit.Assert.assertTrue("'" + addLicenseHeaders57 + "' != '" + org.apache.rat.config.AddLicenseHeaders.FALSE + "'", addLicenseHeaders57.equals(org.apache.rat.config.AddLicenseHeaders.FALSE));
        org.junit.Assert.assertNull(claimStatistic61);
        org.junit.Assert.assertTrue("'" + licenseFilter62 + "' != '" + org.apache.rat.license.LicenseSetFactory.LicenseFilter.all + "'", licenseFilter62.equals(org.apache.rat.license.LicenseSetFactory.LicenseFilter.all));
        org.junit.Assert.assertNull(filenameFilter67);
        org.junit.Assert.assertTrue("'" + licenseFilter68 + "' != '" + org.apache.rat.license.LicenseSetFactory.LicenseFilter.all + "'", licenseFilter68.equals(org.apache.rat.license.LicenseSetFactory.LicenseFilter.all));
        org.junit.Assert.assertNotNull(iLicenseSet69);
        org.junit.Assert.assertTrue("'" + addLicenseHeaders70 + "' != '" + org.apache.rat.config.AddLicenseHeaders.FALSE + "'", addLicenseHeaders70.equals(org.apache.rat.config.AddLicenseHeaders.FALSE));
        org.junit.Assert.assertNull(claimStatistic74);
        org.junit.Assert.assertTrue("'" + licenseFilter75 + "' != '" + org.apache.rat.license.LicenseSetFactory.LicenseFilter.all + "'", licenseFilter75.equals(org.apache.rat.license.LicenseSetFactory.LicenseFilter.all));
        org.junit.Assert.assertNotNull(outputStreamIOSupplier81);
        org.junit.Assert.assertNotNull(outputStreamIOSupplier85);
        org.junit.Assert.assertTrue("'" + boolean87 + "' != '" + false + "'", boolean87 == false);
        org.junit.Assert.assertNotNull(printWriterIOSupplier91);
        org.junit.Assert.assertTrue("'" + boolean92 + "' != '" + false + "'", boolean92 == false);
        org.junit.Assert.assertNotNull(strSet93);
    }

    @Test
    public void test14670() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest29.test14670");
        org.apache.rat.utils.Log log1 = null;
        org.apache.rat.ReportConfiguration reportConfiguration2 = new org.apache.rat.ReportConfiguration(log1);
        org.apache.commons.io.function.IOSupplier<java.io.OutputStream> outputStreamIOSupplier3 = reportConfiguration2.getOutput();
        org.apache.commons.io.filefilter.IOFileFilter iOFileFilter4 = reportConfiguration2.getDirectoryFilter();
        org.apache.rat.utils.Log log5 = null;
        org.apache.rat.ReportConfiguration reportConfiguration6 = new org.apache.rat.ReportConfiguration(log5);
        org.apache.rat.report.claim.ClaimStatistic claimStatistic7 = org.apache.rat.Reporter.report(reportConfiguration6);
        org.apache.commons.io.function.IOSupplier<java.io.OutputStream> outputStreamIOSupplier8 = reportConfiguration6.getOutput();
        boolean boolean9 = reportConfiguration6.isAddingLicensesForced();
        org.apache.rat.license.ILicense[] iLicenseArray10 = new org.apache.rat.license.ILicense[] {};
        java.util.TreeSet<org.apache.rat.license.ILicense> iLicenseSet11 = new java.util.TreeSet<org.apache.rat.license.ILicense>();
        boolean boolean12 = java.util.Collections.addAll((java.util.Collection<org.apache.rat.license.ILicense>) iLicenseSet11, iLicenseArray10);
        java.lang.String[] strArray25 = new java.lang.String[] { "GPL2 ", "GPL1 ", "notice", "http://org/apache/rat/meta-data#LicenseFamilyName", "notice", "GPL2 ", "http://org/apache/rat/meta-data#LicenseFamilyName", "", "GPL2 ", "", "GPL1 ", "hi!" };
        java.util.ArrayList<java.lang.String> strList26 = new java.util.ArrayList<java.lang.String>();
        boolean boolean27 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strList26, strArray25);
        org.apache.rat.license.LicenseSetFactory licenseSetFactory28 = new org.apache.rat.license.LicenseSetFactory((java.util.SortedSet<org.apache.rat.license.ILicense>) iLicenseSet11, (java.util.Collection<java.lang.String>) strList26);
        reportConfiguration6.addLicenses((java.util.Collection<org.apache.rat.license.ILicense>) iLicenseSet11);
        reportConfiguration2.addLicensesIfNotPresent((java.util.Collection<org.apache.rat.license.ILicense>) iLicenseSet11);
        // The following exception was thrown during execution in test generation
        try {
            org.apache.rat.license.ILicense iLicense31 = org.apache.rat.license.LicenseSetFactory.search("", (java.util.SortedSet<org.apache.rat.license.ILicense>) iLicenseSet11);
            org.junit.Assert.fail("Expected exception of type org.apache.rat.ConfigurationException; message: LicenseFamily Category must be specified");
        } catch (org.apache.rat.ConfigurationException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(outputStreamIOSupplier3);
        org.junit.Assert.assertNotNull(iOFileFilter4);
        org.junit.Assert.assertNull(claimStatistic7);
        org.junit.Assert.assertNotNull(outputStreamIOSupplier8);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertNotNull(iLicenseArray10);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertNotNull(strArray25);
        org.junit.Assert.assertTrue("'" + boolean27 + "' != '" + true + "'", boolean27 == true);
    }

    @Test
    public void test14671() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest29.test14671");
        java.lang.String[] strArray5 = new java.lang.String[] { "http://org/apache/rat/meta-data#LicenseFamilyCategory", "Datum [ name ='http://org/apache/rat/meta-data#LicenseFamilyCategory',value ='GPL1  ']", "MANIFEST.MF", "AllBuilder:", "The MIT License" };
        org.apache.rat.utils.ReportingSet<java.lang.String> strSet6 = new org.apache.rat.utils.ReportingSet<java.lang.String>();
        boolean boolean7 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strSet6, strArray5);
        boolean boolean9 = strSet6.addIfNotPresent("http://org/apache/rat/meta-data#LicenseFamilyName");
        boolean boolean11 = strSet6.addIfNotPresent("ef7a8b13-64c3-4510-bb0c-dbf208e1e73f");
        java.util.function.Function<java.lang.String, java.lang.String> strFunction12 = null;
        org.apache.rat.utils.ReportingSet<java.lang.String> strSet13 = strSet6.setMsgFormat(strFunction12);
        java.util.SortedSet<org.apache.rat.license.ILicenseFamily> iLicenseFamilySet15 = org.apache.rat.license.LicenseFamilySetFactory.emptyLicenseFamilySet();
        org.apache.rat.license.ILicenseFamily iLicenseFamily16 = org.apache.rat.license.LicenseFamilySetFactory.search("http://org/apache/rat/meta-data", iLicenseFamilySet15);
        boolean boolean17 = strSet6.containsAll((java.util.Collection<org.apache.rat.license.ILicenseFamily>) iLicenseFamilySet15);
        org.apache.rat.utils.ReportingSet<java.lang.String> strSet19 = strSet6.tailSet("http://org/apache/rat/meta-data#HeaderCategory");
        org.apache.rat.license.ILicenseFamily[] iLicenseFamilyArray20 = new org.apache.rat.license.ILicenseFamily[] {};
        java.util.ArrayList<org.apache.rat.license.ILicenseFamily> iLicenseFamilyList21 = new java.util.ArrayList<org.apache.rat.license.ILicenseFamily>();
        boolean boolean22 = java.util.Collections.addAll((java.util.Collection<org.apache.rat.license.ILicenseFamily>) iLicenseFamilyList21, iLicenseFamilyArray20);
        org.apache.rat.policy.DefaultPolicy defaultPolicy23 = new org.apache.rat.policy.DefaultPolicy((java.util.Collection<org.apache.rat.license.ILicenseFamily>) iLicenseFamilyList21);
        java.util.SortedSet<org.apache.rat.license.ILicenseFamily> iLicenseFamilySet24 = defaultPolicy23.getApprovedLicenseNames();
        boolean boolean25 = strSet19.removeAll((java.util.Collection<org.apache.rat.license.ILicenseFamily>) iLicenseFamilySet24);
        org.apache.rat.utils.DefaultLog defaultLog26 = org.apache.rat.utils.DefaultLog.INSTANCE;
        org.apache.rat.license.ILicense.Builder builder27 = org.apache.rat.license.ILicense.builder();
        org.apache.rat.license.ILicense.Builder builder29 = builder27.setLicenseFamilyCategory("");
        org.apache.rat.analysis.matchers.CopyrightMatcher copyrightMatcher33 = new org.apache.rat.analysis.matchers.CopyrightMatcher("", "GPL1 ", "hi!");
        org.apache.rat.analysis.IHeaderMatcher.State state34 = copyrightMatcher33.finalizeState();
        org.apache.rat.license.ILicense.Builder builder35 = builder29.setMatcher((org.apache.rat.analysis.IHeaderMatcher) copyrightMatcher33);
        org.apache.rat.license.ILicense.Builder builder37 = builder35.setLicenseFamilyCategory("");
        defaultLog26.error((java.lang.Object) builder37);
        org.apache.rat.utils.Log.Level level39 = org.apache.rat.utils.Log.Level.INFO;
        defaultLog26.log(level39, "JAVA");
        org.apache.rat.report.claim.ClaimStatistic claimStatistic42 = new org.apache.rat.report.claim.ClaimStatistic();
        claimStatistic42.setNumApproved((int) (short) 10);
        claimStatistic42.setNumUnknown((int) '#');
        defaultLog26.error((java.lang.Object) '#');
        org.apache.rat.utils.ReportingSet<java.lang.String> strSet48 = strSet19.setLog((org.apache.rat.utils.Log) defaultLog26);
        org.apache.rat.utils.Log log49 = null;
        org.apache.rat.ReportConfiguration reportConfiguration50 = new org.apache.rat.ReportConfiguration(log49);
        java.io.FilenameFilter filenameFilter51 = reportConfiguration50.getInputFileFilter();
        org.apache.rat.license.LicenseSetFactory.LicenseFilter licenseFilter52 = org.apache.rat.license.LicenseSetFactory.LicenseFilter.all;
        java.util.SortedSet<org.apache.rat.license.ILicense> iLicenseSet53 = reportConfiguration50.getLicenses(licenseFilter52);
        org.apache.rat.config.AddLicenseHeaders addLicenseHeaders54 = org.apache.rat.config.AddLicenseHeaders.FALSE;
        reportConfiguration50.setAddLicenseHeaders(addLicenseHeaders54);
        org.apache.rat.utils.Log log56 = null;
        org.apache.rat.ReportConfiguration reportConfiguration57 = new org.apache.rat.ReportConfiguration(log56);
        org.apache.rat.report.claim.ClaimStatistic claimStatistic58 = org.apache.rat.Reporter.report(reportConfiguration57);
        org.apache.rat.license.LicenseSetFactory.LicenseFilter licenseFilter59 = org.apache.rat.license.LicenseSetFactory.LicenseFilter.all;
        org.apache.rat.Reporter.listLicenses(reportConfiguration57, licenseFilter59);
        org.apache.rat.Reporter.listLicenses(reportConfiguration50, licenseFilter59);
        org.apache.rat.report.IReportable iReportable62 = null;
        reportConfiguration50.setReportable(iReportable62);
        org.apache.rat.report.IReportable iReportable64 = reportConfiguration50.getReportable();
        org.apache.rat.utils.Log log65 = null;
        org.apache.rat.ReportConfiguration reportConfiguration66 = new org.apache.rat.ReportConfiguration(log65);
        org.apache.commons.io.function.IOSupplier<java.io.OutputStream> outputStreamIOSupplier67 = reportConfiguration66.getOutput();
        reportConfiguration66.setCopyrightMessage("MANIFEST.MF");
        org.apache.rat.utils.Log log70 = reportConfiguration66.getLog();
        org.apache.commons.io.function.IOSupplier<java.io.InputStream> inputStreamIOSupplier71 = org.apache.rat.Defaults.getPlainStyleSheet();
        reportConfiguration66.setStyleSheet(inputStreamIOSupplier71);
        reportConfiguration50.setStyleSheet(inputStreamIOSupplier71);
        defaultLog26.warn((java.lang.Object) reportConfiguration50);
        org.apache.rat.analysis.license.FullTextMatchingLicense fullTextMatchingLicense75 = new org.apache.rat.analysis.license.FullTextMatchingLicense();
        fullTextMatchingLicense75.setLicenseFamilyName("hi!");
        java.lang.String str78 = fullTextMatchingLicense75.getLicenseFamilyCategory();
        java.lang.String str79 = fullTextMatchingLicense75.getLicenseFamilyName();
        fullTextMatchingLicense75.setLicenseFamilyName("http://org/apache/rat/meta-data#LicenseFamilyName");
        java.lang.String str82 = fullTextMatchingLicense75.getLicenseFamilyCategory();
        java.lang.String str83 = fullTextMatchingLicense75.getLicenseFamilyCategory();
        fullTextMatchingLicense75.setLicenseFamilyCategory("641dafc1-13c3-45d4-8272-f36f10392c53");
        java.lang.String str86 = fullTextMatchingLicense75.getLicenseFamilyName();
        org.apache.rat.license.ILicenseFamily iLicenseFamily87 = fullTextMatchingLicense75.getLicenseFamily();
        fullTextMatchingLicense75.setFullText("Copyright Builder: s:null e:W3C Software Copyright o:null");
        java.lang.String str90 = fullTextMatchingLicense75.getNotes();
        java.lang.String str91 = fullTextMatchingLicense75.getLicenseFamilyCategory();
        defaultLog26.info((java.lang.Object) fullTextMatchingLicense75);
        org.junit.Assert.assertNotNull(strArray5);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + true + "'", boolean7 == true);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + true + "'", boolean9 == true);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + true + "'", boolean11 == true);
        org.junit.Assert.assertNotNull(strSet13);
        org.junit.Assert.assertNotNull(iLicenseFamilySet15);
        org.junit.Assert.assertNull(iLicenseFamily16);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + true + "'", boolean17 == true);
        org.junit.Assert.assertNotNull(strSet19);
        org.junit.Assert.assertNotNull(iLicenseFamilyArray20);
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + false + "'", boolean22 == false);
        org.junit.Assert.assertNotNull(iLicenseFamilySet24);
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + false + "'", boolean25 == false);
        org.junit.Assert.assertNotNull(defaultLog26);
        org.junit.Assert.assertNotNull(builder27);
        org.junit.Assert.assertNotNull(builder29);
        org.junit.Assert.assertTrue("'" + state34 + "' != '" + org.apache.rat.analysis.IHeaderMatcher.State.f + "'", state34.equals(org.apache.rat.analysis.IHeaderMatcher.State.f));
        org.junit.Assert.assertNotNull(builder35);
        org.junit.Assert.assertNotNull(builder37);
        org.junit.Assert.assertTrue("'" + level39 + "' != '" + org.apache.rat.utils.Log.Level.INFO + "'", level39.equals(org.apache.rat.utils.Log.Level.INFO));
        org.junit.Assert.assertNotNull(strSet48);
        org.junit.Assert.assertNull(filenameFilter51);
        org.junit.Assert.assertTrue("'" + licenseFilter52 + "' != '" + org.apache.rat.license.LicenseSetFactory.LicenseFilter.all + "'", licenseFilter52.equals(org.apache.rat.license.LicenseSetFactory.LicenseFilter.all));
        org.junit.Assert.assertNotNull(iLicenseSet53);
        org.junit.Assert.assertTrue("'" + addLicenseHeaders54 + "' != '" + org.apache.rat.config.AddLicenseHeaders.FALSE + "'", addLicenseHeaders54.equals(org.apache.rat.config.AddLicenseHeaders.FALSE));
        org.junit.Assert.assertNull(claimStatistic58);
        org.junit.Assert.assertTrue("'" + licenseFilter59 + "' != '" + org.apache.rat.license.LicenseSetFactory.LicenseFilter.all + "'", licenseFilter59.equals(org.apache.rat.license.LicenseSetFactory.LicenseFilter.all));
        org.junit.Assert.assertNull(iReportable64);
        org.junit.Assert.assertNotNull(outputStreamIOSupplier67);
        org.junit.Assert.assertNull(log70);
        org.junit.Assert.assertNotNull(inputStreamIOSupplier71);
        org.junit.Assert.assertNull(str78);
        org.junit.Assert.assertEquals("'" + str79 + "' != '" + "hi!" + "'", str79, "hi!");
        org.junit.Assert.assertNull(str82);
        org.junit.Assert.assertNull(str83);
        org.junit.Assert.assertEquals("'" + str86 + "' != '" + "http://org/apache/rat/meta-data#LicenseFamilyName" + "'", str86, "http://org/apache/rat/meta-data#LicenseFamilyName");
        org.junit.Assert.assertNotNull(iLicenseFamily87);
        org.junit.Assert.assertNull(str90);
        org.junit.Assert.assertEquals("'" + str91 + "' != '" + "641dafc1-13c3-45d4-8272-f36f10392c53" + "'", str91, "641dafc1-13c3-45d4-8272-f36f10392c53");
    }

    @Test
    public void test14672() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest29.test14672");
        org.apache.rat.license.ILicenseFamilyBuilder iLicenseFamilyBuilder0 = new org.apache.rat.license.ILicenseFamilyBuilder();
        java.lang.String str1 = iLicenseFamilyBuilder0.getCategory();
        org.apache.rat.license.ILicenseFamily.Builder builder3 = iLicenseFamilyBuilder0.setLicenseFamilyName("TMF  ");
        org.apache.rat.license.ILicenseFamily.Builder builder5 = builder3.setLicenseFamilyName("");
        org.apache.rat.license.ILicenseFamily.Builder builder7 = builder3.setLicenseFamilyName("6232a9af-c312-410c-9bbb-6b12d7725116");
        java.lang.String str8 = builder7.getCategory();
        java.lang.String str9 = builder7.getCategory();
        org.apache.rat.license.ILicenseFamily.Builder builder11 = builder7.setLicenseFamilyCategory("d5b3cead3d0743ee903a1e1ba144eb11");
        org.apache.rat.license.ILicenseFamily.Builder builder13 = builder11.setLicenseFamilyName("01cd6410-ba98-464c-a66e-0b7190dd6096");
        org.junit.Assert.assertNull(str1);
        org.junit.Assert.assertNotNull(builder3);
        org.junit.Assert.assertNotNull(builder5);
        org.junit.Assert.assertNotNull(builder7);
        org.junit.Assert.assertNull(str8);
        org.junit.Assert.assertNull(str9);
        org.junit.Assert.assertNotNull(builder11);
        org.junit.Assert.assertNotNull(builder13);
    }

    @Test
    public void test14673() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest29.test14673");
        org.apache.rat.analysis.matchers.SimpleTextMatcher simpleTextMatcher1 = new org.apache.rat.analysis.matchers.SimpleTextMatcher("021187d7-27c2-4fd9-bc74-8cc00413ee52");
        java.lang.String str2 = simpleTextMatcher1.toString();
// flaky:         org.junit.Assert.assertEquals("'" + str2 + "' != '" + "777c8858-134c-441d-bc98-5ecb0b2ad58d" + "'", str2, "777c8858-134c-441d-bc98-5ecb0b2ad58d");
    }

    @Test
    public void test14674() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest29.test14674");
        org.apache.rat.configuration.builders.NotBuilder notBuilder0 = new org.apache.rat.configuration.builders.NotBuilder();
        java.lang.String str1 = notBuilder0.toString();
        org.apache.rat.configuration.builders.SpdxBuilder spdxBuilder2 = org.apache.rat.analysis.IHeaderMatcher.Builder.spdx();
        java.lang.String str3 = spdxBuilder2.toString();
        org.apache.rat.configuration.builders.SpdxBuilder spdxBuilder5 = spdxBuilder2.setName("ef7a8b13-64c3-4510-bb0c-dbf208e1e73f");
        org.apache.rat.analysis.IHeaderMatcher iHeaderMatcher6 = spdxBuilder2.build();
        org.apache.rat.analysis.IHeaderMatcher iHeaderMatcher7 = spdxBuilder2.build();
        org.apache.rat.analysis.IHeaderMatcher iHeaderMatcher8 = spdxBuilder2.build();
        org.apache.rat.analysis.IHeaderMatcher iHeaderMatcher9 = spdxBuilder2.build();
        org.apache.rat.analysis.IHeaderMatcher iHeaderMatcher10 = spdxBuilder2.build();
        org.apache.rat.configuration.builders.AbstractBuilder abstractBuilder11 = notBuilder0.add((org.apache.rat.analysis.IHeaderMatcher.Builder) spdxBuilder2);
        org.apache.rat.analysis.IHeaderMatcher iHeaderMatcher12 = notBuilder0.build();
        org.junit.Assert.assertEquals("'" + str1 + "' != '" + "NotBuilder: null" + "'", str1, "NotBuilder: null");
        org.junit.Assert.assertNotNull(spdxBuilder2);
        org.junit.Assert.assertEquals("'" + str3 + "' != '" + "SpdxBuilder: null" + "'", str3, "SpdxBuilder: null");
        org.junit.Assert.assertNotNull(spdxBuilder5);
        org.junit.Assert.assertNotNull(iHeaderMatcher6);
        org.junit.Assert.assertNotNull(iHeaderMatcher7);
        org.junit.Assert.assertNotNull(iHeaderMatcher8);
        org.junit.Assert.assertNotNull(iHeaderMatcher9);
        org.junit.Assert.assertNotNull(iHeaderMatcher10);
        org.junit.Assert.assertNotNull(abstractBuilder11);
        org.junit.Assert.assertNotNull(iHeaderMatcher12);
    }

    @Test
    public void test14675() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest29.test14675");
        org.apache.rat.configuration.builders.SpdxBuilder spdxBuilder0 = org.apache.rat.analysis.IHeaderMatcher.Builder.spdx();
        java.lang.String str1 = spdxBuilder0.toString();
        org.apache.rat.configuration.builders.SpdxBuilder spdxBuilder3 = spdxBuilder0.setName("ef7a8b13-64c3-4510-bb0c-dbf208e1e73f");
        org.apache.rat.analysis.IHeaderMatcher iHeaderMatcher4 = spdxBuilder3.build();
        org.apache.rat.configuration.builders.SpdxBuilder spdxBuilder6 = spdxBuilder3.setName("null http://org/apache/rat/meta-data#LicenseFamilyName");
        java.lang.String str7 = spdxBuilder3.toString();
        org.apache.rat.configuration.builders.SpdxBuilder spdxBuilder9 = spdxBuilder3.setName("ba9961f9-a0de-4a54-bd1f-a2e9df26a188");
        org.junit.Assert.assertNotNull(spdxBuilder0);
        org.junit.Assert.assertEquals("'" + str1 + "' != '" + "SpdxBuilder: null" + "'", str1, "SpdxBuilder: null");
        org.junit.Assert.assertNotNull(spdxBuilder3);
        org.junit.Assert.assertNotNull(iHeaderMatcher4);
        org.junit.Assert.assertNotNull(spdxBuilder6);
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "SpdxBuilder: null http://org/apache/rat/meta-data#LicenseFamilyName" + "'", str7, "SpdxBuilder: null http://org/apache/rat/meta-data#LicenseFamilyName");
        org.junit.Assert.assertNotNull(spdxBuilder9);
    }

    @Test
    public void test14676() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest29.test14676");
        org.apache.rat.configuration.builders.AllBuilder allBuilder0 = new org.apache.rat.configuration.builders.AllBuilder();
        java.lang.String str1 = allBuilder0.toString();
        java.util.List<org.apache.rat.analysis.IHeaderMatcher> iHeaderMatcherList2 = allBuilder0.getChildren();
        org.apache.rat.configuration.builders.MatcherRefBuilder matcherRefBuilder3 = new org.apache.rat.configuration.builders.MatcherRefBuilder();
        org.apache.rat.configuration.builders.AbstractBuilder abstractBuilder4 = allBuilder0.add((org.apache.rat.analysis.IHeaderMatcher.Builder) matcherRefBuilder3);
        org.apache.rat.configuration.builders.MatcherRefBuilder matcherRefBuilder6 = matcherRefBuilder3.setRefId("http:");
        java.util.Map<java.lang.String, org.apache.rat.analysis.IHeaderMatcher> strMap7 = null;
        org.apache.rat.configuration.builders.MatcherRefBuilder matcherRefBuilder8 = matcherRefBuilder6.setMatchers(strMap7);
        org.apache.rat.configuration.builders.MatcherRefBuilder matcherRefBuilder10 = matcherRefBuilder8.setRefId("");
        java.lang.String str11 = matcherRefBuilder10.toString();
        java.lang.String str12 = matcherRefBuilder10.toString();
        java.lang.String str13 = matcherRefBuilder10.toString();
        java.util.Map<java.lang.String, org.apache.rat.analysis.IHeaderMatcher> strMap14 = null;
        org.apache.rat.configuration.builders.MatcherRefBuilder matcherRefBuilder15 = matcherRefBuilder10.setMatchers(strMap14);
        org.apache.rat.configuration.builders.MatcherRefBuilder matcherRefBuilder17 = matcherRefBuilder10.setRefId("f489c72e-9df8-4339-86cc-35c229864db7");
        org.apache.rat.configuration.builders.MatcherRefBuilder matcherRefBuilder19 = matcherRefBuilder17.setRefId("5c847b1e-9c69-4319-a528-fb19292d5e95");
        org.junit.Assert.assertEquals("'" + str1 + "' != '" + "AllBuilder:" + "'", str1, "AllBuilder:");
        org.junit.Assert.assertNotNull(iHeaderMatcherList2);
        org.junit.Assert.assertNotNull(abstractBuilder4);
        org.junit.Assert.assertNotNull(matcherRefBuilder6);
        org.junit.Assert.assertNotNull(matcherRefBuilder8);
        org.junit.Assert.assertNotNull(matcherRefBuilder10);
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "MathcerRefBuilder: " + "'", str11, "MathcerRefBuilder: ");
        org.junit.Assert.assertEquals("'" + str12 + "' != '" + "MathcerRefBuilder: " + "'", str12, "MathcerRefBuilder: ");
        org.junit.Assert.assertEquals("'" + str13 + "' != '" + "MathcerRefBuilder: " + "'", str13, "MathcerRefBuilder: ");
        org.junit.Assert.assertNotNull(matcherRefBuilder15);
        org.junit.Assert.assertNotNull(matcherRefBuilder17);
        org.junit.Assert.assertNotNull(matcherRefBuilder19);
    }

    @Test
    public void test14677() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest29.test14677");
        java.lang.String str1 = org.apache.rat.document.impl.guesser.GuessUtils.normalise("b5db6c34-5b1c-41fd-a4cc-888dda28cf4e");
        org.junit.Assert.assertEquals("'" + str1 + "' != '" + "B5DB6C34-5B1C-41FD-A4CC-888DDA28CF4E" + "'", str1, "B5DB6C34-5B1C-41FD-A4CC-888DDA28CF4E");
    }

    @Test
    public void test14678() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest29.test14678");
        org.apache.rat.utils.Log log0 = null;
        org.apache.rat.ReportConfiguration reportConfiguration1 = new org.apache.rat.ReportConfiguration(log0);
        org.apache.rat.report.claim.ClaimStatistic claimStatistic2 = org.apache.rat.Reporter.report(reportConfiguration1);
        reportConfiguration1.addApprovedLicenseCategory("Copyright Builder: s:null e:null o:null");
        java.util.SortedSet<java.lang.String> strSet5 = reportConfiguration1.getApprovedLicenseCategories();
        java.io.FilenameFilter filenameFilter6 = reportConfiguration1.getInputFileFilter();
        org.apache.rat.utils.Log log7 = null;
        org.apache.rat.ReportConfiguration reportConfiguration8 = new org.apache.rat.ReportConfiguration(log7);
        org.apache.rat.report.claim.ClaimStatistic claimStatistic9 = org.apache.rat.Reporter.report(reportConfiguration8);
        org.apache.rat.utils.ReportingSet.Options options10 = org.apache.rat.utils.ReportingSet.Options.OVERWRITE;
        reportConfiguration8.licenseDuplicateOption(options10);
        java.util.SortedSet<org.apache.rat.license.ILicenseFamily> iLicenseFamilySet13 = org.apache.rat.license.LicenseFamilySetFactory.emptyLicenseFamilySet();
        org.apache.rat.license.ILicenseFamily iLicenseFamily14 = org.apache.rat.license.LicenseFamilySetFactory.search("http://org/apache/rat/meta-data", iLicenseFamilySet13);
        org.apache.rat.policy.DefaultPolicy defaultPolicy15 = new org.apache.rat.policy.DefaultPolicy((java.util.Collection<org.apache.rat.license.ILicenseFamily>) iLicenseFamilySet13);
        reportConfiguration8.addFamilies((java.util.Collection<org.apache.rat.license.ILicenseFamily>) iLicenseFamilySet13);
        org.apache.rat.utils.ReportingSet<java.lang.String> strSet17 = new org.apache.rat.utils.ReportingSet<java.lang.String>();
        java.lang.Object[] objArray18 = strSet17.toArray();
        org.apache.rat.license.LicenseFamilySetFactory licenseFamilySetFactory19 = new org.apache.rat.license.LicenseFamilySetFactory(iLicenseFamilySet13, (java.util.Collection<java.lang.String>) strSet17);
        reportConfiguration1.addApprovedLicenseCategories((java.util.Collection<java.lang.String>) strSet17);
        java.util.stream.Stream<java.lang.String> strStream21 = strSet17.parallelStream();
        java.util.Collection<org.apache.rat.license.ILicenseFamily> iLicenseFamilyCollection22 = null;
        // The following exception was thrown during execution in test generation
        try {
            boolean boolean23 = strSet17.retainAll(iLicenseFamilyCollection22);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNull(claimStatistic2);
        org.junit.Assert.assertNotNull(strSet5);
        org.junit.Assert.assertNull(filenameFilter6);
        org.junit.Assert.assertNull(claimStatistic9);
        org.junit.Assert.assertTrue("'" + options10 + "' != '" + org.apache.rat.utils.ReportingSet.Options.OVERWRITE + "'", options10.equals(org.apache.rat.utils.ReportingSet.Options.OVERWRITE));
        org.junit.Assert.assertNotNull(iLicenseFamilySet13);
        org.junit.Assert.assertNull(iLicenseFamily14);
        org.junit.Assert.assertNotNull(objArray18);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray18), "[]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray18), "[]");
        org.junit.Assert.assertNotNull(strStream21);
    }

    @Test
    public void test14679() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest29.test14679");
        org.apache.rat.utils.ReportingSet<java.lang.String> strSet0 = new org.apache.rat.utils.ReportingSet<java.lang.String>();
        org.apache.rat.utils.ReportingSet<java.lang.String> strSet2 = strSet0.tailSet("hi!");
        org.apache.rat.analysis.matchers.SimpleTextMatcher simpleTextMatcher5 = new org.apache.rat.analysis.matchers.SimpleTextMatcher("W3C  ", "c523095e-4421-4cc4-93e2-039f23b91f76");
        boolean boolean7 = simpleTextMatcher5.doMatch("GPL1 ");
        org.apache.rat.analysis.IHeaderMatcher.State state8 = simpleTextMatcher5.currentState();
        boolean boolean10 = simpleTextMatcher5.doMatch("");
        boolean boolean11 = strSet0.remove((java.lang.Object) "");
        org.apache.rat.Defaults.Builder builder12 = org.apache.rat.Defaults.builder();
        org.apache.rat.Defaults defaults13 = builder12.build();
        org.apache.rat.license.LicenseSetFactory.LicenseFilter licenseFilter14 = org.apache.rat.license.LicenseSetFactory.LicenseFilter.approved;
        java.util.SortedSet<org.apache.rat.license.ILicenseFamily> iLicenseFamilySet15 = defaults13.getLicenseFamilies(licenseFilter14);
        org.apache.rat.policy.DefaultPolicy defaultPolicy16 = new org.apache.rat.policy.DefaultPolicy((java.util.Collection<org.apache.rat.license.ILicenseFamily>) iLicenseFamilySet15);
        boolean boolean17 = strSet0.removeAll((java.util.Collection<org.apache.rat.license.ILicenseFamily>) iLicenseFamilySet15);
        boolean boolean18 = strSet0.isEmpty();
        org.junit.Assert.assertNotNull(strSet2);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertTrue("'" + state8 + "' != '" + org.apache.rat.analysis.IHeaderMatcher.State.i + "'", state8.equals(org.apache.rat.analysis.IHeaderMatcher.State.i));
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
        org.junit.Assert.assertNotNull(builder12);
        org.junit.Assert.assertNotNull(defaults13);
        org.junit.Assert.assertTrue("'" + licenseFilter14 + "' != '" + org.apache.rat.license.LicenseSetFactory.LicenseFilter.approved + "'", licenseFilter14.equals(org.apache.rat.license.LicenseSetFactory.LicenseFilter.approved));
        org.junit.Assert.assertNotNull(iLicenseFamilySet15);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + false + "'", boolean17 == false);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + true + "'", boolean18 == true);
    }

    @Test
    public void test14680() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest29.test14680");
        // The following exception was thrown during execution in test generation
        try {
            org.apache.rat.configuration.MatcherBuilderTracker.addBuilder("", "ed42033c-bb2d-4a0c-b6fe-b912f4d3a137");
            org.junit.Assert.fail("Expected exception of type org.apache.rat.ConfigurationException; message: java.lang.ClassNotFoundException: ");
        } catch (org.apache.rat.ConfigurationException e) {
            // Expected exception.
        }
    }

    @Test
    public void test14681() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest29.test14681");
        org.apache.rat.analysis.matchers.FullTextMatcher fullTextMatcher2 = new org.apache.rat.analysis.matchers.FullTextMatcher("8c998e14-07fd-48d7-a11a-a7aa35ad3d01", "0356753d-7389-48e7-8d63-056fd4c4548c");
    }

    @Test
    public void test14682() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest29.test14682");
        org.apache.rat.utils.Log log0 = null;
        org.apache.rat.ReportConfiguration reportConfiguration1 = new org.apache.rat.ReportConfiguration(log0);
        org.apache.rat.report.claim.ClaimStatistic claimStatistic2 = org.apache.rat.Reporter.report(reportConfiguration1);
        org.apache.rat.utils.Log log3 = null;
        org.apache.rat.ReportConfiguration reportConfiguration4 = new org.apache.rat.ReportConfiguration(log3);
        org.apache.rat.report.claim.ClaimStatistic claimStatistic5 = org.apache.rat.Reporter.report(reportConfiguration4);
        org.apache.rat.utils.ReportingSet.Options options6 = org.apache.rat.utils.ReportingSet.Options.OVERWRITE;
        reportConfiguration4.licenseDuplicateOption(options6);
        reportConfiguration1.familyDuplicateOption(options6);
        boolean boolean9 = reportConfiguration1.isStyleReport();
        boolean boolean10 = reportConfiguration1.isAddingLicensesForced();
        org.apache.rat.utils.Log log11 = null;
        org.apache.rat.ReportConfiguration reportConfiguration12 = new org.apache.rat.ReportConfiguration(log11);
        org.apache.rat.report.claim.ClaimStatistic claimStatistic13 = org.apache.rat.Reporter.report(reportConfiguration12);
        org.apache.rat.utils.Log log14 = null;
        org.apache.rat.ReportConfiguration reportConfiguration15 = new org.apache.rat.ReportConfiguration(log14);
        org.apache.rat.report.claim.ClaimStatistic claimStatistic16 = org.apache.rat.Reporter.report(reportConfiguration15);
        org.apache.rat.utils.ReportingSet.Options options17 = org.apache.rat.utils.ReportingSet.Options.OVERWRITE;
        reportConfiguration15.licenseDuplicateOption(options17);
        reportConfiguration12.familyDuplicateOption(options17);
        org.apache.commons.io.function.IOSupplier<java.io.PrintWriter> printWriterIOSupplier20 = reportConfiguration12.getWriter();
        boolean boolean21 = reportConfiguration12.isAddingLicensesForced();
        org.apache.rat.utils.Log log22 = null;
        org.apache.rat.ReportConfiguration reportConfiguration23 = new org.apache.rat.ReportConfiguration(log22);
        reportConfiguration23.addApprovedLicenseCategory(".cvsignore");
        org.apache.rat.utils.Log.Level level26 = org.apache.rat.utils.Log.Level.ERROR;
        reportConfiguration23.logFamilyCollisions(level26);
        reportConfiguration12.logLicenseCollisions(level26);
        org.apache.rat.utils.Log log29 = null;
        org.apache.rat.ReportConfiguration reportConfiguration30 = new org.apache.rat.ReportConfiguration(log29);
        java.io.FilenameFilter filenameFilter31 = reportConfiguration30.getInputFileFilter();
        org.apache.rat.license.LicenseSetFactory.LicenseFilter licenseFilter32 = org.apache.rat.license.LicenseSetFactory.LicenseFilter.all;
        java.util.SortedSet<org.apache.rat.license.ILicense> iLicenseSet33 = reportConfiguration30.getLicenses(licenseFilter32);
        org.apache.rat.config.AddLicenseHeaders addLicenseHeaders34 = org.apache.rat.config.AddLicenseHeaders.FALSE;
        reportConfiguration30.setAddLicenseHeaders(addLicenseHeaders34);
        org.apache.rat.utils.Log log36 = null;
        org.apache.rat.ReportConfiguration reportConfiguration37 = new org.apache.rat.ReportConfiguration(log36);
        org.apache.rat.report.claim.ClaimStatistic claimStatistic38 = org.apache.rat.Reporter.report(reportConfiguration37);
        org.apache.rat.license.LicenseSetFactory.LicenseFilter licenseFilter39 = org.apache.rat.license.LicenseSetFactory.LicenseFilter.all;
        org.apache.rat.Reporter.listLicenses(reportConfiguration37, licenseFilter39);
        org.apache.rat.Reporter.listLicenses(reportConfiguration30, licenseFilter39);
        org.apache.rat.config.AddLicenseHeaders addLicenseHeaders42 = org.apache.rat.config.AddLicenseHeaders.FORCED;
        reportConfiguration30.setAddLicenseHeaders(addLicenseHeaders42);
        reportConfiguration12.setAddLicenseHeaders(addLicenseHeaders42);
        reportConfiguration1.setAddLicenseHeaders(addLicenseHeaders42);
        reportConfiguration1.removeApprovedLicenseCategory("a09251fd-7b29-437a-9385-59b7ed43ae73");
        org.apache.rat.utils.Log log48 = null;
        org.apache.rat.ReportConfiguration reportConfiguration49 = new org.apache.rat.ReportConfiguration(log48);
        org.apache.commons.io.function.IOSupplier<java.io.OutputStream> outputStreamIOSupplier50 = reportConfiguration49.getOutput();
        reportConfiguration49.setCopyrightMessage("MANIFEST.MF");
        org.apache.rat.utils.Log log53 = null;
        org.apache.rat.ReportConfiguration reportConfiguration54 = new org.apache.rat.ReportConfiguration(log53);
        java.io.FilenameFilter filenameFilter55 = reportConfiguration54.getInputFileFilter();
        org.apache.rat.config.AddLicenseHeaders addLicenseHeaders56 = org.apache.rat.config.AddLicenseHeaders.TRUE;
        reportConfiguration54.setAddLicenseHeaders(addLicenseHeaders56);
        reportConfiguration49.setAddLicenseHeaders(addLicenseHeaders56);
        reportConfiguration1.setAddLicenseHeaders(addLicenseHeaders56);
        org.apache.rat.utils.ReportingSet<java.lang.String> strSet60 = new org.apache.rat.utils.ReportingSet<java.lang.String>();
        org.apache.rat.utils.ReportingSet<java.lang.String> strSet62 = strSet60.tailSet("hi!");
        org.apache.rat.configuration.LicenseReader[] licenseReaderArray63 = new org.apache.rat.configuration.LicenseReader[] {};
        org.apache.rat.configuration.LicenseReader[] licenseReaderArray64 = strSet62.toArray(licenseReaderArray63);
        org.apache.rat.utils.Log log65 = null;
        org.apache.rat.ReportConfiguration reportConfiguration66 = new org.apache.rat.ReportConfiguration(log65);
        org.apache.rat.report.claim.ClaimStatistic claimStatistic67 = org.apache.rat.Reporter.report(reportConfiguration66);
        org.apache.rat.utils.Log log68 = null;
        org.apache.rat.ReportConfiguration reportConfiguration69 = new org.apache.rat.ReportConfiguration(log68);
        org.apache.rat.report.claim.ClaimStatistic claimStatistic70 = org.apache.rat.Reporter.report(reportConfiguration69);
        org.apache.rat.utils.ReportingSet.Options options71 = org.apache.rat.utils.ReportingSet.Options.OVERWRITE;
        reportConfiguration69.licenseDuplicateOption(options71);
        reportConfiguration66.familyDuplicateOption(options71);
        org.apache.rat.utils.ReportingSet<java.lang.String> strSet74 = strSet62.setDuplicateOption(options71);
        reportConfiguration1.licenseDuplicateOption(options71);
        org.junit.Assert.assertNull(claimStatistic2);
        org.junit.Assert.assertNull(claimStatistic5);
        org.junit.Assert.assertTrue("'" + options6 + "' != '" + org.apache.rat.utils.ReportingSet.Options.OVERWRITE + "'", options6.equals(org.apache.rat.utils.ReportingSet.Options.OVERWRITE));
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + true + "'", boolean9 == true);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertNull(claimStatistic13);
        org.junit.Assert.assertNull(claimStatistic16);
        org.junit.Assert.assertTrue("'" + options17 + "' != '" + org.apache.rat.utils.ReportingSet.Options.OVERWRITE + "'", options17.equals(org.apache.rat.utils.ReportingSet.Options.OVERWRITE));
        org.junit.Assert.assertNotNull(printWriterIOSupplier20);
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + false + "'", boolean21 == false);
        org.junit.Assert.assertTrue("'" + level26 + "' != '" + org.apache.rat.utils.Log.Level.ERROR + "'", level26.equals(org.apache.rat.utils.Log.Level.ERROR));
        org.junit.Assert.assertNull(filenameFilter31);
        org.junit.Assert.assertTrue("'" + licenseFilter32 + "' != '" + org.apache.rat.license.LicenseSetFactory.LicenseFilter.all + "'", licenseFilter32.equals(org.apache.rat.license.LicenseSetFactory.LicenseFilter.all));
        org.junit.Assert.assertNotNull(iLicenseSet33);
        org.junit.Assert.assertTrue("'" + addLicenseHeaders34 + "' != '" + org.apache.rat.config.AddLicenseHeaders.FALSE + "'", addLicenseHeaders34.equals(org.apache.rat.config.AddLicenseHeaders.FALSE));
        org.junit.Assert.assertNull(claimStatistic38);
        org.junit.Assert.assertTrue("'" + licenseFilter39 + "' != '" + org.apache.rat.license.LicenseSetFactory.LicenseFilter.all + "'", licenseFilter39.equals(org.apache.rat.license.LicenseSetFactory.LicenseFilter.all));
        org.junit.Assert.assertTrue("'" + addLicenseHeaders42 + "' != '" + org.apache.rat.config.AddLicenseHeaders.FORCED + "'", addLicenseHeaders42.equals(org.apache.rat.config.AddLicenseHeaders.FORCED));
        org.junit.Assert.assertNotNull(outputStreamIOSupplier50);
        org.junit.Assert.assertNull(filenameFilter55);
        org.junit.Assert.assertTrue("'" + addLicenseHeaders56 + "' != '" + org.apache.rat.config.AddLicenseHeaders.TRUE + "'", addLicenseHeaders56.equals(org.apache.rat.config.AddLicenseHeaders.TRUE));
        org.junit.Assert.assertNotNull(strSet62);
        org.junit.Assert.assertNotNull(licenseReaderArray63);
        org.junit.Assert.assertNotNull(licenseReaderArray64);
        org.junit.Assert.assertNull(claimStatistic67);
        org.junit.Assert.assertNull(claimStatistic70);
        org.junit.Assert.assertTrue("'" + options71 + "' != '" + org.apache.rat.utils.ReportingSet.Options.OVERWRITE + "'", options71.equals(org.apache.rat.utils.ReportingSet.Options.OVERWRITE));
        org.junit.Assert.assertNotNull(strSet74);
    }

    @Test
    public void test14683() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest29.test14683");
        org.apache.rat.utils.Log log0 = null;
        org.apache.rat.ReportConfiguration reportConfiguration1 = new org.apache.rat.ReportConfiguration(log0);
        org.apache.rat.license.ILicenseFamily[] iLicenseFamilyArray2 = new org.apache.rat.license.ILicenseFamily[] {};
        java.util.ArrayList<org.apache.rat.license.ILicenseFamily> iLicenseFamilyList3 = new java.util.ArrayList<org.apache.rat.license.ILicenseFamily>();
        boolean boolean4 = java.util.Collections.addAll((java.util.Collection<org.apache.rat.license.ILicenseFamily>) iLicenseFamilyList3, iLicenseFamilyArray2);
        reportConfiguration1.addFamilies((java.util.Collection<org.apache.rat.license.ILicenseFamily>) iLicenseFamilyList3);
        org.apache.rat.report.IReportable iReportable6 = null;
        reportConfiguration1.setReportable(iReportable6);
        reportConfiguration1.addApprovedLicenseCategory("http://org/apache/rat/meta-data#LicenseFamilyCategory");
        java.io.FilenameFilter filenameFilter10 = reportConfiguration1.getInputFileFilter();
        java.io.File file11 = null;
        // The following exception was thrown during execution in test generation
        try {
            reportConfiguration1.setStyleSheet(file11);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: styleSheet file should not be null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(iLicenseFamilyArray2);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertNull(filenameFilter10);
    }

    @Test
    public void test14684() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest29.test14684");
        java.io.File file0 = null;
        org.apache.rat.utils.Log log1 = null;
        org.apache.rat.ReportConfiguration reportConfiguration2 = new org.apache.rat.ReportConfiguration(log1);
        org.apache.rat.report.claim.ClaimStatistic claimStatistic3 = org.apache.rat.Reporter.report(reportConfiguration2);
        org.apache.rat.utils.Log log4 = null;
        org.apache.rat.ReportConfiguration reportConfiguration5 = new org.apache.rat.ReportConfiguration(log4);
        org.apache.rat.report.claim.ClaimStatistic claimStatistic6 = org.apache.rat.Reporter.report(reportConfiguration5);
        org.apache.rat.utils.ReportingSet.Options options7 = org.apache.rat.utils.ReportingSet.Options.OVERWRITE;
        reportConfiguration5.licenseDuplicateOption(options7);
        reportConfiguration2.familyDuplicateOption(options7);
        org.apache.commons.io.function.IOSupplier<java.io.PrintWriter> printWriterIOSupplier10 = reportConfiguration2.getWriter();
        boolean boolean11 = reportConfiguration2.isAddingLicensesForced();
        java.io.FilenameFilter filenameFilter12 = reportConfiguration2.getInputFileFilter();
        java.io.FilenameFilter filenameFilter13 = reportConfiguration2.getInputFileFilter();
        boolean boolean14 = reportConfiguration2.isStyleReport();
        org.apache.rat.utils.Log log15 = reportConfiguration2.getLog();
        org.apache.commons.io.filefilter.IOFileFilter iOFileFilter16 = reportConfiguration2.getDirectoryFilter();
        org.apache.commons.io.filefilter.IOFileFilter iOFileFilter17 = iOFileFilter16.negate();
        // The following exception was thrown during execution in test generation
        try {
            org.apache.rat.walker.ArchiveWalker archiveWalker18 = new org.apache.rat.walker.ArchiveWalker(file0, (java.io.FilenameFilter) iOFileFilter16);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNull(claimStatistic3);
        org.junit.Assert.assertNull(claimStatistic6);
        org.junit.Assert.assertTrue("'" + options7 + "' != '" + org.apache.rat.utils.ReportingSet.Options.OVERWRITE + "'", options7.equals(org.apache.rat.utils.ReportingSet.Options.OVERWRITE));
        org.junit.Assert.assertNotNull(printWriterIOSupplier10);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
        org.junit.Assert.assertNull(filenameFilter12);
        org.junit.Assert.assertNull(filenameFilter13);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + true + "'", boolean14 == true);
        org.junit.Assert.assertNull(log15);
        org.junit.Assert.assertNotNull(iOFileFilter16);
        org.junit.Assert.assertNotNull(iOFileFilter17);
    }

    @Test
    public void test14685() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest29.test14685");
        org.apache.rat.license.ILicense.Builder builder0 = org.apache.rat.license.ILicense.builder();
        org.apache.rat.license.ILicense.Builder builder2 = builder0.setLicenseFamilyCategory("");
        org.apache.rat.license.ILicense.Builder builder4 = builder2.setDerivedFrom("GEN  ");
        org.apache.rat.license.ILicense.Builder builder6 = builder4.setId("DOJO ");
        org.apache.rat.license.ILicense.Builder builder8 = builder6.setName("GPL3 ");
        org.apache.rat.license.ILicense.Builder builder10 = builder6.setName("?????");
        org.apache.rat.license.ILicense.Builder builder12 = builder10.setName("GNU GENERAL PUBLIC LICENSE, VERSION 2");
        org.apache.rat.license.ILicense.Builder builder14 = builder10.setId("ANYBUILDER:");
        org.apache.rat.license.ILicense.Builder builder16 = builder10.setDerivedFrom("ade6df28-6801-4de6-a1d1-9488c069383f");
        org.junit.Assert.assertNotNull(builder0);
        org.junit.Assert.assertNotNull(builder2);
        org.junit.Assert.assertNotNull(builder4);
        org.junit.Assert.assertNotNull(builder6);
        org.junit.Assert.assertNotNull(builder8);
        org.junit.Assert.assertNotNull(builder10);
        org.junit.Assert.assertNotNull(builder12);
        org.junit.Assert.assertNotNull(builder14);
        org.junit.Assert.assertNotNull(builder16);
    }

    @Test
    public void test14686() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest29.test14686");
        // The following exception was thrown during execution in test generation
        try {
            org.apache.rat.configuration.Format format1 = org.apache.rat.configuration.Format.fromName("E92E4FD7-E42D-4D23-AE43-D13C9F1CFB69");
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: No such suffix: E92E4FD7-E42D-4D23-AE43-D13C9F1CFB69");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
    }

    @Test
    public void test14687() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest29.test14687");
        boolean boolean1 = org.apache.rat.document.impl.guesser.BinaryGuesser.isNonBinary("094643d4-94c6-478a-b861-15e14bd2e656");
        org.junit.Assert.assertTrue("'" + boolean1 + "' != '" + false + "'", boolean1 == false);
    }

    @Test
    public void test14688() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest29.test14688");
        org.apache.rat.utils.DefaultLog defaultLog0 = org.apache.rat.utils.DefaultLog.INSTANCE;
        org.apache.rat.annotation.ApacheV2LicenseAppender apacheV2LicenseAppender1 = new org.apache.rat.annotation.ApacheV2LicenseAppender((org.apache.rat.utils.Log) defaultLog0);
        apacheV2LicenseAppender1.setForce(true);
        org.junit.Assert.assertNotNull(defaultLog0);
    }

    @Test
    public void test14689() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest29.test14689");
        org.apache.rat.utils.Log log0 = null;
        org.apache.rat.ReportConfiguration reportConfiguration1 = new org.apache.rat.ReportConfiguration(log0);
        org.apache.rat.report.claim.ClaimStatistic claimStatistic2 = org.apache.rat.Reporter.report(reportConfiguration1);
        org.apache.rat.utils.ReportingSet.Options options3 = org.apache.rat.utils.ReportingSet.Options.OVERWRITE;
        reportConfiguration1.licenseDuplicateOption(options3);
        org.apache.commons.io.filefilter.IOFileFilter iOFileFilter5 = reportConfiguration1.getDirectoryFilter();
        java.lang.String[] strArray11 = new java.lang.String[] { "http://org/apache/rat/meta-data#LicenseFamilyCategory", "Datum [ name ='http://org/apache/rat/meta-data#LicenseFamilyCategory',value ='GPL1  ']", "MANIFEST.MF", "AllBuilder:", "The MIT License" };
        org.apache.rat.utils.ReportingSet<java.lang.String> strSet12 = new org.apache.rat.utils.ReportingSet<java.lang.String>();
        boolean boolean13 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strSet12, strArray11);
        boolean boolean15 = strSet12.addIfNotPresent("http://org/apache/rat/meta-data#LicenseFamilyName");
        boolean boolean17 = strSet12.addIfNotPresent("ef7a8b13-64c3-4510-bb0c-dbf208e1e73f");
        java.util.function.Function<java.lang.String, java.lang.String> strFunction18 = null;
        org.apache.rat.utils.ReportingSet<java.lang.String> strSet19 = strSet12.setMsgFormat(strFunction18);
        java.lang.String str20 = strSet12.last();
        java.lang.Object[] objArray21 = strSet12.toArray();
        org.apache.rat.utils.ReportingSet<java.lang.String> strSet23 = strSet12.tailSet("RegexBuilder: d4148d3a-edbc-4672-b347-0fa619553f91");
        reportConfiguration1.removeApprovedLicenseCategories((java.util.Collection<java.lang.String>) strSet23);
        org.junit.Assert.assertNull(claimStatistic2);
        org.junit.Assert.assertTrue("'" + options3 + "' != '" + org.apache.rat.utils.ReportingSet.Options.OVERWRITE + "'", options3.equals(org.apache.rat.utils.ReportingSet.Options.OVERWRITE));
        org.junit.Assert.assertNotNull(iOFileFilter5);
        org.junit.Assert.assertNotNull(strArray11);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + true + "'", boolean13 == true);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + true + "'", boolean15 == true);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + true + "'", boolean17 == true);
        org.junit.Assert.assertNotNull(strSet19);
        org.junit.Assert.assertEquals("'" + str20 + "' != '" + "http://org/apache/rat/meta-data#LicenseFamilyName" + "'", str20, "http://org/apache/rat/meta-data#LicenseFamilyName");
        org.junit.Assert.assertNotNull(objArray21);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray21), "[AllBuilder:, Datum [ name ='http://org/apache/rat/meta-data#LicenseFamilyCategory',value ='GPL1  '], MANIFEST.MF, The MIT License, ef7a8b13-64c3-4510-bb0c-dbf208e1e73f, http://org/apache/rat/meta-data#LicenseFamilyCategory, http://org/apache/rat/meta-data#LicenseFamilyName]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray21), "[AllBuilder:, Datum [ name ='http://org/apache/rat/meta-data#LicenseFamilyCategory',value ='GPL1  '], MANIFEST.MF, The MIT License, ef7a8b13-64c3-4510-bb0c-dbf208e1e73f, http://org/apache/rat/meta-data#LicenseFamilyCategory, http://org/apache/rat/meta-data#LicenseFamilyName]");
        org.junit.Assert.assertNotNull(strSet23);
    }

    @Test
    public void test14690() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest29.test14690");
        org.apache.rat.utils.Log log0 = null;
        org.apache.rat.ReportConfiguration reportConfiguration1 = new org.apache.rat.ReportConfiguration(log0);
        reportConfiguration1.addApprovedLicenseCategory(".cvsignore");
        org.apache.rat.utils.Log log4 = null;
        org.apache.rat.ReportConfiguration reportConfiguration5 = new org.apache.rat.ReportConfiguration(log4);
        java.io.FilenameFilter filenameFilter6 = reportConfiguration5.getInputFileFilter();
        org.apache.rat.license.LicenseSetFactory.LicenseFilter licenseFilter7 = org.apache.rat.license.LicenseSetFactory.LicenseFilter.all;
        java.util.SortedSet<org.apache.rat.license.ILicense> iLicenseSet8 = reportConfiguration5.getLicenses(licenseFilter7);
        reportConfiguration1.addLicensesIfNotPresent((java.util.Collection<org.apache.rat.license.ILicense>) iLicenseSet8);
        reportConfiguration1.removeApprovedLicenseCategory("The MIT License");
        org.apache.rat.license.ILicense iLicense12 = null;
        reportConfiguration1.addLicense(iLicense12);
        org.apache.rat.license.ILicense iLicense14 = null;
        reportConfiguration1.addLicense(iLicense14);
        org.apache.rat.utils.Log log16 = null;
        org.apache.rat.ReportConfiguration reportConfiguration17 = new org.apache.rat.ReportConfiguration(log16);
        org.apache.rat.report.claim.ClaimStatistic claimStatistic18 = org.apache.rat.Reporter.report(reportConfiguration17);
        org.apache.rat.utils.Log log19 = null;
        org.apache.rat.ReportConfiguration reportConfiguration20 = new org.apache.rat.ReportConfiguration(log19);
        org.apache.rat.report.claim.ClaimStatistic claimStatistic21 = org.apache.rat.Reporter.report(reportConfiguration20);
        org.apache.rat.utils.ReportingSet.Options options22 = org.apache.rat.utils.ReportingSet.Options.OVERWRITE;
        reportConfiguration20.licenseDuplicateOption(options22);
        reportConfiguration17.familyDuplicateOption(options22);
        org.apache.commons.io.function.IOSupplier<java.io.PrintWriter> printWriterIOSupplier25 = reportConfiguration17.getWriter();
        boolean boolean26 = reportConfiguration17.isAddingLicensesForced();
        java.io.FilenameFilter filenameFilter27 = reportConfiguration17.getInputFileFilter();
        org.apache.rat.utils.Log log28 = null;
        org.apache.rat.ReportConfiguration reportConfiguration29 = new org.apache.rat.ReportConfiguration(log28);
        org.apache.rat.utils.ReportingSet.Options options30 = org.apache.rat.utils.ReportingSet.Options.OVERWRITE;
        reportConfiguration29.licenseDuplicateOption(options30);
        org.apache.rat.utils.Log log32 = null;
        org.apache.rat.ReportConfiguration reportConfiguration33 = new org.apache.rat.ReportConfiguration(log32);
        java.io.FilenameFilter filenameFilter34 = reportConfiguration33.getInputFileFilter();
        org.apache.rat.license.LicenseSetFactory.LicenseFilter licenseFilter35 = org.apache.rat.license.LicenseSetFactory.LicenseFilter.all;
        java.util.SortedSet<org.apache.rat.license.ILicense> iLicenseSet36 = reportConfiguration33.getLicenses(licenseFilter35);
        org.apache.rat.config.AddLicenseHeaders addLicenseHeaders37 = org.apache.rat.config.AddLicenseHeaders.FALSE;
        reportConfiguration33.setAddLicenseHeaders(addLicenseHeaders37);
        org.apache.rat.utils.Log log39 = null;
        org.apache.rat.ReportConfiguration reportConfiguration40 = new org.apache.rat.ReportConfiguration(log39);
        org.apache.rat.report.claim.ClaimStatistic claimStatistic41 = org.apache.rat.Reporter.report(reportConfiguration40);
        org.apache.rat.license.LicenseSetFactory.LicenseFilter licenseFilter42 = org.apache.rat.license.LicenseSetFactory.LicenseFilter.all;
        org.apache.rat.Reporter.listLicenses(reportConfiguration40, licenseFilter42);
        org.apache.rat.Reporter.listLicenses(reportConfiguration33, licenseFilter42);
        org.apache.rat.utils.Log log45 = null;
        org.apache.rat.ReportConfiguration reportConfiguration46 = new org.apache.rat.ReportConfiguration(log45);
        java.io.FilenameFilter filenameFilter47 = reportConfiguration46.getInputFileFilter();
        org.apache.rat.license.LicenseSetFactory.LicenseFilter licenseFilter48 = org.apache.rat.license.LicenseSetFactory.LicenseFilter.all;
        java.util.SortedSet<org.apache.rat.license.ILicense> iLicenseSet49 = reportConfiguration46.getLicenses(licenseFilter48);
        org.apache.rat.config.AddLicenseHeaders addLicenseHeaders50 = org.apache.rat.config.AddLicenseHeaders.FALSE;
        reportConfiguration46.setAddLicenseHeaders(addLicenseHeaders50);
        org.apache.rat.utils.Log log52 = null;
        org.apache.rat.ReportConfiguration reportConfiguration53 = new org.apache.rat.ReportConfiguration(log52);
        org.apache.rat.report.claim.ClaimStatistic claimStatistic54 = org.apache.rat.Reporter.report(reportConfiguration53);
        org.apache.rat.license.LicenseSetFactory.LicenseFilter licenseFilter55 = org.apache.rat.license.LicenseSetFactory.LicenseFilter.all;
        org.apache.rat.Reporter.listLicenses(reportConfiguration53, licenseFilter55);
        org.apache.rat.Reporter.listLicenses(reportConfiguration46, licenseFilter55);
        org.apache.rat.Reporter.listLicenses(reportConfiguration33, licenseFilter55);
        org.apache.rat.utils.Log log59 = null;
        org.apache.rat.ReportConfiguration reportConfiguration60 = new org.apache.rat.ReportConfiguration(log59);
        org.apache.commons.io.function.IOSupplier<java.io.OutputStream> outputStreamIOSupplier61 = reportConfiguration60.getOutput();
        reportConfiguration33.setOut(outputStreamIOSupplier61);
        org.apache.rat.utils.Log.Level level63 = org.apache.rat.utils.Log.Level.WARN;
        reportConfiguration33.logLicenseCollisions(level63);
        org.apache.commons.io.filefilter.IOFileFilter iOFileFilter65 = reportConfiguration33.getDirectoryFilter();
        reportConfiguration29.setInputFileFilter((java.io.FilenameFilter) iOFileFilter65);
        reportConfiguration17.setInputFileFilter((java.io.FilenameFilter) iOFileFilter65);
        reportConfiguration1.addDirectoryFilter(iOFileFilter65);
        org.apache.rat.report.IReportable iReportable69 = reportConfiguration1.getReportable();
        org.junit.Assert.assertNull(filenameFilter6);
        org.junit.Assert.assertTrue("'" + licenseFilter7 + "' != '" + org.apache.rat.license.LicenseSetFactory.LicenseFilter.all + "'", licenseFilter7.equals(org.apache.rat.license.LicenseSetFactory.LicenseFilter.all));
        org.junit.Assert.assertNotNull(iLicenseSet8);
        org.junit.Assert.assertNull(claimStatistic18);
        org.junit.Assert.assertNull(claimStatistic21);
        org.junit.Assert.assertTrue("'" + options22 + "' != '" + org.apache.rat.utils.ReportingSet.Options.OVERWRITE + "'", options22.equals(org.apache.rat.utils.ReportingSet.Options.OVERWRITE));
        org.junit.Assert.assertNotNull(printWriterIOSupplier25);
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + false + "'", boolean26 == false);
        org.junit.Assert.assertNull(filenameFilter27);
        org.junit.Assert.assertTrue("'" + options30 + "' != '" + org.apache.rat.utils.ReportingSet.Options.OVERWRITE + "'", options30.equals(org.apache.rat.utils.ReportingSet.Options.OVERWRITE));
        org.junit.Assert.assertNull(filenameFilter34);
        org.junit.Assert.assertTrue("'" + licenseFilter35 + "' != '" + org.apache.rat.license.LicenseSetFactory.LicenseFilter.all + "'", licenseFilter35.equals(org.apache.rat.license.LicenseSetFactory.LicenseFilter.all));
        org.junit.Assert.assertNotNull(iLicenseSet36);
        org.junit.Assert.assertTrue("'" + addLicenseHeaders37 + "' != '" + org.apache.rat.config.AddLicenseHeaders.FALSE + "'", addLicenseHeaders37.equals(org.apache.rat.config.AddLicenseHeaders.FALSE));
        org.junit.Assert.assertNull(claimStatistic41);
        org.junit.Assert.assertTrue("'" + licenseFilter42 + "' != '" + org.apache.rat.license.LicenseSetFactory.LicenseFilter.all + "'", licenseFilter42.equals(org.apache.rat.license.LicenseSetFactory.LicenseFilter.all));
        org.junit.Assert.assertNull(filenameFilter47);
        org.junit.Assert.assertTrue("'" + licenseFilter48 + "' != '" + org.apache.rat.license.LicenseSetFactory.LicenseFilter.all + "'", licenseFilter48.equals(org.apache.rat.license.LicenseSetFactory.LicenseFilter.all));
        org.junit.Assert.assertNotNull(iLicenseSet49);
        org.junit.Assert.assertTrue("'" + addLicenseHeaders50 + "' != '" + org.apache.rat.config.AddLicenseHeaders.FALSE + "'", addLicenseHeaders50.equals(org.apache.rat.config.AddLicenseHeaders.FALSE));
        org.junit.Assert.assertNull(claimStatistic54);
        org.junit.Assert.assertTrue("'" + licenseFilter55 + "' != '" + org.apache.rat.license.LicenseSetFactory.LicenseFilter.all + "'", licenseFilter55.equals(org.apache.rat.license.LicenseSetFactory.LicenseFilter.all));
        org.junit.Assert.assertNotNull(outputStreamIOSupplier61);
        org.junit.Assert.assertTrue("'" + level63 + "' != '" + org.apache.rat.utils.Log.Level.WARN + "'", level63.equals(org.apache.rat.utils.Log.Level.WARN));
        org.junit.Assert.assertNotNull(iOFileFilter65);
        org.junit.Assert.assertNull(iReportable69);
    }

    @Test
    public void test14691() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest29.test14691");
        org.apache.rat.license.ILicense.Builder builder0 = org.apache.rat.license.ILicense.builder();
        org.apache.rat.license.ILicense.Builder builder2 = builder0.setLicenseFamilyCategory("");
        org.apache.rat.analysis.matchers.FullTextMatcher fullTextMatcher4 = new org.apache.rat.analysis.matchers.FullTextMatcher("ef7a8b13-64c3-4510-bb0c-dbf208e1e73f");
        org.apache.rat.license.ILicense.Builder builder5 = builder0.setMatcher((org.apache.rat.analysis.IHeaderMatcher) fullTextMatcher4);
        org.apache.rat.license.ILicense.Builder builder7 = builder0.setName("Datum [ name ='http://org/apache/rat/meta-data#LicenseFamilyCategory',value ='DOJO  ']");
        org.apache.rat.configuration.builders.MatcherRefBuilder matcherRefBuilder8 = org.apache.rat.analysis.IHeaderMatcher.Builder.matcherRef();
        boolean boolean9 = matcherRefBuilder8.hasId();
        java.lang.String str10 = matcherRefBuilder8.toString();
        java.util.Map<java.lang.String, org.apache.rat.analysis.IHeaderMatcher> strMap11 = null;
        org.apache.rat.configuration.builders.MatcherRefBuilder matcherRefBuilder12 = matcherRefBuilder8.setMatchers(strMap11);
        java.util.Map<java.lang.String, org.apache.rat.analysis.IHeaderMatcher> strMap13 = null;
        org.apache.rat.configuration.builders.MatcherRefBuilder matcherRefBuilder14 = matcherRefBuilder8.setMatchers(strMap13);
        java.util.Map<java.lang.String, org.apache.rat.analysis.IHeaderMatcher> strMap15 = null;
        org.apache.rat.configuration.builders.MatcherRefBuilder matcherRefBuilder16 = matcherRefBuilder8.setMatchers(strMap15);
        java.util.Map<java.lang.String, org.apache.rat.analysis.IHeaderMatcher> strMap17 = null;
        org.apache.rat.configuration.builders.MatcherRefBuilder matcherRefBuilder18 = matcherRefBuilder16.setMatchers(strMap17);
        java.lang.String str19 = matcherRefBuilder16.toString();
        org.apache.rat.configuration.builders.MatcherRefBuilder matcherRefBuilder21 = matcherRefBuilder16.setRefId("MathcerRefBuilder: null");
        java.lang.String str22 = matcherRefBuilder16.toString();
        org.apache.rat.license.ILicense.Builder builder23 = builder0.setMatcher((org.apache.rat.analysis.IHeaderMatcher.Builder) matcherRefBuilder16);
        org.apache.rat.license.ILicense.Builder builder25 = builder0.setId("null f1fc8dc8-990d-4a2d-9540-4e9ece3bd92c");
        org.apache.rat.license.ILicense.Builder builder27 = builder25.setDerivedFrom("7d01b1b3-e7b9-4f85-b3dd-e0334dea8844");
        org.apache.rat.license.ILicense.Builder builder29 = builder27.setDerivedFrom("F FALSE");
        org.apache.rat.license.ILicense.Builder builder31 = builder27.setLicenseFamilyCategory("31d68959-4e61-43f7-b1ac-ac033303c8ee");
        org.apache.rat.license.ILicense.Builder builder33 = builder27.setDerivedFrom("65e454b8-bebb-40d5-ad86-7e925a25b8d1");
        org.junit.Assert.assertNotNull(builder0);
        org.junit.Assert.assertNotNull(builder2);
        org.junit.Assert.assertNotNull(builder5);
        org.junit.Assert.assertNotNull(builder7);
        org.junit.Assert.assertNotNull(matcherRefBuilder8);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "MathcerRefBuilder: null" + "'", str10, "MathcerRefBuilder: null");
        org.junit.Assert.assertNotNull(matcherRefBuilder12);
        org.junit.Assert.assertNotNull(matcherRefBuilder14);
        org.junit.Assert.assertNotNull(matcherRefBuilder16);
        org.junit.Assert.assertNotNull(matcherRefBuilder18);
        org.junit.Assert.assertEquals("'" + str19 + "' != '" + "MathcerRefBuilder: null" + "'", str19, "MathcerRefBuilder: null");
        org.junit.Assert.assertNotNull(matcherRefBuilder21);
        org.junit.Assert.assertEquals("'" + str22 + "' != '" + "MathcerRefBuilder: MathcerRefBuilder: null" + "'", str22, "MathcerRefBuilder: MathcerRefBuilder: null");
        org.junit.Assert.assertNotNull(builder23);
        org.junit.Assert.assertNotNull(builder25);
        org.junit.Assert.assertNotNull(builder27);
        org.junit.Assert.assertNotNull(builder29);
        org.junit.Assert.assertNotNull(builder31);
        org.junit.Assert.assertNotNull(builder33);
    }

    @Test
    public void test14692() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest29.test14692");
        org.apache.rat.analysis.matchers.FullTextMatcher fullTextMatcher2 = new org.apache.rat.analysis.matchers.FullTextMatcher("Copyright Builder: s:null e:null o:a1abad46-6a98-44f8-aa20-7839919a8270", "TextBuilder: 4fcae176-e574-46ed-b...");
        fullTextMatcher2.reset();
    }

    @Test
    public void test14693() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest29.test14693");
        org.apache.rat.report.claim.ClaimStatistic claimStatistic0 = new org.apache.rat.report.claim.ClaimStatistic();
        claimStatistic0.setNumApproved((int) (short) 10);
        java.util.Map<java.lang.String, java.lang.Integer> strMap3 = null;
        claimStatistic0.setDocumentCategoryMap(strMap3);
        claimStatistic0.setNumUnknown((int) '4');
        claimStatistic0.setNumUnknown((int) (byte) 0);
        java.util.Map<java.lang.String, java.lang.Integer> strMap9 = claimStatistic0.getDocumentCategoryMap();
        claimStatistic0.setNumGenerated(0);
        int int12 = claimStatistic0.getNumGenerated();
        java.util.Map<java.lang.String, java.lang.Integer> strMap13 = claimStatistic0.getDocumentCategoryMap();
        claimStatistic0.setNumUnApproved(7);
        java.util.Map<java.lang.String, java.lang.Integer> strMap16 = claimStatistic0.getLicenseFileNameMap();
        org.junit.Assert.assertNull(strMap9);
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + 0 + "'", int12 == 0);
        org.junit.Assert.assertNull(strMap13);
        org.junit.Assert.assertNull(strMap16);
    }

    @Test
    public void test14694() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest29.test14694");
        org.apache.rat.utils.DefaultLog defaultLog0 = org.apache.rat.utils.DefaultLog.INSTANCE;
        org.apache.rat.annotation.ApacheV2LicenseAppender apacheV2LicenseAppender1 = new org.apache.rat.annotation.ApacheV2LicenseAppender((org.apache.rat.utils.Log) defaultLog0);
        org.apache.rat.ReportConfiguration reportConfiguration2 = new org.apache.rat.ReportConfiguration((org.apache.rat.utils.Log) defaultLog0);
        org.apache.rat.license.LicenseSetFactory.LicenseFilter licenseFilter3 = org.apache.rat.license.LicenseSetFactory.LicenseFilter.approved;
        org.apache.rat.Reporter.listLicenses(reportConfiguration2, licenseFilter3);
        org.apache.rat.utils.ReportingSet<java.lang.String> strSet5 = new org.apache.rat.utils.ReportingSet<java.lang.String>();
        java.lang.Object[] objArray6 = strSet5.toArray();
        reportConfiguration2.removeApprovedLicenseCategories((java.util.Collection<java.lang.String>) strSet5);
        org.apache.rat.utils.ReportingSet<java.lang.String> strSet9 = strSet5.tailSet("804cbd55-d8ca-4b15-b3a8-d94b4c47af38");
        org.junit.Assert.assertNotNull(defaultLog0);
        org.junit.Assert.assertTrue("'" + licenseFilter3 + "' != '" + org.apache.rat.license.LicenseSetFactory.LicenseFilter.approved + "'", licenseFilter3.equals(org.apache.rat.license.LicenseSetFactory.LicenseFilter.approved));
        org.junit.Assert.assertNotNull(objArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray6), "[]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray6), "[]");
        org.junit.Assert.assertNotNull(strSet9);
    }

    @Test
    public void test14695() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest29.test14695");
        java.io.File file0 = null;
        byte[] byteArray7 = new byte[] { (byte) 0, (byte) 10, (byte) 1, (byte) 100, (byte) 100, (byte) 100 };
        // The following exception was thrown during execution in test generation
        try {
            org.apache.rat.document.impl.ArchiveEntryDocument archiveEntryDocument8 = new org.apache.rat.document.impl.ArchiveEntryDocument(file0, byteArray7);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(byteArray7);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray7), "[0, 10, 1, 100, 100, 100]");
    }

    @Test
    public void test14696() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest29.test14696");
        java.io.File file0 = null;
        org.apache.rat.license.ILicense[] iLicenseArray1 = new org.apache.rat.license.ILicense[] {};
        java.util.TreeSet<org.apache.rat.license.ILicense> iLicenseSet2 = new java.util.TreeSet<org.apache.rat.license.ILicense>();
        boolean boolean3 = java.util.Collections.addAll((java.util.Collection<org.apache.rat.license.ILicense>) iLicenseSet2, iLicenseArray1);
        java.lang.String[] strArray16 = new java.lang.String[] { "GPL2 ", "GPL1 ", "notice", "http://org/apache/rat/meta-data#LicenseFamilyName", "notice", "GPL2 ", "http://org/apache/rat/meta-data#LicenseFamilyName", "", "GPL2 ", "", "GPL1 ", "hi!" };
        java.util.ArrayList<java.lang.String> strList17 = new java.util.ArrayList<java.lang.String>();
        boolean boolean18 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strList17, strArray16);
        org.apache.rat.license.LicenseSetFactory licenseSetFactory19 = new org.apache.rat.license.LicenseSetFactory((java.util.SortedSet<org.apache.rat.license.ILicense>) iLicenseSet2, (java.util.Collection<java.lang.String>) strList17);
        java.io.FilenameFilter filenameFilter20 = org.apache.rat.Report.parseExclusions((java.util.List<java.lang.String>) strList17);
        java.io.FilenameFilter filenameFilter21 = org.apache.rat.Report.parseExclusions((java.util.List<java.lang.String>) strList17);
        java.io.FilenameFilter filenameFilter22 = org.apache.rat.Report.parseExclusions((java.util.List<java.lang.String>) strList17);
        java.io.FilenameFilter filenameFilter23 = org.apache.rat.Report.parseExclusions((java.util.List<java.lang.String>) strList17);
        // The following exception was thrown during execution in test generation
        try {
            org.apache.rat.walker.ArchiveWalker archiveWalker24 = new org.apache.rat.walker.ArchiveWalker(file0, filenameFilter23);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(iLicenseArray1);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertNotNull(strArray16);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + true + "'", boolean18 == true);
        org.junit.Assert.assertNotNull(filenameFilter20);
        org.junit.Assert.assertNotNull(filenameFilter21);
        org.junit.Assert.assertNotNull(filenameFilter22);
        org.junit.Assert.assertNotNull(filenameFilter23);
    }

    @Test
    public void test14697() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest29.test14697");
        org.apache.rat.utils.Log log0 = null;
        org.apache.rat.ReportConfiguration reportConfiguration1 = new org.apache.rat.ReportConfiguration(log0);
        reportConfiguration1.addApprovedLicenseCategory(".cvsignore");
        org.apache.rat.utils.Log log4 = null;
        org.apache.rat.ReportConfiguration reportConfiguration5 = new org.apache.rat.ReportConfiguration(log4);
        java.io.FilenameFilter filenameFilter6 = reportConfiguration5.getInputFileFilter();
        org.apache.rat.license.LicenseSetFactory.LicenseFilter licenseFilter7 = org.apache.rat.license.LicenseSetFactory.LicenseFilter.all;
        java.util.SortedSet<org.apache.rat.license.ILicense> iLicenseSet8 = reportConfiguration5.getLicenses(licenseFilter7);
        reportConfiguration1.addLicensesIfNotPresent((java.util.Collection<org.apache.rat.license.ILicense>) iLicenseSet8);
        org.apache.rat.license.ILicense[] iLicenseArray10 = new org.apache.rat.license.ILicense[] {};
        java.util.TreeSet<org.apache.rat.license.ILicense> iLicenseSet11 = new java.util.TreeSet<org.apache.rat.license.ILicense>();
        boolean boolean12 = java.util.Collections.addAll((java.util.Collection<org.apache.rat.license.ILicense>) iLicenseSet11, iLicenseArray10);
        java.lang.String[] strArray25 = new java.lang.String[] { "GPL2 ", "GPL1 ", "notice", "http://org/apache/rat/meta-data#LicenseFamilyName", "notice", "GPL2 ", "http://org/apache/rat/meta-data#LicenseFamilyName", "", "GPL2 ", "", "GPL1 ", "hi!" };
        java.util.ArrayList<java.lang.String> strList26 = new java.util.ArrayList<java.lang.String>();
        boolean boolean27 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strList26, strArray25);
        org.apache.rat.license.LicenseSetFactory licenseSetFactory28 = new org.apache.rat.license.LicenseSetFactory((java.util.SortedSet<org.apache.rat.license.ILicense>) iLicenseSet11, (java.util.Collection<java.lang.String>) strList26);
        org.apache.rat.utils.Log log29 = null;
        org.apache.rat.ReportConfiguration reportConfiguration30 = new org.apache.rat.ReportConfiguration(log29);
        java.io.FilenameFilter filenameFilter31 = reportConfiguration30.getInputFileFilter();
        org.apache.rat.license.LicenseSetFactory.LicenseFilter licenseFilter32 = org.apache.rat.license.LicenseSetFactory.LicenseFilter.all;
        java.util.SortedSet<org.apache.rat.license.ILicense> iLicenseSet33 = reportConfiguration30.getLicenses(licenseFilter32);
        org.apache.rat.config.AddLicenseHeaders addLicenseHeaders34 = org.apache.rat.config.AddLicenseHeaders.FALSE;
        reportConfiguration30.setAddLicenseHeaders(addLicenseHeaders34);
        org.apache.rat.utils.Log log36 = null;
        org.apache.rat.ReportConfiguration reportConfiguration37 = new org.apache.rat.ReportConfiguration(log36);
        org.apache.rat.report.claim.ClaimStatistic claimStatistic38 = org.apache.rat.Reporter.report(reportConfiguration37);
        org.apache.rat.license.LicenseSetFactory.LicenseFilter licenseFilter39 = org.apache.rat.license.LicenseSetFactory.LicenseFilter.all;
        org.apache.rat.Reporter.listLicenses(reportConfiguration37, licenseFilter39);
        org.apache.rat.Reporter.listLicenses(reportConfiguration30, licenseFilter39);
        org.apache.rat.utils.Log log42 = null;
        org.apache.rat.ReportConfiguration reportConfiguration43 = new org.apache.rat.ReportConfiguration(log42);
        java.io.FilenameFilter filenameFilter44 = reportConfiguration43.getInputFileFilter();
        org.apache.rat.license.LicenseSetFactory.LicenseFilter licenseFilter45 = org.apache.rat.license.LicenseSetFactory.LicenseFilter.all;
        java.util.SortedSet<org.apache.rat.license.ILicense> iLicenseSet46 = reportConfiguration43.getLicenses(licenseFilter45);
        org.apache.rat.config.AddLicenseHeaders addLicenseHeaders47 = org.apache.rat.config.AddLicenseHeaders.FALSE;
        reportConfiguration43.setAddLicenseHeaders(addLicenseHeaders47);
        org.apache.rat.utils.Log log49 = null;
        org.apache.rat.ReportConfiguration reportConfiguration50 = new org.apache.rat.ReportConfiguration(log49);
        org.apache.rat.report.claim.ClaimStatistic claimStatistic51 = org.apache.rat.Reporter.report(reportConfiguration50);
        org.apache.rat.license.LicenseSetFactory.LicenseFilter licenseFilter52 = org.apache.rat.license.LicenseSetFactory.LicenseFilter.all;
        org.apache.rat.Reporter.listLicenses(reportConfiguration50, licenseFilter52);
        org.apache.rat.Reporter.listLicenses(reportConfiguration43, licenseFilter52);
        org.apache.rat.Reporter.listLicenses(reportConfiguration30, licenseFilter52);
        java.util.SortedSet<org.apache.rat.license.ILicense> iLicenseSet56 = licenseSetFactory28.getLicenses(licenseFilter52);
        org.apache.rat.Reporter.listLicenseFamilies(reportConfiguration1, licenseFilter52);
        java.lang.String[] strArray63 = new java.lang.String[] { "http://org/apache/rat/meta-data#LicenseFamilyCategory", "Datum [ name ='http://org/apache/rat/meta-data#LicenseFamilyCategory',value ='GPL1  ']", "MANIFEST.MF", "AllBuilder:", "The MIT License" };
        org.apache.rat.utils.ReportingSet<java.lang.String> strSet64 = new org.apache.rat.utils.ReportingSet<java.lang.String>();
        boolean boolean65 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strSet64, strArray63);
        boolean boolean67 = strSet64.addIfNotPresent("http://org/apache/rat/meta-data#LicenseFamilyName");
        boolean boolean69 = strSet64.addIfNotPresent("ef7a8b13-64c3-4510-bb0c-dbf208e1e73f");
        java.util.function.Function<java.lang.String, java.lang.String> strFunction70 = null;
        org.apache.rat.utils.ReportingSet<java.lang.String> strSet71 = strSet64.setMsgFormat(strFunction70);
        java.util.SortedSet<org.apache.rat.license.ILicenseFamily> iLicenseFamilySet73 = org.apache.rat.license.LicenseFamilySetFactory.emptyLicenseFamilySet();
        org.apache.rat.license.ILicenseFamily iLicenseFamily74 = org.apache.rat.license.LicenseFamilySetFactory.search("http://org/apache/rat/meta-data", iLicenseFamilySet73);
        boolean boolean75 = strSet64.containsAll((java.util.Collection<org.apache.rat.license.ILicenseFamily>) iLicenseFamilySet73);
        org.apache.rat.utils.ReportingSet<java.lang.String> strSet77 = strSet64.tailSet("http://org/apache/rat/meta-data#HeaderCategory");
        org.apache.rat.utils.Log log78 = null;
        org.apache.rat.ReportConfiguration reportConfiguration79 = new org.apache.rat.ReportConfiguration(log78);
        java.io.FilenameFilter filenameFilter80 = reportConfiguration79.getInputFileFilter();
        org.apache.rat.license.LicenseSetFactory.LicenseFilter licenseFilter81 = org.apache.rat.license.LicenseSetFactory.LicenseFilter.all;
        java.util.SortedSet<org.apache.rat.license.ILicense> iLicenseSet82 = reportConfiguration79.getLicenses(licenseFilter81);
        org.apache.rat.config.AddLicenseHeaders addLicenseHeaders83 = org.apache.rat.config.AddLicenseHeaders.FALSE;
        reportConfiguration79.setAddLicenseHeaders(addLicenseHeaders83);
        org.apache.rat.utils.Log log85 = null;
        org.apache.rat.ReportConfiguration reportConfiguration86 = new org.apache.rat.ReportConfiguration(log85);
        reportConfiguration86.addApprovedLicenseCategory(".cvsignore");
        org.apache.rat.utils.Log.Level level89 = org.apache.rat.utils.Log.Level.ERROR;
        reportConfiguration86.logLicenseCollisions(level89);
        reportConfiguration79.logFamilyCollisions(level89);
        org.apache.rat.utils.ReportingSet<java.lang.String> strSet92 = strSet64.setLogLevel(level89);
        reportConfiguration1.addApprovedLicenseCategories((java.util.Collection<java.lang.String>) strSet92);
        // The following exception was thrown during execution in test generation
        try {
            org.apache.rat.utils.ReportingSet<java.lang.String> strSet96 = strSet92.subSet("PLAIN", "64868");
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: fromKey > toKey");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNull(filenameFilter6);
        org.junit.Assert.assertTrue("'" + licenseFilter7 + "' != '" + org.apache.rat.license.LicenseSetFactory.LicenseFilter.all + "'", licenseFilter7.equals(org.apache.rat.license.LicenseSetFactory.LicenseFilter.all));
        org.junit.Assert.assertNotNull(iLicenseSet8);
        org.junit.Assert.assertNotNull(iLicenseArray10);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertNotNull(strArray25);
        org.junit.Assert.assertTrue("'" + boolean27 + "' != '" + true + "'", boolean27 == true);
        org.junit.Assert.assertNull(filenameFilter31);
        org.junit.Assert.assertTrue("'" + licenseFilter32 + "' != '" + org.apache.rat.license.LicenseSetFactory.LicenseFilter.all + "'", licenseFilter32.equals(org.apache.rat.license.LicenseSetFactory.LicenseFilter.all));
        org.junit.Assert.assertNotNull(iLicenseSet33);
        org.junit.Assert.assertTrue("'" + addLicenseHeaders34 + "' != '" + org.apache.rat.config.AddLicenseHeaders.FALSE + "'", addLicenseHeaders34.equals(org.apache.rat.config.AddLicenseHeaders.FALSE));
        org.junit.Assert.assertNull(claimStatistic38);
        org.junit.Assert.assertTrue("'" + licenseFilter39 + "' != '" + org.apache.rat.license.LicenseSetFactory.LicenseFilter.all + "'", licenseFilter39.equals(org.apache.rat.license.LicenseSetFactory.LicenseFilter.all));
        org.junit.Assert.assertNull(filenameFilter44);
        org.junit.Assert.assertTrue("'" + licenseFilter45 + "' != '" + org.apache.rat.license.LicenseSetFactory.LicenseFilter.all + "'", licenseFilter45.equals(org.apache.rat.license.LicenseSetFactory.LicenseFilter.all));
        org.junit.Assert.assertNotNull(iLicenseSet46);
        org.junit.Assert.assertTrue("'" + addLicenseHeaders47 + "' != '" + org.apache.rat.config.AddLicenseHeaders.FALSE + "'", addLicenseHeaders47.equals(org.apache.rat.config.AddLicenseHeaders.FALSE));
        org.junit.Assert.assertNull(claimStatistic51);
        org.junit.Assert.assertTrue("'" + licenseFilter52 + "' != '" + org.apache.rat.license.LicenseSetFactory.LicenseFilter.all + "'", licenseFilter52.equals(org.apache.rat.license.LicenseSetFactory.LicenseFilter.all));
        org.junit.Assert.assertNotNull(iLicenseSet56);
        org.junit.Assert.assertNotNull(strArray63);
        org.junit.Assert.assertTrue("'" + boolean65 + "' != '" + true + "'", boolean65 == true);
        org.junit.Assert.assertTrue("'" + boolean67 + "' != '" + true + "'", boolean67 == true);
        org.junit.Assert.assertTrue("'" + boolean69 + "' != '" + true + "'", boolean69 == true);
        org.junit.Assert.assertNotNull(strSet71);
        org.junit.Assert.assertNotNull(iLicenseFamilySet73);
        org.junit.Assert.assertNull(iLicenseFamily74);
        org.junit.Assert.assertTrue("'" + boolean75 + "' != '" + true + "'", boolean75 == true);
        org.junit.Assert.assertNotNull(strSet77);
        org.junit.Assert.assertNull(filenameFilter80);
        org.junit.Assert.assertTrue("'" + licenseFilter81 + "' != '" + org.apache.rat.license.LicenseSetFactory.LicenseFilter.all + "'", licenseFilter81.equals(org.apache.rat.license.LicenseSetFactory.LicenseFilter.all));
        org.junit.Assert.assertNotNull(iLicenseSet82);
        org.junit.Assert.assertTrue("'" + addLicenseHeaders83 + "' != '" + org.apache.rat.config.AddLicenseHeaders.FALSE + "'", addLicenseHeaders83.equals(org.apache.rat.config.AddLicenseHeaders.FALSE));
        org.junit.Assert.assertTrue("'" + level89 + "' != '" + org.apache.rat.utils.Log.Level.ERROR + "'", level89.equals(org.apache.rat.utils.Log.Level.ERROR));
        org.junit.Assert.assertNotNull(strSet92);
    }

    @Test
    public void test14698() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest29.test14698");
        org.apache.rat.utils.DefaultLog defaultLog0 = org.apache.rat.utils.DefaultLog.INSTANCE;
        defaultLog0.info((java.lang.Object) "Modified BSD License");
        org.apache.rat.annotation.ApacheV2LicenseAppender apacheV2LicenseAppender4 = new org.apache.rat.annotation.ApacheV2LicenseAppender((org.apache.rat.utils.Log) defaultLog0, "8ecb8cce-06e4-400f-84d9-ad1cf6289fda");
        org.apache.rat.configuration.Format format5 = org.apache.rat.configuration.Format.XML;
        org.apache.rat.configuration.LicenseReader licenseReader6 = format5.licenseReader();
        org.apache.rat.configuration.MatcherReader matcherReader7 = format5.matcherReader();
        org.apache.rat.configuration.LicenseReader licenseReader8 = format5.licenseReader();
        org.apache.rat.configuration.LicenseReader licenseReader9 = format5.licenseReader();
        org.apache.rat.configuration.MatcherReader matcherReader10 = format5.matcherReader();
        org.apache.rat.configuration.MatcherReader matcherReader11 = format5.matcherReader();
        org.apache.rat.configuration.MatcherReader matcherReader12 = format5.matcherReader();
        org.apache.rat.configuration.MatcherReader matcherReader13 = format5.matcherReader();
        org.apache.rat.configuration.LicenseReader licenseReader14 = format5.licenseReader();
        org.apache.rat.configuration.LicenseReader licenseReader15 = format5.licenseReader();
        java.util.SortedSet<org.apache.rat.license.ILicense> iLicenseSet16 = licenseReader15.readLicenses();
        // The following exception was thrown during execution in test generation
        try {
            org.apache.rat.document.IDocumentAnalyser iDocumentAnalyser17 = org.apache.rat.analysis.DefaultAnalyserFactory.createDefaultAnalyser((org.apache.rat.utils.Log) defaultLog0, (java.util.Collection<org.apache.rat.license.ILicense>) iLicenseSet16);
            org.junit.Assert.fail("Expected exception of type org.apache.rat.ConfigurationException; message: At least one license must be defined");
        } catch (org.apache.rat.ConfigurationException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(defaultLog0);
        org.junit.Assert.assertTrue("'" + format5 + "' != '" + org.apache.rat.configuration.Format.XML + "'", format5.equals(org.apache.rat.configuration.Format.XML));
        org.junit.Assert.assertNotNull(licenseReader6);
        org.junit.Assert.assertNotNull(matcherReader7);
        org.junit.Assert.assertNotNull(licenseReader8);
        org.junit.Assert.assertNotNull(licenseReader9);
        org.junit.Assert.assertNotNull(matcherReader10);
        org.junit.Assert.assertNotNull(matcherReader11);
        org.junit.Assert.assertNotNull(matcherReader12);
        org.junit.Assert.assertNotNull(matcherReader13);
        org.junit.Assert.assertNotNull(licenseReader14);
        org.junit.Assert.assertNotNull(licenseReader15);
        org.junit.Assert.assertNotNull(iLicenseSet16);
    }

    @Test
    public void test14699() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest29.test14699");
        org.apache.rat.utils.Log log0 = null;
        org.apache.rat.ReportConfiguration reportConfiguration1 = new org.apache.rat.ReportConfiguration(log0);
        org.apache.rat.report.claim.ClaimStatistic claimStatistic2 = org.apache.rat.Reporter.report(reportConfiguration1);
        org.apache.rat.utils.Log log3 = null;
        org.apache.rat.ReportConfiguration reportConfiguration4 = new org.apache.rat.ReportConfiguration(log3);
        org.apache.rat.report.claim.ClaimStatistic claimStatistic5 = org.apache.rat.Reporter.report(reportConfiguration4);
        org.apache.rat.utils.ReportingSet.Options options6 = org.apache.rat.utils.ReportingSet.Options.OVERWRITE;
        reportConfiguration4.licenseDuplicateOption(options6);
        reportConfiguration1.familyDuplicateOption(options6);
        org.apache.commons.io.function.IOSupplier<java.io.PrintWriter> printWriterIOSupplier9 = reportConfiguration1.getWriter();
        boolean boolean10 = reportConfiguration1.isAddingLicensesForced();
        org.apache.rat.utils.Log log11 = null;
        org.apache.rat.ReportConfiguration reportConfiguration12 = new org.apache.rat.ReportConfiguration(log11);
        org.apache.rat.report.claim.ClaimStatistic claimStatistic13 = org.apache.rat.Reporter.report(reportConfiguration12);
        org.apache.commons.io.function.IOSupplier<java.io.OutputStream> outputStreamIOSupplier14 = reportConfiguration12.getOutput();
        reportConfiguration1.setOut(outputStreamIOSupplier14);
        org.apache.rat.report.claim.ClaimStatistic claimStatistic16 = org.apache.rat.Reporter.report(reportConfiguration1);
        org.apache.rat.utils.Log log17 = null;
        org.apache.rat.ReportConfiguration reportConfiguration18 = new org.apache.rat.ReportConfiguration(log17);
        reportConfiguration18.addApprovedLicenseCategory(".cvsignore");
        org.apache.rat.utils.Log log21 = null;
        org.apache.rat.ReportConfiguration reportConfiguration22 = new org.apache.rat.ReportConfiguration(log21);
        java.io.FilenameFilter filenameFilter23 = reportConfiguration22.getInputFileFilter();
        org.apache.rat.license.LicenseSetFactory.LicenseFilter licenseFilter24 = org.apache.rat.license.LicenseSetFactory.LicenseFilter.all;
        java.util.SortedSet<org.apache.rat.license.ILicense> iLicenseSet25 = reportConfiguration22.getLicenses(licenseFilter24);
        reportConfiguration18.addLicensesIfNotPresent((java.util.Collection<org.apache.rat.license.ILicense>) iLicenseSet25);
        org.apache.rat.license.ILicenseFamily iLicenseFamily27 = null;
        reportConfiguration18.addFamily(iLicenseFamily27);
        java.lang.String str29 = reportConfiguration18.getCopyrightMessage();
        org.apache.rat.utils.Log log30 = null;
        org.apache.rat.ReportConfiguration reportConfiguration31 = new org.apache.rat.ReportConfiguration(log30);
        java.io.FilenameFilter filenameFilter32 = reportConfiguration31.getInputFileFilter();
        org.apache.rat.license.LicenseSetFactory.LicenseFilter licenseFilter33 = org.apache.rat.license.LicenseSetFactory.LicenseFilter.all;
        java.util.SortedSet<org.apache.rat.license.ILicense> iLicenseSet34 = reportConfiguration31.getLicenses(licenseFilter33);
        org.apache.commons.io.function.IOSupplier<java.io.InputStream> inputStreamIOSupplier35 = reportConfiguration31.getStyleSheet();
        org.apache.rat.utils.Log log36 = null;
        org.apache.rat.ReportConfiguration reportConfiguration37 = new org.apache.rat.ReportConfiguration(log36);
        reportConfiguration37.addApprovedLicenseCategory(".cvsignore");
        org.apache.rat.utils.Log.Level level40 = org.apache.rat.utils.Log.Level.ERROR;
        reportConfiguration37.logLicenseCollisions(level40);
        org.apache.rat.utils.Log log42 = null;
        org.apache.rat.ReportConfiguration reportConfiguration43 = new org.apache.rat.ReportConfiguration(log42);
        java.io.FilenameFilter filenameFilter44 = reportConfiguration43.getInputFileFilter();
        org.apache.rat.license.LicenseSetFactory.LicenseFilter licenseFilter45 = org.apache.rat.license.LicenseSetFactory.LicenseFilter.all;
        java.util.SortedSet<org.apache.rat.license.ILicense> iLicenseSet46 = reportConfiguration43.getLicenses(licenseFilter45);
        org.apache.rat.config.AddLicenseHeaders addLicenseHeaders47 = org.apache.rat.config.AddLicenseHeaders.FALSE;
        reportConfiguration43.setAddLicenseHeaders(addLicenseHeaders47);
        org.apache.rat.utils.Log log49 = null;
        org.apache.rat.ReportConfiguration reportConfiguration50 = new org.apache.rat.ReportConfiguration(log49);
        org.apache.rat.report.claim.ClaimStatistic claimStatistic51 = org.apache.rat.Reporter.report(reportConfiguration50);
        org.apache.rat.license.LicenseSetFactory.LicenseFilter licenseFilter52 = org.apache.rat.license.LicenseSetFactory.LicenseFilter.all;
        org.apache.rat.Reporter.listLicenses(reportConfiguration50, licenseFilter52);
        org.apache.rat.Reporter.listLicenses(reportConfiguration43, licenseFilter52);
        org.apache.rat.utils.Log log55 = null;
        org.apache.rat.ReportConfiguration reportConfiguration56 = new org.apache.rat.ReportConfiguration(log55);
        java.io.FilenameFilter filenameFilter57 = reportConfiguration56.getInputFileFilter();
        org.apache.rat.license.LicenseSetFactory.LicenseFilter licenseFilter58 = org.apache.rat.license.LicenseSetFactory.LicenseFilter.all;
        java.util.SortedSet<org.apache.rat.license.ILicense> iLicenseSet59 = reportConfiguration56.getLicenses(licenseFilter58);
        org.apache.rat.config.AddLicenseHeaders addLicenseHeaders60 = org.apache.rat.config.AddLicenseHeaders.FALSE;
        reportConfiguration56.setAddLicenseHeaders(addLicenseHeaders60);
        org.apache.rat.utils.Log log62 = null;
        org.apache.rat.ReportConfiguration reportConfiguration63 = new org.apache.rat.ReportConfiguration(log62);
        org.apache.rat.report.claim.ClaimStatistic claimStatistic64 = org.apache.rat.Reporter.report(reportConfiguration63);
        org.apache.rat.license.LicenseSetFactory.LicenseFilter licenseFilter65 = org.apache.rat.license.LicenseSetFactory.LicenseFilter.all;
        org.apache.rat.Reporter.listLicenses(reportConfiguration63, licenseFilter65);
        org.apache.rat.Reporter.listLicenses(reportConfiguration56, licenseFilter65);
        java.util.SortedSet<org.apache.rat.license.ILicenseFamily> iLicenseFamilySet68 = reportConfiguration43.getLicenseFamilies(licenseFilter65);
        org.apache.rat.utils.Log log69 = null;
        org.apache.rat.ReportConfiguration reportConfiguration70 = new org.apache.rat.ReportConfiguration(log69);
        java.io.FilenameFilter filenameFilter71 = reportConfiguration70.getInputFileFilter();
        org.apache.rat.license.LicenseSetFactory.LicenseFilter licenseFilter72 = org.apache.rat.license.LicenseSetFactory.LicenseFilter.all;
        java.util.SortedSet<org.apache.rat.license.ILicense> iLicenseSet73 = reportConfiguration70.getLicenses(licenseFilter72);
        org.apache.rat.config.AddLicenseHeaders addLicenseHeaders74 = org.apache.rat.config.AddLicenseHeaders.FALSE;
        reportConfiguration70.setAddLicenseHeaders(addLicenseHeaders74);
        reportConfiguration43.setAddLicenseHeaders(addLicenseHeaders74);
        reportConfiguration37.setAddLicenseHeaders(addLicenseHeaders74);
        reportConfiguration31.setAddLicenseHeaders(addLicenseHeaders74);
        org.apache.rat.utils.DefaultLog defaultLog79 = org.apache.rat.utils.DefaultLog.INSTANCE;
        org.apache.rat.license.ILicense.Builder builder80 = org.apache.rat.license.ILicense.builder();
        org.apache.rat.license.ILicense.Builder builder82 = builder80.setLicenseFamilyCategory("");
        org.apache.rat.analysis.matchers.CopyrightMatcher copyrightMatcher86 = new org.apache.rat.analysis.matchers.CopyrightMatcher("", "GPL1 ", "hi!");
        org.apache.rat.analysis.IHeaderMatcher.State state87 = copyrightMatcher86.finalizeState();
        org.apache.rat.license.ILicense.Builder builder88 = builder82.setMatcher((org.apache.rat.analysis.IHeaderMatcher) copyrightMatcher86);
        org.apache.rat.license.ILicense.Builder builder90 = builder88.setLicenseFamilyCategory("");
        defaultLog79.error((java.lang.Object) builder90);
        org.apache.rat.utils.Log.Level level92 = org.apache.rat.utils.Log.Level.INFO;
        defaultLog79.log(level92, "JAVA");
        org.apache.rat.license.LicenseSetFactory.LicenseFilter licenseFilter95 = org.apache.rat.license.LicenseSetFactory.LicenseFilter.approved;
        defaultLog79.info((java.lang.Object) licenseFilter95);
        java.util.SortedSet<org.apache.rat.license.ILicenseFamily> iLicenseFamilySet97 = reportConfiguration31.getLicenseFamilies(licenseFilter95);
        org.apache.rat.Reporter.listLicenseFamilies(reportConfiguration18, licenseFilter95);
        org.apache.rat.Reporter.listLicenseFamilies(reportConfiguration1, licenseFilter95);
        org.junit.Assert.assertNull(claimStatistic2);
        org.junit.Assert.assertNull(claimStatistic5);
        org.junit.Assert.assertTrue("'" + options6 + "' != '" + org.apache.rat.utils.ReportingSet.Options.OVERWRITE + "'", options6.equals(org.apache.rat.utils.ReportingSet.Options.OVERWRITE));
        org.junit.Assert.assertNotNull(printWriterIOSupplier9);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertNull(claimStatistic13);
        org.junit.Assert.assertNotNull(outputStreamIOSupplier14);
        org.junit.Assert.assertNull(claimStatistic16);
        org.junit.Assert.assertNull(filenameFilter23);
        org.junit.Assert.assertTrue("'" + licenseFilter24 + "' != '" + org.apache.rat.license.LicenseSetFactory.LicenseFilter.all + "'", licenseFilter24.equals(org.apache.rat.license.LicenseSetFactory.LicenseFilter.all));
        org.junit.Assert.assertNotNull(iLicenseSet25);
        org.junit.Assert.assertNull(str29);
        org.junit.Assert.assertNull(filenameFilter32);
        org.junit.Assert.assertTrue("'" + licenseFilter33 + "' != '" + org.apache.rat.license.LicenseSetFactory.LicenseFilter.all + "'", licenseFilter33.equals(org.apache.rat.license.LicenseSetFactory.LicenseFilter.all));
        org.junit.Assert.assertNotNull(iLicenseSet34);
        org.junit.Assert.assertNull(inputStreamIOSupplier35);
        org.junit.Assert.assertTrue("'" + level40 + "' != '" + org.apache.rat.utils.Log.Level.ERROR + "'", level40.equals(org.apache.rat.utils.Log.Level.ERROR));
        org.junit.Assert.assertNull(filenameFilter44);
        org.junit.Assert.assertTrue("'" + licenseFilter45 + "' != '" + org.apache.rat.license.LicenseSetFactory.LicenseFilter.all + "'", licenseFilter45.equals(org.apache.rat.license.LicenseSetFactory.LicenseFilter.all));
        org.junit.Assert.assertNotNull(iLicenseSet46);
        org.junit.Assert.assertTrue("'" + addLicenseHeaders47 + "' != '" + org.apache.rat.config.AddLicenseHeaders.FALSE + "'", addLicenseHeaders47.equals(org.apache.rat.config.AddLicenseHeaders.FALSE));
        org.junit.Assert.assertNull(claimStatistic51);
        org.junit.Assert.assertTrue("'" + licenseFilter52 + "' != '" + org.apache.rat.license.LicenseSetFactory.LicenseFilter.all + "'", licenseFilter52.equals(org.apache.rat.license.LicenseSetFactory.LicenseFilter.all));
        org.junit.Assert.assertNull(filenameFilter57);
        org.junit.Assert.assertTrue("'" + licenseFilter58 + "' != '" + org.apache.rat.license.LicenseSetFactory.LicenseFilter.all + "'", licenseFilter58.equals(org.apache.rat.license.LicenseSetFactory.LicenseFilter.all));
        org.junit.Assert.assertNotNull(iLicenseSet59);
        org.junit.Assert.assertTrue("'" + addLicenseHeaders60 + "' != '" + org.apache.rat.config.AddLicenseHeaders.FALSE + "'", addLicenseHeaders60.equals(org.apache.rat.config.AddLicenseHeaders.FALSE));
        org.junit.Assert.assertNull(claimStatistic64);
        org.junit.Assert.assertTrue("'" + licenseFilter65 + "' != '" + org.apache.rat.license.LicenseSetFactory.LicenseFilter.all + "'", licenseFilter65.equals(org.apache.rat.license.LicenseSetFactory.LicenseFilter.all));
        org.junit.Assert.assertNotNull(iLicenseFamilySet68);
        org.junit.Assert.assertNull(filenameFilter71);
        org.junit.Assert.assertTrue("'" + licenseFilter72 + "' != '" + org.apache.rat.license.LicenseSetFactory.LicenseFilter.all + "'", licenseFilter72.equals(org.apache.rat.license.LicenseSetFactory.LicenseFilter.all));
        org.junit.Assert.assertNotNull(iLicenseSet73);
        org.junit.Assert.assertTrue("'" + addLicenseHeaders74 + "' != '" + org.apache.rat.config.AddLicenseHeaders.FALSE + "'", addLicenseHeaders74.equals(org.apache.rat.config.AddLicenseHeaders.FALSE));
        org.junit.Assert.assertNotNull(defaultLog79);
        org.junit.Assert.assertNotNull(builder80);
        org.junit.Assert.assertNotNull(builder82);
        org.junit.Assert.assertTrue("'" + state87 + "' != '" + org.apache.rat.analysis.IHeaderMatcher.State.f + "'", state87.equals(org.apache.rat.analysis.IHeaderMatcher.State.f));
        org.junit.Assert.assertNotNull(builder88);
        org.junit.Assert.assertNotNull(builder90);
        org.junit.Assert.assertTrue("'" + level92 + "' != '" + org.apache.rat.utils.Log.Level.INFO + "'", level92.equals(org.apache.rat.utils.Log.Level.INFO));
        org.junit.Assert.assertTrue("'" + licenseFilter95 + "' != '" + org.apache.rat.license.LicenseSetFactory.LicenseFilter.approved + "'", licenseFilter95.equals(org.apache.rat.license.LicenseSetFactory.LicenseFilter.approved));
        org.junit.Assert.assertNotNull(iLicenseFamilySet97);
    }

    @Test
    public void test14700() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest29.test14700");
        org.apache.rat.utils.ReportingSet<java.lang.String> strSet0 = new org.apache.rat.utils.ReportingSet<java.lang.String>();
        org.apache.rat.utils.DefaultLog defaultLog1 = org.apache.rat.utils.DefaultLog.INSTANCE;
        org.apache.rat.utils.Log log2 = null;
        org.apache.rat.ReportConfiguration reportConfiguration3 = new org.apache.rat.ReportConfiguration(log2);
        java.io.FilenameFilter filenameFilter4 = reportConfiguration3.getInputFileFilter();
        org.apache.rat.license.LicenseSetFactory.LicenseFilter licenseFilter5 = org.apache.rat.license.LicenseSetFactory.LicenseFilter.all;
        java.util.SortedSet<org.apache.rat.license.ILicense> iLicenseSet6 = reportConfiguration3.getLicenses(licenseFilter5);
        org.apache.rat.config.AddLicenseHeaders addLicenseHeaders7 = org.apache.rat.config.AddLicenseHeaders.FALSE;
        reportConfiguration3.setAddLicenseHeaders(addLicenseHeaders7);
        org.apache.rat.utils.Log log9 = null;
        org.apache.rat.ReportConfiguration reportConfiguration10 = new org.apache.rat.ReportConfiguration(log9);
        org.apache.rat.report.claim.ClaimStatistic claimStatistic11 = org.apache.rat.Reporter.report(reportConfiguration10);
        org.apache.rat.license.LicenseSetFactory.LicenseFilter licenseFilter12 = org.apache.rat.license.LicenseSetFactory.LicenseFilter.all;
        org.apache.rat.Reporter.listLicenses(reportConfiguration10, licenseFilter12);
        org.apache.rat.Reporter.listLicenses(reportConfiguration3, licenseFilter12);
        org.apache.rat.utils.Log log15 = null;
        org.apache.rat.ReportConfiguration reportConfiguration16 = new org.apache.rat.ReportConfiguration(log15);
        java.io.FilenameFilter filenameFilter17 = reportConfiguration16.getInputFileFilter();
        org.apache.rat.license.LicenseSetFactory.LicenseFilter licenseFilter18 = org.apache.rat.license.LicenseSetFactory.LicenseFilter.all;
        java.util.SortedSet<org.apache.rat.license.ILicense> iLicenseSet19 = reportConfiguration16.getLicenses(licenseFilter18);
        org.apache.rat.config.AddLicenseHeaders addLicenseHeaders20 = org.apache.rat.config.AddLicenseHeaders.FALSE;
        reportConfiguration16.setAddLicenseHeaders(addLicenseHeaders20);
        org.apache.rat.utils.Log log22 = null;
        org.apache.rat.ReportConfiguration reportConfiguration23 = new org.apache.rat.ReportConfiguration(log22);
        org.apache.rat.report.claim.ClaimStatistic claimStatistic24 = org.apache.rat.Reporter.report(reportConfiguration23);
        org.apache.rat.license.LicenseSetFactory.LicenseFilter licenseFilter25 = org.apache.rat.license.LicenseSetFactory.LicenseFilter.all;
        org.apache.rat.Reporter.listLicenses(reportConfiguration23, licenseFilter25);
        org.apache.rat.Reporter.listLicenses(reportConfiguration16, licenseFilter25);
        org.apache.rat.Reporter.listLicenses(reportConfiguration3, licenseFilter25);
        org.apache.rat.utils.Log log29 = null;
        org.apache.rat.ReportConfiguration reportConfiguration30 = new org.apache.rat.ReportConfiguration(log29);
        org.apache.commons.io.function.IOSupplier<java.io.OutputStream> outputStreamIOSupplier31 = reportConfiguration30.getOutput();
        reportConfiguration3.setOut(outputStreamIOSupplier31);
        org.apache.rat.utils.Log log33 = null;
        org.apache.rat.ReportConfiguration reportConfiguration34 = new org.apache.rat.ReportConfiguration(log33);
        org.apache.rat.report.claim.ClaimStatistic claimStatistic35 = org.apache.rat.Reporter.report(reportConfiguration34);
        org.apache.rat.utils.Log log36 = null;
        org.apache.rat.ReportConfiguration reportConfiguration37 = new org.apache.rat.ReportConfiguration(log36);
        org.apache.rat.report.claim.ClaimStatistic claimStatistic38 = org.apache.rat.Reporter.report(reportConfiguration37);
        org.apache.rat.utils.ReportingSet.Options options39 = org.apache.rat.utils.ReportingSet.Options.OVERWRITE;
        reportConfiguration37.licenseDuplicateOption(options39);
        reportConfiguration34.familyDuplicateOption(options39);
        reportConfiguration3.licenseDuplicateOption(options39);
        reportConfiguration3.addApprovedLicenseCategory("W3C Document Copyright");
        org.apache.rat.utils.Log log45 = null;
        org.apache.rat.ReportConfiguration reportConfiguration46 = new org.apache.rat.ReportConfiguration(log45);
        reportConfiguration46.addApprovedLicenseCategory(".cvsignore");
        org.apache.rat.utils.Log.Level level49 = org.apache.rat.utils.Log.Level.ERROR;
        reportConfiguration46.logLicenseCollisions(level49);
        reportConfiguration3.logLicenseCollisions(level49);
        defaultLog1.setLevel(level49);
        org.apache.rat.utils.ReportingSet<java.lang.String> strSet53 = strSet0.setLog((org.apache.rat.utils.Log) defaultLog1);
        org.apache.rat.configuration.Format format54 = org.apache.rat.configuration.Format.XML;
        org.apache.rat.configuration.LicenseReader licenseReader55 = format54.licenseReader();
        java.util.SortedSet<org.apache.rat.license.ILicense> iLicenseSet56 = licenseReader55.readLicenses();
        java.lang.String[] strArray62 = new java.lang.String[] { "http://org/apache/rat/meta-data#LicenseFamilyCategory", "Datum [ name ='http://org/apache/rat/meta-data#LicenseFamilyCategory',value ='GPL1  ']", "MANIFEST.MF", "AllBuilder:", "The MIT License" };
        org.apache.rat.utils.ReportingSet<java.lang.String> strSet63 = new org.apache.rat.utils.ReportingSet<java.lang.String>();
        boolean boolean64 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strSet63, strArray62);
        boolean boolean66 = strSet63.addIfNotPresent("http://org/apache/rat/meta-data#LicenseFamilyName");
        boolean boolean68 = strSet63.addIfNotPresent("ef7a8b13-64c3-4510-bb0c-dbf208e1e73f");
        java.util.function.Function<java.lang.String, java.lang.String> strFunction69 = null;
        org.apache.rat.utils.ReportingSet<java.lang.String> strSet70 = strSet63.setMsgFormat(strFunction69);
        boolean boolean71 = strSet63.isEmpty();
        org.apache.rat.license.LicenseSetFactory licenseSetFactory72 = new org.apache.rat.license.LicenseSetFactory(iLicenseSet56, (java.util.Collection<java.lang.String>) strSet63);
        org.apache.rat.license.ILicenseFamily[] iLicenseFamilyArray73 = new org.apache.rat.license.ILicenseFamily[] {};
        java.util.ArrayList<org.apache.rat.license.ILicenseFamily> iLicenseFamilyList74 = new java.util.ArrayList<org.apache.rat.license.ILicenseFamily>();
        boolean boolean75 = java.util.Collections.addAll((java.util.Collection<org.apache.rat.license.ILicenseFamily>) iLicenseFamilyList74, iLicenseFamilyArray73);
        org.apache.rat.policy.DefaultPolicy defaultPolicy76 = new org.apache.rat.policy.DefaultPolicy((java.util.Collection<org.apache.rat.license.ILicenseFamily>) iLicenseFamilyList74);
        boolean boolean77 = strSet63.removeAll((java.util.Collection<org.apache.rat.license.ILicenseFamily>) iLicenseFamilyList74);
        org.apache.rat.policy.DefaultPolicy defaultPolicy78 = new org.apache.rat.policy.DefaultPolicy((java.util.Collection<org.apache.rat.license.ILicenseFamily>) iLicenseFamilyList74);
        boolean boolean79 = strSet0.retainAll((java.util.Collection<org.apache.rat.license.ILicenseFamily>) iLicenseFamilyList74);
        org.apache.rat.Defaults.Builder builder80 = org.apache.rat.Defaults.builder();
        org.apache.rat.Defaults defaults81 = builder80.build();
        org.apache.rat.license.LicenseSetFactory.LicenseFilter licenseFilter82 = org.apache.rat.license.LicenseSetFactory.LicenseFilter.approved;
        java.util.SortedSet<org.apache.rat.license.ILicenseFamily> iLicenseFamilySet83 = defaults81.getLicenseFamilies(licenseFilter82);
        org.apache.rat.policy.DefaultPolicy defaultPolicy84 = new org.apache.rat.policy.DefaultPolicy((java.util.Collection<org.apache.rat.license.ILicenseFamily>) iLicenseFamilySet83);
        org.apache.rat.policy.DefaultPolicy defaultPolicy85 = new org.apache.rat.policy.DefaultPolicy((java.util.Collection<org.apache.rat.license.ILicenseFamily>) iLicenseFamilySet83);
        boolean boolean86 = strSet0.containsAll((java.util.Collection<org.apache.rat.license.ILicenseFamily>) iLicenseFamilySet83);
        java.util.stream.Stream<java.lang.String> strStream87 = strSet0.stream();
        org.junit.Assert.assertNotNull(defaultLog1);
        org.junit.Assert.assertNull(filenameFilter4);
        org.junit.Assert.assertTrue("'" + licenseFilter5 + "' != '" + org.apache.rat.license.LicenseSetFactory.LicenseFilter.all + "'", licenseFilter5.equals(org.apache.rat.license.LicenseSetFactory.LicenseFilter.all));
        org.junit.Assert.assertNotNull(iLicenseSet6);
        org.junit.Assert.assertTrue("'" + addLicenseHeaders7 + "' != '" + org.apache.rat.config.AddLicenseHeaders.FALSE + "'", addLicenseHeaders7.equals(org.apache.rat.config.AddLicenseHeaders.FALSE));
        org.junit.Assert.assertNull(claimStatistic11);
        org.junit.Assert.assertTrue("'" + licenseFilter12 + "' != '" + org.apache.rat.license.LicenseSetFactory.LicenseFilter.all + "'", licenseFilter12.equals(org.apache.rat.license.LicenseSetFactory.LicenseFilter.all));
        org.junit.Assert.assertNull(filenameFilter17);
        org.junit.Assert.assertTrue("'" + licenseFilter18 + "' != '" + org.apache.rat.license.LicenseSetFactory.LicenseFilter.all + "'", licenseFilter18.equals(org.apache.rat.license.LicenseSetFactory.LicenseFilter.all));
        org.junit.Assert.assertNotNull(iLicenseSet19);
        org.junit.Assert.assertTrue("'" + addLicenseHeaders20 + "' != '" + org.apache.rat.config.AddLicenseHeaders.FALSE + "'", addLicenseHeaders20.equals(org.apache.rat.config.AddLicenseHeaders.FALSE));
        org.junit.Assert.assertNull(claimStatistic24);
        org.junit.Assert.assertTrue("'" + licenseFilter25 + "' != '" + org.apache.rat.license.LicenseSetFactory.LicenseFilter.all + "'", licenseFilter25.equals(org.apache.rat.license.LicenseSetFactory.LicenseFilter.all));
        org.junit.Assert.assertNotNull(outputStreamIOSupplier31);
        org.junit.Assert.assertNull(claimStatistic35);
        org.junit.Assert.assertNull(claimStatistic38);
        org.junit.Assert.assertTrue("'" + options39 + "' != '" + org.apache.rat.utils.ReportingSet.Options.OVERWRITE + "'", options39.equals(org.apache.rat.utils.ReportingSet.Options.OVERWRITE));
        org.junit.Assert.assertTrue("'" + level49 + "' != '" + org.apache.rat.utils.Log.Level.ERROR + "'", level49.equals(org.apache.rat.utils.Log.Level.ERROR));
        org.junit.Assert.assertNotNull(strSet53);
        org.junit.Assert.assertTrue("'" + format54 + "' != '" + org.apache.rat.configuration.Format.XML + "'", format54.equals(org.apache.rat.configuration.Format.XML));
        org.junit.Assert.assertNotNull(licenseReader55);
        org.junit.Assert.assertNotNull(iLicenseSet56);
        org.junit.Assert.assertNotNull(strArray62);
        org.junit.Assert.assertTrue("'" + boolean64 + "' != '" + true + "'", boolean64 == true);
        org.junit.Assert.assertTrue("'" + boolean66 + "' != '" + true + "'", boolean66 == true);
        org.junit.Assert.assertTrue("'" + boolean68 + "' != '" + true + "'", boolean68 == true);
        org.junit.Assert.assertNotNull(strSet70);
        org.junit.Assert.assertTrue("'" + boolean71 + "' != '" + false + "'", boolean71 == false);
        org.junit.Assert.assertNotNull(iLicenseFamilyArray73);
        org.junit.Assert.assertTrue("'" + boolean75 + "' != '" + false + "'", boolean75 == false);
        org.junit.Assert.assertTrue("'" + boolean77 + "' != '" + false + "'", boolean77 == false);
        org.junit.Assert.assertTrue("'" + boolean79 + "' != '" + false + "'", boolean79 == false);
        org.junit.Assert.assertNotNull(builder80);
        org.junit.Assert.assertNotNull(defaults81);
        org.junit.Assert.assertTrue("'" + licenseFilter82 + "' != '" + org.apache.rat.license.LicenseSetFactory.LicenseFilter.approved + "'", licenseFilter82.equals(org.apache.rat.license.LicenseSetFactory.LicenseFilter.approved));
        org.junit.Assert.assertNotNull(iLicenseFamilySet83);
        org.junit.Assert.assertTrue("'" + boolean86 + "' != '" + false + "'", boolean86 == false);
        org.junit.Assert.assertNotNull(strStream87);
    }

    @Test
    public void test14701() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest29.test14701");
        org.apache.rat.license.ILicenseFamilyBuilder iLicenseFamilyBuilder0 = new org.apache.rat.license.ILicenseFamilyBuilder();
        java.lang.String str1 = iLicenseFamilyBuilder0.getCategory();
        org.apache.rat.license.ILicenseFamily.Builder builder3 = iLicenseFamilyBuilder0.setLicenseFamilyCategory("AL   ");
        org.apache.rat.license.ILicenseFamily.Builder builder5 = iLicenseFamilyBuilder0.setLicenseFamilyName("binary");
        org.apache.rat.license.ILicenseFamily.Builder builder7 = iLicenseFamilyBuilder0.setLicenseFamilyCategory("3c74a3ec-8235-4035-9db7-f9f475b48681");
        java.lang.String str8 = iLicenseFamilyBuilder0.getCategory();
        org.apache.rat.license.ILicenseFamily.Builder builder10 = iLicenseFamilyBuilder0.setLicenseFamilyCategory("f02d0cdc36424583b71fdd84a120752c");
        org.apache.rat.license.ILicenseFamily.Builder builder12 = iLicenseFamilyBuilder0.setLicenseFamilyName("Datum [ name ='http://org/apache/rat/meta-data#LicenseFamilyName',value ='????? ']");
        org.apache.rat.license.ILicenseFamily.Builder builder14 = iLicenseFamilyBuilder0.setLicenseFamilyName("89426113-1da8-4591-9c20-8025b6ece33d");
        java.lang.String str15 = iLicenseFamilyBuilder0.getCategory();
        org.apache.rat.license.ILicenseFamily.Builder builder17 = iLicenseFamilyBuilder0.setLicenseFamilyName("8F0EE536-38AE-476A-A728-DE95E24C13C3");
        java.lang.String str18 = iLicenseFamilyBuilder0.getCategory();
        java.lang.String str19 = iLicenseFamilyBuilder0.getCategory();
        org.junit.Assert.assertNull(str1);
        org.junit.Assert.assertNotNull(builder3);
        org.junit.Assert.assertNotNull(builder5);
        org.junit.Assert.assertNotNull(builder7);
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "3c74a3ec-8235-4035-9db7-f9f475b48681" + "'", str8, "3c74a3ec-8235-4035-9db7-f9f475b48681");
        org.junit.Assert.assertNotNull(builder10);
        org.junit.Assert.assertNotNull(builder12);
        org.junit.Assert.assertNotNull(builder14);
        org.junit.Assert.assertEquals("'" + str15 + "' != '" + "f02d0cdc36424583b71fdd84a120752c" + "'", str15, "f02d0cdc36424583b71fdd84a120752c");
        org.junit.Assert.assertNotNull(builder17);
        org.junit.Assert.assertEquals("'" + str18 + "' != '" + "f02d0cdc36424583b71fdd84a120752c" + "'", str18, "f02d0cdc36424583b71fdd84a120752c");
        org.junit.Assert.assertEquals("'" + str19 + "' != '" + "f02d0cdc36424583b71fdd84a120752c" + "'", str19, "f02d0cdc36424583b71fdd84a120752c");
    }

    @Test
    public void test14702() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest29.test14702");
        java.lang.String str1 = org.apache.rat.license.ILicenseFamily.makeCategory("Copyright Builder: s:null e:64868 o:null");
        org.junit.Assert.assertEquals("'" + str1 + "' != '" + "Copyr" + "'", str1, "Copyr");
    }

    @Test
    public void test14703() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest29.test14703");
        org.apache.rat.report.claim.ClaimStatistic claimStatistic0 = new org.apache.rat.report.claim.ClaimStatistic();
        claimStatistic0.setNumApproved((int) (short) 10);
        java.util.Map<java.lang.String, java.lang.Integer> strMap3 = null;
        claimStatistic0.setDocumentCategoryMap(strMap3);
        java.util.Map<java.lang.String, java.lang.Integer> strMap5 = null;
        claimStatistic0.setDocumentCategoryMap(strMap5);
        java.util.Map<java.lang.String, java.lang.Integer> strMap7 = null;
        claimStatistic0.setDocumentCategoryMap(strMap7);
        java.util.Map<java.lang.String, java.lang.Integer> strMap9 = claimStatistic0.getDocumentCategoryMap();
        int int10 = claimStatistic0.getNumGenerated();
        org.junit.Assert.assertNull(strMap9);
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + 0 + "'", int10 == 0);
    }

    @Test
    public void test14704() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest29.test14704");
        org.apache.rat.report.claim.ClaimStatistic claimStatistic0 = new org.apache.rat.report.claim.ClaimStatistic();
        claimStatistic0.setNumApproved((int) (short) 10);
        java.util.Map<java.lang.String, java.lang.Integer> strMap3 = null;
        claimStatistic0.setDocumentCategoryMap(strMap3);
        claimStatistic0.setNumUnknown((int) '4');
        claimStatistic0.setNumUnknown((int) (byte) 0);
        claimStatistic0.setNumUnknown((int) (byte) 10);
        java.util.Map<java.lang.String, java.lang.Integer> strMap11 = claimStatistic0.getDocumentCategoryMap();
        java.util.Map<java.lang.String, java.lang.Integer> strMap12 = claimStatistic0.getLicenseFileCodeMap();
        int int13 = claimStatistic0.getNumUnknown();
        int int14 = claimStatistic0.getNumUnApproved();
        org.junit.Assert.assertNull(strMap11);
        org.junit.Assert.assertNull(strMap12);
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + 10 + "'", int13 == 10);
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + 0 + "'", int14 == 0);
    }

    @Test
    public void test14705() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest29.test14705");
        org.apache.rat.license.SimpleLicenseFamily simpleLicenseFamily0 = new org.apache.rat.license.SimpleLicenseFamily();
        java.lang.String str1 = simpleLicenseFamily0.getFamilyName();
        java.lang.String str2 = simpleLicenseFamily0.getFamilyCategory();
        java.lang.String str3 = simpleLicenseFamily0.getFamilyName();
        java.lang.String str4 = simpleLicenseFamily0.getFamilyName();
        java.lang.String str5 = simpleLicenseFamily0.getFamilyName();
        simpleLicenseFamily0.setFamilyName("D25F13BC-1910-4451-97B5-B72663551A5D");
        org.junit.Assert.assertNull(str1);
        org.junit.Assert.assertNull(str2);
        org.junit.Assert.assertNull(str3);
        org.junit.Assert.assertNull(str4);
        org.junit.Assert.assertNull(str5);
    }

    @Test
    public void test14706() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest29.test14706");
        org.apache.commons.cli.CommandLine commandLine1 = null;
        // The following exception was thrown during execution in test generation
        try {
            org.apache.rat.ReportConfiguration reportConfiguration2 = org.apache.rat.Report.createConfiguration("11ca4826-0b63-487f-a0c1-91d3c1a086fd", commandLine1);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
    }

    @Test
    public void test14707() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest29.test14707");
        org.apache.rat.utils.Log log0 = null;
        org.apache.rat.ReportConfiguration reportConfiguration1 = new org.apache.rat.ReportConfiguration(log0);
        org.apache.rat.report.claim.ClaimStatistic claimStatistic2 = org.apache.rat.Reporter.report(reportConfiguration1);
        org.apache.commons.io.function.IOSupplier<java.io.OutputStream> outputStreamIOSupplier3 = reportConfiguration1.getOutput();
        boolean boolean4 = reportConfiguration1.isAddingLicensesForced();
        java.lang.String str5 = reportConfiguration1.getCopyrightMessage();
        org.apache.rat.license.ILicense[] iLicenseArray6 = new org.apache.rat.license.ILicense[] {};
        java.util.TreeSet<org.apache.rat.license.ILicense> iLicenseSet7 = new java.util.TreeSet<org.apache.rat.license.ILicense>();
        boolean boolean8 = java.util.Collections.addAll((java.util.Collection<org.apache.rat.license.ILicense>) iLicenseSet7, iLicenseArray6);
        java.lang.String[] strArray21 = new java.lang.String[] { "GPL2 ", "GPL1 ", "notice", "http://org/apache/rat/meta-data#LicenseFamilyName", "notice", "GPL2 ", "http://org/apache/rat/meta-data#LicenseFamilyName", "", "GPL2 ", "", "GPL1 ", "hi!" };
        java.util.ArrayList<java.lang.String> strList22 = new java.util.ArrayList<java.lang.String>();
        boolean boolean23 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strList22, strArray21);
        org.apache.rat.license.LicenseSetFactory licenseSetFactory24 = new org.apache.rat.license.LicenseSetFactory((java.util.SortedSet<org.apache.rat.license.ILicense>) iLicenseSet7, (java.util.Collection<java.lang.String>) strList22);
        org.apache.rat.utils.Log log25 = null;
        org.apache.rat.ReportConfiguration reportConfiguration26 = new org.apache.rat.ReportConfiguration(log25);
        java.io.FilenameFilter filenameFilter27 = reportConfiguration26.getInputFileFilter();
        org.apache.rat.license.LicenseSetFactory.LicenseFilter licenseFilter28 = org.apache.rat.license.LicenseSetFactory.LicenseFilter.all;
        java.util.SortedSet<org.apache.rat.license.ILicense> iLicenseSet29 = reportConfiguration26.getLicenses(licenseFilter28);
        org.apache.rat.config.AddLicenseHeaders addLicenseHeaders30 = org.apache.rat.config.AddLicenseHeaders.FALSE;
        reportConfiguration26.setAddLicenseHeaders(addLicenseHeaders30);
        org.apache.rat.utils.Log log32 = null;
        org.apache.rat.ReportConfiguration reportConfiguration33 = new org.apache.rat.ReportConfiguration(log32);
        org.apache.rat.report.claim.ClaimStatistic claimStatistic34 = org.apache.rat.Reporter.report(reportConfiguration33);
        org.apache.rat.license.LicenseSetFactory.LicenseFilter licenseFilter35 = org.apache.rat.license.LicenseSetFactory.LicenseFilter.all;
        org.apache.rat.Reporter.listLicenses(reportConfiguration33, licenseFilter35);
        org.apache.rat.Reporter.listLicenses(reportConfiguration26, licenseFilter35);
        org.apache.rat.utils.Log log38 = null;
        org.apache.rat.ReportConfiguration reportConfiguration39 = new org.apache.rat.ReportConfiguration(log38);
        java.io.FilenameFilter filenameFilter40 = reportConfiguration39.getInputFileFilter();
        org.apache.rat.license.LicenseSetFactory.LicenseFilter licenseFilter41 = org.apache.rat.license.LicenseSetFactory.LicenseFilter.all;
        java.util.SortedSet<org.apache.rat.license.ILicense> iLicenseSet42 = reportConfiguration39.getLicenses(licenseFilter41);
        org.apache.rat.config.AddLicenseHeaders addLicenseHeaders43 = org.apache.rat.config.AddLicenseHeaders.FALSE;
        reportConfiguration39.setAddLicenseHeaders(addLicenseHeaders43);
        org.apache.rat.utils.Log log45 = null;
        org.apache.rat.ReportConfiguration reportConfiguration46 = new org.apache.rat.ReportConfiguration(log45);
        org.apache.rat.report.claim.ClaimStatistic claimStatistic47 = org.apache.rat.Reporter.report(reportConfiguration46);
        org.apache.rat.license.LicenseSetFactory.LicenseFilter licenseFilter48 = org.apache.rat.license.LicenseSetFactory.LicenseFilter.all;
        org.apache.rat.Reporter.listLicenses(reportConfiguration46, licenseFilter48);
        org.apache.rat.Reporter.listLicenses(reportConfiguration39, licenseFilter48);
        org.apache.rat.Reporter.listLicenses(reportConfiguration26, licenseFilter48);
        java.util.SortedSet<org.apache.rat.license.ILicense> iLicenseSet52 = licenseSetFactory24.getLicenses(licenseFilter48);
        org.apache.rat.Reporter.listLicenseFamilies(reportConfiguration1, licenseFilter48);
        org.apache.rat.license.ILicenseFamily.Builder builder54 = null;
        reportConfiguration1.addFamily(builder54);
        java.lang.String[] strArray61 = new java.lang.String[] { "http://org/apache/rat/meta-data#LicenseFamilyCategory", "Datum [ name ='http://org/apache/rat/meta-data#LicenseFamilyCategory',value ='GPL1  ']", "MANIFEST.MF", "AllBuilder:", "The MIT License" };
        org.apache.rat.utils.ReportingSet<java.lang.String> strSet62 = new org.apache.rat.utils.ReportingSet<java.lang.String>();
        boolean boolean63 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strSet62, strArray61);
        boolean boolean65 = strSet62.addIfNotPresent("http://org/apache/rat/meta-data#LicenseFamilyName");
        boolean boolean67 = strSet62.addIfNotPresent("ef7a8b13-64c3-4510-bb0c-dbf208e1e73f");
        java.util.function.Function<java.lang.String, java.lang.String> strFunction68 = null;
        org.apache.rat.utils.ReportingSet<java.lang.String> strSet69 = strSet62.setMsgFormat(strFunction68);
        java.lang.String str70 = strSet69.first();
        java.util.Spliterator<java.lang.String> strSpliterator71 = strSet69.spliterator();
        java.lang.String str72 = strSet69.first();
        java.lang.String str73 = strSet69.first();
        org.apache.rat.utils.ReportingSet<java.lang.String> strSet75 = strSet69.tailSet("MathcerRefBuildernull");
        reportConfiguration1.addApprovedLicenseCategories((java.util.Collection<java.lang.String>) strSet75);
        org.junit.Assert.assertNull(claimStatistic2);
        org.junit.Assert.assertNotNull(outputStreamIOSupplier3);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertNull(str5);
        org.junit.Assert.assertNotNull(iLicenseArray6);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertNotNull(strArray21);
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + true + "'", boolean23 == true);
        org.junit.Assert.assertNull(filenameFilter27);
        org.junit.Assert.assertTrue("'" + licenseFilter28 + "' != '" + org.apache.rat.license.LicenseSetFactory.LicenseFilter.all + "'", licenseFilter28.equals(org.apache.rat.license.LicenseSetFactory.LicenseFilter.all));
        org.junit.Assert.assertNotNull(iLicenseSet29);
        org.junit.Assert.assertTrue("'" + addLicenseHeaders30 + "' != '" + org.apache.rat.config.AddLicenseHeaders.FALSE + "'", addLicenseHeaders30.equals(org.apache.rat.config.AddLicenseHeaders.FALSE));
        org.junit.Assert.assertNull(claimStatistic34);
        org.junit.Assert.assertTrue("'" + licenseFilter35 + "' != '" + org.apache.rat.license.LicenseSetFactory.LicenseFilter.all + "'", licenseFilter35.equals(org.apache.rat.license.LicenseSetFactory.LicenseFilter.all));
        org.junit.Assert.assertNull(filenameFilter40);
        org.junit.Assert.assertTrue("'" + licenseFilter41 + "' != '" + org.apache.rat.license.LicenseSetFactory.LicenseFilter.all + "'", licenseFilter41.equals(org.apache.rat.license.LicenseSetFactory.LicenseFilter.all));
        org.junit.Assert.assertNotNull(iLicenseSet42);
        org.junit.Assert.assertTrue("'" + addLicenseHeaders43 + "' != '" + org.apache.rat.config.AddLicenseHeaders.FALSE + "'", addLicenseHeaders43.equals(org.apache.rat.config.AddLicenseHeaders.FALSE));
        org.junit.Assert.assertNull(claimStatistic47);
        org.junit.Assert.assertTrue("'" + licenseFilter48 + "' != '" + org.apache.rat.license.LicenseSetFactory.LicenseFilter.all + "'", licenseFilter48.equals(org.apache.rat.license.LicenseSetFactory.LicenseFilter.all));
        org.junit.Assert.assertNotNull(iLicenseSet52);
        org.junit.Assert.assertNotNull(strArray61);
        org.junit.Assert.assertTrue("'" + boolean63 + "' != '" + true + "'", boolean63 == true);
        org.junit.Assert.assertTrue("'" + boolean65 + "' != '" + true + "'", boolean65 == true);
        org.junit.Assert.assertTrue("'" + boolean67 + "' != '" + true + "'", boolean67 == true);
        org.junit.Assert.assertNotNull(strSet69);
        org.junit.Assert.assertEquals("'" + str70 + "' != '" + "AllBuilder:" + "'", str70, "AllBuilder:");
        org.junit.Assert.assertNotNull(strSpliterator71);
        org.junit.Assert.assertEquals("'" + str72 + "' != '" + "AllBuilder:" + "'", str72, "AllBuilder:");
        org.junit.Assert.assertEquals("'" + str73 + "' != '" + "AllBuilder:" + "'", str73, "AllBuilder:");
        org.junit.Assert.assertNotNull(strSet75);
    }

    @Test
    public void test14708() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest29.test14708");
        org.apache.rat.analysis.matchers.FullTextMatcher fullTextMatcher2 = new org.apache.rat.analysis.matchers.FullTextMatcher("9ff12955-a2a3-43ec-88c8-8b4c159ccbfa", "a1d7a6cd-e548-4846-82aa-06426863977c");
    }

    @Test
    public void test14709() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest29.test14709");
        org.apache.rat.api.MetaData.Datum datum2 = new org.apache.rat.api.MetaData.Datum("659c96ab-5c6e-4067-997a-fa311a81a261", "da9d818e-cf4c-475d-a59b-31d1a0c007a6");
        java.lang.String str3 = datum2.getName();
        org.junit.Assert.assertEquals("'" + str3 + "' != '" + "659c96ab-5c6e-4067-997a-fa311a81a261" + "'", str3, "659c96ab-5c6e-4067-997a-fa311a81a261");
    }

    @Test
    public void test14710() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest29.test14710");
        org.apache.rat.analysis.matchers.SimpleTextMatcher simpleTextMatcher1 = new org.apache.rat.analysis.matchers.SimpleTextMatcher("COMMON DEVELOPMENT AND DISTRIBUTION LICENSE VERSION 1.0");
    }

    @Test
    public void test14711() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest29.test14711");
        org.apache.rat.configuration.Format format0 = org.apache.rat.configuration.Format.XML;
        org.apache.rat.configuration.LicenseReader licenseReader1 = format0.licenseReader();
        org.apache.rat.configuration.LicenseReader licenseReader2 = format0.licenseReader();
        org.apache.rat.configuration.LicenseReader licenseReader3 = format0.licenseReader();
        org.apache.rat.configuration.LicenseReader licenseReader4 = format0.licenseReader();
        org.apache.rat.configuration.LicenseReader licenseReader5 = format0.licenseReader();
        org.apache.rat.configuration.MatcherReader matcherReader6 = format0.matcherReader();
        matcherReader6.readMatcherBuilders();
        matcherReader6.readMatcherBuilders();
        org.junit.Assert.assertTrue("'" + format0 + "' != '" + org.apache.rat.configuration.Format.XML + "'", format0.equals(org.apache.rat.configuration.Format.XML));
        org.junit.Assert.assertNotNull(licenseReader1);
        org.junit.Assert.assertNotNull(licenseReader2);
        org.junit.Assert.assertNotNull(licenseReader3);
        org.junit.Assert.assertNotNull(licenseReader4);
        org.junit.Assert.assertNotNull(licenseReader5);
        org.junit.Assert.assertNotNull(matcherReader6);
    }

    @Test
    public void test14712() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest29.test14712");
        org.apache.rat.analysis.matchers.SimpleTextMatcher simpleTextMatcher2 = new org.apache.rat.analysis.matchers.SimpleTextMatcher("ed0faf32-f32c-46f1-a629-4fe87704cb0e", "9ff12955a2a343ec88c88b4c159ccbfa");
    }

    @Test
    public void test14713() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest29.test14713");
        java.lang.String[] strArray5 = new java.lang.String[] { "http://org/apache/rat/meta-data#LicenseFamilyCategory", "Datum [ name ='http://org/apache/rat/meta-data#LicenseFamilyCategory',value ='GPL1  ']", "MANIFEST.MF", "AllBuilder:", "The MIT License" };
        org.apache.rat.utils.ReportingSet<java.lang.String> strSet6 = new org.apache.rat.utils.ReportingSet<java.lang.String>();
        boolean boolean7 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strSet6, strArray5);
        boolean boolean9 = strSet6.addIfNotPresent("http://org/apache/rat/meta-data#LicenseFamilyName");
        java.util.Iterator<java.lang.String> strItor10 = strSet6.iterator();
        org.apache.rat.utils.DefaultLog defaultLog11 = org.apache.rat.utils.DefaultLog.INSTANCE;
        org.apache.rat.license.ILicense.Builder builder12 = org.apache.rat.license.ILicense.builder();
        org.apache.rat.license.ILicense.Builder builder14 = builder12.setLicenseFamilyCategory("");
        org.apache.rat.analysis.matchers.CopyrightMatcher copyrightMatcher18 = new org.apache.rat.analysis.matchers.CopyrightMatcher("", "GPL1 ", "hi!");
        org.apache.rat.analysis.IHeaderMatcher.State state19 = copyrightMatcher18.finalizeState();
        org.apache.rat.license.ILicense.Builder builder20 = builder14.setMatcher((org.apache.rat.analysis.IHeaderMatcher) copyrightMatcher18);
        org.apache.rat.license.ILicense.Builder builder22 = builder20.setLicenseFamilyCategory("");
        defaultLog11.error((java.lang.Object) builder22);
        org.apache.rat.ReportConfiguration reportConfiguration24 = new org.apache.rat.ReportConfiguration((org.apache.rat.utils.Log) defaultLog11);
        org.apache.rat.utils.DefaultLog defaultLog25 = org.apache.rat.utils.DefaultLog.INSTANCE;
        org.apache.rat.license.ILicense.Builder builder26 = org.apache.rat.license.ILicense.builder();
        org.apache.rat.license.ILicense.Builder builder28 = builder26.setLicenseFamilyCategory("");
        org.apache.rat.analysis.matchers.CopyrightMatcher copyrightMatcher32 = new org.apache.rat.analysis.matchers.CopyrightMatcher("", "GPL1 ", "hi!");
        org.apache.rat.analysis.IHeaderMatcher.State state33 = copyrightMatcher32.finalizeState();
        org.apache.rat.license.ILicense.Builder builder34 = builder28.setMatcher((org.apache.rat.analysis.IHeaderMatcher) copyrightMatcher32);
        org.apache.rat.license.ILicense.Builder builder36 = builder34.setLicenseFamilyCategory("");
        defaultLog25.error((java.lang.Object) builder36);
        org.apache.rat.utils.Log.Level level38 = defaultLog25.getLevel();
        org.apache.rat.utils.Log log39 = null;
        org.apache.rat.ReportConfiguration reportConfiguration40 = new org.apache.rat.ReportConfiguration(log39);
        reportConfiguration40.addApprovedLicenseCategory(".cvsignore");
        org.apache.rat.utils.Log.Level level43 = org.apache.rat.utils.Log.Level.ERROR;
        reportConfiguration40.logLicenseCollisions(level43);
        defaultLog25.log(level43, "AnyBuilder:");
        defaultLog11.info((java.lang.Object) defaultLog25);
        org.apache.rat.utils.ReportingSet<java.lang.String> strSet48 = strSet6.setLog((org.apache.rat.utils.Log) defaultLog11);
        org.apache.rat.configuration.builders.MatcherRefBuilder matcherRefBuilder49 = org.apache.rat.analysis.IHeaderMatcher.Builder.matcherRef();
        boolean boolean50 = matcherRefBuilder49.hasId();
        java.lang.String str51 = matcherRefBuilder49.toString();
        java.util.Map<java.lang.String, org.apache.rat.analysis.IHeaderMatcher> strMap52 = null;
        org.apache.rat.configuration.builders.MatcherRefBuilder matcherRefBuilder53 = matcherRefBuilder49.setMatchers(strMap52);
        java.util.Map<java.lang.String, org.apache.rat.analysis.IHeaderMatcher> strMap54 = null;
        org.apache.rat.configuration.builders.MatcherRefBuilder matcherRefBuilder55 = matcherRefBuilder49.setMatchers(strMap54);
        java.util.Map<java.lang.String, org.apache.rat.analysis.IHeaderMatcher> strMap56 = null;
        org.apache.rat.configuration.builders.MatcherRefBuilder matcherRefBuilder57 = matcherRefBuilder49.setMatchers(strMap56);
        org.apache.rat.configuration.builders.MatcherRefBuilder matcherRefBuilder59 = matcherRefBuilder49.setRefId("Datum [ name ='http://org/apache/rat/meta-data#LicenseFamilyName',value ='Academic Free License, Version 2.1 ']");
        defaultLog11.error((java.lang.Object) matcherRefBuilder49);
        org.apache.rat.configuration.builders.MatcherRefBuilder matcherRefBuilder62 = matcherRefBuilder49.setRefId("NotBuilder: Copyright Builder: s:.cvsignore e:null o:null");
        // The following exception was thrown during execution in test generation
        try {
            org.apache.rat.analysis.IHeaderMatcher iHeaderMatcher63 = matcherRefBuilder49.build();
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(strArray5);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + true + "'", boolean7 == true);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + true + "'", boolean9 == true);
        org.junit.Assert.assertNotNull(strItor10);
        org.junit.Assert.assertNotNull(defaultLog11);
        org.junit.Assert.assertNotNull(builder12);
        org.junit.Assert.assertNotNull(builder14);
        org.junit.Assert.assertTrue("'" + state19 + "' != '" + org.apache.rat.analysis.IHeaderMatcher.State.f + "'", state19.equals(org.apache.rat.analysis.IHeaderMatcher.State.f));
        org.junit.Assert.assertNotNull(builder20);
        org.junit.Assert.assertNotNull(builder22);
        org.junit.Assert.assertNotNull(defaultLog25);
        org.junit.Assert.assertNotNull(builder26);
        org.junit.Assert.assertNotNull(builder28);
        org.junit.Assert.assertTrue("'" + state33 + "' != '" + org.apache.rat.analysis.IHeaderMatcher.State.f + "'", state33.equals(org.apache.rat.analysis.IHeaderMatcher.State.f));
        org.junit.Assert.assertNotNull(builder34);
        org.junit.Assert.assertNotNull(builder36);
        org.junit.Assert.assertTrue("'" + level38 + "' != '" + org.apache.rat.utils.Log.Level.ERROR + "'", level38.equals(org.apache.rat.utils.Log.Level.ERROR));
        org.junit.Assert.assertTrue("'" + level43 + "' != '" + org.apache.rat.utils.Log.Level.ERROR + "'", level43.equals(org.apache.rat.utils.Log.Level.ERROR));
        org.junit.Assert.assertNotNull(strSet48);
        org.junit.Assert.assertNotNull(matcherRefBuilder49);
        org.junit.Assert.assertTrue("'" + boolean50 + "' != '" + false + "'", boolean50 == false);
        org.junit.Assert.assertEquals("'" + str51 + "' != '" + "MathcerRefBuilder: null" + "'", str51, "MathcerRefBuilder: null");
        org.junit.Assert.assertNotNull(matcherRefBuilder53);
        org.junit.Assert.assertNotNull(matcherRefBuilder55);
        org.junit.Assert.assertNotNull(matcherRefBuilder57);
        org.junit.Assert.assertNotNull(matcherRefBuilder59);
        org.junit.Assert.assertNotNull(matcherRefBuilder62);
    }

    @Test
    public void test14714() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest29.test14714");
        org.apache.rat.utils.Log log0 = null;
        org.apache.rat.ReportConfiguration reportConfiguration1 = new org.apache.rat.ReportConfiguration(log0);
        org.apache.rat.report.claim.ClaimStatistic claimStatistic2 = org.apache.rat.Reporter.report(reportConfiguration1);
        org.apache.commons.io.function.IOSupplier<java.io.OutputStream> outputStreamIOSupplier3 = reportConfiguration1.getOutput();
        org.apache.rat.license.ILicense iLicense4 = null;
        reportConfiguration1.addLicense(iLicense4);
        org.apache.rat.Defaults.Builder builder6 = org.apache.rat.Defaults.builder();
        org.apache.rat.Defaults defaults7 = builder6.build();
        reportConfiguration1.setFrom(defaults7);
        org.apache.rat.license.LicenseSetFactory.LicenseFilter licenseFilter9 = org.apache.rat.license.LicenseSetFactory.LicenseFilter.all;
        java.util.SortedSet<org.apache.rat.license.ILicense> iLicenseSet10 = defaults7.getLicenses(licenseFilter9);
        java.lang.String[] strArray16 = new java.lang.String[] { "http://org/apache/rat/meta-data#LicenseFamilyCategory", "Datum [ name ='http://org/apache/rat/meta-data#LicenseFamilyCategory',value ='GPL1  ']", "MANIFEST.MF", "AllBuilder:", "The MIT License" };
        org.apache.rat.utils.ReportingSet<java.lang.String> strSet17 = new org.apache.rat.utils.ReportingSet<java.lang.String>();
        boolean boolean18 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strSet17, strArray16);
        boolean boolean20 = strSet17.addIfNotPresent("http://org/apache/rat/meta-data#LicenseFamilyName");
        boolean boolean22 = strSet17.addIfNotPresent("ef7a8b13-64c3-4510-bb0c-dbf208e1e73f");
        java.util.function.Function<java.lang.String, java.lang.String> strFunction23 = null;
        org.apache.rat.utils.ReportingSet<java.lang.String> strSet24 = strSet17.setMsgFormat(strFunction23);
        java.util.Spliterator<java.lang.String> strSpliterator25 = strSet17.spliterator();
        org.apache.rat.license.LicenseSetFactory licenseSetFactory26 = new org.apache.rat.license.LicenseSetFactory(iLicenseSet10, (java.util.Collection<java.lang.String>) strSet17);
        java.lang.Object[] objArray27 = strSet17.toArray();
        org.apache.rat.utils.Log log28 = null;
        org.apache.rat.ReportConfiguration reportConfiguration29 = new org.apache.rat.ReportConfiguration(log28);
        org.apache.rat.report.claim.ClaimStatistic claimStatistic30 = org.apache.rat.Reporter.report(reportConfiguration29);
        org.apache.rat.report.IReportable iReportable31 = null;
        reportConfiguration29.setReportable(iReportable31);
        org.apache.rat.license.ILicense iLicense33 = null;
        reportConfiguration29.addLicense(iLicense33);
        org.apache.rat.license.ILicenseFamily[] iLicenseFamilyArray36 = new org.apache.rat.license.ILicenseFamily[] {};
        java.util.ArrayList<org.apache.rat.license.ILicenseFamily> iLicenseFamilyList37 = new java.util.ArrayList<org.apache.rat.license.ILicenseFamily>();
        boolean boolean38 = java.util.Collections.addAll((java.util.Collection<org.apache.rat.license.ILicenseFamily>) iLicenseFamilyList37, iLicenseFamilyArray36);
        org.apache.rat.policy.DefaultPolicy defaultPolicy39 = new org.apache.rat.policy.DefaultPolicy((java.util.Collection<org.apache.rat.license.ILicenseFamily>) iLicenseFamilyList37);
        java.util.SortedSet<org.apache.rat.license.ILicenseFamily> iLicenseFamilySet40 = defaultPolicy39.getApprovedLicenseNames();
        org.apache.rat.license.ILicenseFamily iLicenseFamily41 = org.apache.rat.license.LicenseFamilySetFactory.search("Datum [ name ='http://org/apache/rat/meta-data#LicenseFamilyCategory',value ='OASIS ']", iLicenseFamilySet40);
        reportConfiguration29.addFamilies((java.util.Collection<org.apache.rat.license.ILicenseFamily>) iLicenseFamilySet40);
        boolean boolean43 = strSet17.containsAll((java.util.Collection<org.apache.rat.license.ILicenseFamily>) iLicenseFamilySet40);
        org.apache.rat.policy.DefaultPolicy defaultPolicy44 = new org.apache.rat.policy.DefaultPolicy((java.util.Collection<org.apache.rat.license.ILicenseFamily>) iLicenseFamilySet40);
        org.apache.rat.api.Document document45 = null;
        defaultPolicy44.analyse(document45);
        java.util.SortedSet<org.apache.rat.license.ILicenseFamily> iLicenseFamilySet47 = defaultPolicy44.getApprovedLicenseNames();
        org.junit.Assert.assertNull(claimStatistic2);
        org.junit.Assert.assertNotNull(outputStreamIOSupplier3);
        org.junit.Assert.assertNotNull(builder6);
        org.junit.Assert.assertNotNull(defaults7);
        org.junit.Assert.assertTrue("'" + licenseFilter9 + "' != '" + org.apache.rat.license.LicenseSetFactory.LicenseFilter.all + "'", licenseFilter9.equals(org.apache.rat.license.LicenseSetFactory.LicenseFilter.all));
        org.junit.Assert.assertNotNull(iLicenseSet10);
        org.junit.Assert.assertNotNull(strArray16);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + true + "'", boolean18 == true);
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + true + "'", boolean20 == true);
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + true + "'", boolean22 == true);
        org.junit.Assert.assertNotNull(strSet24);
        org.junit.Assert.assertNotNull(strSpliterator25);
        org.junit.Assert.assertNotNull(objArray27);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray27), "[AllBuilder:, Datum [ name ='http://org/apache/rat/meta-data#LicenseFamilyCategory',value ='GPL1  '], MANIFEST.MF, The MIT License, ef7a8b13-64c3-4510-bb0c-dbf208e1e73f, http://org/apache/rat/meta-data#LicenseFamilyCategory, http://org/apache/rat/meta-data#LicenseFamilyName]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray27), "[AllBuilder:, Datum [ name ='http://org/apache/rat/meta-data#LicenseFamilyCategory',value ='GPL1  '], MANIFEST.MF, The MIT License, ef7a8b13-64c3-4510-bb0c-dbf208e1e73f, http://org/apache/rat/meta-data#LicenseFamilyCategory, http://org/apache/rat/meta-data#LicenseFamilyName]");
        org.junit.Assert.assertNull(claimStatistic30);
        org.junit.Assert.assertNotNull(iLicenseFamilyArray36);
        org.junit.Assert.assertTrue("'" + boolean38 + "' != '" + false + "'", boolean38 == false);
        org.junit.Assert.assertNotNull(iLicenseFamilySet40);
        org.junit.Assert.assertNull(iLicenseFamily41);
        org.junit.Assert.assertTrue("'" + boolean43 + "' != '" + true + "'", boolean43 == true);
        org.junit.Assert.assertNotNull(iLicenseFamilySet47);
    }

    @Test
    public void test14715() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest29.test14715");
        java.lang.String[] strArray5 = org.apache.commons.io.filefilter.IOFileFilter.EMPTY_STRING_ARRAY;
        boolean boolean6 = org.apache.rat.document.impl.guesser.BinaryGuesser.extensionMatches("Copyright Builder: s:null e:.cvsignore o:null", strArray5);
        boolean boolean7 = org.apache.rat.document.impl.guesser.BinaryGuesser.containsExtension("http://org/apache/rat/meta-data#HeaderCategory", strArray5);
        boolean boolean8 = org.apache.rat.document.impl.guesser.BinaryGuesser.extensionMatches("NotBuilder: MathcerRefBuilder: null", strArray5);
        boolean boolean9 = org.apache.rat.document.impl.guesser.BinaryGuesser.extensionMatches("ef75a6e8-7197-4e9e-83bf-f8b367e6b3c5", strArray5);
        boolean boolean10 = org.apache.rat.document.impl.guesser.BinaryGuesser.containsExtension("96ba4e3b-7c1a-47bf-88c5-78860245a028", strArray5);
        org.junit.Assert.assertNotNull(strArray5);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
    }

    @Test
    public void test14716() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest29.test14716");
        org.apache.rat.license.ILicense[] iLicenseArray1 = new org.apache.rat.license.ILicense[] {};
        java.util.TreeSet<org.apache.rat.license.ILicense> iLicenseSet2 = new java.util.TreeSet<org.apache.rat.license.ILicense>();
        boolean boolean3 = java.util.Collections.addAll((java.util.Collection<org.apache.rat.license.ILicense>) iLicenseSet2, iLicenseArray1);
        java.lang.String[] strArray16 = new java.lang.String[] { "GPL2 ", "GPL1 ", "notice", "http://org/apache/rat/meta-data#LicenseFamilyName", "notice", "GPL2 ", "http://org/apache/rat/meta-data#LicenseFamilyName", "", "GPL2 ", "", "GPL1 ", "hi!" };
        java.util.ArrayList<java.lang.String> strList17 = new java.util.ArrayList<java.lang.String>();
        boolean boolean18 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strList17, strArray16);
        org.apache.rat.license.LicenseSetFactory licenseSetFactory19 = new org.apache.rat.license.LicenseSetFactory((java.util.SortedSet<org.apache.rat.license.ILicense>) iLicenseSet2, (java.util.Collection<java.lang.String>) strList17);
        org.apache.rat.license.LicenseSetFactory.LicenseFilter licenseFilter20 = org.apache.rat.license.LicenseSetFactory.LicenseFilter.all;
        java.util.SortedSet<org.apache.rat.license.ILicenseFamily> iLicenseFamilySet21 = licenseSetFactory19.getLicenseFamilies(licenseFilter20);
        org.apache.rat.license.ILicense[] iLicenseArray22 = new org.apache.rat.license.ILicense[] {};
        java.util.TreeSet<org.apache.rat.license.ILicense> iLicenseSet23 = new java.util.TreeSet<org.apache.rat.license.ILicense>();
        boolean boolean24 = java.util.Collections.addAll((java.util.Collection<org.apache.rat.license.ILicense>) iLicenseSet23, iLicenseArray22);
        java.lang.String[] strArray37 = new java.lang.String[] { "GPL2 ", "GPL1 ", "notice", "http://org/apache/rat/meta-data#LicenseFamilyName", "notice", "GPL2 ", "http://org/apache/rat/meta-data#LicenseFamilyName", "", "GPL2 ", "", "GPL1 ", "hi!" };
        java.util.ArrayList<java.lang.String> strList38 = new java.util.ArrayList<java.lang.String>();
        boolean boolean39 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strList38, strArray37);
        org.apache.rat.license.LicenseSetFactory licenseSetFactory40 = new org.apache.rat.license.LicenseSetFactory((java.util.SortedSet<org.apache.rat.license.ILicense>) iLicenseSet23, (java.util.Collection<java.lang.String>) strList38);
        org.apache.rat.utils.Log log41 = null;
        org.apache.rat.ReportConfiguration reportConfiguration42 = new org.apache.rat.ReportConfiguration(log41);
        java.io.FilenameFilter filenameFilter43 = reportConfiguration42.getInputFileFilter();
        org.apache.rat.license.LicenseSetFactory.LicenseFilter licenseFilter44 = org.apache.rat.license.LicenseSetFactory.LicenseFilter.all;
        java.util.SortedSet<org.apache.rat.license.ILicense> iLicenseSet45 = reportConfiguration42.getLicenses(licenseFilter44);
        org.apache.rat.config.AddLicenseHeaders addLicenseHeaders46 = org.apache.rat.config.AddLicenseHeaders.FALSE;
        reportConfiguration42.setAddLicenseHeaders(addLicenseHeaders46);
        org.apache.rat.utils.Log log48 = null;
        org.apache.rat.ReportConfiguration reportConfiguration49 = new org.apache.rat.ReportConfiguration(log48);
        org.apache.rat.report.claim.ClaimStatistic claimStatistic50 = org.apache.rat.Reporter.report(reportConfiguration49);
        org.apache.rat.license.LicenseSetFactory.LicenseFilter licenseFilter51 = org.apache.rat.license.LicenseSetFactory.LicenseFilter.all;
        org.apache.rat.Reporter.listLicenses(reportConfiguration49, licenseFilter51);
        org.apache.rat.Reporter.listLicenses(reportConfiguration42, licenseFilter51);
        org.apache.rat.utils.Log log54 = null;
        org.apache.rat.ReportConfiguration reportConfiguration55 = new org.apache.rat.ReportConfiguration(log54);
        java.io.FilenameFilter filenameFilter56 = reportConfiguration55.getInputFileFilter();
        org.apache.rat.license.LicenseSetFactory.LicenseFilter licenseFilter57 = org.apache.rat.license.LicenseSetFactory.LicenseFilter.all;
        java.util.SortedSet<org.apache.rat.license.ILicense> iLicenseSet58 = reportConfiguration55.getLicenses(licenseFilter57);
        org.apache.rat.config.AddLicenseHeaders addLicenseHeaders59 = org.apache.rat.config.AddLicenseHeaders.FALSE;
        reportConfiguration55.setAddLicenseHeaders(addLicenseHeaders59);
        org.apache.rat.utils.Log log61 = null;
        org.apache.rat.ReportConfiguration reportConfiguration62 = new org.apache.rat.ReportConfiguration(log61);
        org.apache.rat.report.claim.ClaimStatistic claimStatistic63 = org.apache.rat.Reporter.report(reportConfiguration62);
        org.apache.rat.license.LicenseSetFactory.LicenseFilter licenseFilter64 = org.apache.rat.license.LicenseSetFactory.LicenseFilter.all;
        org.apache.rat.Reporter.listLicenses(reportConfiguration62, licenseFilter64);
        org.apache.rat.Reporter.listLicenses(reportConfiguration55, licenseFilter64);
        org.apache.rat.Reporter.listLicenses(reportConfiguration42, licenseFilter64);
        java.util.SortedSet<org.apache.rat.license.ILicense> iLicenseSet68 = licenseSetFactory40.getLicenses(licenseFilter64);
        java.util.SortedSet<org.apache.rat.license.ILicenseFamily> iLicenseFamilySet69 = licenseSetFactory19.getLicenseFamilies(licenseFilter64);
        org.apache.rat.policy.DefaultPolicy defaultPolicy70 = new org.apache.rat.policy.DefaultPolicy((java.util.Collection<org.apache.rat.license.ILicenseFamily>) iLicenseFamilySet69);
        org.apache.rat.api.Document document71 = null;
        defaultPolicy70.analyse(document71);
        org.apache.rat.utils.Log log73 = null;
        org.apache.rat.ReportConfiguration reportConfiguration74 = new org.apache.rat.ReportConfiguration(log73);
        org.apache.rat.license.ILicenseFamily[] iLicenseFamilyArray75 = new org.apache.rat.license.ILicenseFamily[] {};
        java.util.ArrayList<org.apache.rat.license.ILicenseFamily> iLicenseFamilyList76 = new java.util.ArrayList<org.apache.rat.license.ILicenseFamily>();
        boolean boolean77 = java.util.Collections.addAll((java.util.Collection<org.apache.rat.license.ILicenseFamily>) iLicenseFamilyList76, iLicenseFamilyArray75);
        reportConfiguration74.addFamilies((java.util.Collection<org.apache.rat.license.ILicenseFamily>) iLicenseFamilyList76);
        org.apache.rat.analysis.license.FullTextMatchingLicense fullTextMatchingLicense79 = new org.apache.rat.analysis.license.FullTextMatchingLicense();
        fullTextMatchingLicense79.setLicenseFamilyName("hi!");
        java.lang.String str82 = fullTextMatchingLicense79.getLicenseFamilyCategory();
        java.lang.String str83 = fullTextMatchingLicense79.getLicenseFamilyName();
        fullTextMatchingLicense79.setLicenseFamilyName("SpdxBuilder: null");
        fullTextMatchingLicense79.setLicenseFamilyCategory("TMF");
        org.apache.rat.license.ILicenseFamily iLicenseFamily88 = fullTextMatchingLicense79.getLicenseFamily();
        reportConfiguration74.addFamily(iLicenseFamily88);
        defaultPolicy70.add(iLicenseFamily88);
        java.util.SortedSet<org.apache.rat.license.ILicenseFamily> iLicenseFamilySet92 = org.apache.rat.license.LicenseFamilySetFactory.emptyLicenseFamilySet();
        org.apache.rat.license.ILicenseFamily iLicenseFamily93 = org.apache.rat.license.LicenseFamilySetFactory.search("http://org/apache/rat/meta-data", iLicenseFamilySet92);
        org.apache.rat.license.ILicenseFamily iLicenseFamily94 = org.apache.rat.license.LicenseFamilySetFactory.search(iLicenseFamily88, iLicenseFamilySet92);
        org.apache.rat.license.ILicenseFamily iLicenseFamily95 = org.apache.rat.license.LicenseFamilySetFactory.search("TextBuilder: f04d752a-120e-425d-a...", iLicenseFamilySet92);
        org.junit.Assert.assertNotNull(iLicenseArray1);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertNotNull(strArray16);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + true + "'", boolean18 == true);
        org.junit.Assert.assertTrue("'" + licenseFilter20 + "' != '" + org.apache.rat.license.LicenseSetFactory.LicenseFilter.all + "'", licenseFilter20.equals(org.apache.rat.license.LicenseSetFactory.LicenseFilter.all));
        org.junit.Assert.assertNotNull(iLicenseFamilySet21);
        org.junit.Assert.assertNotNull(iLicenseArray22);
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + false + "'", boolean24 == false);
        org.junit.Assert.assertNotNull(strArray37);
        org.junit.Assert.assertTrue("'" + boolean39 + "' != '" + true + "'", boolean39 == true);
        org.junit.Assert.assertNull(filenameFilter43);
        org.junit.Assert.assertTrue("'" + licenseFilter44 + "' != '" + org.apache.rat.license.LicenseSetFactory.LicenseFilter.all + "'", licenseFilter44.equals(org.apache.rat.license.LicenseSetFactory.LicenseFilter.all));
        org.junit.Assert.assertNotNull(iLicenseSet45);
        org.junit.Assert.assertTrue("'" + addLicenseHeaders46 + "' != '" + org.apache.rat.config.AddLicenseHeaders.FALSE + "'", addLicenseHeaders46.equals(org.apache.rat.config.AddLicenseHeaders.FALSE));
        org.junit.Assert.assertNull(claimStatistic50);
        org.junit.Assert.assertTrue("'" + licenseFilter51 + "' != '" + org.apache.rat.license.LicenseSetFactory.LicenseFilter.all + "'", licenseFilter51.equals(org.apache.rat.license.LicenseSetFactory.LicenseFilter.all));
        org.junit.Assert.assertNull(filenameFilter56);
        org.junit.Assert.assertTrue("'" + licenseFilter57 + "' != '" + org.apache.rat.license.LicenseSetFactory.LicenseFilter.all + "'", licenseFilter57.equals(org.apache.rat.license.LicenseSetFactory.LicenseFilter.all));
        org.junit.Assert.assertNotNull(iLicenseSet58);
        org.junit.Assert.assertTrue("'" + addLicenseHeaders59 + "' != '" + org.apache.rat.config.AddLicenseHeaders.FALSE + "'", addLicenseHeaders59.equals(org.apache.rat.config.AddLicenseHeaders.FALSE));
        org.junit.Assert.assertNull(claimStatistic63);
        org.junit.Assert.assertTrue("'" + licenseFilter64 + "' != '" + org.apache.rat.license.LicenseSetFactory.LicenseFilter.all + "'", licenseFilter64.equals(org.apache.rat.license.LicenseSetFactory.LicenseFilter.all));
        org.junit.Assert.assertNotNull(iLicenseSet68);
        org.junit.Assert.assertNotNull(iLicenseFamilySet69);
        org.junit.Assert.assertNotNull(iLicenseFamilyArray75);
        org.junit.Assert.assertTrue("'" + boolean77 + "' != '" + false + "'", boolean77 == false);
        org.junit.Assert.assertNull(str82);
        org.junit.Assert.assertEquals("'" + str83 + "' != '" + "hi!" + "'", str83, "hi!");
        org.junit.Assert.assertNotNull(iLicenseFamily88);
        org.junit.Assert.assertNotNull(iLicenseFamilySet92);
        org.junit.Assert.assertNull(iLicenseFamily93);
        org.junit.Assert.assertNull(iLicenseFamily94);
        org.junit.Assert.assertNull(iLicenseFamily95);
    }

    @Test
    public void test14717() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest29.test14717");
        org.apache.rat.utils.Log log0 = null;
        org.apache.rat.ReportConfiguration reportConfiguration1 = new org.apache.rat.ReportConfiguration(log0);
        org.apache.rat.report.claim.ClaimStatistic claimStatistic2 = org.apache.rat.Reporter.report(reportConfiguration1);
        org.apache.commons.io.function.IOSupplier<java.io.OutputStream> outputStreamIOSupplier3 = reportConfiguration1.getOutput();
        org.apache.rat.config.AddLicenseHeaders addLicenseHeaders4 = org.apache.rat.config.AddLicenseHeaders.FALSE;
        reportConfiguration1.setAddLicenseHeaders(addLicenseHeaders4);
        reportConfiguration1.removeApprovedLicenseCategory("The MIT License");
        org.apache.rat.Defaults.Builder builder9 = org.apache.rat.Defaults.builder();
        org.apache.rat.Defaults defaults10 = builder9.build();
        org.apache.rat.utils.Log log11 = null;
        org.apache.rat.ReportConfiguration reportConfiguration12 = new org.apache.rat.ReportConfiguration(log11);
        java.io.FilenameFilter filenameFilter13 = reportConfiguration12.getInputFileFilter();
        org.apache.rat.license.LicenseSetFactory.LicenseFilter licenseFilter14 = org.apache.rat.license.LicenseSetFactory.LicenseFilter.all;
        java.util.SortedSet<org.apache.rat.license.ILicense> iLicenseSet15 = reportConfiguration12.getLicenses(licenseFilter14);
        org.apache.rat.config.AddLicenseHeaders addLicenseHeaders16 = org.apache.rat.config.AddLicenseHeaders.FALSE;
        reportConfiguration12.setAddLicenseHeaders(addLicenseHeaders16);
        org.apache.rat.utils.Log log18 = null;
        org.apache.rat.ReportConfiguration reportConfiguration19 = new org.apache.rat.ReportConfiguration(log18);
        org.apache.rat.report.claim.ClaimStatistic claimStatistic20 = org.apache.rat.Reporter.report(reportConfiguration19);
        org.apache.rat.license.LicenseSetFactory.LicenseFilter licenseFilter21 = org.apache.rat.license.LicenseSetFactory.LicenseFilter.all;
        org.apache.rat.Reporter.listLicenses(reportConfiguration19, licenseFilter21);
        org.apache.rat.Reporter.listLicenses(reportConfiguration12, licenseFilter21);
        org.apache.rat.utils.Log log24 = null;
        org.apache.rat.ReportConfiguration reportConfiguration25 = new org.apache.rat.ReportConfiguration(log24);
        java.io.FilenameFilter filenameFilter26 = reportConfiguration25.getInputFileFilter();
        org.apache.rat.license.LicenseSetFactory.LicenseFilter licenseFilter27 = org.apache.rat.license.LicenseSetFactory.LicenseFilter.all;
        java.util.SortedSet<org.apache.rat.license.ILicense> iLicenseSet28 = reportConfiguration25.getLicenses(licenseFilter27);
        org.apache.rat.config.AddLicenseHeaders addLicenseHeaders29 = org.apache.rat.config.AddLicenseHeaders.FALSE;
        reportConfiguration25.setAddLicenseHeaders(addLicenseHeaders29);
        org.apache.rat.utils.Log log31 = null;
        org.apache.rat.ReportConfiguration reportConfiguration32 = new org.apache.rat.ReportConfiguration(log31);
        org.apache.rat.report.claim.ClaimStatistic claimStatistic33 = org.apache.rat.Reporter.report(reportConfiguration32);
        org.apache.rat.license.LicenseSetFactory.LicenseFilter licenseFilter34 = org.apache.rat.license.LicenseSetFactory.LicenseFilter.all;
        org.apache.rat.Reporter.listLicenses(reportConfiguration32, licenseFilter34);
        org.apache.rat.Reporter.listLicenses(reportConfiguration25, licenseFilter34);
        java.util.SortedSet<org.apache.rat.license.ILicenseFamily> iLicenseFamilySet37 = reportConfiguration12.getLicenseFamilies(licenseFilter34);
        java.util.SortedSet<org.apache.rat.license.ILicense> iLicenseSet38 = defaults10.getLicenses(licenseFilter34);
        org.apache.rat.utils.ReportingSet<org.apache.rat.license.ILicense> iLicenseSet39 = new org.apache.rat.utils.ReportingSet<org.apache.rat.license.ILicense>(iLicenseSet38);
        org.apache.rat.license.ILicense iLicense40 = org.apache.rat.license.LicenseSetFactory.search("TMF", iLicenseSet38);
        java.lang.String str41 = iLicense40.derivedFrom();
        org.apache.rat.license.ILicenseFamily iLicenseFamily42 = iLicense40.getLicenseFamily();
        java.lang.String str43 = iLicenseFamily42.getFamilyCategory();
        reportConfiguration1.addApprovedLicenseCategory(iLicenseFamily42);
        org.apache.rat.license.ILicenseFamilyBuilder iLicenseFamilyBuilder45 = new org.apache.rat.license.ILicenseFamilyBuilder();
        java.lang.String str46 = iLicenseFamilyBuilder45.getCategory();
        org.apache.rat.license.ILicenseFamily.Builder builder48 = iLicenseFamilyBuilder45.setLicenseFamilyCategory("AL   ");
        java.lang.String str49 = iLicenseFamilyBuilder45.getCategory();
        org.apache.rat.license.ILicenseFamily.Builder builder51 = iLicenseFamilyBuilder45.setLicenseFamilyCategory("SpdxB");
        org.apache.rat.license.ILicenseFamily.Builder builder53 = iLicenseFamilyBuilder45.setLicenseFamilyCategory("a357a28e-849d-4383-9cc0-95ecd482d23e");
        org.apache.rat.license.ILicenseFamily.Builder builder55 = iLicenseFamilyBuilder45.setLicenseFamilyName("TextBuilder: COMMON DEVELOPMENT A...");
        org.apache.rat.license.ILicenseFamily iLicenseFamily56 = iLicenseFamilyBuilder45.build();
        reportConfiguration1.addFamily((org.apache.rat.license.ILicenseFamily.Builder) iLicenseFamilyBuilder45);
        org.apache.rat.license.ILicenseFamily.Builder builder59 = iLicenseFamilyBuilder45.setLicenseFamilyName("null Copyright Builder: s:null e:3c840dc2-bef0-42b5-b26c-35a568d53a24 o:null");
        org.junit.Assert.assertNull(claimStatistic2);
        org.junit.Assert.assertNotNull(outputStreamIOSupplier3);
        org.junit.Assert.assertTrue("'" + addLicenseHeaders4 + "' != '" + org.apache.rat.config.AddLicenseHeaders.FALSE + "'", addLicenseHeaders4.equals(org.apache.rat.config.AddLicenseHeaders.FALSE));
        org.junit.Assert.assertNotNull(builder9);
        org.junit.Assert.assertNotNull(defaults10);
        org.junit.Assert.assertNull(filenameFilter13);
        org.junit.Assert.assertTrue("'" + licenseFilter14 + "' != '" + org.apache.rat.license.LicenseSetFactory.LicenseFilter.all + "'", licenseFilter14.equals(org.apache.rat.license.LicenseSetFactory.LicenseFilter.all));
        org.junit.Assert.assertNotNull(iLicenseSet15);
        org.junit.Assert.assertTrue("'" + addLicenseHeaders16 + "' != '" + org.apache.rat.config.AddLicenseHeaders.FALSE + "'", addLicenseHeaders16.equals(org.apache.rat.config.AddLicenseHeaders.FALSE));
        org.junit.Assert.assertNull(claimStatistic20);
        org.junit.Assert.assertTrue("'" + licenseFilter21 + "' != '" + org.apache.rat.license.LicenseSetFactory.LicenseFilter.all + "'", licenseFilter21.equals(org.apache.rat.license.LicenseSetFactory.LicenseFilter.all));
        org.junit.Assert.assertNull(filenameFilter26);
        org.junit.Assert.assertTrue("'" + licenseFilter27 + "' != '" + org.apache.rat.license.LicenseSetFactory.LicenseFilter.all + "'", licenseFilter27.equals(org.apache.rat.license.LicenseSetFactory.LicenseFilter.all));
        org.junit.Assert.assertNotNull(iLicenseSet28);
        org.junit.Assert.assertTrue("'" + addLicenseHeaders29 + "' != '" + org.apache.rat.config.AddLicenseHeaders.FALSE + "'", addLicenseHeaders29.equals(org.apache.rat.config.AddLicenseHeaders.FALSE));
        org.junit.Assert.assertNull(claimStatistic33);
        org.junit.Assert.assertTrue("'" + licenseFilter34 + "' != '" + org.apache.rat.license.LicenseSetFactory.LicenseFilter.all + "'", licenseFilter34.equals(org.apache.rat.license.LicenseSetFactory.LicenseFilter.all));
        org.junit.Assert.assertNotNull(iLicenseFamilySet37);
        org.junit.Assert.assertNotNull(iLicenseSet38);
        org.junit.Assert.assertNotNull(iLicense40);
        org.junit.Assert.assertEquals("'" + str41 + "' != '" + "BSD-3" + "'", str41, "BSD-3");
        org.junit.Assert.assertNotNull(iLicenseFamily42);
        org.junit.Assert.assertEquals("'" + str43 + "' != '" + "BSD-3" + "'", str43, "BSD-3");
        org.junit.Assert.assertNull(str46);
        org.junit.Assert.assertNotNull(builder48);
        org.junit.Assert.assertEquals("'" + str49 + "' != '" + "AL   " + "'", str49, "AL   ");
        org.junit.Assert.assertNotNull(builder51);
        org.junit.Assert.assertNotNull(builder53);
        org.junit.Assert.assertNotNull(builder55);
        org.junit.Assert.assertNotNull(iLicenseFamily56);
        org.junit.Assert.assertNotNull(builder59);
    }

    @Test
    public void test14718() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest29.test14718");
        org.apache.rat.configuration.builders.NotBuilder notBuilder0 = new org.apache.rat.configuration.builders.NotBuilder();
        java.lang.String str1 = notBuilder0.toString();
        org.apache.rat.configuration.builders.MatcherRefBuilder matcherRefBuilder2 = org.apache.rat.analysis.IHeaderMatcher.Builder.matcherRef();
        boolean boolean3 = matcherRefBuilder2.hasId();
        java.util.Map<java.lang.String, org.apache.rat.analysis.IHeaderMatcher> strMap4 = null;
        org.apache.rat.configuration.builders.MatcherRefBuilder matcherRefBuilder5 = matcherRefBuilder2.setMatchers(strMap4);
        org.apache.rat.configuration.builders.AllBuilder allBuilder6 = new org.apache.rat.configuration.builders.AllBuilder();
        org.apache.rat.configuration.builders.CopyrightBuilder copyrightBuilder7 = org.apache.rat.analysis.IHeaderMatcher.Builder.copyright();
        org.apache.rat.configuration.builders.CopyrightBuilder copyrightBuilder9 = copyrightBuilder7.setStart("OASIS");
        java.lang.String str10 = copyrightBuilder7.toString();
        org.apache.rat.configuration.builders.CopyrightBuilder copyrightBuilder12 = copyrightBuilder7.setStart("223f0aba-15d4-49e9-901e-5740c137aebf");
        org.apache.rat.configuration.builders.MatcherRefBuilder matcherRefBuilder13 = org.apache.rat.analysis.IHeaderMatcher.Builder.matcherRef();
        boolean boolean14 = matcherRefBuilder13.hasId();
        org.apache.rat.configuration.builders.CopyrightBuilder copyrightBuilder15 = org.apache.rat.analysis.IHeaderMatcher.Builder.copyright();
        org.apache.rat.configuration.builders.CopyrightBuilder copyrightBuilder17 = copyrightBuilder15.setStart("OASIS");
        java.lang.String str18 = copyrightBuilder15.toString();
        org.apache.rat.configuration.builders.CopyrightBuilder copyrightBuilder20 = copyrightBuilder15.setStart("223f0aba-15d4-49e9-901e-5740c137aebf");
        org.apache.rat.configuration.builders.CopyrightBuilder copyrightBuilder21 = org.apache.rat.analysis.IHeaderMatcher.Builder.copyright();
        org.apache.rat.configuration.builders.CopyrightBuilder copyrightBuilder22 = org.apache.rat.analysis.IHeaderMatcher.Builder.copyright();
        java.lang.String str23 = copyrightBuilder22.toString();
        org.apache.rat.configuration.builders.CopyrightBuilder copyrightBuilder25 = copyrightBuilder22.setEnd(".cvsignore");
        boolean boolean26 = copyrightBuilder22.hasId();
        org.apache.rat.configuration.builders.CopyrightBuilder copyrightBuilder27 = org.apache.rat.analysis.IHeaderMatcher.Builder.copyright();
        java.lang.String str28 = copyrightBuilder27.toString();
        org.apache.rat.configuration.builders.CopyrightBuilder copyrightBuilder30 = copyrightBuilder27.setEnd(".cvsignore");
        boolean boolean31 = copyrightBuilder27.hasId();
        java.lang.String str32 = copyrightBuilder27.toString();
        org.apache.rat.configuration.builders.CopyrightBuilder copyrightBuilder33 = org.apache.rat.analysis.IHeaderMatcher.Builder.copyright();
        org.apache.rat.configuration.builders.CopyrightBuilder copyrightBuilder35 = copyrightBuilder33.setStart("OASIS");
        org.apache.rat.configuration.builders.AnyBuilder anyBuilder36 = org.apache.rat.analysis.IHeaderMatcher.Builder.any();
        org.apache.rat.configuration.builders.MatcherRefBuilder matcherRefBuilder37 = org.apache.rat.analysis.IHeaderMatcher.Builder.matcherRef();
        boolean boolean38 = matcherRefBuilder37.hasId();
        java.util.Map<java.lang.String, org.apache.rat.analysis.IHeaderMatcher> strMap39 = null;
        org.apache.rat.configuration.builders.MatcherRefBuilder matcherRefBuilder40 = matcherRefBuilder37.setMatchers(strMap39);
        org.apache.rat.configuration.builders.CopyrightBuilder copyrightBuilder41 = org.apache.rat.analysis.IHeaderMatcher.Builder.copyright();
        org.apache.rat.configuration.builders.MatcherRefBuilder matcherRefBuilder42 = org.apache.rat.analysis.IHeaderMatcher.Builder.matcherRef();
        boolean boolean43 = matcherRefBuilder42.hasId();
        java.lang.String str44 = matcherRefBuilder42.toString();
        java.util.Map<java.lang.String, org.apache.rat.analysis.IHeaderMatcher> strMap45 = null;
        org.apache.rat.configuration.builders.MatcherRefBuilder matcherRefBuilder46 = matcherRefBuilder42.setMatchers(strMap45);
        org.apache.rat.analysis.IHeaderMatcher.Builder[] builderArray47 = new org.apache.rat.analysis.IHeaderMatcher.Builder[] { matcherRefBuilder2, allBuilder6, copyrightBuilder12, matcherRefBuilder13, copyrightBuilder15, copyrightBuilder21, copyrightBuilder22, copyrightBuilder27, copyrightBuilder33, anyBuilder36, matcherRefBuilder37, copyrightBuilder41, matcherRefBuilder42 };
        java.util.ArrayList<org.apache.rat.analysis.IHeaderMatcher.Builder> builderList48 = new java.util.ArrayList<org.apache.rat.analysis.IHeaderMatcher.Builder>();
        boolean boolean49 = java.util.Collections.addAll((java.util.Collection<org.apache.rat.analysis.IHeaderMatcher.Builder>) builderList48, builderArray47);
        org.apache.rat.configuration.builders.AbstractBuilder abstractBuilder50 = notBuilder0.add((java.util.Collection<org.apache.rat.analysis.IHeaderMatcher.Builder>) builderList48);
        org.apache.rat.configuration.builders.CopyrightBuilder copyrightBuilder51 = org.apache.rat.analysis.IHeaderMatcher.Builder.copyright();
        java.lang.String str52 = copyrightBuilder51.toString();
        org.apache.rat.configuration.builders.AbstractBuilder abstractBuilder53 = notBuilder0.add((org.apache.rat.analysis.IHeaderMatcher.Builder) copyrightBuilder51);
        org.apache.rat.analysis.IHeaderMatcher iHeaderMatcher54 = copyrightBuilder51.build();
        org.apache.rat.configuration.builders.CopyrightBuilder copyrightBuilder56 = copyrightBuilder51.setStart("archive");
        org.apache.rat.configuration.builders.CopyrightBuilder copyrightBuilder58 = copyrightBuilder56.setStart("5fd2c009-d426-4f2e-aa5f-fa818707c48c");
        org.apache.rat.configuration.builders.CopyrightBuilder copyrightBuilder60 = copyrightBuilder58.setStart("Copyright Builder: s:.cvsignore e:.gitignore o:null");
        org.apache.rat.configuration.builders.CopyrightBuilder copyrightBuilder62 = copyrightBuilder60.setOwner("W3C Software Copyright null");
        org.junit.Assert.assertEquals("'" + str1 + "' != '" + "NotBuilder: null" + "'", str1, "NotBuilder: null");
        org.junit.Assert.assertNotNull(matcherRefBuilder2);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertNotNull(matcherRefBuilder5);
        org.junit.Assert.assertNotNull(copyrightBuilder7);
        org.junit.Assert.assertNotNull(copyrightBuilder9);
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "Copyright Builder: s:OASIS e:null o:null" + "'", str10, "Copyright Builder: s:OASIS e:null o:null");
        org.junit.Assert.assertNotNull(copyrightBuilder12);
        org.junit.Assert.assertNotNull(matcherRefBuilder13);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
        org.junit.Assert.assertNotNull(copyrightBuilder15);
        org.junit.Assert.assertNotNull(copyrightBuilder17);
        org.junit.Assert.assertEquals("'" + str18 + "' != '" + "Copyright Builder: s:OASIS e:null o:null" + "'", str18, "Copyright Builder: s:OASIS e:null o:null");
        org.junit.Assert.assertNotNull(copyrightBuilder20);
        org.junit.Assert.assertNotNull(copyrightBuilder21);
        org.junit.Assert.assertNotNull(copyrightBuilder22);
        org.junit.Assert.assertEquals("'" + str23 + "' != '" + "Copyright Builder: s:null e:null o:null" + "'", str23, "Copyright Builder: s:null e:null o:null");
        org.junit.Assert.assertNotNull(copyrightBuilder25);
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + false + "'", boolean26 == false);
        org.junit.Assert.assertNotNull(copyrightBuilder27);
        org.junit.Assert.assertEquals("'" + str28 + "' != '" + "Copyright Builder: s:null e:null o:null" + "'", str28, "Copyright Builder: s:null e:null o:null");
        org.junit.Assert.assertNotNull(copyrightBuilder30);
        org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + false + "'", boolean31 == false);
        org.junit.Assert.assertEquals("'" + str32 + "' != '" + "Copyright Builder: s:null e:.cvsignore o:null" + "'", str32, "Copyright Builder: s:null e:.cvsignore o:null");
        org.junit.Assert.assertNotNull(copyrightBuilder33);
        org.junit.Assert.assertNotNull(copyrightBuilder35);
        org.junit.Assert.assertNotNull(anyBuilder36);
        org.junit.Assert.assertNotNull(matcherRefBuilder37);
        org.junit.Assert.assertTrue("'" + boolean38 + "' != '" + false + "'", boolean38 == false);
        org.junit.Assert.assertNotNull(matcherRefBuilder40);
        org.junit.Assert.assertNotNull(copyrightBuilder41);
        org.junit.Assert.assertNotNull(matcherRefBuilder42);
        org.junit.Assert.assertTrue("'" + boolean43 + "' != '" + false + "'", boolean43 == false);
        org.junit.Assert.assertEquals("'" + str44 + "' != '" + "MathcerRefBuilder: null" + "'", str44, "MathcerRefBuilder: null");
        org.junit.Assert.assertNotNull(matcherRefBuilder46);
        org.junit.Assert.assertNotNull(builderArray47);
        org.junit.Assert.assertTrue("'" + boolean49 + "' != '" + true + "'", boolean49 == true);
        org.junit.Assert.assertNotNull(abstractBuilder50);
        org.junit.Assert.assertNotNull(copyrightBuilder51);
        org.junit.Assert.assertEquals("'" + str52 + "' != '" + "Copyright Builder: s:null e:null o:null" + "'", str52, "Copyright Builder: s:null e:null o:null");
        org.junit.Assert.assertNotNull(abstractBuilder53);
        org.junit.Assert.assertNotNull(iHeaderMatcher54);
        org.junit.Assert.assertNotNull(copyrightBuilder56);
        org.junit.Assert.assertNotNull(copyrightBuilder58);
        org.junit.Assert.assertNotNull(copyrightBuilder60);
        org.junit.Assert.assertNotNull(copyrightBuilder62);
    }

    @Test
    public void test14719() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest29.test14719");
        org.apache.rat.analysis.matchers.SimpleTextMatcher simpleTextMatcher2 = new org.apache.rat.analysis.matchers.SimpleTextMatcher("", "META-DATA#LICENSEFAMILYNAME");
        java.lang.String str3 = simpleTextMatcher2.getId();
// flaky:         org.junit.Assert.assertEquals("'" + str3 + "' != '" + "e1fb5a16-aa2f-442c-87e5-7af6d5cae919" + "'", str3, "e1fb5a16-aa2f-442c-87e5-7af6d5cae919");
    }

    @Test
    public void test14720() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest29.test14720");
        org.apache.rat.Defaults.Builder builder0 = org.apache.rat.Defaults.builder();
        org.apache.rat.Defaults.Builder builder2 = builder0.add("META-DATA#LICENSEFAMILYNAME");
        org.apache.rat.Defaults.Builder builder4 = builder2.add("Datum [ name ='http://org/apache/rat/meta-data#LicenseFamilyName',value ='Academic Free License, Version 2.1 ']");
        org.apache.rat.Defaults.Builder builder5 = builder4.noDefault();
        org.apache.rat.Defaults.Builder builder7 = builder4.remove("F FALSE");
        org.apache.rat.Defaults.Builder builder9 = builder4.remove("SpdxBuilder: 641dafc1-13c3-45d4-8272-f36f10392c53");
        org.apache.rat.Defaults.Builder builder10 = builder4.noDefault();
        org.apache.rat.Defaults.Builder builder12 = builder4.remove("9DF69CA9-2229-47B6-966B-221652FD7D08");
        org.junit.Assert.assertNotNull(builder0);
        org.junit.Assert.assertNotNull(builder2);
        org.junit.Assert.assertNotNull(builder4);
        org.junit.Assert.assertNotNull(builder5);
        org.junit.Assert.assertNotNull(builder7);
        org.junit.Assert.assertNotNull(builder9);
        org.junit.Assert.assertNotNull(builder10);
        org.junit.Assert.assertNotNull(builder12);
    }

    @Test
    public void test14721() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest29.test14721");
        org.apache.rat.configuration.builders.RegexBuilder regexBuilder0 = org.apache.rat.analysis.IHeaderMatcher.Builder.regex();
        org.apache.rat.configuration.builders.RegexBuilder regexBuilder2 = regexBuilder0.setExpr("SpdxBuilder: 7d01b1b3-e7b9-4f85-b3dd-e0334dea8844");
        org.apache.rat.analysis.IHeaderMatcher iHeaderMatcher3 = regexBuilder0.build();
        org.junit.Assert.assertNotNull(regexBuilder0);
        org.junit.Assert.assertNotNull(regexBuilder2);
        org.junit.Assert.assertNotNull(iHeaderMatcher3);
    }

    @Test
    public void test14722() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest29.test14722");
        java.lang.String[] strArray5 = new java.lang.String[] { "http://org/apache/rat/meta-data#LicenseFamilyCategory", "Datum [ name ='http://org/apache/rat/meta-data#LicenseFamilyCategory',value ='GPL1  ']", "MANIFEST.MF", "AllBuilder:", "The MIT License" };
        org.apache.rat.utils.ReportingSet<java.lang.String> strSet6 = new org.apache.rat.utils.ReportingSet<java.lang.String>();
        boolean boolean7 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strSet6, strArray5);
        boolean boolean9 = strSet6.addIfNotPresent("http://org/apache/rat/meta-data#LicenseFamilyName");
        java.util.Iterator<java.lang.String> strItor10 = strSet6.iterator();
        strSet6.clear();
        strSet6.clear();
        java.lang.Object[] objArray13 = strSet6.toArray();
        java.util.stream.Stream<java.lang.String> strStream14 = strSet6.stream();
        java.util.Iterator<java.lang.String> strItor15 = strSet6.iterator();
        boolean boolean17 = strSet6.addIfNotPresent("9b58713f-df10-4eb5-a5e7-b2e82c48d768");
        org.apache.rat.utils.ReportingSet<java.lang.String> strSet19 = strSet6.tailSet("Datum [ name ='eba9cdef-527a-48ca-947b-897e2e06ea31',value ='0356753d-7389-48e7-8d63-056fd4c4548c ']");
        java.util.stream.Stream<java.lang.String> strStream20 = strSet6.stream();
        org.junit.Assert.assertNotNull(strArray5);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + true + "'", boolean7 == true);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + true + "'", boolean9 == true);
        org.junit.Assert.assertNotNull(strItor10);
        org.junit.Assert.assertNotNull(objArray13);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray13), "[]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray13), "[]");
        org.junit.Assert.assertNotNull(strStream14);
        org.junit.Assert.assertNotNull(strItor15);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + true + "'", boolean17 == true);
        org.junit.Assert.assertNotNull(strSet19);
        org.junit.Assert.assertNotNull(strStream20);
    }

    @Test
    public void test14723() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest29.test14723");
        org.apache.rat.license.ILicenseFamilyBuilder iLicenseFamilyBuilder0 = new org.apache.rat.license.ILicenseFamilyBuilder();
        java.lang.String str1 = iLicenseFamilyBuilder0.getCategory();
        org.apache.rat.license.ILicenseFamily.Builder builder3 = iLicenseFamilyBuilder0.setLicenseFamilyCategory("false");
        org.apache.rat.license.ILicenseFamily.Builder builder5 = iLicenseFamilyBuilder0.setLicenseFamilyName("Copyright Builder: s:null e:.cvsignore o:null");
        org.apache.rat.license.ILicenseFamily.Builder builder7 = iLicenseFamilyBuilder0.setLicenseFamilyCategory("GNUGeneralPublicLicenseversion2");
        java.lang.String str8 = iLicenseFamilyBuilder0.getCategory();
        org.junit.Assert.assertNull(str1);
        org.junit.Assert.assertNotNull(builder3);
        org.junit.Assert.assertNotNull(builder5);
        org.junit.Assert.assertNotNull(builder7);
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "GNUGeneralPublicLicenseversion2" + "'", str8, "GNUGeneralPublicLicenseversion2");
    }

    @Test
    public void test14724() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest29.test14724");
        org.apache.rat.utils.DefaultLog defaultLog0 = org.apache.rat.utils.DefaultLog.INSTANCE;
        org.apache.rat.license.ILicense.Builder builder1 = org.apache.rat.license.ILicense.builder();
        org.apache.rat.license.ILicense.Builder builder3 = builder1.setLicenseFamilyCategory("");
        org.apache.rat.analysis.matchers.CopyrightMatcher copyrightMatcher7 = new org.apache.rat.analysis.matchers.CopyrightMatcher("", "GPL1 ", "hi!");
        org.apache.rat.analysis.IHeaderMatcher.State state8 = copyrightMatcher7.finalizeState();
        org.apache.rat.license.ILicense.Builder builder9 = builder3.setMatcher((org.apache.rat.analysis.IHeaderMatcher) copyrightMatcher7);
        org.apache.rat.license.ILicense.Builder builder11 = builder9.setLicenseFamilyCategory("");
        defaultLog0.error((java.lang.Object) builder11);
        org.apache.rat.utils.Log.Level level13 = org.apache.rat.utils.Log.Level.DEBUG;
        defaultLog0.setLevel(level13);
        org.apache.rat.annotation.ApacheV2LicenseAppender apacheV2LicenseAppender16 = new org.apache.rat.annotation.ApacheV2LicenseAppender((org.apache.rat.utils.Log) defaultLog0, "ffa6f6cf-d0e9-457f-aa74-6d159e7c6009");
        org.apache.rat.utils.DefaultLog defaultLog17 = org.apache.rat.utils.DefaultLog.INSTANCE;
        org.apache.rat.utils.Log log18 = null;
        org.apache.rat.ReportConfiguration reportConfiguration19 = new org.apache.rat.ReportConfiguration(log18);
        java.io.FilenameFilter filenameFilter20 = reportConfiguration19.getInputFileFilter();
        org.apache.rat.license.LicenseSetFactory.LicenseFilter licenseFilter21 = org.apache.rat.license.LicenseSetFactory.LicenseFilter.all;
        java.util.SortedSet<org.apache.rat.license.ILicense> iLicenseSet22 = reportConfiguration19.getLicenses(licenseFilter21);
        org.apache.rat.config.AddLicenseHeaders addLicenseHeaders23 = org.apache.rat.config.AddLicenseHeaders.FALSE;
        reportConfiguration19.setAddLicenseHeaders(addLicenseHeaders23);
        org.apache.rat.utils.Log log25 = null;
        org.apache.rat.ReportConfiguration reportConfiguration26 = new org.apache.rat.ReportConfiguration(log25);
        org.apache.rat.report.claim.ClaimStatistic claimStatistic27 = org.apache.rat.Reporter.report(reportConfiguration26);
        org.apache.rat.license.LicenseSetFactory.LicenseFilter licenseFilter28 = org.apache.rat.license.LicenseSetFactory.LicenseFilter.all;
        org.apache.rat.Reporter.listLicenses(reportConfiguration26, licenseFilter28);
        org.apache.rat.Reporter.listLicenses(reportConfiguration19, licenseFilter28);
        org.apache.rat.utils.Log log31 = null;
        org.apache.rat.ReportConfiguration reportConfiguration32 = new org.apache.rat.ReportConfiguration(log31);
        java.io.FilenameFilter filenameFilter33 = reportConfiguration32.getInputFileFilter();
        org.apache.rat.license.LicenseSetFactory.LicenseFilter licenseFilter34 = org.apache.rat.license.LicenseSetFactory.LicenseFilter.all;
        java.util.SortedSet<org.apache.rat.license.ILicense> iLicenseSet35 = reportConfiguration32.getLicenses(licenseFilter34);
        org.apache.rat.config.AddLicenseHeaders addLicenseHeaders36 = org.apache.rat.config.AddLicenseHeaders.FALSE;
        reportConfiguration32.setAddLicenseHeaders(addLicenseHeaders36);
        org.apache.rat.utils.Log log38 = null;
        org.apache.rat.ReportConfiguration reportConfiguration39 = new org.apache.rat.ReportConfiguration(log38);
        org.apache.rat.report.claim.ClaimStatistic claimStatistic40 = org.apache.rat.Reporter.report(reportConfiguration39);
        org.apache.rat.license.LicenseSetFactory.LicenseFilter licenseFilter41 = org.apache.rat.license.LicenseSetFactory.LicenseFilter.all;
        org.apache.rat.Reporter.listLicenses(reportConfiguration39, licenseFilter41);
        org.apache.rat.Reporter.listLicenses(reportConfiguration32, licenseFilter41);
        org.apache.rat.Reporter.listLicenses(reportConfiguration19, licenseFilter41);
        org.apache.rat.utils.Log log45 = null;
        org.apache.rat.ReportConfiguration reportConfiguration46 = new org.apache.rat.ReportConfiguration(log45);
        org.apache.commons.io.function.IOSupplier<java.io.OutputStream> outputStreamIOSupplier47 = reportConfiguration46.getOutput();
        reportConfiguration19.setOut(outputStreamIOSupplier47);
        org.apache.rat.utils.Log log49 = null;
        org.apache.rat.ReportConfiguration reportConfiguration50 = new org.apache.rat.ReportConfiguration(log49);
        org.apache.rat.report.claim.ClaimStatistic claimStatistic51 = org.apache.rat.Reporter.report(reportConfiguration50);
        org.apache.rat.utils.Log log52 = null;
        org.apache.rat.ReportConfiguration reportConfiguration53 = new org.apache.rat.ReportConfiguration(log52);
        org.apache.rat.report.claim.ClaimStatistic claimStatistic54 = org.apache.rat.Reporter.report(reportConfiguration53);
        org.apache.rat.utils.ReportingSet.Options options55 = org.apache.rat.utils.ReportingSet.Options.OVERWRITE;
        reportConfiguration53.licenseDuplicateOption(options55);
        reportConfiguration50.familyDuplicateOption(options55);
        reportConfiguration19.licenseDuplicateOption(options55);
        reportConfiguration19.addApprovedLicenseCategory("W3C Document Copyright");
        org.apache.rat.utils.Log log61 = null;
        org.apache.rat.ReportConfiguration reportConfiguration62 = new org.apache.rat.ReportConfiguration(log61);
        reportConfiguration62.addApprovedLicenseCategory(".cvsignore");
        org.apache.rat.utils.Log.Level level65 = org.apache.rat.utils.Log.Level.ERROR;
        reportConfiguration62.logLicenseCollisions(level65);
        reportConfiguration19.logLicenseCollisions(level65);
        defaultLog17.setLevel(level65);
        defaultLog17.warn((java.lang.Object) "GNU General Public License, version 3");
        org.apache.rat.utils.Log.Level level71 = org.apache.rat.utils.Log.Level.ERROR;
        defaultLog17.setLevel(level71);
        org.apache.rat.utils.DefaultLog defaultLog73 = org.apache.rat.utils.DefaultLog.INSTANCE;
        org.apache.rat.license.ILicense.Builder builder74 = org.apache.rat.license.ILicense.builder();
        org.apache.rat.license.ILicense.Builder builder76 = builder74.setLicenseFamilyCategory("");
        org.apache.rat.analysis.matchers.CopyrightMatcher copyrightMatcher80 = new org.apache.rat.analysis.matchers.CopyrightMatcher("", "GPL1 ", "hi!");
        org.apache.rat.analysis.IHeaderMatcher.State state81 = copyrightMatcher80.finalizeState();
        org.apache.rat.license.ILicense.Builder builder82 = builder76.setMatcher((org.apache.rat.analysis.IHeaderMatcher) copyrightMatcher80);
        org.apache.rat.license.ILicense.Builder builder84 = builder82.setLicenseFamilyCategory("");
        defaultLog73.error((java.lang.Object) builder84);
        org.apache.rat.utils.Log.Level level86 = org.apache.rat.utils.Log.Level.DEBUG;
        defaultLog73.setLevel(level86);
        defaultLog17.setLevel(level86);
        defaultLog0.log(level86, "D4148D3A-EDBC-4672-B347-0FA619553F91");
        org.junit.Assert.assertNotNull(defaultLog0);
        org.junit.Assert.assertNotNull(builder1);
        org.junit.Assert.assertNotNull(builder3);
        org.junit.Assert.assertTrue("'" + state8 + "' != '" + org.apache.rat.analysis.IHeaderMatcher.State.f + "'", state8.equals(org.apache.rat.analysis.IHeaderMatcher.State.f));
        org.junit.Assert.assertNotNull(builder9);
        org.junit.Assert.assertNotNull(builder11);
        org.junit.Assert.assertTrue("'" + level13 + "' != '" + org.apache.rat.utils.Log.Level.DEBUG + "'", level13.equals(org.apache.rat.utils.Log.Level.DEBUG));
        org.junit.Assert.assertNotNull(defaultLog17);
        org.junit.Assert.assertNull(filenameFilter20);
        org.junit.Assert.assertTrue("'" + licenseFilter21 + "' != '" + org.apache.rat.license.LicenseSetFactory.LicenseFilter.all + "'", licenseFilter21.equals(org.apache.rat.license.LicenseSetFactory.LicenseFilter.all));
        org.junit.Assert.assertNotNull(iLicenseSet22);
        org.junit.Assert.assertTrue("'" + addLicenseHeaders23 + "' != '" + org.apache.rat.config.AddLicenseHeaders.FALSE + "'", addLicenseHeaders23.equals(org.apache.rat.config.AddLicenseHeaders.FALSE));
        org.junit.Assert.assertNull(claimStatistic27);
        org.junit.Assert.assertTrue("'" + licenseFilter28 + "' != '" + org.apache.rat.license.LicenseSetFactory.LicenseFilter.all + "'", licenseFilter28.equals(org.apache.rat.license.LicenseSetFactory.LicenseFilter.all));
        org.junit.Assert.assertNull(filenameFilter33);
        org.junit.Assert.assertTrue("'" + licenseFilter34 + "' != '" + org.apache.rat.license.LicenseSetFactory.LicenseFilter.all + "'", licenseFilter34.equals(org.apache.rat.license.LicenseSetFactory.LicenseFilter.all));
        org.junit.Assert.assertNotNull(iLicenseSet35);
        org.junit.Assert.assertTrue("'" + addLicenseHeaders36 + "' != '" + org.apache.rat.config.AddLicenseHeaders.FALSE + "'", addLicenseHeaders36.equals(org.apache.rat.config.AddLicenseHeaders.FALSE));
        org.junit.Assert.assertNull(claimStatistic40);
        org.junit.Assert.assertTrue("'" + licenseFilter41 + "' != '" + org.apache.rat.license.LicenseSetFactory.LicenseFilter.all + "'", licenseFilter41.equals(org.apache.rat.license.LicenseSetFactory.LicenseFilter.all));
        org.junit.Assert.assertNotNull(outputStreamIOSupplier47);
        org.junit.Assert.assertNull(claimStatistic51);
        org.junit.Assert.assertNull(claimStatistic54);
        org.junit.Assert.assertTrue("'" + options55 + "' != '" + org.apache.rat.utils.ReportingSet.Options.OVERWRITE + "'", options55.equals(org.apache.rat.utils.ReportingSet.Options.OVERWRITE));
        org.junit.Assert.assertTrue("'" + level65 + "' != '" + org.apache.rat.utils.Log.Level.ERROR + "'", level65.equals(org.apache.rat.utils.Log.Level.ERROR));
        org.junit.Assert.assertTrue("'" + level71 + "' != '" + org.apache.rat.utils.Log.Level.ERROR + "'", level71.equals(org.apache.rat.utils.Log.Level.ERROR));
        org.junit.Assert.assertNotNull(defaultLog73);
        org.junit.Assert.assertNotNull(builder74);
        org.junit.Assert.assertNotNull(builder76);
        org.junit.Assert.assertTrue("'" + state81 + "' != '" + org.apache.rat.analysis.IHeaderMatcher.State.f + "'", state81.equals(org.apache.rat.analysis.IHeaderMatcher.State.f));
        org.junit.Assert.assertNotNull(builder82);
        org.junit.Assert.assertNotNull(builder84);
        org.junit.Assert.assertTrue("'" + level86 + "' != '" + org.apache.rat.utils.Log.Level.DEBUG + "'", level86.equals(org.apache.rat.utils.Log.Level.DEBUG));
    }

    @Test
    public void test14725() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest29.test14725");
        org.apache.rat.utils.DefaultLog defaultLog0 = org.apache.rat.utils.DefaultLog.INSTANCE;
        org.apache.rat.annotation.ApacheV2LicenseAppender apacheV2LicenseAppender1 = new org.apache.rat.annotation.ApacheV2LicenseAppender((org.apache.rat.utils.Log) defaultLog0);
        org.apache.rat.utils.Log log2 = null;
        org.apache.rat.ReportConfiguration reportConfiguration3 = new org.apache.rat.ReportConfiguration(log2);
        org.apache.rat.report.claim.ClaimStatistic claimStatistic4 = org.apache.rat.Reporter.report(reportConfiguration3);
        org.apache.rat.utils.Log log5 = null;
        org.apache.rat.ReportConfiguration reportConfiguration6 = new org.apache.rat.ReportConfiguration(log5);
        org.apache.rat.report.claim.ClaimStatistic claimStatistic7 = org.apache.rat.Reporter.report(reportConfiguration6);
        org.apache.rat.utils.ReportingSet.Options options8 = org.apache.rat.utils.ReportingSet.Options.OVERWRITE;
        reportConfiguration6.licenseDuplicateOption(options8);
        reportConfiguration3.familyDuplicateOption(options8);
        org.apache.commons.io.function.IOSupplier<java.io.PrintWriter> printWriterIOSupplier11 = reportConfiguration3.getWriter();
        org.apache.rat.utils.Log log12 = null;
        org.apache.rat.ReportConfiguration reportConfiguration13 = new org.apache.rat.ReportConfiguration(log12);
        reportConfiguration13.addApprovedLicenseCategory(".cvsignore");
        org.apache.rat.utils.Log.Level level16 = org.apache.rat.utils.Log.Level.ERROR;
        reportConfiguration13.logFamilyCollisions(level16);
        reportConfiguration3.logFamilyCollisions(level16);
        org.apache.rat.Defaults.Builder builder19 = org.apache.rat.Defaults.builder();
        org.apache.rat.Defaults.Builder builder20 = builder19.noDefault();
        defaultLog0.log(level16, (java.lang.Object) builder19);
        org.apache.rat.annotation.ApacheV2LicenseAppender apacheV2LicenseAppender23 = new org.apache.rat.annotation.ApacheV2LicenseAppender((org.apache.rat.utils.Log) defaultLog0, "Datum [ name ='binary',value =' ']");
        org.apache.rat.utils.Log log24 = null;
        org.apache.rat.ReportConfiguration reportConfiguration25 = new org.apache.rat.ReportConfiguration(log24);
        org.apache.commons.io.function.IOSupplier<java.io.OutputStream> outputStreamIOSupplier26 = reportConfiguration25.getOutput();
        org.apache.commons.io.filefilter.IOFileFilter iOFileFilter27 = reportConfiguration25.getDirectoryFilter();
        java.nio.file.Path path28 = null;
        java.nio.file.attribute.BasicFileAttributes basicFileAttributes29 = null;
        java.nio.file.FileVisitResult fileVisitResult30 = iOFileFilter27.accept(path28, basicFileAttributes29);
        org.apache.commons.io.filefilter.IOFileFilter iOFileFilter31 = iOFileFilter27.negate();
        defaultLog0.debug((java.lang.Object) iOFileFilter27);
        org.apache.rat.annotation.ApacheV2LicenseAppender apacheV2LicenseAppender33 = new org.apache.rat.annotation.ApacheV2LicenseAppender((org.apache.rat.utils.Log) defaultLog0);
        org.apache.rat.license.ILicenseFamily[] iLicenseFamilyArray34 = new org.apache.rat.license.ILicenseFamily[] {};
        java.util.ArrayList<org.apache.rat.license.ILicenseFamily> iLicenseFamilyList35 = new java.util.ArrayList<org.apache.rat.license.ILicenseFamily>();
        boolean boolean36 = java.util.Collections.addAll((java.util.Collection<org.apache.rat.license.ILicenseFamily>) iLicenseFamilyList35, iLicenseFamilyArray34);
        org.apache.rat.policy.DefaultPolicy defaultPolicy37 = new org.apache.rat.policy.DefaultPolicy((java.util.Collection<org.apache.rat.license.ILicenseFamily>) iLicenseFamilyList35);
        org.apache.rat.utils.Log log38 = null;
        org.apache.rat.ReportConfiguration reportConfiguration39 = new org.apache.rat.ReportConfiguration(log38);
        org.apache.rat.report.claim.ClaimStatistic claimStatistic40 = org.apache.rat.Reporter.report(reportConfiguration39);
        org.apache.commons.io.function.IOSupplier<java.io.InputStream> inputStreamIOSupplier41 = reportConfiguration39.getStyleSheet();
        org.apache.rat.analysis.license.FullTextMatchingLicense fullTextMatchingLicense42 = new org.apache.rat.analysis.license.FullTextMatchingLicense();
        fullTextMatchingLicense42.setLicenseFamilyName("hi!");
        java.lang.String str45 = fullTextMatchingLicense42.getLicenseFamilyCategory();
        java.lang.String str46 = fullTextMatchingLicense42.getLicenseFamilyName();
        fullTextMatchingLicense42.setLicenseFamilyName("SpdxBuilder: null");
        fullTextMatchingLicense42.setLicenseFamilyCategory("TMF");
        org.apache.rat.license.ILicenseFamily iLicenseFamily51 = fullTextMatchingLicense42.getLicenseFamily();
        java.lang.String str52 = iLicenseFamily51.getFamilyName();
        java.lang.String str53 = iLicenseFamily51.getFamilyName();
        reportConfiguration39.addApprovedLicenseCategory(iLicenseFamily51);
        java.lang.String str55 = iLicenseFamily51.getFamilyCategory();
        defaultPolicy37.add(iLicenseFamily51);
        defaultLog0.debug((java.lang.Object) iLicenseFamily51);
        org.junit.Assert.assertNotNull(defaultLog0);
        org.junit.Assert.assertNull(claimStatistic4);
        org.junit.Assert.assertNull(claimStatistic7);
        org.junit.Assert.assertTrue("'" + options8 + "' != '" + org.apache.rat.utils.ReportingSet.Options.OVERWRITE + "'", options8.equals(org.apache.rat.utils.ReportingSet.Options.OVERWRITE));
        org.junit.Assert.assertNotNull(printWriterIOSupplier11);
        org.junit.Assert.assertTrue("'" + level16 + "' != '" + org.apache.rat.utils.Log.Level.ERROR + "'", level16.equals(org.apache.rat.utils.Log.Level.ERROR));
        org.junit.Assert.assertNotNull(builder19);
        org.junit.Assert.assertNotNull(builder20);
        org.junit.Assert.assertNotNull(outputStreamIOSupplier26);
        org.junit.Assert.assertNotNull(iOFileFilter27);
        org.junit.Assert.assertTrue("'" + fileVisitResult30 + "' != '" + java.nio.file.FileVisitResult.TERMINATE + "'", fileVisitResult30.equals(java.nio.file.FileVisitResult.TERMINATE));
        org.junit.Assert.assertNotNull(iOFileFilter31);
        org.junit.Assert.assertNotNull(iLicenseFamilyArray34);
        org.junit.Assert.assertTrue("'" + boolean36 + "' != '" + false + "'", boolean36 == false);
        org.junit.Assert.assertNull(claimStatistic40);
        org.junit.Assert.assertNull(inputStreamIOSupplier41);
        org.junit.Assert.assertNull(str45);
        org.junit.Assert.assertEquals("'" + str46 + "' != '" + "hi!" + "'", str46, "hi!");
        org.junit.Assert.assertNotNull(iLicenseFamily51);
        org.junit.Assert.assertEquals("'" + str52 + "' != '" + "SpdxBuilder: null" + "'", str52, "SpdxBuilder: null");
        org.junit.Assert.assertEquals("'" + str53 + "' != '" + "SpdxBuilder: null" + "'", str53, "SpdxBuilder: null");
        org.junit.Assert.assertEquals("'" + str55 + "' != '" + "TMF  " + "'", str55, "TMF  ");
    }

    @Test
    public void test14726() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest29.test14726");
        org.apache.rat.report.claim.ClaimStatistic claimStatistic0 = new org.apache.rat.report.claim.ClaimStatistic();
        claimStatistic0.setNumApproved((int) (short) 10);
        java.util.Map<java.lang.String, java.lang.Integer> strMap3 = null;
        claimStatistic0.setDocumentCategoryMap(strMap3);
        int int5 = claimStatistic0.getNumGenerated();
        java.util.Map<java.lang.String, java.lang.Integer> strMap6 = claimStatistic0.getLicenseFileNameMap();
        claimStatistic0.setNumGenerated((int) (byte) 10);
        claimStatistic0.setNumUnknown(0);
        int int11 = claimStatistic0.getNumUnApproved();
        claimStatistic0.setNumUnknown(10);
        claimStatistic0.setNumApproved(3);
        java.util.Map<java.lang.String, java.lang.Integer> strMap16 = claimStatistic0.getLicenseFileNameMap();
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 0 + "'", int5 == 0);
        org.junit.Assert.assertNull(strMap6);
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 0 + "'", int11 == 0);
        org.junit.Assert.assertNull(strMap16);
    }

    @Test
    public void test14727() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest29.test14727");
        org.apache.rat.license.ILicense[] iLicenseArray2 = new org.apache.rat.license.ILicense[] {};
        java.util.TreeSet<org.apache.rat.license.ILicense> iLicenseSet3 = new java.util.TreeSet<org.apache.rat.license.ILicense>();
        boolean boolean4 = java.util.Collections.addAll((java.util.Collection<org.apache.rat.license.ILicense>) iLicenseSet3, iLicenseArray2);
        java.lang.String[] strArray17 = new java.lang.String[] { "GPL2 ", "GPL1 ", "notice", "http://org/apache/rat/meta-data#LicenseFamilyName", "notice", "GPL2 ", "http://org/apache/rat/meta-data#LicenseFamilyName", "", "GPL2 ", "", "GPL1 ", "hi!" };
        java.util.ArrayList<java.lang.String> strList18 = new java.util.ArrayList<java.lang.String>();
        boolean boolean19 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strList18, strArray17);
        org.apache.rat.license.LicenseSetFactory licenseSetFactory20 = new org.apache.rat.license.LicenseSetFactory((java.util.SortedSet<org.apache.rat.license.ILicense>) iLicenseSet3, (java.util.Collection<java.lang.String>) strList18);
        org.apache.rat.license.LicenseSetFactory.LicenseFilter licenseFilter21 = org.apache.rat.license.LicenseSetFactory.LicenseFilter.all;
        java.util.SortedSet<org.apache.rat.license.ILicenseFamily> iLicenseFamilySet22 = licenseSetFactory20.getLicenseFamilies(licenseFilter21);
        org.apache.rat.configuration.Format format23 = org.apache.rat.configuration.Format.XML;
        org.apache.rat.configuration.LicenseReader licenseReader24 = format23.licenseReader();
        java.util.SortedSet<java.lang.String> strSet25 = licenseReader24.approvedLicenseId();
        org.apache.rat.license.LicenseFamilySetFactory licenseFamilySetFactory26 = new org.apache.rat.license.LicenseFamilySetFactory(iLicenseFamilySet22, (java.util.Collection<java.lang.String>) strSet25);
        org.apache.rat.license.ILicenseFamily iLicenseFamily27 = org.apache.rat.license.LicenseFamilySetFactory.search("Copyright Builder: s:null e:null o:null", iLicenseFamilySet22);
        // The following exception was thrown during execution in test generation
        try {
            org.apache.rat.license.ILicenseFamily iLicenseFamily28 = org.apache.rat.license.LicenseFamilySetFactory.search("", iLicenseFamilySet22);
            org.junit.Assert.fail("Expected exception of type org.apache.rat.ConfigurationException; message: LicenseFamily Category must be specified");
        } catch (org.apache.rat.ConfigurationException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(iLicenseArray2);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertNotNull(strArray17);
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + true + "'", boolean19 == true);
        org.junit.Assert.assertTrue("'" + licenseFilter21 + "' != '" + org.apache.rat.license.LicenseSetFactory.LicenseFilter.all + "'", licenseFilter21.equals(org.apache.rat.license.LicenseSetFactory.LicenseFilter.all));
        org.junit.Assert.assertNotNull(iLicenseFamilySet22);
        org.junit.Assert.assertTrue("'" + format23 + "' != '" + org.apache.rat.configuration.Format.XML + "'", format23.equals(org.apache.rat.configuration.Format.XML));
        org.junit.Assert.assertNotNull(licenseReader24);
        org.junit.Assert.assertNotNull(strSet25);
        org.junit.Assert.assertNull(iLicenseFamily27);
    }

    @Test
    public void test14728() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest29.test14728");
        org.apache.rat.configuration.builders.AllBuilder allBuilder0 = new org.apache.rat.configuration.builders.AllBuilder();
        java.lang.String str1 = allBuilder0.toString();
        java.util.List<org.apache.rat.analysis.IHeaderMatcher> iHeaderMatcherList2 = allBuilder0.getChildren();
        org.apache.rat.configuration.builders.MatcherRefBuilder matcherRefBuilder3 = new org.apache.rat.configuration.builders.MatcherRefBuilder();
        org.apache.rat.configuration.builders.AbstractBuilder abstractBuilder4 = allBuilder0.add((org.apache.rat.analysis.IHeaderMatcher.Builder) matcherRefBuilder3);
        org.apache.rat.configuration.builders.MatcherRefBuilder matcherRefBuilder6 = matcherRefBuilder3.setRefId("http:");
        java.util.Map<java.lang.String, org.apache.rat.analysis.IHeaderMatcher> strMap7 = null;
        org.apache.rat.configuration.builders.MatcherRefBuilder matcherRefBuilder8 = matcherRefBuilder6.setMatchers(strMap7);
        org.apache.rat.configuration.builders.MatcherRefBuilder matcherRefBuilder10 = matcherRefBuilder8.setRefId("");
        java.util.Map<java.lang.String, org.apache.rat.analysis.IHeaderMatcher> strMap11 = null;
        org.apache.rat.configuration.builders.MatcherRefBuilder matcherRefBuilder12 = matcherRefBuilder10.setMatchers(strMap11);
        java.lang.String str13 = matcherRefBuilder12.toString();
        org.apache.rat.configuration.builders.MatcherRefBuilder matcherRefBuilder15 = matcherRefBuilder12.setRefId("RegexBuilder: 6f2b4022-35cc-4b09-8df5-79e286566ad3");
        java.lang.String str16 = matcherRefBuilder15.toString();
        org.apache.rat.configuration.builders.MatcherRefBuilder matcherRefBuilder18 = matcherRefBuilder15.setRefId("W3C  ");
        // The following exception was thrown during execution in test generation
        try {
            org.apache.rat.analysis.IHeaderMatcher iHeaderMatcher19 = matcherRefBuilder15.build();
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertEquals("'" + str1 + "' != '" + "AllBuilder:" + "'", str1, "AllBuilder:");
        org.junit.Assert.assertNotNull(iHeaderMatcherList2);
        org.junit.Assert.assertNotNull(abstractBuilder4);
        org.junit.Assert.assertNotNull(matcherRefBuilder6);
        org.junit.Assert.assertNotNull(matcherRefBuilder8);
        org.junit.Assert.assertNotNull(matcherRefBuilder10);
        org.junit.Assert.assertNotNull(matcherRefBuilder12);
        org.junit.Assert.assertEquals("'" + str13 + "' != '" + "MathcerRefBuilder: " + "'", str13, "MathcerRefBuilder: ");
        org.junit.Assert.assertNotNull(matcherRefBuilder15);
        org.junit.Assert.assertEquals("'" + str16 + "' != '" + "MathcerRefBuilder: RegexBuilder: 6f2b4022-35cc-4b09-8df5-79e286566ad3" + "'", str16, "MathcerRefBuilder: RegexBuilder: 6f2b4022-35cc-4b09-8df5-79e286566ad3");
        org.junit.Assert.assertNotNull(matcherRefBuilder18);
    }

    @Test
    public void test14729() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest29.test14729");
        org.apache.rat.utils.Log log0 = null;
        org.apache.rat.ReportConfiguration reportConfiguration1 = new org.apache.rat.ReportConfiguration(log0);
        reportConfiguration1.addApprovedLicenseCategory(".cvsignore");
        org.apache.rat.utils.Log.Level level4 = org.apache.rat.utils.Log.Level.ERROR;
        reportConfiguration1.logFamilyCollisions(level4);
        org.apache.commons.io.function.IOSupplier<java.io.OutputStream> outputStreamIOSupplier6 = reportConfiguration1.getOutput();
        reportConfiguration1.removeApprovedLicenseCategory("http://org/apache/rat/meta-data#FileCategory");
        java.lang.String str9 = reportConfiguration1.getCopyrightMessage();
        org.junit.Assert.assertTrue("'" + level4 + "' != '" + org.apache.rat.utils.Log.Level.ERROR + "'", level4.equals(org.apache.rat.utils.Log.Level.ERROR));
        org.junit.Assert.assertNotNull(outputStreamIOSupplier6);
        org.junit.Assert.assertNull(str9);
    }

    @Test
    public void test14730() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest29.test14730");
        org.apache.rat.utils.Log log0 = null;
        org.apache.rat.ReportConfiguration reportConfiguration1 = new org.apache.rat.ReportConfiguration(log0);
        java.io.FilenameFilter filenameFilter2 = reportConfiguration1.getInputFileFilter();
        boolean boolean3 = reportConfiguration1.isStyleReport();
        org.apache.commons.io.function.IOSupplier<java.io.OutputStream> outputStreamIOSupplier4 = reportConfiguration1.getOutput();
        org.apache.rat.utils.Log log5 = null;
        org.apache.rat.ReportConfiguration reportConfiguration6 = new org.apache.rat.ReportConfiguration(log5);
        org.apache.rat.report.claim.ClaimStatistic claimStatistic7 = org.apache.rat.Reporter.report(reportConfiguration6);
        org.apache.commons.io.function.IOSupplier<java.io.OutputStream> outputStreamIOSupplier8 = reportConfiguration6.getOutput();
        boolean boolean9 = reportConfiguration6.isAddingLicensesForced();
        org.apache.rat.license.ILicense[] iLicenseArray10 = new org.apache.rat.license.ILicense[] {};
        java.util.TreeSet<org.apache.rat.license.ILicense> iLicenseSet11 = new java.util.TreeSet<org.apache.rat.license.ILicense>();
        boolean boolean12 = java.util.Collections.addAll((java.util.Collection<org.apache.rat.license.ILicense>) iLicenseSet11, iLicenseArray10);
        java.lang.String[] strArray25 = new java.lang.String[] { "GPL2 ", "GPL1 ", "notice", "http://org/apache/rat/meta-data#LicenseFamilyName", "notice", "GPL2 ", "http://org/apache/rat/meta-data#LicenseFamilyName", "", "GPL2 ", "", "GPL1 ", "hi!" };
        java.util.ArrayList<java.lang.String> strList26 = new java.util.ArrayList<java.lang.String>();
        boolean boolean27 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strList26, strArray25);
        org.apache.rat.license.LicenseSetFactory licenseSetFactory28 = new org.apache.rat.license.LicenseSetFactory((java.util.SortedSet<org.apache.rat.license.ILicense>) iLicenseSet11, (java.util.Collection<java.lang.String>) strList26);
        reportConfiguration6.addLicenses((java.util.Collection<org.apache.rat.license.ILicense>) iLicenseSet11);
        reportConfiguration6.setStyleReport(true);
        org.apache.commons.io.function.IOSupplier<java.io.OutputStream> outputStreamIOSupplier32 = reportConfiguration6.getOutput();
        java.util.SortedSet<org.apache.rat.license.ILicenseFamily> iLicenseFamilySet33 = org.apache.rat.license.LicenseFamilySetFactory.emptyLicenseFamilySet();
        org.apache.rat.policy.DefaultPolicy defaultPolicy34 = new org.apache.rat.policy.DefaultPolicy((java.util.Collection<org.apache.rat.license.ILicenseFamily>) iLicenseFamilySet33);
        reportConfiguration6.addFamilies((java.util.Collection<org.apache.rat.license.ILicenseFamily>) iLicenseFamilySet33);
        org.apache.rat.utils.Log log36 = null;
        org.apache.rat.ReportConfiguration reportConfiguration37 = new org.apache.rat.ReportConfiguration(log36);
        java.io.FilenameFilter filenameFilter38 = reportConfiguration37.getInputFileFilter();
        org.apache.rat.license.LicenseSetFactory.LicenseFilter licenseFilter39 = org.apache.rat.license.LicenseSetFactory.LicenseFilter.all;
        java.util.SortedSet<org.apache.rat.license.ILicense> iLicenseSet40 = reportConfiguration37.getLicenses(licenseFilter39);
        org.apache.rat.config.AddLicenseHeaders addLicenseHeaders41 = org.apache.rat.config.AddLicenseHeaders.FALSE;
        reportConfiguration37.setAddLicenseHeaders(addLicenseHeaders41);
        org.apache.rat.utils.Log log43 = null;
        org.apache.rat.ReportConfiguration reportConfiguration44 = new org.apache.rat.ReportConfiguration(log43);
        org.apache.rat.report.claim.ClaimStatistic claimStatistic45 = org.apache.rat.Reporter.report(reportConfiguration44);
        org.apache.rat.license.LicenseSetFactory.LicenseFilter licenseFilter46 = org.apache.rat.license.LicenseSetFactory.LicenseFilter.all;
        org.apache.rat.Reporter.listLicenses(reportConfiguration44, licenseFilter46);
        org.apache.rat.Reporter.listLicenses(reportConfiguration37, licenseFilter46);
        org.apache.rat.utils.Log log49 = null;
        org.apache.rat.ReportConfiguration reportConfiguration50 = new org.apache.rat.ReportConfiguration(log49);
        java.io.FilenameFilter filenameFilter51 = reportConfiguration50.getInputFileFilter();
        org.apache.rat.license.LicenseSetFactory.LicenseFilter licenseFilter52 = org.apache.rat.license.LicenseSetFactory.LicenseFilter.all;
        java.util.SortedSet<org.apache.rat.license.ILicense> iLicenseSet53 = reportConfiguration50.getLicenses(licenseFilter52);
        org.apache.rat.config.AddLicenseHeaders addLicenseHeaders54 = org.apache.rat.config.AddLicenseHeaders.FALSE;
        reportConfiguration50.setAddLicenseHeaders(addLicenseHeaders54);
        org.apache.rat.utils.Log log56 = null;
        org.apache.rat.ReportConfiguration reportConfiguration57 = new org.apache.rat.ReportConfiguration(log56);
        org.apache.rat.report.claim.ClaimStatistic claimStatistic58 = org.apache.rat.Reporter.report(reportConfiguration57);
        org.apache.rat.license.LicenseSetFactory.LicenseFilter licenseFilter59 = org.apache.rat.license.LicenseSetFactory.LicenseFilter.all;
        org.apache.rat.Reporter.listLicenses(reportConfiguration57, licenseFilter59);
        org.apache.rat.Reporter.listLicenses(reportConfiguration50, licenseFilter59);
        org.apache.rat.Reporter.listLicenses(reportConfiguration37, licenseFilter59);
        org.apache.rat.utils.Log log63 = null;
        org.apache.rat.ReportConfiguration reportConfiguration64 = new org.apache.rat.ReportConfiguration(log63);
        org.apache.commons.io.function.IOSupplier<java.io.OutputStream> outputStreamIOSupplier65 = reportConfiguration64.getOutput();
        reportConfiguration37.setOut(outputStreamIOSupplier65);
        org.apache.rat.utils.Log.Level level67 = org.apache.rat.utils.Log.Level.WARN;
        reportConfiguration37.logLicenseCollisions(level67);
        org.apache.commons.io.filefilter.IOFileFilter iOFileFilter69 = reportConfiguration37.getDirectoryFilter();
        java.nio.file.Path path70 = null;
        java.nio.file.attribute.BasicFileAttributes basicFileAttributes71 = null;
        java.nio.file.FileVisitResult fileVisitResult72 = iOFileFilter69.accept(path70, basicFileAttributes71);
        org.apache.commons.io.filefilter.IOFileFilter iOFileFilter73 = iOFileFilter69.negate();
        reportConfiguration6.setInputFileFilter((java.io.FilenameFilter) iOFileFilter73);
        reportConfiguration1.setDirectoryFilter(iOFileFilter73);
        org.apache.rat.utils.Log log76 = reportConfiguration1.getLog();
        reportConfiguration1.setStyleReport(false);
        reportConfiguration1.removeApprovedLicenseCategory("GNU GENERAL PUBLIC LICENSE, VERSION 2");
        org.apache.rat.report.IReportable iReportable81 = reportConfiguration1.getReportable();
        org.junit.Assert.assertNull(filenameFilter2);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + true + "'", boolean3 == true);
        org.junit.Assert.assertNotNull(outputStreamIOSupplier4);
        org.junit.Assert.assertNull(claimStatistic7);
        org.junit.Assert.assertNotNull(outputStreamIOSupplier8);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertNotNull(iLicenseArray10);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertNotNull(strArray25);
        org.junit.Assert.assertTrue("'" + boolean27 + "' != '" + true + "'", boolean27 == true);
        org.junit.Assert.assertNotNull(outputStreamIOSupplier32);
        org.junit.Assert.assertNotNull(iLicenseFamilySet33);
        org.junit.Assert.assertNull(filenameFilter38);
        org.junit.Assert.assertTrue("'" + licenseFilter39 + "' != '" + org.apache.rat.license.LicenseSetFactory.LicenseFilter.all + "'", licenseFilter39.equals(org.apache.rat.license.LicenseSetFactory.LicenseFilter.all));
        org.junit.Assert.assertNotNull(iLicenseSet40);
        org.junit.Assert.assertTrue("'" + addLicenseHeaders41 + "' != '" + org.apache.rat.config.AddLicenseHeaders.FALSE + "'", addLicenseHeaders41.equals(org.apache.rat.config.AddLicenseHeaders.FALSE));
        org.junit.Assert.assertNull(claimStatistic45);
        org.junit.Assert.assertTrue("'" + licenseFilter46 + "' != '" + org.apache.rat.license.LicenseSetFactory.LicenseFilter.all + "'", licenseFilter46.equals(org.apache.rat.license.LicenseSetFactory.LicenseFilter.all));
        org.junit.Assert.assertNull(filenameFilter51);
        org.junit.Assert.assertTrue("'" + licenseFilter52 + "' != '" + org.apache.rat.license.LicenseSetFactory.LicenseFilter.all + "'", licenseFilter52.equals(org.apache.rat.license.LicenseSetFactory.LicenseFilter.all));
        org.junit.Assert.assertNotNull(iLicenseSet53);
        org.junit.Assert.assertTrue("'" + addLicenseHeaders54 + "' != '" + org.apache.rat.config.AddLicenseHeaders.FALSE + "'", addLicenseHeaders54.equals(org.apache.rat.config.AddLicenseHeaders.FALSE));
        org.junit.Assert.assertNull(claimStatistic58);
        org.junit.Assert.assertTrue("'" + licenseFilter59 + "' != '" + org.apache.rat.license.LicenseSetFactory.LicenseFilter.all + "'", licenseFilter59.equals(org.apache.rat.license.LicenseSetFactory.LicenseFilter.all));
        org.junit.Assert.assertNotNull(outputStreamIOSupplier65);
        org.junit.Assert.assertTrue("'" + level67 + "' != '" + org.apache.rat.utils.Log.Level.WARN + "'", level67.equals(org.apache.rat.utils.Log.Level.WARN));
        org.junit.Assert.assertNotNull(iOFileFilter69);
        org.junit.Assert.assertTrue("'" + fileVisitResult72 + "' != '" + java.nio.file.FileVisitResult.TERMINATE + "'", fileVisitResult72.equals(java.nio.file.FileVisitResult.TERMINATE));
        org.junit.Assert.assertNotNull(iOFileFilter73);
        org.junit.Assert.assertNull(log76);
        org.junit.Assert.assertNull(iReportable81);
    }

    @Test
    public void test14731() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest29.test14731");
        org.apache.rat.analysis.license.FullTextMatchingLicense fullTextMatchingLicense0 = new org.apache.rat.analysis.license.FullTextMatchingLicense();
        fullTextMatchingLicense0.setLicenseFamilyName("hi!");
        java.lang.String str3 = fullTextMatchingLicense0.getLicenseFamilyCategory();
        java.lang.String str4 = fullTextMatchingLicense0.getLicenseFamilyCategory();
        fullTextMatchingLicense0.setFullText("NotBuilder: MathcerRefBuilder: null");
        org.apache.rat.license.ILicense.Builder builder7 = fullTextMatchingLicense0.getLicense();
        fullTextMatchingLicense0.setFullText("META-DATA#LICENSEFAMILYNAME',VALUE ='GNU GENERAL PUBLIC LICENSE, VERSION 1 ']");
        org.apache.rat.license.ILicense.Builder builder10 = fullTextMatchingLicense0.getLicense();
        java.lang.String str11 = fullTextMatchingLicense0.getNotes();
        org.apache.rat.license.ILicense.Builder builder12 = fullTextMatchingLicense0.getLicense();
        fullTextMatchingLicense0.setFullText("GEN  ");
        java.lang.String str15 = fullTextMatchingLicense0.getLicenseFamilyName();
        java.lang.String str16 = fullTextMatchingLicense0.getLicenseFamilyName();
        java.lang.String str17 = fullTextMatchingLicense0.getLicenseFamilyCategory();
        org.junit.Assert.assertNull(str3);
        org.junit.Assert.assertNull(str4);
        org.junit.Assert.assertNotNull(builder7);
        org.junit.Assert.assertNotNull(builder10);
        org.junit.Assert.assertNull(str11);
        org.junit.Assert.assertNotNull(builder12);
        org.junit.Assert.assertEquals("'" + str15 + "' != '" + "hi!" + "'", str15, "hi!");
        org.junit.Assert.assertEquals("'" + str16 + "' != '" + "hi!" + "'", str16, "hi!");
        org.junit.Assert.assertNull(str17);
    }

    @Test
    public void test14732() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest29.test14732");
        org.apache.rat.utils.Log log0 = null;
        org.apache.rat.ReportConfiguration reportConfiguration1 = new org.apache.rat.ReportConfiguration(log0);
        org.apache.rat.report.claim.ClaimStatistic claimStatistic2 = org.apache.rat.Reporter.report(reportConfiguration1);
        org.apache.rat.utils.Log log3 = null;
        org.apache.rat.ReportConfiguration reportConfiguration4 = new org.apache.rat.ReportConfiguration(log3);
        org.apache.rat.report.claim.ClaimStatistic claimStatistic5 = org.apache.rat.Reporter.report(reportConfiguration4);
        org.apache.rat.utils.ReportingSet.Options options6 = org.apache.rat.utils.ReportingSet.Options.OVERWRITE;
        reportConfiguration4.licenseDuplicateOption(options6);
        reportConfiguration1.familyDuplicateOption(options6);
        org.apache.commons.io.function.IOSupplier<java.io.PrintWriter> printWriterIOSupplier9 = reportConfiguration1.getWriter();
        boolean boolean10 = reportConfiguration1.isAddingLicensesForced();
        org.apache.rat.utils.Log log11 = null;
        org.apache.rat.ReportConfiguration reportConfiguration12 = new org.apache.rat.ReportConfiguration(log11);
        reportConfiguration12.addApprovedLicenseCategory(".cvsignore");
        org.apache.rat.utils.Log.Level level15 = org.apache.rat.utils.Log.Level.ERROR;
        reportConfiguration12.logFamilyCollisions(level15);
        reportConfiguration1.logLicenseCollisions(level15);
        org.apache.rat.license.ILicenseFamilyBuilder iLicenseFamilyBuilder18 = new org.apache.rat.license.ILicenseFamilyBuilder();
        java.lang.String str19 = iLicenseFamilyBuilder18.getCategory();
        org.apache.rat.license.ILicenseFamily.Builder builder21 = iLicenseFamilyBuilder18.setLicenseFamilyCategory("AL   ");
        org.apache.rat.license.ILicenseFamily.Builder builder23 = iLicenseFamilyBuilder18.setLicenseFamilyCategory("MIT  ");
        org.apache.rat.license.ILicenseFamily.Builder builder25 = iLicenseFamilyBuilder18.setLicenseFamilyName("4a00cf7d-fe76-423e-917e-b03bbae6b8a5");
        java.lang.String str26 = iLicenseFamilyBuilder18.getCategory();
        org.apache.rat.license.ILicenseFamily.Builder builder28 = iLicenseFamilyBuilder18.setLicenseFamilyName("8ecb8cce-06e4-400f-84d9-ad1cf6289fda");
        org.apache.rat.license.ILicenseFamily iLicenseFamily29 = iLicenseFamilyBuilder18.build();
        java.lang.String str30 = iLicenseFamilyBuilder18.getCategory();
        org.apache.rat.license.ILicenseFamily.Builder builder32 = iLicenseFamilyBuilder18.setLicenseFamilyName("?????");
        reportConfiguration1.addFamily(builder32);
        org.apache.rat.report.IReportable iReportable34 = reportConfiguration1.getReportable();
        org.apache.commons.io.function.IOSupplier<java.io.OutputStream> outputStreamIOSupplier35 = reportConfiguration1.getOutput();
        org.apache.rat.report.claim.ClaimStatistic claimStatistic36 = org.apache.rat.Reporter.report(reportConfiguration1);
        org.junit.Assert.assertNull(claimStatistic2);
        org.junit.Assert.assertNull(claimStatistic5);
        org.junit.Assert.assertTrue("'" + options6 + "' != '" + org.apache.rat.utils.ReportingSet.Options.OVERWRITE + "'", options6.equals(org.apache.rat.utils.ReportingSet.Options.OVERWRITE));
        org.junit.Assert.assertNotNull(printWriterIOSupplier9);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertTrue("'" + level15 + "' != '" + org.apache.rat.utils.Log.Level.ERROR + "'", level15.equals(org.apache.rat.utils.Log.Level.ERROR));
        org.junit.Assert.assertNull(str19);
        org.junit.Assert.assertNotNull(builder21);
        org.junit.Assert.assertNotNull(builder23);
        org.junit.Assert.assertNotNull(builder25);
        org.junit.Assert.assertEquals("'" + str26 + "' != '" + "MIT  " + "'", str26, "MIT  ");
        org.junit.Assert.assertNotNull(builder28);
        org.junit.Assert.assertNotNull(iLicenseFamily29);
        org.junit.Assert.assertEquals("'" + str30 + "' != '" + "MIT  " + "'", str30, "MIT  ");
        org.junit.Assert.assertNotNull(builder32);
        org.junit.Assert.assertNull(iReportable34);
        org.junit.Assert.assertNotNull(outputStreamIOSupplier35);
        org.junit.Assert.assertNull(claimStatistic36);
    }

    @Test
    public void test14733() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest29.test14733");
        org.apache.rat.report.claim.ClaimStatistic claimStatistic0 = new org.apache.rat.report.claim.ClaimStatistic();
        claimStatistic0.setNumUnApproved((-1));
        java.util.Map<java.lang.String, java.lang.Integer> strMap3 = claimStatistic0.getLicenseFileCodeMap();
        claimStatistic0.setNumGenerated(6);
        claimStatistic0.setNumUnknown(35);
        java.util.Map<java.lang.String, java.lang.Integer> strMap8 = claimStatistic0.getDocumentCategoryMap();
        org.junit.Assert.assertNull(strMap3);
        org.junit.Assert.assertNull(strMap8);
    }

    @Test
    public void test14734() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest29.test14734");
        org.apache.rat.analysis.matchers.FullTextMatcher fullTextMatcher1 = new org.apache.rat.analysis.matchers.FullTextMatcher("RegexBuilder: d4148d3a-edbc-4672-b347-0fa619553f91");
        fullTextMatcher1.reset();
        org.apache.rat.analysis.IHeaderMatcher.State state3 = fullTextMatcher1.currentState();
        // The following exception was thrown during execution in test generation
        try {
            boolean boolean4 = state3.asBoolean();
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalStateException; message: 'asBoolean' should never be called on an indeterminate state");
        } catch (java.lang.IllegalStateException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + state3 + "' != '" + org.apache.rat.analysis.IHeaderMatcher.State.i + "'", state3.equals(org.apache.rat.analysis.IHeaderMatcher.State.i));
    }

    @Test
    public void test14735() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest29.test14735");
        org.apache.rat.license.ILicenseFamily[] iLicenseFamilyArray0 = new org.apache.rat.license.ILicenseFamily[] {};
        java.util.ArrayList<org.apache.rat.license.ILicenseFamily> iLicenseFamilyList1 = new java.util.ArrayList<org.apache.rat.license.ILicenseFamily>();
        boolean boolean2 = java.util.Collections.addAll((java.util.Collection<org.apache.rat.license.ILicenseFamily>) iLicenseFamilyList1, iLicenseFamilyArray0);
        org.apache.rat.policy.DefaultPolicy defaultPolicy3 = new org.apache.rat.policy.DefaultPolicy((java.util.Collection<org.apache.rat.license.ILicenseFamily>) iLicenseFamilyList1);
        java.util.SortedSet<org.apache.rat.license.ILicenseFamily> iLicenseFamilySet4 = defaultPolicy3.getApprovedLicenseNames();
        org.apache.rat.license.ILicense[] iLicenseArray5 = new org.apache.rat.license.ILicense[] {};
        java.util.TreeSet<org.apache.rat.license.ILicense> iLicenseSet6 = new java.util.TreeSet<org.apache.rat.license.ILicense>();
        boolean boolean7 = java.util.Collections.addAll((java.util.Collection<org.apache.rat.license.ILicense>) iLicenseSet6, iLicenseArray5);
        java.lang.String[] strArray20 = new java.lang.String[] { "GPL2 ", "GPL1 ", "notice", "http://org/apache/rat/meta-data#LicenseFamilyName", "notice", "GPL2 ", "http://org/apache/rat/meta-data#LicenseFamilyName", "", "GPL2 ", "", "GPL1 ", "hi!" };
        java.util.ArrayList<java.lang.String> strList21 = new java.util.ArrayList<java.lang.String>();
        boolean boolean22 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strList21, strArray20);
        org.apache.rat.license.LicenseSetFactory licenseSetFactory23 = new org.apache.rat.license.LicenseSetFactory((java.util.SortedSet<org.apache.rat.license.ILicense>) iLicenseSet6, (java.util.Collection<java.lang.String>) strList21);
        org.apache.rat.license.LicenseSetFactory.LicenseFilter licenseFilter24 = org.apache.rat.license.LicenseSetFactory.LicenseFilter.all;
        java.util.SortedSet<org.apache.rat.license.ILicenseFamily> iLicenseFamilySet25 = licenseSetFactory23.getLicenseFamilies(licenseFilter24);
        org.apache.rat.license.ILicense[] iLicenseArray26 = new org.apache.rat.license.ILicense[] {};
        java.util.TreeSet<org.apache.rat.license.ILicense> iLicenseSet27 = new java.util.TreeSet<org.apache.rat.license.ILicense>();
        boolean boolean28 = java.util.Collections.addAll((java.util.Collection<org.apache.rat.license.ILicense>) iLicenseSet27, iLicenseArray26);
        java.lang.String[] strArray41 = new java.lang.String[] { "GPL2 ", "GPL1 ", "notice", "http://org/apache/rat/meta-data#LicenseFamilyName", "notice", "GPL2 ", "http://org/apache/rat/meta-data#LicenseFamilyName", "", "GPL2 ", "", "GPL1 ", "hi!" };
        java.util.ArrayList<java.lang.String> strList42 = new java.util.ArrayList<java.lang.String>();
        boolean boolean43 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strList42, strArray41);
        org.apache.rat.license.LicenseSetFactory licenseSetFactory44 = new org.apache.rat.license.LicenseSetFactory((java.util.SortedSet<org.apache.rat.license.ILicense>) iLicenseSet27, (java.util.Collection<java.lang.String>) strList42);
        org.apache.rat.utils.Log log45 = null;
        org.apache.rat.ReportConfiguration reportConfiguration46 = new org.apache.rat.ReportConfiguration(log45);
        java.io.FilenameFilter filenameFilter47 = reportConfiguration46.getInputFileFilter();
        org.apache.rat.license.LicenseSetFactory.LicenseFilter licenseFilter48 = org.apache.rat.license.LicenseSetFactory.LicenseFilter.all;
        java.util.SortedSet<org.apache.rat.license.ILicense> iLicenseSet49 = reportConfiguration46.getLicenses(licenseFilter48);
        org.apache.rat.config.AddLicenseHeaders addLicenseHeaders50 = org.apache.rat.config.AddLicenseHeaders.FALSE;
        reportConfiguration46.setAddLicenseHeaders(addLicenseHeaders50);
        org.apache.rat.utils.Log log52 = null;
        org.apache.rat.ReportConfiguration reportConfiguration53 = new org.apache.rat.ReportConfiguration(log52);
        org.apache.rat.report.claim.ClaimStatistic claimStatistic54 = org.apache.rat.Reporter.report(reportConfiguration53);
        org.apache.rat.license.LicenseSetFactory.LicenseFilter licenseFilter55 = org.apache.rat.license.LicenseSetFactory.LicenseFilter.all;
        org.apache.rat.Reporter.listLicenses(reportConfiguration53, licenseFilter55);
        org.apache.rat.Reporter.listLicenses(reportConfiguration46, licenseFilter55);
        org.apache.rat.utils.Log log58 = null;
        org.apache.rat.ReportConfiguration reportConfiguration59 = new org.apache.rat.ReportConfiguration(log58);
        java.io.FilenameFilter filenameFilter60 = reportConfiguration59.getInputFileFilter();
        org.apache.rat.license.LicenseSetFactory.LicenseFilter licenseFilter61 = org.apache.rat.license.LicenseSetFactory.LicenseFilter.all;
        java.util.SortedSet<org.apache.rat.license.ILicense> iLicenseSet62 = reportConfiguration59.getLicenses(licenseFilter61);
        org.apache.rat.config.AddLicenseHeaders addLicenseHeaders63 = org.apache.rat.config.AddLicenseHeaders.FALSE;
        reportConfiguration59.setAddLicenseHeaders(addLicenseHeaders63);
        org.apache.rat.utils.Log log65 = null;
        org.apache.rat.ReportConfiguration reportConfiguration66 = new org.apache.rat.ReportConfiguration(log65);
        org.apache.rat.report.claim.ClaimStatistic claimStatistic67 = org.apache.rat.Reporter.report(reportConfiguration66);
        org.apache.rat.license.LicenseSetFactory.LicenseFilter licenseFilter68 = org.apache.rat.license.LicenseSetFactory.LicenseFilter.all;
        org.apache.rat.Reporter.listLicenses(reportConfiguration66, licenseFilter68);
        org.apache.rat.Reporter.listLicenses(reportConfiguration59, licenseFilter68);
        org.apache.rat.Reporter.listLicenses(reportConfiguration46, licenseFilter68);
        java.util.SortedSet<org.apache.rat.license.ILicense> iLicenseSet72 = licenseSetFactory44.getLicenses(licenseFilter68);
        java.util.SortedSet<org.apache.rat.license.ILicenseFamily> iLicenseFamilySet73 = licenseSetFactory23.getLicenseFamilies(licenseFilter68);
        org.apache.rat.policy.DefaultPolicy defaultPolicy74 = new org.apache.rat.policy.DefaultPolicy((java.util.Collection<org.apache.rat.license.ILicenseFamily>) iLicenseFamilySet73);
        org.apache.rat.api.Document document75 = null;
        defaultPolicy74.analyse(document75);
        org.apache.rat.document.IDocumentAnalyser[] iDocumentAnalyserArray77 = new org.apache.rat.document.IDocumentAnalyser[] {};
        org.apache.rat.document.impl.util.DocumentAnalyserMultiplexer documentAnalyserMultiplexer78 = new org.apache.rat.document.impl.util.DocumentAnalyserMultiplexer(iDocumentAnalyserArray77);
        org.apache.rat.api.Document document79 = null;
        documentAnalyserMultiplexer78.analyse(document79);
        org.apache.rat.document.IDocumentAnalyser[] iDocumentAnalyserArray81 = new org.apache.rat.document.IDocumentAnalyser[] { defaultPolicy3, defaultPolicy74, documentAnalyserMultiplexer78 };
        org.apache.rat.document.impl.util.DocumentAnalyserMultiplexer documentAnalyserMultiplexer82 = new org.apache.rat.document.impl.util.DocumentAnalyserMultiplexer(iDocumentAnalyserArray81);
        org.apache.rat.document.impl.util.DocumentAnalyserMultiplexer documentAnalyserMultiplexer83 = new org.apache.rat.document.impl.util.DocumentAnalyserMultiplexer(iDocumentAnalyserArray81);
        org.apache.rat.document.impl.util.DocumentAnalyserMultiplexer documentAnalyserMultiplexer84 = new org.apache.rat.document.impl.util.DocumentAnalyserMultiplexer(iDocumentAnalyserArray81);
        org.apache.rat.api.Document document85 = null;
        documentAnalyserMultiplexer84.analyse(document85);
        org.apache.rat.api.Document document87 = null;
        documentAnalyserMultiplexer84.analyse(document87);
        org.apache.rat.api.Document document89 = null;
        documentAnalyserMultiplexer84.analyse(document89);
        org.junit.Assert.assertNotNull(iLicenseFamilyArray0);
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + false + "'", boolean2 == false);
        org.junit.Assert.assertNotNull(iLicenseFamilySet4);
        org.junit.Assert.assertNotNull(iLicenseArray5);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertNotNull(strArray20);
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + true + "'", boolean22 == true);
        org.junit.Assert.assertTrue("'" + licenseFilter24 + "' != '" + org.apache.rat.license.LicenseSetFactory.LicenseFilter.all + "'", licenseFilter24.equals(org.apache.rat.license.LicenseSetFactory.LicenseFilter.all));
        org.junit.Assert.assertNotNull(iLicenseFamilySet25);
        org.junit.Assert.assertNotNull(iLicenseArray26);
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + false + "'", boolean28 == false);
        org.junit.Assert.assertNotNull(strArray41);
        org.junit.Assert.assertTrue("'" + boolean43 + "' != '" + true + "'", boolean43 == true);
        org.junit.Assert.assertNull(filenameFilter47);
        org.junit.Assert.assertTrue("'" + licenseFilter48 + "' != '" + org.apache.rat.license.LicenseSetFactory.LicenseFilter.all + "'", licenseFilter48.equals(org.apache.rat.license.LicenseSetFactory.LicenseFilter.all));
        org.junit.Assert.assertNotNull(iLicenseSet49);
        org.junit.Assert.assertTrue("'" + addLicenseHeaders50 + "' != '" + org.apache.rat.config.AddLicenseHeaders.FALSE + "'", addLicenseHeaders50.equals(org.apache.rat.config.AddLicenseHeaders.FALSE));
        org.junit.Assert.assertNull(claimStatistic54);
        org.junit.Assert.assertTrue("'" + licenseFilter55 + "' != '" + org.apache.rat.license.LicenseSetFactory.LicenseFilter.all + "'", licenseFilter55.equals(org.apache.rat.license.LicenseSetFactory.LicenseFilter.all));
        org.junit.Assert.assertNull(filenameFilter60);
        org.junit.Assert.assertTrue("'" + licenseFilter61 + "' != '" + org.apache.rat.license.LicenseSetFactory.LicenseFilter.all + "'", licenseFilter61.equals(org.apache.rat.license.LicenseSetFactory.LicenseFilter.all));
        org.junit.Assert.assertNotNull(iLicenseSet62);
        org.junit.Assert.assertTrue("'" + addLicenseHeaders63 + "' != '" + org.apache.rat.config.AddLicenseHeaders.FALSE + "'", addLicenseHeaders63.equals(org.apache.rat.config.AddLicenseHeaders.FALSE));
        org.junit.Assert.assertNull(claimStatistic67);
        org.junit.Assert.assertTrue("'" + licenseFilter68 + "' != '" + org.apache.rat.license.LicenseSetFactory.LicenseFilter.all + "'", licenseFilter68.equals(org.apache.rat.license.LicenseSetFactory.LicenseFilter.all));
        org.junit.Assert.assertNotNull(iLicenseSet72);
        org.junit.Assert.assertNotNull(iLicenseFamilySet73);
        org.junit.Assert.assertNotNull(iDocumentAnalyserArray77);
        org.junit.Assert.assertNotNull(iDocumentAnalyserArray81);
    }

    @Test
    public void test14736() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest29.test14736");
        org.apache.rat.configuration.builders.AnyBuilder anyBuilder0 = org.apache.rat.analysis.IHeaderMatcher.Builder.any();
        org.apache.rat.configuration.builders.AllBuilder allBuilder1 = new org.apache.rat.configuration.builders.AllBuilder();
        org.apache.rat.analysis.IHeaderMatcher iHeaderMatcher2 = allBuilder1.build();
        org.apache.rat.configuration.builders.AbstractBuilder abstractBuilder3 = anyBuilder0.add((org.apache.rat.analysis.IHeaderMatcher.Builder) allBuilder1);
        java.lang.String str4 = allBuilder1.toString();
        org.apache.rat.configuration.builders.AbstractBuilder abstractBuilder6 = allBuilder1.setId("AL   ");
        org.apache.rat.analysis.IHeaderMatcher iHeaderMatcher7 = allBuilder1.build();
        org.apache.rat.analysis.IHeaderMatcher.Builder builder8 = null;
        org.apache.rat.configuration.builders.AbstractBuilder abstractBuilder9 = allBuilder1.add(builder8);
        org.apache.rat.configuration.builders.RegexBuilder regexBuilder10 = new org.apache.rat.configuration.builders.RegexBuilder();
        java.lang.String str11 = regexBuilder10.toString();
        java.lang.String str12 = regexBuilder10.toString();
        org.apache.rat.configuration.builders.RegexBuilder regexBuilder14 = regexBuilder10.setExpr("d4148d3a-edbc-4672-b347-0fa619553f91");
        java.lang.String str15 = regexBuilder10.toString();
        org.apache.rat.analysis.IHeaderMatcher iHeaderMatcher16 = regexBuilder10.build();
        org.apache.rat.configuration.builders.RegexBuilder regexBuilder18 = regexBuilder10.setExpr("8925ba14-6c7c-466e-9335-5528e02df2c5");
        java.lang.String str19 = regexBuilder18.toString();
        java.lang.String str20 = regexBuilder18.toString();
        org.apache.rat.configuration.builders.AbstractBuilder abstractBuilder21 = allBuilder1.add((org.apache.rat.analysis.IHeaderMatcher.Builder) regexBuilder18);
        org.junit.Assert.assertNotNull(anyBuilder0);
        org.junit.Assert.assertNotNull(iHeaderMatcher2);
        org.junit.Assert.assertNotNull(abstractBuilder3);
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "AllBuilder:" + "'", str4, "AllBuilder:");
        org.junit.Assert.assertNotNull(abstractBuilder6);
        org.junit.Assert.assertNotNull(iHeaderMatcher7);
        org.junit.Assert.assertNotNull(abstractBuilder9);
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "RegexBuilder: null" + "'", str11, "RegexBuilder: null");
        org.junit.Assert.assertEquals("'" + str12 + "' != '" + "RegexBuilder: null" + "'", str12, "RegexBuilder: null");
        org.junit.Assert.assertNotNull(regexBuilder14);
        org.junit.Assert.assertEquals("'" + str15 + "' != '" + "RegexBuilder: d4148d3a-edbc-4672-b347-0fa619553f91" + "'", str15, "RegexBuilder: d4148d3a-edbc-4672-b347-0fa619553f91");
        org.junit.Assert.assertNotNull(iHeaderMatcher16);
        org.junit.Assert.assertNotNull(regexBuilder18);
        org.junit.Assert.assertEquals("'" + str19 + "' != '" + "RegexBuilder: 8925ba14-6c7c-466e-9335-5528e02df2c5" + "'", str19, "RegexBuilder: 8925ba14-6c7c-466e-9335-5528e02df2c5");
        org.junit.Assert.assertEquals("'" + str20 + "' != '" + "RegexBuilder: 8925ba14-6c7c-466e-9335-5528e02df2c5" + "'", str20, "RegexBuilder: 8925ba14-6c7c-466e-9335-5528e02df2c5");
        org.junit.Assert.assertNotNull(abstractBuilder21);
    }

    @Test
    public void test14737() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest29.test14737");
        org.apache.rat.utils.Log log0 = null;
        org.apache.rat.ReportConfiguration reportConfiguration1 = new org.apache.rat.ReportConfiguration(log0);
        java.io.FilenameFilter filenameFilter2 = reportConfiguration1.getInputFileFilter();
        org.apache.rat.license.LicenseSetFactory.LicenseFilter licenseFilter3 = org.apache.rat.license.LicenseSetFactory.LicenseFilter.all;
        java.util.SortedSet<org.apache.rat.license.ILicense> iLicenseSet4 = reportConfiguration1.getLicenses(licenseFilter3);
        org.apache.rat.license.ILicenseFamily iLicenseFamily5 = null;
        reportConfiguration1.addFamily(iLicenseFamily5);
        java.util.function.Consumer<java.lang.String> strConsumer7 = null;
        // The following exception was thrown during execution in test generation
        try {
            reportConfiguration1.validate(strConsumer7);
            org.junit.Assert.fail("Expected exception of type org.apache.rat.ConfigurationException; message: Reportable may not be null");
        } catch (org.apache.rat.ConfigurationException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNull(filenameFilter2);
        org.junit.Assert.assertTrue("'" + licenseFilter3 + "' != '" + org.apache.rat.license.LicenseSetFactory.LicenseFilter.all + "'", licenseFilter3.equals(org.apache.rat.license.LicenseSetFactory.LicenseFilter.all));
        org.junit.Assert.assertNotNull(iLicenseSet4);
    }

    @Test
    public void test14738() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest29.test14738");
        java.io.File file0 = null;
        java.util.regex.Pattern pattern1 = null;
        org.apache.rat.utils.DefaultLog defaultLog2 = org.apache.rat.utils.DefaultLog.INSTANCE;
        org.apache.rat.annotation.ApacheV2LicenseAppender apacheV2LicenseAppender3 = new org.apache.rat.annotation.ApacheV2LicenseAppender((org.apache.rat.utils.Log) defaultLog2);
        org.apache.rat.utils.Log log4 = null;
        org.apache.rat.ReportConfiguration reportConfiguration5 = new org.apache.rat.ReportConfiguration(log4);
        org.apache.rat.report.claim.ClaimStatistic claimStatistic6 = org.apache.rat.Reporter.report(reportConfiguration5);
        org.apache.rat.utils.Log log7 = null;
        org.apache.rat.ReportConfiguration reportConfiguration8 = new org.apache.rat.ReportConfiguration(log7);
        org.apache.rat.report.claim.ClaimStatistic claimStatistic9 = org.apache.rat.Reporter.report(reportConfiguration8);
        org.apache.rat.utils.ReportingSet.Options options10 = org.apache.rat.utils.ReportingSet.Options.OVERWRITE;
        reportConfiguration8.licenseDuplicateOption(options10);
        reportConfiguration5.familyDuplicateOption(options10);
        org.apache.commons.io.function.IOSupplier<java.io.PrintWriter> printWriterIOSupplier13 = reportConfiguration5.getWriter();
        org.apache.rat.utils.Log log14 = null;
        org.apache.rat.ReportConfiguration reportConfiguration15 = new org.apache.rat.ReportConfiguration(log14);
        reportConfiguration15.addApprovedLicenseCategory(".cvsignore");
        org.apache.rat.utils.Log.Level level18 = org.apache.rat.utils.Log.Level.ERROR;
        reportConfiguration15.logFamilyCollisions(level18);
        reportConfiguration5.logFamilyCollisions(level18);
        org.apache.rat.Defaults.Builder builder21 = org.apache.rat.Defaults.builder();
        org.apache.rat.Defaults.Builder builder22 = builder21.noDefault();
        defaultLog2.log(level18, (java.lang.Object) builder21);
        org.apache.rat.annotation.ApacheV2LicenseAppender apacheV2LicenseAppender25 = new org.apache.rat.annotation.ApacheV2LicenseAppender((org.apache.rat.utils.Log) defaultLog2, "Datum [ name ='binary',value =' ']");
        org.apache.rat.utils.Log log26 = null;
        org.apache.rat.ReportConfiguration reportConfiguration27 = new org.apache.rat.ReportConfiguration(log26);
        org.apache.commons.io.function.IOSupplier<java.io.OutputStream> outputStreamIOSupplier28 = reportConfiguration27.getOutput();
        org.apache.commons.io.filefilter.IOFileFilter iOFileFilter29 = reportConfiguration27.getDirectoryFilter();
        java.nio.file.Path path30 = null;
        java.nio.file.attribute.BasicFileAttributes basicFileAttributes31 = null;
        java.nio.file.FileVisitResult fileVisitResult32 = iOFileFilter29.accept(path30, basicFileAttributes31);
        org.apache.commons.io.filefilter.IOFileFilter iOFileFilter33 = iOFileFilter29.negate();
        defaultLog2.debug((java.lang.Object) iOFileFilter29);
        java.nio.file.Path path35 = null;
        java.nio.file.attribute.BasicFileAttributes basicFileAttributes36 = null;
        java.nio.file.FileVisitResult fileVisitResult37 = iOFileFilter29.accept(path35, basicFileAttributes36);
        // The following exception was thrown during execution in test generation
        try {
            org.apache.rat.walker.DirectoryWalker directoryWalker38 = new org.apache.rat.walker.DirectoryWalker(file0, pattern1, iOFileFilter29);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(defaultLog2);
        org.junit.Assert.assertNull(claimStatistic6);
        org.junit.Assert.assertNull(claimStatistic9);
        org.junit.Assert.assertTrue("'" + options10 + "' != '" + org.apache.rat.utils.ReportingSet.Options.OVERWRITE + "'", options10.equals(org.apache.rat.utils.ReportingSet.Options.OVERWRITE));
        org.junit.Assert.assertNotNull(printWriterIOSupplier13);
        org.junit.Assert.assertTrue("'" + level18 + "' != '" + org.apache.rat.utils.Log.Level.ERROR + "'", level18.equals(org.apache.rat.utils.Log.Level.ERROR));
        org.junit.Assert.assertNotNull(builder21);
        org.junit.Assert.assertNotNull(builder22);
        org.junit.Assert.assertNotNull(outputStreamIOSupplier28);
        org.junit.Assert.assertNotNull(iOFileFilter29);
        org.junit.Assert.assertTrue("'" + fileVisitResult32 + "' != '" + java.nio.file.FileVisitResult.TERMINATE + "'", fileVisitResult32.equals(java.nio.file.FileVisitResult.TERMINATE));
        org.junit.Assert.assertNotNull(iOFileFilter33);
        org.junit.Assert.assertTrue("'" + fileVisitResult37 + "' != '" + java.nio.file.FileVisitResult.TERMINATE + "'", fileVisitResult37.equals(java.nio.file.FileVisitResult.TERMINATE));
    }

    @Test
    public void test14739() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest29.test14739");
        org.apache.rat.analysis.matchers.FullTextMatcher fullTextMatcher2 = new org.apache.rat.analysis.matchers.FullTextMatcher("TMF  ", "Apache License Version 2.0");
        org.apache.rat.analysis.IHeaderMatcher.State state3 = fullTextMatcher2.finalizeState();
        fullTextMatcher2.reset();
        fullTextMatcher2.reset();
        org.apache.rat.analysis.IHeaderMatcher.State state6 = fullTextMatcher2.currentState();
        org.apache.rat.analysis.IHeaderMatcher.State state8 = fullTextMatcher2.matches("Datum [ name ='http://org/apache/rat/meta-data#FileCategory',value ='standard ']");
        fullTextMatcher2.reset();
        boolean boolean11 = fullTextMatcher2.doMatch("33ba9086-9202-465d-abcb-376ea3efcd83");
        org.junit.Assert.assertTrue("'" + state3 + "' != '" + org.apache.rat.analysis.IHeaderMatcher.State.f + "'", state3.equals(org.apache.rat.analysis.IHeaderMatcher.State.f));
        org.junit.Assert.assertTrue("'" + state6 + "' != '" + org.apache.rat.analysis.IHeaderMatcher.State.i + "'", state6.equals(org.apache.rat.analysis.IHeaderMatcher.State.i));
        org.junit.Assert.assertTrue("'" + state8 + "' != '" + org.apache.rat.analysis.IHeaderMatcher.State.i + "'", state8.equals(org.apache.rat.analysis.IHeaderMatcher.State.i));
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
    }

    @Test
    public void test14740() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest29.test14740");
        org.apache.rat.utils.DefaultLog defaultLog0 = org.apache.rat.utils.DefaultLog.INSTANCE;
        org.apache.rat.configuration.builders.AllBuilder allBuilder1 = new org.apache.rat.configuration.builders.AllBuilder();
        org.apache.rat.configuration.builders.MatcherRefBuilder matcherRefBuilder2 = org.apache.rat.analysis.IHeaderMatcher.Builder.matcherRef();
        boolean boolean3 = matcherRefBuilder2.hasId();
        java.lang.String str4 = matcherRefBuilder2.toString();
        org.apache.rat.configuration.builders.AnyBuilder anyBuilder5 = org.apache.rat.analysis.IHeaderMatcher.Builder.any();
        org.apache.rat.configuration.builders.NotBuilder notBuilder6 = new org.apache.rat.configuration.builders.NotBuilder();
        java.lang.String str7 = notBuilder6.toString();
        org.apache.rat.configuration.builders.MatcherRefBuilder matcherRefBuilder8 = org.apache.rat.analysis.IHeaderMatcher.Builder.matcherRef();
        boolean boolean9 = matcherRefBuilder8.hasId();
        java.util.Map<java.lang.String, org.apache.rat.analysis.IHeaderMatcher> strMap10 = null;
        org.apache.rat.configuration.builders.MatcherRefBuilder matcherRefBuilder11 = matcherRefBuilder8.setMatchers(strMap10);
        org.apache.rat.configuration.builders.AllBuilder allBuilder12 = new org.apache.rat.configuration.builders.AllBuilder();
        org.apache.rat.configuration.builders.CopyrightBuilder copyrightBuilder13 = org.apache.rat.analysis.IHeaderMatcher.Builder.copyright();
        org.apache.rat.configuration.builders.CopyrightBuilder copyrightBuilder15 = copyrightBuilder13.setStart("OASIS");
        java.lang.String str16 = copyrightBuilder13.toString();
        org.apache.rat.configuration.builders.CopyrightBuilder copyrightBuilder18 = copyrightBuilder13.setStart("223f0aba-15d4-49e9-901e-5740c137aebf");
        org.apache.rat.configuration.builders.MatcherRefBuilder matcherRefBuilder19 = org.apache.rat.analysis.IHeaderMatcher.Builder.matcherRef();
        boolean boolean20 = matcherRefBuilder19.hasId();
        org.apache.rat.configuration.builders.CopyrightBuilder copyrightBuilder21 = org.apache.rat.analysis.IHeaderMatcher.Builder.copyright();
        org.apache.rat.configuration.builders.CopyrightBuilder copyrightBuilder23 = copyrightBuilder21.setStart("OASIS");
        java.lang.String str24 = copyrightBuilder21.toString();
        org.apache.rat.configuration.builders.CopyrightBuilder copyrightBuilder26 = copyrightBuilder21.setStart("223f0aba-15d4-49e9-901e-5740c137aebf");
        org.apache.rat.configuration.builders.CopyrightBuilder copyrightBuilder27 = org.apache.rat.analysis.IHeaderMatcher.Builder.copyright();
        org.apache.rat.configuration.builders.CopyrightBuilder copyrightBuilder28 = org.apache.rat.analysis.IHeaderMatcher.Builder.copyright();
        java.lang.String str29 = copyrightBuilder28.toString();
        org.apache.rat.configuration.builders.CopyrightBuilder copyrightBuilder31 = copyrightBuilder28.setEnd(".cvsignore");
        boolean boolean32 = copyrightBuilder28.hasId();
        org.apache.rat.configuration.builders.CopyrightBuilder copyrightBuilder33 = org.apache.rat.analysis.IHeaderMatcher.Builder.copyright();
        java.lang.String str34 = copyrightBuilder33.toString();
        org.apache.rat.configuration.builders.CopyrightBuilder copyrightBuilder36 = copyrightBuilder33.setEnd(".cvsignore");
        boolean boolean37 = copyrightBuilder33.hasId();
        java.lang.String str38 = copyrightBuilder33.toString();
        org.apache.rat.configuration.builders.CopyrightBuilder copyrightBuilder39 = org.apache.rat.analysis.IHeaderMatcher.Builder.copyright();
        org.apache.rat.configuration.builders.CopyrightBuilder copyrightBuilder41 = copyrightBuilder39.setStart("OASIS");
        org.apache.rat.configuration.builders.AnyBuilder anyBuilder42 = org.apache.rat.analysis.IHeaderMatcher.Builder.any();
        org.apache.rat.configuration.builders.MatcherRefBuilder matcherRefBuilder43 = org.apache.rat.analysis.IHeaderMatcher.Builder.matcherRef();
        boolean boolean44 = matcherRefBuilder43.hasId();
        java.util.Map<java.lang.String, org.apache.rat.analysis.IHeaderMatcher> strMap45 = null;
        org.apache.rat.configuration.builders.MatcherRefBuilder matcherRefBuilder46 = matcherRefBuilder43.setMatchers(strMap45);
        org.apache.rat.configuration.builders.CopyrightBuilder copyrightBuilder47 = org.apache.rat.analysis.IHeaderMatcher.Builder.copyright();
        org.apache.rat.configuration.builders.MatcherRefBuilder matcherRefBuilder48 = org.apache.rat.analysis.IHeaderMatcher.Builder.matcherRef();
        boolean boolean49 = matcherRefBuilder48.hasId();
        java.lang.String str50 = matcherRefBuilder48.toString();
        java.util.Map<java.lang.String, org.apache.rat.analysis.IHeaderMatcher> strMap51 = null;
        org.apache.rat.configuration.builders.MatcherRefBuilder matcherRefBuilder52 = matcherRefBuilder48.setMatchers(strMap51);
        org.apache.rat.analysis.IHeaderMatcher.Builder[] builderArray53 = new org.apache.rat.analysis.IHeaderMatcher.Builder[] { matcherRefBuilder8, allBuilder12, copyrightBuilder18, matcherRefBuilder19, copyrightBuilder21, copyrightBuilder27, copyrightBuilder28, copyrightBuilder33, copyrightBuilder39, anyBuilder42, matcherRefBuilder43, copyrightBuilder47, matcherRefBuilder48 };
        java.util.ArrayList<org.apache.rat.analysis.IHeaderMatcher.Builder> builderList54 = new java.util.ArrayList<org.apache.rat.analysis.IHeaderMatcher.Builder>();
        boolean boolean55 = java.util.Collections.addAll((java.util.Collection<org.apache.rat.analysis.IHeaderMatcher.Builder>) builderList54, builderArray53);
        org.apache.rat.configuration.builders.AbstractBuilder abstractBuilder56 = notBuilder6.add((java.util.Collection<org.apache.rat.analysis.IHeaderMatcher.Builder>) builderList54);
        org.apache.rat.configuration.builders.MatcherRefBuilder matcherRefBuilder57 = new org.apache.rat.configuration.builders.MatcherRefBuilder();
        org.apache.rat.analysis.IHeaderMatcher.Builder[] builderArray58 = new org.apache.rat.analysis.IHeaderMatcher.Builder[] { matcherRefBuilder2, anyBuilder5, notBuilder6, matcherRefBuilder57 };
        java.util.ArrayList<org.apache.rat.analysis.IHeaderMatcher.Builder> builderList59 = new java.util.ArrayList<org.apache.rat.analysis.IHeaderMatcher.Builder>();
        boolean boolean60 = java.util.Collections.addAll((java.util.Collection<org.apache.rat.analysis.IHeaderMatcher.Builder>) builderList59, builderArray58);
        org.apache.rat.configuration.builders.AbstractBuilder abstractBuilder61 = allBuilder1.add((java.util.Collection<org.apache.rat.analysis.IHeaderMatcher.Builder>) builderList59);
        defaultLog0.info((java.lang.Object) allBuilder1);
        org.apache.rat.annotation.ApacheV2LicenseAppender apacheV2LicenseAppender64 = new org.apache.rat.annotation.ApacheV2LicenseAppender((org.apache.rat.utils.Log) defaultLog0, "true");
        org.apache.rat.configuration.builders.CopyrightBuilder copyrightBuilder65 = org.apache.rat.analysis.IHeaderMatcher.Builder.copyright();
        java.lang.String str66 = copyrightBuilder65.toString();
        org.apache.rat.configuration.builders.CopyrightBuilder copyrightBuilder68 = copyrightBuilder65.setEnd(".cvsignore");
        boolean boolean69 = copyrightBuilder65.hasId();
        org.apache.rat.configuration.builders.CopyrightBuilder copyrightBuilder71 = copyrightBuilder65.setEnd("notice");
        defaultLog0.debug((java.lang.Object) "notice");
        org.apache.rat.annotation.ApacheV2LicenseAppender apacheV2LicenseAppender73 = new org.apache.rat.annotation.ApacheV2LicenseAppender((org.apache.rat.utils.Log) defaultLog0);
        org.apache.rat.annotation.ApacheV2LicenseAppender apacheV2LicenseAppender75 = new org.apache.rat.annotation.ApacheV2LicenseAppender((org.apache.rat.utils.Log) defaultLog0, "2953e6cb-20a5-4dcf-a9f5-85c51cc8c635");
        org.apache.rat.configuration.builders.CopyrightBuilder copyrightBuilder76 = org.apache.rat.analysis.IHeaderMatcher.Builder.copyright();
        org.apache.rat.configuration.builders.CopyrightBuilder copyrightBuilder78 = copyrightBuilder76.setStart("OASIS");
        org.apache.rat.analysis.IHeaderMatcher iHeaderMatcher79 = copyrightBuilder76.build();
        org.apache.rat.configuration.builders.CopyrightBuilder copyrightBuilder81 = copyrightBuilder76.setStart(".cvsignore");
        defaultLog0.error((java.lang.Object) copyrightBuilder76);
        org.apache.rat.ReportConfiguration reportConfiguration83 = new org.apache.rat.ReportConfiguration((org.apache.rat.utils.Log) defaultLog0);
        java.lang.Object obj84 = null;
        java.lang.Throwable throwable85 = null;
        // The following exception was thrown during execution in test generation
        try {
            defaultLog0.info(obj84, throwable85);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(defaultLog0);
        org.junit.Assert.assertNotNull(matcherRefBuilder2);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "MathcerRefBuilder: null" + "'", str4, "MathcerRefBuilder: null");
        org.junit.Assert.assertNotNull(anyBuilder5);
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "NotBuilder: null" + "'", str7, "NotBuilder: null");
        org.junit.Assert.assertNotNull(matcherRefBuilder8);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertNotNull(matcherRefBuilder11);
        org.junit.Assert.assertNotNull(copyrightBuilder13);
        org.junit.Assert.assertNotNull(copyrightBuilder15);
        org.junit.Assert.assertEquals("'" + str16 + "' != '" + "Copyright Builder: s:OASIS e:null o:null" + "'", str16, "Copyright Builder: s:OASIS e:null o:null");
        org.junit.Assert.assertNotNull(copyrightBuilder18);
        org.junit.Assert.assertNotNull(matcherRefBuilder19);
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + false + "'", boolean20 == false);
        org.junit.Assert.assertNotNull(copyrightBuilder21);
        org.junit.Assert.assertNotNull(copyrightBuilder23);
        org.junit.Assert.assertEquals("'" + str24 + "' != '" + "Copyright Builder: s:OASIS e:null o:null" + "'", str24, "Copyright Builder: s:OASIS e:null o:null");
        org.junit.Assert.assertNotNull(copyrightBuilder26);
        org.junit.Assert.assertNotNull(copyrightBuilder27);
        org.junit.Assert.assertNotNull(copyrightBuilder28);
        org.junit.Assert.assertEquals("'" + str29 + "' != '" + "Copyright Builder: s:null e:null o:null" + "'", str29, "Copyright Builder: s:null e:null o:null");
        org.junit.Assert.assertNotNull(copyrightBuilder31);
        org.junit.Assert.assertTrue("'" + boolean32 + "' != '" + false + "'", boolean32 == false);
        org.junit.Assert.assertNotNull(copyrightBuilder33);
        org.junit.Assert.assertEquals("'" + str34 + "' != '" + "Copyright Builder: s:null e:null o:null" + "'", str34, "Copyright Builder: s:null e:null o:null");
        org.junit.Assert.assertNotNull(copyrightBuilder36);
        org.junit.Assert.assertTrue("'" + boolean37 + "' != '" + false + "'", boolean37 == false);
        org.junit.Assert.assertEquals("'" + str38 + "' != '" + "Copyright Builder: s:null e:.cvsignore o:null" + "'", str38, "Copyright Builder: s:null e:.cvsignore o:null");
        org.junit.Assert.assertNotNull(copyrightBuilder39);
        org.junit.Assert.assertNotNull(copyrightBuilder41);
        org.junit.Assert.assertNotNull(anyBuilder42);
        org.junit.Assert.assertNotNull(matcherRefBuilder43);
        org.junit.Assert.assertTrue("'" + boolean44 + "' != '" + false + "'", boolean44 == false);
        org.junit.Assert.assertNotNull(matcherRefBuilder46);
        org.junit.Assert.assertNotNull(copyrightBuilder47);
        org.junit.Assert.assertNotNull(matcherRefBuilder48);
        org.junit.Assert.assertTrue("'" + boolean49 + "' != '" + false + "'", boolean49 == false);
        org.junit.Assert.assertEquals("'" + str50 + "' != '" + "MathcerRefBuilder: null" + "'", str50, "MathcerRefBuilder: null");
        org.junit.Assert.assertNotNull(matcherRefBuilder52);
        org.junit.Assert.assertNotNull(builderArray53);
        org.junit.Assert.assertTrue("'" + boolean55 + "' != '" + true + "'", boolean55 == true);
        org.junit.Assert.assertNotNull(abstractBuilder56);
        org.junit.Assert.assertNotNull(builderArray58);
        org.junit.Assert.assertTrue("'" + boolean60 + "' != '" + true + "'", boolean60 == true);
        org.junit.Assert.assertNotNull(abstractBuilder61);
        org.junit.Assert.assertNotNull(copyrightBuilder65);
        org.junit.Assert.assertEquals("'" + str66 + "' != '" + "Copyright Builder: s:null e:null o:null" + "'", str66, "Copyright Builder: s:null e:null o:null");
        org.junit.Assert.assertNotNull(copyrightBuilder68);
        org.junit.Assert.assertTrue("'" + boolean69 + "' != '" + false + "'", boolean69 == false);
        org.junit.Assert.assertNotNull(copyrightBuilder71);
        org.junit.Assert.assertNotNull(copyrightBuilder76);
        org.junit.Assert.assertNotNull(copyrightBuilder78);
        org.junit.Assert.assertNotNull(iHeaderMatcher79);
        org.junit.Assert.assertNotNull(copyrightBuilder81);
    }

    @Test
    public void test14741() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest29.test14741");
        org.apache.rat.analysis.matchers.SimpleTextMatcher simpleTextMatcher1 = new org.apache.rat.analysis.matchers.SimpleTextMatcher("TextBuilder: d4148d3a-edbc-4672-b...");
        org.apache.rat.analysis.matchers.NotMatcher notMatcher2 = new org.apache.rat.analysis.matchers.NotMatcher((org.apache.rat.analysis.IHeaderMatcher) simpleTextMatcher1);
        boolean boolean4 = simpleTextMatcher1.doMatch("31D68959-4E61-43F7-B1AC-AC033303C8EE");
        boolean boolean6 = simpleTextMatcher1.doMatch("dcae14f6-99fc-4a48-a420-37c965fde608");
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
    }

    @Test
    public void test14742() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest29.test14742");
        java.io.Writer writer0 = null;
        org.apache.rat.report.xml.writer.impl.base.XmlWriter xmlWriter1 = new org.apache.rat.report.xml.writer.impl.base.XmlWriter(writer0);
        org.apache.rat.report.claim.impl.xml.SimpleXmlClaimReporter simpleXmlClaimReporter2 = new org.apache.rat.report.claim.impl.xml.SimpleXmlClaimReporter((org.apache.rat.report.xml.writer.IXmlWriter) xmlWriter1);
        org.apache.rat.report.claim.impl.xml.SimpleXmlClaimReporter simpleXmlClaimReporter3 = new org.apache.rat.report.claim.impl.xml.SimpleXmlClaimReporter((org.apache.rat.report.xml.writer.IXmlWriter) xmlWriter1);
        org.apache.rat.report.claim.impl.xml.SimpleXmlClaimReporter simpleXmlClaimReporter4 = new org.apache.rat.report.claim.impl.xml.SimpleXmlClaimReporter((org.apache.rat.report.xml.writer.IXmlWriter) xmlWriter1);
        org.apache.rat.report.claim.impl.xml.SimpleXmlClaimReporter simpleXmlClaimReporter5 = new org.apache.rat.report.claim.impl.xml.SimpleXmlClaimReporter((org.apache.rat.report.xml.writer.IXmlWriter) xmlWriter1);
        org.apache.rat.report.claim.impl.xml.SimpleXmlClaimReporter simpleXmlClaimReporter6 = new org.apache.rat.report.claim.impl.xml.SimpleXmlClaimReporter((org.apache.rat.report.xml.writer.IXmlWriter) xmlWriter1);
        org.apache.rat.report.claim.impl.xml.SimpleXmlClaimReporter simpleXmlClaimReporter7 = new org.apache.rat.report.claim.impl.xml.SimpleXmlClaimReporter((org.apache.rat.report.xml.writer.IXmlWriter) xmlWriter1);
        org.apache.rat.report.claim.impl.xml.SimpleXmlClaimReporter simpleXmlClaimReporter8 = new org.apache.rat.report.claim.impl.xml.SimpleXmlClaimReporter((org.apache.rat.report.xml.writer.IXmlWriter) xmlWriter1);
        org.apache.rat.report.claim.impl.xml.SimpleXmlClaimReporter simpleXmlClaimReporter9 = new org.apache.rat.report.claim.impl.xml.SimpleXmlClaimReporter((org.apache.rat.report.xml.writer.IXmlWriter) xmlWriter1);
        org.apache.rat.report.claim.impl.xml.SimpleXmlClaimReporter simpleXmlClaimReporter10 = new org.apache.rat.report.claim.impl.xml.SimpleXmlClaimReporter((org.apache.rat.report.xml.writer.IXmlWriter) xmlWriter1);
        org.apache.rat.report.claim.impl.xml.SimpleXmlClaimReporter simpleXmlClaimReporter11 = new org.apache.rat.report.claim.impl.xml.SimpleXmlClaimReporter((org.apache.rat.report.xml.writer.IXmlWriter) xmlWriter1);
        org.apache.rat.report.claim.impl.xml.SimpleXmlClaimReporter simpleXmlClaimReporter12 = new org.apache.rat.report.claim.impl.xml.SimpleXmlClaimReporter((org.apache.rat.report.xml.writer.IXmlWriter) xmlWriter1);
        org.apache.rat.report.claim.impl.xml.SimpleXmlClaimReporter simpleXmlClaimReporter13 = new org.apache.rat.report.claim.impl.xml.SimpleXmlClaimReporter((org.apache.rat.report.xml.writer.IXmlWriter) xmlWriter1);
        org.apache.rat.report.claim.impl.xml.SimpleXmlClaimReporter simpleXmlClaimReporter14 = new org.apache.rat.report.claim.impl.xml.SimpleXmlClaimReporter((org.apache.rat.report.xml.writer.IXmlWriter) xmlWriter1);
        org.apache.rat.report.claim.impl.xml.SimpleXmlClaimReporter simpleXmlClaimReporter15 = new org.apache.rat.report.claim.impl.xml.SimpleXmlClaimReporter((org.apache.rat.report.xml.writer.IXmlWriter) xmlWriter1);
        org.apache.rat.report.claim.impl.xml.SimpleXmlClaimReporter simpleXmlClaimReporter16 = new org.apache.rat.report.claim.impl.xml.SimpleXmlClaimReporter((org.apache.rat.report.xml.writer.IXmlWriter) xmlWriter1);
        org.apache.rat.report.claim.impl.xml.SimpleXmlClaimReporter simpleXmlClaimReporter17 = new org.apache.rat.report.claim.impl.xml.SimpleXmlClaimReporter((org.apache.rat.report.xml.writer.IXmlWriter) xmlWriter1);
        org.apache.rat.report.claim.impl.xml.SimpleXmlClaimReporter simpleXmlClaimReporter18 = new org.apache.rat.report.claim.impl.xml.SimpleXmlClaimReporter((org.apache.rat.report.xml.writer.IXmlWriter) xmlWriter1);
        // The following exception was thrown during execution in test generation
        try {
            org.apache.rat.report.xml.writer.IXmlWriter iXmlWriter21 = xmlWriter1.attribute((java.lang.CharSequence) "bc97cad8-1b92-449d-8dd7-6a0a69c8774d", (java.lang.CharSequence) "PLAIN");
            org.junit.Assert.fail("Expected exception of type org.apache.rat.report.xml.writer.OperationNotAllowedException; message: Close called before an element has been opened.");
        } catch (org.apache.rat.report.xml.writer.OperationNotAllowedException e) {
            // Expected exception.
        }
    }

    @Test
    public void test14743() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest29.test14743");
        org.apache.rat.utils.Log log0 = null;
        org.apache.rat.ReportConfiguration reportConfiguration1 = new org.apache.rat.ReportConfiguration(log0);
        java.io.FilenameFilter filenameFilter2 = reportConfiguration1.getInputFileFilter();
        org.apache.rat.license.LicenseSetFactory.LicenseFilter licenseFilter3 = org.apache.rat.license.LicenseSetFactory.LicenseFilter.all;
        java.util.SortedSet<org.apache.rat.license.ILicense> iLicenseSet4 = reportConfiguration1.getLicenses(licenseFilter3);
        org.apache.rat.license.ILicenseFamily iLicenseFamily5 = null;
        reportConfiguration1.addFamily(iLicenseFamily5);
        org.apache.rat.license.ILicense iLicense7 = null;
        reportConfiguration1.addLicense(iLicense7);
        org.apache.commons.io.function.IOSupplier<java.io.OutputStream> outputStreamIOSupplier9 = reportConfiguration1.getOutput();
        org.junit.Assert.assertNull(filenameFilter2);
        org.junit.Assert.assertTrue("'" + licenseFilter3 + "' != '" + org.apache.rat.license.LicenseSetFactory.LicenseFilter.all + "'", licenseFilter3.equals(org.apache.rat.license.LicenseSetFactory.LicenseFilter.all));
        org.junit.Assert.assertNotNull(iLicenseSet4);
        org.junit.Assert.assertNotNull(outputStreamIOSupplier9);
    }

    @Test
    public void test14744() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest29.test14744");
        org.apache.rat.analysis.matchers.SimpleTextMatcher simpleTextMatcher1 = new org.apache.rat.analysis.matchers.SimpleTextMatcher("hi!");
        org.apache.rat.analysis.matchers.NotMatcher notMatcher2 = new org.apache.rat.analysis.matchers.NotMatcher((org.apache.rat.analysis.IHeaderMatcher) simpleTextMatcher1);
        org.apache.rat.analysis.IHeaderMatcher.State state3 = simpleTextMatcher1.finalizeState();
        org.junit.Assert.assertTrue("'" + state3 + "' != '" + org.apache.rat.analysis.IHeaderMatcher.State.f + "'", state3.equals(org.apache.rat.analysis.IHeaderMatcher.State.f));
    }

    @Test
    public void test14745() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest29.test14745");
        org.apache.rat.Defaults.Builder builder0 = org.apache.rat.Defaults.builder();
        org.apache.rat.Defaults defaults1 = builder0.build();
        org.apache.rat.Defaults.Builder builder2 = builder0.noDefault();
        org.apache.rat.Defaults.Builder builder4 = builder0.add("W3C Document Copyright");
        org.apache.rat.Defaults.Builder builder6 = builder0.add("9c36f068-9920-4c66-98c2-ba24e3dffa9c");
        org.apache.rat.Defaults.Builder builder7 = builder6.noDefault();
        org.apache.rat.Defaults.Builder builder8 = builder6.noDefault();
        org.junit.Assert.assertNotNull(builder0);
        org.junit.Assert.assertNotNull(defaults1);
        org.junit.Assert.assertNotNull(builder2);
        org.junit.Assert.assertNotNull(builder4);
        org.junit.Assert.assertNotNull(builder6);
        org.junit.Assert.assertNotNull(builder7);
        org.junit.Assert.assertNotNull(builder8);
    }

    @Test
    public void test14746() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest29.test14746");
        org.apache.rat.utils.Log log0 = null;
        org.apache.rat.ReportConfiguration reportConfiguration1 = new org.apache.rat.ReportConfiguration(log0);
        java.io.FilenameFilter filenameFilter2 = reportConfiguration1.getInputFileFilter();
        org.apache.rat.license.LicenseSetFactory.LicenseFilter licenseFilter3 = org.apache.rat.license.LicenseSetFactory.LicenseFilter.all;
        java.util.SortedSet<org.apache.rat.license.ILicense> iLicenseSet4 = reportConfiguration1.getLicenses(licenseFilter3);
        org.apache.rat.config.AddLicenseHeaders addLicenseHeaders5 = org.apache.rat.config.AddLicenseHeaders.FALSE;
        reportConfiguration1.setAddLicenseHeaders(addLicenseHeaders5);
        org.apache.rat.utils.Log log7 = null;
        org.apache.rat.ReportConfiguration reportConfiguration8 = new org.apache.rat.ReportConfiguration(log7);
        org.apache.rat.report.claim.ClaimStatistic claimStatistic9 = org.apache.rat.Reporter.report(reportConfiguration8);
        org.apache.rat.license.LicenseSetFactory.LicenseFilter licenseFilter10 = org.apache.rat.license.LicenseSetFactory.LicenseFilter.all;
        org.apache.rat.Reporter.listLicenses(reportConfiguration8, licenseFilter10);
        org.apache.rat.Reporter.listLicenses(reportConfiguration1, licenseFilter10);
        org.apache.rat.utils.Log log13 = null;
        org.apache.rat.ReportConfiguration reportConfiguration14 = new org.apache.rat.ReportConfiguration(log13);
        java.io.FilenameFilter filenameFilter15 = reportConfiguration14.getInputFileFilter();
        org.apache.rat.license.LicenseSetFactory.LicenseFilter licenseFilter16 = org.apache.rat.license.LicenseSetFactory.LicenseFilter.all;
        java.util.SortedSet<org.apache.rat.license.ILicense> iLicenseSet17 = reportConfiguration14.getLicenses(licenseFilter16);
        org.apache.rat.config.AddLicenseHeaders addLicenseHeaders18 = org.apache.rat.config.AddLicenseHeaders.FALSE;
        reportConfiguration14.setAddLicenseHeaders(addLicenseHeaders18);
        org.apache.rat.utils.Log log20 = null;
        org.apache.rat.ReportConfiguration reportConfiguration21 = new org.apache.rat.ReportConfiguration(log20);
        org.apache.rat.report.claim.ClaimStatistic claimStatistic22 = org.apache.rat.Reporter.report(reportConfiguration21);
        org.apache.rat.license.LicenseSetFactory.LicenseFilter licenseFilter23 = org.apache.rat.license.LicenseSetFactory.LicenseFilter.all;
        org.apache.rat.Reporter.listLicenses(reportConfiguration21, licenseFilter23);
        org.apache.rat.Reporter.listLicenses(reportConfiguration14, licenseFilter23);
        org.apache.rat.Reporter.listLicenses(reportConfiguration1, licenseFilter23);
        org.apache.rat.utils.Log log27 = null;
        org.apache.rat.ReportConfiguration reportConfiguration28 = new org.apache.rat.ReportConfiguration(log27);
        org.apache.commons.io.function.IOSupplier<java.io.OutputStream> outputStreamIOSupplier29 = reportConfiguration28.getOutput();
        reportConfiguration1.setOut(outputStreamIOSupplier29);
        org.apache.rat.utils.Log.Level level31 = org.apache.rat.utils.Log.Level.WARN;
        reportConfiguration1.logLicenseCollisions(level31);
        org.apache.commons.io.filefilter.IOFileFilter iOFileFilter33 = reportConfiguration1.getDirectoryFilter();
        java.nio.file.Path path34 = null;
        java.nio.file.attribute.BasicFileAttributes basicFileAttributes35 = null;
        java.nio.file.FileVisitResult fileVisitResult36 = iOFileFilter33.accept(path34, basicFileAttributes35);
        org.apache.commons.io.filefilter.IOFileFilter iOFileFilter37 = iOFileFilter33.negate();
        org.apache.commons.io.filefilter.IOFileFilter iOFileFilter38 = iOFileFilter37.negate();
        org.apache.rat.utils.Log log39 = null;
        org.apache.rat.ReportConfiguration reportConfiguration40 = new org.apache.rat.ReportConfiguration(log39);
        org.apache.rat.report.claim.ClaimStatistic claimStatistic41 = org.apache.rat.Reporter.report(reportConfiguration40);
        org.apache.rat.utils.ReportingSet.Options options42 = org.apache.rat.utils.ReportingSet.Options.OVERWRITE;
        reportConfiguration40.licenseDuplicateOption(options42);
        org.apache.commons.io.filefilter.IOFileFilter iOFileFilter44 = reportConfiguration40.getDirectoryFilter();
        org.apache.commons.io.filefilter.IOFileFilter iOFileFilter45 = iOFileFilter37.and(iOFileFilter44);
        java.nio.file.Path path46 = null;
        java.nio.file.attribute.BasicFileAttributes basicFileAttributes47 = null;
        java.nio.file.FileVisitResult fileVisitResult48 = iOFileFilter45.accept(path46, basicFileAttributes47);
        org.junit.Assert.assertNull(filenameFilter2);
        org.junit.Assert.assertTrue("'" + licenseFilter3 + "' != '" + org.apache.rat.license.LicenseSetFactory.LicenseFilter.all + "'", licenseFilter3.equals(org.apache.rat.license.LicenseSetFactory.LicenseFilter.all));
        org.junit.Assert.assertNotNull(iLicenseSet4);
        org.junit.Assert.assertTrue("'" + addLicenseHeaders5 + "' != '" + org.apache.rat.config.AddLicenseHeaders.FALSE + "'", addLicenseHeaders5.equals(org.apache.rat.config.AddLicenseHeaders.FALSE));
        org.junit.Assert.assertNull(claimStatistic9);
        org.junit.Assert.assertTrue("'" + licenseFilter10 + "' != '" + org.apache.rat.license.LicenseSetFactory.LicenseFilter.all + "'", licenseFilter10.equals(org.apache.rat.license.LicenseSetFactory.LicenseFilter.all));
        org.junit.Assert.assertNull(filenameFilter15);
        org.junit.Assert.assertTrue("'" + licenseFilter16 + "' != '" + org.apache.rat.license.LicenseSetFactory.LicenseFilter.all + "'", licenseFilter16.equals(org.apache.rat.license.LicenseSetFactory.LicenseFilter.all));
        org.junit.Assert.assertNotNull(iLicenseSet17);
        org.junit.Assert.assertTrue("'" + addLicenseHeaders18 + "' != '" + org.apache.rat.config.AddLicenseHeaders.FALSE + "'", addLicenseHeaders18.equals(org.apache.rat.config.AddLicenseHeaders.FALSE));
        org.junit.Assert.assertNull(claimStatistic22);
        org.junit.Assert.assertTrue("'" + licenseFilter23 + "' != '" + org.apache.rat.license.LicenseSetFactory.LicenseFilter.all + "'", licenseFilter23.equals(org.apache.rat.license.LicenseSetFactory.LicenseFilter.all));
        org.junit.Assert.assertNotNull(outputStreamIOSupplier29);
        org.junit.Assert.assertTrue("'" + level31 + "' != '" + org.apache.rat.utils.Log.Level.WARN + "'", level31.equals(org.apache.rat.utils.Log.Level.WARN));
        org.junit.Assert.assertNotNull(iOFileFilter33);
        org.junit.Assert.assertTrue("'" + fileVisitResult36 + "' != '" + java.nio.file.FileVisitResult.TERMINATE + "'", fileVisitResult36.equals(java.nio.file.FileVisitResult.TERMINATE));
        org.junit.Assert.assertNotNull(iOFileFilter37);
        org.junit.Assert.assertNotNull(iOFileFilter38);
        org.junit.Assert.assertNull(claimStatistic41);
        org.junit.Assert.assertTrue("'" + options42 + "' != '" + org.apache.rat.utils.ReportingSet.Options.OVERWRITE + "'", options42.equals(org.apache.rat.utils.ReportingSet.Options.OVERWRITE));
        org.junit.Assert.assertNotNull(iOFileFilter44);
        org.junit.Assert.assertNotNull(iOFileFilter45);
        org.junit.Assert.assertTrue("'" + fileVisitResult48 + "' != '" + java.nio.file.FileVisitResult.TERMINATE + "'", fileVisitResult48.equals(java.nio.file.FileVisitResult.TERMINATE));
    }

    @Test
    public void test14747() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest29.test14747");
        org.apache.rat.utils.Log log0 = null;
        org.apache.rat.ReportConfiguration reportConfiguration1 = new org.apache.rat.ReportConfiguration(log0);
        java.io.FilenameFilter filenameFilter2 = reportConfiguration1.getInputFileFilter();
        org.apache.rat.license.LicenseSetFactory.LicenseFilter licenseFilter3 = org.apache.rat.license.LicenseSetFactory.LicenseFilter.all;
        java.util.SortedSet<org.apache.rat.license.ILicense> iLicenseSet4 = reportConfiguration1.getLicenses(licenseFilter3);
        org.apache.rat.config.AddLicenseHeaders addLicenseHeaders5 = org.apache.rat.config.AddLicenseHeaders.FALSE;
        reportConfiguration1.setAddLicenseHeaders(addLicenseHeaders5);
        org.apache.rat.utils.Log log7 = null;
        org.apache.rat.ReportConfiguration reportConfiguration8 = new org.apache.rat.ReportConfiguration(log7);
        org.apache.rat.report.claim.ClaimStatistic claimStatistic9 = org.apache.rat.Reporter.report(reportConfiguration8);
        org.apache.rat.license.LicenseSetFactory.LicenseFilter licenseFilter10 = org.apache.rat.license.LicenseSetFactory.LicenseFilter.all;
        org.apache.rat.Reporter.listLicenses(reportConfiguration8, licenseFilter10);
        org.apache.rat.Reporter.listLicenses(reportConfiguration1, licenseFilter10);
        org.apache.rat.utils.Log log13 = null;
        org.apache.rat.ReportConfiguration reportConfiguration14 = new org.apache.rat.ReportConfiguration(log13);
        java.io.FilenameFilter filenameFilter15 = reportConfiguration14.getInputFileFilter();
        org.apache.rat.license.LicenseSetFactory.LicenseFilter licenseFilter16 = org.apache.rat.license.LicenseSetFactory.LicenseFilter.all;
        java.util.SortedSet<org.apache.rat.license.ILicense> iLicenseSet17 = reportConfiguration14.getLicenses(licenseFilter16);
        org.apache.rat.config.AddLicenseHeaders addLicenseHeaders18 = org.apache.rat.config.AddLicenseHeaders.FALSE;
        reportConfiguration14.setAddLicenseHeaders(addLicenseHeaders18);
        org.apache.rat.utils.Log log20 = null;
        org.apache.rat.ReportConfiguration reportConfiguration21 = new org.apache.rat.ReportConfiguration(log20);
        org.apache.rat.report.claim.ClaimStatistic claimStatistic22 = org.apache.rat.Reporter.report(reportConfiguration21);
        org.apache.rat.license.LicenseSetFactory.LicenseFilter licenseFilter23 = org.apache.rat.license.LicenseSetFactory.LicenseFilter.all;
        org.apache.rat.Reporter.listLicenses(reportConfiguration21, licenseFilter23);
        org.apache.rat.Reporter.listLicenses(reportConfiguration14, licenseFilter23);
        org.apache.rat.Reporter.listLicenses(reportConfiguration1, licenseFilter23);
        java.io.FilenameFilter filenameFilter27 = reportConfiguration1.getInputFileFilter();
        reportConfiguration1.setStyleReport(false);
        org.apache.commons.io.function.IOSupplier<java.io.InputStream> inputStreamIOSupplier30 = org.apache.rat.Defaults.getPlainStyleSheet();
        reportConfiguration1.setStyleSheet(inputStreamIOSupplier30);
        org.apache.commons.io.filefilter.IOFileFilter iOFileFilter32 = reportConfiguration1.getDirectoryFilter();
        reportConfiguration1.addApprovedLicenseCategory("d4dd3824-2602-4624-aa0f-4dff524ea8ef");
        org.junit.Assert.assertNull(filenameFilter2);
        org.junit.Assert.assertTrue("'" + licenseFilter3 + "' != '" + org.apache.rat.license.LicenseSetFactory.LicenseFilter.all + "'", licenseFilter3.equals(org.apache.rat.license.LicenseSetFactory.LicenseFilter.all));
        org.junit.Assert.assertNotNull(iLicenseSet4);
        org.junit.Assert.assertTrue("'" + addLicenseHeaders5 + "' != '" + org.apache.rat.config.AddLicenseHeaders.FALSE + "'", addLicenseHeaders5.equals(org.apache.rat.config.AddLicenseHeaders.FALSE));
        org.junit.Assert.assertNull(claimStatistic9);
        org.junit.Assert.assertTrue("'" + licenseFilter10 + "' != '" + org.apache.rat.license.LicenseSetFactory.LicenseFilter.all + "'", licenseFilter10.equals(org.apache.rat.license.LicenseSetFactory.LicenseFilter.all));
        org.junit.Assert.assertNull(filenameFilter15);
        org.junit.Assert.assertTrue("'" + licenseFilter16 + "' != '" + org.apache.rat.license.LicenseSetFactory.LicenseFilter.all + "'", licenseFilter16.equals(org.apache.rat.license.LicenseSetFactory.LicenseFilter.all));
        org.junit.Assert.assertNotNull(iLicenseSet17);
        org.junit.Assert.assertTrue("'" + addLicenseHeaders18 + "' != '" + org.apache.rat.config.AddLicenseHeaders.FALSE + "'", addLicenseHeaders18.equals(org.apache.rat.config.AddLicenseHeaders.FALSE));
        org.junit.Assert.assertNull(claimStatistic22);
        org.junit.Assert.assertTrue("'" + licenseFilter23 + "' != '" + org.apache.rat.license.LicenseSetFactory.LicenseFilter.all + "'", licenseFilter23.equals(org.apache.rat.license.LicenseSetFactory.LicenseFilter.all));
        org.junit.Assert.assertNull(filenameFilter27);
        org.junit.Assert.assertNotNull(inputStreamIOSupplier30);
        org.junit.Assert.assertNotNull(iOFileFilter32);
    }

    @Test
    public void test14748() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest29.test14748");
        org.apache.rat.utils.Log log0 = null;
        org.apache.rat.ReportConfiguration reportConfiguration1 = new org.apache.rat.ReportConfiguration(log0);
        org.apache.rat.report.claim.ClaimStatistic claimStatistic2 = org.apache.rat.Reporter.report(reportConfiguration1);
        org.apache.rat.utils.Log log3 = null;
        org.apache.rat.ReportConfiguration reportConfiguration4 = new org.apache.rat.ReportConfiguration(log3);
        org.apache.rat.report.claim.ClaimStatistic claimStatistic5 = org.apache.rat.Reporter.report(reportConfiguration4);
        org.apache.rat.utils.ReportingSet.Options options6 = org.apache.rat.utils.ReportingSet.Options.OVERWRITE;
        reportConfiguration4.licenseDuplicateOption(options6);
        reportConfiguration1.familyDuplicateOption(options6);
        org.apache.commons.io.function.IOSupplier<java.io.PrintWriter> printWriterIOSupplier9 = reportConfiguration1.getWriter();
        org.apache.rat.report.IReportable iReportable10 = reportConfiguration1.getReportable();
        boolean boolean11 = reportConfiguration1.isAddingLicensesForced();
        org.junit.Assert.assertNull(claimStatistic2);
        org.junit.Assert.assertNull(claimStatistic5);
        org.junit.Assert.assertTrue("'" + options6 + "' != '" + org.apache.rat.utils.ReportingSet.Options.OVERWRITE + "'", options6.equals(org.apache.rat.utils.ReportingSet.Options.OVERWRITE));
        org.junit.Assert.assertNotNull(printWriterIOSupplier9);
        org.junit.Assert.assertNull(iReportable10);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
    }

    @Test
    public void test14749() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest29.test14749");
        org.apache.rat.report.claim.ClaimStatistic claimStatistic0 = new org.apache.rat.report.claim.ClaimStatistic();
        claimStatistic0.setNumUnApproved((int) (short) 10);
        java.util.Map<java.lang.String, java.lang.Integer> strMap3 = null;
        claimStatistic0.setDocumentCategoryMap(strMap3);
        claimStatistic0.setNumUnknown((int) ' ');
        claimStatistic0.setNumUnknown((int) (short) 10);
        java.util.Map<java.lang.String, java.lang.Integer> strMap9 = claimStatistic0.getLicenseFileCodeMap();
        int int10 = claimStatistic0.getNumGenerated();
        int int11 = claimStatistic0.getNumUnApproved();
        claimStatistic0.setNumUnknown(2);
        org.junit.Assert.assertNull(strMap9);
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + 0 + "'", int10 == 0);
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 10 + "'", int11 == 10);
    }

    @Test
    public void test14750() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest29.test14750");
        org.apache.rat.utils.Log log2 = null;
        org.apache.rat.ReportConfiguration reportConfiguration3 = new org.apache.rat.ReportConfiguration(log2);
        org.apache.commons.io.function.IOSupplier<java.io.OutputStream> outputStreamIOSupplier4 = reportConfiguration3.getOutput();
        org.apache.commons.io.filefilter.IOFileFilter iOFileFilter5 = reportConfiguration3.getDirectoryFilter();
        org.apache.rat.utils.Log log6 = null;
        org.apache.rat.ReportConfiguration reportConfiguration7 = new org.apache.rat.ReportConfiguration(log6);
        reportConfiguration7.addApprovedLicenseCategory(".cvsignore");
        org.apache.rat.utils.Log log10 = null;
        org.apache.rat.ReportConfiguration reportConfiguration11 = new org.apache.rat.ReportConfiguration(log10);
        java.io.FilenameFilter filenameFilter12 = reportConfiguration11.getInputFileFilter();
        org.apache.rat.license.LicenseSetFactory.LicenseFilter licenseFilter13 = org.apache.rat.license.LicenseSetFactory.LicenseFilter.all;
        java.util.SortedSet<org.apache.rat.license.ILicense> iLicenseSet14 = reportConfiguration11.getLicenses(licenseFilter13);
        reportConfiguration7.addLicensesIfNotPresent((java.util.Collection<org.apache.rat.license.ILicense>) iLicenseSet14);
        java.io.FilenameFilter filenameFilter16 = reportConfiguration7.getInputFileFilter();
        org.apache.rat.utils.Log log17 = null;
        org.apache.rat.ReportConfiguration reportConfiguration18 = new org.apache.rat.ReportConfiguration(log17);
        java.io.FilenameFilter filenameFilter19 = reportConfiguration18.getInputFileFilter();
        org.apache.rat.license.LicenseSetFactory.LicenseFilter licenseFilter20 = org.apache.rat.license.LicenseSetFactory.LicenseFilter.all;
        java.util.SortedSet<org.apache.rat.license.ILicense> iLicenseSet21 = reportConfiguration18.getLicenses(licenseFilter20);
        org.apache.rat.config.AddLicenseHeaders addLicenseHeaders22 = org.apache.rat.config.AddLicenseHeaders.FALSE;
        reportConfiguration18.setAddLicenseHeaders(addLicenseHeaders22);
        org.apache.rat.utils.Log log24 = null;
        org.apache.rat.ReportConfiguration reportConfiguration25 = new org.apache.rat.ReportConfiguration(log24);
        org.apache.rat.report.claim.ClaimStatistic claimStatistic26 = org.apache.rat.Reporter.report(reportConfiguration25);
        org.apache.rat.license.LicenseSetFactory.LicenseFilter licenseFilter27 = org.apache.rat.license.LicenseSetFactory.LicenseFilter.all;
        org.apache.rat.Reporter.listLicenses(reportConfiguration25, licenseFilter27);
        org.apache.rat.Reporter.listLicenses(reportConfiguration18, licenseFilter27);
        org.apache.rat.utils.Log log30 = null;
        org.apache.rat.ReportConfiguration reportConfiguration31 = new org.apache.rat.ReportConfiguration(log30);
        java.io.FilenameFilter filenameFilter32 = reportConfiguration31.getInputFileFilter();
        org.apache.rat.license.LicenseSetFactory.LicenseFilter licenseFilter33 = org.apache.rat.license.LicenseSetFactory.LicenseFilter.all;
        java.util.SortedSet<org.apache.rat.license.ILicense> iLicenseSet34 = reportConfiguration31.getLicenses(licenseFilter33);
        org.apache.rat.config.AddLicenseHeaders addLicenseHeaders35 = org.apache.rat.config.AddLicenseHeaders.FALSE;
        reportConfiguration31.setAddLicenseHeaders(addLicenseHeaders35);
        org.apache.rat.utils.Log log37 = null;
        org.apache.rat.ReportConfiguration reportConfiguration38 = new org.apache.rat.ReportConfiguration(log37);
        org.apache.rat.report.claim.ClaimStatistic claimStatistic39 = org.apache.rat.Reporter.report(reportConfiguration38);
        org.apache.rat.license.LicenseSetFactory.LicenseFilter licenseFilter40 = org.apache.rat.license.LicenseSetFactory.LicenseFilter.all;
        org.apache.rat.Reporter.listLicenses(reportConfiguration38, licenseFilter40);
        org.apache.rat.Reporter.listLicenses(reportConfiguration31, licenseFilter40);
        java.util.SortedSet<org.apache.rat.license.ILicenseFamily> iLicenseFamilySet43 = reportConfiguration18.getLicenseFamilies(licenseFilter40);
        org.apache.rat.Reporter.listLicenseFamilies(reportConfiguration7, licenseFilter40);
        java.util.SortedSet<org.apache.rat.license.ILicenseFamily> iLicenseFamilySet45 = reportConfiguration3.getLicenseFamilies(licenseFilter40);
        org.apache.rat.policy.DefaultPolicy defaultPolicy46 = new org.apache.rat.policy.DefaultPolicy((java.util.Collection<org.apache.rat.license.ILicenseFamily>) iLicenseFamilySet45);
        org.apache.rat.license.ILicenseFamily iLicenseFamily47 = org.apache.rat.license.LicenseFamilySetFactory.search("d0774232cdef4507a8b6ac22a273dde3", iLicenseFamilySet45);
        org.apache.rat.policy.DefaultPolicy defaultPolicy48 = new org.apache.rat.policy.DefaultPolicy((java.util.Collection<org.apache.rat.license.ILicenseFamily>) iLicenseFamilySet45);
        org.apache.rat.license.ILicenseFamily iLicenseFamily49 = org.apache.rat.license.LicenseFamilySetFactory.search("TextBuilder: ", iLicenseFamilySet45);
        org.junit.Assert.assertNotNull(outputStreamIOSupplier4);
        org.junit.Assert.assertNotNull(iOFileFilter5);
        org.junit.Assert.assertNull(filenameFilter12);
        org.junit.Assert.assertTrue("'" + licenseFilter13 + "' != '" + org.apache.rat.license.LicenseSetFactory.LicenseFilter.all + "'", licenseFilter13.equals(org.apache.rat.license.LicenseSetFactory.LicenseFilter.all));
        org.junit.Assert.assertNotNull(iLicenseSet14);
        org.junit.Assert.assertNull(filenameFilter16);
        org.junit.Assert.assertNull(filenameFilter19);
        org.junit.Assert.assertTrue("'" + licenseFilter20 + "' != '" + org.apache.rat.license.LicenseSetFactory.LicenseFilter.all + "'", licenseFilter20.equals(org.apache.rat.license.LicenseSetFactory.LicenseFilter.all));
        org.junit.Assert.assertNotNull(iLicenseSet21);
        org.junit.Assert.assertTrue("'" + addLicenseHeaders22 + "' != '" + org.apache.rat.config.AddLicenseHeaders.FALSE + "'", addLicenseHeaders22.equals(org.apache.rat.config.AddLicenseHeaders.FALSE));
        org.junit.Assert.assertNull(claimStatistic26);
        org.junit.Assert.assertTrue("'" + licenseFilter27 + "' != '" + org.apache.rat.license.LicenseSetFactory.LicenseFilter.all + "'", licenseFilter27.equals(org.apache.rat.license.LicenseSetFactory.LicenseFilter.all));
        org.junit.Assert.assertNull(filenameFilter32);
        org.junit.Assert.assertTrue("'" + licenseFilter33 + "' != '" + org.apache.rat.license.LicenseSetFactory.LicenseFilter.all + "'", licenseFilter33.equals(org.apache.rat.license.LicenseSetFactory.LicenseFilter.all));
        org.junit.Assert.assertNotNull(iLicenseSet34);
        org.junit.Assert.assertTrue("'" + addLicenseHeaders35 + "' != '" + org.apache.rat.config.AddLicenseHeaders.FALSE + "'", addLicenseHeaders35.equals(org.apache.rat.config.AddLicenseHeaders.FALSE));
        org.junit.Assert.assertNull(claimStatistic39);
        org.junit.Assert.assertTrue("'" + licenseFilter40 + "' != '" + org.apache.rat.license.LicenseSetFactory.LicenseFilter.all + "'", licenseFilter40.equals(org.apache.rat.license.LicenseSetFactory.LicenseFilter.all));
        org.junit.Assert.assertNotNull(iLicenseFamilySet43);
        org.junit.Assert.assertNotNull(iLicenseFamilySet45);
        org.junit.Assert.assertNull(iLicenseFamily47);
        org.junit.Assert.assertNull(iLicenseFamily49);
    }

    @Test
    public void test14751() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest29.test14751");
        org.apache.rat.license.ILicenseFamily[] iLicenseFamilyArray0 = new org.apache.rat.license.ILicenseFamily[] {};
        java.util.ArrayList<org.apache.rat.license.ILicenseFamily> iLicenseFamilyList1 = new java.util.ArrayList<org.apache.rat.license.ILicenseFamily>();
        boolean boolean2 = java.util.Collections.addAll((java.util.Collection<org.apache.rat.license.ILicenseFamily>) iLicenseFamilyList1, iLicenseFamilyArray0);
        org.apache.rat.policy.DefaultPolicy defaultPolicy3 = new org.apache.rat.policy.DefaultPolicy((java.util.Collection<org.apache.rat.license.ILicenseFamily>) iLicenseFamilyList1);
        org.apache.rat.api.Document document4 = null;
        defaultPolicy3.analyse(document4);
        java.util.SortedSet<org.apache.rat.license.ILicenseFamily> iLicenseFamilySet6 = defaultPolicy3.getApprovedLicenseNames();
        org.apache.rat.utils.Log log7 = null;
        org.apache.rat.ReportConfiguration reportConfiguration8 = new org.apache.rat.ReportConfiguration(log7);
        java.io.FilenameFilter filenameFilter9 = reportConfiguration8.getInputFileFilter();
        org.apache.rat.license.LicenseSetFactory.LicenseFilter licenseFilter10 = org.apache.rat.license.LicenseSetFactory.LicenseFilter.all;
        java.util.SortedSet<org.apache.rat.license.ILicense> iLicenseSet11 = reportConfiguration8.getLicenses(licenseFilter10);
        org.apache.rat.config.AddLicenseHeaders addLicenseHeaders12 = org.apache.rat.config.AddLicenseHeaders.FALSE;
        reportConfiguration8.setAddLicenseHeaders(addLicenseHeaders12);
        org.apache.rat.utils.Log log14 = null;
        org.apache.rat.ReportConfiguration reportConfiguration15 = new org.apache.rat.ReportConfiguration(log14);
        org.apache.rat.report.claim.ClaimStatistic claimStatistic16 = org.apache.rat.Reporter.report(reportConfiguration15);
        org.apache.rat.license.LicenseSetFactory.LicenseFilter licenseFilter17 = org.apache.rat.license.LicenseSetFactory.LicenseFilter.all;
        org.apache.rat.Reporter.listLicenses(reportConfiguration15, licenseFilter17);
        org.apache.rat.Reporter.listLicenses(reportConfiguration8, licenseFilter17);
        org.apache.rat.utils.Log log20 = null;
        org.apache.rat.ReportConfiguration reportConfiguration21 = new org.apache.rat.ReportConfiguration(log20);
        java.io.FilenameFilter filenameFilter22 = reportConfiguration21.getInputFileFilter();
        org.apache.rat.license.LicenseSetFactory.LicenseFilter licenseFilter23 = org.apache.rat.license.LicenseSetFactory.LicenseFilter.all;
        java.util.SortedSet<org.apache.rat.license.ILicense> iLicenseSet24 = reportConfiguration21.getLicenses(licenseFilter23);
        org.apache.rat.config.AddLicenseHeaders addLicenseHeaders25 = org.apache.rat.config.AddLicenseHeaders.FALSE;
        reportConfiguration21.setAddLicenseHeaders(addLicenseHeaders25);
        org.apache.rat.utils.Log log27 = null;
        org.apache.rat.ReportConfiguration reportConfiguration28 = new org.apache.rat.ReportConfiguration(log27);
        org.apache.rat.report.claim.ClaimStatistic claimStatistic29 = org.apache.rat.Reporter.report(reportConfiguration28);
        org.apache.rat.license.LicenseSetFactory.LicenseFilter licenseFilter30 = org.apache.rat.license.LicenseSetFactory.LicenseFilter.all;
        org.apache.rat.Reporter.listLicenses(reportConfiguration28, licenseFilter30);
        org.apache.rat.Reporter.listLicenses(reportConfiguration21, licenseFilter30);
        org.apache.rat.Reporter.listLicenses(reportConfiguration8, licenseFilter30);
        java.io.FilenameFilter filenameFilter34 = reportConfiguration8.getInputFileFilter();
        org.apache.rat.utils.Log log35 = null;
        org.apache.rat.ReportConfiguration reportConfiguration36 = new org.apache.rat.ReportConfiguration(log35);
        java.io.FilenameFilter filenameFilter37 = reportConfiguration36.getInputFileFilter();
        org.apache.rat.license.LicenseSetFactory.LicenseFilter licenseFilter38 = org.apache.rat.license.LicenseSetFactory.LicenseFilter.all;
        java.util.SortedSet<org.apache.rat.license.ILicense> iLicenseSet39 = reportConfiguration36.getLicenses(licenseFilter38);
        org.apache.rat.config.AddLicenseHeaders addLicenseHeaders40 = org.apache.rat.config.AddLicenseHeaders.FALSE;
        reportConfiguration36.setAddLicenseHeaders(addLicenseHeaders40);
        org.apache.rat.utils.Log log42 = null;
        org.apache.rat.ReportConfiguration reportConfiguration43 = new org.apache.rat.ReportConfiguration(log42);
        org.apache.rat.report.claim.ClaimStatistic claimStatistic44 = org.apache.rat.Reporter.report(reportConfiguration43);
        org.apache.rat.license.LicenseSetFactory.LicenseFilter licenseFilter45 = org.apache.rat.license.LicenseSetFactory.LicenseFilter.all;
        org.apache.rat.Reporter.listLicenses(reportConfiguration43, licenseFilter45);
        org.apache.rat.Reporter.listLicenses(reportConfiguration36, licenseFilter45);
        org.apache.rat.utils.Log log48 = null;
        org.apache.rat.ReportConfiguration reportConfiguration49 = new org.apache.rat.ReportConfiguration(log48);
        java.io.FilenameFilter filenameFilter50 = reportConfiguration49.getInputFileFilter();
        org.apache.rat.license.LicenseSetFactory.LicenseFilter licenseFilter51 = org.apache.rat.license.LicenseSetFactory.LicenseFilter.all;
        java.util.SortedSet<org.apache.rat.license.ILicense> iLicenseSet52 = reportConfiguration49.getLicenses(licenseFilter51);
        org.apache.rat.config.AddLicenseHeaders addLicenseHeaders53 = org.apache.rat.config.AddLicenseHeaders.FALSE;
        reportConfiguration49.setAddLicenseHeaders(addLicenseHeaders53);
        org.apache.rat.utils.Log log55 = null;
        org.apache.rat.ReportConfiguration reportConfiguration56 = new org.apache.rat.ReportConfiguration(log55);
        org.apache.rat.report.claim.ClaimStatistic claimStatistic57 = org.apache.rat.Reporter.report(reportConfiguration56);
        org.apache.rat.license.LicenseSetFactory.LicenseFilter licenseFilter58 = org.apache.rat.license.LicenseSetFactory.LicenseFilter.all;
        org.apache.rat.Reporter.listLicenses(reportConfiguration56, licenseFilter58);
        org.apache.rat.Reporter.listLicenses(reportConfiguration49, licenseFilter58);
        org.apache.rat.Reporter.listLicenses(reportConfiguration36, licenseFilter58);
        java.util.SortedSet<org.apache.rat.license.ILicense> iLicenseSet62 = reportConfiguration8.getLicenses(licenseFilter58);
        boolean boolean63 = reportConfiguration8.isAddingLicensesForced();
        org.apache.rat.utils.Log log64 = null;
        org.apache.rat.ReportConfiguration reportConfiguration65 = new org.apache.rat.ReportConfiguration(log64);
        org.apache.rat.report.claim.ClaimStatistic claimStatistic66 = org.apache.rat.Reporter.report(reportConfiguration65);
        org.apache.rat.utils.Log log67 = null;
        org.apache.rat.ReportConfiguration reportConfiguration68 = new org.apache.rat.ReportConfiguration(log67);
        org.apache.rat.report.claim.ClaimStatistic claimStatistic69 = org.apache.rat.Reporter.report(reportConfiguration68);
        org.apache.rat.utils.ReportingSet.Options options70 = org.apache.rat.utils.ReportingSet.Options.OVERWRITE;
        reportConfiguration68.licenseDuplicateOption(options70);
        reportConfiguration65.familyDuplicateOption(options70);
        reportConfiguration8.familyDuplicateOption(options70);
        org.apache.rat.license.ILicenseFamily.Builder builder74 = org.apache.rat.license.ILicenseFamily.builder();
        java.lang.String str75 = builder74.getCategory();
        org.apache.rat.license.ILicenseFamily.Builder builder77 = builder74.setLicenseFamilyCategory("Copyright Builder: s:null e:null o:null");
        org.apache.rat.license.ILicenseFamily.Builder builder79 = builder77.setLicenseFamilyName("6486879f-fc81-4b57-aec7-c4c77d540c30");
        org.apache.rat.license.ILicenseFamily.Builder builder81 = builder79.setLicenseFamilyName("6620e9ee-d651-4c18-8162-edad6d18368e");
        reportConfiguration8.addFamily(builder79);
        org.apache.rat.license.ILicenseFamily.Builder builder84 = builder79.setLicenseFamilyCategory("NotBuilder: MathcerRefBuilder: null");
        org.apache.rat.license.ILicenseFamily.Builder builder86 = builder84.setLicenseFamilyCategory("58515fd1-71f9-42a1-b033-b509624129a7");
        org.apache.rat.license.ILicenseFamily.Builder builder88 = builder84.setLicenseFamilyName("SpdxBuilder: null http://org/apache/rat/meta-data#LicenseFamilyName");
        org.apache.rat.license.ILicenseFamily iLicenseFamily89 = builder84.build();
        defaultPolicy3.add(iLicenseFamily89);
        java.lang.String str91 = iLicenseFamily89.getFamilyCategory();
        org.junit.Assert.assertNotNull(iLicenseFamilyArray0);
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + false + "'", boolean2 == false);
        org.junit.Assert.assertNotNull(iLicenseFamilySet6);
        org.junit.Assert.assertNull(filenameFilter9);
        org.junit.Assert.assertTrue("'" + licenseFilter10 + "' != '" + org.apache.rat.license.LicenseSetFactory.LicenseFilter.all + "'", licenseFilter10.equals(org.apache.rat.license.LicenseSetFactory.LicenseFilter.all));
        org.junit.Assert.assertNotNull(iLicenseSet11);
        org.junit.Assert.assertTrue("'" + addLicenseHeaders12 + "' != '" + org.apache.rat.config.AddLicenseHeaders.FALSE + "'", addLicenseHeaders12.equals(org.apache.rat.config.AddLicenseHeaders.FALSE));
        org.junit.Assert.assertNull(claimStatistic16);
        org.junit.Assert.assertTrue("'" + licenseFilter17 + "' != '" + org.apache.rat.license.LicenseSetFactory.LicenseFilter.all + "'", licenseFilter17.equals(org.apache.rat.license.LicenseSetFactory.LicenseFilter.all));
        org.junit.Assert.assertNull(filenameFilter22);
        org.junit.Assert.assertTrue("'" + licenseFilter23 + "' != '" + org.apache.rat.license.LicenseSetFactory.LicenseFilter.all + "'", licenseFilter23.equals(org.apache.rat.license.LicenseSetFactory.LicenseFilter.all));
        org.junit.Assert.assertNotNull(iLicenseSet24);
        org.junit.Assert.assertTrue("'" + addLicenseHeaders25 + "' != '" + org.apache.rat.config.AddLicenseHeaders.FALSE + "'", addLicenseHeaders25.equals(org.apache.rat.config.AddLicenseHeaders.FALSE));
        org.junit.Assert.assertNull(claimStatistic29);
        org.junit.Assert.assertTrue("'" + licenseFilter30 + "' != '" + org.apache.rat.license.LicenseSetFactory.LicenseFilter.all + "'", licenseFilter30.equals(org.apache.rat.license.LicenseSetFactory.LicenseFilter.all));
        org.junit.Assert.assertNull(filenameFilter34);
        org.junit.Assert.assertNull(filenameFilter37);
        org.junit.Assert.assertTrue("'" + licenseFilter38 + "' != '" + org.apache.rat.license.LicenseSetFactory.LicenseFilter.all + "'", licenseFilter38.equals(org.apache.rat.license.LicenseSetFactory.LicenseFilter.all));
        org.junit.Assert.assertNotNull(iLicenseSet39);
        org.junit.Assert.assertTrue("'" + addLicenseHeaders40 + "' != '" + org.apache.rat.config.AddLicenseHeaders.FALSE + "'", addLicenseHeaders40.equals(org.apache.rat.config.AddLicenseHeaders.FALSE));
        org.junit.Assert.assertNull(claimStatistic44);
        org.junit.Assert.assertTrue("'" + licenseFilter45 + "' != '" + org.apache.rat.license.LicenseSetFactory.LicenseFilter.all + "'", licenseFilter45.equals(org.apache.rat.license.LicenseSetFactory.LicenseFilter.all));
        org.junit.Assert.assertNull(filenameFilter50);
        org.junit.Assert.assertTrue("'" + licenseFilter51 + "' != '" + org.apache.rat.license.LicenseSetFactory.LicenseFilter.all + "'", licenseFilter51.equals(org.apache.rat.license.LicenseSetFactory.LicenseFilter.all));
        org.junit.Assert.assertNotNull(iLicenseSet52);
        org.junit.Assert.assertTrue("'" + addLicenseHeaders53 + "' != '" + org.apache.rat.config.AddLicenseHeaders.FALSE + "'", addLicenseHeaders53.equals(org.apache.rat.config.AddLicenseHeaders.FALSE));
        org.junit.Assert.assertNull(claimStatistic57);
        org.junit.Assert.assertTrue("'" + licenseFilter58 + "' != '" + org.apache.rat.license.LicenseSetFactory.LicenseFilter.all + "'", licenseFilter58.equals(org.apache.rat.license.LicenseSetFactory.LicenseFilter.all));
        org.junit.Assert.assertNotNull(iLicenseSet62);
        org.junit.Assert.assertTrue("'" + boolean63 + "' != '" + false + "'", boolean63 == false);
        org.junit.Assert.assertNull(claimStatistic66);
        org.junit.Assert.assertNull(claimStatistic69);
        org.junit.Assert.assertTrue("'" + options70 + "' != '" + org.apache.rat.utils.ReportingSet.Options.OVERWRITE + "'", options70.equals(org.apache.rat.utils.ReportingSet.Options.OVERWRITE));
        org.junit.Assert.assertNotNull(builder74);
        org.junit.Assert.assertNull(str75);
        org.junit.Assert.assertNotNull(builder77);
        org.junit.Assert.assertNotNull(builder79);
        org.junit.Assert.assertNotNull(builder81);
        org.junit.Assert.assertNotNull(builder84);
        org.junit.Assert.assertNotNull(builder86);
        org.junit.Assert.assertNotNull(builder88);
        org.junit.Assert.assertNotNull(iLicenseFamily89);
        org.junit.Assert.assertEquals("'" + str91 + "' != '" + "58515" + "'", str91, "58515");
    }

    @Test
    public void test14752() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest29.test14752");
        org.apache.rat.document.ToNameTransformer toNameTransformer0 = new org.apache.rat.document.ToNameTransformer();
        org.apache.rat.utils.DefaultLog defaultLog1 = org.apache.rat.utils.DefaultLog.INSTANCE;
        org.apache.rat.license.ILicense.Builder builder2 = org.apache.rat.license.ILicense.builder();
        org.apache.rat.license.ILicense.Builder builder4 = builder2.setLicenseFamilyCategory("");
        org.apache.rat.analysis.matchers.CopyrightMatcher copyrightMatcher8 = new org.apache.rat.analysis.matchers.CopyrightMatcher("", "GPL1 ", "hi!");
        org.apache.rat.analysis.IHeaderMatcher.State state9 = copyrightMatcher8.finalizeState();
        org.apache.rat.license.ILicense.Builder builder10 = builder4.setMatcher((org.apache.rat.analysis.IHeaderMatcher) copyrightMatcher8);
        org.apache.rat.license.ILicense.Builder builder12 = builder10.setLicenseFamilyCategory("");
        defaultLog1.error((java.lang.Object) builder12);
        java.lang.Object obj14 = toNameTransformer0.transform((java.lang.Object) defaultLog1);
        org.apache.rat.configuration.builders.AllBuilder allBuilder15 = new org.apache.rat.configuration.builders.AllBuilder();
        java.lang.String str16 = allBuilder15.toString();
        java.util.List<org.apache.rat.analysis.IHeaderMatcher> iHeaderMatcherList17 = allBuilder15.getChildren();
        java.lang.Object obj18 = toNameTransformer0.transform((java.lang.Object) allBuilder15);
        org.apache.rat.analysis.IHeaderMatcher iHeaderMatcher19 = allBuilder15.build();
        java.util.Collection<org.apache.rat.analysis.IHeaderMatcher.Builder> builderCollection20 = null;
        // The following exception was thrown during execution in test generation
        try {
            org.apache.rat.configuration.builders.AbstractBuilder abstractBuilder21 = allBuilder15.add(builderCollection20);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(defaultLog1);
        org.junit.Assert.assertNotNull(builder2);
        org.junit.Assert.assertNotNull(builder4);
        org.junit.Assert.assertTrue("'" + state9 + "' != '" + org.apache.rat.analysis.IHeaderMatcher.State.f + "'", state9.equals(org.apache.rat.analysis.IHeaderMatcher.State.f));
        org.junit.Assert.assertNotNull(builder10);
        org.junit.Assert.assertNotNull(builder12);
        org.junit.Assert.assertNull(obj14);
        org.junit.Assert.assertEquals("'" + str16 + "' != '" + "AllBuilder:" + "'", str16, "AllBuilder:");
        org.junit.Assert.assertNotNull(iHeaderMatcherList17);
        org.junit.Assert.assertNull(obj18);
        org.junit.Assert.assertNotNull(iHeaderMatcher19);
    }

    @Test
    public void test14753() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest29.test14753");
        org.apache.rat.utils.Log log0 = null;
        org.apache.rat.ReportConfiguration reportConfiguration1 = new org.apache.rat.ReportConfiguration(log0);
        org.apache.rat.report.claim.ClaimStatistic claimStatistic2 = org.apache.rat.Reporter.report(reportConfiguration1);
        org.apache.rat.utils.Log log3 = null;
        org.apache.rat.ReportConfiguration reportConfiguration4 = new org.apache.rat.ReportConfiguration(log3);
        org.apache.rat.report.claim.ClaimStatistic claimStatistic5 = org.apache.rat.Reporter.report(reportConfiguration4);
        org.apache.rat.utils.ReportingSet.Options options6 = org.apache.rat.utils.ReportingSet.Options.OVERWRITE;
        reportConfiguration4.licenseDuplicateOption(options6);
        reportConfiguration1.familyDuplicateOption(options6);
        org.apache.commons.io.function.IOSupplier<java.io.PrintWriter> printWriterIOSupplier9 = reportConfiguration1.getWriter();
        boolean boolean10 = reportConfiguration1.isAddingLicensesForced();
        java.io.FilenameFilter filenameFilter11 = reportConfiguration1.getInputFileFilter();
        org.apache.commons.io.function.IOSupplier<java.io.InputStream> inputStreamIOSupplier12 = reportConfiguration1.getStyleSheet();
        java.lang.String str13 = reportConfiguration1.getCopyrightMessage();
        boolean boolean14 = reportConfiguration1.isAddingLicenses();
        reportConfiguration1.setStyleReport(false);
        org.junit.Assert.assertNull(claimStatistic2);
        org.junit.Assert.assertNull(claimStatistic5);
        org.junit.Assert.assertTrue("'" + options6 + "' != '" + org.apache.rat.utils.ReportingSet.Options.OVERWRITE + "'", options6.equals(org.apache.rat.utils.ReportingSet.Options.OVERWRITE));
        org.junit.Assert.assertNotNull(printWriterIOSupplier9);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertNull(filenameFilter11);
        org.junit.Assert.assertNull(inputStreamIOSupplier12);
        org.junit.Assert.assertNull(str13);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
    }

    @Test
    public void test14754() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest29.test14754");
        org.apache.rat.analysis.license.FullTextMatchingLicense fullTextMatchingLicense0 = new org.apache.rat.analysis.license.FullTextMatchingLicense();
        fullTextMatchingLicense0.setLicenseFamilyName("hi!");
        java.lang.String str3 = fullTextMatchingLicense0.getLicenseFamilyCategory();
        java.lang.String str4 = fullTextMatchingLicense0.getLicenseFamilyCategory();
        java.lang.String str5 = fullTextMatchingLicense0.getNotes();
        java.lang.String str6 = fullTextMatchingLicense0.getNotes();
        java.lang.String str7 = fullTextMatchingLicense0.getLicenseFamilyCategory();
        java.lang.String str8 = fullTextMatchingLicense0.getLicenseFamilyCategory();
        fullTextMatchingLicense0.setFullText("48bb897a-e27b-468d-af85-d73dcaacfb7f");
        org.apache.rat.license.ILicense.Builder builder11 = fullTextMatchingLicense0.getLicense();
        java.lang.String str12 = fullTextMatchingLicense0.getLicenseFamilyCategory();
        // The following exception was thrown during execution in test generation
        try {
            org.apache.rat.license.ILicenseFamily iLicenseFamily13 = fullTextMatchingLicense0.getLicenseFamily();
            org.junit.Assert.fail("Expected exception of type org.apache.rat.ConfigurationException; message: LicenseFamily Category must be specified");
        } catch (org.apache.rat.ConfigurationException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNull(str3);
        org.junit.Assert.assertNull(str4);
        org.junit.Assert.assertNull(str5);
        org.junit.Assert.assertNull(str6);
        org.junit.Assert.assertNull(str7);
        org.junit.Assert.assertNull(str8);
        org.junit.Assert.assertNotNull(builder11);
        org.junit.Assert.assertNull(str12);
    }

    @Test
    public void test14755() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest29.test14755");
        boolean boolean1 = org.apache.rat.document.impl.guesser.NoteGuesser.isNote("55614");
        org.junit.Assert.assertTrue("'" + boolean1 + "' != '" + false + "'", boolean1 == false);
    }

    @Test
    public void test14756() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest29.test14756");
        org.apache.rat.Defaults.Builder builder0 = org.apache.rat.Defaults.builder();
        org.apache.rat.Defaults.Builder builder2 = builder0.add("META-DATA#LICENSEFAMILYNAME");
        org.apache.rat.Defaults.Builder builder4 = builder0.remove("Copyright Builder: s:null e:null o:null");
        org.apache.rat.Defaults.Builder builder6 = builder0.add("COMMON DEVELOPMENT AND DISTRIBUTION LICENSE Version 1.0");
        org.apache.rat.Defaults.Builder builder7 = builder0.noDefault();
        org.apache.rat.Defaults.Builder builder9 = builder7.remove("SPDX:ef7a8b13-64c3-4510-bb0c-dbf208e1e73f");
        org.apache.rat.Defaults.Builder builder11 = builder9.remove("8925ba14-6c7c-466e-9335-5528e02df2c5");
        org.apache.rat.Defaults.Builder builder13 = builder9.add("RegexBuilder: 67eb96c2-83b2-456d-bfb0-23ff916bf212");
        java.io.File file14 = null;
        // The following exception was thrown during execution in test generation
        try {
            org.apache.rat.Defaults.Builder builder15 = builder13.remove(file14);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(builder0);
        org.junit.Assert.assertNotNull(builder2);
        org.junit.Assert.assertNotNull(builder4);
        org.junit.Assert.assertNotNull(builder6);
        org.junit.Assert.assertNotNull(builder7);
        org.junit.Assert.assertNotNull(builder9);
        org.junit.Assert.assertNotNull(builder11);
        org.junit.Assert.assertNotNull(builder13);
    }

    @Test
    public void test14757() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest29.test14757");
        org.apache.rat.analysis.license.FullTextMatchingLicense fullTextMatchingLicense0 = new org.apache.rat.analysis.license.FullTextMatchingLicense();
        fullTextMatchingLicense0.setLicenseFamilyName("hi!");
        java.lang.String str3 = fullTextMatchingLicense0.getLicenseFamilyCategory();
        java.lang.String str4 = fullTextMatchingLicense0.getLicenseFamilyName();
        fullTextMatchingLicense0.setLicenseFamilyName("http://org/apache/rat/meta-data#LicenseFamilyName");
        java.lang.String str7 = fullTextMatchingLicense0.getLicenseFamilyCategory();
        fullTextMatchingLicense0.setLicenseFamilyCategory("9ba7ce03-4231-4a3e-affd-70c4666a9329");
        fullTextMatchingLicense0.setLicenseFamilyCategory("TextBuilder: true http://org/apache/rat/meta-data#LicenseFamilyName");
        org.apache.rat.license.ILicenseFamily iLicenseFamily12 = fullTextMatchingLicense0.getLicenseFamily();
        org.junit.Assert.assertNull(str3);
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "hi!" + "'", str4, "hi!");
        org.junit.Assert.assertNull(str7);
        org.junit.Assert.assertNotNull(iLicenseFamily12);
    }

    @Test
    public void test14758() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest29.test14758");
        java.io.File file0 = null;
        byte[] byteArray3 = new byte[] { (byte) 1, (byte) 100 };
        // The following exception was thrown during execution in test generation
        try {
            org.apache.rat.document.impl.ArchiveEntryDocument archiveEntryDocument4 = new org.apache.rat.document.impl.ArchiveEntryDocument(file0, byteArray3);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(byteArray3);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray3), "[1, 100]");
    }

    @Test
    public void test14759() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest29.test14759");
        java.lang.String[] strArray5 = new java.lang.String[] { "http://org/apache/rat/meta-data#LicenseFamilyCategory", "Datum [ name ='http://org/apache/rat/meta-data#LicenseFamilyCategory',value ='GPL1  ']", "MANIFEST.MF", "AllBuilder:", "The MIT License" };
        org.apache.rat.utils.ReportingSet<java.lang.String> strSet6 = new org.apache.rat.utils.ReportingSet<java.lang.String>();
        boolean boolean7 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strSet6, strArray5);
        boolean boolean9 = strSet6.addIfNotPresent("http://org/apache/rat/meta-data#LicenseFamilyName");
        boolean boolean11 = strSet6.addIfNotPresent("ef7a8b13-64c3-4510-bb0c-dbf208e1e73f");
        org.apache.rat.utils.Log log12 = null;
        org.apache.rat.ReportConfiguration reportConfiguration13 = new org.apache.rat.ReportConfiguration(log12);
        org.apache.commons.io.function.IOSupplier<java.io.OutputStream> outputStreamIOSupplier14 = reportConfiguration13.getOutput();
        org.apache.commons.io.filefilter.IOFileFilter iOFileFilter15 = reportConfiguration13.getDirectoryFilter();
        org.apache.rat.utils.Log log16 = null;
        org.apache.rat.ReportConfiguration reportConfiguration17 = new org.apache.rat.ReportConfiguration(log16);
        reportConfiguration17.addApprovedLicenseCategory(".cvsignore");
        org.apache.rat.utils.Log log20 = null;
        org.apache.rat.ReportConfiguration reportConfiguration21 = new org.apache.rat.ReportConfiguration(log20);
        java.io.FilenameFilter filenameFilter22 = reportConfiguration21.getInputFileFilter();
        org.apache.rat.license.LicenseSetFactory.LicenseFilter licenseFilter23 = org.apache.rat.license.LicenseSetFactory.LicenseFilter.all;
        java.util.SortedSet<org.apache.rat.license.ILicense> iLicenseSet24 = reportConfiguration21.getLicenses(licenseFilter23);
        reportConfiguration17.addLicensesIfNotPresent((java.util.Collection<org.apache.rat.license.ILicense>) iLicenseSet24);
        java.io.FilenameFilter filenameFilter26 = reportConfiguration17.getInputFileFilter();
        org.apache.rat.utils.Log log27 = null;
        org.apache.rat.ReportConfiguration reportConfiguration28 = new org.apache.rat.ReportConfiguration(log27);
        java.io.FilenameFilter filenameFilter29 = reportConfiguration28.getInputFileFilter();
        org.apache.rat.license.LicenseSetFactory.LicenseFilter licenseFilter30 = org.apache.rat.license.LicenseSetFactory.LicenseFilter.all;
        java.util.SortedSet<org.apache.rat.license.ILicense> iLicenseSet31 = reportConfiguration28.getLicenses(licenseFilter30);
        org.apache.rat.config.AddLicenseHeaders addLicenseHeaders32 = org.apache.rat.config.AddLicenseHeaders.FALSE;
        reportConfiguration28.setAddLicenseHeaders(addLicenseHeaders32);
        org.apache.rat.utils.Log log34 = null;
        org.apache.rat.ReportConfiguration reportConfiguration35 = new org.apache.rat.ReportConfiguration(log34);
        org.apache.rat.report.claim.ClaimStatistic claimStatistic36 = org.apache.rat.Reporter.report(reportConfiguration35);
        org.apache.rat.license.LicenseSetFactory.LicenseFilter licenseFilter37 = org.apache.rat.license.LicenseSetFactory.LicenseFilter.all;
        org.apache.rat.Reporter.listLicenses(reportConfiguration35, licenseFilter37);
        org.apache.rat.Reporter.listLicenses(reportConfiguration28, licenseFilter37);
        org.apache.rat.utils.Log log40 = null;
        org.apache.rat.ReportConfiguration reportConfiguration41 = new org.apache.rat.ReportConfiguration(log40);
        java.io.FilenameFilter filenameFilter42 = reportConfiguration41.getInputFileFilter();
        org.apache.rat.license.LicenseSetFactory.LicenseFilter licenseFilter43 = org.apache.rat.license.LicenseSetFactory.LicenseFilter.all;
        java.util.SortedSet<org.apache.rat.license.ILicense> iLicenseSet44 = reportConfiguration41.getLicenses(licenseFilter43);
        org.apache.rat.config.AddLicenseHeaders addLicenseHeaders45 = org.apache.rat.config.AddLicenseHeaders.FALSE;
        reportConfiguration41.setAddLicenseHeaders(addLicenseHeaders45);
        org.apache.rat.utils.Log log47 = null;
        org.apache.rat.ReportConfiguration reportConfiguration48 = new org.apache.rat.ReportConfiguration(log47);
        org.apache.rat.report.claim.ClaimStatistic claimStatistic49 = org.apache.rat.Reporter.report(reportConfiguration48);
        org.apache.rat.license.LicenseSetFactory.LicenseFilter licenseFilter50 = org.apache.rat.license.LicenseSetFactory.LicenseFilter.all;
        org.apache.rat.Reporter.listLicenses(reportConfiguration48, licenseFilter50);
        org.apache.rat.Reporter.listLicenses(reportConfiguration41, licenseFilter50);
        java.util.SortedSet<org.apache.rat.license.ILicenseFamily> iLicenseFamilySet53 = reportConfiguration28.getLicenseFamilies(licenseFilter50);
        org.apache.rat.Reporter.listLicenseFamilies(reportConfiguration17, licenseFilter50);
        java.util.SortedSet<org.apache.rat.license.ILicenseFamily> iLicenseFamilySet55 = reportConfiguration13.getLicenseFamilies(licenseFilter50);
        org.apache.rat.policy.DefaultPolicy defaultPolicy56 = new org.apache.rat.policy.DefaultPolicy((java.util.Collection<org.apache.rat.license.ILicenseFamily>) iLicenseFamilySet55);
        boolean boolean57 = strSet6.retainAll((java.util.Collection<org.apache.rat.license.ILicenseFamily>) iLicenseFamilySet55);
        java.lang.String[] strArray63 = new java.lang.String[] { "http://org/apache/rat/meta-data#LicenseFamilyCategory", "Datum [ name ='http://org/apache/rat/meta-data#LicenseFamilyCategory',value ='GPL1  ']", "MANIFEST.MF", "AllBuilder:", "The MIT License" };
        org.apache.rat.utils.ReportingSet<java.lang.String> strSet64 = new org.apache.rat.utils.ReportingSet<java.lang.String>();
        boolean boolean65 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strSet64, strArray63);
        boolean boolean67 = strSet64.addIfNotPresent("http://org/apache/rat/meta-data#LicenseFamilyName");
        java.util.Iterator<java.lang.String> strItor68 = strSet64.iterator();
        java.lang.Object[] objArray69 = strSet64.toArray();
        org.apache.rat.utils.ReportingSet.Options options70 = null;
        org.apache.rat.utils.ReportingSet<java.lang.String> strSet71 = strSet64.setDuplicateOption(options70);
        boolean boolean73 = strSet71.add("bd015714-405b-4304-9faa-36efad80e6e6 GEN  ");
        org.apache.rat.utils.ReportingSet<java.lang.String> strSet75 = strSet71.headSet("b49bbf96-8d22-4667-8eed-1e7199c8356e");
        org.apache.rat.license.LicenseFamilySetFactory licenseFamilySetFactory76 = new org.apache.rat.license.LicenseFamilySetFactory(iLicenseFamilySet55, (java.util.Collection<java.lang.String>) strSet75);
        java.util.stream.Stream<java.lang.String> strStream77 = strSet75.stream();
        org.apache.rat.analysis.matchers.SimpleTextMatcher simpleTextMatcher79 = new org.apache.rat.analysis.matchers.SimpleTextMatcher("Copyright Builder: s:null e:ba9961f9-a0de-4a54-bd1f-a2e9df26a188 o:a1abad46-6a98-44f8-aa20-7839919a8270");
        org.apache.rat.analysis.IHeaderMatcher.State state80 = simpleTextMatcher79.finalizeState();
        boolean boolean82 = simpleTextMatcher79.doMatch("2f61fc99-c655-43e3-a548-fa8ccadafe5e");
        java.lang.String str83 = simpleTextMatcher79.toString();
        // The following exception was thrown during execution in test generation
        try {
            boolean boolean84 = strSet75.contains((java.lang.Object) simpleTextMatcher79);
            org.junit.Assert.fail("Expected exception of type java.lang.ClassCastException; message: null");
        } catch (java.lang.ClassCastException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(strArray5);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + true + "'", boolean7 == true);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + true + "'", boolean9 == true);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + true + "'", boolean11 == true);
        org.junit.Assert.assertNotNull(outputStreamIOSupplier14);
        org.junit.Assert.assertNotNull(iOFileFilter15);
        org.junit.Assert.assertNull(filenameFilter22);
        org.junit.Assert.assertTrue("'" + licenseFilter23 + "' != '" + org.apache.rat.license.LicenseSetFactory.LicenseFilter.all + "'", licenseFilter23.equals(org.apache.rat.license.LicenseSetFactory.LicenseFilter.all));
        org.junit.Assert.assertNotNull(iLicenseSet24);
        org.junit.Assert.assertNull(filenameFilter26);
        org.junit.Assert.assertNull(filenameFilter29);
        org.junit.Assert.assertTrue("'" + licenseFilter30 + "' != '" + org.apache.rat.license.LicenseSetFactory.LicenseFilter.all + "'", licenseFilter30.equals(org.apache.rat.license.LicenseSetFactory.LicenseFilter.all));
        org.junit.Assert.assertNotNull(iLicenseSet31);
        org.junit.Assert.assertTrue("'" + addLicenseHeaders32 + "' != '" + org.apache.rat.config.AddLicenseHeaders.FALSE + "'", addLicenseHeaders32.equals(org.apache.rat.config.AddLicenseHeaders.FALSE));
        org.junit.Assert.assertNull(claimStatistic36);
        org.junit.Assert.assertTrue("'" + licenseFilter37 + "' != '" + org.apache.rat.license.LicenseSetFactory.LicenseFilter.all + "'", licenseFilter37.equals(org.apache.rat.license.LicenseSetFactory.LicenseFilter.all));
        org.junit.Assert.assertNull(filenameFilter42);
        org.junit.Assert.assertTrue("'" + licenseFilter43 + "' != '" + org.apache.rat.license.LicenseSetFactory.LicenseFilter.all + "'", licenseFilter43.equals(org.apache.rat.license.LicenseSetFactory.LicenseFilter.all));
        org.junit.Assert.assertNotNull(iLicenseSet44);
        org.junit.Assert.assertTrue("'" + addLicenseHeaders45 + "' != '" + org.apache.rat.config.AddLicenseHeaders.FALSE + "'", addLicenseHeaders45.equals(org.apache.rat.config.AddLicenseHeaders.FALSE));
        org.junit.Assert.assertNull(claimStatistic49);
        org.junit.Assert.assertTrue("'" + licenseFilter50 + "' != '" + org.apache.rat.license.LicenseSetFactory.LicenseFilter.all + "'", licenseFilter50.equals(org.apache.rat.license.LicenseSetFactory.LicenseFilter.all));
        org.junit.Assert.assertNotNull(iLicenseFamilySet53);
        org.junit.Assert.assertNotNull(iLicenseFamilySet55);
        org.junit.Assert.assertTrue("'" + boolean57 + "' != '" + true + "'", boolean57 == true);
        org.junit.Assert.assertNotNull(strArray63);
        org.junit.Assert.assertTrue("'" + boolean65 + "' != '" + true + "'", boolean65 == true);
        org.junit.Assert.assertTrue("'" + boolean67 + "' != '" + true + "'", boolean67 == true);
        org.junit.Assert.assertNotNull(strItor68);
        org.junit.Assert.assertNotNull(objArray69);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray69), "[AllBuilder:, Datum [ name ='http://org/apache/rat/meta-data#LicenseFamilyCategory',value ='GPL1  '], MANIFEST.MF, The MIT License, http://org/apache/rat/meta-data#LicenseFamilyCategory, http://org/apache/rat/meta-data#LicenseFamilyName]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray69), "[AllBuilder:, Datum [ name ='http://org/apache/rat/meta-data#LicenseFamilyCategory',value ='GPL1  '], MANIFEST.MF, The MIT License, http://org/apache/rat/meta-data#LicenseFamilyCategory, http://org/apache/rat/meta-data#LicenseFamilyName]");
        org.junit.Assert.assertNotNull(strSet71);
        org.junit.Assert.assertTrue("'" + boolean73 + "' != '" + true + "'", boolean73 == true);
        org.junit.Assert.assertNotNull(strSet75);
        org.junit.Assert.assertNotNull(strStream77);
        org.junit.Assert.assertTrue("'" + state80 + "' != '" + org.apache.rat.analysis.IHeaderMatcher.State.f + "'", state80.equals(org.apache.rat.analysis.IHeaderMatcher.State.f));
        org.junit.Assert.assertTrue("'" + boolean82 + "' != '" + false + "'", boolean82 == false);
// flaky:         org.junit.Assert.assertEquals("'" + str83 + "' != '" + "08e4e89b-2655-4e4e-8b02-21a62c09b944" + "'", str83, "08e4e89b-2655-4e4e-8b02-21a62c09b944");
    }

    @Test
    public void test14760() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest29.test14760");
        org.apache.rat.api.MetaData metaData0 = new org.apache.rat.api.MetaData();
        java.lang.String str2 = metaData0.value("COMMON DEVELOPMENT AND DISTRIBUTION LICENSE Version 1.0");
        java.lang.String str4 = metaData0.value("W3C Document Copyright");
        boolean boolean6 = metaData0.clear("hi!");
        metaData0.clear();
        org.apache.rat.api.MetaData.Datum datum8 = org.apache.rat.api.MetaData.RAT_LICENSE_FAMILY_NAME_DATUM_GPL_VERSION_1;
        metaData0.set(datum8);
        org.apache.rat.api.MetaData.Datum datum10 = org.apache.rat.api.MetaData.RAT_LICENSE_FAMILY_CATEGORY_DATUM_OASIS;
        metaData0.add(datum10);
        java.lang.String str13 = metaData0.value("http:");
        boolean boolean15 = metaData0.clear("");
        org.junit.Assert.assertNull(str2);
        org.junit.Assert.assertNull(str4);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertNotNull(datum8);
        org.junit.Assert.assertNotNull(datum10);
        org.junit.Assert.assertNull(str13);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + false + "'", boolean15 == false);
    }

    @Test
    public void test14761() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest29.test14761");
        java.util.regex.Pattern pattern0 = null;
        org.apache.rat.header.HeaderBean headerBean2 = new org.apache.rat.header.HeaderBean(pattern0, true);
        boolean boolean3 = headerBean2.isMatch();
        headerBean2.setMatch(true);
        java.util.regex.Pattern pattern6 = headerBean2.getHeaderPattern();
        java.util.regex.Pattern pattern7 = null;
        headerBean2.setHeaderPattern(pattern7);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + true + "'", boolean3 == true);
        org.junit.Assert.assertNull(pattern6);
    }

    @Test
    public void test14762() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest29.test14762");
        org.apache.rat.analysis.license.FullTextMatchingLicense fullTextMatchingLicense0 = new org.apache.rat.analysis.license.FullTextMatchingLicense();
        fullTextMatchingLicense0.setLicenseFamilyName("hi!");
        java.lang.String str3 = fullTextMatchingLicense0.getLicenseFamilyCategory();
        java.lang.String str4 = fullTextMatchingLicense0.getLicenseFamilyName();
        fullTextMatchingLicense0.setLicenseFamilyName("http://org/apache/rat/meta-data#LicenseFamilyName");
        java.lang.String str7 = fullTextMatchingLicense0.getLicenseFamilyCategory();
        java.lang.String str8 = fullTextMatchingLicense0.getNotes();
        fullTextMatchingLicense0.setLicenseFamilyName("W3C Document Copyright");
        fullTextMatchingLicense0.setLicenseFamilyName("CDDL1");
        fullTextMatchingLicense0.setNotes("http://org/apache/rat/meta-data#ApprovedLicense");
        fullTextMatchingLicense0.setFullText("META-DATA#LICENSEFAMILYNAME");
        java.lang.String str17 = fullTextMatchingLicense0.getNotes();
        org.junit.Assert.assertNull(str3);
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "hi!" + "'", str4, "hi!");
        org.junit.Assert.assertNull(str7);
        org.junit.Assert.assertNull(str8);
        org.junit.Assert.assertEquals("'" + str17 + "' != '" + "http://org/apache/rat/meta-data#ApprovedLicense" + "'", str17, "http://org/apache/rat/meta-data#ApprovedLicense");
    }

    @Test
    public void test14763() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest29.test14763");
        org.apache.rat.utils.Log log0 = null;
        org.apache.rat.ReportConfiguration reportConfiguration1 = new org.apache.rat.ReportConfiguration(log0);
        org.apache.rat.license.ILicenseFamily[] iLicenseFamilyArray2 = new org.apache.rat.license.ILicenseFamily[] {};
        java.util.ArrayList<org.apache.rat.license.ILicenseFamily> iLicenseFamilyList3 = new java.util.ArrayList<org.apache.rat.license.ILicenseFamily>();
        boolean boolean4 = java.util.Collections.addAll((java.util.Collection<org.apache.rat.license.ILicenseFamily>) iLicenseFamilyList3, iLicenseFamilyArray2);
        reportConfiguration1.addFamilies((java.util.Collection<org.apache.rat.license.ILicenseFamily>) iLicenseFamilyList3);
        org.apache.rat.report.IReportable iReportable6 = null;
        reportConfiguration1.setReportable(iReportable6);
        reportConfiguration1.addApprovedLicenseCategory("http://org/apache/rat/meta-data#LicenseFamilyCategory");
        java.io.FilenameFilter filenameFilter10 = reportConfiguration1.getInputFileFilter();
        org.apache.rat.api.MetaData metaData11 = new org.apache.rat.api.MetaData();
        java.lang.String str13 = metaData11.value("COMMON DEVELOPMENT AND DISTRIBUTION LICENSE Version 1.0");
        java.lang.String str15 = metaData11.value("W3C Document Copyright");
        boolean boolean17 = metaData11.clear("hi!");
        metaData11.clear();
        metaData11.clear();
        metaData11.clear();
        metaData11.clear();
        java.util.Collection<org.apache.rat.api.MetaData.Datum> datumCollection22 = metaData11.getData();
        org.apache.rat.utils.Log log23 = null;
        org.apache.rat.ReportConfiguration reportConfiguration24 = new org.apache.rat.ReportConfiguration(log23);
        java.io.FilenameFilter filenameFilter25 = reportConfiguration24.getInputFileFilter();
        org.apache.rat.license.LicenseSetFactory.LicenseFilter licenseFilter26 = org.apache.rat.license.LicenseSetFactory.LicenseFilter.all;
        java.util.SortedSet<org.apache.rat.license.ILicense> iLicenseSet27 = reportConfiguration24.getLicenses(licenseFilter26);
        org.apache.rat.config.AddLicenseHeaders addLicenseHeaders28 = org.apache.rat.config.AddLicenseHeaders.FALSE;
        reportConfiguration24.setAddLicenseHeaders(addLicenseHeaders28);
        org.apache.rat.utils.Log log30 = null;
        org.apache.rat.ReportConfiguration reportConfiguration31 = new org.apache.rat.ReportConfiguration(log30);
        org.apache.rat.report.claim.ClaimStatistic claimStatistic32 = org.apache.rat.Reporter.report(reportConfiguration31);
        org.apache.rat.license.LicenseSetFactory.LicenseFilter licenseFilter33 = org.apache.rat.license.LicenseSetFactory.LicenseFilter.all;
        org.apache.rat.Reporter.listLicenses(reportConfiguration31, licenseFilter33);
        org.apache.rat.Reporter.listLicenses(reportConfiguration24, licenseFilter33);
        org.apache.rat.utils.Log log36 = null;
        org.apache.rat.ReportConfiguration reportConfiguration37 = new org.apache.rat.ReportConfiguration(log36);
        java.io.FilenameFilter filenameFilter38 = reportConfiguration37.getInputFileFilter();
        org.apache.rat.license.LicenseSetFactory.LicenseFilter licenseFilter39 = org.apache.rat.license.LicenseSetFactory.LicenseFilter.all;
        java.util.SortedSet<org.apache.rat.license.ILicense> iLicenseSet40 = reportConfiguration37.getLicenses(licenseFilter39);
        org.apache.rat.config.AddLicenseHeaders addLicenseHeaders41 = org.apache.rat.config.AddLicenseHeaders.FALSE;
        reportConfiguration37.setAddLicenseHeaders(addLicenseHeaders41);
        org.apache.rat.utils.Log log43 = null;
        org.apache.rat.ReportConfiguration reportConfiguration44 = new org.apache.rat.ReportConfiguration(log43);
        org.apache.rat.report.claim.ClaimStatistic claimStatistic45 = org.apache.rat.Reporter.report(reportConfiguration44);
        org.apache.rat.license.LicenseSetFactory.LicenseFilter licenseFilter46 = org.apache.rat.license.LicenseSetFactory.LicenseFilter.all;
        org.apache.rat.Reporter.listLicenses(reportConfiguration44, licenseFilter46);
        org.apache.rat.Reporter.listLicenses(reportConfiguration37, licenseFilter46);
        org.apache.rat.Reporter.listLicenses(reportConfiguration24, licenseFilter46);
        java.io.FilenameFilter filenameFilter50 = reportConfiguration24.getInputFileFilter();
        reportConfiguration24.setStyleReport(false);
        org.apache.rat.report.IReportable iReportable53 = null;
        reportConfiguration24.setReportable(iReportable53);
        org.apache.rat.Defaults.Builder builder56 = org.apache.rat.Defaults.builder();
        org.apache.rat.Defaults defaults57 = builder56.build();
        org.apache.rat.utils.Log log58 = null;
        org.apache.rat.ReportConfiguration reportConfiguration59 = new org.apache.rat.ReportConfiguration(log58);
        java.io.FilenameFilter filenameFilter60 = reportConfiguration59.getInputFileFilter();
        org.apache.rat.license.LicenseSetFactory.LicenseFilter licenseFilter61 = org.apache.rat.license.LicenseSetFactory.LicenseFilter.all;
        java.util.SortedSet<org.apache.rat.license.ILicense> iLicenseSet62 = reportConfiguration59.getLicenses(licenseFilter61);
        org.apache.rat.config.AddLicenseHeaders addLicenseHeaders63 = org.apache.rat.config.AddLicenseHeaders.FALSE;
        reportConfiguration59.setAddLicenseHeaders(addLicenseHeaders63);
        org.apache.rat.utils.Log log65 = null;
        org.apache.rat.ReportConfiguration reportConfiguration66 = new org.apache.rat.ReportConfiguration(log65);
        org.apache.rat.report.claim.ClaimStatistic claimStatistic67 = org.apache.rat.Reporter.report(reportConfiguration66);
        org.apache.rat.license.LicenseSetFactory.LicenseFilter licenseFilter68 = org.apache.rat.license.LicenseSetFactory.LicenseFilter.all;
        org.apache.rat.Reporter.listLicenses(reportConfiguration66, licenseFilter68);
        org.apache.rat.Reporter.listLicenses(reportConfiguration59, licenseFilter68);
        org.apache.rat.utils.Log log71 = null;
        org.apache.rat.ReportConfiguration reportConfiguration72 = new org.apache.rat.ReportConfiguration(log71);
        java.io.FilenameFilter filenameFilter73 = reportConfiguration72.getInputFileFilter();
        org.apache.rat.license.LicenseSetFactory.LicenseFilter licenseFilter74 = org.apache.rat.license.LicenseSetFactory.LicenseFilter.all;
        java.util.SortedSet<org.apache.rat.license.ILicense> iLicenseSet75 = reportConfiguration72.getLicenses(licenseFilter74);
        org.apache.rat.config.AddLicenseHeaders addLicenseHeaders76 = org.apache.rat.config.AddLicenseHeaders.FALSE;
        reportConfiguration72.setAddLicenseHeaders(addLicenseHeaders76);
        org.apache.rat.utils.Log log78 = null;
        org.apache.rat.ReportConfiguration reportConfiguration79 = new org.apache.rat.ReportConfiguration(log78);
        org.apache.rat.report.claim.ClaimStatistic claimStatistic80 = org.apache.rat.Reporter.report(reportConfiguration79);
        org.apache.rat.license.LicenseSetFactory.LicenseFilter licenseFilter81 = org.apache.rat.license.LicenseSetFactory.LicenseFilter.all;
        org.apache.rat.Reporter.listLicenses(reportConfiguration79, licenseFilter81);
        org.apache.rat.Reporter.listLicenses(reportConfiguration72, licenseFilter81);
        java.util.SortedSet<org.apache.rat.license.ILicenseFamily> iLicenseFamilySet84 = reportConfiguration59.getLicenseFamilies(licenseFilter81);
        java.util.SortedSet<org.apache.rat.license.ILicense> iLicenseSet85 = defaults57.getLicenses(licenseFilter81);
        org.apache.rat.utils.ReportingSet<org.apache.rat.license.ILicense> iLicenseSet86 = new org.apache.rat.utils.ReportingSet<org.apache.rat.license.ILicense>(iLicenseSet85);
        org.apache.rat.license.ILicense iLicense87 = org.apache.rat.license.LicenseSetFactory.search("TMF", iLicenseSet85);
        reportConfiguration24.addLicense(iLicense87);
        java.lang.String str89 = iLicense87.derivedFrom();
        java.lang.String str90 = iLicense87.getName();
        java.lang.String str91 = iLicense87.derivedFrom();
        metaData11.reportOnLicense(iLicense87);
        reportConfiguration1.addLicense(iLicense87);
        org.junit.Assert.assertNotNull(iLicenseFamilyArray2);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertNull(filenameFilter10);
        org.junit.Assert.assertNull(str13);
        org.junit.Assert.assertNull(str15);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + false + "'", boolean17 == false);
        org.junit.Assert.assertNotNull(datumCollection22);
        org.junit.Assert.assertNull(filenameFilter25);
        org.junit.Assert.assertTrue("'" + licenseFilter26 + "' != '" + org.apache.rat.license.LicenseSetFactory.LicenseFilter.all + "'", licenseFilter26.equals(org.apache.rat.license.LicenseSetFactory.LicenseFilter.all));
        org.junit.Assert.assertNotNull(iLicenseSet27);
        org.junit.Assert.assertTrue("'" + addLicenseHeaders28 + "' != '" + org.apache.rat.config.AddLicenseHeaders.FALSE + "'", addLicenseHeaders28.equals(org.apache.rat.config.AddLicenseHeaders.FALSE));
        org.junit.Assert.assertNull(claimStatistic32);
        org.junit.Assert.assertTrue("'" + licenseFilter33 + "' != '" + org.apache.rat.license.LicenseSetFactory.LicenseFilter.all + "'", licenseFilter33.equals(org.apache.rat.license.LicenseSetFactory.LicenseFilter.all));
        org.junit.Assert.assertNull(filenameFilter38);
        org.junit.Assert.assertTrue("'" + licenseFilter39 + "' != '" + org.apache.rat.license.LicenseSetFactory.LicenseFilter.all + "'", licenseFilter39.equals(org.apache.rat.license.LicenseSetFactory.LicenseFilter.all));
        org.junit.Assert.assertNotNull(iLicenseSet40);
        org.junit.Assert.assertTrue("'" + addLicenseHeaders41 + "' != '" + org.apache.rat.config.AddLicenseHeaders.FALSE + "'", addLicenseHeaders41.equals(org.apache.rat.config.AddLicenseHeaders.FALSE));
        org.junit.Assert.assertNull(claimStatistic45);
        org.junit.Assert.assertTrue("'" + licenseFilter46 + "' != '" + org.apache.rat.license.LicenseSetFactory.LicenseFilter.all + "'", licenseFilter46.equals(org.apache.rat.license.LicenseSetFactory.LicenseFilter.all));
        org.junit.Assert.assertNull(filenameFilter50);
        org.junit.Assert.assertNotNull(builder56);
        org.junit.Assert.assertNotNull(defaults57);
        org.junit.Assert.assertNull(filenameFilter60);
        org.junit.Assert.assertTrue("'" + licenseFilter61 + "' != '" + org.apache.rat.license.LicenseSetFactory.LicenseFilter.all + "'", licenseFilter61.equals(org.apache.rat.license.LicenseSetFactory.LicenseFilter.all));
        org.junit.Assert.assertNotNull(iLicenseSet62);
        org.junit.Assert.assertTrue("'" + addLicenseHeaders63 + "' != '" + org.apache.rat.config.AddLicenseHeaders.FALSE + "'", addLicenseHeaders63.equals(org.apache.rat.config.AddLicenseHeaders.FALSE));
        org.junit.Assert.assertNull(claimStatistic67);
        org.junit.Assert.assertTrue("'" + licenseFilter68 + "' != '" + org.apache.rat.license.LicenseSetFactory.LicenseFilter.all + "'", licenseFilter68.equals(org.apache.rat.license.LicenseSetFactory.LicenseFilter.all));
        org.junit.Assert.assertNull(filenameFilter73);
        org.junit.Assert.assertTrue("'" + licenseFilter74 + "' != '" + org.apache.rat.license.LicenseSetFactory.LicenseFilter.all + "'", licenseFilter74.equals(org.apache.rat.license.LicenseSetFactory.LicenseFilter.all));
        org.junit.Assert.assertNotNull(iLicenseSet75);
        org.junit.Assert.assertTrue("'" + addLicenseHeaders76 + "' != '" + org.apache.rat.config.AddLicenseHeaders.FALSE + "'", addLicenseHeaders76.equals(org.apache.rat.config.AddLicenseHeaders.FALSE));
        org.junit.Assert.assertNull(claimStatistic80);
        org.junit.Assert.assertTrue("'" + licenseFilter81 + "' != '" + org.apache.rat.license.LicenseSetFactory.LicenseFilter.all + "'", licenseFilter81.equals(org.apache.rat.license.LicenseSetFactory.LicenseFilter.all));
        org.junit.Assert.assertNotNull(iLicenseFamilySet84);
        org.junit.Assert.assertNotNull(iLicenseSet85);
        org.junit.Assert.assertNotNull(iLicense87);
        org.junit.Assert.assertEquals("'" + str89 + "' != '" + "BSD-3" + "'", str89, "BSD-3");
        org.junit.Assert.assertEquals("'" + str90 + "' != '" + "The Telemanagement Forum License" + "'", str90, "The Telemanagement Forum License");
        org.junit.Assert.assertEquals("'" + str91 + "' != '" + "BSD-3" + "'", str91, "BSD-3");
    }

    @Test
    public void test14764() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest29.test14764");
        org.apache.rat.utils.Log log1 = null;
        org.apache.rat.ReportConfiguration reportConfiguration2 = new org.apache.rat.ReportConfiguration(log1);
        org.apache.rat.report.claim.ClaimStatistic claimStatistic3 = org.apache.rat.Reporter.report(reportConfiguration2);
        org.apache.rat.utils.Log log4 = null;
        org.apache.rat.ReportConfiguration reportConfiguration5 = new org.apache.rat.ReportConfiguration(log4);
        org.apache.rat.report.claim.ClaimStatistic claimStatistic6 = org.apache.rat.Reporter.report(reportConfiguration5);
        org.apache.rat.utils.ReportingSet.Options options7 = org.apache.rat.utils.ReportingSet.Options.OVERWRITE;
        reportConfiguration5.licenseDuplicateOption(options7);
        reportConfiguration2.familyDuplicateOption(options7);
        boolean boolean10 = reportConfiguration2.isStyleReport();
        org.apache.rat.license.ILicense[] iLicenseArray11 = new org.apache.rat.license.ILicense[] {};
        java.util.TreeSet<org.apache.rat.license.ILicense> iLicenseSet12 = new java.util.TreeSet<org.apache.rat.license.ILicense>();
        boolean boolean13 = java.util.Collections.addAll((java.util.Collection<org.apache.rat.license.ILicense>) iLicenseSet12, iLicenseArray11);
        java.lang.String[] strArray26 = new java.lang.String[] { "GPL2 ", "GPL1 ", "notice", "http://org/apache/rat/meta-data#LicenseFamilyName", "notice", "GPL2 ", "http://org/apache/rat/meta-data#LicenseFamilyName", "", "GPL2 ", "", "GPL1 ", "hi!" };
        java.util.ArrayList<java.lang.String> strList27 = new java.util.ArrayList<java.lang.String>();
        boolean boolean28 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strList27, strArray26);
        org.apache.rat.license.LicenseSetFactory licenseSetFactory29 = new org.apache.rat.license.LicenseSetFactory((java.util.SortedSet<org.apache.rat.license.ILicense>) iLicenseSet12, (java.util.Collection<java.lang.String>) strList27);
        java.io.FilenameFilter filenameFilter30 = org.apache.rat.Report.parseExclusions((java.util.List<java.lang.String>) strList27);
        java.io.FilenameFilter filenameFilter31 = org.apache.rat.Report.parseExclusions((java.util.List<java.lang.String>) strList27);
        reportConfiguration2.addApprovedLicenseCategories((java.util.Collection<java.lang.String>) strList27);
        reportConfiguration2.setCopyrightMessage("9ec38a8d-0e0f-4c31-8d12-d6138412a101");
        org.apache.rat.license.ILicense[] iLicenseArray37 = new org.apache.rat.license.ILicense[] {};
        java.util.TreeSet<org.apache.rat.license.ILicense> iLicenseSet38 = new java.util.TreeSet<org.apache.rat.license.ILicense>();
        boolean boolean39 = java.util.Collections.addAll((java.util.Collection<org.apache.rat.license.ILicense>) iLicenseSet38, iLicenseArray37);
        java.lang.String[] strArray52 = new java.lang.String[] { "GPL2 ", "GPL1 ", "notice", "http://org/apache/rat/meta-data#LicenseFamilyName", "notice", "GPL2 ", "http://org/apache/rat/meta-data#LicenseFamilyName", "", "GPL2 ", "", "GPL1 ", "hi!" };
        java.util.ArrayList<java.lang.String> strList53 = new java.util.ArrayList<java.lang.String>();
        boolean boolean54 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strList53, strArray52);
        org.apache.rat.license.LicenseSetFactory licenseSetFactory55 = new org.apache.rat.license.LicenseSetFactory((java.util.SortedSet<org.apache.rat.license.ILicense>) iLicenseSet38, (java.util.Collection<java.lang.String>) strList53);
        org.apache.rat.license.ILicense iLicense56 = org.apache.rat.license.LicenseSetFactory.search("binary", (java.util.SortedSet<org.apache.rat.license.ILicense>) iLicenseSet38);
        org.apache.rat.utils.ReportingSet<org.apache.rat.license.ILicense> iLicenseSet57 = new org.apache.rat.utils.ReportingSet<org.apache.rat.license.ILicense>((java.util.SortedSet<org.apache.rat.license.ILicense>) iLicenseSet38);
        org.apache.rat.license.ILicense iLicense58 = org.apache.rat.license.LicenseSetFactory.search("a1abad46-6a98-44f8-aa20-7839919a8270", (java.util.SortedSet<org.apache.rat.license.ILicense>) iLicenseSet57);
        reportConfiguration2.addLicenses((java.util.Collection<org.apache.rat.license.ILicense>) iLicenseSet57);
        org.apache.rat.license.ILicense iLicense60 = org.apache.rat.license.LicenseSetFactory.search("67ba39a7-212e-4b39-b502-4793561db7f8", (java.util.SortedSet<org.apache.rat.license.ILicense>) iLicenseSet57);
        org.junit.Assert.assertNull(claimStatistic3);
        org.junit.Assert.assertNull(claimStatistic6);
        org.junit.Assert.assertTrue("'" + options7 + "' != '" + org.apache.rat.utils.ReportingSet.Options.OVERWRITE + "'", options7.equals(org.apache.rat.utils.ReportingSet.Options.OVERWRITE));
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + true + "'", boolean10 == true);
        org.junit.Assert.assertNotNull(iLicenseArray11);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
        org.junit.Assert.assertNotNull(strArray26);
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + true + "'", boolean28 == true);
        org.junit.Assert.assertNotNull(filenameFilter30);
        org.junit.Assert.assertNotNull(filenameFilter31);
        org.junit.Assert.assertNotNull(iLicenseArray37);
        org.junit.Assert.assertTrue("'" + boolean39 + "' != '" + false + "'", boolean39 == false);
        org.junit.Assert.assertNotNull(strArray52);
        org.junit.Assert.assertTrue("'" + boolean54 + "' != '" + true + "'", boolean54 == true);
        org.junit.Assert.assertNull(iLicense56);
        org.junit.Assert.assertNull(iLicense58);
        org.junit.Assert.assertNull(iLicense60);
    }

    @Test
    public void test14765() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest29.test14765");
        org.apache.rat.utils.ReportingSet<java.lang.String> strSet0 = new org.apache.rat.utils.ReportingSet<java.lang.String>();
        int int1 = strSet0.size();
        org.apache.rat.utils.ReportingSet<java.lang.String> strSet3 = strSet0.headSet("?????");
        org.apache.rat.utils.ReportingSet<java.lang.String> strSet6 = strSet0.subSet("TextBuilder: true http://org/apache/rat/meta-data#LicenseFamilyName", "org/a");
        java.util.Comparator<? super java.lang.String> wildcardComparator7 = strSet6.comparator();
        org.junit.Assert.assertTrue("'" + int1 + "' != '" + 0 + "'", int1 == 0);
        org.junit.Assert.assertNotNull(strSet3);
        org.junit.Assert.assertNotNull(strSet6);
        org.junit.Assert.assertNull(wildcardComparator7);
    }

    @Test
    public void test14766() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest29.test14766");
        org.apache.rat.license.ILicense.Builder builder0 = org.apache.rat.license.ILicense.builder();
        org.apache.rat.license.ILicense.Builder builder2 = builder0.setLicenseFamilyCategory("http://org/apache/rat/meta-data#HeaderCategory");
        org.apache.rat.license.ILicense.Builder builder4 = builder0.setDerivedFrom("MANIFEST.MF");
        org.apache.rat.license.ILicense.Builder builder6 = builder0.setId("ed0faf32-f32c-46f1-a629-4fe87704cb0e");
        org.apache.rat.license.ILicense.Builder builder8 = builder0.setDerivedFrom("01cd6410-ba98-464c-a66e-0b7190dd6096");
        org.apache.rat.analysis.matchers.FullTextMatcher fullTextMatcher11 = new org.apache.rat.analysis.matchers.FullTextMatcher("http://org/apache/rat/meta-data", "Apache License Version 2.0");
        org.apache.rat.analysis.IHeaderMatcher.State state12 = fullTextMatcher11.currentState();
        org.apache.rat.analysis.matchers.NotMatcher notMatcher13 = new org.apache.rat.analysis.matchers.NotMatcher((org.apache.rat.analysis.IHeaderMatcher) fullTextMatcher11);
        boolean boolean15 = fullTextMatcher11.doMatch("JAVA");
        org.apache.rat.analysis.matchers.NotMatcher notMatcher16 = new org.apache.rat.analysis.matchers.NotMatcher((org.apache.rat.analysis.IHeaderMatcher) fullTextMatcher11);
        org.apache.rat.analysis.IHeaderMatcher.State state18 = notMatcher16.matches("6620e9ee-d651-4c18-8162-edad6d18368e");
        org.apache.rat.license.ILicense.Builder builder19 = builder8.setMatcher((org.apache.rat.analysis.IHeaderMatcher) notMatcher16);
        notMatcher16.reset();
        org.apache.rat.analysis.IHeaderMatcher.State state22 = notMatcher16.matches("5229ae24-2b36-466b-8ff4-f67a7c68ef04");
        org.junit.Assert.assertNotNull(builder0);
        org.junit.Assert.assertNotNull(builder2);
        org.junit.Assert.assertNotNull(builder4);
        org.junit.Assert.assertNotNull(builder6);
        org.junit.Assert.assertNotNull(builder8);
        org.junit.Assert.assertTrue("'" + state12 + "' != '" + org.apache.rat.analysis.IHeaderMatcher.State.i + "'", state12.equals(org.apache.rat.analysis.IHeaderMatcher.State.i));
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + false + "'", boolean15 == false);
        org.junit.Assert.assertTrue("'" + state18 + "' != '" + org.apache.rat.analysis.IHeaderMatcher.State.i + "'", state18.equals(org.apache.rat.analysis.IHeaderMatcher.State.i));
        org.junit.Assert.assertNotNull(builder19);
        org.junit.Assert.assertTrue("'" + state22 + "' != '" + org.apache.rat.analysis.IHeaderMatcher.State.i + "'", state22.equals(org.apache.rat.analysis.IHeaderMatcher.State.i));
    }

    @Test
    public void test14767() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest29.test14767");
        org.apache.rat.utils.Log log0 = null;
        org.apache.rat.ReportConfiguration reportConfiguration1 = new org.apache.rat.ReportConfiguration(log0);
        org.apache.rat.report.claim.ClaimStatistic claimStatistic2 = org.apache.rat.Reporter.report(reportConfiguration1);
        org.apache.rat.license.ILicense[] iLicenseArray3 = new org.apache.rat.license.ILicense[] {};
        java.util.TreeSet<org.apache.rat.license.ILicense> iLicenseSet4 = new java.util.TreeSet<org.apache.rat.license.ILicense>();
        boolean boolean5 = java.util.Collections.addAll((java.util.Collection<org.apache.rat.license.ILicense>) iLicenseSet4, iLicenseArray3);
        java.lang.String[] strArray18 = new java.lang.String[] { "GPL2 ", "GPL1 ", "notice", "http://org/apache/rat/meta-data#LicenseFamilyName", "notice", "GPL2 ", "http://org/apache/rat/meta-data#LicenseFamilyName", "", "GPL2 ", "", "GPL1 ", "hi!" };
        java.util.ArrayList<java.lang.String> strList19 = new java.util.ArrayList<java.lang.String>();
        boolean boolean20 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strList19, strArray18);
        org.apache.rat.license.LicenseSetFactory licenseSetFactory21 = new org.apache.rat.license.LicenseSetFactory((java.util.SortedSet<org.apache.rat.license.ILicense>) iLicenseSet4, (java.util.Collection<java.lang.String>) strList19);
        org.apache.rat.utils.Log log22 = null;
        org.apache.rat.ReportConfiguration reportConfiguration23 = new org.apache.rat.ReportConfiguration(log22);
        java.io.FilenameFilter filenameFilter24 = reportConfiguration23.getInputFileFilter();
        org.apache.rat.license.LicenseSetFactory.LicenseFilter licenseFilter25 = org.apache.rat.license.LicenseSetFactory.LicenseFilter.all;
        java.util.SortedSet<org.apache.rat.license.ILicense> iLicenseSet26 = reportConfiguration23.getLicenses(licenseFilter25);
        org.apache.rat.config.AddLicenseHeaders addLicenseHeaders27 = org.apache.rat.config.AddLicenseHeaders.FALSE;
        reportConfiguration23.setAddLicenseHeaders(addLicenseHeaders27);
        org.apache.rat.utils.Log log29 = null;
        org.apache.rat.ReportConfiguration reportConfiguration30 = new org.apache.rat.ReportConfiguration(log29);
        org.apache.rat.report.claim.ClaimStatistic claimStatistic31 = org.apache.rat.Reporter.report(reportConfiguration30);
        org.apache.rat.license.LicenseSetFactory.LicenseFilter licenseFilter32 = org.apache.rat.license.LicenseSetFactory.LicenseFilter.all;
        org.apache.rat.Reporter.listLicenses(reportConfiguration30, licenseFilter32);
        org.apache.rat.Reporter.listLicenses(reportConfiguration23, licenseFilter32);
        org.apache.rat.utils.Log log35 = null;
        org.apache.rat.ReportConfiguration reportConfiguration36 = new org.apache.rat.ReportConfiguration(log35);
        java.io.FilenameFilter filenameFilter37 = reportConfiguration36.getInputFileFilter();
        org.apache.rat.license.LicenseSetFactory.LicenseFilter licenseFilter38 = org.apache.rat.license.LicenseSetFactory.LicenseFilter.all;
        java.util.SortedSet<org.apache.rat.license.ILicense> iLicenseSet39 = reportConfiguration36.getLicenses(licenseFilter38);
        org.apache.rat.config.AddLicenseHeaders addLicenseHeaders40 = org.apache.rat.config.AddLicenseHeaders.FALSE;
        reportConfiguration36.setAddLicenseHeaders(addLicenseHeaders40);
        org.apache.rat.utils.Log log42 = null;
        org.apache.rat.ReportConfiguration reportConfiguration43 = new org.apache.rat.ReportConfiguration(log42);
        org.apache.rat.report.claim.ClaimStatistic claimStatistic44 = org.apache.rat.Reporter.report(reportConfiguration43);
        org.apache.rat.license.LicenseSetFactory.LicenseFilter licenseFilter45 = org.apache.rat.license.LicenseSetFactory.LicenseFilter.all;
        org.apache.rat.Reporter.listLicenses(reportConfiguration43, licenseFilter45);
        org.apache.rat.Reporter.listLicenses(reportConfiguration36, licenseFilter45);
        org.apache.rat.Reporter.listLicenses(reportConfiguration23, licenseFilter45);
        java.util.SortedSet<org.apache.rat.license.ILicense> iLicenseSet49 = licenseSetFactory21.getLicenses(licenseFilter45);
        reportConfiguration1.addLicensesIfNotPresent((java.util.Collection<org.apache.rat.license.ILicense>) iLicenseSet49);
        java.io.FilenameFilter filenameFilter51 = reportConfiguration1.getInputFileFilter();
        reportConfiguration1.removeApprovedLicenseCategory("A");
        org.junit.Assert.assertNull(claimStatistic2);
        org.junit.Assert.assertNotNull(iLicenseArray3);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertNotNull(strArray18);
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + true + "'", boolean20 == true);
        org.junit.Assert.assertNull(filenameFilter24);
        org.junit.Assert.assertTrue("'" + licenseFilter25 + "' != '" + org.apache.rat.license.LicenseSetFactory.LicenseFilter.all + "'", licenseFilter25.equals(org.apache.rat.license.LicenseSetFactory.LicenseFilter.all));
        org.junit.Assert.assertNotNull(iLicenseSet26);
        org.junit.Assert.assertTrue("'" + addLicenseHeaders27 + "' != '" + org.apache.rat.config.AddLicenseHeaders.FALSE + "'", addLicenseHeaders27.equals(org.apache.rat.config.AddLicenseHeaders.FALSE));
        org.junit.Assert.assertNull(claimStatistic31);
        org.junit.Assert.assertTrue("'" + licenseFilter32 + "' != '" + org.apache.rat.license.LicenseSetFactory.LicenseFilter.all + "'", licenseFilter32.equals(org.apache.rat.license.LicenseSetFactory.LicenseFilter.all));
        org.junit.Assert.assertNull(filenameFilter37);
        org.junit.Assert.assertTrue("'" + licenseFilter38 + "' != '" + org.apache.rat.license.LicenseSetFactory.LicenseFilter.all + "'", licenseFilter38.equals(org.apache.rat.license.LicenseSetFactory.LicenseFilter.all));
        org.junit.Assert.assertNotNull(iLicenseSet39);
        org.junit.Assert.assertTrue("'" + addLicenseHeaders40 + "' != '" + org.apache.rat.config.AddLicenseHeaders.FALSE + "'", addLicenseHeaders40.equals(org.apache.rat.config.AddLicenseHeaders.FALSE));
        org.junit.Assert.assertNull(claimStatistic44);
        org.junit.Assert.assertTrue("'" + licenseFilter45 + "' != '" + org.apache.rat.license.LicenseSetFactory.LicenseFilter.all + "'", licenseFilter45.equals(org.apache.rat.license.LicenseSetFactory.LicenseFilter.all));
        org.junit.Assert.assertNotNull(iLicenseSet49);
        org.junit.Assert.assertNull(filenameFilter51);
    }

    @Test
    public void test14768() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest29.test14768");
        org.apache.rat.report.claim.ClaimStatistic claimStatistic0 = new org.apache.rat.report.claim.ClaimStatistic();
        claimStatistic0.setNumApproved((int) (short) 10);
        claimStatistic0.setNumUnknown((int) '#');
        java.util.Map<java.lang.String, java.lang.Integer> strMap5 = claimStatistic0.getLicenseFileNameMap();
        java.util.Map<java.lang.String, java.lang.Integer> strMap6 = claimStatistic0.getLicenseFileCodeMap();
        org.junit.Assert.assertNull(strMap5);
        org.junit.Assert.assertNull(strMap6);
    }

    @Test
    public void test14769() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest29.test14769");
        org.apache.rat.utils.DefaultLog defaultLog0 = org.apache.rat.utils.DefaultLog.INSTANCE;
        org.apache.rat.configuration.builders.AllBuilder allBuilder1 = new org.apache.rat.configuration.builders.AllBuilder();
        org.apache.rat.configuration.builders.MatcherRefBuilder matcherRefBuilder2 = org.apache.rat.analysis.IHeaderMatcher.Builder.matcherRef();
        boolean boolean3 = matcherRefBuilder2.hasId();
        java.lang.String str4 = matcherRefBuilder2.toString();
        org.apache.rat.configuration.builders.AnyBuilder anyBuilder5 = org.apache.rat.analysis.IHeaderMatcher.Builder.any();
        org.apache.rat.configuration.builders.NotBuilder notBuilder6 = new org.apache.rat.configuration.builders.NotBuilder();
        java.lang.String str7 = notBuilder6.toString();
        org.apache.rat.configuration.builders.MatcherRefBuilder matcherRefBuilder8 = org.apache.rat.analysis.IHeaderMatcher.Builder.matcherRef();
        boolean boolean9 = matcherRefBuilder8.hasId();
        java.util.Map<java.lang.String, org.apache.rat.analysis.IHeaderMatcher> strMap10 = null;
        org.apache.rat.configuration.builders.MatcherRefBuilder matcherRefBuilder11 = matcherRefBuilder8.setMatchers(strMap10);
        org.apache.rat.configuration.builders.AllBuilder allBuilder12 = new org.apache.rat.configuration.builders.AllBuilder();
        org.apache.rat.configuration.builders.CopyrightBuilder copyrightBuilder13 = org.apache.rat.analysis.IHeaderMatcher.Builder.copyright();
        org.apache.rat.configuration.builders.CopyrightBuilder copyrightBuilder15 = copyrightBuilder13.setStart("OASIS");
        java.lang.String str16 = copyrightBuilder13.toString();
        org.apache.rat.configuration.builders.CopyrightBuilder copyrightBuilder18 = copyrightBuilder13.setStart("223f0aba-15d4-49e9-901e-5740c137aebf");
        org.apache.rat.configuration.builders.MatcherRefBuilder matcherRefBuilder19 = org.apache.rat.analysis.IHeaderMatcher.Builder.matcherRef();
        boolean boolean20 = matcherRefBuilder19.hasId();
        org.apache.rat.configuration.builders.CopyrightBuilder copyrightBuilder21 = org.apache.rat.analysis.IHeaderMatcher.Builder.copyright();
        org.apache.rat.configuration.builders.CopyrightBuilder copyrightBuilder23 = copyrightBuilder21.setStart("OASIS");
        java.lang.String str24 = copyrightBuilder21.toString();
        org.apache.rat.configuration.builders.CopyrightBuilder copyrightBuilder26 = copyrightBuilder21.setStart("223f0aba-15d4-49e9-901e-5740c137aebf");
        org.apache.rat.configuration.builders.CopyrightBuilder copyrightBuilder27 = org.apache.rat.analysis.IHeaderMatcher.Builder.copyright();
        org.apache.rat.configuration.builders.CopyrightBuilder copyrightBuilder28 = org.apache.rat.analysis.IHeaderMatcher.Builder.copyright();
        java.lang.String str29 = copyrightBuilder28.toString();
        org.apache.rat.configuration.builders.CopyrightBuilder copyrightBuilder31 = copyrightBuilder28.setEnd(".cvsignore");
        boolean boolean32 = copyrightBuilder28.hasId();
        org.apache.rat.configuration.builders.CopyrightBuilder copyrightBuilder33 = org.apache.rat.analysis.IHeaderMatcher.Builder.copyright();
        java.lang.String str34 = copyrightBuilder33.toString();
        org.apache.rat.configuration.builders.CopyrightBuilder copyrightBuilder36 = copyrightBuilder33.setEnd(".cvsignore");
        boolean boolean37 = copyrightBuilder33.hasId();
        java.lang.String str38 = copyrightBuilder33.toString();
        org.apache.rat.configuration.builders.CopyrightBuilder copyrightBuilder39 = org.apache.rat.analysis.IHeaderMatcher.Builder.copyright();
        org.apache.rat.configuration.builders.CopyrightBuilder copyrightBuilder41 = copyrightBuilder39.setStart("OASIS");
        org.apache.rat.configuration.builders.AnyBuilder anyBuilder42 = org.apache.rat.analysis.IHeaderMatcher.Builder.any();
        org.apache.rat.configuration.builders.MatcherRefBuilder matcherRefBuilder43 = org.apache.rat.analysis.IHeaderMatcher.Builder.matcherRef();
        boolean boolean44 = matcherRefBuilder43.hasId();
        java.util.Map<java.lang.String, org.apache.rat.analysis.IHeaderMatcher> strMap45 = null;
        org.apache.rat.configuration.builders.MatcherRefBuilder matcherRefBuilder46 = matcherRefBuilder43.setMatchers(strMap45);
        org.apache.rat.configuration.builders.CopyrightBuilder copyrightBuilder47 = org.apache.rat.analysis.IHeaderMatcher.Builder.copyright();
        org.apache.rat.configuration.builders.MatcherRefBuilder matcherRefBuilder48 = org.apache.rat.analysis.IHeaderMatcher.Builder.matcherRef();
        boolean boolean49 = matcherRefBuilder48.hasId();
        java.lang.String str50 = matcherRefBuilder48.toString();
        java.util.Map<java.lang.String, org.apache.rat.analysis.IHeaderMatcher> strMap51 = null;
        org.apache.rat.configuration.builders.MatcherRefBuilder matcherRefBuilder52 = matcherRefBuilder48.setMatchers(strMap51);
        org.apache.rat.analysis.IHeaderMatcher.Builder[] builderArray53 = new org.apache.rat.analysis.IHeaderMatcher.Builder[] { matcherRefBuilder8, allBuilder12, copyrightBuilder18, matcherRefBuilder19, copyrightBuilder21, copyrightBuilder27, copyrightBuilder28, copyrightBuilder33, copyrightBuilder39, anyBuilder42, matcherRefBuilder43, copyrightBuilder47, matcherRefBuilder48 };
        java.util.ArrayList<org.apache.rat.analysis.IHeaderMatcher.Builder> builderList54 = new java.util.ArrayList<org.apache.rat.analysis.IHeaderMatcher.Builder>();
        boolean boolean55 = java.util.Collections.addAll((java.util.Collection<org.apache.rat.analysis.IHeaderMatcher.Builder>) builderList54, builderArray53);
        org.apache.rat.configuration.builders.AbstractBuilder abstractBuilder56 = notBuilder6.add((java.util.Collection<org.apache.rat.analysis.IHeaderMatcher.Builder>) builderList54);
        org.apache.rat.configuration.builders.MatcherRefBuilder matcherRefBuilder57 = new org.apache.rat.configuration.builders.MatcherRefBuilder();
        org.apache.rat.analysis.IHeaderMatcher.Builder[] builderArray58 = new org.apache.rat.analysis.IHeaderMatcher.Builder[] { matcherRefBuilder2, anyBuilder5, notBuilder6, matcherRefBuilder57 };
        java.util.ArrayList<org.apache.rat.analysis.IHeaderMatcher.Builder> builderList59 = new java.util.ArrayList<org.apache.rat.analysis.IHeaderMatcher.Builder>();
        boolean boolean60 = java.util.Collections.addAll((java.util.Collection<org.apache.rat.analysis.IHeaderMatcher.Builder>) builderList59, builderArray58);
        org.apache.rat.configuration.builders.AbstractBuilder abstractBuilder61 = allBuilder1.add((java.util.Collection<org.apache.rat.analysis.IHeaderMatcher.Builder>) builderList59);
        defaultLog0.info((java.lang.Object) allBuilder1);
        org.apache.rat.ReportConfiguration reportConfiguration63 = new org.apache.rat.ReportConfiguration((org.apache.rat.utils.Log) defaultLog0);
        org.apache.rat.license.ILicense[] iLicenseArray65 = new org.apache.rat.license.ILicense[] {};
        java.util.TreeSet<org.apache.rat.license.ILicense> iLicenseSet66 = new java.util.TreeSet<org.apache.rat.license.ILicense>();
        boolean boolean67 = java.util.Collections.addAll((java.util.Collection<org.apache.rat.license.ILicense>) iLicenseSet66, iLicenseArray65);
        java.lang.String[] strArray80 = new java.lang.String[] { "GPL2 ", "GPL1 ", "notice", "http://org/apache/rat/meta-data#LicenseFamilyName", "notice", "GPL2 ", "http://org/apache/rat/meta-data#LicenseFamilyName", "", "GPL2 ", "", "GPL1 ", "hi!" };
        java.util.ArrayList<java.lang.String> strList81 = new java.util.ArrayList<java.lang.String>();
        boolean boolean82 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strList81, strArray80);
        org.apache.rat.license.LicenseSetFactory licenseSetFactory83 = new org.apache.rat.license.LicenseSetFactory((java.util.SortedSet<org.apache.rat.license.ILicense>) iLicenseSet66, (java.util.Collection<java.lang.String>) strList81);
        org.apache.rat.license.ILicense iLicense84 = org.apache.rat.license.LicenseSetFactory.search("JAVA", (java.util.SortedSet<org.apache.rat.license.ILicense>) iLicenseSet66);
        org.apache.rat.utils.ReportingSet<org.apache.rat.license.ILicense> iLicenseSet85 = new org.apache.rat.utils.ReportingSet<org.apache.rat.license.ILicense>((java.util.SortedSet<org.apache.rat.license.ILicense>) iLicenseSet66);
        reportConfiguration63.addLicenses((java.util.Collection<org.apache.rat.license.ILicense>) iLicenseSet66);
        org.apache.rat.license.ILicenseFamily iLicenseFamily87 = null;
        reportConfiguration63.addFamily(iLicenseFamily87);
        org.apache.commons.io.function.IOSupplier<java.io.OutputStream> outputStreamIOSupplier89 = null;
        reportConfiguration63.setOut(outputStreamIOSupplier89);
        org.junit.Assert.assertNotNull(defaultLog0);
        org.junit.Assert.assertNotNull(matcherRefBuilder2);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "MathcerRefBuilder: null" + "'", str4, "MathcerRefBuilder: null");
        org.junit.Assert.assertNotNull(anyBuilder5);
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "NotBuilder: null" + "'", str7, "NotBuilder: null");
        org.junit.Assert.assertNotNull(matcherRefBuilder8);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertNotNull(matcherRefBuilder11);
        org.junit.Assert.assertNotNull(copyrightBuilder13);
        org.junit.Assert.assertNotNull(copyrightBuilder15);
        org.junit.Assert.assertEquals("'" + str16 + "' != '" + "Copyright Builder: s:OASIS e:null o:null" + "'", str16, "Copyright Builder: s:OASIS e:null o:null");
        org.junit.Assert.assertNotNull(copyrightBuilder18);
        org.junit.Assert.assertNotNull(matcherRefBuilder19);
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + false + "'", boolean20 == false);
        org.junit.Assert.assertNotNull(copyrightBuilder21);
        org.junit.Assert.assertNotNull(copyrightBuilder23);
        org.junit.Assert.assertEquals("'" + str24 + "' != '" + "Copyright Builder: s:OASIS e:null o:null" + "'", str24, "Copyright Builder: s:OASIS e:null o:null");
        org.junit.Assert.assertNotNull(copyrightBuilder26);
        org.junit.Assert.assertNotNull(copyrightBuilder27);
        org.junit.Assert.assertNotNull(copyrightBuilder28);
        org.junit.Assert.assertEquals("'" + str29 + "' != '" + "Copyright Builder: s:null e:null o:null" + "'", str29, "Copyright Builder: s:null e:null o:null");
        org.junit.Assert.assertNotNull(copyrightBuilder31);
        org.junit.Assert.assertTrue("'" + boolean32 + "' != '" + false + "'", boolean32 == false);
        org.junit.Assert.assertNotNull(copyrightBuilder33);
        org.junit.Assert.assertEquals("'" + str34 + "' != '" + "Copyright Builder: s:null e:null o:null" + "'", str34, "Copyright Builder: s:null e:null o:null");
        org.junit.Assert.assertNotNull(copyrightBuilder36);
        org.junit.Assert.assertTrue("'" + boolean37 + "' != '" + false + "'", boolean37 == false);
        org.junit.Assert.assertEquals("'" + str38 + "' != '" + "Copyright Builder: s:null e:.cvsignore o:null" + "'", str38, "Copyright Builder: s:null e:.cvsignore o:null");
        org.junit.Assert.assertNotNull(copyrightBuilder39);
        org.junit.Assert.assertNotNull(copyrightBuilder41);
        org.junit.Assert.assertNotNull(anyBuilder42);
        org.junit.Assert.assertNotNull(matcherRefBuilder43);
        org.junit.Assert.assertTrue("'" + boolean44 + "' != '" + false + "'", boolean44 == false);
        org.junit.Assert.assertNotNull(matcherRefBuilder46);
        org.junit.Assert.assertNotNull(copyrightBuilder47);
        org.junit.Assert.assertNotNull(matcherRefBuilder48);
        org.junit.Assert.assertTrue("'" + boolean49 + "' != '" + false + "'", boolean49 == false);
        org.junit.Assert.assertEquals("'" + str50 + "' != '" + "MathcerRefBuilder: null" + "'", str50, "MathcerRefBuilder: null");
        org.junit.Assert.assertNotNull(matcherRefBuilder52);
        org.junit.Assert.assertNotNull(builderArray53);
        org.junit.Assert.assertTrue("'" + boolean55 + "' != '" + true + "'", boolean55 == true);
        org.junit.Assert.assertNotNull(abstractBuilder56);
        org.junit.Assert.assertNotNull(builderArray58);
        org.junit.Assert.assertTrue("'" + boolean60 + "' != '" + true + "'", boolean60 == true);
        org.junit.Assert.assertNotNull(abstractBuilder61);
        org.junit.Assert.assertNotNull(iLicenseArray65);
        org.junit.Assert.assertTrue("'" + boolean67 + "' != '" + false + "'", boolean67 == false);
        org.junit.Assert.assertNotNull(strArray80);
        org.junit.Assert.assertTrue("'" + boolean82 + "' != '" + true + "'", boolean82 == true);
        org.junit.Assert.assertNull(iLicense84);
    }

    @Test
    public void test14770() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest29.test14770");
        org.apache.rat.configuration.builders.TextBuilder textBuilder0 = new org.apache.rat.configuration.builders.TextBuilder();
        org.apache.rat.configuration.builders.TextBuilder textBuilder2 = textBuilder0.setText("true");
        org.apache.rat.configuration.builders.TextBuilder textBuilder4 = textBuilder0.setText("stand");
        org.apache.rat.configuration.builders.TextBuilder textBuilder6 = textBuilder0.setText("ApacheLicenseVersion20");
        java.lang.String str7 = textBuilder0.toString();
        org.apache.rat.configuration.builders.TextCaptureBuilder textCaptureBuilder9 = textBuilder0.setText("fc097836-bed8-42ff-be46-7a575bf519d2");
        org.apache.rat.configuration.builders.TextBuilder textBuilder11 = textBuilder0.setText("Copyright Builder: s:.cvsignore e:standard o:b9d57440-4b03-461e-a164-b29e1341bbc8");
        org.junit.Assert.assertNotNull(textBuilder2);
        org.junit.Assert.assertNotNull(textBuilder4);
        org.junit.Assert.assertNotNull(textBuilder6);
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "TextBuilder: ApacheLicenseVersion..." + "'", str7, "TextBuilder: ApacheLicenseVersion...");
        org.junit.Assert.assertNotNull(textCaptureBuilder9);
        org.junit.Assert.assertNotNull(textBuilder11);
    }

    @Test
    public void test14771() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest29.test14771");
        java.io.Writer writer0 = null;
        org.apache.rat.report.xml.writer.impl.base.XmlWriter xmlWriter1 = new org.apache.rat.report.xml.writer.impl.base.XmlWriter(writer0);
        org.apache.rat.report.claim.impl.xml.SimpleXmlClaimReporter simpleXmlClaimReporter2 = new org.apache.rat.report.claim.impl.xml.SimpleXmlClaimReporter((org.apache.rat.report.xml.writer.IXmlWriter) xmlWriter1);
        org.apache.rat.report.claim.impl.xml.SimpleXmlClaimReporter simpleXmlClaimReporter3 = new org.apache.rat.report.claim.impl.xml.SimpleXmlClaimReporter((org.apache.rat.report.xml.writer.IXmlWriter) xmlWriter1);
        org.apache.rat.report.claim.impl.xml.SimpleXmlClaimReporter simpleXmlClaimReporter4 = new org.apache.rat.report.claim.impl.xml.SimpleXmlClaimReporter((org.apache.rat.report.xml.writer.IXmlWriter) xmlWriter1);
        org.apache.rat.report.claim.impl.xml.SimpleXmlClaimReporter simpleXmlClaimReporter5 = new org.apache.rat.report.claim.impl.xml.SimpleXmlClaimReporter((org.apache.rat.report.xml.writer.IXmlWriter) xmlWriter1);
        org.apache.rat.report.claim.impl.xml.SimpleXmlClaimReporter simpleXmlClaimReporter6 = new org.apache.rat.report.claim.impl.xml.SimpleXmlClaimReporter((org.apache.rat.report.xml.writer.IXmlWriter) xmlWriter1);
        org.apache.rat.report.claim.impl.xml.SimpleXmlClaimReporter simpleXmlClaimReporter7 = new org.apache.rat.report.claim.impl.xml.SimpleXmlClaimReporter((org.apache.rat.report.xml.writer.IXmlWriter) xmlWriter1);
        // The following exception was thrown during execution in test generation
        try {
            org.apache.rat.report.xml.writer.IXmlWriter iXmlWriter9 = xmlWriter1.openElement((java.lang.CharSequence) "9ff12955a2a343ec88c88b4c159ccbfa");
            org.junit.Assert.fail("Expected exception of type org.apache.rat.report.xml.writer.InvalidXmlException; message: '9ff12955a2a343ec88c88b4c159ccbfa' is not a valid element name");
        } catch (org.apache.rat.report.xml.writer.InvalidXmlException e) {
            // Expected exception.
        }
    }

    @Test
    public void test14772() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest29.test14772");
        java.io.Writer writer0 = null;
        org.apache.rat.report.xml.writer.impl.base.XmlWriter xmlWriter1 = new org.apache.rat.report.xml.writer.impl.base.XmlWriter(writer0);
        org.apache.rat.report.claim.impl.xml.SimpleXmlClaimReporter simpleXmlClaimReporter2 = new org.apache.rat.report.claim.impl.xml.SimpleXmlClaimReporter((org.apache.rat.report.xml.writer.IXmlWriter) xmlWriter1);
        org.apache.rat.report.claim.impl.xml.SimpleXmlClaimReporter simpleXmlClaimReporter3 = new org.apache.rat.report.claim.impl.xml.SimpleXmlClaimReporter((org.apache.rat.report.xml.writer.IXmlWriter) xmlWriter1);
        org.apache.rat.report.claim.impl.xml.SimpleXmlClaimReporter simpleXmlClaimReporter4 = new org.apache.rat.report.claim.impl.xml.SimpleXmlClaimReporter((org.apache.rat.report.xml.writer.IXmlWriter) xmlWriter1);
        org.apache.rat.report.claim.impl.xml.SimpleXmlClaimReporter simpleXmlClaimReporter5 = new org.apache.rat.report.claim.impl.xml.SimpleXmlClaimReporter((org.apache.rat.report.xml.writer.IXmlWriter) xmlWriter1);
        org.apache.rat.report.claim.impl.xml.SimpleXmlClaimReporter simpleXmlClaimReporter6 = new org.apache.rat.report.claim.impl.xml.SimpleXmlClaimReporter((org.apache.rat.report.xml.writer.IXmlWriter) xmlWriter1);
        org.apache.rat.report.claim.impl.xml.SimpleXmlClaimReporter simpleXmlClaimReporter7 = new org.apache.rat.report.claim.impl.xml.SimpleXmlClaimReporter((org.apache.rat.report.xml.writer.IXmlWriter) xmlWriter1);
        org.apache.rat.report.claim.impl.xml.SimpleXmlClaimReporter simpleXmlClaimReporter8 = new org.apache.rat.report.claim.impl.xml.SimpleXmlClaimReporter((org.apache.rat.report.xml.writer.IXmlWriter) xmlWriter1);
        org.apache.rat.report.claim.impl.xml.SimpleXmlClaimReporter simpleXmlClaimReporter9 = new org.apache.rat.report.claim.impl.xml.SimpleXmlClaimReporter((org.apache.rat.report.xml.writer.IXmlWriter) xmlWriter1);
        org.apache.rat.report.claim.impl.xml.SimpleXmlClaimReporter simpleXmlClaimReporter10 = new org.apache.rat.report.claim.impl.xml.SimpleXmlClaimReporter((org.apache.rat.report.xml.writer.IXmlWriter) xmlWriter1);
        org.apache.rat.report.claim.impl.xml.SimpleXmlClaimReporter simpleXmlClaimReporter11 = new org.apache.rat.report.claim.impl.xml.SimpleXmlClaimReporter((org.apache.rat.report.xml.writer.IXmlWriter) xmlWriter1);
        org.apache.rat.report.claim.impl.xml.SimpleXmlClaimReporter simpleXmlClaimReporter12 = new org.apache.rat.report.claim.impl.xml.SimpleXmlClaimReporter((org.apache.rat.report.xml.writer.IXmlWriter) xmlWriter1);
        org.apache.rat.report.claim.impl.xml.SimpleXmlClaimReporter simpleXmlClaimReporter13 = new org.apache.rat.report.claim.impl.xml.SimpleXmlClaimReporter((org.apache.rat.report.xml.writer.IXmlWriter) xmlWriter1);
        org.apache.rat.document.ToNameTransformer toNameTransformer14 = new org.apache.rat.document.ToNameTransformer();
        org.apache.rat.report.claim.ClaimStatistic claimStatistic15 = new org.apache.rat.report.claim.ClaimStatistic();
        claimStatistic15.setNumApproved((int) (short) 10);
        claimStatistic15.setNumUnknown(30);
        java.lang.Object obj20 = toNameTransformer14.transform((java.lang.Object) claimStatistic15);
        claimStatistic15.setNumGenerated(35);
        org.apache.rat.utils.Log log23 = null;
        org.apache.rat.ReportConfiguration reportConfiguration24 = new org.apache.rat.ReportConfiguration(log23);
        org.apache.rat.license.ILicenseFamily[] iLicenseFamilyArray25 = new org.apache.rat.license.ILicenseFamily[] {};
        java.util.ArrayList<org.apache.rat.license.ILicenseFamily> iLicenseFamilyList26 = new java.util.ArrayList<org.apache.rat.license.ILicenseFamily>();
        boolean boolean27 = java.util.Collections.addAll((java.util.Collection<org.apache.rat.license.ILicenseFamily>) iLicenseFamilyList26, iLicenseFamilyArray25);
        reportConfiguration24.addFamilies((java.util.Collection<org.apache.rat.license.ILicenseFamily>) iLicenseFamilyList26);
        reportConfiguration24.addApprovedLicenseCategory("http://org/apache/rat/meta-data");
        org.apache.rat.report.IReportable iReportable31 = reportConfiguration24.getReportable();
        org.apache.commons.io.filefilter.IOFileFilter iOFileFilter32 = reportConfiguration24.getDirectoryFilter();
        org.apache.rat.utils.Log log33 = reportConfiguration24.getLog();
        // The following exception was thrown during execution in test generation
        try {
            org.apache.rat.report.RatReport ratReport34 = org.apache.rat.report.xml.XmlReportFactory.createStandardReport((org.apache.rat.report.xml.writer.IXmlWriter) xmlWriter1, claimStatistic15, reportConfiguration24);
            org.junit.Assert.fail("Expected exception of type org.apache.rat.ConfigurationException; message: At least one license must be defined");
        } catch (org.apache.rat.ConfigurationException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNull(obj20);
        org.junit.Assert.assertNotNull(iLicenseFamilyArray25);
        org.junit.Assert.assertTrue("'" + boolean27 + "' != '" + false + "'", boolean27 == false);
        org.junit.Assert.assertNull(iReportable31);
        org.junit.Assert.assertNotNull(iOFileFilter32);
        org.junit.Assert.assertNull(log33);
    }

    @Test
    public void test14773() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest29.test14773");
        org.apache.rat.utils.Log log0 = null;
        org.apache.rat.ReportConfiguration reportConfiguration1 = new org.apache.rat.ReportConfiguration(log0);
        reportConfiguration1.addApprovedLicenseCategory(".cvsignore");
        org.apache.rat.utils.Log.Level level4 = org.apache.rat.utils.Log.Level.ERROR;
        reportConfiguration1.logFamilyCollisions(level4);
        org.apache.commons.io.filefilter.IOFileFilter iOFileFilter6 = reportConfiguration1.getDirectoryFilter();
        org.apache.rat.utils.Log log7 = null;
        org.apache.rat.ReportConfiguration reportConfiguration8 = new org.apache.rat.ReportConfiguration(log7);
        org.apache.rat.utils.ReportingSet.Options options9 = org.apache.rat.utils.ReportingSet.Options.OVERWRITE;
        reportConfiguration8.licenseDuplicateOption(options9);
        org.apache.rat.utils.Log log11 = null;
        org.apache.rat.ReportConfiguration reportConfiguration12 = new org.apache.rat.ReportConfiguration(log11);
        java.io.FilenameFilter filenameFilter13 = reportConfiguration12.getInputFileFilter();
        org.apache.rat.license.LicenseSetFactory.LicenseFilter licenseFilter14 = org.apache.rat.license.LicenseSetFactory.LicenseFilter.all;
        java.util.SortedSet<org.apache.rat.license.ILicense> iLicenseSet15 = reportConfiguration12.getLicenses(licenseFilter14);
        org.apache.rat.config.AddLicenseHeaders addLicenseHeaders16 = org.apache.rat.config.AddLicenseHeaders.FALSE;
        reportConfiguration12.setAddLicenseHeaders(addLicenseHeaders16);
        org.apache.rat.utils.Log log18 = null;
        org.apache.rat.ReportConfiguration reportConfiguration19 = new org.apache.rat.ReportConfiguration(log18);
        org.apache.rat.report.claim.ClaimStatistic claimStatistic20 = org.apache.rat.Reporter.report(reportConfiguration19);
        org.apache.rat.license.LicenseSetFactory.LicenseFilter licenseFilter21 = org.apache.rat.license.LicenseSetFactory.LicenseFilter.all;
        org.apache.rat.Reporter.listLicenses(reportConfiguration19, licenseFilter21);
        org.apache.rat.Reporter.listLicenses(reportConfiguration12, licenseFilter21);
        org.apache.rat.utils.Log log24 = null;
        org.apache.rat.ReportConfiguration reportConfiguration25 = new org.apache.rat.ReportConfiguration(log24);
        java.io.FilenameFilter filenameFilter26 = reportConfiguration25.getInputFileFilter();
        org.apache.rat.license.LicenseSetFactory.LicenseFilter licenseFilter27 = org.apache.rat.license.LicenseSetFactory.LicenseFilter.all;
        java.util.SortedSet<org.apache.rat.license.ILicense> iLicenseSet28 = reportConfiguration25.getLicenses(licenseFilter27);
        org.apache.rat.config.AddLicenseHeaders addLicenseHeaders29 = org.apache.rat.config.AddLicenseHeaders.FALSE;
        reportConfiguration25.setAddLicenseHeaders(addLicenseHeaders29);
        org.apache.rat.utils.Log log31 = null;
        org.apache.rat.ReportConfiguration reportConfiguration32 = new org.apache.rat.ReportConfiguration(log31);
        org.apache.rat.report.claim.ClaimStatistic claimStatistic33 = org.apache.rat.Reporter.report(reportConfiguration32);
        org.apache.rat.license.LicenseSetFactory.LicenseFilter licenseFilter34 = org.apache.rat.license.LicenseSetFactory.LicenseFilter.all;
        org.apache.rat.Reporter.listLicenses(reportConfiguration32, licenseFilter34);
        org.apache.rat.Reporter.listLicenses(reportConfiguration25, licenseFilter34);
        org.apache.rat.Reporter.listLicenses(reportConfiguration12, licenseFilter34);
        org.apache.rat.utils.Log log38 = null;
        org.apache.rat.ReportConfiguration reportConfiguration39 = new org.apache.rat.ReportConfiguration(log38);
        org.apache.commons.io.function.IOSupplier<java.io.OutputStream> outputStreamIOSupplier40 = reportConfiguration39.getOutput();
        reportConfiguration12.setOut(outputStreamIOSupplier40);
        org.apache.rat.utils.Log.Level level42 = org.apache.rat.utils.Log.Level.WARN;
        reportConfiguration12.logLicenseCollisions(level42);
        org.apache.commons.io.filefilter.IOFileFilter iOFileFilter44 = reportConfiguration12.getDirectoryFilter();
        reportConfiguration8.setInputFileFilter((java.io.FilenameFilter) iOFileFilter44);
        java.nio.file.Path path46 = null;
        boolean boolean47 = iOFileFilter44.matches(path46);
        org.apache.commons.io.filefilter.IOFileFilter iOFileFilter48 = iOFileFilter44.negate();
        java.nio.file.Path path49 = null;
        boolean boolean50 = iOFileFilter44.matches(path49);
        org.apache.commons.io.filefilter.IOFileFilter iOFileFilter51 = iOFileFilter44.negate();
        org.apache.commons.io.filefilter.IOFileFilter iOFileFilter52 = iOFileFilter6.and(iOFileFilter51);
        java.nio.file.Path path53 = null;
        boolean boolean54 = iOFileFilter51.matches(path53);
        java.nio.file.Path path55 = null;
        boolean boolean56 = iOFileFilter51.matches(path55);
        org.junit.Assert.assertTrue("'" + level4 + "' != '" + org.apache.rat.utils.Log.Level.ERROR + "'", level4.equals(org.apache.rat.utils.Log.Level.ERROR));
        org.junit.Assert.assertNotNull(iOFileFilter6);
        org.junit.Assert.assertTrue("'" + options9 + "' != '" + org.apache.rat.utils.ReportingSet.Options.OVERWRITE + "'", options9.equals(org.apache.rat.utils.ReportingSet.Options.OVERWRITE));
        org.junit.Assert.assertNull(filenameFilter13);
        org.junit.Assert.assertTrue("'" + licenseFilter14 + "' != '" + org.apache.rat.license.LicenseSetFactory.LicenseFilter.all + "'", licenseFilter14.equals(org.apache.rat.license.LicenseSetFactory.LicenseFilter.all));
        org.junit.Assert.assertNotNull(iLicenseSet15);
        org.junit.Assert.assertTrue("'" + addLicenseHeaders16 + "' != '" + org.apache.rat.config.AddLicenseHeaders.FALSE + "'", addLicenseHeaders16.equals(org.apache.rat.config.AddLicenseHeaders.FALSE));
        org.junit.Assert.assertNull(claimStatistic20);
        org.junit.Assert.assertTrue("'" + licenseFilter21 + "' != '" + org.apache.rat.license.LicenseSetFactory.LicenseFilter.all + "'", licenseFilter21.equals(org.apache.rat.license.LicenseSetFactory.LicenseFilter.all));
        org.junit.Assert.assertNull(filenameFilter26);
        org.junit.Assert.assertTrue("'" + licenseFilter27 + "' != '" + org.apache.rat.license.LicenseSetFactory.LicenseFilter.all + "'", licenseFilter27.equals(org.apache.rat.license.LicenseSetFactory.LicenseFilter.all));
        org.junit.Assert.assertNotNull(iLicenseSet28);
        org.junit.Assert.assertTrue("'" + addLicenseHeaders29 + "' != '" + org.apache.rat.config.AddLicenseHeaders.FALSE + "'", addLicenseHeaders29.equals(org.apache.rat.config.AddLicenseHeaders.FALSE));
        org.junit.Assert.assertNull(claimStatistic33);
        org.junit.Assert.assertTrue("'" + licenseFilter34 + "' != '" + org.apache.rat.license.LicenseSetFactory.LicenseFilter.all + "'", licenseFilter34.equals(org.apache.rat.license.LicenseSetFactory.LicenseFilter.all));
        org.junit.Assert.assertNotNull(outputStreamIOSupplier40);
        org.junit.Assert.assertTrue("'" + level42 + "' != '" + org.apache.rat.utils.Log.Level.WARN + "'", level42.equals(org.apache.rat.utils.Log.Level.WARN));
        org.junit.Assert.assertNotNull(iOFileFilter44);
        org.junit.Assert.assertTrue("'" + boolean47 + "' != '" + false + "'", boolean47 == false);
        org.junit.Assert.assertNotNull(iOFileFilter48);
        org.junit.Assert.assertTrue("'" + boolean50 + "' != '" + false + "'", boolean50 == false);
        org.junit.Assert.assertNotNull(iOFileFilter51);
        org.junit.Assert.assertNotNull(iOFileFilter52);
        org.junit.Assert.assertTrue("'" + boolean54 + "' != '" + true + "'", boolean54 == true);
        org.junit.Assert.assertTrue("'" + boolean56 + "' != '" + true + "'", boolean56 == true);
    }

    @Test
    public void test14774() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest29.test14774");
        java.util.regex.Pattern pattern2 = null;
        org.apache.rat.analysis.matchers.SimpleRegexMatcher simpleRegexMatcher3 = new org.apache.rat.analysis.matchers.SimpleRegexMatcher("", pattern2);
        org.apache.rat.analysis.matchers.NotMatcher notMatcher4 = new org.apache.rat.analysis.matchers.NotMatcher("GNU General Public License, version 2", (org.apache.rat.analysis.IHeaderMatcher) simpleRegexMatcher3);
        org.apache.rat.analysis.IHeaderMatcher.State state5 = notMatcher4.finalizeState();
        notMatcher4.reset();
        org.apache.rat.analysis.IHeaderMatcher.State state7 = notMatcher4.currentState();
        // The following exception was thrown during execution in test generation
        try {
            org.apache.rat.analysis.IHeaderMatcher.State state9 = notMatcher4.matches("TextBuilder: ApacheLicenseVersion...");
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + state5 + "' != '" + org.apache.rat.analysis.IHeaderMatcher.State.t + "'", state5.equals(org.apache.rat.analysis.IHeaderMatcher.State.t));
        org.junit.Assert.assertTrue("'" + state7 + "' != '" + org.apache.rat.analysis.IHeaderMatcher.State.i + "'", state7.equals(org.apache.rat.analysis.IHeaderMatcher.State.i));
    }

    @Test
    public void test14775() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest29.test14775");
        org.apache.rat.analysis.matchers.FullTextMatcher fullTextMatcher2 = new org.apache.rat.analysis.matchers.FullTextMatcher("MANIFEST.MF", "0356753d-7389-48e7-8d63-056fd4c4548c");
        org.apache.rat.analysis.matchers.NotMatcher notMatcher3 = new org.apache.rat.analysis.matchers.NotMatcher((org.apache.rat.analysis.IHeaderMatcher) fullTextMatcher2);
        org.apache.rat.analysis.IHeaderMatcher.State state5 = notMatcher3.matches("67f4ee730b2940fdb100eb4a09e17011");
        org.junit.Assert.assertTrue("'" + state5 + "' != '" + org.apache.rat.analysis.IHeaderMatcher.State.i + "'", state5.equals(org.apache.rat.analysis.IHeaderMatcher.State.i));
    }

    @Test
    public void test14776() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest29.test14776");
        org.apache.rat.analysis.matchers.FullTextMatcher fullTextMatcher2 = new org.apache.rat.analysis.matchers.FullTextMatcher("7480723c-65a6-4470-aa58-975de51fe7c5 null", "");
        fullTextMatcher2.reset();
    }

    @Test
    public void test14777() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest29.test14777");
        org.apache.rat.report.claim.ClaimStatistic claimStatistic0 = new org.apache.rat.report.claim.ClaimStatistic();
        claimStatistic0.setNumApproved((int) (short) 10);
        java.util.Map<java.lang.String, java.lang.Integer> strMap3 = null;
        claimStatistic0.setDocumentCategoryMap(strMap3);
        int int5 = claimStatistic0.getNumGenerated();
        int int6 = claimStatistic0.getNumGenerated();
        claimStatistic0.setNumUnknown(9);
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 0 + "'", int5 == 0);
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 0 + "'", int6 == 0);
    }

    @Test
    public void test14778() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest29.test14778");
        boolean boolean1 = org.apache.rat.document.impl.guesser.BinaryGuesser.isBinaryData("bzrignore");
        org.junit.Assert.assertTrue("'" + boolean1 + "' != '" + false + "'", boolean1 == false);
    }

    @Test
    public void test14779() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest29.test14779");
        java.lang.String str1 = org.apache.rat.document.impl.guesser.GuessUtils.normalise("Copyright Builder: s:null e:null o:null");
        org.junit.Assert.assertEquals("'" + str1 + "' != '" + "COPYRIGHT BUILDER: S:NULL E:NULL O:NULL" + "'", str1, "COPYRIGHT BUILDER: S:NULL E:NULL O:NULL");
    }

    @Test
    public void test14780() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest29.test14780");
        org.apache.rat.utils.Log log0 = null;
        org.apache.rat.ReportConfiguration reportConfiguration1 = new org.apache.rat.ReportConfiguration(log0);
        org.apache.rat.license.ILicenseFamily[] iLicenseFamilyArray2 = new org.apache.rat.license.ILicenseFamily[] {};
        java.util.ArrayList<org.apache.rat.license.ILicenseFamily> iLicenseFamilyList3 = new java.util.ArrayList<org.apache.rat.license.ILicenseFamily>();
        boolean boolean4 = java.util.Collections.addAll((java.util.Collection<org.apache.rat.license.ILicenseFamily>) iLicenseFamilyList3, iLicenseFamilyArray2);
        reportConfiguration1.addFamilies((java.util.Collection<org.apache.rat.license.ILicenseFamily>) iLicenseFamilyList3);
        org.apache.commons.io.filefilter.IOFileFilter iOFileFilter6 = reportConfiguration1.getDirectoryFilter();
        org.apache.commons.io.filefilter.IOFileFilter iOFileFilter7 = reportConfiguration1.getDirectoryFilter();
        org.junit.Assert.assertNotNull(iLicenseFamilyArray2);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertNotNull(iOFileFilter6);
        org.junit.Assert.assertNotNull(iOFileFilter7);
    }

    @Test
    public void test14781() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest29.test14781");
        org.apache.rat.license.SimpleLicenseFamily simpleLicenseFamily0 = new org.apache.rat.license.SimpleLicenseFamily();
        java.lang.String str1 = simpleLicenseFamily0.getFamilyName();
        java.lang.String str2 = simpleLicenseFamily0.getFamilyCategory();
        java.lang.String str3 = simpleLicenseFamily0.getFamilyName();
        simpleLicenseFamily0.setFamilyName("c523095e-4421-4cc4-93e2-039f23b91f76");
        simpleLicenseFamily0.setFamilyName("d4148d3a-edbc-4672-b347-0fa619553f91");
        simpleLicenseFamily0.setFamilyCategory("90663eff-7ed8-41bd-85a8-e8f189198bc6");
        simpleLicenseFamily0.setFamilyName("8f82a952-5bfd-446b-ac79-15beef5b3f17 null");
        org.junit.Assert.assertNull(str1);
        org.junit.Assert.assertNull(str2);
        org.junit.Assert.assertNull(str3);
    }

    @Test
    public void test14782() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest29.test14782");
        org.apache.rat.configuration.builders.CopyrightBuilder copyrightBuilder0 = org.apache.rat.analysis.IHeaderMatcher.Builder.copyright();
        java.lang.String str1 = copyrightBuilder0.toString();
        org.apache.rat.configuration.builders.CopyrightBuilder copyrightBuilder3 = copyrightBuilder0.setEnd(".cvsignore");
        boolean boolean4 = copyrightBuilder0.hasId();
        org.apache.rat.configuration.builders.CopyrightBuilder copyrightBuilder6 = copyrightBuilder0.setOwner("3c840dc2-bef0-42b5-b26c-35a568d53a24");
        org.apache.rat.configuration.builders.CopyrightBuilder copyrightBuilder8 = copyrightBuilder6.setOwner("GPL1 ");
        java.lang.String str9 = copyrightBuilder6.toString();
        org.apache.rat.configuration.builders.CopyrightBuilder copyrightBuilder11 = copyrightBuilder6.setStart("Datum [ name ='http://org/apache/rat/meta-data#LicenseFamilyCategory',value ='GPL1  ']");
        org.apache.rat.configuration.builders.CopyrightBuilder copyrightBuilder13 = copyrightBuilder11.setOwner("Datum");
        org.apache.rat.configuration.builders.CopyrightBuilder copyrightBuilder15 = copyrightBuilder11.setEnd("META-DATA#LICENSEFAMILYNAME',VALUE ='GNU GENERAL PUBLIC LICENSE, VERSION 1 ']");
        org.apache.rat.analysis.IHeaderMatcher iHeaderMatcher16 = copyrightBuilder11.build();
        org.junit.Assert.assertNotNull(copyrightBuilder0);
        org.junit.Assert.assertEquals("'" + str1 + "' != '" + "Copyright Builder: s:null e:null o:null" + "'", str1, "Copyright Builder: s:null e:null o:null");
        org.junit.Assert.assertNotNull(copyrightBuilder3);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertNotNull(copyrightBuilder6);
        org.junit.Assert.assertNotNull(copyrightBuilder8);
        org.junit.Assert.assertEquals("'" + str9 + "' != '" + "Copyright Builder: s:null e:.cvsignore o:GPL1 " + "'", str9, "Copyright Builder: s:null e:.cvsignore o:GPL1 ");
        org.junit.Assert.assertNotNull(copyrightBuilder11);
        org.junit.Assert.assertNotNull(copyrightBuilder13);
        org.junit.Assert.assertNotNull(copyrightBuilder15);
        org.junit.Assert.assertNotNull(iHeaderMatcher16);
    }

    @Test
    public void test14783() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest29.test14783");
        org.apache.rat.analysis.matchers.FullTextMatcher fullTextMatcher2 = new org.apache.rat.analysis.matchers.FullTextMatcher("265F6D84-FB7A-4674-9DC1-FEA7799ECF68", "c5cfce34-49e3-4912-a548-9776e14cea08");
    }

    @Test
    public void test14784() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest29.test14784");
        org.apache.rat.api.MetaData.Datum datum2 = new org.apache.rat.api.MetaData.Datum("null ", "2ed68e58-7824-4cb9-a7a0-1fdc42449c68");
    }

    @Test
    public void test14785() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest29.test14785");
        org.apache.rat.utils.Log log2 = null;
        org.apache.rat.ReportConfiguration reportConfiguration3 = new org.apache.rat.ReportConfiguration(log2);
        java.io.FilenameFilter filenameFilter4 = reportConfiguration3.getInputFileFilter();
        org.apache.rat.license.LicenseSetFactory.LicenseFilter licenseFilter5 = org.apache.rat.license.LicenseSetFactory.LicenseFilter.all;
        java.util.SortedSet<org.apache.rat.license.ILicense> iLicenseSet6 = reportConfiguration3.getLicenses(licenseFilter5);
        org.apache.rat.utils.ReportingSet<org.apache.rat.license.ILicense> iLicenseSet7 = new org.apache.rat.utils.ReportingSet<org.apache.rat.license.ILicense>(iLicenseSet6);
        org.apache.rat.license.ILicense iLicense8 = org.apache.rat.license.LicenseSetFactory.search("EF7A8B13-64C3-4510-BB0C-DBF208E1E73F", iLicenseSet6);
        org.apache.rat.license.ILicense iLicense9 = org.apache.rat.license.LicenseSetFactory.search("f96ad0b6-2267-4692-93e4-227659f9d621", iLicenseSet6);
        org.junit.Assert.assertNull(filenameFilter4);
        org.junit.Assert.assertTrue("'" + licenseFilter5 + "' != '" + org.apache.rat.license.LicenseSetFactory.LicenseFilter.all + "'", licenseFilter5.equals(org.apache.rat.license.LicenseSetFactory.LicenseFilter.all));
        org.junit.Assert.assertNotNull(iLicenseSet6);
        org.junit.Assert.assertNull(iLicense8);
        org.junit.Assert.assertNull(iLicense9);
    }

    @Test
    public void test14786() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest29.test14786");
        org.apache.rat.Defaults.Builder builder0 = org.apache.rat.Defaults.builder();
        org.apache.rat.Defaults.Builder builder2 = builder0.add("META-DATA#LICENSEFAMILYNAME");
        org.apache.rat.Defaults.Builder builder4 = builder0.remove("Copyright Builder: s:null e:null o:null");
        org.apache.rat.Defaults.Builder builder6 = builder0.add("COMMON DEVELOPMENT AND DISTRIBUTION LICENSE Version 1.0");
        org.apache.rat.Defaults.Builder builder7 = builder0.noDefault();
        org.apache.rat.Defaults.Builder builder9 = builder7.remove("SPDX:ef7a8b13-64c3-4510-bb0c-dbf208e1e73f");
        org.apache.rat.Defaults.Builder builder11 = builder9.remove("8925ba14-6c7c-466e-9335-5528e02df2c5");
        org.apache.rat.Defaults.Builder builder13 = builder9.add("RegexBuilder: 67eb96c2-83b2-456d-bfb0-23ff916bf212");
        org.apache.rat.Defaults.Builder builder15 = builder13.add("");
        org.apache.rat.Defaults.Builder builder17 = builder13.add("454fa");
        org.apache.rat.Defaults.Builder builder19 = builder13.remove("80367a1a-1630-4da1-8cb4-26fb9fc48558");
        org.junit.Assert.assertNotNull(builder0);
        org.junit.Assert.assertNotNull(builder2);
        org.junit.Assert.assertNotNull(builder4);
        org.junit.Assert.assertNotNull(builder6);
        org.junit.Assert.assertNotNull(builder7);
        org.junit.Assert.assertNotNull(builder9);
        org.junit.Assert.assertNotNull(builder11);
        org.junit.Assert.assertNotNull(builder13);
        org.junit.Assert.assertNotNull(builder15);
        org.junit.Assert.assertNotNull(builder17);
        org.junit.Assert.assertNotNull(builder19);
    }

    @Test
    public void test14787() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest29.test14787");
        java.lang.String[] strArray5 = new java.lang.String[] { "http://org/apache/rat/meta-data#LicenseFamilyCategory", "Datum [ name ='http://org/apache/rat/meta-data#LicenseFamilyCategory',value ='GPL1  ']", "MANIFEST.MF", "AllBuilder:", "The MIT License" };
        org.apache.rat.utils.ReportingSet<java.lang.String> strSet6 = new org.apache.rat.utils.ReportingSet<java.lang.String>();
        boolean boolean7 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strSet6, strArray5);
        boolean boolean9 = strSet6.addIfNotPresent("http://org/apache/rat/meta-data#LicenseFamilyName");
        java.util.Iterator<java.lang.String> strItor10 = strSet6.iterator();
        strSet6.clear();
        strSet6.clear();
        java.lang.Object[] objArray13 = strSet6.toArray();
        java.util.stream.Stream<java.lang.String> strStream14 = strSet6.stream();
        java.util.Iterator<java.lang.String> strItor15 = strSet6.iterator();
        boolean boolean17 = strSet6.addIfNotPresent("9b58713f-df10-4eb5-a5e7-b2e82c48d768");
        org.apache.rat.utils.ReportingSet<java.lang.String> strSet19 = strSet6.headSet("736352AA-A974-4B58-B2F1-4CAA6178920B");
        java.lang.Object[] objArray20 = strSet19.toArray();
        org.junit.Assert.assertNotNull(strArray5);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + true + "'", boolean7 == true);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + true + "'", boolean9 == true);
        org.junit.Assert.assertNotNull(strItor10);
        org.junit.Assert.assertNotNull(objArray13);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray13), "[]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray13), "[]");
        org.junit.Assert.assertNotNull(strStream14);
        org.junit.Assert.assertNotNull(strItor15);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + true + "'", boolean17 == true);
        org.junit.Assert.assertNotNull(strSet19);
        org.junit.Assert.assertNotNull(objArray20);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray20), "[]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray20), "[]");
    }

    @Test
    public void test14788() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest29.test14788");
        org.apache.rat.utils.DefaultLog defaultLog0 = org.apache.rat.utils.DefaultLog.INSTANCE;
        org.apache.rat.utils.Log log1 = null;
        org.apache.rat.ReportConfiguration reportConfiguration2 = new org.apache.rat.ReportConfiguration(log1);
        java.io.FilenameFilter filenameFilter3 = reportConfiguration2.getInputFileFilter();
        org.apache.rat.license.LicenseSetFactory.LicenseFilter licenseFilter4 = org.apache.rat.license.LicenseSetFactory.LicenseFilter.all;
        java.util.SortedSet<org.apache.rat.license.ILicense> iLicenseSet5 = reportConfiguration2.getLicenses(licenseFilter4);
        org.apache.rat.config.AddLicenseHeaders addLicenseHeaders6 = org.apache.rat.config.AddLicenseHeaders.FALSE;
        reportConfiguration2.setAddLicenseHeaders(addLicenseHeaders6);
        org.apache.rat.utils.Log log8 = null;
        org.apache.rat.ReportConfiguration reportConfiguration9 = new org.apache.rat.ReportConfiguration(log8);
        org.apache.rat.report.claim.ClaimStatistic claimStatistic10 = org.apache.rat.Reporter.report(reportConfiguration9);
        org.apache.rat.license.LicenseSetFactory.LicenseFilter licenseFilter11 = org.apache.rat.license.LicenseSetFactory.LicenseFilter.all;
        org.apache.rat.Reporter.listLicenses(reportConfiguration9, licenseFilter11);
        org.apache.rat.Reporter.listLicenses(reportConfiguration2, licenseFilter11);
        org.apache.rat.utils.Log log14 = null;
        org.apache.rat.ReportConfiguration reportConfiguration15 = new org.apache.rat.ReportConfiguration(log14);
        java.io.FilenameFilter filenameFilter16 = reportConfiguration15.getInputFileFilter();
        org.apache.rat.license.LicenseSetFactory.LicenseFilter licenseFilter17 = org.apache.rat.license.LicenseSetFactory.LicenseFilter.all;
        java.util.SortedSet<org.apache.rat.license.ILicense> iLicenseSet18 = reportConfiguration15.getLicenses(licenseFilter17);
        org.apache.rat.config.AddLicenseHeaders addLicenseHeaders19 = org.apache.rat.config.AddLicenseHeaders.FALSE;
        reportConfiguration15.setAddLicenseHeaders(addLicenseHeaders19);
        org.apache.rat.utils.Log log21 = null;
        org.apache.rat.ReportConfiguration reportConfiguration22 = new org.apache.rat.ReportConfiguration(log21);
        org.apache.rat.report.claim.ClaimStatistic claimStatistic23 = org.apache.rat.Reporter.report(reportConfiguration22);
        org.apache.rat.license.LicenseSetFactory.LicenseFilter licenseFilter24 = org.apache.rat.license.LicenseSetFactory.LicenseFilter.all;
        org.apache.rat.Reporter.listLicenses(reportConfiguration22, licenseFilter24);
        org.apache.rat.Reporter.listLicenses(reportConfiguration15, licenseFilter24);
        org.apache.rat.Reporter.listLicenses(reportConfiguration2, licenseFilter24);
        org.apache.rat.utils.Log log28 = null;
        org.apache.rat.ReportConfiguration reportConfiguration29 = new org.apache.rat.ReportConfiguration(log28);
        org.apache.commons.io.function.IOSupplier<java.io.OutputStream> outputStreamIOSupplier30 = reportConfiguration29.getOutput();
        reportConfiguration2.setOut(outputStreamIOSupplier30);
        org.apache.rat.utils.Log log32 = null;
        org.apache.rat.ReportConfiguration reportConfiguration33 = new org.apache.rat.ReportConfiguration(log32);
        org.apache.rat.report.claim.ClaimStatistic claimStatistic34 = org.apache.rat.Reporter.report(reportConfiguration33);
        org.apache.rat.utils.Log log35 = null;
        org.apache.rat.ReportConfiguration reportConfiguration36 = new org.apache.rat.ReportConfiguration(log35);
        org.apache.rat.report.claim.ClaimStatistic claimStatistic37 = org.apache.rat.Reporter.report(reportConfiguration36);
        org.apache.rat.utils.ReportingSet.Options options38 = org.apache.rat.utils.ReportingSet.Options.OVERWRITE;
        reportConfiguration36.licenseDuplicateOption(options38);
        reportConfiguration33.familyDuplicateOption(options38);
        reportConfiguration2.licenseDuplicateOption(options38);
        reportConfiguration2.addApprovedLicenseCategory("W3C Document Copyright");
        org.apache.rat.utils.Log log44 = null;
        org.apache.rat.ReportConfiguration reportConfiguration45 = new org.apache.rat.ReportConfiguration(log44);
        reportConfiguration45.addApprovedLicenseCategory(".cvsignore");
        org.apache.rat.utils.Log.Level level48 = org.apache.rat.utils.Log.Level.ERROR;
        reportConfiguration45.logLicenseCollisions(level48);
        reportConfiguration2.logLicenseCollisions(level48);
        defaultLog0.setLevel(level48);
        defaultLog0.warn((java.lang.Object) "GNU General Public License, version 3");
        org.apache.rat.ReportConfiguration reportConfiguration54 = new org.apache.rat.ReportConfiguration((org.apache.rat.utils.Log) defaultLog0);
        org.apache.rat.ReportConfiguration reportConfiguration55 = new org.apache.rat.ReportConfiguration((org.apache.rat.utils.Log) defaultLog0);
        reportConfiguration55.addApprovedLicenseCategory("0E4CF59D6E2347EB854E2C010E384F16");
        org.junit.Assert.assertNotNull(defaultLog0);
        org.junit.Assert.assertNull(filenameFilter3);
        org.junit.Assert.assertTrue("'" + licenseFilter4 + "' != '" + org.apache.rat.license.LicenseSetFactory.LicenseFilter.all + "'", licenseFilter4.equals(org.apache.rat.license.LicenseSetFactory.LicenseFilter.all));
        org.junit.Assert.assertNotNull(iLicenseSet5);
        org.junit.Assert.assertTrue("'" + addLicenseHeaders6 + "' != '" + org.apache.rat.config.AddLicenseHeaders.FALSE + "'", addLicenseHeaders6.equals(org.apache.rat.config.AddLicenseHeaders.FALSE));
        org.junit.Assert.assertNull(claimStatistic10);
        org.junit.Assert.assertTrue("'" + licenseFilter11 + "' != '" + org.apache.rat.license.LicenseSetFactory.LicenseFilter.all + "'", licenseFilter11.equals(org.apache.rat.license.LicenseSetFactory.LicenseFilter.all));
        org.junit.Assert.assertNull(filenameFilter16);
        org.junit.Assert.assertTrue("'" + licenseFilter17 + "' != '" + org.apache.rat.license.LicenseSetFactory.LicenseFilter.all + "'", licenseFilter17.equals(org.apache.rat.license.LicenseSetFactory.LicenseFilter.all));
        org.junit.Assert.assertNotNull(iLicenseSet18);
        org.junit.Assert.assertTrue("'" + addLicenseHeaders19 + "' != '" + org.apache.rat.config.AddLicenseHeaders.FALSE + "'", addLicenseHeaders19.equals(org.apache.rat.config.AddLicenseHeaders.FALSE));
        org.junit.Assert.assertNull(claimStatistic23);
        org.junit.Assert.assertTrue("'" + licenseFilter24 + "' != '" + org.apache.rat.license.LicenseSetFactory.LicenseFilter.all + "'", licenseFilter24.equals(org.apache.rat.license.LicenseSetFactory.LicenseFilter.all));
        org.junit.Assert.assertNotNull(outputStreamIOSupplier30);
        org.junit.Assert.assertNull(claimStatistic34);
        org.junit.Assert.assertNull(claimStatistic37);
        org.junit.Assert.assertTrue("'" + options38 + "' != '" + org.apache.rat.utils.ReportingSet.Options.OVERWRITE + "'", options38.equals(org.apache.rat.utils.ReportingSet.Options.OVERWRITE));
        org.junit.Assert.assertTrue("'" + level48 + "' != '" + org.apache.rat.utils.Log.Level.ERROR + "'", level48.equals(org.apache.rat.utils.Log.Level.ERROR));
    }

    @Test
    public void test14789() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest29.test14789");
        org.apache.rat.configuration.builders.NotBuilder notBuilder0 = new org.apache.rat.configuration.builders.NotBuilder();
        java.lang.String str1 = notBuilder0.toString();
        org.apache.rat.configuration.builders.MatcherRefBuilder matcherRefBuilder2 = org.apache.rat.analysis.IHeaderMatcher.Builder.matcherRef();
        boolean boolean3 = matcherRefBuilder2.hasId();
        java.util.Map<java.lang.String, org.apache.rat.analysis.IHeaderMatcher> strMap4 = null;
        org.apache.rat.configuration.builders.MatcherRefBuilder matcherRefBuilder5 = matcherRefBuilder2.setMatchers(strMap4);
        org.apache.rat.configuration.builders.AllBuilder allBuilder6 = new org.apache.rat.configuration.builders.AllBuilder();
        org.apache.rat.configuration.builders.CopyrightBuilder copyrightBuilder7 = org.apache.rat.analysis.IHeaderMatcher.Builder.copyright();
        org.apache.rat.configuration.builders.CopyrightBuilder copyrightBuilder9 = copyrightBuilder7.setStart("OASIS");
        java.lang.String str10 = copyrightBuilder7.toString();
        org.apache.rat.configuration.builders.CopyrightBuilder copyrightBuilder12 = copyrightBuilder7.setStart("223f0aba-15d4-49e9-901e-5740c137aebf");
        org.apache.rat.configuration.builders.MatcherRefBuilder matcherRefBuilder13 = org.apache.rat.analysis.IHeaderMatcher.Builder.matcherRef();
        boolean boolean14 = matcherRefBuilder13.hasId();
        org.apache.rat.configuration.builders.CopyrightBuilder copyrightBuilder15 = org.apache.rat.analysis.IHeaderMatcher.Builder.copyright();
        org.apache.rat.configuration.builders.CopyrightBuilder copyrightBuilder17 = copyrightBuilder15.setStart("OASIS");
        java.lang.String str18 = copyrightBuilder15.toString();
        org.apache.rat.configuration.builders.CopyrightBuilder copyrightBuilder20 = copyrightBuilder15.setStart("223f0aba-15d4-49e9-901e-5740c137aebf");
        org.apache.rat.configuration.builders.CopyrightBuilder copyrightBuilder21 = org.apache.rat.analysis.IHeaderMatcher.Builder.copyright();
        org.apache.rat.configuration.builders.CopyrightBuilder copyrightBuilder22 = org.apache.rat.analysis.IHeaderMatcher.Builder.copyright();
        java.lang.String str23 = copyrightBuilder22.toString();
        org.apache.rat.configuration.builders.CopyrightBuilder copyrightBuilder25 = copyrightBuilder22.setEnd(".cvsignore");
        boolean boolean26 = copyrightBuilder22.hasId();
        org.apache.rat.configuration.builders.CopyrightBuilder copyrightBuilder27 = org.apache.rat.analysis.IHeaderMatcher.Builder.copyright();
        java.lang.String str28 = copyrightBuilder27.toString();
        org.apache.rat.configuration.builders.CopyrightBuilder copyrightBuilder30 = copyrightBuilder27.setEnd(".cvsignore");
        boolean boolean31 = copyrightBuilder27.hasId();
        java.lang.String str32 = copyrightBuilder27.toString();
        org.apache.rat.configuration.builders.CopyrightBuilder copyrightBuilder33 = org.apache.rat.analysis.IHeaderMatcher.Builder.copyright();
        org.apache.rat.configuration.builders.CopyrightBuilder copyrightBuilder35 = copyrightBuilder33.setStart("OASIS");
        org.apache.rat.configuration.builders.AnyBuilder anyBuilder36 = org.apache.rat.analysis.IHeaderMatcher.Builder.any();
        org.apache.rat.configuration.builders.MatcherRefBuilder matcherRefBuilder37 = org.apache.rat.analysis.IHeaderMatcher.Builder.matcherRef();
        boolean boolean38 = matcherRefBuilder37.hasId();
        java.util.Map<java.lang.String, org.apache.rat.analysis.IHeaderMatcher> strMap39 = null;
        org.apache.rat.configuration.builders.MatcherRefBuilder matcherRefBuilder40 = matcherRefBuilder37.setMatchers(strMap39);
        org.apache.rat.configuration.builders.CopyrightBuilder copyrightBuilder41 = org.apache.rat.analysis.IHeaderMatcher.Builder.copyright();
        org.apache.rat.configuration.builders.MatcherRefBuilder matcherRefBuilder42 = org.apache.rat.analysis.IHeaderMatcher.Builder.matcherRef();
        boolean boolean43 = matcherRefBuilder42.hasId();
        java.lang.String str44 = matcherRefBuilder42.toString();
        java.util.Map<java.lang.String, org.apache.rat.analysis.IHeaderMatcher> strMap45 = null;
        org.apache.rat.configuration.builders.MatcherRefBuilder matcherRefBuilder46 = matcherRefBuilder42.setMatchers(strMap45);
        org.apache.rat.analysis.IHeaderMatcher.Builder[] builderArray47 = new org.apache.rat.analysis.IHeaderMatcher.Builder[] { matcherRefBuilder2, allBuilder6, copyrightBuilder12, matcherRefBuilder13, copyrightBuilder15, copyrightBuilder21, copyrightBuilder22, copyrightBuilder27, copyrightBuilder33, anyBuilder36, matcherRefBuilder37, copyrightBuilder41, matcherRefBuilder42 };
        java.util.ArrayList<org.apache.rat.analysis.IHeaderMatcher.Builder> builderList48 = new java.util.ArrayList<org.apache.rat.analysis.IHeaderMatcher.Builder>();
        boolean boolean49 = java.util.Collections.addAll((java.util.Collection<org.apache.rat.analysis.IHeaderMatcher.Builder>) builderList48, builderArray47);
        org.apache.rat.configuration.builders.AbstractBuilder abstractBuilder50 = notBuilder0.add((java.util.Collection<org.apache.rat.analysis.IHeaderMatcher.Builder>) builderList48);
        java.lang.String str51 = notBuilder0.toString();
        java.lang.String str52 = notBuilder0.toString();
        java.lang.String str53 = notBuilder0.toString();
        java.lang.String str54 = notBuilder0.toString();
        java.lang.String str55 = notBuilder0.toString();
        org.apache.rat.configuration.builders.AnyBuilder anyBuilder56 = org.apache.rat.analysis.IHeaderMatcher.Builder.any();
        java.lang.String str57 = anyBuilder56.toString();
        org.apache.rat.analysis.IHeaderMatcher iHeaderMatcher58 = anyBuilder56.build();
        java.util.List<org.apache.rat.analysis.IHeaderMatcher> iHeaderMatcherList59 = anyBuilder56.getChildren();
        java.lang.String str60 = anyBuilder56.toString();
        java.lang.String str61 = anyBuilder56.toString();
        org.apache.rat.analysis.IHeaderMatcher iHeaderMatcher62 = anyBuilder56.build();
        org.apache.rat.configuration.builders.AbstractBuilder abstractBuilder63 = notBuilder0.add((org.apache.rat.analysis.IHeaderMatcher.Builder) anyBuilder56);
        org.apache.rat.analysis.IHeaderMatcher iHeaderMatcher64 = anyBuilder56.build();
        org.junit.Assert.assertEquals("'" + str1 + "' != '" + "NotBuilder: null" + "'", str1, "NotBuilder: null");
        org.junit.Assert.assertNotNull(matcherRefBuilder2);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertNotNull(matcherRefBuilder5);
        org.junit.Assert.assertNotNull(copyrightBuilder7);
        org.junit.Assert.assertNotNull(copyrightBuilder9);
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "Copyright Builder: s:OASIS e:null o:null" + "'", str10, "Copyright Builder: s:OASIS e:null o:null");
        org.junit.Assert.assertNotNull(copyrightBuilder12);
        org.junit.Assert.assertNotNull(matcherRefBuilder13);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
        org.junit.Assert.assertNotNull(copyrightBuilder15);
        org.junit.Assert.assertNotNull(copyrightBuilder17);
        org.junit.Assert.assertEquals("'" + str18 + "' != '" + "Copyright Builder: s:OASIS e:null o:null" + "'", str18, "Copyright Builder: s:OASIS e:null o:null");
        org.junit.Assert.assertNotNull(copyrightBuilder20);
        org.junit.Assert.assertNotNull(copyrightBuilder21);
        org.junit.Assert.assertNotNull(copyrightBuilder22);
        org.junit.Assert.assertEquals("'" + str23 + "' != '" + "Copyright Builder: s:null e:null o:null" + "'", str23, "Copyright Builder: s:null e:null o:null");
        org.junit.Assert.assertNotNull(copyrightBuilder25);
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + false + "'", boolean26 == false);
        org.junit.Assert.assertNotNull(copyrightBuilder27);
        org.junit.Assert.assertEquals("'" + str28 + "' != '" + "Copyright Builder: s:null e:null o:null" + "'", str28, "Copyright Builder: s:null e:null o:null");
        org.junit.Assert.assertNotNull(copyrightBuilder30);
        org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + false + "'", boolean31 == false);
        org.junit.Assert.assertEquals("'" + str32 + "' != '" + "Copyright Builder: s:null e:.cvsignore o:null" + "'", str32, "Copyright Builder: s:null e:.cvsignore o:null");
        org.junit.Assert.assertNotNull(copyrightBuilder33);
        org.junit.Assert.assertNotNull(copyrightBuilder35);
        org.junit.Assert.assertNotNull(anyBuilder36);
        org.junit.Assert.assertNotNull(matcherRefBuilder37);
        org.junit.Assert.assertTrue("'" + boolean38 + "' != '" + false + "'", boolean38 == false);
        org.junit.Assert.assertNotNull(matcherRefBuilder40);
        org.junit.Assert.assertNotNull(copyrightBuilder41);
        org.junit.Assert.assertNotNull(matcherRefBuilder42);
        org.junit.Assert.assertTrue("'" + boolean43 + "' != '" + false + "'", boolean43 == false);
        org.junit.Assert.assertEquals("'" + str44 + "' != '" + "MathcerRefBuilder: null" + "'", str44, "MathcerRefBuilder: null");
        org.junit.Assert.assertNotNull(matcherRefBuilder46);
        org.junit.Assert.assertNotNull(builderArray47);
        org.junit.Assert.assertTrue("'" + boolean49 + "' != '" + true + "'", boolean49 == true);
        org.junit.Assert.assertNotNull(abstractBuilder50);
        org.junit.Assert.assertEquals("'" + str51 + "' != '" + "NotBuilder: MathcerRefBuilder: null" + "'", str51, "NotBuilder: MathcerRefBuilder: null");
        org.junit.Assert.assertEquals("'" + str52 + "' != '" + "NotBuilder: MathcerRefBuilder: null" + "'", str52, "NotBuilder: MathcerRefBuilder: null");
        org.junit.Assert.assertEquals("'" + str53 + "' != '" + "NotBuilder: MathcerRefBuilder: null" + "'", str53, "NotBuilder: MathcerRefBuilder: null");
        org.junit.Assert.assertEquals("'" + str54 + "' != '" + "NotBuilder: MathcerRefBuilder: null" + "'", str54, "NotBuilder: MathcerRefBuilder: null");
        org.junit.Assert.assertEquals("'" + str55 + "' != '" + "NotBuilder: MathcerRefBuilder: null" + "'", str55, "NotBuilder: MathcerRefBuilder: null");
        org.junit.Assert.assertNotNull(anyBuilder56);
        org.junit.Assert.assertEquals("'" + str57 + "' != '" + "AnyBuilder:" + "'", str57, "AnyBuilder:");
        org.junit.Assert.assertNotNull(iHeaderMatcher58);
        org.junit.Assert.assertNotNull(iHeaderMatcherList59);
        org.junit.Assert.assertEquals("'" + str60 + "' != '" + "AnyBuilder:" + "'", str60, "AnyBuilder:");
        org.junit.Assert.assertEquals("'" + str61 + "' != '" + "AnyBuilder:" + "'", str61, "AnyBuilder:");
        org.junit.Assert.assertNotNull(iHeaderMatcher62);
        org.junit.Assert.assertNotNull(abstractBuilder63);
        org.junit.Assert.assertNotNull(iHeaderMatcher64);
    }

    @Test
    public void test14790() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest29.test14790");
        boolean boolean1 = org.apache.rat.document.impl.guesser.ArchiveGuesser.isArchive("03f57a5c-be91-4df3-b5be-50bd5e31e571");
        org.junit.Assert.assertTrue("'" + boolean1 + "' != '" + false + "'", boolean1 == false);
    }

    @Test
    public void test14791() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest29.test14791");
        org.apache.rat.utils.DefaultLog defaultLog0 = org.apache.rat.utils.DefaultLog.INSTANCE;
        org.apache.rat.utils.Log log1 = null;
        org.apache.rat.ReportConfiguration reportConfiguration2 = new org.apache.rat.ReportConfiguration(log1);
        java.io.FilenameFilter filenameFilter3 = reportConfiguration2.getInputFileFilter();
        org.apache.rat.license.LicenseSetFactory.LicenseFilter licenseFilter4 = org.apache.rat.license.LicenseSetFactory.LicenseFilter.all;
        java.util.SortedSet<org.apache.rat.license.ILicense> iLicenseSet5 = reportConfiguration2.getLicenses(licenseFilter4);
        org.apache.rat.config.AddLicenseHeaders addLicenseHeaders6 = org.apache.rat.config.AddLicenseHeaders.FALSE;
        reportConfiguration2.setAddLicenseHeaders(addLicenseHeaders6);
        org.apache.rat.utils.Log log8 = null;
        org.apache.rat.ReportConfiguration reportConfiguration9 = new org.apache.rat.ReportConfiguration(log8);
        org.apache.rat.report.claim.ClaimStatistic claimStatistic10 = org.apache.rat.Reporter.report(reportConfiguration9);
        org.apache.rat.license.LicenseSetFactory.LicenseFilter licenseFilter11 = org.apache.rat.license.LicenseSetFactory.LicenseFilter.all;
        org.apache.rat.Reporter.listLicenses(reportConfiguration9, licenseFilter11);
        org.apache.rat.Reporter.listLicenses(reportConfiguration2, licenseFilter11);
        org.apache.rat.utils.Log log14 = null;
        org.apache.rat.ReportConfiguration reportConfiguration15 = new org.apache.rat.ReportConfiguration(log14);
        java.io.FilenameFilter filenameFilter16 = reportConfiguration15.getInputFileFilter();
        org.apache.rat.license.LicenseSetFactory.LicenseFilter licenseFilter17 = org.apache.rat.license.LicenseSetFactory.LicenseFilter.all;
        java.util.SortedSet<org.apache.rat.license.ILicense> iLicenseSet18 = reportConfiguration15.getLicenses(licenseFilter17);
        org.apache.rat.config.AddLicenseHeaders addLicenseHeaders19 = org.apache.rat.config.AddLicenseHeaders.FALSE;
        reportConfiguration15.setAddLicenseHeaders(addLicenseHeaders19);
        org.apache.rat.utils.Log log21 = null;
        org.apache.rat.ReportConfiguration reportConfiguration22 = new org.apache.rat.ReportConfiguration(log21);
        org.apache.rat.report.claim.ClaimStatistic claimStatistic23 = org.apache.rat.Reporter.report(reportConfiguration22);
        org.apache.rat.license.LicenseSetFactory.LicenseFilter licenseFilter24 = org.apache.rat.license.LicenseSetFactory.LicenseFilter.all;
        org.apache.rat.Reporter.listLicenses(reportConfiguration22, licenseFilter24);
        org.apache.rat.Reporter.listLicenses(reportConfiguration15, licenseFilter24);
        org.apache.rat.Reporter.listLicenses(reportConfiguration2, licenseFilter24);
        org.apache.rat.utils.Log log28 = null;
        org.apache.rat.ReportConfiguration reportConfiguration29 = new org.apache.rat.ReportConfiguration(log28);
        org.apache.commons.io.function.IOSupplier<java.io.OutputStream> outputStreamIOSupplier30 = reportConfiguration29.getOutput();
        reportConfiguration2.setOut(outputStreamIOSupplier30);
        org.apache.rat.utils.Log log32 = null;
        org.apache.rat.ReportConfiguration reportConfiguration33 = new org.apache.rat.ReportConfiguration(log32);
        org.apache.rat.report.claim.ClaimStatistic claimStatistic34 = org.apache.rat.Reporter.report(reportConfiguration33);
        org.apache.rat.utils.Log log35 = null;
        org.apache.rat.ReportConfiguration reportConfiguration36 = new org.apache.rat.ReportConfiguration(log35);
        org.apache.rat.report.claim.ClaimStatistic claimStatistic37 = org.apache.rat.Reporter.report(reportConfiguration36);
        org.apache.rat.utils.ReportingSet.Options options38 = org.apache.rat.utils.ReportingSet.Options.OVERWRITE;
        reportConfiguration36.licenseDuplicateOption(options38);
        reportConfiguration33.familyDuplicateOption(options38);
        reportConfiguration2.licenseDuplicateOption(options38);
        reportConfiguration2.addApprovedLicenseCategory("W3C Document Copyright");
        org.apache.rat.utils.Log log44 = null;
        org.apache.rat.ReportConfiguration reportConfiguration45 = new org.apache.rat.ReportConfiguration(log44);
        reportConfiguration45.addApprovedLicenseCategory(".cvsignore");
        org.apache.rat.utils.Log.Level level48 = org.apache.rat.utils.Log.Level.ERROR;
        reportConfiguration45.logLicenseCollisions(level48);
        reportConfiguration2.logLicenseCollisions(level48);
        defaultLog0.setLevel(level48);
        org.apache.rat.ReportConfiguration reportConfiguration52 = new org.apache.rat.ReportConfiguration((org.apache.rat.utils.Log) defaultLog0);
        org.apache.rat.annotation.ApacheV2LicenseAppender apacheV2LicenseAppender53 = new org.apache.rat.annotation.ApacheV2LicenseAppender((org.apache.rat.utils.Log) defaultLog0);
        org.apache.rat.utils.Log.Level level54 = defaultLog0.getLevel();
        org.apache.rat.annotation.ApacheV2LicenseAppender apacheV2LicenseAppender56 = new org.apache.rat.annotation.ApacheV2LicenseAppender((org.apache.rat.utils.Log) defaultLog0, "TextBuilder: f04d752a-120e-425d-a...");
        org.junit.Assert.assertNotNull(defaultLog0);
        org.junit.Assert.assertNull(filenameFilter3);
        org.junit.Assert.assertTrue("'" + licenseFilter4 + "' != '" + org.apache.rat.license.LicenseSetFactory.LicenseFilter.all + "'", licenseFilter4.equals(org.apache.rat.license.LicenseSetFactory.LicenseFilter.all));
        org.junit.Assert.assertNotNull(iLicenseSet5);
        org.junit.Assert.assertTrue("'" + addLicenseHeaders6 + "' != '" + org.apache.rat.config.AddLicenseHeaders.FALSE + "'", addLicenseHeaders6.equals(org.apache.rat.config.AddLicenseHeaders.FALSE));
        org.junit.Assert.assertNull(claimStatistic10);
        org.junit.Assert.assertTrue("'" + licenseFilter11 + "' != '" + org.apache.rat.license.LicenseSetFactory.LicenseFilter.all + "'", licenseFilter11.equals(org.apache.rat.license.LicenseSetFactory.LicenseFilter.all));
        org.junit.Assert.assertNull(filenameFilter16);
        org.junit.Assert.assertTrue("'" + licenseFilter17 + "' != '" + org.apache.rat.license.LicenseSetFactory.LicenseFilter.all + "'", licenseFilter17.equals(org.apache.rat.license.LicenseSetFactory.LicenseFilter.all));
        org.junit.Assert.assertNotNull(iLicenseSet18);
        org.junit.Assert.assertTrue("'" + addLicenseHeaders19 + "' != '" + org.apache.rat.config.AddLicenseHeaders.FALSE + "'", addLicenseHeaders19.equals(org.apache.rat.config.AddLicenseHeaders.FALSE));
        org.junit.Assert.assertNull(claimStatistic23);
        org.junit.Assert.assertTrue("'" + licenseFilter24 + "' != '" + org.apache.rat.license.LicenseSetFactory.LicenseFilter.all + "'", licenseFilter24.equals(org.apache.rat.license.LicenseSetFactory.LicenseFilter.all));
        org.junit.Assert.assertNotNull(outputStreamIOSupplier30);
        org.junit.Assert.assertNull(claimStatistic34);
        org.junit.Assert.assertNull(claimStatistic37);
        org.junit.Assert.assertTrue("'" + options38 + "' != '" + org.apache.rat.utils.ReportingSet.Options.OVERWRITE + "'", options38.equals(org.apache.rat.utils.ReportingSet.Options.OVERWRITE));
        org.junit.Assert.assertTrue("'" + level48 + "' != '" + org.apache.rat.utils.Log.Level.ERROR + "'", level48.equals(org.apache.rat.utils.Log.Level.ERROR));
        org.junit.Assert.assertTrue("'" + level54 + "' != '" + org.apache.rat.utils.Log.Level.ERROR + "'", level54.equals(org.apache.rat.utils.Log.Level.ERROR));
    }

    @Test
    public void test14792() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest29.test14792");
        org.apache.rat.utils.Log log0 = null;
        org.apache.rat.ReportConfiguration reportConfiguration1 = new org.apache.rat.ReportConfiguration(log0);
        reportConfiguration1.addApprovedLicenseCategory(".cvsignore");
        org.apache.rat.utils.Log.Level level4 = org.apache.rat.utils.Log.Level.ERROR;
        reportConfiguration1.logLicenseCollisions(level4);
        reportConfiguration1.addApprovedLicenseCategory("73fbee1b-7ed9-442a-968e-b2b525ca688f");
        org.apache.rat.utils.Log log8 = null;
        org.apache.rat.ReportConfiguration reportConfiguration9 = new org.apache.rat.ReportConfiguration(log8);
        java.io.FilenameFilter filenameFilter10 = reportConfiguration9.getInputFileFilter();
        org.apache.rat.license.LicenseSetFactory.LicenseFilter licenseFilter11 = org.apache.rat.license.LicenseSetFactory.LicenseFilter.all;
        java.util.SortedSet<org.apache.rat.license.ILicense> iLicenseSet12 = reportConfiguration9.getLicenses(licenseFilter11);
        org.apache.rat.config.AddLicenseHeaders addLicenseHeaders13 = org.apache.rat.config.AddLicenseHeaders.FALSE;
        reportConfiguration9.setAddLicenseHeaders(addLicenseHeaders13);
        org.apache.rat.utils.Log log15 = null;
        org.apache.rat.ReportConfiguration reportConfiguration16 = new org.apache.rat.ReportConfiguration(log15);
        org.apache.rat.report.claim.ClaimStatistic claimStatistic17 = org.apache.rat.Reporter.report(reportConfiguration16);
        org.apache.rat.license.LicenseSetFactory.LicenseFilter licenseFilter18 = org.apache.rat.license.LicenseSetFactory.LicenseFilter.all;
        org.apache.rat.Reporter.listLicenses(reportConfiguration16, licenseFilter18);
        org.apache.rat.Reporter.listLicenses(reportConfiguration9, licenseFilter18);
        org.apache.rat.utils.Log log21 = null;
        org.apache.rat.ReportConfiguration reportConfiguration22 = new org.apache.rat.ReportConfiguration(log21);
        java.io.FilenameFilter filenameFilter23 = reportConfiguration22.getInputFileFilter();
        org.apache.rat.license.LicenseSetFactory.LicenseFilter licenseFilter24 = org.apache.rat.license.LicenseSetFactory.LicenseFilter.all;
        java.util.SortedSet<org.apache.rat.license.ILicense> iLicenseSet25 = reportConfiguration22.getLicenses(licenseFilter24);
        org.apache.rat.config.AddLicenseHeaders addLicenseHeaders26 = org.apache.rat.config.AddLicenseHeaders.FALSE;
        reportConfiguration22.setAddLicenseHeaders(addLicenseHeaders26);
        org.apache.rat.utils.Log log28 = null;
        org.apache.rat.ReportConfiguration reportConfiguration29 = new org.apache.rat.ReportConfiguration(log28);
        org.apache.rat.report.claim.ClaimStatistic claimStatistic30 = org.apache.rat.Reporter.report(reportConfiguration29);
        org.apache.rat.license.LicenseSetFactory.LicenseFilter licenseFilter31 = org.apache.rat.license.LicenseSetFactory.LicenseFilter.all;
        org.apache.rat.Reporter.listLicenses(reportConfiguration29, licenseFilter31);
        org.apache.rat.Reporter.listLicenses(reportConfiguration22, licenseFilter31);
        org.apache.rat.Reporter.listLicenses(reportConfiguration9, licenseFilter31);
        java.io.FilenameFilter filenameFilter35 = reportConfiguration9.getInputFileFilter();
        reportConfiguration9.setStyleReport(false);
        org.apache.rat.report.IReportable iReportable38 = null;
        reportConfiguration9.setReportable(iReportable38);
        org.apache.rat.Defaults.Builder builder41 = org.apache.rat.Defaults.builder();
        org.apache.rat.Defaults defaults42 = builder41.build();
        org.apache.rat.utils.Log log43 = null;
        org.apache.rat.ReportConfiguration reportConfiguration44 = new org.apache.rat.ReportConfiguration(log43);
        java.io.FilenameFilter filenameFilter45 = reportConfiguration44.getInputFileFilter();
        org.apache.rat.license.LicenseSetFactory.LicenseFilter licenseFilter46 = org.apache.rat.license.LicenseSetFactory.LicenseFilter.all;
        java.util.SortedSet<org.apache.rat.license.ILicense> iLicenseSet47 = reportConfiguration44.getLicenses(licenseFilter46);
        org.apache.rat.config.AddLicenseHeaders addLicenseHeaders48 = org.apache.rat.config.AddLicenseHeaders.FALSE;
        reportConfiguration44.setAddLicenseHeaders(addLicenseHeaders48);
        org.apache.rat.utils.Log log50 = null;
        org.apache.rat.ReportConfiguration reportConfiguration51 = new org.apache.rat.ReportConfiguration(log50);
        org.apache.rat.report.claim.ClaimStatistic claimStatistic52 = org.apache.rat.Reporter.report(reportConfiguration51);
        org.apache.rat.license.LicenseSetFactory.LicenseFilter licenseFilter53 = org.apache.rat.license.LicenseSetFactory.LicenseFilter.all;
        org.apache.rat.Reporter.listLicenses(reportConfiguration51, licenseFilter53);
        org.apache.rat.Reporter.listLicenses(reportConfiguration44, licenseFilter53);
        org.apache.rat.utils.Log log56 = null;
        org.apache.rat.ReportConfiguration reportConfiguration57 = new org.apache.rat.ReportConfiguration(log56);
        java.io.FilenameFilter filenameFilter58 = reportConfiguration57.getInputFileFilter();
        org.apache.rat.license.LicenseSetFactory.LicenseFilter licenseFilter59 = org.apache.rat.license.LicenseSetFactory.LicenseFilter.all;
        java.util.SortedSet<org.apache.rat.license.ILicense> iLicenseSet60 = reportConfiguration57.getLicenses(licenseFilter59);
        org.apache.rat.config.AddLicenseHeaders addLicenseHeaders61 = org.apache.rat.config.AddLicenseHeaders.FALSE;
        reportConfiguration57.setAddLicenseHeaders(addLicenseHeaders61);
        org.apache.rat.utils.Log log63 = null;
        org.apache.rat.ReportConfiguration reportConfiguration64 = new org.apache.rat.ReportConfiguration(log63);
        org.apache.rat.report.claim.ClaimStatistic claimStatistic65 = org.apache.rat.Reporter.report(reportConfiguration64);
        org.apache.rat.license.LicenseSetFactory.LicenseFilter licenseFilter66 = org.apache.rat.license.LicenseSetFactory.LicenseFilter.all;
        org.apache.rat.Reporter.listLicenses(reportConfiguration64, licenseFilter66);
        org.apache.rat.Reporter.listLicenses(reportConfiguration57, licenseFilter66);
        java.util.SortedSet<org.apache.rat.license.ILicenseFamily> iLicenseFamilySet69 = reportConfiguration44.getLicenseFamilies(licenseFilter66);
        java.util.SortedSet<org.apache.rat.license.ILicense> iLicenseSet70 = defaults42.getLicenses(licenseFilter66);
        org.apache.rat.utils.ReportingSet<org.apache.rat.license.ILicense> iLicenseSet71 = new org.apache.rat.utils.ReportingSet<org.apache.rat.license.ILicense>(iLicenseSet70);
        org.apache.rat.license.ILicense iLicense72 = org.apache.rat.license.LicenseSetFactory.search("TMF", iLicenseSet70);
        reportConfiguration9.addLicense(iLicense72);
        java.lang.String str74 = iLicense72.derivedFrom();
        reportConfiguration1.addLicense(iLicense72);
        java.lang.String str76 = iLicense72.getName();
        org.apache.rat.analysis.matchers.NotMatcher notMatcher77 = new org.apache.rat.analysis.matchers.NotMatcher((org.apache.rat.analysis.IHeaderMatcher) iLicense72);
        org.junit.Assert.assertTrue("'" + level4 + "' != '" + org.apache.rat.utils.Log.Level.ERROR + "'", level4.equals(org.apache.rat.utils.Log.Level.ERROR));
        org.junit.Assert.assertNull(filenameFilter10);
        org.junit.Assert.assertTrue("'" + licenseFilter11 + "' != '" + org.apache.rat.license.LicenseSetFactory.LicenseFilter.all + "'", licenseFilter11.equals(org.apache.rat.license.LicenseSetFactory.LicenseFilter.all));
        org.junit.Assert.assertNotNull(iLicenseSet12);
        org.junit.Assert.assertTrue("'" + addLicenseHeaders13 + "' != '" + org.apache.rat.config.AddLicenseHeaders.FALSE + "'", addLicenseHeaders13.equals(org.apache.rat.config.AddLicenseHeaders.FALSE));
        org.junit.Assert.assertNull(claimStatistic17);
        org.junit.Assert.assertTrue("'" + licenseFilter18 + "' != '" + org.apache.rat.license.LicenseSetFactory.LicenseFilter.all + "'", licenseFilter18.equals(org.apache.rat.license.LicenseSetFactory.LicenseFilter.all));
        org.junit.Assert.assertNull(filenameFilter23);
        org.junit.Assert.assertTrue("'" + licenseFilter24 + "' != '" + org.apache.rat.license.LicenseSetFactory.LicenseFilter.all + "'", licenseFilter24.equals(org.apache.rat.license.LicenseSetFactory.LicenseFilter.all));
        org.junit.Assert.assertNotNull(iLicenseSet25);
        org.junit.Assert.assertTrue("'" + addLicenseHeaders26 + "' != '" + org.apache.rat.config.AddLicenseHeaders.FALSE + "'", addLicenseHeaders26.equals(org.apache.rat.config.AddLicenseHeaders.FALSE));
        org.junit.Assert.assertNull(claimStatistic30);
        org.junit.Assert.assertTrue("'" + licenseFilter31 + "' != '" + org.apache.rat.license.LicenseSetFactory.LicenseFilter.all + "'", licenseFilter31.equals(org.apache.rat.license.LicenseSetFactory.LicenseFilter.all));
        org.junit.Assert.assertNull(filenameFilter35);
        org.junit.Assert.assertNotNull(builder41);
        org.junit.Assert.assertNotNull(defaults42);
        org.junit.Assert.assertNull(filenameFilter45);
        org.junit.Assert.assertTrue("'" + licenseFilter46 + "' != '" + org.apache.rat.license.LicenseSetFactory.LicenseFilter.all + "'", licenseFilter46.equals(org.apache.rat.license.LicenseSetFactory.LicenseFilter.all));
        org.junit.Assert.assertNotNull(iLicenseSet47);
        org.junit.Assert.assertTrue("'" + addLicenseHeaders48 + "' != '" + org.apache.rat.config.AddLicenseHeaders.FALSE + "'", addLicenseHeaders48.equals(org.apache.rat.config.AddLicenseHeaders.FALSE));
        org.junit.Assert.assertNull(claimStatistic52);
        org.junit.Assert.assertTrue("'" + licenseFilter53 + "' != '" + org.apache.rat.license.LicenseSetFactory.LicenseFilter.all + "'", licenseFilter53.equals(org.apache.rat.license.LicenseSetFactory.LicenseFilter.all));
        org.junit.Assert.assertNull(filenameFilter58);
        org.junit.Assert.assertTrue("'" + licenseFilter59 + "' != '" + org.apache.rat.license.LicenseSetFactory.LicenseFilter.all + "'", licenseFilter59.equals(org.apache.rat.license.LicenseSetFactory.LicenseFilter.all));
        org.junit.Assert.assertNotNull(iLicenseSet60);
        org.junit.Assert.assertTrue("'" + addLicenseHeaders61 + "' != '" + org.apache.rat.config.AddLicenseHeaders.FALSE + "'", addLicenseHeaders61.equals(org.apache.rat.config.AddLicenseHeaders.FALSE));
        org.junit.Assert.assertNull(claimStatistic65);
        org.junit.Assert.assertTrue("'" + licenseFilter66 + "' != '" + org.apache.rat.license.LicenseSetFactory.LicenseFilter.all + "'", licenseFilter66.equals(org.apache.rat.license.LicenseSetFactory.LicenseFilter.all));
        org.junit.Assert.assertNotNull(iLicenseFamilySet69);
        org.junit.Assert.assertNotNull(iLicenseSet70);
        org.junit.Assert.assertNotNull(iLicense72);
        org.junit.Assert.assertEquals("'" + str74 + "' != '" + "BSD-3" + "'", str74, "BSD-3");
        org.junit.Assert.assertEquals("'" + str76 + "' != '" + "The Telemanagement Forum License" + "'", str76, "The Telemanagement Forum License");
    }

    @Test
    public void test14793() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest29.test14793");
        org.apache.rat.configuration.builders.AnyBuilder anyBuilder0 = org.apache.rat.analysis.IHeaderMatcher.Builder.any();
        java.lang.String str1 = anyBuilder0.toString();
        org.apache.rat.analysis.IHeaderMatcher iHeaderMatcher2 = anyBuilder0.build();
        java.util.List<org.apache.rat.analysis.IHeaderMatcher> iHeaderMatcherList3 = anyBuilder0.getChildren();
        java.lang.String str4 = anyBuilder0.toString();
        java.lang.String str5 = anyBuilder0.toString();
        org.apache.rat.analysis.IHeaderMatcher iHeaderMatcher6 = anyBuilder0.build();
        boolean boolean7 = anyBuilder0.hasId();
        org.junit.Assert.assertNotNull(anyBuilder0);
        org.junit.Assert.assertEquals("'" + str1 + "' != '" + "AnyBuilder:" + "'", str1, "AnyBuilder:");
        org.junit.Assert.assertNotNull(iHeaderMatcher2);
        org.junit.Assert.assertNotNull(iHeaderMatcherList3);
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "AnyBuilder:" + "'", str4, "AnyBuilder:");
        org.junit.Assert.assertEquals("'" + str5 + "' != '" + "AnyBuilder:" + "'", str5, "AnyBuilder:");
        org.junit.Assert.assertNotNull(iHeaderMatcher6);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
    }

    @Test
    public void test14794() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest29.test14794");
        java.io.Writer writer0 = null;
        org.apache.rat.report.xml.writer.impl.base.XmlWriter xmlWriter1 = new org.apache.rat.report.xml.writer.impl.base.XmlWriter(writer0);
        org.apache.rat.report.claim.impl.xml.SimpleXmlClaimReporter simpleXmlClaimReporter2 = new org.apache.rat.report.claim.impl.xml.SimpleXmlClaimReporter((org.apache.rat.report.xml.writer.IXmlWriter) xmlWriter1);
        org.apache.rat.report.claim.impl.xml.SimpleXmlClaimReporter simpleXmlClaimReporter3 = new org.apache.rat.report.claim.impl.xml.SimpleXmlClaimReporter((org.apache.rat.report.xml.writer.IXmlWriter) xmlWriter1);
        org.apache.rat.report.claim.impl.xml.SimpleXmlClaimReporter simpleXmlClaimReporter4 = new org.apache.rat.report.claim.impl.xml.SimpleXmlClaimReporter((org.apache.rat.report.xml.writer.IXmlWriter) xmlWriter1);
        org.apache.rat.report.claim.impl.xml.SimpleXmlClaimReporter simpleXmlClaimReporter5 = new org.apache.rat.report.claim.impl.xml.SimpleXmlClaimReporter((org.apache.rat.report.xml.writer.IXmlWriter) xmlWriter1);
        org.apache.rat.report.claim.impl.xml.SimpleXmlClaimReporter simpleXmlClaimReporter6 = new org.apache.rat.report.claim.impl.xml.SimpleXmlClaimReporter((org.apache.rat.report.xml.writer.IXmlWriter) xmlWriter1);
        org.apache.rat.report.claim.impl.xml.SimpleXmlClaimReporter simpleXmlClaimReporter7 = new org.apache.rat.report.claim.impl.xml.SimpleXmlClaimReporter((org.apache.rat.report.xml.writer.IXmlWriter) xmlWriter1);
        org.apache.rat.report.claim.impl.xml.SimpleXmlClaimReporter simpleXmlClaimReporter8 = new org.apache.rat.report.claim.impl.xml.SimpleXmlClaimReporter((org.apache.rat.report.xml.writer.IXmlWriter) xmlWriter1);
        org.apache.rat.report.claim.impl.xml.SimpleXmlClaimReporter simpleXmlClaimReporter9 = new org.apache.rat.report.claim.impl.xml.SimpleXmlClaimReporter((org.apache.rat.report.xml.writer.IXmlWriter) xmlWriter1);
        org.apache.rat.report.claim.impl.xml.SimpleXmlClaimReporter simpleXmlClaimReporter10 = new org.apache.rat.report.claim.impl.xml.SimpleXmlClaimReporter((org.apache.rat.report.xml.writer.IXmlWriter) xmlWriter1);
        // The following exception was thrown during execution in test generation
        try {
            org.apache.rat.report.xml.writer.IXmlWriter iXmlWriter12 = xmlWriter1.content((java.lang.CharSequence) "Datum [ name ='http://org/apache/rat/meta-data#LicenseFamilyCategory',value ='MIT   ']");
            org.junit.Assert.fail("Expected exception of type org.apache.rat.report.xml.writer.OperationNotAllowedException; message: An element must be opened before content can be written.");
        } catch (org.apache.rat.report.xml.writer.OperationNotAllowedException e) {
            // Expected exception.
        }
    }

    @Test
    public void test14795() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest29.test14795");
        org.apache.rat.header.HeaderBean headerBean0 = new org.apache.rat.header.HeaderBean();
        java.util.regex.Pattern pattern1 = headerBean0.getHeaderPattern();
        java.util.regex.Pattern pattern2 = null;
        headerBean0.setHeaderPattern(pattern2);
        headerBean0.setMatch(false);
        headerBean0.setMatch(true);
        org.junit.Assert.assertNull(pattern1);
    }

    @Test
    public void test14796() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest29.test14796");
        java.io.Writer writer0 = null;
        org.apache.rat.report.xml.writer.impl.base.XmlWriter xmlWriter1 = new org.apache.rat.report.xml.writer.impl.base.XmlWriter(writer0);
        org.apache.rat.report.claim.impl.xml.SimpleXmlClaimReporter simpleXmlClaimReporter2 = new org.apache.rat.report.claim.impl.xml.SimpleXmlClaimReporter((org.apache.rat.report.xml.writer.IXmlWriter) xmlWriter1);
        org.apache.rat.report.claim.impl.xml.SimpleXmlClaimReporter simpleXmlClaimReporter3 = new org.apache.rat.report.claim.impl.xml.SimpleXmlClaimReporter((org.apache.rat.report.xml.writer.IXmlWriter) xmlWriter1);
        org.apache.rat.report.claim.impl.xml.SimpleXmlClaimReporter simpleXmlClaimReporter4 = new org.apache.rat.report.claim.impl.xml.SimpleXmlClaimReporter((org.apache.rat.report.xml.writer.IXmlWriter) xmlWriter1);
        org.apache.rat.report.claim.impl.xml.SimpleXmlClaimReporter simpleXmlClaimReporter5 = new org.apache.rat.report.claim.impl.xml.SimpleXmlClaimReporter((org.apache.rat.report.xml.writer.IXmlWriter) xmlWriter1);
        org.apache.rat.report.claim.impl.xml.SimpleXmlClaimReporter simpleXmlClaimReporter6 = new org.apache.rat.report.claim.impl.xml.SimpleXmlClaimReporter((org.apache.rat.report.xml.writer.IXmlWriter) xmlWriter1);
        org.apache.rat.report.claim.impl.xml.SimpleXmlClaimReporter simpleXmlClaimReporter7 = new org.apache.rat.report.claim.impl.xml.SimpleXmlClaimReporter((org.apache.rat.report.xml.writer.IXmlWriter) xmlWriter1);
        org.apache.rat.report.claim.impl.xml.SimpleXmlClaimReporter simpleXmlClaimReporter8 = new org.apache.rat.report.claim.impl.xml.SimpleXmlClaimReporter((org.apache.rat.report.xml.writer.IXmlWriter) xmlWriter1);
        org.apache.rat.report.claim.impl.xml.SimpleXmlClaimReporter simpleXmlClaimReporter9 = new org.apache.rat.report.claim.impl.xml.SimpleXmlClaimReporter((org.apache.rat.report.xml.writer.IXmlWriter) xmlWriter1);
        org.apache.rat.report.claim.impl.xml.SimpleXmlClaimReporter simpleXmlClaimReporter10 = new org.apache.rat.report.claim.impl.xml.SimpleXmlClaimReporter((org.apache.rat.report.xml.writer.IXmlWriter) xmlWriter1);
        org.apache.rat.report.claim.impl.xml.SimpleXmlClaimReporter simpleXmlClaimReporter11 = new org.apache.rat.report.claim.impl.xml.SimpleXmlClaimReporter((org.apache.rat.report.xml.writer.IXmlWriter) xmlWriter1);
        org.apache.rat.report.claim.impl.xml.SimpleXmlClaimReporter simpleXmlClaimReporter12 = new org.apache.rat.report.claim.impl.xml.SimpleXmlClaimReporter((org.apache.rat.report.xml.writer.IXmlWriter) xmlWriter1);
        org.apache.rat.report.claim.impl.xml.SimpleXmlClaimReporter simpleXmlClaimReporter13 = new org.apache.rat.report.claim.impl.xml.SimpleXmlClaimReporter((org.apache.rat.report.xml.writer.IXmlWriter) xmlWriter1);
        // The following exception was thrown during execution in test generation
        try {
            org.apache.rat.report.xml.writer.IXmlWriter iXmlWriter15 = xmlWriter1.content((java.lang.CharSequence) "3c840dc2bef042b5b26c35a568d53a24");
            org.junit.Assert.fail("Expected exception of type org.apache.rat.report.xml.writer.OperationNotAllowedException; message: An element must be opened before content can be written.");
        } catch (org.apache.rat.report.xml.writer.OperationNotAllowedException e) {
            // Expected exception.
        }
    }

    @Test
    public void test14797() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest29.test14797");
        org.apache.rat.utils.Log log0 = null;
        org.apache.rat.ReportConfiguration reportConfiguration1 = new org.apache.rat.ReportConfiguration(log0);
        org.apache.commons.io.function.IOSupplier<java.io.OutputStream> outputStreamIOSupplier2 = reportConfiguration1.getOutput();
        org.apache.commons.io.filefilter.IOFileFilter iOFileFilter3 = reportConfiguration1.getDirectoryFilter();
        org.apache.commons.io.function.IOSupplier<java.io.InputStream> inputStreamIOSupplier4 = reportConfiguration1.getStyleSheet();
        org.apache.rat.utils.Log log5 = null;
        org.apache.rat.ReportConfiguration reportConfiguration6 = new org.apache.rat.ReportConfiguration(log5);
        java.io.FilenameFilter filenameFilter7 = reportConfiguration6.getInputFileFilter();
        org.apache.rat.license.LicenseSetFactory.LicenseFilter licenseFilter8 = org.apache.rat.license.LicenseSetFactory.LicenseFilter.all;
        java.util.SortedSet<org.apache.rat.license.ILicense> iLicenseSet9 = reportConfiguration6.getLicenses(licenseFilter8);
        org.apache.rat.utils.ReportingSet<org.apache.rat.license.ILicense> iLicenseSet10 = new org.apache.rat.utils.ReportingSet<org.apache.rat.license.ILicense>(iLicenseSet9);
        reportConfiguration1.addLicenses((java.util.Collection<org.apache.rat.license.ILicense>) iLicenseSet10);
        org.apache.rat.utils.Log log12 = null;
        org.apache.rat.ReportConfiguration reportConfiguration13 = new org.apache.rat.ReportConfiguration(log12);
        org.apache.rat.report.claim.ClaimStatistic claimStatistic14 = org.apache.rat.Reporter.report(reportConfiguration13);
        org.apache.commons.io.function.IOSupplier<java.io.OutputStream> outputStreamIOSupplier15 = reportConfiguration13.getOutput();
        boolean boolean16 = reportConfiguration13.isAddingLicensesForced();
        org.apache.rat.license.ILicense[] iLicenseArray17 = new org.apache.rat.license.ILicense[] {};
        java.util.TreeSet<org.apache.rat.license.ILicense> iLicenseSet18 = new java.util.TreeSet<org.apache.rat.license.ILicense>();
        boolean boolean19 = java.util.Collections.addAll((java.util.Collection<org.apache.rat.license.ILicense>) iLicenseSet18, iLicenseArray17);
        java.lang.String[] strArray32 = new java.lang.String[] { "GPL2 ", "GPL1 ", "notice", "http://org/apache/rat/meta-data#LicenseFamilyName", "notice", "GPL2 ", "http://org/apache/rat/meta-data#LicenseFamilyName", "", "GPL2 ", "", "GPL1 ", "hi!" };
        java.util.ArrayList<java.lang.String> strList33 = new java.util.ArrayList<java.lang.String>();
        boolean boolean34 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strList33, strArray32);
        org.apache.rat.license.LicenseSetFactory licenseSetFactory35 = new org.apache.rat.license.LicenseSetFactory((java.util.SortedSet<org.apache.rat.license.ILicense>) iLicenseSet18, (java.util.Collection<java.lang.String>) strList33);
        reportConfiguration13.addLicenses((java.util.Collection<org.apache.rat.license.ILicense>) iLicenseSet18);
        reportConfiguration13.setStyleReport(true);
        org.apache.commons.io.function.IOSupplier<java.io.OutputStream> outputStreamIOSupplier39 = reportConfiguration13.getOutput();
        reportConfiguration13.setStyleReport(false);
        boolean boolean42 = reportConfiguration13.isStyleReport();
        org.apache.rat.utils.Log log43 = null;
        org.apache.rat.ReportConfiguration reportConfiguration44 = new org.apache.rat.ReportConfiguration(log43);
        org.apache.rat.report.claim.ClaimStatistic claimStatistic45 = org.apache.rat.Reporter.report(reportConfiguration44);
        org.apache.commons.io.function.IOSupplier<java.io.OutputStream> outputStreamIOSupplier46 = reportConfiguration44.getOutput();
        org.apache.rat.license.ILicense iLicense47 = null;
        reportConfiguration44.addLicense(iLicense47);
        reportConfiguration44.removeApprovedLicenseCategory("F FALSE");
        boolean boolean51 = reportConfiguration44.isAddingLicenses();
        org.apache.rat.utils.Log log52 = null;
        org.apache.rat.ReportConfiguration reportConfiguration53 = new org.apache.rat.ReportConfiguration(log52);
        java.io.FilenameFilter filenameFilter54 = reportConfiguration53.getInputFileFilter();
        org.apache.rat.license.LicenseSetFactory.LicenseFilter licenseFilter55 = org.apache.rat.license.LicenseSetFactory.LicenseFilter.all;
        java.util.SortedSet<org.apache.rat.license.ILicense> iLicenseSet56 = reportConfiguration53.getLicenses(licenseFilter55);
        org.apache.rat.config.AddLicenseHeaders addLicenseHeaders57 = org.apache.rat.config.AddLicenseHeaders.FALSE;
        reportConfiguration53.setAddLicenseHeaders(addLicenseHeaders57);
        org.apache.rat.utils.Log log59 = null;
        org.apache.rat.ReportConfiguration reportConfiguration60 = new org.apache.rat.ReportConfiguration(log59);
        org.apache.rat.report.claim.ClaimStatistic claimStatistic61 = org.apache.rat.Reporter.report(reportConfiguration60);
        org.apache.rat.license.LicenseSetFactory.LicenseFilter licenseFilter62 = org.apache.rat.license.LicenseSetFactory.LicenseFilter.all;
        org.apache.rat.Reporter.listLicenses(reportConfiguration60, licenseFilter62);
        org.apache.rat.Reporter.listLicenses(reportConfiguration53, licenseFilter62);
        org.apache.rat.utils.Log log65 = null;
        org.apache.rat.ReportConfiguration reportConfiguration66 = new org.apache.rat.ReportConfiguration(log65);
        java.io.FilenameFilter filenameFilter67 = reportConfiguration66.getInputFileFilter();
        org.apache.rat.license.LicenseSetFactory.LicenseFilter licenseFilter68 = org.apache.rat.license.LicenseSetFactory.LicenseFilter.all;
        java.util.SortedSet<org.apache.rat.license.ILicense> iLicenseSet69 = reportConfiguration66.getLicenses(licenseFilter68);
        org.apache.rat.config.AddLicenseHeaders addLicenseHeaders70 = org.apache.rat.config.AddLicenseHeaders.FALSE;
        reportConfiguration66.setAddLicenseHeaders(addLicenseHeaders70);
        org.apache.rat.utils.Log log72 = null;
        org.apache.rat.ReportConfiguration reportConfiguration73 = new org.apache.rat.ReportConfiguration(log72);
        org.apache.rat.report.claim.ClaimStatistic claimStatistic74 = org.apache.rat.Reporter.report(reportConfiguration73);
        org.apache.rat.license.LicenseSetFactory.LicenseFilter licenseFilter75 = org.apache.rat.license.LicenseSetFactory.LicenseFilter.all;
        org.apache.rat.Reporter.listLicenses(reportConfiguration73, licenseFilter75);
        org.apache.rat.Reporter.listLicenses(reportConfiguration66, licenseFilter75);
        org.apache.rat.Reporter.listLicenses(reportConfiguration53, licenseFilter75);
        org.apache.rat.Reporter.listLicenses(reportConfiguration44, licenseFilter75);
        java.util.SortedSet<org.apache.rat.license.ILicenseFamily> iLicenseFamilySet80 = reportConfiguration13.getLicenseFamilies(licenseFilter75);
        java.util.SortedSet<org.apache.rat.license.ILicenseFamily> iLicenseFamilySet81 = reportConfiguration1.getLicenseFamilies(licenseFilter75);
        java.io.File file82 = null;
        // The following exception was thrown during execution in test generation
        try {
            reportConfiguration1.setStyleSheet(file82);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: styleSheet file should not be null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(outputStreamIOSupplier2);
        org.junit.Assert.assertNotNull(iOFileFilter3);
        org.junit.Assert.assertNull(inputStreamIOSupplier4);
        org.junit.Assert.assertNull(filenameFilter7);
        org.junit.Assert.assertTrue("'" + licenseFilter8 + "' != '" + org.apache.rat.license.LicenseSetFactory.LicenseFilter.all + "'", licenseFilter8.equals(org.apache.rat.license.LicenseSetFactory.LicenseFilter.all));
        org.junit.Assert.assertNotNull(iLicenseSet9);
        org.junit.Assert.assertNull(claimStatistic14);
        org.junit.Assert.assertNotNull(outputStreamIOSupplier15);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
        org.junit.Assert.assertNotNull(iLicenseArray17);
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + false + "'", boolean19 == false);
        org.junit.Assert.assertNotNull(strArray32);
        org.junit.Assert.assertTrue("'" + boolean34 + "' != '" + true + "'", boolean34 == true);
        org.junit.Assert.assertNotNull(outputStreamIOSupplier39);
        org.junit.Assert.assertTrue("'" + boolean42 + "' != '" + false + "'", boolean42 == false);
        org.junit.Assert.assertNull(claimStatistic45);
        org.junit.Assert.assertNotNull(outputStreamIOSupplier46);
        org.junit.Assert.assertTrue("'" + boolean51 + "' != '" + false + "'", boolean51 == false);
        org.junit.Assert.assertNull(filenameFilter54);
        org.junit.Assert.assertTrue("'" + licenseFilter55 + "' != '" + org.apache.rat.license.LicenseSetFactory.LicenseFilter.all + "'", licenseFilter55.equals(org.apache.rat.license.LicenseSetFactory.LicenseFilter.all));
        org.junit.Assert.assertNotNull(iLicenseSet56);
        org.junit.Assert.assertTrue("'" + addLicenseHeaders57 + "' != '" + org.apache.rat.config.AddLicenseHeaders.FALSE + "'", addLicenseHeaders57.equals(org.apache.rat.config.AddLicenseHeaders.FALSE));
        org.junit.Assert.assertNull(claimStatistic61);
        org.junit.Assert.assertTrue("'" + licenseFilter62 + "' != '" + org.apache.rat.license.LicenseSetFactory.LicenseFilter.all + "'", licenseFilter62.equals(org.apache.rat.license.LicenseSetFactory.LicenseFilter.all));
        org.junit.Assert.assertNull(filenameFilter67);
        org.junit.Assert.assertTrue("'" + licenseFilter68 + "' != '" + org.apache.rat.license.LicenseSetFactory.LicenseFilter.all + "'", licenseFilter68.equals(org.apache.rat.license.LicenseSetFactory.LicenseFilter.all));
        org.junit.Assert.assertNotNull(iLicenseSet69);
        org.junit.Assert.assertTrue("'" + addLicenseHeaders70 + "' != '" + org.apache.rat.config.AddLicenseHeaders.FALSE + "'", addLicenseHeaders70.equals(org.apache.rat.config.AddLicenseHeaders.FALSE));
        org.junit.Assert.assertNull(claimStatistic74);
        org.junit.Assert.assertTrue("'" + licenseFilter75 + "' != '" + org.apache.rat.license.LicenseSetFactory.LicenseFilter.all + "'", licenseFilter75.equals(org.apache.rat.license.LicenseSetFactory.LicenseFilter.all));
        org.junit.Assert.assertNotNull(iLicenseFamilySet80);
        org.junit.Assert.assertNotNull(iLicenseFamilySet81);
    }

    @Test
    public void test14798() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest29.test14798");
        java.io.File file0 = null;
        java.util.regex.Pattern pattern1 = null;
        org.apache.rat.utils.Log log2 = null;
        org.apache.rat.ReportConfiguration reportConfiguration3 = new org.apache.rat.ReportConfiguration(log2);
        java.io.FilenameFilter filenameFilter4 = reportConfiguration3.getInputFileFilter();
        org.apache.rat.license.LicenseSetFactory.LicenseFilter licenseFilter5 = org.apache.rat.license.LicenseSetFactory.LicenseFilter.all;
        java.util.SortedSet<org.apache.rat.license.ILicense> iLicenseSet6 = reportConfiguration3.getLicenses(licenseFilter5);
        org.apache.commons.io.function.IOSupplier<java.io.InputStream> inputStreamIOSupplier7 = reportConfiguration3.getStyleSheet();
        reportConfiguration3.addApprovedLicenseCategory("true");
        reportConfiguration3.removeApprovedLicenseCategory("http://org/apache/rat/meta-data#ApprovedLicense");
        org.apache.rat.utils.Log log12 = null;
        org.apache.rat.ReportConfiguration reportConfiguration13 = new org.apache.rat.ReportConfiguration(log12);
        reportConfiguration13.addApprovedLicenseCategory(".cvsignore");
        org.apache.rat.utils.Log.Level level16 = org.apache.rat.utils.Log.Level.ERROR;
        reportConfiguration13.logFamilyCollisions(level16);
        org.apache.rat.license.ILicense[] iLicenseArray19 = new org.apache.rat.license.ILicense[] {};
        java.util.TreeSet<org.apache.rat.license.ILicense> iLicenseSet20 = new java.util.TreeSet<org.apache.rat.license.ILicense>();
        boolean boolean21 = java.util.Collections.addAll((java.util.Collection<org.apache.rat.license.ILicense>) iLicenseSet20, iLicenseArray19);
        java.lang.String[] strArray34 = new java.lang.String[] { "GPL2 ", "GPL1 ", "notice", "http://org/apache/rat/meta-data#LicenseFamilyName", "notice", "GPL2 ", "http://org/apache/rat/meta-data#LicenseFamilyName", "", "GPL2 ", "", "GPL1 ", "hi!" };
        java.util.ArrayList<java.lang.String> strList35 = new java.util.ArrayList<java.lang.String>();
        boolean boolean36 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strList35, strArray34);
        org.apache.rat.license.LicenseSetFactory licenseSetFactory37 = new org.apache.rat.license.LicenseSetFactory((java.util.SortedSet<org.apache.rat.license.ILicense>) iLicenseSet20, (java.util.Collection<java.lang.String>) strList35);
        org.apache.rat.license.ILicense iLicense38 = org.apache.rat.license.LicenseSetFactory.search("binary", (java.util.SortedSet<org.apache.rat.license.ILicense>) iLicenseSet20);
        reportConfiguration13.addLicensesIfNotPresent((java.util.Collection<org.apache.rat.license.ILicense>) iLicenseSet20);
        org.apache.rat.license.ILicense[] iLicenseArray41 = new org.apache.rat.license.ILicense[] {};
        java.util.TreeSet<org.apache.rat.license.ILicense> iLicenseSet42 = new java.util.TreeSet<org.apache.rat.license.ILicense>();
        boolean boolean43 = java.util.Collections.addAll((java.util.Collection<org.apache.rat.license.ILicense>) iLicenseSet42, iLicenseArray41);
        java.lang.String[] strArray56 = new java.lang.String[] { "GPL2 ", "GPL1 ", "notice", "http://org/apache/rat/meta-data#LicenseFamilyName", "notice", "GPL2 ", "http://org/apache/rat/meta-data#LicenseFamilyName", "", "GPL2 ", "", "GPL1 ", "hi!" };
        java.util.ArrayList<java.lang.String> strList57 = new java.util.ArrayList<java.lang.String>();
        boolean boolean58 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strList57, strArray56);
        org.apache.rat.license.LicenseSetFactory licenseSetFactory59 = new org.apache.rat.license.LicenseSetFactory((java.util.SortedSet<org.apache.rat.license.ILicense>) iLicenseSet42, (java.util.Collection<java.lang.String>) strList57);
        org.apache.rat.license.ILicense iLicense60 = org.apache.rat.license.LicenseSetFactory.search("GNU General Public License, version 1", (java.util.SortedSet<org.apache.rat.license.ILicense>) iLicenseSet42);
        org.apache.rat.utils.ReportingSet<org.apache.rat.license.ILicense> iLicenseSet61 = new org.apache.rat.utils.ReportingSet<org.apache.rat.license.ILicense>((java.util.SortedSet<org.apache.rat.license.ILicense>) iLicenseSet42);
        org.apache.rat.utils.ReportingSet<org.apache.rat.license.ILicense> iLicenseSet62 = new org.apache.rat.utils.ReportingSet<org.apache.rat.license.ILicense>((java.util.SortedSet<org.apache.rat.license.ILicense>) iLicenseSet42);
        reportConfiguration13.addLicensesIfNotPresent((java.util.Collection<org.apache.rat.license.ILicense>) iLicenseSet42);
        org.apache.commons.io.filefilter.IOFileFilter iOFileFilter64 = reportConfiguration13.getDirectoryFilter();
        reportConfiguration3.setDirectoryFilter(iOFileFilter64);
        // The following exception was thrown during execution in test generation
        try {
            org.apache.rat.walker.DirectoryWalker directoryWalker66 = new org.apache.rat.walker.DirectoryWalker(file0, pattern1, iOFileFilter64);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNull(filenameFilter4);
        org.junit.Assert.assertTrue("'" + licenseFilter5 + "' != '" + org.apache.rat.license.LicenseSetFactory.LicenseFilter.all + "'", licenseFilter5.equals(org.apache.rat.license.LicenseSetFactory.LicenseFilter.all));
        org.junit.Assert.assertNotNull(iLicenseSet6);
        org.junit.Assert.assertNull(inputStreamIOSupplier7);
        org.junit.Assert.assertTrue("'" + level16 + "' != '" + org.apache.rat.utils.Log.Level.ERROR + "'", level16.equals(org.apache.rat.utils.Log.Level.ERROR));
        org.junit.Assert.assertNotNull(iLicenseArray19);
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + false + "'", boolean21 == false);
        org.junit.Assert.assertNotNull(strArray34);
        org.junit.Assert.assertTrue("'" + boolean36 + "' != '" + true + "'", boolean36 == true);
        org.junit.Assert.assertNull(iLicense38);
        org.junit.Assert.assertNotNull(iLicenseArray41);
        org.junit.Assert.assertTrue("'" + boolean43 + "' != '" + false + "'", boolean43 == false);
        org.junit.Assert.assertNotNull(strArray56);
        org.junit.Assert.assertTrue("'" + boolean58 + "' != '" + true + "'", boolean58 == true);
        org.junit.Assert.assertNull(iLicense60);
        org.junit.Assert.assertNotNull(iOFileFilter64);
    }

    @Test
    public void test14799() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest29.test14799");
        org.apache.rat.utils.Log log0 = null;
        org.apache.rat.ReportConfiguration reportConfiguration1 = new org.apache.rat.ReportConfiguration(log0);
        org.apache.rat.report.claim.ClaimStatistic claimStatistic2 = org.apache.rat.Reporter.report(reportConfiguration1);
        org.apache.rat.utils.Log log3 = null;
        org.apache.rat.ReportConfiguration reportConfiguration4 = new org.apache.rat.ReportConfiguration(log3);
        org.apache.rat.report.claim.ClaimStatistic claimStatistic5 = org.apache.rat.Reporter.report(reportConfiguration4);
        org.apache.rat.utils.ReportingSet.Options options6 = org.apache.rat.utils.ReportingSet.Options.OVERWRITE;
        reportConfiguration4.licenseDuplicateOption(options6);
        reportConfiguration1.familyDuplicateOption(options6);
        org.apache.commons.io.function.IOSupplier<java.io.PrintWriter> printWriterIOSupplier9 = reportConfiguration1.getWriter();
        boolean boolean10 = reportConfiguration1.isAddingLicensesForced();
        java.io.FilenameFilter filenameFilter11 = reportConfiguration1.getInputFileFilter();
        java.io.FilenameFilter filenameFilter12 = reportConfiguration1.getInputFileFilter();
        boolean boolean13 = reportConfiguration1.isStyleReport();
        org.apache.rat.utils.Log log14 = reportConfiguration1.getLog();
        org.apache.commons.io.filefilter.IOFileFilter iOFileFilter15 = reportConfiguration1.getDirectoryFilter();
        org.apache.commons.io.function.IOSupplier<java.io.InputStream> inputStreamIOSupplier16 = reportConfiguration1.getStyleSheet();
        java.lang.String[] strArray22 = new java.lang.String[] { "http://org/apache/rat/meta-data#LicenseFamilyCategory", "Datum [ name ='http://org/apache/rat/meta-data#LicenseFamilyCategory',value ='GPL1  ']", "MANIFEST.MF", "AllBuilder:", "The MIT License" };
        org.apache.rat.utils.ReportingSet<java.lang.String> strSet23 = new org.apache.rat.utils.ReportingSet<java.lang.String>();
        boolean boolean24 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strSet23, strArray22);
        boolean boolean26 = strSet23.addIfNotPresent("http://org/apache/rat/meta-data#LicenseFamilyName");
        boolean boolean28 = strSet23.addIfNotPresent("ef7a8b13-64c3-4510-bb0c-dbf208e1e73f");
        java.util.function.Function<java.lang.String, java.lang.String> strFunction29 = null;
        org.apache.rat.utils.ReportingSet<java.lang.String> strSet30 = strSet23.setMsgFormat(strFunction29);
        java.lang.String str31 = strSet30.first();
        strSet30.clear();
        boolean boolean34 = strSet30.add("a31c35e6-bb4e-4807-ad11-4dc9b09d976b");
        reportConfiguration1.removeApprovedLicenseCategories((java.util.Collection<java.lang.String>) strSet30);
        org.apache.commons.io.function.IOSupplier<java.io.OutputStream> outputStreamIOSupplier36 = reportConfiguration1.getOutput();
        org.apache.rat.utils.Log log37 = null;
        org.apache.rat.ReportConfiguration reportConfiguration38 = new org.apache.rat.ReportConfiguration(log37);
        org.apache.rat.report.claim.ClaimStatistic claimStatistic39 = org.apache.rat.Reporter.report(reportConfiguration38);
        org.apache.rat.report.IReportable iReportable40 = null;
        reportConfiguration38.setReportable(iReportable40);
        org.apache.rat.license.ILicense iLicense42 = null;
        reportConfiguration38.addLicense(iLicense42);
        org.apache.rat.utils.Log log44 = null;
        org.apache.rat.ReportConfiguration reportConfiguration45 = new org.apache.rat.ReportConfiguration(log44);
        org.apache.rat.utils.ReportingSet.Options options46 = org.apache.rat.utils.ReportingSet.Options.OVERWRITE;
        reportConfiguration45.licenseDuplicateOption(options46);
        reportConfiguration38.familyDuplicateOption(options46);
        reportConfiguration1.familyDuplicateOption(options46);
        org.junit.Assert.assertNull(claimStatistic2);
        org.junit.Assert.assertNull(claimStatistic5);
        org.junit.Assert.assertTrue("'" + options6 + "' != '" + org.apache.rat.utils.ReportingSet.Options.OVERWRITE + "'", options6.equals(org.apache.rat.utils.ReportingSet.Options.OVERWRITE));
        org.junit.Assert.assertNotNull(printWriterIOSupplier9);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertNull(filenameFilter11);
        org.junit.Assert.assertNull(filenameFilter12);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + true + "'", boolean13 == true);
        org.junit.Assert.assertNull(log14);
        org.junit.Assert.assertNotNull(iOFileFilter15);
        org.junit.Assert.assertNull(inputStreamIOSupplier16);
        org.junit.Assert.assertNotNull(strArray22);
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + true + "'", boolean24 == true);
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + true + "'", boolean26 == true);
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + true + "'", boolean28 == true);
        org.junit.Assert.assertNotNull(strSet30);
        org.junit.Assert.assertEquals("'" + str31 + "' != '" + "AllBuilder:" + "'", str31, "AllBuilder:");
        org.junit.Assert.assertTrue("'" + boolean34 + "' != '" + true + "'", boolean34 == true);
        org.junit.Assert.assertNotNull(outputStreamIOSupplier36);
        org.junit.Assert.assertNull(claimStatistic39);
        org.junit.Assert.assertTrue("'" + options46 + "' != '" + org.apache.rat.utils.ReportingSet.Options.OVERWRITE + "'", options46.equals(org.apache.rat.utils.ReportingSet.Options.OVERWRITE));
    }

    @Test
    public void test14800() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest29.test14800");
        org.apache.rat.analysis.matchers.FullTextMatcher fullTextMatcher1 = new org.apache.rat.analysis.matchers.FullTextMatcher("TextBuilder: true");
        org.apache.rat.analysis.IHeaderMatcher.State state2 = fullTextMatcher1.finalizeState();
        org.junit.Assert.assertTrue("'" + state2 + "' != '" + org.apache.rat.analysis.IHeaderMatcher.State.f + "'", state2.equals(org.apache.rat.analysis.IHeaderMatcher.State.f));
    }

    @Test
    public void test14801() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest29.test14801");
        org.apache.rat.utils.DefaultLog defaultLog0 = org.apache.rat.utils.DefaultLog.INSTANCE;
        org.apache.rat.annotation.ApacheV2LicenseAppender apacheV2LicenseAppender1 = new org.apache.rat.annotation.ApacheV2LicenseAppender((org.apache.rat.utils.Log) defaultLog0);
        org.apache.rat.utils.Log log2 = null;
        org.apache.rat.ReportConfiguration reportConfiguration3 = new org.apache.rat.ReportConfiguration(log2);
        org.apache.rat.report.claim.ClaimStatistic claimStatistic4 = org.apache.rat.Reporter.report(reportConfiguration3);
        org.apache.rat.utils.Log log5 = null;
        org.apache.rat.ReportConfiguration reportConfiguration6 = new org.apache.rat.ReportConfiguration(log5);
        org.apache.rat.report.claim.ClaimStatistic claimStatistic7 = org.apache.rat.Reporter.report(reportConfiguration6);
        org.apache.rat.utils.ReportingSet.Options options8 = org.apache.rat.utils.ReportingSet.Options.OVERWRITE;
        reportConfiguration6.licenseDuplicateOption(options8);
        reportConfiguration3.familyDuplicateOption(options8);
        org.apache.commons.io.function.IOSupplier<java.io.PrintWriter> printWriterIOSupplier11 = reportConfiguration3.getWriter();
        org.apache.rat.utils.Log log12 = null;
        org.apache.rat.ReportConfiguration reportConfiguration13 = new org.apache.rat.ReportConfiguration(log12);
        reportConfiguration13.addApprovedLicenseCategory(".cvsignore");
        org.apache.rat.utils.Log.Level level16 = org.apache.rat.utils.Log.Level.ERROR;
        reportConfiguration13.logFamilyCollisions(level16);
        reportConfiguration3.logFamilyCollisions(level16);
        org.apache.rat.Defaults.Builder builder19 = org.apache.rat.Defaults.builder();
        org.apache.rat.Defaults.Builder builder20 = builder19.noDefault();
        defaultLog0.log(level16, (java.lang.Object) builder19);
        org.apache.rat.utils.DefaultLog defaultLog22 = org.apache.rat.utils.DefaultLog.INSTANCE;
        org.apache.rat.license.ILicense.Builder builder23 = org.apache.rat.license.ILicense.builder();
        org.apache.rat.license.ILicense.Builder builder25 = builder23.setLicenseFamilyCategory("");
        org.apache.rat.analysis.matchers.CopyrightMatcher copyrightMatcher29 = new org.apache.rat.analysis.matchers.CopyrightMatcher("", "GPL1 ", "hi!");
        org.apache.rat.analysis.IHeaderMatcher.State state30 = copyrightMatcher29.finalizeState();
        org.apache.rat.license.ILicense.Builder builder31 = builder25.setMatcher((org.apache.rat.analysis.IHeaderMatcher) copyrightMatcher29);
        org.apache.rat.license.ILicense.Builder builder33 = builder31.setLicenseFamilyCategory("");
        defaultLog22.error((java.lang.Object) builder33);
        org.apache.rat.utils.Log.Level level35 = org.apache.rat.utils.Log.Level.DEBUG;
        defaultLog22.setLevel(level35);
        defaultLog0.log(level35, "The MIT License");
        org.apache.rat.utils.Log.Level level39 = org.apache.rat.utils.Log.Level.DEBUG;
        defaultLog0.log(level39, "W3C Document Copyright");
        defaultLog0.info((java.lang.Object) "Datum [ name ='http://org/apache/rat/meta-data#LicenseFamilyCategory',value ='DOJO  ']");
        org.apache.rat.ReportConfiguration reportConfiguration44 = new org.apache.rat.ReportConfiguration((org.apache.rat.utils.Log) defaultLog0);
        org.apache.rat.utils.DefaultLog defaultLog45 = org.apache.rat.utils.DefaultLog.INSTANCE;
        org.apache.rat.license.ILicense.Builder builder46 = org.apache.rat.license.ILicense.builder();
        org.apache.rat.license.ILicense.Builder builder48 = builder46.setLicenseFamilyCategory("");
        org.apache.rat.analysis.matchers.CopyrightMatcher copyrightMatcher52 = new org.apache.rat.analysis.matchers.CopyrightMatcher("", "GPL1 ", "hi!");
        org.apache.rat.analysis.IHeaderMatcher.State state53 = copyrightMatcher52.finalizeState();
        org.apache.rat.license.ILicense.Builder builder54 = builder48.setMatcher((org.apache.rat.analysis.IHeaderMatcher) copyrightMatcher52);
        org.apache.rat.license.ILicense.Builder builder56 = builder54.setLicenseFamilyCategory("");
        defaultLog45.error((java.lang.Object) builder56);
        org.apache.rat.utils.Log.Level level58 = defaultLog45.getLevel();
        org.apache.rat.utils.Log log59 = null;
        org.apache.rat.ReportConfiguration reportConfiguration60 = new org.apache.rat.ReportConfiguration(log59);
        reportConfiguration60.addApprovedLicenseCategory(".cvsignore");
        org.apache.rat.utils.Log.Level level63 = org.apache.rat.utils.Log.Level.ERROR;
        reportConfiguration60.logLicenseCollisions(level63);
        defaultLog45.log(level63, "AnyBuilder:");
        defaultLog0.log(level63, "2df6201b-0a11-4fc4-8d79-e8001e95fb6b");
        org.junit.Assert.assertNotNull(defaultLog0);
        org.junit.Assert.assertNull(claimStatistic4);
        org.junit.Assert.assertNull(claimStatistic7);
        org.junit.Assert.assertTrue("'" + options8 + "' != '" + org.apache.rat.utils.ReportingSet.Options.OVERWRITE + "'", options8.equals(org.apache.rat.utils.ReportingSet.Options.OVERWRITE));
        org.junit.Assert.assertNotNull(printWriterIOSupplier11);
        org.junit.Assert.assertTrue("'" + level16 + "' != '" + org.apache.rat.utils.Log.Level.ERROR + "'", level16.equals(org.apache.rat.utils.Log.Level.ERROR));
        org.junit.Assert.assertNotNull(builder19);
        org.junit.Assert.assertNotNull(builder20);
        org.junit.Assert.assertNotNull(defaultLog22);
        org.junit.Assert.assertNotNull(builder23);
        org.junit.Assert.assertNotNull(builder25);
        org.junit.Assert.assertTrue("'" + state30 + "' != '" + org.apache.rat.analysis.IHeaderMatcher.State.f + "'", state30.equals(org.apache.rat.analysis.IHeaderMatcher.State.f));
        org.junit.Assert.assertNotNull(builder31);
        org.junit.Assert.assertNotNull(builder33);
        org.junit.Assert.assertTrue("'" + level35 + "' != '" + org.apache.rat.utils.Log.Level.DEBUG + "'", level35.equals(org.apache.rat.utils.Log.Level.DEBUG));
        org.junit.Assert.assertTrue("'" + level39 + "' != '" + org.apache.rat.utils.Log.Level.DEBUG + "'", level39.equals(org.apache.rat.utils.Log.Level.DEBUG));
        org.junit.Assert.assertNotNull(defaultLog45);
        org.junit.Assert.assertNotNull(builder46);
        org.junit.Assert.assertNotNull(builder48);
        org.junit.Assert.assertTrue("'" + state53 + "' != '" + org.apache.rat.analysis.IHeaderMatcher.State.f + "'", state53.equals(org.apache.rat.analysis.IHeaderMatcher.State.f));
        org.junit.Assert.assertNotNull(builder54);
        org.junit.Assert.assertNotNull(builder56);
        org.junit.Assert.assertTrue("'" + level58 + "' != '" + org.apache.rat.utils.Log.Level.DEBUG + "'", level58.equals(org.apache.rat.utils.Log.Level.DEBUG));
        org.junit.Assert.assertTrue("'" + level63 + "' != '" + org.apache.rat.utils.Log.Level.ERROR + "'", level63.equals(org.apache.rat.utils.Log.Level.ERROR));
    }

    @Test
    public void test14802() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest29.test14802");
        org.apache.rat.analysis.license.FullTextMatchingLicense fullTextMatchingLicense0 = new org.apache.rat.analysis.license.FullTextMatchingLicense();
        fullTextMatchingLicense0.setLicenseFamilyName("hi!");
        java.lang.String str3 = fullTextMatchingLicense0.getLicenseFamilyCategory();
        java.lang.String str4 = fullTextMatchingLicense0.getLicenseFamilyCategory();
        fullTextMatchingLicense0.setLicenseFamilyCategory("DOJO ");
        java.lang.String str7 = fullTextMatchingLicense0.getLicenseFamilyName();
        fullTextMatchingLicense0.setNotes("SpdxBuilder: null http://org/apache/rat/meta-data#LicenseFamilyName");
        org.apache.rat.license.ILicenseFamily iLicenseFamily10 = fullTextMatchingLicense0.getLicenseFamily();
        fullTextMatchingLicense0.setLicenseFamilyName("Datum [ name ='MANIFEST.MF',value ='GPL2  ']");
        fullTextMatchingLicense0.setLicenseFamilyName("Datum [ name ='http://org/apache/rat/meta-data#ApprovedLicense',value ='false ']");
        org.junit.Assert.assertNull(str3);
        org.junit.Assert.assertNull(str4);
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "hi!" + "'", str7, "hi!");
        org.junit.Assert.assertNotNull(iLicenseFamily10);
    }

    @Test
    public void test14803() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest29.test14803");
        org.apache.rat.analysis.matchers.FullTextMatcher fullTextMatcher3 = new org.apache.rat.analysis.matchers.FullTextMatcher("TMF  ", "Apache License Version 2.0");
        org.apache.rat.analysis.IHeaderMatcher.State state4 = fullTextMatcher3.finalizeState();
        fullTextMatcher3.reset();
        fullTextMatcher3.reset();
        org.apache.rat.analysis.matchers.NotMatcher notMatcher7 = new org.apache.rat.analysis.matchers.NotMatcher("8128040D-CA94-4F3F-9DEB-6252ACD449BD", (org.apache.rat.analysis.IHeaderMatcher) fullTextMatcher3);
        java.lang.String str8 = notMatcher7.getId();
        org.junit.Assert.assertTrue("'" + state4 + "' != '" + org.apache.rat.analysis.IHeaderMatcher.State.f + "'", state4.equals(org.apache.rat.analysis.IHeaderMatcher.State.f));
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "8128040D-CA94-4F3F-9DEB-6252ACD449BD" + "'", str8, "8128040D-CA94-4F3F-9DEB-6252ACD449BD");
    }

    @Test
    public void test14804() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest29.test14804");
        org.apache.rat.analysis.license.FullTextMatchingLicense fullTextMatchingLicense0 = new org.apache.rat.analysis.license.FullTextMatchingLicense();
        fullTextMatchingLicense0.setLicenseFamilyName("hi!");
        java.lang.String str3 = fullTextMatchingLicense0.getLicenseFamilyCategory();
        java.lang.String str4 = fullTextMatchingLicense0.getLicenseFamilyCategory();
        java.lang.String str5 = fullTextMatchingLicense0.getNotes();
        java.lang.String str6 = fullTextMatchingLicense0.getNotes();
        fullTextMatchingLicense0.setLicenseFamilyCategory("MATHCERREFBUILDER: TMF");
        fullTextMatchingLicense0.setLicenseFamilyName("4bc3a3d5-58d2-4ae6-a09c-2e73ed66c833");
        org.apache.rat.license.ILicenseFamily iLicenseFamily11 = fullTextMatchingLicense0.getLicenseFamily();
        org.junit.Assert.assertNull(str3);
        org.junit.Assert.assertNull(str4);
        org.junit.Assert.assertNull(str5);
        org.junit.Assert.assertNull(str6);
        org.junit.Assert.assertNotNull(iLicenseFamily11);
    }

    @Test
    public void test14805() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest29.test14805");
        org.apache.rat.utils.Log log0 = null;
        org.apache.rat.ReportConfiguration reportConfiguration1 = new org.apache.rat.ReportConfiguration(log0);
        org.apache.commons.io.function.IOSupplier<java.io.OutputStream> outputStreamIOSupplier2 = reportConfiguration1.getOutput();
        org.apache.commons.io.filefilter.IOFileFilter iOFileFilter3 = reportConfiguration1.getDirectoryFilter();
        java.nio.file.Path path4 = null;
        java.nio.file.attribute.BasicFileAttributes basicFileAttributes5 = null;
        java.nio.file.FileVisitResult fileVisitResult6 = iOFileFilter3.accept(path4, basicFileAttributes5);
        org.apache.rat.utils.Log log7 = null;
        org.apache.rat.ReportConfiguration reportConfiguration8 = new org.apache.rat.ReportConfiguration(log7);
        java.io.FilenameFilter filenameFilter9 = reportConfiguration8.getInputFileFilter();
        org.apache.rat.license.LicenseSetFactory.LicenseFilter licenseFilter10 = org.apache.rat.license.LicenseSetFactory.LicenseFilter.all;
        java.util.SortedSet<org.apache.rat.license.ILicense> iLicenseSet11 = reportConfiguration8.getLicenses(licenseFilter10);
        org.apache.rat.config.AddLicenseHeaders addLicenseHeaders12 = org.apache.rat.config.AddLicenseHeaders.FALSE;
        reportConfiguration8.setAddLicenseHeaders(addLicenseHeaders12);
        org.apache.rat.utils.Log log14 = null;
        org.apache.rat.ReportConfiguration reportConfiguration15 = new org.apache.rat.ReportConfiguration(log14);
        org.apache.rat.report.claim.ClaimStatistic claimStatistic16 = org.apache.rat.Reporter.report(reportConfiguration15);
        org.apache.rat.license.LicenseSetFactory.LicenseFilter licenseFilter17 = org.apache.rat.license.LicenseSetFactory.LicenseFilter.all;
        org.apache.rat.Reporter.listLicenses(reportConfiguration15, licenseFilter17);
        org.apache.rat.Reporter.listLicenses(reportConfiguration8, licenseFilter17);
        org.apache.rat.utils.Log log20 = null;
        org.apache.rat.ReportConfiguration reportConfiguration21 = new org.apache.rat.ReportConfiguration(log20);
        java.io.FilenameFilter filenameFilter22 = reportConfiguration21.getInputFileFilter();
        org.apache.rat.license.LicenseSetFactory.LicenseFilter licenseFilter23 = org.apache.rat.license.LicenseSetFactory.LicenseFilter.all;
        java.util.SortedSet<org.apache.rat.license.ILicense> iLicenseSet24 = reportConfiguration21.getLicenses(licenseFilter23);
        org.apache.rat.config.AddLicenseHeaders addLicenseHeaders25 = org.apache.rat.config.AddLicenseHeaders.FALSE;
        reportConfiguration21.setAddLicenseHeaders(addLicenseHeaders25);
        org.apache.rat.utils.Log log27 = null;
        org.apache.rat.ReportConfiguration reportConfiguration28 = new org.apache.rat.ReportConfiguration(log27);
        org.apache.rat.report.claim.ClaimStatistic claimStatistic29 = org.apache.rat.Reporter.report(reportConfiguration28);
        org.apache.rat.license.LicenseSetFactory.LicenseFilter licenseFilter30 = org.apache.rat.license.LicenseSetFactory.LicenseFilter.all;
        org.apache.rat.Reporter.listLicenses(reportConfiguration28, licenseFilter30);
        org.apache.rat.Reporter.listLicenses(reportConfiguration21, licenseFilter30);
        org.apache.rat.Reporter.listLicenses(reportConfiguration8, licenseFilter30);
        org.apache.rat.utils.Log log34 = null;
        org.apache.rat.ReportConfiguration reportConfiguration35 = new org.apache.rat.ReportConfiguration(log34);
        org.apache.commons.io.function.IOSupplier<java.io.OutputStream> outputStreamIOSupplier36 = reportConfiguration35.getOutput();
        reportConfiguration8.setOut(outputStreamIOSupplier36);
        org.apache.rat.utils.Log.Level level38 = org.apache.rat.utils.Log.Level.WARN;
        reportConfiguration8.logLicenseCollisions(level38);
        org.apache.commons.io.filefilter.IOFileFilter iOFileFilter40 = reportConfiguration8.getDirectoryFilter();
        java.nio.file.Path path41 = null;
        boolean boolean42 = iOFileFilter40.matches(path41);
        java.nio.file.Path path43 = null;
        java.nio.file.attribute.BasicFileAttributes basicFileAttributes44 = null;
        java.nio.file.FileVisitResult fileVisitResult45 = iOFileFilter40.accept(path43, basicFileAttributes44);
        org.apache.rat.utils.Log log46 = null;
        org.apache.rat.ReportConfiguration reportConfiguration47 = new org.apache.rat.ReportConfiguration(log46);
        java.io.FilenameFilter filenameFilter48 = reportConfiguration47.getInputFileFilter();
        org.apache.rat.license.LicenseSetFactory.LicenseFilter licenseFilter49 = org.apache.rat.license.LicenseSetFactory.LicenseFilter.all;
        java.util.SortedSet<org.apache.rat.license.ILicense> iLicenseSet50 = reportConfiguration47.getLicenses(licenseFilter49);
        org.apache.rat.config.AddLicenseHeaders addLicenseHeaders51 = org.apache.rat.config.AddLicenseHeaders.FALSE;
        reportConfiguration47.setAddLicenseHeaders(addLicenseHeaders51);
        org.apache.rat.utils.Log log53 = null;
        org.apache.rat.ReportConfiguration reportConfiguration54 = new org.apache.rat.ReportConfiguration(log53);
        org.apache.rat.report.claim.ClaimStatistic claimStatistic55 = org.apache.rat.Reporter.report(reportConfiguration54);
        org.apache.rat.license.LicenseSetFactory.LicenseFilter licenseFilter56 = org.apache.rat.license.LicenseSetFactory.LicenseFilter.all;
        org.apache.rat.Reporter.listLicenses(reportConfiguration54, licenseFilter56);
        org.apache.rat.Reporter.listLicenses(reportConfiguration47, licenseFilter56);
        org.apache.rat.utils.Log log59 = null;
        org.apache.rat.ReportConfiguration reportConfiguration60 = new org.apache.rat.ReportConfiguration(log59);
        java.io.FilenameFilter filenameFilter61 = reportConfiguration60.getInputFileFilter();
        org.apache.rat.license.LicenseSetFactory.LicenseFilter licenseFilter62 = org.apache.rat.license.LicenseSetFactory.LicenseFilter.all;
        java.util.SortedSet<org.apache.rat.license.ILicense> iLicenseSet63 = reportConfiguration60.getLicenses(licenseFilter62);
        org.apache.rat.config.AddLicenseHeaders addLicenseHeaders64 = org.apache.rat.config.AddLicenseHeaders.FALSE;
        reportConfiguration60.setAddLicenseHeaders(addLicenseHeaders64);
        org.apache.rat.utils.Log log66 = null;
        org.apache.rat.ReportConfiguration reportConfiguration67 = new org.apache.rat.ReportConfiguration(log66);
        org.apache.rat.report.claim.ClaimStatistic claimStatistic68 = org.apache.rat.Reporter.report(reportConfiguration67);
        org.apache.rat.license.LicenseSetFactory.LicenseFilter licenseFilter69 = org.apache.rat.license.LicenseSetFactory.LicenseFilter.all;
        org.apache.rat.Reporter.listLicenses(reportConfiguration67, licenseFilter69);
        org.apache.rat.Reporter.listLicenses(reportConfiguration60, licenseFilter69);
        org.apache.rat.Reporter.listLicenses(reportConfiguration47, licenseFilter69);
        org.apache.rat.utils.Log log73 = null;
        org.apache.rat.ReportConfiguration reportConfiguration74 = new org.apache.rat.ReportConfiguration(log73);
        org.apache.commons.io.function.IOSupplier<java.io.OutputStream> outputStreamIOSupplier75 = reportConfiguration74.getOutput();
        reportConfiguration47.setOut(outputStreamIOSupplier75);
        org.apache.rat.utils.Log.Level level77 = org.apache.rat.utils.Log.Level.WARN;
        reportConfiguration47.logLicenseCollisions(level77);
        org.apache.commons.io.filefilter.IOFileFilter iOFileFilter79 = reportConfiguration47.getDirectoryFilter();
        java.nio.file.Path path80 = null;
        boolean boolean81 = iOFileFilter79.matches(path80);
        org.apache.commons.io.filefilter.IOFileFilter iOFileFilter82 = iOFileFilter40.and(iOFileFilter79);
        org.apache.commons.io.filefilter.IOFileFilter iOFileFilter83 = iOFileFilter3.and(iOFileFilter40);
        org.apache.rat.utils.Log log84 = null;
        org.apache.rat.ReportConfiguration reportConfiguration85 = new org.apache.rat.ReportConfiguration(log84);
        reportConfiguration85.addApprovedLicenseCategory(".cvsignore");
        reportConfiguration85.removeApprovedLicenseCategory("COMMON DEVELOPMENT AND DISTRIBUTION LICENSE Version 1.0");
        org.apache.rat.license.ILicenseFamily iLicenseFamily90 = null;
        reportConfiguration85.addFamily(iLicenseFamily90);
        boolean boolean92 = reportConfiguration85.isStyleReport();
        org.apache.commons.io.filefilter.IOFileFilter iOFileFilter93 = reportConfiguration85.getDirectoryFilter();
        java.nio.file.Path path94 = null;
        java.nio.file.attribute.BasicFileAttributes basicFileAttributes95 = null;
        java.nio.file.FileVisitResult fileVisitResult96 = iOFileFilter93.accept(path94, basicFileAttributes95);
        org.apache.commons.io.filefilter.IOFileFilter iOFileFilter97 = iOFileFilter3.and(iOFileFilter93);
        org.junit.Assert.assertNotNull(outputStreamIOSupplier2);
        org.junit.Assert.assertNotNull(iOFileFilter3);
        org.junit.Assert.assertTrue("'" + fileVisitResult6 + "' != '" + java.nio.file.FileVisitResult.TERMINATE + "'", fileVisitResult6.equals(java.nio.file.FileVisitResult.TERMINATE));
        org.junit.Assert.assertNull(filenameFilter9);
        org.junit.Assert.assertTrue("'" + licenseFilter10 + "' != '" + org.apache.rat.license.LicenseSetFactory.LicenseFilter.all + "'", licenseFilter10.equals(org.apache.rat.license.LicenseSetFactory.LicenseFilter.all));
        org.junit.Assert.assertNotNull(iLicenseSet11);
        org.junit.Assert.assertTrue("'" + addLicenseHeaders12 + "' != '" + org.apache.rat.config.AddLicenseHeaders.FALSE + "'", addLicenseHeaders12.equals(org.apache.rat.config.AddLicenseHeaders.FALSE));
        org.junit.Assert.assertNull(claimStatistic16);
        org.junit.Assert.assertTrue("'" + licenseFilter17 + "' != '" + org.apache.rat.license.LicenseSetFactory.LicenseFilter.all + "'", licenseFilter17.equals(org.apache.rat.license.LicenseSetFactory.LicenseFilter.all));
        org.junit.Assert.assertNull(filenameFilter22);
        org.junit.Assert.assertTrue("'" + licenseFilter23 + "' != '" + org.apache.rat.license.LicenseSetFactory.LicenseFilter.all + "'", licenseFilter23.equals(org.apache.rat.license.LicenseSetFactory.LicenseFilter.all));
        org.junit.Assert.assertNotNull(iLicenseSet24);
        org.junit.Assert.assertTrue("'" + addLicenseHeaders25 + "' != '" + org.apache.rat.config.AddLicenseHeaders.FALSE + "'", addLicenseHeaders25.equals(org.apache.rat.config.AddLicenseHeaders.FALSE));
        org.junit.Assert.assertNull(claimStatistic29);
        org.junit.Assert.assertTrue("'" + licenseFilter30 + "' != '" + org.apache.rat.license.LicenseSetFactory.LicenseFilter.all + "'", licenseFilter30.equals(org.apache.rat.license.LicenseSetFactory.LicenseFilter.all));
        org.junit.Assert.assertNotNull(outputStreamIOSupplier36);
        org.junit.Assert.assertTrue("'" + level38 + "' != '" + org.apache.rat.utils.Log.Level.WARN + "'", level38.equals(org.apache.rat.utils.Log.Level.WARN));
        org.junit.Assert.assertNotNull(iOFileFilter40);
        org.junit.Assert.assertTrue("'" + boolean42 + "' != '" + false + "'", boolean42 == false);
        org.junit.Assert.assertTrue("'" + fileVisitResult45 + "' != '" + java.nio.file.FileVisitResult.TERMINATE + "'", fileVisitResult45.equals(java.nio.file.FileVisitResult.TERMINATE));
        org.junit.Assert.assertNull(filenameFilter48);
        org.junit.Assert.assertTrue("'" + licenseFilter49 + "' != '" + org.apache.rat.license.LicenseSetFactory.LicenseFilter.all + "'", licenseFilter49.equals(org.apache.rat.license.LicenseSetFactory.LicenseFilter.all));
        org.junit.Assert.assertNotNull(iLicenseSet50);
        org.junit.Assert.assertTrue("'" + addLicenseHeaders51 + "' != '" + org.apache.rat.config.AddLicenseHeaders.FALSE + "'", addLicenseHeaders51.equals(org.apache.rat.config.AddLicenseHeaders.FALSE));
        org.junit.Assert.assertNull(claimStatistic55);
        org.junit.Assert.assertTrue("'" + licenseFilter56 + "' != '" + org.apache.rat.license.LicenseSetFactory.LicenseFilter.all + "'", licenseFilter56.equals(org.apache.rat.license.LicenseSetFactory.LicenseFilter.all));
        org.junit.Assert.assertNull(filenameFilter61);
        org.junit.Assert.assertTrue("'" + licenseFilter62 + "' != '" + org.apache.rat.license.LicenseSetFactory.LicenseFilter.all + "'", licenseFilter62.equals(org.apache.rat.license.LicenseSetFactory.LicenseFilter.all));
        org.junit.Assert.assertNotNull(iLicenseSet63);
        org.junit.Assert.assertTrue("'" + addLicenseHeaders64 + "' != '" + org.apache.rat.config.AddLicenseHeaders.FALSE + "'", addLicenseHeaders64.equals(org.apache.rat.config.AddLicenseHeaders.FALSE));
        org.junit.Assert.assertNull(claimStatistic68);
        org.junit.Assert.assertTrue("'" + licenseFilter69 + "' != '" + org.apache.rat.license.LicenseSetFactory.LicenseFilter.all + "'", licenseFilter69.equals(org.apache.rat.license.LicenseSetFactory.LicenseFilter.all));
        org.junit.Assert.assertNotNull(outputStreamIOSupplier75);
        org.junit.Assert.assertTrue("'" + level77 + "' != '" + org.apache.rat.utils.Log.Level.WARN + "'", level77.equals(org.apache.rat.utils.Log.Level.WARN));
        org.junit.Assert.assertNotNull(iOFileFilter79);
        org.junit.Assert.assertTrue("'" + boolean81 + "' != '" + false + "'", boolean81 == false);
        org.junit.Assert.assertNotNull(iOFileFilter82);
        org.junit.Assert.assertNotNull(iOFileFilter83);
        org.junit.Assert.assertTrue("'" + boolean92 + "' != '" + true + "'", boolean92 == true);
        org.junit.Assert.assertNotNull(iOFileFilter93);
        org.junit.Assert.assertTrue("'" + fileVisitResult96 + "' != '" + java.nio.file.FileVisitResult.TERMINATE + "'", fileVisitResult96.equals(java.nio.file.FileVisitResult.TERMINATE));
        org.junit.Assert.assertNotNull(iOFileFilter97);
    }

    @Test
    public void test14806() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest29.test14806");
        org.apache.rat.utils.ReportingSet<java.lang.String> strSet0 = new org.apache.rat.utils.ReportingSet<java.lang.String>();
        strSet0.clear();
        boolean boolean2 = strSet0.isEmpty();
        java.util.Comparator<? super java.lang.String> wildcardComparator3 = strSet0.comparator();
        java.util.Spliterator<java.lang.String> strSpliterator4 = strSet0.spliterator();
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + true + "'", boolean2 == true);
        org.junit.Assert.assertNull(wildcardComparator3);
        org.junit.Assert.assertNotNull(strSpliterator4);
    }

    @Test
    public void test14807() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest29.test14807");
        org.apache.rat.utils.Log log0 = null;
        org.apache.rat.ReportConfiguration reportConfiguration1 = new org.apache.rat.ReportConfiguration(log0);
        reportConfiguration1.addApprovedLicenseCategory(".cvsignore");
        org.apache.rat.utils.Log.Level level4 = org.apache.rat.utils.Log.Level.ERROR;
        reportConfiguration1.logLicenseCollisions(level4);
        reportConfiguration1.addApprovedLicenseCategory("73fbee1b-7ed9-442a-968e-b2b525ca688f");
        org.apache.rat.utils.Log log8 = null;
        org.apache.rat.ReportConfiguration reportConfiguration9 = new org.apache.rat.ReportConfiguration(log8);
        java.io.FilenameFilter filenameFilter10 = reportConfiguration9.getInputFileFilter();
        org.apache.rat.license.LicenseSetFactory.LicenseFilter licenseFilter11 = org.apache.rat.license.LicenseSetFactory.LicenseFilter.all;
        java.util.SortedSet<org.apache.rat.license.ILicense> iLicenseSet12 = reportConfiguration9.getLicenses(licenseFilter11);
        org.apache.rat.config.AddLicenseHeaders addLicenseHeaders13 = org.apache.rat.config.AddLicenseHeaders.FALSE;
        reportConfiguration9.setAddLicenseHeaders(addLicenseHeaders13);
        org.apache.rat.utils.Log log15 = null;
        org.apache.rat.ReportConfiguration reportConfiguration16 = new org.apache.rat.ReportConfiguration(log15);
        org.apache.rat.report.claim.ClaimStatistic claimStatistic17 = org.apache.rat.Reporter.report(reportConfiguration16);
        org.apache.rat.license.LicenseSetFactory.LicenseFilter licenseFilter18 = org.apache.rat.license.LicenseSetFactory.LicenseFilter.all;
        org.apache.rat.Reporter.listLicenses(reportConfiguration16, licenseFilter18);
        org.apache.rat.Reporter.listLicenses(reportConfiguration9, licenseFilter18);
        org.apache.rat.utils.Log log21 = null;
        org.apache.rat.ReportConfiguration reportConfiguration22 = new org.apache.rat.ReportConfiguration(log21);
        java.io.FilenameFilter filenameFilter23 = reportConfiguration22.getInputFileFilter();
        org.apache.rat.license.LicenseSetFactory.LicenseFilter licenseFilter24 = org.apache.rat.license.LicenseSetFactory.LicenseFilter.all;
        java.util.SortedSet<org.apache.rat.license.ILicense> iLicenseSet25 = reportConfiguration22.getLicenses(licenseFilter24);
        org.apache.rat.config.AddLicenseHeaders addLicenseHeaders26 = org.apache.rat.config.AddLicenseHeaders.FALSE;
        reportConfiguration22.setAddLicenseHeaders(addLicenseHeaders26);
        org.apache.rat.utils.Log log28 = null;
        org.apache.rat.ReportConfiguration reportConfiguration29 = new org.apache.rat.ReportConfiguration(log28);
        org.apache.rat.report.claim.ClaimStatistic claimStatistic30 = org.apache.rat.Reporter.report(reportConfiguration29);
        org.apache.rat.license.LicenseSetFactory.LicenseFilter licenseFilter31 = org.apache.rat.license.LicenseSetFactory.LicenseFilter.all;
        org.apache.rat.Reporter.listLicenses(reportConfiguration29, licenseFilter31);
        org.apache.rat.Reporter.listLicenses(reportConfiguration22, licenseFilter31);
        org.apache.rat.Reporter.listLicenses(reportConfiguration9, licenseFilter31);
        java.io.FilenameFilter filenameFilter35 = reportConfiguration9.getInputFileFilter();
        reportConfiguration9.setStyleReport(false);
        org.apache.rat.report.IReportable iReportable38 = null;
        reportConfiguration9.setReportable(iReportable38);
        org.apache.rat.Defaults.Builder builder41 = org.apache.rat.Defaults.builder();
        org.apache.rat.Defaults defaults42 = builder41.build();
        org.apache.rat.utils.Log log43 = null;
        org.apache.rat.ReportConfiguration reportConfiguration44 = new org.apache.rat.ReportConfiguration(log43);
        java.io.FilenameFilter filenameFilter45 = reportConfiguration44.getInputFileFilter();
        org.apache.rat.license.LicenseSetFactory.LicenseFilter licenseFilter46 = org.apache.rat.license.LicenseSetFactory.LicenseFilter.all;
        java.util.SortedSet<org.apache.rat.license.ILicense> iLicenseSet47 = reportConfiguration44.getLicenses(licenseFilter46);
        org.apache.rat.config.AddLicenseHeaders addLicenseHeaders48 = org.apache.rat.config.AddLicenseHeaders.FALSE;
        reportConfiguration44.setAddLicenseHeaders(addLicenseHeaders48);
        org.apache.rat.utils.Log log50 = null;
        org.apache.rat.ReportConfiguration reportConfiguration51 = new org.apache.rat.ReportConfiguration(log50);
        org.apache.rat.report.claim.ClaimStatistic claimStatistic52 = org.apache.rat.Reporter.report(reportConfiguration51);
        org.apache.rat.license.LicenseSetFactory.LicenseFilter licenseFilter53 = org.apache.rat.license.LicenseSetFactory.LicenseFilter.all;
        org.apache.rat.Reporter.listLicenses(reportConfiguration51, licenseFilter53);
        org.apache.rat.Reporter.listLicenses(reportConfiguration44, licenseFilter53);
        org.apache.rat.utils.Log log56 = null;
        org.apache.rat.ReportConfiguration reportConfiguration57 = new org.apache.rat.ReportConfiguration(log56);
        java.io.FilenameFilter filenameFilter58 = reportConfiguration57.getInputFileFilter();
        org.apache.rat.license.LicenseSetFactory.LicenseFilter licenseFilter59 = org.apache.rat.license.LicenseSetFactory.LicenseFilter.all;
        java.util.SortedSet<org.apache.rat.license.ILicense> iLicenseSet60 = reportConfiguration57.getLicenses(licenseFilter59);
        org.apache.rat.config.AddLicenseHeaders addLicenseHeaders61 = org.apache.rat.config.AddLicenseHeaders.FALSE;
        reportConfiguration57.setAddLicenseHeaders(addLicenseHeaders61);
        org.apache.rat.utils.Log log63 = null;
        org.apache.rat.ReportConfiguration reportConfiguration64 = new org.apache.rat.ReportConfiguration(log63);
        org.apache.rat.report.claim.ClaimStatistic claimStatistic65 = org.apache.rat.Reporter.report(reportConfiguration64);
        org.apache.rat.license.LicenseSetFactory.LicenseFilter licenseFilter66 = org.apache.rat.license.LicenseSetFactory.LicenseFilter.all;
        org.apache.rat.Reporter.listLicenses(reportConfiguration64, licenseFilter66);
        org.apache.rat.Reporter.listLicenses(reportConfiguration57, licenseFilter66);
        java.util.SortedSet<org.apache.rat.license.ILicenseFamily> iLicenseFamilySet69 = reportConfiguration44.getLicenseFamilies(licenseFilter66);
        java.util.SortedSet<org.apache.rat.license.ILicense> iLicenseSet70 = defaults42.getLicenses(licenseFilter66);
        org.apache.rat.utils.ReportingSet<org.apache.rat.license.ILicense> iLicenseSet71 = new org.apache.rat.utils.ReportingSet<org.apache.rat.license.ILicense>(iLicenseSet70);
        org.apache.rat.license.ILicense iLicense72 = org.apache.rat.license.LicenseSetFactory.search("TMF", iLicenseSet70);
        reportConfiguration9.addLicense(iLicense72);
        java.lang.String str74 = iLicense72.derivedFrom();
        reportConfiguration1.addLicense(iLicense72);
        org.apache.rat.analysis.IHeaderMatcher.State state76 = iLicense72.currentState();
        org.apache.rat.license.ILicenseFamily iLicenseFamily77 = iLicense72.getLicenseFamily();
        java.lang.String str78 = iLicenseFamily77.getFamilyCategory();
        org.junit.Assert.assertTrue("'" + level4 + "' != '" + org.apache.rat.utils.Log.Level.ERROR + "'", level4.equals(org.apache.rat.utils.Log.Level.ERROR));
        org.junit.Assert.assertNull(filenameFilter10);
        org.junit.Assert.assertTrue("'" + licenseFilter11 + "' != '" + org.apache.rat.license.LicenseSetFactory.LicenseFilter.all + "'", licenseFilter11.equals(org.apache.rat.license.LicenseSetFactory.LicenseFilter.all));
        org.junit.Assert.assertNotNull(iLicenseSet12);
        org.junit.Assert.assertTrue("'" + addLicenseHeaders13 + "' != '" + org.apache.rat.config.AddLicenseHeaders.FALSE + "'", addLicenseHeaders13.equals(org.apache.rat.config.AddLicenseHeaders.FALSE));
        org.junit.Assert.assertNull(claimStatistic17);
        org.junit.Assert.assertTrue("'" + licenseFilter18 + "' != '" + org.apache.rat.license.LicenseSetFactory.LicenseFilter.all + "'", licenseFilter18.equals(org.apache.rat.license.LicenseSetFactory.LicenseFilter.all));
        org.junit.Assert.assertNull(filenameFilter23);
        org.junit.Assert.assertTrue("'" + licenseFilter24 + "' != '" + org.apache.rat.license.LicenseSetFactory.LicenseFilter.all + "'", licenseFilter24.equals(org.apache.rat.license.LicenseSetFactory.LicenseFilter.all));
        org.junit.Assert.assertNotNull(iLicenseSet25);
        org.junit.Assert.assertTrue("'" + addLicenseHeaders26 + "' != '" + org.apache.rat.config.AddLicenseHeaders.FALSE + "'", addLicenseHeaders26.equals(org.apache.rat.config.AddLicenseHeaders.FALSE));
        org.junit.Assert.assertNull(claimStatistic30);
        org.junit.Assert.assertTrue("'" + licenseFilter31 + "' != '" + org.apache.rat.license.LicenseSetFactory.LicenseFilter.all + "'", licenseFilter31.equals(org.apache.rat.license.LicenseSetFactory.LicenseFilter.all));
        org.junit.Assert.assertNull(filenameFilter35);
        org.junit.Assert.assertNotNull(builder41);
        org.junit.Assert.assertNotNull(defaults42);
        org.junit.Assert.assertNull(filenameFilter45);
        org.junit.Assert.assertTrue("'" + licenseFilter46 + "' != '" + org.apache.rat.license.LicenseSetFactory.LicenseFilter.all + "'", licenseFilter46.equals(org.apache.rat.license.LicenseSetFactory.LicenseFilter.all));
        org.junit.Assert.assertNotNull(iLicenseSet47);
        org.junit.Assert.assertTrue("'" + addLicenseHeaders48 + "' != '" + org.apache.rat.config.AddLicenseHeaders.FALSE + "'", addLicenseHeaders48.equals(org.apache.rat.config.AddLicenseHeaders.FALSE));
        org.junit.Assert.assertNull(claimStatistic52);
        org.junit.Assert.assertTrue("'" + licenseFilter53 + "' != '" + org.apache.rat.license.LicenseSetFactory.LicenseFilter.all + "'", licenseFilter53.equals(org.apache.rat.license.LicenseSetFactory.LicenseFilter.all));
        org.junit.Assert.assertNull(filenameFilter58);
        org.junit.Assert.assertTrue("'" + licenseFilter59 + "' != '" + org.apache.rat.license.LicenseSetFactory.LicenseFilter.all + "'", licenseFilter59.equals(org.apache.rat.license.LicenseSetFactory.LicenseFilter.all));
        org.junit.Assert.assertNotNull(iLicenseSet60);
        org.junit.Assert.assertTrue("'" + addLicenseHeaders61 + "' != '" + org.apache.rat.config.AddLicenseHeaders.FALSE + "'", addLicenseHeaders61.equals(org.apache.rat.config.AddLicenseHeaders.FALSE));
        org.junit.Assert.assertNull(claimStatistic65);
        org.junit.Assert.assertTrue("'" + licenseFilter66 + "' != '" + org.apache.rat.license.LicenseSetFactory.LicenseFilter.all + "'", licenseFilter66.equals(org.apache.rat.license.LicenseSetFactory.LicenseFilter.all));
        org.junit.Assert.assertNotNull(iLicenseFamilySet69);
        org.junit.Assert.assertNotNull(iLicenseSet70);
        org.junit.Assert.assertNotNull(iLicense72);
        org.junit.Assert.assertEquals("'" + str74 + "' != '" + "BSD-3" + "'", str74, "BSD-3");
        org.junit.Assert.assertTrue("'" + state76 + "' != '" + org.apache.rat.analysis.IHeaderMatcher.State.i + "'", state76.equals(org.apache.rat.analysis.IHeaderMatcher.State.i));
        org.junit.Assert.assertNotNull(iLicenseFamily77);
        org.junit.Assert.assertEquals("'" + str78 + "' != '" + "BSD-3" + "'", str78, "BSD-3");
    }

    @Test
    public void test14808() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest29.test14808");
        boolean boolean1 = org.apache.rat.document.impl.guesser.BinaryGuesser.isExecutable("3e0a465b-2466-4402-94d1-ee762655437c");
        org.junit.Assert.assertTrue("'" + boolean1 + "' != '" + false + "'", boolean1 == false);
    }

    @Test
    public void test14809() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest29.test14809");
        java.io.File file0 = null;
        org.apache.rat.utils.Log log1 = null;
        org.apache.rat.ReportConfiguration reportConfiguration2 = new org.apache.rat.ReportConfiguration(log1);
        org.apache.rat.report.claim.ClaimStatistic claimStatistic3 = org.apache.rat.Reporter.report(reportConfiguration2);
        org.apache.rat.utils.Log log4 = null;
        org.apache.rat.ReportConfiguration reportConfiguration5 = new org.apache.rat.ReportConfiguration(log4);
        org.apache.rat.report.claim.ClaimStatistic claimStatistic6 = org.apache.rat.Reporter.report(reportConfiguration5);
        org.apache.rat.utils.ReportingSet.Options options7 = org.apache.rat.utils.ReportingSet.Options.OVERWRITE;
        reportConfiguration5.licenseDuplicateOption(options7);
        reportConfiguration2.familyDuplicateOption(options7);
        org.apache.rat.utils.Log log10 = reportConfiguration2.getLog();
        org.apache.rat.configuration.Format format11 = org.apache.rat.configuration.Format.XML;
        org.apache.rat.configuration.LicenseReader licenseReader12 = format11.licenseReader();
        org.apache.rat.configuration.MatcherReader matcherReader13 = format11.matcherReader();
        org.apache.rat.configuration.LicenseReader licenseReader14 = format11.licenseReader();
        org.apache.rat.configuration.LicenseReader licenseReader15 = format11.licenseReader();
        java.util.SortedSet<org.apache.rat.license.ILicenseFamily> iLicenseFamilySet16 = licenseReader15.readFamilies();
        java.util.SortedSet<org.apache.rat.license.ILicense> iLicenseSet17 = licenseReader15.readLicenses();
        reportConfiguration2.addLicensesIfNotPresent((java.util.Collection<org.apache.rat.license.ILicense>) iLicenseSet17);
        org.apache.rat.report.claim.ClaimStatistic claimStatistic19 = org.apache.rat.Reporter.report(reportConfiguration2);
        org.apache.rat.utils.Log log20 = reportConfiguration2.getLog();
        org.apache.rat.utils.Log log21 = null;
        org.apache.rat.ReportConfiguration reportConfiguration22 = new org.apache.rat.ReportConfiguration(log21);
        java.io.FilenameFilter filenameFilter23 = reportConfiguration22.getInputFileFilter();
        org.apache.rat.license.LicenseSetFactory.LicenseFilter licenseFilter24 = org.apache.rat.license.LicenseSetFactory.LicenseFilter.all;
        java.util.SortedSet<org.apache.rat.license.ILicense> iLicenseSet25 = reportConfiguration22.getLicenses(licenseFilter24);
        org.apache.rat.config.AddLicenseHeaders addLicenseHeaders26 = org.apache.rat.config.AddLicenseHeaders.FALSE;
        reportConfiguration22.setAddLicenseHeaders(addLicenseHeaders26);
        org.apache.rat.utils.Log log28 = null;
        org.apache.rat.ReportConfiguration reportConfiguration29 = new org.apache.rat.ReportConfiguration(log28);
        org.apache.rat.report.claim.ClaimStatistic claimStatistic30 = org.apache.rat.Reporter.report(reportConfiguration29);
        org.apache.rat.license.LicenseSetFactory.LicenseFilter licenseFilter31 = org.apache.rat.license.LicenseSetFactory.LicenseFilter.all;
        org.apache.rat.Reporter.listLicenses(reportConfiguration29, licenseFilter31);
        org.apache.rat.Reporter.listLicenses(reportConfiguration22, licenseFilter31);
        java.lang.String[] strArray72 = new java.lang.String[] { "274c6a15-09f6-4bfd-ac53-1827770eb507", "true|false|forced", "GEN  ", "Apache License Version 2.0", "OASIS", "Apache License Version 2.0", "hi!", "http://org/apache/rat/meta-data", "standard", "", "GEN  ", "W3C Document Copyright", "COMMON DEVELOPMENT AND DISTRIBUTION LICENSE Version 1.0", "Copyright Builder: s:null e:null o:null", "MANIFEST.MF", "Modified BSD License", "true|false|forced", "t true", "GPL2 ", "Modified BSD License", "hi!", "MANIFEST.MF", "GPL2 ", "W3C Software Copyright", "W3C Software Copyright", "021187d7-27c2-4fd9-bc74-8cc00413ee52", "Apache License Version 2.0", "W3C Software Copyright", ".cvsignore", "?????", "274c6a15-09f6-4bfd-ac53-1827770eb507", "GNU General Public License, version 1", "GNU General Public License, version 1", "TMF  ", "6486879f-fc81-4b57-aec7-c4c77d540c30", "org/apache/rat/plain-rat.xsl", "GNU General Public License, version 2", "?????" };
        java.util.ArrayList<java.lang.String> strList73 = new java.util.ArrayList<java.lang.String>();
        boolean boolean74 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strList73, strArray72);
        reportConfiguration22.removeApprovedLicenseCategories((java.util.Collection<java.lang.String>) strList73);
        org.apache.commons.io.filefilter.IOFileFilter iOFileFilter76 = reportConfiguration22.getDirectoryFilter();
        reportConfiguration2.setInputFileFilter((java.io.FilenameFilter) iOFileFilter76);
        org.apache.commons.io.filefilter.IOFileFilter iOFileFilter78 = iOFileFilter76.negate();
        // The following exception was thrown during execution in test generation
        try {
            org.apache.rat.walker.ArchiveWalker archiveWalker79 = new org.apache.rat.walker.ArchiveWalker(file0, (java.io.FilenameFilter) iOFileFilter76);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNull(claimStatistic3);
        org.junit.Assert.assertNull(claimStatistic6);
        org.junit.Assert.assertTrue("'" + options7 + "' != '" + org.apache.rat.utils.ReportingSet.Options.OVERWRITE + "'", options7.equals(org.apache.rat.utils.ReportingSet.Options.OVERWRITE));
        org.junit.Assert.assertNull(log10);
        org.junit.Assert.assertTrue("'" + format11 + "' != '" + org.apache.rat.configuration.Format.XML + "'", format11.equals(org.apache.rat.configuration.Format.XML));
        org.junit.Assert.assertNotNull(licenseReader12);
        org.junit.Assert.assertNotNull(matcherReader13);
        org.junit.Assert.assertNotNull(licenseReader14);
        org.junit.Assert.assertNotNull(licenseReader15);
        org.junit.Assert.assertNotNull(iLicenseFamilySet16);
        org.junit.Assert.assertNotNull(iLicenseSet17);
        org.junit.Assert.assertNull(claimStatistic19);
        org.junit.Assert.assertNull(log20);
        org.junit.Assert.assertNull(filenameFilter23);
        org.junit.Assert.assertTrue("'" + licenseFilter24 + "' != '" + org.apache.rat.license.LicenseSetFactory.LicenseFilter.all + "'", licenseFilter24.equals(org.apache.rat.license.LicenseSetFactory.LicenseFilter.all));
        org.junit.Assert.assertNotNull(iLicenseSet25);
        org.junit.Assert.assertTrue("'" + addLicenseHeaders26 + "' != '" + org.apache.rat.config.AddLicenseHeaders.FALSE + "'", addLicenseHeaders26.equals(org.apache.rat.config.AddLicenseHeaders.FALSE));
        org.junit.Assert.assertNull(claimStatistic30);
        org.junit.Assert.assertTrue("'" + licenseFilter31 + "' != '" + org.apache.rat.license.LicenseSetFactory.LicenseFilter.all + "'", licenseFilter31.equals(org.apache.rat.license.LicenseSetFactory.LicenseFilter.all));
        org.junit.Assert.assertNotNull(strArray72);
        org.junit.Assert.assertTrue("'" + boolean74 + "' != '" + true + "'", boolean74 == true);
        org.junit.Assert.assertNotNull(iOFileFilter76);
        org.junit.Assert.assertNotNull(iOFileFilter78);
    }

    @Test
    public void test14810() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest29.test14810");
        org.apache.rat.configuration.builders.CopyrightBuilder copyrightBuilder0 = org.apache.rat.analysis.IHeaderMatcher.Builder.copyright();
        java.lang.String str1 = copyrightBuilder0.toString();
        org.apache.rat.configuration.builders.CopyrightBuilder copyrightBuilder3 = copyrightBuilder0.setEnd(".cvsignore");
        boolean boolean4 = copyrightBuilder0.hasId();
        org.apache.rat.configuration.builders.CopyrightBuilder copyrightBuilder6 = copyrightBuilder0.setEnd("notice");
        org.apache.rat.configuration.builders.CopyrightBuilder copyrightBuilder8 = copyrightBuilder6.setEnd("9df69ca9-2229-47b6-966b-221652fd7d08");
        org.apache.rat.configuration.builders.CopyrightBuilder copyrightBuilder10 = copyrightBuilder8.setStart("c819f60c-c781-49b6-ae3a-5a74de014a4d");
        org.apache.rat.analysis.IHeaderMatcher iHeaderMatcher11 = copyrightBuilder10.build();
        org.junit.Assert.assertNotNull(copyrightBuilder0);
        org.junit.Assert.assertEquals("'" + str1 + "' != '" + "Copyright Builder: s:null e:null o:null" + "'", str1, "Copyright Builder: s:null e:null o:null");
        org.junit.Assert.assertNotNull(copyrightBuilder3);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertNotNull(copyrightBuilder6);
        org.junit.Assert.assertNotNull(copyrightBuilder8);
        org.junit.Assert.assertNotNull(copyrightBuilder10);
        org.junit.Assert.assertNotNull(iHeaderMatcher11);
    }

    @Test
    public void test14811() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest29.test14811");
        org.apache.rat.utils.Log log0 = null;
        org.apache.rat.ReportConfiguration reportConfiguration1 = new org.apache.rat.ReportConfiguration(log0);
        org.apache.rat.license.ILicenseFamily[] iLicenseFamilyArray2 = new org.apache.rat.license.ILicenseFamily[] {};
        java.util.ArrayList<org.apache.rat.license.ILicenseFamily> iLicenseFamilyList3 = new java.util.ArrayList<org.apache.rat.license.ILicenseFamily>();
        boolean boolean4 = java.util.Collections.addAll((java.util.Collection<org.apache.rat.license.ILicenseFamily>) iLicenseFamilyList3, iLicenseFamilyArray2);
        reportConfiguration1.addFamilies((java.util.Collection<org.apache.rat.license.ILicenseFamily>) iLicenseFamilyList3);
        org.apache.rat.report.IReportable iReportable6 = null;
        reportConfiguration1.setReportable(iReportable6);
        reportConfiguration1.addApprovedLicenseCategory("http://org/apache/rat/meta-data#LicenseFamilyCategory");
        org.apache.rat.utils.Log log10 = null;
        org.apache.rat.ReportConfiguration reportConfiguration11 = new org.apache.rat.ReportConfiguration(log10);
        java.io.FilenameFilter filenameFilter12 = reportConfiguration11.getInputFileFilter();
        org.apache.rat.license.LicenseSetFactory.LicenseFilter licenseFilter13 = org.apache.rat.license.LicenseSetFactory.LicenseFilter.all;
        java.util.SortedSet<org.apache.rat.license.ILicense> iLicenseSet14 = reportConfiguration11.getLicenses(licenseFilter13);
        org.apache.rat.license.ILicenseFamily iLicenseFamily15 = null;
        reportConfiguration11.addFamily(iLicenseFamily15);
        org.apache.commons.io.filefilter.IOFileFilter iOFileFilter17 = reportConfiguration11.getDirectoryFilter();
        org.apache.rat.document.ToNameTransformer toNameTransformer18 = new org.apache.rat.document.ToNameTransformer();
        org.apache.rat.utils.DefaultLog defaultLog19 = org.apache.rat.utils.DefaultLog.INSTANCE;
        org.apache.rat.license.ILicense.Builder builder20 = org.apache.rat.license.ILicense.builder();
        org.apache.rat.license.ILicense.Builder builder22 = builder20.setLicenseFamilyCategory("");
        org.apache.rat.analysis.matchers.CopyrightMatcher copyrightMatcher26 = new org.apache.rat.analysis.matchers.CopyrightMatcher("", "GPL1 ", "hi!");
        org.apache.rat.analysis.IHeaderMatcher.State state27 = copyrightMatcher26.finalizeState();
        org.apache.rat.license.ILicense.Builder builder28 = builder22.setMatcher((org.apache.rat.analysis.IHeaderMatcher) copyrightMatcher26);
        org.apache.rat.license.ILicense.Builder builder30 = builder28.setLicenseFamilyCategory("");
        defaultLog19.error((java.lang.Object) builder30);
        java.lang.Object obj32 = toNameTransformer18.transform((java.lang.Object) defaultLog19);
        org.apache.rat.utils.Log log33 = null;
        org.apache.rat.ReportConfiguration reportConfiguration34 = new org.apache.rat.ReportConfiguration(log33);
        java.io.FilenameFilter filenameFilter35 = reportConfiguration34.getInputFileFilter();
        org.apache.rat.license.ILicense iLicense36 = null;
        reportConfiguration34.addLicense(iLicense36);
        org.apache.rat.license.ILicenseFamily iLicenseFamily38 = null;
        reportConfiguration34.addFamily(iLicenseFamily38);
        org.apache.commons.io.function.IOSupplier<java.io.InputStream> inputStreamIOSupplier40 = org.apache.rat.Defaults.getPlainStyleSheet();
        reportConfiguration34.setStyleSheet(inputStreamIOSupplier40);
        java.lang.Object obj42 = toNameTransformer18.transform((java.lang.Object) inputStreamIOSupplier40);
        reportConfiguration11.setStyleSheet(inputStreamIOSupplier40);
        reportConfiguration1.setStyleSheet(inputStreamIOSupplier40);
        java.lang.String[] strArray50 = new java.lang.String[] { "http://org/apache/rat/meta-data#LicenseFamilyCategory", "Datum [ name ='http://org/apache/rat/meta-data#LicenseFamilyCategory',value ='GPL1  ']", "MANIFEST.MF", "AllBuilder:", "The MIT License" };
        org.apache.rat.utils.ReportingSet<java.lang.String> strSet51 = new org.apache.rat.utils.ReportingSet<java.lang.String>();
        boolean boolean52 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strSet51, strArray50);
        boolean boolean54 = strSet51.addIfNotPresent("http://org/apache/rat/meta-data#LicenseFamilyName");
        boolean boolean56 = strSet51.addIfNotPresent("ef7a8b13-64c3-4510-bb0c-dbf208e1e73f");
        java.util.function.Function<java.lang.String, java.lang.String> strFunction57 = null;
        org.apache.rat.utils.ReportingSet<java.lang.String> strSet58 = strSet51.setMsgFormat(strFunction57);
        java.lang.String str59 = strSet58.first();
        strSet58.clear();
        boolean boolean62 = strSet58.add("a31c35e6-bb4e-4807-ad11-4dc9b09d976b");
        org.apache.rat.utils.ReportingSet<java.lang.String> strSet65 = strSet58.subSet("SpdxBuilder: Datum [ name ='http://org/apache/rat/meta-data#ApprovedLicense',value ='false ']", "archive");
        reportConfiguration1.addApprovedLicenseCategories((java.util.Collection<java.lang.String>) strSet58);
        org.junit.Assert.assertNotNull(iLicenseFamilyArray2);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertNull(filenameFilter12);
        org.junit.Assert.assertTrue("'" + licenseFilter13 + "' != '" + org.apache.rat.license.LicenseSetFactory.LicenseFilter.all + "'", licenseFilter13.equals(org.apache.rat.license.LicenseSetFactory.LicenseFilter.all));
        org.junit.Assert.assertNotNull(iLicenseSet14);
        org.junit.Assert.assertNotNull(iOFileFilter17);
        org.junit.Assert.assertNotNull(defaultLog19);
        org.junit.Assert.assertNotNull(builder20);
        org.junit.Assert.assertNotNull(builder22);
        org.junit.Assert.assertTrue("'" + state27 + "' != '" + org.apache.rat.analysis.IHeaderMatcher.State.f + "'", state27.equals(org.apache.rat.analysis.IHeaderMatcher.State.f));
        org.junit.Assert.assertNotNull(builder28);
        org.junit.Assert.assertNotNull(builder30);
        org.junit.Assert.assertNull(obj32);
        org.junit.Assert.assertNull(filenameFilter35);
        org.junit.Assert.assertNotNull(inputStreamIOSupplier40);
        org.junit.Assert.assertNull(obj42);
        org.junit.Assert.assertNotNull(strArray50);
        org.junit.Assert.assertTrue("'" + boolean52 + "' != '" + true + "'", boolean52 == true);
        org.junit.Assert.assertTrue("'" + boolean54 + "' != '" + true + "'", boolean54 == true);
        org.junit.Assert.assertTrue("'" + boolean56 + "' != '" + true + "'", boolean56 == true);
        org.junit.Assert.assertNotNull(strSet58);
        org.junit.Assert.assertEquals("'" + str59 + "' != '" + "AllBuilder:" + "'", str59, "AllBuilder:");
        org.junit.Assert.assertTrue("'" + boolean62 + "' != '" + true + "'", boolean62 == true);
        org.junit.Assert.assertNotNull(strSet65);
    }

    @Test
    public void test14812() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest29.test14812");
        org.apache.rat.utils.DefaultLog defaultLog0 = org.apache.rat.utils.DefaultLog.INSTANCE;
        org.apache.rat.utils.Log log1 = null;
        org.apache.rat.ReportConfiguration reportConfiguration2 = new org.apache.rat.ReportConfiguration(log1);
        java.io.FilenameFilter filenameFilter3 = reportConfiguration2.getInputFileFilter();
        org.apache.rat.license.LicenseSetFactory.LicenseFilter licenseFilter4 = org.apache.rat.license.LicenseSetFactory.LicenseFilter.all;
        java.util.SortedSet<org.apache.rat.license.ILicense> iLicenseSet5 = reportConfiguration2.getLicenses(licenseFilter4);
        org.apache.rat.config.AddLicenseHeaders addLicenseHeaders6 = org.apache.rat.config.AddLicenseHeaders.FALSE;
        reportConfiguration2.setAddLicenseHeaders(addLicenseHeaders6);
        org.apache.rat.utils.Log log8 = null;
        org.apache.rat.ReportConfiguration reportConfiguration9 = new org.apache.rat.ReportConfiguration(log8);
        org.apache.rat.report.claim.ClaimStatistic claimStatistic10 = org.apache.rat.Reporter.report(reportConfiguration9);
        org.apache.rat.license.LicenseSetFactory.LicenseFilter licenseFilter11 = org.apache.rat.license.LicenseSetFactory.LicenseFilter.all;
        org.apache.rat.Reporter.listLicenses(reportConfiguration9, licenseFilter11);
        org.apache.rat.Reporter.listLicenses(reportConfiguration2, licenseFilter11);
        org.apache.rat.utils.Log log14 = null;
        org.apache.rat.ReportConfiguration reportConfiguration15 = new org.apache.rat.ReportConfiguration(log14);
        java.io.FilenameFilter filenameFilter16 = reportConfiguration15.getInputFileFilter();
        org.apache.rat.license.LicenseSetFactory.LicenseFilter licenseFilter17 = org.apache.rat.license.LicenseSetFactory.LicenseFilter.all;
        java.util.SortedSet<org.apache.rat.license.ILicense> iLicenseSet18 = reportConfiguration15.getLicenses(licenseFilter17);
        org.apache.rat.config.AddLicenseHeaders addLicenseHeaders19 = org.apache.rat.config.AddLicenseHeaders.FALSE;
        reportConfiguration15.setAddLicenseHeaders(addLicenseHeaders19);
        org.apache.rat.utils.Log log21 = null;
        org.apache.rat.ReportConfiguration reportConfiguration22 = new org.apache.rat.ReportConfiguration(log21);
        org.apache.rat.report.claim.ClaimStatistic claimStatistic23 = org.apache.rat.Reporter.report(reportConfiguration22);
        org.apache.rat.license.LicenseSetFactory.LicenseFilter licenseFilter24 = org.apache.rat.license.LicenseSetFactory.LicenseFilter.all;
        org.apache.rat.Reporter.listLicenses(reportConfiguration22, licenseFilter24);
        org.apache.rat.Reporter.listLicenses(reportConfiguration15, licenseFilter24);
        org.apache.rat.Reporter.listLicenses(reportConfiguration2, licenseFilter24);
        org.apache.rat.utils.Log log28 = null;
        org.apache.rat.ReportConfiguration reportConfiguration29 = new org.apache.rat.ReportConfiguration(log28);
        org.apache.commons.io.function.IOSupplier<java.io.OutputStream> outputStreamIOSupplier30 = reportConfiguration29.getOutput();
        reportConfiguration2.setOut(outputStreamIOSupplier30);
        org.apache.rat.utils.Log log32 = null;
        org.apache.rat.ReportConfiguration reportConfiguration33 = new org.apache.rat.ReportConfiguration(log32);
        org.apache.rat.report.claim.ClaimStatistic claimStatistic34 = org.apache.rat.Reporter.report(reportConfiguration33);
        org.apache.rat.utils.Log log35 = null;
        org.apache.rat.ReportConfiguration reportConfiguration36 = new org.apache.rat.ReportConfiguration(log35);
        org.apache.rat.report.claim.ClaimStatistic claimStatistic37 = org.apache.rat.Reporter.report(reportConfiguration36);
        org.apache.rat.utils.ReportingSet.Options options38 = org.apache.rat.utils.ReportingSet.Options.OVERWRITE;
        reportConfiguration36.licenseDuplicateOption(options38);
        reportConfiguration33.familyDuplicateOption(options38);
        reportConfiguration2.licenseDuplicateOption(options38);
        reportConfiguration2.addApprovedLicenseCategory("W3C Document Copyright");
        org.apache.rat.utils.Log log44 = null;
        org.apache.rat.ReportConfiguration reportConfiguration45 = new org.apache.rat.ReportConfiguration(log44);
        reportConfiguration45.addApprovedLicenseCategory(".cvsignore");
        org.apache.rat.utils.Log.Level level48 = org.apache.rat.utils.Log.Level.ERROR;
        reportConfiguration45.logLicenseCollisions(level48);
        reportConfiguration2.logLicenseCollisions(level48);
        defaultLog0.setLevel(level48);
        defaultLog0.warn((java.lang.Object) "GNU General Public License, version 3");
        org.apache.rat.ReportConfiguration reportConfiguration54 = new org.apache.rat.ReportConfiguration((org.apache.rat.utils.Log) defaultLog0);
        org.apache.rat.utils.DefaultLog defaultLog55 = org.apache.rat.utils.DefaultLog.INSTANCE;
        org.apache.rat.utils.Log log56 = null;
        org.apache.rat.ReportConfiguration reportConfiguration57 = new org.apache.rat.ReportConfiguration(log56);
        reportConfiguration57.addApprovedLicenseCategory(".cvsignore");
        org.apache.rat.utils.Log.Level level60 = org.apache.rat.utils.Log.Level.ERROR;
        reportConfiguration57.logFamilyCollisions(level60);
        defaultLog55.setLevel(level60);
        defaultLog0.debug((java.lang.Object) level60);
        org.apache.rat.utils.Log.Level level64 = defaultLog0.getLevel();
        org.apache.rat.annotation.ApacheV2LicenseAppender apacheV2LicenseAppender66 = new org.apache.rat.annotation.ApacheV2LicenseAppender((org.apache.rat.utils.Log) defaultLog0, "8ECB8CCE-06E4-400F-84D9-AD1CF6289FDA");
        org.apache.rat.annotation.ApacheV2LicenseAppender apacheV2LicenseAppender68 = new org.apache.rat.annotation.ApacheV2LicenseAppender((org.apache.rat.utils.Log) defaultLog0, "httporgapacheratmetadataLicenseFamilyName");
        org.apache.rat.annotation.ApacheV2LicenseAppender apacheV2LicenseAppender69 = new org.apache.rat.annotation.ApacheV2LicenseAppender((org.apache.rat.utils.Log) defaultLog0);
        org.apache.rat.annotation.ApacheV2LicenseAppender apacheV2LicenseAppender70 = new org.apache.rat.annotation.ApacheV2LicenseAppender((org.apache.rat.utils.Log) defaultLog0);
        org.apache.rat.configuration.builders.TextBuilder textBuilder71 = new org.apache.rat.configuration.builders.TextBuilder();
        org.apache.rat.configuration.builders.TextBuilder textBuilder73 = textBuilder71.setText("t true");
        org.apache.rat.analysis.IHeaderMatcher iHeaderMatcher74 = textBuilder71.build();
        org.apache.rat.analysis.IHeaderMatcher iHeaderMatcher75 = textBuilder71.build();
        org.apache.rat.configuration.builders.TextBuilder textBuilder77 = textBuilder71.setText("null http://org/apache/rat/meta-data#LicenseFamilyName");
        org.apache.rat.configuration.builders.AbstractBuilder abstractBuilder79 = textBuilder71.setId("COMMON DEVELOPMENT AND DISTRIBUTION LICENSE Version 1.0");
        org.apache.rat.analysis.IHeaderMatcher iHeaderMatcher80 = abstractBuilder79.build();
        defaultLog0.info((java.lang.Object) iHeaderMatcher80);
        org.junit.Assert.assertNotNull(defaultLog0);
        org.junit.Assert.assertNull(filenameFilter3);
        org.junit.Assert.assertTrue("'" + licenseFilter4 + "' != '" + org.apache.rat.license.LicenseSetFactory.LicenseFilter.all + "'", licenseFilter4.equals(org.apache.rat.license.LicenseSetFactory.LicenseFilter.all));
        org.junit.Assert.assertNotNull(iLicenseSet5);
        org.junit.Assert.assertTrue("'" + addLicenseHeaders6 + "' != '" + org.apache.rat.config.AddLicenseHeaders.FALSE + "'", addLicenseHeaders6.equals(org.apache.rat.config.AddLicenseHeaders.FALSE));
        org.junit.Assert.assertNull(claimStatistic10);
        org.junit.Assert.assertTrue("'" + licenseFilter11 + "' != '" + org.apache.rat.license.LicenseSetFactory.LicenseFilter.all + "'", licenseFilter11.equals(org.apache.rat.license.LicenseSetFactory.LicenseFilter.all));
        org.junit.Assert.assertNull(filenameFilter16);
        org.junit.Assert.assertTrue("'" + licenseFilter17 + "' != '" + org.apache.rat.license.LicenseSetFactory.LicenseFilter.all + "'", licenseFilter17.equals(org.apache.rat.license.LicenseSetFactory.LicenseFilter.all));
        org.junit.Assert.assertNotNull(iLicenseSet18);
        org.junit.Assert.assertTrue("'" + addLicenseHeaders19 + "' != '" + org.apache.rat.config.AddLicenseHeaders.FALSE + "'", addLicenseHeaders19.equals(org.apache.rat.config.AddLicenseHeaders.FALSE));
        org.junit.Assert.assertNull(claimStatistic23);
        org.junit.Assert.assertTrue("'" + licenseFilter24 + "' != '" + org.apache.rat.license.LicenseSetFactory.LicenseFilter.all + "'", licenseFilter24.equals(org.apache.rat.license.LicenseSetFactory.LicenseFilter.all));
        org.junit.Assert.assertNotNull(outputStreamIOSupplier30);
        org.junit.Assert.assertNull(claimStatistic34);
        org.junit.Assert.assertNull(claimStatistic37);
        org.junit.Assert.assertTrue("'" + options38 + "' != '" + org.apache.rat.utils.ReportingSet.Options.OVERWRITE + "'", options38.equals(org.apache.rat.utils.ReportingSet.Options.OVERWRITE));
        org.junit.Assert.assertTrue("'" + level48 + "' != '" + org.apache.rat.utils.Log.Level.ERROR + "'", level48.equals(org.apache.rat.utils.Log.Level.ERROR));
        org.junit.Assert.assertNotNull(defaultLog55);
        org.junit.Assert.assertTrue("'" + level60 + "' != '" + org.apache.rat.utils.Log.Level.ERROR + "'", level60.equals(org.apache.rat.utils.Log.Level.ERROR));
        org.junit.Assert.assertTrue("'" + level64 + "' != '" + org.apache.rat.utils.Log.Level.ERROR + "'", level64.equals(org.apache.rat.utils.Log.Level.ERROR));
        org.junit.Assert.assertNotNull(textBuilder73);
        org.junit.Assert.assertNotNull(iHeaderMatcher74);
        org.junit.Assert.assertNotNull(iHeaderMatcher75);
        org.junit.Assert.assertNotNull(textBuilder77);
        org.junit.Assert.assertNotNull(abstractBuilder79);
        org.junit.Assert.assertNotNull(iHeaderMatcher80);
    }

    @Test
    public void test14813() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest29.test14813");
        org.apache.rat.utils.Log log0 = null;
        org.apache.rat.ReportConfiguration reportConfiguration1 = new org.apache.rat.ReportConfiguration(log0);
        java.io.FilenameFilter filenameFilter2 = reportConfiguration1.getInputFileFilter();
        org.apache.rat.license.LicenseSetFactory.LicenseFilter licenseFilter3 = org.apache.rat.license.LicenseSetFactory.LicenseFilter.all;
        java.util.SortedSet<org.apache.rat.license.ILicense> iLicenseSet4 = reportConfiguration1.getLicenses(licenseFilter3);
        org.apache.rat.config.AddLicenseHeaders addLicenseHeaders5 = org.apache.rat.config.AddLicenseHeaders.FALSE;
        reportConfiguration1.setAddLicenseHeaders(addLicenseHeaders5);
        org.apache.rat.utils.Log log7 = null;
        org.apache.rat.ReportConfiguration reportConfiguration8 = new org.apache.rat.ReportConfiguration(log7);
        org.apache.rat.report.claim.ClaimStatistic claimStatistic9 = org.apache.rat.Reporter.report(reportConfiguration8);
        org.apache.rat.license.LicenseSetFactory.LicenseFilter licenseFilter10 = org.apache.rat.license.LicenseSetFactory.LicenseFilter.all;
        org.apache.rat.Reporter.listLicenses(reportConfiguration8, licenseFilter10);
        org.apache.rat.Reporter.listLicenses(reportConfiguration1, licenseFilter10);
        org.apache.rat.utils.Log log13 = null;
        org.apache.rat.ReportConfiguration reportConfiguration14 = new org.apache.rat.ReportConfiguration(log13);
        java.io.FilenameFilter filenameFilter15 = reportConfiguration14.getInputFileFilter();
        org.apache.rat.license.LicenseSetFactory.LicenseFilter licenseFilter16 = org.apache.rat.license.LicenseSetFactory.LicenseFilter.all;
        java.util.SortedSet<org.apache.rat.license.ILicense> iLicenseSet17 = reportConfiguration14.getLicenses(licenseFilter16);
        org.apache.rat.config.AddLicenseHeaders addLicenseHeaders18 = org.apache.rat.config.AddLicenseHeaders.FALSE;
        reportConfiguration14.setAddLicenseHeaders(addLicenseHeaders18);
        org.apache.rat.utils.Log log20 = null;
        org.apache.rat.ReportConfiguration reportConfiguration21 = new org.apache.rat.ReportConfiguration(log20);
        org.apache.rat.report.claim.ClaimStatistic claimStatistic22 = org.apache.rat.Reporter.report(reportConfiguration21);
        org.apache.rat.license.LicenseSetFactory.LicenseFilter licenseFilter23 = org.apache.rat.license.LicenseSetFactory.LicenseFilter.all;
        org.apache.rat.Reporter.listLicenses(reportConfiguration21, licenseFilter23);
        org.apache.rat.Reporter.listLicenses(reportConfiguration14, licenseFilter23);
        org.apache.rat.Reporter.listLicenses(reportConfiguration1, licenseFilter23);
        java.io.FilenameFilter filenameFilter27 = reportConfiguration1.getInputFileFilter();
        org.apache.rat.utils.Log log28 = null;
        org.apache.rat.ReportConfiguration reportConfiguration29 = new org.apache.rat.ReportConfiguration(log28);
        java.io.FilenameFilter filenameFilter30 = reportConfiguration29.getInputFileFilter();
        org.apache.rat.license.LicenseSetFactory.LicenseFilter licenseFilter31 = org.apache.rat.license.LicenseSetFactory.LicenseFilter.all;
        java.util.SortedSet<org.apache.rat.license.ILicense> iLicenseSet32 = reportConfiguration29.getLicenses(licenseFilter31);
        org.apache.rat.config.AddLicenseHeaders addLicenseHeaders33 = org.apache.rat.config.AddLicenseHeaders.FALSE;
        reportConfiguration29.setAddLicenseHeaders(addLicenseHeaders33);
        org.apache.rat.utils.Log log35 = null;
        org.apache.rat.ReportConfiguration reportConfiguration36 = new org.apache.rat.ReportConfiguration(log35);
        org.apache.rat.report.claim.ClaimStatistic claimStatistic37 = org.apache.rat.Reporter.report(reportConfiguration36);
        org.apache.rat.license.LicenseSetFactory.LicenseFilter licenseFilter38 = org.apache.rat.license.LicenseSetFactory.LicenseFilter.all;
        org.apache.rat.Reporter.listLicenses(reportConfiguration36, licenseFilter38);
        org.apache.rat.Reporter.listLicenses(reportConfiguration29, licenseFilter38);
        org.apache.rat.utils.Log log41 = null;
        org.apache.rat.ReportConfiguration reportConfiguration42 = new org.apache.rat.ReportConfiguration(log41);
        java.io.FilenameFilter filenameFilter43 = reportConfiguration42.getInputFileFilter();
        org.apache.rat.license.LicenseSetFactory.LicenseFilter licenseFilter44 = org.apache.rat.license.LicenseSetFactory.LicenseFilter.all;
        java.util.SortedSet<org.apache.rat.license.ILicense> iLicenseSet45 = reportConfiguration42.getLicenses(licenseFilter44);
        org.apache.rat.config.AddLicenseHeaders addLicenseHeaders46 = org.apache.rat.config.AddLicenseHeaders.FALSE;
        reportConfiguration42.setAddLicenseHeaders(addLicenseHeaders46);
        org.apache.rat.utils.Log log48 = null;
        org.apache.rat.ReportConfiguration reportConfiguration49 = new org.apache.rat.ReportConfiguration(log48);
        org.apache.rat.report.claim.ClaimStatistic claimStatistic50 = org.apache.rat.Reporter.report(reportConfiguration49);
        org.apache.rat.license.LicenseSetFactory.LicenseFilter licenseFilter51 = org.apache.rat.license.LicenseSetFactory.LicenseFilter.all;
        org.apache.rat.Reporter.listLicenses(reportConfiguration49, licenseFilter51);
        org.apache.rat.Reporter.listLicenses(reportConfiguration42, licenseFilter51);
        org.apache.rat.Reporter.listLicenses(reportConfiguration29, licenseFilter51);
        java.util.SortedSet<org.apache.rat.license.ILicense> iLicenseSet55 = reportConfiguration1.getLicenses(licenseFilter51);
        org.apache.rat.license.ILicense iLicense56 = null;
        reportConfiguration1.addLicense(iLicense56);
        org.apache.commons.io.function.IOSupplier<java.io.InputStream> inputStreamIOSupplier58 = reportConfiguration1.getStyleSheet();
        org.apache.rat.report.claim.ClaimStatistic claimStatistic59 = org.apache.rat.Reporter.report(reportConfiguration1);
        org.apache.rat.utils.Log log60 = null;
        org.apache.rat.ReportConfiguration reportConfiguration61 = new org.apache.rat.ReportConfiguration(log60);
        org.apache.commons.io.function.IOSupplier<java.io.OutputStream> outputStreamIOSupplier62 = reportConfiguration61.getOutput();
        reportConfiguration61.setCopyrightMessage("MANIFEST.MF");
        org.apache.rat.utils.Log log65 = reportConfiguration61.getLog();
        org.apache.commons.io.function.IOSupplier<java.io.InputStream> inputStreamIOSupplier66 = org.apache.rat.Defaults.getPlainStyleSheet();
        reportConfiguration61.setStyleSheet(inputStreamIOSupplier66);
        reportConfiguration1.setStyleSheet(inputStreamIOSupplier66);
        org.apache.commons.io.filefilter.IOFileFilter iOFileFilter69 = reportConfiguration1.getDirectoryFilter();
        java.nio.file.Path path70 = null;
        java.nio.file.attribute.BasicFileAttributes basicFileAttributes71 = null;
        java.nio.file.FileVisitResult fileVisitResult72 = iOFileFilter69.accept(path70, basicFileAttributes71);
        org.junit.Assert.assertNull(filenameFilter2);
        org.junit.Assert.assertTrue("'" + licenseFilter3 + "' != '" + org.apache.rat.license.LicenseSetFactory.LicenseFilter.all + "'", licenseFilter3.equals(org.apache.rat.license.LicenseSetFactory.LicenseFilter.all));
        org.junit.Assert.assertNotNull(iLicenseSet4);
        org.junit.Assert.assertTrue("'" + addLicenseHeaders5 + "' != '" + org.apache.rat.config.AddLicenseHeaders.FALSE + "'", addLicenseHeaders5.equals(org.apache.rat.config.AddLicenseHeaders.FALSE));
        org.junit.Assert.assertNull(claimStatistic9);
        org.junit.Assert.assertTrue("'" + licenseFilter10 + "' != '" + org.apache.rat.license.LicenseSetFactory.LicenseFilter.all + "'", licenseFilter10.equals(org.apache.rat.license.LicenseSetFactory.LicenseFilter.all));
        org.junit.Assert.assertNull(filenameFilter15);
        org.junit.Assert.assertTrue("'" + licenseFilter16 + "' != '" + org.apache.rat.license.LicenseSetFactory.LicenseFilter.all + "'", licenseFilter16.equals(org.apache.rat.license.LicenseSetFactory.LicenseFilter.all));
        org.junit.Assert.assertNotNull(iLicenseSet17);
        org.junit.Assert.assertTrue("'" + addLicenseHeaders18 + "' != '" + org.apache.rat.config.AddLicenseHeaders.FALSE + "'", addLicenseHeaders18.equals(org.apache.rat.config.AddLicenseHeaders.FALSE));
        org.junit.Assert.assertNull(claimStatistic22);
        org.junit.Assert.assertTrue("'" + licenseFilter23 + "' != '" + org.apache.rat.license.LicenseSetFactory.LicenseFilter.all + "'", licenseFilter23.equals(org.apache.rat.license.LicenseSetFactory.LicenseFilter.all));
        org.junit.Assert.assertNull(filenameFilter27);
        org.junit.Assert.assertNull(filenameFilter30);
        org.junit.Assert.assertTrue("'" + licenseFilter31 + "' != '" + org.apache.rat.license.LicenseSetFactory.LicenseFilter.all + "'", licenseFilter31.equals(org.apache.rat.license.LicenseSetFactory.LicenseFilter.all));
        org.junit.Assert.assertNotNull(iLicenseSet32);
        org.junit.Assert.assertTrue("'" + addLicenseHeaders33 + "' != '" + org.apache.rat.config.AddLicenseHeaders.FALSE + "'", addLicenseHeaders33.equals(org.apache.rat.config.AddLicenseHeaders.FALSE));
        org.junit.Assert.assertNull(claimStatistic37);
        org.junit.Assert.assertTrue("'" + licenseFilter38 + "' != '" + org.apache.rat.license.LicenseSetFactory.LicenseFilter.all + "'", licenseFilter38.equals(org.apache.rat.license.LicenseSetFactory.LicenseFilter.all));
        org.junit.Assert.assertNull(filenameFilter43);
        org.junit.Assert.assertTrue("'" + licenseFilter44 + "' != '" + org.apache.rat.license.LicenseSetFactory.LicenseFilter.all + "'", licenseFilter44.equals(org.apache.rat.license.LicenseSetFactory.LicenseFilter.all));
        org.junit.Assert.assertNotNull(iLicenseSet45);
        org.junit.Assert.assertTrue("'" + addLicenseHeaders46 + "' != '" + org.apache.rat.config.AddLicenseHeaders.FALSE + "'", addLicenseHeaders46.equals(org.apache.rat.config.AddLicenseHeaders.FALSE));
        org.junit.Assert.assertNull(claimStatistic50);
        org.junit.Assert.assertTrue("'" + licenseFilter51 + "' != '" + org.apache.rat.license.LicenseSetFactory.LicenseFilter.all + "'", licenseFilter51.equals(org.apache.rat.license.LicenseSetFactory.LicenseFilter.all));
        org.junit.Assert.assertNotNull(iLicenseSet55);
        org.junit.Assert.assertNull(inputStreamIOSupplier58);
        org.junit.Assert.assertNull(claimStatistic59);
        org.junit.Assert.assertNotNull(outputStreamIOSupplier62);
        org.junit.Assert.assertNull(log65);
        org.junit.Assert.assertNotNull(inputStreamIOSupplier66);
        org.junit.Assert.assertNotNull(iOFileFilter69);
        org.junit.Assert.assertTrue("'" + fileVisitResult72 + "' != '" + java.nio.file.FileVisitResult.TERMINATE + "'", fileVisitResult72.equals(java.nio.file.FileVisitResult.TERMINATE));
    }

    @Test
    public void test14814() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest29.test14814");
        java.io.File file0 = null;
        org.apache.rat.utils.Log log1 = null;
        org.apache.rat.ReportConfiguration reportConfiguration2 = new org.apache.rat.ReportConfiguration(log1);
        org.apache.rat.report.claim.ClaimStatistic claimStatistic3 = org.apache.rat.Reporter.report(reportConfiguration2);
        org.apache.rat.utils.Log log4 = null;
        org.apache.rat.ReportConfiguration reportConfiguration5 = new org.apache.rat.ReportConfiguration(log4);
        org.apache.rat.report.claim.ClaimStatistic claimStatistic6 = org.apache.rat.Reporter.report(reportConfiguration5);
        org.apache.rat.utils.ReportingSet.Options options7 = org.apache.rat.utils.ReportingSet.Options.OVERWRITE;
        reportConfiguration5.licenseDuplicateOption(options7);
        reportConfiguration2.familyDuplicateOption(options7);
        boolean boolean10 = reportConfiguration2.isStyleReport();
        boolean boolean11 = reportConfiguration2.isAddingLicensesForced();
        boolean boolean12 = reportConfiguration2.isAddingLicenses();
        org.apache.rat.utils.Log log13 = null;
        org.apache.rat.ReportConfiguration reportConfiguration14 = new org.apache.rat.ReportConfiguration(log13);
        org.apache.rat.utils.ReportingSet.Options options15 = org.apache.rat.utils.ReportingSet.Options.OVERWRITE;
        reportConfiguration14.licenseDuplicateOption(options15);
        org.apache.rat.utils.Log log17 = null;
        org.apache.rat.ReportConfiguration reportConfiguration18 = new org.apache.rat.ReportConfiguration(log17);
        java.io.FilenameFilter filenameFilter19 = reportConfiguration18.getInputFileFilter();
        org.apache.rat.license.LicenseSetFactory.LicenseFilter licenseFilter20 = org.apache.rat.license.LicenseSetFactory.LicenseFilter.all;
        java.util.SortedSet<org.apache.rat.license.ILicense> iLicenseSet21 = reportConfiguration18.getLicenses(licenseFilter20);
        org.apache.rat.config.AddLicenseHeaders addLicenseHeaders22 = org.apache.rat.config.AddLicenseHeaders.FALSE;
        reportConfiguration18.setAddLicenseHeaders(addLicenseHeaders22);
        org.apache.rat.utils.Log log24 = null;
        org.apache.rat.ReportConfiguration reportConfiguration25 = new org.apache.rat.ReportConfiguration(log24);
        org.apache.rat.report.claim.ClaimStatistic claimStatistic26 = org.apache.rat.Reporter.report(reportConfiguration25);
        org.apache.rat.license.LicenseSetFactory.LicenseFilter licenseFilter27 = org.apache.rat.license.LicenseSetFactory.LicenseFilter.all;
        org.apache.rat.Reporter.listLicenses(reportConfiguration25, licenseFilter27);
        org.apache.rat.Reporter.listLicenses(reportConfiguration18, licenseFilter27);
        org.apache.rat.utils.Log log30 = null;
        org.apache.rat.ReportConfiguration reportConfiguration31 = new org.apache.rat.ReportConfiguration(log30);
        java.io.FilenameFilter filenameFilter32 = reportConfiguration31.getInputFileFilter();
        org.apache.rat.license.LicenseSetFactory.LicenseFilter licenseFilter33 = org.apache.rat.license.LicenseSetFactory.LicenseFilter.all;
        java.util.SortedSet<org.apache.rat.license.ILicense> iLicenseSet34 = reportConfiguration31.getLicenses(licenseFilter33);
        org.apache.rat.config.AddLicenseHeaders addLicenseHeaders35 = org.apache.rat.config.AddLicenseHeaders.FALSE;
        reportConfiguration31.setAddLicenseHeaders(addLicenseHeaders35);
        org.apache.rat.utils.Log log37 = null;
        org.apache.rat.ReportConfiguration reportConfiguration38 = new org.apache.rat.ReportConfiguration(log37);
        org.apache.rat.report.claim.ClaimStatistic claimStatistic39 = org.apache.rat.Reporter.report(reportConfiguration38);
        org.apache.rat.license.LicenseSetFactory.LicenseFilter licenseFilter40 = org.apache.rat.license.LicenseSetFactory.LicenseFilter.all;
        org.apache.rat.Reporter.listLicenses(reportConfiguration38, licenseFilter40);
        org.apache.rat.Reporter.listLicenses(reportConfiguration31, licenseFilter40);
        org.apache.rat.Reporter.listLicenses(reportConfiguration18, licenseFilter40);
        org.apache.rat.utils.Log log44 = null;
        org.apache.rat.ReportConfiguration reportConfiguration45 = new org.apache.rat.ReportConfiguration(log44);
        org.apache.commons.io.function.IOSupplier<java.io.OutputStream> outputStreamIOSupplier46 = reportConfiguration45.getOutput();
        reportConfiguration18.setOut(outputStreamIOSupplier46);
        org.apache.rat.utils.Log.Level level48 = org.apache.rat.utils.Log.Level.WARN;
        reportConfiguration18.logLicenseCollisions(level48);
        org.apache.commons.io.filefilter.IOFileFilter iOFileFilter50 = reportConfiguration18.getDirectoryFilter();
        reportConfiguration14.setInputFileFilter((java.io.FilenameFilter) iOFileFilter50);
        java.nio.file.Path path52 = null;
        boolean boolean53 = iOFileFilter50.matches(path52);
        org.apache.commons.io.filefilter.IOFileFilter iOFileFilter54 = iOFileFilter50.negate();
        java.nio.file.Path path55 = null;
        boolean boolean56 = iOFileFilter50.matches(path55);
        org.apache.commons.io.filefilter.IOFileFilter iOFileFilter57 = iOFileFilter50.negate();
        org.apache.commons.io.filefilter.IOFileFilter iOFileFilter58 = iOFileFilter50.negate();
        reportConfiguration2.setDirectoryFilter(iOFileFilter50);
        // The following exception was thrown during execution in test generation
        try {
            org.apache.rat.walker.DirectoryWalker directoryWalker60 = new org.apache.rat.walker.DirectoryWalker(file0, iOFileFilter50);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNull(claimStatistic3);
        org.junit.Assert.assertNull(claimStatistic6);
        org.junit.Assert.assertTrue("'" + options7 + "' != '" + org.apache.rat.utils.ReportingSet.Options.OVERWRITE + "'", options7.equals(org.apache.rat.utils.ReportingSet.Options.OVERWRITE));
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + true + "'", boolean10 == true);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertTrue("'" + options15 + "' != '" + org.apache.rat.utils.ReportingSet.Options.OVERWRITE + "'", options15.equals(org.apache.rat.utils.ReportingSet.Options.OVERWRITE));
        org.junit.Assert.assertNull(filenameFilter19);
        org.junit.Assert.assertTrue("'" + licenseFilter20 + "' != '" + org.apache.rat.license.LicenseSetFactory.LicenseFilter.all + "'", licenseFilter20.equals(org.apache.rat.license.LicenseSetFactory.LicenseFilter.all));
        org.junit.Assert.assertNotNull(iLicenseSet21);
        org.junit.Assert.assertTrue("'" + addLicenseHeaders22 + "' != '" + org.apache.rat.config.AddLicenseHeaders.FALSE + "'", addLicenseHeaders22.equals(org.apache.rat.config.AddLicenseHeaders.FALSE));
        org.junit.Assert.assertNull(claimStatistic26);
        org.junit.Assert.assertTrue("'" + licenseFilter27 + "' != '" + org.apache.rat.license.LicenseSetFactory.LicenseFilter.all + "'", licenseFilter27.equals(org.apache.rat.license.LicenseSetFactory.LicenseFilter.all));
        org.junit.Assert.assertNull(filenameFilter32);
        org.junit.Assert.assertTrue("'" + licenseFilter33 + "' != '" + org.apache.rat.license.LicenseSetFactory.LicenseFilter.all + "'", licenseFilter33.equals(org.apache.rat.license.LicenseSetFactory.LicenseFilter.all));
        org.junit.Assert.assertNotNull(iLicenseSet34);
        org.junit.Assert.assertTrue("'" + addLicenseHeaders35 + "' != '" + org.apache.rat.config.AddLicenseHeaders.FALSE + "'", addLicenseHeaders35.equals(org.apache.rat.config.AddLicenseHeaders.FALSE));
        org.junit.Assert.assertNull(claimStatistic39);
        org.junit.Assert.assertTrue("'" + licenseFilter40 + "' != '" + org.apache.rat.license.LicenseSetFactory.LicenseFilter.all + "'", licenseFilter40.equals(org.apache.rat.license.LicenseSetFactory.LicenseFilter.all));
        org.junit.Assert.assertNotNull(outputStreamIOSupplier46);
        org.junit.Assert.assertTrue("'" + level48 + "' != '" + org.apache.rat.utils.Log.Level.WARN + "'", level48.equals(org.apache.rat.utils.Log.Level.WARN));
        org.junit.Assert.assertNotNull(iOFileFilter50);
        org.junit.Assert.assertTrue("'" + boolean53 + "' != '" + false + "'", boolean53 == false);
        org.junit.Assert.assertNotNull(iOFileFilter54);
        org.junit.Assert.assertTrue("'" + boolean56 + "' != '" + false + "'", boolean56 == false);
        org.junit.Assert.assertNotNull(iOFileFilter57);
        org.junit.Assert.assertNotNull(iOFileFilter58);
    }

    @Test
    public void test14815() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest29.test14815");
        // The following exception was thrown during execution in test generation
        try {
            org.apache.rat.license.LicenseSetFactory.LicenseFilter licenseFilter1 = org.apache.rat.license.LicenseSetFactory.LicenseFilter.fromText("ARCHIVE W3CD ");
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: No enum constant org.apache.rat.license.LicenseSetFactory.LicenseFilter.archive w3cd ");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
    }

    @Test
    public void test14816() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest29.test14816");
        org.apache.rat.utils.Log log0 = null;
        org.apache.rat.ReportConfiguration reportConfiguration1 = new org.apache.rat.ReportConfiguration(log0);
        reportConfiguration1.addApprovedLicenseCategory(".cvsignore");
        org.apache.rat.utils.Log.Level level4 = org.apache.rat.utils.Log.Level.ERROR;
        reportConfiguration1.logFamilyCollisions(level4);
        org.apache.commons.io.filefilter.IOFileFilter iOFileFilter6 = reportConfiguration1.getDirectoryFilter();
        java.lang.String[] strArray12 = new java.lang.String[] { "http://org/apache/rat/meta-data#LicenseFamilyCategory", "Datum [ name ='http://org/apache/rat/meta-data#LicenseFamilyCategory',value ='GPL1  ']", "MANIFEST.MF", "AllBuilder:", "The MIT License" };
        org.apache.rat.utils.ReportingSet<java.lang.String> strSet13 = new org.apache.rat.utils.ReportingSet<java.lang.String>();
        boolean boolean14 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strSet13, strArray12);
        boolean boolean16 = strSet13.addIfNotPresent("http://org/apache/rat/meta-data#LicenseFamilyName");
        boolean boolean18 = strSet13.addIfNotPresent("ef7a8b13-64c3-4510-bb0c-dbf208e1e73f");
        java.util.function.Function<java.lang.String, java.lang.String> strFunction19 = null;
        org.apache.rat.utils.ReportingSet<java.lang.String> strSet20 = strSet13.setMsgFormat(strFunction19);
        java.util.SortedSet<org.apache.rat.license.ILicenseFamily> iLicenseFamilySet22 = org.apache.rat.license.LicenseFamilySetFactory.emptyLicenseFamilySet();
        org.apache.rat.license.ILicenseFamily iLicenseFamily23 = org.apache.rat.license.LicenseFamilySetFactory.search("http://org/apache/rat/meta-data", iLicenseFamilySet22);
        boolean boolean24 = strSet13.containsAll((java.util.Collection<org.apache.rat.license.ILicenseFamily>) iLicenseFamilySet22);
        reportConfiguration1.removeApprovedLicenseCategories((java.util.Collection<java.lang.String>) strSet13);
        org.apache.rat.report.IReportable iReportable26 = null;
        reportConfiguration1.setReportable(iReportable26);
        java.io.FilenameFilter filenameFilter28 = reportConfiguration1.getInputFileFilter();
        org.apache.rat.utils.Log log29 = null;
        org.apache.rat.ReportConfiguration reportConfiguration30 = new org.apache.rat.ReportConfiguration(log29);
        java.io.FilenameFilter filenameFilter31 = reportConfiguration30.getInputFileFilter();
        boolean boolean32 = reportConfiguration30.isStyleReport();
        org.apache.commons.io.function.IOSupplier<java.io.OutputStream> outputStreamIOSupplier33 = reportConfiguration30.getOutput();
        org.apache.commons.io.function.IOSupplier<java.io.InputStream> inputStreamIOSupplier34 = reportConfiguration30.getStyleSheet();
        org.apache.rat.report.claim.ClaimStatistic claimStatistic35 = org.apache.rat.Reporter.report(reportConfiguration30);
        reportConfiguration30.setStyleReport(false);
        java.lang.String[] strArray43 = new java.lang.String[] { "http://org/apache/rat/meta-data#LicenseFamilyCategory", "Datum [ name ='http://org/apache/rat/meta-data#LicenseFamilyCategory',value ='GPL1  ']", "MANIFEST.MF", "AllBuilder:", "The MIT License" };
        org.apache.rat.utils.ReportingSet<java.lang.String> strSet44 = new org.apache.rat.utils.ReportingSet<java.lang.String>();
        boolean boolean45 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strSet44, strArray43);
        boolean boolean47 = strSet44.addIfNotPresent("http://org/apache/rat/meta-data#LicenseFamilyName");
        java.util.Iterator<java.lang.String> strItor48 = strSet44.iterator();
        java.lang.Object[] objArray49 = strSet44.toArray();
        org.apache.rat.utils.ReportingSet.Options options50 = null;
        org.apache.rat.utils.ReportingSet<java.lang.String> strSet51 = strSet44.setDuplicateOption(options50);
        java.util.SortedSet<org.apache.rat.license.ILicenseFamily> iLicenseFamilySet52 = org.apache.rat.license.LicenseFamilySetFactory.emptyLicenseFamilySet();
        boolean boolean53 = strSet44.removeAll((java.util.Collection<org.apache.rat.license.ILicenseFamily>) iLicenseFamilySet52);
        reportConfiguration30.addFamilies((java.util.Collection<org.apache.rat.license.ILicenseFamily>) iLicenseFamilySet52);
        org.apache.rat.configuration.Format format55 = org.apache.rat.configuration.Format.XML;
        org.apache.rat.configuration.LicenseReader licenseReader56 = format55.licenseReader();
        java.util.SortedSet<org.apache.rat.license.ILicense> iLicenseSet57 = licenseReader56.readLicenses();
        java.lang.String[] strArray63 = new java.lang.String[] { "http://org/apache/rat/meta-data#LicenseFamilyCategory", "Datum [ name ='http://org/apache/rat/meta-data#LicenseFamilyCategory',value ='GPL1  ']", "MANIFEST.MF", "AllBuilder:", "The MIT License" };
        org.apache.rat.utils.ReportingSet<java.lang.String> strSet64 = new org.apache.rat.utils.ReportingSet<java.lang.String>();
        boolean boolean65 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strSet64, strArray63);
        boolean boolean67 = strSet64.addIfNotPresent("http://org/apache/rat/meta-data#LicenseFamilyName");
        boolean boolean69 = strSet64.addIfNotPresent("ef7a8b13-64c3-4510-bb0c-dbf208e1e73f");
        java.util.function.Function<java.lang.String, java.lang.String> strFunction70 = null;
        org.apache.rat.utils.ReportingSet<java.lang.String> strSet71 = strSet64.setMsgFormat(strFunction70);
        boolean boolean72 = strSet64.isEmpty();
        org.apache.rat.license.LicenseSetFactory licenseSetFactory73 = new org.apache.rat.license.LicenseSetFactory(iLicenseSet57, (java.util.Collection<java.lang.String>) strSet64);
        boolean boolean74 = strSet64.isEmpty();
        org.apache.rat.utils.ReportingSet<java.lang.String> strSet76 = strSet64.tailSet("MANIFEST.MF");
        java.util.Comparator<? super java.lang.String> wildcardComparator77 = strSet64.comparator();
        boolean boolean79 = strSet64.add("TMF");
        boolean boolean81 = strSet64.addIfNotPresent("Copyright Builder: s:.cvsignore e:standard o:W3C  ");
        org.apache.rat.utils.ReportingSet.Options options82 = org.apache.rat.utils.ReportingSet.Options.OVERWRITE;
        org.apache.rat.utils.ReportingSet<java.lang.String> strSet83 = strSet64.setDuplicateOption(options82);
        org.apache.rat.utils.ReportingSet<java.lang.String> strSet85 = strSet64.tailSet("eba9cdef-527a-48ca-947b-897e2e06ea31");
        org.apache.rat.license.LicenseFamilySetFactory licenseFamilySetFactory86 = new org.apache.rat.license.LicenseFamilySetFactory(iLicenseFamilySet52, (java.util.Collection<java.lang.String>) strSet64);
        reportConfiguration1.addFamilies((java.util.Collection<org.apache.rat.license.ILicenseFamily>) iLicenseFamilySet52);
        org.junit.Assert.assertTrue("'" + level4 + "' != '" + org.apache.rat.utils.Log.Level.ERROR + "'", level4.equals(org.apache.rat.utils.Log.Level.ERROR));
        org.junit.Assert.assertNotNull(iOFileFilter6);
        org.junit.Assert.assertNotNull(strArray12);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + true + "'", boolean14 == true);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + true + "'", boolean16 == true);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + true + "'", boolean18 == true);
        org.junit.Assert.assertNotNull(strSet20);
        org.junit.Assert.assertNotNull(iLicenseFamilySet22);
        org.junit.Assert.assertNull(iLicenseFamily23);
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + true + "'", boolean24 == true);
        org.junit.Assert.assertNull(filenameFilter28);
        org.junit.Assert.assertNull(filenameFilter31);
        org.junit.Assert.assertTrue("'" + boolean32 + "' != '" + true + "'", boolean32 == true);
        org.junit.Assert.assertNotNull(outputStreamIOSupplier33);
        org.junit.Assert.assertNull(inputStreamIOSupplier34);
        org.junit.Assert.assertNull(claimStatistic35);
        org.junit.Assert.assertNotNull(strArray43);
        org.junit.Assert.assertTrue("'" + boolean45 + "' != '" + true + "'", boolean45 == true);
        org.junit.Assert.assertTrue("'" + boolean47 + "' != '" + true + "'", boolean47 == true);
        org.junit.Assert.assertNotNull(strItor48);
        org.junit.Assert.assertNotNull(objArray49);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray49), "[AllBuilder:, Datum [ name ='http://org/apache/rat/meta-data#LicenseFamilyCategory',value ='GPL1  '], MANIFEST.MF, The MIT License, http://org/apache/rat/meta-data#LicenseFamilyCategory, http://org/apache/rat/meta-data#LicenseFamilyName]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray49), "[AllBuilder:, Datum [ name ='http://org/apache/rat/meta-data#LicenseFamilyCategory',value ='GPL1  '], MANIFEST.MF, The MIT License, http://org/apache/rat/meta-data#LicenseFamilyCategory, http://org/apache/rat/meta-data#LicenseFamilyName]");
        org.junit.Assert.assertNotNull(strSet51);
        org.junit.Assert.assertNotNull(iLicenseFamilySet52);
        org.junit.Assert.assertTrue("'" + boolean53 + "' != '" + false + "'", boolean53 == false);
        org.junit.Assert.assertTrue("'" + format55 + "' != '" + org.apache.rat.configuration.Format.XML + "'", format55.equals(org.apache.rat.configuration.Format.XML));
        org.junit.Assert.assertNotNull(licenseReader56);
        org.junit.Assert.assertNotNull(iLicenseSet57);
        org.junit.Assert.assertNotNull(strArray63);
        org.junit.Assert.assertTrue("'" + boolean65 + "' != '" + true + "'", boolean65 == true);
        org.junit.Assert.assertTrue("'" + boolean67 + "' != '" + true + "'", boolean67 == true);
        org.junit.Assert.assertTrue("'" + boolean69 + "' != '" + true + "'", boolean69 == true);
        org.junit.Assert.assertNotNull(strSet71);
        org.junit.Assert.assertTrue("'" + boolean72 + "' != '" + false + "'", boolean72 == false);
        org.junit.Assert.assertTrue("'" + boolean74 + "' != '" + false + "'", boolean74 == false);
        org.junit.Assert.assertNotNull(strSet76);
        org.junit.Assert.assertNull(wildcardComparator77);
        org.junit.Assert.assertTrue("'" + boolean79 + "' != '" + true + "'", boolean79 == true);
        org.junit.Assert.assertTrue("'" + boolean81 + "' != '" + true + "'", boolean81 == true);
        org.junit.Assert.assertTrue("'" + options82 + "' != '" + org.apache.rat.utils.ReportingSet.Options.OVERWRITE + "'", options82.equals(org.apache.rat.utils.ReportingSet.Options.OVERWRITE));
        org.junit.Assert.assertNotNull(strSet83);
        org.junit.Assert.assertNotNull(strSet85);
    }

    @Test
    public void test14817() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest29.test14817");
        org.apache.rat.utils.DefaultLog defaultLog0 = org.apache.rat.utils.DefaultLog.INSTANCE;
        org.apache.rat.license.ILicense.Builder builder1 = org.apache.rat.license.ILicense.builder();
        org.apache.rat.license.ILicense.Builder builder3 = builder1.setLicenseFamilyCategory("");
        org.apache.rat.analysis.matchers.CopyrightMatcher copyrightMatcher7 = new org.apache.rat.analysis.matchers.CopyrightMatcher("", "GPL1 ", "hi!");
        org.apache.rat.analysis.IHeaderMatcher.State state8 = copyrightMatcher7.finalizeState();
        org.apache.rat.license.ILicense.Builder builder9 = builder3.setMatcher((org.apache.rat.analysis.IHeaderMatcher) copyrightMatcher7);
        org.apache.rat.license.ILicense.Builder builder11 = builder9.setLicenseFamilyCategory("");
        defaultLog0.error((java.lang.Object) builder11);
        org.apache.rat.utils.Log log13 = null;
        org.apache.rat.ReportConfiguration reportConfiguration14 = new org.apache.rat.ReportConfiguration(log13);
        java.io.FilenameFilter filenameFilter15 = reportConfiguration14.getInputFileFilter();
        org.apache.rat.license.LicenseSetFactory.LicenseFilter licenseFilter16 = org.apache.rat.license.LicenseSetFactory.LicenseFilter.all;
        java.util.SortedSet<org.apache.rat.license.ILicense> iLicenseSet17 = reportConfiguration14.getLicenses(licenseFilter16);
        org.apache.rat.config.AddLicenseHeaders addLicenseHeaders18 = org.apache.rat.config.AddLicenseHeaders.FALSE;
        reportConfiguration14.setAddLicenseHeaders(addLicenseHeaders18);
        org.apache.rat.utils.Log log20 = null;
        org.apache.rat.ReportConfiguration reportConfiguration21 = new org.apache.rat.ReportConfiguration(log20);
        org.apache.rat.report.claim.ClaimStatistic claimStatistic22 = org.apache.rat.Reporter.report(reportConfiguration21);
        org.apache.rat.license.LicenseSetFactory.LicenseFilter licenseFilter23 = org.apache.rat.license.LicenseSetFactory.LicenseFilter.all;
        org.apache.rat.Reporter.listLicenses(reportConfiguration21, licenseFilter23);
        org.apache.rat.Reporter.listLicenses(reportConfiguration14, licenseFilter23);
        org.apache.rat.utils.Log log26 = null;
        org.apache.rat.ReportConfiguration reportConfiguration27 = new org.apache.rat.ReportConfiguration(log26);
        java.io.FilenameFilter filenameFilter28 = reportConfiguration27.getInputFileFilter();
        org.apache.rat.license.LicenseSetFactory.LicenseFilter licenseFilter29 = org.apache.rat.license.LicenseSetFactory.LicenseFilter.all;
        java.util.SortedSet<org.apache.rat.license.ILicense> iLicenseSet30 = reportConfiguration27.getLicenses(licenseFilter29);
        org.apache.rat.config.AddLicenseHeaders addLicenseHeaders31 = org.apache.rat.config.AddLicenseHeaders.FALSE;
        reportConfiguration27.setAddLicenseHeaders(addLicenseHeaders31);
        org.apache.rat.utils.Log log33 = null;
        org.apache.rat.ReportConfiguration reportConfiguration34 = new org.apache.rat.ReportConfiguration(log33);
        org.apache.rat.report.claim.ClaimStatistic claimStatistic35 = org.apache.rat.Reporter.report(reportConfiguration34);
        org.apache.rat.license.LicenseSetFactory.LicenseFilter licenseFilter36 = org.apache.rat.license.LicenseSetFactory.LicenseFilter.all;
        org.apache.rat.Reporter.listLicenses(reportConfiguration34, licenseFilter36);
        org.apache.rat.Reporter.listLicenses(reportConfiguration27, licenseFilter36);
        org.apache.rat.Reporter.listLicenses(reportConfiguration14, licenseFilter36);
        org.apache.rat.utils.Log log40 = null;
        org.apache.rat.ReportConfiguration reportConfiguration41 = new org.apache.rat.ReportConfiguration(log40);
        org.apache.commons.io.function.IOSupplier<java.io.OutputStream> outputStreamIOSupplier42 = reportConfiguration41.getOutput();
        reportConfiguration14.setOut(outputStreamIOSupplier42);
        org.apache.rat.utils.Log.Level level44 = org.apache.rat.utils.Log.Level.WARN;
        reportConfiguration14.logLicenseCollisions(level44);
        defaultLog0.warn((java.lang.Object) level44);
        defaultLog0.info((java.lang.Object) "TextBuilder: Datum [ name ='http:...");
        org.apache.rat.utils.Log log49 = null;
        org.apache.rat.ReportConfiguration reportConfiguration50 = new org.apache.rat.ReportConfiguration(log49);
        java.io.FilenameFilter filenameFilter51 = reportConfiguration50.getInputFileFilter();
        org.apache.rat.license.LicenseSetFactory.LicenseFilter licenseFilter52 = org.apache.rat.license.LicenseSetFactory.LicenseFilter.all;
        java.util.SortedSet<org.apache.rat.license.ILicense> iLicenseSet53 = reportConfiguration50.getLicenses(licenseFilter52);
        org.apache.rat.license.ILicenseFamily iLicenseFamily54 = null;
        reportConfiguration50.addFamily(iLicenseFamily54);
        reportConfiguration50.setCopyrightMessage("hi!");
        defaultLog0.error((java.lang.Object) reportConfiguration50);
        reportConfiguration50.setStyleReport(false);
        org.apache.rat.license.ILicenseFamilyBuilder iLicenseFamilyBuilder61 = new org.apache.rat.license.ILicenseFamilyBuilder();
        org.apache.rat.license.ILicenseFamily.Builder builder63 = iLicenseFamilyBuilder61.setLicenseFamilyCategory("Modified BSD License");
        org.apache.rat.license.ILicenseFamily.Builder builder65 = iLicenseFamilyBuilder61.setLicenseFamilyName("AllBuilder:\nCopyright Builder: s:null e:.cvsignore o:3c840dc2-bef0-42b5-b26c-35a568d53a24");
        org.apache.rat.license.ILicenseFamily iLicenseFamily66 = builder65.build();
        reportConfiguration50.addFamily(iLicenseFamily66);
        org.junit.Assert.assertNotNull(defaultLog0);
        org.junit.Assert.assertNotNull(builder1);
        org.junit.Assert.assertNotNull(builder3);
        org.junit.Assert.assertTrue("'" + state8 + "' != '" + org.apache.rat.analysis.IHeaderMatcher.State.f + "'", state8.equals(org.apache.rat.analysis.IHeaderMatcher.State.f));
        org.junit.Assert.assertNotNull(builder9);
        org.junit.Assert.assertNotNull(builder11);
        org.junit.Assert.assertNull(filenameFilter15);
        org.junit.Assert.assertTrue("'" + licenseFilter16 + "' != '" + org.apache.rat.license.LicenseSetFactory.LicenseFilter.all + "'", licenseFilter16.equals(org.apache.rat.license.LicenseSetFactory.LicenseFilter.all));
        org.junit.Assert.assertNotNull(iLicenseSet17);
        org.junit.Assert.assertTrue("'" + addLicenseHeaders18 + "' != '" + org.apache.rat.config.AddLicenseHeaders.FALSE + "'", addLicenseHeaders18.equals(org.apache.rat.config.AddLicenseHeaders.FALSE));
        org.junit.Assert.assertNull(claimStatistic22);
        org.junit.Assert.assertTrue("'" + licenseFilter23 + "' != '" + org.apache.rat.license.LicenseSetFactory.LicenseFilter.all + "'", licenseFilter23.equals(org.apache.rat.license.LicenseSetFactory.LicenseFilter.all));
        org.junit.Assert.assertNull(filenameFilter28);
        org.junit.Assert.assertTrue("'" + licenseFilter29 + "' != '" + org.apache.rat.license.LicenseSetFactory.LicenseFilter.all + "'", licenseFilter29.equals(org.apache.rat.license.LicenseSetFactory.LicenseFilter.all));
        org.junit.Assert.assertNotNull(iLicenseSet30);
        org.junit.Assert.assertTrue("'" + addLicenseHeaders31 + "' != '" + org.apache.rat.config.AddLicenseHeaders.FALSE + "'", addLicenseHeaders31.equals(org.apache.rat.config.AddLicenseHeaders.FALSE));
        org.junit.Assert.assertNull(claimStatistic35);
        org.junit.Assert.assertTrue("'" + licenseFilter36 + "' != '" + org.apache.rat.license.LicenseSetFactory.LicenseFilter.all + "'", licenseFilter36.equals(org.apache.rat.license.LicenseSetFactory.LicenseFilter.all));
        org.junit.Assert.assertNotNull(outputStreamIOSupplier42);
        org.junit.Assert.assertTrue("'" + level44 + "' != '" + org.apache.rat.utils.Log.Level.WARN + "'", level44.equals(org.apache.rat.utils.Log.Level.WARN));
        org.junit.Assert.assertNull(filenameFilter51);
        org.junit.Assert.assertTrue("'" + licenseFilter52 + "' != '" + org.apache.rat.license.LicenseSetFactory.LicenseFilter.all + "'", licenseFilter52.equals(org.apache.rat.license.LicenseSetFactory.LicenseFilter.all));
        org.junit.Assert.assertNotNull(iLicenseSet53);
        org.junit.Assert.assertNotNull(builder63);
        org.junit.Assert.assertNotNull(builder65);
        org.junit.Assert.assertNotNull(iLicenseFamily66);
    }

    @Test
    public void test14818() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest29.test14818");
        org.apache.rat.configuration.builders.MatcherRefBuilder matcherRefBuilder0 = org.apache.rat.analysis.IHeaderMatcher.Builder.matcherRef();
        org.apache.rat.configuration.builders.AbstractBuilder abstractBuilder2 = matcherRefBuilder0.setId(".bzrignore");
        org.apache.rat.configuration.builders.MatcherRefBuilder matcherRefBuilder4 = matcherRefBuilder0.setRefId("736352aa-a974-4b58-b2f1-4caa6178920b");
        java.lang.String str5 = matcherRefBuilder0.toString();
        org.junit.Assert.assertNotNull(matcherRefBuilder0);
        org.junit.Assert.assertNotNull(abstractBuilder2);
        org.junit.Assert.assertNotNull(matcherRefBuilder4);
        org.junit.Assert.assertEquals("'" + str5 + "' != '" + "MathcerRefBuilder: 736352aa-a974-4b58-b2f1-4caa6178920b" + "'", str5, "MathcerRefBuilder: 736352aa-a974-4b58-b2f1-4caa6178920b");
    }

    @Test
    public void test14819() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest29.test14819");
        org.apache.rat.utils.Log log0 = null;
        org.apache.rat.ReportConfiguration reportConfiguration1 = new org.apache.rat.ReportConfiguration(log0);
        reportConfiguration1.addApprovedLicenseCategory(".cvsignore");
        org.apache.rat.utils.Log.Level level4 = org.apache.rat.utils.Log.Level.ERROR;
        reportConfiguration1.logLicenseCollisions(level4);
        reportConfiguration1.addApprovedLicenseCategory("73fbee1b-7ed9-442a-968e-b2b525ca688f");
        org.apache.rat.utils.Log log8 = null;
        org.apache.rat.ReportConfiguration reportConfiguration9 = new org.apache.rat.ReportConfiguration(log8);
        java.io.FilenameFilter filenameFilter10 = reportConfiguration9.getInputFileFilter();
        org.apache.rat.license.LicenseSetFactory.LicenseFilter licenseFilter11 = org.apache.rat.license.LicenseSetFactory.LicenseFilter.all;
        java.util.SortedSet<org.apache.rat.license.ILicense> iLicenseSet12 = reportConfiguration9.getLicenses(licenseFilter11);
        org.apache.rat.config.AddLicenseHeaders addLicenseHeaders13 = org.apache.rat.config.AddLicenseHeaders.FALSE;
        reportConfiguration9.setAddLicenseHeaders(addLicenseHeaders13);
        org.apache.rat.utils.Log log15 = null;
        org.apache.rat.ReportConfiguration reportConfiguration16 = new org.apache.rat.ReportConfiguration(log15);
        org.apache.rat.report.claim.ClaimStatistic claimStatistic17 = org.apache.rat.Reporter.report(reportConfiguration16);
        org.apache.rat.license.LicenseSetFactory.LicenseFilter licenseFilter18 = org.apache.rat.license.LicenseSetFactory.LicenseFilter.all;
        org.apache.rat.Reporter.listLicenses(reportConfiguration16, licenseFilter18);
        org.apache.rat.Reporter.listLicenses(reportConfiguration9, licenseFilter18);
        org.apache.rat.utils.Log log21 = null;
        org.apache.rat.ReportConfiguration reportConfiguration22 = new org.apache.rat.ReportConfiguration(log21);
        java.io.FilenameFilter filenameFilter23 = reportConfiguration22.getInputFileFilter();
        org.apache.rat.license.LicenseSetFactory.LicenseFilter licenseFilter24 = org.apache.rat.license.LicenseSetFactory.LicenseFilter.all;
        java.util.SortedSet<org.apache.rat.license.ILicense> iLicenseSet25 = reportConfiguration22.getLicenses(licenseFilter24);
        org.apache.rat.config.AddLicenseHeaders addLicenseHeaders26 = org.apache.rat.config.AddLicenseHeaders.FALSE;
        reportConfiguration22.setAddLicenseHeaders(addLicenseHeaders26);
        org.apache.rat.utils.Log log28 = null;
        org.apache.rat.ReportConfiguration reportConfiguration29 = new org.apache.rat.ReportConfiguration(log28);
        org.apache.rat.report.claim.ClaimStatistic claimStatistic30 = org.apache.rat.Reporter.report(reportConfiguration29);
        org.apache.rat.license.LicenseSetFactory.LicenseFilter licenseFilter31 = org.apache.rat.license.LicenseSetFactory.LicenseFilter.all;
        org.apache.rat.Reporter.listLicenses(reportConfiguration29, licenseFilter31);
        org.apache.rat.Reporter.listLicenses(reportConfiguration22, licenseFilter31);
        org.apache.rat.Reporter.listLicenses(reportConfiguration9, licenseFilter31);
        java.io.FilenameFilter filenameFilter35 = reportConfiguration9.getInputFileFilter();
        reportConfiguration9.setStyleReport(false);
        org.apache.rat.report.IReportable iReportable38 = null;
        reportConfiguration9.setReportable(iReportable38);
        org.apache.rat.Defaults.Builder builder41 = org.apache.rat.Defaults.builder();
        org.apache.rat.Defaults defaults42 = builder41.build();
        org.apache.rat.utils.Log log43 = null;
        org.apache.rat.ReportConfiguration reportConfiguration44 = new org.apache.rat.ReportConfiguration(log43);
        java.io.FilenameFilter filenameFilter45 = reportConfiguration44.getInputFileFilter();
        org.apache.rat.license.LicenseSetFactory.LicenseFilter licenseFilter46 = org.apache.rat.license.LicenseSetFactory.LicenseFilter.all;
        java.util.SortedSet<org.apache.rat.license.ILicense> iLicenseSet47 = reportConfiguration44.getLicenses(licenseFilter46);
        org.apache.rat.config.AddLicenseHeaders addLicenseHeaders48 = org.apache.rat.config.AddLicenseHeaders.FALSE;
        reportConfiguration44.setAddLicenseHeaders(addLicenseHeaders48);
        org.apache.rat.utils.Log log50 = null;
        org.apache.rat.ReportConfiguration reportConfiguration51 = new org.apache.rat.ReportConfiguration(log50);
        org.apache.rat.report.claim.ClaimStatistic claimStatistic52 = org.apache.rat.Reporter.report(reportConfiguration51);
        org.apache.rat.license.LicenseSetFactory.LicenseFilter licenseFilter53 = org.apache.rat.license.LicenseSetFactory.LicenseFilter.all;
        org.apache.rat.Reporter.listLicenses(reportConfiguration51, licenseFilter53);
        org.apache.rat.Reporter.listLicenses(reportConfiguration44, licenseFilter53);
        org.apache.rat.utils.Log log56 = null;
        org.apache.rat.ReportConfiguration reportConfiguration57 = new org.apache.rat.ReportConfiguration(log56);
        java.io.FilenameFilter filenameFilter58 = reportConfiguration57.getInputFileFilter();
        org.apache.rat.license.LicenseSetFactory.LicenseFilter licenseFilter59 = org.apache.rat.license.LicenseSetFactory.LicenseFilter.all;
        java.util.SortedSet<org.apache.rat.license.ILicense> iLicenseSet60 = reportConfiguration57.getLicenses(licenseFilter59);
        org.apache.rat.config.AddLicenseHeaders addLicenseHeaders61 = org.apache.rat.config.AddLicenseHeaders.FALSE;
        reportConfiguration57.setAddLicenseHeaders(addLicenseHeaders61);
        org.apache.rat.utils.Log log63 = null;
        org.apache.rat.ReportConfiguration reportConfiguration64 = new org.apache.rat.ReportConfiguration(log63);
        org.apache.rat.report.claim.ClaimStatistic claimStatistic65 = org.apache.rat.Reporter.report(reportConfiguration64);
        org.apache.rat.license.LicenseSetFactory.LicenseFilter licenseFilter66 = org.apache.rat.license.LicenseSetFactory.LicenseFilter.all;
        org.apache.rat.Reporter.listLicenses(reportConfiguration64, licenseFilter66);
        org.apache.rat.Reporter.listLicenses(reportConfiguration57, licenseFilter66);
        java.util.SortedSet<org.apache.rat.license.ILicenseFamily> iLicenseFamilySet69 = reportConfiguration44.getLicenseFamilies(licenseFilter66);
        java.util.SortedSet<org.apache.rat.license.ILicense> iLicenseSet70 = defaults42.getLicenses(licenseFilter66);
        org.apache.rat.utils.ReportingSet<org.apache.rat.license.ILicense> iLicenseSet71 = new org.apache.rat.utils.ReportingSet<org.apache.rat.license.ILicense>(iLicenseSet70);
        org.apache.rat.license.ILicense iLicense72 = org.apache.rat.license.LicenseSetFactory.search("TMF", iLicenseSet70);
        reportConfiguration9.addLicense(iLicense72);
        java.lang.String str74 = iLicense72.derivedFrom();
        reportConfiguration1.addLicense(iLicense72);
        java.lang.String str76 = iLicense72.getNotes();
        org.apache.rat.license.ILicenseFamily iLicenseFamily77 = iLicense72.getLicenseFamily();
        java.lang.String str78 = iLicense72.derivedFrom();
        org.apache.rat.license.ILicenseFamily iLicenseFamily79 = iLicense72.getLicenseFamily();
        java.lang.String str80 = iLicense72.getNotes();
        java.lang.String str81 = iLicense72.getNotes();
        org.junit.Assert.assertTrue("'" + level4 + "' != '" + org.apache.rat.utils.Log.Level.ERROR + "'", level4.equals(org.apache.rat.utils.Log.Level.ERROR));
        org.junit.Assert.assertNull(filenameFilter10);
        org.junit.Assert.assertTrue("'" + licenseFilter11 + "' != '" + org.apache.rat.license.LicenseSetFactory.LicenseFilter.all + "'", licenseFilter11.equals(org.apache.rat.license.LicenseSetFactory.LicenseFilter.all));
        org.junit.Assert.assertNotNull(iLicenseSet12);
        org.junit.Assert.assertTrue("'" + addLicenseHeaders13 + "' != '" + org.apache.rat.config.AddLicenseHeaders.FALSE + "'", addLicenseHeaders13.equals(org.apache.rat.config.AddLicenseHeaders.FALSE));
        org.junit.Assert.assertNull(claimStatistic17);
        org.junit.Assert.assertTrue("'" + licenseFilter18 + "' != '" + org.apache.rat.license.LicenseSetFactory.LicenseFilter.all + "'", licenseFilter18.equals(org.apache.rat.license.LicenseSetFactory.LicenseFilter.all));
        org.junit.Assert.assertNull(filenameFilter23);
        org.junit.Assert.assertTrue("'" + licenseFilter24 + "' != '" + org.apache.rat.license.LicenseSetFactory.LicenseFilter.all + "'", licenseFilter24.equals(org.apache.rat.license.LicenseSetFactory.LicenseFilter.all));
        org.junit.Assert.assertNotNull(iLicenseSet25);
        org.junit.Assert.assertTrue("'" + addLicenseHeaders26 + "' != '" + org.apache.rat.config.AddLicenseHeaders.FALSE + "'", addLicenseHeaders26.equals(org.apache.rat.config.AddLicenseHeaders.FALSE));
        org.junit.Assert.assertNull(claimStatistic30);
        org.junit.Assert.assertTrue("'" + licenseFilter31 + "' != '" + org.apache.rat.license.LicenseSetFactory.LicenseFilter.all + "'", licenseFilter31.equals(org.apache.rat.license.LicenseSetFactory.LicenseFilter.all));
        org.junit.Assert.assertNull(filenameFilter35);
        org.junit.Assert.assertNotNull(builder41);
        org.junit.Assert.assertNotNull(defaults42);
        org.junit.Assert.assertNull(filenameFilter45);
        org.junit.Assert.assertTrue("'" + licenseFilter46 + "' != '" + org.apache.rat.license.LicenseSetFactory.LicenseFilter.all + "'", licenseFilter46.equals(org.apache.rat.license.LicenseSetFactory.LicenseFilter.all));
        org.junit.Assert.assertNotNull(iLicenseSet47);
        org.junit.Assert.assertTrue("'" + addLicenseHeaders48 + "' != '" + org.apache.rat.config.AddLicenseHeaders.FALSE + "'", addLicenseHeaders48.equals(org.apache.rat.config.AddLicenseHeaders.FALSE));
        org.junit.Assert.assertNull(claimStatistic52);
        org.junit.Assert.assertTrue("'" + licenseFilter53 + "' != '" + org.apache.rat.license.LicenseSetFactory.LicenseFilter.all + "'", licenseFilter53.equals(org.apache.rat.license.LicenseSetFactory.LicenseFilter.all));
        org.junit.Assert.assertNull(filenameFilter58);
        org.junit.Assert.assertTrue("'" + licenseFilter59 + "' != '" + org.apache.rat.license.LicenseSetFactory.LicenseFilter.all + "'", licenseFilter59.equals(org.apache.rat.license.LicenseSetFactory.LicenseFilter.all));
        org.junit.Assert.assertNotNull(iLicenseSet60);
        org.junit.Assert.assertTrue("'" + addLicenseHeaders61 + "' != '" + org.apache.rat.config.AddLicenseHeaders.FALSE + "'", addLicenseHeaders61.equals(org.apache.rat.config.AddLicenseHeaders.FALSE));
        org.junit.Assert.assertNull(claimStatistic65);
        org.junit.Assert.assertTrue("'" + licenseFilter66 + "' != '" + org.apache.rat.license.LicenseSetFactory.LicenseFilter.all + "'", licenseFilter66.equals(org.apache.rat.license.LicenseSetFactory.LicenseFilter.all));
        org.junit.Assert.assertNotNull(iLicenseFamilySet69);
        org.junit.Assert.assertNotNull(iLicenseSet70);
        org.junit.Assert.assertNotNull(iLicense72);
        org.junit.Assert.assertEquals("'" + str74 + "' != '" + "BSD-3" + "'", str74, "BSD-3");
        org.junit.Assert.assertNull(str76);
        org.junit.Assert.assertNotNull(iLicenseFamily77);
        org.junit.Assert.assertEquals("'" + str78 + "' != '" + "BSD-3" + "'", str78, "BSD-3");
        org.junit.Assert.assertNotNull(iLicenseFamily79);
        org.junit.Assert.assertNull(str80);
        org.junit.Assert.assertNull(str81);
    }

    @Test
    public void test14820() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest29.test14820");
        org.apache.rat.utils.DefaultLog defaultLog0 = org.apache.rat.utils.DefaultLog.INSTANCE;
        org.apache.rat.license.ILicense.Builder builder1 = org.apache.rat.license.ILicense.builder();
        org.apache.rat.license.ILicense.Builder builder3 = builder1.setLicenseFamilyCategory("");
        org.apache.rat.analysis.matchers.CopyrightMatcher copyrightMatcher7 = new org.apache.rat.analysis.matchers.CopyrightMatcher("", "GPL1 ", "hi!");
        org.apache.rat.analysis.IHeaderMatcher.State state8 = copyrightMatcher7.finalizeState();
        org.apache.rat.license.ILicense.Builder builder9 = builder3.setMatcher((org.apache.rat.analysis.IHeaderMatcher) copyrightMatcher7);
        org.apache.rat.license.ILicense.Builder builder11 = builder9.setLicenseFamilyCategory("");
        defaultLog0.error((java.lang.Object) builder11);
        org.apache.rat.ReportConfiguration reportConfiguration13 = new org.apache.rat.ReportConfiguration((org.apache.rat.utils.Log) defaultLog0);
        org.apache.rat.Defaults.Builder builder14 = org.apache.rat.Defaults.builder();
        org.apache.rat.Defaults defaults15 = builder14.build();
        org.apache.rat.utils.Log log16 = null;
        org.apache.rat.ReportConfiguration reportConfiguration17 = new org.apache.rat.ReportConfiguration(log16);
        java.io.FilenameFilter filenameFilter18 = reportConfiguration17.getInputFileFilter();
        org.apache.rat.license.LicenseSetFactory.LicenseFilter licenseFilter19 = org.apache.rat.license.LicenseSetFactory.LicenseFilter.all;
        java.util.SortedSet<org.apache.rat.license.ILicense> iLicenseSet20 = reportConfiguration17.getLicenses(licenseFilter19);
        org.apache.rat.config.AddLicenseHeaders addLicenseHeaders21 = org.apache.rat.config.AddLicenseHeaders.FALSE;
        reportConfiguration17.setAddLicenseHeaders(addLicenseHeaders21);
        org.apache.rat.utils.Log log23 = null;
        org.apache.rat.ReportConfiguration reportConfiguration24 = new org.apache.rat.ReportConfiguration(log23);
        org.apache.rat.report.claim.ClaimStatistic claimStatistic25 = org.apache.rat.Reporter.report(reportConfiguration24);
        org.apache.rat.license.LicenseSetFactory.LicenseFilter licenseFilter26 = org.apache.rat.license.LicenseSetFactory.LicenseFilter.all;
        org.apache.rat.Reporter.listLicenses(reportConfiguration24, licenseFilter26);
        org.apache.rat.Reporter.listLicenses(reportConfiguration17, licenseFilter26);
        org.apache.rat.utils.Log log29 = null;
        org.apache.rat.ReportConfiguration reportConfiguration30 = new org.apache.rat.ReportConfiguration(log29);
        java.io.FilenameFilter filenameFilter31 = reportConfiguration30.getInputFileFilter();
        org.apache.rat.license.LicenseSetFactory.LicenseFilter licenseFilter32 = org.apache.rat.license.LicenseSetFactory.LicenseFilter.all;
        java.util.SortedSet<org.apache.rat.license.ILicense> iLicenseSet33 = reportConfiguration30.getLicenses(licenseFilter32);
        org.apache.rat.config.AddLicenseHeaders addLicenseHeaders34 = org.apache.rat.config.AddLicenseHeaders.FALSE;
        reportConfiguration30.setAddLicenseHeaders(addLicenseHeaders34);
        org.apache.rat.utils.Log log36 = null;
        org.apache.rat.ReportConfiguration reportConfiguration37 = new org.apache.rat.ReportConfiguration(log36);
        org.apache.rat.report.claim.ClaimStatistic claimStatistic38 = org.apache.rat.Reporter.report(reportConfiguration37);
        org.apache.rat.license.LicenseSetFactory.LicenseFilter licenseFilter39 = org.apache.rat.license.LicenseSetFactory.LicenseFilter.all;
        org.apache.rat.Reporter.listLicenses(reportConfiguration37, licenseFilter39);
        org.apache.rat.Reporter.listLicenses(reportConfiguration30, licenseFilter39);
        java.util.SortedSet<org.apache.rat.license.ILicenseFamily> iLicenseFamilySet42 = reportConfiguration17.getLicenseFamilies(licenseFilter39);
        java.util.SortedSet<org.apache.rat.license.ILicense> iLicenseSet43 = defaults15.getLicenses(licenseFilter39);
        org.apache.rat.utils.ReportingSet<org.apache.rat.license.ILicense> iLicenseSet44 = new org.apache.rat.utils.ReportingSet<org.apache.rat.license.ILicense>(iLicenseSet43);
        org.apache.rat.document.IDocumentAnalyser iDocumentAnalyser45 = org.apache.rat.analysis.DefaultAnalyserFactory.createDefaultAnalyser((org.apache.rat.utils.Log) defaultLog0, (java.util.Collection<org.apache.rat.license.ILicense>) iLicenseSet43);
        org.apache.rat.document.IDocumentAnalyser[] iDocumentAnalyserArray46 = new org.apache.rat.document.IDocumentAnalyser[] { iDocumentAnalyser45 };
        org.apache.rat.document.impl.util.DocumentAnalyserMultiplexer documentAnalyserMultiplexer47 = new org.apache.rat.document.impl.util.DocumentAnalyserMultiplexer(iDocumentAnalyserArray46);
        org.apache.rat.document.impl.util.DocumentAnalyserMultiplexer documentAnalyserMultiplexer48 = new org.apache.rat.document.impl.util.DocumentAnalyserMultiplexer(iDocumentAnalyserArray46);
        org.apache.rat.document.impl.util.DocumentAnalyserMultiplexer documentAnalyserMultiplexer49 = new org.apache.rat.document.impl.util.DocumentAnalyserMultiplexer(iDocumentAnalyserArray46);
        org.apache.rat.document.impl.util.DocumentAnalyserMultiplexer documentAnalyserMultiplexer50 = new org.apache.rat.document.impl.util.DocumentAnalyserMultiplexer(iDocumentAnalyserArray46);
        org.apache.rat.document.impl.util.DocumentAnalyserMultiplexer documentAnalyserMultiplexer51 = new org.apache.rat.document.impl.util.DocumentAnalyserMultiplexer(iDocumentAnalyserArray46);
        org.apache.rat.document.impl.util.DocumentAnalyserMultiplexer documentAnalyserMultiplexer52 = new org.apache.rat.document.impl.util.DocumentAnalyserMultiplexer(iDocumentAnalyserArray46);
        org.apache.rat.api.Document document53 = null;
        // The following exception was thrown during execution in test generation
        try {
            documentAnalyserMultiplexer52.analyse(document53);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(defaultLog0);
        org.junit.Assert.assertNotNull(builder1);
        org.junit.Assert.assertNotNull(builder3);
        org.junit.Assert.assertTrue("'" + state8 + "' != '" + org.apache.rat.analysis.IHeaderMatcher.State.f + "'", state8.equals(org.apache.rat.analysis.IHeaderMatcher.State.f));
        org.junit.Assert.assertNotNull(builder9);
        org.junit.Assert.assertNotNull(builder11);
        org.junit.Assert.assertNotNull(builder14);
        org.junit.Assert.assertNotNull(defaults15);
        org.junit.Assert.assertNull(filenameFilter18);
        org.junit.Assert.assertTrue("'" + licenseFilter19 + "' != '" + org.apache.rat.license.LicenseSetFactory.LicenseFilter.all + "'", licenseFilter19.equals(org.apache.rat.license.LicenseSetFactory.LicenseFilter.all));
        org.junit.Assert.assertNotNull(iLicenseSet20);
        org.junit.Assert.assertTrue("'" + addLicenseHeaders21 + "' != '" + org.apache.rat.config.AddLicenseHeaders.FALSE + "'", addLicenseHeaders21.equals(org.apache.rat.config.AddLicenseHeaders.FALSE));
        org.junit.Assert.assertNull(claimStatistic25);
        org.junit.Assert.assertTrue("'" + licenseFilter26 + "' != '" + org.apache.rat.license.LicenseSetFactory.LicenseFilter.all + "'", licenseFilter26.equals(org.apache.rat.license.LicenseSetFactory.LicenseFilter.all));
        org.junit.Assert.assertNull(filenameFilter31);
        org.junit.Assert.assertTrue("'" + licenseFilter32 + "' != '" + org.apache.rat.license.LicenseSetFactory.LicenseFilter.all + "'", licenseFilter32.equals(org.apache.rat.license.LicenseSetFactory.LicenseFilter.all));
        org.junit.Assert.assertNotNull(iLicenseSet33);
        org.junit.Assert.assertTrue("'" + addLicenseHeaders34 + "' != '" + org.apache.rat.config.AddLicenseHeaders.FALSE + "'", addLicenseHeaders34.equals(org.apache.rat.config.AddLicenseHeaders.FALSE));
        org.junit.Assert.assertNull(claimStatistic38);
        org.junit.Assert.assertTrue("'" + licenseFilter39 + "' != '" + org.apache.rat.license.LicenseSetFactory.LicenseFilter.all + "'", licenseFilter39.equals(org.apache.rat.license.LicenseSetFactory.LicenseFilter.all));
        org.junit.Assert.assertNotNull(iLicenseFamilySet42);
        org.junit.Assert.assertNotNull(iLicenseSet43);
        org.junit.Assert.assertNotNull(iDocumentAnalyser45);
        org.junit.Assert.assertNotNull(iDocumentAnalyserArray46);
    }

    @Test
    public void test14821() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest29.test14821");
        org.apache.rat.license.ILicenseFamilyBuilder iLicenseFamilyBuilder0 = new org.apache.rat.license.ILicenseFamilyBuilder();
        java.lang.String str1 = iLicenseFamilyBuilder0.getCategory();
        org.apache.rat.license.ILicenseFamily.Builder builder3 = iLicenseFamilyBuilder0.setLicenseFamilyCategory("AL   ");
        org.apache.rat.license.ILicenseFamily.Builder builder5 = iLicenseFamilyBuilder0.setLicenseFamilyCategory("MIT  ");
        org.apache.rat.license.ILicenseFamily.Builder builder7 = iLicenseFamilyBuilder0.setLicenseFamilyName("4a00cf7d-fe76-423e-917e-b03bbae6b8a5");
        java.lang.String str8 = iLicenseFamilyBuilder0.getCategory();
        org.apache.rat.license.ILicenseFamily iLicenseFamily9 = iLicenseFamilyBuilder0.build();
        org.apache.rat.license.ILicenseFamily.Builder builder11 = iLicenseFamilyBuilder0.setLicenseFamilyCategory("7af67e73-76a3-4497-ab9c-98701437b5de");
        org.apache.rat.license.ILicenseFamily.Builder builder13 = iLicenseFamilyBuilder0.setLicenseFamilyCategory("SpdxBuilder: t true");
        org.junit.Assert.assertNull(str1);
        org.junit.Assert.assertNotNull(builder3);
        org.junit.Assert.assertNotNull(builder5);
        org.junit.Assert.assertNotNull(builder7);
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "MIT  " + "'", str8, "MIT  ");
        org.junit.Assert.assertNotNull(iLicenseFamily9);
        org.junit.Assert.assertNotNull(builder11);
        org.junit.Assert.assertNotNull(builder13);
    }

    @Test
    public void test14822() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest29.test14822");
        org.apache.rat.Defaults.Builder builder0 = org.apache.rat.Defaults.builder();
        org.apache.rat.Defaults.Builder builder2 = builder0.add("META-DATA#LICENSEFAMILYNAME");
        org.apache.rat.Defaults.Builder builder4 = builder0.remove("Copyright Builder: s:null e:null o:null");
        org.apache.rat.Defaults.Builder builder5 = builder4.noDefault();
        org.apache.rat.Defaults.Builder builder7 = builder4.remove("http://org/apache/rat/meta-data#HeaderCategory");
        org.apache.rat.Defaults.Builder builder9 = builder7.add("ab913e1f-22c2-4747-9d4b-1a549cb028f0");
        org.apache.rat.Defaults.Builder builder10 = builder9.noDefault();
        org.junit.Assert.assertNotNull(builder0);
        org.junit.Assert.assertNotNull(builder2);
        org.junit.Assert.assertNotNull(builder4);
        org.junit.Assert.assertNotNull(builder5);
        org.junit.Assert.assertNotNull(builder7);
        org.junit.Assert.assertNotNull(builder9);
        org.junit.Assert.assertNotNull(builder10);
    }

    @Test
    public void test14823() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest29.test14823");
        java.io.File file0 = null;
        org.apache.rat.license.ILicense[] iLicenseArray1 = new org.apache.rat.license.ILicense[] {};
        java.util.TreeSet<org.apache.rat.license.ILicense> iLicenseSet2 = new java.util.TreeSet<org.apache.rat.license.ILicense>();
        boolean boolean3 = java.util.Collections.addAll((java.util.Collection<org.apache.rat.license.ILicense>) iLicenseSet2, iLicenseArray1);
        java.lang.String[] strArray16 = new java.lang.String[] { "GPL2 ", "GPL1 ", "notice", "http://org/apache/rat/meta-data#LicenseFamilyName", "notice", "GPL2 ", "http://org/apache/rat/meta-data#LicenseFamilyName", "", "GPL2 ", "", "GPL1 ", "hi!" };
        java.util.ArrayList<java.lang.String> strList17 = new java.util.ArrayList<java.lang.String>();
        boolean boolean18 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strList17, strArray16);
        org.apache.rat.license.LicenseSetFactory licenseSetFactory19 = new org.apache.rat.license.LicenseSetFactory((java.util.SortedSet<org.apache.rat.license.ILicense>) iLicenseSet2, (java.util.Collection<java.lang.String>) strList17);
        java.io.FilenameFilter filenameFilter20 = org.apache.rat.Report.parseExclusions((java.util.List<java.lang.String>) strList17);
        java.io.FilenameFilter filenameFilter21 = org.apache.rat.Report.parseExclusions((java.util.List<java.lang.String>) strList17);
        org.apache.rat.utils.Log log22 = null;
        org.apache.rat.ReportConfiguration reportConfiguration23 = new org.apache.rat.ReportConfiguration(log22);
        java.io.FilenameFilter filenameFilter24 = reportConfiguration23.getInputFileFilter();
        org.apache.rat.license.LicenseSetFactory.LicenseFilter licenseFilter25 = org.apache.rat.license.LicenseSetFactory.LicenseFilter.all;
        java.util.SortedSet<org.apache.rat.license.ILicense> iLicenseSet26 = reportConfiguration23.getLicenses(licenseFilter25);
        org.apache.rat.config.AddLicenseHeaders addLicenseHeaders27 = org.apache.rat.config.AddLicenseHeaders.FALSE;
        reportConfiguration23.setAddLicenseHeaders(addLicenseHeaders27);
        org.apache.rat.utils.Log log29 = null;
        org.apache.rat.ReportConfiguration reportConfiguration30 = new org.apache.rat.ReportConfiguration(log29);
        org.apache.rat.report.claim.ClaimStatistic claimStatistic31 = org.apache.rat.Reporter.report(reportConfiguration30);
        org.apache.rat.license.LicenseSetFactory.LicenseFilter licenseFilter32 = org.apache.rat.license.LicenseSetFactory.LicenseFilter.all;
        org.apache.rat.Reporter.listLicenses(reportConfiguration30, licenseFilter32);
        org.apache.rat.Reporter.listLicenses(reportConfiguration23, licenseFilter32);
        org.apache.rat.utils.Log log35 = null;
        org.apache.rat.ReportConfiguration reportConfiguration36 = new org.apache.rat.ReportConfiguration(log35);
        java.io.FilenameFilter filenameFilter37 = reportConfiguration36.getInputFileFilter();
        org.apache.rat.license.LicenseSetFactory.LicenseFilter licenseFilter38 = org.apache.rat.license.LicenseSetFactory.LicenseFilter.all;
        java.util.SortedSet<org.apache.rat.license.ILicense> iLicenseSet39 = reportConfiguration36.getLicenses(licenseFilter38);
        org.apache.rat.config.AddLicenseHeaders addLicenseHeaders40 = org.apache.rat.config.AddLicenseHeaders.FALSE;
        reportConfiguration36.setAddLicenseHeaders(addLicenseHeaders40);
        org.apache.rat.utils.Log log42 = null;
        org.apache.rat.ReportConfiguration reportConfiguration43 = new org.apache.rat.ReportConfiguration(log42);
        org.apache.rat.report.claim.ClaimStatistic claimStatistic44 = org.apache.rat.Reporter.report(reportConfiguration43);
        org.apache.rat.license.LicenseSetFactory.LicenseFilter licenseFilter45 = org.apache.rat.license.LicenseSetFactory.LicenseFilter.all;
        org.apache.rat.Reporter.listLicenses(reportConfiguration43, licenseFilter45);
        org.apache.rat.Reporter.listLicenses(reportConfiguration36, licenseFilter45);
        org.apache.rat.Reporter.listLicenses(reportConfiguration23, licenseFilter45);
        org.apache.rat.utils.Log log49 = null;
        org.apache.rat.ReportConfiguration reportConfiguration50 = new org.apache.rat.ReportConfiguration(log49);
        org.apache.commons.io.function.IOSupplier<java.io.OutputStream> outputStreamIOSupplier51 = reportConfiguration50.getOutput();
        reportConfiguration23.setOut(outputStreamIOSupplier51);
        org.apache.rat.utils.Log.Level level53 = org.apache.rat.utils.Log.Level.WARN;
        reportConfiguration23.logLicenseCollisions(level53);
        org.apache.commons.io.filefilter.IOFileFilter iOFileFilter55 = reportConfiguration23.getDirectoryFilter();
        java.nio.file.Path path56 = null;
        boolean boolean57 = iOFileFilter55.matches(path56);
        org.apache.rat.utils.Log log58 = null;
        org.apache.rat.ReportConfiguration reportConfiguration59 = new org.apache.rat.ReportConfiguration(log58);
        java.io.FilenameFilter filenameFilter60 = reportConfiguration59.getInputFileFilter();
        org.apache.rat.license.LicenseSetFactory.LicenseFilter licenseFilter61 = org.apache.rat.license.LicenseSetFactory.LicenseFilter.all;
        java.util.SortedSet<org.apache.rat.license.ILicense> iLicenseSet62 = reportConfiguration59.getLicenses(licenseFilter61);
        org.apache.rat.config.AddLicenseHeaders addLicenseHeaders63 = org.apache.rat.config.AddLicenseHeaders.FALSE;
        reportConfiguration59.setAddLicenseHeaders(addLicenseHeaders63);
        org.apache.rat.utils.Log log65 = null;
        org.apache.rat.ReportConfiguration reportConfiguration66 = new org.apache.rat.ReportConfiguration(log65);
        org.apache.rat.report.claim.ClaimStatistic claimStatistic67 = org.apache.rat.Reporter.report(reportConfiguration66);
        org.apache.rat.license.LicenseSetFactory.LicenseFilter licenseFilter68 = org.apache.rat.license.LicenseSetFactory.LicenseFilter.all;
        org.apache.rat.Reporter.listLicenses(reportConfiguration66, licenseFilter68);
        org.apache.rat.Reporter.listLicenses(reportConfiguration59, licenseFilter68);
        org.apache.rat.utils.Log log71 = null;
        org.apache.rat.ReportConfiguration reportConfiguration72 = new org.apache.rat.ReportConfiguration(log71);
        java.io.FilenameFilter filenameFilter73 = reportConfiguration72.getInputFileFilter();
        org.apache.rat.license.LicenseSetFactory.LicenseFilter licenseFilter74 = org.apache.rat.license.LicenseSetFactory.LicenseFilter.all;
        java.util.SortedSet<org.apache.rat.license.ILicense> iLicenseSet75 = reportConfiguration72.getLicenses(licenseFilter74);
        org.apache.rat.config.AddLicenseHeaders addLicenseHeaders76 = org.apache.rat.config.AddLicenseHeaders.FALSE;
        reportConfiguration72.setAddLicenseHeaders(addLicenseHeaders76);
        org.apache.rat.utils.Log log78 = null;
        org.apache.rat.ReportConfiguration reportConfiguration79 = new org.apache.rat.ReportConfiguration(log78);
        org.apache.rat.report.claim.ClaimStatistic claimStatistic80 = org.apache.rat.Reporter.report(reportConfiguration79);
        org.apache.rat.license.LicenseSetFactory.LicenseFilter licenseFilter81 = org.apache.rat.license.LicenseSetFactory.LicenseFilter.all;
        org.apache.rat.Reporter.listLicenses(reportConfiguration79, licenseFilter81);
        org.apache.rat.Reporter.listLicenses(reportConfiguration72, licenseFilter81);
        org.apache.rat.Reporter.listLicenses(reportConfiguration59, licenseFilter81);
        org.apache.rat.utils.Log log85 = null;
        org.apache.rat.ReportConfiguration reportConfiguration86 = new org.apache.rat.ReportConfiguration(log85);
        org.apache.commons.io.function.IOSupplier<java.io.OutputStream> outputStreamIOSupplier87 = reportConfiguration86.getOutput();
        reportConfiguration59.setOut(outputStreamIOSupplier87);
        org.apache.rat.utils.Log.Level level89 = org.apache.rat.utils.Log.Level.WARN;
        reportConfiguration59.logLicenseCollisions(level89);
        org.apache.commons.io.filefilter.IOFileFilter iOFileFilter91 = reportConfiguration59.getDirectoryFilter();
        java.nio.file.Path path92 = null;
        boolean boolean93 = iOFileFilter91.matches(path92);
        java.nio.file.Path path94 = null;
        java.nio.file.attribute.BasicFileAttributes basicFileAttributes95 = null;
        java.nio.file.FileVisitResult fileVisitResult96 = iOFileFilter91.accept(path94, basicFileAttributes95);
        org.apache.commons.io.filefilter.IOFileFilter iOFileFilter97 = iOFileFilter55.or(iOFileFilter91);
        // The following exception was thrown during execution in test generation
        try {
            org.apache.rat.walker.DirectoryWalker directoryWalker98 = new org.apache.rat.walker.DirectoryWalker(file0, filenameFilter21, iOFileFilter97);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(iLicenseArray1);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertNotNull(strArray16);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + true + "'", boolean18 == true);
        org.junit.Assert.assertNotNull(filenameFilter20);
        org.junit.Assert.assertNotNull(filenameFilter21);
        org.junit.Assert.assertNull(filenameFilter24);
        org.junit.Assert.assertTrue("'" + licenseFilter25 + "' != '" + org.apache.rat.license.LicenseSetFactory.LicenseFilter.all + "'", licenseFilter25.equals(org.apache.rat.license.LicenseSetFactory.LicenseFilter.all));
        org.junit.Assert.assertNotNull(iLicenseSet26);
        org.junit.Assert.assertTrue("'" + addLicenseHeaders27 + "' != '" + org.apache.rat.config.AddLicenseHeaders.FALSE + "'", addLicenseHeaders27.equals(org.apache.rat.config.AddLicenseHeaders.FALSE));
        org.junit.Assert.assertNull(claimStatistic31);
        org.junit.Assert.assertTrue("'" + licenseFilter32 + "' != '" + org.apache.rat.license.LicenseSetFactory.LicenseFilter.all + "'", licenseFilter32.equals(org.apache.rat.license.LicenseSetFactory.LicenseFilter.all));
        org.junit.Assert.assertNull(filenameFilter37);
        org.junit.Assert.assertTrue("'" + licenseFilter38 + "' != '" + org.apache.rat.license.LicenseSetFactory.LicenseFilter.all + "'", licenseFilter38.equals(org.apache.rat.license.LicenseSetFactory.LicenseFilter.all));
        org.junit.Assert.assertNotNull(iLicenseSet39);
        org.junit.Assert.assertTrue("'" + addLicenseHeaders40 + "' != '" + org.apache.rat.config.AddLicenseHeaders.FALSE + "'", addLicenseHeaders40.equals(org.apache.rat.config.AddLicenseHeaders.FALSE));
        org.junit.Assert.assertNull(claimStatistic44);
        org.junit.Assert.assertTrue("'" + licenseFilter45 + "' != '" + org.apache.rat.license.LicenseSetFactory.LicenseFilter.all + "'", licenseFilter45.equals(org.apache.rat.license.LicenseSetFactory.LicenseFilter.all));
        org.junit.Assert.assertNotNull(outputStreamIOSupplier51);
        org.junit.Assert.assertTrue("'" + level53 + "' != '" + org.apache.rat.utils.Log.Level.WARN + "'", level53.equals(org.apache.rat.utils.Log.Level.WARN));
        org.junit.Assert.assertNotNull(iOFileFilter55);
        org.junit.Assert.assertTrue("'" + boolean57 + "' != '" + false + "'", boolean57 == false);
        org.junit.Assert.assertNull(filenameFilter60);
        org.junit.Assert.assertTrue("'" + licenseFilter61 + "' != '" + org.apache.rat.license.LicenseSetFactory.LicenseFilter.all + "'", licenseFilter61.equals(org.apache.rat.license.LicenseSetFactory.LicenseFilter.all));
        org.junit.Assert.assertNotNull(iLicenseSet62);
        org.junit.Assert.assertTrue("'" + addLicenseHeaders63 + "' != '" + org.apache.rat.config.AddLicenseHeaders.FALSE + "'", addLicenseHeaders63.equals(org.apache.rat.config.AddLicenseHeaders.FALSE));
        org.junit.Assert.assertNull(claimStatistic67);
        org.junit.Assert.assertTrue("'" + licenseFilter68 + "' != '" + org.apache.rat.license.LicenseSetFactory.LicenseFilter.all + "'", licenseFilter68.equals(org.apache.rat.license.LicenseSetFactory.LicenseFilter.all));
        org.junit.Assert.assertNull(filenameFilter73);
        org.junit.Assert.assertTrue("'" + licenseFilter74 + "' != '" + org.apache.rat.license.LicenseSetFactory.LicenseFilter.all + "'", licenseFilter74.equals(org.apache.rat.license.LicenseSetFactory.LicenseFilter.all));
        org.junit.Assert.assertNotNull(iLicenseSet75);
        org.junit.Assert.assertTrue("'" + addLicenseHeaders76 + "' != '" + org.apache.rat.config.AddLicenseHeaders.FALSE + "'", addLicenseHeaders76.equals(org.apache.rat.config.AddLicenseHeaders.FALSE));
        org.junit.Assert.assertNull(claimStatistic80);
        org.junit.Assert.assertTrue("'" + licenseFilter81 + "' != '" + org.apache.rat.license.LicenseSetFactory.LicenseFilter.all + "'", licenseFilter81.equals(org.apache.rat.license.LicenseSetFactory.LicenseFilter.all));
        org.junit.Assert.assertNotNull(outputStreamIOSupplier87);
        org.junit.Assert.assertTrue("'" + level89 + "' != '" + org.apache.rat.utils.Log.Level.WARN + "'", level89.equals(org.apache.rat.utils.Log.Level.WARN));
        org.junit.Assert.assertNotNull(iOFileFilter91);
        org.junit.Assert.assertTrue("'" + boolean93 + "' != '" + false + "'", boolean93 == false);
        org.junit.Assert.assertTrue("'" + fileVisitResult96 + "' != '" + java.nio.file.FileVisitResult.TERMINATE + "'", fileVisitResult96.equals(java.nio.file.FileVisitResult.TERMINATE));
        org.junit.Assert.assertNotNull(iOFileFilter97);
    }

    @Test
    public void test14824() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest29.test14824");
        java.io.File file0 = null;
        org.apache.rat.utils.Log log1 = null;
        org.apache.rat.ReportConfiguration reportConfiguration2 = new org.apache.rat.ReportConfiguration(log1);
        org.apache.rat.report.claim.ClaimStatistic claimStatistic3 = org.apache.rat.Reporter.report(reportConfiguration2);
        org.apache.rat.report.IReportable iReportable4 = null;
        reportConfiguration2.setReportable(iReportable4);
        boolean boolean6 = reportConfiguration2.isAddingLicensesForced();
        org.apache.commons.io.filefilter.IOFileFilter iOFileFilter7 = reportConfiguration2.getDirectoryFilter();
        // The following exception was thrown during execution in test generation
        try {
            org.apache.rat.walker.DirectoryWalker directoryWalker8 = new org.apache.rat.walker.DirectoryWalker(file0, iOFileFilter7);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNull(claimStatistic3);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertNotNull(iOFileFilter7);
    }

    @Test
    public void test14825() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest29.test14825");
        org.apache.rat.api.MetaData.Datum datum2 = new org.apache.rat.api.MetaData.Datum("8af65ec0-8946-4ab4-afc8-2934c1a2b42c", "be2fb0fb-7d6f-4a4f-bfa0-73aab0c8f703");
    }

    @Test
    public void test14826() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest29.test14826");
        org.apache.rat.header.HeaderBean headerBean0 = new org.apache.rat.header.HeaderBean();
        boolean boolean1 = headerBean0.isMatch();
        java.util.regex.Pattern pattern2 = null;
        headerBean0.setHeaderPattern(pattern2);
        boolean boolean4 = headerBean0.isMatch();
        java.util.regex.Pattern pattern5 = headerBean0.getHeaderPattern();
        java.util.regex.Pattern pattern6 = headerBean0.getHeaderPattern();
        headerBean0.setMatch(false);
        java.util.regex.Pattern pattern9 = null;
        headerBean0.setHeaderPattern(pattern9);
        java.util.regex.Pattern pattern11 = headerBean0.getHeaderPattern();
        headerBean0.setMatch(false);
        java.util.regex.Pattern pattern14 = null;
        headerBean0.setHeaderPattern(pattern14);
        org.junit.Assert.assertTrue("'" + boolean1 + "' != '" + false + "'", boolean1 == false);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertNull(pattern5);
        org.junit.Assert.assertNull(pattern6);
        org.junit.Assert.assertNull(pattern11);
    }

    @Test
    public void test14827() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest29.test14827");
        org.apache.rat.utils.Log log0 = null;
        org.apache.rat.ReportConfiguration reportConfiguration1 = new org.apache.rat.ReportConfiguration(log0);
        reportConfiguration1.addApprovedLicenseCategory(".cvsignore");
        org.apache.rat.utils.Log.Level level4 = org.apache.rat.utils.Log.Level.ERROR;
        reportConfiguration1.logFamilyCollisions(level4);
        org.apache.commons.io.filefilter.IOFileFilter iOFileFilter6 = reportConfiguration1.getDirectoryFilter();
        java.lang.String[] strArray12 = new java.lang.String[] { "http://org/apache/rat/meta-data#LicenseFamilyCategory", "Datum [ name ='http://org/apache/rat/meta-data#LicenseFamilyCategory',value ='GPL1  ']", "MANIFEST.MF", "AllBuilder:", "The MIT License" };
        org.apache.rat.utils.ReportingSet<java.lang.String> strSet13 = new org.apache.rat.utils.ReportingSet<java.lang.String>();
        boolean boolean14 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strSet13, strArray12);
        boolean boolean16 = strSet13.addIfNotPresent("http://org/apache/rat/meta-data#LicenseFamilyName");
        boolean boolean18 = strSet13.addIfNotPresent("ef7a8b13-64c3-4510-bb0c-dbf208e1e73f");
        java.util.function.Function<java.lang.String, java.lang.String> strFunction19 = null;
        org.apache.rat.utils.ReportingSet<java.lang.String> strSet20 = strSet13.setMsgFormat(strFunction19);
        java.util.SortedSet<org.apache.rat.license.ILicenseFamily> iLicenseFamilySet22 = org.apache.rat.license.LicenseFamilySetFactory.emptyLicenseFamilySet();
        org.apache.rat.license.ILicenseFamily iLicenseFamily23 = org.apache.rat.license.LicenseFamilySetFactory.search("http://org/apache/rat/meta-data", iLicenseFamilySet22);
        boolean boolean24 = strSet13.containsAll((java.util.Collection<org.apache.rat.license.ILicenseFamily>) iLicenseFamilySet22);
        reportConfiguration1.removeApprovedLicenseCategories((java.util.Collection<java.lang.String>) strSet13);
        org.apache.rat.configuration.Format format27 = org.apache.rat.configuration.Format.XML;
        org.apache.rat.configuration.LicenseReader licenseReader28 = format27.licenseReader();
        java.util.SortedSet<org.apache.rat.license.ILicense> iLicenseSet29 = licenseReader28.readLicenses();
        java.lang.String[] strArray35 = new java.lang.String[] { "http://org/apache/rat/meta-data#LicenseFamilyCategory", "Datum [ name ='http://org/apache/rat/meta-data#LicenseFamilyCategory',value ='GPL1  ']", "MANIFEST.MF", "AllBuilder:", "The MIT License" };
        org.apache.rat.utils.ReportingSet<java.lang.String> strSet36 = new org.apache.rat.utils.ReportingSet<java.lang.String>();
        boolean boolean37 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strSet36, strArray35);
        boolean boolean39 = strSet36.addIfNotPresent("http://org/apache/rat/meta-data#LicenseFamilyName");
        boolean boolean41 = strSet36.addIfNotPresent("ef7a8b13-64c3-4510-bb0c-dbf208e1e73f");
        java.util.function.Function<java.lang.String, java.lang.String> strFunction42 = null;
        org.apache.rat.utils.ReportingSet<java.lang.String> strSet43 = strSet36.setMsgFormat(strFunction42);
        boolean boolean44 = strSet36.isEmpty();
        org.apache.rat.license.LicenseSetFactory licenseSetFactory45 = new org.apache.rat.license.LicenseSetFactory(iLicenseSet29, (java.util.Collection<java.lang.String>) strSet36);
        org.apache.rat.utils.ReportingSet<org.apache.rat.license.ILicense> iLicenseSet46 = new org.apache.rat.utils.ReportingSet<org.apache.rat.license.ILicense>(iLicenseSet29);
        org.apache.rat.license.ILicense iLicense47 = org.apache.rat.license.LicenseSetFactory.search("6fbe8280-d578-4ea3-a1a8-34d68e85abc2", iLicenseSet29);
        reportConfiguration1.addLicenses((java.util.Collection<org.apache.rat.license.ILicense>) iLicenseSet29);
        org.apache.rat.utils.ReportingSet<org.apache.rat.license.ILicense> iLicenseSet49 = new org.apache.rat.utils.ReportingSet<org.apache.rat.license.ILicense>(iLicenseSet29);
        java.lang.String[] strArray55 = new java.lang.String[] { "http://org/apache/rat/meta-data#LicenseFamilyCategory", "Datum [ name ='http://org/apache/rat/meta-data#LicenseFamilyCategory',value ='GPL1  ']", "MANIFEST.MF", "AllBuilder:", "The MIT License" };
        org.apache.rat.utils.ReportingSet<java.lang.String> strSet56 = new org.apache.rat.utils.ReportingSet<java.lang.String>();
        boolean boolean57 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strSet56, strArray55);
        boolean boolean59 = strSet56.addIfNotPresent("http://org/apache/rat/meta-data#LicenseFamilyName");
        boolean boolean61 = strSet56.addIfNotPresent("ef7a8b13-64c3-4510-bb0c-dbf208e1e73f");
        java.util.function.Function<java.lang.String, java.lang.String> strFunction62 = null;
        org.apache.rat.utils.ReportingSet<java.lang.String> strSet63 = strSet56.setMsgFormat(strFunction62);
        java.util.Spliterator<java.lang.String> strSpliterator64 = strSet56.spliterator();
        org.apache.rat.utils.Log log65 = null;
        org.apache.rat.ReportConfiguration reportConfiguration66 = new org.apache.rat.ReportConfiguration(log65);
        org.apache.rat.license.ILicenseFamily[] iLicenseFamilyArray67 = new org.apache.rat.license.ILicenseFamily[] {};
        java.util.ArrayList<org.apache.rat.license.ILicenseFamily> iLicenseFamilyList68 = new java.util.ArrayList<org.apache.rat.license.ILicenseFamily>();
        boolean boolean69 = java.util.Collections.addAll((java.util.Collection<org.apache.rat.license.ILicenseFamily>) iLicenseFamilyList68, iLicenseFamilyArray67);
        reportConfiguration66.addFamilies((java.util.Collection<org.apache.rat.license.ILicenseFamily>) iLicenseFamilyList68);
        boolean boolean71 = strSet56.containsAll((java.util.Collection<org.apache.rat.license.ILicenseFamily>) iLicenseFamilyList68);
        org.apache.rat.utils.ReportingSet<java.lang.String> strSet72 = new org.apache.rat.utils.ReportingSet<java.lang.String>();
        org.apache.rat.utils.ReportingSet<java.lang.String> strSet74 = strSet72.tailSet("hi!");
        org.apache.rat.configuration.LicenseReader[] licenseReaderArray75 = new org.apache.rat.configuration.LicenseReader[] {};
        org.apache.rat.configuration.LicenseReader[] licenseReaderArray76 = strSet74.toArray(licenseReaderArray75);
        org.apache.rat.utils.Log log77 = null;
        org.apache.rat.ReportConfiguration reportConfiguration78 = new org.apache.rat.ReportConfiguration(log77);
        org.apache.rat.report.claim.ClaimStatistic claimStatistic79 = org.apache.rat.Reporter.report(reportConfiguration78);
        org.apache.rat.utils.Log log80 = null;
        org.apache.rat.ReportConfiguration reportConfiguration81 = new org.apache.rat.ReportConfiguration(log80);
        org.apache.rat.report.claim.ClaimStatistic claimStatistic82 = org.apache.rat.Reporter.report(reportConfiguration81);
        org.apache.rat.utils.ReportingSet.Options options83 = org.apache.rat.utils.ReportingSet.Options.OVERWRITE;
        reportConfiguration81.licenseDuplicateOption(options83);
        reportConfiguration78.familyDuplicateOption(options83);
        org.apache.rat.utils.ReportingSet<java.lang.String> strSet86 = strSet74.setDuplicateOption(options83);
        org.apache.rat.utils.ReportingSet<java.lang.String> strSet87 = strSet56.setDuplicateOption(options83);
        java.util.Iterator<java.lang.String> strItor88 = strSet56.iterator();
        org.apache.rat.utils.Log log89 = null;
        org.apache.rat.utils.ReportingSet<java.lang.String> strSet90 = strSet56.setLog(log89);
        org.apache.rat.license.LicenseSetFactory licenseSetFactory91 = new org.apache.rat.license.LicenseSetFactory(iLicenseSet29, (java.util.Collection<java.lang.String>) strSet56);
        org.junit.Assert.assertTrue("'" + level4 + "' != '" + org.apache.rat.utils.Log.Level.ERROR + "'", level4.equals(org.apache.rat.utils.Log.Level.ERROR));
        org.junit.Assert.assertNotNull(iOFileFilter6);
        org.junit.Assert.assertNotNull(strArray12);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + true + "'", boolean14 == true);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + true + "'", boolean16 == true);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + true + "'", boolean18 == true);
        org.junit.Assert.assertNotNull(strSet20);
        org.junit.Assert.assertNotNull(iLicenseFamilySet22);
        org.junit.Assert.assertNull(iLicenseFamily23);
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + true + "'", boolean24 == true);
        org.junit.Assert.assertTrue("'" + format27 + "' != '" + org.apache.rat.configuration.Format.XML + "'", format27.equals(org.apache.rat.configuration.Format.XML));
        org.junit.Assert.assertNotNull(licenseReader28);
        org.junit.Assert.assertNotNull(iLicenseSet29);
        org.junit.Assert.assertNotNull(strArray35);
        org.junit.Assert.assertTrue("'" + boolean37 + "' != '" + true + "'", boolean37 == true);
        org.junit.Assert.assertTrue("'" + boolean39 + "' != '" + true + "'", boolean39 == true);
        org.junit.Assert.assertTrue("'" + boolean41 + "' != '" + true + "'", boolean41 == true);
        org.junit.Assert.assertNotNull(strSet43);
        org.junit.Assert.assertTrue("'" + boolean44 + "' != '" + false + "'", boolean44 == false);
        org.junit.Assert.assertNull(iLicense47);
        org.junit.Assert.assertNotNull(strArray55);
        org.junit.Assert.assertTrue("'" + boolean57 + "' != '" + true + "'", boolean57 == true);
        org.junit.Assert.assertTrue("'" + boolean59 + "' != '" + true + "'", boolean59 == true);
        org.junit.Assert.assertTrue("'" + boolean61 + "' != '" + true + "'", boolean61 == true);
        org.junit.Assert.assertNotNull(strSet63);
        org.junit.Assert.assertNotNull(strSpliterator64);
        org.junit.Assert.assertNotNull(iLicenseFamilyArray67);
        org.junit.Assert.assertTrue("'" + boolean69 + "' != '" + false + "'", boolean69 == false);
        org.junit.Assert.assertTrue("'" + boolean71 + "' != '" + true + "'", boolean71 == true);
        org.junit.Assert.assertNotNull(strSet74);
        org.junit.Assert.assertNotNull(licenseReaderArray75);
        org.junit.Assert.assertNotNull(licenseReaderArray76);
        org.junit.Assert.assertNull(claimStatistic79);
        org.junit.Assert.assertNull(claimStatistic82);
        org.junit.Assert.assertTrue("'" + options83 + "' != '" + org.apache.rat.utils.ReportingSet.Options.OVERWRITE + "'", options83.equals(org.apache.rat.utils.ReportingSet.Options.OVERWRITE));
        org.junit.Assert.assertNotNull(strSet86);
        org.junit.Assert.assertNotNull(strSet87);
        org.junit.Assert.assertNotNull(strItor88);
        org.junit.Assert.assertNotNull(strSet90);
    }

    @Test
    public void test14828() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest29.test14828");
        org.apache.rat.report.claim.ClaimStatistic claimStatistic0 = new org.apache.rat.report.claim.ClaimStatistic();
        claimStatistic0.setNumApproved((int) (short) 10);
        java.util.Map<java.lang.String, java.lang.Integer> strMap3 = null;
        claimStatistic0.setDocumentCategoryMap(strMap3);
        claimStatistic0.setNumUnknown((int) '4');
        claimStatistic0.setNumUnknown((int) (byte) 0);
        claimStatistic0.setNumUnknown((int) (byte) 10);
        java.util.Map<java.lang.String, java.lang.Integer> strMap11 = claimStatistic0.getDocumentCategoryMap();
        int int12 = claimStatistic0.getNumUnknown();
        java.util.Map<java.lang.String, java.lang.Integer> strMap13 = null;
        claimStatistic0.setLicenseFileCodeMap(strMap13);
        int int15 = claimStatistic0.getNumUnknown();
        java.util.Map<java.lang.String, java.lang.Integer> strMap16 = null;
        claimStatistic0.setLicenseFileCodeMap(strMap16);
        int int18 = claimStatistic0.getNumUnApproved();
        org.junit.Assert.assertNull(strMap11);
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + 10 + "'", int12 == 10);
        org.junit.Assert.assertTrue("'" + int15 + "' != '" + 10 + "'", int15 == 10);
        org.junit.Assert.assertTrue("'" + int18 + "' != '" + 0 + "'", int18 == 0);
    }

    @Test
    public void test14829() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest29.test14829");
        org.apache.rat.analysis.matchers.SimpleTextMatcher simpleTextMatcher1 = new org.apache.rat.analysis.matchers.SimpleTextMatcher("Copyright Builder: s:10ceccc6-9da0-47a6-810c-684cf0a59f88 e:null o:824f4e11-66e9-46be-a4d6-3a2b761d6238");
        boolean boolean3 = simpleTextMatcher1.doMatch("TextBuilder: true");
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
    }

    @Test
    public void test14830() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest29.test14830");
        org.apache.rat.configuration.builders.AllBuilder allBuilder0 = new org.apache.rat.configuration.builders.AllBuilder();
        java.lang.String str1 = allBuilder0.toString();
        org.apache.rat.analysis.IHeaderMatcher iHeaderMatcher2 = allBuilder0.build();
        org.apache.rat.license.ILicense.Builder builder3 = new org.apache.rat.license.ILicense.Builder();
        org.apache.rat.configuration.builders.AllBuilder allBuilder4 = org.apache.rat.analysis.IHeaderMatcher.Builder.all();
        org.apache.rat.license.ILicense.Builder builder5 = builder3.setMatcher((org.apache.rat.analysis.IHeaderMatcher.Builder) allBuilder4);
        org.apache.rat.configuration.builders.AbstractBuilder abstractBuilder7 = allBuilder4.setId("binary");
        org.apache.rat.document.ToNameTransformer toNameTransformer8 = new org.apache.rat.document.ToNameTransformer();
        org.apache.rat.configuration.builders.AllBuilder allBuilder9 = org.apache.rat.analysis.IHeaderMatcher.Builder.all();
        java.util.List<org.apache.rat.analysis.IHeaderMatcher> iHeaderMatcherList10 = allBuilder9.getChildren();
        org.apache.rat.analysis.IHeaderMatcher iHeaderMatcher11 = allBuilder9.build();
        java.util.List<org.apache.rat.analysis.IHeaderMatcher> iHeaderMatcherList12 = allBuilder9.getChildren();
        java.lang.Object obj13 = toNameTransformer8.transform((java.lang.Object) allBuilder9);
        org.apache.rat.configuration.builders.SpdxBuilder spdxBuilder14 = org.apache.rat.analysis.IHeaderMatcher.Builder.spdx();
        java.lang.String str15 = spdxBuilder14.toString();
        org.apache.rat.configuration.builders.SpdxBuilder spdxBuilder17 = spdxBuilder14.setName("ef7a8b13-64c3-4510-bb0c-dbf208e1e73f");
        org.apache.rat.analysis.IHeaderMatcher iHeaderMatcher18 = spdxBuilder14.build();
        org.apache.rat.analysis.IHeaderMatcher iHeaderMatcher19 = spdxBuilder14.build();
        org.apache.rat.analysis.IHeaderMatcher iHeaderMatcher20 = spdxBuilder14.build();
        org.apache.rat.analysis.IHeaderMatcher iHeaderMatcher21 = spdxBuilder14.build();
        org.apache.rat.configuration.builders.SpdxBuilder spdxBuilder23 = spdxBuilder14.setName("7d01b1b3-e7b9-4f85-b3dd-e0334dea8844");
        org.apache.rat.configuration.builders.AbstractBuilder abstractBuilder24 = allBuilder9.add((org.apache.rat.analysis.IHeaderMatcher.Builder) spdxBuilder14);
        org.apache.rat.configuration.builders.AnyBuilder anyBuilder25 = org.apache.rat.analysis.IHeaderMatcher.Builder.any();
        java.lang.String str26 = anyBuilder25.toString();
        java.util.List<org.apache.rat.analysis.IHeaderMatcher> iHeaderMatcherList27 = anyBuilder25.getChildren();
        org.apache.rat.analysis.IHeaderMatcher iHeaderMatcher28 = anyBuilder25.build();
        org.apache.rat.analysis.IHeaderMatcher iHeaderMatcher29 = anyBuilder25.build();
        java.util.List<org.apache.rat.analysis.IHeaderMatcher> iHeaderMatcherList30 = anyBuilder25.getChildren();
        org.apache.rat.configuration.builders.NotBuilder notBuilder31 = new org.apache.rat.configuration.builders.NotBuilder();
        java.lang.String str32 = notBuilder31.toString();
        org.apache.rat.configuration.builders.MatcherRefBuilder matcherRefBuilder33 = org.apache.rat.analysis.IHeaderMatcher.Builder.matcherRef();
        boolean boolean34 = matcherRefBuilder33.hasId();
        java.util.Map<java.lang.String, org.apache.rat.analysis.IHeaderMatcher> strMap35 = null;
        org.apache.rat.configuration.builders.MatcherRefBuilder matcherRefBuilder36 = matcherRefBuilder33.setMatchers(strMap35);
        org.apache.rat.configuration.builders.AllBuilder allBuilder37 = new org.apache.rat.configuration.builders.AllBuilder();
        org.apache.rat.configuration.builders.CopyrightBuilder copyrightBuilder38 = org.apache.rat.analysis.IHeaderMatcher.Builder.copyright();
        org.apache.rat.configuration.builders.CopyrightBuilder copyrightBuilder40 = copyrightBuilder38.setStart("OASIS");
        java.lang.String str41 = copyrightBuilder38.toString();
        org.apache.rat.configuration.builders.CopyrightBuilder copyrightBuilder43 = copyrightBuilder38.setStart("223f0aba-15d4-49e9-901e-5740c137aebf");
        org.apache.rat.configuration.builders.MatcherRefBuilder matcherRefBuilder44 = org.apache.rat.analysis.IHeaderMatcher.Builder.matcherRef();
        boolean boolean45 = matcherRefBuilder44.hasId();
        org.apache.rat.configuration.builders.CopyrightBuilder copyrightBuilder46 = org.apache.rat.analysis.IHeaderMatcher.Builder.copyright();
        org.apache.rat.configuration.builders.CopyrightBuilder copyrightBuilder48 = copyrightBuilder46.setStart("OASIS");
        java.lang.String str49 = copyrightBuilder46.toString();
        org.apache.rat.configuration.builders.CopyrightBuilder copyrightBuilder51 = copyrightBuilder46.setStart("223f0aba-15d4-49e9-901e-5740c137aebf");
        org.apache.rat.configuration.builders.CopyrightBuilder copyrightBuilder52 = org.apache.rat.analysis.IHeaderMatcher.Builder.copyright();
        org.apache.rat.configuration.builders.CopyrightBuilder copyrightBuilder53 = org.apache.rat.analysis.IHeaderMatcher.Builder.copyright();
        java.lang.String str54 = copyrightBuilder53.toString();
        org.apache.rat.configuration.builders.CopyrightBuilder copyrightBuilder56 = copyrightBuilder53.setEnd(".cvsignore");
        boolean boolean57 = copyrightBuilder53.hasId();
        org.apache.rat.configuration.builders.CopyrightBuilder copyrightBuilder58 = org.apache.rat.analysis.IHeaderMatcher.Builder.copyright();
        java.lang.String str59 = copyrightBuilder58.toString();
        org.apache.rat.configuration.builders.CopyrightBuilder copyrightBuilder61 = copyrightBuilder58.setEnd(".cvsignore");
        boolean boolean62 = copyrightBuilder58.hasId();
        java.lang.String str63 = copyrightBuilder58.toString();
        org.apache.rat.configuration.builders.CopyrightBuilder copyrightBuilder64 = org.apache.rat.analysis.IHeaderMatcher.Builder.copyright();
        org.apache.rat.configuration.builders.CopyrightBuilder copyrightBuilder66 = copyrightBuilder64.setStart("OASIS");
        org.apache.rat.configuration.builders.AnyBuilder anyBuilder67 = org.apache.rat.analysis.IHeaderMatcher.Builder.any();
        org.apache.rat.configuration.builders.MatcherRefBuilder matcherRefBuilder68 = org.apache.rat.analysis.IHeaderMatcher.Builder.matcherRef();
        boolean boolean69 = matcherRefBuilder68.hasId();
        java.util.Map<java.lang.String, org.apache.rat.analysis.IHeaderMatcher> strMap70 = null;
        org.apache.rat.configuration.builders.MatcherRefBuilder matcherRefBuilder71 = matcherRefBuilder68.setMatchers(strMap70);
        org.apache.rat.configuration.builders.CopyrightBuilder copyrightBuilder72 = org.apache.rat.analysis.IHeaderMatcher.Builder.copyright();
        org.apache.rat.configuration.builders.MatcherRefBuilder matcherRefBuilder73 = org.apache.rat.analysis.IHeaderMatcher.Builder.matcherRef();
        boolean boolean74 = matcherRefBuilder73.hasId();
        java.lang.String str75 = matcherRefBuilder73.toString();
        java.util.Map<java.lang.String, org.apache.rat.analysis.IHeaderMatcher> strMap76 = null;
        org.apache.rat.configuration.builders.MatcherRefBuilder matcherRefBuilder77 = matcherRefBuilder73.setMatchers(strMap76);
        org.apache.rat.analysis.IHeaderMatcher.Builder[] builderArray78 = new org.apache.rat.analysis.IHeaderMatcher.Builder[] { matcherRefBuilder33, allBuilder37, copyrightBuilder43, matcherRefBuilder44, copyrightBuilder46, copyrightBuilder52, copyrightBuilder53, copyrightBuilder58, copyrightBuilder64, anyBuilder67, matcherRefBuilder68, copyrightBuilder72, matcherRefBuilder73 };
        java.util.ArrayList<org.apache.rat.analysis.IHeaderMatcher.Builder> builderList79 = new java.util.ArrayList<org.apache.rat.analysis.IHeaderMatcher.Builder>();
        boolean boolean80 = java.util.Collections.addAll((java.util.Collection<org.apache.rat.analysis.IHeaderMatcher.Builder>) builderList79, builderArray78);
        org.apache.rat.configuration.builders.AbstractBuilder abstractBuilder81 = notBuilder31.add((java.util.Collection<org.apache.rat.analysis.IHeaderMatcher.Builder>) builderList79);
        org.apache.rat.configuration.builders.AbstractBuilder abstractBuilder82 = anyBuilder25.add((java.util.Collection<org.apache.rat.analysis.IHeaderMatcher.Builder>) builderList79);
        org.apache.rat.configuration.builders.AbstractBuilder abstractBuilder83 = allBuilder9.add((java.util.Collection<org.apache.rat.analysis.IHeaderMatcher.Builder>) builderList79);
        org.apache.rat.configuration.builders.AbstractBuilder abstractBuilder84 = allBuilder4.add((java.util.Collection<org.apache.rat.analysis.IHeaderMatcher.Builder>) builderList79);
        org.apache.rat.configuration.builders.AbstractBuilder abstractBuilder85 = allBuilder0.add((java.util.Collection<org.apache.rat.analysis.IHeaderMatcher.Builder>) builderList79);
        // The following exception was thrown during execution in test generation
        try {
            org.apache.rat.analysis.IHeaderMatcher iHeaderMatcher86 = allBuilder0.build();
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertEquals("'" + str1 + "' != '" + "AllBuilder:" + "'", str1, "AllBuilder:");
        org.junit.Assert.assertNotNull(iHeaderMatcher2);
        org.junit.Assert.assertNotNull(allBuilder4);
        org.junit.Assert.assertNotNull(builder5);
        org.junit.Assert.assertNotNull(abstractBuilder7);
        org.junit.Assert.assertNotNull(allBuilder9);
        org.junit.Assert.assertNotNull(iHeaderMatcherList10);
        org.junit.Assert.assertNotNull(iHeaderMatcher11);
        org.junit.Assert.assertNotNull(iHeaderMatcherList12);
        org.junit.Assert.assertNull(obj13);
        org.junit.Assert.assertNotNull(spdxBuilder14);
        org.junit.Assert.assertEquals("'" + str15 + "' != '" + "SpdxBuilder: null" + "'", str15, "SpdxBuilder: null");
        org.junit.Assert.assertNotNull(spdxBuilder17);
        org.junit.Assert.assertNotNull(iHeaderMatcher18);
        org.junit.Assert.assertNotNull(iHeaderMatcher19);
        org.junit.Assert.assertNotNull(iHeaderMatcher20);
        org.junit.Assert.assertNotNull(iHeaderMatcher21);
        org.junit.Assert.assertNotNull(spdxBuilder23);
        org.junit.Assert.assertNotNull(abstractBuilder24);
        org.junit.Assert.assertNotNull(anyBuilder25);
        org.junit.Assert.assertEquals("'" + str26 + "' != '" + "AnyBuilder:" + "'", str26, "AnyBuilder:");
        org.junit.Assert.assertNotNull(iHeaderMatcherList27);
        org.junit.Assert.assertNotNull(iHeaderMatcher28);
        org.junit.Assert.assertNotNull(iHeaderMatcher29);
        org.junit.Assert.assertNotNull(iHeaderMatcherList30);
        org.junit.Assert.assertEquals("'" + str32 + "' != '" + "NotBuilder: null" + "'", str32, "NotBuilder: null");
        org.junit.Assert.assertNotNull(matcherRefBuilder33);
        org.junit.Assert.assertTrue("'" + boolean34 + "' != '" + false + "'", boolean34 == false);
        org.junit.Assert.assertNotNull(matcherRefBuilder36);
        org.junit.Assert.assertNotNull(copyrightBuilder38);
        org.junit.Assert.assertNotNull(copyrightBuilder40);
        org.junit.Assert.assertEquals("'" + str41 + "' != '" + "Copyright Builder: s:OASIS e:null o:null" + "'", str41, "Copyright Builder: s:OASIS e:null o:null");
        org.junit.Assert.assertNotNull(copyrightBuilder43);
        org.junit.Assert.assertNotNull(matcherRefBuilder44);
        org.junit.Assert.assertTrue("'" + boolean45 + "' != '" + false + "'", boolean45 == false);
        org.junit.Assert.assertNotNull(copyrightBuilder46);
        org.junit.Assert.assertNotNull(copyrightBuilder48);
        org.junit.Assert.assertEquals("'" + str49 + "' != '" + "Copyright Builder: s:OASIS e:null o:null" + "'", str49, "Copyright Builder: s:OASIS e:null o:null");
        org.junit.Assert.assertNotNull(copyrightBuilder51);
        org.junit.Assert.assertNotNull(copyrightBuilder52);
        org.junit.Assert.assertNotNull(copyrightBuilder53);
        org.junit.Assert.assertEquals("'" + str54 + "' != '" + "Copyright Builder: s:null e:null o:null" + "'", str54, "Copyright Builder: s:null e:null o:null");
        org.junit.Assert.assertNotNull(copyrightBuilder56);
        org.junit.Assert.assertTrue("'" + boolean57 + "' != '" + false + "'", boolean57 == false);
        org.junit.Assert.assertNotNull(copyrightBuilder58);
        org.junit.Assert.assertEquals("'" + str59 + "' != '" + "Copyright Builder: s:null e:null o:null" + "'", str59, "Copyright Builder: s:null e:null o:null");
        org.junit.Assert.assertNotNull(copyrightBuilder61);
        org.junit.Assert.assertTrue("'" + boolean62 + "' != '" + false + "'", boolean62 == false);
        org.junit.Assert.assertEquals("'" + str63 + "' != '" + "Copyright Builder: s:null e:.cvsignore o:null" + "'", str63, "Copyright Builder: s:null e:.cvsignore o:null");
        org.junit.Assert.assertNotNull(copyrightBuilder64);
        org.junit.Assert.assertNotNull(copyrightBuilder66);
        org.junit.Assert.assertNotNull(anyBuilder67);
        org.junit.Assert.assertNotNull(matcherRefBuilder68);
        org.junit.Assert.assertTrue("'" + boolean69 + "' != '" + false + "'", boolean69 == false);
        org.junit.Assert.assertNotNull(matcherRefBuilder71);
        org.junit.Assert.assertNotNull(copyrightBuilder72);
        org.junit.Assert.assertNotNull(matcherRefBuilder73);
        org.junit.Assert.assertTrue("'" + boolean74 + "' != '" + false + "'", boolean74 == false);
        org.junit.Assert.assertEquals("'" + str75 + "' != '" + "MathcerRefBuilder: null" + "'", str75, "MathcerRefBuilder: null");
        org.junit.Assert.assertNotNull(matcherRefBuilder77);
        org.junit.Assert.assertNotNull(builderArray78);
        org.junit.Assert.assertTrue("'" + boolean80 + "' != '" + true + "'", boolean80 == true);
        org.junit.Assert.assertNotNull(abstractBuilder81);
        org.junit.Assert.assertNotNull(abstractBuilder82);
        org.junit.Assert.assertNotNull(abstractBuilder83);
        org.junit.Assert.assertNotNull(abstractBuilder84);
        org.junit.Assert.assertNotNull(abstractBuilder85);
    }

    @Test
    public void test14831() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest29.test14831");
        org.apache.rat.report.claim.ClaimStatistic claimStatistic0 = new org.apache.rat.report.claim.ClaimStatistic();
        claimStatistic0.setNumApproved((int) (short) 10);
        java.util.Map<java.lang.String, java.lang.Integer> strMap3 = null;
        claimStatistic0.setDocumentCategoryMap(strMap3);
        java.util.Map<java.lang.String, java.lang.Integer> strMap5 = claimStatistic0.getLicenseFileNameMap();
        claimStatistic0.setNumUnknown((int) (byte) -1);
        claimStatistic0.setNumUnknown(30);
        int int10 = claimStatistic0.getNumUnknown();
        int int11 = claimStatistic0.getNumUnApproved();
        int int12 = claimStatistic0.getNumApproved();
        java.util.Map<java.lang.String, java.lang.Integer> strMap13 = claimStatistic0.getLicenseFileCodeMap();
        java.util.Map<java.lang.String, java.lang.Integer> strMap14 = claimStatistic0.getLicenseFileNameMap();
        java.util.Map<java.lang.String, java.lang.Integer> strMap15 = null;
        claimStatistic0.setLicenseFileCodeMap(strMap15);
        claimStatistic0.setNumApproved((int) ' ');
        org.junit.Assert.assertNull(strMap5);
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + 30 + "'", int10 == 30);
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 0 + "'", int11 == 0);
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + 10 + "'", int12 == 10);
        org.junit.Assert.assertNull(strMap13);
        org.junit.Assert.assertNull(strMap14);
    }

    @Test
    public void test14832() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest29.test14832");
        org.apache.rat.analysis.license.FullTextMatchingLicense fullTextMatchingLicense0 = new org.apache.rat.analysis.license.FullTextMatchingLicense();
        fullTextMatchingLicense0.setLicenseFamilyName("hi!");
        java.lang.String str3 = fullTextMatchingLicense0.getLicenseFamilyCategory();
        java.lang.String str4 = fullTextMatchingLicense0.getLicenseFamilyName();
        fullTextMatchingLicense0.setLicenseFamilyName("http://org/apache/rat/meta-data#LicenseFamilyName");
        fullTextMatchingLicense0.setFullText("9c36f068-9920-4c66-98c2-ba24e3dffa9c");
        fullTextMatchingLicense0.setNotes("0925e382-79b7-417a-85be-aed683d949e2");
        fullTextMatchingLicense0.setLicenseFamilyCategory("");
        java.lang.String str13 = fullTextMatchingLicense0.getLicenseFamilyCategory();
        fullTextMatchingLicense0.setLicenseFamilyName("NOTBUILDER: NULL");
        fullTextMatchingLicense0.setNotes("5b0daab8-75ce-482b-bcb3-4741d11fddf7");
        org.apache.rat.license.ILicense.Builder builder18 = fullTextMatchingLicense0.getLicense();
        org.junit.Assert.assertNull(str3);
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "hi!" + "'", str4, "hi!");
        org.junit.Assert.assertEquals("'" + str13 + "' != '" + "" + "'", str13, "");
        org.junit.Assert.assertNotNull(builder18);
    }

    @Test
    public void test14833() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest29.test14833");
        org.apache.rat.utils.Log log0 = null;
        org.apache.rat.ReportConfiguration reportConfiguration1 = new org.apache.rat.ReportConfiguration(log0);
        java.io.FilenameFilter filenameFilter2 = reportConfiguration1.getInputFileFilter();
        org.apache.rat.license.ILicense iLicense3 = null;
        reportConfiguration1.addLicense(iLicense3);
        org.apache.rat.license.ILicenseFamily iLicenseFamily5 = null;
        reportConfiguration1.addFamily(iLicenseFamily5);
        org.apache.commons.io.function.IOSupplier<java.io.InputStream> inputStreamIOSupplier7 = org.apache.rat.Defaults.getPlainStyleSheet();
        reportConfiguration1.setStyleSheet(inputStreamIOSupplier7);
        reportConfiguration1.removeApprovedLicenseCategory("ef7a8b13-64c3-4510-bb0c-dbf208e1e73f");
        java.lang.String[] strArray16 = new java.lang.String[] { "http://org/apache/rat/meta-data#LicenseFamilyCategory", "Datum [ name ='http://org/apache/rat/meta-data#LicenseFamilyCategory',value ='GPL1  ']", "MANIFEST.MF", "AllBuilder:", "The MIT License" };
        org.apache.rat.utils.ReportingSet<java.lang.String> strSet17 = new org.apache.rat.utils.ReportingSet<java.lang.String>();
        boolean boolean18 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strSet17, strArray16);
        boolean boolean20 = strSet17.addIfNotPresent("http://org/apache/rat/meta-data#LicenseFamilyName");
        boolean boolean22 = strSet17.addIfNotPresent("ef7a8b13-64c3-4510-bb0c-dbf208e1e73f");
        java.util.function.Function<java.lang.String, java.lang.String> strFunction23 = null;
        org.apache.rat.utils.ReportingSet<java.lang.String> strSet24 = strSet17.setMsgFormat(strFunction23);
        java.lang.String str25 = strSet24.first();
        reportConfiguration1.removeApprovedLicenseCategories((java.util.Collection<java.lang.String>) strSet24);
        java.lang.Object[] objArray27 = strSet24.toArray();
        boolean boolean29 = strSet24.add("TextBuilder: true http://org/apache/rat/meta-data#LicenseFamilyName");
        boolean boolean31 = strSet24.addIfNotPresent("Copyright Builder: s:6481fb19-38f0-43f5-ab95-caf84a069ee1 e:null o:null");
        boolean boolean32 = strSet24.isEmpty();
        org.junit.Assert.assertNull(filenameFilter2);
        org.junit.Assert.assertNotNull(inputStreamIOSupplier7);
        org.junit.Assert.assertNotNull(strArray16);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + true + "'", boolean18 == true);
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + true + "'", boolean20 == true);
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + true + "'", boolean22 == true);
        org.junit.Assert.assertNotNull(strSet24);
        org.junit.Assert.assertEquals("'" + str25 + "' != '" + "AllBuilder:" + "'", str25, "AllBuilder:");
        org.junit.Assert.assertNotNull(objArray27);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray27), "[AllBuilder:, Datum [ name ='http://org/apache/rat/meta-data#LicenseFamilyCategory',value ='GPL1  '], MANIFEST.MF, The MIT License, ef7a8b13-64c3-4510-bb0c-dbf208e1e73f, http://org/apache/rat/meta-data#LicenseFamilyCategory, http://org/apache/rat/meta-data#LicenseFamilyName]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray27), "[AllBuilder:, Datum [ name ='http://org/apache/rat/meta-data#LicenseFamilyCategory',value ='GPL1  '], MANIFEST.MF, The MIT License, ef7a8b13-64c3-4510-bb0c-dbf208e1e73f, http://org/apache/rat/meta-data#LicenseFamilyCategory, http://org/apache/rat/meta-data#LicenseFamilyName]");
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + true + "'", boolean29 == true);
        org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + true + "'", boolean31 == true);
        org.junit.Assert.assertTrue("'" + boolean32 + "' != '" + false + "'", boolean32 == false);
    }

    @Test
    public void test14834() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest29.test14834");
        org.apache.rat.analysis.matchers.SimpleTextMatcher simpleTextMatcher1 = new org.apache.rat.analysis.matchers.SimpleTextMatcher("binary");
        simpleTextMatcher1.reset();
        java.lang.String str3 = simpleTextMatcher1.getId();
        org.apache.rat.analysis.IHeaderMatcher.State state4 = simpleTextMatcher1.currentState();
        boolean boolean6 = simpleTextMatcher1.doMatch("a023dc4d-fa59-495e-8a26-ea366aed4ae0");
        org.apache.rat.analysis.matchers.NotMatcher notMatcher7 = new org.apache.rat.analysis.matchers.NotMatcher((org.apache.rat.analysis.IHeaderMatcher) simpleTextMatcher1);
        org.apache.rat.analysis.IHeaderMatcher.State state8 = simpleTextMatcher1.currentState();
// flaky:         org.junit.Assert.assertEquals("'" + str3 + "' != '" + "41a5cf04-8afd-46c9-b0ee-362ab4b0087d" + "'", str3, "41a5cf04-8afd-46c9-b0ee-362ab4b0087d");
        org.junit.Assert.assertTrue("'" + state4 + "' != '" + org.apache.rat.analysis.IHeaderMatcher.State.i + "'", state4.equals(org.apache.rat.analysis.IHeaderMatcher.State.i));
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertTrue("'" + state8 + "' != '" + org.apache.rat.analysis.IHeaderMatcher.State.i + "'", state8.equals(org.apache.rat.analysis.IHeaderMatcher.State.i));
    }

    @Test
    public void test14835() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest29.test14835");
        org.apache.rat.report.claim.ClaimStatistic claimStatistic0 = new org.apache.rat.report.claim.ClaimStatistic();
        claimStatistic0.setNumApproved((int) (short) 10);
        java.util.Map<java.lang.String, java.lang.Integer> strMap3 = null;
        claimStatistic0.setDocumentCategoryMap(strMap3);
        java.util.Map<java.lang.String, java.lang.Integer> strMap5 = claimStatistic0.getLicenseFileNameMap();
        claimStatistic0.setNumUnknown((int) (byte) -1);
        java.util.Map<java.lang.String, java.lang.Integer> strMap8 = claimStatistic0.getLicenseFileCodeMap();
        int int9 = claimStatistic0.getNumGenerated();
        java.util.Map<java.lang.String, java.lang.Integer> strMap10 = claimStatistic0.getLicenseFileCodeMap();
        org.junit.Assert.assertNull(strMap5);
        org.junit.Assert.assertNull(strMap8);
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + 0 + "'", int9 == 0);
        org.junit.Assert.assertNull(strMap10);
    }

    @Test
    public void test14836() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest29.test14836");
        org.apache.rat.utils.Log log0 = null;
        org.apache.rat.ReportConfiguration reportConfiguration1 = new org.apache.rat.ReportConfiguration(log0);
        java.io.FilenameFilter filenameFilter2 = reportConfiguration1.getInputFileFilter();
        org.apache.rat.license.LicenseSetFactory.LicenseFilter licenseFilter3 = org.apache.rat.license.LicenseSetFactory.LicenseFilter.all;
        java.util.SortedSet<org.apache.rat.license.ILicense> iLicenseSet4 = reportConfiguration1.getLicenses(licenseFilter3);
        org.apache.commons.io.function.IOSupplier<java.io.OutputStream> outputStreamIOSupplier5 = reportConfiguration1.getOutput();
        org.junit.Assert.assertNull(filenameFilter2);
        org.junit.Assert.assertTrue("'" + licenseFilter3 + "' != '" + org.apache.rat.license.LicenseSetFactory.LicenseFilter.all + "'", licenseFilter3.equals(org.apache.rat.license.LicenseSetFactory.LicenseFilter.all));
        org.junit.Assert.assertNotNull(iLicenseSet4);
        org.junit.Assert.assertNotNull(outputStreamIOSupplier5);
    }

    @Test
    public void test14837() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest29.test14837");
        java.lang.String[] strArray5 = new java.lang.String[] { "http://org/apache/rat/meta-data#LicenseFamilyCategory", "Datum [ name ='http://org/apache/rat/meta-data#LicenseFamilyCategory',value ='GPL1  ']", "MANIFEST.MF", "AllBuilder:", "The MIT License" };
        org.apache.rat.utils.ReportingSet<java.lang.String> strSet6 = new org.apache.rat.utils.ReportingSet<java.lang.String>();
        boolean boolean7 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strSet6, strArray5);
        boolean boolean9 = strSet6.addIfNotPresent("http://org/apache/rat/meta-data#LicenseFamilyName");
        org.apache.rat.api.MetaData.Datum datum10 = org.apache.rat.api.MetaData.RAT_LICENSE_FAMILY_NAME_DATUM_GPL_VERSION_2;
        boolean boolean11 = strSet6.equals((java.lang.Object) datum10);
        strSet6.clear();
        java.util.Iterator<java.lang.String> strItor13 = strSet6.iterator();
        java.util.Iterator<java.lang.String> strItor14 = strSet6.iterator();
        java.util.SortedSet<org.apache.rat.license.ILicenseFamily> iLicenseFamilySet16 = org.apache.rat.license.LicenseFamilySetFactory.emptyLicenseFamilySet();
        org.apache.rat.policy.DefaultPolicy defaultPolicy17 = new org.apache.rat.policy.DefaultPolicy((java.util.Collection<org.apache.rat.license.ILicenseFamily>) iLicenseFamilySet16);
        org.apache.rat.license.ILicenseFamily iLicenseFamily18 = org.apache.rat.license.LicenseFamilySetFactory.search("MANIFEST.MF", iLicenseFamilySet16);
        boolean boolean19 = strSet6.containsAll((java.util.Collection<org.apache.rat.license.ILicenseFamily>) iLicenseFamilySet16);
        java.util.stream.Stream<java.lang.String> strStream20 = strSet6.stream();
        java.util.Comparator<? super java.lang.String> wildcardComparator21 = strSet6.comparator();
        org.junit.Assert.assertNotNull(strArray5);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + true + "'", boolean7 == true);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + true + "'", boolean9 == true);
        org.junit.Assert.assertNotNull(datum10);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
        org.junit.Assert.assertNotNull(strItor13);
        org.junit.Assert.assertNotNull(strItor14);
        org.junit.Assert.assertNotNull(iLicenseFamilySet16);
        org.junit.Assert.assertNull(iLicenseFamily18);
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + true + "'", boolean19 == true);
        org.junit.Assert.assertNotNull(strStream20);
        org.junit.Assert.assertNull(wildcardComparator21);
    }

    @Test
    public void test14838() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest29.test14838");
        org.apache.rat.utils.Log log0 = null;
        org.apache.rat.ReportConfiguration reportConfiguration1 = new org.apache.rat.ReportConfiguration(log0);
        reportConfiguration1.addApprovedLicenseCategory(".cvsignore");
        org.apache.rat.utils.Log.Level level4 = org.apache.rat.utils.Log.Level.ERROR;
        reportConfiguration1.logLicenseCollisions(level4);
        reportConfiguration1.addApprovedLicenseCategory("73fbee1b-7ed9-442a-968e-b2b525ca688f");
        org.apache.rat.utils.Log log8 = null;
        org.apache.rat.ReportConfiguration reportConfiguration9 = new org.apache.rat.ReportConfiguration(log8);
        java.io.FilenameFilter filenameFilter10 = reportConfiguration9.getInputFileFilter();
        org.apache.rat.license.LicenseSetFactory.LicenseFilter licenseFilter11 = org.apache.rat.license.LicenseSetFactory.LicenseFilter.all;
        java.util.SortedSet<org.apache.rat.license.ILicense> iLicenseSet12 = reportConfiguration9.getLicenses(licenseFilter11);
        org.apache.rat.config.AddLicenseHeaders addLicenseHeaders13 = org.apache.rat.config.AddLicenseHeaders.FALSE;
        reportConfiguration9.setAddLicenseHeaders(addLicenseHeaders13);
        org.apache.rat.utils.Log log15 = null;
        org.apache.rat.ReportConfiguration reportConfiguration16 = new org.apache.rat.ReportConfiguration(log15);
        org.apache.rat.report.claim.ClaimStatistic claimStatistic17 = org.apache.rat.Reporter.report(reportConfiguration16);
        org.apache.rat.license.LicenseSetFactory.LicenseFilter licenseFilter18 = org.apache.rat.license.LicenseSetFactory.LicenseFilter.all;
        org.apache.rat.Reporter.listLicenses(reportConfiguration16, licenseFilter18);
        org.apache.rat.Reporter.listLicenses(reportConfiguration9, licenseFilter18);
        org.apache.rat.utils.Log log21 = null;
        org.apache.rat.ReportConfiguration reportConfiguration22 = new org.apache.rat.ReportConfiguration(log21);
        java.io.FilenameFilter filenameFilter23 = reportConfiguration22.getInputFileFilter();
        org.apache.rat.license.LicenseSetFactory.LicenseFilter licenseFilter24 = org.apache.rat.license.LicenseSetFactory.LicenseFilter.all;
        java.util.SortedSet<org.apache.rat.license.ILicense> iLicenseSet25 = reportConfiguration22.getLicenses(licenseFilter24);
        org.apache.rat.config.AddLicenseHeaders addLicenseHeaders26 = org.apache.rat.config.AddLicenseHeaders.FALSE;
        reportConfiguration22.setAddLicenseHeaders(addLicenseHeaders26);
        org.apache.rat.utils.Log log28 = null;
        org.apache.rat.ReportConfiguration reportConfiguration29 = new org.apache.rat.ReportConfiguration(log28);
        org.apache.rat.report.claim.ClaimStatistic claimStatistic30 = org.apache.rat.Reporter.report(reportConfiguration29);
        org.apache.rat.license.LicenseSetFactory.LicenseFilter licenseFilter31 = org.apache.rat.license.LicenseSetFactory.LicenseFilter.all;
        org.apache.rat.Reporter.listLicenses(reportConfiguration29, licenseFilter31);
        org.apache.rat.Reporter.listLicenses(reportConfiguration22, licenseFilter31);
        org.apache.rat.Reporter.listLicenses(reportConfiguration9, licenseFilter31);
        java.io.FilenameFilter filenameFilter35 = reportConfiguration9.getInputFileFilter();
        reportConfiguration9.setStyleReport(false);
        org.apache.rat.report.IReportable iReportable38 = null;
        reportConfiguration9.setReportable(iReportable38);
        org.apache.rat.Defaults.Builder builder41 = org.apache.rat.Defaults.builder();
        org.apache.rat.Defaults defaults42 = builder41.build();
        org.apache.rat.utils.Log log43 = null;
        org.apache.rat.ReportConfiguration reportConfiguration44 = new org.apache.rat.ReportConfiguration(log43);
        java.io.FilenameFilter filenameFilter45 = reportConfiguration44.getInputFileFilter();
        org.apache.rat.license.LicenseSetFactory.LicenseFilter licenseFilter46 = org.apache.rat.license.LicenseSetFactory.LicenseFilter.all;
        java.util.SortedSet<org.apache.rat.license.ILicense> iLicenseSet47 = reportConfiguration44.getLicenses(licenseFilter46);
        org.apache.rat.config.AddLicenseHeaders addLicenseHeaders48 = org.apache.rat.config.AddLicenseHeaders.FALSE;
        reportConfiguration44.setAddLicenseHeaders(addLicenseHeaders48);
        org.apache.rat.utils.Log log50 = null;
        org.apache.rat.ReportConfiguration reportConfiguration51 = new org.apache.rat.ReportConfiguration(log50);
        org.apache.rat.report.claim.ClaimStatistic claimStatistic52 = org.apache.rat.Reporter.report(reportConfiguration51);
        org.apache.rat.license.LicenseSetFactory.LicenseFilter licenseFilter53 = org.apache.rat.license.LicenseSetFactory.LicenseFilter.all;
        org.apache.rat.Reporter.listLicenses(reportConfiguration51, licenseFilter53);
        org.apache.rat.Reporter.listLicenses(reportConfiguration44, licenseFilter53);
        org.apache.rat.utils.Log log56 = null;
        org.apache.rat.ReportConfiguration reportConfiguration57 = new org.apache.rat.ReportConfiguration(log56);
        java.io.FilenameFilter filenameFilter58 = reportConfiguration57.getInputFileFilter();
        org.apache.rat.license.LicenseSetFactory.LicenseFilter licenseFilter59 = org.apache.rat.license.LicenseSetFactory.LicenseFilter.all;
        java.util.SortedSet<org.apache.rat.license.ILicense> iLicenseSet60 = reportConfiguration57.getLicenses(licenseFilter59);
        org.apache.rat.config.AddLicenseHeaders addLicenseHeaders61 = org.apache.rat.config.AddLicenseHeaders.FALSE;
        reportConfiguration57.setAddLicenseHeaders(addLicenseHeaders61);
        org.apache.rat.utils.Log log63 = null;
        org.apache.rat.ReportConfiguration reportConfiguration64 = new org.apache.rat.ReportConfiguration(log63);
        org.apache.rat.report.claim.ClaimStatistic claimStatistic65 = org.apache.rat.Reporter.report(reportConfiguration64);
        org.apache.rat.license.LicenseSetFactory.LicenseFilter licenseFilter66 = org.apache.rat.license.LicenseSetFactory.LicenseFilter.all;
        org.apache.rat.Reporter.listLicenses(reportConfiguration64, licenseFilter66);
        org.apache.rat.Reporter.listLicenses(reportConfiguration57, licenseFilter66);
        java.util.SortedSet<org.apache.rat.license.ILicenseFamily> iLicenseFamilySet69 = reportConfiguration44.getLicenseFamilies(licenseFilter66);
        java.util.SortedSet<org.apache.rat.license.ILicense> iLicenseSet70 = defaults42.getLicenses(licenseFilter66);
        org.apache.rat.utils.ReportingSet<org.apache.rat.license.ILicense> iLicenseSet71 = new org.apache.rat.utils.ReportingSet<org.apache.rat.license.ILicense>(iLicenseSet70);
        org.apache.rat.license.ILicense iLicense72 = org.apache.rat.license.LicenseSetFactory.search("TMF", iLicenseSet70);
        reportConfiguration9.addLicense(iLicense72);
        java.lang.String str74 = iLicense72.derivedFrom();
        reportConfiguration1.addLicense(iLicense72);
        java.lang.String str76 = iLicense72.getName();
        java.lang.String str77 = iLicense72.derivedFrom();
        java.lang.String str78 = iLicense72.getName();
        java.lang.String str79 = iLicense72.getNotes();
        java.lang.String str80 = iLicense72.getNotes();
        java.lang.String str81 = iLicense72.derivedFrom();
        org.junit.Assert.assertTrue("'" + level4 + "' != '" + org.apache.rat.utils.Log.Level.ERROR + "'", level4.equals(org.apache.rat.utils.Log.Level.ERROR));
        org.junit.Assert.assertNull(filenameFilter10);
        org.junit.Assert.assertTrue("'" + licenseFilter11 + "' != '" + org.apache.rat.license.LicenseSetFactory.LicenseFilter.all + "'", licenseFilter11.equals(org.apache.rat.license.LicenseSetFactory.LicenseFilter.all));
        org.junit.Assert.assertNotNull(iLicenseSet12);
        org.junit.Assert.assertTrue("'" + addLicenseHeaders13 + "' != '" + org.apache.rat.config.AddLicenseHeaders.FALSE + "'", addLicenseHeaders13.equals(org.apache.rat.config.AddLicenseHeaders.FALSE));
        org.junit.Assert.assertNull(claimStatistic17);
        org.junit.Assert.assertTrue("'" + licenseFilter18 + "' != '" + org.apache.rat.license.LicenseSetFactory.LicenseFilter.all + "'", licenseFilter18.equals(org.apache.rat.license.LicenseSetFactory.LicenseFilter.all));
        org.junit.Assert.assertNull(filenameFilter23);
        org.junit.Assert.assertTrue("'" + licenseFilter24 + "' != '" + org.apache.rat.license.LicenseSetFactory.LicenseFilter.all + "'", licenseFilter24.equals(org.apache.rat.license.LicenseSetFactory.LicenseFilter.all));
        org.junit.Assert.assertNotNull(iLicenseSet25);
        org.junit.Assert.assertTrue("'" + addLicenseHeaders26 + "' != '" + org.apache.rat.config.AddLicenseHeaders.FALSE + "'", addLicenseHeaders26.equals(org.apache.rat.config.AddLicenseHeaders.FALSE));
        org.junit.Assert.assertNull(claimStatistic30);
        org.junit.Assert.assertTrue("'" + licenseFilter31 + "' != '" + org.apache.rat.license.LicenseSetFactory.LicenseFilter.all + "'", licenseFilter31.equals(org.apache.rat.license.LicenseSetFactory.LicenseFilter.all));
        org.junit.Assert.assertNull(filenameFilter35);
        org.junit.Assert.assertNotNull(builder41);
        org.junit.Assert.assertNotNull(defaults42);
        org.junit.Assert.assertNull(filenameFilter45);
        org.junit.Assert.assertTrue("'" + licenseFilter46 + "' != '" + org.apache.rat.license.LicenseSetFactory.LicenseFilter.all + "'", licenseFilter46.equals(org.apache.rat.license.LicenseSetFactory.LicenseFilter.all));
        org.junit.Assert.assertNotNull(iLicenseSet47);
        org.junit.Assert.assertTrue("'" + addLicenseHeaders48 + "' != '" + org.apache.rat.config.AddLicenseHeaders.FALSE + "'", addLicenseHeaders48.equals(org.apache.rat.config.AddLicenseHeaders.FALSE));
        org.junit.Assert.assertNull(claimStatistic52);
        org.junit.Assert.assertTrue("'" + licenseFilter53 + "' != '" + org.apache.rat.license.LicenseSetFactory.LicenseFilter.all + "'", licenseFilter53.equals(org.apache.rat.license.LicenseSetFactory.LicenseFilter.all));
        org.junit.Assert.assertNull(filenameFilter58);
        org.junit.Assert.assertTrue("'" + licenseFilter59 + "' != '" + org.apache.rat.license.LicenseSetFactory.LicenseFilter.all + "'", licenseFilter59.equals(org.apache.rat.license.LicenseSetFactory.LicenseFilter.all));
        org.junit.Assert.assertNotNull(iLicenseSet60);
        org.junit.Assert.assertTrue("'" + addLicenseHeaders61 + "' != '" + org.apache.rat.config.AddLicenseHeaders.FALSE + "'", addLicenseHeaders61.equals(org.apache.rat.config.AddLicenseHeaders.FALSE));
        org.junit.Assert.assertNull(claimStatistic65);
        org.junit.Assert.assertTrue("'" + licenseFilter66 + "' != '" + org.apache.rat.license.LicenseSetFactory.LicenseFilter.all + "'", licenseFilter66.equals(org.apache.rat.license.LicenseSetFactory.LicenseFilter.all));
        org.junit.Assert.assertNotNull(iLicenseFamilySet69);
        org.junit.Assert.assertNotNull(iLicenseSet70);
        org.junit.Assert.assertNotNull(iLicense72);
        org.junit.Assert.assertEquals("'" + str74 + "' != '" + "BSD-3" + "'", str74, "BSD-3");
        org.junit.Assert.assertEquals("'" + str76 + "' != '" + "The Telemanagement Forum License" + "'", str76, "The Telemanagement Forum License");
        org.junit.Assert.assertEquals("'" + str77 + "' != '" + "BSD-3" + "'", str77, "BSD-3");
        org.junit.Assert.assertEquals("'" + str78 + "' != '" + "The Telemanagement Forum License" + "'", str78, "The Telemanagement Forum License");
        org.junit.Assert.assertNull(str79);
        org.junit.Assert.assertNull(str80);
        org.junit.Assert.assertEquals("'" + str81 + "' != '" + "BSD-3" + "'", str81, "BSD-3");
    }

    @Test
    public void test14839() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest29.test14839");
        org.apache.rat.license.ILicense.Builder builder0 = org.apache.rat.license.ILicense.builder();
        org.apache.rat.license.ILicense.Builder builder2 = builder0.setLicenseFamilyCategory("");
        org.apache.rat.analysis.matchers.FullTextMatcher fullTextMatcher4 = new org.apache.rat.analysis.matchers.FullTextMatcher("ef7a8b13-64c3-4510-bb0c-dbf208e1e73f");
        org.apache.rat.license.ILicense.Builder builder5 = builder0.setMatcher((org.apache.rat.analysis.IHeaderMatcher) fullTextMatcher4);
        java.util.regex.Pattern pattern7 = null;
        org.apache.rat.analysis.matchers.SimpleRegexMatcher simpleRegexMatcher8 = new org.apache.rat.analysis.matchers.SimpleRegexMatcher("", pattern7);
        java.lang.String str9 = simpleRegexMatcher8.toString();
        simpleRegexMatcher8.reset();
        java.lang.String str11 = simpleRegexMatcher8.getId();
        org.apache.rat.license.ILicense.Builder builder12 = builder5.setMatcher((org.apache.rat.analysis.IHeaderMatcher) simpleRegexMatcher8);
        org.apache.rat.license.ILicense.Builder builder14 = builder5.setId("d25f13bc-1910-4451-97b5-b72663551a5d");
        org.apache.rat.analysis.matchers.CopyrightMatcher copyrightMatcher19 = new org.apache.rat.analysis.matchers.CopyrightMatcher("Datum [ name ='http://org/apache/rat/meta-data#LicenseFamilyName',value ='COMMON DEVELOPMENT AND DISTRIBUTION LICENSE Version 1.0 ']", "804cbd55-d8ca-4b15-b3a8-d94b4c47af38", "725f33f3-3304-4bfa-b1c1-c226b58a407e", "TextBuilder223f0aba15d449e99");
        org.apache.rat.license.ILicense.Builder builder20 = builder14.setMatcher((org.apache.rat.analysis.IHeaderMatcher) copyrightMatcher19);
        org.apache.rat.analysis.IHeaderMatcher.State state22 = copyrightMatcher19.matches("");
        java.lang.String str23 = copyrightMatcher19.getId();
        org.junit.Assert.assertNotNull(builder0);
        org.junit.Assert.assertNotNull(builder2);
        org.junit.Assert.assertNotNull(builder5);
// flaky:         org.junit.Assert.assertEquals("'" + str9 + "' != '" + "a106e6e1-eb3f-4c36-a5dd-4cb4876aff5a" + "'", str9, "a106e6e1-eb3f-4c36-a5dd-4cb4876aff5a");
// flaky:         org.junit.Assert.assertEquals("'" + str11 + "' != '" + "a106e6e1-eb3f-4c36-a5dd-4cb4876aff5a" + "'", str11, "a106e6e1-eb3f-4c36-a5dd-4cb4876aff5a");
        org.junit.Assert.assertNotNull(builder12);
        org.junit.Assert.assertNotNull(builder14);
        org.junit.Assert.assertNotNull(builder20);
        org.junit.Assert.assertTrue("'" + state22 + "' != '" + org.apache.rat.analysis.IHeaderMatcher.State.i + "'", state22.equals(org.apache.rat.analysis.IHeaderMatcher.State.i));
        org.junit.Assert.assertEquals("'" + str23 + "' != '" + "Datum [ name ='http://org/apache/rat/meta-data#LicenseFamilyName',value ='COMMON DEVELOPMENT AND DISTRIBUTION LICENSE Version 1.0 ']" + "'", str23, "Datum [ name ='http://org/apache/rat/meta-data#LicenseFamilyName',value ='COMMON DEVELOPMENT AND DISTRIBUTION LICENSE Version 1.0 ']");
    }

    @Test
    public void test14840() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest29.test14840");
        org.apache.rat.analysis.matchers.SimpleTextMatcher simpleTextMatcher1 = new org.apache.rat.analysis.matchers.SimpleTextMatcher("binary");
        simpleTextMatcher1.reset();
        java.lang.String str3 = simpleTextMatcher1.getId();
        org.apache.rat.analysis.IHeaderMatcher.State state4 = simpleTextMatcher1.currentState();
        boolean boolean6 = simpleTextMatcher1.doMatch("a023dc4d-fa59-495e-8a26-ea366aed4ae0");
        org.apache.rat.analysis.matchers.NotMatcher notMatcher7 = new org.apache.rat.analysis.matchers.NotMatcher((org.apache.rat.analysis.IHeaderMatcher) simpleTextMatcher1);
        simpleTextMatcher1.reset();
        simpleTextMatcher1.reset();
        boolean boolean11 = simpleTextMatcher1.doMatch("beea85bc-3b0c-4f6c-8662-b113e5b0e750");
        org.apache.rat.analysis.IHeaderMatcher.State state12 = simpleTextMatcher1.currentState();
// flaky:         org.junit.Assert.assertEquals("'" + str3 + "' != '" + "53534d2f-c38c-4325-84f0-3f6eb37b72c4" + "'", str3, "53534d2f-c38c-4325-84f0-3f6eb37b72c4");
        org.junit.Assert.assertTrue("'" + state4 + "' != '" + org.apache.rat.analysis.IHeaderMatcher.State.i + "'", state4.equals(org.apache.rat.analysis.IHeaderMatcher.State.i));
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
        org.junit.Assert.assertTrue("'" + state12 + "' != '" + org.apache.rat.analysis.IHeaderMatcher.State.i + "'", state12.equals(org.apache.rat.analysis.IHeaderMatcher.State.i));
    }

    @Test
    public void test14841() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest29.test14841");
        java.io.Writer writer0 = null;
        org.apache.rat.report.xml.writer.impl.base.XmlWriter xmlWriter1 = new org.apache.rat.report.xml.writer.impl.base.XmlWriter(writer0);
        org.apache.rat.report.claim.impl.xml.SimpleXmlClaimReporter simpleXmlClaimReporter2 = new org.apache.rat.report.claim.impl.xml.SimpleXmlClaimReporter((org.apache.rat.report.xml.writer.IXmlWriter) xmlWriter1);
        org.apache.rat.report.claim.impl.xml.SimpleXmlClaimReporter simpleXmlClaimReporter3 = new org.apache.rat.report.claim.impl.xml.SimpleXmlClaimReporter((org.apache.rat.report.xml.writer.IXmlWriter) xmlWriter1);
        org.apache.rat.report.claim.impl.xml.SimpleXmlClaimReporter simpleXmlClaimReporter4 = new org.apache.rat.report.claim.impl.xml.SimpleXmlClaimReporter((org.apache.rat.report.xml.writer.IXmlWriter) xmlWriter1);
        org.apache.rat.report.claim.impl.xml.SimpleXmlClaimReporter simpleXmlClaimReporter5 = new org.apache.rat.report.claim.impl.xml.SimpleXmlClaimReporter((org.apache.rat.report.xml.writer.IXmlWriter) xmlWriter1);
        org.apache.rat.report.claim.impl.xml.SimpleXmlClaimReporter simpleXmlClaimReporter6 = new org.apache.rat.report.claim.impl.xml.SimpleXmlClaimReporter((org.apache.rat.report.xml.writer.IXmlWriter) xmlWriter1);
        org.apache.rat.report.claim.impl.xml.SimpleXmlClaimReporter simpleXmlClaimReporter7 = new org.apache.rat.report.claim.impl.xml.SimpleXmlClaimReporter((org.apache.rat.report.xml.writer.IXmlWriter) xmlWriter1);
        org.apache.rat.report.claim.impl.xml.SimpleXmlClaimReporter simpleXmlClaimReporter8 = new org.apache.rat.report.claim.impl.xml.SimpleXmlClaimReporter((org.apache.rat.report.xml.writer.IXmlWriter) xmlWriter1);
        org.apache.rat.report.claim.impl.xml.SimpleXmlClaimReporter simpleXmlClaimReporter9 = new org.apache.rat.report.claim.impl.xml.SimpleXmlClaimReporter((org.apache.rat.report.xml.writer.IXmlWriter) xmlWriter1);
        org.apache.rat.report.claim.impl.xml.SimpleXmlClaimReporter simpleXmlClaimReporter10 = new org.apache.rat.report.claim.impl.xml.SimpleXmlClaimReporter((org.apache.rat.report.xml.writer.IXmlWriter) xmlWriter1);
        org.apache.rat.report.claim.impl.xml.SimpleXmlClaimReporter simpleXmlClaimReporter11 = new org.apache.rat.report.claim.impl.xml.SimpleXmlClaimReporter((org.apache.rat.report.xml.writer.IXmlWriter) xmlWriter1);
        org.apache.rat.report.claim.impl.xml.SimpleXmlClaimReporter simpleXmlClaimReporter12 = new org.apache.rat.report.claim.impl.xml.SimpleXmlClaimReporter((org.apache.rat.report.xml.writer.IXmlWriter) xmlWriter1);
        org.apache.rat.report.claim.impl.xml.SimpleXmlClaimReporter simpleXmlClaimReporter13 = new org.apache.rat.report.claim.impl.xml.SimpleXmlClaimReporter((org.apache.rat.report.xml.writer.IXmlWriter) xmlWriter1);
        org.apache.rat.report.claim.impl.xml.SimpleXmlClaimReporter simpleXmlClaimReporter14 = new org.apache.rat.report.claim.impl.xml.SimpleXmlClaimReporter((org.apache.rat.report.xml.writer.IXmlWriter) xmlWriter1);
        org.apache.rat.report.claim.impl.xml.SimpleXmlClaimReporter simpleXmlClaimReporter15 = new org.apache.rat.report.claim.impl.xml.SimpleXmlClaimReporter((org.apache.rat.report.xml.writer.IXmlWriter) xmlWriter1);
        org.apache.rat.report.claim.impl.xml.SimpleXmlClaimReporter simpleXmlClaimReporter16 = new org.apache.rat.report.claim.impl.xml.SimpleXmlClaimReporter((org.apache.rat.report.xml.writer.IXmlWriter) xmlWriter1);
        org.apache.rat.report.claim.impl.xml.SimpleXmlClaimReporter simpleXmlClaimReporter17 = new org.apache.rat.report.claim.impl.xml.SimpleXmlClaimReporter((org.apache.rat.report.xml.writer.IXmlWriter) xmlWriter1);
        org.apache.rat.report.claim.impl.xml.SimpleXmlClaimReporter simpleXmlClaimReporter18 = new org.apache.rat.report.claim.impl.xml.SimpleXmlClaimReporter((org.apache.rat.report.xml.writer.IXmlWriter) xmlWriter1);
        // The following exception was thrown during execution in test generation
        try {
            org.apache.rat.report.xml.writer.IXmlWriter iXmlWriter21 = xmlWriter1.attribute((java.lang.CharSequence) "b7b5f434-4a9a-4c90-a9d1-b2e42bbd7b93", (java.lang.CharSequence) "APACHELICENSEVERSION20");
            org.junit.Assert.fail("Expected exception of type org.apache.rat.report.xml.writer.OperationNotAllowedException; message: Close called before an element has been opened.");
        } catch (org.apache.rat.report.xml.writer.OperationNotAllowedException e) {
            // Expected exception.
        }
    }

    @Test
    public void test14842() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest29.test14842");
        org.apache.rat.utils.Log log0 = null;
        org.apache.rat.ReportConfiguration reportConfiguration1 = new org.apache.rat.ReportConfiguration(log0);
        org.apache.rat.report.claim.ClaimStatistic claimStatistic2 = org.apache.rat.Reporter.report(reportConfiguration1);
        org.apache.rat.report.IReportable iReportable3 = null;
        reportConfiguration1.setReportable(iReportable3);
        boolean boolean5 = reportConfiguration1.isAddingLicensesForced();
        org.apache.commons.io.filefilter.IOFileFilter iOFileFilter6 = reportConfiguration1.getDirectoryFilter();
        boolean boolean7 = reportConfiguration1.isAddingLicensesForced();
        reportConfiguration1.setStyleReport(true);
        org.apache.rat.utils.Log log10 = reportConfiguration1.getLog();
        org.junit.Assert.assertNull(claimStatistic2);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertNotNull(iOFileFilter6);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertNull(log10);
    }

    @Test
    public void test14843() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest29.test14843");
        org.apache.rat.license.ILicense[] iLicenseArray1 = new org.apache.rat.license.ILicense[] {};
        java.util.TreeSet<org.apache.rat.license.ILicense> iLicenseSet2 = new java.util.TreeSet<org.apache.rat.license.ILicense>();
        boolean boolean3 = java.util.Collections.addAll((java.util.Collection<org.apache.rat.license.ILicense>) iLicenseSet2, iLicenseArray1);
        java.lang.String[] strArray16 = new java.lang.String[] { "GPL2 ", "GPL1 ", "notice", "http://org/apache/rat/meta-data#LicenseFamilyName", "notice", "GPL2 ", "http://org/apache/rat/meta-data#LicenseFamilyName", "", "GPL2 ", "", "GPL1 ", "hi!" };
        java.util.ArrayList<java.lang.String> strList17 = new java.util.ArrayList<java.lang.String>();
        boolean boolean18 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strList17, strArray16);
        org.apache.rat.license.LicenseSetFactory licenseSetFactory19 = new org.apache.rat.license.LicenseSetFactory((java.util.SortedSet<org.apache.rat.license.ILicense>) iLicenseSet2, (java.util.Collection<java.lang.String>) strList17);
        org.apache.rat.license.LicenseSetFactory.LicenseFilter licenseFilter20 = org.apache.rat.license.LicenseSetFactory.LicenseFilter.all;
        java.util.SortedSet<org.apache.rat.license.ILicenseFamily> iLicenseFamilySet21 = licenseSetFactory19.getLicenseFamilies(licenseFilter20);
        org.apache.rat.license.ILicense[] iLicenseArray22 = new org.apache.rat.license.ILicense[] {};
        java.util.TreeSet<org.apache.rat.license.ILicense> iLicenseSet23 = new java.util.TreeSet<org.apache.rat.license.ILicense>();
        boolean boolean24 = java.util.Collections.addAll((java.util.Collection<org.apache.rat.license.ILicense>) iLicenseSet23, iLicenseArray22);
        java.lang.String[] strArray37 = new java.lang.String[] { "GPL2 ", "GPL1 ", "notice", "http://org/apache/rat/meta-data#LicenseFamilyName", "notice", "GPL2 ", "http://org/apache/rat/meta-data#LicenseFamilyName", "", "GPL2 ", "", "GPL1 ", "hi!" };
        java.util.ArrayList<java.lang.String> strList38 = new java.util.ArrayList<java.lang.String>();
        boolean boolean39 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strList38, strArray37);
        org.apache.rat.license.LicenseSetFactory licenseSetFactory40 = new org.apache.rat.license.LicenseSetFactory((java.util.SortedSet<org.apache.rat.license.ILicense>) iLicenseSet23, (java.util.Collection<java.lang.String>) strList38);
        org.apache.rat.utils.Log log41 = null;
        org.apache.rat.ReportConfiguration reportConfiguration42 = new org.apache.rat.ReportConfiguration(log41);
        java.io.FilenameFilter filenameFilter43 = reportConfiguration42.getInputFileFilter();
        org.apache.rat.license.LicenseSetFactory.LicenseFilter licenseFilter44 = org.apache.rat.license.LicenseSetFactory.LicenseFilter.all;
        java.util.SortedSet<org.apache.rat.license.ILicense> iLicenseSet45 = reportConfiguration42.getLicenses(licenseFilter44);
        org.apache.rat.config.AddLicenseHeaders addLicenseHeaders46 = org.apache.rat.config.AddLicenseHeaders.FALSE;
        reportConfiguration42.setAddLicenseHeaders(addLicenseHeaders46);
        org.apache.rat.utils.Log log48 = null;
        org.apache.rat.ReportConfiguration reportConfiguration49 = new org.apache.rat.ReportConfiguration(log48);
        org.apache.rat.report.claim.ClaimStatistic claimStatistic50 = org.apache.rat.Reporter.report(reportConfiguration49);
        org.apache.rat.license.LicenseSetFactory.LicenseFilter licenseFilter51 = org.apache.rat.license.LicenseSetFactory.LicenseFilter.all;
        org.apache.rat.Reporter.listLicenses(reportConfiguration49, licenseFilter51);
        org.apache.rat.Reporter.listLicenses(reportConfiguration42, licenseFilter51);
        org.apache.rat.utils.Log log54 = null;
        org.apache.rat.ReportConfiguration reportConfiguration55 = new org.apache.rat.ReportConfiguration(log54);
        java.io.FilenameFilter filenameFilter56 = reportConfiguration55.getInputFileFilter();
        org.apache.rat.license.LicenseSetFactory.LicenseFilter licenseFilter57 = org.apache.rat.license.LicenseSetFactory.LicenseFilter.all;
        java.util.SortedSet<org.apache.rat.license.ILicense> iLicenseSet58 = reportConfiguration55.getLicenses(licenseFilter57);
        org.apache.rat.config.AddLicenseHeaders addLicenseHeaders59 = org.apache.rat.config.AddLicenseHeaders.FALSE;
        reportConfiguration55.setAddLicenseHeaders(addLicenseHeaders59);
        org.apache.rat.utils.Log log61 = null;
        org.apache.rat.ReportConfiguration reportConfiguration62 = new org.apache.rat.ReportConfiguration(log61);
        org.apache.rat.report.claim.ClaimStatistic claimStatistic63 = org.apache.rat.Reporter.report(reportConfiguration62);
        org.apache.rat.license.LicenseSetFactory.LicenseFilter licenseFilter64 = org.apache.rat.license.LicenseSetFactory.LicenseFilter.all;
        org.apache.rat.Reporter.listLicenses(reportConfiguration62, licenseFilter64);
        org.apache.rat.Reporter.listLicenses(reportConfiguration55, licenseFilter64);
        org.apache.rat.Reporter.listLicenses(reportConfiguration42, licenseFilter64);
        java.util.SortedSet<org.apache.rat.license.ILicense> iLicenseSet68 = licenseSetFactory40.getLicenses(licenseFilter64);
        java.util.SortedSet<org.apache.rat.license.ILicenseFamily> iLicenseFamilySet69 = licenseSetFactory19.getLicenseFamilies(licenseFilter64);
        org.apache.rat.policy.DefaultPolicy defaultPolicy70 = new org.apache.rat.policy.DefaultPolicy((java.util.Collection<org.apache.rat.license.ILicenseFamily>) iLicenseFamilySet69);
        org.apache.rat.license.ILicenseFamily iLicenseFamily71 = org.apache.rat.license.LicenseFamilySetFactory.search("The MIT License", iLicenseFamilySet69);
        org.apache.rat.policy.DefaultPolicy defaultPolicy72 = new org.apache.rat.policy.DefaultPolicy((java.util.Collection<org.apache.rat.license.ILicenseFamily>) iLicenseFamilySet69);
        org.junit.Assert.assertNotNull(iLicenseArray1);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertNotNull(strArray16);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + true + "'", boolean18 == true);
        org.junit.Assert.assertTrue("'" + licenseFilter20 + "' != '" + org.apache.rat.license.LicenseSetFactory.LicenseFilter.all + "'", licenseFilter20.equals(org.apache.rat.license.LicenseSetFactory.LicenseFilter.all));
        org.junit.Assert.assertNotNull(iLicenseFamilySet21);
        org.junit.Assert.assertNotNull(iLicenseArray22);
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + false + "'", boolean24 == false);
        org.junit.Assert.assertNotNull(strArray37);
        org.junit.Assert.assertTrue("'" + boolean39 + "' != '" + true + "'", boolean39 == true);
        org.junit.Assert.assertNull(filenameFilter43);
        org.junit.Assert.assertTrue("'" + licenseFilter44 + "' != '" + org.apache.rat.license.LicenseSetFactory.LicenseFilter.all + "'", licenseFilter44.equals(org.apache.rat.license.LicenseSetFactory.LicenseFilter.all));
        org.junit.Assert.assertNotNull(iLicenseSet45);
        org.junit.Assert.assertTrue("'" + addLicenseHeaders46 + "' != '" + org.apache.rat.config.AddLicenseHeaders.FALSE + "'", addLicenseHeaders46.equals(org.apache.rat.config.AddLicenseHeaders.FALSE));
        org.junit.Assert.assertNull(claimStatistic50);
        org.junit.Assert.assertTrue("'" + licenseFilter51 + "' != '" + org.apache.rat.license.LicenseSetFactory.LicenseFilter.all + "'", licenseFilter51.equals(org.apache.rat.license.LicenseSetFactory.LicenseFilter.all));
        org.junit.Assert.assertNull(filenameFilter56);
        org.junit.Assert.assertTrue("'" + licenseFilter57 + "' != '" + org.apache.rat.license.LicenseSetFactory.LicenseFilter.all + "'", licenseFilter57.equals(org.apache.rat.license.LicenseSetFactory.LicenseFilter.all));
        org.junit.Assert.assertNotNull(iLicenseSet58);
        org.junit.Assert.assertTrue("'" + addLicenseHeaders59 + "' != '" + org.apache.rat.config.AddLicenseHeaders.FALSE + "'", addLicenseHeaders59.equals(org.apache.rat.config.AddLicenseHeaders.FALSE));
        org.junit.Assert.assertNull(claimStatistic63);
        org.junit.Assert.assertTrue("'" + licenseFilter64 + "' != '" + org.apache.rat.license.LicenseSetFactory.LicenseFilter.all + "'", licenseFilter64.equals(org.apache.rat.license.LicenseSetFactory.LicenseFilter.all));
        org.junit.Assert.assertNotNull(iLicenseSet68);
        org.junit.Assert.assertNotNull(iLicenseFamilySet69);
        org.junit.Assert.assertNull(iLicenseFamily71);
    }

    @Test
    public void test14844() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest29.test14844");
        org.apache.rat.configuration.builders.SpdxBuilder spdxBuilder0 = org.apache.rat.analysis.IHeaderMatcher.Builder.spdx();
        java.lang.String str1 = spdxBuilder0.toString();
        org.apache.rat.configuration.builders.SpdxBuilder spdxBuilder3 = spdxBuilder0.setName("ef7a8b13-64c3-4510-bb0c-dbf208e1e73f");
        org.apache.rat.analysis.IHeaderMatcher iHeaderMatcher4 = spdxBuilder0.build();
        org.apache.rat.configuration.builders.SpdxBuilder spdxBuilder6 = spdxBuilder0.setName("641dafc1-13c3-45d4-8272-f36f10392c53");
        org.apache.rat.configuration.builders.AbstractBuilder abstractBuilder8 = spdxBuilder6.setId("f02d0cdc36424583b71fdd84a120752c");
        org.apache.rat.analysis.IHeaderMatcher iHeaderMatcher9 = spdxBuilder6.build();
        org.apache.rat.configuration.builders.SpdxBuilder spdxBuilder11 = spdxBuilder6.setName("e15853fc-6f47-4f3f-a346-63fe009915e5");
        java.lang.String str12 = spdxBuilder6.toString();
        org.junit.Assert.assertNotNull(spdxBuilder0);
        org.junit.Assert.assertEquals("'" + str1 + "' != '" + "SpdxBuilder: null" + "'", str1, "SpdxBuilder: null");
        org.junit.Assert.assertNotNull(spdxBuilder3);
        org.junit.Assert.assertNotNull(iHeaderMatcher4);
        org.junit.Assert.assertNotNull(spdxBuilder6);
        org.junit.Assert.assertNotNull(abstractBuilder8);
        org.junit.Assert.assertNotNull(iHeaderMatcher9);
        org.junit.Assert.assertNotNull(spdxBuilder11);
        org.junit.Assert.assertEquals("'" + str12 + "' != '" + "SpdxBuilder: e15853fc-6f47-4f3f-a346-63fe009915e5" + "'", str12, "SpdxBuilder: e15853fc-6f47-4f3f-a346-63fe009915e5");
    }

    @Test
    public void test14845() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest29.test14845");
        org.apache.rat.utils.Log log0 = null;
        org.apache.rat.ReportConfiguration reportConfiguration1 = new org.apache.rat.ReportConfiguration(log0);
        java.io.FilenameFilter filenameFilter2 = reportConfiguration1.getInputFileFilter();
        org.apache.rat.license.LicenseSetFactory.LicenseFilter licenseFilter3 = org.apache.rat.license.LicenseSetFactory.LicenseFilter.all;
        java.util.SortedSet<org.apache.rat.license.ILicense> iLicenseSet4 = reportConfiguration1.getLicenses(licenseFilter3);
        org.apache.rat.config.AddLicenseHeaders addLicenseHeaders5 = org.apache.rat.config.AddLicenseHeaders.FALSE;
        reportConfiguration1.setAddLicenseHeaders(addLicenseHeaders5);
        org.apache.rat.utils.Log log7 = null;
        org.apache.rat.ReportConfiguration reportConfiguration8 = new org.apache.rat.ReportConfiguration(log7);
        org.apache.rat.report.claim.ClaimStatistic claimStatistic9 = org.apache.rat.Reporter.report(reportConfiguration8);
        org.apache.rat.license.LicenseSetFactory.LicenseFilter licenseFilter10 = org.apache.rat.license.LicenseSetFactory.LicenseFilter.all;
        org.apache.rat.Reporter.listLicenses(reportConfiguration8, licenseFilter10);
        org.apache.rat.Reporter.listLicenses(reportConfiguration1, licenseFilter10);
        org.apache.rat.utils.Log log13 = null;
        org.apache.rat.ReportConfiguration reportConfiguration14 = new org.apache.rat.ReportConfiguration(log13);
        java.io.FilenameFilter filenameFilter15 = reportConfiguration14.getInputFileFilter();
        org.apache.rat.license.LicenseSetFactory.LicenseFilter licenseFilter16 = org.apache.rat.license.LicenseSetFactory.LicenseFilter.all;
        java.util.SortedSet<org.apache.rat.license.ILicense> iLicenseSet17 = reportConfiguration14.getLicenses(licenseFilter16);
        org.apache.rat.config.AddLicenseHeaders addLicenseHeaders18 = org.apache.rat.config.AddLicenseHeaders.FALSE;
        reportConfiguration14.setAddLicenseHeaders(addLicenseHeaders18);
        org.apache.rat.utils.Log log20 = null;
        org.apache.rat.ReportConfiguration reportConfiguration21 = new org.apache.rat.ReportConfiguration(log20);
        org.apache.rat.report.claim.ClaimStatistic claimStatistic22 = org.apache.rat.Reporter.report(reportConfiguration21);
        org.apache.rat.license.LicenseSetFactory.LicenseFilter licenseFilter23 = org.apache.rat.license.LicenseSetFactory.LicenseFilter.all;
        org.apache.rat.Reporter.listLicenses(reportConfiguration21, licenseFilter23);
        org.apache.rat.Reporter.listLicenses(reportConfiguration14, licenseFilter23);
        org.apache.rat.Reporter.listLicenses(reportConfiguration1, licenseFilter23);
        java.io.FilenameFilter filenameFilter27 = reportConfiguration1.getInputFileFilter();
        reportConfiguration1.setStyleReport(false);
        org.apache.rat.report.IReportable iReportable30 = null;
        reportConfiguration1.setReportable(iReportable30);
        org.apache.rat.Defaults.Builder builder33 = org.apache.rat.Defaults.builder();
        org.apache.rat.Defaults defaults34 = builder33.build();
        org.apache.rat.utils.Log log35 = null;
        org.apache.rat.ReportConfiguration reportConfiguration36 = new org.apache.rat.ReportConfiguration(log35);
        java.io.FilenameFilter filenameFilter37 = reportConfiguration36.getInputFileFilter();
        org.apache.rat.license.LicenseSetFactory.LicenseFilter licenseFilter38 = org.apache.rat.license.LicenseSetFactory.LicenseFilter.all;
        java.util.SortedSet<org.apache.rat.license.ILicense> iLicenseSet39 = reportConfiguration36.getLicenses(licenseFilter38);
        org.apache.rat.config.AddLicenseHeaders addLicenseHeaders40 = org.apache.rat.config.AddLicenseHeaders.FALSE;
        reportConfiguration36.setAddLicenseHeaders(addLicenseHeaders40);
        org.apache.rat.utils.Log log42 = null;
        org.apache.rat.ReportConfiguration reportConfiguration43 = new org.apache.rat.ReportConfiguration(log42);
        org.apache.rat.report.claim.ClaimStatistic claimStatistic44 = org.apache.rat.Reporter.report(reportConfiguration43);
        org.apache.rat.license.LicenseSetFactory.LicenseFilter licenseFilter45 = org.apache.rat.license.LicenseSetFactory.LicenseFilter.all;
        org.apache.rat.Reporter.listLicenses(reportConfiguration43, licenseFilter45);
        org.apache.rat.Reporter.listLicenses(reportConfiguration36, licenseFilter45);
        org.apache.rat.utils.Log log48 = null;
        org.apache.rat.ReportConfiguration reportConfiguration49 = new org.apache.rat.ReportConfiguration(log48);
        java.io.FilenameFilter filenameFilter50 = reportConfiguration49.getInputFileFilter();
        org.apache.rat.license.LicenseSetFactory.LicenseFilter licenseFilter51 = org.apache.rat.license.LicenseSetFactory.LicenseFilter.all;
        java.util.SortedSet<org.apache.rat.license.ILicense> iLicenseSet52 = reportConfiguration49.getLicenses(licenseFilter51);
        org.apache.rat.config.AddLicenseHeaders addLicenseHeaders53 = org.apache.rat.config.AddLicenseHeaders.FALSE;
        reportConfiguration49.setAddLicenseHeaders(addLicenseHeaders53);
        org.apache.rat.utils.Log log55 = null;
        org.apache.rat.ReportConfiguration reportConfiguration56 = new org.apache.rat.ReportConfiguration(log55);
        org.apache.rat.report.claim.ClaimStatistic claimStatistic57 = org.apache.rat.Reporter.report(reportConfiguration56);
        org.apache.rat.license.LicenseSetFactory.LicenseFilter licenseFilter58 = org.apache.rat.license.LicenseSetFactory.LicenseFilter.all;
        org.apache.rat.Reporter.listLicenses(reportConfiguration56, licenseFilter58);
        org.apache.rat.Reporter.listLicenses(reportConfiguration49, licenseFilter58);
        java.util.SortedSet<org.apache.rat.license.ILicenseFamily> iLicenseFamilySet61 = reportConfiguration36.getLicenseFamilies(licenseFilter58);
        java.util.SortedSet<org.apache.rat.license.ILicense> iLicenseSet62 = defaults34.getLicenses(licenseFilter58);
        org.apache.rat.utils.ReportingSet<org.apache.rat.license.ILicense> iLicenseSet63 = new org.apache.rat.utils.ReportingSet<org.apache.rat.license.ILicense>(iLicenseSet62);
        org.apache.rat.license.ILicense iLicense64 = org.apache.rat.license.LicenseSetFactory.search("TMF", iLicenseSet62);
        reportConfiguration1.addLicense(iLicense64);
        java.lang.String str66 = iLicense64.derivedFrom();
        org.apache.rat.license.ILicenseFamily iLicenseFamily67 = iLicense64.getLicenseFamily();
        org.apache.rat.configuration.Format format68 = org.apache.rat.configuration.Format.XML;
        org.apache.rat.configuration.LicenseReader licenseReader69 = format68.licenseReader();
        java.util.SortedSet<org.apache.rat.license.ILicense> iLicenseSet70 = licenseReader69.readLicenses();
        org.apache.rat.license.ILicense iLicense71 = org.apache.rat.license.LicenseSetFactory.search(iLicense64, iLicenseSet70);
        java.lang.String str72 = iLicense64.getNotes();
        org.apache.rat.license.ILicenseFamily iLicenseFamily73 = iLicense64.getLicenseFamily();
        java.lang.String str74 = iLicense64.getNotes();
        org.junit.Assert.assertNull(filenameFilter2);
        org.junit.Assert.assertTrue("'" + licenseFilter3 + "' != '" + org.apache.rat.license.LicenseSetFactory.LicenseFilter.all + "'", licenseFilter3.equals(org.apache.rat.license.LicenseSetFactory.LicenseFilter.all));
        org.junit.Assert.assertNotNull(iLicenseSet4);
        org.junit.Assert.assertTrue("'" + addLicenseHeaders5 + "' != '" + org.apache.rat.config.AddLicenseHeaders.FALSE + "'", addLicenseHeaders5.equals(org.apache.rat.config.AddLicenseHeaders.FALSE));
        org.junit.Assert.assertNull(claimStatistic9);
        org.junit.Assert.assertTrue("'" + licenseFilter10 + "' != '" + org.apache.rat.license.LicenseSetFactory.LicenseFilter.all + "'", licenseFilter10.equals(org.apache.rat.license.LicenseSetFactory.LicenseFilter.all));
        org.junit.Assert.assertNull(filenameFilter15);
        org.junit.Assert.assertTrue("'" + licenseFilter16 + "' != '" + org.apache.rat.license.LicenseSetFactory.LicenseFilter.all + "'", licenseFilter16.equals(org.apache.rat.license.LicenseSetFactory.LicenseFilter.all));
        org.junit.Assert.assertNotNull(iLicenseSet17);
        org.junit.Assert.assertTrue("'" + addLicenseHeaders18 + "' != '" + org.apache.rat.config.AddLicenseHeaders.FALSE + "'", addLicenseHeaders18.equals(org.apache.rat.config.AddLicenseHeaders.FALSE));
        org.junit.Assert.assertNull(claimStatistic22);
        org.junit.Assert.assertTrue("'" + licenseFilter23 + "' != '" + org.apache.rat.license.LicenseSetFactory.LicenseFilter.all + "'", licenseFilter23.equals(org.apache.rat.license.LicenseSetFactory.LicenseFilter.all));
        org.junit.Assert.assertNull(filenameFilter27);
        org.junit.Assert.assertNotNull(builder33);
        org.junit.Assert.assertNotNull(defaults34);
        org.junit.Assert.assertNull(filenameFilter37);
        org.junit.Assert.assertTrue("'" + licenseFilter38 + "' != '" + org.apache.rat.license.LicenseSetFactory.LicenseFilter.all + "'", licenseFilter38.equals(org.apache.rat.license.LicenseSetFactory.LicenseFilter.all));
        org.junit.Assert.assertNotNull(iLicenseSet39);
        org.junit.Assert.assertTrue("'" + addLicenseHeaders40 + "' != '" + org.apache.rat.config.AddLicenseHeaders.FALSE + "'", addLicenseHeaders40.equals(org.apache.rat.config.AddLicenseHeaders.FALSE));
        org.junit.Assert.assertNull(claimStatistic44);
        org.junit.Assert.assertTrue("'" + licenseFilter45 + "' != '" + org.apache.rat.license.LicenseSetFactory.LicenseFilter.all + "'", licenseFilter45.equals(org.apache.rat.license.LicenseSetFactory.LicenseFilter.all));
        org.junit.Assert.assertNull(filenameFilter50);
        org.junit.Assert.assertTrue("'" + licenseFilter51 + "' != '" + org.apache.rat.license.LicenseSetFactory.LicenseFilter.all + "'", licenseFilter51.equals(org.apache.rat.license.LicenseSetFactory.LicenseFilter.all));
        org.junit.Assert.assertNotNull(iLicenseSet52);
        org.junit.Assert.assertTrue("'" + addLicenseHeaders53 + "' != '" + org.apache.rat.config.AddLicenseHeaders.FALSE + "'", addLicenseHeaders53.equals(org.apache.rat.config.AddLicenseHeaders.FALSE));
        org.junit.Assert.assertNull(claimStatistic57);
        org.junit.Assert.assertTrue("'" + licenseFilter58 + "' != '" + org.apache.rat.license.LicenseSetFactory.LicenseFilter.all + "'", licenseFilter58.equals(org.apache.rat.license.LicenseSetFactory.LicenseFilter.all));
        org.junit.Assert.assertNotNull(iLicenseFamilySet61);
        org.junit.Assert.assertNotNull(iLicenseSet62);
        org.junit.Assert.assertNotNull(iLicense64);
        org.junit.Assert.assertEquals("'" + str66 + "' != '" + "BSD-3" + "'", str66, "BSD-3");
        org.junit.Assert.assertNotNull(iLicenseFamily67);
        org.junit.Assert.assertTrue("'" + format68 + "' != '" + org.apache.rat.configuration.Format.XML + "'", format68.equals(org.apache.rat.configuration.Format.XML));
        org.junit.Assert.assertNotNull(licenseReader69);
        org.junit.Assert.assertNotNull(iLicenseSet70);
        org.junit.Assert.assertNull(iLicense71);
        org.junit.Assert.assertNull(str72);
        org.junit.Assert.assertNotNull(iLicenseFamily73);
        org.junit.Assert.assertNull(str74);
    }

    @Test
    public void test14846() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest29.test14846");
        org.apache.rat.analysis.matchers.SPDXMatcherFactory sPDXMatcherFactory0 = org.apache.rat.analysis.matchers.SPDXMatcherFactory.INSTANCE;
        org.apache.rat.analysis.IHeaderMatcher iHeaderMatcher2 = sPDXMatcherFactory0.create("GPL3 ");
        org.apache.rat.analysis.IHeaderMatcher iHeaderMatcher4 = sPDXMatcherFactory0.create("MANIFEST.MF");
        org.apache.rat.analysis.IHeaderMatcher iHeaderMatcher6 = sPDXMatcherFactory0.create("4dbea497-3ef1-472e-aaad-e5481abb7e67");
        org.junit.Assert.assertNotNull(sPDXMatcherFactory0);
        org.junit.Assert.assertNotNull(iHeaderMatcher2);
        org.junit.Assert.assertNotNull(iHeaderMatcher4);
        org.junit.Assert.assertNotNull(iHeaderMatcher6);
    }

    @Test
    public void test14847() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest29.test14847");
        org.apache.rat.utils.Log log0 = null;
        org.apache.rat.ReportConfiguration reportConfiguration1 = new org.apache.rat.ReportConfiguration(log0);
        org.apache.commons.io.function.IOSupplier<java.io.OutputStream> outputStreamIOSupplier2 = reportConfiguration1.getOutput();
        org.apache.commons.io.filefilter.IOFileFilter iOFileFilter3 = reportConfiguration1.getDirectoryFilter();
        org.apache.commons.io.filefilter.IOFileFilter iOFileFilter4 = iOFileFilter3.negate();
        org.apache.commons.io.filefilter.IOFileFilter iOFileFilter5 = iOFileFilter3.negate();
        org.apache.rat.utils.Log log6 = null;
        org.apache.rat.ReportConfiguration reportConfiguration7 = new org.apache.rat.ReportConfiguration(log6);
        org.apache.rat.utils.ReportingSet.Options options8 = org.apache.rat.utils.ReportingSet.Options.OVERWRITE;
        reportConfiguration7.licenseDuplicateOption(options8);
        org.apache.rat.utils.Log log10 = null;
        org.apache.rat.ReportConfiguration reportConfiguration11 = new org.apache.rat.ReportConfiguration(log10);
        java.io.FilenameFilter filenameFilter12 = reportConfiguration11.getInputFileFilter();
        org.apache.rat.license.LicenseSetFactory.LicenseFilter licenseFilter13 = org.apache.rat.license.LicenseSetFactory.LicenseFilter.all;
        java.util.SortedSet<org.apache.rat.license.ILicense> iLicenseSet14 = reportConfiguration11.getLicenses(licenseFilter13);
        org.apache.rat.config.AddLicenseHeaders addLicenseHeaders15 = org.apache.rat.config.AddLicenseHeaders.FALSE;
        reportConfiguration11.setAddLicenseHeaders(addLicenseHeaders15);
        org.apache.rat.utils.Log log17 = null;
        org.apache.rat.ReportConfiguration reportConfiguration18 = new org.apache.rat.ReportConfiguration(log17);
        org.apache.rat.report.claim.ClaimStatistic claimStatistic19 = org.apache.rat.Reporter.report(reportConfiguration18);
        org.apache.rat.license.LicenseSetFactory.LicenseFilter licenseFilter20 = org.apache.rat.license.LicenseSetFactory.LicenseFilter.all;
        org.apache.rat.Reporter.listLicenses(reportConfiguration18, licenseFilter20);
        org.apache.rat.Reporter.listLicenses(reportConfiguration11, licenseFilter20);
        org.apache.rat.utils.Log log23 = null;
        org.apache.rat.ReportConfiguration reportConfiguration24 = new org.apache.rat.ReportConfiguration(log23);
        java.io.FilenameFilter filenameFilter25 = reportConfiguration24.getInputFileFilter();
        org.apache.rat.license.LicenseSetFactory.LicenseFilter licenseFilter26 = org.apache.rat.license.LicenseSetFactory.LicenseFilter.all;
        java.util.SortedSet<org.apache.rat.license.ILicense> iLicenseSet27 = reportConfiguration24.getLicenses(licenseFilter26);
        org.apache.rat.config.AddLicenseHeaders addLicenseHeaders28 = org.apache.rat.config.AddLicenseHeaders.FALSE;
        reportConfiguration24.setAddLicenseHeaders(addLicenseHeaders28);
        org.apache.rat.utils.Log log30 = null;
        org.apache.rat.ReportConfiguration reportConfiguration31 = new org.apache.rat.ReportConfiguration(log30);
        org.apache.rat.report.claim.ClaimStatistic claimStatistic32 = org.apache.rat.Reporter.report(reportConfiguration31);
        org.apache.rat.license.LicenseSetFactory.LicenseFilter licenseFilter33 = org.apache.rat.license.LicenseSetFactory.LicenseFilter.all;
        org.apache.rat.Reporter.listLicenses(reportConfiguration31, licenseFilter33);
        org.apache.rat.Reporter.listLicenses(reportConfiguration24, licenseFilter33);
        org.apache.rat.Reporter.listLicenses(reportConfiguration11, licenseFilter33);
        org.apache.rat.utils.Log log37 = null;
        org.apache.rat.ReportConfiguration reportConfiguration38 = new org.apache.rat.ReportConfiguration(log37);
        org.apache.commons.io.function.IOSupplier<java.io.OutputStream> outputStreamIOSupplier39 = reportConfiguration38.getOutput();
        reportConfiguration11.setOut(outputStreamIOSupplier39);
        org.apache.rat.utils.Log.Level level41 = org.apache.rat.utils.Log.Level.WARN;
        reportConfiguration11.logLicenseCollisions(level41);
        org.apache.commons.io.filefilter.IOFileFilter iOFileFilter43 = reportConfiguration11.getDirectoryFilter();
        reportConfiguration7.setInputFileFilter((java.io.FilenameFilter) iOFileFilter43);
        java.nio.file.Path path45 = null;
        boolean boolean46 = iOFileFilter43.matches(path45);
        org.apache.commons.io.filefilter.IOFileFilter iOFileFilter47 = iOFileFilter43.negate();
        java.nio.file.Path path48 = null;
        boolean boolean49 = iOFileFilter43.matches(path48);
        org.apache.commons.io.filefilter.IOFileFilter iOFileFilter50 = iOFileFilter43.negate();
        org.apache.rat.utils.Log log51 = null;
        org.apache.rat.ReportConfiguration reportConfiguration52 = new org.apache.rat.ReportConfiguration(log51);
        org.apache.rat.report.claim.ClaimStatistic claimStatistic53 = org.apache.rat.Reporter.report(reportConfiguration52);
        org.apache.rat.utils.Log log54 = null;
        org.apache.rat.ReportConfiguration reportConfiguration55 = new org.apache.rat.ReportConfiguration(log54);
        org.apache.rat.report.claim.ClaimStatistic claimStatistic56 = org.apache.rat.Reporter.report(reportConfiguration55);
        org.apache.rat.utils.ReportingSet.Options options57 = org.apache.rat.utils.ReportingSet.Options.OVERWRITE;
        reportConfiguration55.licenseDuplicateOption(options57);
        reportConfiguration52.familyDuplicateOption(options57);
        org.apache.commons.io.function.IOSupplier<java.io.PrintWriter> printWriterIOSupplier60 = reportConfiguration52.getWriter();
        boolean boolean61 = reportConfiguration52.isAddingLicensesForced();
        java.io.FilenameFilter filenameFilter62 = reportConfiguration52.getInputFileFilter();
        java.io.FilenameFilter filenameFilter63 = reportConfiguration52.getInputFileFilter();
        boolean boolean64 = reportConfiguration52.isStyleReport();
        org.apache.commons.io.function.IOSupplier<java.io.OutputStream> outputStreamIOSupplier65 = reportConfiguration52.getOutput();
        org.apache.commons.io.filefilter.IOFileFilter iOFileFilter66 = reportConfiguration52.getDirectoryFilter();
        org.apache.commons.io.filefilter.IOFileFilter iOFileFilter67 = reportConfiguration52.getDirectoryFilter();
        org.apache.commons.io.filefilter.IOFileFilter iOFileFilter68 = iOFileFilter43.and(iOFileFilter67);
        org.apache.commons.io.filefilter.IOFileFilter iOFileFilter69 = iOFileFilter3.or(iOFileFilter68);
        org.apache.rat.utils.Log log70 = null;
        org.apache.rat.ReportConfiguration reportConfiguration71 = new org.apache.rat.ReportConfiguration(log70);
        org.apache.rat.report.claim.ClaimStatistic claimStatistic72 = org.apache.rat.Reporter.report(reportConfiguration71);
        org.apache.rat.utils.Log log73 = null;
        org.apache.rat.ReportConfiguration reportConfiguration74 = new org.apache.rat.ReportConfiguration(log73);
        org.apache.rat.report.claim.ClaimStatistic claimStatistic75 = org.apache.rat.Reporter.report(reportConfiguration74);
        org.apache.rat.utils.ReportingSet.Options options76 = org.apache.rat.utils.ReportingSet.Options.OVERWRITE;
        reportConfiguration74.licenseDuplicateOption(options76);
        reportConfiguration71.familyDuplicateOption(options76);
        org.apache.commons.io.function.IOSupplier<java.io.PrintWriter> printWriterIOSupplier79 = reportConfiguration71.getWriter();
        boolean boolean80 = reportConfiguration71.isAddingLicensesForced();
        java.io.FilenameFilter filenameFilter81 = reportConfiguration71.getInputFileFilter();
        java.io.FilenameFilter filenameFilter82 = reportConfiguration71.getInputFileFilter();
        boolean boolean83 = reportConfiguration71.isStyleReport();
        org.apache.commons.io.function.IOSupplier<java.io.OutputStream> outputStreamIOSupplier84 = reportConfiguration71.getOutput();
        org.apache.commons.io.filefilter.IOFileFilter iOFileFilter85 = reportConfiguration71.getDirectoryFilter();
        org.apache.commons.io.filefilter.IOFileFilter iOFileFilter86 = iOFileFilter69.and(iOFileFilter85);
        java.nio.file.Path path87 = null;
        java.nio.file.attribute.BasicFileAttributes basicFileAttributes88 = null;
        java.nio.file.FileVisitResult fileVisitResult89 = iOFileFilter86.accept(path87, basicFileAttributes88);
        org.junit.Assert.assertNotNull(outputStreamIOSupplier2);
        org.junit.Assert.assertNotNull(iOFileFilter3);
        org.junit.Assert.assertNotNull(iOFileFilter4);
        org.junit.Assert.assertNotNull(iOFileFilter5);
        org.junit.Assert.assertTrue("'" + options8 + "' != '" + org.apache.rat.utils.ReportingSet.Options.OVERWRITE + "'", options8.equals(org.apache.rat.utils.ReportingSet.Options.OVERWRITE));
        org.junit.Assert.assertNull(filenameFilter12);
        org.junit.Assert.assertTrue("'" + licenseFilter13 + "' != '" + org.apache.rat.license.LicenseSetFactory.LicenseFilter.all + "'", licenseFilter13.equals(org.apache.rat.license.LicenseSetFactory.LicenseFilter.all));
        org.junit.Assert.assertNotNull(iLicenseSet14);
        org.junit.Assert.assertTrue("'" + addLicenseHeaders15 + "' != '" + org.apache.rat.config.AddLicenseHeaders.FALSE + "'", addLicenseHeaders15.equals(org.apache.rat.config.AddLicenseHeaders.FALSE));
        org.junit.Assert.assertNull(claimStatistic19);
        org.junit.Assert.assertTrue("'" + licenseFilter20 + "' != '" + org.apache.rat.license.LicenseSetFactory.LicenseFilter.all + "'", licenseFilter20.equals(org.apache.rat.license.LicenseSetFactory.LicenseFilter.all));
        org.junit.Assert.assertNull(filenameFilter25);
        org.junit.Assert.assertTrue("'" + licenseFilter26 + "' != '" + org.apache.rat.license.LicenseSetFactory.LicenseFilter.all + "'", licenseFilter26.equals(org.apache.rat.license.LicenseSetFactory.LicenseFilter.all));
        org.junit.Assert.assertNotNull(iLicenseSet27);
        org.junit.Assert.assertTrue("'" + addLicenseHeaders28 + "' != '" + org.apache.rat.config.AddLicenseHeaders.FALSE + "'", addLicenseHeaders28.equals(org.apache.rat.config.AddLicenseHeaders.FALSE));
        org.junit.Assert.assertNull(claimStatistic32);
        org.junit.Assert.assertTrue("'" + licenseFilter33 + "' != '" + org.apache.rat.license.LicenseSetFactory.LicenseFilter.all + "'", licenseFilter33.equals(org.apache.rat.license.LicenseSetFactory.LicenseFilter.all));
        org.junit.Assert.assertNotNull(outputStreamIOSupplier39);
        org.junit.Assert.assertTrue("'" + level41 + "' != '" + org.apache.rat.utils.Log.Level.WARN + "'", level41.equals(org.apache.rat.utils.Log.Level.WARN));
        org.junit.Assert.assertNotNull(iOFileFilter43);
        org.junit.Assert.assertTrue("'" + boolean46 + "' != '" + false + "'", boolean46 == false);
        org.junit.Assert.assertNotNull(iOFileFilter47);
        org.junit.Assert.assertTrue("'" + boolean49 + "' != '" + false + "'", boolean49 == false);
        org.junit.Assert.assertNotNull(iOFileFilter50);
        org.junit.Assert.assertNull(claimStatistic53);
        org.junit.Assert.assertNull(claimStatistic56);
        org.junit.Assert.assertTrue("'" + options57 + "' != '" + org.apache.rat.utils.ReportingSet.Options.OVERWRITE + "'", options57.equals(org.apache.rat.utils.ReportingSet.Options.OVERWRITE));
        org.junit.Assert.assertNotNull(printWriterIOSupplier60);
        org.junit.Assert.assertTrue("'" + boolean61 + "' != '" + false + "'", boolean61 == false);
        org.junit.Assert.assertNull(filenameFilter62);
        org.junit.Assert.assertNull(filenameFilter63);
        org.junit.Assert.assertTrue("'" + boolean64 + "' != '" + true + "'", boolean64 == true);
        org.junit.Assert.assertNotNull(outputStreamIOSupplier65);
        org.junit.Assert.assertNotNull(iOFileFilter66);
        org.junit.Assert.assertNotNull(iOFileFilter67);
        org.junit.Assert.assertNotNull(iOFileFilter68);
        org.junit.Assert.assertNotNull(iOFileFilter69);
        org.junit.Assert.assertNull(claimStatistic72);
        org.junit.Assert.assertNull(claimStatistic75);
        org.junit.Assert.assertTrue("'" + options76 + "' != '" + org.apache.rat.utils.ReportingSet.Options.OVERWRITE + "'", options76.equals(org.apache.rat.utils.ReportingSet.Options.OVERWRITE));
        org.junit.Assert.assertNotNull(printWriterIOSupplier79);
        org.junit.Assert.assertTrue("'" + boolean80 + "' != '" + false + "'", boolean80 == false);
        org.junit.Assert.assertNull(filenameFilter81);
        org.junit.Assert.assertNull(filenameFilter82);
        org.junit.Assert.assertTrue("'" + boolean83 + "' != '" + true + "'", boolean83 == true);
        org.junit.Assert.assertNotNull(outputStreamIOSupplier84);
        org.junit.Assert.assertNotNull(iOFileFilter85);
        org.junit.Assert.assertNotNull(iOFileFilter86);
        org.junit.Assert.assertTrue("'" + fileVisitResult89 + "' != '" + java.nio.file.FileVisitResult.TERMINATE + "'", fileVisitResult89.equals(java.nio.file.FileVisitResult.TERMINATE));
    }

    @Test
    public void test14848() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest29.test14848");
        org.apache.rat.utils.DefaultLog defaultLog0 = org.apache.rat.utils.DefaultLog.INSTANCE;
        org.apache.rat.annotation.ApacheV2LicenseAppender apacheV2LicenseAppender1 = new org.apache.rat.annotation.ApacheV2LicenseAppender((org.apache.rat.utils.Log) defaultLog0);
        org.apache.rat.utils.Log log2 = null;
        org.apache.rat.ReportConfiguration reportConfiguration3 = new org.apache.rat.ReportConfiguration(log2);
        org.apache.rat.report.claim.ClaimStatistic claimStatistic4 = org.apache.rat.Reporter.report(reportConfiguration3);
        org.apache.rat.utils.Log log5 = null;
        org.apache.rat.ReportConfiguration reportConfiguration6 = new org.apache.rat.ReportConfiguration(log5);
        org.apache.rat.report.claim.ClaimStatistic claimStatistic7 = org.apache.rat.Reporter.report(reportConfiguration6);
        org.apache.rat.utils.ReportingSet.Options options8 = org.apache.rat.utils.ReportingSet.Options.OVERWRITE;
        reportConfiguration6.licenseDuplicateOption(options8);
        reportConfiguration3.familyDuplicateOption(options8);
        org.apache.commons.io.function.IOSupplier<java.io.PrintWriter> printWriterIOSupplier11 = reportConfiguration3.getWriter();
        org.apache.rat.utils.Log log12 = null;
        org.apache.rat.ReportConfiguration reportConfiguration13 = new org.apache.rat.ReportConfiguration(log12);
        reportConfiguration13.addApprovedLicenseCategory(".cvsignore");
        org.apache.rat.utils.Log.Level level16 = org.apache.rat.utils.Log.Level.ERROR;
        reportConfiguration13.logFamilyCollisions(level16);
        reportConfiguration3.logFamilyCollisions(level16);
        org.apache.rat.Defaults.Builder builder19 = org.apache.rat.Defaults.builder();
        org.apache.rat.Defaults.Builder builder20 = builder19.noDefault();
        defaultLog0.log(level16, (java.lang.Object) builder19);
        org.apache.rat.Defaults.Builder builder22 = builder19.noDefault();
        java.net.URL uRL23 = null;
        org.apache.rat.Defaults.Builder builder24 = builder22.remove(uRL23);
        org.apache.rat.Defaults.Builder builder26 = builder24.remove("binary");
        java.net.URL uRL27 = null;
        // The following exception was thrown during execution in test generation
        try {
            org.apache.rat.Defaults.Builder builder28 = builder24.add(uRL27);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(defaultLog0);
        org.junit.Assert.assertNull(claimStatistic4);
        org.junit.Assert.assertNull(claimStatistic7);
        org.junit.Assert.assertTrue("'" + options8 + "' != '" + org.apache.rat.utils.ReportingSet.Options.OVERWRITE + "'", options8.equals(org.apache.rat.utils.ReportingSet.Options.OVERWRITE));
        org.junit.Assert.assertNotNull(printWriterIOSupplier11);
        org.junit.Assert.assertTrue("'" + level16 + "' != '" + org.apache.rat.utils.Log.Level.ERROR + "'", level16.equals(org.apache.rat.utils.Log.Level.ERROR));
        org.junit.Assert.assertNotNull(builder19);
        org.junit.Assert.assertNotNull(builder20);
        org.junit.Assert.assertNotNull(builder22);
        org.junit.Assert.assertNotNull(builder24);
        org.junit.Assert.assertNotNull(builder26);
    }

    @Test
    public void test14849() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest29.test14849");
        java.lang.String[] strArray5 = new java.lang.String[] { "http://org/apache/rat/meta-data#LicenseFamilyCategory", "Datum [ name ='http://org/apache/rat/meta-data#LicenseFamilyCategory',value ='GPL1  ']", "MANIFEST.MF", "AllBuilder:", "The MIT License" };
        org.apache.rat.utils.ReportingSet<java.lang.String> strSet6 = new org.apache.rat.utils.ReportingSet<java.lang.String>();
        boolean boolean7 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strSet6, strArray5);
        boolean boolean9 = strSet6.addIfNotPresent("http://org/apache/rat/meta-data#LicenseFamilyName");
        java.util.Iterator<java.lang.String> strItor10 = strSet6.iterator();
        strSet6.clear();
        strSet6.clear();
        java.lang.Object[] objArray13 = strSet6.toArray();
        java.util.stream.Stream<java.lang.String> strStream14 = strSet6.stream();
        strStream14.close();
        org.junit.Assert.assertNotNull(strArray5);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + true + "'", boolean7 == true);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + true + "'", boolean9 == true);
        org.junit.Assert.assertNotNull(strItor10);
        org.junit.Assert.assertNotNull(objArray13);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray13), "[]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray13), "[]");
        org.junit.Assert.assertNotNull(strStream14);
    }

    @Test
    public void test14850() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest29.test14850");
        org.apache.rat.license.ILicense.Builder builder0 = org.apache.rat.license.ILicense.builder();
        org.apache.rat.license.ILicense.Builder builder2 = builder0.setLicenseFamilyCategory("");
        org.apache.rat.analysis.matchers.FullTextMatcher fullTextMatcher4 = new org.apache.rat.analysis.matchers.FullTextMatcher("ef7a8b13-64c3-4510-bb0c-dbf208e1e73f");
        org.apache.rat.license.ILicense.Builder builder5 = builder0.setMatcher((org.apache.rat.analysis.IHeaderMatcher) fullTextMatcher4);
        org.apache.rat.configuration.builders.AnyBuilder anyBuilder6 = org.apache.rat.analysis.IHeaderMatcher.Builder.any();
        java.lang.String str7 = anyBuilder6.toString();
        java.util.List<org.apache.rat.analysis.IHeaderMatcher> iHeaderMatcherList8 = anyBuilder6.getChildren();
        org.apache.rat.analysis.IHeaderMatcher iHeaderMatcher9 = anyBuilder6.build();
        org.apache.rat.analysis.IHeaderMatcher iHeaderMatcher10 = anyBuilder6.build();
        java.util.List<org.apache.rat.analysis.IHeaderMatcher> iHeaderMatcherList11 = anyBuilder6.getChildren();
        org.apache.rat.license.ILicense.Builder builder12 = builder0.setMatcher((org.apache.rat.analysis.IHeaderMatcher.Builder) anyBuilder6);
        org.apache.rat.analysis.matchers.SimpleTextMatcher simpleTextMatcher14 = new org.apache.rat.analysis.matchers.SimpleTextMatcher("binary");
        org.apache.rat.analysis.IHeaderMatcher.State state15 = simpleTextMatcher14.finalizeState();
        boolean boolean17 = simpleTextMatcher14.doMatch("null http://org/apache/rat/meta-data#LicenseFamilyName");
        org.apache.rat.license.ILicense.Builder builder18 = builder12.setMatcher((org.apache.rat.analysis.IHeaderMatcher) simpleTextMatcher14);
        org.apache.rat.analysis.matchers.SimpleTextMatcher simpleTextMatcher20 = new org.apache.rat.analysis.matchers.SimpleTextMatcher("hi!");
        org.apache.rat.analysis.matchers.NotMatcher notMatcher21 = new org.apache.rat.analysis.matchers.NotMatcher((org.apache.rat.analysis.IHeaderMatcher) simpleTextMatcher20);
        org.apache.rat.analysis.IHeaderMatcher.State state22 = notMatcher21.currentState();
        org.apache.rat.license.ILicense.Builder builder23 = builder12.setMatcher((org.apache.rat.analysis.IHeaderMatcher) notMatcher21);
        org.apache.rat.analysis.matchers.NotMatcher notMatcher24 = new org.apache.rat.analysis.matchers.NotMatcher((org.apache.rat.analysis.IHeaderMatcher) notMatcher21);
        org.apache.rat.analysis.IHeaderMatcher.State state26 = notMatcher24.matches("f03158f7-b7b2-4d1f-90b1-98481344f604");
        // The following exception was thrown during execution in test generation
        try {
            boolean boolean27 = state26.asBoolean();
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalStateException; message: 'asBoolean' should never be called on an indeterminate state");
        } catch (java.lang.IllegalStateException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(builder0);
        org.junit.Assert.assertNotNull(builder2);
        org.junit.Assert.assertNotNull(builder5);
        org.junit.Assert.assertNotNull(anyBuilder6);
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "AnyBuilder:" + "'", str7, "AnyBuilder:");
        org.junit.Assert.assertNotNull(iHeaderMatcherList8);
        org.junit.Assert.assertNotNull(iHeaderMatcher9);
        org.junit.Assert.assertNotNull(iHeaderMatcher10);
        org.junit.Assert.assertNotNull(iHeaderMatcherList11);
        org.junit.Assert.assertNotNull(builder12);
        org.junit.Assert.assertTrue("'" + state15 + "' != '" + org.apache.rat.analysis.IHeaderMatcher.State.f + "'", state15.equals(org.apache.rat.analysis.IHeaderMatcher.State.f));
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + false + "'", boolean17 == false);
        org.junit.Assert.assertNotNull(builder18);
        org.junit.Assert.assertTrue("'" + state22 + "' != '" + org.apache.rat.analysis.IHeaderMatcher.State.i + "'", state22.equals(org.apache.rat.analysis.IHeaderMatcher.State.i));
        org.junit.Assert.assertNotNull(builder23);
        org.junit.Assert.assertTrue("'" + state26 + "' != '" + org.apache.rat.analysis.IHeaderMatcher.State.i + "'", state26.equals(org.apache.rat.analysis.IHeaderMatcher.State.i));
    }

    @Test
    public void test14851() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest29.test14851");
        org.apache.rat.configuration.Format format0 = org.apache.rat.configuration.Format.XML;
        org.apache.rat.configuration.LicenseReader licenseReader1 = format0.licenseReader();
        java.util.SortedSet<org.apache.rat.license.ILicense> iLicenseSet2 = licenseReader1.readLicenses();
        java.lang.String[] strArray8 = new java.lang.String[] { "http://org/apache/rat/meta-data#LicenseFamilyCategory", "Datum [ name ='http://org/apache/rat/meta-data#LicenseFamilyCategory',value ='GPL1  ']", "MANIFEST.MF", "AllBuilder:", "The MIT License" };
        org.apache.rat.utils.ReportingSet<java.lang.String> strSet9 = new org.apache.rat.utils.ReportingSet<java.lang.String>();
        boolean boolean10 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strSet9, strArray8);
        boolean boolean12 = strSet9.addIfNotPresent("http://org/apache/rat/meta-data#LicenseFamilyName");
        boolean boolean14 = strSet9.addIfNotPresent("ef7a8b13-64c3-4510-bb0c-dbf208e1e73f");
        java.util.function.Function<java.lang.String, java.lang.String> strFunction15 = null;
        org.apache.rat.utils.ReportingSet<java.lang.String> strSet16 = strSet9.setMsgFormat(strFunction15);
        boolean boolean17 = strSet9.isEmpty();
        org.apache.rat.license.LicenseSetFactory licenseSetFactory18 = new org.apache.rat.license.LicenseSetFactory(iLicenseSet2, (java.util.Collection<java.lang.String>) strSet9);
        org.apache.rat.api.MetaData.Datum datum19 = org.apache.rat.api.MetaData.RAT_LICENSE_FAMILY_NAME_DATUM_GPL_VERSION_1;
        java.lang.String str20 = datum19.toString();
        boolean boolean21 = strSet9.equals((java.lang.Object) datum19);
        boolean boolean23 = strSet9.addIfNotPresent("46eea23e-d320-45bc-aa7f-844d2e1597ce");
        org.apache.rat.utils.ReportingSet<java.lang.String> strSet25 = strSet9.headSet("notice");
        org.apache.rat.utils.DefaultLog defaultLog26 = org.apache.rat.utils.DefaultLog.INSTANCE;
        org.apache.rat.utils.Log log27 = null;
        org.apache.rat.ReportConfiguration reportConfiguration28 = new org.apache.rat.ReportConfiguration(log27);
        reportConfiguration28.addApprovedLicenseCategory(".cvsignore");
        org.apache.rat.utils.Log.Level level31 = org.apache.rat.utils.Log.Level.ERROR;
        reportConfiguration28.logFamilyCollisions(level31);
        defaultLog26.setLevel(level31);
        org.apache.rat.utils.ReportingSet<java.lang.String> strSet34 = strSet9.setLog((org.apache.rat.utils.Log) defaultLog26);
        java.util.Iterator<java.lang.String> strItor35 = strSet9.iterator();
        org.junit.Assert.assertTrue("'" + format0 + "' != '" + org.apache.rat.configuration.Format.XML + "'", format0.equals(org.apache.rat.configuration.Format.XML));
        org.junit.Assert.assertNotNull(licenseReader1);
        org.junit.Assert.assertNotNull(iLicenseSet2);
        org.junit.Assert.assertNotNull(strArray8);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + true + "'", boolean10 == true);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + true + "'", boolean12 == true);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + true + "'", boolean14 == true);
        org.junit.Assert.assertNotNull(strSet16);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + false + "'", boolean17 == false);
        org.junit.Assert.assertNotNull(datum19);
        org.junit.Assert.assertEquals("'" + str20 + "' != '" + "Datum [ name ='http://org/apache/rat/meta-data#LicenseFamilyName',value ='GNU General Public License, version 1 ']" + "'", str20, "Datum [ name ='http://org/apache/rat/meta-data#LicenseFamilyName',value ='GNU General Public License, version 1 ']");
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + false + "'", boolean21 == false);
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + true + "'", boolean23 == true);
        org.junit.Assert.assertNotNull(strSet25);
        org.junit.Assert.assertNotNull(defaultLog26);
        org.junit.Assert.assertTrue("'" + level31 + "' != '" + org.apache.rat.utils.Log.Level.ERROR + "'", level31.equals(org.apache.rat.utils.Log.Level.ERROR));
        org.junit.Assert.assertNotNull(strSet34);
        org.junit.Assert.assertNotNull(strItor35);
    }

    @Test
    public void test14852() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest29.test14852");
        org.apache.rat.license.ILicense[] iLicenseArray1 = new org.apache.rat.license.ILicense[] {};
        java.util.TreeSet<org.apache.rat.license.ILicense> iLicenseSet2 = new java.util.TreeSet<org.apache.rat.license.ILicense>();
        boolean boolean3 = java.util.Collections.addAll((java.util.Collection<org.apache.rat.license.ILicense>) iLicenseSet2, iLicenseArray1);
        java.lang.String[] strArray16 = new java.lang.String[] { "GPL2 ", "GPL1 ", "notice", "http://org/apache/rat/meta-data#LicenseFamilyName", "notice", "GPL2 ", "http://org/apache/rat/meta-data#LicenseFamilyName", "", "GPL2 ", "", "GPL1 ", "hi!" };
        java.util.ArrayList<java.lang.String> strList17 = new java.util.ArrayList<java.lang.String>();
        boolean boolean18 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strList17, strArray16);
        org.apache.rat.license.LicenseSetFactory licenseSetFactory19 = new org.apache.rat.license.LicenseSetFactory((java.util.SortedSet<org.apache.rat.license.ILicense>) iLicenseSet2, (java.util.Collection<java.lang.String>) strList17);
        org.apache.rat.license.ILicense iLicense20 = org.apache.rat.license.LicenseSetFactory.search("GNU General Public License, version 1", (java.util.SortedSet<org.apache.rat.license.ILicense>) iLicenseSet2);
        org.apache.rat.configuration.Format format22 = org.apache.rat.configuration.Format.XML;
        org.apache.rat.configuration.LicenseReader licenseReader23 = format22.licenseReader();
        org.apache.rat.configuration.MatcherReader matcherReader24 = format22.matcherReader();
        org.apache.rat.configuration.LicenseReader licenseReader25 = format22.licenseReader();
        java.util.SortedSet<org.apache.rat.license.ILicense> iLicenseSet26 = licenseReader25.readLicenses();
        org.apache.rat.license.ILicense iLicense27 = org.apache.rat.license.LicenseSetFactory.search("Datum [ name ='http://org/apache/rat/meta-data#LicenseFamilyCategory',value ='GPL1  ']", iLicenseSet26);
        org.apache.rat.utils.ReportingSet<java.lang.String> strSet28 = new org.apache.rat.utils.ReportingSet<java.lang.String>();
        int int29 = strSet28.size();
        org.apache.rat.license.LicenseSetFactory licenseSetFactory30 = new org.apache.rat.license.LicenseSetFactory(iLicenseSet26, (java.util.Collection<java.lang.String>) strSet28);
        org.apache.rat.license.LicenseSetFactory licenseSetFactory31 = new org.apache.rat.license.LicenseSetFactory((java.util.SortedSet<org.apache.rat.license.ILicense>) iLicenseSet2, (java.util.Collection<java.lang.String>) strSet28);
        java.util.stream.Stream<java.lang.String> strStream32 = strSet28.parallelStream();
        java.util.stream.Stream<java.lang.String> strStream33 = strSet28.parallelStream();
        org.junit.Assert.assertNotNull(iLicenseArray1);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertNotNull(strArray16);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + true + "'", boolean18 == true);
        org.junit.Assert.assertNull(iLicense20);
        org.junit.Assert.assertTrue("'" + format22 + "' != '" + org.apache.rat.configuration.Format.XML + "'", format22.equals(org.apache.rat.configuration.Format.XML));
        org.junit.Assert.assertNotNull(licenseReader23);
        org.junit.Assert.assertNotNull(matcherReader24);
        org.junit.Assert.assertNotNull(licenseReader25);
        org.junit.Assert.assertNotNull(iLicenseSet26);
        org.junit.Assert.assertNull(iLicense27);
        org.junit.Assert.assertTrue("'" + int29 + "' != '" + 0 + "'", int29 == 0);
        org.junit.Assert.assertNotNull(strStream32);
        org.junit.Assert.assertNotNull(strStream33);
    }

    @Test
    public void test14853() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest29.test14853");
        org.apache.rat.configuration.builders.AnyBuilder anyBuilder0 = org.apache.rat.analysis.IHeaderMatcher.Builder.any();
        org.apache.rat.configuration.builders.AllBuilder allBuilder1 = new org.apache.rat.configuration.builders.AllBuilder();
        org.apache.rat.analysis.IHeaderMatcher iHeaderMatcher2 = allBuilder1.build();
        org.apache.rat.configuration.builders.AbstractBuilder abstractBuilder3 = anyBuilder0.add((org.apache.rat.analysis.IHeaderMatcher.Builder) allBuilder1);
        java.lang.String str4 = anyBuilder0.toString();
        java.util.List<org.apache.rat.analysis.IHeaderMatcher> iHeaderMatcherList5 = anyBuilder0.getChildren();
        java.lang.String str6 = anyBuilder0.toString();
        java.lang.String str7 = anyBuilder0.toString();
        org.apache.rat.configuration.builders.AllBuilder allBuilder8 = new org.apache.rat.configuration.builders.AllBuilder();
        org.apache.rat.analysis.IHeaderMatcher iHeaderMatcher9 = allBuilder8.build();
        org.apache.rat.analysis.IHeaderMatcher iHeaderMatcher10 = allBuilder8.build();
        org.apache.rat.configuration.builders.CopyrightBuilder copyrightBuilder11 = org.apache.rat.analysis.IHeaderMatcher.Builder.copyright();
        org.apache.rat.configuration.builders.CopyrightBuilder copyrightBuilder13 = copyrightBuilder11.setStart("021187d7-27c2-4fd9-bc74-8cc00413ee52");
        org.apache.rat.analysis.IHeaderMatcher iHeaderMatcher14 = copyrightBuilder11.build();
        org.apache.rat.analysis.IHeaderMatcher iHeaderMatcher15 = copyrightBuilder11.build();
        java.lang.String str16 = copyrightBuilder11.toString();
        org.apache.rat.configuration.builders.AbstractBuilder abstractBuilder17 = allBuilder8.add((org.apache.rat.analysis.IHeaderMatcher.Builder) copyrightBuilder11);
        org.apache.rat.configuration.builders.NotBuilder notBuilder18 = org.apache.rat.analysis.IHeaderMatcher.Builder.not();
        boolean boolean19 = notBuilder18.hasId();
        java.util.List<org.apache.rat.analysis.IHeaderMatcher> iHeaderMatcherList20 = notBuilder18.getChildren();
        org.apache.rat.configuration.builders.AllBuilder allBuilder21 = new org.apache.rat.configuration.builders.AllBuilder();
        org.apache.rat.configuration.builders.MatcherRefBuilder matcherRefBuilder22 = org.apache.rat.analysis.IHeaderMatcher.Builder.matcherRef();
        boolean boolean23 = matcherRefBuilder22.hasId();
        java.lang.String str24 = matcherRefBuilder22.toString();
        org.apache.rat.configuration.builders.AnyBuilder anyBuilder25 = org.apache.rat.analysis.IHeaderMatcher.Builder.any();
        org.apache.rat.configuration.builders.NotBuilder notBuilder26 = new org.apache.rat.configuration.builders.NotBuilder();
        java.lang.String str27 = notBuilder26.toString();
        org.apache.rat.configuration.builders.MatcherRefBuilder matcherRefBuilder28 = org.apache.rat.analysis.IHeaderMatcher.Builder.matcherRef();
        boolean boolean29 = matcherRefBuilder28.hasId();
        java.util.Map<java.lang.String, org.apache.rat.analysis.IHeaderMatcher> strMap30 = null;
        org.apache.rat.configuration.builders.MatcherRefBuilder matcherRefBuilder31 = matcherRefBuilder28.setMatchers(strMap30);
        org.apache.rat.configuration.builders.AllBuilder allBuilder32 = new org.apache.rat.configuration.builders.AllBuilder();
        org.apache.rat.configuration.builders.CopyrightBuilder copyrightBuilder33 = org.apache.rat.analysis.IHeaderMatcher.Builder.copyright();
        org.apache.rat.configuration.builders.CopyrightBuilder copyrightBuilder35 = copyrightBuilder33.setStart("OASIS");
        java.lang.String str36 = copyrightBuilder33.toString();
        org.apache.rat.configuration.builders.CopyrightBuilder copyrightBuilder38 = copyrightBuilder33.setStart("223f0aba-15d4-49e9-901e-5740c137aebf");
        org.apache.rat.configuration.builders.MatcherRefBuilder matcherRefBuilder39 = org.apache.rat.analysis.IHeaderMatcher.Builder.matcherRef();
        boolean boolean40 = matcherRefBuilder39.hasId();
        org.apache.rat.configuration.builders.CopyrightBuilder copyrightBuilder41 = org.apache.rat.analysis.IHeaderMatcher.Builder.copyright();
        org.apache.rat.configuration.builders.CopyrightBuilder copyrightBuilder43 = copyrightBuilder41.setStart("OASIS");
        java.lang.String str44 = copyrightBuilder41.toString();
        org.apache.rat.configuration.builders.CopyrightBuilder copyrightBuilder46 = copyrightBuilder41.setStart("223f0aba-15d4-49e9-901e-5740c137aebf");
        org.apache.rat.configuration.builders.CopyrightBuilder copyrightBuilder47 = org.apache.rat.analysis.IHeaderMatcher.Builder.copyright();
        org.apache.rat.configuration.builders.CopyrightBuilder copyrightBuilder48 = org.apache.rat.analysis.IHeaderMatcher.Builder.copyright();
        java.lang.String str49 = copyrightBuilder48.toString();
        org.apache.rat.configuration.builders.CopyrightBuilder copyrightBuilder51 = copyrightBuilder48.setEnd(".cvsignore");
        boolean boolean52 = copyrightBuilder48.hasId();
        org.apache.rat.configuration.builders.CopyrightBuilder copyrightBuilder53 = org.apache.rat.analysis.IHeaderMatcher.Builder.copyright();
        java.lang.String str54 = copyrightBuilder53.toString();
        org.apache.rat.configuration.builders.CopyrightBuilder copyrightBuilder56 = copyrightBuilder53.setEnd(".cvsignore");
        boolean boolean57 = copyrightBuilder53.hasId();
        java.lang.String str58 = copyrightBuilder53.toString();
        org.apache.rat.configuration.builders.CopyrightBuilder copyrightBuilder59 = org.apache.rat.analysis.IHeaderMatcher.Builder.copyright();
        org.apache.rat.configuration.builders.CopyrightBuilder copyrightBuilder61 = copyrightBuilder59.setStart("OASIS");
        org.apache.rat.configuration.builders.AnyBuilder anyBuilder62 = org.apache.rat.analysis.IHeaderMatcher.Builder.any();
        org.apache.rat.configuration.builders.MatcherRefBuilder matcherRefBuilder63 = org.apache.rat.analysis.IHeaderMatcher.Builder.matcherRef();
        boolean boolean64 = matcherRefBuilder63.hasId();
        java.util.Map<java.lang.String, org.apache.rat.analysis.IHeaderMatcher> strMap65 = null;
        org.apache.rat.configuration.builders.MatcherRefBuilder matcherRefBuilder66 = matcherRefBuilder63.setMatchers(strMap65);
        org.apache.rat.configuration.builders.CopyrightBuilder copyrightBuilder67 = org.apache.rat.analysis.IHeaderMatcher.Builder.copyright();
        org.apache.rat.configuration.builders.MatcherRefBuilder matcherRefBuilder68 = org.apache.rat.analysis.IHeaderMatcher.Builder.matcherRef();
        boolean boolean69 = matcherRefBuilder68.hasId();
        java.lang.String str70 = matcherRefBuilder68.toString();
        java.util.Map<java.lang.String, org.apache.rat.analysis.IHeaderMatcher> strMap71 = null;
        org.apache.rat.configuration.builders.MatcherRefBuilder matcherRefBuilder72 = matcherRefBuilder68.setMatchers(strMap71);
        org.apache.rat.analysis.IHeaderMatcher.Builder[] builderArray73 = new org.apache.rat.analysis.IHeaderMatcher.Builder[] { matcherRefBuilder28, allBuilder32, copyrightBuilder38, matcherRefBuilder39, copyrightBuilder41, copyrightBuilder47, copyrightBuilder48, copyrightBuilder53, copyrightBuilder59, anyBuilder62, matcherRefBuilder63, copyrightBuilder67, matcherRefBuilder68 };
        java.util.ArrayList<org.apache.rat.analysis.IHeaderMatcher.Builder> builderList74 = new java.util.ArrayList<org.apache.rat.analysis.IHeaderMatcher.Builder>();
        boolean boolean75 = java.util.Collections.addAll((java.util.Collection<org.apache.rat.analysis.IHeaderMatcher.Builder>) builderList74, builderArray73);
        org.apache.rat.configuration.builders.AbstractBuilder abstractBuilder76 = notBuilder26.add((java.util.Collection<org.apache.rat.analysis.IHeaderMatcher.Builder>) builderList74);
        org.apache.rat.configuration.builders.MatcherRefBuilder matcherRefBuilder77 = new org.apache.rat.configuration.builders.MatcherRefBuilder();
        org.apache.rat.analysis.IHeaderMatcher.Builder[] builderArray78 = new org.apache.rat.analysis.IHeaderMatcher.Builder[] { matcherRefBuilder22, anyBuilder25, notBuilder26, matcherRefBuilder77 };
        java.util.ArrayList<org.apache.rat.analysis.IHeaderMatcher.Builder> builderList79 = new java.util.ArrayList<org.apache.rat.analysis.IHeaderMatcher.Builder>();
        boolean boolean80 = java.util.Collections.addAll((java.util.Collection<org.apache.rat.analysis.IHeaderMatcher.Builder>) builderList79, builderArray78);
        org.apache.rat.configuration.builders.AbstractBuilder abstractBuilder81 = allBuilder21.add((java.util.Collection<org.apache.rat.analysis.IHeaderMatcher.Builder>) builderList79);
        org.apache.rat.configuration.builders.AbstractBuilder abstractBuilder82 = notBuilder18.add((java.util.Collection<org.apache.rat.analysis.IHeaderMatcher.Builder>) builderList79);
        org.apache.rat.configuration.builders.AbstractBuilder abstractBuilder83 = allBuilder8.add((java.util.Collection<org.apache.rat.analysis.IHeaderMatcher.Builder>) builderList79);
        org.apache.rat.configuration.builders.AbstractBuilder abstractBuilder84 = anyBuilder0.add((java.util.Collection<org.apache.rat.analysis.IHeaderMatcher.Builder>) builderList79);
        // The following exception was thrown during execution in test generation
        try {
            org.apache.rat.configuration.builders.AbstractBuilder abstractBuilder86 = anyBuilder0.setResource("85c18c5f-75e7-4167-8e70-67774864812b");
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(anyBuilder0);
        org.junit.Assert.assertNotNull(iHeaderMatcher2);
        org.junit.Assert.assertNotNull(abstractBuilder3);
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "AnyBuilder:\nAllBuilder:" + "'", str4, "AnyBuilder:\nAllBuilder:");
        org.junit.Assert.assertNotNull(iHeaderMatcherList5);
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "AnyBuilder:\nAllBuilder:" + "'", str6, "AnyBuilder:\nAllBuilder:");
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "AnyBuilder:\nAllBuilder:" + "'", str7, "AnyBuilder:\nAllBuilder:");
        org.junit.Assert.assertNotNull(iHeaderMatcher9);
        org.junit.Assert.assertNotNull(iHeaderMatcher10);
        org.junit.Assert.assertNotNull(copyrightBuilder11);
        org.junit.Assert.assertNotNull(copyrightBuilder13);
        org.junit.Assert.assertNotNull(iHeaderMatcher14);
        org.junit.Assert.assertNotNull(iHeaderMatcher15);
        org.junit.Assert.assertEquals("'" + str16 + "' != '" + "Copyright Builder: s:021187d7-27c2-4fd9-bc74-8cc00413ee52 e:null o:null" + "'", str16, "Copyright Builder: s:021187d7-27c2-4fd9-bc74-8cc00413ee52 e:null o:null");
        org.junit.Assert.assertNotNull(abstractBuilder17);
        org.junit.Assert.assertNotNull(notBuilder18);
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + false + "'", boolean19 == false);
        org.junit.Assert.assertNotNull(iHeaderMatcherList20);
        org.junit.Assert.assertNotNull(matcherRefBuilder22);
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + false + "'", boolean23 == false);
        org.junit.Assert.assertEquals("'" + str24 + "' != '" + "MathcerRefBuilder: null" + "'", str24, "MathcerRefBuilder: null");
        org.junit.Assert.assertNotNull(anyBuilder25);
        org.junit.Assert.assertEquals("'" + str27 + "' != '" + "NotBuilder: null" + "'", str27, "NotBuilder: null");
        org.junit.Assert.assertNotNull(matcherRefBuilder28);
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + false + "'", boolean29 == false);
        org.junit.Assert.assertNotNull(matcherRefBuilder31);
        org.junit.Assert.assertNotNull(copyrightBuilder33);
        org.junit.Assert.assertNotNull(copyrightBuilder35);
        org.junit.Assert.assertEquals("'" + str36 + "' != '" + "Copyright Builder: s:OASIS e:null o:null" + "'", str36, "Copyright Builder: s:OASIS e:null o:null");
        org.junit.Assert.assertNotNull(copyrightBuilder38);
        org.junit.Assert.assertNotNull(matcherRefBuilder39);
        org.junit.Assert.assertTrue("'" + boolean40 + "' != '" + false + "'", boolean40 == false);
        org.junit.Assert.assertNotNull(copyrightBuilder41);
        org.junit.Assert.assertNotNull(copyrightBuilder43);
        org.junit.Assert.assertEquals("'" + str44 + "' != '" + "Copyright Builder: s:OASIS e:null o:null" + "'", str44, "Copyright Builder: s:OASIS e:null o:null");
        org.junit.Assert.assertNotNull(copyrightBuilder46);
        org.junit.Assert.assertNotNull(copyrightBuilder47);
        org.junit.Assert.assertNotNull(copyrightBuilder48);
        org.junit.Assert.assertEquals("'" + str49 + "' != '" + "Copyright Builder: s:null e:null o:null" + "'", str49, "Copyright Builder: s:null e:null o:null");
        org.junit.Assert.assertNotNull(copyrightBuilder51);
        org.junit.Assert.assertTrue("'" + boolean52 + "' != '" + false + "'", boolean52 == false);
        org.junit.Assert.assertNotNull(copyrightBuilder53);
        org.junit.Assert.assertEquals("'" + str54 + "' != '" + "Copyright Builder: s:null e:null o:null" + "'", str54, "Copyright Builder: s:null e:null o:null");
        org.junit.Assert.assertNotNull(copyrightBuilder56);
        org.junit.Assert.assertTrue("'" + boolean57 + "' != '" + false + "'", boolean57 == false);
        org.junit.Assert.assertEquals("'" + str58 + "' != '" + "Copyright Builder: s:null e:.cvsignore o:null" + "'", str58, "Copyright Builder: s:null e:.cvsignore o:null");
        org.junit.Assert.assertNotNull(copyrightBuilder59);
        org.junit.Assert.assertNotNull(copyrightBuilder61);
        org.junit.Assert.assertNotNull(anyBuilder62);
        org.junit.Assert.assertNotNull(matcherRefBuilder63);
        org.junit.Assert.assertTrue("'" + boolean64 + "' != '" + false + "'", boolean64 == false);
        org.junit.Assert.assertNotNull(matcherRefBuilder66);
        org.junit.Assert.assertNotNull(copyrightBuilder67);
        org.junit.Assert.assertNotNull(matcherRefBuilder68);
        org.junit.Assert.assertTrue("'" + boolean69 + "' != '" + false + "'", boolean69 == false);
        org.junit.Assert.assertEquals("'" + str70 + "' != '" + "MathcerRefBuilder: null" + "'", str70, "MathcerRefBuilder: null");
        org.junit.Assert.assertNotNull(matcherRefBuilder72);
        org.junit.Assert.assertNotNull(builderArray73);
        org.junit.Assert.assertTrue("'" + boolean75 + "' != '" + true + "'", boolean75 == true);
        org.junit.Assert.assertNotNull(abstractBuilder76);
        org.junit.Assert.assertNotNull(builderArray78);
        org.junit.Assert.assertTrue("'" + boolean80 + "' != '" + true + "'", boolean80 == true);
        org.junit.Assert.assertNotNull(abstractBuilder81);
        org.junit.Assert.assertNotNull(abstractBuilder82);
        org.junit.Assert.assertNotNull(abstractBuilder83);
        org.junit.Assert.assertNotNull(abstractBuilder84);
    }

    @Test
    public void test14854() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest29.test14854");
        // The following exception was thrown during execution in test generation
        try {
            org.apache.rat.configuration.Format format1 = org.apache.rat.configuration.Format.fromName("The Telemanagement Forum License");
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: No such suffix: The Telemanagement Forum License");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
    }

    @Test
    public void test14855() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest29.test14855");
        org.apache.rat.utils.ReportingSet<java.lang.String> strSet0 = new org.apache.rat.utils.ReportingSet<java.lang.String>();
        java.lang.Object[] objArray1 = strSet0.toArray();
        org.apache.rat.utils.Log log2 = null;
        org.apache.rat.ReportConfiguration reportConfiguration3 = new org.apache.rat.ReportConfiguration(log2);
        org.apache.rat.report.claim.ClaimStatistic claimStatistic4 = org.apache.rat.Reporter.report(reportConfiguration3);
        org.apache.rat.utils.Log log5 = null;
        org.apache.rat.ReportConfiguration reportConfiguration6 = new org.apache.rat.ReportConfiguration(log5);
        org.apache.rat.report.claim.ClaimStatistic claimStatistic7 = org.apache.rat.Reporter.report(reportConfiguration6);
        org.apache.rat.utils.ReportingSet.Options options8 = org.apache.rat.utils.ReportingSet.Options.OVERWRITE;
        reportConfiguration6.licenseDuplicateOption(options8);
        reportConfiguration3.familyDuplicateOption(options8);
        org.apache.commons.io.function.IOSupplier<java.io.PrintWriter> printWriterIOSupplier11 = reportConfiguration3.getWriter();
        boolean boolean12 = reportConfiguration3.isAddingLicensesForced();
        org.apache.rat.utils.Log log13 = null;
        org.apache.rat.ReportConfiguration reportConfiguration14 = new org.apache.rat.ReportConfiguration(log13);
        reportConfiguration14.addApprovedLicenseCategory(".cvsignore");
        org.apache.rat.utils.Log.Level level17 = org.apache.rat.utils.Log.Level.ERROR;
        reportConfiguration14.logFamilyCollisions(level17);
        reportConfiguration3.logLicenseCollisions(level17);
        org.apache.rat.utils.ReportingSet<java.lang.String> strSet20 = strSet0.setLogLevel(level17);
        java.util.stream.Stream<java.lang.String> strStream21 = strSet20.stream();
        java.util.Iterator<java.lang.String> strItor22 = strSet20.iterator();
        // The following exception was thrown during execution in test generation
        try {
            java.lang.String str23 = strSet20.first();
            org.junit.Assert.fail("Expected exception of type java.util.NoSuchElementException; message: null");
        } catch (java.util.NoSuchElementException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(objArray1);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray1), "[]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray1), "[]");
        org.junit.Assert.assertNull(claimStatistic4);
        org.junit.Assert.assertNull(claimStatistic7);
        org.junit.Assert.assertTrue("'" + options8 + "' != '" + org.apache.rat.utils.ReportingSet.Options.OVERWRITE + "'", options8.equals(org.apache.rat.utils.ReportingSet.Options.OVERWRITE));
        org.junit.Assert.assertNotNull(printWriterIOSupplier11);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertTrue("'" + level17 + "' != '" + org.apache.rat.utils.Log.Level.ERROR + "'", level17.equals(org.apache.rat.utils.Log.Level.ERROR));
        org.junit.Assert.assertNotNull(strSet20);
        org.junit.Assert.assertNotNull(strStream21);
        org.junit.Assert.assertNotNull(strItor22);
    }

    @Test
    public void test14856() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest29.test14856");
        org.apache.rat.configuration.builders.TextBuilder textBuilder0 = new org.apache.rat.configuration.builders.TextBuilder();
        org.apache.rat.configuration.builders.TextBuilder textBuilder2 = textBuilder0.setText("t true");
        org.apache.rat.analysis.IHeaderMatcher iHeaderMatcher3 = textBuilder0.build();
        org.apache.rat.analysis.IHeaderMatcher iHeaderMatcher4 = textBuilder0.build();
        java.lang.String str5 = textBuilder0.toString();
        org.junit.Assert.assertNotNull(textBuilder2);
        org.junit.Assert.assertNotNull(iHeaderMatcher3);
        org.junit.Assert.assertNotNull(iHeaderMatcher4);
        org.junit.Assert.assertEquals("'" + str5 + "' != '" + "TextBuilder: t true" + "'", str5, "TextBuilder: t true");
    }

    @Test
    public void test14857() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest29.test14857");
        org.apache.rat.utils.Log log0 = null;
        org.apache.rat.ReportConfiguration reportConfiguration1 = new org.apache.rat.ReportConfiguration(log0);
        reportConfiguration1.addApprovedLicenseCategory(".cvsignore");
        org.apache.rat.utils.Log.Level level4 = org.apache.rat.utils.Log.Level.ERROR;
        reportConfiguration1.logLicenseCollisions(level4);
        org.apache.rat.license.ILicense iLicense6 = null;
        reportConfiguration1.addLicense(iLicense6);
        org.apache.rat.license.ILicenseFamily.Builder builder8 = null;
        reportConfiguration1.addFamily(builder8);
        org.apache.commons.io.function.IOSupplier<java.io.InputStream> inputStreamIOSupplier10 = reportConfiguration1.getStyleSheet();
        boolean boolean11 = reportConfiguration1.isAddingLicensesForced();
        org.junit.Assert.assertTrue("'" + level4 + "' != '" + org.apache.rat.utils.Log.Level.ERROR + "'", level4.equals(org.apache.rat.utils.Log.Level.ERROR));
        org.junit.Assert.assertNull(inputStreamIOSupplier10);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
    }

    @Test
    public void test14858() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest29.test14858");
        java.lang.String[] strArray5 = new java.lang.String[] { "http://org/apache/rat/meta-data#LicenseFamilyCategory", "Datum [ name ='http://org/apache/rat/meta-data#LicenseFamilyCategory',value ='GPL1  ']", "MANIFEST.MF", "AllBuilder:", "The MIT License" };
        org.apache.rat.utils.ReportingSet<java.lang.String> strSet6 = new org.apache.rat.utils.ReportingSet<java.lang.String>();
        boolean boolean7 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strSet6, strArray5);
        boolean boolean9 = strSet6.addIfNotPresent("http://org/apache/rat/meta-data#LicenseFamilyName");
        java.util.Iterator<java.lang.String> strItor10 = strSet6.iterator();
        strSet6.clear();
        strSet6.clear();
        java.lang.Object[] objArray13 = strSet6.toArray();
        java.util.stream.Stream<java.lang.String> strStream14 = strSet6.stream();
        java.util.Comparator<? super java.lang.String> wildcardComparator15 = strSet6.comparator();
        boolean boolean17 = strSet6.add("SpdxBuilder: null");
        java.util.stream.Stream<java.lang.String> strStream18 = strSet6.stream();
        java.util.stream.Stream<java.lang.String> strStream19 = strSet6.parallelStream();
        java.lang.String str20 = strSet6.first();
        org.junit.Assert.assertNotNull(strArray5);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + true + "'", boolean7 == true);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + true + "'", boolean9 == true);
        org.junit.Assert.assertNotNull(strItor10);
        org.junit.Assert.assertNotNull(objArray13);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray13), "[]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray13), "[]");
        org.junit.Assert.assertNotNull(strStream14);
        org.junit.Assert.assertNull(wildcardComparator15);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + true + "'", boolean17 == true);
        org.junit.Assert.assertNotNull(strStream18);
        org.junit.Assert.assertNotNull(strStream19);
        org.junit.Assert.assertEquals("'" + str20 + "' != '" + "SpdxBuilder: null" + "'", str20, "SpdxBuilder: null");
    }

    @Test
    public void test14859() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest29.test14859");
        org.apache.rat.report.claim.ClaimStatistic claimStatistic0 = new org.apache.rat.report.claim.ClaimStatistic();
        claimStatistic0.setNumApproved((int) (short) 10);
        claimStatistic0.setNumUnknown((int) '#');
        int int5 = claimStatistic0.getNumUnApproved();
        java.util.Map<java.lang.String, java.lang.Integer> strMap6 = claimStatistic0.getLicenseFileCodeMap();
        java.util.Map<java.lang.String, java.lang.Integer> strMap7 = null;
        claimStatistic0.setLicenseFileCodeMap(strMap7);
        java.util.Map<java.lang.String, java.lang.Integer> strMap9 = null;
        claimStatistic0.setLicenseFileCodeMap(strMap9);
        claimStatistic0.setNumApproved(0);
        java.util.Map<java.lang.String, java.lang.Integer> strMap13 = claimStatistic0.getDocumentCategoryMap();
        java.util.Map<java.lang.String, java.lang.Integer> strMap14 = claimStatistic0.getLicenseFileNameMap();
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 0 + "'", int5 == 0);
        org.junit.Assert.assertNull(strMap6);
        org.junit.Assert.assertNull(strMap13);
        org.junit.Assert.assertNull(strMap14);
    }

    @Test
    public void test14860() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest29.test14860");
        java.lang.String[] strArray5 = new java.lang.String[] { "http://org/apache/rat/meta-data#LicenseFamilyCategory", "Datum [ name ='http://org/apache/rat/meta-data#LicenseFamilyCategory',value ='GPL1  ']", "MANIFEST.MF", "AllBuilder:", "The MIT License" };
        org.apache.rat.utils.ReportingSet<java.lang.String> strSet6 = new org.apache.rat.utils.ReportingSet<java.lang.String>();
        boolean boolean7 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strSet6, strArray5);
        boolean boolean9 = strSet6.addIfNotPresent("http://org/apache/rat/meta-data#LicenseFamilyName");
        java.util.Iterator<java.lang.String> strItor10 = strSet6.iterator();
        strSet6.clear();
        strSet6.clear();
        java.util.Comparator<? super java.lang.String> wildcardComparator13 = strSet6.comparator();
        boolean boolean15 = strSet6.addIfNotPresent("f02d0");
        java.util.SortedSet<org.apache.rat.license.ILicenseFamily> iLicenseFamilySet16 = org.apache.rat.license.LicenseFamilySetFactory.emptyLicenseFamilySet();
        boolean boolean17 = strSet6.retainAll((java.util.Collection<org.apache.rat.license.ILicenseFamily>) iLicenseFamilySet16);
        org.junit.Assert.assertNotNull(strArray5);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + true + "'", boolean7 == true);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + true + "'", boolean9 == true);
        org.junit.Assert.assertNotNull(strItor10);
        org.junit.Assert.assertNull(wildcardComparator13);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + true + "'", boolean15 == true);
        org.junit.Assert.assertNotNull(iLicenseFamilySet16);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + true + "'", boolean17 == true);
    }

    @Test
    public void test14861() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest29.test14861");
        org.apache.rat.analysis.license.FullTextMatchingLicense fullTextMatchingLicense0 = new org.apache.rat.analysis.license.FullTextMatchingLicense();
        fullTextMatchingLicense0.setLicenseFamilyName("hi!");
        java.lang.String str3 = fullTextMatchingLicense0.getLicenseFamilyCategory();
        java.lang.String str4 = fullTextMatchingLicense0.getLicenseFamilyCategory();
        fullTextMatchingLicense0.setFullText("NotBuilder: MathcerRefBuilder: null");
        org.apache.rat.license.ILicense.Builder builder7 = fullTextMatchingLicense0.getLicense();
        fullTextMatchingLicense0.setFullText("META-DATA#LICENSEFAMILYNAME',VALUE ='GNU GENERAL PUBLIC LICENSE, VERSION 1 ']");
        org.apache.rat.license.ILicense.Builder builder10 = fullTextMatchingLicense0.getLicense();
        java.lang.String str11 = fullTextMatchingLicense0.getNotes();
        org.junit.Assert.assertNull(str3);
        org.junit.Assert.assertNull(str4);
        org.junit.Assert.assertNotNull(builder7);
        org.junit.Assert.assertNotNull(builder10);
        org.junit.Assert.assertNull(str11);
    }

    @Test
    public void test14862() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest29.test14862");
        org.apache.rat.analysis.license.FullTextMatchingLicense fullTextMatchingLicense0 = new org.apache.rat.analysis.license.FullTextMatchingLicense();
        fullTextMatchingLicense0.setLicenseFamilyName("hi!");
        java.lang.String str3 = fullTextMatchingLicense0.getLicenseFamilyCategory();
        java.lang.String str4 = fullTextMatchingLicense0.getLicenseFamilyName();
        fullTextMatchingLicense0.setLicenseFamilyName("http://org/apache/rat/meta-data#LicenseFamilyName");
        fullTextMatchingLicense0.setFullText("9c36f068-9920-4c66-98c2-ba24e3dffa9c");
        fullTextMatchingLicense0.setNotes("0925e382-79b7-417a-85be-aed683d949e2");
        org.apache.rat.license.ILicense.Builder builder11 = fullTextMatchingLicense0.getLicense();
        java.util.regex.Pattern pattern13 = null;
        org.apache.rat.analysis.matchers.SimpleRegexMatcher simpleRegexMatcher14 = new org.apache.rat.analysis.matchers.SimpleRegexMatcher("d4148d3a-edbc-4672-b347-0fa619553f91", pattern13);
        org.apache.rat.license.ILicense.Builder builder15 = builder11.setMatcher((org.apache.rat.analysis.IHeaderMatcher) simpleRegexMatcher14);
        org.junit.Assert.assertNull(str3);
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "hi!" + "'", str4, "hi!");
        org.junit.Assert.assertNotNull(builder11);
        org.junit.Assert.assertNotNull(builder15);
    }

    @Test
    public void test14863() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest29.test14863");
        // The following exception was thrown during execution in test generation
        try {
            org.apache.rat.analysis.matchers.CopyrightMatcher copyrightMatcher4 = new org.apache.rat.analysis.matchers.CopyrightMatcher("fef8ca38d00648b8922122b2d87fc230", "f96ad0b6-2267-4692-93e4-227659f9d621", "0e4cf59d6e2347eb854e2c010e384f16", "Copyright Builder: s:null e:a1d7a6cd-e548-4846-82aa-06426863977c o:TextBuilder: Datum [ name ='http:...");
            org.junit.Assert.fail("Expected exception of type java.util.regex.PatternSyntaxException; message: Unclosed character class near index 203?\\s+((\\([Cc]\\)|?)\\s+)?f96ad0b6-2267-4692-93e4-227659f9d621\\s*-\\s*0e4cf59d6e2347eb854e2c010e384f16,?\\s+Copyright Builder: s:null e:a1d7a6cd-e548-4846-82aa-06426863977c o:TextBuilder: Datum [ name ='http:...?                                                                                                                                                                                                           ^");
        } catch (java.util.regex.PatternSyntaxException e) {
            // Expected exception.
        }
    }

    @Test
    public void test14864() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest29.test14864");
        org.apache.rat.utils.DefaultLog defaultLog0 = org.apache.rat.utils.DefaultLog.INSTANCE;
        org.apache.rat.configuration.builders.AllBuilder allBuilder1 = new org.apache.rat.configuration.builders.AllBuilder();
        org.apache.rat.configuration.builders.MatcherRefBuilder matcherRefBuilder2 = org.apache.rat.analysis.IHeaderMatcher.Builder.matcherRef();
        boolean boolean3 = matcherRefBuilder2.hasId();
        java.lang.String str4 = matcherRefBuilder2.toString();
        org.apache.rat.configuration.builders.AnyBuilder anyBuilder5 = org.apache.rat.analysis.IHeaderMatcher.Builder.any();
        org.apache.rat.configuration.builders.NotBuilder notBuilder6 = new org.apache.rat.configuration.builders.NotBuilder();
        java.lang.String str7 = notBuilder6.toString();
        org.apache.rat.configuration.builders.MatcherRefBuilder matcherRefBuilder8 = org.apache.rat.analysis.IHeaderMatcher.Builder.matcherRef();
        boolean boolean9 = matcherRefBuilder8.hasId();
        java.util.Map<java.lang.String, org.apache.rat.analysis.IHeaderMatcher> strMap10 = null;
        org.apache.rat.configuration.builders.MatcherRefBuilder matcherRefBuilder11 = matcherRefBuilder8.setMatchers(strMap10);
        org.apache.rat.configuration.builders.AllBuilder allBuilder12 = new org.apache.rat.configuration.builders.AllBuilder();
        org.apache.rat.configuration.builders.CopyrightBuilder copyrightBuilder13 = org.apache.rat.analysis.IHeaderMatcher.Builder.copyright();
        org.apache.rat.configuration.builders.CopyrightBuilder copyrightBuilder15 = copyrightBuilder13.setStart("OASIS");
        java.lang.String str16 = copyrightBuilder13.toString();
        org.apache.rat.configuration.builders.CopyrightBuilder copyrightBuilder18 = copyrightBuilder13.setStart("223f0aba-15d4-49e9-901e-5740c137aebf");
        org.apache.rat.configuration.builders.MatcherRefBuilder matcherRefBuilder19 = org.apache.rat.analysis.IHeaderMatcher.Builder.matcherRef();
        boolean boolean20 = matcherRefBuilder19.hasId();
        org.apache.rat.configuration.builders.CopyrightBuilder copyrightBuilder21 = org.apache.rat.analysis.IHeaderMatcher.Builder.copyright();
        org.apache.rat.configuration.builders.CopyrightBuilder copyrightBuilder23 = copyrightBuilder21.setStart("OASIS");
        java.lang.String str24 = copyrightBuilder21.toString();
        org.apache.rat.configuration.builders.CopyrightBuilder copyrightBuilder26 = copyrightBuilder21.setStart("223f0aba-15d4-49e9-901e-5740c137aebf");
        org.apache.rat.configuration.builders.CopyrightBuilder copyrightBuilder27 = org.apache.rat.analysis.IHeaderMatcher.Builder.copyright();
        org.apache.rat.configuration.builders.CopyrightBuilder copyrightBuilder28 = org.apache.rat.analysis.IHeaderMatcher.Builder.copyright();
        java.lang.String str29 = copyrightBuilder28.toString();
        org.apache.rat.configuration.builders.CopyrightBuilder copyrightBuilder31 = copyrightBuilder28.setEnd(".cvsignore");
        boolean boolean32 = copyrightBuilder28.hasId();
        org.apache.rat.configuration.builders.CopyrightBuilder copyrightBuilder33 = org.apache.rat.analysis.IHeaderMatcher.Builder.copyright();
        java.lang.String str34 = copyrightBuilder33.toString();
        org.apache.rat.configuration.builders.CopyrightBuilder copyrightBuilder36 = copyrightBuilder33.setEnd(".cvsignore");
        boolean boolean37 = copyrightBuilder33.hasId();
        java.lang.String str38 = copyrightBuilder33.toString();
        org.apache.rat.configuration.builders.CopyrightBuilder copyrightBuilder39 = org.apache.rat.analysis.IHeaderMatcher.Builder.copyright();
        org.apache.rat.configuration.builders.CopyrightBuilder copyrightBuilder41 = copyrightBuilder39.setStart("OASIS");
        org.apache.rat.configuration.builders.AnyBuilder anyBuilder42 = org.apache.rat.analysis.IHeaderMatcher.Builder.any();
        org.apache.rat.configuration.builders.MatcherRefBuilder matcherRefBuilder43 = org.apache.rat.analysis.IHeaderMatcher.Builder.matcherRef();
        boolean boolean44 = matcherRefBuilder43.hasId();
        java.util.Map<java.lang.String, org.apache.rat.analysis.IHeaderMatcher> strMap45 = null;
        org.apache.rat.configuration.builders.MatcherRefBuilder matcherRefBuilder46 = matcherRefBuilder43.setMatchers(strMap45);
        org.apache.rat.configuration.builders.CopyrightBuilder copyrightBuilder47 = org.apache.rat.analysis.IHeaderMatcher.Builder.copyright();
        org.apache.rat.configuration.builders.MatcherRefBuilder matcherRefBuilder48 = org.apache.rat.analysis.IHeaderMatcher.Builder.matcherRef();
        boolean boolean49 = matcherRefBuilder48.hasId();
        java.lang.String str50 = matcherRefBuilder48.toString();
        java.util.Map<java.lang.String, org.apache.rat.analysis.IHeaderMatcher> strMap51 = null;
        org.apache.rat.configuration.builders.MatcherRefBuilder matcherRefBuilder52 = matcherRefBuilder48.setMatchers(strMap51);
        org.apache.rat.analysis.IHeaderMatcher.Builder[] builderArray53 = new org.apache.rat.analysis.IHeaderMatcher.Builder[] { matcherRefBuilder8, allBuilder12, copyrightBuilder18, matcherRefBuilder19, copyrightBuilder21, copyrightBuilder27, copyrightBuilder28, copyrightBuilder33, copyrightBuilder39, anyBuilder42, matcherRefBuilder43, copyrightBuilder47, matcherRefBuilder48 };
        java.util.ArrayList<org.apache.rat.analysis.IHeaderMatcher.Builder> builderList54 = new java.util.ArrayList<org.apache.rat.analysis.IHeaderMatcher.Builder>();
        boolean boolean55 = java.util.Collections.addAll((java.util.Collection<org.apache.rat.analysis.IHeaderMatcher.Builder>) builderList54, builderArray53);
        org.apache.rat.configuration.builders.AbstractBuilder abstractBuilder56 = notBuilder6.add((java.util.Collection<org.apache.rat.analysis.IHeaderMatcher.Builder>) builderList54);
        org.apache.rat.configuration.builders.MatcherRefBuilder matcherRefBuilder57 = new org.apache.rat.configuration.builders.MatcherRefBuilder();
        org.apache.rat.analysis.IHeaderMatcher.Builder[] builderArray58 = new org.apache.rat.analysis.IHeaderMatcher.Builder[] { matcherRefBuilder2, anyBuilder5, notBuilder6, matcherRefBuilder57 };
        java.util.ArrayList<org.apache.rat.analysis.IHeaderMatcher.Builder> builderList59 = new java.util.ArrayList<org.apache.rat.analysis.IHeaderMatcher.Builder>();
        boolean boolean60 = java.util.Collections.addAll((java.util.Collection<org.apache.rat.analysis.IHeaderMatcher.Builder>) builderList59, builderArray58);
        org.apache.rat.configuration.builders.AbstractBuilder abstractBuilder61 = allBuilder1.add((java.util.Collection<org.apache.rat.analysis.IHeaderMatcher.Builder>) builderList59);
        defaultLog0.info((java.lang.Object) allBuilder1);
        org.apache.rat.annotation.ApacheV2LicenseAppender apacheV2LicenseAppender64 = new org.apache.rat.annotation.ApacheV2LicenseAppender((org.apache.rat.utils.Log) defaultLog0, "true");
        org.apache.rat.utils.Log.Level level65 = defaultLog0.getLevel();
        org.apache.rat.annotation.ApacheV2LicenseAppender apacheV2LicenseAppender67 = new org.apache.rat.annotation.ApacheV2LicenseAppender((org.apache.rat.utils.Log) defaultLog0, "c819f60c-c781-49b6-ae3a-5a74de014a4d");
        org.apache.rat.annotation.ApacheV2LicenseAppender apacheV2LicenseAppender69 = new org.apache.rat.annotation.ApacheV2LicenseAppender((org.apache.rat.utils.Log) defaultLog0, "META-DATA#LICENSEFAMILYCATEGORY',VALUE ='????? ']");
        java.io.File file70 = null;
        // The following exception was thrown during execution in test generation
        try {
            apacheV2LicenseAppender69.append(file70);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(defaultLog0);
        org.junit.Assert.assertNotNull(matcherRefBuilder2);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "MathcerRefBuilder: null" + "'", str4, "MathcerRefBuilder: null");
        org.junit.Assert.assertNotNull(anyBuilder5);
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "NotBuilder: null" + "'", str7, "NotBuilder: null");
        org.junit.Assert.assertNotNull(matcherRefBuilder8);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertNotNull(matcherRefBuilder11);
        org.junit.Assert.assertNotNull(copyrightBuilder13);
        org.junit.Assert.assertNotNull(copyrightBuilder15);
        org.junit.Assert.assertEquals("'" + str16 + "' != '" + "Copyright Builder: s:OASIS e:null o:null" + "'", str16, "Copyright Builder: s:OASIS e:null o:null");
        org.junit.Assert.assertNotNull(copyrightBuilder18);
        org.junit.Assert.assertNotNull(matcherRefBuilder19);
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + false + "'", boolean20 == false);
        org.junit.Assert.assertNotNull(copyrightBuilder21);
        org.junit.Assert.assertNotNull(copyrightBuilder23);
        org.junit.Assert.assertEquals("'" + str24 + "' != '" + "Copyright Builder: s:OASIS e:null o:null" + "'", str24, "Copyright Builder: s:OASIS e:null o:null");
        org.junit.Assert.assertNotNull(copyrightBuilder26);
        org.junit.Assert.assertNotNull(copyrightBuilder27);
        org.junit.Assert.assertNotNull(copyrightBuilder28);
        org.junit.Assert.assertEquals("'" + str29 + "' != '" + "Copyright Builder: s:null e:null o:null" + "'", str29, "Copyright Builder: s:null e:null o:null");
        org.junit.Assert.assertNotNull(copyrightBuilder31);
        org.junit.Assert.assertTrue("'" + boolean32 + "' != '" + false + "'", boolean32 == false);
        org.junit.Assert.assertNotNull(copyrightBuilder33);
        org.junit.Assert.assertEquals("'" + str34 + "' != '" + "Copyright Builder: s:null e:null o:null" + "'", str34, "Copyright Builder: s:null e:null o:null");
        org.junit.Assert.assertNotNull(copyrightBuilder36);
        org.junit.Assert.assertTrue("'" + boolean37 + "' != '" + false + "'", boolean37 == false);
        org.junit.Assert.assertEquals("'" + str38 + "' != '" + "Copyright Builder: s:null e:.cvsignore o:null" + "'", str38, "Copyright Builder: s:null e:.cvsignore o:null");
        org.junit.Assert.assertNotNull(copyrightBuilder39);
        org.junit.Assert.assertNotNull(copyrightBuilder41);
        org.junit.Assert.assertNotNull(anyBuilder42);
        org.junit.Assert.assertNotNull(matcherRefBuilder43);
        org.junit.Assert.assertTrue("'" + boolean44 + "' != '" + false + "'", boolean44 == false);
        org.junit.Assert.assertNotNull(matcherRefBuilder46);
        org.junit.Assert.assertNotNull(copyrightBuilder47);
        org.junit.Assert.assertNotNull(matcherRefBuilder48);
        org.junit.Assert.assertTrue("'" + boolean49 + "' != '" + false + "'", boolean49 == false);
        org.junit.Assert.assertEquals("'" + str50 + "' != '" + "MathcerRefBuilder: null" + "'", str50, "MathcerRefBuilder: null");
        org.junit.Assert.assertNotNull(matcherRefBuilder52);
        org.junit.Assert.assertNotNull(builderArray53);
        org.junit.Assert.assertTrue("'" + boolean55 + "' != '" + true + "'", boolean55 == true);
        org.junit.Assert.assertNotNull(abstractBuilder56);
        org.junit.Assert.assertNotNull(builderArray58);
        org.junit.Assert.assertTrue("'" + boolean60 + "' != '" + true + "'", boolean60 == true);
        org.junit.Assert.assertNotNull(abstractBuilder61);
        org.junit.Assert.assertTrue("'" + level65 + "' != '" + org.apache.rat.utils.Log.Level.ERROR + "'", level65.equals(org.apache.rat.utils.Log.Level.ERROR));
    }

    @Test
    public void test14865() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest29.test14865");
        org.apache.rat.api.MetaData metaData0 = new org.apache.rat.api.MetaData();
        java.lang.String str2 = metaData0.value("COMMON DEVELOPMENT AND DISTRIBUTION LICENSE Version 1.0");
        java.lang.String str4 = metaData0.value("W3C Document Copyright");
        boolean boolean6 = metaData0.clear("hi!");
        metaData0.clear();
        java.util.Collection<org.apache.rat.api.MetaData.Datum> datumCollection8 = metaData0.getData();
        org.apache.rat.api.MetaData.Datum datum9 = org.apache.rat.api.MetaData.RAT_LICENSE_FAMILY_NAME_DATUM_ACADEMIC_FREE_LICENSE_VERSION_2_1;
        java.lang.String str10 = datum9.toString();
        metaData0.set(datum9);
        org.apache.rat.api.MetaData.Datum datum12 = org.apache.rat.api.MetaData.RAT_APPROVED_LICENSE_DATUM_FALSE;
        metaData0.set(datum12);
        boolean boolean15 = metaData0.clear("NotBuilder: SpdxBuilder: ef7a8b13-64c3-4510-bb0c-dbf208e1e73f");
        java.util.Collection<org.apache.rat.api.MetaData.Datum> datumCollection16 = metaData0.getData();
        metaData0.clear();
        boolean boolean19 = metaData0.clear("TextBuilderstand");
        java.util.Collection<org.apache.rat.api.MetaData.Datum> datumCollection20 = metaData0.getData();
        org.junit.Assert.assertNull(str2);
        org.junit.Assert.assertNull(str4);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertNotNull(datumCollection8);
        org.junit.Assert.assertNotNull(datum9);
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "Datum [ name ='http://org/apache/rat/meta-data#LicenseFamilyName',value ='Academic Free License, Version 2.1 ']" + "'", str10, "Datum [ name ='http://org/apache/rat/meta-data#LicenseFamilyName',value ='Academic Free License, Version 2.1 ']");
        org.junit.Assert.assertNotNull(datum12);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + false + "'", boolean15 == false);
        org.junit.Assert.assertNotNull(datumCollection16);
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + false + "'", boolean19 == false);
        org.junit.Assert.assertNotNull(datumCollection20);
    }

    @Test
    public void test14866() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest29.test14866");
        org.apache.rat.utils.ReportingSet<java.lang.String> strSet0 = new org.apache.rat.utils.ReportingSet<java.lang.String>();
        int int1 = strSet0.size();
        org.apache.rat.utils.ReportingSet<java.lang.String> strSet3 = strSet0.headSet("?????");
        org.apache.rat.utils.ReportingSet<java.lang.String> strSet6 = strSet0.subSet("TextBuilder: true http://org/apache/rat/meta-data#LicenseFamilyName", "org/a");
        // The following exception was thrown during execution in test generation
        try {
            org.apache.rat.utils.ReportingSet<java.lang.String> strSet9 = strSet6.subSet("af506abb-6673-42e6-9700-cec7e4b28eba", "1cdcc5f6-6860-49fc-84ca-20b3763f3015");
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: toKey out of range");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + int1 + "' != '" + 0 + "'", int1 == 0);
        org.junit.Assert.assertNotNull(strSet3);
        org.junit.Assert.assertNotNull(strSet6);
    }

    @Test
    public void test14867() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest29.test14867");
        org.apache.rat.api.MetaData metaData0 = new org.apache.rat.api.MetaData();
        java.lang.String str2 = metaData0.value("COMMON DEVELOPMENT AND DISTRIBUTION LICENSE Version 1.0");
        java.lang.String str4 = metaData0.value("W3C Document Copyright");
        boolean boolean6 = metaData0.clear("hi!");
        java.lang.String str8 = metaData0.value("true");
        java.util.Collection<org.apache.rat.api.MetaData.Datum> datumCollection9 = metaData0.getData();
        metaData0.clear();
        org.apache.rat.api.MetaData.Datum datum13 = new org.apache.rat.api.MetaData.Datum("MANIFEST.MF", "GPL2 ");
        java.lang.String str14 = datum13.getName();
        metaData0.set(datum13);
        java.lang.String str16 = datum13.toString();
        java.lang.String str17 = datum13.toString();
        org.junit.Assert.assertNull(str2);
        org.junit.Assert.assertNull(str4);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertNull(str8);
        org.junit.Assert.assertNotNull(datumCollection9);
        org.junit.Assert.assertEquals("'" + str14 + "' != '" + "MANIFEST.MF" + "'", str14, "MANIFEST.MF");
        org.junit.Assert.assertEquals("'" + str16 + "' != '" + "Datum [ name ='MANIFEST.MF',value ='GPL2  ']" + "'", str16, "Datum [ name ='MANIFEST.MF',value ='GPL2  ']");
        org.junit.Assert.assertEquals("'" + str17 + "' != '" + "Datum [ name ='MANIFEST.MF',value ='GPL2  ']" + "'", str17, "Datum [ name ='MANIFEST.MF',value ='GPL2  ']");
    }

    @Test
    public void test14868() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest29.test14868");
        boolean boolean1 = org.apache.rat.document.impl.guesser.BinaryGuesser.isImage("TextBuilder: RegexBuilder: ");
        org.junit.Assert.assertTrue("'" + boolean1 + "' != '" + false + "'", boolean1 == false);
    }

    @Test
    public void test14869() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest29.test14869");
        // The following exception was thrown during execution in test generation
        try {
            org.apache.rat.configuration.builders.AbstractBuilder abstractBuilder1 = org.apache.rat.configuration.MatcherBuilderTracker.getMatcherBuilder("2953E6CB-20A5-4DCF-A9F5-85C51CC8C635");
            org.junit.Assert.fail("Expected exception of type org.apache.rat.ConfigurationException; message: ?Valid builders?all?matcherRef?copyright?not?regex?spdx?text?any?ERROR MSG?No matcher builder named 2953E6CB-20A5-4DCF-A9F5-85C51CC8C635");
        } catch (org.apache.rat.ConfigurationException e) {
            // Expected exception.
        }
    }

    @Test
    public void test14870() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest29.test14870");
        org.apache.rat.license.ILicenseFamilyBuilder iLicenseFamilyBuilder0 = new org.apache.rat.license.ILicenseFamilyBuilder();
        java.lang.String str1 = iLicenseFamilyBuilder0.getCategory();
        org.apache.rat.license.ILicenseFamily.Builder builder3 = iLicenseFamilyBuilder0.setLicenseFamilyCategory("AL   ");
        java.lang.String str4 = iLicenseFamilyBuilder0.getCategory();
        java.lang.String str5 = iLicenseFamilyBuilder0.getCategory();
        org.apache.rat.license.ILicenseFamily.Builder builder7 = iLicenseFamilyBuilder0.setLicenseFamilyName("httporgapacheratmetadataLicenseFamilyName");
        java.lang.String str8 = iLicenseFamilyBuilder0.getCategory();
        org.apache.rat.license.ILicenseFamily.Builder builder10 = iLicenseFamilyBuilder0.setLicenseFamilyName("bb19fbac-b846-4793-a7d7-77a7e009c631");
        org.apache.rat.license.ILicenseFamily iLicenseFamily11 = iLicenseFamilyBuilder0.build();
        org.junit.Assert.assertNull(str1);
        org.junit.Assert.assertNotNull(builder3);
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "AL   " + "'", str4, "AL   ");
        org.junit.Assert.assertEquals("'" + str5 + "' != '" + "AL   " + "'", str5, "AL   ");
        org.junit.Assert.assertNotNull(builder7);
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "AL   " + "'", str8, "AL   ");
        org.junit.Assert.assertNotNull(builder10);
        org.junit.Assert.assertNotNull(iLicenseFamily11);
    }

    @Test
    public void test14871() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest29.test14871");
        org.apache.rat.configuration.builders.AllBuilder allBuilder1 = new org.apache.rat.configuration.builders.AllBuilder();
        java.lang.String str2 = allBuilder1.toString();
        java.lang.String str3 = allBuilder1.toString();
        java.lang.String str4 = allBuilder1.toString();
        org.apache.rat.analysis.IHeaderMatcher iHeaderMatcher5 = allBuilder1.build();
        org.apache.rat.analysis.matchers.NotMatcher notMatcher6 = new org.apache.rat.analysis.matchers.NotMatcher("38e4211d-0f24-4ec0-aa5c-260c68412f39", iHeaderMatcher5);
        org.apache.rat.analysis.IHeaderMatcher.State state8 = notMatcher6.matches("RegexBuilder: ef75a6e8-7197-4e9e-83bf-f8b367e6b3c5");
        java.lang.String str9 = notMatcher6.toString();
        org.junit.Assert.assertEquals("'" + str2 + "' != '" + "AllBuilder:" + "'", str2, "AllBuilder:");
        org.junit.Assert.assertEquals("'" + str3 + "' != '" + "AllBuilder:" + "'", str3, "AllBuilder:");
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "AllBuilder:" + "'", str4, "AllBuilder:");
        org.junit.Assert.assertNotNull(iHeaderMatcher5);
        org.junit.Assert.assertTrue("'" + state8 + "' != '" + org.apache.rat.analysis.IHeaderMatcher.State.f + "'", state8.equals(org.apache.rat.analysis.IHeaderMatcher.State.f));
        org.junit.Assert.assertEquals("'" + str9 + "' != '" + "38e4211d-0f24-4ec0-aa5c-260c68412f39" + "'", str9, "38e4211d-0f24-4ec0-aa5c-260c68412f39");
    }

    @Test
    public void test14872() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest29.test14872");
        java.lang.String[] strArray5 = new java.lang.String[] { "http://org/apache/rat/meta-data#LicenseFamilyCategory", "Datum [ name ='http://org/apache/rat/meta-data#LicenseFamilyCategory',value ='GPL1  ']", "MANIFEST.MF", "AllBuilder:", "The MIT License" };
        org.apache.rat.utils.ReportingSet<java.lang.String> strSet6 = new org.apache.rat.utils.ReportingSet<java.lang.String>();
        boolean boolean7 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strSet6, strArray5);
        boolean boolean9 = strSet6.addIfNotPresent("http://org/apache/rat/meta-data#LicenseFamilyName");
        java.util.Iterator<java.lang.String> strItor10 = strSet6.iterator();
        java.lang.Object[] objArray11 = strSet6.toArray();
        java.lang.String[] strArray17 = new java.lang.String[] { "http://org/apache/rat/meta-data#LicenseFamilyCategory", "Datum [ name ='http://org/apache/rat/meta-data#LicenseFamilyCategory',value ='GPL1  ']", "MANIFEST.MF", "AllBuilder:", "The MIT License" };
        org.apache.rat.utils.ReportingSet<java.lang.String> strSet18 = new org.apache.rat.utils.ReportingSet<java.lang.String>();
        boolean boolean19 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strSet18, strArray17);
        boolean boolean21 = strSet18.addIfNotPresent("http://org/apache/rat/meta-data#LicenseFamilyName");
        java.util.SortedSet<org.apache.rat.license.ILicenseFamily> iLicenseFamilySet22 = org.apache.rat.license.LicenseFamilySetFactory.emptyLicenseFamilySet();
        boolean boolean23 = strSet18.removeAll((java.util.Collection<org.apache.rat.license.ILicenseFamily>) iLicenseFamilySet22);
        boolean boolean24 = strSet6.containsAll((java.util.Collection<org.apache.rat.license.ILicenseFamily>) iLicenseFamilySet22);
        java.util.Iterator<java.lang.String> strItor25 = strSet6.iterator();
        org.apache.rat.analysis.license.FullTextMatchingLicense fullTextMatchingLicense26 = new org.apache.rat.analysis.license.FullTextMatchingLicense();
        fullTextMatchingLicense26.setLicenseFamilyName("hi!");
        java.lang.String str29 = fullTextMatchingLicense26.getLicenseFamilyCategory();
        java.lang.String str30 = fullTextMatchingLicense26.getLicenseFamilyName();
        fullTextMatchingLicense26.setLicenseFamilyName("SpdxBuilder: null");
        fullTextMatchingLicense26.setLicenseFamilyCategory("TMF");
        org.apache.rat.license.ILicenseFamily iLicenseFamily35 = fullTextMatchingLicense26.getLicenseFamily();
        java.util.SortedSet<org.apache.rat.license.ILicenseFamily> iLicenseFamilySet36 = org.apache.rat.license.LicenseFamilySetFactory.emptyLicenseFamilySet();
        org.apache.rat.license.ILicenseFamily iLicenseFamily37 = org.apache.rat.license.LicenseFamilySetFactory.search(iLicenseFamily35, iLicenseFamilySet36);
        java.lang.String[] strArray43 = new java.lang.String[] { "http://org/apache/rat/meta-data#LicenseFamilyCategory", "Datum [ name ='http://org/apache/rat/meta-data#LicenseFamilyCategory',value ='GPL1  ']", "MANIFEST.MF", "AllBuilder:", "The MIT License" };
        org.apache.rat.utils.ReportingSet<java.lang.String> strSet44 = new org.apache.rat.utils.ReportingSet<java.lang.String>();
        boolean boolean45 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strSet44, strArray43);
        boolean boolean47 = strSet44.addIfNotPresent("http://org/apache/rat/meta-data#LicenseFamilyName");
        java.util.Iterator<java.lang.String> strItor48 = strSet44.iterator();
        java.lang.Object[] objArray49 = strSet44.toArray();
        java.lang.String[] strArray55 = new java.lang.String[] { "http://org/apache/rat/meta-data#LicenseFamilyCategory", "Datum [ name ='http://org/apache/rat/meta-data#LicenseFamilyCategory',value ='GPL1  ']", "MANIFEST.MF", "AllBuilder:", "The MIT License" };
        org.apache.rat.utils.ReportingSet<java.lang.String> strSet56 = new org.apache.rat.utils.ReportingSet<java.lang.String>();
        boolean boolean57 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strSet56, strArray55);
        boolean boolean59 = strSet56.addIfNotPresent("http://org/apache/rat/meta-data#LicenseFamilyName");
        java.util.SortedSet<org.apache.rat.license.ILicenseFamily> iLicenseFamilySet60 = org.apache.rat.license.LicenseFamilySetFactory.emptyLicenseFamilySet();
        boolean boolean61 = strSet56.removeAll((java.util.Collection<org.apache.rat.license.ILicenseFamily>) iLicenseFamilySet60);
        boolean boolean62 = strSet44.containsAll((java.util.Collection<org.apache.rat.license.ILicenseFamily>) iLicenseFamilySet60);
        org.apache.rat.license.ILicenseFamily iLicenseFamily63 = org.apache.rat.license.LicenseFamilySetFactory.search(iLicenseFamily35, iLicenseFamilySet60);
        org.apache.rat.policy.DefaultPolicy defaultPolicy64 = new org.apache.rat.policy.DefaultPolicy((java.util.Collection<org.apache.rat.license.ILicenseFamily>) iLicenseFamilySet60);
        boolean boolean65 = strSet6.removeAll((java.util.Collection<org.apache.rat.license.ILicenseFamily>) iLicenseFamilySet60);
        org.apache.rat.analysis.license.FullTextMatchingLicense fullTextMatchingLicense66 = new org.apache.rat.analysis.license.FullTextMatchingLicense();
        fullTextMatchingLicense66.setLicenseFamilyName("hi!");
        fullTextMatchingLicense66.setFullText("MANIFEST.MF");
        org.apache.rat.license.ILicense.Builder builder71 = fullTextMatchingLicense66.getLicense();
        java.lang.String str72 = fullTextMatchingLicense66.getLicenseFamilyCategory();
        java.lang.String str73 = fullTextMatchingLicense66.getNotes();
        org.apache.rat.license.ILicense.Builder builder74 = fullTextMatchingLicense66.getLicense();
        org.apache.rat.analysis.matchers.SimpleTextMatcher simpleTextMatcher78 = new org.apache.rat.analysis.matchers.SimpleTextMatcher("W3C  ", "c523095e-4421-4cc4-93e2-039f23b91f76");
        org.apache.rat.analysis.matchers.NotMatcher notMatcher79 = new org.apache.rat.analysis.matchers.NotMatcher("e15853fc-6f47-4f3f-a346-63fe009915e5", (org.apache.rat.analysis.IHeaderMatcher) simpleTextMatcher78);
        org.apache.rat.license.ILicense.Builder builder80 = builder74.setMatcher((org.apache.rat.analysis.IHeaderMatcher) notMatcher79);
        notMatcher79.reset();
        boolean boolean82 = strSet6.equals((java.lang.Object) notMatcher79);
        org.junit.Assert.assertNotNull(strArray5);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + true + "'", boolean7 == true);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + true + "'", boolean9 == true);
        org.junit.Assert.assertNotNull(strItor10);
        org.junit.Assert.assertNotNull(objArray11);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray11), "[AllBuilder:, Datum [ name ='http://org/apache/rat/meta-data#LicenseFamilyCategory',value ='GPL1  '], MANIFEST.MF, The MIT License, http://org/apache/rat/meta-data#LicenseFamilyCategory, http://org/apache/rat/meta-data#LicenseFamilyName]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray11), "[AllBuilder:, Datum [ name ='http://org/apache/rat/meta-data#LicenseFamilyCategory',value ='GPL1  '], MANIFEST.MF, The MIT License, http://org/apache/rat/meta-data#LicenseFamilyCategory, http://org/apache/rat/meta-data#LicenseFamilyName]");
        org.junit.Assert.assertNotNull(strArray17);
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + true + "'", boolean19 == true);
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + true + "'", boolean21 == true);
        org.junit.Assert.assertNotNull(iLicenseFamilySet22);
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + false + "'", boolean23 == false);
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + true + "'", boolean24 == true);
        org.junit.Assert.assertNotNull(strItor25);
        org.junit.Assert.assertNull(str29);
        org.junit.Assert.assertEquals("'" + str30 + "' != '" + "hi!" + "'", str30, "hi!");
        org.junit.Assert.assertNotNull(iLicenseFamily35);
        org.junit.Assert.assertNotNull(iLicenseFamilySet36);
        org.junit.Assert.assertNull(iLicenseFamily37);
        org.junit.Assert.assertNotNull(strArray43);
        org.junit.Assert.assertTrue("'" + boolean45 + "' != '" + true + "'", boolean45 == true);
        org.junit.Assert.assertTrue("'" + boolean47 + "' != '" + true + "'", boolean47 == true);
        org.junit.Assert.assertNotNull(strItor48);
        org.junit.Assert.assertNotNull(objArray49);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray49), "[AllBuilder:, Datum [ name ='http://org/apache/rat/meta-data#LicenseFamilyCategory',value ='GPL1  '], MANIFEST.MF, The MIT License, http://org/apache/rat/meta-data#LicenseFamilyCategory, http://org/apache/rat/meta-data#LicenseFamilyName]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray49), "[AllBuilder:, Datum [ name ='http://org/apache/rat/meta-data#LicenseFamilyCategory',value ='GPL1  '], MANIFEST.MF, The MIT License, http://org/apache/rat/meta-data#LicenseFamilyCategory, http://org/apache/rat/meta-data#LicenseFamilyName]");
        org.junit.Assert.assertNotNull(strArray55);
        org.junit.Assert.assertTrue("'" + boolean57 + "' != '" + true + "'", boolean57 == true);
        org.junit.Assert.assertTrue("'" + boolean59 + "' != '" + true + "'", boolean59 == true);
        org.junit.Assert.assertNotNull(iLicenseFamilySet60);
        org.junit.Assert.assertTrue("'" + boolean61 + "' != '" + false + "'", boolean61 == false);
        org.junit.Assert.assertTrue("'" + boolean62 + "' != '" + true + "'", boolean62 == true);
        org.junit.Assert.assertNull(iLicenseFamily63);
        org.junit.Assert.assertTrue("'" + boolean65 + "' != '" + false + "'", boolean65 == false);
        org.junit.Assert.assertNotNull(builder71);
        org.junit.Assert.assertNull(str72);
        org.junit.Assert.assertNull(str73);
        org.junit.Assert.assertNotNull(builder74);
        org.junit.Assert.assertNotNull(builder80);
        org.junit.Assert.assertTrue("'" + boolean82 + "' != '" + false + "'", boolean82 == false);
    }

    @Test
    public void test14873() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest29.test14873");
        org.apache.rat.utils.Log log0 = null;
        org.apache.rat.ReportConfiguration reportConfiguration1 = new org.apache.rat.ReportConfiguration(log0);
        java.io.FilenameFilter filenameFilter2 = reportConfiguration1.getInputFileFilter();
        org.apache.rat.license.LicenseSetFactory.LicenseFilter licenseFilter3 = org.apache.rat.license.LicenseSetFactory.LicenseFilter.all;
        java.util.SortedSet<org.apache.rat.license.ILicense> iLicenseSet4 = reportConfiguration1.getLicenses(licenseFilter3);
        org.apache.rat.config.AddLicenseHeaders addLicenseHeaders5 = org.apache.rat.config.AddLicenseHeaders.FALSE;
        reportConfiguration1.setAddLicenseHeaders(addLicenseHeaders5);
        org.apache.rat.utils.Log log7 = null;
        org.apache.rat.ReportConfiguration reportConfiguration8 = new org.apache.rat.ReportConfiguration(log7);
        org.apache.rat.report.claim.ClaimStatistic claimStatistic9 = org.apache.rat.Reporter.report(reportConfiguration8);
        org.apache.rat.license.LicenseSetFactory.LicenseFilter licenseFilter10 = org.apache.rat.license.LicenseSetFactory.LicenseFilter.all;
        org.apache.rat.Reporter.listLicenses(reportConfiguration8, licenseFilter10);
        org.apache.rat.Reporter.listLicenses(reportConfiguration1, licenseFilter10);
        org.apache.rat.utils.Log log13 = null;
        org.apache.rat.ReportConfiguration reportConfiguration14 = new org.apache.rat.ReportConfiguration(log13);
        java.io.FilenameFilter filenameFilter15 = reportConfiguration14.getInputFileFilter();
        org.apache.rat.license.LicenseSetFactory.LicenseFilter licenseFilter16 = org.apache.rat.license.LicenseSetFactory.LicenseFilter.all;
        java.util.SortedSet<org.apache.rat.license.ILicense> iLicenseSet17 = reportConfiguration14.getLicenses(licenseFilter16);
        org.apache.rat.config.AddLicenseHeaders addLicenseHeaders18 = org.apache.rat.config.AddLicenseHeaders.FALSE;
        reportConfiguration14.setAddLicenseHeaders(addLicenseHeaders18);
        org.apache.rat.utils.Log log20 = null;
        org.apache.rat.ReportConfiguration reportConfiguration21 = new org.apache.rat.ReportConfiguration(log20);
        org.apache.rat.report.claim.ClaimStatistic claimStatistic22 = org.apache.rat.Reporter.report(reportConfiguration21);
        org.apache.rat.license.LicenseSetFactory.LicenseFilter licenseFilter23 = org.apache.rat.license.LicenseSetFactory.LicenseFilter.all;
        org.apache.rat.Reporter.listLicenses(reportConfiguration21, licenseFilter23);
        org.apache.rat.Reporter.listLicenses(reportConfiguration14, licenseFilter23);
        org.apache.rat.Reporter.listLicenses(reportConfiguration1, licenseFilter23);
        org.apache.rat.utils.Log log27 = null;
        org.apache.rat.ReportConfiguration reportConfiguration28 = new org.apache.rat.ReportConfiguration(log27);
        org.apache.commons.io.function.IOSupplier<java.io.OutputStream> outputStreamIOSupplier29 = reportConfiguration28.getOutput();
        reportConfiguration1.setOut(outputStreamIOSupplier29);
        org.apache.rat.utils.Log.Level level31 = org.apache.rat.utils.Log.Level.WARN;
        reportConfiguration1.logLicenseCollisions(level31);
        org.apache.commons.io.filefilter.IOFileFilter iOFileFilter33 = reportConfiguration1.getDirectoryFilter();
        java.nio.file.Path path34 = null;
        boolean boolean35 = iOFileFilter33.matches(path34);
        java.nio.file.Path path36 = null;
        java.nio.file.attribute.BasicFileAttributes basicFileAttributes37 = null;
        java.nio.file.FileVisitResult fileVisitResult38 = iOFileFilter33.accept(path36, basicFileAttributes37);
        org.apache.commons.io.filefilter.IOFileFilter iOFileFilter39 = iOFileFilter33.negate();
        org.apache.commons.io.filefilter.IOFileFilter iOFileFilter40 = iOFileFilter33.negate();
        org.apache.commons.io.filefilter.IOFileFilter iOFileFilter41 = iOFileFilter40.negate();
        org.junit.Assert.assertNull(filenameFilter2);
        org.junit.Assert.assertTrue("'" + licenseFilter3 + "' != '" + org.apache.rat.license.LicenseSetFactory.LicenseFilter.all + "'", licenseFilter3.equals(org.apache.rat.license.LicenseSetFactory.LicenseFilter.all));
        org.junit.Assert.assertNotNull(iLicenseSet4);
        org.junit.Assert.assertTrue("'" + addLicenseHeaders5 + "' != '" + org.apache.rat.config.AddLicenseHeaders.FALSE + "'", addLicenseHeaders5.equals(org.apache.rat.config.AddLicenseHeaders.FALSE));
        org.junit.Assert.assertNull(claimStatistic9);
        org.junit.Assert.assertTrue("'" + licenseFilter10 + "' != '" + org.apache.rat.license.LicenseSetFactory.LicenseFilter.all + "'", licenseFilter10.equals(org.apache.rat.license.LicenseSetFactory.LicenseFilter.all));
        org.junit.Assert.assertNull(filenameFilter15);
        org.junit.Assert.assertTrue("'" + licenseFilter16 + "' != '" + org.apache.rat.license.LicenseSetFactory.LicenseFilter.all + "'", licenseFilter16.equals(org.apache.rat.license.LicenseSetFactory.LicenseFilter.all));
        org.junit.Assert.assertNotNull(iLicenseSet17);
        org.junit.Assert.assertTrue("'" + addLicenseHeaders18 + "' != '" + org.apache.rat.config.AddLicenseHeaders.FALSE + "'", addLicenseHeaders18.equals(org.apache.rat.config.AddLicenseHeaders.FALSE));
        org.junit.Assert.assertNull(claimStatistic22);
        org.junit.Assert.assertTrue("'" + licenseFilter23 + "' != '" + org.apache.rat.license.LicenseSetFactory.LicenseFilter.all + "'", licenseFilter23.equals(org.apache.rat.license.LicenseSetFactory.LicenseFilter.all));
        org.junit.Assert.assertNotNull(outputStreamIOSupplier29);
        org.junit.Assert.assertTrue("'" + level31 + "' != '" + org.apache.rat.utils.Log.Level.WARN + "'", level31.equals(org.apache.rat.utils.Log.Level.WARN));
        org.junit.Assert.assertNotNull(iOFileFilter33);
        org.junit.Assert.assertTrue("'" + boolean35 + "' != '" + false + "'", boolean35 == false);
        org.junit.Assert.assertTrue("'" + fileVisitResult38 + "' != '" + java.nio.file.FileVisitResult.TERMINATE + "'", fileVisitResult38.equals(java.nio.file.FileVisitResult.TERMINATE));
        org.junit.Assert.assertNotNull(iOFileFilter39);
        org.junit.Assert.assertNotNull(iOFileFilter40);
        org.junit.Assert.assertNotNull(iOFileFilter41);
    }

    @Test
    public void test14874() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest29.test14874");
        org.apache.rat.utils.DefaultLog defaultLog0 = org.apache.rat.utils.DefaultLog.INSTANCE;
        org.apache.rat.configuration.builders.AllBuilder allBuilder1 = new org.apache.rat.configuration.builders.AllBuilder();
        org.apache.rat.configuration.builders.MatcherRefBuilder matcherRefBuilder2 = org.apache.rat.analysis.IHeaderMatcher.Builder.matcherRef();
        boolean boolean3 = matcherRefBuilder2.hasId();
        java.lang.String str4 = matcherRefBuilder2.toString();
        org.apache.rat.configuration.builders.AnyBuilder anyBuilder5 = org.apache.rat.analysis.IHeaderMatcher.Builder.any();
        org.apache.rat.configuration.builders.NotBuilder notBuilder6 = new org.apache.rat.configuration.builders.NotBuilder();
        java.lang.String str7 = notBuilder6.toString();
        org.apache.rat.configuration.builders.MatcherRefBuilder matcherRefBuilder8 = org.apache.rat.analysis.IHeaderMatcher.Builder.matcherRef();
        boolean boolean9 = matcherRefBuilder8.hasId();
        java.util.Map<java.lang.String, org.apache.rat.analysis.IHeaderMatcher> strMap10 = null;
        org.apache.rat.configuration.builders.MatcherRefBuilder matcherRefBuilder11 = matcherRefBuilder8.setMatchers(strMap10);
        org.apache.rat.configuration.builders.AllBuilder allBuilder12 = new org.apache.rat.configuration.builders.AllBuilder();
        org.apache.rat.configuration.builders.CopyrightBuilder copyrightBuilder13 = org.apache.rat.analysis.IHeaderMatcher.Builder.copyright();
        org.apache.rat.configuration.builders.CopyrightBuilder copyrightBuilder15 = copyrightBuilder13.setStart("OASIS");
        java.lang.String str16 = copyrightBuilder13.toString();
        org.apache.rat.configuration.builders.CopyrightBuilder copyrightBuilder18 = copyrightBuilder13.setStart("223f0aba-15d4-49e9-901e-5740c137aebf");
        org.apache.rat.configuration.builders.MatcherRefBuilder matcherRefBuilder19 = org.apache.rat.analysis.IHeaderMatcher.Builder.matcherRef();
        boolean boolean20 = matcherRefBuilder19.hasId();
        org.apache.rat.configuration.builders.CopyrightBuilder copyrightBuilder21 = org.apache.rat.analysis.IHeaderMatcher.Builder.copyright();
        org.apache.rat.configuration.builders.CopyrightBuilder copyrightBuilder23 = copyrightBuilder21.setStart("OASIS");
        java.lang.String str24 = copyrightBuilder21.toString();
        org.apache.rat.configuration.builders.CopyrightBuilder copyrightBuilder26 = copyrightBuilder21.setStart("223f0aba-15d4-49e9-901e-5740c137aebf");
        org.apache.rat.configuration.builders.CopyrightBuilder copyrightBuilder27 = org.apache.rat.analysis.IHeaderMatcher.Builder.copyright();
        org.apache.rat.configuration.builders.CopyrightBuilder copyrightBuilder28 = org.apache.rat.analysis.IHeaderMatcher.Builder.copyright();
        java.lang.String str29 = copyrightBuilder28.toString();
        org.apache.rat.configuration.builders.CopyrightBuilder copyrightBuilder31 = copyrightBuilder28.setEnd(".cvsignore");
        boolean boolean32 = copyrightBuilder28.hasId();
        org.apache.rat.configuration.builders.CopyrightBuilder copyrightBuilder33 = org.apache.rat.analysis.IHeaderMatcher.Builder.copyright();
        java.lang.String str34 = copyrightBuilder33.toString();
        org.apache.rat.configuration.builders.CopyrightBuilder copyrightBuilder36 = copyrightBuilder33.setEnd(".cvsignore");
        boolean boolean37 = copyrightBuilder33.hasId();
        java.lang.String str38 = copyrightBuilder33.toString();
        org.apache.rat.configuration.builders.CopyrightBuilder copyrightBuilder39 = org.apache.rat.analysis.IHeaderMatcher.Builder.copyright();
        org.apache.rat.configuration.builders.CopyrightBuilder copyrightBuilder41 = copyrightBuilder39.setStart("OASIS");
        org.apache.rat.configuration.builders.AnyBuilder anyBuilder42 = org.apache.rat.analysis.IHeaderMatcher.Builder.any();
        org.apache.rat.configuration.builders.MatcherRefBuilder matcherRefBuilder43 = org.apache.rat.analysis.IHeaderMatcher.Builder.matcherRef();
        boolean boolean44 = matcherRefBuilder43.hasId();
        java.util.Map<java.lang.String, org.apache.rat.analysis.IHeaderMatcher> strMap45 = null;
        org.apache.rat.configuration.builders.MatcherRefBuilder matcherRefBuilder46 = matcherRefBuilder43.setMatchers(strMap45);
        org.apache.rat.configuration.builders.CopyrightBuilder copyrightBuilder47 = org.apache.rat.analysis.IHeaderMatcher.Builder.copyright();
        org.apache.rat.configuration.builders.MatcherRefBuilder matcherRefBuilder48 = org.apache.rat.analysis.IHeaderMatcher.Builder.matcherRef();
        boolean boolean49 = matcherRefBuilder48.hasId();
        java.lang.String str50 = matcherRefBuilder48.toString();
        java.util.Map<java.lang.String, org.apache.rat.analysis.IHeaderMatcher> strMap51 = null;
        org.apache.rat.configuration.builders.MatcherRefBuilder matcherRefBuilder52 = matcherRefBuilder48.setMatchers(strMap51);
        org.apache.rat.analysis.IHeaderMatcher.Builder[] builderArray53 = new org.apache.rat.analysis.IHeaderMatcher.Builder[] { matcherRefBuilder8, allBuilder12, copyrightBuilder18, matcherRefBuilder19, copyrightBuilder21, copyrightBuilder27, copyrightBuilder28, copyrightBuilder33, copyrightBuilder39, anyBuilder42, matcherRefBuilder43, copyrightBuilder47, matcherRefBuilder48 };
        java.util.ArrayList<org.apache.rat.analysis.IHeaderMatcher.Builder> builderList54 = new java.util.ArrayList<org.apache.rat.analysis.IHeaderMatcher.Builder>();
        boolean boolean55 = java.util.Collections.addAll((java.util.Collection<org.apache.rat.analysis.IHeaderMatcher.Builder>) builderList54, builderArray53);
        org.apache.rat.configuration.builders.AbstractBuilder abstractBuilder56 = notBuilder6.add((java.util.Collection<org.apache.rat.analysis.IHeaderMatcher.Builder>) builderList54);
        org.apache.rat.configuration.builders.MatcherRefBuilder matcherRefBuilder57 = new org.apache.rat.configuration.builders.MatcherRefBuilder();
        org.apache.rat.analysis.IHeaderMatcher.Builder[] builderArray58 = new org.apache.rat.analysis.IHeaderMatcher.Builder[] { matcherRefBuilder2, anyBuilder5, notBuilder6, matcherRefBuilder57 };
        java.util.ArrayList<org.apache.rat.analysis.IHeaderMatcher.Builder> builderList59 = new java.util.ArrayList<org.apache.rat.analysis.IHeaderMatcher.Builder>();
        boolean boolean60 = java.util.Collections.addAll((java.util.Collection<org.apache.rat.analysis.IHeaderMatcher.Builder>) builderList59, builderArray58);
        org.apache.rat.configuration.builders.AbstractBuilder abstractBuilder61 = allBuilder1.add((java.util.Collection<org.apache.rat.analysis.IHeaderMatcher.Builder>) builderList59);
        defaultLog0.info((java.lang.Object) allBuilder1);
        org.apache.rat.utils.Log.Level level63 = defaultLog0.getLevel();
        org.apache.rat.license.ILicense[] iLicenseArray65 = new org.apache.rat.license.ILicense[] {};
        java.util.TreeSet<org.apache.rat.license.ILicense> iLicenseSet66 = new java.util.TreeSet<org.apache.rat.license.ILicense>();
        boolean boolean67 = java.util.Collections.addAll((java.util.Collection<org.apache.rat.license.ILicense>) iLicenseSet66, iLicenseArray65);
        java.lang.String[] strArray80 = new java.lang.String[] { "GPL2 ", "GPL1 ", "notice", "http://org/apache/rat/meta-data#LicenseFamilyName", "notice", "GPL2 ", "http://org/apache/rat/meta-data#LicenseFamilyName", "", "GPL2 ", "", "GPL1 ", "hi!" };
        java.util.ArrayList<java.lang.String> strList81 = new java.util.ArrayList<java.lang.String>();
        boolean boolean82 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strList81, strArray80);
        org.apache.rat.license.LicenseSetFactory licenseSetFactory83 = new org.apache.rat.license.LicenseSetFactory((java.util.SortedSet<org.apache.rat.license.ILicense>) iLicenseSet66, (java.util.Collection<java.lang.String>) strList81);
        org.apache.rat.license.ILicense iLicense84 = org.apache.rat.license.LicenseSetFactory.search("JAVA", (java.util.SortedSet<org.apache.rat.license.ILicense>) iLicenseSet66);
        org.apache.rat.utils.ReportingSet<org.apache.rat.license.ILicense> iLicenseSet85 = new org.apache.rat.utils.ReportingSet<org.apache.rat.license.ILicense>((java.util.SortedSet<org.apache.rat.license.ILicense>) iLicenseSet66);
        // The following exception was thrown during execution in test generation
        try {
            org.apache.rat.document.IDocumentAnalyser iDocumentAnalyser86 = org.apache.rat.analysis.DefaultAnalyserFactory.createDefaultAnalyser((org.apache.rat.utils.Log) defaultLog0, (java.util.Collection<org.apache.rat.license.ILicense>) iLicenseSet85);
            org.junit.Assert.fail("Expected exception of type org.apache.rat.ConfigurationException; message: At least one license must be defined");
        } catch (org.apache.rat.ConfigurationException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(defaultLog0);
        org.junit.Assert.assertNotNull(matcherRefBuilder2);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "MathcerRefBuilder: null" + "'", str4, "MathcerRefBuilder: null");
        org.junit.Assert.assertNotNull(anyBuilder5);
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "NotBuilder: null" + "'", str7, "NotBuilder: null");
        org.junit.Assert.assertNotNull(matcherRefBuilder8);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertNotNull(matcherRefBuilder11);
        org.junit.Assert.assertNotNull(copyrightBuilder13);
        org.junit.Assert.assertNotNull(copyrightBuilder15);
        org.junit.Assert.assertEquals("'" + str16 + "' != '" + "Copyright Builder: s:OASIS e:null o:null" + "'", str16, "Copyright Builder: s:OASIS e:null o:null");
        org.junit.Assert.assertNotNull(copyrightBuilder18);
        org.junit.Assert.assertNotNull(matcherRefBuilder19);
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + false + "'", boolean20 == false);
        org.junit.Assert.assertNotNull(copyrightBuilder21);
        org.junit.Assert.assertNotNull(copyrightBuilder23);
        org.junit.Assert.assertEquals("'" + str24 + "' != '" + "Copyright Builder: s:OASIS e:null o:null" + "'", str24, "Copyright Builder: s:OASIS e:null o:null");
        org.junit.Assert.assertNotNull(copyrightBuilder26);
        org.junit.Assert.assertNotNull(copyrightBuilder27);
        org.junit.Assert.assertNotNull(copyrightBuilder28);
        org.junit.Assert.assertEquals("'" + str29 + "' != '" + "Copyright Builder: s:null e:null o:null" + "'", str29, "Copyright Builder: s:null e:null o:null");
        org.junit.Assert.assertNotNull(copyrightBuilder31);
        org.junit.Assert.assertTrue("'" + boolean32 + "' != '" + false + "'", boolean32 == false);
        org.junit.Assert.assertNotNull(copyrightBuilder33);
        org.junit.Assert.assertEquals("'" + str34 + "' != '" + "Copyright Builder: s:null e:null o:null" + "'", str34, "Copyright Builder: s:null e:null o:null");
        org.junit.Assert.assertNotNull(copyrightBuilder36);
        org.junit.Assert.assertTrue("'" + boolean37 + "' != '" + false + "'", boolean37 == false);
        org.junit.Assert.assertEquals("'" + str38 + "' != '" + "Copyright Builder: s:null e:.cvsignore o:null" + "'", str38, "Copyright Builder: s:null e:.cvsignore o:null");
        org.junit.Assert.assertNotNull(copyrightBuilder39);
        org.junit.Assert.assertNotNull(copyrightBuilder41);
        org.junit.Assert.assertNotNull(anyBuilder42);
        org.junit.Assert.assertNotNull(matcherRefBuilder43);
        org.junit.Assert.assertTrue("'" + boolean44 + "' != '" + false + "'", boolean44 == false);
        org.junit.Assert.assertNotNull(matcherRefBuilder46);
        org.junit.Assert.assertNotNull(copyrightBuilder47);
        org.junit.Assert.assertNotNull(matcherRefBuilder48);
        org.junit.Assert.assertTrue("'" + boolean49 + "' != '" + false + "'", boolean49 == false);
        org.junit.Assert.assertEquals("'" + str50 + "' != '" + "MathcerRefBuilder: null" + "'", str50, "MathcerRefBuilder: null");
        org.junit.Assert.assertNotNull(matcherRefBuilder52);
        org.junit.Assert.assertNotNull(builderArray53);
        org.junit.Assert.assertTrue("'" + boolean55 + "' != '" + true + "'", boolean55 == true);
        org.junit.Assert.assertNotNull(abstractBuilder56);
        org.junit.Assert.assertNotNull(builderArray58);
        org.junit.Assert.assertTrue("'" + boolean60 + "' != '" + true + "'", boolean60 == true);
        org.junit.Assert.assertNotNull(abstractBuilder61);
        org.junit.Assert.assertTrue("'" + level63 + "' != '" + org.apache.rat.utils.Log.Level.ERROR + "'", level63.equals(org.apache.rat.utils.Log.Level.ERROR));
        org.junit.Assert.assertNotNull(iLicenseArray65);
        org.junit.Assert.assertTrue("'" + boolean67 + "' != '" + false + "'", boolean67 == false);
        org.junit.Assert.assertNotNull(strArray80);
        org.junit.Assert.assertTrue("'" + boolean82 + "' != '" + true + "'", boolean82 == true);
        org.junit.Assert.assertNull(iLicense84);
    }

    @Test
    public void test14875() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest29.test14875");
        boolean boolean1 = org.apache.rat.document.impl.guesser.BinaryGuesser.isBytecode("72712f961d9845898b3c557ed1a823cb");
        org.junit.Assert.assertTrue("'" + boolean1 + "' != '" + false + "'", boolean1 == false);
    }

    @Test
    public void test14876() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest29.test14876");
        org.apache.rat.utils.Log log0 = null;
        org.apache.rat.ReportConfiguration reportConfiguration1 = new org.apache.rat.ReportConfiguration(log0);
        org.apache.rat.report.claim.ClaimStatistic claimStatistic2 = org.apache.rat.Reporter.report(reportConfiguration1);
        org.apache.rat.utils.Log log3 = null;
        org.apache.rat.ReportConfiguration reportConfiguration4 = new org.apache.rat.ReportConfiguration(log3);
        org.apache.rat.report.claim.ClaimStatistic claimStatistic5 = org.apache.rat.Reporter.report(reportConfiguration4);
        org.apache.rat.utils.ReportingSet.Options options6 = org.apache.rat.utils.ReportingSet.Options.OVERWRITE;
        reportConfiguration4.licenseDuplicateOption(options6);
        reportConfiguration1.familyDuplicateOption(options6);
        org.apache.commons.io.function.IOSupplier<java.io.PrintWriter> printWriterIOSupplier9 = reportConfiguration1.getWriter();
        org.apache.rat.utils.Log log10 = null;
        org.apache.rat.ReportConfiguration reportConfiguration11 = new org.apache.rat.ReportConfiguration(log10);
        reportConfiguration11.addApprovedLicenseCategory(".cvsignore");
        org.apache.rat.utils.Log.Level level14 = org.apache.rat.utils.Log.Level.ERROR;
        reportConfiguration11.logFamilyCollisions(level14);
        reportConfiguration1.logFamilyCollisions(level14);
        reportConfiguration1.removeApprovedLicenseCategory("b9d57440-4b03-461e-a164-b29e1341bbc8");
        org.apache.rat.utils.Log log19 = null;
        org.apache.rat.ReportConfiguration reportConfiguration20 = new org.apache.rat.ReportConfiguration(log19);
        java.io.FilenameFilter filenameFilter21 = reportConfiguration20.getInputFileFilter();
        org.apache.rat.license.LicenseSetFactory.LicenseFilter licenseFilter22 = org.apache.rat.license.LicenseSetFactory.LicenseFilter.all;
        java.util.SortedSet<org.apache.rat.license.ILicense> iLicenseSet23 = reportConfiguration20.getLicenses(licenseFilter22);
        org.apache.rat.config.AddLicenseHeaders addLicenseHeaders24 = org.apache.rat.config.AddLicenseHeaders.FALSE;
        reportConfiguration20.setAddLicenseHeaders(addLicenseHeaders24);
        org.apache.rat.utils.Log log26 = null;
        org.apache.rat.ReportConfiguration reportConfiguration27 = new org.apache.rat.ReportConfiguration(log26);
        org.apache.rat.report.claim.ClaimStatistic claimStatistic28 = org.apache.rat.Reporter.report(reportConfiguration27);
        org.apache.rat.license.LicenseSetFactory.LicenseFilter licenseFilter29 = org.apache.rat.license.LicenseSetFactory.LicenseFilter.all;
        org.apache.rat.Reporter.listLicenses(reportConfiguration27, licenseFilter29);
        org.apache.rat.Reporter.listLicenses(reportConfiguration20, licenseFilter29);
        java.util.SortedSet<org.apache.rat.license.ILicense> iLicenseSet32 = reportConfiguration1.getLicenses(licenseFilter29);
        org.apache.rat.configuration.Format format33 = org.apache.rat.configuration.Format.XML;
        org.apache.rat.configuration.LicenseReader licenseReader34 = format33.licenseReader();
        org.apache.rat.configuration.LicenseReader licenseReader35 = format33.licenseReader();
        org.apache.rat.configuration.LicenseReader licenseReader36 = format33.licenseReader();
        org.apache.rat.configuration.LicenseReader licenseReader37 = format33.licenseReader();
        org.apache.rat.configuration.LicenseReader licenseReader38 = format33.licenseReader();
        org.apache.rat.configuration.LicenseReader licenseReader39 = format33.licenseReader();
        java.util.SortedSet<org.apache.rat.license.ILicense> iLicenseSet40 = licenseReader39.readLicenses();
        reportConfiguration1.addLicenses((java.util.Collection<org.apache.rat.license.ILicense>) iLicenseSet40);
        org.junit.Assert.assertNull(claimStatistic2);
        org.junit.Assert.assertNull(claimStatistic5);
        org.junit.Assert.assertTrue("'" + options6 + "' != '" + org.apache.rat.utils.ReportingSet.Options.OVERWRITE + "'", options6.equals(org.apache.rat.utils.ReportingSet.Options.OVERWRITE));
        org.junit.Assert.assertNotNull(printWriterIOSupplier9);
        org.junit.Assert.assertTrue("'" + level14 + "' != '" + org.apache.rat.utils.Log.Level.ERROR + "'", level14.equals(org.apache.rat.utils.Log.Level.ERROR));
        org.junit.Assert.assertNull(filenameFilter21);
        org.junit.Assert.assertTrue("'" + licenseFilter22 + "' != '" + org.apache.rat.license.LicenseSetFactory.LicenseFilter.all + "'", licenseFilter22.equals(org.apache.rat.license.LicenseSetFactory.LicenseFilter.all));
        org.junit.Assert.assertNotNull(iLicenseSet23);
        org.junit.Assert.assertTrue("'" + addLicenseHeaders24 + "' != '" + org.apache.rat.config.AddLicenseHeaders.FALSE + "'", addLicenseHeaders24.equals(org.apache.rat.config.AddLicenseHeaders.FALSE));
        org.junit.Assert.assertNull(claimStatistic28);
        org.junit.Assert.assertTrue("'" + licenseFilter29 + "' != '" + org.apache.rat.license.LicenseSetFactory.LicenseFilter.all + "'", licenseFilter29.equals(org.apache.rat.license.LicenseSetFactory.LicenseFilter.all));
        org.junit.Assert.assertNotNull(iLicenseSet32);
        org.junit.Assert.assertTrue("'" + format33 + "' != '" + org.apache.rat.configuration.Format.XML + "'", format33.equals(org.apache.rat.configuration.Format.XML));
        org.junit.Assert.assertNotNull(licenseReader34);
        org.junit.Assert.assertNotNull(licenseReader35);
        org.junit.Assert.assertNotNull(licenseReader36);
        org.junit.Assert.assertNotNull(licenseReader37);
        org.junit.Assert.assertNotNull(licenseReader38);
        org.junit.Assert.assertNotNull(licenseReader39);
        org.junit.Assert.assertNotNull(iLicenseSet40);
    }

    @Test
    public void test14877() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest29.test14877");
        // The following exception was thrown during execution in test generation
        try {
            org.apache.rat.configuration.builders.AbstractBuilder abstractBuilder1 = org.apache.rat.configuration.MatcherBuilderTracker.getMatcherBuilder("4f1be289-aaa7-4730-8076-690bc1f926c5");
            org.junit.Assert.fail("Expected exception of type org.apache.rat.ConfigurationException; message: ?Valid builders?all?matcherRef?copyright?not?regex?spdx?text?any?ERROR MSG?No matcher builder named 4f1be289-aaa7-4730-8076-690bc1f926c5");
        } catch (org.apache.rat.ConfigurationException e) {
            // Expected exception.
        }
    }

    @Test
    public void test14878() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest29.test14878");
        org.apache.rat.analysis.matchers.SimpleTextMatcher simpleTextMatcher2 = new org.apache.rat.analysis.matchers.SimpleTextMatcher("RegexBuilder: JAVA", "c9c1d124-d125-4f9c-8b51-7fa516a943ce");
        org.apache.rat.analysis.IHeaderMatcher.State state4 = simpleTextMatcher2.matches("0c5b2bd2-284e-4146-88ab-f447552c02f1");
        org.junit.Assert.assertTrue("'" + state4 + "' != '" + org.apache.rat.analysis.IHeaderMatcher.State.i + "'", state4.equals(org.apache.rat.analysis.IHeaderMatcher.State.i));
    }

    @Test
    public void test14879() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest29.test14879");
        org.apache.rat.utils.Log log0 = null;
        org.apache.rat.ReportConfiguration reportConfiguration1 = new org.apache.rat.ReportConfiguration(log0);
        org.apache.rat.report.claim.ClaimStatistic claimStatistic2 = org.apache.rat.Reporter.report(reportConfiguration1);
        java.lang.String[] strArray8 = new java.lang.String[] { "http://org/apache/rat/meta-data#LicenseFamilyCategory", "Datum [ name ='http://org/apache/rat/meta-data#LicenseFamilyCategory',value ='GPL1  ']", "MANIFEST.MF", "AllBuilder:", "The MIT License" };
        org.apache.rat.utils.ReportingSet<java.lang.String> strSet9 = new org.apache.rat.utils.ReportingSet<java.lang.String>();
        boolean boolean10 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strSet9, strArray8);
        boolean boolean12 = strSet9.addIfNotPresent("http://org/apache/rat/meta-data#LicenseFamilyName");
        java.util.Iterator<java.lang.String> strItor13 = strSet9.iterator();
        java.lang.Object[] objArray14 = strSet9.toArray();
        org.apache.rat.utils.ReportingSet.Options options15 = null;
        org.apache.rat.utils.ReportingSet<java.lang.String> strSet16 = strSet9.setDuplicateOption(options15);
        boolean boolean18 = strSet16.add("bd015714-405b-4304-9faa-36efad80e6e6 GEN  ");
        java.lang.String str19 = strSet16.last();
        java.util.Iterator<java.lang.String> strItor20 = strSet16.iterator();
        reportConfiguration1.removeApprovedLicenseCategories((java.util.Collection<java.lang.String>) strSet16);
        org.junit.Assert.assertNull(claimStatistic2);
        org.junit.Assert.assertNotNull(strArray8);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + true + "'", boolean10 == true);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + true + "'", boolean12 == true);
        org.junit.Assert.assertNotNull(strItor13);
        org.junit.Assert.assertNotNull(objArray14);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray14), "[AllBuilder:, Datum [ name ='http://org/apache/rat/meta-data#LicenseFamilyCategory',value ='GPL1  '], MANIFEST.MF, The MIT License, http://org/apache/rat/meta-data#LicenseFamilyCategory, http://org/apache/rat/meta-data#LicenseFamilyName]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray14), "[AllBuilder:, Datum [ name ='http://org/apache/rat/meta-data#LicenseFamilyCategory',value ='GPL1  '], MANIFEST.MF, The MIT License, http://org/apache/rat/meta-data#LicenseFamilyCategory, http://org/apache/rat/meta-data#LicenseFamilyName]");
        org.junit.Assert.assertNotNull(strSet16);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + true + "'", boolean18 == true);
        org.junit.Assert.assertEquals("'" + str19 + "' != '" + "http://org/apache/rat/meta-data#LicenseFamilyName" + "'", str19, "http://org/apache/rat/meta-data#LicenseFamilyName");
        org.junit.Assert.assertNotNull(strItor20);
    }

    @Test
    public void test14880() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest29.test14880");
        java.util.regex.Pattern pattern1 = null;
        org.apache.rat.analysis.matchers.SimpleRegexMatcher simpleRegexMatcher2 = new org.apache.rat.analysis.matchers.SimpleRegexMatcher("faa10b62-dcc0-4eae-baec-502cdfefeaee", pattern1);
    }

    @Test
    public void test14881() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest29.test14881");
        org.apache.rat.analysis.matchers.CopyrightMatcher copyrightMatcher3 = new org.apache.rat.analysis.matchers.CopyrightMatcher("GEN  ", "c523095e-4421-4cc4-93e2-039f23b91f76", "META-DATA#LICENSEFAMILYNAME");
        org.apache.rat.analysis.IHeaderMatcher.State state4 = copyrightMatcher3.finalizeState();
        copyrightMatcher3.reset();
        org.apache.rat.analysis.IHeaderMatcher.State state7 = copyrightMatcher3.matches("8af65ec0-8946-4ab4-afc8-2934c1a2b42c");
        // The following exception was thrown during execution in test generation
        try {
            boolean boolean8 = state7.asBoolean();
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalStateException; message: 'asBoolean' should never be called on an indeterminate state");
        } catch (java.lang.IllegalStateException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + state4 + "' != '" + org.apache.rat.analysis.IHeaderMatcher.State.f + "'", state4.equals(org.apache.rat.analysis.IHeaderMatcher.State.f));
        org.junit.Assert.assertTrue("'" + state7 + "' != '" + org.apache.rat.analysis.IHeaderMatcher.State.i + "'", state7.equals(org.apache.rat.analysis.IHeaderMatcher.State.i));
    }

    @Test
    public void test14882() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest29.test14882");
        boolean boolean1 = org.apache.rat.document.impl.guesser.NoteGuesser.isNote("fc097836-bed8-42ff-be46-7a575bf519d2");
        org.junit.Assert.assertTrue("'" + boolean1 + "' != '" + false + "'", boolean1 == false);
    }

    @Test
    public void test14883() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest29.test14883");
        org.apache.rat.Defaults.Builder builder0 = org.apache.rat.Defaults.builder();
        org.apache.rat.Defaults.Builder builder2 = builder0.add("META-DATA#LICENSEFAMILYNAME");
        org.apache.rat.Defaults.Builder builder4 = builder0.remove("Copyright Builder: s:null e:null o:null");
        org.apache.rat.Defaults.Builder builder5 = builder4.noDefault();
        org.apache.rat.Defaults.Builder builder6 = builder5.noDefault();
        org.apache.rat.Defaults.Builder builder8 = builder6.remove("223f0aba-15d4-49e9-901e-5740c137aebf");
        org.apache.rat.Defaults.Builder builder10 = builder6.add("MathcerRefBuilder: TMF");
        org.apache.rat.Defaults.Builder builder12 = builder10.add("OASIS Open License");
        org.apache.rat.Defaults.Builder builder13 = builder10.noDefault();
        org.apache.rat.Defaults.Builder builder15 = builder10.add("Copyright Builder: s:org/a e:EF7A8B13-64C3-4510-BB0C-DBF208E1E73F o:W3C  ");
        org.junit.Assert.assertNotNull(builder0);
        org.junit.Assert.assertNotNull(builder2);
        org.junit.Assert.assertNotNull(builder4);
        org.junit.Assert.assertNotNull(builder5);
        org.junit.Assert.assertNotNull(builder6);
        org.junit.Assert.assertNotNull(builder8);
        org.junit.Assert.assertNotNull(builder10);
        org.junit.Assert.assertNotNull(builder12);
        org.junit.Assert.assertNotNull(builder13);
        org.junit.Assert.assertNotNull(builder15);
    }

    @Test
    public void test14884() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest29.test14884");
        org.apache.rat.Defaults.Builder builder0 = org.apache.rat.Defaults.builder();
        org.apache.rat.Defaults defaults1 = builder0.build();
        org.apache.rat.Defaults.Builder builder3 = builder0.add("Copyright Builder: s:null e:ef75a6e8-7197-4e9e-83bf-f8b367e6b3c5 o:03f57a5c-be91-4df3-b5be-50bd5e31e571");
        java.net.URL uRL4 = null;
        // The following exception was thrown during execution in test generation
        try {
            org.apache.rat.Defaults.Builder builder5 = builder3.add(uRL4);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(builder0);
        org.junit.Assert.assertNotNull(defaults1);
        org.junit.Assert.assertNotNull(builder3);
    }

    @Test
    public void test14885() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest29.test14885");
        org.apache.rat.utils.Log log0 = null;
        org.apache.rat.ReportConfiguration reportConfiguration1 = new org.apache.rat.ReportConfiguration(log0);
        reportConfiguration1.addApprovedLicenseCategory(".cvsignore");
        org.apache.rat.utils.Log.Level level4 = org.apache.rat.utils.Log.Level.ERROR;
        reportConfiguration1.logLicenseCollisions(level4);
        reportConfiguration1.addApprovedLicenseCategory("73fbee1b-7ed9-442a-968e-b2b525ca688f");
        org.apache.rat.utils.Log log8 = null;
        org.apache.rat.ReportConfiguration reportConfiguration9 = new org.apache.rat.ReportConfiguration(log8);
        java.io.FilenameFilter filenameFilter10 = reportConfiguration9.getInputFileFilter();
        org.apache.rat.license.LicenseSetFactory.LicenseFilter licenseFilter11 = org.apache.rat.license.LicenseSetFactory.LicenseFilter.all;
        java.util.SortedSet<org.apache.rat.license.ILicense> iLicenseSet12 = reportConfiguration9.getLicenses(licenseFilter11);
        org.apache.rat.config.AddLicenseHeaders addLicenseHeaders13 = org.apache.rat.config.AddLicenseHeaders.FALSE;
        reportConfiguration9.setAddLicenseHeaders(addLicenseHeaders13);
        org.apache.rat.utils.Log log15 = null;
        org.apache.rat.ReportConfiguration reportConfiguration16 = new org.apache.rat.ReportConfiguration(log15);
        org.apache.rat.report.claim.ClaimStatistic claimStatistic17 = org.apache.rat.Reporter.report(reportConfiguration16);
        org.apache.rat.license.LicenseSetFactory.LicenseFilter licenseFilter18 = org.apache.rat.license.LicenseSetFactory.LicenseFilter.all;
        org.apache.rat.Reporter.listLicenses(reportConfiguration16, licenseFilter18);
        org.apache.rat.Reporter.listLicenses(reportConfiguration9, licenseFilter18);
        org.apache.rat.utils.Log log21 = null;
        org.apache.rat.ReportConfiguration reportConfiguration22 = new org.apache.rat.ReportConfiguration(log21);
        java.io.FilenameFilter filenameFilter23 = reportConfiguration22.getInputFileFilter();
        org.apache.rat.license.LicenseSetFactory.LicenseFilter licenseFilter24 = org.apache.rat.license.LicenseSetFactory.LicenseFilter.all;
        java.util.SortedSet<org.apache.rat.license.ILicense> iLicenseSet25 = reportConfiguration22.getLicenses(licenseFilter24);
        org.apache.rat.config.AddLicenseHeaders addLicenseHeaders26 = org.apache.rat.config.AddLicenseHeaders.FALSE;
        reportConfiguration22.setAddLicenseHeaders(addLicenseHeaders26);
        org.apache.rat.utils.Log log28 = null;
        org.apache.rat.ReportConfiguration reportConfiguration29 = new org.apache.rat.ReportConfiguration(log28);
        org.apache.rat.report.claim.ClaimStatistic claimStatistic30 = org.apache.rat.Reporter.report(reportConfiguration29);
        org.apache.rat.license.LicenseSetFactory.LicenseFilter licenseFilter31 = org.apache.rat.license.LicenseSetFactory.LicenseFilter.all;
        org.apache.rat.Reporter.listLicenses(reportConfiguration29, licenseFilter31);
        org.apache.rat.Reporter.listLicenses(reportConfiguration22, licenseFilter31);
        org.apache.rat.Reporter.listLicenses(reportConfiguration9, licenseFilter31);
        java.io.FilenameFilter filenameFilter35 = reportConfiguration9.getInputFileFilter();
        reportConfiguration9.setStyleReport(false);
        org.apache.rat.report.IReportable iReportable38 = null;
        reportConfiguration9.setReportable(iReportable38);
        org.apache.rat.Defaults.Builder builder41 = org.apache.rat.Defaults.builder();
        org.apache.rat.Defaults defaults42 = builder41.build();
        org.apache.rat.utils.Log log43 = null;
        org.apache.rat.ReportConfiguration reportConfiguration44 = new org.apache.rat.ReportConfiguration(log43);
        java.io.FilenameFilter filenameFilter45 = reportConfiguration44.getInputFileFilter();
        org.apache.rat.license.LicenseSetFactory.LicenseFilter licenseFilter46 = org.apache.rat.license.LicenseSetFactory.LicenseFilter.all;
        java.util.SortedSet<org.apache.rat.license.ILicense> iLicenseSet47 = reportConfiguration44.getLicenses(licenseFilter46);
        org.apache.rat.config.AddLicenseHeaders addLicenseHeaders48 = org.apache.rat.config.AddLicenseHeaders.FALSE;
        reportConfiguration44.setAddLicenseHeaders(addLicenseHeaders48);
        org.apache.rat.utils.Log log50 = null;
        org.apache.rat.ReportConfiguration reportConfiguration51 = new org.apache.rat.ReportConfiguration(log50);
        org.apache.rat.report.claim.ClaimStatistic claimStatistic52 = org.apache.rat.Reporter.report(reportConfiguration51);
        org.apache.rat.license.LicenseSetFactory.LicenseFilter licenseFilter53 = org.apache.rat.license.LicenseSetFactory.LicenseFilter.all;
        org.apache.rat.Reporter.listLicenses(reportConfiguration51, licenseFilter53);
        org.apache.rat.Reporter.listLicenses(reportConfiguration44, licenseFilter53);
        org.apache.rat.utils.Log log56 = null;
        org.apache.rat.ReportConfiguration reportConfiguration57 = new org.apache.rat.ReportConfiguration(log56);
        java.io.FilenameFilter filenameFilter58 = reportConfiguration57.getInputFileFilter();
        org.apache.rat.license.LicenseSetFactory.LicenseFilter licenseFilter59 = org.apache.rat.license.LicenseSetFactory.LicenseFilter.all;
        java.util.SortedSet<org.apache.rat.license.ILicense> iLicenseSet60 = reportConfiguration57.getLicenses(licenseFilter59);
        org.apache.rat.config.AddLicenseHeaders addLicenseHeaders61 = org.apache.rat.config.AddLicenseHeaders.FALSE;
        reportConfiguration57.setAddLicenseHeaders(addLicenseHeaders61);
        org.apache.rat.utils.Log log63 = null;
        org.apache.rat.ReportConfiguration reportConfiguration64 = new org.apache.rat.ReportConfiguration(log63);
        org.apache.rat.report.claim.ClaimStatistic claimStatistic65 = org.apache.rat.Reporter.report(reportConfiguration64);
        org.apache.rat.license.LicenseSetFactory.LicenseFilter licenseFilter66 = org.apache.rat.license.LicenseSetFactory.LicenseFilter.all;
        org.apache.rat.Reporter.listLicenses(reportConfiguration64, licenseFilter66);
        org.apache.rat.Reporter.listLicenses(reportConfiguration57, licenseFilter66);
        java.util.SortedSet<org.apache.rat.license.ILicenseFamily> iLicenseFamilySet69 = reportConfiguration44.getLicenseFamilies(licenseFilter66);
        java.util.SortedSet<org.apache.rat.license.ILicense> iLicenseSet70 = defaults42.getLicenses(licenseFilter66);
        org.apache.rat.utils.ReportingSet<org.apache.rat.license.ILicense> iLicenseSet71 = new org.apache.rat.utils.ReportingSet<org.apache.rat.license.ILicense>(iLicenseSet70);
        org.apache.rat.license.ILicense iLicense72 = org.apache.rat.license.LicenseSetFactory.search("TMF", iLicenseSet70);
        reportConfiguration9.addLicense(iLicense72);
        java.lang.String str74 = iLicense72.derivedFrom();
        reportConfiguration1.addLicense(iLicense72);
        java.lang.String str76 = iLicense72.derivedFrom();
        org.apache.rat.license.ILicenseFamily iLicenseFamily77 = iLicense72.getLicenseFamily();
        org.apache.rat.license.ILicenseFamily iLicenseFamily78 = iLicense72.getLicenseFamily();
        org.junit.Assert.assertTrue("'" + level4 + "' != '" + org.apache.rat.utils.Log.Level.ERROR + "'", level4.equals(org.apache.rat.utils.Log.Level.ERROR));
        org.junit.Assert.assertNull(filenameFilter10);
        org.junit.Assert.assertTrue("'" + licenseFilter11 + "' != '" + org.apache.rat.license.LicenseSetFactory.LicenseFilter.all + "'", licenseFilter11.equals(org.apache.rat.license.LicenseSetFactory.LicenseFilter.all));
        org.junit.Assert.assertNotNull(iLicenseSet12);
        org.junit.Assert.assertTrue("'" + addLicenseHeaders13 + "' != '" + org.apache.rat.config.AddLicenseHeaders.FALSE + "'", addLicenseHeaders13.equals(org.apache.rat.config.AddLicenseHeaders.FALSE));
        org.junit.Assert.assertNull(claimStatistic17);
        org.junit.Assert.assertTrue("'" + licenseFilter18 + "' != '" + org.apache.rat.license.LicenseSetFactory.LicenseFilter.all + "'", licenseFilter18.equals(org.apache.rat.license.LicenseSetFactory.LicenseFilter.all));
        org.junit.Assert.assertNull(filenameFilter23);
        org.junit.Assert.assertTrue("'" + licenseFilter24 + "' != '" + org.apache.rat.license.LicenseSetFactory.LicenseFilter.all + "'", licenseFilter24.equals(org.apache.rat.license.LicenseSetFactory.LicenseFilter.all));
        org.junit.Assert.assertNotNull(iLicenseSet25);
        org.junit.Assert.assertTrue("'" + addLicenseHeaders26 + "' != '" + org.apache.rat.config.AddLicenseHeaders.FALSE + "'", addLicenseHeaders26.equals(org.apache.rat.config.AddLicenseHeaders.FALSE));
        org.junit.Assert.assertNull(claimStatistic30);
        org.junit.Assert.assertTrue("'" + licenseFilter31 + "' != '" + org.apache.rat.license.LicenseSetFactory.LicenseFilter.all + "'", licenseFilter31.equals(org.apache.rat.license.LicenseSetFactory.LicenseFilter.all));
        org.junit.Assert.assertNull(filenameFilter35);
        org.junit.Assert.assertNotNull(builder41);
        org.junit.Assert.assertNotNull(defaults42);
        org.junit.Assert.assertNull(filenameFilter45);
        org.junit.Assert.assertTrue("'" + licenseFilter46 + "' != '" + org.apache.rat.license.LicenseSetFactory.LicenseFilter.all + "'", licenseFilter46.equals(org.apache.rat.license.LicenseSetFactory.LicenseFilter.all));
        org.junit.Assert.assertNotNull(iLicenseSet47);
        org.junit.Assert.assertTrue("'" + addLicenseHeaders48 + "' != '" + org.apache.rat.config.AddLicenseHeaders.FALSE + "'", addLicenseHeaders48.equals(org.apache.rat.config.AddLicenseHeaders.FALSE));
        org.junit.Assert.assertNull(claimStatistic52);
        org.junit.Assert.assertTrue("'" + licenseFilter53 + "' != '" + org.apache.rat.license.LicenseSetFactory.LicenseFilter.all + "'", licenseFilter53.equals(org.apache.rat.license.LicenseSetFactory.LicenseFilter.all));
        org.junit.Assert.assertNull(filenameFilter58);
        org.junit.Assert.assertTrue("'" + licenseFilter59 + "' != '" + org.apache.rat.license.LicenseSetFactory.LicenseFilter.all + "'", licenseFilter59.equals(org.apache.rat.license.LicenseSetFactory.LicenseFilter.all));
        org.junit.Assert.assertNotNull(iLicenseSet60);
        org.junit.Assert.assertTrue("'" + addLicenseHeaders61 + "' != '" + org.apache.rat.config.AddLicenseHeaders.FALSE + "'", addLicenseHeaders61.equals(org.apache.rat.config.AddLicenseHeaders.FALSE));
        org.junit.Assert.assertNull(claimStatistic65);
        org.junit.Assert.assertTrue("'" + licenseFilter66 + "' != '" + org.apache.rat.license.LicenseSetFactory.LicenseFilter.all + "'", licenseFilter66.equals(org.apache.rat.license.LicenseSetFactory.LicenseFilter.all));
        org.junit.Assert.assertNotNull(iLicenseFamilySet69);
        org.junit.Assert.assertNotNull(iLicenseSet70);
        org.junit.Assert.assertNotNull(iLicense72);
        org.junit.Assert.assertEquals("'" + str74 + "' != '" + "BSD-3" + "'", str74, "BSD-3");
        org.junit.Assert.assertEquals("'" + str76 + "' != '" + "BSD-3" + "'", str76, "BSD-3");
        org.junit.Assert.assertNotNull(iLicenseFamily77);
        org.junit.Assert.assertNotNull(iLicenseFamily78);
    }

    @Test
    public void test14886() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest29.test14886");
        boolean boolean1 = org.apache.rat.document.impl.guesser.ArchiveGuesser.isArchive("e39d7");
        org.junit.Assert.assertTrue("'" + boolean1 + "' != '" + false + "'", boolean1 == false);
    }

    @Test
    public void test14887() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest29.test14887");
        org.apache.rat.analysis.license.FullTextMatchingLicense fullTextMatchingLicense0 = new org.apache.rat.analysis.license.FullTextMatchingLicense();
        fullTextMatchingLicense0.setLicenseFamilyName("hi!");
        java.lang.String str3 = fullTextMatchingLicense0.getLicenseFamilyCategory();
        java.lang.String str4 = fullTextMatchingLicense0.getLicenseFamilyName();
        fullTextMatchingLicense0.setLicenseFamilyName("SpdxBuilder: null");
        fullTextMatchingLicense0.setLicenseFamilyCategory("TMF");
        fullTextMatchingLicense0.setFullText("W3C  ");
        java.lang.String str11 = fullTextMatchingLicense0.getLicenseFamilyCategory();
        org.apache.rat.license.ILicense.Builder builder12 = fullTextMatchingLicense0.getLicense();
        fullTextMatchingLicense0.setNotes("96ba4e3b-7c1a-47bf-88c5-78860245a028");
        org.apache.rat.license.ILicense.Builder builder15 = fullTextMatchingLicense0.getLicense();
        org.apache.rat.license.ILicense.Builder builder17 = builder15.setNotes("RegexBuilder: GNU General Public License, version 1");
        org.junit.Assert.assertNull(str3);
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "hi!" + "'", str4, "hi!");
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "TMF" + "'", str11, "TMF");
        org.junit.Assert.assertNotNull(builder12);
        org.junit.Assert.assertNotNull(builder15);
        org.junit.Assert.assertNotNull(builder17);
    }

    @Test
    public void test14888() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest29.test14888");
        org.apache.rat.api.MetaData metaData0 = new org.apache.rat.api.MetaData();
        java.lang.String str2 = metaData0.value("COMMON DEVELOPMENT AND DISTRIBUTION LICENSE Version 1.0");
        java.lang.String str4 = metaData0.value("W3C Document Copyright");
        boolean boolean6 = metaData0.clear("hi!");
        java.lang.String str8 = metaData0.value("COMMON DEVELOPMENT AND DISTRIBUTION LICENSE Version 1.0");
        java.lang.String str10 = metaData0.value("58515fd1-71f9-42a1-b033-b509624129a7");
        metaData0.clear();
        org.apache.rat.api.MetaData metaData12 = new org.apache.rat.api.MetaData();
        java.lang.String str14 = metaData12.value("COMMON DEVELOPMENT AND DISTRIBUTION LICENSE Version 1.0");
        java.util.Collection<org.apache.rat.api.MetaData.Datum> datumCollection15 = metaData12.getData();
        java.lang.String str17 = metaData12.value("hi!");
        metaData12.clear();
        boolean boolean20 = metaData12.clear("90663eff-7ed8-41bd-85a8-e8f189198bc6");
        org.apache.rat.api.MetaData.Datum datum22 = metaData12.get("65e454b8-bebb-40d5-ad86-7e925a25b8d1");
        org.apache.rat.utils.Log log23 = null;
        org.apache.rat.ReportConfiguration reportConfiguration24 = new org.apache.rat.ReportConfiguration(log23);
        java.io.FilenameFilter filenameFilter25 = reportConfiguration24.getInputFileFilter();
        org.apache.rat.license.LicenseSetFactory.LicenseFilter licenseFilter26 = org.apache.rat.license.LicenseSetFactory.LicenseFilter.all;
        java.util.SortedSet<org.apache.rat.license.ILicense> iLicenseSet27 = reportConfiguration24.getLicenses(licenseFilter26);
        org.apache.rat.config.AddLicenseHeaders addLicenseHeaders28 = org.apache.rat.config.AddLicenseHeaders.FALSE;
        reportConfiguration24.setAddLicenseHeaders(addLicenseHeaders28);
        org.apache.rat.utils.Log log30 = null;
        org.apache.rat.ReportConfiguration reportConfiguration31 = new org.apache.rat.ReportConfiguration(log30);
        org.apache.rat.report.claim.ClaimStatistic claimStatistic32 = org.apache.rat.Reporter.report(reportConfiguration31);
        org.apache.rat.license.LicenseSetFactory.LicenseFilter licenseFilter33 = org.apache.rat.license.LicenseSetFactory.LicenseFilter.all;
        org.apache.rat.Reporter.listLicenses(reportConfiguration31, licenseFilter33);
        org.apache.rat.Reporter.listLicenses(reportConfiguration24, licenseFilter33);
        org.apache.rat.utils.Log log36 = null;
        org.apache.rat.ReportConfiguration reportConfiguration37 = new org.apache.rat.ReportConfiguration(log36);
        java.io.FilenameFilter filenameFilter38 = reportConfiguration37.getInputFileFilter();
        org.apache.rat.license.LicenseSetFactory.LicenseFilter licenseFilter39 = org.apache.rat.license.LicenseSetFactory.LicenseFilter.all;
        java.util.SortedSet<org.apache.rat.license.ILicense> iLicenseSet40 = reportConfiguration37.getLicenses(licenseFilter39);
        org.apache.rat.config.AddLicenseHeaders addLicenseHeaders41 = org.apache.rat.config.AddLicenseHeaders.FALSE;
        reportConfiguration37.setAddLicenseHeaders(addLicenseHeaders41);
        org.apache.rat.utils.Log log43 = null;
        org.apache.rat.ReportConfiguration reportConfiguration44 = new org.apache.rat.ReportConfiguration(log43);
        org.apache.rat.report.claim.ClaimStatistic claimStatistic45 = org.apache.rat.Reporter.report(reportConfiguration44);
        org.apache.rat.license.LicenseSetFactory.LicenseFilter licenseFilter46 = org.apache.rat.license.LicenseSetFactory.LicenseFilter.all;
        org.apache.rat.Reporter.listLicenses(reportConfiguration44, licenseFilter46);
        org.apache.rat.Reporter.listLicenses(reportConfiguration37, licenseFilter46);
        org.apache.rat.Reporter.listLicenses(reportConfiguration24, licenseFilter46);
        java.io.FilenameFilter filenameFilter50 = reportConfiguration24.getInputFileFilter();
        reportConfiguration24.setStyleReport(false);
        org.apache.rat.report.IReportable iReportable53 = null;
        reportConfiguration24.setReportable(iReportable53);
        org.apache.rat.Defaults.Builder builder56 = org.apache.rat.Defaults.builder();
        org.apache.rat.Defaults defaults57 = builder56.build();
        org.apache.rat.utils.Log log58 = null;
        org.apache.rat.ReportConfiguration reportConfiguration59 = new org.apache.rat.ReportConfiguration(log58);
        java.io.FilenameFilter filenameFilter60 = reportConfiguration59.getInputFileFilter();
        org.apache.rat.license.LicenseSetFactory.LicenseFilter licenseFilter61 = org.apache.rat.license.LicenseSetFactory.LicenseFilter.all;
        java.util.SortedSet<org.apache.rat.license.ILicense> iLicenseSet62 = reportConfiguration59.getLicenses(licenseFilter61);
        org.apache.rat.config.AddLicenseHeaders addLicenseHeaders63 = org.apache.rat.config.AddLicenseHeaders.FALSE;
        reportConfiguration59.setAddLicenseHeaders(addLicenseHeaders63);
        org.apache.rat.utils.Log log65 = null;
        org.apache.rat.ReportConfiguration reportConfiguration66 = new org.apache.rat.ReportConfiguration(log65);
        org.apache.rat.report.claim.ClaimStatistic claimStatistic67 = org.apache.rat.Reporter.report(reportConfiguration66);
        org.apache.rat.license.LicenseSetFactory.LicenseFilter licenseFilter68 = org.apache.rat.license.LicenseSetFactory.LicenseFilter.all;
        org.apache.rat.Reporter.listLicenses(reportConfiguration66, licenseFilter68);
        org.apache.rat.Reporter.listLicenses(reportConfiguration59, licenseFilter68);
        org.apache.rat.utils.Log log71 = null;
        org.apache.rat.ReportConfiguration reportConfiguration72 = new org.apache.rat.ReportConfiguration(log71);
        java.io.FilenameFilter filenameFilter73 = reportConfiguration72.getInputFileFilter();
        org.apache.rat.license.LicenseSetFactory.LicenseFilter licenseFilter74 = org.apache.rat.license.LicenseSetFactory.LicenseFilter.all;
        java.util.SortedSet<org.apache.rat.license.ILicense> iLicenseSet75 = reportConfiguration72.getLicenses(licenseFilter74);
        org.apache.rat.config.AddLicenseHeaders addLicenseHeaders76 = org.apache.rat.config.AddLicenseHeaders.FALSE;
        reportConfiguration72.setAddLicenseHeaders(addLicenseHeaders76);
        org.apache.rat.utils.Log log78 = null;
        org.apache.rat.ReportConfiguration reportConfiguration79 = new org.apache.rat.ReportConfiguration(log78);
        org.apache.rat.report.claim.ClaimStatistic claimStatistic80 = org.apache.rat.Reporter.report(reportConfiguration79);
        org.apache.rat.license.LicenseSetFactory.LicenseFilter licenseFilter81 = org.apache.rat.license.LicenseSetFactory.LicenseFilter.all;
        org.apache.rat.Reporter.listLicenses(reportConfiguration79, licenseFilter81);
        org.apache.rat.Reporter.listLicenses(reportConfiguration72, licenseFilter81);
        java.util.SortedSet<org.apache.rat.license.ILicenseFamily> iLicenseFamilySet84 = reportConfiguration59.getLicenseFamilies(licenseFilter81);
        java.util.SortedSet<org.apache.rat.license.ILicense> iLicenseSet85 = defaults57.getLicenses(licenseFilter81);
        org.apache.rat.utils.ReportingSet<org.apache.rat.license.ILicense> iLicenseSet86 = new org.apache.rat.utils.ReportingSet<org.apache.rat.license.ILicense>(iLicenseSet85);
        org.apache.rat.license.ILicense iLicense87 = org.apache.rat.license.LicenseSetFactory.search("TMF", iLicenseSet85);
        reportConfiguration24.addLicense(iLicense87);
        java.lang.String str89 = iLicense87.derivedFrom();
        org.apache.rat.license.ILicenseFamily iLicenseFamily90 = iLicense87.getLicenseFamily();
        org.apache.rat.license.ILicenseFamily iLicenseFamily91 = iLicense87.getLicenseFamily();
        java.lang.String str92 = iLicense87.getName();
        java.lang.String str93 = iLicense87.getNotes();
        java.lang.String str94 = iLicense87.getNotes();
        java.lang.String str95 = iLicense87.derivedFrom();
        metaData12.reportOnLicense(iLicense87);
        metaData0.reportOnLicense(iLicense87);
        org.junit.Assert.assertNull(str2);
        org.junit.Assert.assertNull(str4);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertNull(str8);
        org.junit.Assert.assertNull(str10);
        org.junit.Assert.assertNull(str14);
        org.junit.Assert.assertNotNull(datumCollection15);
        org.junit.Assert.assertNull(str17);
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + false + "'", boolean20 == false);
        org.junit.Assert.assertNull(datum22);
        org.junit.Assert.assertNull(filenameFilter25);
        org.junit.Assert.assertTrue("'" + licenseFilter26 + "' != '" + org.apache.rat.license.LicenseSetFactory.LicenseFilter.all + "'", licenseFilter26.equals(org.apache.rat.license.LicenseSetFactory.LicenseFilter.all));
        org.junit.Assert.assertNotNull(iLicenseSet27);
        org.junit.Assert.assertTrue("'" + addLicenseHeaders28 + "' != '" + org.apache.rat.config.AddLicenseHeaders.FALSE + "'", addLicenseHeaders28.equals(org.apache.rat.config.AddLicenseHeaders.FALSE));
        org.junit.Assert.assertNull(claimStatistic32);
        org.junit.Assert.assertTrue("'" + licenseFilter33 + "' != '" + org.apache.rat.license.LicenseSetFactory.LicenseFilter.all + "'", licenseFilter33.equals(org.apache.rat.license.LicenseSetFactory.LicenseFilter.all));
        org.junit.Assert.assertNull(filenameFilter38);
        org.junit.Assert.assertTrue("'" + licenseFilter39 + "' != '" + org.apache.rat.license.LicenseSetFactory.LicenseFilter.all + "'", licenseFilter39.equals(org.apache.rat.license.LicenseSetFactory.LicenseFilter.all));
        org.junit.Assert.assertNotNull(iLicenseSet40);
        org.junit.Assert.assertTrue("'" + addLicenseHeaders41 + "' != '" + org.apache.rat.config.AddLicenseHeaders.FALSE + "'", addLicenseHeaders41.equals(org.apache.rat.config.AddLicenseHeaders.FALSE));
        org.junit.Assert.assertNull(claimStatistic45);
        org.junit.Assert.assertTrue("'" + licenseFilter46 + "' != '" + org.apache.rat.license.LicenseSetFactory.LicenseFilter.all + "'", licenseFilter46.equals(org.apache.rat.license.LicenseSetFactory.LicenseFilter.all));
        org.junit.Assert.assertNull(filenameFilter50);
        org.junit.Assert.assertNotNull(builder56);
        org.junit.Assert.assertNotNull(defaults57);
        org.junit.Assert.assertNull(filenameFilter60);
        org.junit.Assert.assertTrue("'" + licenseFilter61 + "' != '" + org.apache.rat.license.LicenseSetFactory.LicenseFilter.all + "'", licenseFilter61.equals(org.apache.rat.license.LicenseSetFactory.LicenseFilter.all));
        org.junit.Assert.assertNotNull(iLicenseSet62);
        org.junit.Assert.assertTrue("'" + addLicenseHeaders63 + "' != '" + org.apache.rat.config.AddLicenseHeaders.FALSE + "'", addLicenseHeaders63.equals(org.apache.rat.config.AddLicenseHeaders.FALSE));
        org.junit.Assert.assertNull(claimStatistic67);
        org.junit.Assert.assertTrue("'" + licenseFilter68 + "' != '" + org.apache.rat.license.LicenseSetFactory.LicenseFilter.all + "'", licenseFilter68.equals(org.apache.rat.license.LicenseSetFactory.LicenseFilter.all));
        org.junit.Assert.assertNull(filenameFilter73);
        org.junit.Assert.assertTrue("'" + licenseFilter74 + "' != '" + org.apache.rat.license.LicenseSetFactory.LicenseFilter.all + "'", licenseFilter74.equals(org.apache.rat.license.LicenseSetFactory.LicenseFilter.all));
        org.junit.Assert.assertNotNull(iLicenseSet75);
        org.junit.Assert.assertTrue("'" + addLicenseHeaders76 + "' != '" + org.apache.rat.config.AddLicenseHeaders.FALSE + "'", addLicenseHeaders76.equals(org.apache.rat.config.AddLicenseHeaders.FALSE));
        org.junit.Assert.assertNull(claimStatistic80);
        org.junit.Assert.assertTrue("'" + licenseFilter81 + "' != '" + org.apache.rat.license.LicenseSetFactory.LicenseFilter.all + "'", licenseFilter81.equals(org.apache.rat.license.LicenseSetFactory.LicenseFilter.all));
        org.junit.Assert.assertNotNull(iLicenseFamilySet84);
        org.junit.Assert.assertNotNull(iLicenseSet85);
        org.junit.Assert.assertNotNull(iLicense87);
        org.junit.Assert.assertEquals("'" + str89 + "' != '" + "BSD-3" + "'", str89, "BSD-3");
        org.junit.Assert.assertNotNull(iLicenseFamily90);
        org.junit.Assert.assertNotNull(iLicenseFamily91);
        org.junit.Assert.assertEquals("'" + str92 + "' != '" + "The Telemanagement Forum License" + "'", str92, "The Telemanagement Forum License");
        org.junit.Assert.assertNull(str93);
        org.junit.Assert.assertNull(str94);
        org.junit.Assert.assertEquals("'" + str95 + "' != '" + "BSD-3" + "'", str95, "BSD-3");
    }

    @Test
    public void test14889() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest29.test14889");
        org.apache.rat.analysis.matchers.SimpleTextMatcher simpleTextMatcher1 = new org.apache.rat.analysis.matchers.SimpleTextMatcher("Copyright Builder: s:null e:ba9961f9-a0de-4a54-bd1f-a2e9df26a188 o:a1abad46-6a98-44f8-aa20-7839919a8270");
        org.apache.rat.analysis.IHeaderMatcher.State state3 = simpleTextMatcher1.matches("ba9961f9-a0de-4a54-bd1f-a2e9df26a188");
        java.lang.String str4 = simpleTextMatcher1.getId();
        simpleTextMatcher1.reset();
        org.junit.Assert.assertTrue("'" + state3 + "' != '" + org.apache.rat.analysis.IHeaderMatcher.State.i + "'", state3.equals(org.apache.rat.analysis.IHeaderMatcher.State.i));
// flaky:         org.junit.Assert.assertEquals("'" + str4 + "' != '" + "9a037627-1efa-4c61-89e8-bdefa4715976" + "'", str4, "9a037627-1efa-4c61-89e8-bdefa4715976");
    }

    @Test
    public void test14890() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest29.test14890");
        java.util.regex.Pattern pattern1 = null;
        org.apache.rat.analysis.matchers.SimpleRegexMatcher simpleRegexMatcher2 = new org.apache.rat.analysis.matchers.SimpleRegexMatcher("8128040d-ca94-4f3f-9deb-6252acd449bd", pattern1);
        org.apache.rat.analysis.IHeaderMatcher.State state3 = simpleRegexMatcher2.currentState();
        org.apache.rat.analysis.matchers.NotMatcher notMatcher4 = new org.apache.rat.analysis.matchers.NotMatcher((org.apache.rat.analysis.IHeaderMatcher) simpleRegexMatcher2);
        // The following exception was thrown during execution in test generation
        try {
            boolean boolean6 = simpleRegexMatcher2.doMatch("");
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + state3 + "' != '" + org.apache.rat.analysis.IHeaderMatcher.State.i + "'", state3.equals(org.apache.rat.analysis.IHeaderMatcher.State.i));
    }

    @Test
    public void test14891() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest29.test14891");
        org.apache.rat.document.ToNameTransformer toNameTransformer0 = new org.apache.rat.document.ToNameTransformer();
        org.apache.rat.utils.DefaultLog defaultLog1 = org.apache.rat.utils.DefaultLog.INSTANCE;
        org.apache.rat.license.ILicense.Builder builder2 = org.apache.rat.license.ILicense.builder();
        org.apache.rat.license.ILicense.Builder builder4 = builder2.setLicenseFamilyCategory("");
        org.apache.rat.analysis.matchers.CopyrightMatcher copyrightMatcher8 = new org.apache.rat.analysis.matchers.CopyrightMatcher("", "GPL1 ", "hi!");
        org.apache.rat.analysis.IHeaderMatcher.State state9 = copyrightMatcher8.finalizeState();
        org.apache.rat.license.ILicense.Builder builder10 = builder4.setMatcher((org.apache.rat.analysis.IHeaderMatcher) copyrightMatcher8);
        org.apache.rat.license.ILicense.Builder builder12 = builder10.setLicenseFamilyCategory("");
        defaultLog1.error((java.lang.Object) builder12);
        java.lang.Object obj14 = toNameTransformer0.transform((java.lang.Object) defaultLog1);
        org.apache.rat.configuration.builders.AllBuilder allBuilder15 = new org.apache.rat.configuration.builders.AllBuilder();
        java.lang.String str16 = allBuilder15.toString();
        java.util.List<org.apache.rat.analysis.IHeaderMatcher> iHeaderMatcherList17 = allBuilder15.getChildren();
        java.lang.Object obj18 = toNameTransformer0.transform((java.lang.Object) allBuilder15);
        org.apache.rat.utils.Log log19 = null;
        org.apache.rat.ReportConfiguration reportConfiguration20 = new org.apache.rat.ReportConfiguration(log19);
        java.io.FilenameFilter filenameFilter21 = reportConfiguration20.getInputFileFilter();
        org.apache.rat.license.LicenseSetFactory.LicenseFilter licenseFilter22 = org.apache.rat.license.LicenseSetFactory.LicenseFilter.all;
        java.util.SortedSet<org.apache.rat.license.ILicense> iLicenseSet23 = reportConfiguration20.getLicenses(licenseFilter22);
        org.apache.rat.config.AddLicenseHeaders addLicenseHeaders24 = org.apache.rat.config.AddLicenseHeaders.FALSE;
        reportConfiguration20.setAddLicenseHeaders(addLicenseHeaders24);
        org.apache.rat.utils.Log log26 = null;
        org.apache.rat.ReportConfiguration reportConfiguration27 = new org.apache.rat.ReportConfiguration(log26);
        org.apache.rat.report.claim.ClaimStatistic claimStatistic28 = org.apache.rat.Reporter.report(reportConfiguration27);
        org.apache.rat.license.LicenseSetFactory.LicenseFilter licenseFilter29 = org.apache.rat.license.LicenseSetFactory.LicenseFilter.all;
        org.apache.rat.Reporter.listLicenses(reportConfiguration27, licenseFilter29);
        org.apache.rat.Reporter.listLicenses(reportConfiguration20, licenseFilter29);
        org.apache.rat.utils.Log log32 = null;
        org.apache.rat.ReportConfiguration reportConfiguration33 = new org.apache.rat.ReportConfiguration(log32);
        java.io.FilenameFilter filenameFilter34 = reportConfiguration33.getInputFileFilter();
        org.apache.rat.license.LicenseSetFactory.LicenseFilter licenseFilter35 = org.apache.rat.license.LicenseSetFactory.LicenseFilter.all;
        java.util.SortedSet<org.apache.rat.license.ILicense> iLicenseSet36 = reportConfiguration33.getLicenses(licenseFilter35);
        org.apache.rat.config.AddLicenseHeaders addLicenseHeaders37 = org.apache.rat.config.AddLicenseHeaders.FALSE;
        reportConfiguration33.setAddLicenseHeaders(addLicenseHeaders37);
        org.apache.rat.utils.Log log39 = null;
        org.apache.rat.ReportConfiguration reportConfiguration40 = new org.apache.rat.ReportConfiguration(log39);
        org.apache.rat.report.claim.ClaimStatistic claimStatistic41 = org.apache.rat.Reporter.report(reportConfiguration40);
        org.apache.rat.license.LicenseSetFactory.LicenseFilter licenseFilter42 = org.apache.rat.license.LicenseSetFactory.LicenseFilter.all;
        org.apache.rat.Reporter.listLicenses(reportConfiguration40, licenseFilter42);
        org.apache.rat.Reporter.listLicenses(reportConfiguration33, licenseFilter42);
        org.apache.rat.Reporter.listLicenses(reportConfiguration20, licenseFilter42);
        org.apache.commons.io.function.IOSupplier<java.io.OutputStream> outputStreamIOSupplier46 = reportConfiguration20.getOutput();
        org.apache.rat.utils.ReportingSet.Options options47 = org.apache.rat.utils.ReportingSet.Options.FAIL;
        reportConfiguration20.familyDuplicateOption(options47);
        java.lang.Object obj49 = toNameTransformer0.transform((java.lang.Object) reportConfiguration20);
        org.apache.rat.document.impl.DocumentImplUtils documentImplUtils50 = new org.apache.rat.document.impl.DocumentImplUtils();
        java.lang.Object obj51 = toNameTransformer0.transform((java.lang.Object) documentImplUtils50);
        org.apache.rat.report.claim.ClaimStatistic claimStatistic52 = new org.apache.rat.report.claim.ClaimStatistic();
        claimStatistic52.setNumApproved((int) (short) 10);
        java.util.Map<java.lang.String, java.lang.Integer> strMap55 = null;
        claimStatistic52.setDocumentCategoryMap(strMap55);
        claimStatistic52.setNumUnknown((int) '4');
        java.util.Map<java.lang.String, java.lang.Integer> strMap59 = null;
        claimStatistic52.setLicenseFileNameMap(strMap59);
        java.util.Map<java.lang.String, java.lang.Integer> strMap61 = null;
        claimStatistic52.setDocumentCategoryMap(strMap61);
        claimStatistic52.setNumApproved(100);
        java.util.Map<java.lang.String, java.lang.Integer> strMap65 = null;
        claimStatistic52.setLicenseFileCodeMap(strMap65);
        java.lang.Object obj67 = toNameTransformer0.transform((java.lang.Object) claimStatistic52);
        claimStatistic52.setNumGenerated(5);
        claimStatistic52.setNumGenerated(9);
        org.junit.Assert.assertNotNull(defaultLog1);
        org.junit.Assert.assertNotNull(builder2);
        org.junit.Assert.assertNotNull(builder4);
        org.junit.Assert.assertTrue("'" + state9 + "' != '" + org.apache.rat.analysis.IHeaderMatcher.State.f + "'", state9.equals(org.apache.rat.analysis.IHeaderMatcher.State.f));
        org.junit.Assert.assertNotNull(builder10);
        org.junit.Assert.assertNotNull(builder12);
        org.junit.Assert.assertNull(obj14);
        org.junit.Assert.assertEquals("'" + str16 + "' != '" + "AllBuilder:" + "'", str16, "AllBuilder:");
        org.junit.Assert.assertNotNull(iHeaderMatcherList17);
        org.junit.Assert.assertNull(obj18);
        org.junit.Assert.assertNull(filenameFilter21);
        org.junit.Assert.assertTrue("'" + licenseFilter22 + "' != '" + org.apache.rat.license.LicenseSetFactory.LicenseFilter.all + "'", licenseFilter22.equals(org.apache.rat.license.LicenseSetFactory.LicenseFilter.all));
        org.junit.Assert.assertNotNull(iLicenseSet23);
        org.junit.Assert.assertTrue("'" + addLicenseHeaders24 + "' != '" + org.apache.rat.config.AddLicenseHeaders.FALSE + "'", addLicenseHeaders24.equals(org.apache.rat.config.AddLicenseHeaders.FALSE));
        org.junit.Assert.assertNull(claimStatistic28);
        org.junit.Assert.assertTrue("'" + licenseFilter29 + "' != '" + org.apache.rat.license.LicenseSetFactory.LicenseFilter.all + "'", licenseFilter29.equals(org.apache.rat.license.LicenseSetFactory.LicenseFilter.all));
        org.junit.Assert.assertNull(filenameFilter34);
        org.junit.Assert.assertTrue("'" + licenseFilter35 + "' != '" + org.apache.rat.license.LicenseSetFactory.LicenseFilter.all + "'", licenseFilter35.equals(org.apache.rat.license.LicenseSetFactory.LicenseFilter.all));
        org.junit.Assert.assertNotNull(iLicenseSet36);
        org.junit.Assert.assertTrue("'" + addLicenseHeaders37 + "' != '" + org.apache.rat.config.AddLicenseHeaders.FALSE + "'", addLicenseHeaders37.equals(org.apache.rat.config.AddLicenseHeaders.FALSE));
        org.junit.Assert.assertNull(claimStatistic41);
        org.junit.Assert.assertTrue("'" + licenseFilter42 + "' != '" + org.apache.rat.license.LicenseSetFactory.LicenseFilter.all + "'", licenseFilter42.equals(org.apache.rat.license.LicenseSetFactory.LicenseFilter.all));
        org.junit.Assert.assertNotNull(outputStreamIOSupplier46);
        org.junit.Assert.assertTrue("'" + options47 + "' != '" + org.apache.rat.utils.ReportingSet.Options.FAIL + "'", options47.equals(org.apache.rat.utils.ReportingSet.Options.FAIL));
        org.junit.Assert.assertNull(obj49);
        org.junit.Assert.assertNull(obj51);
        org.junit.Assert.assertNull(obj67);
    }

    @Test
    public void test14892() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest29.test14892");
        org.apache.rat.report.claim.ClaimStatistic claimStatistic0 = new org.apache.rat.report.claim.ClaimStatistic();
        claimStatistic0.setNumApproved((int) (short) 10);
        java.util.Map<java.lang.String, java.lang.Integer> strMap3 = null;
        claimStatistic0.setDocumentCategoryMap(strMap3);
        claimStatistic0.setNumUnknown((int) '4');
        claimStatistic0.setNumUnknown((int) (byte) 0);
        claimStatistic0.setNumUnknown((int) (byte) 10);
        java.util.Map<java.lang.String, java.lang.Integer> strMap11 = claimStatistic0.getDocumentCategoryMap();
        java.util.Map<java.lang.String, java.lang.Integer> strMap12 = claimStatistic0.getLicenseFileCodeMap();
        claimStatistic0.setNumGenerated((-44));
        org.junit.Assert.assertNull(strMap11);
        org.junit.Assert.assertNull(strMap12);
    }

    @Test
    public void test14893() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest29.test14893");
        org.apache.rat.utils.DefaultLog defaultLog0 = org.apache.rat.utils.DefaultLog.INSTANCE;
        org.apache.rat.utils.Log log1 = null;
        org.apache.rat.ReportConfiguration reportConfiguration2 = new org.apache.rat.ReportConfiguration(log1);
        java.io.FilenameFilter filenameFilter3 = reportConfiguration2.getInputFileFilter();
        org.apache.rat.license.LicenseSetFactory.LicenseFilter licenseFilter4 = org.apache.rat.license.LicenseSetFactory.LicenseFilter.all;
        java.util.SortedSet<org.apache.rat.license.ILicense> iLicenseSet5 = reportConfiguration2.getLicenses(licenseFilter4);
        org.apache.rat.config.AddLicenseHeaders addLicenseHeaders6 = org.apache.rat.config.AddLicenseHeaders.FALSE;
        reportConfiguration2.setAddLicenseHeaders(addLicenseHeaders6);
        org.apache.rat.utils.Log log8 = null;
        org.apache.rat.ReportConfiguration reportConfiguration9 = new org.apache.rat.ReportConfiguration(log8);
        org.apache.rat.report.claim.ClaimStatistic claimStatistic10 = org.apache.rat.Reporter.report(reportConfiguration9);
        org.apache.rat.license.LicenseSetFactory.LicenseFilter licenseFilter11 = org.apache.rat.license.LicenseSetFactory.LicenseFilter.all;
        org.apache.rat.Reporter.listLicenses(reportConfiguration9, licenseFilter11);
        org.apache.rat.Reporter.listLicenses(reportConfiguration2, licenseFilter11);
        org.apache.rat.utils.Log log14 = null;
        org.apache.rat.ReportConfiguration reportConfiguration15 = new org.apache.rat.ReportConfiguration(log14);
        java.io.FilenameFilter filenameFilter16 = reportConfiguration15.getInputFileFilter();
        org.apache.rat.license.LicenseSetFactory.LicenseFilter licenseFilter17 = org.apache.rat.license.LicenseSetFactory.LicenseFilter.all;
        java.util.SortedSet<org.apache.rat.license.ILicense> iLicenseSet18 = reportConfiguration15.getLicenses(licenseFilter17);
        org.apache.rat.config.AddLicenseHeaders addLicenseHeaders19 = org.apache.rat.config.AddLicenseHeaders.FALSE;
        reportConfiguration15.setAddLicenseHeaders(addLicenseHeaders19);
        org.apache.rat.utils.Log log21 = null;
        org.apache.rat.ReportConfiguration reportConfiguration22 = new org.apache.rat.ReportConfiguration(log21);
        org.apache.rat.report.claim.ClaimStatistic claimStatistic23 = org.apache.rat.Reporter.report(reportConfiguration22);
        org.apache.rat.license.LicenseSetFactory.LicenseFilter licenseFilter24 = org.apache.rat.license.LicenseSetFactory.LicenseFilter.all;
        org.apache.rat.Reporter.listLicenses(reportConfiguration22, licenseFilter24);
        org.apache.rat.Reporter.listLicenses(reportConfiguration15, licenseFilter24);
        org.apache.rat.Reporter.listLicenses(reportConfiguration2, licenseFilter24);
        org.apache.rat.utils.Log log28 = null;
        org.apache.rat.ReportConfiguration reportConfiguration29 = new org.apache.rat.ReportConfiguration(log28);
        org.apache.commons.io.function.IOSupplier<java.io.OutputStream> outputStreamIOSupplier30 = reportConfiguration29.getOutput();
        reportConfiguration2.setOut(outputStreamIOSupplier30);
        org.apache.rat.utils.Log log32 = null;
        org.apache.rat.ReportConfiguration reportConfiguration33 = new org.apache.rat.ReportConfiguration(log32);
        org.apache.rat.report.claim.ClaimStatistic claimStatistic34 = org.apache.rat.Reporter.report(reportConfiguration33);
        org.apache.rat.utils.Log log35 = null;
        org.apache.rat.ReportConfiguration reportConfiguration36 = new org.apache.rat.ReportConfiguration(log35);
        org.apache.rat.report.claim.ClaimStatistic claimStatistic37 = org.apache.rat.Reporter.report(reportConfiguration36);
        org.apache.rat.utils.ReportingSet.Options options38 = org.apache.rat.utils.ReportingSet.Options.OVERWRITE;
        reportConfiguration36.licenseDuplicateOption(options38);
        reportConfiguration33.familyDuplicateOption(options38);
        reportConfiguration2.licenseDuplicateOption(options38);
        reportConfiguration2.addApprovedLicenseCategory("W3C Document Copyright");
        org.apache.rat.utils.Log log44 = null;
        org.apache.rat.ReportConfiguration reportConfiguration45 = new org.apache.rat.ReportConfiguration(log44);
        reportConfiguration45.addApprovedLicenseCategory(".cvsignore");
        org.apache.rat.utils.Log.Level level48 = org.apache.rat.utils.Log.Level.ERROR;
        reportConfiguration45.logLicenseCollisions(level48);
        reportConfiguration2.logLicenseCollisions(level48);
        defaultLog0.setLevel(level48);
        defaultLog0.warn((java.lang.Object) "GNU General Public License, version 3");
        defaultLog0.error((java.lang.Object) (-1.0d));
        org.apache.rat.annotation.ApacheV2LicenseAppender apacheV2LicenseAppender57 = new org.apache.rat.annotation.ApacheV2LicenseAppender((org.apache.rat.utils.Log) defaultLog0, "Datum [ name ='http://org/apache/rat/meta-data#LicenseFamilyCategory',value ='DOJO  ']");
        org.apache.rat.api.MetaData metaData58 = new org.apache.rat.api.MetaData();
        java.lang.String str60 = metaData58.value("COMMON DEVELOPMENT AND DISTRIBUTION LICENSE Version 1.0");
        org.apache.rat.api.MetaData.Datum datum62 = metaData58.get("Copyright Builder: s:null e:.cvsignore o:null");
        java.lang.String str64 = metaData58.value("W3C Software Copyright");
        org.apache.rat.api.MetaData.Datum datum66 = metaData58.get("255ef7d8-e270-4908-9de7-bebc7df6eb88");
        java.util.Collection<org.apache.rat.api.MetaData.Datum> datumCollection67 = metaData58.getData();
        java.util.Collection<org.apache.rat.api.MetaData.Datum> datumCollection68 = metaData58.getData();
        org.apache.rat.api.MetaData.Datum datum69 = org.apache.rat.api.MetaData.RAT_LICENSE_FAMILY_CATEGORY_DATUM_MIT;
        metaData58.add(datum69);
        java.util.Collection<org.apache.rat.api.MetaData.Datum> datumCollection71 = metaData58.getData();
        defaultLog0.warn((java.lang.Object) datumCollection71);
        org.junit.Assert.assertNotNull(defaultLog0);
        org.junit.Assert.assertNull(filenameFilter3);
        org.junit.Assert.assertTrue("'" + licenseFilter4 + "' != '" + org.apache.rat.license.LicenseSetFactory.LicenseFilter.all + "'", licenseFilter4.equals(org.apache.rat.license.LicenseSetFactory.LicenseFilter.all));
        org.junit.Assert.assertNotNull(iLicenseSet5);
        org.junit.Assert.assertTrue("'" + addLicenseHeaders6 + "' != '" + org.apache.rat.config.AddLicenseHeaders.FALSE + "'", addLicenseHeaders6.equals(org.apache.rat.config.AddLicenseHeaders.FALSE));
        org.junit.Assert.assertNull(claimStatistic10);
        org.junit.Assert.assertTrue("'" + licenseFilter11 + "' != '" + org.apache.rat.license.LicenseSetFactory.LicenseFilter.all + "'", licenseFilter11.equals(org.apache.rat.license.LicenseSetFactory.LicenseFilter.all));
        org.junit.Assert.assertNull(filenameFilter16);
        org.junit.Assert.assertTrue("'" + licenseFilter17 + "' != '" + org.apache.rat.license.LicenseSetFactory.LicenseFilter.all + "'", licenseFilter17.equals(org.apache.rat.license.LicenseSetFactory.LicenseFilter.all));
        org.junit.Assert.assertNotNull(iLicenseSet18);
        org.junit.Assert.assertTrue("'" + addLicenseHeaders19 + "' != '" + org.apache.rat.config.AddLicenseHeaders.FALSE + "'", addLicenseHeaders19.equals(org.apache.rat.config.AddLicenseHeaders.FALSE));
        org.junit.Assert.assertNull(claimStatistic23);
        org.junit.Assert.assertTrue("'" + licenseFilter24 + "' != '" + org.apache.rat.license.LicenseSetFactory.LicenseFilter.all + "'", licenseFilter24.equals(org.apache.rat.license.LicenseSetFactory.LicenseFilter.all));
        org.junit.Assert.assertNotNull(outputStreamIOSupplier30);
        org.junit.Assert.assertNull(claimStatistic34);
        org.junit.Assert.assertNull(claimStatistic37);
        org.junit.Assert.assertTrue("'" + options38 + "' != '" + org.apache.rat.utils.ReportingSet.Options.OVERWRITE + "'", options38.equals(org.apache.rat.utils.ReportingSet.Options.OVERWRITE));
        org.junit.Assert.assertTrue("'" + level48 + "' != '" + org.apache.rat.utils.Log.Level.ERROR + "'", level48.equals(org.apache.rat.utils.Log.Level.ERROR));
        org.junit.Assert.assertNull(str60);
        org.junit.Assert.assertNull(datum62);
        org.junit.Assert.assertNull(str64);
        org.junit.Assert.assertNull(datum66);
        org.junit.Assert.assertNotNull(datumCollection67);
        org.junit.Assert.assertNotNull(datumCollection68);
        org.junit.Assert.assertNotNull(datum69);
        org.junit.Assert.assertNotNull(datumCollection71);
    }

    @Test
    public void test14894() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest29.test14894");
        java.util.Map<java.lang.String, java.lang.String> strMap2 = null;
        // The following exception was thrown during execution in test generation
        try {
            org.apache.rat.api.ContentType contentType3 = new org.apache.rat.api.ContentType("f1fc8dc8-990d-4a2d-9540-4e9ece3bd92c", "454fa1972f4d4e2dbb311a2d24301c68", strMap2);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
    }

    @Test
    public void test14895() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest29.test14895");
        org.apache.rat.utils.Log log0 = null;
        org.apache.rat.ReportConfiguration reportConfiguration1 = new org.apache.rat.ReportConfiguration(log0);
        java.io.FilenameFilter filenameFilter2 = reportConfiguration1.getInputFileFilter();
        org.apache.rat.license.LicenseSetFactory.LicenseFilter licenseFilter3 = org.apache.rat.license.LicenseSetFactory.LicenseFilter.all;
        java.util.SortedSet<org.apache.rat.license.ILicense> iLicenseSet4 = reportConfiguration1.getLicenses(licenseFilter3);
        org.apache.rat.config.AddLicenseHeaders addLicenseHeaders5 = org.apache.rat.config.AddLicenseHeaders.FALSE;
        reportConfiguration1.setAddLicenseHeaders(addLicenseHeaders5);
        org.apache.rat.utils.Log log7 = null;
        org.apache.rat.ReportConfiguration reportConfiguration8 = new org.apache.rat.ReportConfiguration(log7);
        org.apache.rat.report.claim.ClaimStatistic claimStatistic9 = org.apache.rat.Reporter.report(reportConfiguration8);
        org.apache.rat.license.LicenseSetFactory.LicenseFilter licenseFilter10 = org.apache.rat.license.LicenseSetFactory.LicenseFilter.all;
        org.apache.rat.Reporter.listLicenses(reportConfiguration8, licenseFilter10);
        org.apache.rat.Reporter.listLicenses(reportConfiguration1, licenseFilter10);
        org.apache.rat.utils.Log log13 = null;
        org.apache.rat.ReportConfiguration reportConfiguration14 = new org.apache.rat.ReportConfiguration(log13);
        java.io.FilenameFilter filenameFilter15 = reportConfiguration14.getInputFileFilter();
        org.apache.rat.license.LicenseSetFactory.LicenseFilter licenseFilter16 = org.apache.rat.license.LicenseSetFactory.LicenseFilter.all;
        java.util.SortedSet<org.apache.rat.license.ILicense> iLicenseSet17 = reportConfiguration14.getLicenses(licenseFilter16);
        org.apache.rat.config.AddLicenseHeaders addLicenseHeaders18 = org.apache.rat.config.AddLicenseHeaders.FALSE;
        reportConfiguration14.setAddLicenseHeaders(addLicenseHeaders18);
        org.apache.rat.utils.Log log20 = null;
        org.apache.rat.ReportConfiguration reportConfiguration21 = new org.apache.rat.ReportConfiguration(log20);
        org.apache.rat.report.claim.ClaimStatistic claimStatistic22 = org.apache.rat.Reporter.report(reportConfiguration21);
        org.apache.rat.license.LicenseSetFactory.LicenseFilter licenseFilter23 = org.apache.rat.license.LicenseSetFactory.LicenseFilter.all;
        org.apache.rat.Reporter.listLicenses(reportConfiguration21, licenseFilter23);
        org.apache.rat.Reporter.listLicenses(reportConfiguration14, licenseFilter23);
        org.apache.rat.Reporter.listLicenses(reportConfiguration1, licenseFilter23);
        boolean boolean27 = reportConfiguration1.isAddingLicensesForced();
        org.junit.Assert.assertNull(filenameFilter2);
        org.junit.Assert.assertTrue("'" + licenseFilter3 + "' != '" + org.apache.rat.license.LicenseSetFactory.LicenseFilter.all + "'", licenseFilter3.equals(org.apache.rat.license.LicenseSetFactory.LicenseFilter.all));
        org.junit.Assert.assertNotNull(iLicenseSet4);
        org.junit.Assert.assertTrue("'" + addLicenseHeaders5 + "' != '" + org.apache.rat.config.AddLicenseHeaders.FALSE + "'", addLicenseHeaders5.equals(org.apache.rat.config.AddLicenseHeaders.FALSE));
        org.junit.Assert.assertNull(claimStatistic9);
        org.junit.Assert.assertTrue("'" + licenseFilter10 + "' != '" + org.apache.rat.license.LicenseSetFactory.LicenseFilter.all + "'", licenseFilter10.equals(org.apache.rat.license.LicenseSetFactory.LicenseFilter.all));
        org.junit.Assert.assertNull(filenameFilter15);
        org.junit.Assert.assertTrue("'" + licenseFilter16 + "' != '" + org.apache.rat.license.LicenseSetFactory.LicenseFilter.all + "'", licenseFilter16.equals(org.apache.rat.license.LicenseSetFactory.LicenseFilter.all));
        org.junit.Assert.assertNotNull(iLicenseSet17);
        org.junit.Assert.assertTrue("'" + addLicenseHeaders18 + "' != '" + org.apache.rat.config.AddLicenseHeaders.FALSE + "'", addLicenseHeaders18.equals(org.apache.rat.config.AddLicenseHeaders.FALSE));
        org.junit.Assert.assertNull(claimStatistic22);
        org.junit.Assert.assertTrue("'" + licenseFilter23 + "' != '" + org.apache.rat.license.LicenseSetFactory.LicenseFilter.all + "'", licenseFilter23.equals(org.apache.rat.license.LicenseSetFactory.LicenseFilter.all));
        org.junit.Assert.assertTrue("'" + boolean27 + "' != '" + false + "'", boolean27 == false);
    }

    @Test
    public void test14896() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest29.test14896");
        org.apache.rat.license.SimpleLicenseFamily simpleLicenseFamily0 = new org.apache.rat.license.SimpleLicenseFamily();
        simpleLicenseFamily0.setFamilyName("http://org/apache/rat/meta-data#LicenseFamilyName");
        simpleLicenseFamily0.setFamilyCategory("TMF");
        simpleLicenseFamily0.setFamilyName("PLAIN-RAT.XSL");
        java.lang.String str7 = simpleLicenseFamily0.getFamilyCategory();
        java.lang.String str8 = simpleLicenseFamily0.getFamilyName();
        simpleLicenseFamily0.setFamilyName("a31c35e6-bb4e-4807-ad11-4dc9b09d976b");
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "TMF" + "'", str7, "TMF");
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "PLAIN-RAT.XSL" + "'", str8, "PLAIN-RAT.XSL");
    }

    @Test
    public void test14897() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest29.test14897");
        org.apache.rat.analysis.matchers.FullTextMatcher fullTextMatcher1 = new org.apache.rat.analysis.matchers.FullTextMatcher("b54d740c-74ba-4b2f-8087-e65fa1ef2655");
    }

    @Test
    public void test14898() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest29.test14898");
        org.apache.rat.license.SimpleLicenseFamily simpleLicenseFamily0 = new org.apache.rat.license.SimpleLicenseFamily();
        java.lang.String str1 = simpleLicenseFamily0.getFamilyName();
        java.lang.String str2 = simpleLicenseFamily0.getFamilyCategory();
        simpleLicenseFamily0.setFamilyCategory("W3C  ");
        java.lang.String str5 = simpleLicenseFamily0.getFamilyName();
        simpleLicenseFamily0.setFamilyCategory("TextBuilder: true");
        java.lang.String str8 = simpleLicenseFamily0.getFamilyName();
        simpleLicenseFamily0.setFamilyCategory("W3C  ");
        simpleLicenseFamily0.setFamilyName("Copyright Builder: s:W3CD  e:null o:Copyright Builder: s:null e:274c6a15-09f6-4bfd-ac53-1827770eb507 o:null");
        simpleLicenseFamily0.setFamilyName("notic");
        org.junit.Assert.assertNull(str1);
        org.junit.Assert.assertNull(str2);
        org.junit.Assert.assertNull(str5);
        org.junit.Assert.assertNull(str8);
    }

    @Test
    public void test14899() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest29.test14899");
        org.apache.rat.utils.DefaultLog defaultLog0 = org.apache.rat.utils.DefaultLog.INSTANCE;
        org.apache.rat.annotation.ApacheV2LicenseAppender apacheV2LicenseAppender1 = new org.apache.rat.annotation.ApacheV2LicenseAppender((org.apache.rat.utils.Log) defaultLog0);
        org.apache.rat.utils.Log log2 = null;
        org.apache.rat.ReportConfiguration reportConfiguration3 = new org.apache.rat.ReportConfiguration(log2);
        org.apache.rat.report.claim.ClaimStatistic claimStatistic4 = org.apache.rat.Reporter.report(reportConfiguration3);
        org.apache.rat.utils.Log log5 = null;
        org.apache.rat.ReportConfiguration reportConfiguration6 = new org.apache.rat.ReportConfiguration(log5);
        org.apache.rat.report.claim.ClaimStatistic claimStatistic7 = org.apache.rat.Reporter.report(reportConfiguration6);
        org.apache.rat.utils.ReportingSet.Options options8 = org.apache.rat.utils.ReportingSet.Options.OVERWRITE;
        reportConfiguration6.licenseDuplicateOption(options8);
        reportConfiguration3.familyDuplicateOption(options8);
        org.apache.commons.io.function.IOSupplier<java.io.PrintWriter> printWriterIOSupplier11 = reportConfiguration3.getWriter();
        org.apache.rat.utils.Log log12 = null;
        org.apache.rat.ReportConfiguration reportConfiguration13 = new org.apache.rat.ReportConfiguration(log12);
        reportConfiguration13.addApprovedLicenseCategory(".cvsignore");
        org.apache.rat.utils.Log.Level level16 = org.apache.rat.utils.Log.Level.ERROR;
        reportConfiguration13.logFamilyCollisions(level16);
        reportConfiguration3.logFamilyCollisions(level16);
        org.apache.rat.Defaults.Builder builder19 = org.apache.rat.Defaults.builder();
        org.apache.rat.Defaults.Builder builder20 = builder19.noDefault();
        defaultLog0.log(level16, (java.lang.Object) builder19);
        org.apache.rat.annotation.ApacheV2LicenseAppender apacheV2LicenseAppender23 = new org.apache.rat.annotation.ApacheV2LicenseAppender((org.apache.rat.utils.Log) defaultLog0, "Datum [ name ='binary',value =' ']");
        org.apache.rat.utils.Log.Level level24 = defaultLog0.getLevel();
        org.apache.rat.license.ILicense.Builder builder25 = org.apache.rat.license.ILicense.builder();
        org.apache.rat.license.ILicense.Builder builder27 = builder25.setLicenseFamilyCategory("");
        org.apache.rat.license.ILicense.Builder builder29 = builder27.setDerivedFrom("GEN  ");
        org.apache.rat.license.ILicense.Builder builder31 = builder29.setId("DOJO ");
        org.apache.rat.license.ILicense.Builder builder33 = builder31.setName("GPL3 ");
        org.apache.rat.license.ILicense.Builder builder35 = builder31.setNotes("http://org/apache/rat/meta-data");
        org.apache.rat.license.ILicense.Builder builder37 = builder31.setId("021187d7-27c2-4fd9-bc74-8cc00413ee52");
        org.apache.rat.configuration.builders.NotBuilder notBuilder38 = new org.apache.rat.configuration.builders.NotBuilder();
        java.lang.String str39 = notBuilder38.toString();
        org.apache.rat.configuration.builders.SpdxBuilder spdxBuilder40 = org.apache.rat.analysis.IHeaderMatcher.Builder.spdx();
        java.lang.String str41 = spdxBuilder40.toString();
        org.apache.rat.configuration.builders.SpdxBuilder spdxBuilder43 = spdxBuilder40.setName("ef7a8b13-64c3-4510-bb0c-dbf208e1e73f");
        org.apache.rat.analysis.IHeaderMatcher iHeaderMatcher44 = spdxBuilder40.build();
        org.apache.rat.analysis.IHeaderMatcher iHeaderMatcher45 = spdxBuilder40.build();
        org.apache.rat.analysis.IHeaderMatcher iHeaderMatcher46 = spdxBuilder40.build();
        org.apache.rat.analysis.IHeaderMatcher iHeaderMatcher47 = spdxBuilder40.build();
        org.apache.rat.analysis.IHeaderMatcher iHeaderMatcher48 = spdxBuilder40.build();
        org.apache.rat.configuration.builders.AbstractBuilder abstractBuilder49 = notBuilder38.add((org.apache.rat.analysis.IHeaderMatcher.Builder) spdxBuilder40);
        org.apache.rat.license.ILicense.Builder builder50 = builder31.setMatcher((org.apache.rat.analysis.IHeaderMatcher.Builder) notBuilder38);
        defaultLog0.debug((java.lang.Object) builder50);
        java.lang.String[] strArray57 = new java.lang.String[] { "http://org/apache/rat/meta-data#LicenseFamilyCategory", "Datum [ name ='http://org/apache/rat/meta-data#LicenseFamilyCategory',value ='GPL1  ']", "MANIFEST.MF", "AllBuilder:", "The MIT License" };
        org.apache.rat.utils.ReportingSet<java.lang.String> strSet58 = new org.apache.rat.utils.ReportingSet<java.lang.String>();
        boolean boolean59 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strSet58, strArray57);
        boolean boolean61 = strSet58.addIfNotPresent("http://org/apache/rat/meta-data#LicenseFamilyName");
        boolean boolean63 = strSet58.addIfNotPresent("ef7a8b13-64c3-4510-bb0c-dbf208e1e73f");
        java.util.function.Function<java.lang.String, java.lang.String> strFunction64 = null;
        org.apache.rat.utils.ReportingSet<java.lang.String> strSet65 = strSet58.setMsgFormat(strFunction64);
        java.lang.String str66 = strSet58.last();
        java.util.stream.Stream<java.lang.String> strStream67 = strSet58.stream();
        java.lang.Class<?> wildcardClass68 = strStream67.getClass();
        defaultLog0.info((java.lang.Object) strStream67);
        org.junit.Assert.assertNotNull(defaultLog0);
        org.junit.Assert.assertNull(claimStatistic4);
        org.junit.Assert.assertNull(claimStatistic7);
        org.junit.Assert.assertTrue("'" + options8 + "' != '" + org.apache.rat.utils.ReportingSet.Options.OVERWRITE + "'", options8.equals(org.apache.rat.utils.ReportingSet.Options.OVERWRITE));
        org.junit.Assert.assertNotNull(printWriterIOSupplier11);
        org.junit.Assert.assertTrue("'" + level16 + "' != '" + org.apache.rat.utils.Log.Level.ERROR + "'", level16.equals(org.apache.rat.utils.Log.Level.ERROR));
        org.junit.Assert.assertNotNull(builder19);
        org.junit.Assert.assertNotNull(builder20);
        org.junit.Assert.assertTrue("'" + level24 + "' != '" + org.apache.rat.utils.Log.Level.ERROR + "'", level24.equals(org.apache.rat.utils.Log.Level.ERROR));
        org.junit.Assert.assertNotNull(builder25);
        org.junit.Assert.assertNotNull(builder27);
        org.junit.Assert.assertNotNull(builder29);
        org.junit.Assert.assertNotNull(builder31);
        org.junit.Assert.assertNotNull(builder33);
        org.junit.Assert.assertNotNull(builder35);
        org.junit.Assert.assertNotNull(builder37);
        org.junit.Assert.assertEquals("'" + str39 + "' != '" + "NotBuilder: null" + "'", str39, "NotBuilder: null");
        org.junit.Assert.assertNotNull(spdxBuilder40);
        org.junit.Assert.assertEquals("'" + str41 + "' != '" + "SpdxBuilder: null" + "'", str41, "SpdxBuilder: null");
        org.junit.Assert.assertNotNull(spdxBuilder43);
        org.junit.Assert.assertNotNull(iHeaderMatcher44);
        org.junit.Assert.assertNotNull(iHeaderMatcher45);
        org.junit.Assert.assertNotNull(iHeaderMatcher46);
        org.junit.Assert.assertNotNull(iHeaderMatcher47);
        org.junit.Assert.assertNotNull(iHeaderMatcher48);
        org.junit.Assert.assertNotNull(abstractBuilder49);
        org.junit.Assert.assertNotNull(builder50);
        org.junit.Assert.assertNotNull(strArray57);
        org.junit.Assert.assertTrue("'" + boolean59 + "' != '" + true + "'", boolean59 == true);
        org.junit.Assert.assertTrue("'" + boolean61 + "' != '" + true + "'", boolean61 == true);
        org.junit.Assert.assertTrue("'" + boolean63 + "' != '" + true + "'", boolean63 == true);
        org.junit.Assert.assertNotNull(strSet65);
        org.junit.Assert.assertEquals("'" + str66 + "' != '" + "http://org/apache/rat/meta-data#LicenseFamilyName" + "'", str66, "http://org/apache/rat/meta-data#LicenseFamilyName");
        org.junit.Assert.assertNotNull(strStream67);
        org.junit.Assert.assertNotNull(wildcardClass68);
    }

    @Test
    public void test14900() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest29.test14900");
        org.apache.rat.analysis.matchers.SimpleTextMatcher simpleTextMatcher1 = new org.apache.rat.analysis.matchers.SimpleTextMatcher("AllBuilder:");
        org.apache.rat.analysis.matchers.NotMatcher notMatcher2 = new org.apache.rat.analysis.matchers.NotMatcher((org.apache.rat.analysis.IHeaderMatcher) simpleTextMatcher1);
        org.apache.rat.analysis.IHeaderMatcher.State state3 = notMatcher2.currentState();
        org.junit.Assert.assertTrue("'" + state3 + "' != '" + org.apache.rat.analysis.IHeaderMatcher.State.i + "'", state3.equals(org.apache.rat.analysis.IHeaderMatcher.State.i));
    }

    @Test
    public void test14901() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest29.test14901");
        org.apache.rat.configuration.builders.CopyrightBuilder copyrightBuilder0 = org.apache.rat.analysis.IHeaderMatcher.Builder.copyright();
        java.lang.String str1 = copyrightBuilder0.toString();
        org.apache.rat.configuration.builders.CopyrightBuilder copyrightBuilder3 = copyrightBuilder0.setEnd("W3C Software Copyright");
        java.lang.String str4 = copyrightBuilder0.toString();
        java.lang.String str5 = copyrightBuilder0.toString();
        org.junit.Assert.assertNotNull(copyrightBuilder0);
        org.junit.Assert.assertEquals("'" + str1 + "' != '" + "Copyright Builder: s:null e:null o:null" + "'", str1, "Copyright Builder: s:null e:null o:null");
        org.junit.Assert.assertNotNull(copyrightBuilder3);
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "Copyright Builder: s:null e:W3C Software Copyright o:null" + "'", str4, "Copyright Builder: s:null e:W3C Software Copyright o:null");
        org.junit.Assert.assertEquals("'" + str5 + "' != '" + "Copyright Builder: s:null e:W3C Software Copyright o:null" + "'", str5, "Copyright Builder: s:null e:W3C Software Copyright o:null");
    }

    @Test
    public void test14902() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest29.test14902");
        boolean boolean1 = org.apache.rat.document.impl.guesser.NoteGuesser.isNote("Copyright Builder: s:null e:Datum [ name ='http://org/apache/rat/meta-data#LicenseFamilyCategory',value ='AL    '] o:AllBuilder:\nCopyright Builder: s:null e:.cvsignore o:3c840dc2-bef0-42b5-b26c-35a568d53a24");
        org.junit.Assert.assertTrue("'" + boolean1 + "' != '" + false + "'", boolean1 == false);
    }

    @Test
    public void test14903() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest29.test14903");
        org.apache.rat.utils.DefaultLog defaultLog0 = org.apache.rat.utils.DefaultLog.INSTANCE;
        org.apache.rat.annotation.ApacheV2LicenseAppender apacheV2LicenseAppender1 = new org.apache.rat.annotation.ApacheV2LicenseAppender((org.apache.rat.utils.Log) defaultLog0);
        org.apache.rat.utils.Log log2 = null;
        org.apache.rat.ReportConfiguration reportConfiguration3 = new org.apache.rat.ReportConfiguration(log2);
        org.apache.rat.report.claim.ClaimStatistic claimStatistic4 = org.apache.rat.Reporter.report(reportConfiguration3);
        org.apache.rat.utils.Log log5 = null;
        org.apache.rat.ReportConfiguration reportConfiguration6 = new org.apache.rat.ReportConfiguration(log5);
        org.apache.rat.report.claim.ClaimStatistic claimStatistic7 = org.apache.rat.Reporter.report(reportConfiguration6);
        org.apache.rat.utils.ReportingSet.Options options8 = org.apache.rat.utils.ReportingSet.Options.OVERWRITE;
        reportConfiguration6.licenseDuplicateOption(options8);
        reportConfiguration3.familyDuplicateOption(options8);
        org.apache.commons.io.function.IOSupplier<java.io.PrintWriter> printWriterIOSupplier11 = reportConfiguration3.getWriter();
        org.apache.rat.utils.Log log12 = null;
        org.apache.rat.ReportConfiguration reportConfiguration13 = new org.apache.rat.ReportConfiguration(log12);
        reportConfiguration13.addApprovedLicenseCategory(".cvsignore");
        org.apache.rat.utils.Log.Level level16 = org.apache.rat.utils.Log.Level.ERROR;
        reportConfiguration13.logFamilyCollisions(level16);
        reportConfiguration3.logFamilyCollisions(level16);
        org.apache.rat.Defaults.Builder builder19 = org.apache.rat.Defaults.builder();
        org.apache.rat.Defaults.Builder builder20 = builder19.noDefault();
        defaultLog0.log(level16, (java.lang.Object) builder19);
        org.apache.rat.Defaults.Builder builder22 = builder19.noDefault();
        java.net.URL uRL23 = null;
        org.apache.rat.Defaults.Builder builder24 = builder22.remove(uRL23);
        org.apache.rat.Defaults.Builder builder25 = builder24.noDefault();
        org.apache.rat.Defaults.Builder builder27 = builder24.add("b601307a-01d6-468e-92c5-5091f80e9d25");
        org.junit.Assert.assertNotNull(defaultLog0);
        org.junit.Assert.assertNull(claimStatistic4);
        org.junit.Assert.assertNull(claimStatistic7);
        org.junit.Assert.assertTrue("'" + options8 + "' != '" + org.apache.rat.utils.ReportingSet.Options.OVERWRITE + "'", options8.equals(org.apache.rat.utils.ReportingSet.Options.OVERWRITE));
        org.junit.Assert.assertNotNull(printWriterIOSupplier11);
        org.junit.Assert.assertTrue("'" + level16 + "' != '" + org.apache.rat.utils.Log.Level.ERROR + "'", level16.equals(org.apache.rat.utils.Log.Level.ERROR));
        org.junit.Assert.assertNotNull(builder19);
        org.junit.Assert.assertNotNull(builder20);
        org.junit.Assert.assertNotNull(builder22);
        org.junit.Assert.assertNotNull(builder24);
        org.junit.Assert.assertNotNull(builder25);
        org.junit.Assert.assertNotNull(builder27);
    }

    @Test
    public void test14904() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest29.test14904");
        org.apache.rat.configuration.builders.CopyrightBuilder copyrightBuilder0 = org.apache.rat.analysis.IHeaderMatcher.Builder.copyright();
        java.lang.String str1 = copyrightBuilder0.toString();
        org.apache.rat.configuration.builders.CopyrightBuilder copyrightBuilder3 = copyrightBuilder0.setEnd("W3C Software Copyright");
        org.apache.rat.configuration.builders.CopyrightBuilder copyrightBuilder5 = copyrightBuilder3.setStart("");
        org.apache.rat.configuration.builders.CopyrightBuilder copyrightBuilder7 = copyrightBuilder5.setOwner("3a01ef2a-65ad-4697-a3a7-bb504d3c1921");
        org.apache.rat.configuration.builders.CopyrightBuilder copyrightBuilder9 = copyrightBuilder5.setStart("223f0");
        org.apache.rat.analysis.IHeaderMatcher iHeaderMatcher10 = copyrightBuilder9.build();
        boolean boolean11 = copyrightBuilder9.hasId();
        org.junit.Assert.assertNotNull(copyrightBuilder0);
        org.junit.Assert.assertEquals("'" + str1 + "' != '" + "Copyright Builder: s:null e:null o:null" + "'", str1, "Copyright Builder: s:null e:null o:null");
        org.junit.Assert.assertNotNull(copyrightBuilder3);
        org.junit.Assert.assertNotNull(copyrightBuilder5);
        org.junit.Assert.assertNotNull(copyrightBuilder7);
        org.junit.Assert.assertNotNull(copyrightBuilder9);
        org.junit.Assert.assertNotNull(iHeaderMatcher10);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
    }

    @Test
    public void test14905() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest29.test14905");
        org.apache.rat.utils.Log log0 = null;
        org.apache.rat.ReportConfiguration reportConfiguration1 = new org.apache.rat.ReportConfiguration(log0);
        reportConfiguration1.addApprovedLicenseCategory(".cvsignore");
        reportConfiguration1.removeApprovedLicenseCategory("COMMON DEVELOPMENT AND DISTRIBUTION LICENSE Version 1.0");
        java.util.List<java.lang.String> strList6 = org.apache.rat.config.SourceCodeManagementSystems.getPluginExclusions();
        reportConfiguration1.addApprovedLicenseCategories((java.util.Collection<java.lang.String>) strList6);
        boolean boolean8 = reportConfiguration1.isAddingLicenses();
        org.apache.rat.utils.Log log9 = null;
        org.apache.rat.ReportConfiguration reportConfiguration10 = new org.apache.rat.ReportConfiguration(log9);
        java.io.FilenameFilter filenameFilter11 = reportConfiguration10.getInputFileFilter();
        org.apache.rat.license.LicenseSetFactory.LicenseFilter licenseFilter12 = org.apache.rat.license.LicenseSetFactory.LicenseFilter.all;
        java.util.SortedSet<org.apache.rat.license.ILicense> iLicenseSet13 = reportConfiguration10.getLicenses(licenseFilter12);
        org.apache.rat.config.AddLicenseHeaders addLicenseHeaders14 = org.apache.rat.config.AddLicenseHeaders.FALSE;
        reportConfiguration10.setAddLicenseHeaders(addLicenseHeaders14);
        org.apache.rat.utils.Log log16 = null;
        org.apache.rat.ReportConfiguration reportConfiguration17 = new org.apache.rat.ReportConfiguration(log16);
        org.apache.rat.report.claim.ClaimStatistic claimStatistic18 = org.apache.rat.Reporter.report(reportConfiguration17);
        org.apache.rat.license.LicenseSetFactory.LicenseFilter licenseFilter19 = org.apache.rat.license.LicenseSetFactory.LicenseFilter.all;
        org.apache.rat.Reporter.listLicenses(reportConfiguration17, licenseFilter19);
        org.apache.rat.Reporter.listLicenses(reportConfiguration10, licenseFilter19);
        org.apache.rat.utils.Log log22 = null;
        org.apache.rat.ReportConfiguration reportConfiguration23 = new org.apache.rat.ReportConfiguration(log22);
        java.io.FilenameFilter filenameFilter24 = reportConfiguration23.getInputFileFilter();
        org.apache.rat.license.LicenseSetFactory.LicenseFilter licenseFilter25 = org.apache.rat.license.LicenseSetFactory.LicenseFilter.all;
        java.util.SortedSet<org.apache.rat.license.ILicense> iLicenseSet26 = reportConfiguration23.getLicenses(licenseFilter25);
        org.apache.rat.config.AddLicenseHeaders addLicenseHeaders27 = org.apache.rat.config.AddLicenseHeaders.FALSE;
        reportConfiguration23.setAddLicenseHeaders(addLicenseHeaders27);
        org.apache.rat.utils.Log log29 = null;
        org.apache.rat.ReportConfiguration reportConfiguration30 = new org.apache.rat.ReportConfiguration(log29);
        org.apache.rat.report.claim.ClaimStatistic claimStatistic31 = org.apache.rat.Reporter.report(reportConfiguration30);
        org.apache.rat.license.LicenseSetFactory.LicenseFilter licenseFilter32 = org.apache.rat.license.LicenseSetFactory.LicenseFilter.all;
        org.apache.rat.Reporter.listLicenses(reportConfiguration30, licenseFilter32);
        org.apache.rat.Reporter.listLicenses(reportConfiguration23, licenseFilter32);
        org.apache.rat.Reporter.listLicenses(reportConfiguration10, licenseFilter32);
        java.io.FilenameFilter filenameFilter36 = reportConfiguration10.getInputFileFilter();
        reportConfiguration10.setStyleReport(false);
        org.apache.rat.report.IReportable iReportable39 = null;
        reportConfiguration10.setReportable(iReportable39);
        org.apache.rat.license.LicenseSetFactory.LicenseFilter licenseFilter41 = org.apache.rat.license.LicenseSetFactory.LicenseFilter.approved;
        java.util.SortedSet<org.apache.rat.license.ILicense> iLicenseSet42 = reportConfiguration10.getLicenses(licenseFilter41);
        org.apache.rat.utils.Log log43 = null;
        org.apache.rat.ReportConfiguration reportConfiguration44 = new org.apache.rat.ReportConfiguration(log43);
        org.apache.rat.report.claim.ClaimStatistic claimStatistic45 = org.apache.rat.Reporter.report(reportConfiguration44);
        org.apache.commons.io.function.IOSupplier<java.io.OutputStream> outputStreamIOSupplier46 = reportConfiguration44.getOutput();
        org.apache.rat.license.ILicense iLicense47 = null;
        reportConfiguration44.addLicense(iLicense47);
        org.apache.rat.Defaults.Builder builder49 = org.apache.rat.Defaults.builder();
        org.apache.rat.Defaults defaults50 = builder49.build();
        reportConfiguration44.setFrom(defaults50);
        org.apache.rat.license.LicenseSetFactory.LicenseFilter licenseFilter52 = org.apache.rat.license.LicenseSetFactory.LicenseFilter.all;
        java.util.SortedSet<org.apache.rat.license.ILicense> iLicenseSet53 = defaults50.getLicenses(licenseFilter52);
        java.util.SortedSet<org.apache.rat.license.ILicense> iLicenseSet54 = reportConfiguration10.getLicenses(licenseFilter52);
        reportConfiguration1.addLicensesIfNotPresent((java.util.Collection<org.apache.rat.license.ILicense>) iLicenseSet54);
        org.apache.rat.utils.DefaultLog defaultLog56 = org.apache.rat.utils.DefaultLog.INSTANCE;
        org.apache.rat.license.ILicense.Builder builder57 = org.apache.rat.license.ILicense.builder();
        org.apache.rat.license.ILicense.Builder builder59 = builder57.setLicenseFamilyCategory("");
        org.apache.rat.analysis.matchers.CopyrightMatcher copyrightMatcher63 = new org.apache.rat.analysis.matchers.CopyrightMatcher("", "GPL1 ", "hi!");
        org.apache.rat.analysis.IHeaderMatcher.State state64 = copyrightMatcher63.finalizeState();
        org.apache.rat.license.ILicense.Builder builder65 = builder59.setMatcher((org.apache.rat.analysis.IHeaderMatcher) copyrightMatcher63);
        org.apache.rat.license.ILicense.Builder builder67 = builder65.setLicenseFamilyCategory("");
        defaultLog56.error((java.lang.Object) builder67);
        org.apache.rat.utils.Log.Level level69 = org.apache.rat.utils.Log.Level.DEBUG;
        defaultLog56.setLevel(level69);
        org.apache.rat.license.SimpleLicenseFamily simpleLicenseFamily71 = new org.apache.rat.license.SimpleLicenseFamily();
        java.lang.String str72 = simpleLicenseFamily71.getFamilyName();
        java.lang.String str73 = simpleLicenseFamily71.getFamilyCategory();
        simpleLicenseFamily71.setFamilyCategory("W3C  ");
        simpleLicenseFamily71.setFamilyCategory("AllBuilder:");
        defaultLog56.info((java.lang.Object) simpleLicenseFamily71);
        org.apache.rat.license.ILicenseFamilyBuilder iLicenseFamilyBuilder79 = new org.apache.rat.license.ILicenseFamilyBuilder();
        java.lang.String str80 = iLicenseFamilyBuilder79.getCategory();
        org.apache.rat.license.ILicenseFamily.Builder builder82 = iLicenseFamilyBuilder79.setLicenseFamilyCategory("AL   ");
        org.apache.rat.license.ILicenseFamily.Builder builder84 = iLicenseFamilyBuilder79.setLicenseFamilyCategory("MIT  ");
        org.apache.rat.license.ILicenseFamily.Builder builder86 = iLicenseFamilyBuilder79.setLicenseFamilyName("4a00cf7d-fe76-423e-917e-b03bbae6b8a5");
        java.lang.String str87 = iLicenseFamilyBuilder79.getCategory();
        org.apache.rat.license.ILicenseFamily.Builder builder89 = iLicenseFamilyBuilder79.setLicenseFamilyName("8ecb8cce-06e4-400f-84d9-ad1cf6289fda");
        org.apache.rat.license.ILicenseFamily.Builder builder91 = iLicenseFamilyBuilder79.setLicenseFamilyCategory("8f82a952-5bfd-446b-ac79-15beef5b3f17");
        defaultLog56.warn((java.lang.Object) iLicenseFamilyBuilder79);
        reportConfiguration1.addFamily((org.apache.rat.license.ILicenseFamily.Builder) iLicenseFamilyBuilder79);
        java.lang.String str94 = iLicenseFamilyBuilder79.getCategory();
        org.apache.rat.license.ILicenseFamily.Builder builder96 = iLicenseFamilyBuilder79.setLicenseFamilyName("Datum [ name ='http://org/apache/rat/meta-data#ApprovedLicense',value ='true ']");
        org.apache.rat.license.ILicenseFamily.Builder builder98 = iLicenseFamilyBuilder79.setLicenseFamilyName("67cdaeae-343d-464a-9d9f-0986d3bc6047");
        java.lang.Class<?> wildcardClass99 = builder98.getClass();
        org.junit.Assert.assertNotNull(strList6);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertNull(filenameFilter11);
        org.junit.Assert.assertTrue("'" + licenseFilter12 + "' != '" + org.apache.rat.license.LicenseSetFactory.LicenseFilter.all + "'", licenseFilter12.equals(org.apache.rat.license.LicenseSetFactory.LicenseFilter.all));
        org.junit.Assert.assertNotNull(iLicenseSet13);
        org.junit.Assert.assertTrue("'" + addLicenseHeaders14 + "' != '" + org.apache.rat.config.AddLicenseHeaders.FALSE + "'", addLicenseHeaders14.equals(org.apache.rat.config.AddLicenseHeaders.FALSE));
        org.junit.Assert.assertNull(claimStatistic18);
        org.junit.Assert.assertTrue("'" + licenseFilter19 + "' != '" + org.apache.rat.license.LicenseSetFactory.LicenseFilter.all + "'", licenseFilter19.equals(org.apache.rat.license.LicenseSetFactory.LicenseFilter.all));
        org.junit.Assert.assertNull(filenameFilter24);
        org.junit.Assert.assertTrue("'" + licenseFilter25 + "' != '" + org.apache.rat.license.LicenseSetFactory.LicenseFilter.all + "'", licenseFilter25.equals(org.apache.rat.license.LicenseSetFactory.LicenseFilter.all));
        org.junit.Assert.assertNotNull(iLicenseSet26);
        org.junit.Assert.assertTrue("'" + addLicenseHeaders27 + "' != '" + org.apache.rat.config.AddLicenseHeaders.FALSE + "'", addLicenseHeaders27.equals(org.apache.rat.config.AddLicenseHeaders.FALSE));
        org.junit.Assert.assertNull(claimStatistic31);
        org.junit.Assert.assertTrue("'" + licenseFilter32 + "' != '" + org.apache.rat.license.LicenseSetFactory.LicenseFilter.all + "'", licenseFilter32.equals(org.apache.rat.license.LicenseSetFactory.LicenseFilter.all));
        org.junit.Assert.assertNull(filenameFilter36);
        org.junit.Assert.assertTrue("'" + licenseFilter41 + "' != '" + org.apache.rat.license.LicenseSetFactory.LicenseFilter.approved + "'", licenseFilter41.equals(org.apache.rat.license.LicenseSetFactory.LicenseFilter.approved));
        org.junit.Assert.assertNotNull(iLicenseSet42);
        org.junit.Assert.assertNull(claimStatistic45);
        org.junit.Assert.assertNotNull(outputStreamIOSupplier46);
        org.junit.Assert.assertNotNull(builder49);
        org.junit.Assert.assertNotNull(defaults50);
        org.junit.Assert.assertTrue("'" + licenseFilter52 + "' != '" + org.apache.rat.license.LicenseSetFactory.LicenseFilter.all + "'", licenseFilter52.equals(org.apache.rat.license.LicenseSetFactory.LicenseFilter.all));
        org.junit.Assert.assertNotNull(iLicenseSet53);
        org.junit.Assert.assertNotNull(iLicenseSet54);
        org.junit.Assert.assertNotNull(defaultLog56);
        org.junit.Assert.assertNotNull(builder57);
        org.junit.Assert.assertNotNull(builder59);
        org.junit.Assert.assertTrue("'" + state64 + "' != '" + org.apache.rat.analysis.IHeaderMatcher.State.f + "'", state64.equals(org.apache.rat.analysis.IHeaderMatcher.State.f));
        org.junit.Assert.assertNotNull(builder65);
        org.junit.Assert.assertNotNull(builder67);
        org.junit.Assert.assertTrue("'" + level69 + "' != '" + org.apache.rat.utils.Log.Level.DEBUG + "'", level69.equals(org.apache.rat.utils.Log.Level.DEBUG));
        org.junit.Assert.assertNull(str72);
        org.junit.Assert.assertNull(str73);
        org.junit.Assert.assertNull(str80);
        org.junit.Assert.assertNotNull(builder82);
        org.junit.Assert.assertNotNull(builder84);
        org.junit.Assert.assertNotNull(builder86);
        org.junit.Assert.assertEquals("'" + str87 + "' != '" + "MIT  " + "'", str87, "MIT  ");
        org.junit.Assert.assertNotNull(builder89);
        org.junit.Assert.assertNotNull(builder91);
        org.junit.Assert.assertEquals("'" + str94 + "' != '" + "8f82a952-5bfd-446b-ac79-15beef5b3f17" + "'", str94, "8f82a952-5bfd-446b-ac79-15beef5b3f17");
        org.junit.Assert.assertNotNull(builder96);
        org.junit.Assert.assertNotNull(builder98);
        org.junit.Assert.assertNotNull(wildcardClass99);
    }

    @Test
    public void test14906() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest29.test14906");
        org.apache.rat.analysis.matchers.SimpleTextMatcher simpleTextMatcher2 = new org.apache.rat.analysis.matchers.SimpleTextMatcher("W3C  ", "c523095e-4421-4cc4-93e2-039f23b91f76");
        boolean boolean4 = simpleTextMatcher2.doMatch("GPL1 ");
        org.apache.rat.analysis.IHeaderMatcher.State state5 = simpleTextMatcher2.currentState();
        boolean boolean7 = simpleTextMatcher2.doMatch("");
        simpleTextMatcher2.reset();
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertTrue("'" + state5 + "' != '" + org.apache.rat.analysis.IHeaderMatcher.State.i + "'", state5.equals(org.apache.rat.analysis.IHeaderMatcher.State.i));
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
    }

    @Test
    public void test14907() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest29.test14907");
        org.apache.rat.analysis.matchers.FullTextMatcher fullTextMatcher1 = new org.apache.rat.analysis.matchers.FullTextMatcher("The MIT License");
        org.apache.rat.analysis.IHeaderMatcher.State state3 = fullTextMatcher1.matches("Datum [ name ='http://org/apache/rat/meta-data#LicenseFamilyCategory',value ='OASIS ']");
        java.lang.String str4 = fullTextMatcher1.getId();
        org.apache.rat.analysis.IHeaderMatcher.State state5 = fullTextMatcher1.finalizeState();
        fullTextMatcher1.reset();
        org.junit.Assert.assertTrue("'" + state3 + "' != '" + org.apache.rat.analysis.IHeaderMatcher.State.i + "'", state3.equals(org.apache.rat.analysis.IHeaderMatcher.State.i));
// flaky:         org.junit.Assert.assertEquals("'" + str4 + "' != '" + "3a3419a4-40e4-4962-9698-874f220de9e7" + "'", str4, "3a3419a4-40e4-4962-9698-874f220de9e7");
        org.junit.Assert.assertTrue("'" + state5 + "' != '" + org.apache.rat.analysis.IHeaderMatcher.State.f + "'", state5.equals(org.apache.rat.analysis.IHeaderMatcher.State.f));
    }

    @Test
    public void test14908() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest29.test14908");
        java.lang.String str1 = org.apache.rat.license.ILicenseFamily.makeCategory("RegexBuilder: 87ca16a3-83a2-467a-a3d9-01d4d380dfbd");
        org.junit.Assert.assertEquals("'" + str1 + "' != '" + "Regex" + "'", str1, "Regex");
    }

    @Test
    public void test14909() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest29.test14909");
        org.apache.rat.configuration.builders.RegexBuilder regexBuilder0 = new org.apache.rat.configuration.builders.RegexBuilder();
        org.apache.rat.configuration.builders.RegexBuilder regexBuilder2 = regexBuilder0.setExpr("8c998e14-07fd-48d7-a11a-a7aa35ad3d01");
        java.lang.String str3 = regexBuilder0.toString();
        org.junit.Assert.assertNotNull(regexBuilder2);
        org.junit.Assert.assertEquals("'" + str3 + "' != '" + "RegexBuilder: 8c998e14-07fd-48d7-a11a-a7aa35ad3d01" + "'", str3, "RegexBuilder: 8c998e14-07fd-48d7-a11a-a7aa35ad3d01");
    }

    @Test
    public void test14910() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest29.test14910");
        org.apache.rat.report.claim.ClaimStatistic claimStatistic0 = new org.apache.rat.report.claim.ClaimStatistic();
        claimStatistic0.setNumApproved((int) (short) 10);
        java.util.Map<java.lang.String, java.lang.Integer> strMap3 = null;
        claimStatistic0.setDocumentCategoryMap(strMap3);
        claimStatistic0.setNumUnknown((int) '4');
        java.util.Map<java.lang.String, java.lang.Integer> strMap7 = null;
        claimStatistic0.setLicenseFileNameMap(strMap7);
        java.util.Map<java.lang.String, java.lang.Integer> strMap9 = claimStatistic0.getDocumentCategoryMap();
        java.util.Map<java.lang.String, java.lang.Integer> strMap10 = null;
        claimStatistic0.setLicenseFileCodeMap(strMap10);
        claimStatistic0.setNumGenerated(10);
        java.util.Map<java.lang.String, java.lang.Integer> strMap14 = null;
        claimStatistic0.setLicenseFileNameMap(strMap14);
        java.util.Map<java.lang.String, java.lang.Integer> strMap16 = claimStatistic0.getDocumentCategoryMap();
        org.junit.Assert.assertNull(strMap9);
        org.junit.Assert.assertNull(strMap16);
    }

    @Test
    public void test14911() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest29.test14911");
        org.apache.rat.license.ILicenseFamilyBuilder iLicenseFamilyBuilder0 = new org.apache.rat.license.ILicenseFamilyBuilder();
        java.lang.String str1 = iLicenseFamilyBuilder0.getCategory();
        org.apache.rat.license.ILicenseFamily.Builder builder3 = iLicenseFamilyBuilder0.setLicenseFamilyCategory("AL   ");
        org.apache.rat.license.ILicenseFamily.Builder builder5 = iLicenseFamilyBuilder0.setLicenseFamilyCategory("MIT  ");
        org.apache.rat.license.ILicenseFamily.Builder builder7 = iLicenseFamilyBuilder0.setLicenseFamilyName("4a00cf7d-fe76-423e-917e-b03bbae6b8a5");
        org.apache.rat.license.ILicenseFamily.Builder builder9 = iLicenseFamilyBuilder0.setLicenseFamilyName("EBC30EB7-B3EA-4F39-BAEA-5FEA4FA0278B");
        org.apache.rat.license.ILicenseFamily.Builder builder11 = iLicenseFamilyBuilder0.setLicenseFamilyName("126085ee-cf4d-43ae-a1bf-28f47c1b9d21");
        org.apache.rat.license.ILicenseFamily.Builder builder13 = iLicenseFamilyBuilder0.setLicenseFamilyName("641dafc1-13c3-45d4-8272-f36f10392c53");
        org.apache.rat.license.ILicenseFamily.Builder builder15 = iLicenseFamilyBuilder0.setLicenseFamilyName("48142bafce2b498b86ae8194ba224cc3");
        org.junit.Assert.assertNull(str1);
        org.junit.Assert.assertNotNull(builder3);
        org.junit.Assert.assertNotNull(builder5);
        org.junit.Assert.assertNotNull(builder7);
        org.junit.Assert.assertNotNull(builder9);
        org.junit.Assert.assertNotNull(builder11);
        org.junit.Assert.assertNotNull(builder13);
        org.junit.Assert.assertNotNull(builder15);
    }

    @Test
    public void test14912() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest29.test14912");
        org.apache.rat.configuration.builders.MatcherRefBuilder matcherRefBuilder0 = org.apache.rat.analysis.IHeaderMatcher.Builder.matcherRef();
        boolean boolean1 = matcherRefBuilder0.hasId();
        java.lang.String str2 = matcherRefBuilder0.toString();
        java.util.Map<java.lang.String, org.apache.rat.analysis.IHeaderMatcher> strMap3 = null;
        org.apache.rat.configuration.builders.MatcherRefBuilder matcherRefBuilder4 = matcherRefBuilder0.setMatchers(strMap3);
        boolean boolean5 = matcherRefBuilder0.hasId();
        org.apache.rat.configuration.builders.MatcherRefBuilder matcherRefBuilder7 = matcherRefBuilder0.setRefId("RegexBuilder: 67eb96c2-83b2-456d-bfb0-23ff916bf212");
        java.lang.String str8 = matcherRefBuilder7.toString();
        org.junit.Assert.assertNotNull(matcherRefBuilder0);
        org.junit.Assert.assertTrue("'" + boolean1 + "' != '" + false + "'", boolean1 == false);
        org.junit.Assert.assertEquals("'" + str2 + "' != '" + "MathcerRefBuilder: null" + "'", str2, "MathcerRefBuilder: null");
        org.junit.Assert.assertNotNull(matcherRefBuilder4);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertNotNull(matcherRefBuilder7);
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "MathcerRefBuilder: RegexBuilder: 67eb96c2-83b2-456d-bfb0-23ff916bf212" + "'", str8, "MathcerRefBuilder: RegexBuilder: 67eb96c2-83b2-456d-bfb0-23ff916bf212");
    }

    @Test
    public void test14913() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest29.test14913");
        org.apache.rat.utils.DefaultLog defaultLog0 = org.apache.rat.utils.DefaultLog.INSTANCE;
        org.apache.rat.license.ILicense.Builder builder1 = org.apache.rat.license.ILicense.builder();
        org.apache.rat.license.ILicense.Builder builder3 = builder1.setLicenseFamilyCategory("");
        org.apache.rat.analysis.matchers.CopyrightMatcher copyrightMatcher7 = new org.apache.rat.analysis.matchers.CopyrightMatcher("", "GPL1 ", "hi!");
        org.apache.rat.analysis.IHeaderMatcher.State state8 = copyrightMatcher7.finalizeState();
        org.apache.rat.license.ILicense.Builder builder9 = builder3.setMatcher((org.apache.rat.analysis.IHeaderMatcher) copyrightMatcher7);
        org.apache.rat.license.ILicense.Builder builder11 = builder9.setLicenseFamilyCategory("");
        defaultLog0.error((java.lang.Object) builder11);
        org.apache.rat.utils.Log log13 = null;
        org.apache.rat.ReportConfiguration reportConfiguration14 = new org.apache.rat.ReportConfiguration(log13);
        java.io.FilenameFilter filenameFilter15 = reportConfiguration14.getInputFileFilter();
        org.apache.rat.license.LicenseSetFactory.LicenseFilter licenseFilter16 = org.apache.rat.license.LicenseSetFactory.LicenseFilter.all;
        java.util.SortedSet<org.apache.rat.license.ILicense> iLicenseSet17 = reportConfiguration14.getLicenses(licenseFilter16);
        org.apache.rat.config.AddLicenseHeaders addLicenseHeaders18 = org.apache.rat.config.AddLicenseHeaders.FALSE;
        reportConfiguration14.setAddLicenseHeaders(addLicenseHeaders18);
        org.apache.rat.utils.Log log20 = null;
        org.apache.rat.ReportConfiguration reportConfiguration21 = new org.apache.rat.ReportConfiguration(log20);
        org.apache.rat.report.claim.ClaimStatistic claimStatistic22 = org.apache.rat.Reporter.report(reportConfiguration21);
        org.apache.rat.license.LicenseSetFactory.LicenseFilter licenseFilter23 = org.apache.rat.license.LicenseSetFactory.LicenseFilter.all;
        org.apache.rat.Reporter.listLicenses(reportConfiguration21, licenseFilter23);
        org.apache.rat.Reporter.listLicenses(reportConfiguration14, licenseFilter23);
        org.apache.rat.utils.Log log26 = null;
        org.apache.rat.ReportConfiguration reportConfiguration27 = new org.apache.rat.ReportConfiguration(log26);
        java.io.FilenameFilter filenameFilter28 = reportConfiguration27.getInputFileFilter();
        org.apache.rat.license.LicenseSetFactory.LicenseFilter licenseFilter29 = org.apache.rat.license.LicenseSetFactory.LicenseFilter.all;
        java.util.SortedSet<org.apache.rat.license.ILicense> iLicenseSet30 = reportConfiguration27.getLicenses(licenseFilter29);
        org.apache.rat.config.AddLicenseHeaders addLicenseHeaders31 = org.apache.rat.config.AddLicenseHeaders.FALSE;
        reportConfiguration27.setAddLicenseHeaders(addLicenseHeaders31);
        org.apache.rat.utils.Log log33 = null;
        org.apache.rat.ReportConfiguration reportConfiguration34 = new org.apache.rat.ReportConfiguration(log33);
        org.apache.rat.report.claim.ClaimStatistic claimStatistic35 = org.apache.rat.Reporter.report(reportConfiguration34);
        org.apache.rat.license.LicenseSetFactory.LicenseFilter licenseFilter36 = org.apache.rat.license.LicenseSetFactory.LicenseFilter.all;
        org.apache.rat.Reporter.listLicenses(reportConfiguration34, licenseFilter36);
        org.apache.rat.Reporter.listLicenses(reportConfiguration27, licenseFilter36);
        org.apache.rat.Reporter.listLicenses(reportConfiguration14, licenseFilter36);
        org.apache.rat.utils.Log log40 = null;
        org.apache.rat.ReportConfiguration reportConfiguration41 = new org.apache.rat.ReportConfiguration(log40);
        org.apache.commons.io.function.IOSupplier<java.io.OutputStream> outputStreamIOSupplier42 = reportConfiguration41.getOutput();
        reportConfiguration14.setOut(outputStreamIOSupplier42);
        org.apache.rat.utils.Log.Level level44 = org.apache.rat.utils.Log.Level.WARN;
        reportConfiguration14.logLicenseCollisions(level44);
        defaultLog0.warn((java.lang.Object) level44);
        org.apache.rat.utils.Log.Level level47 = defaultLog0.getLevel();
        java.lang.String[] strArray53 = new java.lang.String[] { "http://org/apache/rat/meta-data#LicenseFamilyCategory", "Datum [ name ='http://org/apache/rat/meta-data#LicenseFamilyCategory',value ='GPL1  ']", "MANIFEST.MF", "AllBuilder:", "The MIT License" };
        org.apache.rat.utils.ReportingSet<java.lang.String> strSet54 = new org.apache.rat.utils.ReportingSet<java.lang.String>();
        boolean boolean55 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strSet54, strArray53);
        boolean boolean57 = strSet54.addIfNotPresent("http://org/apache/rat/meta-data#LicenseFamilyName");
        boolean boolean59 = strSet54.addIfNotPresent("ef7a8b13-64c3-4510-bb0c-dbf208e1e73f");
        org.apache.rat.analysis.matchers.FullTextMatcher fullTextMatcher62 = new org.apache.rat.analysis.matchers.FullTextMatcher("notice", "3c840dc2-bef0-42b5-b26c-35a568d53a24");
        org.apache.rat.analysis.IHeaderMatcher.State state64 = fullTextMatcher62.matches("The MIT License");
        boolean boolean65 = strSet54.equals((java.lang.Object) state64);
        org.apache.rat.utils.DefaultLog defaultLog66 = org.apache.rat.utils.DefaultLog.INSTANCE;
        org.apache.rat.annotation.ApacheV2LicenseAppender apacheV2LicenseAppender67 = new org.apache.rat.annotation.ApacheV2LicenseAppender((org.apache.rat.utils.Log) defaultLog66);
        org.apache.rat.utils.Log log68 = null;
        org.apache.rat.ReportConfiguration reportConfiguration69 = new org.apache.rat.ReportConfiguration(log68);
        org.apache.rat.report.claim.ClaimStatistic claimStatistic70 = org.apache.rat.Reporter.report(reportConfiguration69);
        org.apache.rat.utils.Log log71 = null;
        org.apache.rat.ReportConfiguration reportConfiguration72 = new org.apache.rat.ReportConfiguration(log71);
        org.apache.rat.report.claim.ClaimStatistic claimStatistic73 = org.apache.rat.Reporter.report(reportConfiguration72);
        org.apache.rat.utils.ReportingSet.Options options74 = org.apache.rat.utils.ReportingSet.Options.OVERWRITE;
        reportConfiguration72.licenseDuplicateOption(options74);
        reportConfiguration69.familyDuplicateOption(options74);
        org.apache.commons.io.function.IOSupplier<java.io.PrintWriter> printWriterIOSupplier77 = reportConfiguration69.getWriter();
        org.apache.rat.utils.Log log78 = null;
        org.apache.rat.ReportConfiguration reportConfiguration79 = new org.apache.rat.ReportConfiguration(log78);
        reportConfiguration79.addApprovedLicenseCategory(".cvsignore");
        org.apache.rat.utils.Log.Level level82 = org.apache.rat.utils.Log.Level.ERROR;
        reportConfiguration79.logFamilyCollisions(level82);
        reportConfiguration69.logFamilyCollisions(level82);
        org.apache.rat.Defaults.Builder builder85 = org.apache.rat.Defaults.builder();
        org.apache.rat.Defaults.Builder builder86 = builder85.noDefault();
        defaultLog66.log(level82, (java.lang.Object) builder85);
        org.apache.rat.utils.ReportingSet<java.lang.String> strSet88 = strSet54.setLog((org.apache.rat.utils.Log) defaultLog66);
        defaultLog0.error((java.lang.Object) strSet88);
        org.apache.rat.utils.Log.Level level90 = defaultLog0.getLevel();
        org.junit.Assert.assertNotNull(defaultLog0);
        org.junit.Assert.assertNotNull(builder1);
        org.junit.Assert.assertNotNull(builder3);
        org.junit.Assert.assertTrue("'" + state8 + "' != '" + org.apache.rat.analysis.IHeaderMatcher.State.f + "'", state8.equals(org.apache.rat.analysis.IHeaderMatcher.State.f));
        org.junit.Assert.assertNotNull(builder9);
        org.junit.Assert.assertNotNull(builder11);
        org.junit.Assert.assertNull(filenameFilter15);
        org.junit.Assert.assertTrue("'" + licenseFilter16 + "' != '" + org.apache.rat.license.LicenseSetFactory.LicenseFilter.all + "'", licenseFilter16.equals(org.apache.rat.license.LicenseSetFactory.LicenseFilter.all));
        org.junit.Assert.assertNotNull(iLicenseSet17);
        org.junit.Assert.assertTrue("'" + addLicenseHeaders18 + "' != '" + org.apache.rat.config.AddLicenseHeaders.FALSE + "'", addLicenseHeaders18.equals(org.apache.rat.config.AddLicenseHeaders.FALSE));
        org.junit.Assert.assertNull(claimStatistic22);
        org.junit.Assert.assertTrue("'" + licenseFilter23 + "' != '" + org.apache.rat.license.LicenseSetFactory.LicenseFilter.all + "'", licenseFilter23.equals(org.apache.rat.license.LicenseSetFactory.LicenseFilter.all));
        org.junit.Assert.assertNull(filenameFilter28);
        org.junit.Assert.assertTrue("'" + licenseFilter29 + "' != '" + org.apache.rat.license.LicenseSetFactory.LicenseFilter.all + "'", licenseFilter29.equals(org.apache.rat.license.LicenseSetFactory.LicenseFilter.all));
        org.junit.Assert.assertNotNull(iLicenseSet30);
        org.junit.Assert.assertTrue("'" + addLicenseHeaders31 + "' != '" + org.apache.rat.config.AddLicenseHeaders.FALSE + "'", addLicenseHeaders31.equals(org.apache.rat.config.AddLicenseHeaders.FALSE));
        org.junit.Assert.assertNull(claimStatistic35);
        org.junit.Assert.assertTrue("'" + licenseFilter36 + "' != '" + org.apache.rat.license.LicenseSetFactory.LicenseFilter.all + "'", licenseFilter36.equals(org.apache.rat.license.LicenseSetFactory.LicenseFilter.all));
        org.junit.Assert.assertNotNull(outputStreamIOSupplier42);
        org.junit.Assert.assertTrue("'" + level44 + "' != '" + org.apache.rat.utils.Log.Level.WARN + "'", level44.equals(org.apache.rat.utils.Log.Level.WARN));
        org.junit.Assert.assertTrue("'" + level47 + "' != '" + org.apache.rat.utils.Log.Level.DEBUG + "'", level47.equals(org.apache.rat.utils.Log.Level.DEBUG));
        org.junit.Assert.assertNotNull(strArray53);
        org.junit.Assert.assertTrue("'" + boolean55 + "' != '" + true + "'", boolean55 == true);
        org.junit.Assert.assertTrue("'" + boolean57 + "' != '" + true + "'", boolean57 == true);
        org.junit.Assert.assertTrue("'" + boolean59 + "' != '" + true + "'", boolean59 == true);
        org.junit.Assert.assertTrue("'" + state64 + "' != '" + org.apache.rat.analysis.IHeaderMatcher.State.i + "'", state64.equals(org.apache.rat.analysis.IHeaderMatcher.State.i));
        org.junit.Assert.assertTrue("'" + boolean65 + "' != '" + false + "'", boolean65 == false);
        org.junit.Assert.assertNotNull(defaultLog66);
        org.junit.Assert.assertNull(claimStatistic70);
        org.junit.Assert.assertNull(claimStatistic73);
        org.junit.Assert.assertTrue("'" + options74 + "' != '" + org.apache.rat.utils.ReportingSet.Options.OVERWRITE + "'", options74.equals(org.apache.rat.utils.ReportingSet.Options.OVERWRITE));
        org.junit.Assert.assertNotNull(printWriterIOSupplier77);
        org.junit.Assert.assertTrue("'" + level82 + "' != '" + org.apache.rat.utils.Log.Level.ERROR + "'", level82.equals(org.apache.rat.utils.Log.Level.ERROR));
        org.junit.Assert.assertNotNull(builder85);
        org.junit.Assert.assertNotNull(builder86);
        org.junit.Assert.assertNotNull(strSet88);
        org.junit.Assert.assertTrue("'" + level90 + "' != '" + org.apache.rat.utils.Log.Level.DEBUG + "'", level90.equals(org.apache.rat.utils.Log.Level.DEBUG));
    }

    @Test
    public void test14914() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest29.test14914");
        org.apache.rat.license.ILicense.Builder builder0 = org.apache.rat.license.ILicense.builder();
        org.apache.rat.license.ILicense.Builder builder2 = builder0.setLicenseFamilyCategory("");
        org.apache.rat.analysis.matchers.FullTextMatcher fullTextMatcher4 = new org.apache.rat.analysis.matchers.FullTextMatcher("ef7a8b13-64c3-4510-bb0c-dbf208e1e73f");
        org.apache.rat.license.ILicense.Builder builder5 = builder0.setMatcher((org.apache.rat.analysis.IHeaderMatcher) fullTextMatcher4);
        org.apache.rat.license.ILicense.Builder builder7 = builder0.setDerivedFrom("http://org/apache/rat/meta-data#HeaderSample");
        org.apache.rat.analysis.matchers.FullTextMatcher fullTextMatcher10 = new org.apache.rat.analysis.matchers.FullTextMatcher("http://org/apache/rat/meta-data", "Apache License Version 2.0");
        org.apache.rat.analysis.IHeaderMatcher.State state11 = fullTextMatcher10.currentState();
        org.apache.rat.analysis.matchers.NotMatcher notMatcher12 = new org.apache.rat.analysis.matchers.NotMatcher((org.apache.rat.analysis.IHeaderMatcher) fullTextMatcher10);
        boolean boolean14 = fullTextMatcher10.doMatch("JAVA");
        org.apache.rat.license.ILicense.Builder builder15 = builder0.setMatcher((org.apache.rat.analysis.IHeaderMatcher) fullTextMatcher10);
        org.apache.rat.analysis.IHeaderMatcher.State state16 = fullTextMatcher10.finalizeState();
        org.junit.Assert.assertNotNull(builder0);
        org.junit.Assert.assertNotNull(builder2);
        org.junit.Assert.assertNotNull(builder5);
        org.junit.Assert.assertNotNull(builder7);
        org.junit.Assert.assertTrue("'" + state11 + "' != '" + org.apache.rat.analysis.IHeaderMatcher.State.i + "'", state11.equals(org.apache.rat.analysis.IHeaderMatcher.State.i));
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
        org.junit.Assert.assertNotNull(builder15);
        org.junit.Assert.assertTrue("'" + state16 + "' != '" + org.apache.rat.analysis.IHeaderMatcher.State.f + "'", state16.equals(org.apache.rat.analysis.IHeaderMatcher.State.f));
    }

    @Test
    public void test14915() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest29.test14915");
        org.apache.rat.utils.Log log0 = null;
        org.apache.rat.ReportConfiguration reportConfiguration1 = new org.apache.rat.ReportConfiguration(log0);
        reportConfiguration1.addApprovedLicenseCategory(".cvsignore");
        reportConfiguration1.removeApprovedLicenseCategory("COMMON DEVELOPMENT AND DISTRIBUTION LICENSE Version 1.0");
        org.apache.rat.license.ILicenseFamily iLicenseFamily6 = null;
        reportConfiguration1.addFamily(iLicenseFamily6);
        boolean boolean8 = reportConfiguration1.isStyleReport();
        org.apache.commons.io.filefilter.IOFileFilter iOFileFilter9 = reportConfiguration1.getDirectoryFilter();
        org.apache.rat.document.ToNameTransformer toNameTransformer10 = new org.apache.rat.document.ToNameTransformer();
        org.apache.rat.utils.DefaultLog defaultLog11 = org.apache.rat.utils.DefaultLog.INSTANCE;
        org.apache.rat.license.ILicense.Builder builder12 = org.apache.rat.license.ILicense.builder();
        org.apache.rat.license.ILicense.Builder builder14 = builder12.setLicenseFamilyCategory("");
        org.apache.rat.analysis.matchers.CopyrightMatcher copyrightMatcher18 = new org.apache.rat.analysis.matchers.CopyrightMatcher("", "GPL1 ", "hi!");
        org.apache.rat.analysis.IHeaderMatcher.State state19 = copyrightMatcher18.finalizeState();
        org.apache.rat.license.ILicense.Builder builder20 = builder14.setMatcher((org.apache.rat.analysis.IHeaderMatcher) copyrightMatcher18);
        org.apache.rat.license.ILicense.Builder builder22 = builder20.setLicenseFamilyCategory("");
        defaultLog11.error((java.lang.Object) builder22);
        java.lang.Object obj24 = toNameTransformer10.transform((java.lang.Object) defaultLog11);
        java.lang.Object obj25 = null;
        defaultLog11.warn(obj25);
        org.apache.rat.utils.DefaultLog defaultLog27 = org.apache.rat.utils.DefaultLog.INSTANCE;
        org.apache.rat.utils.Log log28 = null;
        org.apache.rat.ReportConfiguration reportConfiguration29 = new org.apache.rat.ReportConfiguration(log28);
        reportConfiguration29.addApprovedLicenseCategory(".cvsignore");
        org.apache.rat.utils.Log.Level level32 = org.apache.rat.utils.Log.Level.ERROR;
        reportConfiguration29.logFamilyCollisions(level32);
        defaultLog27.setLevel(level32);
        defaultLog11.log(level32, "AnyBuilder:");
        reportConfiguration1.logLicenseCollisions(level32);
        org.apache.rat.utils.Log log38 = null;
        org.apache.rat.ReportConfiguration reportConfiguration39 = new org.apache.rat.ReportConfiguration(log38);
        org.apache.commons.io.function.IOSupplier<java.io.OutputStream> outputStreamIOSupplier40 = reportConfiguration39.getOutput();
        org.apache.commons.io.filefilter.IOFileFilter iOFileFilter41 = reportConfiguration39.getDirectoryFilter();
        reportConfiguration1.addDirectoryFilter(iOFileFilter41);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + true + "'", boolean8 == true);
        org.junit.Assert.assertNotNull(iOFileFilter9);
        org.junit.Assert.assertNotNull(defaultLog11);
        org.junit.Assert.assertNotNull(builder12);
        org.junit.Assert.assertNotNull(builder14);
        org.junit.Assert.assertTrue("'" + state19 + "' != '" + org.apache.rat.analysis.IHeaderMatcher.State.f + "'", state19.equals(org.apache.rat.analysis.IHeaderMatcher.State.f));
        org.junit.Assert.assertNotNull(builder20);
        org.junit.Assert.assertNotNull(builder22);
        org.junit.Assert.assertNull(obj24);
        org.junit.Assert.assertNotNull(defaultLog27);
        org.junit.Assert.assertTrue("'" + level32 + "' != '" + org.apache.rat.utils.Log.Level.ERROR + "'", level32.equals(org.apache.rat.utils.Log.Level.ERROR));
        org.junit.Assert.assertNotNull(outputStreamIOSupplier40);
        org.junit.Assert.assertNotNull(iOFileFilter41);
    }

    @Test
    public void test14916() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest29.test14916");
        org.apache.rat.configuration.builders.SpdxBuilder spdxBuilder0 = org.apache.rat.analysis.IHeaderMatcher.Builder.spdx();
        java.lang.String str1 = spdxBuilder0.toString();
        org.apache.rat.configuration.builders.SpdxBuilder spdxBuilder3 = spdxBuilder0.setName("ef7a8b13-64c3-4510-bb0c-dbf208e1e73f");
        org.apache.rat.analysis.IHeaderMatcher iHeaderMatcher4 = spdxBuilder3.build();
        org.apache.rat.configuration.builders.SpdxBuilder spdxBuilder6 = spdxBuilder3.setName("null http://org/apache/rat/meta-data#LicenseFamilyName");
        java.lang.String str7 = spdxBuilder3.toString();
        java.lang.String str8 = spdxBuilder3.toString();
        org.apache.rat.analysis.IHeaderMatcher iHeaderMatcher9 = spdxBuilder3.build();
        org.junit.Assert.assertNotNull(spdxBuilder0);
        org.junit.Assert.assertEquals("'" + str1 + "' != '" + "SpdxBuilder: null" + "'", str1, "SpdxBuilder: null");
        org.junit.Assert.assertNotNull(spdxBuilder3);
        org.junit.Assert.assertNotNull(iHeaderMatcher4);
        org.junit.Assert.assertNotNull(spdxBuilder6);
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "SpdxBuilder: null http://org/apache/rat/meta-data#LicenseFamilyName" + "'", str7, "SpdxBuilder: null http://org/apache/rat/meta-data#LicenseFamilyName");
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "SpdxBuilder: null http://org/apache/rat/meta-data#LicenseFamilyName" + "'", str8, "SpdxBuilder: null http://org/apache/rat/meta-data#LicenseFamilyName");
        org.junit.Assert.assertNotNull(iHeaderMatcher9);
    }

    @Test
    public void test14917() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest29.test14917");
        org.apache.rat.configuration.builders.CopyrightBuilder copyrightBuilder0 = org.apache.rat.analysis.IHeaderMatcher.Builder.copyright();
        org.apache.rat.configuration.builders.CopyrightBuilder copyrightBuilder2 = copyrightBuilder0.setStart("021187d7-27c2-4fd9-bc74-8cc00413ee52");
        boolean boolean3 = copyrightBuilder2.hasId();
        org.apache.rat.configuration.builders.AbstractBuilder abstractBuilder5 = copyrightBuilder2.setId("6620e9ee-d651-4c18-8162-edad6d18368e");
        org.apache.rat.configuration.builders.CopyrightBuilder copyrightBuilder7 = copyrightBuilder2.setEnd("MathcerRefBuilder: 3c74a3ec-8235-4035-9db7-f9f475b48681");
        org.apache.rat.analysis.IHeaderMatcher iHeaderMatcher8 = copyrightBuilder7.build();
        boolean boolean9 = copyrightBuilder7.hasId();
        org.junit.Assert.assertNotNull(copyrightBuilder0);
        org.junit.Assert.assertNotNull(copyrightBuilder2);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertNotNull(abstractBuilder5);
        org.junit.Assert.assertNotNull(copyrightBuilder7);
        org.junit.Assert.assertNotNull(iHeaderMatcher8);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + true + "'", boolean9 == true);
    }

    @Test
    public void test14918() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest29.test14918");
        java.lang.String[] strArray5 = new java.lang.String[] { "http://org/apache/rat/meta-data#LicenseFamilyCategory", "Datum [ name ='http://org/apache/rat/meta-data#LicenseFamilyCategory',value ='GPL1  ']", "MANIFEST.MF", "AllBuilder:", "The MIT License" };
        org.apache.rat.utils.ReportingSet<java.lang.String> strSet6 = new org.apache.rat.utils.ReportingSet<java.lang.String>();
        boolean boolean7 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strSet6, strArray5);
        boolean boolean9 = strSet6.addIfNotPresent("http://org/apache/rat/meta-data#LicenseFamilyName");
        java.util.Iterator<java.lang.String> strItor10 = strSet6.iterator();
        java.lang.Object[] objArray11 = strSet6.toArray();
        java.lang.String[] strArray17 = new java.lang.String[] { "http://org/apache/rat/meta-data#LicenseFamilyCategory", "Datum [ name ='http://org/apache/rat/meta-data#LicenseFamilyCategory',value ='GPL1  ']", "MANIFEST.MF", "AllBuilder:", "The MIT License" };
        org.apache.rat.utils.ReportingSet<java.lang.String> strSet18 = new org.apache.rat.utils.ReportingSet<java.lang.String>();
        boolean boolean19 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strSet18, strArray17);
        boolean boolean21 = strSet18.addIfNotPresent("http://org/apache/rat/meta-data#LicenseFamilyName");
        java.util.SortedSet<org.apache.rat.license.ILicenseFamily> iLicenseFamilySet22 = org.apache.rat.license.LicenseFamilySetFactory.emptyLicenseFamilySet();
        boolean boolean23 = strSet18.removeAll((java.util.Collection<org.apache.rat.license.ILicenseFamily>) iLicenseFamilySet22);
        boolean boolean24 = strSet6.containsAll((java.util.Collection<org.apache.rat.license.ILicenseFamily>) iLicenseFamilySet22);
        java.util.Spliterator<java.lang.String> strSpliterator25 = strSet6.spliterator();
        org.apache.rat.utils.DefaultLog defaultLog26 = org.apache.rat.utils.DefaultLog.INSTANCE;
        org.apache.rat.utils.Log log27 = null;
        org.apache.rat.ReportConfiguration reportConfiguration28 = new org.apache.rat.ReportConfiguration(log27);
        reportConfiguration28.addApprovedLicenseCategory(".cvsignore");
        org.apache.rat.utils.Log.Level level31 = org.apache.rat.utils.Log.Level.ERROR;
        reportConfiguration28.logFamilyCollisions(level31);
        defaultLog26.setLevel(level31);
        org.apache.rat.utils.Log log34 = null;
        org.apache.rat.ReportConfiguration reportConfiguration35 = new org.apache.rat.ReportConfiguration(log34);
        java.io.FilenameFilter filenameFilter36 = reportConfiguration35.getInputFileFilter();
        org.apache.rat.license.LicenseSetFactory.LicenseFilter licenseFilter37 = org.apache.rat.license.LicenseSetFactory.LicenseFilter.all;
        java.util.SortedSet<org.apache.rat.license.ILicense> iLicenseSet38 = reportConfiguration35.getLicenses(licenseFilter37);
        org.apache.rat.config.AddLicenseHeaders addLicenseHeaders39 = org.apache.rat.config.AddLicenseHeaders.FALSE;
        reportConfiguration35.setAddLicenseHeaders(addLicenseHeaders39);
        org.apache.rat.utils.Log log41 = null;
        org.apache.rat.ReportConfiguration reportConfiguration42 = new org.apache.rat.ReportConfiguration(log41);
        org.apache.rat.report.claim.ClaimStatistic claimStatistic43 = org.apache.rat.Reporter.report(reportConfiguration42);
        org.apache.rat.license.LicenseSetFactory.LicenseFilter licenseFilter44 = org.apache.rat.license.LicenseSetFactory.LicenseFilter.all;
        org.apache.rat.Reporter.listLicenses(reportConfiguration42, licenseFilter44);
        org.apache.rat.Reporter.listLicenses(reportConfiguration35, licenseFilter44);
        org.apache.rat.utils.Log log47 = null;
        org.apache.rat.ReportConfiguration reportConfiguration48 = new org.apache.rat.ReportConfiguration(log47);
        java.io.FilenameFilter filenameFilter49 = reportConfiguration48.getInputFileFilter();
        org.apache.rat.license.LicenseSetFactory.LicenseFilter licenseFilter50 = org.apache.rat.license.LicenseSetFactory.LicenseFilter.all;
        java.util.SortedSet<org.apache.rat.license.ILicense> iLicenseSet51 = reportConfiguration48.getLicenses(licenseFilter50);
        org.apache.rat.config.AddLicenseHeaders addLicenseHeaders52 = org.apache.rat.config.AddLicenseHeaders.FALSE;
        reportConfiguration48.setAddLicenseHeaders(addLicenseHeaders52);
        org.apache.rat.utils.Log log54 = null;
        org.apache.rat.ReportConfiguration reportConfiguration55 = new org.apache.rat.ReportConfiguration(log54);
        org.apache.rat.report.claim.ClaimStatistic claimStatistic56 = org.apache.rat.Reporter.report(reportConfiguration55);
        org.apache.rat.license.LicenseSetFactory.LicenseFilter licenseFilter57 = org.apache.rat.license.LicenseSetFactory.LicenseFilter.all;
        org.apache.rat.Reporter.listLicenses(reportConfiguration55, licenseFilter57);
        org.apache.rat.Reporter.listLicenses(reportConfiguration48, licenseFilter57);
        org.apache.rat.Reporter.listLicenses(reportConfiguration35, licenseFilter57);
        org.apache.rat.utils.Log log61 = null;
        org.apache.rat.ReportConfiguration reportConfiguration62 = new org.apache.rat.ReportConfiguration(log61);
        org.apache.commons.io.function.IOSupplier<java.io.OutputStream> outputStreamIOSupplier63 = reportConfiguration62.getOutput();
        reportConfiguration35.setOut(outputStreamIOSupplier63);
        org.apache.rat.utils.Log log65 = null;
        org.apache.rat.ReportConfiguration reportConfiguration66 = new org.apache.rat.ReportConfiguration(log65);
        org.apache.rat.report.claim.ClaimStatistic claimStatistic67 = org.apache.rat.Reporter.report(reportConfiguration66);
        org.apache.rat.utils.Log log68 = null;
        org.apache.rat.ReportConfiguration reportConfiguration69 = new org.apache.rat.ReportConfiguration(log68);
        org.apache.rat.report.claim.ClaimStatistic claimStatistic70 = org.apache.rat.Reporter.report(reportConfiguration69);
        org.apache.rat.utils.ReportingSet.Options options71 = org.apache.rat.utils.ReportingSet.Options.OVERWRITE;
        reportConfiguration69.licenseDuplicateOption(options71);
        reportConfiguration66.familyDuplicateOption(options71);
        reportConfiguration35.licenseDuplicateOption(options71);
        reportConfiguration35.addApprovedLicenseCategory("W3C Document Copyright");
        org.apache.rat.utils.Log log77 = null;
        org.apache.rat.ReportConfiguration reportConfiguration78 = new org.apache.rat.ReportConfiguration(log77);
        reportConfiguration78.addApprovedLicenseCategory(".cvsignore");
        org.apache.rat.utils.Log.Level level81 = org.apache.rat.utils.Log.Level.ERROR;
        reportConfiguration78.logLicenseCollisions(level81);
        reportConfiguration35.logLicenseCollisions(level81);
        defaultLog26.log(level81, "GNU General Public License, version 1");
        org.apache.rat.utils.ReportingSet<java.lang.String> strSet86 = strSet6.setLog((org.apache.rat.utils.Log) defaultLog26);
        org.apache.rat.utils.ReportingSet<java.lang.String> strSet88 = strSet6.tailSet("Copyright Builder: s:null e:W3C Software Copyright o:null");
        java.util.function.Function<java.lang.String, java.lang.String> strFunction89 = null;
        org.apache.rat.utils.ReportingSet<java.lang.String> strSet90 = strSet6.setMsgFormat(strFunction89);
        org.apache.rat.utils.ReportingSet<java.lang.String> strSet93 = strSet90.subSet("8f82a952-5bfd-446b-ac79-15beef5b3f17", "Datum [ name ='http://org/apache/rat/meta-data#FileCategory',value ='archive ']");
        org.apache.rat.utils.ReportingSet.Options options94 = null;
        org.apache.rat.utils.ReportingSet<java.lang.String> strSet95 = strSet93.setDuplicateOption(options94);
        // The following exception was thrown during execution in test generation
        try {
            org.apache.rat.utils.ReportingSet<java.lang.String> strSet97 = strSet95.headSet("RegexBuilder: f5f3fb9b-540a-43ef-a018-8ce5779e23f4");
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: toKey out of range");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(strArray5);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + true + "'", boolean7 == true);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + true + "'", boolean9 == true);
        org.junit.Assert.assertNotNull(strItor10);
        org.junit.Assert.assertNotNull(objArray11);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray11), "[AllBuilder:, Datum [ name ='http://org/apache/rat/meta-data#LicenseFamilyCategory',value ='GPL1  '], MANIFEST.MF, The MIT License, http://org/apache/rat/meta-data#LicenseFamilyCategory, http://org/apache/rat/meta-data#LicenseFamilyName]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray11), "[AllBuilder:, Datum [ name ='http://org/apache/rat/meta-data#LicenseFamilyCategory',value ='GPL1  '], MANIFEST.MF, The MIT License, http://org/apache/rat/meta-data#LicenseFamilyCategory, http://org/apache/rat/meta-data#LicenseFamilyName]");
        org.junit.Assert.assertNotNull(strArray17);
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + true + "'", boolean19 == true);
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + true + "'", boolean21 == true);
        org.junit.Assert.assertNotNull(iLicenseFamilySet22);
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + false + "'", boolean23 == false);
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + true + "'", boolean24 == true);
        org.junit.Assert.assertNotNull(strSpliterator25);
        org.junit.Assert.assertNotNull(defaultLog26);
        org.junit.Assert.assertTrue("'" + level31 + "' != '" + org.apache.rat.utils.Log.Level.ERROR + "'", level31.equals(org.apache.rat.utils.Log.Level.ERROR));
        org.junit.Assert.assertNull(filenameFilter36);
        org.junit.Assert.assertTrue("'" + licenseFilter37 + "' != '" + org.apache.rat.license.LicenseSetFactory.LicenseFilter.all + "'", licenseFilter37.equals(org.apache.rat.license.LicenseSetFactory.LicenseFilter.all));
        org.junit.Assert.assertNotNull(iLicenseSet38);
        org.junit.Assert.assertTrue("'" + addLicenseHeaders39 + "' != '" + org.apache.rat.config.AddLicenseHeaders.FALSE + "'", addLicenseHeaders39.equals(org.apache.rat.config.AddLicenseHeaders.FALSE));
        org.junit.Assert.assertNull(claimStatistic43);
        org.junit.Assert.assertTrue("'" + licenseFilter44 + "' != '" + org.apache.rat.license.LicenseSetFactory.LicenseFilter.all + "'", licenseFilter44.equals(org.apache.rat.license.LicenseSetFactory.LicenseFilter.all));
        org.junit.Assert.assertNull(filenameFilter49);
        org.junit.Assert.assertTrue("'" + licenseFilter50 + "' != '" + org.apache.rat.license.LicenseSetFactory.LicenseFilter.all + "'", licenseFilter50.equals(org.apache.rat.license.LicenseSetFactory.LicenseFilter.all));
        org.junit.Assert.assertNotNull(iLicenseSet51);
        org.junit.Assert.assertTrue("'" + addLicenseHeaders52 + "' != '" + org.apache.rat.config.AddLicenseHeaders.FALSE + "'", addLicenseHeaders52.equals(org.apache.rat.config.AddLicenseHeaders.FALSE));
        org.junit.Assert.assertNull(claimStatistic56);
        org.junit.Assert.assertTrue("'" + licenseFilter57 + "' != '" + org.apache.rat.license.LicenseSetFactory.LicenseFilter.all + "'", licenseFilter57.equals(org.apache.rat.license.LicenseSetFactory.LicenseFilter.all));
        org.junit.Assert.assertNotNull(outputStreamIOSupplier63);
        org.junit.Assert.assertNull(claimStatistic67);
        org.junit.Assert.assertNull(claimStatistic70);
        org.junit.Assert.assertTrue("'" + options71 + "' != '" + org.apache.rat.utils.ReportingSet.Options.OVERWRITE + "'", options71.equals(org.apache.rat.utils.ReportingSet.Options.OVERWRITE));
        org.junit.Assert.assertTrue("'" + level81 + "' != '" + org.apache.rat.utils.Log.Level.ERROR + "'", level81.equals(org.apache.rat.utils.Log.Level.ERROR));
        org.junit.Assert.assertNotNull(strSet86);
        org.junit.Assert.assertNotNull(strSet88);
        org.junit.Assert.assertNotNull(strSet90);
        org.junit.Assert.assertNotNull(strSet93);
        org.junit.Assert.assertNotNull(strSet95);
    }

    @Test
    public void test14919() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest29.test14919");
        org.apache.rat.utils.Log log0 = null;
        org.apache.rat.ReportConfiguration reportConfiguration1 = new org.apache.rat.ReportConfiguration(log0);
        java.io.FilenameFilter filenameFilter2 = reportConfiguration1.getInputFileFilter();
        org.apache.rat.license.LicenseSetFactory.LicenseFilter licenseFilter3 = org.apache.rat.license.LicenseSetFactory.LicenseFilter.all;
        java.util.SortedSet<org.apache.rat.license.ILicense> iLicenseSet4 = reportConfiguration1.getLicenses(licenseFilter3);
        org.apache.rat.license.ILicenseFamily iLicenseFamily5 = null;
        reportConfiguration1.addFamily(iLicenseFamily5);
        org.apache.commons.io.filefilter.IOFileFilter iOFileFilter7 = reportConfiguration1.getDirectoryFilter();
        org.apache.rat.utils.Log log8 = null;
        org.apache.rat.ReportConfiguration reportConfiguration9 = new org.apache.rat.ReportConfiguration(log8);
        java.io.FilenameFilter filenameFilter10 = reportConfiguration9.getInputFileFilter();
        org.apache.rat.license.LicenseSetFactory.LicenseFilter licenseFilter11 = org.apache.rat.license.LicenseSetFactory.LicenseFilter.all;
        java.util.SortedSet<org.apache.rat.license.ILicense> iLicenseSet12 = reportConfiguration9.getLicenses(licenseFilter11);
        org.apache.rat.config.AddLicenseHeaders addLicenseHeaders13 = org.apache.rat.config.AddLicenseHeaders.FALSE;
        reportConfiguration9.setAddLicenseHeaders(addLicenseHeaders13);
        org.apache.rat.utils.Log log15 = null;
        org.apache.rat.ReportConfiguration reportConfiguration16 = new org.apache.rat.ReportConfiguration(log15);
        org.apache.rat.report.claim.ClaimStatistic claimStatistic17 = org.apache.rat.Reporter.report(reportConfiguration16);
        org.apache.rat.license.LicenseSetFactory.LicenseFilter licenseFilter18 = org.apache.rat.license.LicenseSetFactory.LicenseFilter.all;
        org.apache.rat.Reporter.listLicenses(reportConfiguration16, licenseFilter18);
        org.apache.rat.Reporter.listLicenses(reportConfiguration9, licenseFilter18);
        org.apache.rat.utils.Log log21 = null;
        org.apache.rat.ReportConfiguration reportConfiguration22 = new org.apache.rat.ReportConfiguration(log21);
        java.io.FilenameFilter filenameFilter23 = reportConfiguration22.getInputFileFilter();
        org.apache.rat.license.LicenseSetFactory.LicenseFilter licenseFilter24 = org.apache.rat.license.LicenseSetFactory.LicenseFilter.all;
        java.util.SortedSet<org.apache.rat.license.ILicense> iLicenseSet25 = reportConfiguration22.getLicenses(licenseFilter24);
        org.apache.rat.config.AddLicenseHeaders addLicenseHeaders26 = org.apache.rat.config.AddLicenseHeaders.FALSE;
        reportConfiguration22.setAddLicenseHeaders(addLicenseHeaders26);
        org.apache.rat.utils.Log log28 = null;
        org.apache.rat.ReportConfiguration reportConfiguration29 = new org.apache.rat.ReportConfiguration(log28);
        org.apache.rat.report.claim.ClaimStatistic claimStatistic30 = org.apache.rat.Reporter.report(reportConfiguration29);
        org.apache.rat.license.LicenseSetFactory.LicenseFilter licenseFilter31 = org.apache.rat.license.LicenseSetFactory.LicenseFilter.all;
        org.apache.rat.Reporter.listLicenses(reportConfiguration29, licenseFilter31);
        org.apache.rat.Reporter.listLicenses(reportConfiguration22, licenseFilter31);
        org.apache.rat.Reporter.listLicenses(reportConfiguration9, licenseFilter31);
        org.apache.rat.utils.Log log35 = null;
        org.apache.rat.ReportConfiguration reportConfiguration36 = new org.apache.rat.ReportConfiguration(log35);
        org.apache.commons.io.function.IOSupplier<java.io.OutputStream> outputStreamIOSupplier37 = reportConfiguration36.getOutput();
        reportConfiguration9.setOut(outputStreamIOSupplier37);
        org.apache.rat.utils.Log.Level level39 = org.apache.rat.utils.Log.Level.WARN;
        reportConfiguration9.logLicenseCollisions(level39);
        org.apache.commons.io.filefilter.IOFileFilter iOFileFilter41 = reportConfiguration9.getDirectoryFilter();
        java.nio.file.Path path42 = null;
        boolean boolean43 = iOFileFilter41.matches(path42);
        java.nio.file.Path path44 = null;
        java.nio.file.attribute.BasicFileAttributes basicFileAttributes45 = null;
        java.nio.file.FileVisitResult fileVisitResult46 = iOFileFilter41.accept(path44, basicFileAttributes45);
        org.apache.commons.io.filefilter.IOFileFilter iOFileFilter47 = iOFileFilter7.or(iOFileFilter41);
        org.apache.commons.io.filefilter.IOFileFilter iOFileFilter48 = iOFileFilter41.negate();
        org.apache.commons.io.filefilter.IOFileFilter iOFileFilter49 = iOFileFilter41.negate();
        org.apache.commons.io.filefilter.IOFileFilter iOFileFilter50 = iOFileFilter49.negate();
        java.nio.file.Path path51 = null;
        java.nio.file.attribute.BasicFileAttributes basicFileAttributes52 = null;
        java.nio.file.FileVisitResult fileVisitResult53 = iOFileFilter49.accept(path51, basicFileAttributes52);
        org.apache.commons.io.filefilter.IOFileFilter iOFileFilter54 = iOFileFilter49.negate();
        org.junit.Assert.assertNull(filenameFilter2);
        org.junit.Assert.assertTrue("'" + licenseFilter3 + "' != '" + org.apache.rat.license.LicenseSetFactory.LicenseFilter.all + "'", licenseFilter3.equals(org.apache.rat.license.LicenseSetFactory.LicenseFilter.all));
        org.junit.Assert.assertNotNull(iLicenseSet4);
        org.junit.Assert.assertNotNull(iOFileFilter7);
        org.junit.Assert.assertNull(filenameFilter10);
        org.junit.Assert.assertTrue("'" + licenseFilter11 + "' != '" + org.apache.rat.license.LicenseSetFactory.LicenseFilter.all + "'", licenseFilter11.equals(org.apache.rat.license.LicenseSetFactory.LicenseFilter.all));
        org.junit.Assert.assertNotNull(iLicenseSet12);
        org.junit.Assert.assertTrue("'" + addLicenseHeaders13 + "' != '" + org.apache.rat.config.AddLicenseHeaders.FALSE + "'", addLicenseHeaders13.equals(org.apache.rat.config.AddLicenseHeaders.FALSE));
        org.junit.Assert.assertNull(claimStatistic17);
        org.junit.Assert.assertTrue("'" + licenseFilter18 + "' != '" + org.apache.rat.license.LicenseSetFactory.LicenseFilter.all + "'", licenseFilter18.equals(org.apache.rat.license.LicenseSetFactory.LicenseFilter.all));
        org.junit.Assert.assertNull(filenameFilter23);
        org.junit.Assert.assertTrue("'" + licenseFilter24 + "' != '" + org.apache.rat.license.LicenseSetFactory.LicenseFilter.all + "'", licenseFilter24.equals(org.apache.rat.license.LicenseSetFactory.LicenseFilter.all));
        org.junit.Assert.assertNotNull(iLicenseSet25);
        org.junit.Assert.assertTrue("'" + addLicenseHeaders26 + "' != '" + org.apache.rat.config.AddLicenseHeaders.FALSE + "'", addLicenseHeaders26.equals(org.apache.rat.config.AddLicenseHeaders.FALSE));
        org.junit.Assert.assertNull(claimStatistic30);
        org.junit.Assert.assertTrue("'" + licenseFilter31 + "' != '" + org.apache.rat.license.LicenseSetFactory.LicenseFilter.all + "'", licenseFilter31.equals(org.apache.rat.license.LicenseSetFactory.LicenseFilter.all));
        org.junit.Assert.assertNotNull(outputStreamIOSupplier37);
        org.junit.Assert.assertTrue("'" + level39 + "' != '" + org.apache.rat.utils.Log.Level.WARN + "'", level39.equals(org.apache.rat.utils.Log.Level.WARN));
        org.junit.Assert.assertNotNull(iOFileFilter41);
        org.junit.Assert.assertTrue("'" + boolean43 + "' != '" + false + "'", boolean43 == false);
        org.junit.Assert.assertTrue("'" + fileVisitResult46 + "' != '" + java.nio.file.FileVisitResult.TERMINATE + "'", fileVisitResult46.equals(java.nio.file.FileVisitResult.TERMINATE));
        org.junit.Assert.assertNotNull(iOFileFilter47);
        org.junit.Assert.assertNotNull(iOFileFilter48);
        org.junit.Assert.assertNotNull(iOFileFilter49);
        org.junit.Assert.assertNotNull(iOFileFilter50);
        org.junit.Assert.assertTrue("'" + fileVisitResult53 + "' != '" + java.nio.file.FileVisitResult.CONTINUE + "'", fileVisitResult53.equals(java.nio.file.FileVisitResult.CONTINUE));
        org.junit.Assert.assertNotNull(iOFileFilter54);
    }

    @Test
    public void test14920() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest29.test14920");
        org.apache.rat.config.SourceCodeManagementSystems sourceCodeManagementSystems0 = org.apache.rat.config.SourceCodeManagementSystems.CVS;
        java.util.List<java.lang.String> strList1 = sourceCodeManagementSystems0.getExclusions();
        java.lang.String str2 = sourceCodeManagementSystems0.getIgnoreFile();
        java.lang.String str3 = sourceCodeManagementSystems0.getIgnoreFile();
        java.lang.String str4 = sourceCodeManagementSystems0.getIgnoreFile();
        java.lang.String str5 = sourceCodeManagementSystems0.getIgnoreFile();
        org.junit.Assert.assertTrue("'" + sourceCodeManagementSystems0 + "' != '" + org.apache.rat.config.SourceCodeManagementSystems.CVS + "'", sourceCodeManagementSystems0.equals(org.apache.rat.config.SourceCodeManagementSystems.CVS));
        org.junit.Assert.assertNotNull(strList1);
        org.junit.Assert.assertEquals("'" + str2 + "' != '" + ".cvsignore" + "'", str2, ".cvsignore");
        org.junit.Assert.assertEquals("'" + str3 + "' != '" + ".cvsignore" + "'", str3, ".cvsignore");
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + ".cvsignore" + "'", str4, ".cvsignore");
        org.junit.Assert.assertEquals("'" + str5 + "' != '" + ".cvsignore" + "'", str5, ".cvsignore");
    }

    @Test
    public void test14921() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest29.test14921");
        java.io.Writer writer0 = null;
        org.apache.rat.report.xml.writer.impl.base.XmlWriter xmlWriter1 = new org.apache.rat.report.xml.writer.impl.base.XmlWriter(writer0);
        org.apache.rat.report.claim.impl.xml.SimpleXmlClaimReporter simpleXmlClaimReporter2 = new org.apache.rat.report.claim.impl.xml.SimpleXmlClaimReporter((org.apache.rat.report.xml.writer.IXmlWriter) xmlWriter1);
        org.apache.rat.report.claim.impl.xml.SimpleXmlClaimReporter simpleXmlClaimReporter3 = new org.apache.rat.report.claim.impl.xml.SimpleXmlClaimReporter((org.apache.rat.report.xml.writer.IXmlWriter) xmlWriter1);
        org.apache.rat.report.claim.impl.xml.SimpleXmlClaimReporter simpleXmlClaimReporter4 = new org.apache.rat.report.claim.impl.xml.SimpleXmlClaimReporter((org.apache.rat.report.xml.writer.IXmlWriter) xmlWriter1);
        org.apache.rat.report.claim.impl.xml.SimpleXmlClaimReporter simpleXmlClaimReporter5 = new org.apache.rat.report.claim.impl.xml.SimpleXmlClaimReporter((org.apache.rat.report.xml.writer.IXmlWriter) xmlWriter1);
        org.apache.rat.report.claim.impl.xml.SimpleXmlClaimReporter simpleXmlClaimReporter6 = new org.apache.rat.report.claim.impl.xml.SimpleXmlClaimReporter((org.apache.rat.report.xml.writer.IXmlWriter) xmlWriter1);
        org.apache.rat.report.claim.impl.xml.SimpleXmlClaimReporter simpleXmlClaimReporter7 = new org.apache.rat.report.claim.impl.xml.SimpleXmlClaimReporter((org.apache.rat.report.xml.writer.IXmlWriter) xmlWriter1);
        org.apache.rat.report.claim.impl.xml.SimpleXmlClaimReporter simpleXmlClaimReporter8 = new org.apache.rat.report.claim.impl.xml.SimpleXmlClaimReporter((org.apache.rat.report.xml.writer.IXmlWriter) xmlWriter1);
        org.apache.rat.report.claim.impl.xml.SimpleXmlClaimReporter simpleXmlClaimReporter9 = new org.apache.rat.report.claim.impl.xml.SimpleXmlClaimReporter((org.apache.rat.report.xml.writer.IXmlWriter) xmlWriter1);
        org.apache.rat.report.claim.impl.xml.SimpleXmlClaimReporter simpleXmlClaimReporter10 = new org.apache.rat.report.claim.impl.xml.SimpleXmlClaimReporter((org.apache.rat.report.xml.writer.IXmlWriter) xmlWriter1);
        org.apache.rat.report.claim.impl.xml.SimpleXmlClaimReporter simpleXmlClaimReporter11 = new org.apache.rat.report.claim.impl.xml.SimpleXmlClaimReporter((org.apache.rat.report.xml.writer.IXmlWriter) xmlWriter1);
        org.apache.rat.report.claim.impl.xml.SimpleXmlClaimReporter simpleXmlClaimReporter12 = new org.apache.rat.report.claim.impl.xml.SimpleXmlClaimReporter((org.apache.rat.report.xml.writer.IXmlWriter) xmlWriter1);
        org.apache.rat.report.claim.impl.xml.SimpleXmlClaimReporter simpleXmlClaimReporter13 = new org.apache.rat.report.claim.impl.xml.SimpleXmlClaimReporter((org.apache.rat.report.xml.writer.IXmlWriter) xmlWriter1);
        org.apache.rat.report.claim.impl.xml.SimpleXmlClaimReporter simpleXmlClaimReporter14 = new org.apache.rat.report.claim.impl.xml.SimpleXmlClaimReporter((org.apache.rat.report.xml.writer.IXmlWriter) xmlWriter1);
        org.apache.rat.report.claim.impl.xml.SimpleXmlClaimReporter simpleXmlClaimReporter15 = new org.apache.rat.report.claim.impl.xml.SimpleXmlClaimReporter((org.apache.rat.report.xml.writer.IXmlWriter) xmlWriter1);
        org.apache.rat.report.claim.impl.xml.SimpleXmlClaimReporter simpleXmlClaimReporter16 = new org.apache.rat.report.claim.impl.xml.SimpleXmlClaimReporter((org.apache.rat.report.xml.writer.IXmlWriter) xmlWriter1);
        org.apache.rat.report.claim.impl.xml.SimpleXmlClaimReporter simpleXmlClaimReporter17 = new org.apache.rat.report.claim.impl.xml.SimpleXmlClaimReporter((org.apache.rat.report.xml.writer.IXmlWriter) xmlWriter1);
        org.apache.rat.report.claim.impl.xml.SimpleXmlClaimReporter simpleXmlClaimReporter18 = new org.apache.rat.report.claim.impl.xml.SimpleXmlClaimReporter((org.apache.rat.report.xml.writer.IXmlWriter) xmlWriter1);
        // The following exception was thrown during execution in test generation
        try {
            org.apache.rat.report.xml.writer.IXmlWriter iXmlWriter19 = xmlWriter1.closeDocument();
            org.junit.Assert.fail("Expected exception of type org.apache.rat.report.xml.writer.OperationNotAllowedException; message: Close called before an element has been opened.");
        } catch (org.apache.rat.report.xml.writer.OperationNotAllowedException e) {
            // Expected exception.
        }
    }

    @Test
    public void test14922() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest29.test14922");
        org.apache.rat.utils.Log log0 = null;
        org.apache.rat.ReportConfiguration reportConfiguration1 = new org.apache.rat.ReportConfiguration(log0);
        org.apache.rat.report.claim.ClaimStatistic claimStatistic2 = org.apache.rat.Reporter.report(reportConfiguration1);
        org.apache.rat.license.ILicense[] iLicenseArray3 = new org.apache.rat.license.ILicense[] {};
        java.util.TreeSet<org.apache.rat.license.ILicense> iLicenseSet4 = new java.util.TreeSet<org.apache.rat.license.ILicense>();
        boolean boolean5 = java.util.Collections.addAll((java.util.Collection<org.apache.rat.license.ILicense>) iLicenseSet4, iLicenseArray3);
        java.lang.String[] strArray18 = new java.lang.String[] { "GPL2 ", "GPL1 ", "notice", "http://org/apache/rat/meta-data#LicenseFamilyName", "notice", "GPL2 ", "http://org/apache/rat/meta-data#LicenseFamilyName", "", "GPL2 ", "", "GPL1 ", "hi!" };
        java.util.ArrayList<java.lang.String> strList19 = new java.util.ArrayList<java.lang.String>();
        boolean boolean20 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strList19, strArray18);
        org.apache.rat.license.LicenseSetFactory licenseSetFactory21 = new org.apache.rat.license.LicenseSetFactory((java.util.SortedSet<org.apache.rat.license.ILicense>) iLicenseSet4, (java.util.Collection<java.lang.String>) strList19);
        org.apache.rat.utils.Log log22 = null;
        org.apache.rat.ReportConfiguration reportConfiguration23 = new org.apache.rat.ReportConfiguration(log22);
        java.io.FilenameFilter filenameFilter24 = reportConfiguration23.getInputFileFilter();
        org.apache.rat.license.LicenseSetFactory.LicenseFilter licenseFilter25 = org.apache.rat.license.LicenseSetFactory.LicenseFilter.all;
        java.util.SortedSet<org.apache.rat.license.ILicense> iLicenseSet26 = reportConfiguration23.getLicenses(licenseFilter25);
        org.apache.rat.config.AddLicenseHeaders addLicenseHeaders27 = org.apache.rat.config.AddLicenseHeaders.FALSE;
        reportConfiguration23.setAddLicenseHeaders(addLicenseHeaders27);
        org.apache.rat.utils.Log log29 = null;
        org.apache.rat.ReportConfiguration reportConfiguration30 = new org.apache.rat.ReportConfiguration(log29);
        org.apache.rat.report.claim.ClaimStatistic claimStatistic31 = org.apache.rat.Reporter.report(reportConfiguration30);
        org.apache.rat.license.LicenseSetFactory.LicenseFilter licenseFilter32 = org.apache.rat.license.LicenseSetFactory.LicenseFilter.all;
        org.apache.rat.Reporter.listLicenses(reportConfiguration30, licenseFilter32);
        org.apache.rat.Reporter.listLicenses(reportConfiguration23, licenseFilter32);
        org.apache.rat.utils.Log log35 = null;
        org.apache.rat.ReportConfiguration reportConfiguration36 = new org.apache.rat.ReportConfiguration(log35);
        java.io.FilenameFilter filenameFilter37 = reportConfiguration36.getInputFileFilter();
        org.apache.rat.license.LicenseSetFactory.LicenseFilter licenseFilter38 = org.apache.rat.license.LicenseSetFactory.LicenseFilter.all;
        java.util.SortedSet<org.apache.rat.license.ILicense> iLicenseSet39 = reportConfiguration36.getLicenses(licenseFilter38);
        org.apache.rat.config.AddLicenseHeaders addLicenseHeaders40 = org.apache.rat.config.AddLicenseHeaders.FALSE;
        reportConfiguration36.setAddLicenseHeaders(addLicenseHeaders40);
        org.apache.rat.utils.Log log42 = null;
        org.apache.rat.ReportConfiguration reportConfiguration43 = new org.apache.rat.ReportConfiguration(log42);
        org.apache.rat.report.claim.ClaimStatistic claimStatistic44 = org.apache.rat.Reporter.report(reportConfiguration43);
        org.apache.rat.license.LicenseSetFactory.LicenseFilter licenseFilter45 = org.apache.rat.license.LicenseSetFactory.LicenseFilter.all;
        org.apache.rat.Reporter.listLicenses(reportConfiguration43, licenseFilter45);
        org.apache.rat.Reporter.listLicenses(reportConfiguration36, licenseFilter45);
        org.apache.rat.Reporter.listLicenses(reportConfiguration23, licenseFilter45);
        java.util.SortedSet<org.apache.rat.license.ILicense> iLicenseSet49 = licenseSetFactory21.getLicenses(licenseFilter45);
        reportConfiguration1.addLicensesIfNotPresent((java.util.Collection<org.apache.rat.license.ILicense>) iLicenseSet49);
        org.apache.rat.utils.Log log51 = reportConfiguration1.getLog();
        reportConfiguration1.setCopyrightMessage("http://org/apache/rat/meta-data#FileCategory");
        reportConfiguration1.removeApprovedLicenseCategory("Copyright Builder: s:6481fb19-38f0-43f5-ab95-caf84a069ee1 e:null o:null");
        org.apache.rat.config.AddLicenseHeaders addLicenseHeaders56 = org.apache.rat.config.AddLicenseHeaders.FALSE;
        reportConfiguration1.setAddLicenseHeaders(addLicenseHeaders56);
        reportConfiguration1.removeApprovedLicenseCategory("The Telemanagement Forum License");
        org.apache.rat.license.ILicenseFamilyBuilder iLicenseFamilyBuilder60 = new org.apache.rat.license.ILicenseFamilyBuilder();
        java.lang.String str61 = iLicenseFamilyBuilder60.getCategory();
        org.apache.rat.license.ILicenseFamily.Builder builder63 = iLicenseFamilyBuilder60.setLicenseFamilyCategory("AL   ");
        java.lang.String str64 = iLicenseFamilyBuilder60.getCategory();
        org.apache.rat.license.ILicenseFamily.Builder builder66 = iLicenseFamilyBuilder60.setLicenseFamilyName("535b5d01-f553-45e5-bb29-a646e4b8b66f");
        reportConfiguration1.addFamily(builder66);
        org.apache.rat.license.ILicense.Builder builder68 = org.apache.rat.license.ILicense.builder();
        org.apache.rat.license.ILicense.Builder builder70 = builder68.setLicenseFamilyCategory("W3CD ");
        org.apache.rat.license.ILicense.Builder builder72 = builder68.setId("RegexBuilder: null");
        org.apache.rat.license.ILicense.Builder builder74 = builder72.setId("4fcae176-e574-46ed-b9e4-dea2e2f3b458");
        org.apache.rat.configuration.builders.RegexBuilder regexBuilder75 = new org.apache.rat.configuration.builders.RegexBuilder();
        java.lang.String str76 = regexBuilder75.toString();
        java.lang.String str77 = regexBuilder75.toString();
        org.apache.rat.configuration.builders.RegexBuilder regexBuilder79 = regexBuilder75.setExpr("89662180-a89f-497b-9301-227d494d2bae");
        java.lang.String str80 = regexBuilder79.toString();
        org.apache.rat.license.ILicense.Builder builder81 = builder74.setMatcher((org.apache.rat.analysis.IHeaderMatcher.Builder) regexBuilder79);
        // The following exception was thrown during execution in test generation
        try {
            org.apache.rat.license.ILicense iLicense82 = reportConfiguration1.addLicense(builder74);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: License family W3CD  not found.");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNull(claimStatistic2);
        org.junit.Assert.assertNotNull(iLicenseArray3);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertNotNull(strArray18);
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + true + "'", boolean20 == true);
        org.junit.Assert.assertNull(filenameFilter24);
        org.junit.Assert.assertTrue("'" + licenseFilter25 + "' != '" + org.apache.rat.license.LicenseSetFactory.LicenseFilter.all + "'", licenseFilter25.equals(org.apache.rat.license.LicenseSetFactory.LicenseFilter.all));
        org.junit.Assert.assertNotNull(iLicenseSet26);
        org.junit.Assert.assertTrue("'" + addLicenseHeaders27 + "' != '" + org.apache.rat.config.AddLicenseHeaders.FALSE + "'", addLicenseHeaders27.equals(org.apache.rat.config.AddLicenseHeaders.FALSE));
        org.junit.Assert.assertNull(claimStatistic31);
        org.junit.Assert.assertTrue("'" + licenseFilter32 + "' != '" + org.apache.rat.license.LicenseSetFactory.LicenseFilter.all + "'", licenseFilter32.equals(org.apache.rat.license.LicenseSetFactory.LicenseFilter.all));
        org.junit.Assert.assertNull(filenameFilter37);
        org.junit.Assert.assertTrue("'" + licenseFilter38 + "' != '" + org.apache.rat.license.LicenseSetFactory.LicenseFilter.all + "'", licenseFilter38.equals(org.apache.rat.license.LicenseSetFactory.LicenseFilter.all));
        org.junit.Assert.assertNotNull(iLicenseSet39);
        org.junit.Assert.assertTrue("'" + addLicenseHeaders40 + "' != '" + org.apache.rat.config.AddLicenseHeaders.FALSE + "'", addLicenseHeaders40.equals(org.apache.rat.config.AddLicenseHeaders.FALSE));
        org.junit.Assert.assertNull(claimStatistic44);
        org.junit.Assert.assertTrue("'" + licenseFilter45 + "' != '" + org.apache.rat.license.LicenseSetFactory.LicenseFilter.all + "'", licenseFilter45.equals(org.apache.rat.license.LicenseSetFactory.LicenseFilter.all));
        org.junit.Assert.assertNotNull(iLicenseSet49);
        org.junit.Assert.assertNull(log51);
        org.junit.Assert.assertTrue("'" + addLicenseHeaders56 + "' != '" + org.apache.rat.config.AddLicenseHeaders.FALSE + "'", addLicenseHeaders56.equals(org.apache.rat.config.AddLicenseHeaders.FALSE));
        org.junit.Assert.assertNull(str61);
        org.junit.Assert.assertNotNull(builder63);
        org.junit.Assert.assertEquals("'" + str64 + "' != '" + "AL   " + "'", str64, "AL   ");
        org.junit.Assert.assertNotNull(builder66);
        org.junit.Assert.assertNotNull(builder68);
        org.junit.Assert.assertNotNull(builder70);
        org.junit.Assert.assertNotNull(builder72);
        org.junit.Assert.assertNotNull(builder74);
        org.junit.Assert.assertEquals("'" + str76 + "' != '" + "RegexBuilder: null" + "'", str76, "RegexBuilder: null");
        org.junit.Assert.assertEquals("'" + str77 + "' != '" + "RegexBuilder: null" + "'", str77, "RegexBuilder: null");
        org.junit.Assert.assertNotNull(regexBuilder79);
        org.junit.Assert.assertEquals("'" + str80 + "' != '" + "RegexBuilder: 89662180-a89f-497b-9301-227d494d2bae" + "'", str80, "RegexBuilder: 89662180-a89f-497b-9301-227d494d2bae");
        org.junit.Assert.assertNotNull(builder81);
    }

    @Test
    public void test14923() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest29.test14923");
        org.apache.rat.license.SimpleLicenseFamily simpleLicenseFamily0 = new org.apache.rat.license.SimpleLicenseFamily();
        java.lang.String str1 = simpleLicenseFamily0.getFamilyName();
        java.lang.String str2 = simpleLicenseFamily0.getFamilyCategory();
        simpleLicenseFamily0.setFamilyCategory("11370891-c763-426b-9547-57e87d991d61");
        java.lang.String str5 = simpleLicenseFamily0.getFamilyName();
        org.junit.Assert.assertNull(str1);
        org.junit.Assert.assertNull(str2);
        org.junit.Assert.assertNull(str5);
    }

    @Test
    public void test14924() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest29.test14924");
        org.apache.rat.configuration.builders.TextBuilder textBuilder0 = new org.apache.rat.configuration.builders.TextBuilder();
        org.apache.rat.configuration.builders.TextBuilder textBuilder2 = textBuilder0.setText("true");
        org.apache.rat.configuration.builders.TextBuilder textBuilder4 = textBuilder2.setText("http://org/apache/rat/meta-data#HeaderSample");
        org.apache.rat.configuration.builders.TextBuilder textBuilder6 = textBuilder4.setText("COMMON DEVELOPMENT AND DISTRIBUTION LICENSE Version 1.0");
        org.apache.rat.analysis.IHeaderMatcher iHeaderMatcher7 = textBuilder6.build();
        java.lang.String str8 = textBuilder6.toString();
        boolean boolean9 = textBuilder6.hasId();
        org.junit.Assert.assertNotNull(textBuilder2);
        org.junit.Assert.assertNotNull(textBuilder4);
        org.junit.Assert.assertNotNull(textBuilder6);
        org.junit.Assert.assertNotNull(iHeaderMatcher7);
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "TextBuilder: COMMON DEVELOPMENT A..." + "'", str8, "TextBuilder: COMMON DEVELOPMENT A...");
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
    }

    @Test
    public void test14925() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest29.test14925");
        org.apache.rat.utils.Log log0 = null;
        org.apache.rat.ReportConfiguration reportConfiguration1 = new org.apache.rat.ReportConfiguration(log0);
        org.apache.rat.report.claim.ClaimStatistic claimStatistic2 = org.apache.rat.Reporter.report(reportConfiguration1);
        reportConfiguration1.addApprovedLicenseCategory("Copyright Builder: s:null e:null o:null");
        java.util.SortedSet<java.lang.String> strSet5 = reportConfiguration1.getApprovedLicenseCategories();
        java.io.FilenameFilter filenameFilter6 = reportConfiguration1.getInputFileFilter();
        org.apache.rat.utils.Log log7 = null;
        org.apache.rat.ReportConfiguration reportConfiguration8 = new org.apache.rat.ReportConfiguration(log7);
        org.apache.rat.report.claim.ClaimStatistic claimStatistic9 = org.apache.rat.Reporter.report(reportConfiguration8);
        org.apache.rat.utils.ReportingSet.Options options10 = org.apache.rat.utils.ReportingSet.Options.OVERWRITE;
        reportConfiguration8.licenseDuplicateOption(options10);
        java.util.SortedSet<org.apache.rat.license.ILicenseFamily> iLicenseFamilySet13 = org.apache.rat.license.LicenseFamilySetFactory.emptyLicenseFamilySet();
        org.apache.rat.license.ILicenseFamily iLicenseFamily14 = org.apache.rat.license.LicenseFamilySetFactory.search("http://org/apache/rat/meta-data", iLicenseFamilySet13);
        org.apache.rat.policy.DefaultPolicy defaultPolicy15 = new org.apache.rat.policy.DefaultPolicy((java.util.Collection<org.apache.rat.license.ILicenseFamily>) iLicenseFamilySet13);
        reportConfiguration8.addFamilies((java.util.Collection<org.apache.rat.license.ILicenseFamily>) iLicenseFamilySet13);
        org.apache.rat.utils.ReportingSet<java.lang.String> strSet17 = new org.apache.rat.utils.ReportingSet<java.lang.String>();
        java.lang.Object[] objArray18 = strSet17.toArray();
        org.apache.rat.license.LicenseFamilySetFactory licenseFamilySetFactory19 = new org.apache.rat.license.LicenseFamilySetFactory(iLicenseFamilySet13, (java.util.Collection<java.lang.String>) strSet17);
        reportConfiguration1.addApprovedLicenseCategories((java.util.Collection<java.lang.String>) strSet17);
        java.util.stream.Stream<java.lang.String> strStream21 = strSet17.parallelStream();
        // The following exception was thrown during execution in test generation
        try {
            java.lang.String str22 = strSet17.first();
            org.junit.Assert.fail("Expected exception of type java.util.NoSuchElementException; message: null");
        } catch (java.util.NoSuchElementException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNull(claimStatistic2);
        org.junit.Assert.assertNotNull(strSet5);
        org.junit.Assert.assertNull(filenameFilter6);
        org.junit.Assert.assertNull(claimStatistic9);
        org.junit.Assert.assertTrue("'" + options10 + "' != '" + org.apache.rat.utils.ReportingSet.Options.OVERWRITE + "'", options10.equals(org.apache.rat.utils.ReportingSet.Options.OVERWRITE));
        org.junit.Assert.assertNotNull(iLicenseFamilySet13);
        org.junit.Assert.assertNull(iLicenseFamily14);
        org.junit.Assert.assertNotNull(objArray18);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray18), "[]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray18), "[]");
        org.junit.Assert.assertNotNull(strStream21);
    }

    @Test
    public void test14926() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest29.test14926");
        org.apache.rat.analysis.matchers.SimpleTextMatcher simpleTextMatcher2 = new org.apache.rat.analysis.matchers.SimpleTextMatcher("", "f65b7401-dce0-4358-b870-cf848940a8e0");
        boolean boolean4 = simpleTextMatcher2.doMatch("3e0a465b-2466-4402-94d1-ee762655437c");
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
    }

    @Test
    public void test14927() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest29.test14927");
        org.apache.rat.analysis.matchers.FullTextMatcher fullTextMatcher2 = new org.apache.rat.analysis.matchers.FullTextMatcher("5b0daab8-75ce-482b-bcb3-4741d11fddf7", "00186AD8-9B49-4E79-B8F0-40326F09C054");
        org.apache.rat.analysis.IHeaderMatcher.State state3 = fullTextMatcher2.finalizeState();
        java.lang.String str4 = fullTextMatcher2.getId();
        org.junit.Assert.assertTrue("'" + state3 + "' != '" + org.apache.rat.analysis.IHeaderMatcher.State.f + "'", state3.equals(org.apache.rat.analysis.IHeaderMatcher.State.f));
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "5b0daab8-75ce-482b-bcb3-4741d11fddf7" + "'", str4, "5b0daab8-75ce-482b-bcb3-4741d11fddf7");
    }

    @Test
    public void test14928() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest29.test14928");
        org.apache.rat.configuration.builders.RegexBuilder regexBuilder0 = new org.apache.rat.configuration.builders.RegexBuilder();
        java.lang.String str1 = regexBuilder0.toString();
        org.apache.rat.configuration.builders.RegexBuilder regexBuilder3 = regexBuilder0.setExpr("http://org/apache/rat/meta-data#HeaderSample");
        org.apache.rat.configuration.builders.RegexBuilder regexBuilder5 = regexBuilder0.setExpr("JAVA");
        org.apache.rat.configuration.builders.RegexBuilder regexBuilder7 = regexBuilder5.setExpr("http://org/apache/rat/meta-data#LicenseFamilyName");
        org.apache.rat.analysis.IHeaderMatcher iHeaderMatcher8 = regexBuilder7.build();
        org.apache.rat.configuration.builders.RegexBuilder regexBuilder10 = regexBuilder7.setExpr("5cac4277-a886-42c4-94d4-c7dc76f867c4");
        org.junit.Assert.assertEquals("'" + str1 + "' != '" + "RegexBuilder: null" + "'", str1, "RegexBuilder: null");
        org.junit.Assert.assertNotNull(regexBuilder3);
        org.junit.Assert.assertNotNull(regexBuilder5);
        org.junit.Assert.assertNotNull(regexBuilder7);
        org.junit.Assert.assertNotNull(iHeaderMatcher8);
        org.junit.Assert.assertNotNull(regexBuilder10);
    }

    @Test
    public void test14929() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest29.test14929");
        org.apache.rat.license.ILicenseFamily[] iLicenseFamilyArray0 = new org.apache.rat.license.ILicenseFamily[] {};
        java.util.ArrayList<org.apache.rat.license.ILicenseFamily> iLicenseFamilyList1 = new java.util.ArrayList<org.apache.rat.license.ILicenseFamily>();
        boolean boolean2 = java.util.Collections.addAll((java.util.Collection<org.apache.rat.license.ILicenseFamily>) iLicenseFamilyList1, iLicenseFamilyArray0);
        org.apache.rat.policy.DefaultPolicy defaultPolicy3 = new org.apache.rat.policy.DefaultPolicy((java.util.Collection<org.apache.rat.license.ILicenseFamily>) iLicenseFamilyList1);
        java.util.SortedSet<org.apache.rat.license.ILicenseFamily> iLicenseFamilySet4 = defaultPolicy3.getApprovedLicenseNames();
        org.apache.rat.license.ILicense[] iLicenseArray5 = new org.apache.rat.license.ILicense[] {};
        java.util.TreeSet<org.apache.rat.license.ILicense> iLicenseSet6 = new java.util.TreeSet<org.apache.rat.license.ILicense>();
        boolean boolean7 = java.util.Collections.addAll((java.util.Collection<org.apache.rat.license.ILicense>) iLicenseSet6, iLicenseArray5);
        java.lang.String[] strArray20 = new java.lang.String[] { "GPL2 ", "GPL1 ", "notice", "http://org/apache/rat/meta-data#LicenseFamilyName", "notice", "GPL2 ", "http://org/apache/rat/meta-data#LicenseFamilyName", "", "GPL2 ", "", "GPL1 ", "hi!" };
        java.util.ArrayList<java.lang.String> strList21 = new java.util.ArrayList<java.lang.String>();
        boolean boolean22 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strList21, strArray20);
        org.apache.rat.license.LicenseSetFactory licenseSetFactory23 = new org.apache.rat.license.LicenseSetFactory((java.util.SortedSet<org.apache.rat.license.ILicense>) iLicenseSet6, (java.util.Collection<java.lang.String>) strList21);
        org.apache.rat.license.LicenseSetFactory.LicenseFilter licenseFilter24 = org.apache.rat.license.LicenseSetFactory.LicenseFilter.all;
        java.util.SortedSet<org.apache.rat.license.ILicenseFamily> iLicenseFamilySet25 = licenseSetFactory23.getLicenseFamilies(licenseFilter24);
        org.apache.rat.license.ILicense[] iLicenseArray26 = new org.apache.rat.license.ILicense[] {};
        java.util.TreeSet<org.apache.rat.license.ILicense> iLicenseSet27 = new java.util.TreeSet<org.apache.rat.license.ILicense>();
        boolean boolean28 = java.util.Collections.addAll((java.util.Collection<org.apache.rat.license.ILicense>) iLicenseSet27, iLicenseArray26);
        java.lang.String[] strArray41 = new java.lang.String[] { "GPL2 ", "GPL1 ", "notice", "http://org/apache/rat/meta-data#LicenseFamilyName", "notice", "GPL2 ", "http://org/apache/rat/meta-data#LicenseFamilyName", "", "GPL2 ", "", "GPL1 ", "hi!" };
        java.util.ArrayList<java.lang.String> strList42 = new java.util.ArrayList<java.lang.String>();
        boolean boolean43 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strList42, strArray41);
        org.apache.rat.license.LicenseSetFactory licenseSetFactory44 = new org.apache.rat.license.LicenseSetFactory((java.util.SortedSet<org.apache.rat.license.ILicense>) iLicenseSet27, (java.util.Collection<java.lang.String>) strList42);
        org.apache.rat.utils.Log log45 = null;
        org.apache.rat.ReportConfiguration reportConfiguration46 = new org.apache.rat.ReportConfiguration(log45);
        java.io.FilenameFilter filenameFilter47 = reportConfiguration46.getInputFileFilter();
        org.apache.rat.license.LicenseSetFactory.LicenseFilter licenseFilter48 = org.apache.rat.license.LicenseSetFactory.LicenseFilter.all;
        java.util.SortedSet<org.apache.rat.license.ILicense> iLicenseSet49 = reportConfiguration46.getLicenses(licenseFilter48);
        org.apache.rat.config.AddLicenseHeaders addLicenseHeaders50 = org.apache.rat.config.AddLicenseHeaders.FALSE;
        reportConfiguration46.setAddLicenseHeaders(addLicenseHeaders50);
        org.apache.rat.utils.Log log52 = null;
        org.apache.rat.ReportConfiguration reportConfiguration53 = new org.apache.rat.ReportConfiguration(log52);
        org.apache.rat.report.claim.ClaimStatistic claimStatistic54 = org.apache.rat.Reporter.report(reportConfiguration53);
        org.apache.rat.license.LicenseSetFactory.LicenseFilter licenseFilter55 = org.apache.rat.license.LicenseSetFactory.LicenseFilter.all;
        org.apache.rat.Reporter.listLicenses(reportConfiguration53, licenseFilter55);
        org.apache.rat.Reporter.listLicenses(reportConfiguration46, licenseFilter55);
        org.apache.rat.utils.Log log58 = null;
        org.apache.rat.ReportConfiguration reportConfiguration59 = new org.apache.rat.ReportConfiguration(log58);
        java.io.FilenameFilter filenameFilter60 = reportConfiguration59.getInputFileFilter();
        org.apache.rat.license.LicenseSetFactory.LicenseFilter licenseFilter61 = org.apache.rat.license.LicenseSetFactory.LicenseFilter.all;
        java.util.SortedSet<org.apache.rat.license.ILicense> iLicenseSet62 = reportConfiguration59.getLicenses(licenseFilter61);
        org.apache.rat.config.AddLicenseHeaders addLicenseHeaders63 = org.apache.rat.config.AddLicenseHeaders.FALSE;
        reportConfiguration59.setAddLicenseHeaders(addLicenseHeaders63);
        org.apache.rat.utils.Log log65 = null;
        org.apache.rat.ReportConfiguration reportConfiguration66 = new org.apache.rat.ReportConfiguration(log65);
        org.apache.rat.report.claim.ClaimStatistic claimStatistic67 = org.apache.rat.Reporter.report(reportConfiguration66);
        org.apache.rat.license.LicenseSetFactory.LicenseFilter licenseFilter68 = org.apache.rat.license.LicenseSetFactory.LicenseFilter.all;
        org.apache.rat.Reporter.listLicenses(reportConfiguration66, licenseFilter68);
        org.apache.rat.Reporter.listLicenses(reportConfiguration59, licenseFilter68);
        org.apache.rat.Reporter.listLicenses(reportConfiguration46, licenseFilter68);
        java.util.SortedSet<org.apache.rat.license.ILicense> iLicenseSet72 = licenseSetFactory44.getLicenses(licenseFilter68);
        java.util.SortedSet<org.apache.rat.license.ILicenseFamily> iLicenseFamilySet73 = licenseSetFactory23.getLicenseFamilies(licenseFilter68);
        org.apache.rat.policy.DefaultPolicy defaultPolicy74 = new org.apache.rat.policy.DefaultPolicy((java.util.Collection<org.apache.rat.license.ILicenseFamily>) iLicenseFamilySet73);
        org.apache.rat.api.Document document75 = null;
        defaultPolicy74.analyse(document75);
        org.apache.rat.document.IDocumentAnalyser[] iDocumentAnalyserArray77 = new org.apache.rat.document.IDocumentAnalyser[] {};
        org.apache.rat.document.impl.util.DocumentAnalyserMultiplexer documentAnalyserMultiplexer78 = new org.apache.rat.document.impl.util.DocumentAnalyserMultiplexer(iDocumentAnalyserArray77);
        org.apache.rat.api.Document document79 = null;
        documentAnalyserMultiplexer78.analyse(document79);
        org.apache.rat.document.IDocumentAnalyser[] iDocumentAnalyserArray81 = new org.apache.rat.document.IDocumentAnalyser[] { defaultPolicy3, defaultPolicy74, documentAnalyserMultiplexer78 };
        org.apache.rat.document.impl.util.DocumentAnalyserMultiplexer documentAnalyserMultiplexer82 = new org.apache.rat.document.impl.util.DocumentAnalyserMultiplexer(iDocumentAnalyserArray81);
        org.apache.rat.document.impl.util.DocumentAnalyserMultiplexer documentAnalyserMultiplexer83 = new org.apache.rat.document.impl.util.DocumentAnalyserMultiplexer(iDocumentAnalyserArray81);
        org.apache.rat.document.impl.util.DocumentAnalyserMultiplexer documentAnalyserMultiplexer84 = new org.apache.rat.document.impl.util.DocumentAnalyserMultiplexer(iDocumentAnalyserArray81);
        org.apache.rat.document.impl.util.DocumentAnalyserMultiplexer documentAnalyserMultiplexer85 = new org.apache.rat.document.impl.util.DocumentAnalyserMultiplexer(iDocumentAnalyserArray81);
        org.apache.rat.document.impl.util.DocumentAnalyserMultiplexer documentAnalyserMultiplexer86 = new org.apache.rat.document.impl.util.DocumentAnalyserMultiplexer(iDocumentAnalyserArray81);
        org.apache.rat.document.impl.util.DocumentAnalyserMultiplexer documentAnalyserMultiplexer87 = new org.apache.rat.document.impl.util.DocumentAnalyserMultiplexer(iDocumentAnalyserArray81);
        org.apache.rat.document.impl.util.DocumentAnalyserMultiplexer documentAnalyserMultiplexer88 = new org.apache.rat.document.impl.util.DocumentAnalyserMultiplexer(iDocumentAnalyserArray81);
        org.junit.Assert.assertNotNull(iLicenseFamilyArray0);
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + false + "'", boolean2 == false);
        org.junit.Assert.assertNotNull(iLicenseFamilySet4);
        org.junit.Assert.assertNotNull(iLicenseArray5);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertNotNull(strArray20);
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + true + "'", boolean22 == true);
        org.junit.Assert.assertTrue("'" + licenseFilter24 + "' != '" + org.apache.rat.license.LicenseSetFactory.LicenseFilter.all + "'", licenseFilter24.equals(org.apache.rat.license.LicenseSetFactory.LicenseFilter.all));
        org.junit.Assert.assertNotNull(iLicenseFamilySet25);
        org.junit.Assert.assertNotNull(iLicenseArray26);
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + false + "'", boolean28 == false);
        org.junit.Assert.assertNotNull(strArray41);
        org.junit.Assert.assertTrue("'" + boolean43 + "' != '" + true + "'", boolean43 == true);
        org.junit.Assert.assertNull(filenameFilter47);
        org.junit.Assert.assertTrue("'" + licenseFilter48 + "' != '" + org.apache.rat.license.LicenseSetFactory.LicenseFilter.all + "'", licenseFilter48.equals(org.apache.rat.license.LicenseSetFactory.LicenseFilter.all));
        org.junit.Assert.assertNotNull(iLicenseSet49);
        org.junit.Assert.assertTrue("'" + addLicenseHeaders50 + "' != '" + org.apache.rat.config.AddLicenseHeaders.FALSE + "'", addLicenseHeaders50.equals(org.apache.rat.config.AddLicenseHeaders.FALSE));
        org.junit.Assert.assertNull(claimStatistic54);
        org.junit.Assert.assertTrue("'" + licenseFilter55 + "' != '" + org.apache.rat.license.LicenseSetFactory.LicenseFilter.all + "'", licenseFilter55.equals(org.apache.rat.license.LicenseSetFactory.LicenseFilter.all));
        org.junit.Assert.assertNull(filenameFilter60);
        org.junit.Assert.assertTrue("'" + licenseFilter61 + "' != '" + org.apache.rat.license.LicenseSetFactory.LicenseFilter.all + "'", licenseFilter61.equals(org.apache.rat.license.LicenseSetFactory.LicenseFilter.all));
        org.junit.Assert.assertNotNull(iLicenseSet62);
        org.junit.Assert.assertTrue("'" + addLicenseHeaders63 + "' != '" + org.apache.rat.config.AddLicenseHeaders.FALSE + "'", addLicenseHeaders63.equals(org.apache.rat.config.AddLicenseHeaders.FALSE));
        org.junit.Assert.assertNull(claimStatistic67);
        org.junit.Assert.assertTrue("'" + licenseFilter68 + "' != '" + org.apache.rat.license.LicenseSetFactory.LicenseFilter.all + "'", licenseFilter68.equals(org.apache.rat.license.LicenseSetFactory.LicenseFilter.all));
        org.junit.Assert.assertNotNull(iLicenseSet72);
        org.junit.Assert.assertNotNull(iLicenseFamilySet73);
        org.junit.Assert.assertNotNull(iDocumentAnalyserArray77);
        org.junit.Assert.assertNotNull(iDocumentAnalyserArray81);
    }

    @Test
    public void test14930() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest29.test14930");
        org.apache.rat.api.MetaData metaData0 = new org.apache.rat.api.MetaData();
        java.lang.String str2 = metaData0.value("COMMON DEVELOPMENT AND DISTRIBUTION LICENSE Version 1.0");
        java.lang.String str4 = metaData0.value("W3C Document Copyright");
        boolean boolean6 = metaData0.clear("hi!");
        java.lang.String str8 = metaData0.value("true");
        org.apache.rat.api.MetaData.Datum datum10 = metaData0.get("GNU General Public License, version 1");
        org.apache.rat.api.MetaData.Datum datum12 = metaData0.get("http:");
        org.apache.rat.api.MetaData.Datum datum13 = org.apache.rat.api.MetaData.RAT_APPROVED_LICENSE_DATIM_TRUE;
        metaData0.add(datum13);
        boolean boolean16 = metaData0.clear("");
        org.apache.rat.api.MetaData.Datum datum17 = org.apache.rat.api.MetaData.RAT_DOCUMENT_CATEGORY_DATUM_BINARY;
        java.lang.String str18 = datum17.toString();
        metaData0.set(datum17);
        java.lang.String str20 = datum17.getValue();
        org.junit.Assert.assertNull(str2);
        org.junit.Assert.assertNull(str4);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertNull(str8);
        org.junit.Assert.assertNull(datum10);
        org.junit.Assert.assertNull(datum12);
        org.junit.Assert.assertNotNull(datum13);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
        org.junit.Assert.assertNotNull(datum17);
        org.junit.Assert.assertEquals("'" + str18 + "' != '" + "Datum [ name ='http://org/apache/rat/meta-data#FileCategory',value ='binary ']" + "'", str18, "Datum [ name ='http://org/apache/rat/meta-data#FileCategory',value ='binary ']");
        org.junit.Assert.assertEquals("'" + str20 + "' != '" + "binary" + "'", str20, "binary");
    }

    @Test
    public void test14931() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest29.test14931");
        org.apache.rat.configuration.builders.SpdxBuilder spdxBuilder0 = org.apache.rat.analysis.IHeaderMatcher.Builder.spdx();
        java.lang.String str1 = spdxBuilder0.toString();
        org.apache.rat.configuration.builders.SpdxBuilder spdxBuilder3 = spdxBuilder0.setName("ef7a8b13-64c3-4510-bb0c-dbf208e1e73f");
        org.apache.rat.analysis.IHeaderMatcher iHeaderMatcher4 = spdxBuilder0.build();
        java.lang.String str5 = spdxBuilder0.toString();
        java.lang.String str6 = spdxBuilder0.toString();
        java.lang.String str7 = spdxBuilder0.toString();
        java.lang.String str8 = spdxBuilder0.toString();
        org.junit.Assert.assertNotNull(spdxBuilder0);
        org.junit.Assert.assertEquals("'" + str1 + "' != '" + "SpdxBuilder: null" + "'", str1, "SpdxBuilder: null");
        org.junit.Assert.assertNotNull(spdxBuilder3);
        org.junit.Assert.assertNotNull(iHeaderMatcher4);
        org.junit.Assert.assertEquals("'" + str5 + "' != '" + "SpdxBuilder: ef7a8b13-64c3-4510-bb0c-dbf208e1e73f" + "'", str5, "SpdxBuilder: ef7a8b13-64c3-4510-bb0c-dbf208e1e73f");
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "SpdxBuilder: ef7a8b13-64c3-4510-bb0c-dbf208e1e73f" + "'", str6, "SpdxBuilder: ef7a8b13-64c3-4510-bb0c-dbf208e1e73f");
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "SpdxBuilder: ef7a8b13-64c3-4510-bb0c-dbf208e1e73f" + "'", str7, "SpdxBuilder: ef7a8b13-64c3-4510-bb0c-dbf208e1e73f");
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "SpdxBuilder: ef7a8b13-64c3-4510-bb0c-dbf208e1e73f" + "'", str8, "SpdxBuilder: ef7a8b13-64c3-4510-bb0c-dbf208e1e73f");
    }

    @Test
    public void test14932() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest29.test14932");
        org.apache.rat.utils.ReportingSet<java.lang.String> strSet0 = new org.apache.rat.utils.ReportingSet<java.lang.String>();
        org.apache.rat.utils.ReportingSet<java.lang.String> strSet2 = strSet0.tailSet("hi!");
        java.util.stream.Stream<java.lang.String> strStream3 = strSet2.parallelStream();
        boolean boolean5 = strSet2.addIfNotPresent("null f1fc8dc8-990d-4a2d-9540-4e9ece3bd92c");
        java.util.stream.Stream<java.lang.String> strStream6 = strSet2.stream();
        java.lang.String[] strArray12 = new java.lang.String[] { "http://org/apache/rat/meta-data#LicenseFamilyCategory", "Datum [ name ='http://org/apache/rat/meta-data#LicenseFamilyCategory',value ='GPL1  ']", "MANIFEST.MF", "AllBuilder:", "The MIT License" };
        org.apache.rat.utils.ReportingSet<java.lang.String> strSet13 = new org.apache.rat.utils.ReportingSet<java.lang.String>();
        boolean boolean14 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strSet13, strArray12);
        boolean boolean16 = strSet13.addIfNotPresent("http://org/apache/rat/meta-data#LicenseFamilyName");
        boolean boolean18 = strSet13.addIfNotPresent("ef7a8b13-64c3-4510-bb0c-dbf208e1e73f");
        java.util.function.Function<java.lang.String, java.lang.String> strFunction19 = null;
        org.apache.rat.utils.ReportingSet<java.lang.String> strSet20 = strSet13.setMsgFormat(strFunction19);
        org.apache.rat.utils.DefaultLog defaultLog21 = org.apache.rat.utils.DefaultLog.INSTANCE;
        org.apache.rat.utils.Log log22 = null;
        org.apache.rat.ReportConfiguration reportConfiguration23 = new org.apache.rat.ReportConfiguration(log22);
        java.io.FilenameFilter filenameFilter24 = reportConfiguration23.getInputFileFilter();
        org.apache.rat.license.LicenseSetFactory.LicenseFilter licenseFilter25 = org.apache.rat.license.LicenseSetFactory.LicenseFilter.all;
        java.util.SortedSet<org.apache.rat.license.ILicense> iLicenseSet26 = reportConfiguration23.getLicenses(licenseFilter25);
        org.apache.rat.config.AddLicenseHeaders addLicenseHeaders27 = org.apache.rat.config.AddLicenseHeaders.FALSE;
        reportConfiguration23.setAddLicenseHeaders(addLicenseHeaders27);
        org.apache.rat.utils.Log log29 = null;
        org.apache.rat.ReportConfiguration reportConfiguration30 = new org.apache.rat.ReportConfiguration(log29);
        org.apache.rat.report.claim.ClaimStatistic claimStatistic31 = org.apache.rat.Reporter.report(reportConfiguration30);
        org.apache.rat.license.LicenseSetFactory.LicenseFilter licenseFilter32 = org.apache.rat.license.LicenseSetFactory.LicenseFilter.all;
        org.apache.rat.Reporter.listLicenses(reportConfiguration30, licenseFilter32);
        org.apache.rat.Reporter.listLicenses(reportConfiguration23, licenseFilter32);
        org.apache.rat.utils.Log log35 = null;
        org.apache.rat.ReportConfiguration reportConfiguration36 = new org.apache.rat.ReportConfiguration(log35);
        java.io.FilenameFilter filenameFilter37 = reportConfiguration36.getInputFileFilter();
        org.apache.rat.license.LicenseSetFactory.LicenseFilter licenseFilter38 = org.apache.rat.license.LicenseSetFactory.LicenseFilter.all;
        java.util.SortedSet<org.apache.rat.license.ILicense> iLicenseSet39 = reportConfiguration36.getLicenses(licenseFilter38);
        org.apache.rat.config.AddLicenseHeaders addLicenseHeaders40 = org.apache.rat.config.AddLicenseHeaders.FALSE;
        reportConfiguration36.setAddLicenseHeaders(addLicenseHeaders40);
        org.apache.rat.utils.Log log42 = null;
        org.apache.rat.ReportConfiguration reportConfiguration43 = new org.apache.rat.ReportConfiguration(log42);
        org.apache.rat.report.claim.ClaimStatistic claimStatistic44 = org.apache.rat.Reporter.report(reportConfiguration43);
        org.apache.rat.license.LicenseSetFactory.LicenseFilter licenseFilter45 = org.apache.rat.license.LicenseSetFactory.LicenseFilter.all;
        org.apache.rat.Reporter.listLicenses(reportConfiguration43, licenseFilter45);
        org.apache.rat.Reporter.listLicenses(reportConfiguration36, licenseFilter45);
        org.apache.rat.Reporter.listLicenses(reportConfiguration23, licenseFilter45);
        org.apache.rat.utils.Log log49 = null;
        org.apache.rat.ReportConfiguration reportConfiguration50 = new org.apache.rat.ReportConfiguration(log49);
        org.apache.commons.io.function.IOSupplier<java.io.OutputStream> outputStreamIOSupplier51 = reportConfiguration50.getOutput();
        reportConfiguration23.setOut(outputStreamIOSupplier51);
        org.apache.rat.utils.Log log53 = null;
        org.apache.rat.ReportConfiguration reportConfiguration54 = new org.apache.rat.ReportConfiguration(log53);
        org.apache.rat.report.claim.ClaimStatistic claimStatistic55 = org.apache.rat.Reporter.report(reportConfiguration54);
        org.apache.rat.utils.Log log56 = null;
        org.apache.rat.ReportConfiguration reportConfiguration57 = new org.apache.rat.ReportConfiguration(log56);
        org.apache.rat.report.claim.ClaimStatistic claimStatistic58 = org.apache.rat.Reporter.report(reportConfiguration57);
        org.apache.rat.utils.ReportingSet.Options options59 = org.apache.rat.utils.ReportingSet.Options.OVERWRITE;
        reportConfiguration57.licenseDuplicateOption(options59);
        reportConfiguration54.familyDuplicateOption(options59);
        reportConfiguration23.licenseDuplicateOption(options59);
        reportConfiguration23.addApprovedLicenseCategory("W3C Document Copyright");
        org.apache.rat.utils.Log log65 = null;
        org.apache.rat.ReportConfiguration reportConfiguration66 = new org.apache.rat.ReportConfiguration(log65);
        reportConfiguration66.addApprovedLicenseCategory(".cvsignore");
        org.apache.rat.utils.Log.Level level69 = org.apache.rat.utils.Log.Level.ERROR;
        reportConfiguration66.logLicenseCollisions(level69);
        reportConfiguration23.logLicenseCollisions(level69);
        defaultLog21.setLevel(level69);
        defaultLog21.warn((java.lang.Object) "GNU General Public License, version 3");
        org.apache.rat.ReportConfiguration reportConfiguration75 = new org.apache.rat.ReportConfiguration((org.apache.rat.utils.Log) defaultLog21);
        org.apache.rat.utils.DefaultLog defaultLog76 = org.apache.rat.utils.DefaultLog.INSTANCE;
        org.apache.rat.utils.Log log77 = null;
        org.apache.rat.ReportConfiguration reportConfiguration78 = new org.apache.rat.ReportConfiguration(log77);
        reportConfiguration78.addApprovedLicenseCategory(".cvsignore");
        org.apache.rat.utils.Log.Level level81 = org.apache.rat.utils.Log.Level.ERROR;
        reportConfiguration78.logFamilyCollisions(level81);
        defaultLog76.setLevel(level81);
        defaultLog21.debug((java.lang.Object) level81);
        org.apache.rat.utils.ReportingSet<java.lang.String> strSet85 = strSet20.setLogLevel(level81);
        int int86 = strSet20.size();
        java.util.SortedSet<org.apache.rat.license.ILicenseFamily> iLicenseFamilySet88 = org.apache.rat.license.LicenseFamilySetFactory.emptyLicenseFamilySet();
        org.apache.rat.policy.DefaultPolicy defaultPolicy89 = new org.apache.rat.policy.DefaultPolicy((java.util.Collection<org.apache.rat.license.ILicenseFamily>) iLicenseFamilySet88);
        org.apache.rat.license.ILicenseFamily iLicenseFamily90 = org.apache.rat.license.LicenseFamilySetFactory.search("MANIFEST.MF", iLicenseFamilySet88);
        boolean boolean91 = strSet20.retainAll((java.util.Collection<org.apache.rat.license.ILicenseFamily>) iLicenseFamilySet88);
        org.apache.rat.utils.ReportingSet<java.lang.String> strSet93 = strSet20.tailSet("3c74a3ec-8235-4035-9db7-f9f475b48681");
        java.util.stream.Stream<java.lang.String> strStream94 = strSet93.parallelStream();
        strStream94.close();
        boolean boolean96 = strSet2.equals((java.lang.Object) strStream94);
        // The following exception was thrown during execution in test generation
        try {
            org.apache.rat.utils.ReportingSet<java.lang.String> strSet98 = strSet2.headSet("Copyright Builder: s:.cvsignore e:standard o:Copyright Builder: s:null e:EBC30EB7-B3EA-4F39-BAEA-5FEA4FA0278B o:null");
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: toKey out of range");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(strSet2);
        org.junit.Assert.assertNotNull(strStream3);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + true + "'", boolean5 == true);
        org.junit.Assert.assertNotNull(strStream6);
        org.junit.Assert.assertNotNull(strArray12);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + true + "'", boolean14 == true);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + true + "'", boolean16 == true);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + true + "'", boolean18 == true);
        org.junit.Assert.assertNotNull(strSet20);
        org.junit.Assert.assertNotNull(defaultLog21);
        org.junit.Assert.assertNull(filenameFilter24);
        org.junit.Assert.assertTrue("'" + licenseFilter25 + "' != '" + org.apache.rat.license.LicenseSetFactory.LicenseFilter.all + "'", licenseFilter25.equals(org.apache.rat.license.LicenseSetFactory.LicenseFilter.all));
        org.junit.Assert.assertNotNull(iLicenseSet26);
        org.junit.Assert.assertTrue("'" + addLicenseHeaders27 + "' != '" + org.apache.rat.config.AddLicenseHeaders.FALSE + "'", addLicenseHeaders27.equals(org.apache.rat.config.AddLicenseHeaders.FALSE));
        org.junit.Assert.assertNull(claimStatistic31);
        org.junit.Assert.assertTrue("'" + licenseFilter32 + "' != '" + org.apache.rat.license.LicenseSetFactory.LicenseFilter.all + "'", licenseFilter32.equals(org.apache.rat.license.LicenseSetFactory.LicenseFilter.all));
        org.junit.Assert.assertNull(filenameFilter37);
        org.junit.Assert.assertTrue("'" + licenseFilter38 + "' != '" + org.apache.rat.license.LicenseSetFactory.LicenseFilter.all + "'", licenseFilter38.equals(org.apache.rat.license.LicenseSetFactory.LicenseFilter.all));
        org.junit.Assert.assertNotNull(iLicenseSet39);
        org.junit.Assert.assertTrue("'" + addLicenseHeaders40 + "' != '" + org.apache.rat.config.AddLicenseHeaders.FALSE + "'", addLicenseHeaders40.equals(org.apache.rat.config.AddLicenseHeaders.FALSE));
        org.junit.Assert.assertNull(claimStatistic44);
        org.junit.Assert.assertTrue("'" + licenseFilter45 + "' != '" + org.apache.rat.license.LicenseSetFactory.LicenseFilter.all + "'", licenseFilter45.equals(org.apache.rat.license.LicenseSetFactory.LicenseFilter.all));
        org.junit.Assert.assertNotNull(outputStreamIOSupplier51);
        org.junit.Assert.assertNull(claimStatistic55);
        org.junit.Assert.assertNull(claimStatistic58);
        org.junit.Assert.assertTrue("'" + options59 + "' != '" + org.apache.rat.utils.ReportingSet.Options.OVERWRITE + "'", options59.equals(org.apache.rat.utils.ReportingSet.Options.OVERWRITE));
        org.junit.Assert.assertTrue("'" + level69 + "' != '" + org.apache.rat.utils.Log.Level.ERROR + "'", level69.equals(org.apache.rat.utils.Log.Level.ERROR));
        org.junit.Assert.assertNotNull(defaultLog76);
        org.junit.Assert.assertTrue("'" + level81 + "' != '" + org.apache.rat.utils.Log.Level.ERROR + "'", level81.equals(org.apache.rat.utils.Log.Level.ERROR));
        org.junit.Assert.assertNotNull(strSet85);
        org.junit.Assert.assertTrue("'" + int86 + "' != '" + 7 + "'", int86 == 7);
        org.junit.Assert.assertNotNull(iLicenseFamilySet88);
        org.junit.Assert.assertNull(iLicenseFamily90);
        org.junit.Assert.assertTrue("'" + boolean91 + "' != '" + true + "'", boolean91 == true);
        org.junit.Assert.assertNotNull(strSet93);
        org.junit.Assert.assertNotNull(strStream94);
        org.junit.Assert.assertTrue("'" + boolean96 + "' != '" + false + "'", boolean96 == false);
    }

    @Test
    public void test14933() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest29.test14933");
        boolean boolean1 = org.apache.rat.document.impl.guesser.BinaryGuesser.isBytecode("EF7A8B13-64C3-4510-BB0C-DBF208E1E73F");
        org.junit.Assert.assertTrue("'" + boolean1 + "' != '" + false + "'", boolean1 == false);
    }

    @Test
    public void test14934() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest29.test14934");
        java.lang.String[] strArray5 = new java.lang.String[] { "http://org/apache/rat/meta-data#LicenseFamilyCategory", "Datum [ name ='http://org/apache/rat/meta-data#LicenseFamilyCategory',value ='GPL1  ']", "MANIFEST.MF", "AllBuilder:", "The MIT License" };
        org.apache.rat.utils.ReportingSet<java.lang.String> strSet6 = new org.apache.rat.utils.ReportingSet<java.lang.String>();
        boolean boolean7 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strSet6, strArray5);
        boolean boolean9 = strSet6.addIfNotPresent("http://org/apache/rat/meta-data#LicenseFamilyName");
        java.util.Iterator<java.lang.String> strItor10 = strSet6.iterator();
        java.lang.Object[] objArray11 = strSet6.toArray();
        java.lang.String[] strArray17 = new java.lang.String[] { "http://org/apache/rat/meta-data#LicenseFamilyCategory", "Datum [ name ='http://org/apache/rat/meta-data#LicenseFamilyCategory',value ='GPL1  ']", "MANIFEST.MF", "AllBuilder:", "The MIT License" };
        org.apache.rat.utils.ReportingSet<java.lang.String> strSet18 = new org.apache.rat.utils.ReportingSet<java.lang.String>();
        boolean boolean19 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strSet18, strArray17);
        boolean boolean21 = strSet18.addIfNotPresent("http://org/apache/rat/meta-data#LicenseFamilyName");
        java.util.SortedSet<org.apache.rat.license.ILicenseFamily> iLicenseFamilySet22 = org.apache.rat.license.LicenseFamilySetFactory.emptyLicenseFamilySet();
        boolean boolean23 = strSet18.removeAll((java.util.Collection<org.apache.rat.license.ILicenseFamily>) iLicenseFamilySet22);
        boolean boolean24 = strSet6.containsAll((java.util.Collection<org.apache.rat.license.ILicenseFamily>) iLicenseFamilySet22);
        java.util.Spliterator<java.lang.String> strSpliterator25 = strSet6.spliterator();
        int int26 = strSet6.size();
        java.util.function.Function<java.lang.String, java.lang.String> strFunction27 = null;
        org.apache.rat.utils.ReportingSet<java.lang.String> strSet28 = strSet6.setMsgFormat(strFunction27);
        org.apache.rat.utils.Log log29 = null;
        org.apache.rat.ReportConfiguration reportConfiguration30 = new org.apache.rat.ReportConfiguration(log29);
        org.apache.rat.report.claim.ClaimStatistic claimStatistic31 = org.apache.rat.Reporter.report(reportConfiguration30);
        org.apache.rat.utils.Log log32 = null;
        org.apache.rat.ReportConfiguration reportConfiguration33 = new org.apache.rat.ReportConfiguration(log32);
        org.apache.rat.report.claim.ClaimStatistic claimStatistic34 = org.apache.rat.Reporter.report(reportConfiguration33);
        org.apache.rat.utils.ReportingSet.Options options35 = org.apache.rat.utils.ReportingSet.Options.OVERWRITE;
        reportConfiguration33.licenseDuplicateOption(options35);
        reportConfiguration30.familyDuplicateOption(options35);
        org.apache.commons.io.function.IOSupplier<java.io.PrintWriter> printWriterIOSupplier38 = reportConfiguration30.getWriter();
        org.apache.rat.utils.Log log39 = null;
        org.apache.rat.ReportConfiguration reportConfiguration40 = new org.apache.rat.ReportConfiguration(log39);
        reportConfiguration40.addApprovedLicenseCategory(".cvsignore");
        org.apache.rat.utils.Log.Level level43 = org.apache.rat.utils.Log.Level.ERROR;
        reportConfiguration40.logFamilyCollisions(level43);
        reportConfiguration30.logFamilyCollisions(level43);
        org.apache.rat.utils.ReportingSet<java.lang.String> strSet46 = strSet6.setLogLevel(level43);
        java.lang.String str47 = strSet46.first();
        org.junit.Assert.assertNotNull(strArray5);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + true + "'", boolean7 == true);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + true + "'", boolean9 == true);
        org.junit.Assert.assertNotNull(strItor10);
        org.junit.Assert.assertNotNull(objArray11);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray11), "[AllBuilder:, Datum [ name ='http://org/apache/rat/meta-data#LicenseFamilyCategory',value ='GPL1  '], MANIFEST.MF, The MIT License, http://org/apache/rat/meta-data#LicenseFamilyCategory, http://org/apache/rat/meta-data#LicenseFamilyName]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray11), "[AllBuilder:, Datum [ name ='http://org/apache/rat/meta-data#LicenseFamilyCategory',value ='GPL1  '], MANIFEST.MF, The MIT License, http://org/apache/rat/meta-data#LicenseFamilyCategory, http://org/apache/rat/meta-data#LicenseFamilyName]");
        org.junit.Assert.assertNotNull(strArray17);
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + true + "'", boolean19 == true);
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + true + "'", boolean21 == true);
        org.junit.Assert.assertNotNull(iLicenseFamilySet22);
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + false + "'", boolean23 == false);
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + true + "'", boolean24 == true);
        org.junit.Assert.assertNotNull(strSpliterator25);
        org.junit.Assert.assertTrue("'" + int26 + "' != '" + 6 + "'", int26 == 6);
        org.junit.Assert.assertNotNull(strSet28);
        org.junit.Assert.assertNull(claimStatistic31);
        org.junit.Assert.assertNull(claimStatistic34);
        org.junit.Assert.assertTrue("'" + options35 + "' != '" + org.apache.rat.utils.ReportingSet.Options.OVERWRITE + "'", options35.equals(org.apache.rat.utils.ReportingSet.Options.OVERWRITE));
        org.junit.Assert.assertNotNull(printWriterIOSupplier38);
        org.junit.Assert.assertTrue("'" + level43 + "' != '" + org.apache.rat.utils.Log.Level.ERROR + "'", level43.equals(org.apache.rat.utils.Log.Level.ERROR));
        org.junit.Assert.assertNotNull(strSet46);
        org.junit.Assert.assertEquals("'" + str47 + "' != '" + "AllBuilder:" + "'", str47, "AllBuilder:");
    }

    @Test
    public void test14935() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest29.test14935");
        org.apache.rat.api.MetaData metaData0 = new org.apache.rat.api.MetaData();
        java.lang.String str2 = metaData0.value("COMMON DEVELOPMENT AND DISTRIBUTION LICENSE Version 1.0");
        java.lang.String str4 = metaData0.value("W3C Document Copyright");
        boolean boolean6 = metaData0.clear("hi!");
        metaData0.clear();
        org.apache.rat.api.MetaData.Datum datum8 = org.apache.rat.api.MetaData.RAT_LICENSE_FAMILY_NAME_DATUM_GPL_VERSION_1;
        metaData0.set(datum8);
        metaData0.clear();
        java.util.Collection<org.apache.rat.api.MetaData.Datum> datumCollection11 = metaData0.getData();
        java.util.Collection<org.apache.rat.api.MetaData.Datum> datumCollection12 = metaData0.getData();
        boolean boolean14 = metaData0.clear("TextBuilder: ApacheLicenseVersion...");
        java.util.Collection<org.apache.rat.api.MetaData.Datum> datumCollection15 = metaData0.getData();
        org.junit.Assert.assertNull(str2);
        org.junit.Assert.assertNull(str4);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertNotNull(datum8);
        org.junit.Assert.assertNotNull(datumCollection11);
        org.junit.Assert.assertNotNull(datumCollection12);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
        org.junit.Assert.assertNotNull(datumCollection15);
    }

    @Test
    public void test14936() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest29.test14936");
        org.apache.rat.analysis.matchers.CopyrightMatcher copyrightMatcher3 = new org.apache.rat.analysis.matchers.CopyrightMatcher("MathcerRefBuilder: c523095e-4421-4cc4-93e2-039f23b91f76", "33ac78df-d24f-43c9-beeb-83abf1fa7aa0", "3e2b228d-d5ff-4444-8d8c-d614494b2426 null");
    }

    @Test
    public void test14937() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest29.test14937");
        org.apache.rat.analysis.license.FullTextMatchingLicense fullTextMatchingLicense0 = new org.apache.rat.analysis.license.FullTextMatchingLicense();
        fullTextMatchingLicense0.setLicenseFamilyName("hi!");
        java.lang.String str3 = fullTextMatchingLicense0.getLicenseFamilyCategory();
        java.lang.String str4 = fullTextMatchingLicense0.getLicenseFamilyCategory();
        fullTextMatchingLicense0.setFullText("NotBuilder: MathcerRefBuilder: null");
        org.apache.rat.license.ILicense.Builder builder7 = fullTextMatchingLicense0.getLicense();
        fullTextMatchingLicense0.setLicenseFamilyCategory("f489c72e-9df8-4339-86cc-35c229864db7");
        java.lang.String str10 = fullTextMatchingLicense0.getLicenseFamilyName();
        org.apache.rat.license.ILicense.Builder builder11 = fullTextMatchingLicense0.getLicense();
        org.apache.rat.license.ILicenseFamily iLicenseFamily12 = fullTextMatchingLicense0.getLicenseFamily();
        org.junit.Assert.assertNull(str3);
        org.junit.Assert.assertNull(str4);
        org.junit.Assert.assertNotNull(builder7);
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "hi!" + "'", str10, "hi!");
        org.junit.Assert.assertNotNull(builder11);
        org.junit.Assert.assertNotNull(iLicenseFamily12);
    }

    @Test
    public void test14938() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest29.test14938");
        org.apache.rat.license.ILicenseFamily.Builder builder0 = org.apache.rat.license.ILicenseFamily.builder();
        java.lang.String str1 = builder0.getCategory();
        org.apache.rat.license.ILicenseFamily.Builder builder3 = builder0.setLicenseFamilyCategory("Copyright Builder: s:null e:null o:null");
        org.apache.rat.license.ILicenseFamily.Builder builder5 = builder3.setLicenseFamilyName("6486879f-fc81-4b57-aec7-c4c77d540c30");
        org.apache.rat.license.ILicenseFamily.Builder builder7 = builder3.setLicenseFamilyName("httporgapacheratmetadataLicenseFamilyName");
        org.apache.rat.license.ILicenseFamily.Builder builder9 = builder7.setLicenseFamilyName("?????");
        java.lang.String str10 = builder7.getCategory();
        org.junit.Assert.assertNotNull(builder0);
        org.junit.Assert.assertNull(str1);
        org.junit.Assert.assertNotNull(builder3);
        org.junit.Assert.assertNotNull(builder5);
        org.junit.Assert.assertNotNull(builder7);
        org.junit.Assert.assertNotNull(builder9);
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "Copyright Builder: s:null e:null o:null" + "'", str10, "Copyright Builder: s:null e:null o:null");
    }

    @Test
    public void test14939() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest29.test14939");
        org.apache.rat.Defaults.Builder builder0 = org.apache.rat.Defaults.builder();
        org.apache.rat.Defaults defaults1 = builder0.build();
        org.apache.rat.Defaults.Builder builder2 = builder0.noDefault();
        org.apache.rat.Defaults.Builder builder4 = builder0.remove("AllBuilder:");
        org.apache.rat.Defaults.Builder builder6 = builder4.add("?????");
        org.apache.rat.Defaults.Builder builder8 = builder6.remove("");
        org.apache.rat.Defaults.Builder builder10 = builder8.remove("COMMON DEVELOPMENT AND DISTRIBUTION LICENSE Version 1.0");
        org.apache.rat.Defaults.Builder builder12 = builder10.add("");
        org.junit.Assert.assertNotNull(builder0);
        org.junit.Assert.assertNotNull(defaults1);
        org.junit.Assert.assertNotNull(builder2);
        org.junit.Assert.assertNotNull(builder4);
        org.junit.Assert.assertNotNull(builder6);
        org.junit.Assert.assertNotNull(builder8);
        org.junit.Assert.assertNotNull(builder10);
        org.junit.Assert.assertNotNull(builder12);
    }

    @Test
    public void test14940() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest29.test14940");
        boolean boolean1 = org.apache.rat.document.impl.guesser.BinaryGuesser.isExecutable("2e3deed3f517459bae48d6ddb543fe1f");
        org.junit.Assert.assertTrue("'" + boolean1 + "' != '" + false + "'", boolean1 == false);
    }

    @Test
    public void test14941() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest29.test14941");
        org.apache.rat.utils.Log log0 = null;
        org.apache.rat.ReportConfiguration reportConfiguration1 = new org.apache.rat.ReportConfiguration(log0);
        java.io.FilenameFilter filenameFilter2 = reportConfiguration1.getInputFileFilter();
        org.apache.rat.license.LicenseSetFactory.LicenseFilter licenseFilter3 = org.apache.rat.license.LicenseSetFactory.LicenseFilter.all;
        java.util.SortedSet<org.apache.rat.license.ILicense> iLicenseSet4 = reportConfiguration1.getLicenses(licenseFilter3);
        org.apache.rat.config.AddLicenseHeaders addLicenseHeaders5 = org.apache.rat.config.AddLicenseHeaders.FALSE;
        reportConfiguration1.setAddLicenseHeaders(addLicenseHeaders5);
        org.apache.rat.utils.Log log7 = null;
        org.apache.rat.ReportConfiguration reportConfiguration8 = new org.apache.rat.ReportConfiguration(log7);
        org.apache.rat.report.claim.ClaimStatistic claimStatistic9 = org.apache.rat.Reporter.report(reportConfiguration8);
        org.apache.rat.license.LicenseSetFactory.LicenseFilter licenseFilter10 = org.apache.rat.license.LicenseSetFactory.LicenseFilter.all;
        org.apache.rat.Reporter.listLicenses(reportConfiguration8, licenseFilter10);
        org.apache.rat.Reporter.listLicenses(reportConfiguration1, licenseFilter10);
        org.apache.rat.utils.Log log13 = null;
        org.apache.rat.ReportConfiguration reportConfiguration14 = new org.apache.rat.ReportConfiguration(log13);
        java.io.FilenameFilter filenameFilter15 = reportConfiguration14.getInputFileFilter();
        org.apache.rat.license.LicenseSetFactory.LicenseFilter licenseFilter16 = org.apache.rat.license.LicenseSetFactory.LicenseFilter.all;
        java.util.SortedSet<org.apache.rat.license.ILicense> iLicenseSet17 = reportConfiguration14.getLicenses(licenseFilter16);
        org.apache.rat.config.AddLicenseHeaders addLicenseHeaders18 = org.apache.rat.config.AddLicenseHeaders.FALSE;
        reportConfiguration14.setAddLicenseHeaders(addLicenseHeaders18);
        org.apache.rat.utils.Log log20 = null;
        org.apache.rat.ReportConfiguration reportConfiguration21 = new org.apache.rat.ReportConfiguration(log20);
        org.apache.rat.report.claim.ClaimStatistic claimStatistic22 = org.apache.rat.Reporter.report(reportConfiguration21);
        org.apache.rat.license.LicenseSetFactory.LicenseFilter licenseFilter23 = org.apache.rat.license.LicenseSetFactory.LicenseFilter.all;
        org.apache.rat.Reporter.listLicenses(reportConfiguration21, licenseFilter23);
        org.apache.rat.Reporter.listLicenses(reportConfiguration14, licenseFilter23);
        org.apache.rat.Reporter.listLicenses(reportConfiguration1, licenseFilter23);
        java.io.FilenameFilter filenameFilter27 = reportConfiguration1.getInputFileFilter();
        org.apache.rat.utils.Log log28 = null;
        org.apache.rat.ReportConfiguration reportConfiguration29 = new org.apache.rat.ReportConfiguration(log28);
        java.io.FilenameFilter filenameFilter30 = reportConfiguration29.getInputFileFilter();
        org.apache.rat.license.LicenseSetFactory.LicenseFilter licenseFilter31 = org.apache.rat.license.LicenseSetFactory.LicenseFilter.all;
        java.util.SortedSet<org.apache.rat.license.ILicense> iLicenseSet32 = reportConfiguration29.getLicenses(licenseFilter31);
        org.apache.rat.config.AddLicenseHeaders addLicenseHeaders33 = org.apache.rat.config.AddLicenseHeaders.FALSE;
        reportConfiguration29.setAddLicenseHeaders(addLicenseHeaders33);
        org.apache.rat.utils.Log log35 = null;
        org.apache.rat.ReportConfiguration reportConfiguration36 = new org.apache.rat.ReportConfiguration(log35);
        org.apache.rat.report.claim.ClaimStatistic claimStatistic37 = org.apache.rat.Reporter.report(reportConfiguration36);
        org.apache.rat.license.LicenseSetFactory.LicenseFilter licenseFilter38 = org.apache.rat.license.LicenseSetFactory.LicenseFilter.all;
        org.apache.rat.Reporter.listLicenses(reportConfiguration36, licenseFilter38);
        org.apache.rat.Reporter.listLicenses(reportConfiguration29, licenseFilter38);
        org.apache.rat.utils.Log log41 = null;
        org.apache.rat.ReportConfiguration reportConfiguration42 = new org.apache.rat.ReportConfiguration(log41);
        java.io.FilenameFilter filenameFilter43 = reportConfiguration42.getInputFileFilter();
        org.apache.rat.license.LicenseSetFactory.LicenseFilter licenseFilter44 = org.apache.rat.license.LicenseSetFactory.LicenseFilter.all;
        java.util.SortedSet<org.apache.rat.license.ILicense> iLicenseSet45 = reportConfiguration42.getLicenses(licenseFilter44);
        org.apache.rat.config.AddLicenseHeaders addLicenseHeaders46 = org.apache.rat.config.AddLicenseHeaders.FALSE;
        reportConfiguration42.setAddLicenseHeaders(addLicenseHeaders46);
        org.apache.rat.utils.Log log48 = null;
        org.apache.rat.ReportConfiguration reportConfiguration49 = new org.apache.rat.ReportConfiguration(log48);
        org.apache.rat.report.claim.ClaimStatistic claimStatistic50 = org.apache.rat.Reporter.report(reportConfiguration49);
        org.apache.rat.license.LicenseSetFactory.LicenseFilter licenseFilter51 = org.apache.rat.license.LicenseSetFactory.LicenseFilter.all;
        org.apache.rat.Reporter.listLicenses(reportConfiguration49, licenseFilter51);
        org.apache.rat.Reporter.listLicenses(reportConfiguration42, licenseFilter51);
        org.apache.rat.Reporter.listLicenses(reportConfiguration29, licenseFilter51);
        java.util.SortedSet<org.apache.rat.license.ILicense> iLicenseSet55 = reportConfiguration1.getLicenses(licenseFilter51);
        org.apache.rat.license.ILicense iLicense56 = null;
        reportConfiguration1.addLicense(iLicense56);
        org.apache.commons.io.function.IOSupplier<java.io.InputStream> inputStreamIOSupplier58 = reportConfiguration1.getStyleSheet();
        org.apache.rat.utils.Log log59 = reportConfiguration1.getLog();
        reportConfiguration1.setCopyrightMessage("a82bfc9b-89da-4114-9842-62c2fb7a2ee4");
        boolean boolean62 = reportConfiguration1.isAddingLicensesForced();
        org.junit.Assert.assertNull(filenameFilter2);
        org.junit.Assert.assertTrue("'" + licenseFilter3 + "' != '" + org.apache.rat.license.LicenseSetFactory.LicenseFilter.all + "'", licenseFilter3.equals(org.apache.rat.license.LicenseSetFactory.LicenseFilter.all));
        org.junit.Assert.assertNotNull(iLicenseSet4);
        org.junit.Assert.assertTrue("'" + addLicenseHeaders5 + "' != '" + org.apache.rat.config.AddLicenseHeaders.FALSE + "'", addLicenseHeaders5.equals(org.apache.rat.config.AddLicenseHeaders.FALSE));
        org.junit.Assert.assertNull(claimStatistic9);
        org.junit.Assert.assertTrue("'" + licenseFilter10 + "' != '" + org.apache.rat.license.LicenseSetFactory.LicenseFilter.all + "'", licenseFilter10.equals(org.apache.rat.license.LicenseSetFactory.LicenseFilter.all));
        org.junit.Assert.assertNull(filenameFilter15);
        org.junit.Assert.assertTrue("'" + licenseFilter16 + "' != '" + org.apache.rat.license.LicenseSetFactory.LicenseFilter.all + "'", licenseFilter16.equals(org.apache.rat.license.LicenseSetFactory.LicenseFilter.all));
        org.junit.Assert.assertNotNull(iLicenseSet17);
        org.junit.Assert.assertTrue("'" + addLicenseHeaders18 + "' != '" + org.apache.rat.config.AddLicenseHeaders.FALSE + "'", addLicenseHeaders18.equals(org.apache.rat.config.AddLicenseHeaders.FALSE));
        org.junit.Assert.assertNull(claimStatistic22);
        org.junit.Assert.assertTrue("'" + licenseFilter23 + "' != '" + org.apache.rat.license.LicenseSetFactory.LicenseFilter.all + "'", licenseFilter23.equals(org.apache.rat.license.LicenseSetFactory.LicenseFilter.all));
        org.junit.Assert.assertNull(filenameFilter27);
        org.junit.Assert.assertNull(filenameFilter30);
        org.junit.Assert.assertTrue("'" + licenseFilter31 + "' != '" + org.apache.rat.license.LicenseSetFactory.LicenseFilter.all + "'", licenseFilter31.equals(org.apache.rat.license.LicenseSetFactory.LicenseFilter.all));
        org.junit.Assert.assertNotNull(iLicenseSet32);
        org.junit.Assert.assertTrue("'" + addLicenseHeaders33 + "' != '" + org.apache.rat.config.AddLicenseHeaders.FALSE + "'", addLicenseHeaders33.equals(org.apache.rat.config.AddLicenseHeaders.FALSE));
        org.junit.Assert.assertNull(claimStatistic37);
        org.junit.Assert.assertTrue("'" + licenseFilter38 + "' != '" + org.apache.rat.license.LicenseSetFactory.LicenseFilter.all + "'", licenseFilter38.equals(org.apache.rat.license.LicenseSetFactory.LicenseFilter.all));
        org.junit.Assert.assertNull(filenameFilter43);
        org.junit.Assert.assertTrue("'" + licenseFilter44 + "' != '" + org.apache.rat.license.LicenseSetFactory.LicenseFilter.all + "'", licenseFilter44.equals(org.apache.rat.license.LicenseSetFactory.LicenseFilter.all));
        org.junit.Assert.assertNotNull(iLicenseSet45);
        org.junit.Assert.assertTrue("'" + addLicenseHeaders46 + "' != '" + org.apache.rat.config.AddLicenseHeaders.FALSE + "'", addLicenseHeaders46.equals(org.apache.rat.config.AddLicenseHeaders.FALSE));
        org.junit.Assert.assertNull(claimStatistic50);
        org.junit.Assert.assertTrue("'" + licenseFilter51 + "' != '" + org.apache.rat.license.LicenseSetFactory.LicenseFilter.all + "'", licenseFilter51.equals(org.apache.rat.license.LicenseSetFactory.LicenseFilter.all));
        org.junit.Assert.assertNotNull(iLicenseSet55);
        org.junit.Assert.assertNull(inputStreamIOSupplier58);
        org.junit.Assert.assertNull(log59);
        org.junit.Assert.assertTrue("'" + boolean62 + "' != '" + false + "'", boolean62 == false);
    }

    @Test
    public void test14942() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest29.test14942");
        java.io.Writer writer0 = null;
        org.apache.rat.report.xml.writer.impl.base.XmlWriter xmlWriter1 = new org.apache.rat.report.xml.writer.impl.base.XmlWriter(writer0);
        org.apache.rat.report.claim.impl.xml.SimpleXmlClaimReporter simpleXmlClaimReporter2 = new org.apache.rat.report.claim.impl.xml.SimpleXmlClaimReporter((org.apache.rat.report.xml.writer.IXmlWriter) xmlWriter1);
        org.apache.rat.report.claim.impl.xml.SimpleXmlClaimReporter simpleXmlClaimReporter3 = new org.apache.rat.report.claim.impl.xml.SimpleXmlClaimReporter((org.apache.rat.report.xml.writer.IXmlWriter) xmlWriter1);
        org.apache.rat.report.claim.impl.xml.SimpleXmlClaimReporter simpleXmlClaimReporter4 = new org.apache.rat.report.claim.impl.xml.SimpleXmlClaimReporter((org.apache.rat.report.xml.writer.IXmlWriter) xmlWriter1);
        org.apache.rat.report.claim.impl.xml.SimpleXmlClaimReporter simpleXmlClaimReporter5 = new org.apache.rat.report.claim.impl.xml.SimpleXmlClaimReporter((org.apache.rat.report.xml.writer.IXmlWriter) xmlWriter1);
        org.apache.rat.report.claim.impl.xml.SimpleXmlClaimReporter simpleXmlClaimReporter6 = new org.apache.rat.report.claim.impl.xml.SimpleXmlClaimReporter((org.apache.rat.report.xml.writer.IXmlWriter) xmlWriter1);
        org.apache.rat.report.claim.impl.xml.SimpleXmlClaimReporter simpleXmlClaimReporter7 = new org.apache.rat.report.claim.impl.xml.SimpleXmlClaimReporter((org.apache.rat.report.xml.writer.IXmlWriter) xmlWriter1);
        org.apache.rat.report.claim.impl.xml.SimpleXmlClaimReporter simpleXmlClaimReporter8 = new org.apache.rat.report.claim.impl.xml.SimpleXmlClaimReporter((org.apache.rat.report.xml.writer.IXmlWriter) xmlWriter1);
        org.apache.rat.report.claim.impl.xml.SimpleXmlClaimReporter simpleXmlClaimReporter9 = new org.apache.rat.report.claim.impl.xml.SimpleXmlClaimReporter((org.apache.rat.report.xml.writer.IXmlWriter) xmlWriter1);
        org.apache.rat.report.claim.impl.xml.SimpleXmlClaimReporter simpleXmlClaimReporter10 = new org.apache.rat.report.claim.impl.xml.SimpleXmlClaimReporter((org.apache.rat.report.xml.writer.IXmlWriter) xmlWriter1);
        org.apache.rat.report.claim.impl.xml.SimpleXmlClaimReporter simpleXmlClaimReporter11 = new org.apache.rat.report.claim.impl.xml.SimpleXmlClaimReporter((org.apache.rat.report.xml.writer.IXmlWriter) xmlWriter1);
        org.apache.rat.report.claim.impl.xml.SimpleXmlClaimReporter simpleXmlClaimReporter12 = new org.apache.rat.report.claim.impl.xml.SimpleXmlClaimReporter((org.apache.rat.report.xml.writer.IXmlWriter) xmlWriter1);
        org.apache.rat.report.claim.impl.xml.SimpleXmlClaimReporter simpleXmlClaimReporter13 = new org.apache.rat.report.claim.impl.xml.SimpleXmlClaimReporter((org.apache.rat.report.xml.writer.IXmlWriter) xmlWriter1);
        org.apache.rat.report.claim.impl.xml.SimpleXmlClaimReporter simpleXmlClaimReporter14 = new org.apache.rat.report.claim.impl.xml.SimpleXmlClaimReporter((org.apache.rat.report.xml.writer.IXmlWriter) xmlWriter1);
        org.apache.rat.report.claim.impl.xml.SimpleXmlClaimReporter simpleXmlClaimReporter15 = new org.apache.rat.report.claim.impl.xml.SimpleXmlClaimReporter((org.apache.rat.report.xml.writer.IXmlWriter) xmlWriter1);
        org.apache.rat.report.claim.impl.xml.SimpleXmlClaimReporter simpleXmlClaimReporter16 = new org.apache.rat.report.claim.impl.xml.SimpleXmlClaimReporter((org.apache.rat.report.xml.writer.IXmlWriter) xmlWriter1);
        // The following exception was thrown during execution in test generation
        try {
            simpleXmlClaimReporter16.startReport();
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
    }

    @Test
    public void test14943() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest29.test14943");
        java.io.Writer writer0 = null;
        org.apache.rat.report.xml.writer.impl.base.XmlWriter xmlWriter1 = new org.apache.rat.report.xml.writer.impl.base.XmlWriter(writer0);
        org.apache.rat.report.claim.impl.xml.SimpleXmlClaimReporter simpleXmlClaimReporter2 = new org.apache.rat.report.claim.impl.xml.SimpleXmlClaimReporter((org.apache.rat.report.xml.writer.IXmlWriter) xmlWriter1);
        org.apache.rat.report.claim.impl.xml.SimpleXmlClaimReporter simpleXmlClaimReporter3 = new org.apache.rat.report.claim.impl.xml.SimpleXmlClaimReporter((org.apache.rat.report.xml.writer.IXmlWriter) xmlWriter1);
        org.apache.rat.report.claim.impl.xml.SimpleXmlClaimReporter simpleXmlClaimReporter4 = new org.apache.rat.report.claim.impl.xml.SimpleXmlClaimReporter((org.apache.rat.report.xml.writer.IXmlWriter) xmlWriter1);
        // The following exception was thrown during execution in test generation
        try {
            org.apache.rat.report.xml.writer.IXmlWriter iXmlWriter6 = xmlWriter1.content((java.lang.CharSequence) "98cc239df17244c194849e4e6c61c9dc");
            org.junit.Assert.fail("Expected exception of type org.apache.rat.report.xml.writer.OperationNotAllowedException; message: An element must be opened before content can be written.");
        } catch (org.apache.rat.report.xml.writer.OperationNotAllowedException e) {
            // Expected exception.
        }
    }

    @Test
    public void test14944() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest29.test14944");
        java.lang.String[] strArray3 = new java.lang.String[] { "META-DATA#LICENSEFAMILYNAME" };
        boolean boolean4 = org.apache.rat.document.impl.guesser.BinaryGuesser.containsExtension("http://org/apache/rat/meta-data", strArray3);
        boolean boolean5 = org.apache.rat.document.impl.guesser.BinaryGuesser.extensionMatches("org/apache/rat/unapproved-licenses.xsl", strArray3);
        org.junit.Assert.assertNotNull(strArray3);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
    }

    @Test
    public void test14945() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest29.test14945");
        org.apache.rat.configuration.builders.CopyrightBuilder copyrightBuilder0 = org.apache.rat.analysis.IHeaderMatcher.Builder.copyright();
        org.apache.rat.configuration.builders.CopyrightBuilder copyrightBuilder2 = copyrightBuilder0.setStart("OASIS");
        org.apache.rat.analysis.IHeaderMatcher iHeaderMatcher3 = copyrightBuilder0.build();
        org.apache.rat.configuration.builders.CopyrightBuilder copyrightBuilder5 = copyrightBuilder0.setStart(".cvsignore");
        org.apache.rat.configuration.builders.CopyrightBuilder copyrightBuilder7 = copyrightBuilder0.setOwner("W3C  ");
        org.apache.rat.configuration.builders.CopyrightBuilder copyrightBuilder9 = copyrightBuilder0.setEnd("standard");
        org.apache.rat.configuration.builders.CopyrightBuilder copyrightBuilder11 = copyrightBuilder0.setStart("org/a");
        org.apache.rat.configuration.builders.CopyrightBuilder copyrightBuilder13 = copyrightBuilder0.setEnd("MathcerRefBuilder: 38e4211d-0f24-4ec0-aa5c-260c68412f39");
        org.junit.Assert.assertNotNull(copyrightBuilder0);
        org.junit.Assert.assertNotNull(copyrightBuilder2);
        org.junit.Assert.assertNotNull(iHeaderMatcher3);
        org.junit.Assert.assertNotNull(copyrightBuilder5);
        org.junit.Assert.assertNotNull(copyrightBuilder7);
        org.junit.Assert.assertNotNull(copyrightBuilder9);
        org.junit.Assert.assertNotNull(copyrightBuilder11);
        org.junit.Assert.assertNotNull(copyrightBuilder13);
    }

    @Test
    public void test14946() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest29.test14946");
        org.apache.rat.configuration.builders.CopyrightBuilder copyrightBuilder0 = org.apache.rat.analysis.IHeaderMatcher.Builder.copyright();
        java.lang.String str1 = copyrightBuilder0.toString();
        org.apache.rat.configuration.builders.CopyrightBuilder copyrightBuilder3 = copyrightBuilder0.setEnd("W3C Software Copyright");
        org.apache.rat.configuration.builders.CopyrightBuilder copyrightBuilder5 = copyrightBuilder3.setStart("");
        org.apache.rat.configuration.builders.CopyrightBuilder copyrightBuilder7 = copyrightBuilder3.setEnd("Datum [ name ='GNU General Public License, version 2',value ='021187d7-27c2-4fd9-bc74-8cc00413ee52 ']");
        org.apache.rat.configuration.builders.CopyrightBuilder copyrightBuilder9 = copyrightBuilder7.setStart("8ecb8cce-06e4-400f-84d9-ad1cf6289fda");
        java.lang.String str10 = copyrightBuilder9.toString();
        // The following exception was thrown during execution in test generation
        try {
            org.apache.rat.analysis.IHeaderMatcher iHeaderMatcher11 = copyrightBuilder9.build();
            org.junit.Assert.fail("Expected exception of type java.util.regex.PatternSyntaxException; message: Illegal character range near index 135?\\s+((\\([Cc]\\)|?)\\s+)?8ecb8cce-06e4-400f-84d9-ad1cf6289fda\\s*-\\s*Datum [ name ='GNU General Public License, version 2',value ='021187d7-27c2-4fd9-bc74-8cc00413ee52 ']?                                                                                                                                       ^");
        } catch (java.util.regex.PatternSyntaxException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(copyrightBuilder0);
        org.junit.Assert.assertEquals("'" + str1 + "' != '" + "Copyright Builder: s:null e:null o:null" + "'", str1, "Copyright Builder: s:null e:null o:null");
        org.junit.Assert.assertNotNull(copyrightBuilder3);
        org.junit.Assert.assertNotNull(copyrightBuilder5);
        org.junit.Assert.assertNotNull(copyrightBuilder7);
        org.junit.Assert.assertNotNull(copyrightBuilder9);
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "Copyright Builder: s:8ecb8cce-06e4-400f-84d9-ad1cf6289fda e:Datum [ name ='GNU General Public License, version 2',value ='021187d7-27c2-4fd9-bc74-8cc00413ee52 '] o:null" + "'", str10, "Copyright Builder: s:8ecb8cce-06e4-400f-84d9-ad1cf6289fda e:Datum [ name ='GNU General Public License, version 2',value ='021187d7-27c2-4fd9-bc74-8cc00413ee52 '] o:null");
    }

    @Test
    public void test14947() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest29.test14947");
        org.apache.rat.utils.DefaultLog defaultLog0 = org.apache.rat.utils.DefaultLog.INSTANCE;
        org.apache.rat.annotation.ApacheV2LicenseAppender apacheV2LicenseAppender1 = new org.apache.rat.annotation.ApacheV2LicenseAppender((org.apache.rat.utils.Log) defaultLog0);
        org.apache.rat.ReportConfiguration reportConfiguration2 = new org.apache.rat.ReportConfiguration((org.apache.rat.utils.Log) defaultLog0);
        org.apache.rat.license.LicenseSetFactory.LicenseFilter licenseFilter3 = org.apache.rat.license.LicenseSetFactory.LicenseFilter.approved;
        org.apache.rat.Reporter.listLicenses(reportConfiguration2, licenseFilter3);
        org.apache.rat.Defaults.Builder builder5 = org.apache.rat.Defaults.builder();
        org.apache.rat.Defaults.Builder builder6 = builder5.noDefault();
        org.apache.rat.Defaults defaults7 = builder6.build();
        org.apache.rat.Defaults.Builder builder8 = org.apache.rat.Defaults.builder();
        org.apache.rat.Defaults defaults9 = builder8.build();
        org.apache.rat.utils.Log log10 = null;
        org.apache.rat.ReportConfiguration reportConfiguration11 = new org.apache.rat.ReportConfiguration(log10);
        java.io.FilenameFilter filenameFilter12 = reportConfiguration11.getInputFileFilter();
        org.apache.rat.license.LicenseSetFactory.LicenseFilter licenseFilter13 = org.apache.rat.license.LicenseSetFactory.LicenseFilter.all;
        java.util.SortedSet<org.apache.rat.license.ILicense> iLicenseSet14 = reportConfiguration11.getLicenses(licenseFilter13);
        org.apache.rat.config.AddLicenseHeaders addLicenseHeaders15 = org.apache.rat.config.AddLicenseHeaders.FALSE;
        reportConfiguration11.setAddLicenseHeaders(addLicenseHeaders15);
        org.apache.rat.utils.Log log17 = null;
        org.apache.rat.ReportConfiguration reportConfiguration18 = new org.apache.rat.ReportConfiguration(log17);
        org.apache.rat.report.claim.ClaimStatistic claimStatistic19 = org.apache.rat.Reporter.report(reportConfiguration18);
        org.apache.rat.license.LicenseSetFactory.LicenseFilter licenseFilter20 = org.apache.rat.license.LicenseSetFactory.LicenseFilter.all;
        org.apache.rat.Reporter.listLicenses(reportConfiguration18, licenseFilter20);
        org.apache.rat.Reporter.listLicenses(reportConfiguration11, licenseFilter20);
        org.apache.rat.utils.Log log23 = null;
        org.apache.rat.ReportConfiguration reportConfiguration24 = new org.apache.rat.ReportConfiguration(log23);
        java.io.FilenameFilter filenameFilter25 = reportConfiguration24.getInputFileFilter();
        org.apache.rat.license.LicenseSetFactory.LicenseFilter licenseFilter26 = org.apache.rat.license.LicenseSetFactory.LicenseFilter.all;
        java.util.SortedSet<org.apache.rat.license.ILicense> iLicenseSet27 = reportConfiguration24.getLicenses(licenseFilter26);
        org.apache.rat.config.AddLicenseHeaders addLicenseHeaders28 = org.apache.rat.config.AddLicenseHeaders.FALSE;
        reportConfiguration24.setAddLicenseHeaders(addLicenseHeaders28);
        org.apache.rat.utils.Log log30 = null;
        org.apache.rat.ReportConfiguration reportConfiguration31 = new org.apache.rat.ReportConfiguration(log30);
        org.apache.rat.report.claim.ClaimStatistic claimStatistic32 = org.apache.rat.Reporter.report(reportConfiguration31);
        org.apache.rat.license.LicenseSetFactory.LicenseFilter licenseFilter33 = org.apache.rat.license.LicenseSetFactory.LicenseFilter.all;
        org.apache.rat.Reporter.listLicenses(reportConfiguration31, licenseFilter33);
        org.apache.rat.Reporter.listLicenses(reportConfiguration24, licenseFilter33);
        java.util.SortedSet<org.apache.rat.license.ILicenseFamily> iLicenseFamilySet36 = reportConfiguration11.getLicenseFamilies(licenseFilter33);
        java.util.SortedSet<org.apache.rat.license.ILicense> iLicenseSet37 = defaults9.getLicenses(licenseFilter33);
        java.util.SortedSet<org.apache.rat.license.ILicenseFamily> iLicenseFamilySet38 = defaults7.getLicenseFamilies(licenseFilter33);
        org.apache.rat.utils.Log log39 = null;
        org.apache.rat.ReportConfiguration reportConfiguration40 = new org.apache.rat.ReportConfiguration(log39);
        java.io.FilenameFilter filenameFilter41 = reportConfiguration40.getInputFileFilter();
        org.apache.rat.license.LicenseSetFactory.LicenseFilter licenseFilter42 = org.apache.rat.license.LicenseSetFactory.LicenseFilter.all;
        java.util.SortedSet<org.apache.rat.license.ILicense> iLicenseSet43 = reportConfiguration40.getLicenses(licenseFilter42);
        org.apache.rat.config.AddLicenseHeaders addLicenseHeaders44 = org.apache.rat.config.AddLicenseHeaders.FALSE;
        reportConfiguration40.setAddLicenseHeaders(addLicenseHeaders44);
        org.apache.rat.utils.Log log46 = null;
        org.apache.rat.ReportConfiguration reportConfiguration47 = new org.apache.rat.ReportConfiguration(log46);
        org.apache.rat.report.claim.ClaimStatistic claimStatistic48 = org.apache.rat.Reporter.report(reportConfiguration47);
        org.apache.rat.license.LicenseSetFactory.LicenseFilter licenseFilter49 = org.apache.rat.license.LicenseSetFactory.LicenseFilter.all;
        org.apache.rat.Reporter.listLicenses(reportConfiguration47, licenseFilter49);
        org.apache.rat.Reporter.listLicenses(reportConfiguration40, licenseFilter49);
        java.util.SortedSet<java.lang.String> strSet52 = defaults7.getLicenseIds(licenseFilter49);
        reportConfiguration2.setFrom(defaults7);
        org.apache.rat.license.ILicenseFamilyBuilder iLicenseFamilyBuilder54 = new org.apache.rat.license.ILicenseFamilyBuilder();
        java.lang.String str55 = iLicenseFamilyBuilder54.getCategory();
        org.apache.rat.license.ILicenseFamily.Builder builder57 = iLicenseFamilyBuilder54.setLicenseFamilyCategory("AL   ");
        java.lang.String str58 = iLicenseFamilyBuilder54.getCategory();
        org.apache.rat.license.ILicenseFamily.Builder builder60 = iLicenseFamilyBuilder54.setLicenseFamilyName("535b5d01-f553-45e5-bb29-a646e4b8b66f");
        org.apache.rat.license.ILicenseFamily.Builder builder62 = iLicenseFamilyBuilder54.setLicenseFamilyName("GPL1 ");
        reportConfiguration2.addFamily(builder62);
        org.apache.rat.license.ILicenseFamily.Builder builder65 = builder62.setLicenseFamilyCategory("b20d1cbf-e041-4e03-b0a8-ff155c59cb6d");
        org.junit.Assert.assertNotNull(defaultLog0);
        org.junit.Assert.assertTrue("'" + licenseFilter3 + "' != '" + org.apache.rat.license.LicenseSetFactory.LicenseFilter.approved + "'", licenseFilter3.equals(org.apache.rat.license.LicenseSetFactory.LicenseFilter.approved));
        org.junit.Assert.assertNotNull(builder5);
        org.junit.Assert.assertNotNull(builder6);
        org.junit.Assert.assertNotNull(defaults7);
        org.junit.Assert.assertNotNull(builder8);
        org.junit.Assert.assertNotNull(defaults9);
        org.junit.Assert.assertNull(filenameFilter12);
        org.junit.Assert.assertTrue("'" + licenseFilter13 + "' != '" + org.apache.rat.license.LicenseSetFactory.LicenseFilter.all + "'", licenseFilter13.equals(org.apache.rat.license.LicenseSetFactory.LicenseFilter.all));
        org.junit.Assert.assertNotNull(iLicenseSet14);
        org.junit.Assert.assertTrue("'" + addLicenseHeaders15 + "' != '" + org.apache.rat.config.AddLicenseHeaders.FALSE + "'", addLicenseHeaders15.equals(org.apache.rat.config.AddLicenseHeaders.FALSE));
        org.junit.Assert.assertNull(claimStatistic19);
        org.junit.Assert.assertTrue("'" + licenseFilter20 + "' != '" + org.apache.rat.license.LicenseSetFactory.LicenseFilter.all + "'", licenseFilter20.equals(org.apache.rat.license.LicenseSetFactory.LicenseFilter.all));
        org.junit.Assert.assertNull(filenameFilter25);
        org.junit.Assert.assertTrue("'" + licenseFilter26 + "' != '" + org.apache.rat.license.LicenseSetFactory.LicenseFilter.all + "'", licenseFilter26.equals(org.apache.rat.license.LicenseSetFactory.LicenseFilter.all));
        org.junit.Assert.assertNotNull(iLicenseSet27);
        org.junit.Assert.assertTrue("'" + addLicenseHeaders28 + "' != '" + org.apache.rat.config.AddLicenseHeaders.FALSE + "'", addLicenseHeaders28.equals(org.apache.rat.config.AddLicenseHeaders.FALSE));
        org.junit.Assert.assertNull(claimStatistic32);
        org.junit.Assert.assertTrue("'" + licenseFilter33 + "' != '" + org.apache.rat.license.LicenseSetFactory.LicenseFilter.all + "'", licenseFilter33.equals(org.apache.rat.license.LicenseSetFactory.LicenseFilter.all));
        org.junit.Assert.assertNotNull(iLicenseFamilySet36);
        org.junit.Assert.assertNotNull(iLicenseSet37);
        org.junit.Assert.assertNotNull(iLicenseFamilySet38);
        org.junit.Assert.assertNull(filenameFilter41);
        org.junit.Assert.assertTrue("'" + licenseFilter42 + "' != '" + org.apache.rat.license.LicenseSetFactory.LicenseFilter.all + "'", licenseFilter42.equals(org.apache.rat.license.LicenseSetFactory.LicenseFilter.all));
        org.junit.Assert.assertNotNull(iLicenseSet43);
        org.junit.Assert.assertTrue("'" + addLicenseHeaders44 + "' != '" + org.apache.rat.config.AddLicenseHeaders.FALSE + "'", addLicenseHeaders44.equals(org.apache.rat.config.AddLicenseHeaders.FALSE));
        org.junit.Assert.assertNull(claimStatistic48);
        org.junit.Assert.assertTrue("'" + licenseFilter49 + "' != '" + org.apache.rat.license.LicenseSetFactory.LicenseFilter.all + "'", licenseFilter49.equals(org.apache.rat.license.LicenseSetFactory.LicenseFilter.all));
        org.junit.Assert.assertNotNull(strSet52);
        org.junit.Assert.assertNull(str55);
        org.junit.Assert.assertNotNull(builder57);
        org.junit.Assert.assertEquals("'" + str58 + "' != '" + "AL   " + "'", str58, "AL   ");
        org.junit.Assert.assertNotNull(builder60);
        org.junit.Assert.assertNotNull(builder62);
        org.junit.Assert.assertNotNull(builder65);
    }

    @Test
    public void test14948() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest29.test14948");
        org.apache.rat.utils.Log log0 = null;
        org.apache.rat.ReportConfiguration reportConfiguration1 = new org.apache.rat.ReportConfiguration(log0);
        reportConfiguration1.addApprovedLicenseCategory(".cvsignore");
        org.apache.rat.utils.Log.Level level4 = org.apache.rat.utils.Log.Level.ERROR;
        reportConfiguration1.logLicenseCollisions(level4);
        reportConfiguration1.addApprovedLicenseCategory("73fbee1b-7ed9-442a-968e-b2b525ca688f");
        org.apache.rat.utils.Log log8 = null;
        org.apache.rat.ReportConfiguration reportConfiguration9 = new org.apache.rat.ReportConfiguration(log8);
        java.io.FilenameFilter filenameFilter10 = reportConfiguration9.getInputFileFilter();
        org.apache.rat.license.LicenseSetFactory.LicenseFilter licenseFilter11 = org.apache.rat.license.LicenseSetFactory.LicenseFilter.all;
        java.util.SortedSet<org.apache.rat.license.ILicense> iLicenseSet12 = reportConfiguration9.getLicenses(licenseFilter11);
        org.apache.rat.config.AddLicenseHeaders addLicenseHeaders13 = org.apache.rat.config.AddLicenseHeaders.FALSE;
        reportConfiguration9.setAddLicenseHeaders(addLicenseHeaders13);
        org.apache.rat.utils.Log log15 = null;
        org.apache.rat.ReportConfiguration reportConfiguration16 = new org.apache.rat.ReportConfiguration(log15);
        org.apache.rat.report.claim.ClaimStatistic claimStatistic17 = org.apache.rat.Reporter.report(reportConfiguration16);
        org.apache.rat.license.LicenseSetFactory.LicenseFilter licenseFilter18 = org.apache.rat.license.LicenseSetFactory.LicenseFilter.all;
        org.apache.rat.Reporter.listLicenses(reportConfiguration16, licenseFilter18);
        org.apache.rat.Reporter.listLicenses(reportConfiguration9, licenseFilter18);
        org.apache.rat.utils.Log log21 = null;
        org.apache.rat.ReportConfiguration reportConfiguration22 = new org.apache.rat.ReportConfiguration(log21);
        java.io.FilenameFilter filenameFilter23 = reportConfiguration22.getInputFileFilter();
        org.apache.rat.license.LicenseSetFactory.LicenseFilter licenseFilter24 = org.apache.rat.license.LicenseSetFactory.LicenseFilter.all;
        java.util.SortedSet<org.apache.rat.license.ILicense> iLicenseSet25 = reportConfiguration22.getLicenses(licenseFilter24);
        org.apache.rat.config.AddLicenseHeaders addLicenseHeaders26 = org.apache.rat.config.AddLicenseHeaders.FALSE;
        reportConfiguration22.setAddLicenseHeaders(addLicenseHeaders26);
        org.apache.rat.utils.Log log28 = null;
        org.apache.rat.ReportConfiguration reportConfiguration29 = new org.apache.rat.ReportConfiguration(log28);
        org.apache.rat.report.claim.ClaimStatistic claimStatistic30 = org.apache.rat.Reporter.report(reportConfiguration29);
        org.apache.rat.license.LicenseSetFactory.LicenseFilter licenseFilter31 = org.apache.rat.license.LicenseSetFactory.LicenseFilter.all;
        org.apache.rat.Reporter.listLicenses(reportConfiguration29, licenseFilter31);
        org.apache.rat.Reporter.listLicenses(reportConfiguration22, licenseFilter31);
        org.apache.rat.Reporter.listLicenses(reportConfiguration9, licenseFilter31);
        java.io.FilenameFilter filenameFilter35 = reportConfiguration9.getInputFileFilter();
        reportConfiguration9.setStyleReport(false);
        org.apache.rat.report.IReportable iReportable38 = null;
        reportConfiguration9.setReportable(iReportable38);
        org.apache.rat.Defaults.Builder builder41 = org.apache.rat.Defaults.builder();
        org.apache.rat.Defaults defaults42 = builder41.build();
        org.apache.rat.utils.Log log43 = null;
        org.apache.rat.ReportConfiguration reportConfiguration44 = new org.apache.rat.ReportConfiguration(log43);
        java.io.FilenameFilter filenameFilter45 = reportConfiguration44.getInputFileFilter();
        org.apache.rat.license.LicenseSetFactory.LicenseFilter licenseFilter46 = org.apache.rat.license.LicenseSetFactory.LicenseFilter.all;
        java.util.SortedSet<org.apache.rat.license.ILicense> iLicenseSet47 = reportConfiguration44.getLicenses(licenseFilter46);
        org.apache.rat.config.AddLicenseHeaders addLicenseHeaders48 = org.apache.rat.config.AddLicenseHeaders.FALSE;
        reportConfiguration44.setAddLicenseHeaders(addLicenseHeaders48);
        org.apache.rat.utils.Log log50 = null;
        org.apache.rat.ReportConfiguration reportConfiguration51 = new org.apache.rat.ReportConfiguration(log50);
        org.apache.rat.report.claim.ClaimStatistic claimStatistic52 = org.apache.rat.Reporter.report(reportConfiguration51);
        org.apache.rat.license.LicenseSetFactory.LicenseFilter licenseFilter53 = org.apache.rat.license.LicenseSetFactory.LicenseFilter.all;
        org.apache.rat.Reporter.listLicenses(reportConfiguration51, licenseFilter53);
        org.apache.rat.Reporter.listLicenses(reportConfiguration44, licenseFilter53);
        org.apache.rat.utils.Log log56 = null;
        org.apache.rat.ReportConfiguration reportConfiguration57 = new org.apache.rat.ReportConfiguration(log56);
        java.io.FilenameFilter filenameFilter58 = reportConfiguration57.getInputFileFilter();
        org.apache.rat.license.LicenseSetFactory.LicenseFilter licenseFilter59 = org.apache.rat.license.LicenseSetFactory.LicenseFilter.all;
        java.util.SortedSet<org.apache.rat.license.ILicense> iLicenseSet60 = reportConfiguration57.getLicenses(licenseFilter59);
        org.apache.rat.config.AddLicenseHeaders addLicenseHeaders61 = org.apache.rat.config.AddLicenseHeaders.FALSE;
        reportConfiguration57.setAddLicenseHeaders(addLicenseHeaders61);
        org.apache.rat.utils.Log log63 = null;
        org.apache.rat.ReportConfiguration reportConfiguration64 = new org.apache.rat.ReportConfiguration(log63);
        org.apache.rat.report.claim.ClaimStatistic claimStatistic65 = org.apache.rat.Reporter.report(reportConfiguration64);
        org.apache.rat.license.LicenseSetFactory.LicenseFilter licenseFilter66 = org.apache.rat.license.LicenseSetFactory.LicenseFilter.all;
        org.apache.rat.Reporter.listLicenses(reportConfiguration64, licenseFilter66);
        org.apache.rat.Reporter.listLicenses(reportConfiguration57, licenseFilter66);
        java.util.SortedSet<org.apache.rat.license.ILicenseFamily> iLicenseFamilySet69 = reportConfiguration44.getLicenseFamilies(licenseFilter66);
        java.util.SortedSet<org.apache.rat.license.ILicense> iLicenseSet70 = defaults42.getLicenses(licenseFilter66);
        org.apache.rat.utils.ReportingSet<org.apache.rat.license.ILicense> iLicenseSet71 = new org.apache.rat.utils.ReportingSet<org.apache.rat.license.ILicense>(iLicenseSet70);
        org.apache.rat.license.ILicense iLicense72 = org.apache.rat.license.LicenseSetFactory.search("TMF", iLicenseSet70);
        reportConfiguration9.addLicense(iLicense72);
        java.lang.String str74 = iLicense72.derivedFrom();
        reportConfiguration1.addLicense(iLicense72);
        java.lang.String str76 = iLicense72.derivedFrom();
        org.apache.rat.license.ILicenseFamily iLicenseFamily77 = iLicense72.getLicenseFamily();
        java.util.SortedSet<org.apache.rat.license.ILicenseFamily> iLicenseFamilySet80 = org.apache.rat.license.LicenseFamilySetFactory.emptyLicenseFamilySet();
        org.apache.rat.policy.DefaultPolicy defaultPolicy81 = new org.apache.rat.policy.DefaultPolicy((java.util.Collection<org.apache.rat.license.ILicenseFamily>) iLicenseFamilySet80);
        org.apache.rat.license.ILicenseFamily iLicenseFamily82 = org.apache.rat.license.LicenseFamilySetFactory.search("MANIFEST.MF", iLicenseFamilySet80);
        org.apache.rat.license.ILicenseFamily iLicenseFamily83 = org.apache.rat.license.LicenseFamilySetFactory.search("Copyright Builder: s:null e:W3C Software Copyright o:null", iLicenseFamilySet80);
        org.apache.rat.policy.DefaultPolicy defaultPolicy84 = new org.apache.rat.policy.DefaultPolicy((java.util.Collection<org.apache.rat.license.ILicenseFamily>) iLicenseFamilySet80);
        org.apache.rat.license.ILicenseFamilyBuilder iLicenseFamilyBuilder85 = new org.apache.rat.license.ILicenseFamilyBuilder();
        org.apache.rat.license.ILicenseFamily.Builder builder87 = iLicenseFamilyBuilder85.setLicenseFamilyCategory("Modified BSD License");
        org.apache.rat.license.ILicenseFamily.Builder builder89 = iLicenseFamilyBuilder85.setLicenseFamilyCategory("6486879f-fc81-4b57-aec7-c4c77d540c30");
        org.apache.rat.license.ILicenseFamily.Builder builder91 = iLicenseFamilyBuilder85.setLicenseFamilyName("MathcerRefBuilder: ");
        org.apache.rat.license.ILicenseFamily iLicenseFamily92 = iLicenseFamilyBuilder85.build();
        defaultPolicy84.add(iLicenseFamily92);
        int int94 = iLicenseFamily77.compareTo(iLicenseFamily92);
        org.junit.Assert.assertTrue("'" + level4 + "' != '" + org.apache.rat.utils.Log.Level.ERROR + "'", level4.equals(org.apache.rat.utils.Log.Level.ERROR));
        org.junit.Assert.assertNull(filenameFilter10);
        org.junit.Assert.assertTrue("'" + licenseFilter11 + "' != '" + org.apache.rat.license.LicenseSetFactory.LicenseFilter.all + "'", licenseFilter11.equals(org.apache.rat.license.LicenseSetFactory.LicenseFilter.all));
        org.junit.Assert.assertNotNull(iLicenseSet12);
        org.junit.Assert.assertTrue("'" + addLicenseHeaders13 + "' != '" + org.apache.rat.config.AddLicenseHeaders.FALSE + "'", addLicenseHeaders13.equals(org.apache.rat.config.AddLicenseHeaders.FALSE));
        org.junit.Assert.assertNull(claimStatistic17);
        org.junit.Assert.assertTrue("'" + licenseFilter18 + "' != '" + org.apache.rat.license.LicenseSetFactory.LicenseFilter.all + "'", licenseFilter18.equals(org.apache.rat.license.LicenseSetFactory.LicenseFilter.all));
        org.junit.Assert.assertNull(filenameFilter23);
        org.junit.Assert.assertTrue("'" + licenseFilter24 + "' != '" + org.apache.rat.license.LicenseSetFactory.LicenseFilter.all + "'", licenseFilter24.equals(org.apache.rat.license.LicenseSetFactory.LicenseFilter.all));
        org.junit.Assert.assertNotNull(iLicenseSet25);
        org.junit.Assert.assertTrue("'" + addLicenseHeaders26 + "' != '" + org.apache.rat.config.AddLicenseHeaders.FALSE + "'", addLicenseHeaders26.equals(org.apache.rat.config.AddLicenseHeaders.FALSE));
        org.junit.Assert.assertNull(claimStatistic30);
        org.junit.Assert.assertTrue("'" + licenseFilter31 + "' != '" + org.apache.rat.license.LicenseSetFactory.LicenseFilter.all + "'", licenseFilter31.equals(org.apache.rat.license.LicenseSetFactory.LicenseFilter.all));
        org.junit.Assert.assertNull(filenameFilter35);
        org.junit.Assert.assertNotNull(builder41);
        org.junit.Assert.assertNotNull(defaults42);
        org.junit.Assert.assertNull(filenameFilter45);
        org.junit.Assert.assertTrue("'" + licenseFilter46 + "' != '" + org.apache.rat.license.LicenseSetFactory.LicenseFilter.all + "'", licenseFilter46.equals(org.apache.rat.license.LicenseSetFactory.LicenseFilter.all));
        org.junit.Assert.assertNotNull(iLicenseSet47);
        org.junit.Assert.assertTrue("'" + addLicenseHeaders48 + "' != '" + org.apache.rat.config.AddLicenseHeaders.FALSE + "'", addLicenseHeaders48.equals(org.apache.rat.config.AddLicenseHeaders.FALSE));
        org.junit.Assert.assertNull(claimStatistic52);
        org.junit.Assert.assertTrue("'" + licenseFilter53 + "' != '" + org.apache.rat.license.LicenseSetFactory.LicenseFilter.all + "'", licenseFilter53.equals(org.apache.rat.license.LicenseSetFactory.LicenseFilter.all));
        org.junit.Assert.assertNull(filenameFilter58);
        org.junit.Assert.assertTrue("'" + licenseFilter59 + "' != '" + org.apache.rat.license.LicenseSetFactory.LicenseFilter.all + "'", licenseFilter59.equals(org.apache.rat.license.LicenseSetFactory.LicenseFilter.all));
        org.junit.Assert.assertNotNull(iLicenseSet60);
        org.junit.Assert.assertTrue("'" + addLicenseHeaders61 + "' != '" + org.apache.rat.config.AddLicenseHeaders.FALSE + "'", addLicenseHeaders61.equals(org.apache.rat.config.AddLicenseHeaders.FALSE));
        org.junit.Assert.assertNull(claimStatistic65);
        org.junit.Assert.assertTrue("'" + licenseFilter66 + "' != '" + org.apache.rat.license.LicenseSetFactory.LicenseFilter.all + "'", licenseFilter66.equals(org.apache.rat.license.LicenseSetFactory.LicenseFilter.all));
        org.junit.Assert.assertNotNull(iLicenseFamilySet69);
        org.junit.Assert.assertNotNull(iLicenseSet70);
        org.junit.Assert.assertNotNull(iLicense72);
        org.junit.Assert.assertEquals("'" + str74 + "' != '" + "BSD-3" + "'", str74, "BSD-3");
        org.junit.Assert.assertEquals("'" + str76 + "' != '" + "BSD-3" + "'", str76, "BSD-3");
        org.junit.Assert.assertNotNull(iLicenseFamily77);
        org.junit.Assert.assertNotNull(iLicenseFamilySet80);
        org.junit.Assert.assertNull(iLicenseFamily82);
        org.junit.Assert.assertNull(iLicenseFamily83);
        org.junit.Assert.assertNotNull(builder87);
        org.junit.Assert.assertNotNull(builder89);
        org.junit.Assert.assertNotNull(builder91);
        org.junit.Assert.assertNotNull(iLicenseFamily92);
        org.junit.Assert.assertTrue("'" + int94 + "' != '" + 12 + "'", int94 == 12);
    }

    @Test
    public void test14949() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest29.test14949");
        org.apache.rat.utils.DefaultLog defaultLog0 = org.apache.rat.utils.DefaultLog.INSTANCE;
        org.apache.rat.utils.Log log1 = null;
        org.apache.rat.ReportConfiguration reportConfiguration2 = new org.apache.rat.ReportConfiguration(log1);
        reportConfiguration2.addApprovedLicenseCategory(".cvsignore");
        org.apache.rat.utils.Log.Level level5 = org.apache.rat.utils.Log.Level.ERROR;
        reportConfiguration2.logFamilyCollisions(level5);
        defaultLog0.setLevel(level5);
        org.apache.rat.utils.Log log8 = null;
        org.apache.rat.ReportConfiguration reportConfiguration9 = new org.apache.rat.ReportConfiguration(log8);
        java.io.FilenameFilter filenameFilter10 = reportConfiguration9.getInputFileFilter();
        org.apache.rat.license.LicenseSetFactory.LicenseFilter licenseFilter11 = org.apache.rat.license.LicenseSetFactory.LicenseFilter.all;
        java.util.SortedSet<org.apache.rat.license.ILicense> iLicenseSet12 = reportConfiguration9.getLicenses(licenseFilter11);
        org.apache.rat.config.AddLicenseHeaders addLicenseHeaders13 = org.apache.rat.config.AddLicenseHeaders.FALSE;
        reportConfiguration9.setAddLicenseHeaders(addLicenseHeaders13);
        org.apache.rat.utils.Log log15 = null;
        org.apache.rat.ReportConfiguration reportConfiguration16 = new org.apache.rat.ReportConfiguration(log15);
        org.apache.rat.report.claim.ClaimStatistic claimStatistic17 = org.apache.rat.Reporter.report(reportConfiguration16);
        org.apache.rat.license.LicenseSetFactory.LicenseFilter licenseFilter18 = org.apache.rat.license.LicenseSetFactory.LicenseFilter.all;
        org.apache.rat.Reporter.listLicenses(reportConfiguration16, licenseFilter18);
        org.apache.rat.Reporter.listLicenses(reportConfiguration9, licenseFilter18);
        org.apache.rat.utils.Log log21 = null;
        org.apache.rat.ReportConfiguration reportConfiguration22 = new org.apache.rat.ReportConfiguration(log21);
        java.io.FilenameFilter filenameFilter23 = reportConfiguration22.getInputFileFilter();
        org.apache.rat.license.LicenseSetFactory.LicenseFilter licenseFilter24 = org.apache.rat.license.LicenseSetFactory.LicenseFilter.all;
        java.util.SortedSet<org.apache.rat.license.ILicense> iLicenseSet25 = reportConfiguration22.getLicenses(licenseFilter24);
        org.apache.rat.config.AddLicenseHeaders addLicenseHeaders26 = org.apache.rat.config.AddLicenseHeaders.FALSE;
        reportConfiguration22.setAddLicenseHeaders(addLicenseHeaders26);
        org.apache.rat.utils.Log log28 = null;
        org.apache.rat.ReportConfiguration reportConfiguration29 = new org.apache.rat.ReportConfiguration(log28);
        org.apache.rat.report.claim.ClaimStatistic claimStatistic30 = org.apache.rat.Reporter.report(reportConfiguration29);
        org.apache.rat.license.LicenseSetFactory.LicenseFilter licenseFilter31 = org.apache.rat.license.LicenseSetFactory.LicenseFilter.all;
        org.apache.rat.Reporter.listLicenses(reportConfiguration29, licenseFilter31);
        org.apache.rat.Reporter.listLicenses(reportConfiguration22, licenseFilter31);
        org.apache.rat.Reporter.listLicenses(reportConfiguration9, licenseFilter31);
        org.apache.rat.utils.Log log35 = null;
        org.apache.rat.ReportConfiguration reportConfiguration36 = new org.apache.rat.ReportConfiguration(log35);
        org.apache.commons.io.function.IOSupplier<java.io.OutputStream> outputStreamIOSupplier37 = reportConfiguration36.getOutput();
        reportConfiguration9.setOut(outputStreamIOSupplier37);
        org.apache.rat.utils.Log log39 = null;
        org.apache.rat.ReportConfiguration reportConfiguration40 = new org.apache.rat.ReportConfiguration(log39);
        org.apache.rat.report.claim.ClaimStatistic claimStatistic41 = org.apache.rat.Reporter.report(reportConfiguration40);
        org.apache.rat.utils.Log log42 = null;
        org.apache.rat.ReportConfiguration reportConfiguration43 = new org.apache.rat.ReportConfiguration(log42);
        org.apache.rat.report.claim.ClaimStatistic claimStatistic44 = org.apache.rat.Reporter.report(reportConfiguration43);
        org.apache.rat.utils.ReportingSet.Options options45 = org.apache.rat.utils.ReportingSet.Options.OVERWRITE;
        reportConfiguration43.licenseDuplicateOption(options45);
        reportConfiguration40.familyDuplicateOption(options45);
        reportConfiguration9.licenseDuplicateOption(options45);
        reportConfiguration9.addApprovedLicenseCategory("W3C Document Copyright");
        org.apache.rat.utils.Log log51 = null;
        org.apache.rat.ReportConfiguration reportConfiguration52 = new org.apache.rat.ReportConfiguration(log51);
        reportConfiguration52.addApprovedLicenseCategory(".cvsignore");
        org.apache.rat.utils.Log.Level level55 = org.apache.rat.utils.Log.Level.ERROR;
        reportConfiguration52.logLicenseCollisions(level55);
        reportConfiguration9.logLicenseCollisions(level55);
        defaultLog0.log(level55, "GNU General Public License, version 1");
        org.apache.rat.annotation.ApacheV2LicenseAppender apacheV2LicenseAppender61 = new org.apache.rat.annotation.ApacheV2LicenseAppender((org.apache.rat.utils.Log) defaultLog0, "W3C  ");
        org.apache.rat.annotation.ApacheV2LicenseAppender apacheV2LicenseAppender62 = new org.apache.rat.annotation.ApacheV2LicenseAppender((org.apache.rat.utils.Log) defaultLog0);
        java.lang.Object obj63 = null;
        defaultLog0.info(obj63);
        org.apache.rat.utils.Log.Level level65 = defaultLog0.getLevel();
        org.apache.rat.annotation.ApacheV2LicenseAppender apacheV2LicenseAppender67 = new org.apache.rat.annotation.ApacheV2LicenseAppender((org.apache.rat.utils.Log) defaultLog0, "a023dc4d-fa59-495e-8a26-ea366aed4ae0");
        apacheV2LicenseAppender67.setForce(true);
        java.io.File file70 = null;
        // The following exception was thrown during execution in test generation
        try {
            java.lang.String str71 = apacheV2LicenseAppender67.getLicenseHeader(file70);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(defaultLog0);
        org.junit.Assert.assertTrue("'" + level5 + "' != '" + org.apache.rat.utils.Log.Level.ERROR + "'", level5.equals(org.apache.rat.utils.Log.Level.ERROR));
        org.junit.Assert.assertNull(filenameFilter10);
        org.junit.Assert.assertTrue("'" + licenseFilter11 + "' != '" + org.apache.rat.license.LicenseSetFactory.LicenseFilter.all + "'", licenseFilter11.equals(org.apache.rat.license.LicenseSetFactory.LicenseFilter.all));
        org.junit.Assert.assertNotNull(iLicenseSet12);
        org.junit.Assert.assertTrue("'" + addLicenseHeaders13 + "' != '" + org.apache.rat.config.AddLicenseHeaders.FALSE + "'", addLicenseHeaders13.equals(org.apache.rat.config.AddLicenseHeaders.FALSE));
        org.junit.Assert.assertNull(claimStatistic17);
        org.junit.Assert.assertTrue("'" + licenseFilter18 + "' != '" + org.apache.rat.license.LicenseSetFactory.LicenseFilter.all + "'", licenseFilter18.equals(org.apache.rat.license.LicenseSetFactory.LicenseFilter.all));
        org.junit.Assert.assertNull(filenameFilter23);
        org.junit.Assert.assertTrue("'" + licenseFilter24 + "' != '" + org.apache.rat.license.LicenseSetFactory.LicenseFilter.all + "'", licenseFilter24.equals(org.apache.rat.license.LicenseSetFactory.LicenseFilter.all));
        org.junit.Assert.assertNotNull(iLicenseSet25);
        org.junit.Assert.assertTrue("'" + addLicenseHeaders26 + "' != '" + org.apache.rat.config.AddLicenseHeaders.FALSE + "'", addLicenseHeaders26.equals(org.apache.rat.config.AddLicenseHeaders.FALSE));
        org.junit.Assert.assertNull(claimStatistic30);
        org.junit.Assert.assertTrue("'" + licenseFilter31 + "' != '" + org.apache.rat.license.LicenseSetFactory.LicenseFilter.all + "'", licenseFilter31.equals(org.apache.rat.license.LicenseSetFactory.LicenseFilter.all));
        org.junit.Assert.assertNotNull(outputStreamIOSupplier37);
        org.junit.Assert.assertNull(claimStatistic41);
        org.junit.Assert.assertNull(claimStatistic44);
        org.junit.Assert.assertTrue("'" + options45 + "' != '" + org.apache.rat.utils.ReportingSet.Options.OVERWRITE + "'", options45.equals(org.apache.rat.utils.ReportingSet.Options.OVERWRITE));
        org.junit.Assert.assertTrue("'" + level55 + "' != '" + org.apache.rat.utils.Log.Level.ERROR + "'", level55.equals(org.apache.rat.utils.Log.Level.ERROR));
        org.junit.Assert.assertTrue("'" + level65 + "' != '" + org.apache.rat.utils.Log.Level.ERROR + "'", level65.equals(org.apache.rat.utils.Log.Level.ERROR));
    }

    @Test
    public void test14950() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest29.test14950");
        org.apache.rat.utils.DefaultLog defaultLog0 = org.apache.rat.utils.DefaultLog.INSTANCE;
        org.apache.rat.license.ILicense.Builder builder1 = org.apache.rat.license.ILicense.builder();
        org.apache.rat.license.ILicense.Builder builder3 = builder1.setLicenseFamilyCategory("");
        org.apache.rat.analysis.matchers.CopyrightMatcher copyrightMatcher7 = new org.apache.rat.analysis.matchers.CopyrightMatcher("", "GPL1 ", "hi!");
        org.apache.rat.analysis.IHeaderMatcher.State state8 = copyrightMatcher7.finalizeState();
        org.apache.rat.license.ILicense.Builder builder9 = builder3.setMatcher((org.apache.rat.analysis.IHeaderMatcher) copyrightMatcher7);
        org.apache.rat.license.ILicense.Builder builder11 = builder9.setLicenseFamilyCategory("");
        defaultLog0.error((java.lang.Object) builder11);
        org.apache.rat.utils.Log.Level level13 = org.apache.rat.utils.Log.Level.INFO;
        defaultLog0.log(level13, "JAVA");
        org.apache.rat.utils.Log.Level level16 = org.apache.rat.utils.Log.Level.WARN;
        defaultLog0.log(level16, "");
        org.apache.rat.annotation.ApacheV2LicenseAppender apacheV2LicenseAppender19 = new org.apache.rat.annotation.ApacheV2LicenseAppender((org.apache.rat.utils.Log) defaultLog0);
        org.apache.rat.Defaults.Builder builder20 = org.apache.rat.Defaults.builder();
        org.apache.rat.Defaults defaults21 = builder20.build();
        org.apache.rat.Defaults.Builder builder22 = builder20.noDefault();
        org.apache.rat.Defaults.Builder builder23 = builder20.noDefault();
        org.apache.rat.Defaults.Builder builder25 = builder20.add("Datum [ name ='http://org/apache/rat/meta-data#LicenseFamilyName',value ='Academic Free License, Version 2.1 ']");
        org.apache.rat.Defaults.Builder builder27 = builder20.remove("GNU General Public License, version 3");
        org.apache.rat.Defaults.Builder builder29 = builder20.add("4a00cf7d-fe76-423e-917e-b03bbae6b8a5");
        java.lang.Throwable throwable30 = null;
        // The following exception was thrown during execution in test generation
        try {
            defaultLog0.error((java.lang.Object) builder29, throwable30);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(defaultLog0);
        org.junit.Assert.assertNotNull(builder1);
        org.junit.Assert.assertNotNull(builder3);
        org.junit.Assert.assertTrue("'" + state8 + "' != '" + org.apache.rat.analysis.IHeaderMatcher.State.f + "'", state8.equals(org.apache.rat.analysis.IHeaderMatcher.State.f));
        org.junit.Assert.assertNotNull(builder9);
        org.junit.Assert.assertNotNull(builder11);
        org.junit.Assert.assertTrue("'" + level13 + "' != '" + org.apache.rat.utils.Log.Level.INFO + "'", level13.equals(org.apache.rat.utils.Log.Level.INFO));
        org.junit.Assert.assertTrue("'" + level16 + "' != '" + org.apache.rat.utils.Log.Level.WARN + "'", level16.equals(org.apache.rat.utils.Log.Level.WARN));
        org.junit.Assert.assertNotNull(builder20);
        org.junit.Assert.assertNotNull(defaults21);
        org.junit.Assert.assertNotNull(builder22);
        org.junit.Assert.assertNotNull(builder23);
        org.junit.Assert.assertNotNull(builder25);
        org.junit.Assert.assertNotNull(builder27);
        org.junit.Assert.assertNotNull(builder29);
    }

    @Test
    public void test14951() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest29.test14951");
        org.apache.rat.analysis.matchers.FullTextMatcher fullTextMatcher1 = new org.apache.rat.analysis.matchers.FullTextMatcher("notice");
        boolean boolean3 = fullTextMatcher1.doMatch("2953E6CB-20A5-4DCF-A9F5-85C51CC8C635");
        boolean boolean5 = fullTextMatcher1.doMatch("NotBuilder: SpdxBuilder: ef7a8b13-64c3-4510-bb0c-dbf208e1e73f");
        boolean boolean7 = fullTextMatcher1.doMatch("SpdxBuilder641dafc113c345d48272f36f10392c53");
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
    }

    @Test
    public void test14952() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest29.test14952");
        org.apache.rat.configuration.builders.NotBuilder notBuilder0 = org.apache.rat.analysis.IHeaderMatcher.Builder.not();
        boolean boolean1 = notBuilder0.hasId();
        org.apache.rat.configuration.builders.CopyrightBuilder copyrightBuilder2 = org.apache.rat.analysis.IHeaderMatcher.Builder.copyright();
        org.apache.rat.configuration.builders.CopyrightBuilder copyrightBuilder4 = copyrightBuilder2.setStart("OASIS");
        org.apache.rat.analysis.IHeaderMatcher iHeaderMatcher5 = copyrightBuilder2.build();
        org.apache.rat.configuration.builders.CopyrightBuilder copyrightBuilder7 = copyrightBuilder2.setStart(".cvsignore");
        java.lang.String str8 = copyrightBuilder7.toString();
        org.apache.rat.configuration.builders.AbstractBuilder abstractBuilder9 = notBuilder0.add((org.apache.rat.analysis.IHeaderMatcher.Builder) copyrightBuilder7);
        java.lang.String str10 = notBuilder0.toString();
        java.util.List<org.apache.rat.analysis.IHeaderMatcher> iHeaderMatcherList11 = notBuilder0.getChildren();
        java.lang.String str12 = notBuilder0.toString();
        boolean boolean13 = notBuilder0.hasId();
        org.junit.Assert.assertNotNull(notBuilder0);
        org.junit.Assert.assertTrue("'" + boolean1 + "' != '" + false + "'", boolean1 == false);
        org.junit.Assert.assertNotNull(copyrightBuilder2);
        org.junit.Assert.assertNotNull(copyrightBuilder4);
        org.junit.Assert.assertNotNull(iHeaderMatcher5);
        org.junit.Assert.assertNotNull(copyrightBuilder7);
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "Copyright Builder: s:.cvsignore e:null o:null" + "'", str8, "Copyright Builder: s:.cvsignore e:null o:null");
        org.junit.Assert.assertNotNull(abstractBuilder9);
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "NotBuilder: Copyright Builder: s:.cvsignore e:null o:null" + "'", str10, "NotBuilder: Copyright Builder: s:.cvsignore e:null o:null");
        org.junit.Assert.assertNotNull(iHeaderMatcherList11);
        org.junit.Assert.assertEquals("'" + str12 + "' != '" + "NotBuilder: Copyright Builder: s:.cvsignore e:null o:null" + "'", str12, "NotBuilder: Copyright Builder: s:.cvsignore e:null o:null");
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
    }

    @Test
    public void test14953() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest29.test14953");
        org.apache.rat.config.SourceCodeManagementSystems sourceCodeManagementSystems0 = org.apache.rat.config.SourceCodeManagementSystems.BAZAAR;
        boolean boolean1 = sourceCodeManagementSystems0.hasIgnoreFile();
        boolean boolean2 = sourceCodeManagementSystems0.hasIgnoreFile();
        java.util.List<java.lang.String> strList3 = sourceCodeManagementSystems0.getExclusions();
        boolean boolean4 = sourceCodeManagementSystems0.hasIgnoreFile();
        java.lang.String str5 = sourceCodeManagementSystems0.getIgnoreFile();
        java.util.List<java.lang.String> strList6 = sourceCodeManagementSystems0.getExclusions();
        org.junit.Assert.assertTrue("'" + sourceCodeManagementSystems0 + "' != '" + org.apache.rat.config.SourceCodeManagementSystems.BAZAAR + "'", sourceCodeManagementSystems0.equals(org.apache.rat.config.SourceCodeManagementSystems.BAZAAR));
        org.junit.Assert.assertTrue("'" + boolean1 + "' != '" + true + "'", boolean1 == true);
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + true + "'", boolean2 == true);
        org.junit.Assert.assertNotNull(strList3);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + true + "'", boolean4 == true);
        org.junit.Assert.assertEquals("'" + str5 + "' != '" + ".bzrignore" + "'", str5, ".bzrignore");
        org.junit.Assert.assertNotNull(strList6);
    }

    @Test
    public void test14954() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest29.test14954");
        org.apache.rat.utils.Log log0 = null;
        org.apache.rat.ReportConfiguration reportConfiguration1 = new org.apache.rat.ReportConfiguration(log0);
        org.apache.rat.report.claim.ClaimStatistic claimStatistic2 = org.apache.rat.Reporter.report(reportConfiguration1);
        org.apache.rat.utils.Log log3 = null;
        org.apache.rat.ReportConfiguration reportConfiguration4 = new org.apache.rat.ReportConfiguration(log3);
        org.apache.rat.report.claim.ClaimStatistic claimStatistic5 = org.apache.rat.Reporter.report(reportConfiguration4);
        org.apache.rat.utils.ReportingSet.Options options6 = org.apache.rat.utils.ReportingSet.Options.OVERWRITE;
        reportConfiguration4.licenseDuplicateOption(options6);
        reportConfiguration1.familyDuplicateOption(options6);
        org.apache.commons.io.function.IOSupplier<java.io.PrintWriter> printWriterIOSupplier9 = reportConfiguration1.getWriter();
        boolean boolean10 = reportConfiguration1.isAddingLicensesForced();
        org.apache.rat.utils.Log log11 = null;
        org.apache.rat.ReportConfiguration reportConfiguration12 = new org.apache.rat.ReportConfiguration(log11);
        reportConfiguration12.addApprovedLicenseCategory(".cvsignore");
        org.apache.rat.utils.Log.Level level15 = org.apache.rat.utils.Log.Level.ERROR;
        reportConfiguration12.logFamilyCollisions(level15);
        reportConfiguration1.logLicenseCollisions(level15);
        org.apache.rat.utils.Log log18 = null;
        org.apache.rat.ReportConfiguration reportConfiguration19 = new org.apache.rat.ReportConfiguration(log18);
        java.io.FilenameFilter filenameFilter20 = reportConfiguration19.getInputFileFilter();
        java.io.FilenameFilter filenameFilter21 = reportConfiguration19.getInputFileFilter();
        org.apache.rat.utils.Log log23 = null;
        org.apache.rat.ReportConfiguration reportConfiguration24 = new org.apache.rat.ReportConfiguration(log23);
        java.io.FilenameFilter filenameFilter25 = reportConfiguration24.getInputFileFilter();
        org.apache.rat.license.LicenseSetFactory.LicenseFilter licenseFilter26 = org.apache.rat.license.LicenseSetFactory.LicenseFilter.all;
        java.util.SortedSet<org.apache.rat.license.ILicense> iLicenseSet27 = reportConfiguration24.getLicenses(licenseFilter26);
        org.apache.rat.config.AddLicenseHeaders addLicenseHeaders28 = org.apache.rat.config.AddLicenseHeaders.FALSE;
        reportConfiguration24.setAddLicenseHeaders(addLicenseHeaders28);
        org.apache.rat.utils.Log log30 = null;
        org.apache.rat.ReportConfiguration reportConfiguration31 = new org.apache.rat.ReportConfiguration(log30);
        org.apache.rat.report.claim.ClaimStatistic claimStatistic32 = org.apache.rat.Reporter.report(reportConfiguration31);
        org.apache.rat.license.LicenseSetFactory.LicenseFilter licenseFilter33 = org.apache.rat.license.LicenseSetFactory.LicenseFilter.all;
        org.apache.rat.Reporter.listLicenses(reportConfiguration31, licenseFilter33);
        org.apache.rat.Reporter.listLicenses(reportConfiguration24, licenseFilter33);
        org.apache.rat.utils.Log log36 = null;
        org.apache.rat.ReportConfiguration reportConfiguration37 = new org.apache.rat.ReportConfiguration(log36);
        java.io.FilenameFilter filenameFilter38 = reportConfiguration37.getInputFileFilter();
        org.apache.rat.license.LicenseSetFactory.LicenseFilter licenseFilter39 = org.apache.rat.license.LicenseSetFactory.LicenseFilter.all;
        java.util.SortedSet<org.apache.rat.license.ILicense> iLicenseSet40 = reportConfiguration37.getLicenses(licenseFilter39);
        org.apache.rat.config.AddLicenseHeaders addLicenseHeaders41 = org.apache.rat.config.AddLicenseHeaders.FALSE;
        reportConfiguration37.setAddLicenseHeaders(addLicenseHeaders41);
        org.apache.rat.utils.Log log43 = null;
        org.apache.rat.ReportConfiguration reportConfiguration44 = new org.apache.rat.ReportConfiguration(log43);
        org.apache.rat.report.claim.ClaimStatistic claimStatistic45 = org.apache.rat.Reporter.report(reportConfiguration44);
        org.apache.rat.license.LicenseSetFactory.LicenseFilter licenseFilter46 = org.apache.rat.license.LicenseSetFactory.LicenseFilter.all;
        org.apache.rat.Reporter.listLicenses(reportConfiguration44, licenseFilter46);
        org.apache.rat.Reporter.listLicenses(reportConfiguration37, licenseFilter46);
        org.apache.rat.Reporter.listLicenses(reportConfiguration24, licenseFilter46);
        org.apache.rat.utils.Log log50 = null;
        org.apache.rat.ReportConfiguration reportConfiguration51 = new org.apache.rat.ReportConfiguration(log50);
        org.apache.commons.io.function.IOSupplier<java.io.OutputStream> outputStreamIOSupplier52 = reportConfiguration51.getOutput();
        reportConfiguration24.setOut(outputStreamIOSupplier52);
        org.apache.rat.utils.Log.Level level54 = org.apache.rat.utils.Log.Level.WARN;
        reportConfiguration24.logLicenseCollisions(level54);
        org.apache.commons.io.filefilter.IOFileFilter iOFileFilter56 = reportConfiguration24.getDirectoryFilter();
        org.apache.rat.configuration.Format format58 = org.apache.rat.configuration.Format.XML;
        org.apache.rat.configuration.LicenseReader licenseReader59 = format58.licenseReader();
        org.apache.rat.configuration.MatcherReader matcherReader60 = format58.matcherReader();
        org.apache.rat.configuration.LicenseReader licenseReader61 = format58.licenseReader();
        java.util.SortedSet<org.apache.rat.license.ILicense> iLicenseSet62 = licenseReader61.readLicenses();
        org.apache.rat.license.ILicense iLicense63 = org.apache.rat.license.LicenseSetFactory.search("Datum [ name ='http://org/apache/rat/meta-data#LicenseFamilyCategory',value ='GPL1  ']", iLicenseSet62);
        reportConfiguration24.addLicensesIfNotPresent((java.util.Collection<org.apache.rat.license.ILicense>) iLicenseSet62);
        org.apache.rat.utils.ReportingSet<org.apache.rat.license.ILicense> iLicenseSet65 = new org.apache.rat.utils.ReportingSet<org.apache.rat.license.ILicense>(iLicenseSet62);
        org.apache.rat.license.ILicense iLicense66 = org.apache.rat.license.LicenseSetFactory.search("f5f3fb9b-540a-43ef-a018-8ce5779e23f4", iLicenseSet62);
        reportConfiguration19.addLicenses((java.util.Collection<org.apache.rat.license.ILicense>) iLicenseSet62);
        org.apache.rat.utils.Log log68 = null;
        org.apache.rat.ReportConfiguration reportConfiguration69 = new org.apache.rat.ReportConfiguration(log68);
        org.apache.rat.report.claim.ClaimStatistic claimStatistic70 = org.apache.rat.Reporter.report(reportConfiguration69);
        org.apache.commons.io.function.IOSupplier<java.io.InputStream> inputStreamIOSupplier71 = reportConfiguration69.getStyleSheet();
        org.apache.rat.analysis.license.FullTextMatchingLicense fullTextMatchingLicense72 = new org.apache.rat.analysis.license.FullTextMatchingLicense();
        fullTextMatchingLicense72.setLicenseFamilyName("hi!");
        java.lang.String str75 = fullTextMatchingLicense72.getLicenseFamilyCategory();
        java.lang.String str76 = fullTextMatchingLicense72.getLicenseFamilyName();
        fullTextMatchingLicense72.setLicenseFamilyName("SpdxBuilder: null");
        fullTextMatchingLicense72.setLicenseFamilyCategory("TMF");
        org.apache.rat.license.ILicenseFamily iLicenseFamily81 = fullTextMatchingLicense72.getLicenseFamily();
        java.lang.String str82 = iLicenseFamily81.getFamilyName();
        java.lang.String str83 = iLicenseFamily81.getFamilyName();
        reportConfiguration69.addApprovedLicenseCategory(iLicenseFamily81);
        org.apache.rat.utils.Log log85 = null;
        org.apache.rat.ReportConfiguration reportConfiguration86 = new org.apache.rat.ReportConfiguration(log85);
        org.apache.commons.io.function.IOSupplier<java.io.OutputStream> outputStreamIOSupplier87 = reportConfiguration86.getOutput();
        reportConfiguration86.setCopyrightMessage("MANIFEST.MF");
        org.apache.rat.utils.Log log90 = null;
        org.apache.rat.ReportConfiguration reportConfiguration91 = new org.apache.rat.ReportConfiguration(log90);
        java.io.FilenameFilter filenameFilter92 = reportConfiguration91.getInputFileFilter();
        org.apache.rat.config.AddLicenseHeaders addLicenseHeaders93 = org.apache.rat.config.AddLicenseHeaders.TRUE;
        reportConfiguration91.setAddLicenseHeaders(addLicenseHeaders93);
        reportConfiguration86.setAddLicenseHeaders(addLicenseHeaders93);
        reportConfiguration69.setAddLicenseHeaders(addLicenseHeaders93);
        reportConfiguration19.setAddLicenseHeaders(addLicenseHeaders93);
        reportConfiguration1.setAddLicenseHeaders(addLicenseHeaders93);
        org.junit.Assert.assertNull(claimStatistic2);
        org.junit.Assert.assertNull(claimStatistic5);
        org.junit.Assert.assertTrue("'" + options6 + "' != '" + org.apache.rat.utils.ReportingSet.Options.OVERWRITE + "'", options6.equals(org.apache.rat.utils.ReportingSet.Options.OVERWRITE));
        org.junit.Assert.assertNotNull(printWriterIOSupplier9);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertTrue("'" + level15 + "' != '" + org.apache.rat.utils.Log.Level.ERROR + "'", level15.equals(org.apache.rat.utils.Log.Level.ERROR));
        org.junit.Assert.assertNull(filenameFilter20);
        org.junit.Assert.assertNull(filenameFilter21);
        org.junit.Assert.assertNull(filenameFilter25);
        org.junit.Assert.assertTrue("'" + licenseFilter26 + "' != '" + org.apache.rat.license.LicenseSetFactory.LicenseFilter.all + "'", licenseFilter26.equals(org.apache.rat.license.LicenseSetFactory.LicenseFilter.all));
        org.junit.Assert.assertNotNull(iLicenseSet27);
        org.junit.Assert.assertTrue("'" + addLicenseHeaders28 + "' != '" + org.apache.rat.config.AddLicenseHeaders.FALSE + "'", addLicenseHeaders28.equals(org.apache.rat.config.AddLicenseHeaders.FALSE));
        org.junit.Assert.assertNull(claimStatistic32);
        org.junit.Assert.assertTrue("'" + licenseFilter33 + "' != '" + org.apache.rat.license.LicenseSetFactory.LicenseFilter.all + "'", licenseFilter33.equals(org.apache.rat.license.LicenseSetFactory.LicenseFilter.all));
        org.junit.Assert.assertNull(filenameFilter38);
        org.junit.Assert.assertTrue("'" + licenseFilter39 + "' != '" + org.apache.rat.license.LicenseSetFactory.LicenseFilter.all + "'", licenseFilter39.equals(org.apache.rat.license.LicenseSetFactory.LicenseFilter.all));
        org.junit.Assert.assertNotNull(iLicenseSet40);
        org.junit.Assert.assertTrue("'" + addLicenseHeaders41 + "' != '" + org.apache.rat.config.AddLicenseHeaders.FALSE + "'", addLicenseHeaders41.equals(org.apache.rat.config.AddLicenseHeaders.FALSE));
        org.junit.Assert.assertNull(claimStatistic45);
        org.junit.Assert.assertTrue("'" + licenseFilter46 + "' != '" + org.apache.rat.license.LicenseSetFactory.LicenseFilter.all + "'", licenseFilter46.equals(org.apache.rat.license.LicenseSetFactory.LicenseFilter.all));
        org.junit.Assert.assertNotNull(outputStreamIOSupplier52);
        org.junit.Assert.assertTrue("'" + level54 + "' != '" + org.apache.rat.utils.Log.Level.WARN + "'", level54.equals(org.apache.rat.utils.Log.Level.WARN));
        org.junit.Assert.assertNotNull(iOFileFilter56);
        org.junit.Assert.assertTrue("'" + format58 + "' != '" + org.apache.rat.configuration.Format.XML + "'", format58.equals(org.apache.rat.configuration.Format.XML));
        org.junit.Assert.assertNotNull(licenseReader59);
        org.junit.Assert.assertNotNull(matcherReader60);
        org.junit.Assert.assertNotNull(licenseReader61);
        org.junit.Assert.assertNotNull(iLicenseSet62);
        org.junit.Assert.assertNull(iLicense63);
        org.junit.Assert.assertNull(iLicense66);
        org.junit.Assert.assertNull(claimStatistic70);
        org.junit.Assert.assertNull(inputStreamIOSupplier71);
        org.junit.Assert.assertNull(str75);
        org.junit.Assert.assertEquals("'" + str76 + "' != '" + "hi!" + "'", str76, "hi!");
        org.junit.Assert.assertNotNull(iLicenseFamily81);
        org.junit.Assert.assertEquals("'" + str82 + "' != '" + "SpdxBuilder: null" + "'", str82, "SpdxBuilder: null");
        org.junit.Assert.assertEquals("'" + str83 + "' != '" + "SpdxBuilder: null" + "'", str83, "SpdxBuilder: null");
        org.junit.Assert.assertNotNull(outputStreamIOSupplier87);
        org.junit.Assert.assertNull(filenameFilter92);
        org.junit.Assert.assertTrue("'" + addLicenseHeaders93 + "' != '" + org.apache.rat.config.AddLicenseHeaders.TRUE + "'", addLicenseHeaders93.equals(org.apache.rat.config.AddLicenseHeaders.TRUE));
    }

    @Test
    public void test14955() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest29.test14955");
        java.io.File file0 = null;
        java.util.regex.Pattern pattern1 = null;
        org.apache.rat.utils.Log log2 = null;
        org.apache.rat.ReportConfiguration reportConfiguration3 = new org.apache.rat.ReportConfiguration(log2);
        java.io.FilenameFilter filenameFilter4 = reportConfiguration3.getInputFileFilter();
        org.apache.rat.license.LicenseSetFactory.LicenseFilter licenseFilter5 = org.apache.rat.license.LicenseSetFactory.LicenseFilter.all;
        java.util.SortedSet<org.apache.rat.license.ILicense> iLicenseSet6 = reportConfiguration3.getLicenses(licenseFilter5);
        org.apache.rat.config.AddLicenseHeaders addLicenseHeaders7 = org.apache.rat.config.AddLicenseHeaders.FALSE;
        reportConfiguration3.setAddLicenseHeaders(addLicenseHeaders7);
        org.apache.rat.utils.Log log9 = null;
        org.apache.rat.ReportConfiguration reportConfiguration10 = new org.apache.rat.ReportConfiguration(log9);
        org.apache.rat.report.claim.ClaimStatistic claimStatistic11 = org.apache.rat.Reporter.report(reportConfiguration10);
        org.apache.rat.license.LicenseSetFactory.LicenseFilter licenseFilter12 = org.apache.rat.license.LicenseSetFactory.LicenseFilter.all;
        org.apache.rat.Reporter.listLicenses(reportConfiguration10, licenseFilter12);
        org.apache.rat.Reporter.listLicenses(reportConfiguration3, licenseFilter12);
        org.apache.rat.utils.Log log15 = null;
        org.apache.rat.ReportConfiguration reportConfiguration16 = new org.apache.rat.ReportConfiguration(log15);
        java.io.FilenameFilter filenameFilter17 = reportConfiguration16.getInputFileFilter();
        org.apache.rat.license.LicenseSetFactory.LicenseFilter licenseFilter18 = org.apache.rat.license.LicenseSetFactory.LicenseFilter.all;
        java.util.SortedSet<org.apache.rat.license.ILicense> iLicenseSet19 = reportConfiguration16.getLicenses(licenseFilter18);
        org.apache.rat.config.AddLicenseHeaders addLicenseHeaders20 = org.apache.rat.config.AddLicenseHeaders.FALSE;
        reportConfiguration16.setAddLicenseHeaders(addLicenseHeaders20);
        org.apache.rat.utils.Log log22 = null;
        org.apache.rat.ReportConfiguration reportConfiguration23 = new org.apache.rat.ReportConfiguration(log22);
        org.apache.rat.report.claim.ClaimStatistic claimStatistic24 = org.apache.rat.Reporter.report(reportConfiguration23);
        org.apache.rat.license.LicenseSetFactory.LicenseFilter licenseFilter25 = org.apache.rat.license.LicenseSetFactory.LicenseFilter.all;
        org.apache.rat.Reporter.listLicenses(reportConfiguration23, licenseFilter25);
        org.apache.rat.Reporter.listLicenses(reportConfiguration16, licenseFilter25);
        org.apache.rat.Reporter.listLicenses(reportConfiguration3, licenseFilter25);
        java.io.FilenameFilter filenameFilter29 = reportConfiguration3.getInputFileFilter();
        reportConfiguration3.setStyleReport(false);
        org.apache.rat.license.ILicense iLicense32 = null;
        reportConfiguration3.addLicense(iLicense32);
        boolean boolean34 = reportConfiguration3.isStyleReport();
        org.apache.rat.utils.Log log35 = null;
        org.apache.rat.ReportConfiguration reportConfiguration36 = new org.apache.rat.ReportConfiguration(log35);
        org.apache.rat.report.claim.ClaimStatistic claimStatistic37 = org.apache.rat.Reporter.report(reportConfiguration36);
        org.apache.rat.utils.Log log38 = null;
        org.apache.rat.ReportConfiguration reportConfiguration39 = new org.apache.rat.ReportConfiguration(log38);
        org.apache.rat.report.claim.ClaimStatistic claimStatistic40 = org.apache.rat.Reporter.report(reportConfiguration39);
        org.apache.rat.utils.ReportingSet.Options options41 = org.apache.rat.utils.ReportingSet.Options.OVERWRITE;
        reportConfiguration39.licenseDuplicateOption(options41);
        reportConfiguration36.familyDuplicateOption(options41);
        org.apache.commons.io.function.IOSupplier<java.io.PrintWriter> printWriterIOSupplier44 = reportConfiguration36.getWriter();
        boolean boolean45 = reportConfiguration36.isAddingLicensesForced();
        java.io.FilenameFilter filenameFilter46 = reportConfiguration36.getInputFileFilter();
        java.io.FilenameFilter filenameFilter47 = reportConfiguration36.getInputFileFilter();
        boolean boolean48 = reportConfiguration36.isStyleReport();
        org.apache.commons.io.function.IOSupplier<java.io.OutputStream> outputStreamIOSupplier49 = reportConfiguration36.getOutput();
        org.apache.commons.io.filefilter.IOFileFilter iOFileFilter50 = reportConfiguration36.getDirectoryFilter();
        org.apache.commons.io.filefilter.IOFileFilter iOFileFilter51 = reportConfiguration36.getDirectoryFilter();
        java.nio.file.Path path52 = null;
        java.nio.file.attribute.BasicFileAttributes basicFileAttributes53 = null;
        java.nio.file.FileVisitResult fileVisitResult54 = iOFileFilter51.accept(path52, basicFileAttributes53);
        reportConfiguration3.setInputFileFilter((java.io.FilenameFilter) iOFileFilter51);
        // The following exception was thrown during execution in test generation
        try {
            org.apache.rat.walker.DirectoryWalker directoryWalker56 = new org.apache.rat.walker.DirectoryWalker(file0, pattern1, iOFileFilter51);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNull(filenameFilter4);
        org.junit.Assert.assertTrue("'" + licenseFilter5 + "' != '" + org.apache.rat.license.LicenseSetFactory.LicenseFilter.all + "'", licenseFilter5.equals(org.apache.rat.license.LicenseSetFactory.LicenseFilter.all));
        org.junit.Assert.assertNotNull(iLicenseSet6);
        org.junit.Assert.assertTrue("'" + addLicenseHeaders7 + "' != '" + org.apache.rat.config.AddLicenseHeaders.FALSE + "'", addLicenseHeaders7.equals(org.apache.rat.config.AddLicenseHeaders.FALSE));
        org.junit.Assert.assertNull(claimStatistic11);
        org.junit.Assert.assertTrue("'" + licenseFilter12 + "' != '" + org.apache.rat.license.LicenseSetFactory.LicenseFilter.all + "'", licenseFilter12.equals(org.apache.rat.license.LicenseSetFactory.LicenseFilter.all));
        org.junit.Assert.assertNull(filenameFilter17);
        org.junit.Assert.assertTrue("'" + licenseFilter18 + "' != '" + org.apache.rat.license.LicenseSetFactory.LicenseFilter.all + "'", licenseFilter18.equals(org.apache.rat.license.LicenseSetFactory.LicenseFilter.all));
        org.junit.Assert.assertNotNull(iLicenseSet19);
        org.junit.Assert.assertTrue("'" + addLicenseHeaders20 + "' != '" + org.apache.rat.config.AddLicenseHeaders.FALSE + "'", addLicenseHeaders20.equals(org.apache.rat.config.AddLicenseHeaders.FALSE));
        org.junit.Assert.assertNull(claimStatistic24);
        org.junit.Assert.assertTrue("'" + licenseFilter25 + "' != '" + org.apache.rat.license.LicenseSetFactory.LicenseFilter.all + "'", licenseFilter25.equals(org.apache.rat.license.LicenseSetFactory.LicenseFilter.all));
        org.junit.Assert.assertNull(filenameFilter29);
        org.junit.Assert.assertTrue("'" + boolean34 + "' != '" + false + "'", boolean34 == false);
        org.junit.Assert.assertNull(claimStatistic37);
        org.junit.Assert.assertNull(claimStatistic40);
        org.junit.Assert.assertTrue("'" + options41 + "' != '" + org.apache.rat.utils.ReportingSet.Options.OVERWRITE + "'", options41.equals(org.apache.rat.utils.ReportingSet.Options.OVERWRITE));
        org.junit.Assert.assertNotNull(printWriterIOSupplier44);
        org.junit.Assert.assertTrue("'" + boolean45 + "' != '" + false + "'", boolean45 == false);
        org.junit.Assert.assertNull(filenameFilter46);
        org.junit.Assert.assertNull(filenameFilter47);
        org.junit.Assert.assertTrue("'" + boolean48 + "' != '" + true + "'", boolean48 == true);
        org.junit.Assert.assertNotNull(outputStreamIOSupplier49);
        org.junit.Assert.assertNotNull(iOFileFilter50);
        org.junit.Assert.assertNotNull(iOFileFilter51);
        org.junit.Assert.assertTrue("'" + fileVisitResult54 + "' != '" + java.nio.file.FileVisitResult.TERMINATE + "'", fileVisitResult54.equals(java.nio.file.FileVisitResult.TERMINATE));
    }

    @Test
    public void test14956() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest29.test14956");
        org.apache.rat.utils.Log log0 = null;
        org.apache.rat.ReportConfiguration reportConfiguration1 = new org.apache.rat.ReportConfiguration(log0);
        org.apache.rat.report.claim.ClaimStatistic claimStatistic2 = org.apache.rat.Reporter.report(reportConfiguration1);
        org.apache.commons.io.function.IOSupplier<java.io.OutputStream> outputStreamIOSupplier3 = reportConfiguration1.getOutput();
        boolean boolean4 = reportConfiguration1.isAddingLicensesForced();
        org.apache.rat.license.ILicense[] iLicenseArray5 = new org.apache.rat.license.ILicense[] {};
        java.util.TreeSet<org.apache.rat.license.ILicense> iLicenseSet6 = new java.util.TreeSet<org.apache.rat.license.ILicense>();
        boolean boolean7 = java.util.Collections.addAll((java.util.Collection<org.apache.rat.license.ILicense>) iLicenseSet6, iLicenseArray5);
        java.lang.String[] strArray20 = new java.lang.String[] { "GPL2 ", "GPL1 ", "notice", "http://org/apache/rat/meta-data#LicenseFamilyName", "notice", "GPL2 ", "http://org/apache/rat/meta-data#LicenseFamilyName", "", "GPL2 ", "", "GPL1 ", "hi!" };
        java.util.ArrayList<java.lang.String> strList21 = new java.util.ArrayList<java.lang.String>();
        boolean boolean22 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strList21, strArray20);
        org.apache.rat.license.LicenseSetFactory licenseSetFactory23 = new org.apache.rat.license.LicenseSetFactory((java.util.SortedSet<org.apache.rat.license.ILicense>) iLicenseSet6, (java.util.Collection<java.lang.String>) strList21);
        reportConfiguration1.addLicenses((java.util.Collection<org.apache.rat.license.ILicense>) iLicenseSet6);
        reportConfiguration1.setStyleReport(true);
        org.apache.commons.io.function.IOSupplier<java.io.OutputStream> outputStreamIOSupplier27 = reportConfiguration1.getOutput();
        java.lang.String[] strArray33 = new java.lang.String[] { "http://org/apache/rat/meta-data#LicenseFamilyCategory", "Datum [ name ='http://org/apache/rat/meta-data#LicenseFamilyCategory',value ='GPL1  ']", "MANIFEST.MF", "AllBuilder:", "The MIT License" };
        org.apache.rat.utils.ReportingSet<java.lang.String> strSet34 = new org.apache.rat.utils.ReportingSet<java.lang.String>();
        boolean boolean35 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strSet34, strArray33);
        boolean boolean37 = strSet34.addIfNotPresent("http://org/apache/rat/meta-data#LicenseFamilyName");
        boolean boolean39 = strSet34.addIfNotPresent("ef7a8b13-64c3-4510-bb0c-dbf208e1e73f");
        java.util.stream.Stream<java.lang.String> strStream40 = strSet34.stream();
        org.apache.rat.utils.DefaultLog defaultLog41 = org.apache.rat.utils.DefaultLog.INSTANCE;
        org.apache.rat.utils.Log log42 = null;
        org.apache.rat.ReportConfiguration reportConfiguration43 = new org.apache.rat.ReportConfiguration(log42);
        reportConfiguration43.addApprovedLicenseCategory(".cvsignore");
        org.apache.rat.utils.Log.Level level46 = org.apache.rat.utils.Log.Level.ERROR;
        reportConfiguration43.logFamilyCollisions(level46);
        defaultLog41.setLevel(level46);
        org.apache.rat.utils.ReportingSet<java.lang.String> strSet49 = strSet34.setLogLevel(level46);
        org.apache.rat.utils.ReportingSet<java.lang.String> strSet51 = strSet34.headSet("d4148d3a-edbc-4672-b347-0fa619553f91");
        strSet51.clear();
        reportConfiguration1.addApprovedLicenseCategories((java.util.Collection<java.lang.String>) strSet51);
        org.apache.rat.utils.ReportingSet<java.lang.String> strSet55 = strSet51.tailSet("SPDX:");
        org.apache.rat.policy.DefaultPolicy[] defaultPolicyArray56 = new org.apache.rat.policy.DefaultPolicy[] {};
        org.apache.rat.policy.DefaultPolicy[] defaultPolicyArray57 = strSet55.toArray(defaultPolicyArray56);
        org.apache.rat.document.impl.util.DocumentAnalyserMultiplexer documentAnalyserMultiplexer58 = new org.apache.rat.document.impl.util.DocumentAnalyserMultiplexer((org.apache.rat.document.IDocumentAnalyser[]) defaultPolicyArray57);
        org.junit.Assert.assertNull(claimStatistic2);
        org.junit.Assert.assertNotNull(outputStreamIOSupplier3);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertNotNull(iLicenseArray5);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertNotNull(strArray20);
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + true + "'", boolean22 == true);
        org.junit.Assert.assertNotNull(outputStreamIOSupplier27);
        org.junit.Assert.assertNotNull(strArray33);
        org.junit.Assert.assertTrue("'" + boolean35 + "' != '" + true + "'", boolean35 == true);
        org.junit.Assert.assertTrue("'" + boolean37 + "' != '" + true + "'", boolean37 == true);
        org.junit.Assert.assertTrue("'" + boolean39 + "' != '" + true + "'", boolean39 == true);
        org.junit.Assert.assertNotNull(strStream40);
        org.junit.Assert.assertNotNull(defaultLog41);
        org.junit.Assert.assertTrue("'" + level46 + "' != '" + org.apache.rat.utils.Log.Level.ERROR + "'", level46.equals(org.apache.rat.utils.Log.Level.ERROR));
        org.junit.Assert.assertNotNull(strSet49);
        org.junit.Assert.assertNotNull(strSet51);
        org.junit.Assert.assertNotNull(strSet55);
        org.junit.Assert.assertNotNull(defaultPolicyArray56);
        org.junit.Assert.assertNotNull(defaultPolicyArray57);
    }

    @Test
    public void test14957() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest29.test14957");
        boolean boolean1 = org.apache.rat.document.impl.guesser.BinaryGuesser.isBytecode("398ffede-0433-4a77-8c45-5224348d9444");
        org.junit.Assert.assertTrue("'" + boolean1 + "' != '" + false + "'", boolean1 == false);
    }

    @Test
    public void test14958() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest29.test14958");
        java.util.Map<java.lang.String, java.lang.String> strMap2 = null;
        // The following exception was thrown during execution in test generation
        try {
            org.apache.rat.api.ContentType contentType3 = new org.apache.rat.api.ContentType(".hgignore", "e1c779c1-1196-4511-a2e8-5a3ea82bde26", strMap2);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
    }

    @Test
    public void test14959() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest29.test14959");
        org.apache.rat.configuration.builders.SpdxBuilder spdxBuilder0 = org.apache.rat.analysis.IHeaderMatcher.Builder.spdx();
        java.lang.String str1 = spdxBuilder0.toString();
        org.apache.rat.configuration.builders.SpdxBuilder spdxBuilder3 = spdxBuilder0.setName("ef7a8b13-64c3-4510-bb0c-dbf208e1e73f");
        java.lang.String str4 = spdxBuilder3.toString();
        java.lang.String str5 = spdxBuilder3.toString();
        org.apache.rat.configuration.builders.SpdxBuilder spdxBuilder7 = spdxBuilder3.setName("RegexBuilder: ef75a6e8-7197-4e9e-83bf-f8b367e6b3c5");
        org.junit.Assert.assertNotNull(spdxBuilder0);
        org.junit.Assert.assertEquals("'" + str1 + "' != '" + "SpdxBuilder: null" + "'", str1, "SpdxBuilder: null");
        org.junit.Assert.assertNotNull(spdxBuilder3);
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "SpdxBuilder: ef7a8b13-64c3-4510-bb0c-dbf208e1e73f" + "'", str4, "SpdxBuilder: ef7a8b13-64c3-4510-bb0c-dbf208e1e73f");
        org.junit.Assert.assertEquals("'" + str5 + "' != '" + "SpdxBuilder: ef7a8b13-64c3-4510-bb0c-dbf208e1e73f" + "'", str5, "SpdxBuilder: ef7a8b13-64c3-4510-bb0c-dbf208e1e73f");
        org.junit.Assert.assertNotNull(spdxBuilder7);
    }

    @Test
    public void test14960() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest29.test14960");
        org.apache.rat.license.ILicenseFamily[] iLicenseFamilyArray0 = new org.apache.rat.license.ILicenseFamily[] {};
        java.util.ArrayList<org.apache.rat.license.ILicenseFamily> iLicenseFamilyList1 = new java.util.ArrayList<org.apache.rat.license.ILicenseFamily>();
        boolean boolean2 = java.util.Collections.addAll((java.util.Collection<org.apache.rat.license.ILicenseFamily>) iLicenseFamilyList1, iLicenseFamilyArray0);
        org.apache.rat.policy.DefaultPolicy defaultPolicy3 = new org.apache.rat.policy.DefaultPolicy((java.util.Collection<org.apache.rat.license.ILicenseFamily>) iLicenseFamilyList1);
        org.apache.rat.api.Document document4 = null;
        defaultPolicy3.analyse(document4);
        java.util.SortedSet<org.apache.rat.license.ILicenseFamily> iLicenseFamilySet6 = defaultPolicy3.getApprovedLicenseNames();
        org.apache.rat.api.Document document7 = null;
        defaultPolicy3.analyse(document7);
        org.apache.rat.api.Document document9 = null;
        defaultPolicy3.analyse(document9);
        org.apache.rat.api.Document document11 = null;
        // The following exception was thrown during execution in test generation
        try {
            defaultPolicy3.reportLicenseApprovalClaim(document11, true);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(iLicenseFamilyArray0);
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + false + "'", boolean2 == false);
        org.junit.Assert.assertNotNull(iLicenseFamilySet6);
    }

    @Test
    public void test14961() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest29.test14961");
        java.lang.String[] strArray5 = new java.lang.String[] { "http://org/apache/rat/meta-data#LicenseFamilyCategory", "Datum [ name ='http://org/apache/rat/meta-data#LicenseFamilyCategory',value ='GPL1  ']", "MANIFEST.MF", "AllBuilder:", "The MIT License" };
        org.apache.rat.utils.ReportingSet<java.lang.String> strSet6 = new org.apache.rat.utils.ReportingSet<java.lang.String>();
        boolean boolean7 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strSet6, strArray5);
        boolean boolean9 = strSet6.addIfNotPresent("http://org/apache/rat/meta-data#LicenseFamilyName");
        boolean boolean11 = strSet6.addIfNotPresent("ef7a8b13-64c3-4510-bb0c-dbf208e1e73f");
        java.util.function.Function<java.lang.String, java.lang.String> strFunction12 = null;
        org.apache.rat.utils.ReportingSet<java.lang.String> strSet13 = strSet6.setMsgFormat(strFunction12);
        boolean boolean14 = strSet6.isEmpty();
        java.util.Comparator<? super java.lang.String> wildcardComparator15 = strSet6.comparator();
        org.apache.rat.utils.ReportingSet<java.lang.String> strSet17 = strSet6.headSet("archive null");
        org.apache.rat.utils.ReportingSet<java.lang.String> strSet19 = strSet17.headSet("77509541-7301-4b4f-b283-f39fe4654431");
        boolean boolean21 = strSet17.equals((java.lang.Object) "da9d818e-cf4c-475d-a59b-31d1a0c007a6");
        org.junit.Assert.assertNotNull(strArray5);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + true + "'", boolean7 == true);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + true + "'", boolean9 == true);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + true + "'", boolean11 == true);
        org.junit.Assert.assertNotNull(strSet13);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
        org.junit.Assert.assertNull(wildcardComparator15);
        org.junit.Assert.assertNotNull(strSet17);
        org.junit.Assert.assertNotNull(strSet19);
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + false + "'", boolean21 == false);
    }

    @Test
    public void test14962() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest29.test14962");
        org.apache.rat.license.ILicense.Builder builder0 = org.apache.rat.license.ILicense.builder();
        org.apache.rat.license.ILicense.Builder builder2 = builder0.setLicenseFamilyCategory("");
        org.apache.rat.license.ILicense.Builder builder4 = builder2.setDerivedFrom("GEN  ");
        org.apache.rat.license.ILicense.Builder builder6 = builder4.setId("DOJO ");
        org.apache.rat.configuration.builders.CopyrightBuilder copyrightBuilder7 = org.apache.rat.analysis.IHeaderMatcher.Builder.copyright();
        java.lang.String str8 = copyrightBuilder7.toString();
        org.apache.rat.license.ILicense.Builder builder9 = builder4.setMatcher((org.apache.rat.analysis.IHeaderMatcher.Builder) copyrightBuilder7);
        org.apache.rat.analysis.IHeaderMatcher iHeaderMatcher10 = copyrightBuilder7.build();
        org.apache.rat.configuration.builders.CopyrightBuilder copyrightBuilder12 = copyrightBuilder7.setOwner("TextBuilder: Datum [ name ='http:...");
        org.apache.rat.configuration.builders.CopyrightBuilder copyrightBuilder14 = copyrightBuilder7.setOwner("PLAIN-RAT.XSL");
        org.apache.rat.configuration.builders.CopyrightBuilder copyrightBuilder16 = copyrightBuilder7.setOwner("a1abad46-6a98-44f8-aa20-7839919a8270");
        org.apache.rat.configuration.builders.CopyrightBuilder copyrightBuilder18 = copyrightBuilder7.setOwner("REGEXBUILDER: NULL");
        java.lang.String str19 = copyrightBuilder7.toString();
        org.junit.Assert.assertNotNull(builder0);
        org.junit.Assert.assertNotNull(builder2);
        org.junit.Assert.assertNotNull(builder4);
        org.junit.Assert.assertNotNull(builder6);
        org.junit.Assert.assertNotNull(copyrightBuilder7);
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "Copyright Builder: s:null e:null o:null" + "'", str8, "Copyright Builder: s:null e:null o:null");
        org.junit.Assert.assertNotNull(builder9);
        org.junit.Assert.assertNotNull(iHeaderMatcher10);
        org.junit.Assert.assertNotNull(copyrightBuilder12);
        org.junit.Assert.assertNotNull(copyrightBuilder14);
        org.junit.Assert.assertNotNull(copyrightBuilder16);
        org.junit.Assert.assertNotNull(copyrightBuilder18);
        org.junit.Assert.assertEquals("'" + str19 + "' != '" + "Copyright Builder: s:null e:null o:REGEXBUILDER: NULL" + "'", str19, "Copyright Builder: s:null e:null o:REGEXBUILDER: NULL");
    }

    @Test
    public void test14963() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest29.test14963");
        org.apache.rat.utils.Log log0 = null;
        org.apache.rat.ReportConfiguration reportConfiguration1 = new org.apache.rat.ReportConfiguration(log0);
        org.apache.rat.report.claim.ClaimStatistic claimStatistic2 = org.apache.rat.Reporter.report(reportConfiguration1);
        org.apache.rat.utils.ReportingSet.Options options3 = org.apache.rat.utils.ReportingSet.Options.OVERWRITE;
        reportConfiguration1.licenseDuplicateOption(options3);
        java.util.SortedSet<org.apache.rat.license.ILicenseFamily> iLicenseFamilySet6 = org.apache.rat.license.LicenseFamilySetFactory.emptyLicenseFamilySet();
        org.apache.rat.license.ILicenseFamily iLicenseFamily7 = org.apache.rat.license.LicenseFamilySetFactory.search("http://org/apache/rat/meta-data", iLicenseFamilySet6);
        org.apache.rat.policy.DefaultPolicy defaultPolicy8 = new org.apache.rat.policy.DefaultPolicy((java.util.Collection<org.apache.rat.license.ILicenseFamily>) iLicenseFamilySet6);
        reportConfiguration1.addFamilies((java.util.Collection<org.apache.rat.license.ILicenseFamily>) iLicenseFamilySet6);
        java.lang.String[] strArray15 = new java.lang.String[] { "http://org/apache/rat/meta-data#LicenseFamilyCategory", "Datum [ name ='http://org/apache/rat/meta-data#LicenseFamilyCategory',value ='GPL1  ']", "MANIFEST.MF", "AllBuilder:", "The MIT License" };
        org.apache.rat.utils.ReportingSet<java.lang.String> strSet16 = new org.apache.rat.utils.ReportingSet<java.lang.String>();
        boolean boolean17 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strSet16, strArray15);
        boolean boolean19 = strSet16.addIfNotPresent("http://org/apache/rat/meta-data#LicenseFamilyName");
        java.util.Iterator<java.lang.String> strItor20 = strSet16.iterator();
        java.lang.Object[] objArray21 = strSet16.toArray();
        org.apache.rat.license.ILicense[] iLicenseArray22 = new org.apache.rat.license.ILicense[] {};
        java.util.TreeSet<org.apache.rat.license.ILicense> iLicenseSet23 = new java.util.TreeSet<org.apache.rat.license.ILicense>();
        boolean boolean24 = java.util.Collections.addAll((java.util.Collection<org.apache.rat.license.ILicense>) iLicenseSet23, iLicenseArray22);
        java.lang.String[] strArray37 = new java.lang.String[] { "GPL2 ", "GPL1 ", "notice", "http://org/apache/rat/meta-data#LicenseFamilyName", "notice", "GPL2 ", "http://org/apache/rat/meta-data#LicenseFamilyName", "", "GPL2 ", "", "GPL1 ", "hi!" };
        java.util.ArrayList<java.lang.String> strList38 = new java.util.ArrayList<java.lang.String>();
        boolean boolean39 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strList38, strArray37);
        org.apache.rat.license.LicenseSetFactory licenseSetFactory40 = new org.apache.rat.license.LicenseSetFactory((java.util.SortedSet<org.apache.rat.license.ILicense>) iLicenseSet23, (java.util.Collection<java.lang.String>) strList38);
        org.apache.rat.license.LicenseSetFactory.LicenseFilter licenseFilter41 = org.apache.rat.license.LicenseSetFactory.LicenseFilter.all;
        java.util.SortedSet<org.apache.rat.license.ILicenseFamily> iLicenseFamilySet42 = licenseSetFactory40.getLicenseFamilies(licenseFilter41);
        org.apache.rat.license.ILicense[] iLicenseArray43 = new org.apache.rat.license.ILicense[] {};
        java.util.TreeSet<org.apache.rat.license.ILicense> iLicenseSet44 = new java.util.TreeSet<org.apache.rat.license.ILicense>();
        boolean boolean45 = java.util.Collections.addAll((java.util.Collection<org.apache.rat.license.ILicense>) iLicenseSet44, iLicenseArray43);
        java.lang.String[] strArray58 = new java.lang.String[] { "GPL2 ", "GPL1 ", "notice", "http://org/apache/rat/meta-data#LicenseFamilyName", "notice", "GPL2 ", "http://org/apache/rat/meta-data#LicenseFamilyName", "", "GPL2 ", "", "GPL1 ", "hi!" };
        java.util.ArrayList<java.lang.String> strList59 = new java.util.ArrayList<java.lang.String>();
        boolean boolean60 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strList59, strArray58);
        org.apache.rat.license.LicenseSetFactory licenseSetFactory61 = new org.apache.rat.license.LicenseSetFactory((java.util.SortedSet<org.apache.rat.license.ILicense>) iLicenseSet44, (java.util.Collection<java.lang.String>) strList59);
        org.apache.rat.utils.Log log62 = null;
        org.apache.rat.ReportConfiguration reportConfiguration63 = new org.apache.rat.ReportConfiguration(log62);
        java.io.FilenameFilter filenameFilter64 = reportConfiguration63.getInputFileFilter();
        org.apache.rat.license.LicenseSetFactory.LicenseFilter licenseFilter65 = org.apache.rat.license.LicenseSetFactory.LicenseFilter.all;
        java.util.SortedSet<org.apache.rat.license.ILicense> iLicenseSet66 = reportConfiguration63.getLicenses(licenseFilter65);
        org.apache.rat.config.AddLicenseHeaders addLicenseHeaders67 = org.apache.rat.config.AddLicenseHeaders.FALSE;
        reportConfiguration63.setAddLicenseHeaders(addLicenseHeaders67);
        org.apache.rat.utils.Log log69 = null;
        org.apache.rat.ReportConfiguration reportConfiguration70 = new org.apache.rat.ReportConfiguration(log69);
        org.apache.rat.report.claim.ClaimStatistic claimStatistic71 = org.apache.rat.Reporter.report(reportConfiguration70);
        org.apache.rat.license.LicenseSetFactory.LicenseFilter licenseFilter72 = org.apache.rat.license.LicenseSetFactory.LicenseFilter.all;
        org.apache.rat.Reporter.listLicenses(reportConfiguration70, licenseFilter72);
        org.apache.rat.Reporter.listLicenses(reportConfiguration63, licenseFilter72);
        org.apache.rat.utils.Log log75 = null;
        org.apache.rat.ReportConfiguration reportConfiguration76 = new org.apache.rat.ReportConfiguration(log75);
        java.io.FilenameFilter filenameFilter77 = reportConfiguration76.getInputFileFilter();
        org.apache.rat.license.LicenseSetFactory.LicenseFilter licenseFilter78 = org.apache.rat.license.LicenseSetFactory.LicenseFilter.all;
        java.util.SortedSet<org.apache.rat.license.ILicense> iLicenseSet79 = reportConfiguration76.getLicenses(licenseFilter78);
        org.apache.rat.config.AddLicenseHeaders addLicenseHeaders80 = org.apache.rat.config.AddLicenseHeaders.FALSE;
        reportConfiguration76.setAddLicenseHeaders(addLicenseHeaders80);
        org.apache.rat.utils.Log log82 = null;
        org.apache.rat.ReportConfiguration reportConfiguration83 = new org.apache.rat.ReportConfiguration(log82);
        org.apache.rat.report.claim.ClaimStatistic claimStatistic84 = org.apache.rat.Reporter.report(reportConfiguration83);
        org.apache.rat.license.LicenseSetFactory.LicenseFilter licenseFilter85 = org.apache.rat.license.LicenseSetFactory.LicenseFilter.all;
        org.apache.rat.Reporter.listLicenses(reportConfiguration83, licenseFilter85);
        org.apache.rat.Reporter.listLicenses(reportConfiguration76, licenseFilter85);
        org.apache.rat.Reporter.listLicenses(reportConfiguration63, licenseFilter85);
        java.util.SortedSet<org.apache.rat.license.ILicense> iLicenseSet89 = licenseSetFactory61.getLicenses(licenseFilter85);
        java.util.SortedSet<org.apache.rat.license.ILicenseFamily> iLicenseFamilySet90 = licenseSetFactory40.getLicenseFamilies(licenseFilter85);
        boolean boolean91 = strSet16.retainAll((java.util.Collection<org.apache.rat.license.ILicenseFamily>) iLicenseFamilySet90);
        org.apache.rat.license.LicenseFamilySetFactory licenseFamilySetFactory92 = new org.apache.rat.license.LicenseFamilySetFactory(iLicenseFamilySet6, (java.util.Collection<java.lang.String>) strSet16);
        org.apache.rat.policy.DefaultPolicy defaultPolicy93 = new org.apache.rat.policy.DefaultPolicy((java.util.Collection<org.apache.rat.license.ILicenseFamily>) iLicenseFamilySet6);
        org.apache.rat.policy.DefaultPolicy defaultPolicy94 = new org.apache.rat.policy.DefaultPolicy((java.util.Collection<org.apache.rat.license.ILicenseFamily>) iLicenseFamilySet6);
        org.apache.rat.policy.DefaultPolicy defaultPolicy95 = new org.apache.rat.policy.DefaultPolicy((java.util.Collection<org.apache.rat.license.ILicenseFamily>) iLicenseFamilySet6);
        org.junit.Assert.assertNull(claimStatistic2);
        org.junit.Assert.assertTrue("'" + options3 + "' != '" + org.apache.rat.utils.ReportingSet.Options.OVERWRITE + "'", options3.equals(org.apache.rat.utils.ReportingSet.Options.OVERWRITE));
        org.junit.Assert.assertNotNull(iLicenseFamilySet6);
        org.junit.Assert.assertNull(iLicenseFamily7);
        org.junit.Assert.assertNotNull(strArray15);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + true + "'", boolean17 == true);
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + true + "'", boolean19 == true);
        org.junit.Assert.assertNotNull(strItor20);
        org.junit.Assert.assertNotNull(objArray21);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray21), "[AllBuilder:, Datum [ name ='http://org/apache/rat/meta-data#LicenseFamilyCategory',value ='GPL1  '], MANIFEST.MF, The MIT License, http://org/apache/rat/meta-data#LicenseFamilyCategory, http://org/apache/rat/meta-data#LicenseFamilyName]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray21), "[AllBuilder:, Datum [ name ='http://org/apache/rat/meta-data#LicenseFamilyCategory',value ='GPL1  '], MANIFEST.MF, The MIT License, http://org/apache/rat/meta-data#LicenseFamilyCategory, http://org/apache/rat/meta-data#LicenseFamilyName]");
        org.junit.Assert.assertNotNull(iLicenseArray22);
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + false + "'", boolean24 == false);
        org.junit.Assert.assertNotNull(strArray37);
        org.junit.Assert.assertTrue("'" + boolean39 + "' != '" + true + "'", boolean39 == true);
        org.junit.Assert.assertTrue("'" + licenseFilter41 + "' != '" + org.apache.rat.license.LicenseSetFactory.LicenseFilter.all + "'", licenseFilter41.equals(org.apache.rat.license.LicenseSetFactory.LicenseFilter.all));
        org.junit.Assert.assertNotNull(iLicenseFamilySet42);
        org.junit.Assert.assertNotNull(iLicenseArray43);
        org.junit.Assert.assertTrue("'" + boolean45 + "' != '" + false + "'", boolean45 == false);
        org.junit.Assert.assertNotNull(strArray58);
        org.junit.Assert.assertTrue("'" + boolean60 + "' != '" + true + "'", boolean60 == true);
        org.junit.Assert.assertNull(filenameFilter64);
        org.junit.Assert.assertTrue("'" + licenseFilter65 + "' != '" + org.apache.rat.license.LicenseSetFactory.LicenseFilter.all + "'", licenseFilter65.equals(org.apache.rat.license.LicenseSetFactory.LicenseFilter.all));
        org.junit.Assert.assertNotNull(iLicenseSet66);
        org.junit.Assert.assertTrue("'" + addLicenseHeaders67 + "' != '" + org.apache.rat.config.AddLicenseHeaders.FALSE + "'", addLicenseHeaders67.equals(org.apache.rat.config.AddLicenseHeaders.FALSE));
        org.junit.Assert.assertNull(claimStatistic71);
        org.junit.Assert.assertTrue("'" + licenseFilter72 + "' != '" + org.apache.rat.license.LicenseSetFactory.LicenseFilter.all + "'", licenseFilter72.equals(org.apache.rat.license.LicenseSetFactory.LicenseFilter.all));
        org.junit.Assert.assertNull(filenameFilter77);
        org.junit.Assert.assertTrue("'" + licenseFilter78 + "' != '" + org.apache.rat.license.LicenseSetFactory.LicenseFilter.all + "'", licenseFilter78.equals(org.apache.rat.license.LicenseSetFactory.LicenseFilter.all));
        org.junit.Assert.assertNotNull(iLicenseSet79);
        org.junit.Assert.assertTrue("'" + addLicenseHeaders80 + "' != '" + org.apache.rat.config.AddLicenseHeaders.FALSE + "'", addLicenseHeaders80.equals(org.apache.rat.config.AddLicenseHeaders.FALSE));
        org.junit.Assert.assertNull(claimStatistic84);
        org.junit.Assert.assertTrue("'" + licenseFilter85 + "' != '" + org.apache.rat.license.LicenseSetFactory.LicenseFilter.all + "'", licenseFilter85.equals(org.apache.rat.license.LicenseSetFactory.LicenseFilter.all));
        org.junit.Assert.assertNotNull(iLicenseSet89);
        org.junit.Assert.assertNotNull(iLicenseFamilySet90);
        org.junit.Assert.assertTrue("'" + boolean91 + "' != '" + true + "'", boolean91 == true);
    }

    @Test
    public void test14964() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest29.test14964");
        // The following exception was thrown during execution in test generation
        try {
            org.apache.rat.configuration.builders.AbstractBuilder abstractBuilder1 = org.apache.rat.configuration.MatcherBuilderTracker.getMatcherBuilder("8b0f465d-8e20-4a9a-bf18-a9071da56719");
            org.junit.Assert.fail("Expected exception of type org.apache.rat.ConfigurationException; message: ?Valid builders?all?matcherRef?copyright?not?regex?spdx?text?any?ERROR MSG?No matcher builder named 8b0f465d-8e20-4a9a-bf18-a9071da56719");
        } catch (org.apache.rat.ConfigurationException e) {
            // Expected exception.
        }
    }

    @Test
    public void test14965() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest29.test14965");
        java.lang.String[] strArray5 = new java.lang.String[] { "http://org/apache/rat/meta-data#LicenseFamilyCategory", "Datum [ name ='http://org/apache/rat/meta-data#LicenseFamilyCategory',value ='GPL1  ']", "MANIFEST.MF", "AllBuilder:", "The MIT License" };
        org.apache.rat.utils.ReportingSet<java.lang.String> strSet6 = new org.apache.rat.utils.ReportingSet<java.lang.String>();
        boolean boolean7 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strSet6, strArray5);
        boolean boolean9 = strSet6.addIfNotPresent("http://org/apache/rat/meta-data#LicenseFamilyName");
        boolean boolean11 = strSet6.addIfNotPresent("ef7a8b13-64c3-4510-bb0c-dbf208e1e73f");
        java.util.function.Function<java.lang.String, java.lang.String> strFunction12 = null;
        org.apache.rat.utils.ReportingSet<java.lang.String> strSet13 = strSet6.setMsgFormat(strFunction12);
        org.apache.rat.utils.DefaultLog defaultLog14 = org.apache.rat.utils.DefaultLog.INSTANCE;
        org.apache.rat.utils.Log log15 = null;
        org.apache.rat.ReportConfiguration reportConfiguration16 = new org.apache.rat.ReportConfiguration(log15);
        java.io.FilenameFilter filenameFilter17 = reportConfiguration16.getInputFileFilter();
        org.apache.rat.license.LicenseSetFactory.LicenseFilter licenseFilter18 = org.apache.rat.license.LicenseSetFactory.LicenseFilter.all;
        java.util.SortedSet<org.apache.rat.license.ILicense> iLicenseSet19 = reportConfiguration16.getLicenses(licenseFilter18);
        org.apache.rat.config.AddLicenseHeaders addLicenseHeaders20 = org.apache.rat.config.AddLicenseHeaders.FALSE;
        reportConfiguration16.setAddLicenseHeaders(addLicenseHeaders20);
        org.apache.rat.utils.Log log22 = null;
        org.apache.rat.ReportConfiguration reportConfiguration23 = new org.apache.rat.ReportConfiguration(log22);
        org.apache.rat.report.claim.ClaimStatistic claimStatistic24 = org.apache.rat.Reporter.report(reportConfiguration23);
        org.apache.rat.license.LicenseSetFactory.LicenseFilter licenseFilter25 = org.apache.rat.license.LicenseSetFactory.LicenseFilter.all;
        org.apache.rat.Reporter.listLicenses(reportConfiguration23, licenseFilter25);
        org.apache.rat.Reporter.listLicenses(reportConfiguration16, licenseFilter25);
        org.apache.rat.utils.Log log28 = null;
        org.apache.rat.ReportConfiguration reportConfiguration29 = new org.apache.rat.ReportConfiguration(log28);
        java.io.FilenameFilter filenameFilter30 = reportConfiguration29.getInputFileFilter();
        org.apache.rat.license.LicenseSetFactory.LicenseFilter licenseFilter31 = org.apache.rat.license.LicenseSetFactory.LicenseFilter.all;
        java.util.SortedSet<org.apache.rat.license.ILicense> iLicenseSet32 = reportConfiguration29.getLicenses(licenseFilter31);
        org.apache.rat.config.AddLicenseHeaders addLicenseHeaders33 = org.apache.rat.config.AddLicenseHeaders.FALSE;
        reportConfiguration29.setAddLicenseHeaders(addLicenseHeaders33);
        org.apache.rat.utils.Log log35 = null;
        org.apache.rat.ReportConfiguration reportConfiguration36 = new org.apache.rat.ReportConfiguration(log35);
        org.apache.rat.report.claim.ClaimStatistic claimStatistic37 = org.apache.rat.Reporter.report(reportConfiguration36);
        org.apache.rat.license.LicenseSetFactory.LicenseFilter licenseFilter38 = org.apache.rat.license.LicenseSetFactory.LicenseFilter.all;
        org.apache.rat.Reporter.listLicenses(reportConfiguration36, licenseFilter38);
        org.apache.rat.Reporter.listLicenses(reportConfiguration29, licenseFilter38);
        org.apache.rat.Reporter.listLicenses(reportConfiguration16, licenseFilter38);
        org.apache.rat.utils.Log log42 = null;
        org.apache.rat.ReportConfiguration reportConfiguration43 = new org.apache.rat.ReportConfiguration(log42);
        org.apache.commons.io.function.IOSupplier<java.io.OutputStream> outputStreamIOSupplier44 = reportConfiguration43.getOutput();
        reportConfiguration16.setOut(outputStreamIOSupplier44);
        org.apache.rat.utils.Log log46 = null;
        org.apache.rat.ReportConfiguration reportConfiguration47 = new org.apache.rat.ReportConfiguration(log46);
        org.apache.rat.report.claim.ClaimStatistic claimStatistic48 = org.apache.rat.Reporter.report(reportConfiguration47);
        org.apache.rat.utils.Log log49 = null;
        org.apache.rat.ReportConfiguration reportConfiguration50 = new org.apache.rat.ReportConfiguration(log49);
        org.apache.rat.report.claim.ClaimStatistic claimStatistic51 = org.apache.rat.Reporter.report(reportConfiguration50);
        org.apache.rat.utils.ReportingSet.Options options52 = org.apache.rat.utils.ReportingSet.Options.OVERWRITE;
        reportConfiguration50.licenseDuplicateOption(options52);
        reportConfiguration47.familyDuplicateOption(options52);
        reportConfiguration16.licenseDuplicateOption(options52);
        reportConfiguration16.addApprovedLicenseCategory("W3C Document Copyright");
        org.apache.rat.utils.Log log58 = null;
        org.apache.rat.ReportConfiguration reportConfiguration59 = new org.apache.rat.ReportConfiguration(log58);
        reportConfiguration59.addApprovedLicenseCategory(".cvsignore");
        org.apache.rat.utils.Log.Level level62 = org.apache.rat.utils.Log.Level.ERROR;
        reportConfiguration59.logLicenseCollisions(level62);
        reportConfiguration16.logLicenseCollisions(level62);
        defaultLog14.setLevel(level62);
        defaultLog14.warn((java.lang.Object) "GNU General Public License, version 3");
        org.apache.rat.ReportConfiguration reportConfiguration68 = new org.apache.rat.ReportConfiguration((org.apache.rat.utils.Log) defaultLog14);
        org.apache.rat.utils.DefaultLog defaultLog69 = org.apache.rat.utils.DefaultLog.INSTANCE;
        org.apache.rat.utils.Log log70 = null;
        org.apache.rat.ReportConfiguration reportConfiguration71 = new org.apache.rat.ReportConfiguration(log70);
        reportConfiguration71.addApprovedLicenseCategory(".cvsignore");
        org.apache.rat.utils.Log.Level level74 = org.apache.rat.utils.Log.Level.ERROR;
        reportConfiguration71.logFamilyCollisions(level74);
        defaultLog69.setLevel(level74);
        defaultLog14.debug((java.lang.Object) level74);
        org.apache.rat.utils.ReportingSet<java.lang.String> strSet78 = strSet13.setLogLevel(level74);
        org.apache.rat.utils.Log log79 = null;
        org.apache.rat.ReportConfiguration reportConfiguration80 = new org.apache.rat.ReportConfiguration(log79);
        reportConfiguration80.addApprovedLicenseCategory(".cvsignore");
        org.apache.rat.utils.Log.Level level83 = org.apache.rat.utils.Log.Level.ERROR;
        reportConfiguration80.logFamilyCollisions(level83);
        org.apache.rat.utils.ReportingSet<java.lang.String> strSet85 = strSet78.setLogLevel(level83);
        java.util.stream.Stream<java.lang.String> strStream86 = strSet78.stream();
        java.util.Comparator<? super java.lang.String> wildcardComparator87 = strSet78.comparator();
        org.junit.Assert.assertNotNull(strArray5);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + true + "'", boolean7 == true);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + true + "'", boolean9 == true);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + true + "'", boolean11 == true);
        org.junit.Assert.assertNotNull(strSet13);
        org.junit.Assert.assertNotNull(defaultLog14);
        org.junit.Assert.assertNull(filenameFilter17);
        org.junit.Assert.assertTrue("'" + licenseFilter18 + "' != '" + org.apache.rat.license.LicenseSetFactory.LicenseFilter.all + "'", licenseFilter18.equals(org.apache.rat.license.LicenseSetFactory.LicenseFilter.all));
        org.junit.Assert.assertNotNull(iLicenseSet19);
        org.junit.Assert.assertTrue("'" + addLicenseHeaders20 + "' != '" + org.apache.rat.config.AddLicenseHeaders.FALSE + "'", addLicenseHeaders20.equals(org.apache.rat.config.AddLicenseHeaders.FALSE));
        org.junit.Assert.assertNull(claimStatistic24);
        org.junit.Assert.assertTrue("'" + licenseFilter25 + "' != '" + org.apache.rat.license.LicenseSetFactory.LicenseFilter.all + "'", licenseFilter25.equals(org.apache.rat.license.LicenseSetFactory.LicenseFilter.all));
        org.junit.Assert.assertNull(filenameFilter30);
        org.junit.Assert.assertTrue("'" + licenseFilter31 + "' != '" + org.apache.rat.license.LicenseSetFactory.LicenseFilter.all + "'", licenseFilter31.equals(org.apache.rat.license.LicenseSetFactory.LicenseFilter.all));
        org.junit.Assert.assertNotNull(iLicenseSet32);
        org.junit.Assert.assertTrue("'" + addLicenseHeaders33 + "' != '" + org.apache.rat.config.AddLicenseHeaders.FALSE + "'", addLicenseHeaders33.equals(org.apache.rat.config.AddLicenseHeaders.FALSE));
        org.junit.Assert.assertNull(claimStatistic37);
        org.junit.Assert.assertTrue("'" + licenseFilter38 + "' != '" + org.apache.rat.license.LicenseSetFactory.LicenseFilter.all + "'", licenseFilter38.equals(org.apache.rat.license.LicenseSetFactory.LicenseFilter.all));
        org.junit.Assert.assertNotNull(outputStreamIOSupplier44);
        org.junit.Assert.assertNull(claimStatistic48);
        org.junit.Assert.assertNull(claimStatistic51);
        org.junit.Assert.assertTrue("'" + options52 + "' != '" + org.apache.rat.utils.ReportingSet.Options.OVERWRITE + "'", options52.equals(org.apache.rat.utils.ReportingSet.Options.OVERWRITE));
        org.junit.Assert.assertTrue("'" + level62 + "' != '" + org.apache.rat.utils.Log.Level.ERROR + "'", level62.equals(org.apache.rat.utils.Log.Level.ERROR));
        org.junit.Assert.assertNotNull(defaultLog69);
        org.junit.Assert.assertTrue("'" + level74 + "' != '" + org.apache.rat.utils.Log.Level.ERROR + "'", level74.equals(org.apache.rat.utils.Log.Level.ERROR));
        org.junit.Assert.assertNotNull(strSet78);
        org.junit.Assert.assertTrue("'" + level83 + "' != '" + org.apache.rat.utils.Log.Level.ERROR + "'", level83.equals(org.apache.rat.utils.Log.Level.ERROR));
        org.junit.Assert.assertNotNull(strSet85);
        org.junit.Assert.assertNotNull(strStream86);
        org.junit.Assert.assertNull(wildcardComparator87);
    }

    @Test
    public void test14966() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest29.test14966");
        java.util.regex.Pattern pattern1 = null;
        org.apache.rat.analysis.matchers.SimpleRegexMatcher simpleRegexMatcher2 = new org.apache.rat.analysis.matchers.SimpleRegexMatcher("", pattern1);
        simpleRegexMatcher2.reset();
        java.lang.String str4 = simpleRegexMatcher2.getId();
        org.apache.rat.analysis.matchers.NotMatcher notMatcher5 = new org.apache.rat.analysis.matchers.NotMatcher((org.apache.rat.analysis.IHeaderMatcher) simpleRegexMatcher2);
        java.lang.String str6 = notMatcher5.getId();
        notMatcher5.reset();
// flaky:         org.junit.Assert.assertEquals("'" + str4 + "' != '" + "32cfab1d-a5dc-4abe-ae48-223e3fd86885" + "'", str4, "32cfab1d-a5dc-4abe-ae48-223e3fd86885");
// flaky:         org.junit.Assert.assertEquals("'" + str6 + "' != '" + "9c72d899-5c15-47a3-94a6-a57f5c900f48" + "'", str6, "9c72d899-5c15-47a3-94a6-a57f5c900f48");
    }

    @Test
    public void test14967() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest29.test14967");
        org.apache.rat.analysis.license.FullTextMatchingLicense fullTextMatchingLicense0 = new org.apache.rat.analysis.license.FullTextMatchingLicense();
        fullTextMatchingLicense0.setLicenseFamilyName("hi!");
        java.lang.String str3 = fullTextMatchingLicense0.getLicenseFamilyCategory();
        java.lang.String str4 = fullTextMatchingLicense0.getLicenseFamilyCategory();
        java.lang.String str5 = fullTextMatchingLicense0.getNotes();
        java.lang.String str6 = fullTextMatchingLicense0.getNotes();
        java.lang.String str7 = fullTextMatchingLicense0.getLicenseFamilyCategory();
        java.lang.String str8 = fullTextMatchingLicense0.getLicenseFamilyCategory();
        fullTextMatchingLicense0.setFullText("48bb897a-e27b-468d-af85-d73dcaacfb7f");
        java.lang.String str11 = fullTextMatchingLicense0.getNotes();
        org.apache.rat.license.ILicense.Builder builder12 = fullTextMatchingLicense0.getLicense();
        org.junit.Assert.assertNull(str3);
        org.junit.Assert.assertNull(str4);
        org.junit.Assert.assertNull(str5);
        org.junit.Assert.assertNull(str6);
        org.junit.Assert.assertNull(str7);
        org.junit.Assert.assertNull(str8);
        org.junit.Assert.assertNull(str11);
        org.junit.Assert.assertNotNull(builder12);
    }

    @Test
    public void test14968() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest29.test14968");
        org.apache.rat.utils.Log log0 = null;
        org.apache.rat.ReportConfiguration reportConfiguration1 = new org.apache.rat.ReportConfiguration(log0);
        java.io.FilenameFilter filenameFilter2 = reportConfiguration1.getInputFileFilter();
        org.apache.rat.license.LicenseSetFactory.LicenseFilter licenseFilter3 = org.apache.rat.license.LicenseSetFactory.LicenseFilter.all;
        java.util.SortedSet<org.apache.rat.license.ILicense> iLicenseSet4 = reportConfiguration1.getLicenses(licenseFilter3);
        org.apache.rat.config.AddLicenseHeaders addLicenseHeaders5 = org.apache.rat.config.AddLicenseHeaders.FALSE;
        reportConfiguration1.setAddLicenseHeaders(addLicenseHeaders5);
        org.apache.rat.utils.Log log7 = null;
        org.apache.rat.ReportConfiguration reportConfiguration8 = new org.apache.rat.ReportConfiguration(log7);
        org.apache.rat.report.claim.ClaimStatistic claimStatistic9 = org.apache.rat.Reporter.report(reportConfiguration8);
        org.apache.rat.license.LicenseSetFactory.LicenseFilter licenseFilter10 = org.apache.rat.license.LicenseSetFactory.LicenseFilter.all;
        org.apache.rat.Reporter.listLicenses(reportConfiguration8, licenseFilter10);
        org.apache.rat.Reporter.listLicenses(reportConfiguration1, licenseFilter10);
        org.apache.rat.utils.Log log13 = null;
        org.apache.rat.ReportConfiguration reportConfiguration14 = new org.apache.rat.ReportConfiguration(log13);
        java.io.FilenameFilter filenameFilter15 = reportConfiguration14.getInputFileFilter();
        org.apache.rat.license.LicenseSetFactory.LicenseFilter licenseFilter16 = org.apache.rat.license.LicenseSetFactory.LicenseFilter.all;
        java.util.SortedSet<org.apache.rat.license.ILicense> iLicenseSet17 = reportConfiguration14.getLicenses(licenseFilter16);
        org.apache.rat.config.AddLicenseHeaders addLicenseHeaders18 = org.apache.rat.config.AddLicenseHeaders.FALSE;
        reportConfiguration14.setAddLicenseHeaders(addLicenseHeaders18);
        org.apache.rat.utils.Log log20 = null;
        org.apache.rat.ReportConfiguration reportConfiguration21 = new org.apache.rat.ReportConfiguration(log20);
        org.apache.rat.report.claim.ClaimStatistic claimStatistic22 = org.apache.rat.Reporter.report(reportConfiguration21);
        org.apache.rat.license.LicenseSetFactory.LicenseFilter licenseFilter23 = org.apache.rat.license.LicenseSetFactory.LicenseFilter.all;
        org.apache.rat.Reporter.listLicenses(reportConfiguration21, licenseFilter23);
        org.apache.rat.Reporter.listLicenses(reportConfiguration14, licenseFilter23);
        org.apache.rat.Reporter.listLicenses(reportConfiguration1, licenseFilter23);
        java.io.FilenameFilter filenameFilter27 = reportConfiguration1.getInputFileFilter();
        org.apache.rat.utils.Log log28 = null;
        org.apache.rat.ReportConfiguration reportConfiguration29 = new org.apache.rat.ReportConfiguration(log28);
        java.io.FilenameFilter filenameFilter30 = reportConfiguration29.getInputFileFilter();
        org.apache.rat.license.LicenseSetFactory.LicenseFilter licenseFilter31 = org.apache.rat.license.LicenseSetFactory.LicenseFilter.all;
        java.util.SortedSet<org.apache.rat.license.ILicense> iLicenseSet32 = reportConfiguration29.getLicenses(licenseFilter31);
        org.apache.rat.config.AddLicenseHeaders addLicenseHeaders33 = org.apache.rat.config.AddLicenseHeaders.FALSE;
        reportConfiguration29.setAddLicenseHeaders(addLicenseHeaders33);
        org.apache.rat.utils.Log log35 = null;
        org.apache.rat.ReportConfiguration reportConfiguration36 = new org.apache.rat.ReportConfiguration(log35);
        org.apache.rat.report.claim.ClaimStatistic claimStatistic37 = org.apache.rat.Reporter.report(reportConfiguration36);
        org.apache.rat.license.LicenseSetFactory.LicenseFilter licenseFilter38 = org.apache.rat.license.LicenseSetFactory.LicenseFilter.all;
        org.apache.rat.Reporter.listLicenses(reportConfiguration36, licenseFilter38);
        org.apache.rat.Reporter.listLicenses(reportConfiguration29, licenseFilter38);
        org.apache.rat.utils.Log log41 = null;
        org.apache.rat.ReportConfiguration reportConfiguration42 = new org.apache.rat.ReportConfiguration(log41);
        java.io.FilenameFilter filenameFilter43 = reportConfiguration42.getInputFileFilter();
        org.apache.rat.license.LicenseSetFactory.LicenseFilter licenseFilter44 = org.apache.rat.license.LicenseSetFactory.LicenseFilter.all;
        java.util.SortedSet<org.apache.rat.license.ILicense> iLicenseSet45 = reportConfiguration42.getLicenses(licenseFilter44);
        org.apache.rat.config.AddLicenseHeaders addLicenseHeaders46 = org.apache.rat.config.AddLicenseHeaders.FALSE;
        reportConfiguration42.setAddLicenseHeaders(addLicenseHeaders46);
        org.apache.rat.utils.Log log48 = null;
        org.apache.rat.ReportConfiguration reportConfiguration49 = new org.apache.rat.ReportConfiguration(log48);
        org.apache.rat.report.claim.ClaimStatistic claimStatistic50 = org.apache.rat.Reporter.report(reportConfiguration49);
        org.apache.rat.license.LicenseSetFactory.LicenseFilter licenseFilter51 = org.apache.rat.license.LicenseSetFactory.LicenseFilter.all;
        org.apache.rat.Reporter.listLicenses(reportConfiguration49, licenseFilter51);
        org.apache.rat.Reporter.listLicenses(reportConfiguration42, licenseFilter51);
        org.apache.rat.Reporter.listLicenses(reportConfiguration29, licenseFilter51);
        java.util.SortedSet<org.apache.rat.license.ILicense> iLicenseSet55 = reportConfiguration1.getLicenses(licenseFilter51);
        org.apache.rat.license.ILicense iLicense56 = null;
        reportConfiguration1.addLicense(iLicense56);
        org.apache.commons.io.function.IOSupplier<java.io.InputStream> inputStreamIOSupplier58 = reportConfiguration1.getStyleSheet();
        org.apache.rat.report.claim.ClaimStatistic claimStatistic59 = org.apache.rat.Reporter.report(reportConfiguration1);
        org.apache.rat.utils.Log log60 = null;
        org.apache.rat.ReportConfiguration reportConfiguration61 = new org.apache.rat.ReportConfiguration(log60);
        org.apache.commons.io.function.IOSupplier<java.io.OutputStream> outputStreamIOSupplier62 = reportConfiguration61.getOutput();
        reportConfiguration61.setCopyrightMessage("MANIFEST.MF");
        org.apache.rat.utils.Log log65 = reportConfiguration61.getLog();
        org.apache.commons.io.function.IOSupplier<java.io.InputStream> inputStreamIOSupplier66 = org.apache.rat.Defaults.getPlainStyleSheet();
        reportConfiguration61.setStyleSheet(inputStreamIOSupplier66);
        reportConfiguration1.setStyleSheet(inputStreamIOSupplier66);
        org.apache.rat.report.claim.ClaimStatistic claimStatistic69 = org.apache.rat.Reporter.report(reportConfiguration1);
        boolean boolean70 = reportConfiguration1.isAddingLicensesForced();
        reportConfiguration1.removeApprovedLicenseCategory("5b0daab8-75ce-482b-bcb3-4741d11fddf7");
        org.junit.Assert.assertNull(filenameFilter2);
        org.junit.Assert.assertTrue("'" + licenseFilter3 + "' != '" + org.apache.rat.license.LicenseSetFactory.LicenseFilter.all + "'", licenseFilter3.equals(org.apache.rat.license.LicenseSetFactory.LicenseFilter.all));
        org.junit.Assert.assertNotNull(iLicenseSet4);
        org.junit.Assert.assertTrue("'" + addLicenseHeaders5 + "' != '" + org.apache.rat.config.AddLicenseHeaders.FALSE + "'", addLicenseHeaders5.equals(org.apache.rat.config.AddLicenseHeaders.FALSE));
        org.junit.Assert.assertNull(claimStatistic9);
        org.junit.Assert.assertTrue("'" + licenseFilter10 + "' != '" + org.apache.rat.license.LicenseSetFactory.LicenseFilter.all + "'", licenseFilter10.equals(org.apache.rat.license.LicenseSetFactory.LicenseFilter.all));
        org.junit.Assert.assertNull(filenameFilter15);
        org.junit.Assert.assertTrue("'" + licenseFilter16 + "' != '" + org.apache.rat.license.LicenseSetFactory.LicenseFilter.all + "'", licenseFilter16.equals(org.apache.rat.license.LicenseSetFactory.LicenseFilter.all));
        org.junit.Assert.assertNotNull(iLicenseSet17);
        org.junit.Assert.assertTrue("'" + addLicenseHeaders18 + "' != '" + org.apache.rat.config.AddLicenseHeaders.FALSE + "'", addLicenseHeaders18.equals(org.apache.rat.config.AddLicenseHeaders.FALSE));
        org.junit.Assert.assertNull(claimStatistic22);
        org.junit.Assert.assertTrue("'" + licenseFilter23 + "' != '" + org.apache.rat.license.LicenseSetFactory.LicenseFilter.all + "'", licenseFilter23.equals(org.apache.rat.license.LicenseSetFactory.LicenseFilter.all));
        org.junit.Assert.assertNull(filenameFilter27);
        org.junit.Assert.assertNull(filenameFilter30);
        org.junit.Assert.assertTrue("'" + licenseFilter31 + "' != '" + org.apache.rat.license.LicenseSetFactory.LicenseFilter.all + "'", licenseFilter31.equals(org.apache.rat.license.LicenseSetFactory.LicenseFilter.all));
        org.junit.Assert.assertNotNull(iLicenseSet32);
        org.junit.Assert.assertTrue("'" + addLicenseHeaders33 + "' != '" + org.apache.rat.config.AddLicenseHeaders.FALSE + "'", addLicenseHeaders33.equals(org.apache.rat.config.AddLicenseHeaders.FALSE));
        org.junit.Assert.assertNull(claimStatistic37);
        org.junit.Assert.assertTrue("'" + licenseFilter38 + "' != '" + org.apache.rat.license.LicenseSetFactory.LicenseFilter.all + "'", licenseFilter38.equals(org.apache.rat.license.LicenseSetFactory.LicenseFilter.all));
        org.junit.Assert.assertNull(filenameFilter43);
        org.junit.Assert.assertTrue("'" + licenseFilter44 + "' != '" + org.apache.rat.license.LicenseSetFactory.LicenseFilter.all + "'", licenseFilter44.equals(org.apache.rat.license.LicenseSetFactory.LicenseFilter.all));
        org.junit.Assert.assertNotNull(iLicenseSet45);
        org.junit.Assert.assertTrue("'" + addLicenseHeaders46 + "' != '" + org.apache.rat.config.AddLicenseHeaders.FALSE + "'", addLicenseHeaders46.equals(org.apache.rat.config.AddLicenseHeaders.FALSE));
        org.junit.Assert.assertNull(claimStatistic50);
        org.junit.Assert.assertTrue("'" + licenseFilter51 + "' != '" + org.apache.rat.license.LicenseSetFactory.LicenseFilter.all + "'", licenseFilter51.equals(org.apache.rat.license.LicenseSetFactory.LicenseFilter.all));
        org.junit.Assert.assertNotNull(iLicenseSet55);
        org.junit.Assert.assertNull(inputStreamIOSupplier58);
        org.junit.Assert.assertNull(claimStatistic59);
        org.junit.Assert.assertNotNull(outputStreamIOSupplier62);
        org.junit.Assert.assertNull(log65);
        org.junit.Assert.assertNotNull(inputStreamIOSupplier66);
        org.junit.Assert.assertNull(claimStatistic69);
        org.junit.Assert.assertTrue("'" + boolean70 + "' != '" + false + "'", boolean70 == false);
    }

    @Test
    public void test14969() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest29.test14969");
        org.apache.rat.utils.DefaultLog defaultLog0 = org.apache.rat.utils.DefaultLog.INSTANCE;
        org.apache.rat.license.ILicense.Builder builder1 = org.apache.rat.license.ILicense.builder();
        org.apache.rat.license.ILicense.Builder builder3 = builder1.setLicenseFamilyCategory("");
        org.apache.rat.analysis.matchers.CopyrightMatcher copyrightMatcher7 = new org.apache.rat.analysis.matchers.CopyrightMatcher("", "GPL1 ", "hi!");
        org.apache.rat.analysis.IHeaderMatcher.State state8 = copyrightMatcher7.finalizeState();
        org.apache.rat.license.ILicense.Builder builder9 = builder3.setMatcher((org.apache.rat.analysis.IHeaderMatcher) copyrightMatcher7);
        org.apache.rat.license.ILicense.Builder builder11 = builder9.setLicenseFamilyCategory("");
        defaultLog0.error((java.lang.Object) builder11);
        org.apache.rat.utils.Log log13 = null;
        org.apache.rat.ReportConfiguration reportConfiguration14 = new org.apache.rat.ReportConfiguration(log13);
        java.io.FilenameFilter filenameFilter15 = reportConfiguration14.getInputFileFilter();
        org.apache.rat.license.LicenseSetFactory.LicenseFilter licenseFilter16 = org.apache.rat.license.LicenseSetFactory.LicenseFilter.all;
        java.util.SortedSet<org.apache.rat.license.ILicense> iLicenseSet17 = reportConfiguration14.getLicenses(licenseFilter16);
        org.apache.rat.config.AddLicenseHeaders addLicenseHeaders18 = org.apache.rat.config.AddLicenseHeaders.FALSE;
        reportConfiguration14.setAddLicenseHeaders(addLicenseHeaders18);
        org.apache.rat.utils.Log log20 = null;
        org.apache.rat.ReportConfiguration reportConfiguration21 = new org.apache.rat.ReportConfiguration(log20);
        org.apache.rat.report.claim.ClaimStatistic claimStatistic22 = org.apache.rat.Reporter.report(reportConfiguration21);
        org.apache.rat.license.LicenseSetFactory.LicenseFilter licenseFilter23 = org.apache.rat.license.LicenseSetFactory.LicenseFilter.all;
        org.apache.rat.Reporter.listLicenses(reportConfiguration21, licenseFilter23);
        org.apache.rat.Reporter.listLicenses(reportConfiguration14, licenseFilter23);
        org.apache.rat.utils.Log log26 = null;
        org.apache.rat.ReportConfiguration reportConfiguration27 = new org.apache.rat.ReportConfiguration(log26);
        java.io.FilenameFilter filenameFilter28 = reportConfiguration27.getInputFileFilter();
        org.apache.rat.license.LicenseSetFactory.LicenseFilter licenseFilter29 = org.apache.rat.license.LicenseSetFactory.LicenseFilter.all;
        java.util.SortedSet<org.apache.rat.license.ILicense> iLicenseSet30 = reportConfiguration27.getLicenses(licenseFilter29);
        org.apache.rat.config.AddLicenseHeaders addLicenseHeaders31 = org.apache.rat.config.AddLicenseHeaders.FALSE;
        reportConfiguration27.setAddLicenseHeaders(addLicenseHeaders31);
        org.apache.rat.utils.Log log33 = null;
        org.apache.rat.ReportConfiguration reportConfiguration34 = new org.apache.rat.ReportConfiguration(log33);
        org.apache.rat.report.claim.ClaimStatistic claimStatistic35 = org.apache.rat.Reporter.report(reportConfiguration34);
        org.apache.rat.license.LicenseSetFactory.LicenseFilter licenseFilter36 = org.apache.rat.license.LicenseSetFactory.LicenseFilter.all;
        org.apache.rat.Reporter.listLicenses(reportConfiguration34, licenseFilter36);
        org.apache.rat.Reporter.listLicenses(reportConfiguration27, licenseFilter36);
        org.apache.rat.Reporter.listLicenses(reportConfiguration14, licenseFilter36);
        org.apache.rat.utils.Log log40 = null;
        org.apache.rat.ReportConfiguration reportConfiguration41 = new org.apache.rat.ReportConfiguration(log40);
        org.apache.commons.io.function.IOSupplier<java.io.OutputStream> outputStreamIOSupplier42 = reportConfiguration41.getOutput();
        reportConfiguration14.setOut(outputStreamIOSupplier42);
        org.apache.rat.utils.Log.Level level44 = org.apache.rat.utils.Log.Level.WARN;
        reportConfiguration14.logLicenseCollisions(level44);
        defaultLog0.warn((java.lang.Object) level44);
        defaultLog0.info((java.lang.Object) "TextBuilder: Datum [ name ='http:...");
        org.apache.rat.utils.DefaultLog defaultLog49 = org.apache.rat.utils.DefaultLog.INSTANCE;
        org.apache.rat.license.ILicense.Builder builder50 = org.apache.rat.license.ILicense.builder();
        org.apache.rat.license.ILicense.Builder builder52 = builder50.setLicenseFamilyCategory("");
        org.apache.rat.analysis.matchers.CopyrightMatcher copyrightMatcher56 = new org.apache.rat.analysis.matchers.CopyrightMatcher("", "GPL1 ", "hi!");
        org.apache.rat.analysis.IHeaderMatcher.State state57 = copyrightMatcher56.finalizeState();
        org.apache.rat.license.ILicense.Builder builder58 = builder52.setMatcher((org.apache.rat.analysis.IHeaderMatcher) copyrightMatcher56);
        org.apache.rat.license.ILicense.Builder builder60 = builder58.setLicenseFamilyCategory("");
        defaultLog49.error((java.lang.Object) builder60);
        org.apache.rat.utils.Log.Level level62 = org.apache.rat.utils.Log.Level.INFO;
        defaultLog49.log(level62, "JAVA");
        org.apache.rat.utils.Log.Level level65 = org.apache.rat.utils.Log.Level.WARN;
        defaultLog49.log(level65, "");
        org.apache.rat.license.ILicense.Builder builder68 = org.apache.rat.license.ILicense.builder();
        org.apache.rat.license.ILicense.Builder builder70 = builder68.setLicenseFamilyCategory("");
        org.apache.rat.analysis.matchers.FullTextMatcher fullTextMatcher72 = new org.apache.rat.analysis.matchers.FullTextMatcher("ef7a8b13-64c3-4510-bb0c-dbf208e1e73f");
        org.apache.rat.license.ILicense.Builder builder73 = builder68.setMatcher((org.apache.rat.analysis.IHeaderMatcher) fullTextMatcher72);
        org.apache.rat.license.ILicense.Builder builder75 = builder73.setLicenseFamilyCategory("httporgapacheratmetadataLicenseFamilyName");
        org.apache.rat.license.ILicense.Builder builder77 = builder73.setNotes("d25f13bc-1910-4451-97b5-b72663551a5d");
        defaultLog49.error((java.lang.Object) builder77);
        defaultLog0.debug((java.lang.Object) defaultLog49);
        org.apache.rat.configuration.builders.RegexBuilder regexBuilder80 = new org.apache.rat.configuration.builders.RegexBuilder();
        org.apache.rat.configuration.builders.RegexBuilder regexBuilder82 = regexBuilder80.setExpr("a8ad4");
        org.apache.rat.analysis.IHeaderMatcher iHeaderMatcher83 = regexBuilder80.build();
        org.apache.rat.configuration.builders.RegexBuilder regexBuilder85 = regexBuilder80.setExpr("b1db9857-a506-44af-b49f-cf1fc4c885c7");
        defaultLog0.warn((java.lang.Object) regexBuilder85);
        org.apache.rat.header.HeaderBean headerBean87 = new org.apache.rat.header.HeaderBean();
        headerBean87.setMatch(false);
        java.lang.Throwable throwable90 = null;
        // The following exception was thrown during execution in test generation
        try {
            defaultLog0.error((java.lang.Object) headerBean87, throwable90);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(defaultLog0);
        org.junit.Assert.assertNotNull(builder1);
        org.junit.Assert.assertNotNull(builder3);
        org.junit.Assert.assertTrue("'" + state8 + "' != '" + org.apache.rat.analysis.IHeaderMatcher.State.f + "'", state8.equals(org.apache.rat.analysis.IHeaderMatcher.State.f));
        org.junit.Assert.assertNotNull(builder9);
        org.junit.Assert.assertNotNull(builder11);
        org.junit.Assert.assertNull(filenameFilter15);
        org.junit.Assert.assertTrue("'" + licenseFilter16 + "' != '" + org.apache.rat.license.LicenseSetFactory.LicenseFilter.all + "'", licenseFilter16.equals(org.apache.rat.license.LicenseSetFactory.LicenseFilter.all));
        org.junit.Assert.assertNotNull(iLicenseSet17);
        org.junit.Assert.assertTrue("'" + addLicenseHeaders18 + "' != '" + org.apache.rat.config.AddLicenseHeaders.FALSE + "'", addLicenseHeaders18.equals(org.apache.rat.config.AddLicenseHeaders.FALSE));
        org.junit.Assert.assertNull(claimStatistic22);
        org.junit.Assert.assertTrue("'" + licenseFilter23 + "' != '" + org.apache.rat.license.LicenseSetFactory.LicenseFilter.all + "'", licenseFilter23.equals(org.apache.rat.license.LicenseSetFactory.LicenseFilter.all));
        org.junit.Assert.assertNull(filenameFilter28);
        org.junit.Assert.assertTrue("'" + licenseFilter29 + "' != '" + org.apache.rat.license.LicenseSetFactory.LicenseFilter.all + "'", licenseFilter29.equals(org.apache.rat.license.LicenseSetFactory.LicenseFilter.all));
        org.junit.Assert.assertNotNull(iLicenseSet30);
        org.junit.Assert.assertTrue("'" + addLicenseHeaders31 + "' != '" + org.apache.rat.config.AddLicenseHeaders.FALSE + "'", addLicenseHeaders31.equals(org.apache.rat.config.AddLicenseHeaders.FALSE));
        org.junit.Assert.assertNull(claimStatistic35);
        org.junit.Assert.assertTrue("'" + licenseFilter36 + "' != '" + org.apache.rat.license.LicenseSetFactory.LicenseFilter.all + "'", licenseFilter36.equals(org.apache.rat.license.LicenseSetFactory.LicenseFilter.all));
        org.junit.Assert.assertNotNull(outputStreamIOSupplier42);
        org.junit.Assert.assertTrue("'" + level44 + "' != '" + org.apache.rat.utils.Log.Level.WARN + "'", level44.equals(org.apache.rat.utils.Log.Level.WARN));
        org.junit.Assert.assertNotNull(defaultLog49);
        org.junit.Assert.assertNotNull(builder50);
        org.junit.Assert.assertNotNull(builder52);
        org.junit.Assert.assertTrue("'" + state57 + "' != '" + org.apache.rat.analysis.IHeaderMatcher.State.f + "'", state57.equals(org.apache.rat.analysis.IHeaderMatcher.State.f));
        org.junit.Assert.assertNotNull(builder58);
        org.junit.Assert.assertNotNull(builder60);
        org.junit.Assert.assertTrue("'" + level62 + "' != '" + org.apache.rat.utils.Log.Level.INFO + "'", level62.equals(org.apache.rat.utils.Log.Level.INFO));
        org.junit.Assert.assertTrue("'" + level65 + "' != '" + org.apache.rat.utils.Log.Level.WARN + "'", level65.equals(org.apache.rat.utils.Log.Level.WARN));
        org.junit.Assert.assertNotNull(builder68);
        org.junit.Assert.assertNotNull(builder70);
        org.junit.Assert.assertNotNull(builder73);
        org.junit.Assert.assertNotNull(builder75);
        org.junit.Assert.assertNotNull(builder77);
        org.junit.Assert.assertNotNull(regexBuilder82);
        org.junit.Assert.assertNotNull(iHeaderMatcher83);
        org.junit.Assert.assertNotNull(regexBuilder85);
    }

    @Test
    public void test14970() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest29.test14970");
        org.apache.rat.api.MetaData metaData0 = new org.apache.rat.api.MetaData();
        java.lang.String str2 = metaData0.value("COMMON DEVELOPMENT AND DISTRIBUTION LICENSE Version 1.0");
        java.lang.String str4 = metaData0.value("W3C Document Copyright");
        boolean boolean6 = metaData0.clear("hi!");
        metaData0.clear();
        org.apache.rat.api.MetaData.Datum datum8 = org.apache.rat.api.MetaData.RAT_LICENSE_FAMILY_NAME_DATUM_GPL_VERSION_1;
        metaData0.set(datum8);
        org.apache.rat.api.MetaData.Datum datum10 = org.apache.rat.api.MetaData.RAT_LICENSE_FAMILY_CATEGORY_DATUM_OASIS;
        metaData0.add(datum10);
        java.lang.String str13 = metaData0.value("http:");
        metaData0.clear();
        org.junit.Assert.assertNull(str2);
        org.junit.Assert.assertNull(str4);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertNotNull(datum8);
        org.junit.Assert.assertNotNull(datum10);
        org.junit.Assert.assertNull(str13);
    }

    @Test
    public void test14971() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest29.test14971");
        org.apache.rat.utils.ReportingSet<java.lang.String> strSet0 = new org.apache.rat.utils.ReportingSet<java.lang.String>();
        org.apache.rat.utils.ReportingSet<java.lang.String> strSet2 = strSet0.tailSet("hi!");
        org.apache.rat.configuration.LicenseReader[] licenseReaderArray3 = new org.apache.rat.configuration.LicenseReader[] {};
        org.apache.rat.configuration.LicenseReader[] licenseReaderArray4 = strSet2.toArray(licenseReaderArray3);
        java.util.function.Function<java.lang.String, java.lang.String> strFunction5 = null;
        org.apache.rat.utils.ReportingSet<java.lang.String> strSet6 = strSet2.setMsgFormat(strFunction5);
        boolean boolean7 = strSet6.isEmpty();
        int int8 = strSet6.size();
        org.junit.Assert.assertNotNull(strSet2);
        org.junit.Assert.assertNotNull(licenseReaderArray3);
        org.junit.Assert.assertNotNull(licenseReaderArray4);
        org.junit.Assert.assertNotNull(strSet6);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + true + "'", boolean7 == true);
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + 0 + "'", int8 == 0);
    }

    @Test
    public void test14972() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest29.test14972");
        java.lang.String[] strArray5 = new java.lang.String[] { "http://org/apache/rat/meta-data#LicenseFamilyCategory", "Datum [ name ='http://org/apache/rat/meta-data#LicenseFamilyCategory',value ='GPL1  ']", "MANIFEST.MF", "AllBuilder:", "The MIT License" };
        org.apache.rat.utils.ReportingSet<java.lang.String> strSet6 = new org.apache.rat.utils.ReportingSet<java.lang.String>();
        boolean boolean7 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strSet6, strArray5);
        boolean boolean9 = strSet6.addIfNotPresent("http://org/apache/rat/meta-data#LicenseFamilyName");
        java.util.Iterator<java.lang.String> strItor10 = strSet6.iterator();
        java.lang.Object[] objArray11 = strSet6.toArray();
        java.lang.String[] strArray17 = new java.lang.String[] { "http://org/apache/rat/meta-data#LicenseFamilyCategory", "Datum [ name ='http://org/apache/rat/meta-data#LicenseFamilyCategory',value ='GPL1  ']", "MANIFEST.MF", "AllBuilder:", "The MIT License" };
        org.apache.rat.utils.ReportingSet<java.lang.String> strSet18 = new org.apache.rat.utils.ReportingSet<java.lang.String>();
        boolean boolean19 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strSet18, strArray17);
        boolean boolean21 = strSet18.addIfNotPresent("http://org/apache/rat/meta-data#LicenseFamilyName");
        java.util.SortedSet<org.apache.rat.license.ILicenseFamily> iLicenseFamilySet22 = org.apache.rat.license.LicenseFamilySetFactory.emptyLicenseFamilySet();
        boolean boolean23 = strSet18.removeAll((java.util.Collection<org.apache.rat.license.ILicenseFamily>) iLicenseFamilySet22);
        boolean boolean24 = strSet6.containsAll((java.util.Collection<org.apache.rat.license.ILicenseFamily>) iLicenseFamilySet22);
        java.util.Spliterator<java.lang.String> strSpliterator25 = strSet6.spliterator();
        boolean boolean27 = strSet6.add("");
        java.util.Spliterator<java.lang.String> strSpliterator28 = strSet6.spliterator();
        java.util.Comparator<? super java.lang.String> wildcardComparator29 = strSet6.comparator();
        java.util.Comparator<? super java.lang.String> wildcardComparator30 = strSet6.comparator();
        org.junit.Assert.assertNotNull(strArray5);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + true + "'", boolean7 == true);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + true + "'", boolean9 == true);
        org.junit.Assert.assertNotNull(strItor10);
        org.junit.Assert.assertNotNull(objArray11);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray11), "[AllBuilder:, Datum [ name ='http://org/apache/rat/meta-data#LicenseFamilyCategory',value ='GPL1  '], MANIFEST.MF, The MIT License, http://org/apache/rat/meta-data#LicenseFamilyCategory, http://org/apache/rat/meta-data#LicenseFamilyName]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray11), "[AllBuilder:, Datum [ name ='http://org/apache/rat/meta-data#LicenseFamilyCategory',value ='GPL1  '], MANIFEST.MF, The MIT License, http://org/apache/rat/meta-data#LicenseFamilyCategory, http://org/apache/rat/meta-data#LicenseFamilyName]");
        org.junit.Assert.assertNotNull(strArray17);
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + true + "'", boolean19 == true);
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + true + "'", boolean21 == true);
        org.junit.Assert.assertNotNull(iLicenseFamilySet22);
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + false + "'", boolean23 == false);
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + true + "'", boolean24 == true);
        org.junit.Assert.assertNotNull(strSpliterator25);
        org.junit.Assert.assertTrue("'" + boolean27 + "' != '" + true + "'", boolean27 == true);
        org.junit.Assert.assertNotNull(strSpliterator28);
        org.junit.Assert.assertNull(wildcardComparator29);
        org.junit.Assert.assertNull(wildcardComparator30);
    }

    @Test
    public void test14973() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest29.test14973");
        org.apache.rat.utils.Log log0 = null;
        org.apache.rat.ReportConfiguration reportConfiguration1 = new org.apache.rat.ReportConfiguration(log0);
        java.io.FilenameFilter filenameFilter2 = reportConfiguration1.getInputFileFilter();
        java.io.FilenameFilter filenameFilter3 = reportConfiguration1.getInputFileFilter();
        java.lang.String[] strArray9 = new java.lang.String[] { "http://org/apache/rat/meta-data#LicenseFamilyCategory", "Datum [ name ='http://org/apache/rat/meta-data#LicenseFamilyCategory',value ='GPL1  ']", "MANIFEST.MF", "AllBuilder:", "The MIT License" };
        org.apache.rat.utils.ReportingSet<java.lang.String> strSet10 = new org.apache.rat.utils.ReportingSet<java.lang.String>();
        boolean boolean11 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strSet10, strArray9);
        boolean boolean13 = strSet10.addIfNotPresent("http://org/apache/rat/meta-data#LicenseFamilyName");
        boolean boolean15 = strSet10.addIfNotPresent("ef7a8b13-64c3-4510-bb0c-dbf208e1e73f");
        java.util.function.Function<java.lang.String, java.lang.String> strFunction16 = null;
        org.apache.rat.utils.ReportingSet<java.lang.String> strSet17 = strSet10.setMsgFormat(strFunction16);
        org.apache.rat.utils.DefaultLog defaultLog18 = org.apache.rat.utils.DefaultLog.INSTANCE;
        org.apache.rat.utils.Log log19 = null;
        org.apache.rat.ReportConfiguration reportConfiguration20 = new org.apache.rat.ReportConfiguration(log19);
        java.io.FilenameFilter filenameFilter21 = reportConfiguration20.getInputFileFilter();
        org.apache.rat.license.LicenseSetFactory.LicenseFilter licenseFilter22 = org.apache.rat.license.LicenseSetFactory.LicenseFilter.all;
        java.util.SortedSet<org.apache.rat.license.ILicense> iLicenseSet23 = reportConfiguration20.getLicenses(licenseFilter22);
        org.apache.rat.config.AddLicenseHeaders addLicenseHeaders24 = org.apache.rat.config.AddLicenseHeaders.FALSE;
        reportConfiguration20.setAddLicenseHeaders(addLicenseHeaders24);
        org.apache.rat.utils.Log log26 = null;
        org.apache.rat.ReportConfiguration reportConfiguration27 = new org.apache.rat.ReportConfiguration(log26);
        org.apache.rat.report.claim.ClaimStatistic claimStatistic28 = org.apache.rat.Reporter.report(reportConfiguration27);
        org.apache.rat.license.LicenseSetFactory.LicenseFilter licenseFilter29 = org.apache.rat.license.LicenseSetFactory.LicenseFilter.all;
        org.apache.rat.Reporter.listLicenses(reportConfiguration27, licenseFilter29);
        org.apache.rat.Reporter.listLicenses(reportConfiguration20, licenseFilter29);
        org.apache.rat.utils.Log log32 = null;
        org.apache.rat.ReportConfiguration reportConfiguration33 = new org.apache.rat.ReportConfiguration(log32);
        java.io.FilenameFilter filenameFilter34 = reportConfiguration33.getInputFileFilter();
        org.apache.rat.license.LicenseSetFactory.LicenseFilter licenseFilter35 = org.apache.rat.license.LicenseSetFactory.LicenseFilter.all;
        java.util.SortedSet<org.apache.rat.license.ILicense> iLicenseSet36 = reportConfiguration33.getLicenses(licenseFilter35);
        org.apache.rat.config.AddLicenseHeaders addLicenseHeaders37 = org.apache.rat.config.AddLicenseHeaders.FALSE;
        reportConfiguration33.setAddLicenseHeaders(addLicenseHeaders37);
        org.apache.rat.utils.Log log39 = null;
        org.apache.rat.ReportConfiguration reportConfiguration40 = new org.apache.rat.ReportConfiguration(log39);
        org.apache.rat.report.claim.ClaimStatistic claimStatistic41 = org.apache.rat.Reporter.report(reportConfiguration40);
        org.apache.rat.license.LicenseSetFactory.LicenseFilter licenseFilter42 = org.apache.rat.license.LicenseSetFactory.LicenseFilter.all;
        org.apache.rat.Reporter.listLicenses(reportConfiguration40, licenseFilter42);
        org.apache.rat.Reporter.listLicenses(reportConfiguration33, licenseFilter42);
        org.apache.rat.Reporter.listLicenses(reportConfiguration20, licenseFilter42);
        org.apache.rat.utils.Log log46 = null;
        org.apache.rat.ReportConfiguration reportConfiguration47 = new org.apache.rat.ReportConfiguration(log46);
        org.apache.commons.io.function.IOSupplier<java.io.OutputStream> outputStreamIOSupplier48 = reportConfiguration47.getOutput();
        reportConfiguration20.setOut(outputStreamIOSupplier48);
        org.apache.rat.utils.Log log50 = null;
        org.apache.rat.ReportConfiguration reportConfiguration51 = new org.apache.rat.ReportConfiguration(log50);
        org.apache.rat.report.claim.ClaimStatistic claimStatistic52 = org.apache.rat.Reporter.report(reportConfiguration51);
        org.apache.rat.utils.Log log53 = null;
        org.apache.rat.ReportConfiguration reportConfiguration54 = new org.apache.rat.ReportConfiguration(log53);
        org.apache.rat.report.claim.ClaimStatistic claimStatistic55 = org.apache.rat.Reporter.report(reportConfiguration54);
        org.apache.rat.utils.ReportingSet.Options options56 = org.apache.rat.utils.ReportingSet.Options.OVERWRITE;
        reportConfiguration54.licenseDuplicateOption(options56);
        reportConfiguration51.familyDuplicateOption(options56);
        reportConfiguration20.licenseDuplicateOption(options56);
        reportConfiguration20.addApprovedLicenseCategory("W3C Document Copyright");
        org.apache.rat.utils.Log log62 = null;
        org.apache.rat.ReportConfiguration reportConfiguration63 = new org.apache.rat.ReportConfiguration(log62);
        reportConfiguration63.addApprovedLicenseCategory(".cvsignore");
        org.apache.rat.utils.Log.Level level66 = org.apache.rat.utils.Log.Level.ERROR;
        reportConfiguration63.logLicenseCollisions(level66);
        reportConfiguration20.logLicenseCollisions(level66);
        defaultLog18.setLevel(level66);
        defaultLog18.warn((java.lang.Object) "GNU General Public License, version 3");
        org.apache.rat.ReportConfiguration reportConfiguration72 = new org.apache.rat.ReportConfiguration((org.apache.rat.utils.Log) defaultLog18);
        org.apache.rat.utils.DefaultLog defaultLog73 = org.apache.rat.utils.DefaultLog.INSTANCE;
        org.apache.rat.utils.Log log74 = null;
        org.apache.rat.ReportConfiguration reportConfiguration75 = new org.apache.rat.ReportConfiguration(log74);
        reportConfiguration75.addApprovedLicenseCategory(".cvsignore");
        org.apache.rat.utils.Log.Level level78 = org.apache.rat.utils.Log.Level.ERROR;
        reportConfiguration75.logFamilyCollisions(level78);
        defaultLog73.setLevel(level78);
        defaultLog18.debug((java.lang.Object) level78);
        org.apache.rat.utils.ReportingSet<java.lang.String> strSet82 = strSet17.setLogLevel(level78);
        reportConfiguration1.logLicenseCollisions(level78);
        org.apache.commons.io.function.IOSupplier<java.io.PrintWriter> printWriterIOSupplier84 = reportConfiguration1.getWriter();
        org.apache.rat.license.ILicenseFamilyBuilder iLicenseFamilyBuilder85 = new org.apache.rat.license.ILicenseFamilyBuilder();
        java.lang.String str86 = iLicenseFamilyBuilder85.getCategory();
        org.apache.rat.license.ILicenseFamily.Builder builder88 = iLicenseFamilyBuilder85.setLicenseFamilyCategory("AL   ");
        org.apache.rat.license.ILicenseFamily.Builder builder90 = iLicenseFamilyBuilder85.setLicenseFamilyName("binary");
        org.apache.rat.license.ILicenseFamily.Builder builder92 = iLicenseFamilyBuilder85.setLicenseFamilyCategory("3c74a3ec-8235-4035-9db7-f9f475b48681");
        java.lang.String str93 = iLicenseFamilyBuilder85.getCategory();
        org.apache.rat.license.ILicenseFamily.Builder builder95 = iLicenseFamilyBuilder85.setLicenseFamilyCategory("f02d0cdc36424583b71fdd84a120752c");
        org.apache.rat.license.ILicenseFamily.Builder builder97 = iLicenseFamilyBuilder85.setLicenseFamilyName("Datum [ name ='http://org/apache/rat/meta-data#LicenseFamilyName',value ='????? ']");
        org.apache.rat.license.ILicenseFamily iLicenseFamily98 = iLicenseFamilyBuilder85.build();
        reportConfiguration1.addFamily(iLicenseFamily98);
        org.junit.Assert.assertNull(filenameFilter2);
        org.junit.Assert.assertNull(filenameFilter3);
        org.junit.Assert.assertNotNull(strArray9);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + true + "'", boolean11 == true);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + true + "'", boolean13 == true);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + true + "'", boolean15 == true);
        org.junit.Assert.assertNotNull(strSet17);
        org.junit.Assert.assertNotNull(defaultLog18);
        org.junit.Assert.assertNull(filenameFilter21);
        org.junit.Assert.assertTrue("'" + licenseFilter22 + "' != '" + org.apache.rat.license.LicenseSetFactory.LicenseFilter.all + "'", licenseFilter22.equals(org.apache.rat.license.LicenseSetFactory.LicenseFilter.all));
        org.junit.Assert.assertNotNull(iLicenseSet23);
        org.junit.Assert.assertTrue("'" + addLicenseHeaders24 + "' != '" + org.apache.rat.config.AddLicenseHeaders.FALSE + "'", addLicenseHeaders24.equals(org.apache.rat.config.AddLicenseHeaders.FALSE));
        org.junit.Assert.assertNull(claimStatistic28);
        org.junit.Assert.assertTrue("'" + licenseFilter29 + "' != '" + org.apache.rat.license.LicenseSetFactory.LicenseFilter.all + "'", licenseFilter29.equals(org.apache.rat.license.LicenseSetFactory.LicenseFilter.all));
        org.junit.Assert.assertNull(filenameFilter34);
        org.junit.Assert.assertTrue("'" + licenseFilter35 + "' != '" + org.apache.rat.license.LicenseSetFactory.LicenseFilter.all + "'", licenseFilter35.equals(org.apache.rat.license.LicenseSetFactory.LicenseFilter.all));
        org.junit.Assert.assertNotNull(iLicenseSet36);
        org.junit.Assert.assertTrue("'" + addLicenseHeaders37 + "' != '" + org.apache.rat.config.AddLicenseHeaders.FALSE + "'", addLicenseHeaders37.equals(org.apache.rat.config.AddLicenseHeaders.FALSE));
        org.junit.Assert.assertNull(claimStatistic41);
        org.junit.Assert.assertTrue("'" + licenseFilter42 + "' != '" + org.apache.rat.license.LicenseSetFactory.LicenseFilter.all + "'", licenseFilter42.equals(org.apache.rat.license.LicenseSetFactory.LicenseFilter.all));
        org.junit.Assert.assertNotNull(outputStreamIOSupplier48);
        org.junit.Assert.assertNull(claimStatistic52);
        org.junit.Assert.assertNull(claimStatistic55);
        org.junit.Assert.assertTrue("'" + options56 + "' != '" + org.apache.rat.utils.ReportingSet.Options.OVERWRITE + "'", options56.equals(org.apache.rat.utils.ReportingSet.Options.OVERWRITE));
        org.junit.Assert.assertTrue("'" + level66 + "' != '" + org.apache.rat.utils.Log.Level.ERROR + "'", level66.equals(org.apache.rat.utils.Log.Level.ERROR));
        org.junit.Assert.assertNotNull(defaultLog73);
        org.junit.Assert.assertTrue("'" + level78 + "' != '" + org.apache.rat.utils.Log.Level.ERROR + "'", level78.equals(org.apache.rat.utils.Log.Level.ERROR));
        org.junit.Assert.assertNotNull(strSet82);
        org.junit.Assert.assertNotNull(printWriterIOSupplier84);
        org.junit.Assert.assertNull(str86);
        org.junit.Assert.assertNotNull(builder88);
        org.junit.Assert.assertNotNull(builder90);
        org.junit.Assert.assertNotNull(builder92);
        org.junit.Assert.assertEquals("'" + str93 + "' != '" + "3c74a3ec-8235-4035-9db7-f9f475b48681" + "'", str93, "3c74a3ec-8235-4035-9db7-f9f475b48681");
        org.junit.Assert.assertNotNull(builder95);
        org.junit.Assert.assertNotNull(builder97);
        org.junit.Assert.assertNotNull(iLicenseFamily98);
    }

    @Test
    public void test14974() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest29.test14974");
        org.apache.rat.utils.ReportingSet<java.lang.String> strSet0 = new org.apache.rat.utils.ReportingSet<java.lang.String>();
        org.apache.rat.utils.ReportingSet<java.lang.String> strSet2 = strSet0.tailSet("hi!");
        org.apache.rat.configuration.LicenseReader[] licenseReaderArray3 = new org.apache.rat.configuration.LicenseReader[] {};
        org.apache.rat.configuration.LicenseReader[] licenseReaderArray4 = strSet2.toArray(licenseReaderArray3);
        strSet2.clear();
        boolean boolean6 = strSet2.isEmpty();
        java.util.function.Function<java.lang.String, java.lang.String> strFunction7 = null;
        org.apache.rat.utils.ReportingSet<java.lang.String> strSet8 = strSet2.setMsgFormat(strFunction7);
        java.lang.Object[] objArray9 = strSet2.toArray();
        org.apache.rat.utils.Log log10 = null;
        org.apache.rat.ReportConfiguration reportConfiguration11 = new org.apache.rat.ReportConfiguration(log10);
        java.io.FilenameFilter filenameFilter12 = reportConfiguration11.getInputFileFilter();
        org.apache.rat.license.LicenseSetFactory.LicenseFilter licenseFilter13 = org.apache.rat.license.LicenseSetFactory.LicenseFilter.all;
        java.util.SortedSet<org.apache.rat.license.ILicense> iLicenseSet14 = reportConfiguration11.getLicenses(licenseFilter13);
        org.apache.rat.config.AddLicenseHeaders addLicenseHeaders15 = org.apache.rat.config.AddLicenseHeaders.FALSE;
        reportConfiguration11.setAddLicenseHeaders(addLicenseHeaders15);
        org.apache.rat.utils.Log log17 = null;
        org.apache.rat.ReportConfiguration reportConfiguration18 = new org.apache.rat.ReportConfiguration(log17);
        org.apache.rat.report.claim.ClaimStatistic claimStatistic19 = org.apache.rat.Reporter.report(reportConfiguration18);
        org.apache.rat.license.LicenseSetFactory.LicenseFilter licenseFilter20 = org.apache.rat.license.LicenseSetFactory.LicenseFilter.all;
        org.apache.rat.Reporter.listLicenses(reportConfiguration18, licenseFilter20);
        org.apache.rat.Reporter.listLicenses(reportConfiguration11, licenseFilter20);
        reportConfiguration11.addApprovedLicenseCategory("W3C Software Copyright");
        org.apache.rat.report.IReportable iReportable25 = null;
        reportConfiguration11.setReportable(iReportable25);
        org.apache.rat.license.ILicense iLicense27 = null;
        reportConfiguration11.addLicense(iLicense27);
        org.apache.rat.report.IReportable iReportable29 = reportConfiguration11.getReportable();
        java.io.FilenameFilter filenameFilter30 = reportConfiguration11.getInputFileFilter();
        org.apache.rat.utils.DefaultLog defaultLog31 = org.apache.rat.utils.DefaultLog.INSTANCE;
        org.apache.rat.license.ILicense.Builder builder32 = org.apache.rat.license.ILicense.builder();
        org.apache.rat.license.ILicense.Builder builder34 = builder32.setLicenseFamilyCategory("");
        org.apache.rat.analysis.matchers.CopyrightMatcher copyrightMatcher38 = new org.apache.rat.analysis.matchers.CopyrightMatcher("", "GPL1 ", "hi!");
        org.apache.rat.analysis.IHeaderMatcher.State state39 = copyrightMatcher38.finalizeState();
        org.apache.rat.license.ILicense.Builder builder40 = builder34.setMatcher((org.apache.rat.analysis.IHeaderMatcher) copyrightMatcher38);
        org.apache.rat.license.ILicense.Builder builder42 = builder40.setLicenseFamilyCategory("");
        defaultLog31.error((java.lang.Object) builder42);
        org.apache.rat.utils.Log log44 = null;
        org.apache.rat.ReportConfiguration reportConfiguration45 = new org.apache.rat.ReportConfiguration(log44);
        java.io.FilenameFilter filenameFilter46 = reportConfiguration45.getInputFileFilter();
        org.apache.rat.license.LicenseSetFactory.LicenseFilter licenseFilter47 = org.apache.rat.license.LicenseSetFactory.LicenseFilter.all;
        java.util.SortedSet<org.apache.rat.license.ILicense> iLicenseSet48 = reportConfiguration45.getLicenses(licenseFilter47);
        org.apache.rat.config.AddLicenseHeaders addLicenseHeaders49 = org.apache.rat.config.AddLicenseHeaders.FALSE;
        reportConfiguration45.setAddLicenseHeaders(addLicenseHeaders49);
        org.apache.rat.utils.Log log51 = null;
        org.apache.rat.ReportConfiguration reportConfiguration52 = new org.apache.rat.ReportConfiguration(log51);
        org.apache.rat.report.claim.ClaimStatistic claimStatistic53 = org.apache.rat.Reporter.report(reportConfiguration52);
        org.apache.rat.license.LicenseSetFactory.LicenseFilter licenseFilter54 = org.apache.rat.license.LicenseSetFactory.LicenseFilter.all;
        org.apache.rat.Reporter.listLicenses(reportConfiguration52, licenseFilter54);
        org.apache.rat.Reporter.listLicenses(reportConfiguration45, licenseFilter54);
        org.apache.rat.utils.Log log57 = null;
        org.apache.rat.ReportConfiguration reportConfiguration58 = new org.apache.rat.ReportConfiguration(log57);
        java.io.FilenameFilter filenameFilter59 = reportConfiguration58.getInputFileFilter();
        org.apache.rat.license.LicenseSetFactory.LicenseFilter licenseFilter60 = org.apache.rat.license.LicenseSetFactory.LicenseFilter.all;
        java.util.SortedSet<org.apache.rat.license.ILicense> iLicenseSet61 = reportConfiguration58.getLicenses(licenseFilter60);
        org.apache.rat.config.AddLicenseHeaders addLicenseHeaders62 = org.apache.rat.config.AddLicenseHeaders.FALSE;
        reportConfiguration58.setAddLicenseHeaders(addLicenseHeaders62);
        org.apache.rat.utils.Log log64 = null;
        org.apache.rat.ReportConfiguration reportConfiguration65 = new org.apache.rat.ReportConfiguration(log64);
        org.apache.rat.report.claim.ClaimStatistic claimStatistic66 = org.apache.rat.Reporter.report(reportConfiguration65);
        org.apache.rat.license.LicenseSetFactory.LicenseFilter licenseFilter67 = org.apache.rat.license.LicenseSetFactory.LicenseFilter.all;
        org.apache.rat.Reporter.listLicenses(reportConfiguration65, licenseFilter67);
        org.apache.rat.Reporter.listLicenses(reportConfiguration58, licenseFilter67);
        org.apache.rat.Reporter.listLicenses(reportConfiguration45, licenseFilter67);
        org.apache.rat.utils.Log log71 = null;
        org.apache.rat.ReportConfiguration reportConfiguration72 = new org.apache.rat.ReportConfiguration(log71);
        org.apache.commons.io.function.IOSupplier<java.io.OutputStream> outputStreamIOSupplier73 = reportConfiguration72.getOutput();
        reportConfiguration45.setOut(outputStreamIOSupplier73);
        org.apache.rat.utils.Log.Level level75 = org.apache.rat.utils.Log.Level.WARN;
        reportConfiguration45.logLicenseCollisions(level75);
        defaultLog31.warn((java.lang.Object) level75);
        org.apache.rat.utils.Log.Level level78 = defaultLog31.getLevel();
        reportConfiguration11.logFamilyCollisions(level78);
        org.apache.rat.utils.ReportingSet<java.lang.String> strSet80 = strSet2.setLogLevel(level78);
        org.junit.Assert.assertNotNull(strSet2);
        org.junit.Assert.assertNotNull(licenseReaderArray3);
        org.junit.Assert.assertNotNull(licenseReaderArray4);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + true + "'", boolean6 == true);
        org.junit.Assert.assertNotNull(strSet8);
        org.junit.Assert.assertNotNull(objArray9);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray9), "[]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray9), "[]");
        org.junit.Assert.assertNull(filenameFilter12);
        org.junit.Assert.assertTrue("'" + licenseFilter13 + "' != '" + org.apache.rat.license.LicenseSetFactory.LicenseFilter.all + "'", licenseFilter13.equals(org.apache.rat.license.LicenseSetFactory.LicenseFilter.all));
        org.junit.Assert.assertNotNull(iLicenseSet14);
        org.junit.Assert.assertTrue("'" + addLicenseHeaders15 + "' != '" + org.apache.rat.config.AddLicenseHeaders.FALSE + "'", addLicenseHeaders15.equals(org.apache.rat.config.AddLicenseHeaders.FALSE));
        org.junit.Assert.assertNull(claimStatistic19);
        org.junit.Assert.assertTrue("'" + licenseFilter20 + "' != '" + org.apache.rat.license.LicenseSetFactory.LicenseFilter.all + "'", licenseFilter20.equals(org.apache.rat.license.LicenseSetFactory.LicenseFilter.all));
        org.junit.Assert.assertNull(iReportable29);
        org.junit.Assert.assertNull(filenameFilter30);
        org.junit.Assert.assertNotNull(defaultLog31);
        org.junit.Assert.assertNotNull(builder32);
        org.junit.Assert.assertNotNull(builder34);
        org.junit.Assert.assertTrue("'" + state39 + "' != '" + org.apache.rat.analysis.IHeaderMatcher.State.f + "'", state39.equals(org.apache.rat.analysis.IHeaderMatcher.State.f));
        org.junit.Assert.assertNotNull(builder40);
        org.junit.Assert.assertNotNull(builder42);
        org.junit.Assert.assertNull(filenameFilter46);
        org.junit.Assert.assertTrue("'" + licenseFilter47 + "' != '" + org.apache.rat.license.LicenseSetFactory.LicenseFilter.all + "'", licenseFilter47.equals(org.apache.rat.license.LicenseSetFactory.LicenseFilter.all));
        org.junit.Assert.assertNotNull(iLicenseSet48);
        org.junit.Assert.assertTrue("'" + addLicenseHeaders49 + "' != '" + org.apache.rat.config.AddLicenseHeaders.FALSE + "'", addLicenseHeaders49.equals(org.apache.rat.config.AddLicenseHeaders.FALSE));
        org.junit.Assert.assertNull(claimStatistic53);
        org.junit.Assert.assertTrue("'" + licenseFilter54 + "' != '" + org.apache.rat.license.LicenseSetFactory.LicenseFilter.all + "'", licenseFilter54.equals(org.apache.rat.license.LicenseSetFactory.LicenseFilter.all));
        org.junit.Assert.assertNull(filenameFilter59);
        org.junit.Assert.assertTrue("'" + licenseFilter60 + "' != '" + org.apache.rat.license.LicenseSetFactory.LicenseFilter.all + "'", licenseFilter60.equals(org.apache.rat.license.LicenseSetFactory.LicenseFilter.all));
        org.junit.Assert.assertNotNull(iLicenseSet61);
        org.junit.Assert.assertTrue("'" + addLicenseHeaders62 + "' != '" + org.apache.rat.config.AddLicenseHeaders.FALSE + "'", addLicenseHeaders62.equals(org.apache.rat.config.AddLicenseHeaders.FALSE));
        org.junit.Assert.assertNull(claimStatistic66);
        org.junit.Assert.assertTrue("'" + licenseFilter67 + "' != '" + org.apache.rat.license.LicenseSetFactory.LicenseFilter.all + "'", licenseFilter67.equals(org.apache.rat.license.LicenseSetFactory.LicenseFilter.all));
        org.junit.Assert.assertNotNull(outputStreamIOSupplier73);
        org.junit.Assert.assertTrue("'" + level75 + "' != '" + org.apache.rat.utils.Log.Level.WARN + "'", level75.equals(org.apache.rat.utils.Log.Level.WARN));
        org.junit.Assert.assertTrue("'" + level78 + "' != '" + org.apache.rat.utils.Log.Level.ERROR + "'", level78.equals(org.apache.rat.utils.Log.Level.ERROR));
        org.junit.Assert.assertNotNull(strSet80);
    }

    @Test
    public void test14975() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest29.test14975");
        org.apache.rat.report.claim.ClaimStatistic claimStatistic0 = new org.apache.rat.report.claim.ClaimStatistic();
        claimStatistic0.setNumUnApproved((int) (short) 10);
        java.util.Map<java.lang.String, java.lang.Integer> strMap3 = null;
        claimStatistic0.setDocumentCategoryMap(strMap3);
        claimStatistic0.setNumUnknown((int) ' ');
        int int7 = claimStatistic0.getNumApproved();
        java.util.Map<java.lang.String, java.lang.Integer> strMap8 = claimStatistic0.getDocumentCategoryMap();
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 0 + "'", int7 == 0);
        org.junit.Assert.assertNull(strMap8);
    }

    @Test
    public void test14976() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest29.test14976");
        org.apache.rat.configuration.Format format0 = org.apache.rat.configuration.Format.XML;
        org.apache.rat.configuration.LicenseReader licenseReader1 = format0.licenseReader();
        java.util.SortedSet<org.apache.rat.license.ILicense> iLicenseSet2 = licenseReader1.readLicenses();
        java.lang.String[] strArray8 = new java.lang.String[] { "http://org/apache/rat/meta-data#LicenseFamilyCategory", "Datum [ name ='http://org/apache/rat/meta-data#LicenseFamilyCategory',value ='GPL1  ']", "MANIFEST.MF", "AllBuilder:", "The MIT License" };
        org.apache.rat.utils.ReportingSet<java.lang.String> strSet9 = new org.apache.rat.utils.ReportingSet<java.lang.String>();
        boolean boolean10 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strSet9, strArray8);
        boolean boolean12 = strSet9.addIfNotPresent("http://org/apache/rat/meta-data#LicenseFamilyName");
        boolean boolean14 = strSet9.addIfNotPresent("ef7a8b13-64c3-4510-bb0c-dbf208e1e73f");
        java.util.function.Function<java.lang.String, java.lang.String> strFunction15 = null;
        org.apache.rat.utils.ReportingSet<java.lang.String> strSet16 = strSet9.setMsgFormat(strFunction15);
        boolean boolean17 = strSet9.isEmpty();
        org.apache.rat.license.LicenseSetFactory licenseSetFactory18 = new org.apache.rat.license.LicenseSetFactory(iLicenseSet2, (java.util.Collection<java.lang.String>) strSet9);
        boolean boolean19 = strSet9.isEmpty();
        org.apache.rat.utils.ReportingSet<java.lang.String> strSet21 = strSet9.tailSet("MANIFEST.MF");
        strSet9.clear();
        java.util.Spliterator<java.lang.String> strSpliterator23 = strSet9.spliterator();
        java.util.stream.Stream<java.lang.String> strStream24 = strSet9.stream();
        org.junit.Assert.assertTrue("'" + format0 + "' != '" + org.apache.rat.configuration.Format.XML + "'", format0.equals(org.apache.rat.configuration.Format.XML));
        org.junit.Assert.assertNotNull(licenseReader1);
        org.junit.Assert.assertNotNull(iLicenseSet2);
        org.junit.Assert.assertNotNull(strArray8);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + true + "'", boolean10 == true);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + true + "'", boolean12 == true);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + true + "'", boolean14 == true);
        org.junit.Assert.assertNotNull(strSet16);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + false + "'", boolean17 == false);
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + false + "'", boolean19 == false);
        org.junit.Assert.assertNotNull(strSet21);
        org.junit.Assert.assertNotNull(strSpliterator23);
        org.junit.Assert.assertNotNull(strStream24);
    }

    @Test
    public void test14977() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest29.test14977");
        java.lang.String[] strArray5 = new java.lang.String[] { "http://org/apache/rat/meta-data#LicenseFamilyCategory", "Datum [ name ='http://org/apache/rat/meta-data#LicenseFamilyCategory',value ='GPL1  ']", "MANIFEST.MF", "AllBuilder:", "The MIT License" };
        org.apache.rat.utils.ReportingSet<java.lang.String> strSet6 = new org.apache.rat.utils.ReportingSet<java.lang.String>();
        boolean boolean7 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strSet6, strArray5);
        boolean boolean9 = strSet6.addIfNotPresent("http://org/apache/rat/meta-data#LicenseFamilyName");
        boolean boolean11 = strSet6.addIfNotPresent("ef7a8b13-64c3-4510-bb0c-dbf208e1e73f");
        java.util.function.Function<java.lang.String, java.lang.String> strFunction12 = null;
        org.apache.rat.utils.ReportingSet<java.lang.String> strSet13 = strSet6.setMsgFormat(strFunction12);
        java.util.SortedSet<org.apache.rat.license.ILicenseFamily> iLicenseFamilySet15 = org.apache.rat.license.LicenseFamilySetFactory.emptyLicenseFamilySet();
        org.apache.rat.license.ILicenseFamily iLicenseFamily16 = org.apache.rat.license.LicenseFamilySetFactory.search("http://org/apache/rat/meta-data", iLicenseFamilySet15);
        boolean boolean17 = strSet6.containsAll((java.util.Collection<org.apache.rat.license.ILicenseFamily>) iLicenseFamilySet15);
        org.apache.rat.utils.ReportingSet<java.lang.String> strSet19 = strSet6.tailSet("http://org/apache/rat/meta-data#HeaderCategory");
        boolean boolean21 = strSet6.addIfNotPresent("ccda37f8-8aec-461c-a257-84923fc7818c");
        boolean boolean23 = strSet6.addIfNotPresent("NotBuilder: MathcerRefBuilder: Datum [ name ='http://org/apache/rat/meta-data#LicenseFamilyName',value ='Academic Free License, Version 2.1 ']");
        org.apache.rat.utils.Log log24 = null;
        org.apache.rat.ReportConfiguration reportConfiguration25 = new org.apache.rat.ReportConfiguration(log24);
        org.apache.rat.license.ILicenseFamily[] iLicenseFamilyArray26 = new org.apache.rat.license.ILicenseFamily[] {};
        java.util.ArrayList<org.apache.rat.license.ILicenseFamily> iLicenseFamilyList27 = new java.util.ArrayList<org.apache.rat.license.ILicenseFamily>();
        boolean boolean28 = java.util.Collections.addAll((java.util.Collection<org.apache.rat.license.ILicenseFamily>) iLicenseFamilyList27, iLicenseFamilyArray26);
        reportConfiguration25.addFamilies((java.util.Collection<org.apache.rat.license.ILicenseFamily>) iLicenseFamilyList27);
        org.apache.rat.utils.Log.Level level30 = org.apache.rat.utils.Log.Level.ERROR;
        reportConfiguration25.logLicenseCollisions(level30);
        org.apache.rat.utils.ReportingSet<java.lang.String> strSet32 = strSet6.setLogLevel(level30);
        java.util.Comparator<? super java.lang.String> wildcardComparator33 = strSet32.comparator();
        org.junit.Assert.assertNotNull(strArray5);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + true + "'", boolean7 == true);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + true + "'", boolean9 == true);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + true + "'", boolean11 == true);
        org.junit.Assert.assertNotNull(strSet13);
        org.junit.Assert.assertNotNull(iLicenseFamilySet15);
        org.junit.Assert.assertNull(iLicenseFamily16);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + true + "'", boolean17 == true);
        org.junit.Assert.assertNotNull(strSet19);
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + true + "'", boolean21 == true);
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + true + "'", boolean23 == true);
        org.junit.Assert.assertNotNull(iLicenseFamilyArray26);
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + false + "'", boolean28 == false);
        org.junit.Assert.assertTrue("'" + level30 + "' != '" + org.apache.rat.utils.Log.Level.ERROR + "'", level30.equals(org.apache.rat.utils.Log.Level.ERROR));
        org.junit.Assert.assertNotNull(strSet32);
        org.junit.Assert.assertNull(wildcardComparator33);
    }

    @Test
    public void test14978() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest29.test14978");
        org.apache.rat.analysis.matchers.FullTextMatcher fullTextMatcher1 = new org.apache.rat.analysis.matchers.FullTextMatcher("64ae0b82-4b80-4d92-9c12-7c39421cb10a");
    }

    @Test
    public void test14979() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest29.test14979");
        org.apache.rat.analysis.license.FullTextMatchingLicense fullTextMatchingLicense0 = new org.apache.rat.analysis.license.FullTextMatchingLicense();
        fullTextMatchingLicense0.setLicenseFamilyName("hi!");
        java.lang.String str3 = fullTextMatchingLicense0.getLicenseFamilyCategory();
        java.lang.String str4 = fullTextMatchingLicense0.getLicenseFamilyName();
        fullTextMatchingLicense0.setLicenseFamilyName("SpdxBuilder: null");
        fullTextMatchingLicense0.setLicenseFamilyCategory("TMF");
        fullTextMatchingLicense0.setFullText("W3C  ");
        org.apache.rat.license.ILicense.Builder builder11 = fullTextMatchingLicense0.getLicense();
        java.lang.String str12 = fullTextMatchingLicense0.getLicenseFamilyName();
        fullTextMatchingLicense0.setLicenseFamilyCategory("TextBuilderstand");
        org.junit.Assert.assertNull(str3);
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "hi!" + "'", str4, "hi!");
        org.junit.Assert.assertNotNull(builder11);
        org.junit.Assert.assertEquals("'" + str12 + "' != '" + "SpdxBuilder: null" + "'", str12, "SpdxBuilder: null");
    }

    @Test
    public void test14980() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest29.test14980");
        org.apache.rat.utils.Log log0 = null;
        org.apache.rat.ReportConfiguration reportConfiguration1 = new org.apache.rat.ReportConfiguration(log0);
        org.apache.commons.io.function.IOSupplier<java.io.OutputStream> outputStreamIOSupplier2 = reportConfiguration1.getOutput();
        org.apache.commons.io.filefilter.IOFileFilter iOFileFilter3 = reportConfiguration1.getDirectoryFilter();
        org.apache.rat.utils.Log log4 = null;
        org.apache.rat.ReportConfiguration reportConfiguration5 = new org.apache.rat.ReportConfiguration(log4);
        org.apache.rat.report.claim.ClaimStatistic claimStatistic6 = org.apache.rat.Reporter.report(reportConfiguration5);
        org.apache.commons.io.function.IOSupplier<java.io.OutputStream> outputStreamIOSupplier7 = reportConfiguration5.getOutput();
        boolean boolean8 = reportConfiguration5.isAddingLicensesForced();
        org.apache.rat.license.ILicense[] iLicenseArray9 = new org.apache.rat.license.ILicense[] {};
        java.util.TreeSet<org.apache.rat.license.ILicense> iLicenseSet10 = new java.util.TreeSet<org.apache.rat.license.ILicense>();
        boolean boolean11 = java.util.Collections.addAll((java.util.Collection<org.apache.rat.license.ILicense>) iLicenseSet10, iLicenseArray9);
        java.lang.String[] strArray24 = new java.lang.String[] { "GPL2 ", "GPL1 ", "notice", "http://org/apache/rat/meta-data#LicenseFamilyName", "notice", "GPL2 ", "http://org/apache/rat/meta-data#LicenseFamilyName", "", "GPL2 ", "", "GPL1 ", "hi!" };
        java.util.ArrayList<java.lang.String> strList25 = new java.util.ArrayList<java.lang.String>();
        boolean boolean26 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strList25, strArray24);
        org.apache.rat.license.LicenseSetFactory licenseSetFactory27 = new org.apache.rat.license.LicenseSetFactory((java.util.SortedSet<org.apache.rat.license.ILicense>) iLicenseSet10, (java.util.Collection<java.lang.String>) strList25);
        reportConfiguration5.addLicenses((java.util.Collection<org.apache.rat.license.ILicense>) iLicenseSet10);
        reportConfiguration1.addLicensesIfNotPresent((java.util.Collection<org.apache.rat.license.ILicense>) iLicenseSet10);
        org.apache.rat.utils.ReportingSet<java.lang.String> strSet30 = new org.apache.rat.utils.ReportingSet<java.lang.String>();
        boolean boolean32 = strSet30.addIfNotPresent("OASIS Open License");
        boolean boolean34 = strSet30.add("http://org/apache/rat/meta-data#HeaderCategory");
        java.util.Iterator<java.lang.String> strItor35 = strSet30.iterator();
        reportConfiguration1.addApprovedLicenseCategories((java.util.Collection<java.lang.String>) strSet30);
        boolean boolean38 = strSet30.add("c95c8cb9e02048818b389a9be1df8175");
        org.junit.Assert.assertNotNull(outputStreamIOSupplier2);
        org.junit.Assert.assertNotNull(iOFileFilter3);
        org.junit.Assert.assertNull(claimStatistic6);
        org.junit.Assert.assertNotNull(outputStreamIOSupplier7);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertNotNull(iLicenseArray9);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
        org.junit.Assert.assertNotNull(strArray24);
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + true + "'", boolean26 == true);
        org.junit.Assert.assertTrue("'" + boolean32 + "' != '" + true + "'", boolean32 == true);
        org.junit.Assert.assertTrue("'" + boolean34 + "' != '" + true + "'", boolean34 == true);
        org.junit.Assert.assertNotNull(strItor35);
        org.junit.Assert.assertTrue("'" + boolean38 + "' != '" + true + "'", boolean38 == true);
    }

    @Test
    public void test14981() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest29.test14981");
        org.apache.rat.utils.Log log0 = null;
        org.apache.rat.ReportConfiguration reportConfiguration1 = new org.apache.rat.ReportConfiguration(log0);
        org.apache.rat.report.claim.ClaimStatistic claimStatistic2 = org.apache.rat.Reporter.report(reportConfiguration1);
        org.apache.rat.utils.Log log3 = null;
        org.apache.rat.ReportConfiguration reportConfiguration4 = new org.apache.rat.ReportConfiguration(log3);
        java.io.FilenameFilter filenameFilter5 = reportConfiguration4.getInputFileFilter();
        org.apache.rat.config.AddLicenseHeaders addLicenseHeaders6 = org.apache.rat.config.AddLicenseHeaders.TRUE;
        reportConfiguration4.setAddLicenseHeaders(addLicenseHeaders6);
        reportConfiguration1.setAddLicenseHeaders(addLicenseHeaders6);
        org.apache.rat.license.ILicenseFamilyBuilder iLicenseFamilyBuilder9 = new org.apache.rat.license.ILicenseFamilyBuilder();
        org.apache.rat.license.ILicenseFamily.Builder builder11 = iLicenseFamilyBuilder9.setLicenseFamilyCategory("Modified BSD License");
        org.apache.rat.license.ILicenseFamily.Builder builder13 = iLicenseFamilyBuilder9.setLicenseFamilyName("AllBuilder:\nCopyright Builder: s:null e:.cvsignore o:3c840dc2-bef0-42b5-b26c-35a568d53a24");
        reportConfiguration1.addFamily((org.apache.rat.license.ILicenseFamily.Builder) iLicenseFamilyBuilder9);
        reportConfiguration1.removeApprovedLicenseCategory("W3CD ");
        org.apache.rat.Defaults.Builder builder17 = org.apache.rat.Defaults.builder();
        org.apache.rat.Defaults defaults18 = builder17.build();
        org.apache.rat.Defaults.Builder builder19 = builder17.noDefault();
        org.apache.rat.Defaults.Builder builder21 = builder17.remove("AllBuilder:");
        org.apache.rat.Defaults.Builder builder23 = builder17.remove("GNU General Public License, version 2");
        org.apache.rat.Defaults defaults24 = builder23.build();
        org.apache.rat.license.ILicense[] iLicenseArray25 = new org.apache.rat.license.ILicense[] {};
        java.util.TreeSet<org.apache.rat.license.ILicense> iLicenseSet26 = new java.util.TreeSet<org.apache.rat.license.ILicense>();
        boolean boolean27 = java.util.Collections.addAll((java.util.Collection<org.apache.rat.license.ILicense>) iLicenseSet26, iLicenseArray25);
        java.lang.String[] strArray40 = new java.lang.String[] { "GPL2 ", "GPL1 ", "notice", "http://org/apache/rat/meta-data#LicenseFamilyName", "notice", "GPL2 ", "http://org/apache/rat/meta-data#LicenseFamilyName", "", "GPL2 ", "", "GPL1 ", "hi!" };
        java.util.ArrayList<java.lang.String> strList41 = new java.util.ArrayList<java.lang.String>();
        boolean boolean42 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strList41, strArray40);
        org.apache.rat.license.LicenseSetFactory licenseSetFactory43 = new org.apache.rat.license.LicenseSetFactory((java.util.SortedSet<org.apache.rat.license.ILicense>) iLicenseSet26, (java.util.Collection<java.lang.String>) strList41);
        org.apache.rat.license.LicenseSetFactory.LicenseFilter licenseFilter44 = org.apache.rat.license.LicenseSetFactory.LicenseFilter.none;
        java.util.SortedSet<java.lang.String> strSet45 = licenseSetFactory43.getLicenseFamilyIds(licenseFilter44);
        java.util.SortedSet<org.apache.rat.license.ILicenseFamily> iLicenseFamilySet46 = defaults24.getLicenseFamilies(licenseFilter44);
        reportConfiguration1.setFrom(defaults24);
        org.junit.Assert.assertNull(claimStatistic2);
        org.junit.Assert.assertNull(filenameFilter5);
        org.junit.Assert.assertTrue("'" + addLicenseHeaders6 + "' != '" + org.apache.rat.config.AddLicenseHeaders.TRUE + "'", addLicenseHeaders6.equals(org.apache.rat.config.AddLicenseHeaders.TRUE));
        org.junit.Assert.assertNotNull(builder11);
        org.junit.Assert.assertNotNull(builder13);
        org.junit.Assert.assertNotNull(builder17);
        org.junit.Assert.assertNotNull(defaults18);
        org.junit.Assert.assertNotNull(builder19);
        org.junit.Assert.assertNotNull(builder21);
        org.junit.Assert.assertNotNull(builder23);
        org.junit.Assert.assertNotNull(defaults24);
        org.junit.Assert.assertNotNull(iLicenseArray25);
        org.junit.Assert.assertTrue("'" + boolean27 + "' != '" + false + "'", boolean27 == false);
        org.junit.Assert.assertNotNull(strArray40);
        org.junit.Assert.assertTrue("'" + boolean42 + "' != '" + true + "'", boolean42 == true);
        org.junit.Assert.assertTrue("'" + licenseFilter44 + "' != '" + org.apache.rat.license.LicenseSetFactory.LicenseFilter.none + "'", licenseFilter44.equals(org.apache.rat.license.LicenseSetFactory.LicenseFilter.none));
        org.junit.Assert.assertNotNull(strSet45);
        org.junit.Assert.assertNotNull(iLicenseFamilySet46);
    }

    @Test
    public void test14982() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest29.test14982");
        org.apache.rat.configuration.builders.AllBuilder allBuilder0 = new org.apache.rat.configuration.builders.AllBuilder();
        java.lang.String str1 = allBuilder0.toString();
        java.util.List<org.apache.rat.analysis.IHeaderMatcher> iHeaderMatcherList2 = allBuilder0.getChildren();
        org.apache.rat.configuration.builders.MatcherRefBuilder matcherRefBuilder3 = new org.apache.rat.configuration.builders.MatcherRefBuilder();
        org.apache.rat.configuration.builders.AbstractBuilder abstractBuilder4 = allBuilder0.add((org.apache.rat.analysis.IHeaderMatcher.Builder) matcherRefBuilder3);
        org.apache.rat.configuration.builders.MatcherRefBuilder matcherRefBuilder6 = matcherRefBuilder3.setRefId("http:");
        java.util.Map<java.lang.String, org.apache.rat.analysis.IHeaderMatcher> strMap7 = null;
        org.apache.rat.configuration.builders.MatcherRefBuilder matcherRefBuilder8 = matcherRefBuilder6.setMatchers(strMap7);
        org.apache.rat.configuration.builders.MatcherRefBuilder matcherRefBuilder10 = matcherRefBuilder8.setRefId("");
        java.lang.String str11 = matcherRefBuilder8.toString();
        // The following exception was thrown during execution in test generation
        try {
            org.apache.rat.analysis.IHeaderMatcher iHeaderMatcher12 = matcherRefBuilder8.build();
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertEquals("'" + str1 + "' != '" + "AllBuilder:" + "'", str1, "AllBuilder:");
        org.junit.Assert.assertNotNull(iHeaderMatcherList2);
        org.junit.Assert.assertNotNull(abstractBuilder4);
        org.junit.Assert.assertNotNull(matcherRefBuilder6);
        org.junit.Assert.assertNotNull(matcherRefBuilder8);
        org.junit.Assert.assertNotNull(matcherRefBuilder10);
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "MathcerRefBuilder: " + "'", str11, "MathcerRefBuilder: ");
    }

    @Test
    public void test14983() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest29.test14983");
        org.apache.rat.utils.Log log0 = null;
        org.apache.rat.ReportConfiguration reportConfiguration1 = new org.apache.rat.ReportConfiguration(log0);
        java.io.FilenameFilter filenameFilter2 = reportConfiguration1.getInputFileFilter();
        org.apache.rat.license.LicenseSetFactory.LicenseFilter licenseFilter3 = org.apache.rat.license.LicenseSetFactory.LicenseFilter.all;
        java.util.SortedSet<org.apache.rat.license.ILicense> iLicenseSet4 = reportConfiguration1.getLicenses(licenseFilter3);
        org.apache.rat.config.AddLicenseHeaders addLicenseHeaders5 = org.apache.rat.config.AddLicenseHeaders.FALSE;
        reportConfiguration1.setAddLicenseHeaders(addLicenseHeaders5);
        org.apache.rat.utils.Log log7 = null;
        org.apache.rat.ReportConfiguration reportConfiguration8 = new org.apache.rat.ReportConfiguration(log7);
        org.apache.rat.report.claim.ClaimStatistic claimStatistic9 = org.apache.rat.Reporter.report(reportConfiguration8);
        org.apache.rat.license.LicenseSetFactory.LicenseFilter licenseFilter10 = org.apache.rat.license.LicenseSetFactory.LicenseFilter.all;
        org.apache.rat.Reporter.listLicenses(reportConfiguration8, licenseFilter10);
        org.apache.rat.Reporter.listLicenses(reportConfiguration1, licenseFilter10);
        org.apache.rat.utils.Log log13 = null;
        org.apache.rat.ReportConfiguration reportConfiguration14 = new org.apache.rat.ReportConfiguration(log13);
        java.io.FilenameFilter filenameFilter15 = reportConfiguration14.getInputFileFilter();
        org.apache.rat.license.LicenseSetFactory.LicenseFilter licenseFilter16 = org.apache.rat.license.LicenseSetFactory.LicenseFilter.all;
        java.util.SortedSet<org.apache.rat.license.ILicense> iLicenseSet17 = reportConfiguration14.getLicenses(licenseFilter16);
        org.apache.rat.config.AddLicenseHeaders addLicenseHeaders18 = org.apache.rat.config.AddLicenseHeaders.FALSE;
        reportConfiguration14.setAddLicenseHeaders(addLicenseHeaders18);
        org.apache.rat.utils.Log log20 = null;
        org.apache.rat.ReportConfiguration reportConfiguration21 = new org.apache.rat.ReportConfiguration(log20);
        org.apache.rat.report.claim.ClaimStatistic claimStatistic22 = org.apache.rat.Reporter.report(reportConfiguration21);
        org.apache.rat.license.LicenseSetFactory.LicenseFilter licenseFilter23 = org.apache.rat.license.LicenseSetFactory.LicenseFilter.all;
        org.apache.rat.Reporter.listLicenses(reportConfiguration21, licenseFilter23);
        org.apache.rat.Reporter.listLicenses(reportConfiguration14, licenseFilter23);
        org.apache.rat.Reporter.listLicenses(reportConfiguration1, licenseFilter23);
        org.apache.rat.utils.Log log27 = null;
        org.apache.rat.ReportConfiguration reportConfiguration28 = new org.apache.rat.ReportConfiguration(log27);
        org.apache.commons.io.function.IOSupplier<java.io.OutputStream> outputStreamIOSupplier29 = reportConfiguration28.getOutput();
        reportConfiguration1.setOut(outputStreamIOSupplier29);
        org.apache.rat.utils.Log.Level level31 = org.apache.rat.utils.Log.Level.WARN;
        reportConfiguration1.logLicenseCollisions(level31);
        org.apache.commons.io.filefilter.IOFileFilter iOFileFilter33 = reportConfiguration1.getDirectoryFilter();
        java.nio.file.Path path34 = null;
        java.nio.file.attribute.BasicFileAttributes basicFileAttributes35 = null;
        java.nio.file.FileVisitResult fileVisitResult36 = iOFileFilter33.accept(path34, basicFileAttributes35);
        org.apache.commons.io.filefilter.IOFileFilter iOFileFilter37 = iOFileFilter33.negate();
        org.apache.commons.io.filefilter.IOFileFilter iOFileFilter38 = iOFileFilter37.negate();
        org.apache.rat.utils.Log log39 = null;
        org.apache.rat.ReportConfiguration reportConfiguration40 = new org.apache.rat.ReportConfiguration(log39);
        org.apache.rat.report.claim.ClaimStatistic claimStatistic41 = org.apache.rat.Reporter.report(reportConfiguration40);
        org.apache.rat.utils.ReportingSet.Options options42 = org.apache.rat.utils.ReportingSet.Options.OVERWRITE;
        reportConfiguration40.licenseDuplicateOption(options42);
        org.apache.commons.io.filefilter.IOFileFilter iOFileFilter44 = reportConfiguration40.getDirectoryFilter();
        org.apache.commons.io.filefilter.IOFileFilter iOFileFilter45 = iOFileFilter37.and(iOFileFilter44);
        java.nio.file.Path path46 = null;
        boolean boolean47 = iOFileFilter44.matches(path46);
        java.nio.file.Path path48 = null;
        boolean boolean49 = iOFileFilter44.matches(path48);
        org.junit.Assert.assertNull(filenameFilter2);
        org.junit.Assert.assertTrue("'" + licenseFilter3 + "' != '" + org.apache.rat.license.LicenseSetFactory.LicenseFilter.all + "'", licenseFilter3.equals(org.apache.rat.license.LicenseSetFactory.LicenseFilter.all));
        org.junit.Assert.assertNotNull(iLicenseSet4);
        org.junit.Assert.assertTrue("'" + addLicenseHeaders5 + "' != '" + org.apache.rat.config.AddLicenseHeaders.FALSE + "'", addLicenseHeaders5.equals(org.apache.rat.config.AddLicenseHeaders.FALSE));
        org.junit.Assert.assertNull(claimStatistic9);
        org.junit.Assert.assertTrue("'" + licenseFilter10 + "' != '" + org.apache.rat.license.LicenseSetFactory.LicenseFilter.all + "'", licenseFilter10.equals(org.apache.rat.license.LicenseSetFactory.LicenseFilter.all));
        org.junit.Assert.assertNull(filenameFilter15);
        org.junit.Assert.assertTrue("'" + licenseFilter16 + "' != '" + org.apache.rat.license.LicenseSetFactory.LicenseFilter.all + "'", licenseFilter16.equals(org.apache.rat.license.LicenseSetFactory.LicenseFilter.all));
        org.junit.Assert.assertNotNull(iLicenseSet17);
        org.junit.Assert.assertTrue("'" + addLicenseHeaders18 + "' != '" + org.apache.rat.config.AddLicenseHeaders.FALSE + "'", addLicenseHeaders18.equals(org.apache.rat.config.AddLicenseHeaders.FALSE));
        org.junit.Assert.assertNull(claimStatistic22);
        org.junit.Assert.assertTrue("'" + licenseFilter23 + "' != '" + org.apache.rat.license.LicenseSetFactory.LicenseFilter.all + "'", licenseFilter23.equals(org.apache.rat.license.LicenseSetFactory.LicenseFilter.all));
        org.junit.Assert.assertNotNull(outputStreamIOSupplier29);
        org.junit.Assert.assertTrue("'" + level31 + "' != '" + org.apache.rat.utils.Log.Level.WARN + "'", level31.equals(org.apache.rat.utils.Log.Level.WARN));
        org.junit.Assert.assertNotNull(iOFileFilter33);
        org.junit.Assert.assertTrue("'" + fileVisitResult36 + "' != '" + java.nio.file.FileVisitResult.TERMINATE + "'", fileVisitResult36.equals(java.nio.file.FileVisitResult.TERMINATE));
        org.junit.Assert.assertNotNull(iOFileFilter37);
        org.junit.Assert.assertNotNull(iOFileFilter38);
        org.junit.Assert.assertNull(claimStatistic41);
        org.junit.Assert.assertTrue("'" + options42 + "' != '" + org.apache.rat.utils.ReportingSet.Options.OVERWRITE + "'", options42.equals(org.apache.rat.utils.ReportingSet.Options.OVERWRITE));
        org.junit.Assert.assertNotNull(iOFileFilter44);
        org.junit.Assert.assertNotNull(iOFileFilter45);
        org.junit.Assert.assertTrue("'" + boolean47 + "' != '" + false + "'", boolean47 == false);
        org.junit.Assert.assertTrue("'" + boolean49 + "' != '" + false + "'", boolean49 == false);
    }

    @Test
    public void test14984() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest29.test14984");
        org.apache.rat.configuration.builders.AllBuilder allBuilder0 = new org.apache.rat.configuration.builders.AllBuilder();
        java.lang.String str1 = allBuilder0.toString();
        java.util.List<org.apache.rat.analysis.IHeaderMatcher> iHeaderMatcherList2 = allBuilder0.getChildren();
        org.apache.rat.analysis.IHeaderMatcher iHeaderMatcher3 = allBuilder0.build();
        boolean boolean4 = allBuilder0.hasId();
        org.apache.rat.analysis.IHeaderMatcher iHeaderMatcher5 = allBuilder0.build();
        org.apache.rat.analysis.IHeaderMatcher iHeaderMatcher6 = allBuilder0.build();
        org.junit.Assert.assertEquals("'" + str1 + "' != '" + "AllBuilder:" + "'", str1, "AllBuilder:");
        org.junit.Assert.assertNotNull(iHeaderMatcherList2);
        org.junit.Assert.assertNotNull(iHeaderMatcher3);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertNotNull(iHeaderMatcher5);
        org.junit.Assert.assertNotNull(iHeaderMatcher6);
    }

    @Test
    public void test14985() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest29.test14985");
        java.lang.String[] strArray5 = new java.lang.String[] { "http://org/apache/rat/meta-data#LicenseFamilyCategory", "Datum [ name ='http://org/apache/rat/meta-data#LicenseFamilyCategory',value ='GPL1  ']", "MANIFEST.MF", "AllBuilder:", "The MIT License" };
        org.apache.rat.utils.ReportingSet<java.lang.String> strSet6 = new org.apache.rat.utils.ReportingSet<java.lang.String>();
        boolean boolean7 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strSet6, strArray5);
        boolean boolean9 = strSet6.addIfNotPresent("http://org/apache/rat/meta-data#LicenseFamilyName");
        boolean boolean11 = strSet6.addIfNotPresent("ef7a8b13-64c3-4510-bb0c-dbf208e1e73f");
        java.util.stream.Stream<java.lang.String> strStream12 = strSet6.stream();
        org.apache.rat.utils.DefaultLog defaultLog13 = org.apache.rat.utils.DefaultLog.INSTANCE;
        org.apache.rat.utils.Log log14 = null;
        org.apache.rat.ReportConfiguration reportConfiguration15 = new org.apache.rat.ReportConfiguration(log14);
        reportConfiguration15.addApprovedLicenseCategory(".cvsignore");
        org.apache.rat.utils.Log.Level level18 = org.apache.rat.utils.Log.Level.ERROR;
        reportConfiguration15.logFamilyCollisions(level18);
        defaultLog13.setLevel(level18);
        org.apache.rat.utils.ReportingSet<java.lang.String> strSet21 = strSet6.setLogLevel(level18);
        java.util.Spliterator<java.lang.String> strSpliterator22 = strSet6.spliterator();
        boolean boolean24 = strSet6.addIfNotPresent("AnyBuilder:");
        org.apache.rat.configuration.Format format25 = org.apache.rat.configuration.Format.XML;
        org.apache.rat.configuration.LicenseReader licenseReader26 = format25.licenseReader();
        org.apache.rat.configuration.MatcherReader matcherReader27 = format25.matcherReader();
        org.apache.rat.configuration.LicenseReader licenseReader28 = format25.licenseReader();
        org.apache.rat.configuration.LicenseReader licenseReader29 = format25.licenseReader();
        org.apache.rat.configuration.MatcherReader matcherReader30 = format25.matcherReader();
        org.apache.rat.configuration.MatcherReader matcherReader31 = format25.matcherReader();
        org.apache.rat.configuration.MatcherReader matcherReader32 = format25.matcherReader();
        org.apache.rat.configuration.LicenseReader licenseReader33 = format25.licenseReader();
        org.apache.rat.configuration.LicenseReader licenseReader34 = format25.licenseReader();
        java.util.SortedSet<org.apache.rat.license.ILicenseFamily> iLicenseFamilySet35 = licenseReader34.readFamilies();
        boolean boolean36 = strSet6.removeAll((java.util.Collection<org.apache.rat.license.ILicenseFamily>) iLicenseFamilySet35);
        org.junit.Assert.assertNotNull(strArray5);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + true + "'", boolean7 == true);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + true + "'", boolean9 == true);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + true + "'", boolean11 == true);
        org.junit.Assert.assertNotNull(strStream12);
        org.junit.Assert.assertNotNull(defaultLog13);
        org.junit.Assert.assertTrue("'" + level18 + "' != '" + org.apache.rat.utils.Log.Level.ERROR + "'", level18.equals(org.apache.rat.utils.Log.Level.ERROR));
        org.junit.Assert.assertNotNull(strSet21);
        org.junit.Assert.assertNotNull(strSpliterator22);
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + true + "'", boolean24 == true);
        org.junit.Assert.assertTrue("'" + format25 + "' != '" + org.apache.rat.configuration.Format.XML + "'", format25.equals(org.apache.rat.configuration.Format.XML));
        org.junit.Assert.assertNotNull(licenseReader26);
        org.junit.Assert.assertNotNull(matcherReader27);
        org.junit.Assert.assertNotNull(licenseReader28);
        org.junit.Assert.assertNotNull(licenseReader29);
        org.junit.Assert.assertNotNull(matcherReader30);
        org.junit.Assert.assertNotNull(matcherReader31);
        org.junit.Assert.assertNotNull(matcherReader32);
        org.junit.Assert.assertNotNull(licenseReader33);
        org.junit.Assert.assertNotNull(licenseReader34);
        org.junit.Assert.assertNotNull(iLicenseFamilySet35);
        org.junit.Assert.assertTrue("'" + boolean36 + "' != '" + false + "'", boolean36 == false);
    }

    @Test
    public void test14986() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest29.test14986");
        org.apache.rat.configuration.builders.TextBuilder textBuilder0 = new org.apache.rat.configuration.builders.TextBuilder();
        org.apache.rat.configuration.builders.TextBuilder textBuilder2 = textBuilder0.setText("t true");
        org.apache.rat.configuration.builders.TextCaptureBuilder textCaptureBuilder4 = textBuilder0.setText("c523095e-4421-4cc4-93e2-039f23b91f76");
        org.apache.rat.configuration.builders.TextBuilder textBuilder6 = textBuilder0.setText("d25f13bc-1910-4451-97b5-b72663551a5d");
        org.apache.rat.configuration.builders.TextBuilder textBuilder8 = textBuilder6.setText("3e2b228d-d5ff-4444-8d8c-d614494b2426");
        org.apache.rat.configuration.builders.TextBuilder textBuilder10 = textBuilder6.setText("e43d2da5-cf5e-486d-9eb8-43df71afd6c2");
        org.apache.rat.configuration.builders.TextBuilder textBuilder12 = textBuilder10.setText("357bf79d-4123-4d3b-a061-96986cdaedaa");
        java.lang.String str13 = textBuilder10.toString();
        org.junit.Assert.assertNotNull(textBuilder2);
        org.junit.Assert.assertNotNull(textCaptureBuilder4);
        org.junit.Assert.assertNotNull(textBuilder6);
        org.junit.Assert.assertNotNull(textBuilder8);
        org.junit.Assert.assertNotNull(textBuilder10);
        org.junit.Assert.assertNotNull(textBuilder12);
        org.junit.Assert.assertEquals("'" + str13 + "' != '" + "TextBuilder: 357bf79d-4123-4d3b-a..." + "'", str13, "TextBuilder: 357bf79d-4123-4d3b-a...");
    }

    @Test
    public void test14987() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest29.test14987");
        org.apache.rat.analysis.license.FullTextMatchingLicense fullTextMatchingLicense0 = new org.apache.rat.analysis.license.FullTextMatchingLicense();
        fullTextMatchingLicense0.setLicenseFamilyName("hi!");
        java.lang.String str3 = fullTextMatchingLicense0.getLicenseFamilyCategory();
        java.lang.String str4 = fullTextMatchingLicense0.getLicenseFamilyCategory();
        java.lang.String str5 = fullTextMatchingLicense0.getNotes();
        java.lang.String str6 = fullTextMatchingLicense0.getNotes();
        java.lang.String str7 = fullTextMatchingLicense0.getLicenseFamilyCategory();
        fullTextMatchingLicense0.setFullText("TextBuilder: ApacheLicenseVersion...");
        org.junit.Assert.assertNull(str3);
        org.junit.Assert.assertNull(str4);
        org.junit.Assert.assertNull(str5);
        org.junit.Assert.assertNull(str6);
        org.junit.Assert.assertNull(str7);
    }

    @Test
    public void test14988() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest29.test14988");
        org.apache.rat.utils.Log log0 = null;
        org.apache.rat.ReportConfiguration reportConfiguration1 = new org.apache.rat.ReportConfiguration(log0);
        java.io.FilenameFilter filenameFilter2 = reportConfiguration1.getInputFileFilter();
        org.apache.rat.license.LicenseSetFactory.LicenseFilter licenseFilter3 = org.apache.rat.license.LicenseSetFactory.LicenseFilter.all;
        java.util.SortedSet<org.apache.rat.license.ILicense> iLicenseSet4 = reportConfiguration1.getLicenses(licenseFilter3);
        org.apache.rat.config.AddLicenseHeaders addLicenseHeaders5 = org.apache.rat.config.AddLicenseHeaders.FALSE;
        reportConfiguration1.setAddLicenseHeaders(addLicenseHeaders5);
        org.apache.rat.utils.Log log7 = null;
        org.apache.rat.ReportConfiguration reportConfiguration8 = new org.apache.rat.ReportConfiguration(log7);
        org.apache.rat.report.claim.ClaimStatistic claimStatistic9 = org.apache.rat.Reporter.report(reportConfiguration8);
        org.apache.rat.license.LicenseSetFactory.LicenseFilter licenseFilter10 = org.apache.rat.license.LicenseSetFactory.LicenseFilter.all;
        org.apache.rat.Reporter.listLicenses(reportConfiguration8, licenseFilter10);
        org.apache.rat.Reporter.listLicenses(reportConfiguration1, licenseFilter10);
        org.apache.rat.utils.Log log13 = null;
        org.apache.rat.ReportConfiguration reportConfiguration14 = new org.apache.rat.ReportConfiguration(log13);
        java.io.FilenameFilter filenameFilter15 = reportConfiguration14.getInputFileFilter();
        org.apache.rat.license.LicenseSetFactory.LicenseFilter licenseFilter16 = org.apache.rat.license.LicenseSetFactory.LicenseFilter.all;
        java.util.SortedSet<org.apache.rat.license.ILicense> iLicenseSet17 = reportConfiguration14.getLicenses(licenseFilter16);
        org.apache.rat.config.AddLicenseHeaders addLicenseHeaders18 = org.apache.rat.config.AddLicenseHeaders.FALSE;
        reportConfiguration14.setAddLicenseHeaders(addLicenseHeaders18);
        org.apache.rat.utils.Log log20 = null;
        org.apache.rat.ReportConfiguration reportConfiguration21 = new org.apache.rat.ReportConfiguration(log20);
        org.apache.rat.report.claim.ClaimStatistic claimStatistic22 = org.apache.rat.Reporter.report(reportConfiguration21);
        org.apache.rat.license.LicenseSetFactory.LicenseFilter licenseFilter23 = org.apache.rat.license.LicenseSetFactory.LicenseFilter.all;
        org.apache.rat.Reporter.listLicenses(reportConfiguration21, licenseFilter23);
        org.apache.rat.Reporter.listLicenses(reportConfiguration14, licenseFilter23);
        org.apache.rat.Reporter.listLicenses(reportConfiguration1, licenseFilter23);
        org.apache.commons.io.function.IOSupplier<java.io.OutputStream> outputStreamIOSupplier27 = reportConfiguration1.getOutput();
        org.apache.rat.license.ILicenseFamilyBuilder iLicenseFamilyBuilder28 = new org.apache.rat.license.ILicenseFamilyBuilder();
        org.apache.rat.license.ILicenseFamily.Builder builder30 = iLicenseFamilyBuilder28.setLicenseFamilyCategory("Modified BSD License");
        org.apache.rat.license.ILicenseFamily.Builder builder32 = iLicenseFamilyBuilder28.setLicenseFamilyCategory("6486879f-fc81-4b57-aec7-c4c77d540c30");
        org.apache.rat.license.ILicenseFamily.Builder builder34 = iLicenseFamilyBuilder28.setLicenseFamilyName("MathcerRefBuilder: ");
        org.apache.rat.license.ILicenseFamily.Builder builder36 = iLicenseFamilyBuilder28.setLicenseFamilyName("Copyright Builder: s:6481fb19-38f0-43f5-ab95-caf84a069ee1 e:null o:null");
        java.lang.String str37 = builder36.getCategory();
        reportConfiguration1.addFamily(builder36);
        boolean boolean39 = reportConfiguration1.isAddingLicenses();
        org.apache.rat.utils.Log log40 = null;
        org.apache.rat.ReportConfiguration reportConfiguration41 = new org.apache.rat.ReportConfiguration(log40);
        org.apache.rat.report.claim.ClaimStatistic claimStatistic42 = org.apache.rat.Reporter.report(reportConfiguration41);
        org.apache.commons.io.function.IOSupplier<java.io.OutputStream> outputStreamIOSupplier43 = reportConfiguration41.getOutput();
        boolean boolean44 = reportConfiguration41.isAddingLicensesForced();
        java.lang.String str45 = reportConfiguration41.getCopyrightMessage();
        reportConfiguration41.removeApprovedLicenseCategory("AnyBuilder:\nAllBuilder:");
        org.apache.commons.io.function.IOSupplier<java.io.OutputStream> outputStreamIOSupplier48 = reportConfiguration41.getOutput();
        java.util.SortedSet<java.lang.String> strSet49 = reportConfiguration41.getApprovedLicenseCategories();
        reportConfiguration1.addApprovedLicenseCategories((java.util.Collection<java.lang.String>) strSet49);
        java.util.SortedSet<java.lang.String> strSet51 = reportConfiguration1.getApprovedLicenseCategories();
        org.junit.Assert.assertNull(filenameFilter2);
        org.junit.Assert.assertTrue("'" + licenseFilter3 + "' != '" + org.apache.rat.license.LicenseSetFactory.LicenseFilter.all + "'", licenseFilter3.equals(org.apache.rat.license.LicenseSetFactory.LicenseFilter.all));
        org.junit.Assert.assertNotNull(iLicenseSet4);
        org.junit.Assert.assertTrue("'" + addLicenseHeaders5 + "' != '" + org.apache.rat.config.AddLicenseHeaders.FALSE + "'", addLicenseHeaders5.equals(org.apache.rat.config.AddLicenseHeaders.FALSE));
        org.junit.Assert.assertNull(claimStatistic9);
        org.junit.Assert.assertTrue("'" + licenseFilter10 + "' != '" + org.apache.rat.license.LicenseSetFactory.LicenseFilter.all + "'", licenseFilter10.equals(org.apache.rat.license.LicenseSetFactory.LicenseFilter.all));
        org.junit.Assert.assertNull(filenameFilter15);
        org.junit.Assert.assertTrue("'" + licenseFilter16 + "' != '" + org.apache.rat.license.LicenseSetFactory.LicenseFilter.all + "'", licenseFilter16.equals(org.apache.rat.license.LicenseSetFactory.LicenseFilter.all));
        org.junit.Assert.assertNotNull(iLicenseSet17);
        org.junit.Assert.assertTrue("'" + addLicenseHeaders18 + "' != '" + org.apache.rat.config.AddLicenseHeaders.FALSE + "'", addLicenseHeaders18.equals(org.apache.rat.config.AddLicenseHeaders.FALSE));
        org.junit.Assert.assertNull(claimStatistic22);
        org.junit.Assert.assertTrue("'" + licenseFilter23 + "' != '" + org.apache.rat.license.LicenseSetFactory.LicenseFilter.all + "'", licenseFilter23.equals(org.apache.rat.license.LicenseSetFactory.LicenseFilter.all));
        org.junit.Assert.assertNotNull(outputStreamIOSupplier27);
        org.junit.Assert.assertNotNull(builder30);
        org.junit.Assert.assertNotNull(builder32);
        org.junit.Assert.assertNotNull(builder34);
        org.junit.Assert.assertNotNull(builder36);
        org.junit.Assert.assertEquals("'" + str37 + "' != '" + "6486879f-fc81-4b57-aec7-c4c77d540c30" + "'", str37, "6486879f-fc81-4b57-aec7-c4c77d540c30");
        org.junit.Assert.assertTrue("'" + boolean39 + "' != '" + false + "'", boolean39 == false);
        org.junit.Assert.assertNull(claimStatistic42);
        org.junit.Assert.assertNotNull(outputStreamIOSupplier43);
        org.junit.Assert.assertTrue("'" + boolean44 + "' != '" + false + "'", boolean44 == false);
        org.junit.Assert.assertNull(str45);
        org.junit.Assert.assertNotNull(outputStreamIOSupplier48);
        org.junit.Assert.assertNotNull(strSet49);
        org.junit.Assert.assertNotNull(strSet51);
    }

    @Test
    public void test14989() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest29.test14989");
        org.apache.rat.configuration.Format format0 = org.apache.rat.configuration.Format.XML;
        org.apache.rat.configuration.LicenseReader licenseReader1 = format0.licenseReader();
        java.util.SortedSet<org.apache.rat.license.ILicense> iLicenseSet2 = licenseReader1.readLicenses();
        java.lang.String[] strArray8 = new java.lang.String[] { "http://org/apache/rat/meta-data#LicenseFamilyCategory", "Datum [ name ='http://org/apache/rat/meta-data#LicenseFamilyCategory',value ='GPL1  ']", "MANIFEST.MF", "AllBuilder:", "The MIT License" };
        org.apache.rat.utils.ReportingSet<java.lang.String> strSet9 = new org.apache.rat.utils.ReportingSet<java.lang.String>();
        boolean boolean10 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strSet9, strArray8);
        boolean boolean12 = strSet9.addIfNotPresent("http://org/apache/rat/meta-data#LicenseFamilyName");
        boolean boolean14 = strSet9.addIfNotPresent("ef7a8b13-64c3-4510-bb0c-dbf208e1e73f");
        java.util.function.Function<java.lang.String, java.lang.String> strFunction15 = null;
        org.apache.rat.utils.ReportingSet<java.lang.String> strSet16 = strSet9.setMsgFormat(strFunction15);
        boolean boolean17 = strSet9.isEmpty();
        org.apache.rat.license.LicenseSetFactory licenseSetFactory18 = new org.apache.rat.license.LicenseSetFactory(iLicenseSet2, (java.util.Collection<java.lang.String>) strSet9);
        org.apache.rat.utils.Log log19 = null;
        org.apache.rat.ReportConfiguration reportConfiguration20 = new org.apache.rat.ReportConfiguration(log19);
        java.io.FilenameFilter filenameFilter21 = reportConfiguration20.getInputFileFilter();
        org.apache.rat.license.LicenseSetFactory.LicenseFilter licenseFilter22 = org.apache.rat.license.LicenseSetFactory.LicenseFilter.all;
        java.util.SortedSet<org.apache.rat.license.ILicense> iLicenseSet23 = reportConfiguration20.getLicenses(licenseFilter22);
        org.apache.rat.config.AddLicenseHeaders addLicenseHeaders24 = org.apache.rat.config.AddLicenseHeaders.FALSE;
        reportConfiguration20.setAddLicenseHeaders(addLicenseHeaders24);
        org.apache.rat.utils.Log log26 = null;
        org.apache.rat.ReportConfiguration reportConfiguration27 = new org.apache.rat.ReportConfiguration(log26);
        org.apache.rat.report.claim.ClaimStatistic claimStatistic28 = org.apache.rat.Reporter.report(reportConfiguration27);
        org.apache.rat.license.LicenseSetFactory.LicenseFilter licenseFilter29 = org.apache.rat.license.LicenseSetFactory.LicenseFilter.all;
        org.apache.rat.Reporter.listLicenses(reportConfiguration27, licenseFilter29);
        org.apache.rat.Reporter.listLicenses(reportConfiguration20, licenseFilter29);
        org.apache.rat.utils.Log log32 = null;
        org.apache.rat.ReportConfiguration reportConfiguration33 = new org.apache.rat.ReportConfiguration(log32);
        java.io.FilenameFilter filenameFilter34 = reportConfiguration33.getInputFileFilter();
        org.apache.rat.license.LicenseSetFactory.LicenseFilter licenseFilter35 = org.apache.rat.license.LicenseSetFactory.LicenseFilter.all;
        java.util.SortedSet<org.apache.rat.license.ILicense> iLicenseSet36 = reportConfiguration33.getLicenses(licenseFilter35);
        org.apache.rat.config.AddLicenseHeaders addLicenseHeaders37 = org.apache.rat.config.AddLicenseHeaders.FALSE;
        reportConfiguration33.setAddLicenseHeaders(addLicenseHeaders37);
        org.apache.rat.utils.Log log39 = null;
        org.apache.rat.ReportConfiguration reportConfiguration40 = new org.apache.rat.ReportConfiguration(log39);
        org.apache.rat.report.claim.ClaimStatistic claimStatistic41 = org.apache.rat.Reporter.report(reportConfiguration40);
        org.apache.rat.license.LicenseSetFactory.LicenseFilter licenseFilter42 = org.apache.rat.license.LicenseSetFactory.LicenseFilter.all;
        org.apache.rat.Reporter.listLicenses(reportConfiguration40, licenseFilter42);
        org.apache.rat.Reporter.listLicenses(reportConfiguration33, licenseFilter42);
        org.apache.rat.Reporter.listLicenses(reportConfiguration20, licenseFilter42);
        java.io.FilenameFilter filenameFilter46 = reportConfiguration20.getInputFileFilter();
        org.apache.rat.utils.Log log47 = null;
        org.apache.rat.ReportConfiguration reportConfiguration48 = new org.apache.rat.ReportConfiguration(log47);
        java.io.FilenameFilter filenameFilter49 = reportConfiguration48.getInputFileFilter();
        org.apache.rat.license.LicenseSetFactory.LicenseFilter licenseFilter50 = org.apache.rat.license.LicenseSetFactory.LicenseFilter.all;
        java.util.SortedSet<org.apache.rat.license.ILicense> iLicenseSet51 = reportConfiguration48.getLicenses(licenseFilter50);
        org.apache.rat.config.AddLicenseHeaders addLicenseHeaders52 = org.apache.rat.config.AddLicenseHeaders.FALSE;
        reportConfiguration48.setAddLicenseHeaders(addLicenseHeaders52);
        org.apache.rat.utils.Log log54 = null;
        org.apache.rat.ReportConfiguration reportConfiguration55 = new org.apache.rat.ReportConfiguration(log54);
        org.apache.rat.report.claim.ClaimStatistic claimStatistic56 = org.apache.rat.Reporter.report(reportConfiguration55);
        org.apache.rat.license.LicenseSetFactory.LicenseFilter licenseFilter57 = org.apache.rat.license.LicenseSetFactory.LicenseFilter.all;
        org.apache.rat.Reporter.listLicenses(reportConfiguration55, licenseFilter57);
        org.apache.rat.Reporter.listLicenses(reportConfiguration48, licenseFilter57);
        org.apache.rat.utils.Log log60 = null;
        org.apache.rat.ReportConfiguration reportConfiguration61 = new org.apache.rat.ReportConfiguration(log60);
        java.io.FilenameFilter filenameFilter62 = reportConfiguration61.getInputFileFilter();
        org.apache.rat.license.LicenseSetFactory.LicenseFilter licenseFilter63 = org.apache.rat.license.LicenseSetFactory.LicenseFilter.all;
        java.util.SortedSet<org.apache.rat.license.ILicense> iLicenseSet64 = reportConfiguration61.getLicenses(licenseFilter63);
        org.apache.rat.config.AddLicenseHeaders addLicenseHeaders65 = org.apache.rat.config.AddLicenseHeaders.FALSE;
        reportConfiguration61.setAddLicenseHeaders(addLicenseHeaders65);
        org.apache.rat.utils.Log log67 = null;
        org.apache.rat.ReportConfiguration reportConfiguration68 = new org.apache.rat.ReportConfiguration(log67);
        org.apache.rat.report.claim.ClaimStatistic claimStatistic69 = org.apache.rat.Reporter.report(reportConfiguration68);
        org.apache.rat.license.LicenseSetFactory.LicenseFilter licenseFilter70 = org.apache.rat.license.LicenseSetFactory.LicenseFilter.all;
        org.apache.rat.Reporter.listLicenses(reportConfiguration68, licenseFilter70);
        org.apache.rat.Reporter.listLicenses(reportConfiguration61, licenseFilter70);
        org.apache.rat.Reporter.listLicenses(reportConfiguration48, licenseFilter70);
        java.util.SortedSet<org.apache.rat.license.ILicense> iLicenseSet74 = reportConfiguration20.getLicenses(licenseFilter70);
        java.util.SortedSet<org.apache.rat.license.ILicenseFamily> iLicenseFamilySet75 = licenseSetFactory18.getLicenseFamilies(licenseFilter70);
        org.apache.rat.policy.DefaultPolicy defaultPolicy76 = new org.apache.rat.policy.DefaultPolicy((java.util.Collection<org.apache.rat.license.ILicenseFamily>) iLicenseFamilySet75);
        org.apache.rat.api.Document document77 = null;
        defaultPolicy76.analyse(document77);
        org.junit.Assert.assertTrue("'" + format0 + "' != '" + org.apache.rat.configuration.Format.XML + "'", format0.equals(org.apache.rat.configuration.Format.XML));
        org.junit.Assert.assertNotNull(licenseReader1);
        org.junit.Assert.assertNotNull(iLicenseSet2);
        org.junit.Assert.assertNotNull(strArray8);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + true + "'", boolean10 == true);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + true + "'", boolean12 == true);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + true + "'", boolean14 == true);
        org.junit.Assert.assertNotNull(strSet16);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + false + "'", boolean17 == false);
        org.junit.Assert.assertNull(filenameFilter21);
        org.junit.Assert.assertTrue("'" + licenseFilter22 + "' != '" + org.apache.rat.license.LicenseSetFactory.LicenseFilter.all + "'", licenseFilter22.equals(org.apache.rat.license.LicenseSetFactory.LicenseFilter.all));
        org.junit.Assert.assertNotNull(iLicenseSet23);
        org.junit.Assert.assertTrue("'" + addLicenseHeaders24 + "' != '" + org.apache.rat.config.AddLicenseHeaders.FALSE + "'", addLicenseHeaders24.equals(org.apache.rat.config.AddLicenseHeaders.FALSE));
        org.junit.Assert.assertNull(claimStatistic28);
        org.junit.Assert.assertTrue("'" + licenseFilter29 + "' != '" + org.apache.rat.license.LicenseSetFactory.LicenseFilter.all + "'", licenseFilter29.equals(org.apache.rat.license.LicenseSetFactory.LicenseFilter.all));
        org.junit.Assert.assertNull(filenameFilter34);
        org.junit.Assert.assertTrue("'" + licenseFilter35 + "' != '" + org.apache.rat.license.LicenseSetFactory.LicenseFilter.all + "'", licenseFilter35.equals(org.apache.rat.license.LicenseSetFactory.LicenseFilter.all));
        org.junit.Assert.assertNotNull(iLicenseSet36);
        org.junit.Assert.assertTrue("'" + addLicenseHeaders37 + "' != '" + org.apache.rat.config.AddLicenseHeaders.FALSE + "'", addLicenseHeaders37.equals(org.apache.rat.config.AddLicenseHeaders.FALSE));
        org.junit.Assert.assertNull(claimStatistic41);
        org.junit.Assert.assertTrue("'" + licenseFilter42 + "' != '" + org.apache.rat.license.LicenseSetFactory.LicenseFilter.all + "'", licenseFilter42.equals(org.apache.rat.license.LicenseSetFactory.LicenseFilter.all));
        org.junit.Assert.assertNull(filenameFilter46);
        org.junit.Assert.assertNull(filenameFilter49);
        org.junit.Assert.assertTrue("'" + licenseFilter50 + "' != '" + org.apache.rat.license.LicenseSetFactory.LicenseFilter.all + "'", licenseFilter50.equals(org.apache.rat.license.LicenseSetFactory.LicenseFilter.all));
        org.junit.Assert.assertNotNull(iLicenseSet51);
        org.junit.Assert.assertTrue("'" + addLicenseHeaders52 + "' != '" + org.apache.rat.config.AddLicenseHeaders.FALSE + "'", addLicenseHeaders52.equals(org.apache.rat.config.AddLicenseHeaders.FALSE));
        org.junit.Assert.assertNull(claimStatistic56);
        org.junit.Assert.assertTrue("'" + licenseFilter57 + "' != '" + org.apache.rat.license.LicenseSetFactory.LicenseFilter.all + "'", licenseFilter57.equals(org.apache.rat.license.LicenseSetFactory.LicenseFilter.all));
        org.junit.Assert.assertNull(filenameFilter62);
        org.junit.Assert.assertTrue("'" + licenseFilter63 + "' != '" + org.apache.rat.license.LicenseSetFactory.LicenseFilter.all + "'", licenseFilter63.equals(org.apache.rat.license.LicenseSetFactory.LicenseFilter.all));
        org.junit.Assert.assertNotNull(iLicenseSet64);
        org.junit.Assert.assertTrue("'" + addLicenseHeaders65 + "' != '" + org.apache.rat.config.AddLicenseHeaders.FALSE + "'", addLicenseHeaders65.equals(org.apache.rat.config.AddLicenseHeaders.FALSE));
        org.junit.Assert.assertNull(claimStatistic69);
        org.junit.Assert.assertTrue("'" + licenseFilter70 + "' != '" + org.apache.rat.license.LicenseSetFactory.LicenseFilter.all + "'", licenseFilter70.equals(org.apache.rat.license.LicenseSetFactory.LicenseFilter.all));
        org.junit.Assert.assertNotNull(iLicenseSet74);
        org.junit.Assert.assertNotNull(iLicenseFamilySet75);
    }

    @Test
    public void test14990() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest29.test14990");
        org.apache.rat.utils.DefaultLog defaultLog0 = org.apache.rat.utils.DefaultLog.INSTANCE;
        org.apache.rat.configuration.builders.AllBuilder allBuilder1 = new org.apache.rat.configuration.builders.AllBuilder();
        org.apache.rat.configuration.builders.MatcherRefBuilder matcherRefBuilder2 = org.apache.rat.analysis.IHeaderMatcher.Builder.matcherRef();
        boolean boolean3 = matcherRefBuilder2.hasId();
        java.lang.String str4 = matcherRefBuilder2.toString();
        org.apache.rat.configuration.builders.AnyBuilder anyBuilder5 = org.apache.rat.analysis.IHeaderMatcher.Builder.any();
        org.apache.rat.configuration.builders.NotBuilder notBuilder6 = new org.apache.rat.configuration.builders.NotBuilder();
        java.lang.String str7 = notBuilder6.toString();
        org.apache.rat.configuration.builders.MatcherRefBuilder matcherRefBuilder8 = org.apache.rat.analysis.IHeaderMatcher.Builder.matcherRef();
        boolean boolean9 = matcherRefBuilder8.hasId();
        java.util.Map<java.lang.String, org.apache.rat.analysis.IHeaderMatcher> strMap10 = null;
        org.apache.rat.configuration.builders.MatcherRefBuilder matcherRefBuilder11 = matcherRefBuilder8.setMatchers(strMap10);
        org.apache.rat.configuration.builders.AllBuilder allBuilder12 = new org.apache.rat.configuration.builders.AllBuilder();
        org.apache.rat.configuration.builders.CopyrightBuilder copyrightBuilder13 = org.apache.rat.analysis.IHeaderMatcher.Builder.copyright();
        org.apache.rat.configuration.builders.CopyrightBuilder copyrightBuilder15 = copyrightBuilder13.setStart("OASIS");
        java.lang.String str16 = copyrightBuilder13.toString();
        org.apache.rat.configuration.builders.CopyrightBuilder copyrightBuilder18 = copyrightBuilder13.setStart("223f0aba-15d4-49e9-901e-5740c137aebf");
        org.apache.rat.configuration.builders.MatcherRefBuilder matcherRefBuilder19 = org.apache.rat.analysis.IHeaderMatcher.Builder.matcherRef();
        boolean boolean20 = matcherRefBuilder19.hasId();
        org.apache.rat.configuration.builders.CopyrightBuilder copyrightBuilder21 = org.apache.rat.analysis.IHeaderMatcher.Builder.copyright();
        org.apache.rat.configuration.builders.CopyrightBuilder copyrightBuilder23 = copyrightBuilder21.setStart("OASIS");
        java.lang.String str24 = copyrightBuilder21.toString();
        org.apache.rat.configuration.builders.CopyrightBuilder copyrightBuilder26 = copyrightBuilder21.setStart("223f0aba-15d4-49e9-901e-5740c137aebf");
        org.apache.rat.configuration.builders.CopyrightBuilder copyrightBuilder27 = org.apache.rat.analysis.IHeaderMatcher.Builder.copyright();
        org.apache.rat.configuration.builders.CopyrightBuilder copyrightBuilder28 = org.apache.rat.analysis.IHeaderMatcher.Builder.copyright();
        java.lang.String str29 = copyrightBuilder28.toString();
        org.apache.rat.configuration.builders.CopyrightBuilder copyrightBuilder31 = copyrightBuilder28.setEnd(".cvsignore");
        boolean boolean32 = copyrightBuilder28.hasId();
        org.apache.rat.configuration.builders.CopyrightBuilder copyrightBuilder33 = org.apache.rat.analysis.IHeaderMatcher.Builder.copyright();
        java.lang.String str34 = copyrightBuilder33.toString();
        org.apache.rat.configuration.builders.CopyrightBuilder copyrightBuilder36 = copyrightBuilder33.setEnd(".cvsignore");
        boolean boolean37 = copyrightBuilder33.hasId();
        java.lang.String str38 = copyrightBuilder33.toString();
        org.apache.rat.configuration.builders.CopyrightBuilder copyrightBuilder39 = org.apache.rat.analysis.IHeaderMatcher.Builder.copyright();
        org.apache.rat.configuration.builders.CopyrightBuilder copyrightBuilder41 = copyrightBuilder39.setStart("OASIS");
        org.apache.rat.configuration.builders.AnyBuilder anyBuilder42 = org.apache.rat.analysis.IHeaderMatcher.Builder.any();
        org.apache.rat.configuration.builders.MatcherRefBuilder matcherRefBuilder43 = org.apache.rat.analysis.IHeaderMatcher.Builder.matcherRef();
        boolean boolean44 = matcherRefBuilder43.hasId();
        java.util.Map<java.lang.String, org.apache.rat.analysis.IHeaderMatcher> strMap45 = null;
        org.apache.rat.configuration.builders.MatcherRefBuilder matcherRefBuilder46 = matcherRefBuilder43.setMatchers(strMap45);
        org.apache.rat.configuration.builders.CopyrightBuilder copyrightBuilder47 = org.apache.rat.analysis.IHeaderMatcher.Builder.copyright();
        org.apache.rat.configuration.builders.MatcherRefBuilder matcherRefBuilder48 = org.apache.rat.analysis.IHeaderMatcher.Builder.matcherRef();
        boolean boolean49 = matcherRefBuilder48.hasId();
        java.lang.String str50 = matcherRefBuilder48.toString();
        java.util.Map<java.lang.String, org.apache.rat.analysis.IHeaderMatcher> strMap51 = null;
        org.apache.rat.configuration.builders.MatcherRefBuilder matcherRefBuilder52 = matcherRefBuilder48.setMatchers(strMap51);
        org.apache.rat.analysis.IHeaderMatcher.Builder[] builderArray53 = new org.apache.rat.analysis.IHeaderMatcher.Builder[] { matcherRefBuilder8, allBuilder12, copyrightBuilder18, matcherRefBuilder19, copyrightBuilder21, copyrightBuilder27, copyrightBuilder28, copyrightBuilder33, copyrightBuilder39, anyBuilder42, matcherRefBuilder43, copyrightBuilder47, matcherRefBuilder48 };
        java.util.ArrayList<org.apache.rat.analysis.IHeaderMatcher.Builder> builderList54 = new java.util.ArrayList<org.apache.rat.analysis.IHeaderMatcher.Builder>();
        boolean boolean55 = java.util.Collections.addAll((java.util.Collection<org.apache.rat.analysis.IHeaderMatcher.Builder>) builderList54, builderArray53);
        org.apache.rat.configuration.builders.AbstractBuilder abstractBuilder56 = notBuilder6.add((java.util.Collection<org.apache.rat.analysis.IHeaderMatcher.Builder>) builderList54);
        org.apache.rat.configuration.builders.MatcherRefBuilder matcherRefBuilder57 = new org.apache.rat.configuration.builders.MatcherRefBuilder();
        org.apache.rat.analysis.IHeaderMatcher.Builder[] builderArray58 = new org.apache.rat.analysis.IHeaderMatcher.Builder[] { matcherRefBuilder2, anyBuilder5, notBuilder6, matcherRefBuilder57 };
        java.util.ArrayList<org.apache.rat.analysis.IHeaderMatcher.Builder> builderList59 = new java.util.ArrayList<org.apache.rat.analysis.IHeaderMatcher.Builder>();
        boolean boolean60 = java.util.Collections.addAll((java.util.Collection<org.apache.rat.analysis.IHeaderMatcher.Builder>) builderList59, builderArray58);
        org.apache.rat.configuration.builders.AbstractBuilder abstractBuilder61 = allBuilder1.add((java.util.Collection<org.apache.rat.analysis.IHeaderMatcher.Builder>) builderList59);
        defaultLog0.info((java.lang.Object) allBuilder1);
        org.apache.rat.annotation.ApacheV2LicenseAppender apacheV2LicenseAppender64 = new org.apache.rat.annotation.ApacheV2LicenseAppender((org.apache.rat.utils.Log) defaultLog0, "true");
        org.apache.rat.annotation.ApacheV2LicenseAppender apacheV2LicenseAppender66 = new org.apache.rat.annotation.ApacheV2LicenseAppender((org.apache.rat.utils.Log) defaultLog0, "COMMON DEVELOPMENT AND DISTRIBUTION LICENSE Version 1.0");
        org.apache.rat.ReportConfiguration reportConfiguration67 = new org.apache.rat.ReportConfiguration((org.apache.rat.utils.Log) defaultLog0);
        org.apache.rat.ReportConfiguration reportConfiguration68 = new org.apache.rat.ReportConfiguration((org.apache.rat.utils.Log) defaultLog0);
        org.apache.rat.configuration.builders.AllBuilder allBuilder69 = new org.apache.rat.configuration.builders.AllBuilder();
        java.lang.String str70 = allBuilder69.toString();
        java.util.List<org.apache.rat.analysis.IHeaderMatcher> iHeaderMatcherList71 = allBuilder69.getChildren();
        org.apache.rat.configuration.builders.MatcherRefBuilder matcherRefBuilder72 = new org.apache.rat.configuration.builders.MatcherRefBuilder();
        org.apache.rat.configuration.builders.AbstractBuilder abstractBuilder73 = allBuilder69.add((org.apache.rat.analysis.IHeaderMatcher.Builder) matcherRefBuilder72);
        org.apache.rat.configuration.builders.MatcherRefBuilder matcherRefBuilder75 = matcherRefBuilder72.setRefId("http:");
        java.util.Map<java.lang.String, org.apache.rat.analysis.IHeaderMatcher> strMap76 = null;
        org.apache.rat.configuration.builders.MatcherRefBuilder matcherRefBuilder77 = matcherRefBuilder75.setMatchers(strMap76);
        org.apache.rat.configuration.builders.MatcherRefBuilder matcherRefBuilder79 = matcherRefBuilder77.setRefId("");
        org.apache.rat.configuration.builders.MatcherRefBuilder matcherRefBuilder81 = matcherRefBuilder77.setRefId("F FALSE");
        defaultLog0.debug((java.lang.Object) matcherRefBuilder81);
        defaultLog0.debug((java.lang.Object) "021187D7-27C2-4FD9-BC74-8CC00413EE52");
        org.junit.Assert.assertNotNull(defaultLog0);
        org.junit.Assert.assertNotNull(matcherRefBuilder2);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "MathcerRefBuilder: null" + "'", str4, "MathcerRefBuilder: null");
        org.junit.Assert.assertNotNull(anyBuilder5);
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "NotBuilder: null" + "'", str7, "NotBuilder: null");
        org.junit.Assert.assertNotNull(matcherRefBuilder8);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertNotNull(matcherRefBuilder11);
        org.junit.Assert.assertNotNull(copyrightBuilder13);
        org.junit.Assert.assertNotNull(copyrightBuilder15);
        org.junit.Assert.assertEquals("'" + str16 + "' != '" + "Copyright Builder: s:OASIS e:null o:null" + "'", str16, "Copyright Builder: s:OASIS e:null o:null");
        org.junit.Assert.assertNotNull(copyrightBuilder18);
        org.junit.Assert.assertNotNull(matcherRefBuilder19);
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + false + "'", boolean20 == false);
        org.junit.Assert.assertNotNull(copyrightBuilder21);
        org.junit.Assert.assertNotNull(copyrightBuilder23);
        org.junit.Assert.assertEquals("'" + str24 + "' != '" + "Copyright Builder: s:OASIS e:null o:null" + "'", str24, "Copyright Builder: s:OASIS e:null o:null");
        org.junit.Assert.assertNotNull(copyrightBuilder26);
        org.junit.Assert.assertNotNull(copyrightBuilder27);
        org.junit.Assert.assertNotNull(copyrightBuilder28);
        org.junit.Assert.assertEquals("'" + str29 + "' != '" + "Copyright Builder: s:null e:null o:null" + "'", str29, "Copyright Builder: s:null e:null o:null");
        org.junit.Assert.assertNotNull(copyrightBuilder31);
        org.junit.Assert.assertTrue("'" + boolean32 + "' != '" + false + "'", boolean32 == false);
        org.junit.Assert.assertNotNull(copyrightBuilder33);
        org.junit.Assert.assertEquals("'" + str34 + "' != '" + "Copyright Builder: s:null e:null o:null" + "'", str34, "Copyright Builder: s:null e:null o:null");
        org.junit.Assert.assertNotNull(copyrightBuilder36);
        org.junit.Assert.assertTrue("'" + boolean37 + "' != '" + false + "'", boolean37 == false);
        org.junit.Assert.assertEquals("'" + str38 + "' != '" + "Copyright Builder: s:null e:.cvsignore o:null" + "'", str38, "Copyright Builder: s:null e:.cvsignore o:null");
        org.junit.Assert.assertNotNull(copyrightBuilder39);
        org.junit.Assert.assertNotNull(copyrightBuilder41);
        org.junit.Assert.assertNotNull(anyBuilder42);
        org.junit.Assert.assertNotNull(matcherRefBuilder43);
        org.junit.Assert.assertTrue("'" + boolean44 + "' != '" + false + "'", boolean44 == false);
        org.junit.Assert.assertNotNull(matcherRefBuilder46);
        org.junit.Assert.assertNotNull(copyrightBuilder47);
        org.junit.Assert.assertNotNull(matcherRefBuilder48);
        org.junit.Assert.assertTrue("'" + boolean49 + "' != '" + false + "'", boolean49 == false);
        org.junit.Assert.assertEquals("'" + str50 + "' != '" + "MathcerRefBuilder: null" + "'", str50, "MathcerRefBuilder: null");
        org.junit.Assert.assertNotNull(matcherRefBuilder52);
        org.junit.Assert.assertNotNull(builderArray53);
        org.junit.Assert.assertTrue("'" + boolean55 + "' != '" + true + "'", boolean55 == true);
        org.junit.Assert.assertNotNull(abstractBuilder56);
        org.junit.Assert.assertNotNull(builderArray58);
        org.junit.Assert.assertTrue("'" + boolean60 + "' != '" + true + "'", boolean60 == true);
        org.junit.Assert.assertNotNull(abstractBuilder61);
        org.junit.Assert.assertEquals("'" + str70 + "' != '" + "AllBuilder:" + "'", str70, "AllBuilder:");
        org.junit.Assert.assertNotNull(iHeaderMatcherList71);
        org.junit.Assert.assertNotNull(abstractBuilder73);
        org.junit.Assert.assertNotNull(matcherRefBuilder75);
        org.junit.Assert.assertNotNull(matcherRefBuilder77);
        org.junit.Assert.assertNotNull(matcherRefBuilder79);
        org.junit.Assert.assertNotNull(matcherRefBuilder81);
    }

    @Test
    public void test14991() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest29.test14991");
        org.apache.rat.utils.Log log0 = null;
        org.apache.rat.ReportConfiguration reportConfiguration1 = new org.apache.rat.ReportConfiguration(log0);
        java.io.FilenameFilter filenameFilter2 = reportConfiguration1.getInputFileFilter();
        org.apache.rat.license.ILicense iLicense3 = null;
        reportConfiguration1.addLicense(iLicense3);
        org.apache.rat.license.ILicenseFamily iLicenseFamily5 = null;
        reportConfiguration1.addFamily(iLicenseFamily5);
        org.apache.commons.io.function.IOSupplier<java.io.InputStream> inputStreamIOSupplier7 = org.apache.rat.Defaults.getPlainStyleSheet();
        reportConfiguration1.setStyleSheet(inputStreamIOSupplier7);
        reportConfiguration1.removeApprovedLicenseCategory("ef7a8b13-64c3-4510-bb0c-dbf208e1e73f");
        java.lang.String[] strArray16 = new java.lang.String[] { "http://org/apache/rat/meta-data#LicenseFamilyCategory", "Datum [ name ='http://org/apache/rat/meta-data#LicenseFamilyCategory',value ='GPL1  ']", "MANIFEST.MF", "AllBuilder:", "The MIT License" };
        org.apache.rat.utils.ReportingSet<java.lang.String> strSet17 = new org.apache.rat.utils.ReportingSet<java.lang.String>();
        boolean boolean18 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strSet17, strArray16);
        boolean boolean20 = strSet17.addIfNotPresent("http://org/apache/rat/meta-data#LicenseFamilyName");
        boolean boolean22 = strSet17.addIfNotPresent("ef7a8b13-64c3-4510-bb0c-dbf208e1e73f");
        java.util.function.Function<java.lang.String, java.lang.String> strFunction23 = null;
        org.apache.rat.utils.ReportingSet<java.lang.String> strSet24 = strSet17.setMsgFormat(strFunction23);
        java.lang.String str25 = strSet24.first();
        reportConfiguration1.removeApprovedLicenseCategories((java.util.Collection<java.lang.String>) strSet24);
        java.lang.Object[] objArray27 = strSet24.toArray();
        org.apache.rat.utils.Log log28 = null;
        org.apache.rat.ReportConfiguration reportConfiguration29 = new org.apache.rat.ReportConfiguration(log28);
        java.io.FilenameFilter filenameFilter30 = reportConfiguration29.getInputFileFilter();
        org.apache.rat.license.LicenseSetFactory.LicenseFilter licenseFilter31 = org.apache.rat.license.LicenseSetFactory.LicenseFilter.all;
        java.util.SortedSet<org.apache.rat.license.ILicense> iLicenseSet32 = reportConfiguration29.getLicenses(licenseFilter31);
        org.apache.rat.config.AddLicenseHeaders addLicenseHeaders33 = org.apache.rat.config.AddLicenseHeaders.FALSE;
        reportConfiguration29.setAddLicenseHeaders(addLicenseHeaders33);
        org.apache.rat.utils.Log log35 = null;
        org.apache.rat.ReportConfiguration reportConfiguration36 = new org.apache.rat.ReportConfiguration(log35);
        org.apache.rat.report.claim.ClaimStatistic claimStatistic37 = org.apache.rat.Reporter.report(reportConfiguration36);
        org.apache.rat.license.LicenseSetFactory.LicenseFilter licenseFilter38 = org.apache.rat.license.LicenseSetFactory.LicenseFilter.all;
        org.apache.rat.Reporter.listLicenses(reportConfiguration36, licenseFilter38);
        org.apache.rat.Reporter.listLicenses(reportConfiguration29, licenseFilter38);
        org.apache.rat.utils.Log log41 = null;
        org.apache.rat.ReportConfiguration reportConfiguration42 = new org.apache.rat.ReportConfiguration(log41);
        java.io.FilenameFilter filenameFilter43 = reportConfiguration42.getInputFileFilter();
        org.apache.rat.license.LicenseSetFactory.LicenseFilter licenseFilter44 = org.apache.rat.license.LicenseSetFactory.LicenseFilter.all;
        java.util.SortedSet<org.apache.rat.license.ILicense> iLicenseSet45 = reportConfiguration42.getLicenses(licenseFilter44);
        org.apache.rat.config.AddLicenseHeaders addLicenseHeaders46 = org.apache.rat.config.AddLicenseHeaders.FALSE;
        reportConfiguration42.setAddLicenseHeaders(addLicenseHeaders46);
        org.apache.rat.utils.Log log48 = null;
        org.apache.rat.ReportConfiguration reportConfiguration49 = new org.apache.rat.ReportConfiguration(log48);
        org.apache.rat.report.claim.ClaimStatistic claimStatistic50 = org.apache.rat.Reporter.report(reportConfiguration49);
        org.apache.rat.license.LicenseSetFactory.LicenseFilter licenseFilter51 = org.apache.rat.license.LicenseSetFactory.LicenseFilter.all;
        org.apache.rat.Reporter.listLicenses(reportConfiguration49, licenseFilter51);
        org.apache.rat.Reporter.listLicenses(reportConfiguration42, licenseFilter51);
        org.apache.rat.Reporter.listLicenses(reportConfiguration29, licenseFilter51);
        org.apache.rat.utils.Log log55 = null;
        org.apache.rat.ReportConfiguration reportConfiguration56 = new org.apache.rat.ReportConfiguration(log55);
        org.apache.commons.io.function.IOSupplier<java.io.OutputStream> outputStreamIOSupplier57 = reportConfiguration56.getOutput();
        reportConfiguration29.setOut(outputStreamIOSupplier57);
        boolean boolean59 = reportConfiguration29.isStyleReport();
        boolean boolean60 = reportConfiguration29.isStyleReport();
        org.apache.rat.utils.Log log61 = null;
        org.apache.rat.ReportConfiguration reportConfiguration62 = new org.apache.rat.ReportConfiguration(log61);
        reportConfiguration62.addApprovedLicenseCategory(".cvsignore");
        org.apache.rat.utils.Log.Level level65 = org.apache.rat.utils.Log.Level.ERROR;
        reportConfiguration62.logLicenseCollisions(level65);
        reportConfiguration29.logLicenseCollisions(level65);
        reportConfiguration29.setCopyrightMessage("TMF  ");
        java.lang.String str70 = reportConfiguration29.getCopyrightMessage();
        org.apache.rat.utils.ReportingSet.Options options71 = org.apache.rat.utils.ReportingSet.Options.FAIL;
        reportConfiguration29.licenseDuplicateOption(options71);
        org.apache.rat.utils.ReportingSet<java.lang.String> strSet73 = strSet24.setDuplicateOption(options71);
        int int74 = strSet73.size();
        org.junit.Assert.assertNull(filenameFilter2);
        org.junit.Assert.assertNotNull(inputStreamIOSupplier7);
        org.junit.Assert.assertNotNull(strArray16);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + true + "'", boolean18 == true);
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + true + "'", boolean20 == true);
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + true + "'", boolean22 == true);
        org.junit.Assert.assertNotNull(strSet24);
        org.junit.Assert.assertEquals("'" + str25 + "' != '" + "AllBuilder:" + "'", str25, "AllBuilder:");
        org.junit.Assert.assertNotNull(objArray27);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray27), "[AllBuilder:, Datum [ name ='http://org/apache/rat/meta-data#LicenseFamilyCategory',value ='GPL1  '], MANIFEST.MF, The MIT License, ef7a8b13-64c3-4510-bb0c-dbf208e1e73f, http://org/apache/rat/meta-data#LicenseFamilyCategory, http://org/apache/rat/meta-data#LicenseFamilyName]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray27), "[AllBuilder:, Datum [ name ='http://org/apache/rat/meta-data#LicenseFamilyCategory',value ='GPL1  '], MANIFEST.MF, The MIT License, ef7a8b13-64c3-4510-bb0c-dbf208e1e73f, http://org/apache/rat/meta-data#LicenseFamilyCategory, http://org/apache/rat/meta-data#LicenseFamilyName]");
        org.junit.Assert.assertNull(filenameFilter30);
        org.junit.Assert.assertTrue("'" + licenseFilter31 + "' != '" + org.apache.rat.license.LicenseSetFactory.LicenseFilter.all + "'", licenseFilter31.equals(org.apache.rat.license.LicenseSetFactory.LicenseFilter.all));
        org.junit.Assert.assertNotNull(iLicenseSet32);
        org.junit.Assert.assertTrue("'" + addLicenseHeaders33 + "' != '" + org.apache.rat.config.AddLicenseHeaders.FALSE + "'", addLicenseHeaders33.equals(org.apache.rat.config.AddLicenseHeaders.FALSE));
        org.junit.Assert.assertNull(claimStatistic37);
        org.junit.Assert.assertTrue("'" + licenseFilter38 + "' != '" + org.apache.rat.license.LicenseSetFactory.LicenseFilter.all + "'", licenseFilter38.equals(org.apache.rat.license.LicenseSetFactory.LicenseFilter.all));
        org.junit.Assert.assertNull(filenameFilter43);
        org.junit.Assert.assertTrue("'" + licenseFilter44 + "' != '" + org.apache.rat.license.LicenseSetFactory.LicenseFilter.all + "'", licenseFilter44.equals(org.apache.rat.license.LicenseSetFactory.LicenseFilter.all));
        org.junit.Assert.assertNotNull(iLicenseSet45);
        org.junit.Assert.assertTrue("'" + addLicenseHeaders46 + "' != '" + org.apache.rat.config.AddLicenseHeaders.FALSE + "'", addLicenseHeaders46.equals(org.apache.rat.config.AddLicenseHeaders.FALSE));
        org.junit.Assert.assertNull(claimStatistic50);
        org.junit.Assert.assertTrue("'" + licenseFilter51 + "' != '" + org.apache.rat.license.LicenseSetFactory.LicenseFilter.all + "'", licenseFilter51.equals(org.apache.rat.license.LicenseSetFactory.LicenseFilter.all));
        org.junit.Assert.assertNotNull(outputStreamIOSupplier57);
        org.junit.Assert.assertTrue("'" + boolean59 + "' != '" + true + "'", boolean59 == true);
        org.junit.Assert.assertTrue("'" + boolean60 + "' != '" + true + "'", boolean60 == true);
        org.junit.Assert.assertTrue("'" + level65 + "' != '" + org.apache.rat.utils.Log.Level.ERROR + "'", level65.equals(org.apache.rat.utils.Log.Level.ERROR));
        org.junit.Assert.assertEquals("'" + str70 + "' != '" + "TMF  " + "'", str70, "TMF  ");
        org.junit.Assert.assertTrue("'" + options71 + "' != '" + org.apache.rat.utils.ReportingSet.Options.FAIL + "'", options71.equals(org.apache.rat.utils.ReportingSet.Options.FAIL));
        org.junit.Assert.assertNotNull(strSet73);
        org.junit.Assert.assertTrue("'" + int74 + "' != '" + 7 + "'", int74 == 7);
    }

    @Test
    public void test14992() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest29.test14992");
        org.apache.rat.utils.Log log0 = null;
        org.apache.rat.ReportConfiguration reportConfiguration1 = new org.apache.rat.ReportConfiguration(log0);
        org.apache.commons.io.function.IOSupplier<java.io.OutputStream> outputStreamIOSupplier2 = reportConfiguration1.getOutput();
        org.apache.commons.io.filefilter.IOFileFilter iOFileFilter3 = reportConfiguration1.getDirectoryFilter();
        org.apache.rat.utils.Log log4 = null;
        org.apache.rat.ReportConfiguration reportConfiguration5 = new org.apache.rat.ReportConfiguration(log4);
        org.apache.rat.report.claim.ClaimStatistic claimStatistic6 = org.apache.rat.Reporter.report(reportConfiguration5);
        org.apache.commons.io.function.IOSupplier<java.io.OutputStream> outputStreamIOSupplier7 = reportConfiguration5.getOutput();
        boolean boolean8 = reportConfiguration5.isAddingLicensesForced();
        org.apache.rat.license.ILicense[] iLicenseArray9 = new org.apache.rat.license.ILicense[] {};
        java.util.TreeSet<org.apache.rat.license.ILicense> iLicenseSet10 = new java.util.TreeSet<org.apache.rat.license.ILicense>();
        boolean boolean11 = java.util.Collections.addAll((java.util.Collection<org.apache.rat.license.ILicense>) iLicenseSet10, iLicenseArray9);
        java.lang.String[] strArray24 = new java.lang.String[] { "GPL2 ", "GPL1 ", "notice", "http://org/apache/rat/meta-data#LicenseFamilyName", "notice", "GPL2 ", "http://org/apache/rat/meta-data#LicenseFamilyName", "", "GPL2 ", "", "GPL1 ", "hi!" };
        java.util.ArrayList<java.lang.String> strList25 = new java.util.ArrayList<java.lang.String>();
        boolean boolean26 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strList25, strArray24);
        org.apache.rat.license.LicenseSetFactory licenseSetFactory27 = new org.apache.rat.license.LicenseSetFactory((java.util.SortedSet<org.apache.rat.license.ILicense>) iLicenseSet10, (java.util.Collection<java.lang.String>) strList25);
        reportConfiguration5.addLicenses((java.util.Collection<org.apache.rat.license.ILicense>) iLicenseSet10);
        reportConfiguration1.addLicensesIfNotPresent((java.util.Collection<org.apache.rat.license.ILicense>) iLicenseSet10);
        org.apache.rat.utils.ReportingSet<java.lang.String> strSet30 = new org.apache.rat.utils.ReportingSet<java.lang.String>();
        boolean boolean32 = strSet30.addIfNotPresent("OASIS Open License");
        boolean boolean34 = strSet30.add("http://org/apache/rat/meta-data#HeaderCategory");
        java.util.Iterator<java.lang.String> strItor35 = strSet30.iterator();
        reportConfiguration1.addApprovedLicenseCategories((java.util.Collection<java.lang.String>) strSet30);
        java.lang.String[] strArray43 = new java.lang.String[] { "http://org/apache/rat/meta-data#LicenseFamilyCategory", "Datum [ name ='http://org/apache/rat/meta-data#LicenseFamilyCategory',value ='GPL1  ']", "MANIFEST.MF", "AllBuilder:", "The MIT License" };
        org.apache.rat.utils.ReportingSet<java.lang.String> strSet44 = new org.apache.rat.utils.ReportingSet<java.lang.String>();
        boolean boolean45 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strSet44, strArray43);
        boolean boolean47 = strSet44.addIfNotPresent("http://org/apache/rat/meta-data#LicenseFamilyName");
        java.util.Iterator<java.lang.String> strItor48 = strSet44.iterator();
        java.lang.Object[] objArray49 = strSet44.toArray();
        java.lang.String[] strArray55 = new java.lang.String[] { "http://org/apache/rat/meta-data#LicenseFamilyCategory", "Datum [ name ='http://org/apache/rat/meta-data#LicenseFamilyCategory',value ='GPL1  ']", "MANIFEST.MF", "AllBuilder:", "The MIT License" };
        org.apache.rat.utils.ReportingSet<java.lang.String> strSet56 = new org.apache.rat.utils.ReportingSet<java.lang.String>();
        boolean boolean57 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strSet56, strArray55);
        boolean boolean59 = strSet56.addIfNotPresent("http://org/apache/rat/meta-data#LicenseFamilyName");
        java.util.SortedSet<org.apache.rat.license.ILicenseFamily> iLicenseFamilySet60 = org.apache.rat.license.LicenseFamilySetFactory.emptyLicenseFamilySet();
        boolean boolean61 = strSet56.removeAll((java.util.Collection<org.apache.rat.license.ILicenseFamily>) iLicenseFamilySet60);
        boolean boolean62 = strSet44.containsAll((java.util.Collection<org.apache.rat.license.ILicenseFamily>) iLicenseFamilySet60);
        org.apache.rat.license.ILicenseFamily iLicenseFamily63 = org.apache.rat.license.LicenseFamilySetFactory.search("a8ad4", iLicenseFamilySet60);
        boolean boolean64 = strSet30.removeAll((java.util.Collection<org.apache.rat.license.ILicenseFamily>) iLicenseFamilySet60);
        // The following exception was thrown during execution in test generation
        try {
            org.apache.rat.utils.ReportingSet<java.lang.String> strSet67 = strSet30.subSet("c887f2ac-f69d-4caf-961a-b151f15b92c9", "223f0");
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: fromKey > toKey");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(outputStreamIOSupplier2);
        org.junit.Assert.assertNotNull(iOFileFilter3);
        org.junit.Assert.assertNull(claimStatistic6);
        org.junit.Assert.assertNotNull(outputStreamIOSupplier7);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertNotNull(iLicenseArray9);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
        org.junit.Assert.assertNotNull(strArray24);
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + true + "'", boolean26 == true);
        org.junit.Assert.assertTrue("'" + boolean32 + "' != '" + true + "'", boolean32 == true);
        org.junit.Assert.assertTrue("'" + boolean34 + "' != '" + true + "'", boolean34 == true);
        org.junit.Assert.assertNotNull(strItor35);
        org.junit.Assert.assertNotNull(strArray43);
        org.junit.Assert.assertTrue("'" + boolean45 + "' != '" + true + "'", boolean45 == true);
        org.junit.Assert.assertTrue("'" + boolean47 + "' != '" + true + "'", boolean47 == true);
        org.junit.Assert.assertNotNull(strItor48);
        org.junit.Assert.assertNotNull(objArray49);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray49), "[AllBuilder:, Datum [ name ='http://org/apache/rat/meta-data#LicenseFamilyCategory',value ='GPL1  '], MANIFEST.MF, The MIT License, http://org/apache/rat/meta-data#LicenseFamilyCategory, http://org/apache/rat/meta-data#LicenseFamilyName]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray49), "[AllBuilder:, Datum [ name ='http://org/apache/rat/meta-data#LicenseFamilyCategory',value ='GPL1  '], MANIFEST.MF, The MIT License, http://org/apache/rat/meta-data#LicenseFamilyCategory, http://org/apache/rat/meta-data#LicenseFamilyName]");
        org.junit.Assert.assertNotNull(strArray55);
        org.junit.Assert.assertTrue("'" + boolean57 + "' != '" + true + "'", boolean57 == true);
        org.junit.Assert.assertTrue("'" + boolean59 + "' != '" + true + "'", boolean59 == true);
        org.junit.Assert.assertNotNull(iLicenseFamilySet60);
        org.junit.Assert.assertTrue("'" + boolean61 + "' != '" + false + "'", boolean61 == false);
        org.junit.Assert.assertTrue("'" + boolean62 + "' != '" + true + "'", boolean62 == true);
        org.junit.Assert.assertNull(iLicenseFamily63);
        org.junit.Assert.assertTrue("'" + boolean64 + "' != '" + false + "'", boolean64 == false);
    }

    @Test
    public void test14993() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest29.test14993");
        org.apache.rat.license.ILicense.Builder builder0 = org.apache.rat.license.ILicense.builder();
        org.apache.rat.license.ILicense.Builder builder2 = builder0.setNotes("3e2b228d-d5ff-4444-8d8c-d614494b2426");
        org.apache.rat.analysis.IHeaderMatcher.Builder builder3 = null;
        org.apache.rat.license.ILicense.Builder builder4 = builder2.setMatcher(builder3);
        org.apache.rat.analysis.matchers.FullTextMatcher fullTextMatcher7 = new org.apache.rat.analysis.matchers.FullTextMatcher("http://org/apache/rat/meta-data", "Apache License Version 2.0");
        org.apache.rat.analysis.IHeaderMatcher.State state8 = fullTextMatcher7.currentState();
        org.apache.rat.analysis.matchers.NotMatcher notMatcher9 = new org.apache.rat.analysis.matchers.NotMatcher((org.apache.rat.analysis.IHeaderMatcher) fullTextMatcher7);
        notMatcher9.reset();
        notMatcher9.reset();
        org.apache.rat.license.ILicense.Builder builder12 = builder2.setMatcher((org.apache.rat.analysis.IHeaderMatcher) notMatcher9);
        org.junit.Assert.assertNotNull(builder0);
        org.junit.Assert.assertNotNull(builder2);
        org.junit.Assert.assertNotNull(builder4);
        org.junit.Assert.assertTrue("'" + state8 + "' != '" + org.apache.rat.analysis.IHeaderMatcher.State.i + "'", state8.equals(org.apache.rat.analysis.IHeaderMatcher.State.i));
        org.junit.Assert.assertNotNull(builder12);
    }

    @Test
    public void test14994() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest29.test14994");
        org.apache.rat.configuration.Format format0 = org.apache.rat.configuration.Format.TXT;
        org.apache.rat.configuration.LicenseReader licenseReader1 = format0.licenseReader();
        org.apache.rat.configuration.LicenseReader licenseReader2 = format0.licenseReader();
        org.apache.rat.configuration.LicenseReader licenseReader3 = format0.licenseReader();
        org.apache.rat.configuration.LicenseReader licenseReader4 = format0.licenseReader();
        org.apache.rat.configuration.LicenseReader licenseReader5 = format0.licenseReader();
        org.apache.rat.configuration.LicenseReader licenseReader6 = format0.licenseReader();
        org.apache.rat.configuration.MatcherReader matcherReader7 = format0.matcherReader();
        org.apache.rat.configuration.MatcherReader matcherReader8 = format0.matcherReader();
        org.junit.Assert.assertTrue("'" + format0 + "' != '" + org.apache.rat.configuration.Format.TXT + "'", format0.equals(org.apache.rat.configuration.Format.TXT));
        org.junit.Assert.assertNull(licenseReader1);
        org.junit.Assert.assertNull(licenseReader2);
        org.junit.Assert.assertNull(licenseReader3);
        org.junit.Assert.assertNull(licenseReader4);
        org.junit.Assert.assertNull(licenseReader5);
        org.junit.Assert.assertNull(licenseReader6);
        org.junit.Assert.assertNull(matcherReader7);
        org.junit.Assert.assertNull(matcherReader8);
    }

    @Test
    public void test14995() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest29.test14995");
        org.apache.rat.document.ToNameTransformer toNameTransformer0 = new org.apache.rat.document.ToNameTransformer();
        org.apache.rat.utils.DefaultLog defaultLog1 = org.apache.rat.utils.DefaultLog.INSTANCE;
        org.apache.rat.license.ILicense.Builder builder2 = org.apache.rat.license.ILicense.builder();
        org.apache.rat.license.ILicense.Builder builder4 = builder2.setLicenseFamilyCategory("");
        org.apache.rat.analysis.matchers.CopyrightMatcher copyrightMatcher8 = new org.apache.rat.analysis.matchers.CopyrightMatcher("", "GPL1 ", "hi!");
        org.apache.rat.analysis.IHeaderMatcher.State state9 = copyrightMatcher8.finalizeState();
        org.apache.rat.license.ILicense.Builder builder10 = builder4.setMatcher((org.apache.rat.analysis.IHeaderMatcher) copyrightMatcher8);
        org.apache.rat.license.ILicense.Builder builder12 = builder10.setLicenseFamilyCategory("");
        defaultLog1.error((java.lang.Object) builder12);
        java.lang.Object obj14 = toNameTransformer0.transform((java.lang.Object) defaultLog1);
        org.apache.rat.annotation.ApacheV2LicenseAppender apacheV2LicenseAppender16 = new org.apache.rat.annotation.ApacheV2LicenseAppender((org.apache.rat.utils.Log) defaultLog1, "");
        java.io.Writer writer17 = null;
        org.apache.rat.report.xml.writer.impl.base.XmlWriter xmlWriter18 = new org.apache.rat.report.xml.writer.impl.base.XmlWriter(writer17);
        org.apache.rat.report.claim.impl.xml.SimpleXmlClaimReporter simpleXmlClaimReporter19 = new org.apache.rat.report.claim.impl.xml.SimpleXmlClaimReporter((org.apache.rat.report.xml.writer.IXmlWriter) xmlWriter18);
        org.apache.rat.report.claim.impl.xml.SimpleXmlClaimReporter simpleXmlClaimReporter20 = new org.apache.rat.report.claim.impl.xml.SimpleXmlClaimReporter((org.apache.rat.report.xml.writer.IXmlWriter) xmlWriter18);
        org.apache.rat.report.claim.impl.xml.SimpleXmlClaimReporter simpleXmlClaimReporter21 = new org.apache.rat.report.claim.impl.xml.SimpleXmlClaimReporter((org.apache.rat.report.xml.writer.IXmlWriter) xmlWriter18);
        org.apache.rat.report.claim.impl.xml.SimpleXmlClaimReporter simpleXmlClaimReporter22 = new org.apache.rat.report.claim.impl.xml.SimpleXmlClaimReporter((org.apache.rat.report.xml.writer.IXmlWriter) xmlWriter18);
        org.apache.rat.report.claim.impl.xml.SimpleXmlClaimReporter simpleXmlClaimReporter23 = new org.apache.rat.report.claim.impl.xml.SimpleXmlClaimReporter((org.apache.rat.report.xml.writer.IXmlWriter) xmlWriter18);
        org.apache.rat.report.claim.impl.xml.SimpleXmlClaimReporter simpleXmlClaimReporter24 = new org.apache.rat.report.claim.impl.xml.SimpleXmlClaimReporter((org.apache.rat.report.xml.writer.IXmlWriter) xmlWriter18);
        org.apache.rat.report.claim.impl.xml.SimpleXmlClaimReporter simpleXmlClaimReporter25 = new org.apache.rat.report.claim.impl.xml.SimpleXmlClaimReporter((org.apache.rat.report.xml.writer.IXmlWriter) xmlWriter18);
        org.apache.rat.report.claim.impl.xml.SimpleXmlClaimReporter simpleXmlClaimReporter26 = new org.apache.rat.report.claim.impl.xml.SimpleXmlClaimReporter((org.apache.rat.report.xml.writer.IXmlWriter) xmlWriter18);
        org.apache.rat.report.claim.impl.xml.SimpleXmlClaimReporter simpleXmlClaimReporter27 = new org.apache.rat.report.claim.impl.xml.SimpleXmlClaimReporter((org.apache.rat.report.xml.writer.IXmlWriter) xmlWriter18);
        org.apache.rat.report.claim.impl.xml.SimpleXmlClaimReporter simpleXmlClaimReporter28 = new org.apache.rat.report.claim.impl.xml.SimpleXmlClaimReporter((org.apache.rat.report.xml.writer.IXmlWriter) xmlWriter18);
        org.apache.rat.report.claim.impl.xml.SimpleXmlClaimReporter simpleXmlClaimReporter29 = new org.apache.rat.report.claim.impl.xml.SimpleXmlClaimReporter((org.apache.rat.report.xml.writer.IXmlWriter) xmlWriter18);
        defaultLog1.error((java.lang.Object) xmlWriter18);
        org.apache.rat.report.claim.ClaimStatistic claimStatistic31 = new org.apache.rat.report.claim.ClaimStatistic();
        claimStatistic31.setNumApproved((int) (short) 10);
        java.util.Map<java.lang.String, java.lang.Integer> strMap34 = null;
        claimStatistic31.setDocumentCategoryMap(strMap34);
        int int36 = claimStatistic31.getNumGenerated();
        java.util.Map<java.lang.String, java.lang.Integer> strMap37 = claimStatistic31.getLicenseFileNameMap();
        claimStatistic31.setNumGenerated((int) (byte) 10);
        claimStatistic31.setNumUnknown(0);
        int int42 = claimStatistic31.getNumUnApproved();
        claimStatistic31.setNumUnknown(10);
        java.util.Map<java.lang.String, java.lang.Integer> strMap45 = null;
        claimStatistic31.setLicenseFileCodeMap(strMap45);
        int int47 = claimStatistic31.getNumUnApproved();
        claimStatistic31.setNumApproved(0);
        org.apache.rat.utils.Log log50 = null;
        org.apache.rat.ReportConfiguration reportConfiguration51 = new org.apache.rat.ReportConfiguration(log50);
        org.apache.rat.report.claim.ClaimStatistic claimStatistic52 = org.apache.rat.Reporter.report(reportConfiguration51);
        org.apache.rat.utils.Log log53 = null;
        org.apache.rat.ReportConfiguration reportConfiguration54 = new org.apache.rat.ReportConfiguration(log53);
        org.apache.rat.report.claim.ClaimStatistic claimStatistic55 = org.apache.rat.Reporter.report(reportConfiguration54);
        org.apache.rat.utils.ReportingSet.Options options56 = org.apache.rat.utils.ReportingSet.Options.OVERWRITE;
        reportConfiguration54.licenseDuplicateOption(options56);
        reportConfiguration51.familyDuplicateOption(options56);
        org.apache.commons.io.function.IOSupplier<java.io.PrintWriter> printWriterIOSupplier59 = reportConfiguration51.getWriter();
        java.lang.String[] strArray65 = new java.lang.String[] { "http://org/apache/rat/meta-data#LicenseFamilyCategory", "Datum [ name ='http://org/apache/rat/meta-data#LicenseFamilyCategory',value ='GPL1  ']", "MANIFEST.MF", "AllBuilder:", "The MIT License" };
        org.apache.rat.utils.ReportingSet<java.lang.String> strSet66 = new org.apache.rat.utils.ReportingSet<java.lang.String>();
        boolean boolean67 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strSet66, strArray65);
        boolean boolean69 = strSet66.addIfNotPresent("http://org/apache/rat/meta-data#LicenseFamilyName");
        java.util.Iterator<java.lang.String> strItor70 = strSet66.iterator();
        java.lang.Object[] objArray71 = strSet66.toArray();
        java.lang.String[] strArray77 = new java.lang.String[] { "http://org/apache/rat/meta-data#LicenseFamilyCategory", "Datum [ name ='http://org/apache/rat/meta-data#LicenseFamilyCategory',value ='GPL1  ']", "MANIFEST.MF", "AllBuilder:", "The MIT License" };
        org.apache.rat.utils.ReportingSet<java.lang.String> strSet78 = new org.apache.rat.utils.ReportingSet<java.lang.String>();
        boolean boolean79 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strSet78, strArray77);
        boolean boolean81 = strSet78.addIfNotPresent("http://org/apache/rat/meta-data#LicenseFamilyName");
        java.util.SortedSet<org.apache.rat.license.ILicenseFamily> iLicenseFamilySet82 = org.apache.rat.license.LicenseFamilySetFactory.emptyLicenseFamilySet();
        boolean boolean83 = strSet78.removeAll((java.util.Collection<org.apache.rat.license.ILicenseFamily>) iLicenseFamilySet82);
        boolean boolean84 = strSet66.containsAll((java.util.Collection<org.apache.rat.license.ILicenseFamily>) iLicenseFamilySet82);
        reportConfiguration51.addFamilies((java.util.Collection<org.apache.rat.license.ILicenseFamily>) iLicenseFamilySet82);
        // The following exception was thrown during execution in test generation
        try {
            org.apache.rat.report.RatReport ratReport86 = org.apache.rat.report.xml.XmlReportFactory.createStandardReport((org.apache.rat.report.xml.writer.IXmlWriter) xmlWriter18, claimStatistic31, reportConfiguration51);
            org.junit.Assert.fail("Expected exception of type org.apache.rat.ConfigurationException; message: At least one license must be defined");
        } catch (org.apache.rat.ConfigurationException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(defaultLog1);
        org.junit.Assert.assertNotNull(builder2);
        org.junit.Assert.assertNotNull(builder4);
        org.junit.Assert.assertTrue("'" + state9 + "' != '" + org.apache.rat.analysis.IHeaderMatcher.State.f + "'", state9.equals(org.apache.rat.analysis.IHeaderMatcher.State.f));
        org.junit.Assert.assertNotNull(builder10);
        org.junit.Assert.assertNotNull(builder12);
        org.junit.Assert.assertNull(obj14);
        org.junit.Assert.assertTrue("'" + int36 + "' != '" + 0 + "'", int36 == 0);
        org.junit.Assert.assertNull(strMap37);
        org.junit.Assert.assertTrue("'" + int42 + "' != '" + 0 + "'", int42 == 0);
        org.junit.Assert.assertTrue("'" + int47 + "' != '" + 0 + "'", int47 == 0);
        org.junit.Assert.assertNull(claimStatistic52);
        org.junit.Assert.assertNull(claimStatistic55);
        org.junit.Assert.assertTrue("'" + options56 + "' != '" + org.apache.rat.utils.ReportingSet.Options.OVERWRITE + "'", options56.equals(org.apache.rat.utils.ReportingSet.Options.OVERWRITE));
        org.junit.Assert.assertNotNull(printWriterIOSupplier59);
        org.junit.Assert.assertNotNull(strArray65);
        org.junit.Assert.assertTrue("'" + boolean67 + "' != '" + true + "'", boolean67 == true);
        org.junit.Assert.assertTrue("'" + boolean69 + "' != '" + true + "'", boolean69 == true);
        org.junit.Assert.assertNotNull(strItor70);
        org.junit.Assert.assertNotNull(objArray71);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray71), "[AllBuilder:, Datum [ name ='http://org/apache/rat/meta-data#LicenseFamilyCategory',value ='GPL1  '], MANIFEST.MF, The MIT License, http://org/apache/rat/meta-data#LicenseFamilyCategory, http://org/apache/rat/meta-data#LicenseFamilyName]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray71), "[AllBuilder:, Datum [ name ='http://org/apache/rat/meta-data#LicenseFamilyCategory',value ='GPL1  '], MANIFEST.MF, The MIT License, http://org/apache/rat/meta-data#LicenseFamilyCategory, http://org/apache/rat/meta-data#LicenseFamilyName]");
        org.junit.Assert.assertNotNull(strArray77);
        org.junit.Assert.assertTrue("'" + boolean79 + "' != '" + true + "'", boolean79 == true);
        org.junit.Assert.assertTrue("'" + boolean81 + "' != '" + true + "'", boolean81 == true);
        org.junit.Assert.assertNotNull(iLicenseFamilySet82);
        org.junit.Assert.assertTrue("'" + boolean83 + "' != '" + false + "'", boolean83 == false);
        org.junit.Assert.assertTrue("'" + boolean84 + "' != '" + true + "'", boolean84 == true);
    }

    @Test
    public void test14996() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest29.test14996");
        org.apache.rat.utils.ReportingSet<java.lang.String> strSet0 = new org.apache.rat.utils.ReportingSet<java.lang.String>();
        boolean boolean2 = strSet0.addIfNotPresent("OASIS Open License");
        boolean boolean4 = strSet0.add("http://org/apache/rat/meta-data#HeaderCategory");
        boolean boolean6 = strSet0.add("");
        boolean boolean8 = strSet0.addIfNotPresent("f300711b-0269-45ff-a34e-20094c87f793");
        java.util.stream.Stream<java.lang.String> strStream9 = strSet0.parallelStream();
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + true + "'", boolean2 == true);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + true + "'", boolean4 == true);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + true + "'", boolean6 == true);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + true + "'", boolean8 == true);
        org.junit.Assert.assertNotNull(strStream9);
    }

    @Test
    public void test14997() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest29.test14997");
        org.apache.rat.utils.DefaultLog defaultLog1 = org.apache.rat.utils.DefaultLog.INSTANCE;
        org.apache.rat.license.ILicense.Builder builder2 = org.apache.rat.license.ILicense.builder();
        org.apache.rat.license.ILicense.Builder builder4 = builder2.setLicenseFamilyCategory("");
        org.apache.rat.analysis.matchers.CopyrightMatcher copyrightMatcher8 = new org.apache.rat.analysis.matchers.CopyrightMatcher("", "GPL1 ", "hi!");
        org.apache.rat.analysis.IHeaderMatcher.State state9 = copyrightMatcher8.finalizeState();
        org.apache.rat.license.ILicense.Builder builder10 = builder4.setMatcher((org.apache.rat.analysis.IHeaderMatcher) copyrightMatcher8);
        org.apache.rat.license.ILicense.Builder builder12 = builder10.setLicenseFamilyCategory("");
        defaultLog1.error((java.lang.Object) builder12);
        org.apache.rat.analysis.matchers.CopyrightMatcher copyrightMatcher17 = new org.apache.rat.analysis.matchers.CopyrightMatcher("", "GPL1 ", "hi!");
        copyrightMatcher17.reset();
        org.apache.rat.license.ILicense.Builder builder19 = builder12.setMatcher((org.apache.rat.analysis.IHeaderMatcher) copyrightMatcher17);
        org.apache.rat.analysis.matchers.NotMatcher notMatcher20 = new org.apache.rat.analysis.matchers.NotMatcher("AnyBuilder:\nAllBuilder:", (org.apache.rat.analysis.IHeaderMatcher) copyrightMatcher17);
        org.apache.rat.analysis.IHeaderMatcher.State state21 = notMatcher20.finalizeState();
        org.apache.rat.analysis.IHeaderMatcher.State state22 = notMatcher20.currentState();
        org.apache.rat.analysis.IHeaderMatcher.State state23 = notMatcher20.currentState();
        notMatcher20.reset();
        org.apache.rat.analysis.IHeaderMatcher.State state25 = notMatcher20.finalizeState();
        org.junit.Assert.assertNotNull(defaultLog1);
        org.junit.Assert.assertNotNull(builder2);
        org.junit.Assert.assertNotNull(builder4);
        org.junit.Assert.assertTrue("'" + state9 + "' != '" + org.apache.rat.analysis.IHeaderMatcher.State.f + "'", state9.equals(org.apache.rat.analysis.IHeaderMatcher.State.f));
        org.junit.Assert.assertNotNull(builder10);
        org.junit.Assert.assertNotNull(builder12);
        org.junit.Assert.assertNotNull(builder19);
        org.junit.Assert.assertTrue("'" + state21 + "' != '" + org.apache.rat.analysis.IHeaderMatcher.State.t + "'", state21.equals(org.apache.rat.analysis.IHeaderMatcher.State.t));
        org.junit.Assert.assertTrue("'" + state22 + "' != '" + org.apache.rat.analysis.IHeaderMatcher.State.t + "'", state22.equals(org.apache.rat.analysis.IHeaderMatcher.State.t));
        org.junit.Assert.assertTrue("'" + state23 + "' != '" + org.apache.rat.analysis.IHeaderMatcher.State.t + "'", state23.equals(org.apache.rat.analysis.IHeaderMatcher.State.t));
        org.junit.Assert.assertTrue("'" + state25 + "' != '" + org.apache.rat.analysis.IHeaderMatcher.State.t + "'", state25.equals(org.apache.rat.analysis.IHeaderMatcher.State.t));
    }

    @Test
    public void test14998() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest29.test14998");
        org.apache.rat.utils.Log log0 = null;
        org.apache.rat.ReportConfiguration reportConfiguration1 = new org.apache.rat.ReportConfiguration(log0);
        org.apache.rat.report.claim.ClaimStatistic claimStatistic2 = org.apache.rat.Reporter.report(reportConfiguration1);
        org.apache.rat.utils.ReportingSet.Options options3 = org.apache.rat.utils.ReportingSet.Options.OVERWRITE;
        reportConfiguration1.licenseDuplicateOption(options3);
        org.apache.rat.utils.Log log5 = null;
        org.apache.rat.ReportConfiguration reportConfiguration6 = new org.apache.rat.ReportConfiguration(log5);
        org.apache.rat.report.claim.ClaimStatistic claimStatistic7 = org.apache.rat.Reporter.report(reportConfiguration6);
        org.apache.rat.utils.Log log8 = null;
        org.apache.rat.ReportConfiguration reportConfiguration9 = new org.apache.rat.ReportConfiguration(log8);
        org.apache.rat.report.claim.ClaimStatistic claimStatistic10 = org.apache.rat.Reporter.report(reportConfiguration9);
        org.apache.rat.utils.ReportingSet.Options options11 = org.apache.rat.utils.ReportingSet.Options.OVERWRITE;
        reportConfiguration9.licenseDuplicateOption(options11);
        reportConfiguration6.familyDuplicateOption(options11);
        org.apache.commons.io.function.IOSupplier<java.io.PrintWriter> printWriterIOSupplier14 = reportConfiguration6.getWriter();
        boolean boolean15 = reportConfiguration6.isAddingLicensesForced();
        org.apache.rat.utils.Log log16 = null;
        org.apache.rat.ReportConfiguration reportConfiguration17 = new org.apache.rat.ReportConfiguration(log16);
        reportConfiguration17.addApprovedLicenseCategory(".cvsignore");
        org.apache.rat.utils.Log.Level level20 = org.apache.rat.utils.Log.Level.ERROR;
        reportConfiguration17.logFamilyCollisions(level20);
        reportConfiguration6.logLicenseCollisions(level20);
        org.apache.rat.utils.ReportingSet.Options options23 = org.apache.rat.utils.ReportingSet.Options.IGNORE;
        reportConfiguration6.licenseDuplicateOption(options23);
        reportConfiguration1.licenseDuplicateOption(options23);
        org.apache.rat.Defaults.Builder builder26 = org.apache.rat.Defaults.builder();
        org.apache.rat.Defaults defaults27 = builder26.build();
        org.apache.rat.Defaults defaults28 = builder26.build();
        org.apache.rat.Defaults.Builder builder29 = builder26.noDefault();
        org.apache.rat.Defaults defaults30 = builder29.build();
        org.apache.rat.Defaults defaults31 = builder29.build();
        reportConfiguration1.setFrom(defaults31);
        org.junit.Assert.assertNull(claimStatistic2);
        org.junit.Assert.assertTrue("'" + options3 + "' != '" + org.apache.rat.utils.ReportingSet.Options.OVERWRITE + "'", options3.equals(org.apache.rat.utils.ReportingSet.Options.OVERWRITE));
        org.junit.Assert.assertNull(claimStatistic7);
        org.junit.Assert.assertNull(claimStatistic10);
        org.junit.Assert.assertTrue("'" + options11 + "' != '" + org.apache.rat.utils.ReportingSet.Options.OVERWRITE + "'", options11.equals(org.apache.rat.utils.ReportingSet.Options.OVERWRITE));
        org.junit.Assert.assertNotNull(printWriterIOSupplier14);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + false + "'", boolean15 == false);
        org.junit.Assert.assertTrue("'" + level20 + "' != '" + org.apache.rat.utils.Log.Level.ERROR + "'", level20.equals(org.apache.rat.utils.Log.Level.ERROR));
        org.junit.Assert.assertTrue("'" + options23 + "' != '" + org.apache.rat.utils.ReportingSet.Options.IGNORE + "'", options23.equals(org.apache.rat.utils.ReportingSet.Options.IGNORE));
        org.junit.Assert.assertNotNull(builder26);
        org.junit.Assert.assertNotNull(defaults27);
        org.junit.Assert.assertNotNull(defaults28);
        org.junit.Assert.assertNotNull(builder29);
        org.junit.Assert.assertNotNull(defaults30);
        org.junit.Assert.assertNotNull(defaults31);
    }

    @Test
    public void test14999() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest29.test14999");
        org.apache.rat.license.ILicenseFamilyBuilder iLicenseFamilyBuilder0 = new org.apache.rat.license.ILicenseFamilyBuilder();
        java.lang.String str1 = iLicenseFamilyBuilder0.getCategory();
        org.apache.rat.license.ILicenseFamily.Builder builder3 = iLicenseFamilyBuilder0.setLicenseFamilyCategory("AL   ");
        org.apache.rat.license.ILicenseFamily.Builder builder5 = iLicenseFamilyBuilder0.setLicenseFamilyName("binary");
        org.apache.rat.license.ILicenseFamily.Builder builder7 = iLicenseFamilyBuilder0.setLicenseFamilyCategory("3c74a3ec-8235-4035-9db7-f9f475b48681");
        java.lang.String str8 = iLicenseFamilyBuilder0.getCategory();
        org.apache.rat.license.ILicenseFamily.Builder builder10 = iLicenseFamilyBuilder0.setLicenseFamilyCategory("f02d0cdc36424583b71fdd84a120752c");
        org.apache.rat.license.ILicenseFamily.Builder builder12 = iLicenseFamilyBuilder0.setLicenseFamilyName("Datum [ name ='http://org/apache/rat/meta-data#LicenseFamilyName',value ='????? ']");
        org.apache.rat.license.ILicenseFamily.Builder builder14 = iLicenseFamilyBuilder0.setLicenseFamilyName("89426113-1da8-4591-9c20-8025b6ece33d");
        org.apache.rat.license.ILicenseFamily.Builder builder16 = iLicenseFamilyBuilder0.setLicenseFamilyCategory("eba9cdef-527a-48ca-947b-897e2e06ea31");
        org.apache.rat.license.ILicenseFamily.Builder builder18 = iLicenseFamilyBuilder0.setLicenseFamilyName("64868");
        org.apache.rat.license.ILicenseFamily iLicenseFamily19 = iLicenseFamilyBuilder0.build();
        org.apache.rat.configuration.Format format20 = org.apache.rat.configuration.Format.XML;
        org.apache.rat.configuration.LicenseReader licenseReader21 = format20.licenseReader();
        org.apache.rat.configuration.MatcherReader matcherReader22 = format20.matcherReader();
        org.apache.rat.configuration.LicenseReader licenseReader23 = format20.licenseReader();
        org.apache.rat.configuration.LicenseReader licenseReader24 = format20.licenseReader();
        java.util.SortedSet<org.apache.rat.license.ILicenseFamily> iLicenseFamilySet25 = licenseReader24.readFamilies();
        java.util.SortedSet<org.apache.rat.license.ILicenseFamily> iLicenseFamilySet26 = licenseReader24.readFamilies();
        org.apache.rat.license.ILicenseFamily iLicenseFamily27 = org.apache.rat.license.LicenseFamilySetFactory.search(iLicenseFamily19, iLicenseFamilySet26);
        org.junit.Assert.assertNull(str1);
        org.junit.Assert.assertNotNull(builder3);
        org.junit.Assert.assertNotNull(builder5);
        org.junit.Assert.assertNotNull(builder7);
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "3c74a3ec-8235-4035-9db7-f9f475b48681" + "'", str8, "3c74a3ec-8235-4035-9db7-f9f475b48681");
        org.junit.Assert.assertNotNull(builder10);
        org.junit.Assert.assertNotNull(builder12);
        org.junit.Assert.assertNotNull(builder14);
        org.junit.Assert.assertNotNull(builder16);
        org.junit.Assert.assertNotNull(builder18);
        org.junit.Assert.assertNotNull(iLicenseFamily19);
        org.junit.Assert.assertTrue("'" + format20 + "' != '" + org.apache.rat.configuration.Format.XML + "'", format20.equals(org.apache.rat.configuration.Format.XML));
        org.junit.Assert.assertNotNull(licenseReader21);
        org.junit.Assert.assertNotNull(matcherReader22);
        org.junit.Assert.assertNotNull(licenseReader23);
        org.junit.Assert.assertNotNull(licenseReader24);
        org.junit.Assert.assertNotNull(iLicenseFamilySet25);
        org.junit.Assert.assertNotNull(iLicenseFamilySet26);
        org.junit.Assert.assertNull(iLicenseFamily27);
    }

    @Test
    public void test15000() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest29.test15000");
        org.apache.rat.Defaults.Builder builder0 = org.apache.rat.Defaults.builder();
        org.apache.rat.Defaults defaults1 = builder0.build();
        org.apache.rat.Defaults defaults2 = builder0.build();
        org.apache.rat.Defaults.Builder builder3 = builder0.noDefault();
        org.apache.rat.Defaults defaults4 = builder3.build();
        java.net.URL uRL5 = null;
        org.apache.rat.Defaults.Builder builder6 = builder3.remove(uRL5);
        org.apache.rat.Defaults.Builder builder7 = builder3.noDefault();
        org.apache.rat.Defaults.Builder builder9 = builder3.remove("The Telemanagement Forum License");
        java.net.URL uRL10 = null;
        // The following exception was thrown during execution in test generation
        try {
            org.apache.rat.Defaults.Builder builder11 = builder9.add(uRL10);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(builder0);
        org.junit.Assert.assertNotNull(defaults1);
        org.junit.Assert.assertNotNull(defaults2);
        org.junit.Assert.assertNotNull(builder3);
        org.junit.Assert.assertNotNull(defaults4);
        org.junit.Assert.assertNotNull(builder6);
        org.junit.Assert.assertNotNull(builder7);
        org.junit.Assert.assertNotNull(builder9);
    }
}
