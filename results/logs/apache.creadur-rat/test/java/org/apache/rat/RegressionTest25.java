package org.apache.rat;

import org.junit.FixMethodOrder;
import org.junit.Test;
import org.junit.runners.MethodSorters;

@FixMethodOrder(MethodSorters.NAME_ASCENDING)
public class RegressionTest25 {

    public static boolean debug = false;

    @Test
    public void test12501() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest25.test12501");
        org.apache.rat.config.SourceCodeManagementSystems sourceCodeManagementSystems0 = org.apache.rat.config.SourceCodeManagementSystems.CVS;
        java.util.List<java.lang.String> strList1 = sourceCodeManagementSystems0.getExclusions();
        boolean boolean2 = sourceCodeManagementSystems0.hasIgnoreFile();
        java.lang.String str3 = sourceCodeManagementSystems0.getIgnoreFile();
        java.util.List<java.lang.String> strList4 = sourceCodeManagementSystems0.getExclusions();
        boolean boolean5 = sourceCodeManagementSystems0.hasIgnoreFile();
        java.util.List<java.lang.String> strList6 = sourceCodeManagementSystems0.getExclusions();
        java.io.FilenameFilter filenameFilter7 = org.apache.rat.Report.parseExclusions(strList6);
        org.junit.Assert.assertTrue("'" + sourceCodeManagementSystems0 + "' != '" + org.apache.rat.config.SourceCodeManagementSystems.CVS + "'", sourceCodeManagementSystems0.equals(org.apache.rat.config.SourceCodeManagementSystems.CVS));
        org.junit.Assert.assertNotNull(strList1);
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + true + "'", boolean2 == true);
        org.junit.Assert.assertEquals("'" + str3 + "' != '" + ".cvsignore" + "'", str3, ".cvsignore");
        org.junit.Assert.assertNotNull(strList4);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + true + "'", boolean5 == true);
        org.junit.Assert.assertNotNull(strList6);
        org.junit.Assert.assertNotNull(filenameFilter7);
    }

    @Test
    public void test12502() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest25.test12502");
        org.apache.rat.Defaults.Builder builder0 = org.apache.rat.Defaults.builder();
        org.apache.rat.Defaults defaults1 = builder0.build();
        org.apache.rat.Defaults.Builder builder2 = builder0.noDefault();
        org.apache.rat.Defaults.Builder builder4 = builder0.remove("AllBuilder:");
        org.apache.rat.Defaults.Builder builder6 = builder0.remove("GNU General Public License, version 2");
        org.apache.rat.Defaults defaults7 = builder6.build();
        org.apache.rat.Defaults.Builder builder8 = builder6.noDefault();
        org.junit.Assert.assertNotNull(builder0);
        org.junit.Assert.assertNotNull(defaults1);
        org.junit.Assert.assertNotNull(builder2);
        org.junit.Assert.assertNotNull(builder4);
        org.junit.Assert.assertNotNull(builder6);
        org.junit.Assert.assertNotNull(defaults7);
        org.junit.Assert.assertNotNull(builder8);
    }

    @Test
    public void test12503() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest25.test12503");
        org.apache.rat.configuration.builders.TextBuilder textBuilder0 = new org.apache.rat.configuration.builders.TextBuilder();
        org.apache.rat.configuration.builders.TextBuilder textBuilder2 = textBuilder0.setText("true");
        org.apache.rat.analysis.IHeaderMatcher iHeaderMatcher3 = textBuilder0.build();
        org.apache.rat.configuration.builders.TextBuilder textBuilder5 = textBuilder0.setText("SpdxBuilder: null");
        org.apache.rat.configuration.builders.TextBuilder textBuilder7 = textBuilder5.setText("d25f13bc-1910-4451-97b5-b72663551a5d");
        java.lang.String str8 = textBuilder7.toString();
        org.junit.Assert.assertNotNull(textBuilder2);
        org.junit.Assert.assertNotNull(iHeaderMatcher3);
        org.junit.Assert.assertNotNull(textBuilder5);
        org.junit.Assert.assertNotNull(textBuilder7);
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "TextBuilder: d25f13bc-1910-4451-9..." + "'", str8, "TextBuilder: d25f13bc-1910-4451-9...");
    }

    @Test
    public void test12504() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest25.test12504");
        org.apache.rat.configuration.builders.MatcherRefBuilder matcherRefBuilder0 = org.apache.rat.analysis.IHeaderMatcher.Builder.matcherRef();
        boolean boolean1 = matcherRefBuilder0.hasId();
        java.lang.String str2 = matcherRefBuilder0.toString();
        java.util.Map<java.lang.String, org.apache.rat.analysis.IHeaderMatcher> strMap3 = null;
        org.apache.rat.configuration.builders.MatcherRefBuilder matcherRefBuilder4 = matcherRefBuilder0.setMatchers(strMap3);
        java.util.Map<java.lang.String, org.apache.rat.analysis.IHeaderMatcher> strMap5 = null;
        org.apache.rat.configuration.builders.MatcherRefBuilder matcherRefBuilder6 = matcherRefBuilder0.setMatchers(strMap5);
        java.util.Map<java.lang.String, org.apache.rat.analysis.IHeaderMatcher> strMap7 = null;
        org.apache.rat.configuration.builders.MatcherRefBuilder matcherRefBuilder8 = matcherRefBuilder0.setMatchers(strMap7);
        org.apache.rat.configuration.builders.MatcherRefBuilder matcherRefBuilder10 = matcherRefBuilder0.setRefId("Datum [ name ='http://org/apache/rat/meta-data#LicenseFamilyName',value ='Academic Free License, Version 2.1 ']");
        java.util.Map<java.lang.String, org.apache.rat.analysis.IHeaderMatcher> strMap11 = null;
        org.apache.rat.configuration.builders.MatcherRefBuilder matcherRefBuilder12 = matcherRefBuilder0.setMatchers(strMap11);
        java.lang.String str13 = matcherRefBuilder0.toString();
        java.util.Map<java.lang.String, org.apache.rat.analysis.IHeaderMatcher> strMap14 = null;
        org.apache.rat.configuration.builders.MatcherRefBuilder matcherRefBuilder15 = matcherRefBuilder0.setMatchers(strMap14);
        java.util.Map<java.lang.String, org.apache.rat.analysis.IHeaderMatcher> strMap16 = null;
        org.apache.rat.configuration.builders.MatcherRefBuilder matcherRefBuilder17 = matcherRefBuilder0.setMatchers(strMap16);
        org.apache.rat.configuration.builders.MatcherRefBuilder matcherRefBuilder19 = matcherRefBuilder17.setRefId("CDDL1");
        java.util.Map<java.lang.String, org.apache.rat.analysis.IHeaderMatcher> strMap20 = null;
        org.apache.rat.configuration.builders.MatcherRefBuilder matcherRefBuilder21 = matcherRefBuilder17.setMatchers(strMap20);
        org.junit.Assert.assertNotNull(matcherRefBuilder0);
        org.junit.Assert.assertTrue("'" + boolean1 + "' != '" + false + "'", boolean1 == false);
        org.junit.Assert.assertEquals("'" + str2 + "' != '" + "MathcerRefBuilder: null" + "'", str2, "MathcerRefBuilder: null");
        org.junit.Assert.assertNotNull(matcherRefBuilder4);
        org.junit.Assert.assertNotNull(matcherRefBuilder6);
        org.junit.Assert.assertNotNull(matcherRefBuilder8);
        org.junit.Assert.assertNotNull(matcherRefBuilder10);
        org.junit.Assert.assertNotNull(matcherRefBuilder12);
        org.junit.Assert.assertEquals("'" + str13 + "' != '" + "MathcerRefBuilder: Datum [ name ='http://org/apache/rat/meta-data#LicenseFamilyName',value ='Academic Free License, Version 2.1 ']" + "'", str13, "MathcerRefBuilder: Datum [ name ='http://org/apache/rat/meta-data#LicenseFamilyName',value ='Academic Free License, Version 2.1 ']");
        org.junit.Assert.assertNotNull(matcherRefBuilder15);
        org.junit.Assert.assertNotNull(matcherRefBuilder17);
        org.junit.Assert.assertNotNull(matcherRefBuilder19);
        org.junit.Assert.assertNotNull(matcherRefBuilder21);
    }

    @Test
    public void test12505() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest25.test12505");
        org.apache.rat.analysis.license.FullTextMatchingLicense fullTextMatchingLicense0 = new org.apache.rat.analysis.license.FullTextMatchingLicense();
        fullTextMatchingLicense0.setLicenseFamilyName("hi!");
        java.lang.String str3 = fullTextMatchingLicense0.getLicenseFamilyCategory();
        java.lang.String str4 = fullTextMatchingLicense0.getLicenseFamilyName();
        fullTextMatchingLicense0.setLicenseFamilyName("SpdxBuilder: null");
        fullTextMatchingLicense0.setLicenseFamilyCategory("TMF");
        org.apache.rat.license.ILicenseFamily iLicenseFamily9 = fullTextMatchingLicense0.getLicenseFamily();
        java.util.SortedSet<org.apache.rat.license.ILicenseFamily> iLicenseFamilySet10 = org.apache.rat.license.LicenseFamilySetFactory.emptyLicenseFamilySet();
        org.apache.rat.license.ILicenseFamily iLicenseFamily11 = org.apache.rat.license.LicenseFamilySetFactory.search(iLicenseFamily9, iLicenseFamilySet10);
        java.lang.String[] strArray17 = new java.lang.String[] { "http://org/apache/rat/meta-data#LicenseFamilyCategory", "Datum [ name ='http://org/apache/rat/meta-data#LicenseFamilyCategory',value ='GPL1  ']", "MANIFEST.MF", "AllBuilder:", "The MIT License" };
        org.apache.rat.utils.ReportingSet<java.lang.String> strSet18 = new org.apache.rat.utils.ReportingSet<java.lang.String>();
        boolean boolean19 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strSet18, strArray17);
        boolean boolean21 = strSet18.addIfNotPresent("http://org/apache/rat/meta-data#LicenseFamilyName");
        java.util.Iterator<java.lang.String> strItor22 = strSet18.iterator();
        java.lang.Object[] objArray23 = strSet18.toArray();
        java.lang.String[] strArray29 = new java.lang.String[] { "http://org/apache/rat/meta-data#LicenseFamilyCategory", "Datum [ name ='http://org/apache/rat/meta-data#LicenseFamilyCategory',value ='GPL1  ']", "MANIFEST.MF", "AllBuilder:", "The MIT License" };
        org.apache.rat.utils.ReportingSet<java.lang.String> strSet30 = new org.apache.rat.utils.ReportingSet<java.lang.String>();
        boolean boolean31 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strSet30, strArray29);
        boolean boolean33 = strSet30.addIfNotPresent("http://org/apache/rat/meta-data#LicenseFamilyName");
        java.util.SortedSet<org.apache.rat.license.ILicenseFamily> iLicenseFamilySet34 = org.apache.rat.license.LicenseFamilySetFactory.emptyLicenseFamilySet();
        boolean boolean35 = strSet30.removeAll((java.util.Collection<org.apache.rat.license.ILicenseFamily>) iLicenseFamilySet34);
        boolean boolean36 = strSet18.containsAll((java.util.Collection<org.apache.rat.license.ILicenseFamily>) iLicenseFamilySet34);
        org.apache.rat.license.ILicenseFamily iLicenseFamily37 = org.apache.rat.license.LicenseFamilySetFactory.search(iLicenseFamily9, iLicenseFamilySet34);
        org.apache.rat.policy.DefaultPolicy defaultPolicy38 = new org.apache.rat.policy.DefaultPolicy((java.util.Collection<org.apache.rat.license.ILicenseFamily>) iLicenseFamilySet34);
        org.apache.rat.policy.DefaultPolicy defaultPolicy39 = new org.apache.rat.policy.DefaultPolicy((java.util.Collection<org.apache.rat.license.ILicenseFamily>) iLicenseFamilySet34);
        org.apache.rat.license.ILicenseFamilyBuilder iLicenseFamilyBuilder40 = new org.apache.rat.license.ILicenseFamilyBuilder();
        org.apache.rat.license.ILicenseFamily.Builder builder42 = iLicenseFamilyBuilder40.setLicenseFamilyCategory("Modified BSD License");
        org.apache.rat.license.ILicenseFamily.Builder builder44 = iLicenseFamilyBuilder40.setLicenseFamilyCategory("6486879f-fc81-4b57-aec7-c4c77d540c30");
        org.apache.rat.license.ILicenseFamily.Builder builder46 = iLicenseFamilyBuilder40.setLicenseFamilyName("MathcerRefBuilder: ");
        org.apache.rat.license.ILicenseFamily.Builder builder48 = iLicenseFamilyBuilder40.setLicenseFamilyName("Copyright Builder: s:6481fb19-38f0-43f5-ab95-caf84a069ee1 e:null o:null");
        org.apache.rat.license.ILicenseFamily iLicenseFamily49 = iLicenseFamilyBuilder40.build();
        org.apache.rat.license.ILicenseFamily.Builder builder51 = iLicenseFamilyBuilder40.setLicenseFamilyCategory("7E27CD62-4403-40AB-A9F5-16E7C59AB2F1");
        org.apache.rat.license.ILicenseFamily.Builder builder53 = iLicenseFamilyBuilder40.setLicenseFamilyCategory("4fcae176-e574-46ed-b9e4-dea2e2f3b458 http://org/apache/rat/meta-data#LicenseFamilyName");
        org.apache.rat.license.ILicenseFamily iLicenseFamily54 = builder53.build();
        defaultPolicy39.add(iLicenseFamily54);
        org.apache.rat.api.Document document56 = null;
        defaultPolicy39.analyse(document56);
        org.apache.rat.api.Document document58 = null;
        // The following exception was thrown during execution in test generation
        try {
            defaultPolicy39.reportLicenseApprovalClaim(document58, true);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNull(str3);
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "hi!" + "'", str4, "hi!");
        org.junit.Assert.assertNotNull(iLicenseFamily9);
        org.junit.Assert.assertNotNull(iLicenseFamilySet10);
        org.junit.Assert.assertNull(iLicenseFamily11);
        org.junit.Assert.assertNotNull(strArray17);
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + true + "'", boolean19 == true);
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + true + "'", boolean21 == true);
        org.junit.Assert.assertNotNull(strItor22);
        org.junit.Assert.assertNotNull(objArray23);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray23), "[AllBuilder:, Datum [ name ='http://org/apache/rat/meta-data#LicenseFamilyCategory',value ='GPL1  '], MANIFEST.MF, The MIT License, http://org/apache/rat/meta-data#LicenseFamilyCategory, http://org/apache/rat/meta-data#LicenseFamilyName]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray23), "[AllBuilder:, Datum [ name ='http://org/apache/rat/meta-data#LicenseFamilyCategory',value ='GPL1  '], MANIFEST.MF, The MIT License, http://org/apache/rat/meta-data#LicenseFamilyCategory, http://org/apache/rat/meta-data#LicenseFamilyName]");
        org.junit.Assert.assertNotNull(strArray29);
        org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + true + "'", boolean31 == true);
        org.junit.Assert.assertTrue("'" + boolean33 + "' != '" + true + "'", boolean33 == true);
        org.junit.Assert.assertNotNull(iLicenseFamilySet34);
        org.junit.Assert.assertTrue("'" + boolean35 + "' != '" + false + "'", boolean35 == false);
        org.junit.Assert.assertTrue("'" + boolean36 + "' != '" + true + "'", boolean36 == true);
        org.junit.Assert.assertNull(iLicenseFamily37);
        org.junit.Assert.assertNotNull(builder42);
        org.junit.Assert.assertNotNull(builder44);
        org.junit.Assert.assertNotNull(builder46);
        org.junit.Assert.assertNotNull(builder48);
        org.junit.Assert.assertNotNull(iLicenseFamily49);
        org.junit.Assert.assertNotNull(builder51);
        org.junit.Assert.assertNotNull(builder53);
        org.junit.Assert.assertNotNull(iLicenseFamily54);
    }

    @Test
    public void test12506() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest25.test12506");
        java.io.Writer writer0 = null;
        org.apache.rat.report.xml.writer.impl.base.XmlWriter xmlWriter1 = new org.apache.rat.report.xml.writer.impl.base.XmlWriter(writer0);
        org.apache.rat.report.claim.impl.xml.SimpleXmlClaimReporter simpleXmlClaimReporter2 = new org.apache.rat.report.claim.impl.xml.SimpleXmlClaimReporter((org.apache.rat.report.xml.writer.IXmlWriter) xmlWriter1);
        org.apache.rat.report.claim.impl.xml.SimpleXmlClaimReporter simpleXmlClaimReporter3 = new org.apache.rat.report.claim.impl.xml.SimpleXmlClaimReporter((org.apache.rat.report.xml.writer.IXmlWriter) xmlWriter1);
        org.apache.rat.report.claim.impl.xml.SimpleXmlClaimReporter simpleXmlClaimReporter4 = new org.apache.rat.report.claim.impl.xml.SimpleXmlClaimReporter((org.apache.rat.report.xml.writer.IXmlWriter) xmlWriter1);
        org.apache.rat.report.claim.impl.xml.SimpleXmlClaimReporter simpleXmlClaimReporter5 = new org.apache.rat.report.claim.impl.xml.SimpleXmlClaimReporter((org.apache.rat.report.xml.writer.IXmlWriter) xmlWriter1);
        org.apache.rat.report.claim.impl.xml.SimpleXmlClaimReporter simpleXmlClaimReporter6 = new org.apache.rat.report.claim.impl.xml.SimpleXmlClaimReporter((org.apache.rat.report.xml.writer.IXmlWriter) xmlWriter1);
        org.apache.rat.report.claim.impl.xml.SimpleXmlClaimReporter simpleXmlClaimReporter7 = new org.apache.rat.report.claim.impl.xml.SimpleXmlClaimReporter((org.apache.rat.report.xml.writer.IXmlWriter) xmlWriter1);
        org.apache.rat.report.claim.impl.xml.SimpleXmlClaimReporter simpleXmlClaimReporter8 = new org.apache.rat.report.claim.impl.xml.SimpleXmlClaimReporter((org.apache.rat.report.xml.writer.IXmlWriter) xmlWriter1);
        org.apache.rat.report.claim.impl.xml.SimpleXmlClaimReporter simpleXmlClaimReporter9 = new org.apache.rat.report.claim.impl.xml.SimpleXmlClaimReporter((org.apache.rat.report.xml.writer.IXmlWriter) xmlWriter1);
        org.apache.rat.report.claim.impl.xml.SimpleXmlClaimReporter simpleXmlClaimReporter10 = new org.apache.rat.report.claim.impl.xml.SimpleXmlClaimReporter((org.apache.rat.report.xml.writer.IXmlWriter) xmlWriter1);
        org.apache.rat.report.claim.impl.xml.SimpleXmlClaimReporter simpleXmlClaimReporter11 = new org.apache.rat.report.claim.impl.xml.SimpleXmlClaimReporter((org.apache.rat.report.xml.writer.IXmlWriter) xmlWriter1);
        org.apache.rat.report.claim.impl.xml.SimpleXmlClaimReporter simpleXmlClaimReporter12 = new org.apache.rat.report.claim.impl.xml.SimpleXmlClaimReporter((org.apache.rat.report.xml.writer.IXmlWriter) xmlWriter1);
        org.apache.rat.report.claim.impl.xml.SimpleXmlClaimReporter simpleXmlClaimReporter13 = new org.apache.rat.report.claim.impl.xml.SimpleXmlClaimReporter((org.apache.rat.report.xml.writer.IXmlWriter) xmlWriter1);
        org.apache.rat.report.claim.impl.xml.SimpleXmlClaimReporter simpleXmlClaimReporter14 = new org.apache.rat.report.claim.impl.xml.SimpleXmlClaimReporter((org.apache.rat.report.xml.writer.IXmlWriter) xmlWriter1);
        // The following exception was thrown during execution in test generation
        try {
            org.apache.rat.report.xml.writer.IXmlWriter iXmlWriter17 = xmlWriter1.attribute((java.lang.CharSequence) "a3b53609-8989-4241-8aa6-1cc947f0d382", (java.lang.CharSequence) "REGEXBUILDER: 021187D7-27C2-4FD9-BC74-8CC00413EE52");
            org.junit.Assert.fail("Expected exception of type org.apache.rat.report.xml.writer.OperationNotAllowedException; message: Close called before an element has been opened.");
        } catch (org.apache.rat.report.xml.writer.OperationNotAllowedException e) {
            // Expected exception.
        }
    }

    @Test
    public void test12507() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest25.test12507");
        org.apache.rat.analysis.matchers.FullTextMatcher fullTextMatcher2 = new org.apache.rat.analysis.matchers.FullTextMatcher("TMF  ", "Apache License Version 2.0");
        org.apache.rat.analysis.IHeaderMatcher.State state4 = fullTextMatcher2.matches("http://org/apache/rat/meta-data#HeaderCategory");
        java.lang.String str5 = fullTextMatcher2.getId();
        boolean boolean7 = fullTextMatcher2.doMatch("NotBuilder: null");
        fullTextMatcher2.reset();
        org.junit.Assert.assertTrue("'" + state4 + "' != '" + org.apache.rat.analysis.IHeaderMatcher.State.i + "'", state4.equals(org.apache.rat.analysis.IHeaderMatcher.State.i));
        org.junit.Assert.assertEquals("'" + str5 + "' != '" + "TMF  " + "'", str5, "TMF  ");
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
    }

    @Test
    public void test12508() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest25.test12508");
        org.apache.rat.analysis.license.FullTextMatchingLicense fullTextMatchingLicense0 = new org.apache.rat.analysis.license.FullTextMatchingLicense();
        fullTextMatchingLicense0.setLicenseFamilyName("hi!");
        java.lang.String str3 = fullTextMatchingLicense0.getLicenseFamilyCategory();
        java.lang.String str4 = fullTextMatchingLicense0.getLicenseFamilyCategory();
        java.lang.String str5 = fullTextMatchingLicense0.getNotes();
        java.lang.String str6 = fullTextMatchingLicense0.getLicenseFamilyCategory();
        fullTextMatchingLicense0.setNotes("NotBuilder: MathcerRefBuilder: null");
        java.lang.String str9 = fullTextMatchingLicense0.getLicenseFamilyName();
        java.lang.String str10 = fullTextMatchingLicense0.getLicenseFamilyName();
        fullTextMatchingLicense0.setNotes("GNUGeneralPublicLicenseversion2");
        fullTextMatchingLicense0.setLicenseFamilyCategory("MathcerRefBuilder: aba50df1-5ba7-491a-a427-87194604c00d");
        fullTextMatchingLicense0.setFullText("11bace0d-801c-4188-8edb-06ba643c7993");
        org.apache.rat.license.ILicense.Builder builder17 = fullTextMatchingLicense0.getLicense();
        org.junit.Assert.assertNull(str3);
        org.junit.Assert.assertNull(str4);
        org.junit.Assert.assertNull(str5);
        org.junit.Assert.assertNull(str6);
        org.junit.Assert.assertEquals("'" + str9 + "' != '" + "hi!" + "'", str9, "hi!");
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "hi!" + "'", str10, "hi!");
        org.junit.Assert.assertNotNull(builder17);
    }

    @Test
    public void test12509() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest25.test12509");
        org.apache.rat.license.ILicenseFamilyBuilder iLicenseFamilyBuilder0 = new org.apache.rat.license.ILicenseFamilyBuilder();
        java.lang.String str1 = iLicenseFamilyBuilder0.getCategory();
        org.apache.rat.license.ILicenseFamily.Builder builder3 = iLicenseFamilyBuilder0.setLicenseFamilyCategory("AL   ");
        org.apache.rat.license.ILicenseFamily.Builder builder5 = iLicenseFamilyBuilder0.setLicenseFamilyCategory("MIT  ");
        org.apache.rat.license.ILicenseFamily.Builder builder7 = iLicenseFamilyBuilder0.setLicenseFamilyName("4a00cf7d-fe76-423e-917e-b03bbae6b8a5");
        org.apache.rat.license.ILicenseFamily.Builder builder9 = iLicenseFamilyBuilder0.setLicenseFamilyName("EBC30EB7-B3EA-4F39-BAEA-5FEA4FA0278B");
        org.apache.rat.license.ILicenseFamily iLicenseFamily10 = iLicenseFamilyBuilder0.build();
        org.apache.rat.license.ILicenseFamily.Builder builder12 = iLicenseFamilyBuilder0.setLicenseFamilyCategory("f6c7d16f-90d4-435d-b9d9-a9f6c196d56a");
        org.junit.Assert.assertNull(str1);
        org.junit.Assert.assertNotNull(builder3);
        org.junit.Assert.assertNotNull(builder5);
        org.junit.Assert.assertNotNull(builder7);
        org.junit.Assert.assertNotNull(builder9);
        org.junit.Assert.assertNotNull(iLicenseFamily10);
        org.junit.Assert.assertNotNull(builder12);
    }

    @Test
    public void test12510() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest25.test12510");
        org.apache.rat.utils.Log log0 = null;
        org.apache.rat.ReportConfiguration reportConfiguration1 = new org.apache.rat.ReportConfiguration(log0);
        java.io.FilenameFilter filenameFilter2 = reportConfiguration1.getInputFileFilter();
        boolean boolean3 = reportConfiguration1.isStyleReport();
        org.apache.commons.io.function.IOSupplier<java.io.OutputStream> outputStreamIOSupplier4 = reportConfiguration1.getOutput();
        org.apache.commons.io.function.IOSupplier<java.io.InputStream> inputStreamIOSupplier5 = reportConfiguration1.getStyleSheet();
        reportConfiguration1.setStyleReport(false);
        boolean boolean8 = reportConfiguration1.isAddingLicenses();
        org.apache.rat.utils.DefaultLog defaultLog9 = org.apache.rat.utils.DefaultLog.INSTANCE;
        org.apache.rat.utils.Log log10 = null;
        org.apache.rat.ReportConfiguration reportConfiguration11 = new org.apache.rat.ReportConfiguration(log10);
        java.io.FilenameFilter filenameFilter12 = reportConfiguration11.getInputFileFilter();
        org.apache.rat.license.LicenseSetFactory.LicenseFilter licenseFilter13 = org.apache.rat.license.LicenseSetFactory.LicenseFilter.all;
        java.util.SortedSet<org.apache.rat.license.ILicense> iLicenseSet14 = reportConfiguration11.getLicenses(licenseFilter13);
        org.apache.rat.config.AddLicenseHeaders addLicenseHeaders15 = org.apache.rat.config.AddLicenseHeaders.FALSE;
        reportConfiguration11.setAddLicenseHeaders(addLicenseHeaders15);
        org.apache.rat.utils.Log log17 = null;
        org.apache.rat.ReportConfiguration reportConfiguration18 = new org.apache.rat.ReportConfiguration(log17);
        org.apache.rat.report.claim.ClaimStatistic claimStatistic19 = org.apache.rat.Reporter.report(reportConfiguration18);
        org.apache.rat.license.LicenseSetFactory.LicenseFilter licenseFilter20 = org.apache.rat.license.LicenseSetFactory.LicenseFilter.all;
        org.apache.rat.Reporter.listLicenses(reportConfiguration18, licenseFilter20);
        org.apache.rat.Reporter.listLicenses(reportConfiguration11, licenseFilter20);
        org.apache.rat.utils.Log log23 = null;
        org.apache.rat.ReportConfiguration reportConfiguration24 = new org.apache.rat.ReportConfiguration(log23);
        java.io.FilenameFilter filenameFilter25 = reportConfiguration24.getInputFileFilter();
        org.apache.rat.license.LicenseSetFactory.LicenseFilter licenseFilter26 = org.apache.rat.license.LicenseSetFactory.LicenseFilter.all;
        java.util.SortedSet<org.apache.rat.license.ILicense> iLicenseSet27 = reportConfiguration24.getLicenses(licenseFilter26);
        org.apache.rat.config.AddLicenseHeaders addLicenseHeaders28 = org.apache.rat.config.AddLicenseHeaders.FALSE;
        reportConfiguration24.setAddLicenseHeaders(addLicenseHeaders28);
        org.apache.rat.utils.Log log30 = null;
        org.apache.rat.ReportConfiguration reportConfiguration31 = new org.apache.rat.ReportConfiguration(log30);
        org.apache.rat.report.claim.ClaimStatistic claimStatistic32 = org.apache.rat.Reporter.report(reportConfiguration31);
        org.apache.rat.license.LicenseSetFactory.LicenseFilter licenseFilter33 = org.apache.rat.license.LicenseSetFactory.LicenseFilter.all;
        org.apache.rat.Reporter.listLicenses(reportConfiguration31, licenseFilter33);
        org.apache.rat.Reporter.listLicenses(reportConfiguration24, licenseFilter33);
        org.apache.rat.Reporter.listLicenses(reportConfiguration11, licenseFilter33);
        org.apache.rat.utils.Log log37 = null;
        org.apache.rat.ReportConfiguration reportConfiguration38 = new org.apache.rat.ReportConfiguration(log37);
        org.apache.commons.io.function.IOSupplier<java.io.OutputStream> outputStreamIOSupplier39 = reportConfiguration38.getOutput();
        reportConfiguration11.setOut(outputStreamIOSupplier39);
        org.apache.rat.utils.Log log41 = null;
        org.apache.rat.ReportConfiguration reportConfiguration42 = new org.apache.rat.ReportConfiguration(log41);
        org.apache.rat.report.claim.ClaimStatistic claimStatistic43 = org.apache.rat.Reporter.report(reportConfiguration42);
        org.apache.rat.utils.Log log44 = null;
        org.apache.rat.ReportConfiguration reportConfiguration45 = new org.apache.rat.ReportConfiguration(log44);
        org.apache.rat.report.claim.ClaimStatistic claimStatistic46 = org.apache.rat.Reporter.report(reportConfiguration45);
        org.apache.rat.utils.ReportingSet.Options options47 = org.apache.rat.utils.ReportingSet.Options.OVERWRITE;
        reportConfiguration45.licenseDuplicateOption(options47);
        reportConfiguration42.familyDuplicateOption(options47);
        reportConfiguration11.licenseDuplicateOption(options47);
        reportConfiguration11.addApprovedLicenseCategory("W3C Document Copyright");
        org.apache.rat.utils.Log log53 = null;
        org.apache.rat.ReportConfiguration reportConfiguration54 = new org.apache.rat.ReportConfiguration(log53);
        reportConfiguration54.addApprovedLicenseCategory(".cvsignore");
        org.apache.rat.utils.Log.Level level57 = org.apache.rat.utils.Log.Level.ERROR;
        reportConfiguration54.logLicenseCollisions(level57);
        reportConfiguration11.logLicenseCollisions(level57);
        defaultLog9.setLevel(level57);
        defaultLog9.warn((java.lang.Object) "GNU General Public License, version 3");
        org.apache.rat.ReportConfiguration reportConfiguration63 = new org.apache.rat.ReportConfiguration((org.apache.rat.utils.Log) defaultLog9);
        org.apache.rat.utils.DefaultLog defaultLog64 = org.apache.rat.utils.DefaultLog.INSTANCE;
        org.apache.rat.utils.Log log65 = null;
        org.apache.rat.ReportConfiguration reportConfiguration66 = new org.apache.rat.ReportConfiguration(log65);
        reportConfiguration66.addApprovedLicenseCategory(".cvsignore");
        org.apache.rat.utils.Log.Level level69 = org.apache.rat.utils.Log.Level.ERROR;
        reportConfiguration66.logFamilyCollisions(level69);
        defaultLog64.setLevel(level69);
        defaultLog9.debug((java.lang.Object) level69);
        reportConfiguration1.logFamilyCollisions(level69);
        org.apache.rat.report.IReportable iReportable74 = null;
        reportConfiguration1.setReportable(iReportable74);
        org.junit.Assert.assertNull(filenameFilter2);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + true + "'", boolean3 == true);
        org.junit.Assert.assertNotNull(outputStreamIOSupplier4);
        org.junit.Assert.assertNull(inputStreamIOSupplier5);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertNotNull(defaultLog9);
        org.junit.Assert.assertNull(filenameFilter12);
        org.junit.Assert.assertTrue("'" + licenseFilter13 + "' != '" + org.apache.rat.license.LicenseSetFactory.LicenseFilter.all + "'", licenseFilter13.equals(org.apache.rat.license.LicenseSetFactory.LicenseFilter.all));
        org.junit.Assert.assertNotNull(iLicenseSet14);
        org.junit.Assert.assertTrue("'" + addLicenseHeaders15 + "' != '" + org.apache.rat.config.AddLicenseHeaders.FALSE + "'", addLicenseHeaders15.equals(org.apache.rat.config.AddLicenseHeaders.FALSE));
        org.junit.Assert.assertNull(claimStatistic19);
        org.junit.Assert.assertTrue("'" + licenseFilter20 + "' != '" + org.apache.rat.license.LicenseSetFactory.LicenseFilter.all + "'", licenseFilter20.equals(org.apache.rat.license.LicenseSetFactory.LicenseFilter.all));
        org.junit.Assert.assertNull(filenameFilter25);
        org.junit.Assert.assertTrue("'" + licenseFilter26 + "' != '" + org.apache.rat.license.LicenseSetFactory.LicenseFilter.all + "'", licenseFilter26.equals(org.apache.rat.license.LicenseSetFactory.LicenseFilter.all));
        org.junit.Assert.assertNotNull(iLicenseSet27);
        org.junit.Assert.assertTrue("'" + addLicenseHeaders28 + "' != '" + org.apache.rat.config.AddLicenseHeaders.FALSE + "'", addLicenseHeaders28.equals(org.apache.rat.config.AddLicenseHeaders.FALSE));
        org.junit.Assert.assertNull(claimStatistic32);
        org.junit.Assert.assertTrue("'" + licenseFilter33 + "' != '" + org.apache.rat.license.LicenseSetFactory.LicenseFilter.all + "'", licenseFilter33.equals(org.apache.rat.license.LicenseSetFactory.LicenseFilter.all));
        org.junit.Assert.assertNotNull(outputStreamIOSupplier39);
        org.junit.Assert.assertNull(claimStatistic43);
        org.junit.Assert.assertNull(claimStatistic46);
        org.junit.Assert.assertTrue("'" + options47 + "' != '" + org.apache.rat.utils.ReportingSet.Options.OVERWRITE + "'", options47.equals(org.apache.rat.utils.ReportingSet.Options.OVERWRITE));
        org.junit.Assert.assertTrue("'" + level57 + "' != '" + org.apache.rat.utils.Log.Level.ERROR + "'", level57.equals(org.apache.rat.utils.Log.Level.ERROR));
        org.junit.Assert.assertNotNull(defaultLog64);
        org.junit.Assert.assertTrue("'" + level69 + "' != '" + org.apache.rat.utils.Log.Level.ERROR + "'", level69.equals(org.apache.rat.utils.Log.Level.ERROR));
    }

    @Test
    public void test12511() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest25.test12511");
        java.io.File file0 = null;
        org.apache.rat.utils.Log log1 = null;
        org.apache.rat.ReportConfiguration reportConfiguration2 = new org.apache.rat.ReportConfiguration(log1);
        java.io.FilenameFilter filenameFilter3 = reportConfiguration2.getInputFileFilter();
        org.apache.rat.license.LicenseSetFactory.LicenseFilter licenseFilter4 = org.apache.rat.license.LicenseSetFactory.LicenseFilter.all;
        java.util.SortedSet<org.apache.rat.license.ILicense> iLicenseSet5 = reportConfiguration2.getLicenses(licenseFilter4);
        org.apache.rat.config.AddLicenseHeaders addLicenseHeaders6 = org.apache.rat.config.AddLicenseHeaders.FALSE;
        reportConfiguration2.setAddLicenseHeaders(addLicenseHeaders6);
        org.apache.rat.utils.Log log8 = null;
        org.apache.rat.ReportConfiguration reportConfiguration9 = new org.apache.rat.ReportConfiguration(log8);
        org.apache.rat.report.claim.ClaimStatistic claimStatistic10 = org.apache.rat.Reporter.report(reportConfiguration9);
        org.apache.rat.license.LicenseSetFactory.LicenseFilter licenseFilter11 = org.apache.rat.license.LicenseSetFactory.LicenseFilter.all;
        org.apache.rat.Reporter.listLicenses(reportConfiguration9, licenseFilter11);
        org.apache.rat.Reporter.listLicenses(reportConfiguration2, licenseFilter11);
        org.apache.rat.utils.Log log14 = null;
        org.apache.rat.ReportConfiguration reportConfiguration15 = new org.apache.rat.ReportConfiguration(log14);
        java.io.FilenameFilter filenameFilter16 = reportConfiguration15.getInputFileFilter();
        org.apache.rat.license.LicenseSetFactory.LicenseFilter licenseFilter17 = org.apache.rat.license.LicenseSetFactory.LicenseFilter.all;
        java.util.SortedSet<org.apache.rat.license.ILicense> iLicenseSet18 = reportConfiguration15.getLicenses(licenseFilter17);
        org.apache.rat.config.AddLicenseHeaders addLicenseHeaders19 = org.apache.rat.config.AddLicenseHeaders.FALSE;
        reportConfiguration15.setAddLicenseHeaders(addLicenseHeaders19);
        org.apache.rat.utils.Log log21 = null;
        org.apache.rat.ReportConfiguration reportConfiguration22 = new org.apache.rat.ReportConfiguration(log21);
        org.apache.rat.report.claim.ClaimStatistic claimStatistic23 = org.apache.rat.Reporter.report(reportConfiguration22);
        org.apache.rat.license.LicenseSetFactory.LicenseFilter licenseFilter24 = org.apache.rat.license.LicenseSetFactory.LicenseFilter.all;
        org.apache.rat.Reporter.listLicenses(reportConfiguration22, licenseFilter24);
        org.apache.rat.Reporter.listLicenses(reportConfiguration15, licenseFilter24);
        org.apache.rat.Reporter.listLicenses(reportConfiguration2, licenseFilter24);
        org.apache.commons.io.function.IOSupplier<java.io.OutputStream> outputStreamIOSupplier28 = reportConfiguration2.getOutput();
        org.apache.rat.report.claim.ClaimStatistic claimStatistic29 = org.apache.rat.Reporter.report(reportConfiguration2);
        org.apache.rat.utils.Log log30 = null;
        org.apache.rat.ReportConfiguration reportConfiguration31 = new org.apache.rat.ReportConfiguration(log30);
        java.io.FilenameFilter filenameFilter32 = reportConfiguration31.getInputFileFilter();
        org.apache.rat.license.LicenseSetFactory.LicenseFilter licenseFilter33 = org.apache.rat.license.LicenseSetFactory.LicenseFilter.all;
        java.util.SortedSet<org.apache.rat.license.ILicense> iLicenseSet34 = reportConfiguration31.getLicenses(licenseFilter33);
        org.apache.rat.config.AddLicenseHeaders addLicenseHeaders35 = org.apache.rat.config.AddLicenseHeaders.FALSE;
        reportConfiguration31.setAddLicenseHeaders(addLicenseHeaders35);
        org.apache.rat.utils.Log log37 = null;
        org.apache.rat.ReportConfiguration reportConfiguration38 = new org.apache.rat.ReportConfiguration(log37);
        org.apache.rat.report.claim.ClaimStatistic claimStatistic39 = org.apache.rat.Reporter.report(reportConfiguration38);
        org.apache.rat.license.LicenseSetFactory.LicenseFilter licenseFilter40 = org.apache.rat.license.LicenseSetFactory.LicenseFilter.all;
        org.apache.rat.Reporter.listLicenses(reportConfiguration38, licenseFilter40);
        org.apache.rat.Reporter.listLicenses(reportConfiguration31, licenseFilter40);
        org.apache.rat.utils.Log log43 = null;
        org.apache.rat.ReportConfiguration reportConfiguration44 = new org.apache.rat.ReportConfiguration(log43);
        java.io.FilenameFilter filenameFilter45 = reportConfiguration44.getInputFileFilter();
        org.apache.rat.license.LicenseSetFactory.LicenseFilter licenseFilter46 = org.apache.rat.license.LicenseSetFactory.LicenseFilter.all;
        java.util.SortedSet<org.apache.rat.license.ILicense> iLicenseSet47 = reportConfiguration44.getLicenses(licenseFilter46);
        org.apache.rat.config.AddLicenseHeaders addLicenseHeaders48 = org.apache.rat.config.AddLicenseHeaders.FALSE;
        reportConfiguration44.setAddLicenseHeaders(addLicenseHeaders48);
        org.apache.rat.utils.Log log50 = null;
        org.apache.rat.ReportConfiguration reportConfiguration51 = new org.apache.rat.ReportConfiguration(log50);
        org.apache.rat.report.claim.ClaimStatistic claimStatistic52 = org.apache.rat.Reporter.report(reportConfiguration51);
        org.apache.rat.license.LicenseSetFactory.LicenseFilter licenseFilter53 = org.apache.rat.license.LicenseSetFactory.LicenseFilter.all;
        org.apache.rat.Reporter.listLicenses(reportConfiguration51, licenseFilter53);
        org.apache.rat.Reporter.listLicenses(reportConfiguration44, licenseFilter53);
        org.apache.rat.Reporter.listLicenses(reportConfiguration31, licenseFilter53);
        org.apache.rat.utils.Log log57 = null;
        org.apache.rat.ReportConfiguration reportConfiguration58 = new org.apache.rat.ReportConfiguration(log57);
        org.apache.commons.io.function.IOSupplier<java.io.OutputStream> outputStreamIOSupplier59 = reportConfiguration58.getOutput();
        reportConfiguration31.setOut(outputStreamIOSupplier59);
        org.apache.rat.utils.Log.Level level61 = org.apache.rat.utils.Log.Level.WARN;
        reportConfiguration31.logLicenseCollisions(level61);
        org.apache.commons.io.filefilter.IOFileFilter iOFileFilter63 = reportConfiguration31.getDirectoryFilter();
        java.nio.file.Path path64 = null;
        boolean boolean65 = iOFileFilter63.matches(path64);
        java.nio.file.Path path66 = null;
        java.nio.file.attribute.BasicFileAttributes basicFileAttributes67 = null;
        java.nio.file.FileVisitResult fileVisitResult68 = iOFileFilter63.accept(path66, basicFileAttributes67);
        org.apache.commons.io.filefilter.IOFileFilter iOFileFilter69 = iOFileFilter63.negate();
        reportConfiguration2.setDirectoryFilter(iOFileFilter63);
        // The following exception was thrown during execution in test generation
        try {
            org.apache.rat.walker.DirectoryWalker directoryWalker71 = new org.apache.rat.walker.DirectoryWalker(file0, iOFileFilter63);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNull(filenameFilter3);
        org.junit.Assert.assertTrue("'" + licenseFilter4 + "' != '" + org.apache.rat.license.LicenseSetFactory.LicenseFilter.all + "'", licenseFilter4.equals(org.apache.rat.license.LicenseSetFactory.LicenseFilter.all));
        org.junit.Assert.assertNotNull(iLicenseSet5);
        org.junit.Assert.assertTrue("'" + addLicenseHeaders6 + "' != '" + org.apache.rat.config.AddLicenseHeaders.FALSE + "'", addLicenseHeaders6.equals(org.apache.rat.config.AddLicenseHeaders.FALSE));
        org.junit.Assert.assertNull(claimStatistic10);
        org.junit.Assert.assertTrue("'" + licenseFilter11 + "' != '" + org.apache.rat.license.LicenseSetFactory.LicenseFilter.all + "'", licenseFilter11.equals(org.apache.rat.license.LicenseSetFactory.LicenseFilter.all));
        org.junit.Assert.assertNull(filenameFilter16);
        org.junit.Assert.assertTrue("'" + licenseFilter17 + "' != '" + org.apache.rat.license.LicenseSetFactory.LicenseFilter.all + "'", licenseFilter17.equals(org.apache.rat.license.LicenseSetFactory.LicenseFilter.all));
        org.junit.Assert.assertNotNull(iLicenseSet18);
        org.junit.Assert.assertTrue("'" + addLicenseHeaders19 + "' != '" + org.apache.rat.config.AddLicenseHeaders.FALSE + "'", addLicenseHeaders19.equals(org.apache.rat.config.AddLicenseHeaders.FALSE));
        org.junit.Assert.assertNull(claimStatistic23);
        org.junit.Assert.assertTrue("'" + licenseFilter24 + "' != '" + org.apache.rat.license.LicenseSetFactory.LicenseFilter.all + "'", licenseFilter24.equals(org.apache.rat.license.LicenseSetFactory.LicenseFilter.all));
        org.junit.Assert.assertNotNull(outputStreamIOSupplier28);
        org.junit.Assert.assertNull(claimStatistic29);
        org.junit.Assert.assertNull(filenameFilter32);
        org.junit.Assert.assertTrue("'" + licenseFilter33 + "' != '" + org.apache.rat.license.LicenseSetFactory.LicenseFilter.all + "'", licenseFilter33.equals(org.apache.rat.license.LicenseSetFactory.LicenseFilter.all));
        org.junit.Assert.assertNotNull(iLicenseSet34);
        org.junit.Assert.assertTrue("'" + addLicenseHeaders35 + "' != '" + org.apache.rat.config.AddLicenseHeaders.FALSE + "'", addLicenseHeaders35.equals(org.apache.rat.config.AddLicenseHeaders.FALSE));
        org.junit.Assert.assertNull(claimStatistic39);
        org.junit.Assert.assertTrue("'" + licenseFilter40 + "' != '" + org.apache.rat.license.LicenseSetFactory.LicenseFilter.all + "'", licenseFilter40.equals(org.apache.rat.license.LicenseSetFactory.LicenseFilter.all));
        org.junit.Assert.assertNull(filenameFilter45);
        org.junit.Assert.assertTrue("'" + licenseFilter46 + "' != '" + org.apache.rat.license.LicenseSetFactory.LicenseFilter.all + "'", licenseFilter46.equals(org.apache.rat.license.LicenseSetFactory.LicenseFilter.all));
        org.junit.Assert.assertNotNull(iLicenseSet47);
        org.junit.Assert.assertTrue("'" + addLicenseHeaders48 + "' != '" + org.apache.rat.config.AddLicenseHeaders.FALSE + "'", addLicenseHeaders48.equals(org.apache.rat.config.AddLicenseHeaders.FALSE));
        org.junit.Assert.assertNull(claimStatistic52);
        org.junit.Assert.assertTrue("'" + licenseFilter53 + "' != '" + org.apache.rat.license.LicenseSetFactory.LicenseFilter.all + "'", licenseFilter53.equals(org.apache.rat.license.LicenseSetFactory.LicenseFilter.all));
        org.junit.Assert.assertNotNull(outputStreamIOSupplier59);
        org.junit.Assert.assertTrue("'" + level61 + "' != '" + org.apache.rat.utils.Log.Level.WARN + "'", level61.equals(org.apache.rat.utils.Log.Level.WARN));
        org.junit.Assert.assertNotNull(iOFileFilter63);
        org.junit.Assert.assertTrue("'" + boolean65 + "' != '" + false + "'", boolean65 == false);
        org.junit.Assert.assertTrue("'" + fileVisitResult68 + "' != '" + java.nio.file.FileVisitResult.TERMINATE + "'", fileVisitResult68.equals(java.nio.file.FileVisitResult.TERMINATE));
        org.junit.Assert.assertNotNull(iOFileFilter69);
    }

    @Test
    public void test12512() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest25.test12512");
        org.apache.rat.document.ToNameTransformer toNameTransformer0 = new org.apache.rat.document.ToNameTransformer();
        org.apache.rat.report.claim.ClaimStatistic claimStatistic1 = new org.apache.rat.report.claim.ClaimStatistic();
        claimStatistic1.setNumApproved((int) (short) 10);
        claimStatistic1.setNumUnknown(30);
        java.lang.Object obj6 = toNameTransformer0.transform((java.lang.Object) claimStatistic1);
        claimStatistic1.setNumGenerated((int) (short) 100);
        int int9 = claimStatistic1.getNumUnknown();
        java.util.Map<java.lang.String, java.lang.Integer> strMap10 = claimStatistic1.getLicenseFileCodeMap();
        int int11 = claimStatistic1.getNumUnknown();
        org.junit.Assert.assertNull(obj6);
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + 30 + "'", int9 == 30);
        org.junit.Assert.assertNull(strMap10);
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 30 + "'", int11 == 30);
    }

    @Test
    public void test12513() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest25.test12513");
        org.apache.rat.configuration.builders.CopyrightBuilder copyrightBuilder0 = org.apache.rat.analysis.IHeaderMatcher.Builder.copyright();
        java.lang.String str1 = copyrightBuilder0.toString();
        org.apache.rat.configuration.builders.CopyrightBuilder copyrightBuilder3 = copyrightBuilder0.setEnd(".cvsignore");
        boolean boolean4 = copyrightBuilder0.hasId();
        boolean boolean5 = copyrightBuilder0.hasId();
        org.apache.rat.analysis.IHeaderMatcher iHeaderMatcher6 = copyrightBuilder0.build();
        boolean boolean7 = copyrightBuilder0.hasId();
        org.apache.rat.configuration.builders.CopyrightBuilder copyrightBuilder9 = copyrightBuilder0.setEnd("274c6a15-09f6-4bfd-ac53-1827770eb507");
        org.apache.rat.analysis.IHeaderMatcher iHeaderMatcher10 = copyrightBuilder9.build();
        org.junit.Assert.assertNotNull(copyrightBuilder0);
        org.junit.Assert.assertEquals("'" + str1 + "' != '" + "Copyright Builder: s:null e:null o:null" + "'", str1, "Copyright Builder: s:null e:null o:null");
        org.junit.Assert.assertNotNull(copyrightBuilder3);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertNotNull(iHeaderMatcher6);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertNotNull(copyrightBuilder9);
        org.junit.Assert.assertNotNull(iHeaderMatcher10);
    }

    @Test
    public void test12514() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest25.test12514");
        org.apache.rat.utils.DefaultLog defaultLog2 = org.apache.rat.utils.DefaultLog.INSTANCE;
        org.apache.rat.license.ILicense.Builder builder3 = org.apache.rat.license.ILicense.builder();
        org.apache.rat.license.ILicense.Builder builder5 = builder3.setLicenseFamilyCategory("");
        org.apache.rat.analysis.matchers.CopyrightMatcher copyrightMatcher9 = new org.apache.rat.analysis.matchers.CopyrightMatcher("", "GPL1 ", "hi!");
        org.apache.rat.analysis.IHeaderMatcher.State state10 = copyrightMatcher9.finalizeState();
        org.apache.rat.license.ILicense.Builder builder11 = builder5.setMatcher((org.apache.rat.analysis.IHeaderMatcher) copyrightMatcher9);
        org.apache.rat.license.ILicense.Builder builder13 = builder11.setLicenseFamilyCategory("");
        defaultLog2.error((java.lang.Object) builder13);
        org.apache.rat.analysis.matchers.CopyrightMatcher copyrightMatcher18 = new org.apache.rat.analysis.matchers.CopyrightMatcher("", "GPL1 ", "hi!");
        copyrightMatcher18.reset();
        org.apache.rat.license.ILicense.Builder builder20 = builder13.setMatcher((org.apache.rat.analysis.IHeaderMatcher) copyrightMatcher18);
        org.apache.rat.analysis.matchers.NotMatcher notMatcher21 = new org.apache.rat.analysis.matchers.NotMatcher("AnyBuilder:\nAllBuilder:", (org.apache.rat.analysis.IHeaderMatcher) copyrightMatcher18);
        org.apache.rat.analysis.IHeaderMatcher.State state22 = notMatcher21.finalizeState();
        java.lang.String str23 = notMatcher21.getId();
        org.apache.rat.analysis.matchers.NotMatcher notMatcher24 = new org.apache.rat.analysis.matchers.NotMatcher("stand", (org.apache.rat.analysis.IHeaderMatcher) notMatcher21);
        notMatcher24.reset();
        org.apache.rat.analysis.IHeaderMatcher.State state27 = notMatcher24.matches("Copyright Builder: s:null e:64868 o:Copyright Builder: s:org/a e:standard o:W3C  ");
        org.junit.Assert.assertNotNull(defaultLog2);
        org.junit.Assert.assertNotNull(builder3);
        org.junit.Assert.assertNotNull(builder5);
        org.junit.Assert.assertTrue("'" + state10 + "' != '" + org.apache.rat.analysis.IHeaderMatcher.State.f + "'", state10.equals(org.apache.rat.analysis.IHeaderMatcher.State.f));
        org.junit.Assert.assertNotNull(builder11);
        org.junit.Assert.assertNotNull(builder13);
        org.junit.Assert.assertNotNull(builder20);
        org.junit.Assert.assertTrue("'" + state22 + "' != '" + org.apache.rat.analysis.IHeaderMatcher.State.t + "'", state22.equals(org.apache.rat.analysis.IHeaderMatcher.State.t));
        org.junit.Assert.assertEquals("'" + str23 + "' != '" + "AnyBuilder:\nAllBuilder:" + "'", str23, "AnyBuilder:\nAllBuilder:");
        org.junit.Assert.assertTrue("'" + state27 + "' != '" + org.apache.rat.analysis.IHeaderMatcher.State.i + "'", state27.equals(org.apache.rat.analysis.IHeaderMatcher.State.i));
    }

    @Test
    public void test12515() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest25.test12515");
        org.apache.rat.utils.Log log0 = null;
        org.apache.rat.ReportConfiguration reportConfiguration1 = new org.apache.rat.ReportConfiguration(log0);
        java.io.FilenameFilter filenameFilter2 = reportConfiguration1.getInputFileFilter();
        org.apache.rat.license.LicenseSetFactory.LicenseFilter licenseFilter3 = org.apache.rat.license.LicenseSetFactory.LicenseFilter.all;
        java.util.SortedSet<org.apache.rat.license.ILicense> iLicenseSet4 = reportConfiguration1.getLicenses(licenseFilter3);
        org.apache.rat.config.AddLicenseHeaders addLicenseHeaders5 = org.apache.rat.config.AddLicenseHeaders.FALSE;
        reportConfiguration1.setAddLicenseHeaders(addLicenseHeaders5);
        org.apache.rat.utils.Log log7 = null;
        org.apache.rat.ReportConfiguration reportConfiguration8 = new org.apache.rat.ReportConfiguration(log7);
        org.apache.rat.report.claim.ClaimStatistic claimStatistic9 = org.apache.rat.Reporter.report(reportConfiguration8);
        org.apache.rat.license.LicenseSetFactory.LicenseFilter licenseFilter10 = org.apache.rat.license.LicenseSetFactory.LicenseFilter.all;
        org.apache.rat.Reporter.listLicenses(reportConfiguration8, licenseFilter10);
        org.apache.rat.Reporter.listLicenses(reportConfiguration1, licenseFilter10);
        org.apache.rat.utils.Log log13 = null;
        org.apache.rat.ReportConfiguration reportConfiguration14 = new org.apache.rat.ReportConfiguration(log13);
        java.io.FilenameFilter filenameFilter15 = reportConfiguration14.getInputFileFilter();
        org.apache.rat.license.LicenseSetFactory.LicenseFilter licenseFilter16 = org.apache.rat.license.LicenseSetFactory.LicenseFilter.all;
        java.util.SortedSet<org.apache.rat.license.ILicense> iLicenseSet17 = reportConfiguration14.getLicenses(licenseFilter16);
        org.apache.rat.config.AddLicenseHeaders addLicenseHeaders18 = org.apache.rat.config.AddLicenseHeaders.FALSE;
        reportConfiguration14.setAddLicenseHeaders(addLicenseHeaders18);
        org.apache.rat.utils.Log log20 = null;
        org.apache.rat.ReportConfiguration reportConfiguration21 = new org.apache.rat.ReportConfiguration(log20);
        org.apache.rat.report.claim.ClaimStatistic claimStatistic22 = org.apache.rat.Reporter.report(reportConfiguration21);
        org.apache.rat.license.LicenseSetFactory.LicenseFilter licenseFilter23 = org.apache.rat.license.LicenseSetFactory.LicenseFilter.all;
        org.apache.rat.Reporter.listLicenses(reportConfiguration21, licenseFilter23);
        org.apache.rat.Reporter.listLicenses(reportConfiguration14, licenseFilter23);
        org.apache.rat.Reporter.listLicenses(reportConfiguration1, licenseFilter23);
        java.io.FilenameFilter filenameFilter27 = reportConfiguration1.getInputFileFilter();
        org.apache.rat.utils.Log log28 = null;
        org.apache.rat.ReportConfiguration reportConfiguration29 = new org.apache.rat.ReportConfiguration(log28);
        java.io.FilenameFilter filenameFilter30 = reportConfiguration29.getInputFileFilter();
        org.apache.rat.license.LicenseSetFactory.LicenseFilter licenseFilter31 = org.apache.rat.license.LicenseSetFactory.LicenseFilter.all;
        java.util.SortedSet<org.apache.rat.license.ILicense> iLicenseSet32 = reportConfiguration29.getLicenses(licenseFilter31);
        org.apache.rat.config.AddLicenseHeaders addLicenseHeaders33 = org.apache.rat.config.AddLicenseHeaders.FALSE;
        reportConfiguration29.setAddLicenseHeaders(addLicenseHeaders33);
        org.apache.rat.utils.Log log35 = null;
        org.apache.rat.ReportConfiguration reportConfiguration36 = new org.apache.rat.ReportConfiguration(log35);
        org.apache.rat.report.claim.ClaimStatistic claimStatistic37 = org.apache.rat.Reporter.report(reportConfiguration36);
        org.apache.rat.license.LicenseSetFactory.LicenseFilter licenseFilter38 = org.apache.rat.license.LicenseSetFactory.LicenseFilter.all;
        org.apache.rat.Reporter.listLicenses(reportConfiguration36, licenseFilter38);
        org.apache.rat.Reporter.listLicenses(reportConfiguration29, licenseFilter38);
        org.apache.rat.utils.Log log41 = null;
        org.apache.rat.ReportConfiguration reportConfiguration42 = new org.apache.rat.ReportConfiguration(log41);
        java.io.FilenameFilter filenameFilter43 = reportConfiguration42.getInputFileFilter();
        org.apache.rat.license.LicenseSetFactory.LicenseFilter licenseFilter44 = org.apache.rat.license.LicenseSetFactory.LicenseFilter.all;
        java.util.SortedSet<org.apache.rat.license.ILicense> iLicenseSet45 = reportConfiguration42.getLicenses(licenseFilter44);
        org.apache.rat.config.AddLicenseHeaders addLicenseHeaders46 = org.apache.rat.config.AddLicenseHeaders.FALSE;
        reportConfiguration42.setAddLicenseHeaders(addLicenseHeaders46);
        org.apache.rat.utils.Log log48 = null;
        org.apache.rat.ReportConfiguration reportConfiguration49 = new org.apache.rat.ReportConfiguration(log48);
        org.apache.rat.report.claim.ClaimStatistic claimStatistic50 = org.apache.rat.Reporter.report(reportConfiguration49);
        org.apache.rat.license.LicenseSetFactory.LicenseFilter licenseFilter51 = org.apache.rat.license.LicenseSetFactory.LicenseFilter.all;
        org.apache.rat.Reporter.listLicenses(reportConfiguration49, licenseFilter51);
        org.apache.rat.Reporter.listLicenses(reportConfiguration42, licenseFilter51);
        org.apache.rat.Reporter.listLicenses(reportConfiguration29, licenseFilter51);
        java.util.SortedSet<org.apache.rat.license.ILicense> iLicenseSet55 = reportConfiguration1.getLicenses(licenseFilter51);
        boolean boolean56 = reportConfiguration1.isAddingLicensesForced();
        org.apache.rat.utils.Log log57 = null;
        org.apache.rat.ReportConfiguration reportConfiguration58 = new org.apache.rat.ReportConfiguration(log57);
        org.apache.rat.report.claim.ClaimStatistic claimStatistic59 = org.apache.rat.Reporter.report(reportConfiguration58);
        org.apache.rat.utils.Log log60 = null;
        org.apache.rat.ReportConfiguration reportConfiguration61 = new org.apache.rat.ReportConfiguration(log60);
        org.apache.rat.report.claim.ClaimStatistic claimStatistic62 = org.apache.rat.Reporter.report(reportConfiguration61);
        org.apache.rat.utils.ReportingSet.Options options63 = org.apache.rat.utils.ReportingSet.Options.OVERWRITE;
        reportConfiguration61.licenseDuplicateOption(options63);
        reportConfiguration58.familyDuplicateOption(options63);
        reportConfiguration1.familyDuplicateOption(options63);
        java.util.SortedSet<java.lang.String> strSet67 = reportConfiguration1.getApprovedLicenseCategories();
        java.lang.String[] strArray73 = new java.lang.String[] { "http://org/apache/rat/meta-data#LicenseFamilyCategory", "Datum [ name ='http://org/apache/rat/meta-data#LicenseFamilyCategory',value ='GPL1  ']", "MANIFEST.MF", "AllBuilder:", "The MIT License" };
        org.apache.rat.utils.ReportingSet<java.lang.String> strSet74 = new org.apache.rat.utils.ReportingSet<java.lang.String>();
        boolean boolean75 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strSet74, strArray73);
        boolean boolean77 = strSet74.addIfNotPresent("http://org/apache/rat/meta-data#LicenseFamilyName");
        boolean boolean79 = strSet74.addIfNotPresent("ef7a8b13-64c3-4510-bb0c-dbf208e1e73f");
        java.util.function.Function<java.lang.String, java.lang.String> strFunction80 = null;
        org.apache.rat.utils.ReportingSet<java.lang.String> strSet81 = strSet74.setMsgFormat(strFunction80);
        java.lang.String str82 = strSet74.last();
        reportConfiguration1.removeApprovedLicenseCategories((java.util.Collection<java.lang.String>) strSet74);
        java.lang.String str84 = strSet74.first();
        org.junit.Assert.assertNull(filenameFilter2);
        org.junit.Assert.assertTrue("'" + licenseFilter3 + "' != '" + org.apache.rat.license.LicenseSetFactory.LicenseFilter.all + "'", licenseFilter3.equals(org.apache.rat.license.LicenseSetFactory.LicenseFilter.all));
        org.junit.Assert.assertNotNull(iLicenseSet4);
        org.junit.Assert.assertTrue("'" + addLicenseHeaders5 + "' != '" + org.apache.rat.config.AddLicenseHeaders.FALSE + "'", addLicenseHeaders5.equals(org.apache.rat.config.AddLicenseHeaders.FALSE));
        org.junit.Assert.assertNull(claimStatistic9);
        org.junit.Assert.assertTrue("'" + licenseFilter10 + "' != '" + org.apache.rat.license.LicenseSetFactory.LicenseFilter.all + "'", licenseFilter10.equals(org.apache.rat.license.LicenseSetFactory.LicenseFilter.all));
        org.junit.Assert.assertNull(filenameFilter15);
        org.junit.Assert.assertTrue("'" + licenseFilter16 + "' != '" + org.apache.rat.license.LicenseSetFactory.LicenseFilter.all + "'", licenseFilter16.equals(org.apache.rat.license.LicenseSetFactory.LicenseFilter.all));
        org.junit.Assert.assertNotNull(iLicenseSet17);
        org.junit.Assert.assertTrue("'" + addLicenseHeaders18 + "' != '" + org.apache.rat.config.AddLicenseHeaders.FALSE + "'", addLicenseHeaders18.equals(org.apache.rat.config.AddLicenseHeaders.FALSE));
        org.junit.Assert.assertNull(claimStatistic22);
        org.junit.Assert.assertTrue("'" + licenseFilter23 + "' != '" + org.apache.rat.license.LicenseSetFactory.LicenseFilter.all + "'", licenseFilter23.equals(org.apache.rat.license.LicenseSetFactory.LicenseFilter.all));
        org.junit.Assert.assertNull(filenameFilter27);
        org.junit.Assert.assertNull(filenameFilter30);
        org.junit.Assert.assertTrue("'" + licenseFilter31 + "' != '" + org.apache.rat.license.LicenseSetFactory.LicenseFilter.all + "'", licenseFilter31.equals(org.apache.rat.license.LicenseSetFactory.LicenseFilter.all));
        org.junit.Assert.assertNotNull(iLicenseSet32);
        org.junit.Assert.assertTrue("'" + addLicenseHeaders33 + "' != '" + org.apache.rat.config.AddLicenseHeaders.FALSE + "'", addLicenseHeaders33.equals(org.apache.rat.config.AddLicenseHeaders.FALSE));
        org.junit.Assert.assertNull(claimStatistic37);
        org.junit.Assert.assertTrue("'" + licenseFilter38 + "' != '" + org.apache.rat.license.LicenseSetFactory.LicenseFilter.all + "'", licenseFilter38.equals(org.apache.rat.license.LicenseSetFactory.LicenseFilter.all));
        org.junit.Assert.assertNull(filenameFilter43);
        org.junit.Assert.assertTrue("'" + licenseFilter44 + "' != '" + org.apache.rat.license.LicenseSetFactory.LicenseFilter.all + "'", licenseFilter44.equals(org.apache.rat.license.LicenseSetFactory.LicenseFilter.all));
        org.junit.Assert.assertNotNull(iLicenseSet45);
        org.junit.Assert.assertTrue("'" + addLicenseHeaders46 + "' != '" + org.apache.rat.config.AddLicenseHeaders.FALSE + "'", addLicenseHeaders46.equals(org.apache.rat.config.AddLicenseHeaders.FALSE));
        org.junit.Assert.assertNull(claimStatistic50);
        org.junit.Assert.assertTrue("'" + licenseFilter51 + "' != '" + org.apache.rat.license.LicenseSetFactory.LicenseFilter.all + "'", licenseFilter51.equals(org.apache.rat.license.LicenseSetFactory.LicenseFilter.all));
        org.junit.Assert.assertNotNull(iLicenseSet55);
        org.junit.Assert.assertTrue("'" + boolean56 + "' != '" + false + "'", boolean56 == false);
        org.junit.Assert.assertNull(claimStatistic59);
        org.junit.Assert.assertNull(claimStatistic62);
        org.junit.Assert.assertTrue("'" + options63 + "' != '" + org.apache.rat.utils.ReportingSet.Options.OVERWRITE + "'", options63.equals(org.apache.rat.utils.ReportingSet.Options.OVERWRITE));
        org.junit.Assert.assertNotNull(strSet67);
        org.junit.Assert.assertNotNull(strArray73);
        org.junit.Assert.assertTrue("'" + boolean75 + "' != '" + true + "'", boolean75 == true);
        org.junit.Assert.assertTrue("'" + boolean77 + "' != '" + true + "'", boolean77 == true);
        org.junit.Assert.assertTrue("'" + boolean79 + "' != '" + true + "'", boolean79 == true);
        org.junit.Assert.assertNotNull(strSet81);
        org.junit.Assert.assertEquals("'" + str82 + "' != '" + "http://org/apache/rat/meta-data#LicenseFamilyName" + "'", str82, "http://org/apache/rat/meta-data#LicenseFamilyName");
        org.junit.Assert.assertEquals("'" + str84 + "' != '" + "AllBuilder:" + "'", str84, "AllBuilder:");
    }

    @Test
    public void test12516() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest25.test12516");
        org.apache.rat.analysis.license.FullTextMatchingLicense fullTextMatchingLicense0 = new org.apache.rat.analysis.license.FullTextMatchingLicense();
        fullTextMatchingLicense0.setLicenseFamilyName("hi!");
        fullTextMatchingLicense0.setFullText("MANIFEST.MF");
        org.apache.rat.license.ILicense.Builder builder5 = fullTextMatchingLicense0.getLicense();
        org.apache.rat.license.ILicense.Builder builder6 = fullTextMatchingLicense0.getLicense();
        fullTextMatchingLicense0.setLicenseFamilyCategory("MathcerRefBuilder: AllBuilder:");
        org.apache.rat.license.ILicense.Builder builder9 = fullTextMatchingLicense0.getLicense();
        org.apache.rat.license.ILicense.Builder builder11 = builder9.setId("81df60fb-3fa0-4b87-8565-5fcdb00643ba");
        org.junit.Assert.assertNotNull(builder5);
        org.junit.Assert.assertNotNull(builder6);
        org.junit.Assert.assertNotNull(builder9);
        org.junit.Assert.assertNotNull(builder11);
    }

    @Test
    public void test12517() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest25.test12517");
        org.apache.rat.analysis.matchers.CopyrightMatcher copyrightMatcher4 = new org.apache.rat.analysis.matchers.CopyrightMatcher("", "GPL1 ", "notice", "GPL2 ");
        org.apache.rat.analysis.IHeaderMatcher.State state6 = copyrightMatcher4.matches("false");
        copyrightMatcher4.reset();
        java.lang.String str8 = copyrightMatcher4.toString();
        org.apache.rat.analysis.IHeaderMatcher.State state9 = copyrightMatcher4.finalizeState();
        org.apache.rat.analysis.IHeaderMatcher.State state11 = copyrightMatcher4.matches("MathcerRefBuilder: F FALSE");
        copyrightMatcher4.reset();
        org.junit.Assert.assertTrue("'" + state6 + "' != '" + org.apache.rat.analysis.IHeaderMatcher.State.i + "'", state6.equals(org.apache.rat.analysis.IHeaderMatcher.State.i));
// flaky:         org.junit.Assert.assertEquals("'" + str8 + "' != '" + "813a0332-4ba2-4a1e-b13c-8c369f2af6b9" + "'", str8, "813a0332-4ba2-4a1e-b13c-8c369f2af6b9");
        org.junit.Assert.assertTrue("'" + state9 + "' != '" + org.apache.rat.analysis.IHeaderMatcher.State.f + "'", state9.equals(org.apache.rat.analysis.IHeaderMatcher.State.f));
        org.junit.Assert.assertTrue("'" + state11 + "' != '" + org.apache.rat.analysis.IHeaderMatcher.State.f + "'", state11.equals(org.apache.rat.analysis.IHeaderMatcher.State.f));
    }

    @Test
    public void test12518() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest25.test12518");
        org.apache.rat.utils.Log log0 = null;
        org.apache.rat.ReportConfiguration reportConfiguration1 = new org.apache.rat.ReportConfiguration(log0);
        org.apache.rat.report.claim.ClaimStatistic claimStatistic2 = org.apache.rat.Reporter.report(reportConfiguration1);
        org.apache.rat.utils.Log log3 = null;
        org.apache.rat.ReportConfiguration reportConfiguration4 = new org.apache.rat.ReportConfiguration(log3);
        org.apache.rat.report.claim.ClaimStatistic claimStatistic5 = org.apache.rat.Reporter.report(reportConfiguration4);
        org.apache.rat.utils.ReportingSet.Options options6 = org.apache.rat.utils.ReportingSet.Options.OVERWRITE;
        reportConfiguration4.licenseDuplicateOption(options6);
        reportConfiguration1.familyDuplicateOption(options6);
        org.apache.commons.io.function.IOSupplier<java.io.PrintWriter> printWriterIOSupplier9 = reportConfiguration1.getWriter();
        java.lang.String[] strArray15 = new java.lang.String[] { "http://org/apache/rat/meta-data#LicenseFamilyCategory", "Datum [ name ='http://org/apache/rat/meta-data#LicenseFamilyCategory',value ='GPL1  ']", "MANIFEST.MF", "AllBuilder:", "The MIT License" };
        org.apache.rat.utils.ReportingSet<java.lang.String> strSet16 = new org.apache.rat.utils.ReportingSet<java.lang.String>();
        boolean boolean17 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strSet16, strArray15);
        boolean boolean19 = strSet16.addIfNotPresent("http://org/apache/rat/meta-data#LicenseFamilyName");
        java.util.Iterator<java.lang.String> strItor20 = strSet16.iterator();
        java.lang.Object[] objArray21 = strSet16.toArray();
        java.lang.String[] strArray27 = new java.lang.String[] { "http://org/apache/rat/meta-data#LicenseFamilyCategory", "Datum [ name ='http://org/apache/rat/meta-data#LicenseFamilyCategory',value ='GPL1  ']", "MANIFEST.MF", "AllBuilder:", "The MIT License" };
        org.apache.rat.utils.ReportingSet<java.lang.String> strSet28 = new org.apache.rat.utils.ReportingSet<java.lang.String>();
        boolean boolean29 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strSet28, strArray27);
        boolean boolean31 = strSet28.addIfNotPresent("http://org/apache/rat/meta-data#LicenseFamilyName");
        java.util.SortedSet<org.apache.rat.license.ILicenseFamily> iLicenseFamilySet32 = org.apache.rat.license.LicenseFamilySetFactory.emptyLicenseFamilySet();
        boolean boolean33 = strSet28.removeAll((java.util.Collection<org.apache.rat.license.ILicenseFamily>) iLicenseFamilySet32);
        boolean boolean34 = strSet16.containsAll((java.util.Collection<org.apache.rat.license.ILicenseFamily>) iLicenseFamilySet32);
        reportConfiguration1.addFamilies((java.util.Collection<org.apache.rat.license.ILicenseFamily>) iLicenseFamilySet32);
        boolean boolean36 = reportConfiguration1.isAddingLicenses();
        org.apache.rat.report.claim.ClaimStatistic claimStatistic37 = org.apache.rat.Reporter.report(reportConfiguration1);
        reportConfiguration1.addApprovedLicenseCategory("2f61fc99-c655-43e3-a548-fa8ccadafe5e");
        org.junit.Assert.assertNull(claimStatistic2);
        org.junit.Assert.assertNull(claimStatistic5);
        org.junit.Assert.assertTrue("'" + options6 + "' != '" + org.apache.rat.utils.ReportingSet.Options.OVERWRITE + "'", options6.equals(org.apache.rat.utils.ReportingSet.Options.OVERWRITE));
        org.junit.Assert.assertNotNull(printWriterIOSupplier9);
        org.junit.Assert.assertNotNull(strArray15);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + true + "'", boolean17 == true);
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + true + "'", boolean19 == true);
        org.junit.Assert.assertNotNull(strItor20);
        org.junit.Assert.assertNotNull(objArray21);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray21), "[AllBuilder:, Datum [ name ='http://org/apache/rat/meta-data#LicenseFamilyCategory',value ='GPL1  '], MANIFEST.MF, The MIT License, http://org/apache/rat/meta-data#LicenseFamilyCategory, http://org/apache/rat/meta-data#LicenseFamilyName]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray21), "[AllBuilder:, Datum [ name ='http://org/apache/rat/meta-data#LicenseFamilyCategory',value ='GPL1  '], MANIFEST.MF, The MIT License, http://org/apache/rat/meta-data#LicenseFamilyCategory, http://org/apache/rat/meta-data#LicenseFamilyName]");
        org.junit.Assert.assertNotNull(strArray27);
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + true + "'", boolean29 == true);
        org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + true + "'", boolean31 == true);
        org.junit.Assert.assertNotNull(iLicenseFamilySet32);
        org.junit.Assert.assertTrue("'" + boolean33 + "' != '" + false + "'", boolean33 == false);
        org.junit.Assert.assertTrue("'" + boolean34 + "' != '" + true + "'", boolean34 == true);
        org.junit.Assert.assertTrue("'" + boolean36 + "' != '" + false + "'", boolean36 == false);
        org.junit.Assert.assertNull(claimStatistic37);
    }

    @Test
    public void test12519() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest25.test12519");
        org.apache.rat.configuration.builders.NotBuilder notBuilder0 = new org.apache.rat.configuration.builders.NotBuilder();
        java.lang.String str1 = notBuilder0.toString();
        org.apache.rat.configuration.builders.MatcherRefBuilder matcherRefBuilder2 = org.apache.rat.analysis.IHeaderMatcher.Builder.matcherRef();
        boolean boolean3 = matcherRefBuilder2.hasId();
        java.util.Map<java.lang.String, org.apache.rat.analysis.IHeaderMatcher> strMap4 = null;
        org.apache.rat.configuration.builders.MatcherRefBuilder matcherRefBuilder5 = matcherRefBuilder2.setMatchers(strMap4);
        org.apache.rat.configuration.builders.AllBuilder allBuilder6 = new org.apache.rat.configuration.builders.AllBuilder();
        org.apache.rat.configuration.builders.CopyrightBuilder copyrightBuilder7 = org.apache.rat.analysis.IHeaderMatcher.Builder.copyright();
        org.apache.rat.configuration.builders.CopyrightBuilder copyrightBuilder9 = copyrightBuilder7.setStart("OASIS");
        java.lang.String str10 = copyrightBuilder7.toString();
        org.apache.rat.configuration.builders.CopyrightBuilder copyrightBuilder12 = copyrightBuilder7.setStart("223f0aba-15d4-49e9-901e-5740c137aebf");
        org.apache.rat.configuration.builders.MatcherRefBuilder matcherRefBuilder13 = org.apache.rat.analysis.IHeaderMatcher.Builder.matcherRef();
        boolean boolean14 = matcherRefBuilder13.hasId();
        org.apache.rat.configuration.builders.CopyrightBuilder copyrightBuilder15 = org.apache.rat.analysis.IHeaderMatcher.Builder.copyright();
        org.apache.rat.configuration.builders.CopyrightBuilder copyrightBuilder17 = copyrightBuilder15.setStart("OASIS");
        java.lang.String str18 = copyrightBuilder15.toString();
        org.apache.rat.configuration.builders.CopyrightBuilder copyrightBuilder20 = copyrightBuilder15.setStart("223f0aba-15d4-49e9-901e-5740c137aebf");
        org.apache.rat.configuration.builders.CopyrightBuilder copyrightBuilder21 = org.apache.rat.analysis.IHeaderMatcher.Builder.copyright();
        org.apache.rat.configuration.builders.CopyrightBuilder copyrightBuilder22 = org.apache.rat.analysis.IHeaderMatcher.Builder.copyright();
        java.lang.String str23 = copyrightBuilder22.toString();
        org.apache.rat.configuration.builders.CopyrightBuilder copyrightBuilder25 = copyrightBuilder22.setEnd(".cvsignore");
        boolean boolean26 = copyrightBuilder22.hasId();
        org.apache.rat.configuration.builders.CopyrightBuilder copyrightBuilder27 = org.apache.rat.analysis.IHeaderMatcher.Builder.copyright();
        java.lang.String str28 = copyrightBuilder27.toString();
        org.apache.rat.configuration.builders.CopyrightBuilder copyrightBuilder30 = copyrightBuilder27.setEnd(".cvsignore");
        boolean boolean31 = copyrightBuilder27.hasId();
        java.lang.String str32 = copyrightBuilder27.toString();
        org.apache.rat.configuration.builders.CopyrightBuilder copyrightBuilder33 = org.apache.rat.analysis.IHeaderMatcher.Builder.copyright();
        org.apache.rat.configuration.builders.CopyrightBuilder copyrightBuilder35 = copyrightBuilder33.setStart("OASIS");
        org.apache.rat.configuration.builders.AnyBuilder anyBuilder36 = org.apache.rat.analysis.IHeaderMatcher.Builder.any();
        org.apache.rat.configuration.builders.MatcherRefBuilder matcherRefBuilder37 = org.apache.rat.analysis.IHeaderMatcher.Builder.matcherRef();
        boolean boolean38 = matcherRefBuilder37.hasId();
        java.util.Map<java.lang.String, org.apache.rat.analysis.IHeaderMatcher> strMap39 = null;
        org.apache.rat.configuration.builders.MatcherRefBuilder matcherRefBuilder40 = matcherRefBuilder37.setMatchers(strMap39);
        org.apache.rat.configuration.builders.CopyrightBuilder copyrightBuilder41 = org.apache.rat.analysis.IHeaderMatcher.Builder.copyright();
        org.apache.rat.configuration.builders.MatcherRefBuilder matcherRefBuilder42 = org.apache.rat.analysis.IHeaderMatcher.Builder.matcherRef();
        boolean boolean43 = matcherRefBuilder42.hasId();
        java.lang.String str44 = matcherRefBuilder42.toString();
        java.util.Map<java.lang.String, org.apache.rat.analysis.IHeaderMatcher> strMap45 = null;
        org.apache.rat.configuration.builders.MatcherRefBuilder matcherRefBuilder46 = matcherRefBuilder42.setMatchers(strMap45);
        org.apache.rat.analysis.IHeaderMatcher.Builder[] builderArray47 = new org.apache.rat.analysis.IHeaderMatcher.Builder[] { matcherRefBuilder2, allBuilder6, copyrightBuilder12, matcherRefBuilder13, copyrightBuilder15, copyrightBuilder21, copyrightBuilder22, copyrightBuilder27, copyrightBuilder33, anyBuilder36, matcherRefBuilder37, copyrightBuilder41, matcherRefBuilder42 };
        java.util.ArrayList<org.apache.rat.analysis.IHeaderMatcher.Builder> builderList48 = new java.util.ArrayList<org.apache.rat.analysis.IHeaderMatcher.Builder>();
        boolean boolean49 = java.util.Collections.addAll((java.util.Collection<org.apache.rat.analysis.IHeaderMatcher.Builder>) builderList48, builderArray47);
        org.apache.rat.configuration.builders.AbstractBuilder abstractBuilder50 = notBuilder0.add((java.util.Collection<org.apache.rat.analysis.IHeaderMatcher.Builder>) builderList48);
        java.lang.String str51 = notBuilder0.toString();
        java.lang.String str52 = notBuilder0.toString();
        java.lang.String str53 = notBuilder0.toString();
        java.lang.String str54 = notBuilder0.toString();
        java.lang.String str55 = notBuilder0.toString();
        java.lang.String str56 = notBuilder0.toString();
        org.apache.rat.configuration.builders.RegexBuilder regexBuilder57 = new org.apache.rat.configuration.builders.RegexBuilder();
        java.lang.String str58 = regexBuilder57.toString();
        java.lang.String str59 = regexBuilder57.toString();
        org.apache.rat.configuration.builders.RegexBuilder regexBuilder61 = regexBuilder57.setExpr("89662180-a89f-497b-9301-227d494d2bae");
        java.lang.String str62 = regexBuilder61.toString();
        org.apache.rat.analysis.IHeaderMatcher iHeaderMatcher63 = regexBuilder61.build();
        java.lang.String str64 = regexBuilder61.toString();
        org.apache.rat.configuration.builders.AbstractBuilder abstractBuilder65 = notBuilder0.add((org.apache.rat.analysis.IHeaderMatcher.Builder) regexBuilder61);
        java.lang.String str66 = regexBuilder61.toString();
        org.junit.Assert.assertEquals("'" + str1 + "' != '" + "NotBuilder: null" + "'", str1, "NotBuilder: null");
        org.junit.Assert.assertNotNull(matcherRefBuilder2);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertNotNull(matcherRefBuilder5);
        org.junit.Assert.assertNotNull(copyrightBuilder7);
        org.junit.Assert.assertNotNull(copyrightBuilder9);
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "Copyright Builder: s:OASIS e:null o:null" + "'", str10, "Copyright Builder: s:OASIS e:null o:null");
        org.junit.Assert.assertNotNull(copyrightBuilder12);
        org.junit.Assert.assertNotNull(matcherRefBuilder13);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
        org.junit.Assert.assertNotNull(copyrightBuilder15);
        org.junit.Assert.assertNotNull(copyrightBuilder17);
        org.junit.Assert.assertEquals("'" + str18 + "' != '" + "Copyright Builder: s:OASIS e:null o:null" + "'", str18, "Copyright Builder: s:OASIS e:null o:null");
        org.junit.Assert.assertNotNull(copyrightBuilder20);
        org.junit.Assert.assertNotNull(copyrightBuilder21);
        org.junit.Assert.assertNotNull(copyrightBuilder22);
        org.junit.Assert.assertEquals("'" + str23 + "' != '" + "Copyright Builder: s:null e:null o:null" + "'", str23, "Copyright Builder: s:null e:null o:null");
        org.junit.Assert.assertNotNull(copyrightBuilder25);
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + false + "'", boolean26 == false);
        org.junit.Assert.assertNotNull(copyrightBuilder27);
        org.junit.Assert.assertEquals("'" + str28 + "' != '" + "Copyright Builder: s:null e:null o:null" + "'", str28, "Copyright Builder: s:null e:null o:null");
        org.junit.Assert.assertNotNull(copyrightBuilder30);
        org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + false + "'", boolean31 == false);
        org.junit.Assert.assertEquals("'" + str32 + "' != '" + "Copyright Builder: s:null e:.cvsignore o:null" + "'", str32, "Copyright Builder: s:null e:.cvsignore o:null");
        org.junit.Assert.assertNotNull(copyrightBuilder33);
        org.junit.Assert.assertNotNull(copyrightBuilder35);
        org.junit.Assert.assertNotNull(anyBuilder36);
        org.junit.Assert.assertNotNull(matcherRefBuilder37);
        org.junit.Assert.assertTrue("'" + boolean38 + "' != '" + false + "'", boolean38 == false);
        org.junit.Assert.assertNotNull(matcherRefBuilder40);
        org.junit.Assert.assertNotNull(copyrightBuilder41);
        org.junit.Assert.assertNotNull(matcherRefBuilder42);
        org.junit.Assert.assertTrue("'" + boolean43 + "' != '" + false + "'", boolean43 == false);
        org.junit.Assert.assertEquals("'" + str44 + "' != '" + "MathcerRefBuilder: null" + "'", str44, "MathcerRefBuilder: null");
        org.junit.Assert.assertNotNull(matcherRefBuilder46);
        org.junit.Assert.assertNotNull(builderArray47);
        org.junit.Assert.assertTrue("'" + boolean49 + "' != '" + true + "'", boolean49 == true);
        org.junit.Assert.assertNotNull(abstractBuilder50);
        org.junit.Assert.assertEquals("'" + str51 + "' != '" + "NotBuilder: MathcerRefBuilder: null" + "'", str51, "NotBuilder: MathcerRefBuilder: null");
        org.junit.Assert.assertEquals("'" + str52 + "' != '" + "NotBuilder: MathcerRefBuilder: null" + "'", str52, "NotBuilder: MathcerRefBuilder: null");
        org.junit.Assert.assertEquals("'" + str53 + "' != '" + "NotBuilder: MathcerRefBuilder: null" + "'", str53, "NotBuilder: MathcerRefBuilder: null");
        org.junit.Assert.assertEquals("'" + str54 + "' != '" + "NotBuilder: MathcerRefBuilder: null" + "'", str54, "NotBuilder: MathcerRefBuilder: null");
        org.junit.Assert.assertEquals("'" + str55 + "' != '" + "NotBuilder: MathcerRefBuilder: null" + "'", str55, "NotBuilder: MathcerRefBuilder: null");
        org.junit.Assert.assertEquals("'" + str56 + "' != '" + "NotBuilder: MathcerRefBuilder: null" + "'", str56, "NotBuilder: MathcerRefBuilder: null");
        org.junit.Assert.assertEquals("'" + str58 + "' != '" + "RegexBuilder: null" + "'", str58, "RegexBuilder: null");
        org.junit.Assert.assertEquals("'" + str59 + "' != '" + "RegexBuilder: null" + "'", str59, "RegexBuilder: null");
        org.junit.Assert.assertNotNull(regexBuilder61);
        org.junit.Assert.assertEquals("'" + str62 + "' != '" + "RegexBuilder: 89662180-a89f-497b-9301-227d494d2bae" + "'", str62, "RegexBuilder: 89662180-a89f-497b-9301-227d494d2bae");
        org.junit.Assert.assertNotNull(iHeaderMatcher63);
        org.junit.Assert.assertEquals("'" + str64 + "' != '" + "RegexBuilder: 89662180-a89f-497b-9301-227d494d2bae" + "'", str64, "RegexBuilder: 89662180-a89f-497b-9301-227d494d2bae");
        org.junit.Assert.assertNotNull(abstractBuilder65);
        org.junit.Assert.assertEquals("'" + str66 + "' != '" + "RegexBuilder: 89662180-a89f-497b-9301-227d494d2bae" + "'", str66, "RegexBuilder: 89662180-a89f-497b-9301-227d494d2bae");
    }

    @Test
    public void test12520() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest25.test12520");
        org.apache.rat.configuration.builders.CopyrightBuilder copyrightBuilder0 = org.apache.rat.analysis.IHeaderMatcher.Builder.copyright();
        org.apache.rat.configuration.builders.CopyrightBuilder copyrightBuilder2 = copyrightBuilder0.setStart("OASIS");
        org.apache.rat.analysis.IHeaderMatcher iHeaderMatcher3 = copyrightBuilder0.build();
        org.apache.rat.configuration.builders.CopyrightBuilder copyrightBuilder5 = copyrightBuilder0.setStart(".cvsignore");
        org.apache.rat.configuration.builders.CopyrightBuilder copyrightBuilder7 = copyrightBuilder0.setOwner("W3C  ");
        org.apache.rat.configuration.builders.CopyrightBuilder copyrightBuilder9 = copyrightBuilder0.setEnd("standard");
        java.lang.String str10 = copyrightBuilder0.toString();
        org.apache.rat.configuration.builders.AbstractBuilder abstractBuilder12 = copyrightBuilder0.setId("1e96b21e-f913-4d52-87cc-09323c460281");
        java.lang.String str13 = copyrightBuilder0.toString();
        org.apache.rat.configuration.builders.CopyrightBuilder copyrightBuilder15 = copyrightBuilder0.setOwner("b9d57440-4b03-461e-a164-b29e1341bbc8");
        org.apache.rat.configuration.builders.CopyrightBuilder copyrightBuilder17 = copyrightBuilder0.setStart("stand");
        org.apache.rat.configuration.builders.CopyrightBuilder copyrightBuilder19 = copyrightBuilder17.setStart("FFALSE");
        org.junit.Assert.assertNotNull(copyrightBuilder0);
        org.junit.Assert.assertNotNull(copyrightBuilder2);
        org.junit.Assert.assertNotNull(iHeaderMatcher3);
        org.junit.Assert.assertNotNull(copyrightBuilder5);
        org.junit.Assert.assertNotNull(copyrightBuilder7);
        org.junit.Assert.assertNotNull(copyrightBuilder9);
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "Copyright Builder: s:.cvsignore e:standard o:W3C  " + "'", str10, "Copyright Builder: s:.cvsignore e:standard o:W3C  ");
        org.junit.Assert.assertNotNull(abstractBuilder12);
        org.junit.Assert.assertEquals("'" + str13 + "' != '" + "Copyright Builder: s:.cvsignore e:standard o:W3C  " + "'", str13, "Copyright Builder: s:.cvsignore e:standard o:W3C  ");
        org.junit.Assert.assertNotNull(copyrightBuilder15);
        org.junit.Assert.assertNotNull(copyrightBuilder17);
        org.junit.Assert.assertNotNull(copyrightBuilder19);
    }

    @Test
    public void test12521() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest25.test12521");
        org.apache.rat.configuration.builders.RegexBuilder regexBuilder0 = new org.apache.rat.configuration.builders.RegexBuilder();
        java.lang.String str1 = regexBuilder0.toString();
        org.apache.rat.configuration.builders.RegexBuilder regexBuilder3 = regexBuilder0.setExpr("http://org/apache/rat/meta-data#HeaderSample");
        org.apache.rat.configuration.builders.RegexBuilder regexBuilder5 = regexBuilder0.setExpr("JAVA");
        org.apache.rat.configuration.builders.RegexBuilder regexBuilder7 = regexBuilder5.setExpr("archive W3CD ");
        java.lang.String str8 = regexBuilder7.toString();
        org.junit.Assert.assertEquals("'" + str1 + "' != '" + "RegexBuilder: null" + "'", str1, "RegexBuilder: null");
        org.junit.Assert.assertNotNull(regexBuilder3);
        org.junit.Assert.assertNotNull(regexBuilder5);
        org.junit.Assert.assertNotNull(regexBuilder7);
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "RegexBuilder: archive W3CD " + "'", str8, "RegexBuilder: archive W3CD ");
    }

    @Test
    public void test12522() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest25.test12522");
        boolean boolean1 = org.apache.rat.document.impl.guesser.BinaryGuesser.isKeystore("SpdxBuilder: null f1fc8dc8-990d-4a2d-9540-4e9ece3bd92c");
        org.junit.Assert.assertTrue("'" + boolean1 + "' != '" + false + "'", boolean1 == false);
    }

    @Test
    public void test12523() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest25.test12523");
        java.io.Writer writer0 = null;
        org.apache.rat.report.xml.writer.impl.base.XmlWriter xmlWriter1 = new org.apache.rat.report.xml.writer.impl.base.XmlWriter(writer0);
        org.apache.rat.report.claim.impl.xml.SimpleXmlClaimReporter simpleXmlClaimReporter2 = new org.apache.rat.report.claim.impl.xml.SimpleXmlClaimReporter((org.apache.rat.report.xml.writer.IXmlWriter) xmlWriter1);
        org.apache.rat.report.claim.impl.xml.SimpleXmlClaimReporter simpleXmlClaimReporter3 = new org.apache.rat.report.claim.impl.xml.SimpleXmlClaimReporter((org.apache.rat.report.xml.writer.IXmlWriter) xmlWriter1);
        org.apache.rat.report.claim.impl.xml.SimpleXmlClaimReporter simpleXmlClaimReporter4 = new org.apache.rat.report.claim.impl.xml.SimpleXmlClaimReporter((org.apache.rat.report.xml.writer.IXmlWriter) xmlWriter1);
        org.apache.rat.report.claim.impl.xml.SimpleXmlClaimReporter simpleXmlClaimReporter5 = new org.apache.rat.report.claim.impl.xml.SimpleXmlClaimReporter((org.apache.rat.report.xml.writer.IXmlWriter) xmlWriter1);
        org.apache.rat.report.claim.impl.xml.SimpleXmlClaimReporter simpleXmlClaimReporter6 = new org.apache.rat.report.claim.impl.xml.SimpleXmlClaimReporter((org.apache.rat.report.xml.writer.IXmlWriter) xmlWriter1);
        org.apache.rat.report.claim.impl.xml.SimpleXmlClaimReporter simpleXmlClaimReporter7 = new org.apache.rat.report.claim.impl.xml.SimpleXmlClaimReporter((org.apache.rat.report.xml.writer.IXmlWriter) xmlWriter1);
        org.apache.rat.report.claim.impl.xml.SimpleXmlClaimReporter simpleXmlClaimReporter8 = new org.apache.rat.report.claim.impl.xml.SimpleXmlClaimReporter((org.apache.rat.report.xml.writer.IXmlWriter) xmlWriter1);
        org.apache.rat.report.claim.impl.xml.SimpleXmlClaimReporter simpleXmlClaimReporter9 = new org.apache.rat.report.claim.impl.xml.SimpleXmlClaimReporter((org.apache.rat.report.xml.writer.IXmlWriter) xmlWriter1);
        org.apache.rat.report.claim.impl.xml.SimpleXmlClaimReporter simpleXmlClaimReporter10 = new org.apache.rat.report.claim.impl.xml.SimpleXmlClaimReporter((org.apache.rat.report.xml.writer.IXmlWriter) xmlWriter1);
        // The following exception was thrown during execution in test generation
        try {
            org.apache.rat.report.xml.writer.IXmlWriter iXmlWriter13 = xmlWriter1.attribute((java.lang.CharSequence) "Copyright Builder: s:null e:ef75a6e8-7197-4e9e-83bf-f8b367e6b3c5 o:null", (java.lang.CharSequence) "fa18f31b-9be2-44d6-b5f4-146ebd73ca12");
            org.junit.Assert.fail("Expected exception of type org.apache.rat.report.xml.writer.OperationNotAllowedException; message: Close called before an element has been opened.");
        } catch (org.apache.rat.report.xml.writer.OperationNotAllowedException e) {
            // Expected exception.
        }
    }

    @Test
    public void test12524() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest25.test12524");
        boolean boolean1 = org.apache.rat.document.impl.guesser.BinaryGuesser.isKeystore("fef8ca38-d006-48b8-9221-22b2d87fc230");
        org.junit.Assert.assertTrue("'" + boolean1 + "' != '" + false + "'", boolean1 == false);
    }

    @Test
    public void test12525() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest25.test12525");
        org.apache.rat.analysis.matchers.SPDXMatcherFactory sPDXMatcherFactory0 = org.apache.rat.analysis.matchers.SPDXMatcherFactory.INSTANCE;
        org.apache.rat.analysis.IHeaderMatcher iHeaderMatcher2 = sPDXMatcherFactory0.create("http://org/apache/rat/meta-data");
        org.apache.rat.analysis.matchers.NotMatcher notMatcher3 = new org.apache.rat.analysis.matchers.NotMatcher(iHeaderMatcher2);
        org.apache.rat.analysis.matchers.NotMatcher notMatcher4 = new org.apache.rat.analysis.matchers.NotMatcher((org.apache.rat.analysis.IHeaderMatcher) notMatcher3);
        org.apache.rat.analysis.IHeaderMatcher.State state5 = notMatcher3.finalizeState();
        notMatcher3.reset();
        notMatcher3.reset();
        notMatcher3.reset();
        org.apache.rat.analysis.IHeaderMatcher.State state9 = notMatcher3.currentState();
        java.lang.String str10 = notMatcher3.toString();
        org.junit.Assert.assertNotNull(sPDXMatcherFactory0);
        org.junit.Assert.assertNotNull(iHeaderMatcher2);
        org.junit.Assert.assertTrue("'" + state5 + "' != '" + org.apache.rat.analysis.IHeaderMatcher.State.t + "'", state5.equals(org.apache.rat.analysis.IHeaderMatcher.State.t));
        org.junit.Assert.assertTrue("'" + state9 + "' != '" + org.apache.rat.analysis.IHeaderMatcher.State.i + "'", state9.equals(org.apache.rat.analysis.IHeaderMatcher.State.i));
// flaky:         org.junit.Assert.assertEquals("'" + str10 + "' != '" + "c19f2144-2bff-45d8-ba8c-5cba5dca7db6" + "'", str10, "c19f2144-2bff-45d8-ba8c-5cba5dca7db6");
    }

    @Test
    public void test12526() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest25.test12526");
        java.lang.String[] strArray5 = new java.lang.String[] { "http://org/apache/rat/meta-data#LicenseFamilyCategory", "Datum [ name ='http://org/apache/rat/meta-data#LicenseFamilyCategory',value ='GPL1  ']", "MANIFEST.MF", "AllBuilder:", "The MIT License" };
        org.apache.rat.utils.ReportingSet<java.lang.String> strSet6 = new org.apache.rat.utils.ReportingSet<java.lang.String>();
        boolean boolean7 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strSet6, strArray5);
        boolean boolean9 = strSet6.addIfNotPresent("http://org/apache/rat/meta-data#LicenseFamilyName");
        java.util.Iterator<java.lang.String> strItor10 = strSet6.iterator();
        java.lang.Object[] objArray11 = strSet6.toArray();
        java.lang.String[] strArray17 = new java.lang.String[] { "http://org/apache/rat/meta-data#LicenseFamilyCategory", "Datum [ name ='http://org/apache/rat/meta-data#LicenseFamilyCategory',value ='GPL1  ']", "MANIFEST.MF", "AllBuilder:", "The MIT License" };
        org.apache.rat.utils.ReportingSet<java.lang.String> strSet18 = new org.apache.rat.utils.ReportingSet<java.lang.String>();
        boolean boolean19 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strSet18, strArray17);
        boolean boolean21 = strSet18.addIfNotPresent("http://org/apache/rat/meta-data#LicenseFamilyName");
        java.util.SortedSet<org.apache.rat.license.ILicenseFamily> iLicenseFamilySet22 = org.apache.rat.license.LicenseFamilySetFactory.emptyLicenseFamilySet();
        boolean boolean23 = strSet18.removeAll((java.util.Collection<org.apache.rat.license.ILicenseFamily>) iLicenseFamilySet22);
        boolean boolean24 = strSet6.containsAll((java.util.Collection<org.apache.rat.license.ILicenseFamily>) iLicenseFamilySet22);
        java.util.Spliterator<java.lang.String> strSpliterator25 = strSet6.spliterator();
        org.apache.rat.utils.DefaultLog defaultLog26 = org.apache.rat.utils.DefaultLog.INSTANCE;
        org.apache.rat.utils.Log log27 = null;
        org.apache.rat.ReportConfiguration reportConfiguration28 = new org.apache.rat.ReportConfiguration(log27);
        reportConfiguration28.addApprovedLicenseCategory(".cvsignore");
        org.apache.rat.utils.Log.Level level31 = org.apache.rat.utils.Log.Level.ERROR;
        reportConfiguration28.logFamilyCollisions(level31);
        defaultLog26.setLevel(level31);
        org.apache.rat.utils.Log log34 = null;
        org.apache.rat.ReportConfiguration reportConfiguration35 = new org.apache.rat.ReportConfiguration(log34);
        java.io.FilenameFilter filenameFilter36 = reportConfiguration35.getInputFileFilter();
        org.apache.rat.license.LicenseSetFactory.LicenseFilter licenseFilter37 = org.apache.rat.license.LicenseSetFactory.LicenseFilter.all;
        java.util.SortedSet<org.apache.rat.license.ILicense> iLicenseSet38 = reportConfiguration35.getLicenses(licenseFilter37);
        org.apache.rat.config.AddLicenseHeaders addLicenseHeaders39 = org.apache.rat.config.AddLicenseHeaders.FALSE;
        reportConfiguration35.setAddLicenseHeaders(addLicenseHeaders39);
        org.apache.rat.utils.Log log41 = null;
        org.apache.rat.ReportConfiguration reportConfiguration42 = new org.apache.rat.ReportConfiguration(log41);
        org.apache.rat.report.claim.ClaimStatistic claimStatistic43 = org.apache.rat.Reporter.report(reportConfiguration42);
        org.apache.rat.license.LicenseSetFactory.LicenseFilter licenseFilter44 = org.apache.rat.license.LicenseSetFactory.LicenseFilter.all;
        org.apache.rat.Reporter.listLicenses(reportConfiguration42, licenseFilter44);
        org.apache.rat.Reporter.listLicenses(reportConfiguration35, licenseFilter44);
        org.apache.rat.utils.Log log47 = null;
        org.apache.rat.ReportConfiguration reportConfiguration48 = new org.apache.rat.ReportConfiguration(log47);
        java.io.FilenameFilter filenameFilter49 = reportConfiguration48.getInputFileFilter();
        org.apache.rat.license.LicenseSetFactory.LicenseFilter licenseFilter50 = org.apache.rat.license.LicenseSetFactory.LicenseFilter.all;
        java.util.SortedSet<org.apache.rat.license.ILicense> iLicenseSet51 = reportConfiguration48.getLicenses(licenseFilter50);
        org.apache.rat.config.AddLicenseHeaders addLicenseHeaders52 = org.apache.rat.config.AddLicenseHeaders.FALSE;
        reportConfiguration48.setAddLicenseHeaders(addLicenseHeaders52);
        org.apache.rat.utils.Log log54 = null;
        org.apache.rat.ReportConfiguration reportConfiguration55 = new org.apache.rat.ReportConfiguration(log54);
        org.apache.rat.report.claim.ClaimStatistic claimStatistic56 = org.apache.rat.Reporter.report(reportConfiguration55);
        org.apache.rat.license.LicenseSetFactory.LicenseFilter licenseFilter57 = org.apache.rat.license.LicenseSetFactory.LicenseFilter.all;
        org.apache.rat.Reporter.listLicenses(reportConfiguration55, licenseFilter57);
        org.apache.rat.Reporter.listLicenses(reportConfiguration48, licenseFilter57);
        org.apache.rat.Reporter.listLicenses(reportConfiguration35, licenseFilter57);
        org.apache.rat.utils.Log log61 = null;
        org.apache.rat.ReportConfiguration reportConfiguration62 = new org.apache.rat.ReportConfiguration(log61);
        org.apache.commons.io.function.IOSupplier<java.io.OutputStream> outputStreamIOSupplier63 = reportConfiguration62.getOutput();
        reportConfiguration35.setOut(outputStreamIOSupplier63);
        org.apache.rat.utils.Log log65 = null;
        org.apache.rat.ReportConfiguration reportConfiguration66 = new org.apache.rat.ReportConfiguration(log65);
        org.apache.rat.report.claim.ClaimStatistic claimStatistic67 = org.apache.rat.Reporter.report(reportConfiguration66);
        org.apache.rat.utils.Log log68 = null;
        org.apache.rat.ReportConfiguration reportConfiguration69 = new org.apache.rat.ReportConfiguration(log68);
        org.apache.rat.report.claim.ClaimStatistic claimStatistic70 = org.apache.rat.Reporter.report(reportConfiguration69);
        org.apache.rat.utils.ReportingSet.Options options71 = org.apache.rat.utils.ReportingSet.Options.OVERWRITE;
        reportConfiguration69.licenseDuplicateOption(options71);
        reportConfiguration66.familyDuplicateOption(options71);
        reportConfiguration35.licenseDuplicateOption(options71);
        reportConfiguration35.addApprovedLicenseCategory("W3C Document Copyright");
        org.apache.rat.utils.Log log77 = null;
        org.apache.rat.ReportConfiguration reportConfiguration78 = new org.apache.rat.ReportConfiguration(log77);
        reportConfiguration78.addApprovedLicenseCategory(".cvsignore");
        org.apache.rat.utils.Log.Level level81 = org.apache.rat.utils.Log.Level.ERROR;
        reportConfiguration78.logLicenseCollisions(level81);
        reportConfiguration35.logLicenseCollisions(level81);
        defaultLog26.log(level81, "GNU General Public License, version 1");
        org.apache.rat.utils.ReportingSet<java.lang.String> strSet86 = strSet6.setLog((org.apache.rat.utils.Log) defaultLog26);
        int int87 = strSet6.size();
        java.util.SortedSet<org.apache.rat.license.ILicenseFamily> iLicenseFamilySet89 = org.apache.rat.license.LicenseFamilySetFactory.emptyLicenseFamilySet();
        org.apache.rat.license.ILicenseFamily iLicenseFamily90 = org.apache.rat.license.LicenseFamilySetFactory.search("http://org/apache/rat/meta-data", iLicenseFamilySet89);
        org.apache.rat.policy.DefaultPolicy defaultPolicy91 = new org.apache.rat.policy.DefaultPolicy((java.util.Collection<org.apache.rat.license.ILicenseFamily>) iLicenseFamilySet89);
        boolean boolean92 = strSet6.retainAll((java.util.Collection<org.apache.rat.license.ILicenseFamily>) iLicenseFamilySet89);
        java.util.Spliterator<java.lang.String> strSpliterator93 = strSet6.spliterator();
        org.junit.Assert.assertNotNull(strArray5);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + true + "'", boolean7 == true);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + true + "'", boolean9 == true);
        org.junit.Assert.assertNotNull(strItor10);
        org.junit.Assert.assertNotNull(objArray11);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray11), "[AllBuilder:, Datum [ name ='http://org/apache/rat/meta-data#LicenseFamilyCategory',value ='GPL1  '], MANIFEST.MF, The MIT License, http://org/apache/rat/meta-data#LicenseFamilyCategory, http://org/apache/rat/meta-data#LicenseFamilyName]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray11), "[AllBuilder:, Datum [ name ='http://org/apache/rat/meta-data#LicenseFamilyCategory',value ='GPL1  '], MANIFEST.MF, The MIT License, http://org/apache/rat/meta-data#LicenseFamilyCategory, http://org/apache/rat/meta-data#LicenseFamilyName]");
        org.junit.Assert.assertNotNull(strArray17);
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + true + "'", boolean19 == true);
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + true + "'", boolean21 == true);
        org.junit.Assert.assertNotNull(iLicenseFamilySet22);
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + false + "'", boolean23 == false);
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + true + "'", boolean24 == true);
        org.junit.Assert.assertNotNull(strSpliterator25);
        org.junit.Assert.assertNotNull(defaultLog26);
        org.junit.Assert.assertTrue("'" + level31 + "' != '" + org.apache.rat.utils.Log.Level.ERROR + "'", level31.equals(org.apache.rat.utils.Log.Level.ERROR));
        org.junit.Assert.assertNull(filenameFilter36);
        org.junit.Assert.assertTrue("'" + licenseFilter37 + "' != '" + org.apache.rat.license.LicenseSetFactory.LicenseFilter.all + "'", licenseFilter37.equals(org.apache.rat.license.LicenseSetFactory.LicenseFilter.all));
        org.junit.Assert.assertNotNull(iLicenseSet38);
        org.junit.Assert.assertTrue("'" + addLicenseHeaders39 + "' != '" + org.apache.rat.config.AddLicenseHeaders.FALSE + "'", addLicenseHeaders39.equals(org.apache.rat.config.AddLicenseHeaders.FALSE));
        org.junit.Assert.assertNull(claimStatistic43);
        org.junit.Assert.assertTrue("'" + licenseFilter44 + "' != '" + org.apache.rat.license.LicenseSetFactory.LicenseFilter.all + "'", licenseFilter44.equals(org.apache.rat.license.LicenseSetFactory.LicenseFilter.all));
        org.junit.Assert.assertNull(filenameFilter49);
        org.junit.Assert.assertTrue("'" + licenseFilter50 + "' != '" + org.apache.rat.license.LicenseSetFactory.LicenseFilter.all + "'", licenseFilter50.equals(org.apache.rat.license.LicenseSetFactory.LicenseFilter.all));
        org.junit.Assert.assertNotNull(iLicenseSet51);
        org.junit.Assert.assertTrue("'" + addLicenseHeaders52 + "' != '" + org.apache.rat.config.AddLicenseHeaders.FALSE + "'", addLicenseHeaders52.equals(org.apache.rat.config.AddLicenseHeaders.FALSE));
        org.junit.Assert.assertNull(claimStatistic56);
        org.junit.Assert.assertTrue("'" + licenseFilter57 + "' != '" + org.apache.rat.license.LicenseSetFactory.LicenseFilter.all + "'", licenseFilter57.equals(org.apache.rat.license.LicenseSetFactory.LicenseFilter.all));
        org.junit.Assert.assertNotNull(outputStreamIOSupplier63);
        org.junit.Assert.assertNull(claimStatistic67);
        org.junit.Assert.assertNull(claimStatistic70);
        org.junit.Assert.assertTrue("'" + options71 + "' != '" + org.apache.rat.utils.ReportingSet.Options.OVERWRITE + "'", options71.equals(org.apache.rat.utils.ReportingSet.Options.OVERWRITE));
        org.junit.Assert.assertTrue("'" + level81 + "' != '" + org.apache.rat.utils.Log.Level.ERROR + "'", level81.equals(org.apache.rat.utils.Log.Level.ERROR));
        org.junit.Assert.assertNotNull(strSet86);
        org.junit.Assert.assertTrue("'" + int87 + "' != '" + 6 + "'", int87 == 6);
        org.junit.Assert.assertNotNull(iLicenseFamilySet89);
        org.junit.Assert.assertNull(iLicenseFamily90);
        org.junit.Assert.assertTrue("'" + boolean92 + "' != '" + true + "'", boolean92 == true);
        org.junit.Assert.assertNotNull(strSpliterator93);
    }

    @Test
    public void test12527() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest25.test12527");
        org.apache.rat.utils.Log log0 = null;
        org.apache.rat.ReportConfiguration reportConfiguration1 = new org.apache.rat.ReportConfiguration(log0);
        reportConfiguration1.addApprovedLicenseCategory(".cvsignore");
        org.apache.rat.utils.Log.Level level4 = org.apache.rat.utils.Log.Level.ERROR;
        reportConfiguration1.logFamilyCollisions(level4);
        org.apache.commons.io.function.IOSupplier<java.io.OutputStream> outputStreamIOSupplier6 = reportConfiguration1.getOutput();
        org.apache.rat.utils.Log log7 = null;
        org.apache.rat.ReportConfiguration reportConfiguration8 = new org.apache.rat.ReportConfiguration(log7);
        reportConfiguration8.addApprovedLicenseCategory(".cvsignore");
        org.apache.rat.utils.Log log11 = null;
        org.apache.rat.ReportConfiguration reportConfiguration12 = new org.apache.rat.ReportConfiguration(log11);
        java.io.FilenameFilter filenameFilter13 = reportConfiguration12.getInputFileFilter();
        org.apache.rat.license.LicenseSetFactory.LicenseFilter licenseFilter14 = org.apache.rat.license.LicenseSetFactory.LicenseFilter.all;
        java.util.SortedSet<org.apache.rat.license.ILicense> iLicenseSet15 = reportConfiguration12.getLicenses(licenseFilter14);
        reportConfiguration8.addLicensesIfNotPresent((java.util.Collection<org.apache.rat.license.ILicense>) iLicenseSet15);
        java.io.FilenameFilter filenameFilter17 = reportConfiguration8.getInputFileFilter();
        org.apache.rat.utils.Log log18 = null;
        org.apache.rat.ReportConfiguration reportConfiguration19 = new org.apache.rat.ReportConfiguration(log18);
        java.io.FilenameFilter filenameFilter20 = reportConfiguration19.getInputFileFilter();
        org.apache.rat.license.LicenseSetFactory.LicenseFilter licenseFilter21 = org.apache.rat.license.LicenseSetFactory.LicenseFilter.all;
        java.util.SortedSet<org.apache.rat.license.ILicense> iLicenseSet22 = reportConfiguration19.getLicenses(licenseFilter21);
        org.apache.rat.config.AddLicenseHeaders addLicenseHeaders23 = org.apache.rat.config.AddLicenseHeaders.FALSE;
        reportConfiguration19.setAddLicenseHeaders(addLicenseHeaders23);
        org.apache.rat.utils.Log log25 = null;
        org.apache.rat.ReportConfiguration reportConfiguration26 = new org.apache.rat.ReportConfiguration(log25);
        org.apache.rat.report.claim.ClaimStatistic claimStatistic27 = org.apache.rat.Reporter.report(reportConfiguration26);
        org.apache.rat.license.LicenseSetFactory.LicenseFilter licenseFilter28 = org.apache.rat.license.LicenseSetFactory.LicenseFilter.all;
        org.apache.rat.Reporter.listLicenses(reportConfiguration26, licenseFilter28);
        org.apache.rat.Reporter.listLicenses(reportConfiguration19, licenseFilter28);
        org.apache.rat.utils.Log log31 = null;
        org.apache.rat.ReportConfiguration reportConfiguration32 = new org.apache.rat.ReportConfiguration(log31);
        java.io.FilenameFilter filenameFilter33 = reportConfiguration32.getInputFileFilter();
        org.apache.rat.license.LicenseSetFactory.LicenseFilter licenseFilter34 = org.apache.rat.license.LicenseSetFactory.LicenseFilter.all;
        java.util.SortedSet<org.apache.rat.license.ILicense> iLicenseSet35 = reportConfiguration32.getLicenses(licenseFilter34);
        org.apache.rat.config.AddLicenseHeaders addLicenseHeaders36 = org.apache.rat.config.AddLicenseHeaders.FALSE;
        reportConfiguration32.setAddLicenseHeaders(addLicenseHeaders36);
        org.apache.rat.utils.Log log38 = null;
        org.apache.rat.ReportConfiguration reportConfiguration39 = new org.apache.rat.ReportConfiguration(log38);
        org.apache.rat.report.claim.ClaimStatistic claimStatistic40 = org.apache.rat.Reporter.report(reportConfiguration39);
        org.apache.rat.license.LicenseSetFactory.LicenseFilter licenseFilter41 = org.apache.rat.license.LicenseSetFactory.LicenseFilter.all;
        org.apache.rat.Reporter.listLicenses(reportConfiguration39, licenseFilter41);
        org.apache.rat.Reporter.listLicenses(reportConfiguration32, licenseFilter41);
        java.util.SortedSet<org.apache.rat.license.ILicenseFamily> iLicenseFamilySet44 = reportConfiguration19.getLicenseFamilies(licenseFilter41);
        org.apache.rat.Reporter.listLicenseFamilies(reportConfiguration8, licenseFilter41);
        java.util.SortedSet<org.apache.rat.license.ILicenseFamily> iLicenseFamilySet46 = reportConfiguration1.getLicenseFamilies(licenseFilter41);
        java.util.Collection<java.lang.String> strCollection47 = null;
        org.apache.rat.license.LicenseFamilySetFactory licenseFamilySetFactory48 = new org.apache.rat.license.LicenseFamilySetFactory(iLicenseFamilySet46, strCollection47);
        org.apache.rat.utils.Log log49 = null;
        org.apache.rat.ReportConfiguration reportConfiguration50 = new org.apache.rat.ReportConfiguration(log49);
        reportConfiguration50.addApprovedLicenseCategory(".cvsignore");
        reportConfiguration50.removeApprovedLicenseCategory("COMMON DEVELOPMENT AND DISTRIBUTION LICENSE Version 1.0");
        org.apache.commons.io.function.IOSupplier<java.io.OutputStream> outputStreamIOSupplier55 = reportConfiguration50.getOutput();
        org.apache.commons.io.function.IOSupplier<java.io.OutputStream> outputStreamIOSupplier56 = reportConfiguration50.getOutput();
        org.apache.rat.license.ILicense[] iLicenseArray57 = new org.apache.rat.license.ILicense[] {};
        java.util.TreeSet<org.apache.rat.license.ILicense> iLicenseSet58 = new java.util.TreeSet<org.apache.rat.license.ILicense>();
        boolean boolean59 = java.util.Collections.addAll((java.util.Collection<org.apache.rat.license.ILicense>) iLicenseSet58, iLicenseArray57);
        java.lang.String[] strArray72 = new java.lang.String[] { "GPL2 ", "GPL1 ", "notice", "http://org/apache/rat/meta-data#LicenseFamilyName", "notice", "GPL2 ", "http://org/apache/rat/meta-data#LicenseFamilyName", "", "GPL2 ", "", "GPL1 ", "hi!" };
        java.util.ArrayList<java.lang.String> strList73 = new java.util.ArrayList<java.lang.String>();
        boolean boolean74 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strList73, strArray72);
        org.apache.rat.license.LicenseSetFactory licenseSetFactory75 = new org.apache.rat.license.LicenseSetFactory((java.util.SortedSet<org.apache.rat.license.ILicense>) iLicenseSet58, (java.util.Collection<java.lang.String>) strList73);
        org.apache.rat.license.LicenseSetFactory.LicenseFilter licenseFilter76 = org.apache.rat.license.LicenseSetFactory.LicenseFilter.none;
        java.util.SortedSet<java.lang.String> strSet77 = licenseSetFactory75.getLicenseFamilyIds(licenseFilter76);
        org.apache.rat.Reporter.listLicenses(reportConfiguration50, licenseFilter76);
        java.util.SortedSet<java.lang.String> strSet79 = licenseFamilySetFactory48.getFamilyIds(licenseFilter76);
        org.junit.Assert.assertTrue("'" + level4 + "' != '" + org.apache.rat.utils.Log.Level.ERROR + "'", level4.equals(org.apache.rat.utils.Log.Level.ERROR));
        org.junit.Assert.assertNotNull(outputStreamIOSupplier6);
        org.junit.Assert.assertNull(filenameFilter13);
        org.junit.Assert.assertTrue("'" + licenseFilter14 + "' != '" + org.apache.rat.license.LicenseSetFactory.LicenseFilter.all + "'", licenseFilter14.equals(org.apache.rat.license.LicenseSetFactory.LicenseFilter.all));
        org.junit.Assert.assertNotNull(iLicenseSet15);
        org.junit.Assert.assertNull(filenameFilter17);
        org.junit.Assert.assertNull(filenameFilter20);
        org.junit.Assert.assertTrue("'" + licenseFilter21 + "' != '" + org.apache.rat.license.LicenseSetFactory.LicenseFilter.all + "'", licenseFilter21.equals(org.apache.rat.license.LicenseSetFactory.LicenseFilter.all));
        org.junit.Assert.assertNotNull(iLicenseSet22);
        org.junit.Assert.assertTrue("'" + addLicenseHeaders23 + "' != '" + org.apache.rat.config.AddLicenseHeaders.FALSE + "'", addLicenseHeaders23.equals(org.apache.rat.config.AddLicenseHeaders.FALSE));
        org.junit.Assert.assertNull(claimStatistic27);
        org.junit.Assert.assertTrue("'" + licenseFilter28 + "' != '" + org.apache.rat.license.LicenseSetFactory.LicenseFilter.all + "'", licenseFilter28.equals(org.apache.rat.license.LicenseSetFactory.LicenseFilter.all));
        org.junit.Assert.assertNull(filenameFilter33);
        org.junit.Assert.assertTrue("'" + licenseFilter34 + "' != '" + org.apache.rat.license.LicenseSetFactory.LicenseFilter.all + "'", licenseFilter34.equals(org.apache.rat.license.LicenseSetFactory.LicenseFilter.all));
        org.junit.Assert.assertNotNull(iLicenseSet35);
        org.junit.Assert.assertTrue("'" + addLicenseHeaders36 + "' != '" + org.apache.rat.config.AddLicenseHeaders.FALSE + "'", addLicenseHeaders36.equals(org.apache.rat.config.AddLicenseHeaders.FALSE));
        org.junit.Assert.assertNull(claimStatistic40);
        org.junit.Assert.assertTrue("'" + licenseFilter41 + "' != '" + org.apache.rat.license.LicenseSetFactory.LicenseFilter.all + "'", licenseFilter41.equals(org.apache.rat.license.LicenseSetFactory.LicenseFilter.all));
        org.junit.Assert.assertNotNull(iLicenseFamilySet44);
        org.junit.Assert.assertNotNull(iLicenseFamilySet46);
        org.junit.Assert.assertNotNull(outputStreamIOSupplier55);
        org.junit.Assert.assertNotNull(outputStreamIOSupplier56);
        org.junit.Assert.assertNotNull(iLicenseArray57);
        org.junit.Assert.assertTrue("'" + boolean59 + "' != '" + false + "'", boolean59 == false);
        org.junit.Assert.assertNotNull(strArray72);
        org.junit.Assert.assertTrue("'" + boolean74 + "' != '" + true + "'", boolean74 == true);
        org.junit.Assert.assertTrue("'" + licenseFilter76 + "' != '" + org.apache.rat.license.LicenseSetFactory.LicenseFilter.none + "'", licenseFilter76.equals(org.apache.rat.license.LicenseSetFactory.LicenseFilter.none));
        org.junit.Assert.assertNotNull(strSet77);
        org.junit.Assert.assertNotNull(strSet79);
    }

    @Test
    public void test12528() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest25.test12528");
        org.apache.rat.report.claim.ClaimStatistic claimStatistic0 = new org.apache.rat.report.claim.ClaimStatistic();
        claimStatistic0.setNumApproved((int) (short) 10);
        java.util.Map<java.lang.String, java.lang.Integer> strMap3 = null;
        claimStatistic0.setDocumentCategoryMap(strMap3);
        java.util.Map<java.lang.String, java.lang.Integer> strMap5 = claimStatistic0.getLicenseFileNameMap();
        java.util.Map<java.lang.String, java.lang.Integer> strMap6 = null;
        claimStatistic0.setDocumentCategoryMap(strMap6);
        int int8 = claimStatistic0.getNumUnknown();
        claimStatistic0.setNumUnApproved(97);
        org.junit.Assert.assertNull(strMap5);
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + 0 + "'", int8 == 0);
    }

    @Test
    public void test12529() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest25.test12529");
        boolean boolean1 = org.apache.rat.document.impl.guesser.BinaryGuesser.isExecutable("6af2ab59-ecdd-4c14-88e0-45a98274d528");
        org.junit.Assert.assertTrue("'" + boolean1 + "' != '" + false + "'", boolean1 == false);
    }

    @Test
    public void test12530() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest25.test12530");
        org.apache.rat.license.ILicenseFamilyBuilder iLicenseFamilyBuilder0 = new org.apache.rat.license.ILicenseFamilyBuilder();
        java.lang.String str1 = iLicenseFamilyBuilder0.getCategory();
        org.apache.rat.license.ILicenseFamily.Builder builder3 = iLicenseFamilyBuilder0.setLicenseFamilyCategory("AL   ");
        java.lang.String str4 = iLicenseFamilyBuilder0.getCategory();
        java.lang.String str5 = iLicenseFamilyBuilder0.getCategory();
        org.apache.rat.license.ILicenseFamily.Builder builder7 = iLicenseFamilyBuilder0.setLicenseFamilyName("httporgapacheratmetadataLicenseFamilyName");
        org.apache.rat.license.ILicenseFamily iLicenseFamily8 = iLicenseFamilyBuilder0.build();
        org.apache.rat.license.ILicenseFamily iLicenseFamily9 = iLicenseFamilyBuilder0.build();
        org.junit.Assert.assertNull(str1);
        org.junit.Assert.assertNotNull(builder3);
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "AL   " + "'", str4, "AL   ");
        org.junit.Assert.assertEquals("'" + str5 + "' != '" + "AL   " + "'", str5, "AL   ");
        org.junit.Assert.assertNotNull(builder7);
        org.junit.Assert.assertNotNull(iLicenseFamily8);
        org.junit.Assert.assertNotNull(iLicenseFamily9);
    }

    @Test
    public void test12531() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest25.test12531");
        org.apache.rat.analysis.matchers.CopyrightMatcher copyrightMatcher4 = new org.apache.rat.analysis.matchers.CopyrightMatcher("null http://org/apache/rat/meta-data#LicenseFamilyName", "Copyright Builder: s:.cvsignore e:null o:4af66b98-9684-4b39-a5b5-a1147c648113", "MathcerRefBuilder: AllBuilder:", "688df92f-f2ac-4527-846e-6d6bf8643eb7");
        org.apache.rat.analysis.IHeaderMatcher.State state6 = copyrightMatcher4.matches("804cbd55-d8ca-4b15-b3a8-d94b4c47af38");
        org.junit.Assert.assertTrue("'" + state6 + "' != '" + org.apache.rat.analysis.IHeaderMatcher.State.i + "'", state6.equals(org.apache.rat.analysis.IHeaderMatcher.State.i));
    }

    @Test
    public void test12532() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest25.test12532");
        org.apache.rat.config.SourceCodeManagementSystems sourceCodeManagementSystems0 = org.apache.rat.config.SourceCodeManagementSystems.CVS;
        java.util.List<java.lang.String> strList1 = sourceCodeManagementSystems0.getExclusions();
        boolean boolean2 = sourceCodeManagementSystems0.hasIgnoreFile();
        boolean boolean3 = sourceCodeManagementSystems0.hasIgnoreFile();
        boolean boolean4 = sourceCodeManagementSystems0.hasIgnoreFile();
        org.junit.Assert.assertTrue("'" + sourceCodeManagementSystems0 + "' != '" + org.apache.rat.config.SourceCodeManagementSystems.CVS + "'", sourceCodeManagementSystems0.equals(org.apache.rat.config.SourceCodeManagementSystems.CVS));
        org.junit.Assert.assertNotNull(strList1);
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + true + "'", boolean2 == true);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + true + "'", boolean3 == true);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + true + "'", boolean4 == true);
    }

    @Test
    public void test12533() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest25.test12533");
        org.apache.rat.utils.Log log0 = null;
        org.apache.rat.ReportConfiguration reportConfiguration1 = new org.apache.rat.ReportConfiguration(log0);
        org.apache.rat.license.ILicenseFamily[] iLicenseFamilyArray2 = new org.apache.rat.license.ILicenseFamily[] {};
        java.util.ArrayList<org.apache.rat.license.ILicenseFamily> iLicenseFamilyList3 = new java.util.ArrayList<org.apache.rat.license.ILicenseFamily>();
        boolean boolean4 = java.util.Collections.addAll((java.util.Collection<org.apache.rat.license.ILicenseFamily>) iLicenseFamilyList3, iLicenseFamilyArray2);
        reportConfiguration1.addFamilies((java.util.Collection<org.apache.rat.license.ILicenseFamily>) iLicenseFamilyList3);
        org.apache.rat.report.IReportable iReportable6 = null;
        reportConfiguration1.setReportable(iReportable6);
        org.apache.rat.report.claim.ClaimStatistic claimStatistic8 = org.apache.rat.Reporter.report(reportConfiguration1);
        boolean boolean9 = reportConfiguration1.isAddingLicenses();
        org.apache.rat.api.MetaData metaData10 = new org.apache.rat.api.MetaData();
        java.lang.String str12 = metaData10.value("COMMON DEVELOPMENT AND DISTRIBUTION LICENSE Version 1.0");
        java.util.Collection<org.apache.rat.api.MetaData.Datum> datumCollection13 = metaData10.getData();
        java.lang.String str15 = metaData10.value("hi!");
        metaData10.clear();
        boolean boolean18 = metaData10.clear("7E27CD62-4403-40AB-A9F5-16E7C59AB2F1");
        java.lang.String str20 = metaData10.value("standard");
        java.util.Collection<org.apache.rat.api.MetaData.Datum> datumCollection21 = metaData10.getData();
        org.apache.rat.utils.Log log22 = null;
        org.apache.rat.ReportConfiguration reportConfiguration23 = new org.apache.rat.ReportConfiguration(log22);
        java.io.FilenameFilter filenameFilter24 = reportConfiguration23.getInputFileFilter();
        org.apache.rat.license.LicenseSetFactory.LicenseFilter licenseFilter25 = org.apache.rat.license.LicenseSetFactory.LicenseFilter.all;
        java.util.SortedSet<org.apache.rat.license.ILicense> iLicenseSet26 = reportConfiguration23.getLicenses(licenseFilter25);
        org.apache.rat.config.AddLicenseHeaders addLicenseHeaders27 = org.apache.rat.config.AddLicenseHeaders.FALSE;
        reportConfiguration23.setAddLicenseHeaders(addLicenseHeaders27);
        org.apache.rat.utils.Log log29 = null;
        org.apache.rat.ReportConfiguration reportConfiguration30 = new org.apache.rat.ReportConfiguration(log29);
        org.apache.rat.report.claim.ClaimStatistic claimStatistic31 = org.apache.rat.Reporter.report(reportConfiguration30);
        org.apache.rat.license.LicenseSetFactory.LicenseFilter licenseFilter32 = org.apache.rat.license.LicenseSetFactory.LicenseFilter.all;
        org.apache.rat.Reporter.listLicenses(reportConfiguration30, licenseFilter32);
        org.apache.rat.Reporter.listLicenses(reportConfiguration23, licenseFilter32);
        org.apache.rat.utils.Log log35 = null;
        org.apache.rat.ReportConfiguration reportConfiguration36 = new org.apache.rat.ReportConfiguration(log35);
        java.io.FilenameFilter filenameFilter37 = reportConfiguration36.getInputFileFilter();
        org.apache.rat.license.LicenseSetFactory.LicenseFilter licenseFilter38 = org.apache.rat.license.LicenseSetFactory.LicenseFilter.all;
        java.util.SortedSet<org.apache.rat.license.ILicense> iLicenseSet39 = reportConfiguration36.getLicenses(licenseFilter38);
        org.apache.rat.config.AddLicenseHeaders addLicenseHeaders40 = org.apache.rat.config.AddLicenseHeaders.FALSE;
        reportConfiguration36.setAddLicenseHeaders(addLicenseHeaders40);
        org.apache.rat.utils.Log log42 = null;
        org.apache.rat.ReportConfiguration reportConfiguration43 = new org.apache.rat.ReportConfiguration(log42);
        org.apache.rat.report.claim.ClaimStatistic claimStatistic44 = org.apache.rat.Reporter.report(reportConfiguration43);
        org.apache.rat.license.LicenseSetFactory.LicenseFilter licenseFilter45 = org.apache.rat.license.LicenseSetFactory.LicenseFilter.all;
        org.apache.rat.Reporter.listLicenses(reportConfiguration43, licenseFilter45);
        org.apache.rat.Reporter.listLicenses(reportConfiguration36, licenseFilter45);
        org.apache.rat.Reporter.listLicenses(reportConfiguration23, licenseFilter45);
        java.io.FilenameFilter filenameFilter49 = reportConfiguration23.getInputFileFilter();
        reportConfiguration23.setStyleReport(false);
        org.apache.rat.report.IReportable iReportable52 = null;
        reportConfiguration23.setReportable(iReportable52);
        org.apache.rat.Defaults.Builder builder55 = org.apache.rat.Defaults.builder();
        org.apache.rat.Defaults defaults56 = builder55.build();
        org.apache.rat.utils.Log log57 = null;
        org.apache.rat.ReportConfiguration reportConfiguration58 = new org.apache.rat.ReportConfiguration(log57);
        java.io.FilenameFilter filenameFilter59 = reportConfiguration58.getInputFileFilter();
        org.apache.rat.license.LicenseSetFactory.LicenseFilter licenseFilter60 = org.apache.rat.license.LicenseSetFactory.LicenseFilter.all;
        java.util.SortedSet<org.apache.rat.license.ILicense> iLicenseSet61 = reportConfiguration58.getLicenses(licenseFilter60);
        org.apache.rat.config.AddLicenseHeaders addLicenseHeaders62 = org.apache.rat.config.AddLicenseHeaders.FALSE;
        reportConfiguration58.setAddLicenseHeaders(addLicenseHeaders62);
        org.apache.rat.utils.Log log64 = null;
        org.apache.rat.ReportConfiguration reportConfiguration65 = new org.apache.rat.ReportConfiguration(log64);
        org.apache.rat.report.claim.ClaimStatistic claimStatistic66 = org.apache.rat.Reporter.report(reportConfiguration65);
        org.apache.rat.license.LicenseSetFactory.LicenseFilter licenseFilter67 = org.apache.rat.license.LicenseSetFactory.LicenseFilter.all;
        org.apache.rat.Reporter.listLicenses(reportConfiguration65, licenseFilter67);
        org.apache.rat.Reporter.listLicenses(reportConfiguration58, licenseFilter67);
        org.apache.rat.utils.Log log70 = null;
        org.apache.rat.ReportConfiguration reportConfiguration71 = new org.apache.rat.ReportConfiguration(log70);
        java.io.FilenameFilter filenameFilter72 = reportConfiguration71.getInputFileFilter();
        org.apache.rat.license.LicenseSetFactory.LicenseFilter licenseFilter73 = org.apache.rat.license.LicenseSetFactory.LicenseFilter.all;
        java.util.SortedSet<org.apache.rat.license.ILicense> iLicenseSet74 = reportConfiguration71.getLicenses(licenseFilter73);
        org.apache.rat.config.AddLicenseHeaders addLicenseHeaders75 = org.apache.rat.config.AddLicenseHeaders.FALSE;
        reportConfiguration71.setAddLicenseHeaders(addLicenseHeaders75);
        org.apache.rat.utils.Log log77 = null;
        org.apache.rat.ReportConfiguration reportConfiguration78 = new org.apache.rat.ReportConfiguration(log77);
        org.apache.rat.report.claim.ClaimStatistic claimStatistic79 = org.apache.rat.Reporter.report(reportConfiguration78);
        org.apache.rat.license.LicenseSetFactory.LicenseFilter licenseFilter80 = org.apache.rat.license.LicenseSetFactory.LicenseFilter.all;
        org.apache.rat.Reporter.listLicenses(reportConfiguration78, licenseFilter80);
        org.apache.rat.Reporter.listLicenses(reportConfiguration71, licenseFilter80);
        java.util.SortedSet<org.apache.rat.license.ILicenseFamily> iLicenseFamilySet83 = reportConfiguration58.getLicenseFamilies(licenseFilter80);
        java.util.SortedSet<org.apache.rat.license.ILicense> iLicenseSet84 = defaults56.getLicenses(licenseFilter80);
        org.apache.rat.utils.ReportingSet<org.apache.rat.license.ILicense> iLicenseSet85 = new org.apache.rat.utils.ReportingSet<org.apache.rat.license.ILicense>(iLicenseSet84);
        org.apache.rat.license.ILicense iLicense86 = org.apache.rat.license.LicenseSetFactory.search("TMF", iLicenseSet84);
        reportConfiguration23.addLicense(iLicense86);
        java.lang.String str88 = iLicense86.derivedFrom();
        org.apache.rat.license.ILicenseFamily iLicenseFamily89 = iLicense86.getLicenseFamily();
        org.apache.rat.license.ILicenseFamily iLicenseFamily90 = iLicense86.getLicenseFamily();
        java.lang.String str91 = iLicense86.getName();
        java.lang.String str92 = iLicense86.getNotes();
        java.lang.String str93 = iLicense86.getNotes();
        metaData10.reportOnLicense(iLicense86);
        reportConfiguration1.addLicense(iLicense86);
        org.apache.rat.license.ILicenseFamily iLicenseFamily96 = iLicense86.getLicenseFamily();
        java.lang.String str97 = iLicenseFamily96.getFamilyName();
        org.junit.Assert.assertNotNull(iLicenseFamilyArray2);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertNull(claimStatistic8);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertNull(str12);
        org.junit.Assert.assertNotNull(datumCollection13);
        org.junit.Assert.assertNull(str15);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + false + "'", boolean18 == false);
        org.junit.Assert.assertNull(str20);
        org.junit.Assert.assertNotNull(datumCollection21);
        org.junit.Assert.assertNull(filenameFilter24);
        org.junit.Assert.assertTrue("'" + licenseFilter25 + "' != '" + org.apache.rat.license.LicenseSetFactory.LicenseFilter.all + "'", licenseFilter25.equals(org.apache.rat.license.LicenseSetFactory.LicenseFilter.all));
        org.junit.Assert.assertNotNull(iLicenseSet26);
        org.junit.Assert.assertTrue("'" + addLicenseHeaders27 + "' != '" + org.apache.rat.config.AddLicenseHeaders.FALSE + "'", addLicenseHeaders27.equals(org.apache.rat.config.AddLicenseHeaders.FALSE));
        org.junit.Assert.assertNull(claimStatistic31);
        org.junit.Assert.assertTrue("'" + licenseFilter32 + "' != '" + org.apache.rat.license.LicenseSetFactory.LicenseFilter.all + "'", licenseFilter32.equals(org.apache.rat.license.LicenseSetFactory.LicenseFilter.all));
        org.junit.Assert.assertNull(filenameFilter37);
        org.junit.Assert.assertTrue("'" + licenseFilter38 + "' != '" + org.apache.rat.license.LicenseSetFactory.LicenseFilter.all + "'", licenseFilter38.equals(org.apache.rat.license.LicenseSetFactory.LicenseFilter.all));
        org.junit.Assert.assertNotNull(iLicenseSet39);
        org.junit.Assert.assertTrue("'" + addLicenseHeaders40 + "' != '" + org.apache.rat.config.AddLicenseHeaders.FALSE + "'", addLicenseHeaders40.equals(org.apache.rat.config.AddLicenseHeaders.FALSE));
        org.junit.Assert.assertNull(claimStatistic44);
        org.junit.Assert.assertTrue("'" + licenseFilter45 + "' != '" + org.apache.rat.license.LicenseSetFactory.LicenseFilter.all + "'", licenseFilter45.equals(org.apache.rat.license.LicenseSetFactory.LicenseFilter.all));
        org.junit.Assert.assertNull(filenameFilter49);
        org.junit.Assert.assertNotNull(builder55);
        org.junit.Assert.assertNotNull(defaults56);
        org.junit.Assert.assertNull(filenameFilter59);
        org.junit.Assert.assertTrue("'" + licenseFilter60 + "' != '" + org.apache.rat.license.LicenseSetFactory.LicenseFilter.all + "'", licenseFilter60.equals(org.apache.rat.license.LicenseSetFactory.LicenseFilter.all));
        org.junit.Assert.assertNotNull(iLicenseSet61);
        org.junit.Assert.assertTrue("'" + addLicenseHeaders62 + "' != '" + org.apache.rat.config.AddLicenseHeaders.FALSE + "'", addLicenseHeaders62.equals(org.apache.rat.config.AddLicenseHeaders.FALSE));
        org.junit.Assert.assertNull(claimStatistic66);
        org.junit.Assert.assertTrue("'" + licenseFilter67 + "' != '" + org.apache.rat.license.LicenseSetFactory.LicenseFilter.all + "'", licenseFilter67.equals(org.apache.rat.license.LicenseSetFactory.LicenseFilter.all));
        org.junit.Assert.assertNull(filenameFilter72);
        org.junit.Assert.assertTrue("'" + licenseFilter73 + "' != '" + org.apache.rat.license.LicenseSetFactory.LicenseFilter.all + "'", licenseFilter73.equals(org.apache.rat.license.LicenseSetFactory.LicenseFilter.all));
        org.junit.Assert.assertNotNull(iLicenseSet74);
        org.junit.Assert.assertTrue("'" + addLicenseHeaders75 + "' != '" + org.apache.rat.config.AddLicenseHeaders.FALSE + "'", addLicenseHeaders75.equals(org.apache.rat.config.AddLicenseHeaders.FALSE));
        org.junit.Assert.assertNull(claimStatistic79);
        org.junit.Assert.assertTrue("'" + licenseFilter80 + "' != '" + org.apache.rat.license.LicenseSetFactory.LicenseFilter.all + "'", licenseFilter80.equals(org.apache.rat.license.LicenseSetFactory.LicenseFilter.all));
        org.junit.Assert.assertNotNull(iLicenseFamilySet83);
        org.junit.Assert.assertNotNull(iLicenseSet84);
        org.junit.Assert.assertNotNull(iLicense86);
        org.junit.Assert.assertEquals("'" + str88 + "' != '" + "BSD-3" + "'", str88, "BSD-3");
        org.junit.Assert.assertNotNull(iLicenseFamily89);
        org.junit.Assert.assertNotNull(iLicenseFamily90);
        org.junit.Assert.assertEquals("'" + str91 + "' != '" + "The Telemanagement Forum License" + "'", str91, "The Telemanagement Forum License");
        org.junit.Assert.assertNull(str92);
        org.junit.Assert.assertNull(str93);
        org.junit.Assert.assertNotNull(iLicenseFamily96);
        org.junit.Assert.assertEquals("'" + str97 + "' != '" + "BSD 3 clause" + "'", str97, "BSD 3 clause");
    }

    @Test
    public void test12534() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest25.test12534");
        org.apache.rat.license.ILicenseFamilyBuilder iLicenseFamilyBuilder0 = new org.apache.rat.license.ILicenseFamilyBuilder();
        java.lang.String str1 = iLicenseFamilyBuilder0.getCategory();
        org.apache.rat.license.ILicenseFamily.Builder builder3 = iLicenseFamilyBuilder0.setLicenseFamilyCategory("AL   ");
        org.apache.rat.license.ILicenseFamily.Builder builder5 = iLicenseFamilyBuilder0.setLicenseFamilyName("binary");
        org.apache.rat.license.ILicenseFamily.Builder builder7 = iLicenseFamilyBuilder0.setLicenseFamilyCategory("3c74a3ec-8235-4035-9db7-f9f475b48681");
        java.lang.String str8 = iLicenseFamilyBuilder0.getCategory();
        org.apache.rat.license.ILicenseFamily.Builder builder10 = iLicenseFamilyBuilder0.setLicenseFamilyCategory("f02d0cdc36424583b71fdd84a120752c");
        org.apache.rat.license.ILicenseFamily.Builder builder12 = iLicenseFamilyBuilder0.setLicenseFamilyCategory("http://org/apache/rat/meta-data#FileCategory");
        java.lang.String str13 = builder12.getCategory();
        org.junit.Assert.assertNull(str1);
        org.junit.Assert.assertNotNull(builder3);
        org.junit.Assert.assertNotNull(builder5);
        org.junit.Assert.assertNotNull(builder7);
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "3c74a3ec-8235-4035-9db7-f9f475b48681" + "'", str8, "3c74a3ec-8235-4035-9db7-f9f475b48681");
        org.junit.Assert.assertNotNull(builder10);
        org.junit.Assert.assertNotNull(builder12);
        org.junit.Assert.assertEquals("'" + str13 + "' != '" + "http://org/apache/rat/meta-data#FileCategory" + "'", str13, "http://org/apache/rat/meta-data#FileCategory");
    }

    @Test
    public void test12535() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest25.test12535");
        org.apache.rat.Defaults.Builder builder0 = org.apache.rat.Defaults.builder();
        org.apache.rat.Defaults defaults1 = builder0.build();
        org.apache.rat.Defaults.Builder builder2 = builder0.noDefault();
        org.apache.rat.Defaults.Builder builder4 = builder0.remove("AllBuilder:");
        org.apache.rat.Defaults.Builder builder6 = builder0.remove("GNU General Public License, version 2");
        org.apache.rat.Defaults defaults7 = builder6.build();
        org.apache.rat.utils.DefaultLog defaultLog8 = org.apache.rat.utils.DefaultLog.INSTANCE;
        org.apache.rat.license.ILicense.Builder builder9 = org.apache.rat.license.ILicense.builder();
        org.apache.rat.license.ILicense.Builder builder11 = builder9.setLicenseFamilyCategory("");
        org.apache.rat.analysis.matchers.CopyrightMatcher copyrightMatcher15 = new org.apache.rat.analysis.matchers.CopyrightMatcher("", "GPL1 ", "hi!");
        org.apache.rat.analysis.IHeaderMatcher.State state16 = copyrightMatcher15.finalizeState();
        org.apache.rat.license.ILicense.Builder builder17 = builder11.setMatcher((org.apache.rat.analysis.IHeaderMatcher) copyrightMatcher15);
        org.apache.rat.license.ILicense.Builder builder19 = builder17.setLicenseFamilyCategory("");
        defaultLog8.error((java.lang.Object) builder19);
        org.apache.rat.utils.Log.Level level21 = org.apache.rat.utils.Log.Level.INFO;
        defaultLog8.log(level21, "JAVA");
        org.apache.rat.license.LicenseSetFactory.LicenseFilter licenseFilter24 = org.apache.rat.license.LicenseSetFactory.LicenseFilter.approved;
        defaultLog8.info((java.lang.Object) licenseFilter24);
        java.util.SortedSet<org.apache.rat.license.ILicenseFamily> iLicenseFamilySet26 = defaults7.getLicenseFamilies(licenseFilter24);
        org.apache.rat.policy.DefaultPolicy defaultPolicy27 = new org.apache.rat.policy.DefaultPolicy((java.util.Collection<org.apache.rat.license.ILicenseFamily>) iLicenseFamilySet26);
        org.junit.Assert.assertNotNull(builder0);
        org.junit.Assert.assertNotNull(defaults1);
        org.junit.Assert.assertNotNull(builder2);
        org.junit.Assert.assertNotNull(builder4);
        org.junit.Assert.assertNotNull(builder6);
        org.junit.Assert.assertNotNull(defaults7);
        org.junit.Assert.assertNotNull(defaultLog8);
        org.junit.Assert.assertNotNull(builder9);
        org.junit.Assert.assertNotNull(builder11);
        org.junit.Assert.assertTrue("'" + state16 + "' != '" + org.apache.rat.analysis.IHeaderMatcher.State.f + "'", state16.equals(org.apache.rat.analysis.IHeaderMatcher.State.f));
        org.junit.Assert.assertNotNull(builder17);
        org.junit.Assert.assertNotNull(builder19);
        org.junit.Assert.assertTrue("'" + level21 + "' != '" + org.apache.rat.utils.Log.Level.INFO + "'", level21.equals(org.apache.rat.utils.Log.Level.INFO));
        org.junit.Assert.assertTrue("'" + licenseFilter24 + "' != '" + org.apache.rat.license.LicenseSetFactory.LicenseFilter.approved + "'", licenseFilter24.equals(org.apache.rat.license.LicenseSetFactory.LicenseFilter.approved));
        org.junit.Assert.assertNotNull(iLicenseFamilySet26);
    }

    @Test
    public void test12536() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest25.test12536");
        org.apache.rat.configuration.builders.RegexBuilder regexBuilder0 = new org.apache.rat.configuration.builders.RegexBuilder();
        java.lang.String str1 = regexBuilder0.toString();
        java.lang.String str2 = regexBuilder0.toString();
        org.apache.rat.configuration.builders.RegexBuilder regexBuilder4 = regexBuilder0.setExpr("89662180-a89f-497b-9301-227d494d2bae");
        java.lang.String str5 = regexBuilder4.toString();
        org.apache.rat.configuration.builders.RegexBuilder regexBuilder7 = regexBuilder4.setExpr("6481fb19-38f0-43f5-ab95-caf84a069ee1");
        org.apache.rat.configuration.builders.RegexBuilder regexBuilder9 = regexBuilder4.setExpr("f02d0cdc-3642-4583-b71f-dd84a120752c");
        org.apache.rat.configuration.builders.RegexBuilder regexBuilder11 = regexBuilder9.setExpr("58515fd1-71f9-42a1-b033-b509624129a7");
        java.lang.String str12 = regexBuilder11.toString();
        org.apache.rat.configuration.builders.RegexBuilder regexBuilder14 = regexBuilder11.setExpr("07df4fad-71a5-4d35-bd9f-0c3cefff7a88");
        org.junit.Assert.assertEquals("'" + str1 + "' != '" + "RegexBuilder: null" + "'", str1, "RegexBuilder: null");
        org.junit.Assert.assertEquals("'" + str2 + "' != '" + "RegexBuilder: null" + "'", str2, "RegexBuilder: null");
        org.junit.Assert.assertNotNull(regexBuilder4);
        org.junit.Assert.assertEquals("'" + str5 + "' != '" + "RegexBuilder: 89662180-a89f-497b-9301-227d494d2bae" + "'", str5, "RegexBuilder: 89662180-a89f-497b-9301-227d494d2bae");
        org.junit.Assert.assertNotNull(regexBuilder7);
        org.junit.Assert.assertNotNull(regexBuilder9);
        org.junit.Assert.assertNotNull(regexBuilder11);
        org.junit.Assert.assertEquals("'" + str12 + "' != '" + "RegexBuilder: 58515fd1-71f9-42a1-b033-b509624129a7" + "'", str12, "RegexBuilder: 58515fd1-71f9-42a1-b033-b509624129a7");
        org.junit.Assert.assertNotNull(regexBuilder14);
    }

    @Test
    public void test12537() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest25.test12537");
        org.apache.rat.utils.Log log0 = null;
        org.apache.rat.ReportConfiguration reportConfiguration1 = new org.apache.rat.ReportConfiguration(log0);
        java.io.FilenameFilter filenameFilter2 = reportConfiguration1.getInputFileFilter();
        org.apache.rat.license.LicenseSetFactory.LicenseFilter licenseFilter3 = org.apache.rat.license.LicenseSetFactory.LicenseFilter.all;
        java.util.SortedSet<org.apache.rat.license.ILicense> iLicenseSet4 = reportConfiguration1.getLicenses(licenseFilter3);
        org.apache.rat.config.AddLicenseHeaders addLicenseHeaders5 = org.apache.rat.config.AddLicenseHeaders.FALSE;
        reportConfiguration1.setAddLicenseHeaders(addLicenseHeaders5);
        org.apache.rat.utils.Log log7 = null;
        org.apache.rat.ReportConfiguration reportConfiguration8 = new org.apache.rat.ReportConfiguration(log7);
        org.apache.rat.report.claim.ClaimStatistic claimStatistic9 = org.apache.rat.Reporter.report(reportConfiguration8);
        org.apache.rat.license.LicenseSetFactory.LicenseFilter licenseFilter10 = org.apache.rat.license.LicenseSetFactory.LicenseFilter.all;
        org.apache.rat.Reporter.listLicenses(reportConfiguration8, licenseFilter10);
        org.apache.rat.Reporter.listLicenses(reportConfiguration1, licenseFilter10);
        org.apache.rat.utils.Log log13 = null;
        org.apache.rat.ReportConfiguration reportConfiguration14 = new org.apache.rat.ReportConfiguration(log13);
        java.io.FilenameFilter filenameFilter15 = reportConfiguration14.getInputFileFilter();
        org.apache.rat.license.LicenseSetFactory.LicenseFilter licenseFilter16 = org.apache.rat.license.LicenseSetFactory.LicenseFilter.all;
        java.util.SortedSet<org.apache.rat.license.ILicense> iLicenseSet17 = reportConfiguration14.getLicenses(licenseFilter16);
        org.apache.rat.config.AddLicenseHeaders addLicenseHeaders18 = org.apache.rat.config.AddLicenseHeaders.FALSE;
        reportConfiguration14.setAddLicenseHeaders(addLicenseHeaders18);
        org.apache.rat.utils.Log log20 = null;
        org.apache.rat.ReportConfiguration reportConfiguration21 = new org.apache.rat.ReportConfiguration(log20);
        org.apache.rat.report.claim.ClaimStatistic claimStatistic22 = org.apache.rat.Reporter.report(reportConfiguration21);
        org.apache.rat.license.LicenseSetFactory.LicenseFilter licenseFilter23 = org.apache.rat.license.LicenseSetFactory.LicenseFilter.all;
        org.apache.rat.Reporter.listLicenses(reportConfiguration21, licenseFilter23);
        org.apache.rat.Reporter.listLicenses(reportConfiguration14, licenseFilter23);
        org.apache.rat.Reporter.listLicenses(reportConfiguration1, licenseFilter23);
        org.apache.commons.io.function.IOSupplier<java.io.OutputStream> outputStreamIOSupplier27 = reportConfiguration1.getOutput();
        org.apache.rat.report.claim.ClaimStatistic claimStatistic28 = org.apache.rat.Reporter.report(reportConfiguration1);
        org.apache.rat.utils.Log log29 = null;
        org.apache.rat.ReportConfiguration reportConfiguration30 = new org.apache.rat.ReportConfiguration(log29);
        java.io.FilenameFilter filenameFilter31 = reportConfiguration30.getInputFileFilter();
        org.apache.rat.license.LicenseSetFactory.LicenseFilter licenseFilter32 = org.apache.rat.license.LicenseSetFactory.LicenseFilter.all;
        java.util.SortedSet<org.apache.rat.license.ILicense> iLicenseSet33 = reportConfiguration30.getLicenses(licenseFilter32);
        org.apache.rat.config.AddLicenseHeaders addLicenseHeaders34 = org.apache.rat.config.AddLicenseHeaders.FALSE;
        reportConfiguration30.setAddLicenseHeaders(addLicenseHeaders34);
        org.apache.rat.utils.Log log36 = null;
        org.apache.rat.ReportConfiguration reportConfiguration37 = new org.apache.rat.ReportConfiguration(log36);
        org.apache.rat.report.claim.ClaimStatistic claimStatistic38 = org.apache.rat.Reporter.report(reportConfiguration37);
        org.apache.rat.license.LicenseSetFactory.LicenseFilter licenseFilter39 = org.apache.rat.license.LicenseSetFactory.LicenseFilter.all;
        org.apache.rat.Reporter.listLicenses(reportConfiguration37, licenseFilter39);
        org.apache.rat.Reporter.listLicenses(reportConfiguration30, licenseFilter39);
        org.apache.rat.utils.Log log42 = null;
        org.apache.rat.ReportConfiguration reportConfiguration43 = new org.apache.rat.ReportConfiguration(log42);
        java.io.FilenameFilter filenameFilter44 = reportConfiguration43.getInputFileFilter();
        org.apache.rat.license.LicenseSetFactory.LicenseFilter licenseFilter45 = org.apache.rat.license.LicenseSetFactory.LicenseFilter.all;
        java.util.SortedSet<org.apache.rat.license.ILicense> iLicenseSet46 = reportConfiguration43.getLicenses(licenseFilter45);
        org.apache.rat.config.AddLicenseHeaders addLicenseHeaders47 = org.apache.rat.config.AddLicenseHeaders.FALSE;
        reportConfiguration43.setAddLicenseHeaders(addLicenseHeaders47);
        org.apache.rat.utils.Log log49 = null;
        org.apache.rat.ReportConfiguration reportConfiguration50 = new org.apache.rat.ReportConfiguration(log49);
        org.apache.rat.report.claim.ClaimStatistic claimStatistic51 = org.apache.rat.Reporter.report(reportConfiguration50);
        org.apache.rat.license.LicenseSetFactory.LicenseFilter licenseFilter52 = org.apache.rat.license.LicenseSetFactory.LicenseFilter.all;
        org.apache.rat.Reporter.listLicenses(reportConfiguration50, licenseFilter52);
        org.apache.rat.Reporter.listLicenses(reportConfiguration43, licenseFilter52);
        org.apache.rat.Reporter.listLicenses(reportConfiguration30, licenseFilter52);
        org.apache.rat.utils.Log log56 = null;
        org.apache.rat.ReportConfiguration reportConfiguration57 = new org.apache.rat.ReportConfiguration(log56);
        org.apache.commons.io.function.IOSupplier<java.io.OutputStream> outputStreamIOSupplier58 = reportConfiguration57.getOutput();
        reportConfiguration30.setOut(outputStreamIOSupplier58);
        org.apache.rat.utils.Log.Level level60 = org.apache.rat.utils.Log.Level.WARN;
        reportConfiguration30.logLicenseCollisions(level60);
        org.apache.commons.io.filefilter.IOFileFilter iOFileFilter62 = reportConfiguration30.getDirectoryFilter();
        java.nio.file.Path path63 = null;
        boolean boolean64 = iOFileFilter62.matches(path63);
        java.nio.file.Path path65 = null;
        java.nio.file.attribute.BasicFileAttributes basicFileAttributes66 = null;
        java.nio.file.FileVisitResult fileVisitResult67 = iOFileFilter62.accept(path65, basicFileAttributes66);
        org.apache.commons.io.filefilter.IOFileFilter iOFileFilter68 = iOFileFilter62.negate();
        reportConfiguration1.setDirectoryFilter(iOFileFilter62);
        java.io.FilenameFilter filenameFilter70 = reportConfiguration1.getInputFileFilter();
        org.apache.rat.report.IReportable iReportable71 = reportConfiguration1.getReportable();
        java.io.File file72 = null;
        // The following exception was thrown during execution in test generation
        try {
            reportConfiguration1.setStyleSheet(file72);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: styleSheet file should not be null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNull(filenameFilter2);
        org.junit.Assert.assertTrue("'" + licenseFilter3 + "' != '" + org.apache.rat.license.LicenseSetFactory.LicenseFilter.all + "'", licenseFilter3.equals(org.apache.rat.license.LicenseSetFactory.LicenseFilter.all));
        org.junit.Assert.assertNotNull(iLicenseSet4);
        org.junit.Assert.assertTrue("'" + addLicenseHeaders5 + "' != '" + org.apache.rat.config.AddLicenseHeaders.FALSE + "'", addLicenseHeaders5.equals(org.apache.rat.config.AddLicenseHeaders.FALSE));
        org.junit.Assert.assertNull(claimStatistic9);
        org.junit.Assert.assertTrue("'" + licenseFilter10 + "' != '" + org.apache.rat.license.LicenseSetFactory.LicenseFilter.all + "'", licenseFilter10.equals(org.apache.rat.license.LicenseSetFactory.LicenseFilter.all));
        org.junit.Assert.assertNull(filenameFilter15);
        org.junit.Assert.assertTrue("'" + licenseFilter16 + "' != '" + org.apache.rat.license.LicenseSetFactory.LicenseFilter.all + "'", licenseFilter16.equals(org.apache.rat.license.LicenseSetFactory.LicenseFilter.all));
        org.junit.Assert.assertNotNull(iLicenseSet17);
        org.junit.Assert.assertTrue("'" + addLicenseHeaders18 + "' != '" + org.apache.rat.config.AddLicenseHeaders.FALSE + "'", addLicenseHeaders18.equals(org.apache.rat.config.AddLicenseHeaders.FALSE));
        org.junit.Assert.assertNull(claimStatistic22);
        org.junit.Assert.assertTrue("'" + licenseFilter23 + "' != '" + org.apache.rat.license.LicenseSetFactory.LicenseFilter.all + "'", licenseFilter23.equals(org.apache.rat.license.LicenseSetFactory.LicenseFilter.all));
        org.junit.Assert.assertNotNull(outputStreamIOSupplier27);
        org.junit.Assert.assertNull(claimStatistic28);
        org.junit.Assert.assertNull(filenameFilter31);
        org.junit.Assert.assertTrue("'" + licenseFilter32 + "' != '" + org.apache.rat.license.LicenseSetFactory.LicenseFilter.all + "'", licenseFilter32.equals(org.apache.rat.license.LicenseSetFactory.LicenseFilter.all));
        org.junit.Assert.assertNotNull(iLicenseSet33);
        org.junit.Assert.assertTrue("'" + addLicenseHeaders34 + "' != '" + org.apache.rat.config.AddLicenseHeaders.FALSE + "'", addLicenseHeaders34.equals(org.apache.rat.config.AddLicenseHeaders.FALSE));
        org.junit.Assert.assertNull(claimStatistic38);
        org.junit.Assert.assertTrue("'" + licenseFilter39 + "' != '" + org.apache.rat.license.LicenseSetFactory.LicenseFilter.all + "'", licenseFilter39.equals(org.apache.rat.license.LicenseSetFactory.LicenseFilter.all));
        org.junit.Assert.assertNull(filenameFilter44);
        org.junit.Assert.assertTrue("'" + licenseFilter45 + "' != '" + org.apache.rat.license.LicenseSetFactory.LicenseFilter.all + "'", licenseFilter45.equals(org.apache.rat.license.LicenseSetFactory.LicenseFilter.all));
        org.junit.Assert.assertNotNull(iLicenseSet46);
        org.junit.Assert.assertTrue("'" + addLicenseHeaders47 + "' != '" + org.apache.rat.config.AddLicenseHeaders.FALSE + "'", addLicenseHeaders47.equals(org.apache.rat.config.AddLicenseHeaders.FALSE));
        org.junit.Assert.assertNull(claimStatistic51);
        org.junit.Assert.assertTrue("'" + licenseFilter52 + "' != '" + org.apache.rat.license.LicenseSetFactory.LicenseFilter.all + "'", licenseFilter52.equals(org.apache.rat.license.LicenseSetFactory.LicenseFilter.all));
        org.junit.Assert.assertNotNull(outputStreamIOSupplier58);
        org.junit.Assert.assertTrue("'" + level60 + "' != '" + org.apache.rat.utils.Log.Level.WARN + "'", level60.equals(org.apache.rat.utils.Log.Level.WARN));
        org.junit.Assert.assertNotNull(iOFileFilter62);
        org.junit.Assert.assertTrue("'" + boolean64 + "' != '" + false + "'", boolean64 == false);
        org.junit.Assert.assertTrue("'" + fileVisitResult67 + "' != '" + java.nio.file.FileVisitResult.TERMINATE + "'", fileVisitResult67.equals(java.nio.file.FileVisitResult.TERMINATE));
        org.junit.Assert.assertNotNull(iOFileFilter68);
        org.junit.Assert.assertNull(filenameFilter70);
        org.junit.Assert.assertNull(iReportable71);
    }

    @Test
    public void test12538() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest25.test12538");
        org.apache.rat.analysis.license.FullTextMatchingLicense fullTextMatchingLicense0 = new org.apache.rat.analysis.license.FullTextMatchingLicense();
        fullTextMatchingLicense0.setLicenseFamilyName("hi!");
        java.lang.String str3 = fullTextMatchingLicense0.getLicenseFamilyCategory();
        fullTextMatchingLicense0.setNotes(".cvsignore");
        fullTextMatchingLicense0.setLicenseFamilyName("MATHCERREFBUILDER: TMF");
        fullTextMatchingLicense0.setNotes("NotBuilder: null");
        fullTextMatchingLicense0.setNotes("2f61fc99-c655-43e3-a548-fa8ccadafe5e");
        fullTextMatchingLicense0.setFullText("MathcerRefBuilder: AllBuilder:");
        org.apache.rat.license.ILicense.Builder builder14 = fullTextMatchingLicense0.getLicense();
        fullTextMatchingLicense0.setLicenseFamilyCategory("6fbe8280-d578-4ea3-a1a8-34d68e85abc2");
        org.junit.Assert.assertNull(str3);
        org.junit.Assert.assertNotNull(builder14);
    }

    @Test
    public void test12539() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest25.test12539");
        boolean boolean1 = org.apache.rat.document.impl.guesser.BinaryGuesser.isAudio("http");
        org.junit.Assert.assertTrue("'" + boolean1 + "' != '" + false + "'", boolean1 == false);
    }

    @Test
    public void test12540() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest25.test12540");
        org.apache.rat.utils.Log log0 = null;
        org.apache.rat.ReportConfiguration reportConfiguration1 = new org.apache.rat.ReportConfiguration(log0);
        java.io.FilenameFilter filenameFilter2 = reportConfiguration1.getInputFileFilter();
        org.apache.rat.license.ILicenseFamily iLicenseFamily3 = null;
        reportConfiguration1.addFamily(iLicenseFamily3);
        reportConfiguration1.removeApprovedLicenseCategory("AllBuilder:");
        boolean boolean7 = reportConfiguration1.isAddingLicenses();
        boolean boolean8 = reportConfiguration1.isAddingLicensesForced();
        reportConfiguration1.setStyleReport(false);
        java.net.URL uRL11 = null;
        // The following exception was thrown during execution in test generation
        try {
            reportConfiguration1.setStyleSheet(uRL11);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: styleSheet file should not be null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNull(filenameFilter2);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
    }

    @Test
    public void test12541() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest25.test12541");
        org.apache.rat.analysis.matchers.SimpleTextMatcher simpleTextMatcher2 = new org.apache.rat.analysis.matchers.SimpleTextMatcher("89662180a89f497b9301227d494d2bae", "COPYRIGHT BUILDER: S:OASIS E:NULL O:NULL");
    }

    @Test
    public void test12542() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest25.test12542");
        org.apache.rat.utils.Log log0 = null;
        org.apache.rat.ReportConfiguration reportConfiguration1 = new org.apache.rat.ReportConfiguration(log0);
        java.io.FilenameFilter filenameFilter2 = reportConfiguration1.getInputFileFilter();
        org.apache.rat.license.ILicense iLicense3 = null;
        reportConfiguration1.addLicense(iLicense3);
        org.apache.rat.utils.Log log5 = null;
        org.apache.rat.ReportConfiguration reportConfiguration6 = new org.apache.rat.ReportConfiguration(log5);
        org.apache.rat.report.claim.ClaimStatistic claimStatistic7 = org.apache.rat.Reporter.report(reportConfiguration6);
        org.apache.rat.utils.ReportingSet.Options options8 = org.apache.rat.utils.ReportingSet.Options.OVERWRITE;
        reportConfiguration6.licenseDuplicateOption(options8);
        org.apache.rat.license.ILicenseFamily[] iLicenseFamilyArray10 = new org.apache.rat.license.ILicenseFamily[] {};
        java.util.ArrayList<org.apache.rat.license.ILicenseFamily> iLicenseFamilyList11 = new java.util.ArrayList<org.apache.rat.license.ILicenseFamily>();
        boolean boolean12 = java.util.Collections.addAll((java.util.Collection<org.apache.rat.license.ILicenseFamily>) iLicenseFamilyList11, iLicenseFamilyArray10);
        org.apache.rat.policy.DefaultPolicy defaultPolicy13 = new org.apache.rat.policy.DefaultPolicy((java.util.Collection<org.apache.rat.license.ILicenseFamily>) iLicenseFamilyList11);
        org.apache.rat.api.Document document14 = null;
        defaultPolicy13.analyse(document14);
        org.apache.rat.api.Document document16 = null;
        defaultPolicy13.analyse(document16);
        org.apache.rat.api.Document document18 = null;
        defaultPolicy13.analyse(document18);
        org.apache.rat.analysis.license.FullTextMatchingLicense fullTextMatchingLicense20 = new org.apache.rat.analysis.license.FullTextMatchingLicense();
        fullTextMatchingLicense20.setLicenseFamilyName("hi!");
        java.lang.String str23 = fullTextMatchingLicense20.getLicenseFamilyCategory();
        java.lang.String str24 = fullTextMatchingLicense20.getLicenseFamilyName();
        fullTextMatchingLicense20.setLicenseFamilyName("SpdxBuilder: null");
        fullTextMatchingLicense20.setLicenseFamilyCategory("TMF");
        org.apache.rat.license.ILicenseFamily iLicenseFamily29 = fullTextMatchingLicense20.getLicenseFamily();
        java.util.SortedSet<org.apache.rat.license.ILicenseFamily> iLicenseFamilySet30 = org.apache.rat.license.LicenseFamilySetFactory.emptyLicenseFamilySet();
        org.apache.rat.license.ILicenseFamily iLicenseFamily31 = org.apache.rat.license.LicenseFamilySetFactory.search(iLicenseFamily29, iLicenseFamilySet30);
        defaultPolicy13.add(iLicenseFamily29);
        java.lang.String str33 = iLicenseFamily29.getFamilyName();
        reportConfiguration6.addApprovedLicenseCategory(iLicenseFamily29);
        java.lang.String str35 = iLicenseFamily29.getFamilyCategory();
        org.apache.rat.license.ILicenseFamilyBuilder iLicenseFamilyBuilder36 = new org.apache.rat.license.ILicenseFamilyBuilder();
        java.lang.String str37 = iLicenseFamilyBuilder36.getCategory();
        org.apache.rat.license.ILicenseFamily.Builder builder39 = iLicenseFamilyBuilder36.setLicenseFamilyCategory("AL   ");
        org.apache.rat.license.ILicenseFamily.Builder builder41 = iLicenseFamilyBuilder36.setLicenseFamilyName("binary");
        org.apache.rat.license.ILicenseFamily.Builder builder43 = iLicenseFamilyBuilder36.setLicenseFamilyCategory("3c74a3ec-8235-4035-9db7-f9f475b48681");
        java.lang.String str44 = iLicenseFamilyBuilder36.getCategory();
        org.apache.rat.license.ILicenseFamily.Builder builder46 = iLicenseFamilyBuilder36.setLicenseFamilyCategory("Datum [ name ='GNU General Public License, version 3',value ='021187d7-27c2-4fd9-bc74-8cc00413ee52 ']");
        org.apache.rat.license.ILicenseFamily iLicenseFamily47 = iLicenseFamilyBuilder36.build();
        int int48 = iLicenseFamily29.compareTo(iLicenseFamily47);
        reportConfiguration1.addApprovedLicenseCategory(iLicenseFamily29);
        java.util.SortedSet<java.lang.String> strSet50 = reportConfiguration1.getApprovedLicenseCategories();
        org.junit.Assert.assertNull(filenameFilter2);
        org.junit.Assert.assertNull(claimStatistic7);
        org.junit.Assert.assertTrue("'" + options8 + "' != '" + org.apache.rat.utils.ReportingSet.Options.OVERWRITE + "'", options8.equals(org.apache.rat.utils.ReportingSet.Options.OVERWRITE));
        org.junit.Assert.assertNotNull(iLicenseFamilyArray10);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertNull(str23);
        org.junit.Assert.assertEquals("'" + str24 + "' != '" + "hi!" + "'", str24, "hi!");
        org.junit.Assert.assertNotNull(iLicenseFamily29);
        org.junit.Assert.assertNotNull(iLicenseFamilySet30);
        org.junit.Assert.assertNull(iLicenseFamily31);
        org.junit.Assert.assertEquals("'" + str33 + "' != '" + "SpdxBuilder: null" + "'", str33, "SpdxBuilder: null");
        org.junit.Assert.assertEquals("'" + str35 + "' != '" + "TMF  " + "'", str35, "TMF  ");
        org.junit.Assert.assertNull(str37);
        org.junit.Assert.assertNotNull(builder39);
        org.junit.Assert.assertNotNull(builder41);
        org.junit.Assert.assertNotNull(builder43);
        org.junit.Assert.assertEquals("'" + str44 + "' != '" + "3c74a3ec-8235-4035-9db7-f9f475b48681" + "'", str44, "3c74a3ec-8235-4035-9db7-f9f475b48681");
        org.junit.Assert.assertNotNull(builder46);
        org.junit.Assert.assertNotNull(iLicenseFamily47);
        org.junit.Assert.assertTrue("'" + int48 + "' != '" + 16 + "'", int48 == 16);
        org.junit.Assert.assertNotNull(strSet50);
    }

    @Test
    public void test12543() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest25.test12543");
        org.apache.rat.report.claim.ClaimStatistic claimStatistic0 = new org.apache.rat.report.claim.ClaimStatistic();
        claimStatistic0.setNumApproved((int) (short) 10);
        java.util.Map<java.lang.String, java.lang.Integer> strMap3 = null;
        claimStatistic0.setDocumentCategoryMap(strMap3);
        java.util.Map<java.lang.String, java.lang.Integer> strMap5 = claimStatistic0.getLicenseFileNameMap();
        claimStatistic0.setNumUnknown((int) (byte) -1);
        claimStatistic0.setNumApproved((int) (short) 1);
        claimStatistic0.setNumUnknown(7);
        int int12 = claimStatistic0.getNumApproved();
        java.util.Map<java.lang.String, java.lang.Integer> strMap13 = claimStatistic0.getLicenseFileNameMap();
        org.junit.Assert.assertNull(strMap5);
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + 1 + "'", int12 == 1);
        org.junit.Assert.assertNull(strMap13);
    }

    @Test
    public void test12544() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest25.test12544");
        java.lang.String str1 = org.apache.rat.document.impl.guesser.GuessUtils.normalise("78ea8cf4-0699-4b4d-a824-29edfa3c1584");
        org.junit.Assert.assertEquals("'" + str1 + "' != '" + "78EA8CF4-0699-4B4D-A824-29EDFA3C1584" + "'", str1, "78EA8CF4-0699-4B4D-A824-29EDFA3C1584");
    }

    @Test
    public void test12545() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest25.test12545");
        org.apache.rat.document.ToNameTransformer toNameTransformer0 = new org.apache.rat.document.ToNameTransformer();
        org.apache.rat.report.claim.ClaimStatistic claimStatistic1 = new org.apache.rat.report.claim.ClaimStatistic();
        claimStatistic1.setNumApproved((int) (short) 10);
        claimStatistic1.setNumUnknown(30);
        java.lang.Object obj6 = toNameTransformer0.transform((java.lang.Object) claimStatistic1);
        int int7 = claimStatistic1.getNumUnknown();
        java.util.Map<java.lang.String, java.lang.Integer> strMap8 = claimStatistic1.getLicenseFileNameMap();
        int int9 = claimStatistic1.getNumGenerated();
        int int10 = claimStatistic1.getNumUnApproved();
        org.junit.Assert.assertNull(obj6);
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 30 + "'", int7 == 30);
        org.junit.Assert.assertNull(strMap8);
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + 0 + "'", int9 == 0);
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + 0 + "'", int10 == 0);
    }

    @Test
    public void test12546() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest25.test12546");
        org.apache.rat.license.SimpleLicenseFamily simpleLicenseFamily0 = new org.apache.rat.license.SimpleLicenseFamily();
        java.lang.String str1 = simpleLicenseFamily0.getFamilyName();
        java.lang.String str2 = simpleLicenseFamily0.getFamilyCategory();
        simpleLicenseFamily0.setFamilyCategory("archive");
        simpleLicenseFamily0.setFamilyName("W3CD ");
        java.lang.String str7 = simpleLicenseFamily0.toString();
        simpleLicenseFamily0.setFamilyCategory("bd015714-405b-4304-9faa-36efad80e6e6");
        java.lang.String str10 = simpleLicenseFamily0.toString();
        simpleLicenseFamily0.setFamilyName("Copyright Builder: s:null e:d25f13bc-1910-4451-97b5-b72663551a5d o:null");
        org.junit.Assert.assertNull(str1);
        org.junit.Assert.assertNull(str2);
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "archive W3CD " + "'", str7, "archive W3CD ");
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "bd015714-405b-4304-9faa-36efad80e6e6 W3CD " + "'", str10, "bd015714-405b-4304-9faa-36efad80e6e6 W3CD ");
    }

    @Test
    public void test12547() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest25.test12547");
        java.util.regex.Pattern pattern2 = null;
        org.apache.rat.analysis.matchers.SimpleRegexMatcher simpleRegexMatcher3 = new org.apache.rat.analysis.matchers.SimpleRegexMatcher("", pattern2);
        org.apache.rat.analysis.matchers.NotMatcher notMatcher4 = new org.apache.rat.analysis.matchers.NotMatcher("GNU General Public License, version 2", (org.apache.rat.analysis.IHeaderMatcher) simpleRegexMatcher3);
        org.apache.rat.analysis.IHeaderMatcher.State state5 = simpleRegexMatcher3.currentState();
        simpleRegexMatcher3.reset();
        java.lang.String str7 = simpleRegexMatcher3.getId();
        org.apache.rat.analysis.IHeaderMatcher.State state8 = simpleRegexMatcher3.currentState();
        // The following exception was thrown during execution in test generation
        try {
            boolean boolean9 = state8.asBoolean();
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalStateException; message: 'asBoolean' should never be called on an indeterminate state");
        } catch (java.lang.IllegalStateException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + state5 + "' != '" + org.apache.rat.analysis.IHeaderMatcher.State.i + "'", state5.equals(org.apache.rat.analysis.IHeaderMatcher.State.i));
// flaky:         org.junit.Assert.assertEquals("'" + str7 + "' != '" + "c2e0c573-1eca-4afc-bcc6-31cb50f017ee" + "'", str7, "c2e0c573-1eca-4afc-bcc6-31cb50f017ee");
        org.junit.Assert.assertTrue("'" + state8 + "' != '" + org.apache.rat.analysis.IHeaderMatcher.State.i + "'", state8.equals(org.apache.rat.analysis.IHeaderMatcher.State.i));
    }

    @Test
    public void test12548() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest25.test12548");
        org.apache.rat.license.ILicense[] iLicenseArray1 = new org.apache.rat.license.ILicense[] {};
        java.util.TreeSet<org.apache.rat.license.ILicense> iLicenseSet2 = new java.util.TreeSet<org.apache.rat.license.ILicense>();
        boolean boolean3 = java.util.Collections.addAll((java.util.Collection<org.apache.rat.license.ILicense>) iLicenseSet2, iLicenseArray1);
        java.lang.String[] strArray16 = new java.lang.String[] { "GPL2 ", "GPL1 ", "notice", "http://org/apache/rat/meta-data#LicenseFamilyName", "notice", "GPL2 ", "http://org/apache/rat/meta-data#LicenseFamilyName", "", "GPL2 ", "", "GPL1 ", "hi!" };
        java.util.ArrayList<java.lang.String> strList17 = new java.util.ArrayList<java.lang.String>();
        boolean boolean18 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strList17, strArray16);
        org.apache.rat.license.LicenseSetFactory licenseSetFactory19 = new org.apache.rat.license.LicenseSetFactory((java.util.SortedSet<org.apache.rat.license.ILicense>) iLicenseSet2, (java.util.Collection<java.lang.String>) strList17);
        org.apache.rat.license.ILicense iLicense20 = org.apache.rat.license.LicenseSetFactory.search("JAVA", (java.util.SortedSet<org.apache.rat.license.ILicense>) iLicenseSet2);
        org.apache.rat.utils.ReportingSet<org.apache.rat.license.ILicense> iLicenseSet21 = new org.apache.rat.utils.ReportingSet<org.apache.rat.license.ILicense>((java.util.SortedSet<org.apache.rat.license.ILicense>) iLicenseSet2);
        org.apache.rat.utils.ReportingSet<org.apache.rat.license.ILicense> iLicenseSet22 = new org.apache.rat.utils.ReportingSet<org.apache.rat.license.ILicense>((java.util.SortedSet<org.apache.rat.license.ILicense>) iLicenseSet21);
        org.apache.rat.utils.ReportingSet<org.apache.rat.license.ILicense> iLicenseSet23 = new org.apache.rat.utils.ReportingSet<org.apache.rat.license.ILicense>((java.util.SortedSet<org.apache.rat.license.ILicense>) iLicenseSet21);
        org.junit.Assert.assertNotNull(iLicenseArray1);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertNotNull(strArray16);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + true + "'", boolean18 == true);
        org.junit.Assert.assertNull(iLicense20);
    }

    @Test
    public void test12549() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest25.test12549");
        org.apache.rat.configuration.builders.TextBuilder textBuilder0 = new org.apache.rat.configuration.builders.TextBuilder();
        org.apache.rat.configuration.builders.TextBuilder textBuilder2 = textBuilder0.setText("true");
        org.apache.rat.configuration.builders.TextBuilder textBuilder4 = textBuilder0.setText("stand");
        org.apache.rat.configuration.builders.TextCaptureBuilder textCaptureBuilder6 = textBuilder4.setText("Datum [ name ='http://org/apache/rat/meta-data#LicenseFamilyCategory',value ='OASIS ']");
        org.apache.rat.configuration.builders.TextBuilder textBuilder8 = textBuilder4.setText("7934b3ba-1073-4ff1-bfc3-c46ebe8a6c06");
        org.apache.rat.analysis.IHeaderMatcher iHeaderMatcher9 = textBuilder4.build();
        org.apache.rat.configuration.builders.TextBuilder textBuilder11 = textBuilder4.setText("MIT  ");
        org.junit.Assert.assertNotNull(textBuilder2);
        org.junit.Assert.assertNotNull(textBuilder4);
        org.junit.Assert.assertNotNull(textCaptureBuilder6);
        org.junit.Assert.assertNotNull(textBuilder8);
        org.junit.Assert.assertNotNull(iHeaderMatcher9);
        org.junit.Assert.assertNotNull(textBuilder11);
    }

    @Test
    public void test12550() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest25.test12550");
        org.apache.rat.utils.Log log0 = null;
        org.apache.rat.ReportConfiguration reportConfiguration1 = new org.apache.rat.ReportConfiguration(log0);
        org.apache.rat.report.claim.ClaimStatistic claimStatistic2 = org.apache.rat.Reporter.report(reportConfiguration1);
        org.apache.rat.utils.Log log3 = null;
        org.apache.rat.ReportConfiguration reportConfiguration4 = new org.apache.rat.ReportConfiguration(log3);
        org.apache.rat.report.claim.ClaimStatistic claimStatistic5 = org.apache.rat.Reporter.report(reportConfiguration4);
        org.apache.rat.utils.ReportingSet.Options options6 = org.apache.rat.utils.ReportingSet.Options.OVERWRITE;
        reportConfiguration4.licenseDuplicateOption(options6);
        reportConfiguration1.familyDuplicateOption(options6);
        org.apache.commons.io.function.IOSupplier<java.io.PrintWriter> printWriterIOSupplier9 = reportConfiguration1.getWriter();
        org.apache.rat.utils.Log log10 = null;
        org.apache.rat.ReportConfiguration reportConfiguration11 = new org.apache.rat.ReportConfiguration(log10);
        org.apache.rat.report.claim.ClaimStatistic claimStatistic12 = org.apache.rat.Reporter.report(reportConfiguration11);
        org.apache.rat.utils.ReportingSet.Options options13 = org.apache.rat.utils.ReportingSet.Options.OVERWRITE;
        reportConfiguration11.licenseDuplicateOption(options13);
        org.apache.rat.license.ILicenseFamily[] iLicenseFamilyArray15 = new org.apache.rat.license.ILicenseFamily[] {};
        java.util.ArrayList<org.apache.rat.license.ILicenseFamily> iLicenseFamilyList16 = new java.util.ArrayList<org.apache.rat.license.ILicenseFamily>();
        boolean boolean17 = java.util.Collections.addAll((java.util.Collection<org.apache.rat.license.ILicenseFamily>) iLicenseFamilyList16, iLicenseFamilyArray15);
        org.apache.rat.policy.DefaultPolicy defaultPolicy18 = new org.apache.rat.policy.DefaultPolicy((java.util.Collection<org.apache.rat.license.ILicenseFamily>) iLicenseFamilyList16);
        org.apache.rat.api.Document document19 = null;
        defaultPolicy18.analyse(document19);
        org.apache.rat.api.Document document21 = null;
        defaultPolicy18.analyse(document21);
        org.apache.rat.api.Document document23 = null;
        defaultPolicy18.analyse(document23);
        org.apache.rat.analysis.license.FullTextMatchingLicense fullTextMatchingLicense25 = new org.apache.rat.analysis.license.FullTextMatchingLicense();
        fullTextMatchingLicense25.setLicenseFamilyName("hi!");
        java.lang.String str28 = fullTextMatchingLicense25.getLicenseFamilyCategory();
        java.lang.String str29 = fullTextMatchingLicense25.getLicenseFamilyName();
        fullTextMatchingLicense25.setLicenseFamilyName("SpdxBuilder: null");
        fullTextMatchingLicense25.setLicenseFamilyCategory("TMF");
        org.apache.rat.license.ILicenseFamily iLicenseFamily34 = fullTextMatchingLicense25.getLicenseFamily();
        java.util.SortedSet<org.apache.rat.license.ILicenseFamily> iLicenseFamilySet35 = org.apache.rat.license.LicenseFamilySetFactory.emptyLicenseFamilySet();
        org.apache.rat.license.ILicenseFamily iLicenseFamily36 = org.apache.rat.license.LicenseFamilySetFactory.search(iLicenseFamily34, iLicenseFamilySet35);
        defaultPolicy18.add(iLicenseFamily34);
        java.lang.String str38 = iLicenseFamily34.getFamilyName();
        reportConfiguration11.addApprovedLicenseCategory(iLicenseFamily34);
        java.lang.String str40 = iLicenseFamily34.getFamilyCategory();
        java.lang.String str41 = iLicenseFamily34.getFamilyName();
        java.lang.String str42 = iLicenseFamily34.getFamilyCategory();
        reportConfiguration1.addApprovedLicenseCategory(iLicenseFamily34);
        org.apache.rat.analysis.license.FullTextMatchingLicense fullTextMatchingLicense44 = new org.apache.rat.analysis.license.FullTextMatchingLicense();
        fullTextMatchingLicense44.setLicenseFamilyName("hi!");
        java.lang.String str47 = fullTextMatchingLicense44.getLicenseFamilyCategory();
        java.lang.String str48 = fullTextMatchingLicense44.getLicenseFamilyName();
        fullTextMatchingLicense44.setLicenseFamilyName("SpdxBuilder: null");
        fullTextMatchingLicense44.setLicenseFamilyCategory("TMF");
        fullTextMatchingLicense44.setLicenseFamilyCategory("d25f13bc-1910-4451-97b5-b72663551a5d");
        java.lang.String str55 = fullTextMatchingLicense44.getLicenseFamilyName();
        fullTextMatchingLicense44.setNotes("GPL3 ");
        java.lang.String str58 = fullTextMatchingLicense44.getNotes();
        org.apache.rat.license.ILicenseFamily iLicenseFamily59 = fullTextMatchingLicense44.getLicenseFamily();
        java.lang.String str60 = iLicenseFamily59.getFamilyCategory();
        int int61 = iLicenseFamily34.compareTo(iLicenseFamily59);
        java.lang.String str62 = iLicenseFamily34.getFamilyName();
        org.junit.Assert.assertNull(claimStatistic2);
        org.junit.Assert.assertNull(claimStatistic5);
        org.junit.Assert.assertTrue("'" + options6 + "' != '" + org.apache.rat.utils.ReportingSet.Options.OVERWRITE + "'", options6.equals(org.apache.rat.utils.ReportingSet.Options.OVERWRITE));
        org.junit.Assert.assertNotNull(printWriterIOSupplier9);
        org.junit.Assert.assertNull(claimStatistic12);
        org.junit.Assert.assertTrue("'" + options13 + "' != '" + org.apache.rat.utils.ReportingSet.Options.OVERWRITE + "'", options13.equals(org.apache.rat.utils.ReportingSet.Options.OVERWRITE));
        org.junit.Assert.assertNotNull(iLicenseFamilyArray15);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + false + "'", boolean17 == false);
        org.junit.Assert.assertNull(str28);
        org.junit.Assert.assertEquals("'" + str29 + "' != '" + "hi!" + "'", str29, "hi!");
        org.junit.Assert.assertNotNull(iLicenseFamily34);
        org.junit.Assert.assertNotNull(iLicenseFamilySet35);
        org.junit.Assert.assertNull(iLicenseFamily36);
        org.junit.Assert.assertEquals("'" + str38 + "' != '" + "SpdxBuilder: null" + "'", str38, "SpdxBuilder: null");
        org.junit.Assert.assertEquals("'" + str40 + "' != '" + "TMF  " + "'", str40, "TMF  ");
        org.junit.Assert.assertEquals("'" + str41 + "' != '" + "SpdxBuilder: null" + "'", str41, "SpdxBuilder: null");
        org.junit.Assert.assertEquals("'" + str42 + "' != '" + "TMF  " + "'", str42, "TMF  ");
        org.junit.Assert.assertNull(str47);
        org.junit.Assert.assertEquals("'" + str48 + "' != '" + "hi!" + "'", str48, "hi!");
        org.junit.Assert.assertEquals("'" + str55 + "' != '" + "SpdxBuilder: null" + "'", str55, "SpdxBuilder: null");
        org.junit.Assert.assertEquals("'" + str58 + "' != '" + "GPL3 " + "'", str58, "GPL3 ");
        org.junit.Assert.assertNotNull(iLicenseFamily59);
        org.junit.Assert.assertEquals("'" + str60 + "' != '" + "d25f1" + "'", str60, "d25f1");
        org.junit.Assert.assertTrue("'" + int61 + "' != '" + (-16) + "'", int61 == (-16));
        org.junit.Assert.assertEquals("'" + str62 + "' != '" + "SpdxBuilder: null" + "'", str62, "SpdxBuilder: null");
    }

    @Test
    public void test12551() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest25.test12551");
        java.util.regex.Pattern pattern3 = null;
        org.apache.rat.analysis.matchers.SimpleRegexMatcher simpleRegexMatcher4 = new org.apache.rat.analysis.matchers.SimpleRegexMatcher("", pattern3);
        simpleRegexMatcher4.reset();
        java.lang.String str6 = simpleRegexMatcher4.getId();
        org.apache.rat.analysis.matchers.NotMatcher notMatcher7 = new org.apache.rat.analysis.matchers.NotMatcher((org.apache.rat.analysis.IHeaderMatcher) simpleRegexMatcher4);
        org.apache.rat.analysis.matchers.NotMatcher notMatcher8 = new org.apache.rat.analysis.matchers.NotMatcher("GNU General Public License, version 1", (org.apache.rat.analysis.IHeaderMatcher) simpleRegexMatcher4);
        org.apache.rat.analysis.IHeaderMatcher.State state9 = notMatcher8.finalizeState();
        org.apache.rat.analysis.matchers.NotMatcher notMatcher10 = new org.apache.rat.analysis.matchers.NotMatcher("7E27CD62-4403-40AB-A9F5-16E7C59AB2F1", (org.apache.rat.analysis.IHeaderMatcher) notMatcher8);
        org.apache.rat.analysis.IHeaderMatcher.State state11 = notMatcher8.currentState();
        org.apache.rat.analysis.IHeaderMatcher.State state12 = notMatcher8.currentState();
// flaky:         org.junit.Assert.assertEquals("'" + str6 + "' != '" + "a042c796-3a68-40dc-8cc7-3bf072c6205e" + "'", str6, "a042c796-3a68-40dc-8cc7-3bf072c6205e");
        org.junit.Assert.assertTrue("'" + state9 + "' != '" + org.apache.rat.analysis.IHeaderMatcher.State.t + "'", state9.equals(org.apache.rat.analysis.IHeaderMatcher.State.t));
        org.junit.Assert.assertTrue("'" + state11 + "' != '" + org.apache.rat.analysis.IHeaderMatcher.State.t + "'", state11.equals(org.apache.rat.analysis.IHeaderMatcher.State.t));
        org.junit.Assert.assertTrue("'" + state12 + "' != '" + org.apache.rat.analysis.IHeaderMatcher.State.t + "'", state12.equals(org.apache.rat.analysis.IHeaderMatcher.State.t));
    }

    @Test
    public void test12552() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest25.test12552");
        org.apache.rat.Defaults.Builder builder0 = org.apache.rat.Defaults.builder();
        org.apache.rat.Defaults defaults1 = builder0.build();
        org.apache.rat.Defaults.Builder builder2 = builder0.noDefault();
        org.apache.rat.Defaults.Builder builder4 = builder0.remove("AllBuilder:");
        org.apache.rat.Defaults.Builder builder6 = builder4.add("?????");
        org.apache.rat.Defaults.Builder builder8 = builder6.remove("");
        org.apache.rat.Defaults.Builder builder9 = builder6.noDefault();
        org.apache.rat.Defaults.Builder builder11 = builder6.remove("null http://org/apache/rat/meta-data");
        org.apache.rat.Defaults.Builder builder12 = builder11.noDefault();
        org.apache.rat.Defaults.Builder builder13 = builder11.noDefault();
        java.net.URL uRL14 = null;
        // The following exception was thrown during execution in test generation
        try {
            org.apache.rat.Defaults.Builder builder15 = builder11.remove(uRL14);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(builder0);
        org.junit.Assert.assertNotNull(defaults1);
        org.junit.Assert.assertNotNull(builder2);
        org.junit.Assert.assertNotNull(builder4);
        org.junit.Assert.assertNotNull(builder6);
        org.junit.Assert.assertNotNull(builder8);
        org.junit.Assert.assertNotNull(builder9);
        org.junit.Assert.assertNotNull(builder11);
        org.junit.Assert.assertNotNull(builder12);
        org.junit.Assert.assertNotNull(builder13);
    }

    @Test
    public void test12553() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest25.test12553");
        org.apache.rat.utils.Log log0 = null;
        org.apache.rat.ReportConfiguration reportConfiguration1 = new org.apache.rat.ReportConfiguration(log0);
        org.apache.rat.report.claim.ClaimStatistic claimStatistic2 = org.apache.rat.Reporter.report(reportConfiguration1);
        reportConfiguration1.addApprovedLicenseCategory("Copyright Builder: s:null e:null o:null");
        java.util.SortedSet<java.lang.String> strSet5 = reportConfiguration1.getApprovedLicenseCategories();
        java.io.FilenameFilter filenameFilter6 = reportConfiguration1.getInputFileFilter();
        org.apache.rat.utils.Log log7 = null;
        org.apache.rat.ReportConfiguration reportConfiguration8 = new org.apache.rat.ReportConfiguration(log7);
        org.apache.rat.report.claim.ClaimStatistic claimStatistic9 = org.apache.rat.Reporter.report(reportConfiguration8);
        org.apache.rat.utils.ReportingSet.Options options10 = org.apache.rat.utils.ReportingSet.Options.OVERWRITE;
        reportConfiguration8.licenseDuplicateOption(options10);
        java.util.SortedSet<org.apache.rat.license.ILicenseFamily> iLicenseFamilySet13 = org.apache.rat.license.LicenseFamilySetFactory.emptyLicenseFamilySet();
        org.apache.rat.license.ILicenseFamily iLicenseFamily14 = org.apache.rat.license.LicenseFamilySetFactory.search("http://org/apache/rat/meta-data", iLicenseFamilySet13);
        org.apache.rat.policy.DefaultPolicy defaultPolicy15 = new org.apache.rat.policy.DefaultPolicy((java.util.Collection<org.apache.rat.license.ILicenseFamily>) iLicenseFamilySet13);
        reportConfiguration8.addFamilies((java.util.Collection<org.apache.rat.license.ILicenseFamily>) iLicenseFamilySet13);
        org.apache.rat.utils.ReportingSet<java.lang.String> strSet17 = new org.apache.rat.utils.ReportingSet<java.lang.String>();
        java.lang.Object[] objArray18 = strSet17.toArray();
        org.apache.rat.license.LicenseFamilySetFactory licenseFamilySetFactory19 = new org.apache.rat.license.LicenseFamilySetFactory(iLicenseFamilySet13, (java.util.Collection<java.lang.String>) strSet17);
        reportConfiguration1.addApprovedLicenseCategories((java.util.Collection<java.lang.String>) strSet17);
        java.util.stream.Stream<java.lang.String> strStream21 = strSet17.parallelStream();
        org.apache.rat.license.ILicenseFamily[] iLicenseFamilyArray22 = new org.apache.rat.license.ILicenseFamily[] {};
        java.util.ArrayList<org.apache.rat.license.ILicenseFamily> iLicenseFamilyList23 = new java.util.ArrayList<org.apache.rat.license.ILicenseFamily>();
        boolean boolean24 = java.util.Collections.addAll((java.util.Collection<org.apache.rat.license.ILicenseFamily>) iLicenseFamilyList23, iLicenseFamilyArray22);
        org.apache.rat.policy.DefaultPolicy defaultPolicy25 = new org.apache.rat.policy.DefaultPolicy((java.util.Collection<org.apache.rat.license.ILicenseFamily>) iLicenseFamilyList23);
        java.util.SortedSet<org.apache.rat.license.ILicenseFamily> iLicenseFamilySet26 = defaultPolicy25.getApprovedLicenseNames();
        org.apache.rat.api.Document document27 = null;
        defaultPolicy25.analyse(document27);
        org.apache.rat.analysis.license.FullTextMatchingLicense fullTextMatchingLicense29 = new org.apache.rat.analysis.license.FullTextMatchingLicense();
        fullTextMatchingLicense29.setLicenseFamilyName("hi!");
        java.lang.String str32 = fullTextMatchingLicense29.getLicenseFamilyCategory();
        java.lang.String str33 = fullTextMatchingLicense29.getLicenseFamilyName();
        fullTextMatchingLicense29.setLicenseFamilyName("SpdxBuilder: null");
        fullTextMatchingLicense29.setLicenseFamilyCategory("TMF");
        org.apache.rat.license.ILicenseFamily iLicenseFamily38 = fullTextMatchingLicense29.getLicenseFamily();
        defaultPolicy25.add(iLicenseFamily38);
        org.apache.rat.api.Document document40 = null;
        defaultPolicy25.analyse(document40);
        java.util.SortedSet<org.apache.rat.license.ILicenseFamily> iLicenseFamilySet42 = defaultPolicy25.getApprovedLicenseNames();
        boolean boolean43 = strSet17.retainAll((java.util.Collection<org.apache.rat.license.ILicenseFamily>) iLicenseFamilySet42);
        org.apache.rat.utils.DefaultLog defaultLog44 = org.apache.rat.utils.DefaultLog.INSTANCE;
        defaultLog44.info((java.lang.Object) "Modified BSD License");
        org.apache.rat.annotation.ApacheV2LicenseAppender apacheV2LicenseAppender48 = new org.apache.rat.annotation.ApacheV2LicenseAppender((org.apache.rat.utils.Log) defaultLog44, "W3CD ");
        org.apache.rat.utils.DefaultLog defaultLog49 = org.apache.rat.utils.DefaultLog.INSTANCE;
        org.apache.rat.license.ILicense.Builder builder50 = org.apache.rat.license.ILicense.builder();
        org.apache.rat.license.ILicense.Builder builder52 = builder50.setLicenseFamilyCategory("");
        org.apache.rat.analysis.matchers.CopyrightMatcher copyrightMatcher56 = new org.apache.rat.analysis.matchers.CopyrightMatcher("", "GPL1 ", "hi!");
        org.apache.rat.analysis.IHeaderMatcher.State state57 = copyrightMatcher56.finalizeState();
        org.apache.rat.license.ILicense.Builder builder58 = builder52.setMatcher((org.apache.rat.analysis.IHeaderMatcher) copyrightMatcher56);
        org.apache.rat.license.ILicense.Builder builder60 = builder58.setLicenseFamilyCategory("");
        defaultLog49.error((java.lang.Object) builder60);
        org.apache.rat.utils.Log.Level level62 = org.apache.rat.utils.Log.Level.INFO;
        defaultLog49.log(level62, "JAVA");
        org.apache.rat.utils.Log log65 = null;
        org.apache.rat.ReportConfiguration reportConfiguration66 = new org.apache.rat.ReportConfiguration(log65);
        org.apache.commons.io.function.IOSupplier<java.io.OutputStream> outputStreamIOSupplier67 = reportConfiguration66.getOutput();
        reportConfiguration66.setCopyrightMessage("MANIFEST.MF");
        org.apache.rat.utils.Log log70 = reportConfiguration66.getLog();
        org.apache.rat.utils.Log.Level level71 = org.apache.rat.utils.Log.Level.INFO;
        reportConfiguration66.logFamilyCollisions(level71);
        defaultLog49.setLevel(level71);
        defaultLog44.setLevel(level71);
        org.apache.rat.utils.ReportingSet<java.lang.String> strSet75 = strSet17.setLog((org.apache.rat.utils.Log) defaultLog44);
        org.junit.Assert.assertNull(claimStatistic2);
        org.junit.Assert.assertNotNull(strSet5);
        org.junit.Assert.assertNull(filenameFilter6);
        org.junit.Assert.assertNull(claimStatistic9);
        org.junit.Assert.assertTrue("'" + options10 + "' != '" + org.apache.rat.utils.ReportingSet.Options.OVERWRITE + "'", options10.equals(org.apache.rat.utils.ReportingSet.Options.OVERWRITE));
        org.junit.Assert.assertNotNull(iLicenseFamilySet13);
        org.junit.Assert.assertNull(iLicenseFamily14);
        org.junit.Assert.assertNotNull(objArray18);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray18), "[]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray18), "[]");
        org.junit.Assert.assertNotNull(strStream21);
        org.junit.Assert.assertNotNull(iLicenseFamilyArray22);
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + false + "'", boolean24 == false);
        org.junit.Assert.assertNotNull(iLicenseFamilySet26);
        org.junit.Assert.assertNull(str32);
        org.junit.Assert.assertEquals("'" + str33 + "' != '" + "hi!" + "'", str33, "hi!");
        org.junit.Assert.assertNotNull(iLicenseFamily38);
        org.junit.Assert.assertNotNull(iLicenseFamilySet42);
        org.junit.Assert.assertTrue("'" + boolean43 + "' != '" + false + "'", boolean43 == false);
        org.junit.Assert.assertNotNull(defaultLog44);
        org.junit.Assert.assertNotNull(defaultLog49);
        org.junit.Assert.assertNotNull(builder50);
        org.junit.Assert.assertNotNull(builder52);
        org.junit.Assert.assertTrue("'" + state57 + "' != '" + org.apache.rat.analysis.IHeaderMatcher.State.f + "'", state57.equals(org.apache.rat.analysis.IHeaderMatcher.State.f));
        org.junit.Assert.assertNotNull(builder58);
        org.junit.Assert.assertNotNull(builder60);
        org.junit.Assert.assertTrue("'" + level62 + "' != '" + org.apache.rat.utils.Log.Level.INFO + "'", level62.equals(org.apache.rat.utils.Log.Level.INFO));
        org.junit.Assert.assertNotNull(outputStreamIOSupplier67);
        org.junit.Assert.assertNull(log70);
        org.junit.Assert.assertTrue("'" + level71 + "' != '" + org.apache.rat.utils.Log.Level.INFO + "'", level71.equals(org.apache.rat.utils.Log.Level.INFO));
        org.junit.Assert.assertNotNull(strSet75);
    }

    @Test
    public void test12554() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest25.test12554");
        java.util.regex.Pattern pattern2 = null;
        org.apache.rat.analysis.matchers.SimpleRegexMatcher simpleRegexMatcher3 = new org.apache.rat.analysis.matchers.SimpleRegexMatcher("", pattern2);
        org.apache.rat.analysis.matchers.NotMatcher notMatcher4 = new org.apache.rat.analysis.matchers.NotMatcher("GNU General Public License, version 2", (org.apache.rat.analysis.IHeaderMatcher) simpleRegexMatcher3);
        java.lang.String str5 = simpleRegexMatcher3.toString();
        // The following exception was thrown during execution in test generation
        try {
            boolean boolean7 = simpleRegexMatcher3.doMatch("454fa1972f4d4e2dbb311a2d24301c68");
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
// flaky:         org.junit.Assert.assertEquals("'" + str5 + "' != '" + "a10a4b3c-da5b-43c0-ab54-e2b533d557ff" + "'", str5, "a10a4b3c-da5b-43c0-ab54-e2b533d557ff");
    }

    @Test
    public void test12555() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest25.test12555");
        org.apache.rat.utils.Log log0 = null;
        org.apache.rat.ReportConfiguration reportConfiguration1 = new org.apache.rat.ReportConfiguration(log0);
        org.apache.rat.report.claim.ClaimStatistic claimStatistic2 = org.apache.rat.Reporter.report(reportConfiguration1);
        org.apache.rat.license.ILicense[] iLicenseArray3 = new org.apache.rat.license.ILicense[] {};
        java.util.TreeSet<org.apache.rat.license.ILicense> iLicenseSet4 = new java.util.TreeSet<org.apache.rat.license.ILicense>();
        boolean boolean5 = java.util.Collections.addAll((java.util.Collection<org.apache.rat.license.ILicense>) iLicenseSet4, iLicenseArray3);
        java.lang.String[] strArray18 = new java.lang.String[] { "GPL2 ", "GPL1 ", "notice", "http://org/apache/rat/meta-data#LicenseFamilyName", "notice", "GPL2 ", "http://org/apache/rat/meta-data#LicenseFamilyName", "", "GPL2 ", "", "GPL1 ", "hi!" };
        java.util.ArrayList<java.lang.String> strList19 = new java.util.ArrayList<java.lang.String>();
        boolean boolean20 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strList19, strArray18);
        org.apache.rat.license.LicenseSetFactory licenseSetFactory21 = new org.apache.rat.license.LicenseSetFactory((java.util.SortedSet<org.apache.rat.license.ILicense>) iLicenseSet4, (java.util.Collection<java.lang.String>) strList19);
        org.apache.rat.utils.Log log22 = null;
        org.apache.rat.ReportConfiguration reportConfiguration23 = new org.apache.rat.ReportConfiguration(log22);
        java.io.FilenameFilter filenameFilter24 = reportConfiguration23.getInputFileFilter();
        org.apache.rat.license.LicenseSetFactory.LicenseFilter licenseFilter25 = org.apache.rat.license.LicenseSetFactory.LicenseFilter.all;
        java.util.SortedSet<org.apache.rat.license.ILicense> iLicenseSet26 = reportConfiguration23.getLicenses(licenseFilter25);
        org.apache.rat.config.AddLicenseHeaders addLicenseHeaders27 = org.apache.rat.config.AddLicenseHeaders.FALSE;
        reportConfiguration23.setAddLicenseHeaders(addLicenseHeaders27);
        org.apache.rat.utils.Log log29 = null;
        org.apache.rat.ReportConfiguration reportConfiguration30 = new org.apache.rat.ReportConfiguration(log29);
        org.apache.rat.report.claim.ClaimStatistic claimStatistic31 = org.apache.rat.Reporter.report(reportConfiguration30);
        org.apache.rat.license.LicenseSetFactory.LicenseFilter licenseFilter32 = org.apache.rat.license.LicenseSetFactory.LicenseFilter.all;
        org.apache.rat.Reporter.listLicenses(reportConfiguration30, licenseFilter32);
        org.apache.rat.Reporter.listLicenses(reportConfiguration23, licenseFilter32);
        org.apache.rat.utils.Log log35 = null;
        org.apache.rat.ReportConfiguration reportConfiguration36 = new org.apache.rat.ReportConfiguration(log35);
        java.io.FilenameFilter filenameFilter37 = reportConfiguration36.getInputFileFilter();
        org.apache.rat.license.LicenseSetFactory.LicenseFilter licenseFilter38 = org.apache.rat.license.LicenseSetFactory.LicenseFilter.all;
        java.util.SortedSet<org.apache.rat.license.ILicense> iLicenseSet39 = reportConfiguration36.getLicenses(licenseFilter38);
        org.apache.rat.config.AddLicenseHeaders addLicenseHeaders40 = org.apache.rat.config.AddLicenseHeaders.FALSE;
        reportConfiguration36.setAddLicenseHeaders(addLicenseHeaders40);
        org.apache.rat.utils.Log log42 = null;
        org.apache.rat.ReportConfiguration reportConfiguration43 = new org.apache.rat.ReportConfiguration(log42);
        org.apache.rat.report.claim.ClaimStatistic claimStatistic44 = org.apache.rat.Reporter.report(reportConfiguration43);
        org.apache.rat.license.LicenseSetFactory.LicenseFilter licenseFilter45 = org.apache.rat.license.LicenseSetFactory.LicenseFilter.all;
        org.apache.rat.Reporter.listLicenses(reportConfiguration43, licenseFilter45);
        org.apache.rat.Reporter.listLicenses(reportConfiguration36, licenseFilter45);
        org.apache.rat.Reporter.listLicenses(reportConfiguration23, licenseFilter45);
        java.util.SortedSet<org.apache.rat.license.ILicense> iLicenseSet49 = licenseSetFactory21.getLicenses(licenseFilter45);
        reportConfiguration1.addLicensesIfNotPresent((java.util.Collection<org.apache.rat.license.ILicense>) iLicenseSet49);
        org.apache.rat.utils.Log log51 = reportConfiguration1.getLog();
        org.apache.rat.report.IReportable iReportable52 = null;
        reportConfiguration1.setReportable(iReportable52);
        org.apache.rat.report.claim.ClaimStatistic claimStatistic54 = org.apache.rat.Reporter.report(reportConfiguration1);
        org.apache.commons.io.function.IOSupplier<java.io.InputStream> inputStreamIOSupplier55 = reportConfiguration1.getStyleSheet();
        org.apache.rat.utils.Log log56 = reportConfiguration1.getLog();
        org.junit.Assert.assertNull(claimStatistic2);
        org.junit.Assert.assertNotNull(iLicenseArray3);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertNotNull(strArray18);
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + true + "'", boolean20 == true);
        org.junit.Assert.assertNull(filenameFilter24);
        org.junit.Assert.assertTrue("'" + licenseFilter25 + "' != '" + org.apache.rat.license.LicenseSetFactory.LicenseFilter.all + "'", licenseFilter25.equals(org.apache.rat.license.LicenseSetFactory.LicenseFilter.all));
        org.junit.Assert.assertNotNull(iLicenseSet26);
        org.junit.Assert.assertTrue("'" + addLicenseHeaders27 + "' != '" + org.apache.rat.config.AddLicenseHeaders.FALSE + "'", addLicenseHeaders27.equals(org.apache.rat.config.AddLicenseHeaders.FALSE));
        org.junit.Assert.assertNull(claimStatistic31);
        org.junit.Assert.assertTrue("'" + licenseFilter32 + "' != '" + org.apache.rat.license.LicenseSetFactory.LicenseFilter.all + "'", licenseFilter32.equals(org.apache.rat.license.LicenseSetFactory.LicenseFilter.all));
        org.junit.Assert.assertNull(filenameFilter37);
        org.junit.Assert.assertTrue("'" + licenseFilter38 + "' != '" + org.apache.rat.license.LicenseSetFactory.LicenseFilter.all + "'", licenseFilter38.equals(org.apache.rat.license.LicenseSetFactory.LicenseFilter.all));
        org.junit.Assert.assertNotNull(iLicenseSet39);
        org.junit.Assert.assertTrue("'" + addLicenseHeaders40 + "' != '" + org.apache.rat.config.AddLicenseHeaders.FALSE + "'", addLicenseHeaders40.equals(org.apache.rat.config.AddLicenseHeaders.FALSE));
        org.junit.Assert.assertNull(claimStatistic44);
        org.junit.Assert.assertTrue("'" + licenseFilter45 + "' != '" + org.apache.rat.license.LicenseSetFactory.LicenseFilter.all + "'", licenseFilter45.equals(org.apache.rat.license.LicenseSetFactory.LicenseFilter.all));
        org.junit.Assert.assertNotNull(iLicenseSet49);
        org.junit.Assert.assertNull(log51);
        org.junit.Assert.assertNull(claimStatistic54);
        org.junit.Assert.assertNull(inputStreamIOSupplier55);
        org.junit.Assert.assertNull(log56);
    }

    @Test
    public void test12556() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest25.test12556");
        org.apache.rat.configuration.builders.TextBuilder textBuilder0 = new org.apache.rat.configuration.builders.TextBuilder();
        org.apache.rat.configuration.builders.TextBuilder textBuilder2 = textBuilder0.setText("t true");
        org.apache.rat.configuration.builders.TextBuilder textBuilder4 = textBuilder2.setText("META-DATA#LICENSEFAMILYNAME");
        org.apache.rat.analysis.IHeaderMatcher iHeaderMatcher5 = textBuilder4.build();
        org.junit.Assert.assertNotNull(textBuilder2);
        org.junit.Assert.assertNotNull(textBuilder4);
        org.junit.Assert.assertNotNull(iHeaderMatcher5);
    }

    @Test
    public void test12557() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest25.test12557");
        org.apache.rat.configuration.builders.SpdxBuilder spdxBuilder1 = org.apache.rat.analysis.IHeaderMatcher.Builder.spdx();
        java.lang.String str2 = spdxBuilder1.toString();
        org.apache.rat.configuration.builders.SpdxBuilder spdxBuilder4 = spdxBuilder1.setName("ef7a8b13-64c3-4510-bb0c-dbf208e1e73f");
        org.apache.rat.analysis.IHeaderMatcher iHeaderMatcher5 = spdxBuilder1.build();
        org.apache.rat.analysis.IHeaderMatcher iHeaderMatcher6 = spdxBuilder1.build();
        org.apache.rat.analysis.IHeaderMatcher iHeaderMatcher7 = spdxBuilder1.build();
        org.apache.rat.analysis.matchers.NotMatcher notMatcher8 = new org.apache.rat.analysis.matchers.NotMatcher("TextBuilder: true", iHeaderMatcher7);
        java.lang.String str9 = notMatcher8.getId();
        org.apache.rat.analysis.IHeaderMatcher.State state11 = notMatcher8.matches("stand");
        org.apache.rat.analysis.IHeaderMatcher.State state13 = notMatcher8.matches("SpdxBuilder: t true");
        notMatcher8.reset();
        org.junit.Assert.assertNotNull(spdxBuilder1);
        org.junit.Assert.assertEquals("'" + str2 + "' != '" + "SpdxBuilder: null" + "'", str2, "SpdxBuilder: null");
        org.junit.Assert.assertNotNull(spdxBuilder4);
        org.junit.Assert.assertNotNull(iHeaderMatcher5);
        org.junit.Assert.assertNotNull(iHeaderMatcher6);
        org.junit.Assert.assertNotNull(iHeaderMatcher7);
        org.junit.Assert.assertEquals("'" + str9 + "' != '" + "TextBuilder: true" + "'", str9, "TextBuilder: true");
// flaky:         org.junit.Assert.assertTrue("'" + state11 + "' != '" + org.apache.rat.analysis.IHeaderMatcher.State.t + "'", state11.equals(org.apache.rat.analysis.IHeaderMatcher.State.t));
// flaky:         org.junit.Assert.assertTrue("'" + state13 + "' != '" + org.apache.rat.analysis.IHeaderMatcher.State.t + "'", state13.equals(org.apache.rat.analysis.IHeaderMatcher.State.t));
    }

    @Test
    public void test12558() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest25.test12558");
        org.apache.rat.utils.DefaultLog defaultLog0 = org.apache.rat.utils.DefaultLog.INSTANCE;
        org.apache.rat.configuration.builders.AllBuilder allBuilder1 = new org.apache.rat.configuration.builders.AllBuilder();
        org.apache.rat.configuration.builders.MatcherRefBuilder matcherRefBuilder2 = org.apache.rat.analysis.IHeaderMatcher.Builder.matcherRef();
        boolean boolean3 = matcherRefBuilder2.hasId();
        java.lang.String str4 = matcherRefBuilder2.toString();
        org.apache.rat.configuration.builders.AnyBuilder anyBuilder5 = org.apache.rat.analysis.IHeaderMatcher.Builder.any();
        org.apache.rat.configuration.builders.NotBuilder notBuilder6 = new org.apache.rat.configuration.builders.NotBuilder();
        java.lang.String str7 = notBuilder6.toString();
        org.apache.rat.configuration.builders.MatcherRefBuilder matcherRefBuilder8 = org.apache.rat.analysis.IHeaderMatcher.Builder.matcherRef();
        boolean boolean9 = matcherRefBuilder8.hasId();
        java.util.Map<java.lang.String, org.apache.rat.analysis.IHeaderMatcher> strMap10 = null;
        org.apache.rat.configuration.builders.MatcherRefBuilder matcherRefBuilder11 = matcherRefBuilder8.setMatchers(strMap10);
        org.apache.rat.configuration.builders.AllBuilder allBuilder12 = new org.apache.rat.configuration.builders.AllBuilder();
        org.apache.rat.configuration.builders.CopyrightBuilder copyrightBuilder13 = org.apache.rat.analysis.IHeaderMatcher.Builder.copyright();
        org.apache.rat.configuration.builders.CopyrightBuilder copyrightBuilder15 = copyrightBuilder13.setStart("OASIS");
        java.lang.String str16 = copyrightBuilder13.toString();
        org.apache.rat.configuration.builders.CopyrightBuilder copyrightBuilder18 = copyrightBuilder13.setStart("223f0aba-15d4-49e9-901e-5740c137aebf");
        org.apache.rat.configuration.builders.MatcherRefBuilder matcherRefBuilder19 = org.apache.rat.analysis.IHeaderMatcher.Builder.matcherRef();
        boolean boolean20 = matcherRefBuilder19.hasId();
        org.apache.rat.configuration.builders.CopyrightBuilder copyrightBuilder21 = org.apache.rat.analysis.IHeaderMatcher.Builder.copyright();
        org.apache.rat.configuration.builders.CopyrightBuilder copyrightBuilder23 = copyrightBuilder21.setStart("OASIS");
        java.lang.String str24 = copyrightBuilder21.toString();
        org.apache.rat.configuration.builders.CopyrightBuilder copyrightBuilder26 = copyrightBuilder21.setStart("223f0aba-15d4-49e9-901e-5740c137aebf");
        org.apache.rat.configuration.builders.CopyrightBuilder copyrightBuilder27 = org.apache.rat.analysis.IHeaderMatcher.Builder.copyright();
        org.apache.rat.configuration.builders.CopyrightBuilder copyrightBuilder28 = org.apache.rat.analysis.IHeaderMatcher.Builder.copyright();
        java.lang.String str29 = copyrightBuilder28.toString();
        org.apache.rat.configuration.builders.CopyrightBuilder copyrightBuilder31 = copyrightBuilder28.setEnd(".cvsignore");
        boolean boolean32 = copyrightBuilder28.hasId();
        org.apache.rat.configuration.builders.CopyrightBuilder copyrightBuilder33 = org.apache.rat.analysis.IHeaderMatcher.Builder.copyright();
        java.lang.String str34 = copyrightBuilder33.toString();
        org.apache.rat.configuration.builders.CopyrightBuilder copyrightBuilder36 = copyrightBuilder33.setEnd(".cvsignore");
        boolean boolean37 = copyrightBuilder33.hasId();
        java.lang.String str38 = copyrightBuilder33.toString();
        org.apache.rat.configuration.builders.CopyrightBuilder copyrightBuilder39 = org.apache.rat.analysis.IHeaderMatcher.Builder.copyright();
        org.apache.rat.configuration.builders.CopyrightBuilder copyrightBuilder41 = copyrightBuilder39.setStart("OASIS");
        org.apache.rat.configuration.builders.AnyBuilder anyBuilder42 = org.apache.rat.analysis.IHeaderMatcher.Builder.any();
        org.apache.rat.configuration.builders.MatcherRefBuilder matcherRefBuilder43 = org.apache.rat.analysis.IHeaderMatcher.Builder.matcherRef();
        boolean boolean44 = matcherRefBuilder43.hasId();
        java.util.Map<java.lang.String, org.apache.rat.analysis.IHeaderMatcher> strMap45 = null;
        org.apache.rat.configuration.builders.MatcherRefBuilder matcherRefBuilder46 = matcherRefBuilder43.setMatchers(strMap45);
        org.apache.rat.configuration.builders.CopyrightBuilder copyrightBuilder47 = org.apache.rat.analysis.IHeaderMatcher.Builder.copyright();
        org.apache.rat.configuration.builders.MatcherRefBuilder matcherRefBuilder48 = org.apache.rat.analysis.IHeaderMatcher.Builder.matcherRef();
        boolean boolean49 = matcherRefBuilder48.hasId();
        java.lang.String str50 = matcherRefBuilder48.toString();
        java.util.Map<java.lang.String, org.apache.rat.analysis.IHeaderMatcher> strMap51 = null;
        org.apache.rat.configuration.builders.MatcherRefBuilder matcherRefBuilder52 = matcherRefBuilder48.setMatchers(strMap51);
        org.apache.rat.analysis.IHeaderMatcher.Builder[] builderArray53 = new org.apache.rat.analysis.IHeaderMatcher.Builder[] { matcherRefBuilder8, allBuilder12, copyrightBuilder18, matcherRefBuilder19, copyrightBuilder21, copyrightBuilder27, copyrightBuilder28, copyrightBuilder33, copyrightBuilder39, anyBuilder42, matcherRefBuilder43, copyrightBuilder47, matcherRefBuilder48 };
        java.util.ArrayList<org.apache.rat.analysis.IHeaderMatcher.Builder> builderList54 = new java.util.ArrayList<org.apache.rat.analysis.IHeaderMatcher.Builder>();
        boolean boolean55 = java.util.Collections.addAll((java.util.Collection<org.apache.rat.analysis.IHeaderMatcher.Builder>) builderList54, builderArray53);
        org.apache.rat.configuration.builders.AbstractBuilder abstractBuilder56 = notBuilder6.add((java.util.Collection<org.apache.rat.analysis.IHeaderMatcher.Builder>) builderList54);
        org.apache.rat.configuration.builders.MatcherRefBuilder matcherRefBuilder57 = new org.apache.rat.configuration.builders.MatcherRefBuilder();
        org.apache.rat.analysis.IHeaderMatcher.Builder[] builderArray58 = new org.apache.rat.analysis.IHeaderMatcher.Builder[] { matcherRefBuilder2, anyBuilder5, notBuilder6, matcherRefBuilder57 };
        java.util.ArrayList<org.apache.rat.analysis.IHeaderMatcher.Builder> builderList59 = new java.util.ArrayList<org.apache.rat.analysis.IHeaderMatcher.Builder>();
        boolean boolean60 = java.util.Collections.addAll((java.util.Collection<org.apache.rat.analysis.IHeaderMatcher.Builder>) builderList59, builderArray58);
        org.apache.rat.configuration.builders.AbstractBuilder abstractBuilder61 = allBuilder1.add((java.util.Collection<org.apache.rat.analysis.IHeaderMatcher.Builder>) builderList59);
        defaultLog0.info((java.lang.Object) allBuilder1);
        org.apache.rat.annotation.ApacheV2LicenseAppender apacheV2LicenseAppender64 = new org.apache.rat.annotation.ApacheV2LicenseAppender((org.apache.rat.utils.Log) defaultLog0, "true");
        org.apache.rat.annotation.ApacheV2LicenseAppender apacheV2LicenseAppender65 = new org.apache.rat.annotation.ApacheV2LicenseAppender((org.apache.rat.utils.Log) defaultLog0);
        org.apache.rat.ReportConfiguration reportConfiguration66 = new org.apache.rat.ReportConfiguration((org.apache.rat.utils.Log) defaultLog0);
        org.apache.rat.annotation.ApacheV2LicenseAppender apacheV2LicenseAppender68 = new org.apache.rat.annotation.ApacheV2LicenseAppender((org.apache.rat.utils.Log) defaultLog0, "MathcerRefBuilder: RegexBuilder: null");
        org.apache.rat.annotation.ApacheV2LicenseAppender apacheV2LicenseAppender69 = new org.apache.rat.annotation.ApacheV2LicenseAppender((org.apache.rat.utils.Log) defaultLog0);
        java.util.regex.Pattern pattern71 = null;
        org.apache.rat.analysis.matchers.SimpleRegexMatcher simpleRegexMatcher72 = new org.apache.rat.analysis.matchers.SimpleRegexMatcher("", pattern71);
        simpleRegexMatcher72.reset();
        java.lang.String str74 = simpleRegexMatcher72.getId();
        org.apache.rat.analysis.matchers.NotMatcher notMatcher75 = new org.apache.rat.analysis.matchers.NotMatcher((org.apache.rat.analysis.IHeaderMatcher) simpleRegexMatcher72);
        simpleRegexMatcher72.reset();
        java.lang.Throwable throwable77 = null;
        // The following exception was thrown during execution in test generation
        try {
            defaultLog0.info((java.lang.Object) simpleRegexMatcher72, throwable77);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(defaultLog0);
        org.junit.Assert.assertNotNull(matcherRefBuilder2);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "MathcerRefBuilder: null" + "'", str4, "MathcerRefBuilder: null");
        org.junit.Assert.assertNotNull(anyBuilder5);
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "NotBuilder: null" + "'", str7, "NotBuilder: null");
        org.junit.Assert.assertNotNull(matcherRefBuilder8);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertNotNull(matcherRefBuilder11);
        org.junit.Assert.assertNotNull(copyrightBuilder13);
        org.junit.Assert.assertNotNull(copyrightBuilder15);
        org.junit.Assert.assertEquals("'" + str16 + "' != '" + "Copyright Builder: s:OASIS e:null o:null" + "'", str16, "Copyright Builder: s:OASIS e:null o:null");
        org.junit.Assert.assertNotNull(copyrightBuilder18);
        org.junit.Assert.assertNotNull(matcherRefBuilder19);
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + false + "'", boolean20 == false);
        org.junit.Assert.assertNotNull(copyrightBuilder21);
        org.junit.Assert.assertNotNull(copyrightBuilder23);
        org.junit.Assert.assertEquals("'" + str24 + "' != '" + "Copyright Builder: s:OASIS e:null o:null" + "'", str24, "Copyright Builder: s:OASIS e:null o:null");
        org.junit.Assert.assertNotNull(copyrightBuilder26);
        org.junit.Assert.assertNotNull(copyrightBuilder27);
        org.junit.Assert.assertNotNull(copyrightBuilder28);
        org.junit.Assert.assertEquals("'" + str29 + "' != '" + "Copyright Builder: s:null e:null o:null" + "'", str29, "Copyright Builder: s:null e:null o:null");
        org.junit.Assert.assertNotNull(copyrightBuilder31);
        org.junit.Assert.assertTrue("'" + boolean32 + "' != '" + false + "'", boolean32 == false);
        org.junit.Assert.assertNotNull(copyrightBuilder33);
        org.junit.Assert.assertEquals("'" + str34 + "' != '" + "Copyright Builder: s:null e:null o:null" + "'", str34, "Copyright Builder: s:null e:null o:null");
        org.junit.Assert.assertNotNull(copyrightBuilder36);
        org.junit.Assert.assertTrue("'" + boolean37 + "' != '" + false + "'", boolean37 == false);
        org.junit.Assert.assertEquals("'" + str38 + "' != '" + "Copyright Builder: s:null e:.cvsignore o:null" + "'", str38, "Copyright Builder: s:null e:.cvsignore o:null");
        org.junit.Assert.assertNotNull(copyrightBuilder39);
        org.junit.Assert.assertNotNull(copyrightBuilder41);
        org.junit.Assert.assertNotNull(anyBuilder42);
        org.junit.Assert.assertNotNull(matcherRefBuilder43);
        org.junit.Assert.assertTrue("'" + boolean44 + "' != '" + false + "'", boolean44 == false);
        org.junit.Assert.assertNotNull(matcherRefBuilder46);
        org.junit.Assert.assertNotNull(copyrightBuilder47);
        org.junit.Assert.assertNotNull(matcherRefBuilder48);
        org.junit.Assert.assertTrue("'" + boolean49 + "' != '" + false + "'", boolean49 == false);
        org.junit.Assert.assertEquals("'" + str50 + "' != '" + "MathcerRefBuilder: null" + "'", str50, "MathcerRefBuilder: null");
        org.junit.Assert.assertNotNull(matcherRefBuilder52);
        org.junit.Assert.assertNotNull(builderArray53);
        org.junit.Assert.assertTrue("'" + boolean55 + "' != '" + true + "'", boolean55 == true);
        org.junit.Assert.assertNotNull(abstractBuilder56);
        org.junit.Assert.assertNotNull(builderArray58);
        org.junit.Assert.assertTrue("'" + boolean60 + "' != '" + true + "'", boolean60 == true);
        org.junit.Assert.assertNotNull(abstractBuilder61);
// flaky:         org.junit.Assert.assertEquals("'" + str74 + "' != '" + "4e0f27c7-cb40-4336-9782-3fe0867e039e" + "'", str74, "4e0f27c7-cb40-4336-9782-3fe0867e039e");
    }

    @Test
    public void test12559() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest25.test12559");
        org.apache.rat.utils.Log log0 = null;
        org.apache.rat.ReportConfiguration reportConfiguration1 = new org.apache.rat.ReportConfiguration(log0);
        org.apache.rat.report.claim.ClaimStatistic claimStatistic2 = org.apache.rat.Reporter.report(reportConfiguration1);
        org.apache.rat.utils.ReportingSet.Options options3 = org.apache.rat.utils.ReportingSet.Options.OVERWRITE;
        reportConfiguration1.licenseDuplicateOption(options3);
        org.apache.rat.license.ILicenseFamily iLicenseFamily5 = null;
        reportConfiguration1.addFamily(iLicenseFamily5);
        org.apache.rat.utils.Log log7 = null;
        org.apache.rat.ReportConfiguration reportConfiguration8 = new org.apache.rat.ReportConfiguration(log7);
        java.io.FilenameFilter filenameFilter9 = reportConfiguration8.getInputFileFilter();
        org.apache.rat.license.LicenseSetFactory.LicenseFilter licenseFilter10 = org.apache.rat.license.LicenseSetFactory.LicenseFilter.all;
        java.util.SortedSet<org.apache.rat.license.ILicense> iLicenseSet11 = reportConfiguration8.getLicenses(licenseFilter10);
        org.apache.rat.config.AddLicenseHeaders addLicenseHeaders12 = org.apache.rat.config.AddLicenseHeaders.FALSE;
        reportConfiguration8.setAddLicenseHeaders(addLicenseHeaders12);
        org.apache.rat.utils.Log log14 = null;
        org.apache.rat.ReportConfiguration reportConfiguration15 = new org.apache.rat.ReportConfiguration(log14);
        org.apache.rat.report.claim.ClaimStatistic claimStatistic16 = org.apache.rat.Reporter.report(reportConfiguration15);
        org.apache.rat.license.LicenseSetFactory.LicenseFilter licenseFilter17 = org.apache.rat.license.LicenseSetFactory.LicenseFilter.all;
        org.apache.rat.Reporter.listLicenses(reportConfiguration15, licenseFilter17);
        org.apache.rat.Reporter.listLicenses(reportConfiguration8, licenseFilter17);
        org.apache.rat.utils.Log log20 = null;
        org.apache.rat.ReportConfiguration reportConfiguration21 = new org.apache.rat.ReportConfiguration(log20);
        java.io.FilenameFilter filenameFilter22 = reportConfiguration21.getInputFileFilter();
        org.apache.rat.license.LicenseSetFactory.LicenseFilter licenseFilter23 = org.apache.rat.license.LicenseSetFactory.LicenseFilter.all;
        java.util.SortedSet<org.apache.rat.license.ILicense> iLicenseSet24 = reportConfiguration21.getLicenses(licenseFilter23);
        org.apache.rat.config.AddLicenseHeaders addLicenseHeaders25 = org.apache.rat.config.AddLicenseHeaders.FALSE;
        reportConfiguration21.setAddLicenseHeaders(addLicenseHeaders25);
        org.apache.rat.utils.Log log27 = null;
        org.apache.rat.ReportConfiguration reportConfiguration28 = new org.apache.rat.ReportConfiguration(log27);
        org.apache.rat.report.claim.ClaimStatistic claimStatistic29 = org.apache.rat.Reporter.report(reportConfiguration28);
        org.apache.rat.license.LicenseSetFactory.LicenseFilter licenseFilter30 = org.apache.rat.license.LicenseSetFactory.LicenseFilter.all;
        org.apache.rat.Reporter.listLicenses(reportConfiguration28, licenseFilter30);
        org.apache.rat.Reporter.listLicenses(reportConfiguration21, licenseFilter30);
        org.apache.rat.Reporter.listLicenses(reportConfiguration8, licenseFilter30);
        java.io.FilenameFilter filenameFilter34 = reportConfiguration8.getInputFileFilter();
        org.apache.rat.utils.Log log35 = null;
        org.apache.rat.ReportConfiguration reportConfiguration36 = new org.apache.rat.ReportConfiguration(log35);
        java.io.FilenameFilter filenameFilter37 = reportConfiguration36.getInputFileFilter();
        org.apache.rat.license.LicenseSetFactory.LicenseFilter licenseFilter38 = org.apache.rat.license.LicenseSetFactory.LicenseFilter.all;
        java.util.SortedSet<org.apache.rat.license.ILicense> iLicenseSet39 = reportConfiguration36.getLicenses(licenseFilter38);
        org.apache.rat.config.AddLicenseHeaders addLicenseHeaders40 = org.apache.rat.config.AddLicenseHeaders.FALSE;
        reportConfiguration36.setAddLicenseHeaders(addLicenseHeaders40);
        org.apache.rat.utils.Log log42 = null;
        org.apache.rat.ReportConfiguration reportConfiguration43 = new org.apache.rat.ReportConfiguration(log42);
        org.apache.rat.report.claim.ClaimStatistic claimStatistic44 = org.apache.rat.Reporter.report(reportConfiguration43);
        org.apache.rat.license.LicenseSetFactory.LicenseFilter licenseFilter45 = org.apache.rat.license.LicenseSetFactory.LicenseFilter.all;
        org.apache.rat.Reporter.listLicenses(reportConfiguration43, licenseFilter45);
        org.apache.rat.Reporter.listLicenses(reportConfiguration36, licenseFilter45);
        org.apache.rat.utils.Log log48 = null;
        org.apache.rat.ReportConfiguration reportConfiguration49 = new org.apache.rat.ReportConfiguration(log48);
        java.io.FilenameFilter filenameFilter50 = reportConfiguration49.getInputFileFilter();
        org.apache.rat.license.LicenseSetFactory.LicenseFilter licenseFilter51 = org.apache.rat.license.LicenseSetFactory.LicenseFilter.all;
        java.util.SortedSet<org.apache.rat.license.ILicense> iLicenseSet52 = reportConfiguration49.getLicenses(licenseFilter51);
        org.apache.rat.config.AddLicenseHeaders addLicenseHeaders53 = org.apache.rat.config.AddLicenseHeaders.FALSE;
        reportConfiguration49.setAddLicenseHeaders(addLicenseHeaders53);
        org.apache.rat.utils.Log log55 = null;
        org.apache.rat.ReportConfiguration reportConfiguration56 = new org.apache.rat.ReportConfiguration(log55);
        org.apache.rat.report.claim.ClaimStatistic claimStatistic57 = org.apache.rat.Reporter.report(reportConfiguration56);
        org.apache.rat.license.LicenseSetFactory.LicenseFilter licenseFilter58 = org.apache.rat.license.LicenseSetFactory.LicenseFilter.all;
        org.apache.rat.Reporter.listLicenses(reportConfiguration56, licenseFilter58);
        org.apache.rat.Reporter.listLicenses(reportConfiguration49, licenseFilter58);
        org.apache.rat.Reporter.listLicenses(reportConfiguration36, licenseFilter58);
        java.util.SortedSet<org.apache.rat.license.ILicense> iLicenseSet62 = reportConfiguration8.getLicenses(licenseFilter58);
        boolean boolean63 = reportConfiguration8.isAddingLicensesForced();
        org.apache.rat.utils.Log log64 = null;
        org.apache.rat.ReportConfiguration reportConfiguration65 = new org.apache.rat.ReportConfiguration(log64);
        org.apache.rat.report.claim.ClaimStatistic claimStatistic66 = org.apache.rat.Reporter.report(reportConfiguration65);
        org.apache.rat.utils.Log log67 = null;
        org.apache.rat.ReportConfiguration reportConfiguration68 = new org.apache.rat.ReportConfiguration(log67);
        org.apache.rat.report.claim.ClaimStatistic claimStatistic69 = org.apache.rat.Reporter.report(reportConfiguration68);
        org.apache.rat.utils.ReportingSet.Options options70 = org.apache.rat.utils.ReportingSet.Options.OVERWRITE;
        reportConfiguration68.licenseDuplicateOption(options70);
        reportConfiguration65.familyDuplicateOption(options70);
        reportConfiguration8.familyDuplicateOption(options70);
        reportConfiguration1.licenseDuplicateOption(options70);
        org.apache.rat.license.ILicense iLicense75 = null;
        reportConfiguration1.addLicense(iLicense75);
        java.util.SortedSet<java.lang.String> strSet77 = reportConfiguration1.getApprovedLicenseCategories();
        java.lang.String str78 = reportConfiguration1.getCopyrightMessage();
        org.apache.rat.report.IReportable iReportable79 = null;
        reportConfiguration1.setReportable(iReportable79);
        java.io.FilenameFilter filenameFilter81 = reportConfiguration1.getInputFileFilter();
        org.junit.Assert.assertNull(claimStatistic2);
        org.junit.Assert.assertTrue("'" + options3 + "' != '" + org.apache.rat.utils.ReportingSet.Options.OVERWRITE + "'", options3.equals(org.apache.rat.utils.ReportingSet.Options.OVERWRITE));
        org.junit.Assert.assertNull(filenameFilter9);
        org.junit.Assert.assertTrue("'" + licenseFilter10 + "' != '" + org.apache.rat.license.LicenseSetFactory.LicenseFilter.all + "'", licenseFilter10.equals(org.apache.rat.license.LicenseSetFactory.LicenseFilter.all));
        org.junit.Assert.assertNotNull(iLicenseSet11);
        org.junit.Assert.assertTrue("'" + addLicenseHeaders12 + "' != '" + org.apache.rat.config.AddLicenseHeaders.FALSE + "'", addLicenseHeaders12.equals(org.apache.rat.config.AddLicenseHeaders.FALSE));
        org.junit.Assert.assertNull(claimStatistic16);
        org.junit.Assert.assertTrue("'" + licenseFilter17 + "' != '" + org.apache.rat.license.LicenseSetFactory.LicenseFilter.all + "'", licenseFilter17.equals(org.apache.rat.license.LicenseSetFactory.LicenseFilter.all));
        org.junit.Assert.assertNull(filenameFilter22);
        org.junit.Assert.assertTrue("'" + licenseFilter23 + "' != '" + org.apache.rat.license.LicenseSetFactory.LicenseFilter.all + "'", licenseFilter23.equals(org.apache.rat.license.LicenseSetFactory.LicenseFilter.all));
        org.junit.Assert.assertNotNull(iLicenseSet24);
        org.junit.Assert.assertTrue("'" + addLicenseHeaders25 + "' != '" + org.apache.rat.config.AddLicenseHeaders.FALSE + "'", addLicenseHeaders25.equals(org.apache.rat.config.AddLicenseHeaders.FALSE));
        org.junit.Assert.assertNull(claimStatistic29);
        org.junit.Assert.assertTrue("'" + licenseFilter30 + "' != '" + org.apache.rat.license.LicenseSetFactory.LicenseFilter.all + "'", licenseFilter30.equals(org.apache.rat.license.LicenseSetFactory.LicenseFilter.all));
        org.junit.Assert.assertNull(filenameFilter34);
        org.junit.Assert.assertNull(filenameFilter37);
        org.junit.Assert.assertTrue("'" + licenseFilter38 + "' != '" + org.apache.rat.license.LicenseSetFactory.LicenseFilter.all + "'", licenseFilter38.equals(org.apache.rat.license.LicenseSetFactory.LicenseFilter.all));
        org.junit.Assert.assertNotNull(iLicenseSet39);
        org.junit.Assert.assertTrue("'" + addLicenseHeaders40 + "' != '" + org.apache.rat.config.AddLicenseHeaders.FALSE + "'", addLicenseHeaders40.equals(org.apache.rat.config.AddLicenseHeaders.FALSE));
        org.junit.Assert.assertNull(claimStatistic44);
        org.junit.Assert.assertTrue("'" + licenseFilter45 + "' != '" + org.apache.rat.license.LicenseSetFactory.LicenseFilter.all + "'", licenseFilter45.equals(org.apache.rat.license.LicenseSetFactory.LicenseFilter.all));
        org.junit.Assert.assertNull(filenameFilter50);
        org.junit.Assert.assertTrue("'" + licenseFilter51 + "' != '" + org.apache.rat.license.LicenseSetFactory.LicenseFilter.all + "'", licenseFilter51.equals(org.apache.rat.license.LicenseSetFactory.LicenseFilter.all));
        org.junit.Assert.assertNotNull(iLicenseSet52);
        org.junit.Assert.assertTrue("'" + addLicenseHeaders53 + "' != '" + org.apache.rat.config.AddLicenseHeaders.FALSE + "'", addLicenseHeaders53.equals(org.apache.rat.config.AddLicenseHeaders.FALSE));
        org.junit.Assert.assertNull(claimStatistic57);
        org.junit.Assert.assertTrue("'" + licenseFilter58 + "' != '" + org.apache.rat.license.LicenseSetFactory.LicenseFilter.all + "'", licenseFilter58.equals(org.apache.rat.license.LicenseSetFactory.LicenseFilter.all));
        org.junit.Assert.assertNotNull(iLicenseSet62);
        org.junit.Assert.assertTrue("'" + boolean63 + "' != '" + false + "'", boolean63 == false);
        org.junit.Assert.assertNull(claimStatistic66);
        org.junit.Assert.assertNull(claimStatistic69);
        org.junit.Assert.assertTrue("'" + options70 + "' != '" + org.apache.rat.utils.ReportingSet.Options.OVERWRITE + "'", options70.equals(org.apache.rat.utils.ReportingSet.Options.OVERWRITE));
        org.junit.Assert.assertNotNull(strSet77);
        org.junit.Assert.assertNull(str78);
        org.junit.Assert.assertNull(filenameFilter81);
    }

    @Test
    public void test12560() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest25.test12560");
        java.lang.String[] strArray5 = new java.lang.String[] { "http://org/apache/rat/meta-data#LicenseFamilyCategory", "Datum [ name ='http://org/apache/rat/meta-data#LicenseFamilyCategory',value ='GPL1  ']", "MANIFEST.MF", "AllBuilder:", "The MIT License" };
        org.apache.rat.utils.ReportingSet<java.lang.String> strSet6 = new org.apache.rat.utils.ReportingSet<java.lang.String>();
        boolean boolean7 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strSet6, strArray5);
        boolean boolean9 = strSet6.addIfNotPresent("http://org/apache/rat/meta-data#LicenseFamilyName");
        boolean boolean11 = strSet6.addIfNotPresent("ef7a8b13-64c3-4510-bb0c-dbf208e1e73f");
        java.util.stream.Stream<java.lang.String> strStream12 = strSet6.stream();
        org.apache.rat.utils.DefaultLog defaultLog13 = org.apache.rat.utils.DefaultLog.INSTANCE;
        org.apache.rat.utils.Log log14 = null;
        org.apache.rat.ReportConfiguration reportConfiguration15 = new org.apache.rat.ReportConfiguration(log14);
        reportConfiguration15.addApprovedLicenseCategory(".cvsignore");
        org.apache.rat.utils.Log.Level level18 = org.apache.rat.utils.Log.Level.ERROR;
        reportConfiguration15.logFamilyCollisions(level18);
        defaultLog13.setLevel(level18);
        org.apache.rat.utils.ReportingSet<java.lang.String> strSet21 = strSet6.setLogLevel(level18);
        org.apache.rat.utils.ReportingSet<java.lang.String> strSet23 = strSet6.headSet("d4148d3a-edbc-4672-b347-0fa619553f91");
        org.apache.rat.utils.Log log24 = null;
        org.apache.rat.ReportConfiguration reportConfiguration25 = new org.apache.rat.ReportConfiguration(log24);
        org.apache.rat.report.claim.ClaimStatistic claimStatistic26 = org.apache.rat.Reporter.report(reportConfiguration25);
        org.apache.rat.report.IReportable iReportable27 = null;
        reportConfiguration25.setReportable(iReportable27);
        org.apache.rat.utils.Log log29 = null;
        org.apache.rat.ReportConfiguration reportConfiguration30 = new org.apache.rat.ReportConfiguration(log29);
        java.io.FilenameFilter filenameFilter31 = reportConfiguration30.getInputFileFilter();
        org.apache.rat.license.LicenseSetFactory.LicenseFilter licenseFilter32 = org.apache.rat.license.LicenseSetFactory.LicenseFilter.all;
        java.util.SortedSet<org.apache.rat.license.ILicense> iLicenseSet33 = reportConfiguration30.getLicenses(licenseFilter32);
        org.apache.rat.config.AddLicenseHeaders addLicenseHeaders34 = org.apache.rat.config.AddLicenseHeaders.FALSE;
        reportConfiguration30.setAddLicenseHeaders(addLicenseHeaders34);
        org.apache.rat.utils.Log log36 = null;
        org.apache.rat.ReportConfiguration reportConfiguration37 = new org.apache.rat.ReportConfiguration(log36);
        org.apache.rat.report.claim.ClaimStatistic claimStatistic38 = org.apache.rat.Reporter.report(reportConfiguration37);
        org.apache.rat.license.LicenseSetFactory.LicenseFilter licenseFilter39 = org.apache.rat.license.LicenseSetFactory.LicenseFilter.all;
        org.apache.rat.Reporter.listLicenses(reportConfiguration37, licenseFilter39);
        org.apache.rat.Reporter.listLicenses(reportConfiguration30, licenseFilter39);
        org.apache.rat.utils.Log log42 = null;
        org.apache.rat.ReportConfiguration reportConfiguration43 = new org.apache.rat.ReportConfiguration(log42);
        java.io.FilenameFilter filenameFilter44 = reportConfiguration43.getInputFileFilter();
        org.apache.rat.license.LicenseSetFactory.LicenseFilter licenseFilter45 = org.apache.rat.license.LicenseSetFactory.LicenseFilter.all;
        java.util.SortedSet<org.apache.rat.license.ILicense> iLicenseSet46 = reportConfiguration43.getLicenses(licenseFilter45);
        org.apache.rat.config.AddLicenseHeaders addLicenseHeaders47 = org.apache.rat.config.AddLicenseHeaders.FALSE;
        reportConfiguration43.setAddLicenseHeaders(addLicenseHeaders47);
        org.apache.rat.utils.Log log49 = null;
        org.apache.rat.ReportConfiguration reportConfiguration50 = new org.apache.rat.ReportConfiguration(log49);
        org.apache.rat.report.claim.ClaimStatistic claimStatistic51 = org.apache.rat.Reporter.report(reportConfiguration50);
        org.apache.rat.license.LicenseSetFactory.LicenseFilter licenseFilter52 = org.apache.rat.license.LicenseSetFactory.LicenseFilter.all;
        org.apache.rat.Reporter.listLicenses(reportConfiguration50, licenseFilter52);
        org.apache.rat.Reporter.listLicenses(reportConfiguration43, licenseFilter52);
        org.apache.rat.Reporter.listLicenses(reportConfiguration30, licenseFilter52);
        org.apache.rat.utils.Log log56 = null;
        org.apache.rat.ReportConfiguration reportConfiguration57 = new org.apache.rat.ReportConfiguration(log56);
        org.apache.commons.io.function.IOSupplier<java.io.OutputStream> outputStreamIOSupplier58 = reportConfiguration57.getOutput();
        reportConfiguration30.setOut(outputStreamIOSupplier58);
        org.apache.rat.utils.Log log60 = null;
        org.apache.rat.ReportConfiguration reportConfiguration61 = new org.apache.rat.ReportConfiguration(log60);
        org.apache.rat.report.claim.ClaimStatistic claimStatistic62 = org.apache.rat.Reporter.report(reportConfiguration61);
        org.apache.rat.utils.Log log63 = null;
        org.apache.rat.ReportConfiguration reportConfiguration64 = new org.apache.rat.ReportConfiguration(log63);
        org.apache.rat.report.claim.ClaimStatistic claimStatistic65 = org.apache.rat.Reporter.report(reportConfiguration64);
        org.apache.rat.utils.ReportingSet.Options options66 = org.apache.rat.utils.ReportingSet.Options.OVERWRITE;
        reportConfiguration64.licenseDuplicateOption(options66);
        reportConfiguration61.familyDuplicateOption(options66);
        reportConfiguration30.licenseDuplicateOption(options66);
        reportConfiguration25.familyDuplicateOption(options66);
        org.apache.rat.utils.ReportingSet<java.lang.String> strSet71 = strSet6.setDuplicateOption(options66);
        java.lang.String str72 = strSet6.first();
        boolean boolean74 = strSet6.remove((java.lang.Object) "PLAIN");
        java.util.function.Function<java.lang.String, java.lang.String> strFunction75 = null;
        org.apache.rat.utils.ReportingSet<java.lang.String> strSet76 = strSet6.setMsgFormat(strFunction75);
        org.apache.rat.utils.ReportingSet<java.lang.String> strSet78 = strSet6.tailSet("Datum");
        strSet6.clear();
        org.junit.Assert.assertNotNull(strArray5);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + true + "'", boolean7 == true);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + true + "'", boolean9 == true);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + true + "'", boolean11 == true);
        org.junit.Assert.assertNotNull(strStream12);
        org.junit.Assert.assertNotNull(defaultLog13);
        org.junit.Assert.assertTrue("'" + level18 + "' != '" + org.apache.rat.utils.Log.Level.ERROR + "'", level18.equals(org.apache.rat.utils.Log.Level.ERROR));
        org.junit.Assert.assertNotNull(strSet21);
        org.junit.Assert.assertNotNull(strSet23);
        org.junit.Assert.assertNull(claimStatistic26);
        org.junit.Assert.assertNull(filenameFilter31);
        org.junit.Assert.assertTrue("'" + licenseFilter32 + "' != '" + org.apache.rat.license.LicenseSetFactory.LicenseFilter.all + "'", licenseFilter32.equals(org.apache.rat.license.LicenseSetFactory.LicenseFilter.all));
        org.junit.Assert.assertNotNull(iLicenseSet33);
        org.junit.Assert.assertTrue("'" + addLicenseHeaders34 + "' != '" + org.apache.rat.config.AddLicenseHeaders.FALSE + "'", addLicenseHeaders34.equals(org.apache.rat.config.AddLicenseHeaders.FALSE));
        org.junit.Assert.assertNull(claimStatistic38);
        org.junit.Assert.assertTrue("'" + licenseFilter39 + "' != '" + org.apache.rat.license.LicenseSetFactory.LicenseFilter.all + "'", licenseFilter39.equals(org.apache.rat.license.LicenseSetFactory.LicenseFilter.all));
        org.junit.Assert.assertNull(filenameFilter44);
        org.junit.Assert.assertTrue("'" + licenseFilter45 + "' != '" + org.apache.rat.license.LicenseSetFactory.LicenseFilter.all + "'", licenseFilter45.equals(org.apache.rat.license.LicenseSetFactory.LicenseFilter.all));
        org.junit.Assert.assertNotNull(iLicenseSet46);
        org.junit.Assert.assertTrue("'" + addLicenseHeaders47 + "' != '" + org.apache.rat.config.AddLicenseHeaders.FALSE + "'", addLicenseHeaders47.equals(org.apache.rat.config.AddLicenseHeaders.FALSE));
        org.junit.Assert.assertNull(claimStatistic51);
        org.junit.Assert.assertTrue("'" + licenseFilter52 + "' != '" + org.apache.rat.license.LicenseSetFactory.LicenseFilter.all + "'", licenseFilter52.equals(org.apache.rat.license.LicenseSetFactory.LicenseFilter.all));
        org.junit.Assert.assertNotNull(outputStreamIOSupplier58);
        org.junit.Assert.assertNull(claimStatistic62);
        org.junit.Assert.assertNull(claimStatistic65);
        org.junit.Assert.assertTrue("'" + options66 + "' != '" + org.apache.rat.utils.ReportingSet.Options.OVERWRITE + "'", options66.equals(org.apache.rat.utils.ReportingSet.Options.OVERWRITE));
        org.junit.Assert.assertNotNull(strSet71);
        org.junit.Assert.assertEquals("'" + str72 + "' != '" + "AllBuilder:" + "'", str72, "AllBuilder:");
        org.junit.Assert.assertTrue("'" + boolean74 + "' != '" + false + "'", boolean74 == false);
        org.junit.Assert.assertNotNull(strSet76);
        org.junit.Assert.assertNotNull(strSet78);
    }

    @Test
    public void test12561() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest25.test12561");
        org.apache.rat.utils.ReportingSet<java.lang.String> strSet0 = new org.apache.rat.utils.ReportingSet<java.lang.String>();
        org.apache.rat.utils.ReportingSet<java.lang.String> strSet2 = strSet0.tailSet("hi!");
        java.util.stream.Stream<java.lang.String> strStream3 = strSet2.parallelStream();
        org.apache.rat.utils.DefaultLog defaultLog4 = org.apache.rat.utils.DefaultLog.INSTANCE;
        org.apache.rat.annotation.ApacheV2LicenseAppender apacheV2LicenseAppender5 = new org.apache.rat.annotation.ApacheV2LicenseAppender((org.apache.rat.utils.Log) defaultLog4);
        org.apache.rat.utils.Log log6 = null;
        org.apache.rat.ReportConfiguration reportConfiguration7 = new org.apache.rat.ReportConfiguration(log6);
        org.apache.rat.report.claim.ClaimStatistic claimStatistic8 = org.apache.rat.Reporter.report(reportConfiguration7);
        org.apache.rat.utils.Log log9 = null;
        org.apache.rat.ReportConfiguration reportConfiguration10 = new org.apache.rat.ReportConfiguration(log9);
        org.apache.rat.report.claim.ClaimStatistic claimStatistic11 = org.apache.rat.Reporter.report(reportConfiguration10);
        org.apache.rat.utils.ReportingSet.Options options12 = org.apache.rat.utils.ReportingSet.Options.OVERWRITE;
        reportConfiguration10.licenseDuplicateOption(options12);
        reportConfiguration7.familyDuplicateOption(options12);
        org.apache.commons.io.function.IOSupplier<java.io.PrintWriter> printWriterIOSupplier15 = reportConfiguration7.getWriter();
        org.apache.rat.utils.Log log16 = null;
        org.apache.rat.ReportConfiguration reportConfiguration17 = new org.apache.rat.ReportConfiguration(log16);
        reportConfiguration17.addApprovedLicenseCategory(".cvsignore");
        org.apache.rat.utils.Log.Level level20 = org.apache.rat.utils.Log.Level.ERROR;
        reportConfiguration17.logFamilyCollisions(level20);
        reportConfiguration7.logFamilyCollisions(level20);
        org.apache.rat.Defaults.Builder builder23 = org.apache.rat.Defaults.builder();
        org.apache.rat.Defaults.Builder builder24 = builder23.noDefault();
        defaultLog4.log(level20, (java.lang.Object) builder23);
        org.apache.rat.utils.DefaultLog defaultLog26 = org.apache.rat.utils.DefaultLog.INSTANCE;
        org.apache.rat.license.ILicense.Builder builder27 = org.apache.rat.license.ILicense.builder();
        org.apache.rat.license.ILicense.Builder builder29 = builder27.setLicenseFamilyCategory("");
        org.apache.rat.analysis.matchers.CopyrightMatcher copyrightMatcher33 = new org.apache.rat.analysis.matchers.CopyrightMatcher("", "GPL1 ", "hi!");
        org.apache.rat.analysis.IHeaderMatcher.State state34 = copyrightMatcher33.finalizeState();
        org.apache.rat.license.ILicense.Builder builder35 = builder29.setMatcher((org.apache.rat.analysis.IHeaderMatcher) copyrightMatcher33);
        org.apache.rat.license.ILicense.Builder builder37 = builder35.setLicenseFamilyCategory("");
        defaultLog26.error((java.lang.Object) builder37);
        org.apache.rat.utils.Log.Level level39 = org.apache.rat.utils.Log.Level.DEBUG;
        defaultLog26.setLevel(level39);
        defaultLog4.log(level39, "The MIT License");
        org.apache.rat.utils.Log.Level level43 = org.apache.rat.utils.Log.Level.DEBUG;
        defaultLog4.log(level43, "W3C Document Copyright");
        org.apache.rat.utils.Log.Level level46 = defaultLog4.getLevel();
        org.apache.rat.utils.ReportingSet<java.lang.String> strSet47 = strSet2.setLog((org.apache.rat.utils.Log) defaultLog4);
        java.lang.Object[] objArray48 = strSet2.toArray();
        java.util.Comparator<? super java.lang.String> wildcardComparator49 = strSet2.comparator();
        org.junit.Assert.assertNotNull(strSet2);
        org.junit.Assert.assertNotNull(strStream3);
        org.junit.Assert.assertNotNull(defaultLog4);
        org.junit.Assert.assertNull(claimStatistic8);
        org.junit.Assert.assertNull(claimStatistic11);
        org.junit.Assert.assertTrue("'" + options12 + "' != '" + org.apache.rat.utils.ReportingSet.Options.OVERWRITE + "'", options12.equals(org.apache.rat.utils.ReportingSet.Options.OVERWRITE));
        org.junit.Assert.assertNotNull(printWriterIOSupplier15);
        org.junit.Assert.assertTrue("'" + level20 + "' != '" + org.apache.rat.utils.Log.Level.ERROR + "'", level20.equals(org.apache.rat.utils.Log.Level.ERROR));
        org.junit.Assert.assertNotNull(builder23);
        org.junit.Assert.assertNotNull(builder24);
        org.junit.Assert.assertNotNull(defaultLog26);
        org.junit.Assert.assertNotNull(builder27);
        org.junit.Assert.assertNotNull(builder29);
        org.junit.Assert.assertTrue("'" + state34 + "' != '" + org.apache.rat.analysis.IHeaderMatcher.State.f + "'", state34.equals(org.apache.rat.analysis.IHeaderMatcher.State.f));
        org.junit.Assert.assertNotNull(builder35);
        org.junit.Assert.assertNotNull(builder37);
        org.junit.Assert.assertTrue("'" + level39 + "' != '" + org.apache.rat.utils.Log.Level.DEBUG + "'", level39.equals(org.apache.rat.utils.Log.Level.DEBUG));
        org.junit.Assert.assertTrue("'" + level43 + "' != '" + org.apache.rat.utils.Log.Level.DEBUG + "'", level43.equals(org.apache.rat.utils.Log.Level.DEBUG));
        org.junit.Assert.assertTrue("'" + level46 + "' != '" + org.apache.rat.utils.Log.Level.DEBUG + "'", level46.equals(org.apache.rat.utils.Log.Level.DEBUG));
        org.junit.Assert.assertNotNull(strSet47);
        org.junit.Assert.assertNotNull(objArray48);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray48), "[]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray48), "[]");
        org.junit.Assert.assertNull(wildcardComparator49);
    }

    @Test
    public void test12562() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest25.test12562");
        org.apache.rat.configuration.builders.NotBuilder notBuilder0 = org.apache.rat.analysis.IHeaderMatcher.Builder.not();
        java.lang.String str1 = notBuilder0.toString();
        java.lang.String str2 = notBuilder0.toString();
        java.lang.String str3 = notBuilder0.toString();
        java.util.List<org.apache.rat.analysis.IHeaderMatcher> iHeaderMatcherList4 = notBuilder0.getChildren();
        // The following exception was thrown during execution in test generation
        try {
            org.apache.rat.analysis.IHeaderMatcher iHeaderMatcher5 = notBuilder0.build();
            org.junit.Assert.fail("Expected exception of type org.apache.rat.ConfigurationException; message: 'not' type matcher requires one and only one enclosed matcher");
        } catch (org.apache.rat.ConfigurationException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(notBuilder0);
        org.junit.Assert.assertEquals("'" + str1 + "' != '" + "NotBuilder: null" + "'", str1, "NotBuilder: null");
        org.junit.Assert.assertEquals("'" + str2 + "' != '" + "NotBuilder: null" + "'", str2, "NotBuilder: null");
        org.junit.Assert.assertEquals("'" + str3 + "' != '" + "NotBuilder: null" + "'", str3, "NotBuilder: null");
        org.junit.Assert.assertNotNull(iHeaderMatcherList4);
    }

    @Test
    public void test12563() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest25.test12563");
        org.apache.rat.license.ILicense.Builder builder0 = org.apache.rat.license.ILicense.builder();
        org.apache.rat.license.ILicense.Builder builder2 = builder0.setLicenseFamilyCategory("");
        org.apache.rat.license.ILicense.Builder builder4 = builder2.setDerivedFrom("GEN  ");
        org.apache.rat.license.ILicense.Builder builder6 = builder4.setId("DOJO ");
        org.apache.rat.configuration.builders.CopyrightBuilder copyrightBuilder7 = org.apache.rat.analysis.IHeaderMatcher.Builder.copyright();
        java.lang.String str8 = copyrightBuilder7.toString();
        org.apache.rat.license.ILicense.Builder builder9 = builder4.setMatcher((org.apache.rat.analysis.IHeaderMatcher.Builder) copyrightBuilder7);
        org.apache.rat.configuration.builders.CopyrightBuilder copyrightBuilder11 = copyrightBuilder7.setEnd("d25f13bc-1910-4451-97b5-b72663551a5d");
        org.apache.rat.configuration.builders.AbstractBuilder abstractBuilder13 = copyrightBuilder7.setId("3e2b228d-d5ff-4444-8d8c-d614494b2426");
        org.apache.rat.configuration.builders.CopyrightBuilder copyrightBuilder15 = copyrightBuilder7.setOwner("AnyBuilder:\nCopyright Builder: s:OASIS e:null o:null");
        org.junit.Assert.assertNotNull(builder0);
        org.junit.Assert.assertNotNull(builder2);
        org.junit.Assert.assertNotNull(builder4);
        org.junit.Assert.assertNotNull(builder6);
        org.junit.Assert.assertNotNull(copyrightBuilder7);
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "Copyright Builder: s:null e:null o:null" + "'", str8, "Copyright Builder: s:null e:null o:null");
        org.junit.Assert.assertNotNull(builder9);
        org.junit.Assert.assertNotNull(copyrightBuilder11);
        org.junit.Assert.assertNotNull(abstractBuilder13);
        org.junit.Assert.assertNotNull(copyrightBuilder15);
    }

    @Test
    public void test12564() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest25.test12564");
        org.apache.rat.analysis.license.FullTextMatchingLicense fullTextMatchingLicense0 = new org.apache.rat.analysis.license.FullTextMatchingLicense();
        fullTextMatchingLicense0.setLicenseFamilyName("hi!");
        java.lang.String str3 = fullTextMatchingLicense0.getLicenseFamilyCategory();
        java.lang.String str4 = fullTextMatchingLicense0.getLicenseFamilyCategory();
        java.lang.String str5 = fullTextMatchingLicense0.getNotes();
        java.lang.String str6 = fullTextMatchingLicense0.getNotes();
        java.lang.String str7 = fullTextMatchingLicense0.getLicenseFamilyCategory();
        java.lang.String str8 = fullTextMatchingLicense0.getLicenseFamilyCategory();
        fullTextMatchingLicense0.setFullText("48bb897a-e27b-468d-af85-d73dcaacfb7f");
        fullTextMatchingLicense0.setFullText("73fbee1b-7ed9-442a-968e-b2b525ca688f");
        fullTextMatchingLicense0.setNotes("7934b3ba-1073-4ff1-bfc3-c46ebe8a6c06");
        org.junit.Assert.assertNull(str3);
        org.junit.Assert.assertNull(str4);
        org.junit.Assert.assertNull(str5);
        org.junit.Assert.assertNull(str6);
        org.junit.Assert.assertNull(str7);
        org.junit.Assert.assertNull(str8);
    }

    @Test
    public void test12565() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest25.test12565");
        org.apache.rat.utils.Log log0 = null;
        org.apache.rat.ReportConfiguration reportConfiguration1 = new org.apache.rat.ReportConfiguration(log0);
        java.io.FilenameFilter filenameFilter2 = reportConfiguration1.getInputFileFilter();
        org.apache.rat.license.LicenseSetFactory.LicenseFilter licenseFilter3 = org.apache.rat.license.LicenseSetFactory.LicenseFilter.all;
        java.util.SortedSet<org.apache.rat.license.ILicense> iLicenseSet4 = reportConfiguration1.getLicenses(licenseFilter3);
        org.apache.rat.config.AddLicenseHeaders addLicenseHeaders5 = org.apache.rat.config.AddLicenseHeaders.FALSE;
        reportConfiguration1.setAddLicenseHeaders(addLicenseHeaders5);
        org.apache.rat.utils.Log log7 = null;
        org.apache.rat.ReportConfiguration reportConfiguration8 = new org.apache.rat.ReportConfiguration(log7);
        org.apache.rat.report.claim.ClaimStatistic claimStatistic9 = org.apache.rat.Reporter.report(reportConfiguration8);
        org.apache.rat.license.LicenseSetFactory.LicenseFilter licenseFilter10 = org.apache.rat.license.LicenseSetFactory.LicenseFilter.all;
        org.apache.rat.Reporter.listLicenses(reportConfiguration8, licenseFilter10);
        org.apache.rat.Reporter.listLicenses(reportConfiguration1, licenseFilter10);
        org.apache.rat.utils.Log log13 = null;
        org.apache.rat.ReportConfiguration reportConfiguration14 = new org.apache.rat.ReportConfiguration(log13);
        java.io.FilenameFilter filenameFilter15 = reportConfiguration14.getInputFileFilter();
        org.apache.rat.license.LicenseSetFactory.LicenseFilter licenseFilter16 = org.apache.rat.license.LicenseSetFactory.LicenseFilter.all;
        java.util.SortedSet<org.apache.rat.license.ILicense> iLicenseSet17 = reportConfiguration14.getLicenses(licenseFilter16);
        org.apache.rat.config.AddLicenseHeaders addLicenseHeaders18 = org.apache.rat.config.AddLicenseHeaders.FALSE;
        reportConfiguration14.setAddLicenseHeaders(addLicenseHeaders18);
        org.apache.rat.utils.Log log20 = null;
        org.apache.rat.ReportConfiguration reportConfiguration21 = new org.apache.rat.ReportConfiguration(log20);
        org.apache.rat.report.claim.ClaimStatistic claimStatistic22 = org.apache.rat.Reporter.report(reportConfiguration21);
        org.apache.rat.license.LicenseSetFactory.LicenseFilter licenseFilter23 = org.apache.rat.license.LicenseSetFactory.LicenseFilter.all;
        org.apache.rat.Reporter.listLicenses(reportConfiguration21, licenseFilter23);
        org.apache.rat.Reporter.listLicenses(reportConfiguration14, licenseFilter23);
        org.apache.rat.Reporter.listLicenses(reportConfiguration1, licenseFilter23);
        org.apache.rat.utils.Log log27 = null;
        org.apache.rat.ReportConfiguration reportConfiguration28 = new org.apache.rat.ReportConfiguration(log27);
        org.apache.commons.io.function.IOSupplier<java.io.OutputStream> outputStreamIOSupplier29 = reportConfiguration28.getOutput();
        reportConfiguration1.setOut(outputStreamIOSupplier29);
        boolean boolean31 = reportConfiguration1.isStyleReport();
        boolean boolean32 = reportConfiguration1.isStyleReport();
        org.apache.rat.utils.Log log33 = null;
        org.apache.rat.ReportConfiguration reportConfiguration34 = new org.apache.rat.ReportConfiguration(log33);
        reportConfiguration34.addApprovedLicenseCategory(".cvsignore");
        org.apache.rat.utils.Log.Level level37 = org.apache.rat.utils.Log.Level.ERROR;
        reportConfiguration34.logLicenseCollisions(level37);
        reportConfiguration1.logLicenseCollisions(level37);
        org.apache.rat.utils.Log.Level level40 = org.apache.rat.utils.Log.Level.DEBUG;
        reportConfiguration1.logLicenseCollisions(level40);
        org.apache.rat.utils.Log log42 = null;
        org.apache.rat.ReportConfiguration reportConfiguration43 = new org.apache.rat.ReportConfiguration(log42);
        org.apache.rat.license.ILicenseFamily[] iLicenseFamilyArray44 = new org.apache.rat.license.ILicenseFamily[] {};
        java.util.ArrayList<org.apache.rat.license.ILicenseFamily> iLicenseFamilyList45 = new java.util.ArrayList<org.apache.rat.license.ILicenseFamily>();
        boolean boolean46 = java.util.Collections.addAll((java.util.Collection<org.apache.rat.license.ILicenseFamily>) iLicenseFamilyList45, iLicenseFamilyArray44);
        reportConfiguration43.addFamilies((java.util.Collection<org.apache.rat.license.ILicenseFamily>) iLicenseFamilyList45);
        org.apache.rat.analysis.license.FullTextMatchingLicense fullTextMatchingLicense48 = new org.apache.rat.analysis.license.FullTextMatchingLicense();
        fullTextMatchingLicense48.setLicenseFamilyName("hi!");
        java.lang.String str51 = fullTextMatchingLicense48.getLicenseFamilyCategory();
        java.lang.String str52 = fullTextMatchingLicense48.getLicenseFamilyName();
        fullTextMatchingLicense48.setLicenseFamilyName("SpdxBuilder: null");
        fullTextMatchingLicense48.setLicenseFamilyCategory("TMF");
        org.apache.rat.license.ILicenseFamily iLicenseFamily57 = fullTextMatchingLicense48.getLicenseFamily();
        reportConfiguration43.addFamily(iLicenseFamily57);
        reportConfiguration1.addFamily(iLicenseFamily57);
        java.lang.String str60 = iLicenseFamily57.getFamilyName();
        java.lang.String str61 = iLicenseFamily57.getFamilyName();
        org.apache.rat.license.ILicenseFamily iLicenseFamily62 = null;
        // The following exception was thrown during execution in test generation
        try {
            int int63 = iLicenseFamily57.compareTo(iLicenseFamily62);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNull(filenameFilter2);
        org.junit.Assert.assertTrue("'" + licenseFilter3 + "' != '" + org.apache.rat.license.LicenseSetFactory.LicenseFilter.all + "'", licenseFilter3.equals(org.apache.rat.license.LicenseSetFactory.LicenseFilter.all));
        org.junit.Assert.assertNotNull(iLicenseSet4);
        org.junit.Assert.assertTrue("'" + addLicenseHeaders5 + "' != '" + org.apache.rat.config.AddLicenseHeaders.FALSE + "'", addLicenseHeaders5.equals(org.apache.rat.config.AddLicenseHeaders.FALSE));
        org.junit.Assert.assertNull(claimStatistic9);
        org.junit.Assert.assertTrue("'" + licenseFilter10 + "' != '" + org.apache.rat.license.LicenseSetFactory.LicenseFilter.all + "'", licenseFilter10.equals(org.apache.rat.license.LicenseSetFactory.LicenseFilter.all));
        org.junit.Assert.assertNull(filenameFilter15);
        org.junit.Assert.assertTrue("'" + licenseFilter16 + "' != '" + org.apache.rat.license.LicenseSetFactory.LicenseFilter.all + "'", licenseFilter16.equals(org.apache.rat.license.LicenseSetFactory.LicenseFilter.all));
        org.junit.Assert.assertNotNull(iLicenseSet17);
        org.junit.Assert.assertTrue("'" + addLicenseHeaders18 + "' != '" + org.apache.rat.config.AddLicenseHeaders.FALSE + "'", addLicenseHeaders18.equals(org.apache.rat.config.AddLicenseHeaders.FALSE));
        org.junit.Assert.assertNull(claimStatistic22);
        org.junit.Assert.assertTrue("'" + licenseFilter23 + "' != '" + org.apache.rat.license.LicenseSetFactory.LicenseFilter.all + "'", licenseFilter23.equals(org.apache.rat.license.LicenseSetFactory.LicenseFilter.all));
        org.junit.Assert.assertNotNull(outputStreamIOSupplier29);
        org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + true + "'", boolean31 == true);
        org.junit.Assert.assertTrue("'" + boolean32 + "' != '" + true + "'", boolean32 == true);
        org.junit.Assert.assertTrue("'" + level37 + "' != '" + org.apache.rat.utils.Log.Level.ERROR + "'", level37.equals(org.apache.rat.utils.Log.Level.ERROR));
        org.junit.Assert.assertTrue("'" + level40 + "' != '" + org.apache.rat.utils.Log.Level.DEBUG + "'", level40.equals(org.apache.rat.utils.Log.Level.DEBUG));
        org.junit.Assert.assertNotNull(iLicenseFamilyArray44);
        org.junit.Assert.assertTrue("'" + boolean46 + "' != '" + false + "'", boolean46 == false);
        org.junit.Assert.assertNull(str51);
        org.junit.Assert.assertEquals("'" + str52 + "' != '" + "hi!" + "'", str52, "hi!");
        org.junit.Assert.assertNotNull(iLicenseFamily57);
        org.junit.Assert.assertEquals("'" + str60 + "' != '" + "SpdxBuilder: null" + "'", str60, "SpdxBuilder: null");
        org.junit.Assert.assertEquals("'" + str61 + "' != '" + "SpdxBuilder: null" + "'", str61, "SpdxBuilder: null");
    }

    @Test
    public void test12566() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest25.test12566");
        org.apache.rat.analysis.matchers.SimpleTextMatcher simpleTextMatcher2 = new org.apache.rat.analysis.matchers.SimpleTextMatcher("f06626c1-35ed-4c9c-a3c4-db199c6e7bfb", "2c1deda6-584e-42fe-b264-79762e3c58e6");
        boolean boolean4 = simpleTextMatcher2.doMatch("9415aca9-6554-4026-8a54-d81e9c45145a");
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
    }

    @Test
    public void test12567() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest25.test12567");
        org.apache.rat.configuration.builders.AnyBuilder anyBuilder0 = org.apache.rat.analysis.IHeaderMatcher.Builder.any();
        org.apache.rat.configuration.builders.AllBuilder allBuilder1 = new org.apache.rat.configuration.builders.AllBuilder();
        org.apache.rat.analysis.IHeaderMatcher iHeaderMatcher2 = allBuilder1.build();
        org.apache.rat.configuration.builders.AbstractBuilder abstractBuilder3 = anyBuilder0.add((org.apache.rat.analysis.IHeaderMatcher.Builder) allBuilder1);
        java.lang.String str4 = allBuilder1.toString();
        org.apache.rat.configuration.builders.AnyBuilder anyBuilder5 = org.apache.rat.analysis.IHeaderMatcher.Builder.any();
        java.lang.String str6 = anyBuilder5.toString();
        java.util.List<org.apache.rat.analysis.IHeaderMatcher> iHeaderMatcherList7 = anyBuilder5.getChildren();
        org.apache.rat.analysis.IHeaderMatcher iHeaderMatcher8 = anyBuilder5.build();
        org.apache.rat.configuration.builders.AnyBuilder anyBuilder9 = org.apache.rat.analysis.IHeaderMatcher.Builder.any();
        java.lang.String str10 = anyBuilder9.toString();
        java.util.List<org.apache.rat.analysis.IHeaderMatcher> iHeaderMatcherList11 = anyBuilder9.getChildren();
        org.apache.rat.analysis.IHeaderMatcher iHeaderMatcher12 = anyBuilder9.build();
        org.apache.rat.analysis.IHeaderMatcher iHeaderMatcher13 = anyBuilder9.build();
        java.util.List<org.apache.rat.analysis.IHeaderMatcher> iHeaderMatcherList14 = anyBuilder9.getChildren();
        org.apache.rat.configuration.builders.NotBuilder notBuilder15 = new org.apache.rat.configuration.builders.NotBuilder();
        java.lang.String str16 = notBuilder15.toString();
        org.apache.rat.configuration.builders.MatcherRefBuilder matcherRefBuilder17 = org.apache.rat.analysis.IHeaderMatcher.Builder.matcherRef();
        boolean boolean18 = matcherRefBuilder17.hasId();
        java.util.Map<java.lang.String, org.apache.rat.analysis.IHeaderMatcher> strMap19 = null;
        org.apache.rat.configuration.builders.MatcherRefBuilder matcherRefBuilder20 = matcherRefBuilder17.setMatchers(strMap19);
        org.apache.rat.configuration.builders.AllBuilder allBuilder21 = new org.apache.rat.configuration.builders.AllBuilder();
        org.apache.rat.configuration.builders.CopyrightBuilder copyrightBuilder22 = org.apache.rat.analysis.IHeaderMatcher.Builder.copyright();
        org.apache.rat.configuration.builders.CopyrightBuilder copyrightBuilder24 = copyrightBuilder22.setStart("OASIS");
        java.lang.String str25 = copyrightBuilder22.toString();
        org.apache.rat.configuration.builders.CopyrightBuilder copyrightBuilder27 = copyrightBuilder22.setStart("223f0aba-15d4-49e9-901e-5740c137aebf");
        org.apache.rat.configuration.builders.MatcherRefBuilder matcherRefBuilder28 = org.apache.rat.analysis.IHeaderMatcher.Builder.matcherRef();
        boolean boolean29 = matcherRefBuilder28.hasId();
        org.apache.rat.configuration.builders.CopyrightBuilder copyrightBuilder30 = org.apache.rat.analysis.IHeaderMatcher.Builder.copyright();
        org.apache.rat.configuration.builders.CopyrightBuilder copyrightBuilder32 = copyrightBuilder30.setStart("OASIS");
        java.lang.String str33 = copyrightBuilder30.toString();
        org.apache.rat.configuration.builders.CopyrightBuilder copyrightBuilder35 = copyrightBuilder30.setStart("223f0aba-15d4-49e9-901e-5740c137aebf");
        org.apache.rat.configuration.builders.CopyrightBuilder copyrightBuilder36 = org.apache.rat.analysis.IHeaderMatcher.Builder.copyright();
        org.apache.rat.configuration.builders.CopyrightBuilder copyrightBuilder37 = org.apache.rat.analysis.IHeaderMatcher.Builder.copyright();
        java.lang.String str38 = copyrightBuilder37.toString();
        org.apache.rat.configuration.builders.CopyrightBuilder copyrightBuilder40 = copyrightBuilder37.setEnd(".cvsignore");
        boolean boolean41 = copyrightBuilder37.hasId();
        org.apache.rat.configuration.builders.CopyrightBuilder copyrightBuilder42 = org.apache.rat.analysis.IHeaderMatcher.Builder.copyright();
        java.lang.String str43 = copyrightBuilder42.toString();
        org.apache.rat.configuration.builders.CopyrightBuilder copyrightBuilder45 = copyrightBuilder42.setEnd(".cvsignore");
        boolean boolean46 = copyrightBuilder42.hasId();
        java.lang.String str47 = copyrightBuilder42.toString();
        org.apache.rat.configuration.builders.CopyrightBuilder copyrightBuilder48 = org.apache.rat.analysis.IHeaderMatcher.Builder.copyright();
        org.apache.rat.configuration.builders.CopyrightBuilder copyrightBuilder50 = copyrightBuilder48.setStart("OASIS");
        org.apache.rat.configuration.builders.AnyBuilder anyBuilder51 = org.apache.rat.analysis.IHeaderMatcher.Builder.any();
        org.apache.rat.configuration.builders.MatcherRefBuilder matcherRefBuilder52 = org.apache.rat.analysis.IHeaderMatcher.Builder.matcherRef();
        boolean boolean53 = matcherRefBuilder52.hasId();
        java.util.Map<java.lang.String, org.apache.rat.analysis.IHeaderMatcher> strMap54 = null;
        org.apache.rat.configuration.builders.MatcherRefBuilder matcherRefBuilder55 = matcherRefBuilder52.setMatchers(strMap54);
        org.apache.rat.configuration.builders.CopyrightBuilder copyrightBuilder56 = org.apache.rat.analysis.IHeaderMatcher.Builder.copyright();
        org.apache.rat.configuration.builders.MatcherRefBuilder matcherRefBuilder57 = org.apache.rat.analysis.IHeaderMatcher.Builder.matcherRef();
        boolean boolean58 = matcherRefBuilder57.hasId();
        java.lang.String str59 = matcherRefBuilder57.toString();
        java.util.Map<java.lang.String, org.apache.rat.analysis.IHeaderMatcher> strMap60 = null;
        org.apache.rat.configuration.builders.MatcherRefBuilder matcherRefBuilder61 = matcherRefBuilder57.setMatchers(strMap60);
        org.apache.rat.analysis.IHeaderMatcher.Builder[] builderArray62 = new org.apache.rat.analysis.IHeaderMatcher.Builder[] { matcherRefBuilder17, allBuilder21, copyrightBuilder27, matcherRefBuilder28, copyrightBuilder30, copyrightBuilder36, copyrightBuilder37, copyrightBuilder42, copyrightBuilder48, anyBuilder51, matcherRefBuilder52, copyrightBuilder56, matcherRefBuilder57 };
        java.util.ArrayList<org.apache.rat.analysis.IHeaderMatcher.Builder> builderList63 = new java.util.ArrayList<org.apache.rat.analysis.IHeaderMatcher.Builder>();
        boolean boolean64 = java.util.Collections.addAll((java.util.Collection<org.apache.rat.analysis.IHeaderMatcher.Builder>) builderList63, builderArray62);
        org.apache.rat.configuration.builders.AbstractBuilder abstractBuilder65 = notBuilder15.add((java.util.Collection<org.apache.rat.analysis.IHeaderMatcher.Builder>) builderList63);
        org.apache.rat.configuration.builders.AbstractBuilder abstractBuilder66 = anyBuilder9.add((java.util.Collection<org.apache.rat.analysis.IHeaderMatcher.Builder>) builderList63);
        org.apache.rat.configuration.builders.AbstractBuilder abstractBuilder67 = anyBuilder5.add((java.util.Collection<org.apache.rat.analysis.IHeaderMatcher.Builder>) builderList63);
        org.apache.rat.configuration.builders.AbstractBuilder abstractBuilder68 = allBuilder1.add((java.util.Collection<org.apache.rat.analysis.IHeaderMatcher.Builder>) builderList63);
        // The following exception was thrown during execution in test generation
        try {
            org.apache.rat.analysis.IHeaderMatcher iHeaderMatcher69 = allBuilder1.build();
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(anyBuilder0);
        org.junit.Assert.assertNotNull(iHeaderMatcher2);
        org.junit.Assert.assertNotNull(abstractBuilder3);
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "AllBuilder:" + "'", str4, "AllBuilder:");
        org.junit.Assert.assertNotNull(anyBuilder5);
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "AnyBuilder:" + "'", str6, "AnyBuilder:");
        org.junit.Assert.assertNotNull(iHeaderMatcherList7);
        org.junit.Assert.assertNotNull(iHeaderMatcher8);
        org.junit.Assert.assertNotNull(anyBuilder9);
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "AnyBuilder:" + "'", str10, "AnyBuilder:");
        org.junit.Assert.assertNotNull(iHeaderMatcherList11);
        org.junit.Assert.assertNotNull(iHeaderMatcher12);
        org.junit.Assert.assertNotNull(iHeaderMatcher13);
        org.junit.Assert.assertNotNull(iHeaderMatcherList14);
        org.junit.Assert.assertEquals("'" + str16 + "' != '" + "NotBuilder: null" + "'", str16, "NotBuilder: null");
        org.junit.Assert.assertNotNull(matcherRefBuilder17);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + false + "'", boolean18 == false);
        org.junit.Assert.assertNotNull(matcherRefBuilder20);
        org.junit.Assert.assertNotNull(copyrightBuilder22);
        org.junit.Assert.assertNotNull(copyrightBuilder24);
        org.junit.Assert.assertEquals("'" + str25 + "' != '" + "Copyright Builder: s:OASIS e:null o:null" + "'", str25, "Copyright Builder: s:OASIS e:null o:null");
        org.junit.Assert.assertNotNull(copyrightBuilder27);
        org.junit.Assert.assertNotNull(matcherRefBuilder28);
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + false + "'", boolean29 == false);
        org.junit.Assert.assertNotNull(copyrightBuilder30);
        org.junit.Assert.assertNotNull(copyrightBuilder32);
        org.junit.Assert.assertEquals("'" + str33 + "' != '" + "Copyright Builder: s:OASIS e:null o:null" + "'", str33, "Copyright Builder: s:OASIS e:null o:null");
        org.junit.Assert.assertNotNull(copyrightBuilder35);
        org.junit.Assert.assertNotNull(copyrightBuilder36);
        org.junit.Assert.assertNotNull(copyrightBuilder37);
        org.junit.Assert.assertEquals("'" + str38 + "' != '" + "Copyright Builder: s:null e:null o:null" + "'", str38, "Copyright Builder: s:null e:null o:null");
        org.junit.Assert.assertNotNull(copyrightBuilder40);
        org.junit.Assert.assertTrue("'" + boolean41 + "' != '" + false + "'", boolean41 == false);
        org.junit.Assert.assertNotNull(copyrightBuilder42);
        org.junit.Assert.assertEquals("'" + str43 + "' != '" + "Copyright Builder: s:null e:null o:null" + "'", str43, "Copyright Builder: s:null e:null o:null");
        org.junit.Assert.assertNotNull(copyrightBuilder45);
        org.junit.Assert.assertTrue("'" + boolean46 + "' != '" + false + "'", boolean46 == false);
        org.junit.Assert.assertEquals("'" + str47 + "' != '" + "Copyright Builder: s:null e:.cvsignore o:null" + "'", str47, "Copyright Builder: s:null e:.cvsignore o:null");
        org.junit.Assert.assertNotNull(copyrightBuilder48);
        org.junit.Assert.assertNotNull(copyrightBuilder50);
        org.junit.Assert.assertNotNull(anyBuilder51);
        org.junit.Assert.assertNotNull(matcherRefBuilder52);
        org.junit.Assert.assertTrue("'" + boolean53 + "' != '" + false + "'", boolean53 == false);
        org.junit.Assert.assertNotNull(matcherRefBuilder55);
        org.junit.Assert.assertNotNull(copyrightBuilder56);
        org.junit.Assert.assertNotNull(matcherRefBuilder57);
        org.junit.Assert.assertTrue("'" + boolean58 + "' != '" + false + "'", boolean58 == false);
        org.junit.Assert.assertEquals("'" + str59 + "' != '" + "MathcerRefBuilder: null" + "'", str59, "MathcerRefBuilder: null");
        org.junit.Assert.assertNotNull(matcherRefBuilder61);
        org.junit.Assert.assertNotNull(builderArray62);
        org.junit.Assert.assertTrue("'" + boolean64 + "' != '" + true + "'", boolean64 == true);
        org.junit.Assert.assertNotNull(abstractBuilder65);
        org.junit.Assert.assertNotNull(abstractBuilder66);
        org.junit.Assert.assertNotNull(abstractBuilder67);
        org.junit.Assert.assertNotNull(abstractBuilder68);
    }

    @Test
    public void test12568() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest25.test12568");
        java.io.Writer writer0 = null;
        org.apache.rat.report.xml.writer.impl.base.XmlWriter xmlWriter1 = new org.apache.rat.report.xml.writer.impl.base.XmlWriter(writer0);
        org.apache.rat.report.claim.impl.xml.SimpleXmlClaimReporter simpleXmlClaimReporter2 = new org.apache.rat.report.claim.impl.xml.SimpleXmlClaimReporter((org.apache.rat.report.xml.writer.IXmlWriter) xmlWriter1);
        org.apache.rat.report.claim.impl.xml.SimpleXmlClaimReporter simpleXmlClaimReporter3 = new org.apache.rat.report.claim.impl.xml.SimpleXmlClaimReporter((org.apache.rat.report.xml.writer.IXmlWriter) xmlWriter1);
        org.apache.rat.report.claim.impl.xml.SimpleXmlClaimReporter simpleXmlClaimReporter4 = new org.apache.rat.report.claim.impl.xml.SimpleXmlClaimReporter((org.apache.rat.report.xml.writer.IXmlWriter) xmlWriter1);
        org.apache.rat.report.claim.impl.xml.SimpleXmlClaimReporter simpleXmlClaimReporter5 = new org.apache.rat.report.claim.impl.xml.SimpleXmlClaimReporter((org.apache.rat.report.xml.writer.IXmlWriter) xmlWriter1);
        org.apache.rat.report.claim.impl.xml.SimpleXmlClaimReporter simpleXmlClaimReporter6 = new org.apache.rat.report.claim.impl.xml.SimpleXmlClaimReporter((org.apache.rat.report.xml.writer.IXmlWriter) xmlWriter1);
        org.apache.rat.report.claim.impl.xml.SimpleXmlClaimReporter simpleXmlClaimReporter7 = new org.apache.rat.report.claim.impl.xml.SimpleXmlClaimReporter((org.apache.rat.report.xml.writer.IXmlWriter) xmlWriter1);
        org.apache.rat.report.claim.impl.xml.SimpleXmlClaimReporter simpleXmlClaimReporter8 = new org.apache.rat.report.claim.impl.xml.SimpleXmlClaimReporter((org.apache.rat.report.xml.writer.IXmlWriter) xmlWriter1);
        org.apache.rat.report.claim.impl.xml.SimpleXmlClaimReporter simpleXmlClaimReporter9 = new org.apache.rat.report.claim.impl.xml.SimpleXmlClaimReporter((org.apache.rat.report.xml.writer.IXmlWriter) xmlWriter1);
        org.apache.rat.report.claim.impl.xml.SimpleXmlClaimReporter simpleXmlClaimReporter10 = new org.apache.rat.report.claim.impl.xml.SimpleXmlClaimReporter((org.apache.rat.report.xml.writer.IXmlWriter) xmlWriter1);
        // The following exception was thrown during execution in test generation
        try {
            org.apache.rat.report.xml.writer.IXmlWriter iXmlWriter12 = xmlWriter1.openElement((java.lang.CharSequence) "RegexBuilder: ef75a6e8-7197-4e9e-83bf-f8b367e6b3c5");
            org.junit.Assert.fail("Expected exception of type org.apache.rat.report.xml.writer.InvalidXmlException; message: 'RegexBuilder: ef75a6e8-7197-4e9e-83bf-f8b367e6b3c5' is not a valid element name");
        } catch (org.apache.rat.report.xml.writer.InvalidXmlException e) {
            // Expected exception.
        }
    }

    @Test
    public void test12569() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest25.test12569");
        org.apache.rat.utils.Log log0 = null;
        org.apache.rat.ReportConfiguration reportConfiguration1 = new org.apache.rat.ReportConfiguration(log0);
        java.lang.String[] strArray45 = new java.lang.String[] { "http://org/apache/rat/meta-data", "GNU General Public License, version 2", "Modified BSD License", "COMMON DEVELOPMENT AND DISTRIBUTION LICENSE Version 1.0", "The MIT License", "OASIS", "?????", "Datum [ name ='http://org/apache/rat/meta-data#LicenseFamilyCategory',value ='OASIS ']", "6486879f-fc81-4b57-aec7-c4c77d540c30", "MANIFEST.MF", "?????", "GEN  ", "GPL3 ", "http://org/apache/rat/meta-data#HeaderCategory", "DOJO ", "true", "GPL2 ", "?????", "Apache License Version 2.0", "OASIS", "W3CD ", "OASIS", "?????", "OASIS Open License", "", "standard", "GPL2 ", "GEN  ", "W3CD ", "TMF  ", ".cvsignore", "Copyright Builder: s:null e:null o:null", "ef7a8b13-64c3-4510-bb0c-dbf208e1e73f", "274c6a15-09f6-4bfd-ac53-1827770eb507", "GNU General Public License, version 2", "W3CD ", ".cvsignore", "Apache License Version 2.0", "GEN  ", "W3C Software Copyright", "Modified BSD License", "GPL2 ", "JAVA" };
        java.util.ArrayList<java.lang.String> strList46 = new java.util.ArrayList<java.lang.String>();
        boolean boolean47 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strList46, strArray45);
        reportConfiguration1.removeApprovedLicenseCategories((java.util.Collection<java.lang.String>) strList46);
        org.apache.rat.utils.Log log49 = null;
        org.apache.rat.ReportConfiguration reportConfiguration50 = new org.apache.rat.ReportConfiguration(log49);
        org.apache.commons.io.function.IOSupplier<java.io.OutputStream> outputStreamIOSupplier51 = reportConfiguration50.getOutput();
        reportConfiguration1.setOut(outputStreamIOSupplier51);
        reportConfiguration1.removeApprovedLicenseCategory("");
        boolean boolean55 = reportConfiguration1.isAddingLicenses();
        org.junit.Assert.assertNotNull(strArray45);
        org.junit.Assert.assertTrue("'" + boolean47 + "' != '" + true + "'", boolean47 == true);
        org.junit.Assert.assertNotNull(outputStreamIOSupplier51);
        org.junit.Assert.assertTrue("'" + boolean55 + "' != '" + false + "'", boolean55 == false);
    }

    @Test
    public void test12570() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest25.test12570");
        java.util.regex.Pattern pattern1 = null;
        org.apache.rat.analysis.matchers.SimpleRegexMatcher simpleRegexMatcher2 = new org.apache.rat.analysis.matchers.SimpleRegexMatcher("cf0b2491-f3c2-4580-8ac7-e69e3a8cba75", pattern1);
        // The following exception was thrown during execution in test generation
        try {
            boolean boolean4 = simpleRegexMatcher2.doMatch("fa18f31b-9be2-44d6-b5f4-146ebd73ca12");
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
    }

    @Test
    public void test12571() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest25.test12571");
        org.apache.rat.utils.Log log0 = null;
        org.apache.rat.ReportConfiguration reportConfiguration1 = new org.apache.rat.ReportConfiguration(log0);
        org.apache.rat.report.claim.ClaimStatistic claimStatistic2 = org.apache.rat.Reporter.report(reportConfiguration1);
        org.apache.rat.utils.Log log3 = null;
        org.apache.rat.ReportConfiguration reportConfiguration4 = new org.apache.rat.ReportConfiguration(log3);
        org.apache.rat.report.claim.ClaimStatistic claimStatistic5 = org.apache.rat.Reporter.report(reportConfiguration4);
        org.apache.rat.utils.ReportingSet.Options options6 = org.apache.rat.utils.ReportingSet.Options.OVERWRITE;
        reportConfiguration4.licenseDuplicateOption(options6);
        reportConfiguration1.familyDuplicateOption(options6);
        org.apache.commons.io.function.IOSupplier<java.io.PrintWriter> printWriterIOSupplier9 = reportConfiguration1.getWriter();
        reportConfiguration1.addApprovedLicenseCategory("ed42033c-bb2d-4a0c-b6fe-b912f4d3a137");
        java.io.File file12 = null;
        // The following exception was thrown during execution in test generation
        try {
            reportConfiguration1.setStyleSheet(file12);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: styleSheet file should not be null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNull(claimStatistic2);
        org.junit.Assert.assertNull(claimStatistic5);
        org.junit.Assert.assertTrue("'" + options6 + "' != '" + org.apache.rat.utils.ReportingSet.Options.OVERWRITE + "'", options6.equals(org.apache.rat.utils.ReportingSet.Options.OVERWRITE));
        org.junit.Assert.assertNotNull(printWriterIOSupplier9);
    }

    @Test
    public void test12572() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest25.test12572");
        org.apache.rat.config.SourceCodeManagementSystems sourceCodeManagementSystems0 = org.apache.rat.config.SourceCodeManagementSystems.CVS;
        java.util.List<java.lang.String> strList1 = sourceCodeManagementSystems0.getExclusions();
        java.lang.String str2 = sourceCodeManagementSystems0.getIgnoreFile();
        java.lang.String str3 = sourceCodeManagementSystems0.getIgnoreFile();
        boolean boolean4 = sourceCodeManagementSystems0.hasIgnoreFile();
        java.lang.String str5 = sourceCodeManagementSystems0.getIgnoreFile();
        boolean boolean6 = sourceCodeManagementSystems0.hasIgnoreFile();
        java.lang.String str7 = sourceCodeManagementSystems0.getIgnoreFile();
        org.junit.Assert.assertTrue("'" + sourceCodeManagementSystems0 + "' != '" + org.apache.rat.config.SourceCodeManagementSystems.CVS + "'", sourceCodeManagementSystems0.equals(org.apache.rat.config.SourceCodeManagementSystems.CVS));
        org.junit.Assert.assertNotNull(strList1);
        org.junit.Assert.assertEquals("'" + str2 + "' != '" + ".cvsignore" + "'", str2, ".cvsignore");
        org.junit.Assert.assertEquals("'" + str3 + "' != '" + ".cvsignore" + "'", str3, ".cvsignore");
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + true + "'", boolean4 == true);
        org.junit.Assert.assertEquals("'" + str5 + "' != '" + ".cvsignore" + "'", str5, ".cvsignore");
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + true + "'", boolean6 == true);
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + ".cvsignore" + "'", str7, ".cvsignore");
    }

    @Test
    public void test12573() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest25.test12573");
        org.apache.rat.utils.Log log0 = null;
        org.apache.rat.ReportConfiguration reportConfiguration1 = new org.apache.rat.ReportConfiguration(log0);
        java.io.FilenameFilter filenameFilter2 = reportConfiguration1.getInputFileFilter();
        org.apache.rat.license.LicenseSetFactory.LicenseFilter licenseFilter3 = org.apache.rat.license.LicenseSetFactory.LicenseFilter.all;
        java.util.SortedSet<org.apache.rat.license.ILicense> iLicenseSet4 = reportConfiguration1.getLicenses(licenseFilter3);
        org.apache.rat.config.AddLicenseHeaders addLicenseHeaders5 = org.apache.rat.config.AddLicenseHeaders.FALSE;
        reportConfiguration1.setAddLicenseHeaders(addLicenseHeaders5);
        org.apache.rat.utils.Log log7 = null;
        org.apache.rat.ReportConfiguration reportConfiguration8 = new org.apache.rat.ReportConfiguration(log7);
        org.apache.rat.report.claim.ClaimStatistic claimStatistic9 = org.apache.rat.Reporter.report(reportConfiguration8);
        org.apache.rat.license.LicenseSetFactory.LicenseFilter licenseFilter10 = org.apache.rat.license.LicenseSetFactory.LicenseFilter.all;
        org.apache.rat.Reporter.listLicenses(reportConfiguration8, licenseFilter10);
        org.apache.rat.Reporter.listLicenses(reportConfiguration1, licenseFilter10);
        org.apache.rat.utils.Log log13 = null;
        org.apache.rat.ReportConfiguration reportConfiguration14 = new org.apache.rat.ReportConfiguration(log13);
        java.io.FilenameFilter filenameFilter15 = reportConfiguration14.getInputFileFilter();
        org.apache.rat.license.LicenseSetFactory.LicenseFilter licenseFilter16 = org.apache.rat.license.LicenseSetFactory.LicenseFilter.all;
        java.util.SortedSet<org.apache.rat.license.ILicense> iLicenseSet17 = reportConfiguration14.getLicenses(licenseFilter16);
        org.apache.rat.config.AddLicenseHeaders addLicenseHeaders18 = org.apache.rat.config.AddLicenseHeaders.FALSE;
        reportConfiguration14.setAddLicenseHeaders(addLicenseHeaders18);
        org.apache.rat.utils.Log log20 = null;
        org.apache.rat.ReportConfiguration reportConfiguration21 = new org.apache.rat.ReportConfiguration(log20);
        org.apache.rat.report.claim.ClaimStatistic claimStatistic22 = org.apache.rat.Reporter.report(reportConfiguration21);
        org.apache.rat.license.LicenseSetFactory.LicenseFilter licenseFilter23 = org.apache.rat.license.LicenseSetFactory.LicenseFilter.all;
        org.apache.rat.Reporter.listLicenses(reportConfiguration21, licenseFilter23);
        org.apache.rat.Reporter.listLicenses(reportConfiguration14, licenseFilter23);
        org.apache.rat.Reporter.listLicenses(reportConfiguration1, licenseFilter23);
        org.apache.rat.utils.Log log27 = null;
        org.apache.rat.ReportConfiguration reportConfiguration28 = new org.apache.rat.ReportConfiguration(log27);
        org.apache.commons.io.function.IOSupplier<java.io.OutputStream> outputStreamIOSupplier29 = reportConfiguration28.getOutput();
        reportConfiguration1.setOut(outputStreamIOSupplier29);
        boolean boolean31 = reportConfiguration1.isStyleReport();
        boolean boolean32 = reportConfiguration1.isStyleReport();
        org.apache.rat.report.IReportable iReportable33 = null;
        reportConfiguration1.setReportable(iReportable33);
        boolean boolean35 = reportConfiguration1.isAddingLicensesForced();
        org.junit.Assert.assertNull(filenameFilter2);
        org.junit.Assert.assertTrue("'" + licenseFilter3 + "' != '" + org.apache.rat.license.LicenseSetFactory.LicenseFilter.all + "'", licenseFilter3.equals(org.apache.rat.license.LicenseSetFactory.LicenseFilter.all));
        org.junit.Assert.assertNotNull(iLicenseSet4);
        org.junit.Assert.assertTrue("'" + addLicenseHeaders5 + "' != '" + org.apache.rat.config.AddLicenseHeaders.FALSE + "'", addLicenseHeaders5.equals(org.apache.rat.config.AddLicenseHeaders.FALSE));
        org.junit.Assert.assertNull(claimStatistic9);
        org.junit.Assert.assertTrue("'" + licenseFilter10 + "' != '" + org.apache.rat.license.LicenseSetFactory.LicenseFilter.all + "'", licenseFilter10.equals(org.apache.rat.license.LicenseSetFactory.LicenseFilter.all));
        org.junit.Assert.assertNull(filenameFilter15);
        org.junit.Assert.assertTrue("'" + licenseFilter16 + "' != '" + org.apache.rat.license.LicenseSetFactory.LicenseFilter.all + "'", licenseFilter16.equals(org.apache.rat.license.LicenseSetFactory.LicenseFilter.all));
        org.junit.Assert.assertNotNull(iLicenseSet17);
        org.junit.Assert.assertTrue("'" + addLicenseHeaders18 + "' != '" + org.apache.rat.config.AddLicenseHeaders.FALSE + "'", addLicenseHeaders18.equals(org.apache.rat.config.AddLicenseHeaders.FALSE));
        org.junit.Assert.assertNull(claimStatistic22);
        org.junit.Assert.assertTrue("'" + licenseFilter23 + "' != '" + org.apache.rat.license.LicenseSetFactory.LicenseFilter.all + "'", licenseFilter23.equals(org.apache.rat.license.LicenseSetFactory.LicenseFilter.all));
        org.junit.Assert.assertNotNull(outputStreamIOSupplier29);
        org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + true + "'", boolean31 == true);
        org.junit.Assert.assertTrue("'" + boolean32 + "' != '" + true + "'", boolean32 == true);
        org.junit.Assert.assertTrue("'" + boolean35 + "' != '" + false + "'", boolean35 == false);
    }

    @Test
    public void test12574() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest25.test12574");
        org.apache.rat.utils.Log log0 = null;
        org.apache.rat.ReportConfiguration reportConfiguration1 = new org.apache.rat.ReportConfiguration(log0);
        java.io.FilenameFilter filenameFilter2 = reportConfiguration1.getInputFileFilter();
        org.apache.rat.license.LicenseSetFactory.LicenseFilter licenseFilter3 = org.apache.rat.license.LicenseSetFactory.LicenseFilter.all;
        java.util.SortedSet<org.apache.rat.license.ILicense> iLicenseSet4 = reportConfiguration1.getLicenses(licenseFilter3);
        org.apache.rat.config.AddLicenseHeaders addLicenseHeaders5 = org.apache.rat.config.AddLicenseHeaders.FALSE;
        reportConfiguration1.setAddLicenseHeaders(addLicenseHeaders5);
        org.apache.rat.utils.Log log7 = null;
        org.apache.rat.ReportConfiguration reportConfiguration8 = new org.apache.rat.ReportConfiguration(log7);
        org.apache.rat.report.claim.ClaimStatistic claimStatistic9 = org.apache.rat.Reporter.report(reportConfiguration8);
        org.apache.rat.license.LicenseSetFactory.LicenseFilter licenseFilter10 = org.apache.rat.license.LicenseSetFactory.LicenseFilter.all;
        org.apache.rat.Reporter.listLicenses(reportConfiguration8, licenseFilter10);
        org.apache.rat.Reporter.listLicenses(reportConfiguration1, licenseFilter10);
        org.apache.rat.report.IReportable iReportable13 = null;
        reportConfiguration1.setReportable(iReportable13);
        org.apache.rat.utils.Log log15 = reportConfiguration1.getLog();
        java.lang.String str16 = reportConfiguration1.getCopyrightMessage();
        org.junit.Assert.assertNull(filenameFilter2);
        org.junit.Assert.assertTrue("'" + licenseFilter3 + "' != '" + org.apache.rat.license.LicenseSetFactory.LicenseFilter.all + "'", licenseFilter3.equals(org.apache.rat.license.LicenseSetFactory.LicenseFilter.all));
        org.junit.Assert.assertNotNull(iLicenseSet4);
        org.junit.Assert.assertTrue("'" + addLicenseHeaders5 + "' != '" + org.apache.rat.config.AddLicenseHeaders.FALSE + "'", addLicenseHeaders5.equals(org.apache.rat.config.AddLicenseHeaders.FALSE));
        org.junit.Assert.assertNull(claimStatistic9);
        org.junit.Assert.assertTrue("'" + licenseFilter10 + "' != '" + org.apache.rat.license.LicenseSetFactory.LicenseFilter.all + "'", licenseFilter10.equals(org.apache.rat.license.LicenseSetFactory.LicenseFilter.all));
        org.junit.Assert.assertNull(log15);
        org.junit.Assert.assertNull(str16);
    }

    @Test
    public void test12575() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest25.test12575");
        org.apache.rat.analysis.matchers.SPDXMatcherFactory sPDXMatcherFactory0 = org.apache.rat.analysis.matchers.SPDXMatcherFactory.INSTANCE;
        org.apache.rat.analysis.IHeaderMatcher iHeaderMatcher2 = sPDXMatcherFactory0.create("http://org/apache/rat/meta-data");
        org.apache.rat.analysis.matchers.NotMatcher notMatcher3 = new org.apache.rat.analysis.matchers.NotMatcher(iHeaderMatcher2);
        org.apache.rat.analysis.matchers.NotMatcher notMatcher4 = new org.apache.rat.analysis.matchers.NotMatcher((org.apache.rat.analysis.IHeaderMatcher) notMatcher3);
        org.apache.rat.analysis.IHeaderMatcher.State state5 = notMatcher3.finalizeState();
        org.apache.rat.analysis.IHeaderMatcher.State state6 = notMatcher3.currentState();
        java.lang.String str7 = notMatcher3.getId();
        org.junit.Assert.assertNotNull(sPDXMatcherFactory0);
        org.junit.Assert.assertNotNull(iHeaderMatcher2);
        org.junit.Assert.assertTrue("'" + state5 + "' != '" + org.apache.rat.analysis.IHeaderMatcher.State.t + "'", state5.equals(org.apache.rat.analysis.IHeaderMatcher.State.t));
        org.junit.Assert.assertTrue("'" + state6 + "' != '" + org.apache.rat.analysis.IHeaderMatcher.State.t + "'", state6.equals(org.apache.rat.analysis.IHeaderMatcher.State.t));
// flaky:         org.junit.Assert.assertEquals("'" + str7 + "' != '" + "d0f847a6-9f65-43e8-a92e-f721fc73ffc3" + "'", str7, "d0f847a6-9f65-43e8-a92e-f721fc73ffc3");
    }

    @Test
    public void test12576() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest25.test12576");
        org.apache.rat.analysis.matchers.SimpleTextMatcher simpleTextMatcher2 = new org.apache.rat.analysis.matchers.SimpleTextMatcher("AL   ");
        org.apache.rat.analysis.matchers.NotMatcher notMatcher3 = new org.apache.rat.analysis.matchers.NotMatcher("Modified BSD License", (org.apache.rat.analysis.IHeaderMatcher) simpleTextMatcher2);
        boolean boolean5 = simpleTextMatcher2.doMatch("4dbea4973ef1472eaaade5481abb7e67");
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
    }

    @Test
    public void test12577() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest25.test12577");
        org.apache.rat.configuration.Format format0 = org.apache.rat.configuration.Format.XML;
        org.apache.rat.configuration.LicenseReader licenseReader1 = format0.licenseReader();
        java.util.SortedSet<org.apache.rat.license.ILicense> iLicenseSet2 = licenseReader1.readLicenses();
        java.lang.String[] strArray8 = new java.lang.String[] { "http://org/apache/rat/meta-data#LicenseFamilyCategory", "Datum [ name ='http://org/apache/rat/meta-data#LicenseFamilyCategory',value ='GPL1  ']", "MANIFEST.MF", "AllBuilder:", "The MIT License" };
        org.apache.rat.utils.ReportingSet<java.lang.String> strSet9 = new org.apache.rat.utils.ReportingSet<java.lang.String>();
        boolean boolean10 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strSet9, strArray8);
        boolean boolean12 = strSet9.addIfNotPresent("http://org/apache/rat/meta-data#LicenseFamilyName");
        boolean boolean14 = strSet9.addIfNotPresent("ef7a8b13-64c3-4510-bb0c-dbf208e1e73f");
        java.util.function.Function<java.lang.String, java.lang.String> strFunction15 = null;
        org.apache.rat.utils.ReportingSet<java.lang.String> strSet16 = strSet9.setMsgFormat(strFunction15);
        boolean boolean17 = strSet9.isEmpty();
        org.apache.rat.license.LicenseSetFactory licenseSetFactory18 = new org.apache.rat.license.LicenseSetFactory(iLicenseSet2, (java.util.Collection<java.lang.String>) strSet9);
        boolean boolean19 = strSet9.isEmpty();
        org.apache.rat.utils.ReportingSet<java.lang.String> strSet21 = strSet9.tailSet("MANIFEST.MF");
        java.util.Comparator<? super java.lang.String> wildcardComparator22 = strSet9.comparator();
        java.util.Iterator<java.lang.String> strItor23 = strSet9.iterator();
        org.apache.rat.utils.ReportingSet<java.lang.String> strSet25 = strSet9.headSet("c18570cd-af97-4dbd-81e1-da991bfd96a9");
        java.lang.String str26 = strSet25.last();
        org.junit.Assert.assertTrue("'" + format0 + "' != '" + org.apache.rat.configuration.Format.XML + "'", format0.equals(org.apache.rat.configuration.Format.XML));
        org.junit.Assert.assertNotNull(licenseReader1);
        org.junit.Assert.assertNotNull(iLicenseSet2);
        org.junit.Assert.assertNotNull(strArray8);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + true + "'", boolean10 == true);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + true + "'", boolean12 == true);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + true + "'", boolean14 == true);
        org.junit.Assert.assertNotNull(strSet16);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + false + "'", boolean17 == false);
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + false + "'", boolean19 == false);
        org.junit.Assert.assertNotNull(strSet21);
        org.junit.Assert.assertNull(wildcardComparator22);
        org.junit.Assert.assertNotNull(strItor23);
        org.junit.Assert.assertNotNull(strSet25);
        org.junit.Assert.assertEquals("'" + str26 + "' != '" + "The MIT License" + "'", str26, "The MIT License");
    }

    @Test
    public void test12578() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest25.test12578");
        org.apache.rat.utils.Log log0 = null;
        org.apache.rat.ReportConfiguration reportConfiguration1 = new org.apache.rat.ReportConfiguration(log0);
        org.apache.rat.license.ILicenseFamily[] iLicenseFamilyArray2 = new org.apache.rat.license.ILicenseFamily[] {};
        java.util.ArrayList<org.apache.rat.license.ILicenseFamily> iLicenseFamilyList3 = new java.util.ArrayList<org.apache.rat.license.ILicenseFamily>();
        boolean boolean4 = java.util.Collections.addAll((java.util.Collection<org.apache.rat.license.ILicenseFamily>) iLicenseFamilyList3, iLicenseFamilyArray2);
        reportConfiguration1.addFamilies((java.util.Collection<org.apache.rat.license.ILicenseFamily>) iLicenseFamilyList3);
        org.apache.rat.report.IReportable iReportable6 = null;
        reportConfiguration1.setReportable(iReportable6);
        org.apache.rat.config.AddLicenseHeaders addLicenseHeaders8 = org.apache.rat.config.AddLicenseHeaders.FALSE;
        reportConfiguration1.setAddLicenseHeaders(addLicenseHeaders8);
        java.net.URI uRI10 = null;
        // The following exception was thrown during execution in test generation
        try {
            reportConfiguration1.setStyleSheet(uRI10);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: styleSheet file should not be null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(iLicenseFamilyArray2);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertTrue("'" + addLicenseHeaders8 + "' != '" + org.apache.rat.config.AddLicenseHeaders.FALSE + "'", addLicenseHeaders8.equals(org.apache.rat.config.AddLicenseHeaders.FALSE));
    }

    @Test
    public void test12579() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest25.test12579");
        org.apache.rat.header.HeaderBean headerBean0 = new org.apache.rat.header.HeaderBean();
        java.util.regex.Pattern pattern1 = headerBean0.getHeaderPattern();
        java.util.regex.Pattern pattern2 = null;
        headerBean0.setHeaderPattern(pattern2);
        headerBean0.setMatch(false);
        headerBean0.setMatch(false);
        org.junit.Assert.assertNull(pattern1);
    }

    @Test
    public void test12580() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest25.test12580");
        org.apache.rat.utils.Log log0 = null;
        org.apache.rat.ReportConfiguration reportConfiguration1 = new org.apache.rat.ReportConfiguration(log0);
        java.io.FilenameFilter filenameFilter2 = reportConfiguration1.getInputFileFilter();
        org.apache.rat.license.LicenseSetFactory.LicenseFilter licenseFilter3 = org.apache.rat.license.LicenseSetFactory.LicenseFilter.all;
        java.util.SortedSet<org.apache.rat.license.ILicense> iLicenseSet4 = reportConfiguration1.getLicenses(licenseFilter3);
        org.apache.rat.config.AddLicenseHeaders addLicenseHeaders5 = org.apache.rat.config.AddLicenseHeaders.FALSE;
        reportConfiguration1.setAddLicenseHeaders(addLicenseHeaders5);
        org.apache.rat.utils.Log log7 = null;
        org.apache.rat.ReportConfiguration reportConfiguration8 = new org.apache.rat.ReportConfiguration(log7);
        org.apache.rat.report.claim.ClaimStatistic claimStatistic9 = org.apache.rat.Reporter.report(reportConfiguration8);
        org.apache.rat.license.LicenseSetFactory.LicenseFilter licenseFilter10 = org.apache.rat.license.LicenseSetFactory.LicenseFilter.all;
        org.apache.rat.Reporter.listLicenses(reportConfiguration8, licenseFilter10);
        org.apache.rat.Reporter.listLicenses(reportConfiguration1, licenseFilter10);
        org.apache.rat.utils.Log log13 = null;
        org.apache.rat.ReportConfiguration reportConfiguration14 = new org.apache.rat.ReportConfiguration(log13);
        java.io.FilenameFilter filenameFilter15 = reportConfiguration14.getInputFileFilter();
        org.apache.rat.license.LicenseSetFactory.LicenseFilter licenseFilter16 = org.apache.rat.license.LicenseSetFactory.LicenseFilter.all;
        java.util.SortedSet<org.apache.rat.license.ILicense> iLicenseSet17 = reportConfiguration14.getLicenses(licenseFilter16);
        org.apache.rat.config.AddLicenseHeaders addLicenseHeaders18 = org.apache.rat.config.AddLicenseHeaders.FALSE;
        reportConfiguration14.setAddLicenseHeaders(addLicenseHeaders18);
        org.apache.rat.utils.Log log20 = null;
        org.apache.rat.ReportConfiguration reportConfiguration21 = new org.apache.rat.ReportConfiguration(log20);
        org.apache.rat.report.claim.ClaimStatistic claimStatistic22 = org.apache.rat.Reporter.report(reportConfiguration21);
        org.apache.rat.license.LicenseSetFactory.LicenseFilter licenseFilter23 = org.apache.rat.license.LicenseSetFactory.LicenseFilter.all;
        org.apache.rat.Reporter.listLicenses(reportConfiguration21, licenseFilter23);
        org.apache.rat.Reporter.listLicenses(reportConfiguration14, licenseFilter23);
        org.apache.rat.Reporter.listLicenses(reportConfiguration1, licenseFilter23);
        org.apache.commons.io.function.IOSupplier<java.io.OutputStream> outputStreamIOSupplier27 = reportConfiguration1.getOutput();
        reportConfiguration1.setCopyrightMessage("NotBuilder: MathcerRefBuilder: null");
        org.apache.rat.configuration.Format format31 = org.apache.rat.configuration.Format.XML;
        org.apache.rat.configuration.LicenseReader licenseReader32 = format31.licenseReader();
        org.apache.rat.configuration.LicenseReader licenseReader33 = format31.licenseReader();
        org.apache.rat.configuration.LicenseReader licenseReader34 = format31.licenseReader();
        java.util.SortedSet<org.apache.rat.license.ILicenseFamily> iLicenseFamilySet35 = licenseReader34.readFamilies();
        org.apache.rat.license.ILicenseFamily iLicenseFamily36 = org.apache.rat.license.LicenseFamilySetFactory.search("6232a9af-c312-410c-9bbb-6b12d7725116", iLicenseFamilySet35);
        reportConfiguration1.addFamilies((java.util.Collection<org.apache.rat.license.ILicenseFamily>) iLicenseFamilySet35);
        org.apache.rat.policy.DefaultPolicy defaultPolicy38 = new org.apache.rat.policy.DefaultPolicy((java.util.Collection<org.apache.rat.license.ILicenseFamily>) iLicenseFamilySet35);
        org.apache.rat.policy.DefaultPolicy defaultPolicy39 = new org.apache.rat.policy.DefaultPolicy((java.util.Collection<org.apache.rat.license.ILicenseFamily>) iLicenseFamilySet35);
        org.apache.rat.api.Document document40 = null;
        defaultPolicy39.analyse(document40);
        org.junit.Assert.assertNull(filenameFilter2);
        org.junit.Assert.assertTrue("'" + licenseFilter3 + "' != '" + org.apache.rat.license.LicenseSetFactory.LicenseFilter.all + "'", licenseFilter3.equals(org.apache.rat.license.LicenseSetFactory.LicenseFilter.all));
        org.junit.Assert.assertNotNull(iLicenseSet4);
        org.junit.Assert.assertTrue("'" + addLicenseHeaders5 + "' != '" + org.apache.rat.config.AddLicenseHeaders.FALSE + "'", addLicenseHeaders5.equals(org.apache.rat.config.AddLicenseHeaders.FALSE));
        org.junit.Assert.assertNull(claimStatistic9);
        org.junit.Assert.assertTrue("'" + licenseFilter10 + "' != '" + org.apache.rat.license.LicenseSetFactory.LicenseFilter.all + "'", licenseFilter10.equals(org.apache.rat.license.LicenseSetFactory.LicenseFilter.all));
        org.junit.Assert.assertNull(filenameFilter15);
        org.junit.Assert.assertTrue("'" + licenseFilter16 + "' != '" + org.apache.rat.license.LicenseSetFactory.LicenseFilter.all + "'", licenseFilter16.equals(org.apache.rat.license.LicenseSetFactory.LicenseFilter.all));
        org.junit.Assert.assertNotNull(iLicenseSet17);
        org.junit.Assert.assertTrue("'" + addLicenseHeaders18 + "' != '" + org.apache.rat.config.AddLicenseHeaders.FALSE + "'", addLicenseHeaders18.equals(org.apache.rat.config.AddLicenseHeaders.FALSE));
        org.junit.Assert.assertNull(claimStatistic22);
        org.junit.Assert.assertTrue("'" + licenseFilter23 + "' != '" + org.apache.rat.license.LicenseSetFactory.LicenseFilter.all + "'", licenseFilter23.equals(org.apache.rat.license.LicenseSetFactory.LicenseFilter.all));
        org.junit.Assert.assertNotNull(outputStreamIOSupplier27);
        org.junit.Assert.assertTrue("'" + format31 + "' != '" + org.apache.rat.configuration.Format.XML + "'", format31.equals(org.apache.rat.configuration.Format.XML));
        org.junit.Assert.assertNotNull(licenseReader32);
        org.junit.Assert.assertNotNull(licenseReader33);
        org.junit.Assert.assertNotNull(licenseReader34);
        org.junit.Assert.assertNotNull(iLicenseFamilySet35);
        org.junit.Assert.assertNull(iLicenseFamily36);
    }

    @Test
    public void test12581() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest25.test12581");
        org.apache.rat.api.MetaData.Datum datum2 = new org.apache.rat.api.MetaData.Datum("274c6a15-09f6-4bfd-ac53-1827770eb507", "538d9244-ea19-4b24-8355-6aac8424179b");
    }

    @Test
    public void test12582() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest25.test12582");
        org.apache.rat.document.ToNameTransformer toNameTransformer0 = new org.apache.rat.document.ToNameTransformer();
        org.apache.rat.configuration.builders.AllBuilder allBuilder1 = org.apache.rat.analysis.IHeaderMatcher.Builder.all();
        java.util.List<org.apache.rat.analysis.IHeaderMatcher> iHeaderMatcherList2 = allBuilder1.getChildren();
        org.apache.rat.analysis.IHeaderMatcher iHeaderMatcher3 = allBuilder1.build();
        java.util.List<org.apache.rat.analysis.IHeaderMatcher> iHeaderMatcherList4 = allBuilder1.getChildren();
        java.lang.Object obj5 = toNameTransformer0.transform((java.lang.Object) allBuilder1);
        org.apache.rat.analysis.license.FullTextMatchingLicense fullTextMatchingLicense6 = new org.apache.rat.analysis.license.FullTextMatchingLicense();
        fullTextMatchingLicense6.setLicenseFamilyName("hi!");
        java.lang.String str9 = fullTextMatchingLicense6.getLicenseFamilyCategory();
        java.lang.String str10 = fullTextMatchingLicense6.getLicenseFamilyName();
        fullTextMatchingLicense6.setLicenseFamilyName("SpdxBuilder: null");
        fullTextMatchingLicense6.setLicenseFamilyCategory("TMF");
        fullTextMatchingLicense6.setFullText("W3C  ");
        java.lang.String str17 = fullTextMatchingLicense6.getNotes();
        fullTextMatchingLicense6.setNotes("7e27cd62-4403-40ab-a9f5-16e7c59ab2f1");
        java.lang.String str20 = fullTextMatchingLicense6.getLicenseFamilyName();
        java.lang.Object obj21 = toNameTransformer0.transform((java.lang.Object) str20);
        org.junit.Assert.assertNotNull(allBuilder1);
        org.junit.Assert.assertNotNull(iHeaderMatcherList2);
        org.junit.Assert.assertNotNull(iHeaderMatcher3);
        org.junit.Assert.assertNotNull(iHeaderMatcherList4);
        org.junit.Assert.assertNull(obj5);
        org.junit.Assert.assertNull(str9);
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "hi!" + "'", str10, "hi!");
        org.junit.Assert.assertNull(str17);
        org.junit.Assert.assertEquals("'" + str20 + "' != '" + "SpdxBuilder: null" + "'", str20, "SpdxBuilder: null");
        org.junit.Assert.assertNull(obj21);
    }

    @Test
    public void test12583() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest25.test12583");
        org.apache.rat.utils.Log log0 = null;
        org.apache.rat.ReportConfiguration reportConfiguration1 = new org.apache.rat.ReportConfiguration(log0);
        org.apache.rat.report.claim.ClaimStatistic claimStatistic2 = org.apache.rat.Reporter.report(reportConfiguration1);
        org.apache.commons.io.function.IOSupplier<java.io.OutputStream> outputStreamIOSupplier3 = reportConfiguration1.getOutput();
        org.apache.rat.license.ILicense iLicense4 = null;
        reportConfiguration1.addLicense(iLicense4);
        reportConfiguration1.setCopyrightMessage("Copyright Builder: s:null e:null o:null");
        org.apache.rat.utils.Log log8 = null;
        org.apache.rat.ReportConfiguration reportConfiguration9 = new org.apache.rat.ReportConfiguration(log8);
        org.apache.rat.report.claim.ClaimStatistic claimStatistic10 = org.apache.rat.Reporter.report(reportConfiguration9);
        org.apache.rat.utils.Log log11 = null;
        org.apache.rat.ReportConfiguration reportConfiguration12 = new org.apache.rat.ReportConfiguration(log11);
        org.apache.rat.report.claim.ClaimStatistic claimStatistic13 = org.apache.rat.Reporter.report(reportConfiguration12);
        org.apache.rat.utils.ReportingSet.Options options14 = org.apache.rat.utils.ReportingSet.Options.OVERWRITE;
        reportConfiguration12.licenseDuplicateOption(options14);
        reportConfiguration9.familyDuplicateOption(options14);
        org.apache.commons.io.function.IOSupplier<java.io.PrintWriter> printWriterIOSupplier17 = reportConfiguration9.getWriter();
        boolean boolean18 = reportConfiguration9.isAddingLicensesForced();
        org.apache.rat.utils.Log log19 = null;
        org.apache.rat.ReportConfiguration reportConfiguration20 = new org.apache.rat.ReportConfiguration(log19);
        reportConfiguration20.addApprovedLicenseCategory(".cvsignore");
        org.apache.rat.utils.Log.Level level23 = org.apache.rat.utils.Log.Level.ERROR;
        reportConfiguration20.logFamilyCollisions(level23);
        reportConfiguration9.logLicenseCollisions(level23);
        org.apache.rat.utils.Log log26 = null;
        org.apache.rat.ReportConfiguration reportConfiguration27 = new org.apache.rat.ReportConfiguration(log26);
        java.io.FilenameFilter filenameFilter28 = reportConfiguration27.getInputFileFilter();
        org.apache.rat.license.LicenseSetFactory.LicenseFilter licenseFilter29 = org.apache.rat.license.LicenseSetFactory.LicenseFilter.all;
        java.util.SortedSet<org.apache.rat.license.ILicense> iLicenseSet30 = reportConfiguration27.getLicenses(licenseFilter29);
        org.apache.rat.config.AddLicenseHeaders addLicenseHeaders31 = org.apache.rat.config.AddLicenseHeaders.FALSE;
        reportConfiguration27.setAddLicenseHeaders(addLicenseHeaders31);
        org.apache.rat.utils.Log log33 = null;
        org.apache.rat.ReportConfiguration reportConfiguration34 = new org.apache.rat.ReportConfiguration(log33);
        org.apache.rat.report.claim.ClaimStatistic claimStatistic35 = org.apache.rat.Reporter.report(reportConfiguration34);
        org.apache.rat.license.LicenseSetFactory.LicenseFilter licenseFilter36 = org.apache.rat.license.LicenseSetFactory.LicenseFilter.all;
        org.apache.rat.Reporter.listLicenses(reportConfiguration34, licenseFilter36);
        org.apache.rat.Reporter.listLicenses(reportConfiguration27, licenseFilter36);
        org.apache.rat.config.AddLicenseHeaders addLicenseHeaders39 = org.apache.rat.config.AddLicenseHeaders.FORCED;
        reportConfiguration27.setAddLicenseHeaders(addLicenseHeaders39);
        reportConfiguration9.setAddLicenseHeaders(addLicenseHeaders39);
        reportConfiguration1.setAddLicenseHeaders(addLicenseHeaders39);
        java.io.FilenameFilter filenameFilter43 = reportConfiguration1.getInputFileFilter();
        org.apache.commons.io.function.IOSupplier<java.io.OutputStream> outputStreamIOSupplier44 = reportConfiguration1.getOutput();
        boolean boolean45 = reportConfiguration1.isStyleReport();
        org.junit.Assert.assertNull(claimStatistic2);
        org.junit.Assert.assertNotNull(outputStreamIOSupplier3);
        org.junit.Assert.assertNull(claimStatistic10);
        org.junit.Assert.assertNull(claimStatistic13);
        org.junit.Assert.assertTrue("'" + options14 + "' != '" + org.apache.rat.utils.ReportingSet.Options.OVERWRITE + "'", options14.equals(org.apache.rat.utils.ReportingSet.Options.OVERWRITE));
        org.junit.Assert.assertNotNull(printWriterIOSupplier17);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + false + "'", boolean18 == false);
        org.junit.Assert.assertTrue("'" + level23 + "' != '" + org.apache.rat.utils.Log.Level.ERROR + "'", level23.equals(org.apache.rat.utils.Log.Level.ERROR));
        org.junit.Assert.assertNull(filenameFilter28);
        org.junit.Assert.assertTrue("'" + licenseFilter29 + "' != '" + org.apache.rat.license.LicenseSetFactory.LicenseFilter.all + "'", licenseFilter29.equals(org.apache.rat.license.LicenseSetFactory.LicenseFilter.all));
        org.junit.Assert.assertNotNull(iLicenseSet30);
        org.junit.Assert.assertTrue("'" + addLicenseHeaders31 + "' != '" + org.apache.rat.config.AddLicenseHeaders.FALSE + "'", addLicenseHeaders31.equals(org.apache.rat.config.AddLicenseHeaders.FALSE));
        org.junit.Assert.assertNull(claimStatistic35);
        org.junit.Assert.assertTrue("'" + licenseFilter36 + "' != '" + org.apache.rat.license.LicenseSetFactory.LicenseFilter.all + "'", licenseFilter36.equals(org.apache.rat.license.LicenseSetFactory.LicenseFilter.all));
        org.junit.Assert.assertTrue("'" + addLicenseHeaders39 + "' != '" + org.apache.rat.config.AddLicenseHeaders.FORCED + "'", addLicenseHeaders39.equals(org.apache.rat.config.AddLicenseHeaders.FORCED));
        org.junit.Assert.assertNull(filenameFilter43);
        org.junit.Assert.assertNotNull(outputStreamIOSupplier44);
        org.junit.Assert.assertTrue("'" + boolean45 + "' != '" + true + "'", boolean45 == true);
    }

    @Test
    public void test12584() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest25.test12584");
        org.apache.rat.configuration.builders.TextBuilder textBuilder0 = new org.apache.rat.configuration.builders.TextBuilder();
        org.apache.rat.configuration.builders.TextBuilder textBuilder2 = textBuilder0.setText("t true");
        org.apache.rat.analysis.IHeaderMatcher iHeaderMatcher3 = textBuilder0.build();
        org.apache.rat.analysis.IHeaderMatcher iHeaderMatcher4 = textBuilder0.build();
        org.apache.rat.configuration.builders.TextBuilder textBuilder6 = textBuilder0.setText("null http://org/apache/rat/meta-data#LicenseFamilyName");
        org.apache.rat.analysis.IHeaderMatcher iHeaderMatcher7 = textBuilder6.build();
        org.apache.rat.configuration.builders.TextBuilder textBuilder9 = textBuilder6.setText("ED0FAF32-F32C-46F1-A629-4FE87704CB0E");
        org.junit.Assert.assertNotNull(textBuilder2);
        org.junit.Assert.assertNotNull(iHeaderMatcher3);
        org.junit.Assert.assertNotNull(iHeaderMatcher4);
        org.junit.Assert.assertNotNull(textBuilder6);
        org.junit.Assert.assertNotNull(iHeaderMatcher7);
        org.junit.Assert.assertNotNull(textBuilder9);
    }

    @Test
    public void test12585() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest25.test12585");
        org.apache.rat.license.ILicense[] iLicenseArray0 = new org.apache.rat.license.ILicense[] {};
        java.util.TreeSet<org.apache.rat.license.ILicense> iLicenseSet1 = new java.util.TreeSet<org.apache.rat.license.ILicense>();
        boolean boolean2 = java.util.Collections.addAll((java.util.Collection<org.apache.rat.license.ILicense>) iLicenseSet1, iLicenseArray0);
        java.lang.String[] strArray15 = new java.lang.String[] { "GPL2 ", "GPL1 ", "notice", "http://org/apache/rat/meta-data#LicenseFamilyName", "notice", "GPL2 ", "http://org/apache/rat/meta-data#LicenseFamilyName", "", "GPL2 ", "", "GPL1 ", "hi!" };
        java.util.ArrayList<java.lang.String> strList16 = new java.util.ArrayList<java.lang.String>();
        boolean boolean17 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strList16, strArray15);
        org.apache.rat.license.LicenseSetFactory licenseSetFactory18 = new org.apache.rat.license.LicenseSetFactory((java.util.SortedSet<org.apache.rat.license.ILicense>) iLicenseSet1, (java.util.Collection<java.lang.String>) strList16);
        org.apache.rat.license.LicenseSetFactory.LicenseFilter licenseFilter19 = org.apache.rat.license.LicenseSetFactory.LicenseFilter.all;
        java.util.SortedSet<org.apache.rat.license.ILicenseFamily> iLicenseFamilySet20 = licenseSetFactory18.getLicenseFamilies(licenseFilter19);
        org.apache.rat.policy.DefaultPolicy defaultPolicy21 = new org.apache.rat.policy.DefaultPolicy((java.util.Collection<org.apache.rat.license.ILicenseFamily>) iLicenseFamilySet20);
        org.apache.rat.utils.ReportingSet<java.lang.String> strSet22 = new org.apache.rat.utils.ReportingSet<java.lang.String>();
        org.apache.rat.utils.ReportingSet<java.lang.String> strSet24 = strSet22.tailSet("hi!");
        org.apache.rat.configuration.LicenseReader[] licenseReaderArray25 = new org.apache.rat.configuration.LicenseReader[] {};
        org.apache.rat.configuration.LicenseReader[] licenseReaderArray26 = strSet24.toArray(licenseReaderArray25);
        org.apache.rat.license.LicenseFamilySetFactory licenseFamilySetFactory27 = new org.apache.rat.license.LicenseFamilySetFactory(iLicenseFamilySet20, (java.util.Collection<java.lang.String>) strSet24);
        org.apache.rat.utils.Log log28 = null;
        org.apache.rat.ReportConfiguration reportConfiguration29 = new org.apache.rat.ReportConfiguration(log28);
        org.apache.commons.io.function.IOSupplier<java.io.OutputStream> outputStreamIOSupplier30 = reportConfiguration29.getOutput();
        org.apache.commons.io.filefilter.IOFileFilter iOFileFilter31 = reportConfiguration29.getDirectoryFilter();
        org.apache.rat.utils.Log log32 = null;
        org.apache.rat.ReportConfiguration reportConfiguration33 = new org.apache.rat.ReportConfiguration(log32);
        reportConfiguration33.addApprovedLicenseCategory(".cvsignore");
        org.apache.rat.utils.Log log36 = null;
        org.apache.rat.ReportConfiguration reportConfiguration37 = new org.apache.rat.ReportConfiguration(log36);
        java.io.FilenameFilter filenameFilter38 = reportConfiguration37.getInputFileFilter();
        org.apache.rat.license.LicenseSetFactory.LicenseFilter licenseFilter39 = org.apache.rat.license.LicenseSetFactory.LicenseFilter.all;
        java.util.SortedSet<org.apache.rat.license.ILicense> iLicenseSet40 = reportConfiguration37.getLicenses(licenseFilter39);
        reportConfiguration33.addLicensesIfNotPresent((java.util.Collection<org.apache.rat.license.ILicense>) iLicenseSet40);
        java.io.FilenameFilter filenameFilter42 = reportConfiguration33.getInputFileFilter();
        org.apache.rat.utils.Log log43 = null;
        org.apache.rat.ReportConfiguration reportConfiguration44 = new org.apache.rat.ReportConfiguration(log43);
        java.io.FilenameFilter filenameFilter45 = reportConfiguration44.getInputFileFilter();
        org.apache.rat.license.LicenseSetFactory.LicenseFilter licenseFilter46 = org.apache.rat.license.LicenseSetFactory.LicenseFilter.all;
        java.util.SortedSet<org.apache.rat.license.ILicense> iLicenseSet47 = reportConfiguration44.getLicenses(licenseFilter46);
        org.apache.rat.config.AddLicenseHeaders addLicenseHeaders48 = org.apache.rat.config.AddLicenseHeaders.FALSE;
        reportConfiguration44.setAddLicenseHeaders(addLicenseHeaders48);
        org.apache.rat.utils.Log log50 = null;
        org.apache.rat.ReportConfiguration reportConfiguration51 = new org.apache.rat.ReportConfiguration(log50);
        org.apache.rat.report.claim.ClaimStatistic claimStatistic52 = org.apache.rat.Reporter.report(reportConfiguration51);
        org.apache.rat.license.LicenseSetFactory.LicenseFilter licenseFilter53 = org.apache.rat.license.LicenseSetFactory.LicenseFilter.all;
        org.apache.rat.Reporter.listLicenses(reportConfiguration51, licenseFilter53);
        org.apache.rat.Reporter.listLicenses(reportConfiguration44, licenseFilter53);
        org.apache.rat.utils.Log log56 = null;
        org.apache.rat.ReportConfiguration reportConfiguration57 = new org.apache.rat.ReportConfiguration(log56);
        java.io.FilenameFilter filenameFilter58 = reportConfiguration57.getInputFileFilter();
        org.apache.rat.license.LicenseSetFactory.LicenseFilter licenseFilter59 = org.apache.rat.license.LicenseSetFactory.LicenseFilter.all;
        java.util.SortedSet<org.apache.rat.license.ILicense> iLicenseSet60 = reportConfiguration57.getLicenses(licenseFilter59);
        org.apache.rat.config.AddLicenseHeaders addLicenseHeaders61 = org.apache.rat.config.AddLicenseHeaders.FALSE;
        reportConfiguration57.setAddLicenseHeaders(addLicenseHeaders61);
        org.apache.rat.utils.Log log63 = null;
        org.apache.rat.ReportConfiguration reportConfiguration64 = new org.apache.rat.ReportConfiguration(log63);
        org.apache.rat.report.claim.ClaimStatistic claimStatistic65 = org.apache.rat.Reporter.report(reportConfiguration64);
        org.apache.rat.license.LicenseSetFactory.LicenseFilter licenseFilter66 = org.apache.rat.license.LicenseSetFactory.LicenseFilter.all;
        org.apache.rat.Reporter.listLicenses(reportConfiguration64, licenseFilter66);
        org.apache.rat.Reporter.listLicenses(reportConfiguration57, licenseFilter66);
        java.util.SortedSet<org.apache.rat.license.ILicenseFamily> iLicenseFamilySet69 = reportConfiguration44.getLicenseFamilies(licenseFilter66);
        org.apache.rat.Reporter.listLicenseFamilies(reportConfiguration33, licenseFilter66);
        java.util.SortedSet<org.apache.rat.license.ILicenseFamily> iLicenseFamilySet71 = reportConfiguration29.getLicenseFamilies(licenseFilter66);
        org.apache.rat.policy.DefaultPolicy defaultPolicy72 = new org.apache.rat.policy.DefaultPolicy((java.util.Collection<org.apache.rat.license.ILicenseFamily>) iLicenseFamilySet71);
        boolean boolean73 = strSet24.retainAll((java.util.Collection<org.apache.rat.license.ILicenseFamily>) iLicenseFamilySet71);
        org.junit.Assert.assertNotNull(iLicenseArray0);
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + false + "'", boolean2 == false);
        org.junit.Assert.assertNotNull(strArray15);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + true + "'", boolean17 == true);
        org.junit.Assert.assertTrue("'" + licenseFilter19 + "' != '" + org.apache.rat.license.LicenseSetFactory.LicenseFilter.all + "'", licenseFilter19.equals(org.apache.rat.license.LicenseSetFactory.LicenseFilter.all));
        org.junit.Assert.assertNotNull(iLicenseFamilySet20);
        org.junit.Assert.assertNotNull(strSet24);
        org.junit.Assert.assertNotNull(licenseReaderArray25);
        org.junit.Assert.assertNotNull(licenseReaderArray26);
        org.junit.Assert.assertNotNull(outputStreamIOSupplier30);
        org.junit.Assert.assertNotNull(iOFileFilter31);
        org.junit.Assert.assertNull(filenameFilter38);
        org.junit.Assert.assertTrue("'" + licenseFilter39 + "' != '" + org.apache.rat.license.LicenseSetFactory.LicenseFilter.all + "'", licenseFilter39.equals(org.apache.rat.license.LicenseSetFactory.LicenseFilter.all));
        org.junit.Assert.assertNotNull(iLicenseSet40);
        org.junit.Assert.assertNull(filenameFilter42);
        org.junit.Assert.assertNull(filenameFilter45);
        org.junit.Assert.assertTrue("'" + licenseFilter46 + "' != '" + org.apache.rat.license.LicenseSetFactory.LicenseFilter.all + "'", licenseFilter46.equals(org.apache.rat.license.LicenseSetFactory.LicenseFilter.all));
        org.junit.Assert.assertNotNull(iLicenseSet47);
        org.junit.Assert.assertTrue("'" + addLicenseHeaders48 + "' != '" + org.apache.rat.config.AddLicenseHeaders.FALSE + "'", addLicenseHeaders48.equals(org.apache.rat.config.AddLicenseHeaders.FALSE));
        org.junit.Assert.assertNull(claimStatistic52);
        org.junit.Assert.assertTrue("'" + licenseFilter53 + "' != '" + org.apache.rat.license.LicenseSetFactory.LicenseFilter.all + "'", licenseFilter53.equals(org.apache.rat.license.LicenseSetFactory.LicenseFilter.all));
        org.junit.Assert.assertNull(filenameFilter58);
        org.junit.Assert.assertTrue("'" + licenseFilter59 + "' != '" + org.apache.rat.license.LicenseSetFactory.LicenseFilter.all + "'", licenseFilter59.equals(org.apache.rat.license.LicenseSetFactory.LicenseFilter.all));
        org.junit.Assert.assertNotNull(iLicenseSet60);
        org.junit.Assert.assertTrue("'" + addLicenseHeaders61 + "' != '" + org.apache.rat.config.AddLicenseHeaders.FALSE + "'", addLicenseHeaders61.equals(org.apache.rat.config.AddLicenseHeaders.FALSE));
        org.junit.Assert.assertNull(claimStatistic65);
        org.junit.Assert.assertTrue("'" + licenseFilter66 + "' != '" + org.apache.rat.license.LicenseSetFactory.LicenseFilter.all + "'", licenseFilter66.equals(org.apache.rat.license.LicenseSetFactory.LicenseFilter.all));
        org.junit.Assert.assertNotNull(iLicenseFamilySet69);
        org.junit.Assert.assertNotNull(iLicenseFamilySet71);
        org.junit.Assert.assertTrue("'" + boolean73 + "' != '" + false + "'", boolean73 == false);
    }

    @Test
    public void test12586() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest25.test12586");
        org.apache.rat.utils.DefaultLog defaultLog0 = org.apache.rat.utils.DefaultLog.INSTANCE;
        org.apache.rat.license.ILicense.Builder builder1 = org.apache.rat.license.ILicense.builder();
        org.apache.rat.license.ILicense.Builder builder3 = builder1.setLicenseFamilyCategory("");
        org.apache.rat.analysis.matchers.CopyrightMatcher copyrightMatcher7 = new org.apache.rat.analysis.matchers.CopyrightMatcher("", "GPL1 ", "hi!");
        org.apache.rat.analysis.IHeaderMatcher.State state8 = copyrightMatcher7.finalizeState();
        org.apache.rat.license.ILicense.Builder builder9 = builder3.setMatcher((org.apache.rat.analysis.IHeaderMatcher) copyrightMatcher7);
        org.apache.rat.license.ILicense.Builder builder11 = builder9.setLicenseFamilyCategory("");
        defaultLog0.error((java.lang.Object) builder11);
        org.apache.rat.ReportConfiguration reportConfiguration13 = new org.apache.rat.ReportConfiguration((org.apache.rat.utils.Log) defaultLog0);
        org.apache.rat.utils.Log log14 = null;
        org.apache.rat.ReportConfiguration reportConfiguration15 = new org.apache.rat.ReportConfiguration(log14);
        org.apache.commons.io.function.IOSupplier<java.io.OutputStream> outputStreamIOSupplier16 = reportConfiguration15.getOutput();
        reportConfiguration15.setCopyrightMessage("MANIFEST.MF");
        org.apache.rat.utils.Log log19 = reportConfiguration15.getLog();
        org.apache.rat.utils.Log.Level level20 = org.apache.rat.utils.Log.Level.INFO;
        reportConfiguration15.logFamilyCollisions(level20);
        defaultLog0.log(level20, "Copyright Builder: s:6481fb19-38f0-43f5-ab95-caf84a069ee1 e:null o:null");
        org.apache.rat.ReportConfiguration reportConfiguration24 = new org.apache.rat.ReportConfiguration((org.apache.rat.utils.Log) defaultLog0);
        boolean boolean25 = reportConfiguration24.isAddingLicenses();
        org.apache.rat.report.IReportable iReportable26 = null;
        reportConfiguration24.setReportable(iReportable26);
        org.junit.Assert.assertNotNull(defaultLog0);
        org.junit.Assert.assertNotNull(builder1);
        org.junit.Assert.assertNotNull(builder3);
        org.junit.Assert.assertTrue("'" + state8 + "' != '" + org.apache.rat.analysis.IHeaderMatcher.State.f + "'", state8.equals(org.apache.rat.analysis.IHeaderMatcher.State.f));
        org.junit.Assert.assertNotNull(builder9);
        org.junit.Assert.assertNotNull(builder11);
        org.junit.Assert.assertNotNull(outputStreamIOSupplier16);
        org.junit.Assert.assertNull(log19);
        org.junit.Assert.assertTrue("'" + level20 + "' != '" + org.apache.rat.utils.Log.Level.INFO + "'", level20.equals(org.apache.rat.utils.Log.Level.INFO));
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + false + "'", boolean25 == false);
    }

    @Test
    public void test12587() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest25.test12587");
        org.apache.rat.license.ILicenseFamilyBuilder iLicenseFamilyBuilder0 = new org.apache.rat.license.ILicenseFamilyBuilder();
        java.lang.String str1 = iLicenseFamilyBuilder0.getCategory();
        org.apache.rat.license.ILicenseFamily.Builder builder3 = iLicenseFamilyBuilder0.setLicenseFamilyCategory("false");
        java.lang.String str4 = iLicenseFamilyBuilder0.getCategory();
        org.apache.rat.license.ILicenseFamily.Builder builder6 = iLicenseFamilyBuilder0.setLicenseFamilyName("3e2b228d-d5ff-4444-8d8c-d614494b2426 null");
        java.lang.String str7 = iLicenseFamilyBuilder0.getCategory();
        org.junit.Assert.assertNull(str1);
        org.junit.Assert.assertNotNull(builder3);
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "false" + "'", str4, "false");
        org.junit.Assert.assertNotNull(builder6);
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "false" + "'", str7, "false");
    }

    @Test
    public void test12588() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest25.test12588");
        java.lang.String[] strArray12 = new java.lang.String[] { "NotBuilder: null", "Datum [ name ='http://org/apache/rat/meta-data#LicenseFamilyCategory',value ='OASIS ']", "Copyright Builder: s:null e:null o:null", "Datum [ name ='http://org/apache/rat/meta-data#LicenseFamilyCategory',value ='DOJO  ']", "Datum [ name ='http://org/apache/rat/meta-data#LicenseFamilyCategory',value ='OASIS ']", "http://org/apache/rat/meta-data#HeaderCategory" };
        boolean boolean13 = org.apache.rat.document.impl.guesser.BinaryGuesser.extensionMatches("Modified BSD License", strArray12);
        boolean boolean14 = org.apache.rat.document.impl.guesser.BinaryGuesser.containsExtension("true", strArray12);
        boolean boolean15 = org.apache.rat.document.impl.guesser.BinaryGuesser.containsExtension("3c840dc2-bef0-42b5-b26c-35a568d53a24", strArray12);
        boolean boolean16 = org.apache.rat.document.impl.guesser.BinaryGuesser.containsExtension("5b0daab8-75ce-482b-bcb3-4741d11fddf7", strArray12);
        boolean boolean17 = org.apache.rat.document.impl.guesser.BinaryGuesser.containsExtension("SpdxB", strArray12);
        boolean boolean18 = org.apache.rat.document.impl.guesser.BinaryGuesser.extensionMatches("SpdxBuilder641dafc113c345d48272f36f10392c53", strArray12);
        org.junit.Assert.assertNotNull(strArray12);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + false + "'", boolean15 == false);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + false + "'", boolean17 == false);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + false + "'", boolean18 == false);
    }

    @Test
    public void test12589() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest25.test12589");
        org.apache.rat.configuration.Format format0 = org.apache.rat.configuration.Format.XML;
        org.apache.rat.configuration.LicenseReader licenseReader1 = format0.licenseReader();
        org.apache.rat.configuration.MatcherReader matcherReader2 = format0.matcherReader();
        org.apache.rat.configuration.LicenseReader licenseReader3 = format0.licenseReader();
        org.apache.rat.configuration.LicenseReader licenseReader4 = format0.licenseReader();
        org.apache.rat.configuration.MatcherReader matcherReader5 = format0.matcherReader();
        org.apache.rat.configuration.MatcherReader matcherReader6 = format0.matcherReader();
        org.apache.rat.configuration.MatcherReader matcherReader7 = format0.matcherReader();
        org.apache.rat.configuration.MatcherReader matcherReader8 = format0.matcherReader();
        org.apache.rat.configuration.LicenseReader licenseReader9 = format0.licenseReader();
        org.apache.rat.configuration.LicenseReader licenseReader10 = format0.licenseReader();
        org.apache.rat.configuration.MatcherReader matcherReader11 = format0.matcherReader();
        matcherReader11.readMatcherBuilders();
        org.junit.Assert.assertTrue("'" + format0 + "' != '" + org.apache.rat.configuration.Format.XML + "'", format0.equals(org.apache.rat.configuration.Format.XML));
        org.junit.Assert.assertNotNull(licenseReader1);
        org.junit.Assert.assertNotNull(matcherReader2);
        org.junit.Assert.assertNotNull(licenseReader3);
        org.junit.Assert.assertNotNull(licenseReader4);
        org.junit.Assert.assertNotNull(matcherReader5);
        org.junit.Assert.assertNotNull(matcherReader6);
        org.junit.Assert.assertNotNull(matcherReader7);
        org.junit.Assert.assertNotNull(matcherReader8);
        org.junit.Assert.assertNotNull(licenseReader9);
        org.junit.Assert.assertNotNull(licenseReader10);
        org.junit.Assert.assertNotNull(matcherReader11);
    }

    @Test
    public void test12590() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest25.test12590");
        org.apache.rat.analysis.matchers.FullTextMatcher fullTextMatcher2 = new org.apache.rat.analysis.matchers.FullTextMatcher("http://org/apache/rat/meta-data#FileCategory", "8f82a952-5bfd-446b-ac79-15beef5b3f17");
        fullTextMatcher2.reset();
        fullTextMatcher2.reset();
        java.lang.String str5 = fullTextMatcher2.toString();
        org.apache.rat.analysis.IHeaderMatcher.State state6 = fullTextMatcher2.currentState();
        boolean boolean8 = fullTextMatcher2.doMatch("RegexBuilder: e484573a-f5dc-41c9-94d2-04bf4d4fa217");
        org.junit.Assert.assertEquals("'" + str5 + "' != '" + "http://org/apache/rat/meta-data#FileCategory" + "'", str5, "http://org/apache/rat/meta-data#FileCategory");
        org.junit.Assert.assertTrue("'" + state6 + "' != '" + org.apache.rat.analysis.IHeaderMatcher.State.i + "'", state6.equals(org.apache.rat.analysis.IHeaderMatcher.State.i));
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
    }

    @Test
    public void test12591() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest25.test12591");
        org.apache.rat.utils.Log log0 = null;
        org.apache.rat.ReportConfiguration reportConfiguration1 = new org.apache.rat.ReportConfiguration(log0);
        org.apache.rat.report.claim.ClaimStatistic claimStatistic2 = org.apache.rat.Reporter.report(reportConfiguration1);
        org.apache.rat.utils.Log log3 = null;
        org.apache.rat.ReportConfiguration reportConfiguration4 = new org.apache.rat.ReportConfiguration(log3);
        org.apache.rat.report.claim.ClaimStatistic claimStatistic5 = org.apache.rat.Reporter.report(reportConfiguration4);
        org.apache.rat.utils.ReportingSet.Options options6 = org.apache.rat.utils.ReportingSet.Options.OVERWRITE;
        reportConfiguration4.licenseDuplicateOption(options6);
        reportConfiguration1.familyDuplicateOption(options6);
        org.apache.commons.io.function.IOSupplier<java.io.PrintWriter> printWriterIOSupplier9 = reportConfiguration1.getWriter();
        org.apache.rat.utils.Log log10 = null;
        org.apache.rat.ReportConfiguration reportConfiguration11 = new org.apache.rat.ReportConfiguration(log10);
        reportConfiguration11.addApprovedLicenseCategory(".cvsignore");
        org.apache.rat.utils.Log.Level level14 = org.apache.rat.utils.Log.Level.ERROR;
        reportConfiguration11.logFamilyCollisions(level14);
        reportConfiguration1.logFamilyCollisions(level14);
        org.apache.rat.report.IReportable iReportable17 = reportConfiguration1.getReportable();
        org.apache.rat.report.claim.ClaimStatistic claimStatistic18 = org.apache.rat.Reporter.report(reportConfiguration1);
        org.apache.rat.report.IReportable iReportable19 = reportConfiguration1.getReportable();
        org.junit.Assert.assertNull(claimStatistic2);
        org.junit.Assert.assertNull(claimStatistic5);
        org.junit.Assert.assertTrue("'" + options6 + "' != '" + org.apache.rat.utils.ReportingSet.Options.OVERWRITE + "'", options6.equals(org.apache.rat.utils.ReportingSet.Options.OVERWRITE));
        org.junit.Assert.assertNotNull(printWriterIOSupplier9);
        org.junit.Assert.assertTrue("'" + level14 + "' != '" + org.apache.rat.utils.Log.Level.ERROR + "'", level14.equals(org.apache.rat.utils.Log.Level.ERROR));
        org.junit.Assert.assertNull(iReportable17);
        org.junit.Assert.assertNull(claimStatistic18);
        org.junit.Assert.assertNull(iReportable19);
    }

    @Test
    public void test12592() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest25.test12592");
        org.apache.rat.utils.DefaultLog defaultLog0 = org.apache.rat.utils.DefaultLog.INSTANCE;
        org.apache.rat.annotation.ApacheV2LicenseAppender apacheV2LicenseAppender1 = new org.apache.rat.annotation.ApacheV2LicenseAppender((org.apache.rat.utils.Log) defaultLog0);
        org.apache.rat.utils.Log log2 = null;
        org.apache.rat.ReportConfiguration reportConfiguration3 = new org.apache.rat.ReportConfiguration(log2);
        org.apache.rat.report.claim.ClaimStatistic claimStatistic4 = org.apache.rat.Reporter.report(reportConfiguration3);
        org.apache.rat.utils.Log log5 = null;
        org.apache.rat.ReportConfiguration reportConfiguration6 = new org.apache.rat.ReportConfiguration(log5);
        org.apache.rat.report.claim.ClaimStatistic claimStatistic7 = org.apache.rat.Reporter.report(reportConfiguration6);
        org.apache.rat.utils.ReportingSet.Options options8 = org.apache.rat.utils.ReportingSet.Options.OVERWRITE;
        reportConfiguration6.licenseDuplicateOption(options8);
        reportConfiguration3.familyDuplicateOption(options8);
        org.apache.commons.io.function.IOSupplier<java.io.PrintWriter> printWriterIOSupplier11 = reportConfiguration3.getWriter();
        org.apache.rat.utils.Log log12 = null;
        org.apache.rat.ReportConfiguration reportConfiguration13 = new org.apache.rat.ReportConfiguration(log12);
        reportConfiguration13.addApprovedLicenseCategory(".cvsignore");
        org.apache.rat.utils.Log.Level level16 = org.apache.rat.utils.Log.Level.ERROR;
        reportConfiguration13.logFamilyCollisions(level16);
        reportConfiguration3.logFamilyCollisions(level16);
        org.apache.rat.Defaults.Builder builder19 = org.apache.rat.Defaults.builder();
        org.apache.rat.Defaults.Builder builder20 = builder19.noDefault();
        defaultLog0.log(level16, (java.lang.Object) builder19);
        org.apache.rat.Defaults.Builder builder22 = builder19.noDefault();
        org.apache.rat.Defaults.Builder builder24 = builder22.remove("MATHCERREFBUILDER: TMF");
        java.net.URL uRL25 = null;
        // The following exception was thrown during execution in test generation
        try {
            org.apache.rat.Defaults.Builder builder26 = builder24.add(uRL25);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(defaultLog0);
        org.junit.Assert.assertNull(claimStatistic4);
        org.junit.Assert.assertNull(claimStatistic7);
        org.junit.Assert.assertTrue("'" + options8 + "' != '" + org.apache.rat.utils.ReportingSet.Options.OVERWRITE + "'", options8.equals(org.apache.rat.utils.ReportingSet.Options.OVERWRITE));
        org.junit.Assert.assertNotNull(printWriterIOSupplier11);
        org.junit.Assert.assertTrue("'" + level16 + "' != '" + org.apache.rat.utils.Log.Level.ERROR + "'", level16.equals(org.apache.rat.utils.Log.Level.ERROR));
        org.junit.Assert.assertNotNull(builder19);
        org.junit.Assert.assertNotNull(builder20);
        org.junit.Assert.assertNotNull(builder22);
        org.junit.Assert.assertNotNull(builder24);
    }

    @Test
    public void test12593() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest25.test12593");
        org.apache.rat.utils.DefaultLog defaultLog0 = org.apache.rat.utils.DefaultLog.INSTANCE;
        org.apache.rat.utils.Log log1 = null;
        org.apache.rat.ReportConfiguration reportConfiguration2 = new org.apache.rat.ReportConfiguration(log1);
        java.io.FilenameFilter filenameFilter3 = reportConfiguration2.getInputFileFilter();
        org.apache.rat.license.LicenseSetFactory.LicenseFilter licenseFilter4 = org.apache.rat.license.LicenseSetFactory.LicenseFilter.all;
        java.util.SortedSet<org.apache.rat.license.ILicense> iLicenseSet5 = reportConfiguration2.getLicenses(licenseFilter4);
        org.apache.rat.config.AddLicenseHeaders addLicenseHeaders6 = org.apache.rat.config.AddLicenseHeaders.FALSE;
        reportConfiguration2.setAddLicenseHeaders(addLicenseHeaders6);
        org.apache.rat.utils.Log log8 = null;
        org.apache.rat.ReportConfiguration reportConfiguration9 = new org.apache.rat.ReportConfiguration(log8);
        org.apache.rat.report.claim.ClaimStatistic claimStatistic10 = org.apache.rat.Reporter.report(reportConfiguration9);
        org.apache.rat.license.LicenseSetFactory.LicenseFilter licenseFilter11 = org.apache.rat.license.LicenseSetFactory.LicenseFilter.all;
        org.apache.rat.Reporter.listLicenses(reportConfiguration9, licenseFilter11);
        org.apache.rat.Reporter.listLicenses(reportConfiguration2, licenseFilter11);
        org.apache.rat.utils.Log log14 = null;
        org.apache.rat.ReportConfiguration reportConfiguration15 = new org.apache.rat.ReportConfiguration(log14);
        java.io.FilenameFilter filenameFilter16 = reportConfiguration15.getInputFileFilter();
        org.apache.rat.license.LicenseSetFactory.LicenseFilter licenseFilter17 = org.apache.rat.license.LicenseSetFactory.LicenseFilter.all;
        java.util.SortedSet<org.apache.rat.license.ILicense> iLicenseSet18 = reportConfiguration15.getLicenses(licenseFilter17);
        org.apache.rat.config.AddLicenseHeaders addLicenseHeaders19 = org.apache.rat.config.AddLicenseHeaders.FALSE;
        reportConfiguration15.setAddLicenseHeaders(addLicenseHeaders19);
        org.apache.rat.utils.Log log21 = null;
        org.apache.rat.ReportConfiguration reportConfiguration22 = new org.apache.rat.ReportConfiguration(log21);
        org.apache.rat.report.claim.ClaimStatistic claimStatistic23 = org.apache.rat.Reporter.report(reportConfiguration22);
        org.apache.rat.license.LicenseSetFactory.LicenseFilter licenseFilter24 = org.apache.rat.license.LicenseSetFactory.LicenseFilter.all;
        org.apache.rat.Reporter.listLicenses(reportConfiguration22, licenseFilter24);
        org.apache.rat.Reporter.listLicenses(reportConfiguration15, licenseFilter24);
        org.apache.rat.Reporter.listLicenses(reportConfiguration2, licenseFilter24);
        org.apache.rat.utils.Log log28 = null;
        org.apache.rat.ReportConfiguration reportConfiguration29 = new org.apache.rat.ReportConfiguration(log28);
        org.apache.commons.io.function.IOSupplier<java.io.OutputStream> outputStreamIOSupplier30 = reportConfiguration29.getOutput();
        reportConfiguration2.setOut(outputStreamIOSupplier30);
        org.apache.rat.utils.Log log32 = null;
        org.apache.rat.ReportConfiguration reportConfiguration33 = new org.apache.rat.ReportConfiguration(log32);
        org.apache.rat.report.claim.ClaimStatistic claimStatistic34 = org.apache.rat.Reporter.report(reportConfiguration33);
        org.apache.rat.utils.Log log35 = null;
        org.apache.rat.ReportConfiguration reportConfiguration36 = new org.apache.rat.ReportConfiguration(log35);
        org.apache.rat.report.claim.ClaimStatistic claimStatistic37 = org.apache.rat.Reporter.report(reportConfiguration36);
        org.apache.rat.utils.ReportingSet.Options options38 = org.apache.rat.utils.ReportingSet.Options.OVERWRITE;
        reportConfiguration36.licenseDuplicateOption(options38);
        reportConfiguration33.familyDuplicateOption(options38);
        reportConfiguration2.licenseDuplicateOption(options38);
        reportConfiguration2.addApprovedLicenseCategory("W3C Document Copyright");
        org.apache.rat.utils.Log log44 = null;
        org.apache.rat.ReportConfiguration reportConfiguration45 = new org.apache.rat.ReportConfiguration(log44);
        reportConfiguration45.addApprovedLicenseCategory(".cvsignore");
        org.apache.rat.utils.Log.Level level48 = org.apache.rat.utils.Log.Level.ERROR;
        reportConfiguration45.logLicenseCollisions(level48);
        reportConfiguration2.logLicenseCollisions(level48);
        defaultLog0.setLevel(level48);
        defaultLog0.warn((java.lang.Object) "GNU General Public License, version 3");
        org.apache.rat.ReportConfiguration reportConfiguration54 = new org.apache.rat.ReportConfiguration((org.apache.rat.utils.Log) defaultLog0);
        org.apache.rat.utils.DefaultLog defaultLog55 = org.apache.rat.utils.DefaultLog.INSTANCE;
        org.apache.rat.utils.Log log56 = null;
        org.apache.rat.ReportConfiguration reportConfiguration57 = new org.apache.rat.ReportConfiguration(log56);
        reportConfiguration57.addApprovedLicenseCategory(".cvsignore");
        org.apache.rat.utils.Log.Level level60 = org.apache.rat.utils.Log.Level.ERROR;
        reportConfiguration57.logFamilyCollisions(level60);
        defaultLog55.setLevel(level60);
        defaultLog0.debug((java.lang.Object) level60);
        org.apache.rat.utils.DefaultLog defaultLog64 = org.apache.rat.utils.DefaultLog.INSTANCE;
        org.apache.rat.license.ILicense.Builder builder65 = org.apache.rat.license.ILicense.builder();
        org.apache.rat.license.ILicense.Builder builder67 = builder65.setLicenseFamilyCategory("");
        org.apache.rat.analysis.matchers.CopyrightMatcher copyrightMatcher71 = new org.apache.rat.analysis.matchers.CopyrightMatcher("", "GPL1 ", "hi!");
        org.apache.rat.analysis.IHeaderMatcher.State state72 = copyrightMatcher71.finalizeState();
        org.apache.rat.license.ILicense.Builder builder73 = builder67.setMatcher((org.apache.rat.analysis.IHeaderMatcher) copyrightMatcher71);
        org.apache.rat.license.ILicense.Builder builder75 = builder73.setLicenseFamilyCategory("");
        defaultLog64.error((java.lang.Object) builder75);
        org.apache.rat.utils.Log.Level level77 = defaultLog64.getLevel();
        org.apache.rat.license.ILicenseFamilyBuilder iLicenseFamilyBuilder78 = new org.apache.rat.license.ILicenseFamilyBuilder();
        org.apache.rat.license.ILicenseFamily.Builder builder80 = iLicenseFamilyBuilder78.setLicenseFamilyCategory("Modified BSD License");
        org.apache.rat.license.ILicenseFamily.Builder builder82 = iLicenseFamilyBuilder78.setLicenseFamilyCategory("6486879f-fc81-4b57-aec7-c4c77d540c30");
        org.apache.rat.license.ILicenseFamily.Builder builder84 = iLicenseFamilyBuilder78.setLicenseFamilyName("MathcerRefBuilder: ");
        org.apache.rat.license.ILicenseFamily.Builder builder86 = iLicenseFamilyBuilder78.setLicenseFamilyName("9c36f068-9920-4c66-98c2-ba24e3dffa9c");
        defaultLog0.log(level77, (java.lang.Object) iLicenseFamilyBuilder78);
        org.apache.rat.license.ILicenseFamily.Builder builder89 = iLicenseFamilyBuilder78.setLicenseFamilyCategory("W3CSoftwareCopyrightAC588FB847FF4C8AB1924B692AC6762C");
        org.apache.rat.license.ILicenseFamily.Builder builder91 = iLicenseFamilyBuilder78.setLicenseFamilyCategory("58D10");
        org.junit.Assert.assertNotNull(defaultLog0);
        org.junit.Assert.assertNull(filenameFilter3);
        org.junit.Assert.assertTrue("'" + licenseFilter4 + "' != '" + org.apache.rat.license.LicenseSetFactory.LicenseFilter.all + "'", licenseFilter4.equals(org.apache.rat.license.LicenseSetFactory.LicenseFilter.all));
        org.junit.Assert.assertNotNull(iLicenseSet5);
        org.junit.Assert.assertTrue("'" + addLicenseHeaders6 + "' != '" + org.apache.rat.config.AddLicenseHeaders.FALSE + "'", addLicenseHeaders6.equals(org.apache.rat.config.AddLicenseHeaders.FALSE));
        org.junit.Assert.assertNull(claimStatistic10);
        org.junit.Assert.assertTrue("'" + licenseFilter11 + "' != '" + org.apache.rat.license.LicenseSetFactory.LicenseFilter.all + "'", licenseFilter11.equals(org.apache.rat.license.LicenseSetFactory.LicenseFilter.all));
        org.junit.Assert.assertNull(filenameFilter16);
        org.junit.Assert.assertTrue("'" + licenseFilter17 + "' != '" + org.apache.rat.license.LicenseSetFactory.LicenseFilter.all + "'", licenseFilter17.equals(org.apache.rat.license.LicenseSetFactory.LicenseFilter.all));
        org.junit.Assert.assertNotNull(iLicenseSet18);
        org.junit.Assert.assertTrue("'" + addLicenseHeaders19 + "' != '" + org.apache.rat.config.AddLicenseHeaders.FALSE + "'", addLicenseHeaders19.equals(org.apache.rat.config.AddLicenseHeaders.FALSE));
        org.junit.Assert.assertNull(claimStatistic23);
        org.junit.Assert.assertTrue("'" + licenseFilter24 + "' != '" + org.apache.rat.license.LicenseSetFactory.LicenseFilter.all + "'", licenseFilter24.equals(org.apache.rat.license.LicenseSetFactory.LicenseFilter.all));
        org.junit.Assert.assertNotNull(outputStreamIOSupplier30);
        org.junit.Assert.assertNull(claimStatistic34);
        org.junit.Assert.assertNull(claimStatistic37);
        org.junit.Assert.assertTrue("'" + options38 + "' != '" + org.apache.rat.utils.ReportingSet.Options.OVERWRITE + "'", options38.equals(org.apache.rat.utils.ReportingSet.Options.OVERWRITE));
        org.junit.Assert.assertTrue("'" + level48 + "' != '" + org.apache.rat.utils.Log.Level.ERROR + "'", level48.equals(org.apache.rat.utils.Log.Level.ERROR));
        org.junit.Assert.assertNotNull(defaultLog55);
        org.junit.Assert.assertTrue("'" + level60 + "' != '" + org.apache.rat.utils.Log.Level.ERROR + "'", level60.equals(org.apache.rat.utils.Log.Level.ERROR));
        org.junit.Assert.assertNotNull(defaultLog64);
        org.junit.Assert.assertNotNull(builder65);
        org.junit.Assert.assertNotNull(builder67);
        org.junit.Assert.assertTrue("'" + state72 + "' != '" + org.apache.rat.analysis.IHeaderMatcher.State.f + "'", state72.equals(org.apache.rat.analysis.IHeaderMatcher.State.f));
        org.junit.Assert.assertNotNull(builder73);
        org.junit.Assert.assertNotNull(builder75);
        org.junit.Assert.assertTrue("'" + level77 + "' != '" + org.apache.rat.utils.Log.Level.ERROR + "'", level77.equals(org.apache.rat.utils.Log.Level.ERROR));
        org.junit.Assert.assertNotNull(builder80);
        org.junit.Assert.assertNotNull(builder82);
        org.junit.Assert.assertNotNull(builder84);
        org.junit.Assert.assertNotNull(builder86);
        org.junit.Assert.assertNotNull(builder89);
        org.junit.Assert.assertNotNull(builder91);
    }

    @Test
    public void test12594() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest25.test12594");
        // The following exception was thrown during execution in test generation
        try {
            org.apache.rat.license.LicenseSetFactory.LicenseFilter licenseFilter1 = org.apache.rat.license.LicenseSetFactory.LicenseFilter.fromText("org/apache/rat/plain-rat.xsl");
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: No enum constant org.apache.rat.license.LicenseSetFactory.LicenseFilter.org/apache/rat/plain-rat.xsl");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
    }

    @Test
    public void test12595() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest25.test12595");
        org.apache.rat.analysis.matchers.SPDXMatcherFactory sPDXMatcherFactory1 = org.apache.rat.analysis.matchers.SPDXMatcherFactory.INSTANCE;
        org.apache.rat.analysis.IHeaderMatcher iHeaderMatcher3 = sPDXMatcherFactory1.create("http://org/apache/rat/meta-data");
        org.apache.rat.analysis.matchers.NotMatcher notMatcher4 = new org.apache.rat.analysis.matchers.NotMatcher(iHeaderMatcher3);
        org.apache.rat.analysis.matchers.NotMatcher notMatcher5 = new org.apache.rat.analysis.matchers.NotMatcher((org.apache.rat.analysis.IHeaderMatcher) notMatcher4);
        org.apache.rat.analysis.matchers.NotMatcher notMatcher6 = new org.apache.rat.analysis.matchers.NotMatcher("", (org.apache.rat.analysis.IHeaderMatcher) notMatcher5);
        org.apache.rat.analysis.IHeaderMatcher.State state7 = notMatcher5.finalizeState();
        java.lang.Class<?> wildcardClass8 = notMatcher5.getClass();
        org.junit.Assert.assertNotNull(sPDXMatcherFactory1);
        org.junit.Assert.assertNotNull(iHeaderMatcher3);
        org.junit.Assert.assertTrue("'" + state7 + "' != '" + org.apache.rat.analysis.IHeaderMatcher.State.f + "'", state7.equals(org.apache.rat.analysis.IHeaderMatcher.State.f));
        org.junit.Assert.assertNotNull(wildcardClass8);
    }

    @Test
    public void test12596() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest25.test12596");
        org.apache.rat.license.ILicense.Builder builder0 = org.apache.rat.license.ILicense.builder();
        org.apache.rat.license.ILicense.Builder builder2 = builder0.setLicenseFamilyCategory("");
        org.apache.rat.license.ILicense.Builder builder4 = builder2.setDerivedFrom("GEN  ");
        org.apache.rat.license.ILicense.Builder builder6 = builder4.setId("DOJO ");
        org.apache.rat.license.ILicense.Builder builder8 = builder6.setName("GPL3 ");
        org.apache.rat.license.ILicense.Builder builder10 = builder6.setName("?????");
        org.apache.rat.license.ILicense.Builder builder12 = builder10.setDerivedFrom("");
        org.apache.rat.license.ILicense.Builder builder14 = builder12.setDerivedFrom("Copyright Builder: s:null e:ef75a6e8-7197-4e9e-83bf-f8b367e6b3c5 o:AllBuilder:\nCopyright Builder: s:null e:.cvsignore o:3c840dc2-bef0-42b5-b26c-35a568d53a24");
        org.junit.Assert.assertNotNull(builder0);
        org.junit.Assert.assertNotNull(builder2);
        org.junit.Assert.assertNotNull(builder4);
        org.junit.Assert.assertNotNull(builder6);
        org.junit.Assert.assertNotNull(builder8);
        org.junit.Assert.assertNotNull(builder10);
        org.junit.Assert.assertNotNull(builder12);
        org.junit.Assert.assertNotNull(builder14);
    }

    @Test
    public void test12597() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest25.test12597");
        org.apache.rat.header.HeaderBean headerBean0 = new org.apache.rat.header.HeaderBean();
        boolean boolean1 = headerBean0.isMatch();
        headerBean0.setMatch(true);
        java.util.regex.Pattern pattern4 = headerBean0.getHeaderPattern();
        boolean boolean5 = headerBean0.isMatch();
        java.util.regex.Pattern pattern6 = headerBean0.getHeaderPattern();
        org.junit.Assert.assertTrue("'" + boolean1 + "' != '" + false + "'", boolean1 == false);
        org.junit.Assert.assertNull(pattern4);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + true + "'", boolean5 == true);
        org.junit.Assert.assertNull(pattern6);
    }

    @Test
    public void test12598() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest25.test12598");
        org.apache.rat.utils.Log log0 = null;
        org.apache.rat.ReportConfiguration reportConfiguration1 = new org.apache.rat.ReportConfiguration(log0);
        reportConfiguration1.addApprovedLicenseCategory(".cvsignore");
        boolean boolean4 = reportConfiguration1.isStyleReport();
        java.io.FilenameFilter filenameFilter5 = reportConfiguration1.getInputFileFilter();
        org.apache.rat.utils.Log log6 = null;
        org.apache.rat.ReportConfiguration reportConfiguration7 = new org.apache.rat.ReportConfiguration(log6);
        java.io.FilenameFilter filenameFilter8 = reportConfiguration7.getInputFileFilter();
        org.apache.rat.license.LicenseSetFactory.LicenseFilter licenseFilter9 = org.apache.rat.license.LicenseSetFactory.LicenseFilter.all;
        java.util.SortedSet<org.apache.rat.license.ILicense> iLicenseSet10 = reportConfiguration7.getLicenses(licenseFilter9);
        org.apache.rat.config.AddLicenseHeaders addLicenseHeaders11 = org.apache.rat.config.AddLicenseHeaders.FALSE;
        reportConfiguration7.setAddLicenseHeaders(addLicenseHeaders11);
        org.apache.rat.utils.Log log13 = null;
        org.apache.rat.ReportConfiguration reportConfiguration14 = new org.apache.rat.ReportConfiguration(log13);
        org.apache.rat.report.claim.ClaimStatistic claimStatistic15 = org.apache.rat.Reporter.report(reportConfiguration14);
        org.apache.rat.license.LicenseSetFactory.LicenseFilter licenseFilter16 = org.apache.rat.license.LicenseSetFactory.LicenseFilter.all;
        org.apache.rat.Reporter.listLicenses(reportConfiguration14, licenseFilter16);
        org.apache.rat.Reporter.listLicenses(reportConfiguration7, licenseFilter16);
        org.apache.rat.utils.Log log19 = null;
        org.apache.rat.ReportConfiguration reportConfiguration20 = new org.apache.rat.ReportConfiguration(log19);
        java.io.FilenameFilter filenameFilter21 = reportConfiguration20.getInputFileFilter();
        org.apache.rat.license.LicenseSetFactory.LicenseFilter licenseFilter22 = org.apache.rat.license.LicenseSetFactory.LicenseFilter.all;
        java.util.SortedSet<org.apache.rat.license.ILicense> iLicenseSet23 = reportConfiguration20.getLicenses(licenseFilter22);
        org.apache.rat.config.AddLicenseHeaders addLicenseHeaders24 = org.apache.rat.config.AddLicenseHeaders.FALSE;
        reportConfiguration20.setAddLicenseHeaders(addLicenseHeaders24);
        org.apache.rat.utils.Log log26 = null;
        org.apache.rat.ReportConfiguration reportConfiguration27 = new org.apache.rat.ReportConfiguration(log26);
        org.apache.rat.report.claim.ClaimStatistic claimStatistic28 = org.apache.rat.Reporter.report(reportConfiguration27);
        org.apache.rat.license.LicenseSetFactory.LicenseFilter licenseFilter29 = org.apache.rat.license.LicenseSetFactory.LicenseFilter.all;
        org.apache.rat.Reporter.listLicenses(reportConfiguration27, licenseFilter29);
        org.apache.rat.Reporter.listLicenses(reportConfiguration20, licenseFilter29);
        org.apache.rat.Reporter.listLicenses(reportConfiguration7, licenseFilter29);
        java.io.FilenameFilter filenameFilter33 = reportConfiguration7.getInputFileFilter();
        org.apache.rat.utils.Log log34 = null;
        org.apache.rat.ReportConfiguration reportConfiguration35 = new org.apache.rat.ReportConfiguration(log34);
        java.io.FilenameFilter filenameFilter36 = reportConfiguration35.getInputFileFilter();
        org.apache.rat.license.LicenseSetFactory.LicenseFilter licenseFilter37 = org.apache.rat.license.LicenseSetFactory.LicenseFilter.all;
        java.util.SortedSet<org.apache.rat.license.ILicense> iLicenseSet38 = reportConfiguration35.getLicenses(licenseFilter37);
        org.apache.rat.config.AddLicenseHeaders addLicenseHeaders39 = org.apache.rat.config.AddLicenseHeaders.FALSE;
        reportConfiguration35.setAddLicenseHeaders(addLicenseHeaders39);
        org.apache.rat.utils.Log log41 = null;
        org.apache.rat.ReportConfiguration reportConfiguration42 = new org.apache.rat.ReportConfiguration(log41);
        org.apache.rat.report.claim.ClaimStatistic claimStatistic43 = org.apache.rat.Reporter.report(reportConfiguration42);
        org.apache.rat.license.LicenseSetFactory.LicenseFilter licenseFilter44 = org.apache.rat.license.LicenseSetFactory.LicenseFilter.all;
        org.apache.rat.Reporter.listLicenses(reportConfiguration42, licenseFilter44);
        org.apache.rat.Reporter.listLicenses(reportConfiguration35, licenseFilter44);
        org.apache.rat.utils.Log log47 = null;
        org.apache.rat.ReportConfiguration reportConfiguration48 = new org.apache.rat.ReportConfiguration(log47);
        java.io.FilenameFilter filenameFilter49 = reportConfiguration48.getInputFileFilter();
        org.apache.rat.license.LicenseSetFactory.LicenseFilter licenseFilter50 = org.apache.rat.license.LicenseSetFactory.LicenseFilter.all;
        java.util.SortedSet<org.apache.rat.license.ILicense> iLicenseSet51 = reportConfiguration48.getLicenses(licenseFilter50);
        org.apache.rat.config.AddLicenseHeaders addLicenseHeaders52 = org.apache.rat.config.AddLicenseHeaders.FALSE;
        reportConfiguration48.setAddLicenseHeaders(addLicenseHeaders52);
        org.apache.rat.utils.Log log54 = null;
        org.apache.rat.ReportConfiguration reportConfiguration55 = new org.apache.rat.ReportConfiguration(log54);
        org.apache.rat.report.claim.ClaimStatistic claimStatistic56 = org.apache.rat.Reporter.report(reportConfiguration55);
        org.apache.rat.license.LicenseSetFactory.LicenseFilter licenseFilter57 = org.apache.rat.license.LicenseSetFactory.LicenseFilter.all;
        org.apache.rat.Reporter.listLicenses(reportConfiguration55, licenseFilter57);
        org.apache.rat.Reporter.listLicenses(reportConfiguration48, licenseFilter57);
        org.apache.rat.Reporter.listLicenses(reportConfiguration35, licenseFilter57);
        java.util.SortedSet<org.apache.rat.license.ILicense> iLicenseSet61 = reportConfiguration7.getLicenses(licenseFilter57);
        java.lang.String[] strArray67 = new java.lang.String[] { "http://org/apache/rat/meta-data#LicenseFamilyCategory", "Datum [ name ='http://org/apache/rat/meta-data#LicenseFamilyCategory',value ='GPL1  ']", "MANIFEST.MF", "AllBuilder:", "The MIT License" };
        org.apache.rat.utils.ReportingSet<java.lang.String> strSet68 = new org.apache.rat.utils.ReportingSet<java.lang.String>();
        boolean boolean69 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strSet68, strArray67);
        boolean boolean71 = strSet68.addIfNotPresent("http://org/apache/rat/meta-data#LicenseFamilyName");
        java.util.Iterator<java.lang.String> strItor72 = strSet68.iterator();
        java.lang.Object[] objArray73 = strSet68.toArray();
        org.apache.rat.license.LicenseSetFactory licenseSetFactory74 = new org.apache.rat.license.LicenseSetFactory(iLicenseSet61, (java.util.Collection<java.lang.String>) strSet68);
        org.apache.rat.license.LicenseSetFactory.LicenseFilter licenseFilter75 = org.apache.rat.license.LicenseSetFactory.LicenseFilter.all;
        java.util.SortedSet<org.apache.rat.license.ILicenseFamily> iLicenseFamilySet76 = licenseSetFactory74.getLicenseFamilies(licenseFilter75);
        reportConfiguration1.addFamilies((java.util.Collection<org.apache.rat.license.ILicenseFamily>) iLicenseFamilySet76);
        org.apache.rat.utils.Log log78 = null;
        org.apache.rat.ReportConfiguration reportConfiguration79 = new org.apache.rat.ReportConfiguration(log78);
        java.io.FilenameFilter filenameFilter80 = reportConfiguration79.getInputFileFilter();
        boolean boolean81 = reportConfiguration79.isStyleReport();
        org.apache.commons.io.function.IOSupplier<java.io.OutputStream> outputStreamIOSupplier82 = reportConfiguration79.getOutput();
        org.apache.commons.io.function.IOSupplier<java.io.InputStream> inputStreamIOSupplier83 = reportConfiguration79.getStyleSheet();
        org.apache.rat.utils.Log log84 = null;
        org.apache.rat.ReportConfiguration reportConfiguration85 = new org.apache.rat.ReportConfiguration(log84);
        org.apache.rat.license.ILicenseFamily[] iLicenseFamilyArray86 = new org.apache.rat.license.ILicenseFamily[] {};
        java.util.ArrayList<org.apache.rat.license.ILicenseFamily> iLicenseFamilyList87 = new java.util.ArrayList<org.apache.rat.license.ILicenseFamily>();
        boolean boolean88 = java.util.Collections.addAll((java.util.Collection<org.apache.rat.license.ILicenseFamily>) iLicenseFamilyList87, iLicenseFamilyArray86);
        reportConfiguration85.addFamilies((java.util.Collection<org.apache.rat.license.ILicenseFamily>) iLicenseFamilyList87);
        org.apache.rat.utils.Log.Level level90 = org.apache.rat.utils.Log.Level.ERROR;
        reportConfiguration85.logLicenseCollisions(level90);
        reportConfiguration79.logLicenseCollisions(level90);
        reportConfiguration1.logFamilyCollisions(level90);
        reportConfiguration1.setStyleReport(false);
        boolean boolean96 = reportConfiguration1.isAddingLicensesForced();
        org.apache.commons.io.function.IOSupplier<java.io.OutputStream> outputStreamIOSupplier97 = reportConfiguration1.getOutput();
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + true + "'", boolean4 == true);
        org.junit.Assert.assertNull(filenameFilter5);
        org.junit.Assert.assertNull(filenameFilter8);
        org.junit.Assert.assertTrue("'" + licenseFilter9 + "' != '" + org.apache.rat.license.LicenseSetFactory.LicenseFilter.all + "'", licenseFilter9.equals(org.apache.rat.license.LicenseSetFactory.LicenseFilter.all));
        org.junit.Assert.assertNotNull(iLicenseSet10);
        org.junit.Assert.assertTrue("'" + addLicenseHeaders11 + "' != '" + org.apache.rat.config.AddLicenseHeaders.FALSE + "'", addLicenseHeaders11.equals(org.apache.rat.config.AddLicenseHeaders.FALSE));
        org.junit.Assert.assertNull(claimStatistic15);
        org.junit.Assert.assertTrue("'" + licenseFilter16 + "' != '" + org.apache.rat.license.LicenseSetFactory.LicenseFilter.all + "'", licenseFilter16.equals(org.apache.rat.license.LicenseSetFactory.LicenseFilter.all));
        org.junit.Assert.assertNull(filenameFilter21);
        org.junit.Assert.assertTrue("'" + licenseFilter22 + "' != '" + org.apache.rat.license.LicenseSetFactory.LicenseFilter.all + "'", licenseFilter22.equals(org.apache.rat.license.LicenseSetFactory.LicenseFilter.all));
        org.junit.Assert.assertNotNull(iLicenseSet23);
        org.junit.Assert.assertTrue("'" + addLicenseHeaders24 + "' != '" + org.apache.rat.config.AddLicenseHeaders.FALSE + "'", addLicenseHeaders24.equals(org.apache.rat.config.AddLicenseHeaders.FALSE));
        org.junit.Assert.assertNull(claimStatistic28);
        org.junit.Assert.assertTrue("'" + licenseFilter29 + "' != '" + org.apache.rat.license.LicenseSetFactory.LicenseFilter.all + "'", licenseFilter29.equals(org.apache.rat.license.LicenseSetFactory.LicenseFilter.all));
        org.junit.Assert.assertNull(filenameFilter33);
        org.junit.Assert.assertNull(filenameFilter36);
        org.junit.Assert.assertTrue("'" + licenseFilter37 + "' != '" + org.apache.rat.license.LicenseSetFactory.LicenseFilter.all + "'", licenseFilter37.equals(org.apache.rat.license.LicenseSetFactory.LicenseFilter.all));
        org.junit.Assert.assertNotNull(iLicenseSet38);
        org.junit.Assert.assertTrue("'" + addLicenseHeaders39 + "' != '" + org.apache.rat.config.AddLicenseHeaders.FALSE + "'", addLicenseHeaders39.equals(org.apache.rat.config.AddLicenseHeaders.FALSE));
        org.junit.Assert.assertNull(claimStatistic43);
        org.junit.Assert.assertTrue("'" + licenseFilter44 + "' != '" + org.apache.rat.license.LicenseSetFactory.LicenseFilter.all + "'", licenseFilter44.equals(org.apache.rat.license.LicenseSetFactory.LicenseFilter.all));
        org.junit.Assert.assertNull(filenameFilter49);
        org.junit.Assert.assertTrue("'" + licenseFilter50 + "' != '" + org.apache.rat.license.LicenseSetFactory.LicenseFilter.all + "'", licenseFilter50.equals(org.apache.rat.license.LicenseSetFactory.LicenseFilter.all));
        org.junit.Assert.assertNotNull(iLicenseSet51);
        org.junit.Assert.assertTrue("'" + addLicenseHeaders52 + "' != '" + org.apache.rat.config.AddLicenseHeaders.FALSE + "'", addLicenseHeaders52.equals(org.apache.rat.config.AddLicenseHeaders.FALSE));
        org.junit.Assert.assertNull(claimStatistic56);
        org.junit.Assert.assertTrue("'" + licenseFilter57 + "' != '" + org.apache.rat.license.LicenseSetFactory.LicenseFilter.all + "'", licenseFilter57.equals(org.apache.rat.license.LicenseSetFactory.LicenseFilter.all));
        org.junit.Assert.assertNotNull(iLicenseSet61);
        org.junit.Assert.assertNotNull(strArray67);
        org.junit.Assert.assertTrue("'" + boolean69 + "' != '" + true + "'", boolean69 == true);
        org.junit.Assert.assertTrue("'" + boolean71 + "' != '" + true + "'", boolean71 == true);
        org.junit.Assert.assertNotNull(strItor72);
        org.junit.Assert.assertNotNull(objArray73);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray73), "[AllBuilder:, Datum [ name ='http://org/apache/rat/meta-data#LicenseFamilyCategory',value ='GPL1  '], MANIFEST.MF, The MIT License, http://org/apache/rat/meta-data#LicenseFamilyCategory, http://org/apache/rat/meta-data#LicenseFamilyName]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray73), "[AllBuilder:, Datum [ name ='http://org/apache/rat/meta-data#LicenseFamilyCategory',value ='GPL1  '], MANIFEST.MF, The MIT License, http://org/apache/rat/meta-data#LicenseFamilyCategory, http://org/apache/rat/meta-data#LicenseFamilyName]");
        org.junit.Assert.assertTrue("'" + licenseFilter75 + "' != '" + org.apache.rat.license.LicenseSetFactory.LicenseFilter.all + "'", licenseFilter75.equals(org.apache.rat.license.LicenseSetFactory.LicenseFilter.all));
        org.junit.Assert.assertNotNull(iLicenseFamilySet76);
        org.junit.Assert.assertNull(filenameFilter80);
        org.junit.Assert.assertTrue("'" + boolean81 + "' != '" + true + "'", boolean81 == true);
        org.junit.Assert.assertNotNull(outputStreamIOSupplier82);
        org.junit.Assert.assertNull(inputStreamIOSupplier83);
        org.junit.Assert.assertNotNull(iLicenseFamilyArray86);
        org.junit.Assert.assertTrue("'" + boolean88 + "' != '" + false + "'", boolean88 == false);
        org.junit.Assert.assertTrue("'" + level90 + "' != '" + org.apache.rat.utils.Log.Level.ERROR + "'", level90.equals(org.apache.rat.utils.Log.Level.ERROR));
        org.junit.Assert.assertTrue("'" + boolean96 + "' != '" + false + "'", boolean96 == false);
        org.junit.Assert.assertNotNull(outputStreamIOSupplier97);
    }

    @Test
    public void test12599() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest25.test12599");
        org.apache.rat.utils.DefaultLog defaultLog0 = org.apache.rat.utils.DefaultLog.INSTANCE;
        org.apache.rat.annotation.ApacheV2LicenseAppender apacheV2LicenseAppender1 = new org.apache.rat.annotation.ApacheV2LicenseAppender((org.apache.rat.utils.Log) defaultLog0);
        org.apache.rat.utils.Log log2 = null;
        org.apache.rat.ReportConfiguration reportConfiguration3 = new org.apache.rat.ReportConfiguration(log2);
        org.apache.rat.report.claim.ClaimStatistic claimStatistic4 = org.apache.rat.Reporter.report(reportConfiguration3);
        org.apache.rat.utils.Log log5 = null;
        org.apache.rat.ReportConfiguration reportConfiguration6 = new org.apache.rat.ReportConfiguration(log5);
        org.apache.rat.report.claim.ClaimStatistic claimStatistic7 = org.apache.rat.Reporter.report(reportConfiguration6);
        org.apache.rat.utils.ReportingSet.Options options8 = org.apache.rat.utils.ReportingSet.Options.OVERWRITE;
        reportConfiguration6.licenseDuplicateOption(options8);
        reportConfiguration3.familyDuplicateOption(options8);
        org.apache.commons.io.function.IOSupplier<java.io.PrintWriter> printWriterIOSupplier11 = reportConfiguration3.getWriter();
        org.apache.rat.utils.Log log12 = null;
        org.apache.rat.ReportConfiguration reportConfiguration13 = new org.apache.rat.ReportConfiguration(log12);
        reportConfiguration13.addApprovedLicenseCategory(".cvsignore");
        org.apache.rat.utils.Log.Level level16 = org.apache.rat.utils.Log.Level.ERROR;
        reportConfiguration13.logFamilyCollisions(level16);
        reportConfiguration3.logFamilyCollisions(level16);
        org.apache.rat.Defaults.Builder builder19 = org.apache.rat.Defaults.builder();
        org.apache.rat.Defaults.Builder builder20 = builder19.noDefault();
        defaultLog0.log(level16, (java.lang.Object) builder19);
        org.apache.rat.Defaults.Builder builder22 = builder19.noDefault();
        java.net.URL uRL23 = null;
        org.apache.rat.Defaults.Builder builder24 = builder22.remove(uRL23);
        org.apache.rat.Defaults.Builder builder25 = builder24.noDefault();
        org.apache.rat.Defaults.Builder builder26 = builder24.noDefault();
        java.net.URL uRL27 = null;
        org.apache.rat.Defaults.Builder builder28 = builder24.remove(uRL27);
        org.apache.rat.Defaults.Builder builder29 = builder24.noDefault();
        java.net.URL uRL30 = null;
        // The following exception was thrown during execution in test generation
        try {
            org.apache.rat.Defaults.Builder builder31 = builder29.add(uRL30);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(defaultLog0);
        org.junit.Assert.assertNull(claimStatistic4);
        org.junit.Assert.assertNull(claimStatistic7);
        org.junit.Assert.assertTrue("'" + options8 + "' != '" + org.apache.rat.utils.ReportingSet.Options.OVERWRITE + "'", options8.equals(org.apache.rat.utils.ReportingSet.Options.OVERWRITE));
        org.junit.Assert.assertNotNull(printWriterIOSupplier11);
        org.junit.Assert.assertTrue("'" + level16 + "' != '" + org.apache.rat.utils.Log.Level.ERROR + "'", level16.equals(org.apache.rat.utils.Log.Level.ERROR));
        org.junit.Assert.assertNotNull(builder19);
        org.junit.Assert.assertNotNull(builder20);
        org.junit.Assert.assertNotNull(builder22);
        org.junit.Assert.assertNotNull(builder24);
        org.junit.Assert.assertNotNull(builder25);
        org.junit.Assert.assertNotNull(builder26);
        org.junit.Assert.assertNotNull(builder28);
        org.junit.Assert.assertNotNull(builder29);
    }

    @Test
    public void test12600() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest25.test12600");
        org.apache.rat.utils.Log log0 = null;
        org.apache.rat.ReportConfiguration reportConfiguration1 = new org.apache.rat.ReportConfiguration(log0);
        reportConfiguration1.addApprovedLicenseCategory(".cvsignore");
        org.apache.rat.utils.Log log4 = null;
        org.apache.rat.ReportConfiguration reportConfiguration5 = new org.apache.rat.ReportConfiguration(log4);
        java.io.FilenameFilter filenameFilter6 = reportConfiguration5.getInputFileFilter();
        org.apache.rat.license.LicenseSetFactory.LicenseFilter licenseFilter7 = org.apache.rat.license.LicenseSetFactory.LicenseFilter.all;
        java.util.SortedSet<org.apache.rat.license.ILicense> iLicenseSet8 = reportConfiguration5.getLicenses(licenseFilter7);
        reportConfiguration1.addLicensesIfNotPresent((java.util.Collection<org.apache.rat.license.ILicense>) iLicenseSet8);
        org.apache.rat.license.ILicenseFamily iLicenseFamily10 = null;
        reportConfiguration1.addFamily(iLicenseFamily10);
        java.lang.String str12 = reportConfiguration1.getCopyrightMessage();
        java.lang.String str13 = reportConfiguration1.getCopyrightMessage();
        boolean boolean14 = reportConfiguration1.isStyleReport();
        org.apache.rat.Defaults.Builder builder15 = org.apache.rat.Defaults.builder();
        org.apache.rat.Defaults defaults16 = builder15.build();
        org.apache.rat.utils.Log log17 = null;
        org.apache.rat.ReportConfiguration reportConfiguration18 = new org.apache.rat.ReportConfiguration(log17);
        java.io.FilenameFilter filenameFilter19 = reportConfiguration18.getInputFileFilter();
        org.apache.rat.license.LicenseSetFactory.LicenseFilter licenseFilter20 = org.apache.rat.license.LicenseSetFactory.LicenseFilter.all;
        java.util.SortedSet<org.apache.rat.license.ILicense> iLicenseSet21 = reportConfiguration18.getLicenses(licenseFilter20);
        org.apache.rat.config.AddLicenseHeaders addLicenseHeaders22 = org.apache.rat.config.AddLicenseHeaders.FALSE;
        reportConfiguration18.setAddLicenseHeaders(addLicenseHeaders22);
        org.apache.rat.utils.Log log24 = null;
        org.apache.rat.ReportConfiguration reportConfiguration25 = new org.apache.rat.ReportConfiguration(log24);
        org.apache.rat.report.claim.ClaimStatistic claimStatistic26 = org.apache.rat.Reporter.report(reportConfiguration25);
        org.apache.rat.license.LicenseSetFactory.LicenseFilter licenseFilter27 = org.apache.rat.license.LicenseSetFactory.LicenseFilter.all;
        org.apache.rat.Reporter.listLicenses(reportConfiguration25, licenseFilter27);
        org.apache.rat.Reporter.listLicenses(reportConfiguration18, licenseFilter27);
        org.apache.rat.utils.Log log30 = null;
        org.apache.rat.ReportConfiguration reportConfiguration31 = new org.apache.rat.ReportConfiguration(log30);
        java.io.FilenameFilter filenameFilter32 = reportConfiguration31.getInputFileFilter();
        org.apache.rat.license.LicenseSetFactory.LicenseFilter licenseFilter33 = org.apache.rat.license.LicenseSetFactory.LicenseFilter.all;
        java.util.SortedSet<org.apache.rat.license.ILicense> iLicenseSet34 = reportConfiguration31.getLicenses(licenseFilter33);
        org.apache.rat.config.AddLicenseHeaders addLicenseHeaders35 = org.apache.rat.config.AddLicenseHeaders.FALSE;
        reportConfiguration31.setAddLicenseHeaders(addLicenseHeaders35);
        org.apache.rat.utils.Log log37 = null;
        org.apache.rat.ReportConfiguration reportConfiguration38 = new org.apache.rat.ReportConfiguration(log37);
        org.apache.rat.report.claim.ClaimStatistic claimStatistic39 = org.apache.rat.Reporter.report(reportConfiguration38);
        org.apache.rat.license.LicenseSetFactory.LicenseFilter licenseFilter40 = org.apache.rat.license.LicenseSetFactory.LicenseFilter.all;
        org.apache.rat.Reporter.listLicenses(reportConfiguration38, licenseFilter40);
        org.apache.rat.Reporter.listLicenses(reportConfiguration31, licenseFilter40);
        java.util.SortedSet<org.apache.rat.license.ILicenseFamily> iLicenseFamilySet43 = reportConfiguration18.getLicenseFamilies(licenseFilter40);
        java.util.SortedSet<org.apache.rat.license.ILicense> iLicenseSet44 = defaults16.getLicenses(licenseFilter40);
        org.apache.rat.license.ILicense[] iLicenseArray45 = new org.apache.rat.license.ILicense[] {};
        java.util.TreeSet<org.apache.rat.license.ILicense> iLicenseSet46 = new java.util.TreeSet<org.apache.rat.license.ILicense>();
        boolean boolean47 = java.util.Collections.addAll((java.util.Collection<org.apache.rat.license.ILicense>) iLicenseSet46, iLicenseArray45);
        java.lang.String[] strArray60 = new java.lang.String[] { "GPL2 ", "GPL1 ", "notice", "http://org/apache/rat/meta-data#LicenseFamilyName", "notice", "GPL2 ", "http://org/apache/rat/meta-data#LicenseFamilyName", "", "GPL2 ", "", "GPL1 ", "hi!" };
        java.util.ArrayList<java.lang.String> strList61 = new java.util.ArrayList<java.lang.String>();
        boolean boolean62 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strList61, strArray60);
        org.apache.rat.license.LicenseSetFactory licenseSetFactory63 = new org.apache.rat.license.LicenseSetFactory((java.util.SortedSet<org.apache.rat.license.ILicense>) iLicenseSet46, (java.util.Collection<java.lang.String>) strList61);
        org.apache.rat.utils.Log log64 = null;
        org.apache.rat.ReportConfiguration reportConfiguration65 = new org.apache.rat.ReportConfiguration(log64);
        java.io.FilenameFilter filenameFilter66 = reportConfiguration65.getInputFileFilter();
        org.apache.rat.license.LicenseSetFactory.LicenseFilter licenseFilter67 = org.apache.rat.license.LicenseSetFactory.LicenseFilter.all;
        java.util.SortedSet<org.apache.rat.license.ILicense> iLicenseSet68 = reportConfiguration65.getLicenses(licenseFilter67);
        org.apache.rat.config.AddLicenseHeaders addLicenseHeaders69 = org.apache.rat.config.AddLicenseHeaders.FALSE;
        reportConfiguration65.setAddLicenseHeaders(addLicenseHeaders69);
        org.apache.rat.utils.Log log71 = null;
        org.apache.rat.ReportConfiguration reportConfiguration72 = new org.apache.rat.ReportConfiguration(log71);
        org.apache.rat.report.claim.ClaimStatistic claimStatistic73 = org.apache.rat.Reporter.report(reportConfiguration72);
        org.apache.rat.license.LicenseSetFactory.LicenseFilter licenseFilter74 = org.apache.rat.license.LicenseSetFactory.LicenseFilter.all;
        org.apache.rat.Reporter.listLicenses(reportConfiguration72, licenseFilter74);
        org.apache.rat.Reporter.listLicenses(reportConfiguration65, licenseFilter74);
        org.apache.rat.utils.Log log77 = null;
        org.apache.rat.ReportConfiguration reportConfiguration78 = new org.apache.rat.ReportConfiguration(log77);
        java.io.FilenameFilter filenameFilter79 = reportConfiguration78.getInputFileFilter();
        org.apache.rat.license.LicenseSetFactory.LicenseFilter licenseFilter80 = org.apache.rat.license.LicenseSetFactory.LicenseFilter.all;
        java.util.SortedSet<org.apache.rat.license.ILicense> iLicenseSet81 = reportConfiguration78.getLicenses(licenseFilter80);
        org.apache.rat.config.AddLicenseHeaders addLicenseHeaders82 = org.apache.rat.config.AddLicenseHeaders.FALSE;
        reportConfiguration78.setAddLicenseHeaders(addLicenseHeaders82);
        org.apache.rat.utils.Log log84 = null;
        org.apache.rat.ReportConfiguration reportConfiguration85 = new org.apache.rat.ReportConfiguration(log84);
        org.apache.rat.report.claim.ClaimStatistic claimStatistic86 = org.apache.rat.Reporter.report(reportConfiguration85);
        org.apache.rat.license.LicenseSetFactory.LicenseFilter licenseFilter87 = org.apache.rat.license.LicenseSetFactory.LicenseFilter.all;
        org.apache.rat.Reporter.listLicenses(reportConfiguration85, licenseFilter87);
        org.apache.rat.Reporter.listLicenses(reportConfiguration78, licenseFilter87);
        org.apache.rat.Reporter.listLicenses(reportConfiguration65, licenseFilter87);
        java.util.SortedSet<org.apache.rat.license.ILicense> iLicenseSet91 = licenseSetFactory63.getLicenses(licenseFilter87);
        java.util.SortedSet<org.apache.rat.license.ILicenseFamily> iLicenseFamilySet92 = defaults16.getLicenseFamilies(licenseFilter87);
        org.apache.rat.Reporter.listLicenseFamilies(reportConfiguration1, licenseFilter87);
        org.junit.Assert.assertNull(filenameFilter6);
        org.junit.Assert.assertTrue("'" + licenseFilter7 + "' != '" + org.apache.rat.license.LicenseSetFactory.LicenseFilter.all + "'", licenseFilter7.equals(org.apache.rat.license.LicenseSetFactory.LicenseFilter.all));
        org.junit.Assert.assertNotNull(iLicenseSet8);
        org.junit.Assert.assertNull(str12);
        org.junit.Assert.assertNull(str13);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + true + "'", boolean14 == true);
        org.junit.Assert.assertNotNull(builder15);
        org.junit.Assert.assertNotNull(defaults16);
        org.junit.Assert.assertNull(filenameFilter19);
        org.junit.Assert.assertTrue("'" + licenseFilter20 + "' != '" + org.apache.rat.license.LicenseSetFactory.LicenseFilter.all + "'", licenseFilter20.equals(org.apache.rat.license.LicenseSetFactory.LicenseFilter.all));
        org.junit.Assert.assertNotNull(iLicenseSet21);
        org.junit.Assert.assertTrue("'" + addLicenseHeaders22 + "' != '" + org.apache.rat.config.AddLicenseHeaders.FALSE + "'", addLicenseHeaders22.equals(org.apache.rat.config.AddLicenseHeaders.FALSE));
        org.junit.Assert.assertNull(claimStatistic26);
        org.junit.Assert.assertTrue("'" + licenseFilter27 + "' != '" + org.apache.rat.license.LicenseSetFactory.LicenseFilter.all + "'", licenseFilter27.equals(org.apache.rat.license.LicenseSetFactory.LicenseFilter.all));
        org.junit.Assert.assertNull(filenameFilter32);
        org.junit.Assert.assertTrue("'" + licenseFilter33 + "' != '" + org.apache.rat.license.LicenseSetFactory.LicenseFilter.all + "'", licenseFilter33.equals(org.apache.rat.license.LicenseSetFactory.LicenseFilter.all));
        org.junit.Assert.assertNotNull(iLicenseSet34);
        org.junit.Assert.assertTrue("'" + addLicenseHeaders35 + "' != '" + org.apache.rat.config.AddLicenseHeaders.FALSE + "'", addLicenseHeaders35.equals(org.apache.rat.config.AddLicenseHeaders.FALSE));
        org.junit.Assert.assertNull(claimStatistic39);
        org.junit.Assert.assertTrue("'" + licenseFilter40 + "' != '" + org.apache.rat.license.LicenseSetFactory.LicenseFilter.all + "'", licenseFilter40.equals(org.apache.rat.license.LicenseSetFactory.LicenseFilter.all));
        org.junit.Assert.assertNotNull(iLicenseFamilySet43);
        org.junit.Assert.assertNotNull(iLicenseSet44);
        org.junit.Assert.assertNotNull(iLicenseArray45);
        org.junit.Assert.assertTrue("'" + boolean47 + "' != '" + false + "'", boolean47 == false);
        org.junit.Assert.assertNotNull(strArray60);
        org.junit.Assert.assertTrue("'" + boolean62 + "' != '" + true + "'", boolean62 == true);
        org.junit.Assert.assertNull(filenameFilter66);
        org.junit.Assert.assertTrue("'" + licenseFilter67 + "' != '" + org.apache.rat.license.LicenseSetFactory.LicenseFilter.all + "'", licenseFilter67.equals(org.apache.rat.license.LicenseSetFactory.LicenseFilter.all));
        org.junit.Assert.assertNotNull(iLicenseSet68);
        org.junit.Assert.assertTrue("'" + addLicenseHeaders69 + "' != '" + org.apache.rat.config.AddLicenseHeaders.FALSE + "'", addLicenseHeaders69.equals(org.apache.rat.config.AddLicenseHeaders.FALSE));
        org.junit.Assert.assertNull(claimStatistic73);
        org.junit.Assert.assertTrue("'" + licenseFilter74 + "' != '" + org.apache.rat.license.LicenseSetFactory.LicenseFilter.all + "'", licenseFilter74.equals(org.apache.rat.license.LicenseSetFactory.LicenseFilter.all));
        org.junit.Assert.assertNull(filenameFilter79);
        org.junit.Assert.assertTrue("'" + licenseFilter80 + "' != '" + org.apache.rat.license.LicenseSetFactory.LicenseFilter.all + "'", licenseFilter80.equals(org.apache.rat.license.LicenseSetFactory.LicenseFilter.all));
        org.junit.Assert.assertNotNull(iLicenseSet81);
        org.junit.Assert.assertTrue("'" + addLicenseHeaders82 + "' != '" + org.apache.rat.config.AddLicenseHeaders.FALSE + "'", addLicenseHeaders82.equals(org.apache.rat.config.AddLicenseHeaders.FALSE));
        org.junit.Assert.assertNull(claimStatistic86);
        org.junit.Assert.assertTrue("'" + licenseFilter87 + "' != '" + org.apache.rat.license.LicenseSetFactory.LicenseFilter.all + "'", licenseFilter87.equals(org.apache.rat.license.LicenseSetFactory.LicenseFilter.all));
        org.junit.Assert.assertNotNull(iLicenseSet91);
        org.junit.Assert.assertNotNull(iLicenseFamilySet92);
    }

    @Test
    public void test12601() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest25.test12601");
        org.apache.rat.Defaults.Builder builder0 = org.apache.rat.Defaults.builder();
        org.apache.rat.Defaults defaults1 = builder0.build();
        org.apache.rat.Defaults.Builder builder2 = builder0.noDefault();
        org.apache.rat.Defaults.Builder builder3 = builder0.noDefault();
        org.apache.rat.Defaults.Builder builder5 = builder0.add("Datum [ name ='http://org/apache/rat/meta-data#LicenseFamilyName',value ='Academic Free License, Version 2.1 ']");
        org.apache.rat.Defaults.Builder builder6 = builder0.noDefault();
        org.apache.rat.Defaults.Builder builder8 = builder6.remove("GPL2 ");
        org.apache.rat.Defaults.Builder builder10 = builder8.remove("null http://org/apache/rat/meta-data");
        org.apache.rat.Defaults.Builder builder12 = builder8.remove("null NotBuilder: MathcerRefBuilder: null");
        java.net.URL uRL13 = null;
        // The following exception was thrown during execution in test generation
        try {
            org.apache.rat.Defaults.Builder builder14 = builder8.remove(uRL13);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(builder0);
        org.junit.Assert.assertNotNull(defaults1);
        org.junit.Assert.assertNotNull(builder2);
        org.junit.Assert.assertNotNull(builder3);
        org.junit.Assert.assertNotNull(builder5);
        org.junit.Assert.assertNotNull(builder6);
        org.junit.Assert.assertNotNull(builder8);
        org.junit.Assert.assertNotNull(builder10);
        org.junit.Assert.assertNotNull(builder12);
    }

    @Test
    public void test12602() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest25.test12602");
        org.apache.rat.utils.Log log0 = null;
        org.apache.rat.ReportConfiguration reportConfiguration1 = new org.apache.rat.ReportConfiguration(log0);
        org.apache.rat.report.claim.ClaimStatistic claimStatistic2 = org.apache.rat.Reporter.report(reportConfiguration1);
        org.apache.rat.utils.Log log3 = null;
        org.apache.rat.ReportConfiguration reportConfiguration4 = new org.apache.rat.ReportConfiguration(log3);
        org.apache.rat.report.claim.ClaimStatistic claimStatistic5 = org.apache.rat.Reporter.report(reportConfiguration4);
        org.apache.rat.utils.ReportingSet.Options options6 = org.apache.rat.utils.ReportingSet.Options.OVERWRITE;
        reportConfiguration4.licenseDuplicateOption(options6);
        reportConfiguration1.familyDuplicateOption(options6);
        org.apache.commons.io.function.IOSupplier<java.io.PrintWriter> printWriterIOSupplier9 = reportConfiguration1.getWriter();
        boolean boolean10 = reportConfiguration1.isAddingLicensesForced();
        java.io.FilenameFilter filenameFilter11 = reportConfiguration1.getInputFileFilter();
        org.apache.commons.io.function.IOSupplier<java.io.InputStream> inputStreamIOSupplier12 = reportConfiguration1.getStyleSheet();
        java.util.SortedSet<java.lang.String> strSet13 = reportConfiguration1.getApprovedLicenseCategories();
        java.lang.String str14 = reportConfiguration1.getCopyrightMessage();
        org.apache.commons.io.function.IOSupplier<java.io.InputStream> inputStreamIOSupplier15 = reportConfiguration1.getStyleSheet();
        org.junit.Assert.assertNull(claimStatistic2);
        org.junit.Assert.assertNull(claimStatistic5);
        org.junit.Assert.assertTrue("'" + options6 + "' != '" + org.apache.rat.utils.ReportingSet.Options.OVERWRITE + "'", options6.equals(org.apache.rat.utils.ReportingSet.Options.OVERWRITE));
        org.junit.Assert.assertNotNull(printWriterIOSupplier9);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertNull(filenameFilter11);
        org.junit.Assert.assertNull(inputStreamIOSupplier12);
        org.junit.Assert.assertNotNull(strSet13);
        org.junit.Assert.assertNull(str14);
        org.junit.Assert.assertNull(inputStreamIOSupplier15);
    }

    @Test
    public void test12603() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest25.test12603");
        java.io.Writer writer0 = null;
        org.apache.rat.report.xml.writer.impl.base.XmlWriter xmlWriter1 = new org.apache.rat.report.xml.writer.impl.base.XmlWriter(writer0);
        org.apache.rat.report.claim.impl.xml.SimpleXmlClaimReporter simpleXmlClaimReporter2 = new org.apache.rat.report.claim.impl.xml.SimpleXmlClaimReporter((org.apache.rat.report.xml.writer.IXmlWriter) xmlWriter1);
        org.apache.rat.report.claim.impl.xml.SimpleXmlClaimReporter simpleXmlClaimReporter3 = new org.apache.rat.report.claim.impl.xml.SimpleXmlClaimReporter((org.apache.rat.report.xml.writer.IXmlWriter) xmlWriter1);
        org.apache.rat.report.claim.impl.xml.SimpleXmlClaimReporter simpleXmlClaimReporter4 = new org.apache.rat.report.claim.impl.xml.SimpleXmlClaimReporter((org.apache.rat.report.xml.writer.IXmlWriter) xmlWriter1);
        org.apache.rat.report.claim.impl.xml.SimpleXmlClaimReporter simpleXmlClaimReporter5 = new org.apache.rat.report.claim.impl.xml.SimpleXmlClaimReporter((org.apache.rat.report.xml.writer.IXmlWriter) xmlWriter1);
        org.apache.rat.report.claim.impl.xml.SimpleXmlClaimReporter simpleXmlClaimReporter6 = new org.apache.rat.report.claim.impl.xml.SimpleXmlClaimReporter((org.apache.rat.report.xml.writer.IXmlWriter) xmlWriter1);
        org.apache.rat.report.claim.impl.xml.SimpleXmlClaimReporter simpleXmlClaimReporter7 = new org.apache.rat.report.claim.impl.xml.SimpleXmlClaimReporter((org.apache.rat.report.xml.writer.IXmlWriter) xmlWriter1);
        org.apache.rat.report.claim.impl.xml.SimpleXmlClaimReporter simpleXmlClaimReporter8 = new org.apache.rat.report.claim.impl.xml.SimpleXmlClaimReporter((org.apache.rat.report.xml.writer.IXmlWriter) xmlWriter1);
        org.apache.rat.report.claim.impl.xml.SimpleXmlClaimReporter simpleXmlClaimReporter9 = new org.apache.rat.report.claim.impl.xml.SimpleXmlClaimReporter((org.apache.rat.report.xml.writer.IXmlWriter) xmlWriter1);
        org.apache.rat.report.claim.impl.xml.SimpleXmlClaimReporter simpleXmlClaimReporter10 = new org.apache.rat.report.claim.impl.xml.SimpleXmlClaimReporter((org.apache.rat.report.xml.writer.IXmlWriter) xmlWriter1);
        org.apache.rat.report.claim.impl.xml.SimpleXmlClaimReporter simpleXmlClaimReporter11 = new org.apache.rat.report.claim.impl.xml.SimpleXmlClaimReporter((org.apache.rat.report.xml.writer.IXmlWriter) xmlWriter1);
        org.apache.rat.report.claim.impl.xml.SimpleXmlClaimReporter simpleXmlClaimReporter12 = new org.apache.rat.report.claim.impl.xml.SimpleXmlClaimReporter((org.apache.rat.report.xml.writer.IXmlWriter) xmlWriter1);
        org.apache.rat.report.claim.impl.xml.SimpleXmlClaimReporter simpleXmlClaimReporter13 = new org.apache.rat.report.claim.impl.xml.SimpleXmlClaimReporter((org.apache.rat.report.xml.writer.IXmlWriter) xmlWriter1);
        org.apache.rat.report.claim.impl.xml.SimpleXmlClaimReporter simpleXmlClaimReporter14 = new org.apache.rat.report.claim.impl.xml.SimpleXmlClaimReporter((org.apache.rat.report.xml.writer.IXmlWriter) xmlWriter1);
        org.apache.rat.report.claim.impl.xml.SimpleXmlClaimReporter simpleXmlClaimReporter15 = new org.apache.rat.report.claim.impl.xml.SimpleXmlClaimReporter((org.apache.rat.report.xml.writer.IXmlWriter) xmlWriter1);
        org.apache.rat.report.claim.impl.xml.SimpleXmlClaimReporter simpleXmlClaimReporter16 = new org.apache.rat.report.claim.impl.xml.SimpleXmlClaimReporter((org.apache.rat.report.xml.writer.IXmlWriter) xmlWriter1);
        org.apache.rat.report.claim.impl.xml.SimpleXmlClaimReporter simpleXmlClaimReporter17 = new org.apache.rat.report.claim.impl.xml.SimpleXmlClaimReporter((org.apache.rat.report.xml.writer.IXmlWriter) xmlWriter1);
        org.apache.rat.report.claim.impl.xml.SimpleXmlClaimReporter simpleXmlClaimReporter18 = new org.apache.rat.report.claim.impl.xml.SimpleXmlClaimReporter((org.apache.rat.report.xml.writer.IXmlWriter) xmlWriter1);
        // The following exception was thrown during execution in test generation
        try {
            simpleXmlClaimReporter18.endReport();
            org.junit.Assert.fail("Expected exception of type org.apache.rat.api.RatException; message: Cannot close last element");
        } catch (org.apache.rat.api.RatException e) {
            // Expected exception.
        }
    }

    @Test
    public void test12604() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest25.test12604");
        boolean boolean1 = org.apache.rat.document.impl.guesser.BinaryGuesser.isBinaryData("b4045e53-e706-40d9-a143-f2808a4bc773");
        org.junit.Assert.assertTrue("'" + boolean1 + "' != '" + false + "'", boolean1 == false);
    }

    @Test
    public void test12605() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest25.test12605");
        org.apache.rat.report.claim.ClaimStatistic claimStatistic0 = new org.apache.rat.report.claim.ClaimStatistic();
        claimStatistic0.setNumApproved((int) (short) 10);
        claimStatistic0.setNumUnknown((int) '#');
        int int5 = claimStatistic0.getNumUnApproved();
        java.util.Map<java.lang.String, java.lang.Integer> strMap6 = claimStatistic0.getLicenseFileCodeMap();
        claimStatistic0.setNumGenerated((int) (short) 1);
        java.util.Map<java.lang.String, java.lang.Integer> strMap9 = claimStatistic0.getLicenseFileNameMap();
        java.util.Map<java.lang.String, java.lang.Integer> strMap10 = claimStatistic0.getDocumentCategoryMap();
        claimStatistic0.setNumUnknown((int) '#');
        java.util.Map<java.lang.String, java.lang.Integer> strMap13 = null;
        claimStatistic0.setLicenseFileNameMap(strMap13);
        java.util.Map<java.lang.String, java.lang.Integer> strMap15 = null;
        claimStatistic0.setDocumentCategoryMap(strMap15);
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 0 + "'", int5 == 0);
        org.junit.Assert.assertNull(strMap6);
        org.junit.Assert.assertNull(strMap9);
        org.junit.Assert.assertNull(strMap10);
    }

    @Test
    public void test12606() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest25.test12606");
        org.apache.rat.analysis.matchers.FullTextMatcher fullTextMatcher1 = new org.apache.rat.analysis.matchers.FullTextMatcher("Copyright Builder: s:null e:null o:null");
        org.apache.rat.analysis.IHeaderMatcher.State state2 = fullTextMatcher1.currentState();
        org.apache.rat.analysis.IHeaderMatcher.State state3 = fullTextMatcher1.currentState();
        fullTextMatcher1.reset();
        org.junit.Assert.assertTrue("'" + state2 + "' != '" + org.apache.rat.analysis.IHeaderMatcher.State.i + "'", state2.equals(org.apache.rat.analysis.IHeaderMatcher.State.i));
        org.junit.Assert.assertTrue("'" + state3 + "' != '" + org.apache.rat.analysis.IHeaderMatcher.State.i + "'", state3.equals(org.apache.rat.analysis.IHeaderMatcher.State.i));
    }

    @Test
    public void test12607() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest25.test12607");
        org.apache.rat.utils.DefaultLog defaultLog0 = org.apache.rat.utils.DefaultLog.INSTANCE;
        org.apache.rat.annotation.ApacheV2LicenseAppender apacheV2LicenseAppender1 = new org.apache.rat.annotation.ApacheV2LicenseAppender((org.apache.rat.utils.Log) defaultLog0);
        org.apache.rat.utils.Log log2 = null;
        org.apache.rat.ReportConfiguration reportConfiguration3 = new org.apache.rat.ReportConfiguration(log2);
        org.apache.rat.report.claim.ClaimStatistic claimStatistic4 = org.apache.rat.Reporter.report(reportConfiguration3);
        org.apache.rat.utils.Log log5 = null;
        org.apache.rat.ReportConfiguration reportConfiguration6 = new org.apache.rat.ReportConfiguration(log5);
        org.apache.rat.report.claim.ClaimStatistic claimStatistic7 = org.apache.rat.Reporter.report(reportConfiguration6);
        org.apache.rat.utils.ReportingSet.Options options8 = org.apache.rat.utils.ReportingSet.Options.OVERWRITE;
        reportConfiguration6.licenseDuplicateOption(options8);
        reportConfiguration3.familyDuplicateOption(options8);
        org.apache.commons.io.function.IOSupplier<java.io.PrintWriter> printWriterIOSupplier11 = reportConfiguration3.getWriter();
        org.apache.rat.utils.Log log12 = null;
        org.apache.rat.ReportConfiguration reportConfiguration13 = new org.apache.rat.ReportConfiguration(log12);
        reportConfiguration13.addApprovedLicenseCategory(".cvsignore");
        org.apache.rat.utils.Log.Level level16 = org.apache.rat.utils.Log.Level.ERROR;
        reportConfiguration13.logFamilyCollisions(level16);
        reportConfiguration3.logFamilyCollisions(level16);
        org.apache.rat.Defaults.Builder builder19 = org.apache.rat.Defaults.builder();
        org.apache.rat.Defaults.Builder builder20 = builder19.noDefault();
        defaultLog0.log(level16, (java.lang.Object) builder19);
        org.apache.rat.Defaults.Builder builder22 = builder19.noDefault();
        java.net.URL uRL23 = null;
        org.apache.rat.Defaults.Builder builder24 = builder22.remove(uRL23);
        org.apache.rat.Defaults defaults25 = builder24.build();
        java.io.File file26 = null;
        // The following exception was thrown during execution in test generation
        try {
            org.apache.rat.Defaults.Builder builder27 = builder24.add(file26);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(defaultLog0);
        org.junit.Assert.assertNull(claimStatistic4);
        org.junit.Assert.assertNull(claimStatistic7);
        org.junit.Assert.assertTrue("'" + options8 + "' != '" + org.apache.rat.utils.ReportingSet.Options.OVERWRITE + "'", options8.equals(org.apache.rat.utils.ReportingSet.Options.OVERWRITE));
        org.junit.Assert.assertNotNull(printWriterIOSupplier11);
        org.junit.Assert.assertTrue("'" + level16 + "' != '" + org.apache.rat.utils.Log.Level.ERROR + "'", level16.equals(org.apache.rat.utils.Log.Level.ERROR));
        org.junit.Assert.assertNotNull(builder19);
        org.junit.Assert.assertNotNull(builder20);
        org.junit.Assert.assertNotNull(builder22);
        org.junit.Assert.assertNotNull(builder24);
        org.junit.Assert.assertNotNull(defaults25);
    }

    @Test
    public void test12608() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest25.test12608");
        org.apache.rat.analysis.license.FullTextMatchingLicense fullTextMatchingLicense0 = new org.apache.rat.analysis.license.FullTextMatchingLicense();
        fullTextMatchingLicense0.setLicenseFamilyName("hi!");
        java.lang.String str3 = fullTextMatchingLicense0.getLicenseFamilyCategory();
        java.lang.String str4 = fullTextMatchingLicense0.getLicenseFamilyName();
        fullTextMatchingLicense0.setLicenseFamilyName("http://org/apache/rat/meta-data#LicenseFamilyName");
        java.lang.String str7 = fullTextMatchingLicense0.getLicenseFamilyCategory();
        java.lang.String str8 = fullTextMatchingLicense0.getLicenseFamilyCategory();
        fullTextMatchingLicense0.setLicenseFamilyCategory("TextBuilder: 4a00cf7d-fe76-423e-9...");
        org.apache.rat.license.ILicenseFamily iLicenseFamily11 = fullTextMatchingLicense0.getLicenseFamily();
        org.apache.rat.license.ILicenseFamily iLicenseFamily12 = fullTextMatchingLicense0.getLicenseFamily();
        org.junit.Assert.assertNull(str3);
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "hi!" + "'", str4, "hi!");
        org.junit.Assert.assertNull(str7);
        org.junit.Assert.assertNull(str8);
        org.junit.Assert.assertNotNull(iLicenseFamily11);
        org.junit.Assert.assertNotNull(iLicenseFamily12);
    }

    @Test
    public void test12609() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest25.test12609");
        org.apache.rat.configuration.builders.NotBuilder notBuilder0 = new org.apache.rat.configuration.builders.NotBuilder();
        org.apache.rat.configuration.builders.AnyBuilder anyBuilder1 = org.apache.rat.analysis.IHeaderMatcher.Builder.any();
        java.lang.String str2 = anyBuilder1.toString();
        java.util.List<org.apache.rat.analysis.IHeaderMatcher> iHeaderMatcherList3 = anyBuilder1.getChildren();
        org.apache.rat.analysis.IHeaderMatcher iHeaderMatcher4 = anyBuilder1.build();
        org.apache.rat.configuration.builders.AnyBuilder anyBuilder5 = org.apache.rat.analysis.IHeaderMatcher.Builder.any();
        java.lang.String str6 = anyBuilder5.toString();
        java.util.List<org.apache.rat.analysis.IHeaderMatcher> iHeaderMatcherList7 = anyBuilder5.getChildren();
        org.apache.rat.analysis.IHeaderMatcher iHeaderMatcher8 = anyBuilder5.build();
        org.apache.rat.analysis.IHeaderMatcher iHeaderMatcher9 = anyBuilder5.build();
        java.util.List<org.apache.rat.analysis.IHeaderMatcher> iHeaderMatcherList10 = anyBuilder5.getChildren();
        org.apache.rat.configuration.builders.NotBuilder notBuilder11 = new org.apache.rat.configuration.builders.NotBuilder();
        java.lang.String str12 = notBuilder11.toString();
        org.apache.rat.configuration.builders.MatcherRefBuilder matcherRefBuilder13 = org.apache.rat.analysis.IHeaderMatcher.Builder.matcherRef();
        boolean boolean14 = matcherRefBuilder13.hasId();
        java.util.Map<java.lang.String, org.apache.rat.analysis.IHeaderMatcher> strMap15 = null;
        org.apache.rat.configuration.builders.MatcherRefBuilder matcherRefBuilder16 = matcherRefBuilder13.setMatchers(strMap15);
        org.apache.rat.configuration.builders.AllBuilder allBuilder17 = new org.apache.rat.configuration.builders.AllBuilder();
        org.apache.rat.configuration.builders.CopyrightBuilder copyrightBuilder18 = org.apache.rat.analysis.IHeaderMatcher.Builder.copyright();
        org.apache.rat.configuration.builders.CopyrightBuilder copyrightBuilder20 = copyrightBuilder18.setStart("OASIS");
        java.lang.String str21 = copyrightBuilder18.toString();
        org.apache.rat.configuration.builders.CopyrightBuilder copyrightBuilder23 = copyrightBuilder18.setStart("223f0aba-15d4-49e9-901e-5740c137aebf");
        org.apache.rat.configuration.builders.MatcherRefBuilder matcherRefBuilder24 = org.apache.rat.analysis.IHeaderMatcher.Builder.matcherRef();
        boolean boolean25 = matcherRefBuilder24.hasId();
        org.apache.rat.configuration.builders.CopyrightBuilder copyrightBuilder26 = org.apache.rat.analysis.IHeaderMatcher.Builder.copyright();
        org.apache.rat.configuration.builders.CopyrightBuilder copyrightBuilder28 = copyrightBuilder26.setStart("OASIS");
        java.lang.String str29 = copyrightBuilder26.toString();
        org.apache.rat.configuration.builders.CopyrightBuilder copyrightBuilder31 = copyrightBuilder26.setStart("223f0aba-15d4-49e9-901e-5740c137aebf");
        org.apache.rat.configuration.builders.CopyrightBuilder copyrightBuilder32 = org.apache.rat.analysis.IHeaderMatcher.Builder.copyright();
        org.apache.rat.configuration.builders.CopyrightBuilder copyrightBuilder33 = org.apache.rat.analysis.IHeaderMatcher.Builder.copyright();
        java.lang.String str34 = copyrightBuilder33.toString();
        org.apache.rat.configuration.builders.CopyrightBuilder copyrightBuilder36 = copyrightBuilder33.setEnd(".cvsignore");
        boolean boolean37 = copyrightBuilder33.hasId();
        org.apache.rat.configuration.builders.CopyrightBuilder copyrightBuilder38 = org.apache.rat.analysis.IHeaderMatcher.Builder.copyright();
        java.lang.String str39 = copyrightBuilder38.toString();
        org.apache.rat.configuration.builders.CopyrightBuilder copyrightBuilder41 = copyrightBuilder38.setEnd(".cvsignore");
        boolean boolean42 = copyrightBuilder38.hasId();
        java.lang.String str43 = copyrightBuilder38.toString();
        org.apache.rat.configuration.builders.CopyrightBuilder copyrightBuilder44 = org.apache.rat.analysis.IHeaderMatcher.Builder.copyright();
        org.apache.rat.configuration.builders.CopyrightBuilder copyrightBuilder46 = copyrightBuilder44.setStart("OASIS");
        org.apache.rat.configuration.builders.AnyBuilder anyBuilder47 = org.apache.rat.analysis.IHeaderMatcher.Builder.any();
        org.apache.rat.configuration.builders.MatcherRefBuilder matcherRefBuilder48 = org.apache.rat.analysis.IHeaderMatcher.Builder.matcherRef();
        boolean boolean49 = matcherRefBuilder48.hasId();
        java.util.Map<java.lang.String, org.apache.rat.analysis.IHeaderMatcher> strMap50 = null;
        org.apache.rat.configuration.builders.MatcherRefBuilder matcherRefBuilder51 = matcherRefBuilder48.setMatchers(strMap50);
        org.apache.rat.configuration.builders.CopyrightBuilder copyrightBuilder52 = org.apache.rat.analysis.IHeaderMatcher.Builder.copyright();
        org.apache.rat.configuration.builders.MatcherRefBuilder matcherRefBuilder53 = org.apache.rat.analysis.IHeaderMatcher.Builder.matcherRef();
        boolean boolean54 = matcherRefBuilder53.hasId();
        java.lang.String str55 = matcherRefBuilder53.toString();
        java.util.Map<java.lang.String, org.apache.rat.analysis.IHeaderMatcher> strMap56 = null;
        org.apache.rat.configuration.builders.MatcherRefBuilder matcherRefBuilder57 = matcherRefBuilder53.setMatchers(strMap56);
        org.apache.rat.analysis.IHeaderMatcher.Builder[] builderArray58 = new org.apache.rat.analysis.IHeaderMatcher.Builder[] { matcherRefBuilder13, allBuilder17, copyrightBuilder23, matcherRefBuilder24, copyrightBuilder26, copyrightBuilder32, copyrightBuilder33, copyrightBuilder38, copyrightBuilder44, anyBuilder47, matcherRefBuilder48, copyrightBuilder52, matcherRefBuilder53 };
        java.util.ArrayList<org.apache.rat.analysis.IHeaderMatcher.Builder> builderList59 = new java.util.ArrayList<org.apache.rat.analysis.IHeaderMatcher.Builder>();
        boolean boolean60 = java.util.Collections.addAll((java.util.Collection<org.apache.rat.analysis.IHeaderMatcher.Builder>) builderList59, builderArray58);
        org.apache.rat.configuration.builders.AbstractBuilder abstractBuilder61 = notBuilder11.add((java.util.Collection<org.apache.rat.analysis.IHeaderMatcher.Builder>) builderList59);
        org.apache.rat.configuration.builders.AbstractBuilder abstractBuilder62 = anyBuilder5.add((java.util.Collection<org.apache.rat.analysis.IHeaderMatcher.Builder>) builderList59);
        org.apache.rat.configuration.builders.AbstractBuilder abstractBuilder63 = anyBuilder1.add((java.util.Collection<org.apache.rat.analysis.IHeaderMatcher.Builder>) builderList59);
        org.apache.rat.configuration.builders.AbstractBuilder abstractBuilder64 = notBuilder0.add((java.util.Collection<org.apache.rat.analysis.IHeaderMatcher.Builder>) builderList59);
        java.lang.String str65 = notBuilder0.toString();
        org.junit.Assert.assertNotNull(anyBuilder1);
        org.junit.Assert.assertEquals("'" + str2 + "' != '" + "AnyBuilder:" + "'", str2, "AnyBuilder:");
        org.junit.Assert.assertNotNull(iHeaderMatcherList3);
        org.junit.Assert.assertNotNull(iHeaderMatcher4);
        org.junit.Assert.assertNotNull(anyBuilder5);
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "AnyBuilder:" + "'", str6, "AnyBuilder:");
        org.junit.Assert.assertNotNull(iHeaderMatcherList7);
        org.junit.Assert.assertNotNull(iHeaderMatcher8);
        org.junit.Assert.assertNotNull(iHeaderMatcher9);
        org.junit.Assert.assertNotNull(iHeaderMatcherList10);
        org.junit.Assert.assertEquals("'" + str12 + "' != '" + "NotBuilder: null" + "'", str12, "NotBuilder: null");
        org.junit.Assert.assertNotNull(matcherRefBuilder13);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
        org.junit.Assert.assertNotNull(matcherRefBuilder16);
        org.junit.Assert.assertNotNull(copyrightBuilder18);
        org.junit.Assert.assertNotNull(copyrightBuilder20);
        org.junit.Assert.assertEquals("'" + str21 + "' != '" + "Copyright Builder: s:OASIS e:null o:null" + "'", str21, "Copyright Builder: s:OASIS e:null o:null");
        org.junit.Assert.assertNotNull(copyrightBuilder23);
        org.junit.Assert.assertNotNull(matcherRefBuilder24);
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + false + "'", boolean25 == false);
        org.junit.Assert.assertNotNull(copyrightBuilder26);
        org.junit.Assert.assertNotNull(copyrightBuilder28);
        org.junit.Assert.assertEquals("'" + str29 + "' != '" + "Copyright Builder: s:OASIS e:null o:null" + "'", str29, "Copyright Builder: s:OASIS e:null o:null");
        org.junit.Assert.assertNotNull(copyrightBuilder31);
        org.junit.Assert.assertNotNull(copyrightBuilder32);
        org.junit.Assert.assertNotNull(copyrightBuilder33);
        org.junit.Assert.assertEquals("'" + str34 + "' != '" + "Copyright Builder: s:null e:null o:null" + "'", str34, "Copyright Builder: s:null e:null o:null");
        org.junit.Assert.assertNotNull(copyrightBuilder36);
        org.junit.Assert.assertTrue("'" + boolean37 + "' != '" + false + "'", boolean37 == false);
        org.junit.Assert.assertNotNull(copyrightBuilder38);
        org.junit.Assert.assertEquals("'" + str39 + "' != '" + "Copyright Builder: s:null e:null o:null" + "'", str39, "Copyright Builder: s:null e:null o:null");
        org.junit.Assert.assertNotNull(copyrightBuilder41);
        org.junit.Assert.assertTrue("'" + boolean42 + "' != '" + false + "'", boolean42 == false);
        org.junit.Assert.assertEquals("'" + str43 + "' != '" + "Copyright Builder: s:null e:.cvsignore o:null" + "'", str43, "Copyright Builder: s:null e:.cvsignore o:null");
        org.junit.Assert.assertNotNull(copyrightBuilder44);
        org.junit.Assert.assertNotNull(copyrightBuilder46);
        org.junit.Assert.assertNotNull(anyBuilder47);
        org.junit.Assert.assertNotNull(matcherRefBuilder48);
        org.junit.Assert.assertTrue("'" + boolean49 + "' != '" + false + "'", boolean49 == false);
        org.junit.Assert.assertNotNull(matcherRefBuilder51);
        org.junit.Assert.assertNotNull(copyrightBuilder52);
        org.junit.Assert.assertNotNull(matcherRefBuilder53);
        org.junit.Assert.assertTrue("'" + boolean54 + "' != '" + false + "'", boolean54 == false);
        org.junit.Assert.assertEquals("'" + str55 + "' != '" + "MathcerRefBuilder: null" + "'", str55, "MathcerRefBuilder: null");
        org.junit.Assert.assertNotNull(matcherRefBuilder57);
        org.junit.Assert.assertNotNull(builderArray58);
        org.junit.Assert.assertTrue("'" + boolean60 + "' != '" + true + "'", boolean60 == true);
        org.junit.Assert.assertNotNull(abstractBuilder61);
        org.junit.Assert.assertNotNull(abstractBuilder62);
        org.junit.Assert.assertNotNull(abstractBuilder63);
        org.junit.Assert.assertNotNull(abstractBuilder64);
        org.junit.Assert.assertEquals("'" + str65 + "' != '" + "NotBuilder: MathcerRefBuilder: null" + "'", str65, "NotBuilder: MathcerRefBuilder: null");
    }

    @Test
    public void test12610() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest25.test12610");
        org.apache.rat.api.MetaData metaData0 = new org.apache.rat.api.MetaData();
        boolean boolean2 = metaData0.clear("MANIFEST.MF");
        metaData0.clear();
        org.apache.rat.utils.Log log4 = null;
        org.apache.rat.ReportConfiguration reportConfiguration5 = new org.apache.rat.ReportConfiguration(log4);
        java.io.FilenameFilter filenameFilter6 = reportConfiguration5.getInputFileFilter();
        org.apache.rat.license.LicenseSetFactory.LicenseFilter licenseFilter7 = org.apache.rat.license.LicenseSetFactory.LicenseFilter.all;
        java.util.SortedSet<org.apache.rat.license.ILicense> iLicenseSet8 = reportConfiguration5.getLicenses(licenseFilter7);
        org.apache.rat.config.AddLicenseHeaders addLicenseHeaders9 = org.apache.rat.config.AddLicenseHeaders.FALSE;
        reportConfiguration5.setAddLicenseHeaders(addLicenseHeaders9);
        org.apache.rat.utils.Log log11 = null;
        org.apache.rat.ReportConfiguration reportConfiguration12 = new org.apache.rat.ReportConfiguration(log11);
        org.apache.rat.report.claim.ClaimStatistic claimStatistic13 = org.apache.rat.Reporter.report(reportConfiguration12);
        org.apache.rat.license.LicenseSetFactory.LicenseFilter licenseFilter14 = org.apache.rat.license.LicenseSetFactory.LicenseFilter.all;
        org.apache.rat.Reporter.listLicenses(reportConfiguration12, licenseFilter14);
        org.apache.rat.Reporter.listLicenses(reportConfiguration5, licenseFilter14);
        org.apache.rat.utils.Log log17 = null;
        org.apache.rat.ReportConfiguration reportConfiguration18 = new org.apache.rat.ReportConfiguration(log17);
        java.io.FilenameFilter filenameFilter19 = reportConfiguration18.getInputFileFilter();
        org.apache.rat.license.LicenseSetFactory.LicenseFilter licenseFilter20 = org.apache.rat.license.LicenseSetFactory.LicenseFilter.all;
        java.util.SortedSet<org.apache.rat.license.ILicense> iLicenseSet21 = reportConfiguration18.getLicenses(licenseFilter20);
        org.apache.rat.config.AddLicenseHeaders addLicenseHeaders22 = org.apache.rat.config.AddLicenseHeaders.FALSE;
        reportConfiguration18.setAddLicenseHeaders(addLicenseHeaders22);
        org.apache.rat.utils.Log log24 = null;
        org.apache.rat.ReportConfiguration reportConfiguration25 = new org.apache.rat.ReportConfiguration(log24);
        org.apache.rat.report.claim.ClaimStatistic claimStatistic26 = org.apache.rat.Reporter.report(reportConfiguration25);
        org.apache.rat.license.LicenseSetFactory.LicenseFilter licenseFilter27 = org.apache.rat.license.LicenseSetFactory.LicenseFilter.all;
        org.apache.rat.Reporter.listLicenses(reportConfiguration25, licenseFilter27);
        org.apache.rat.Reporter.listLicenses(reportConfiguration18, licenseFilter27);
        org.apache.rat.Reporter.listLicenses(reportConfiguration5, licenseFilter27);
        java.io.FilenameFilter filenameFilter31 = reportConfiguration5.getInputFileFilter();
        reportConfiguration5.setStyleReport(false);
        org.apache.rat.report.IReportable iReportable34 = null;
        reportConfiguration5.setReportable(iReportable34);
        org.apache.rat.Defaults.Builder builder37 = org.apache.rat.Defaults.builder();
        org.apache.rat.Defaults defaults38 = builder37.build();
        org.apache.rat.utils.Log log39 = null;
        org.apache.rat.ReportConfiguration reportConfiguration40 = new org.apache.rat.ReportConfiguration(log39);
        java.io.FilenameFilter filenameFilter41 = reportConfiguration40.getInputFileFilter();
        org.apache.rat.license.LicenseSetFactory.LicenseFilter licenseFilter42 = org.apache.rat.license.LicenseSetFactory.LicenseFilter.all;
        java.util.SortedSet<org.apache.rat.license.ILicense> iLicenseSet43 = reportConfiguration40.getLicenses(licenseFilter42);
        org.apache.rat.config.AddLicenseHeaders addLicenseHeaders44 = org.apache.rat.config.AddLicenseHeaders.FALSE;
        reportConfiguration40.setAddLicenseHeaders(addLicenseHeaders44);
        org.apache.rat.utils.Log log46 = null;
        org.apache.rat.ReportConfiguration reportConfiguration47 = new org.apache.rat.ReportConfiguration(log46);
        org.apache.rat.report.claim.ClaimStatistic claimStatistic48 = org.apache.rat.Reporter.report(reportConfiguration47);
        org.apache.rat.license.LicenseSetFactory.LicenseFilter licenseFilter49 = org.apache.rat.license.LicenseSetFactory.LicenseFilter.all;
        org.apache.rat.Reporter.listLicenses(reportConfiguration47, licenseFilter49);
        org.apache.rat.Reporter.listLicenses(reportConfiguration40, licenseFilter49);
        org.apache.rat.utils.Log log52 = null;
        org.apache.rat.ReportConfiguration reportConfiguration53 = new org.apache.rat.ReportConfiguration(log52);
        java.io.FilenameFilter filenameFilter54 = reportConfiguration53.getInputFileFilter();
        org.apache.rat.license.LicenseSetFactory.LicenseFilter licenseFilter55 = org.apache.rat.license.LicenseSetFactory.LicenseFilter.all;
        java.util.SortedSet<org.apache.rat.license.ILicense> iLicenseSet56 = reportConfiguration53.getLicenses(licenseFilter55);
        org.apache.rat.config.AddLicenseHeaders addLicenseHeaders57 = org.apache.rat.config.AddLicenseHeaders.FALSE;
        reportConfiguration53.setAddLicenseHeaders(addLicenseHeaders57);
        org.apache.rat.utils.Log log59 = null;
        org.apache.rat.ReportConfiguration reportConfiguration60 = new org.apache.rat.ReportConfiguration(log59);
        org.apache.rat.report.claim.ClaimStatistic claimStatistic61 = org.apache.rat.Reporter.report(reportConfiguration60);
        org.apache.rat.license.LicenseSetFactory.LicenseFilter licenseFilter62 = org.apache.rat.license.LicenseSetFactory.LicenseFilter.all;
        org.apache.rat.Reporter.listLicenses(reportConfiguration60, licenseFilter62);
        org.apache.rat.Reporter.listLicenses(reportConfiguration53, licenseFilter62);
        java.util.SortedSet<org.apache.rat.license.ILicenseFamily> iLicenseFamilySet65 = reportConfiguration40.getLicenseFamilies(licenseFilter62);
        java.util.SortedSet<org.apache.rat.license.ILicense> iLicenseSet66 = defaults38.getLicenses(licenseFilter62);
        org.apache.rat.utils.ReportingSet<org.apache.rat.license.ILicense> iLicenseSet67 = new org.apache.rat.utils.ReportingSet<org.apache.rat.license.ILicense>(iLicenseSet66);
        org.apache.rat.license.ILicense iLicense68 = org.apache.rat.license.LicenseSetFactory.search("TMF", iLicenseSet66);
        reportConfiguration5.addLicense(iLicense68);
        java.lang.String str70 = iLicense68.derivedFrom();
        org.apache.rat.license.ILicenseFamily iLicenseFamily71 = iLicense68.getLicenseFamily();
        org.apache.rat.license.ILicenseFamily iLicenseFamily72 = iLicense68.getLicenseFamily();
        java.lang.String str73 = iLicense68.getNotes();
        java.lang.String str74 = iLicense68.getName();
        org.apache.rat.license.ILicenseFamily iLicenseFamily75 = iLicense68.getLicenseFamily();
        metaData0.reportOnLicense(iLicense68);
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + false + "'", boolean2 == false);
        org.junit.Assert.assertNull(filenameFilter6);
        org.junit.Assert.assertTrue("'" + licenseFilter7 + "' != '" + org.apache.rat.license.LicenseSetFactory.LicenseFilter.all + "'", licenseFilter7.equals(org.apache.rat.license.LicenseSetFactory.LicenseFilter.all));
        org.junit.Assert.assertNotNull(iLicenseSet8);
        org.junit.Assert.assertTrue("'" + addLicenseHeaders9 + "' != '" + org.apache.rat.config.AddLicenseHeaders.FALSE + "'", addLicenseHeaders9.equals(org.apache.rat.config.AddLicenseHeaders.FALSE));
        org.junit.Assert.assertNull(claimStatistic13);
        org.junit.Assert.assertTrue("'" + licenseFilter14 + "' != '" + org.apache.rat.license.LicenseSetFactory.LicenseFilter.all + "'", licenseFilter14.equals(org.apache.rat.license.LicenseSetFactory.LicenseFilter.all));
        org.junit.Assert.assertNull(filenameFilter19);
        org.junit.Assert.assertTrue("'" + licenseFilter20 + "' != '" + org.apache.rat.license.LicenseSetFactory.LicenseFilter.all + "'", licenseFilter20.equals(org.apache.rat.license.LicenseSetFactory.LicenseFilter.all));
        org.junit.Assert.assertNotNull(iLicenseSet21);
        org.junit.Assert.assertTrue("'" + addLicenseHeaders22 + "' != '" + org.apache.rat.config.AddLicenseHeaders.FALSE + "'", addLicenseHeaders22.equals(org.apache.rat.config.AddLicenseHeaders.FALSE));
        org.junit.Assert.assertNull(claimStatistic26);
        org.junit.Assert.assertTrue("'" + licenseFilter27 + "' != '" + org.apache.rat.license.LicenseSetFactory.LicenseFilter.all + "'", licenseFilter27.equals(org.apache.rat.license.LicenseSetFactory.LicenseFilter.all));
        org.junit.Assert.assertNull(filenameFilter31);
        org.junit.Assert.assertNotNull(builder37);
        org.junit.Assert.assertNotNull(defaults38);
        org.junit.Assert.assertNull(filenameFilter41);
        org.junit.Assert.assertTrue("'" + licenseFilter42 + "' != '" + org.apache.rat.license.LicenseSetFactory.LicenseFilter.all + "'", licenseFilter42.equals(org.apache.rat.license.LicenseSetFactory.LicenseFilter.all));
        org.junit.Assert.assertNotNull(iLicenseSet43);
        org.junit.Assert.assertTrue("'" + addLicenseHeaders44 + "' != '" + org.apache.rat.config.AddLicenseHeaders.FALSE + "'", addLicenseHeaders44.equals(org.apache.rat.config.AddLicenseHeaders.FALSE));
        org.junit.Assert.assertNull(claimStatistic48);
        org.junit.Assert.assertTrue("'" + licenseFilter49 + "' != '" + org.apache.rat.license.LicenseSetFactory.LicenseFilter.all + "'", licenseFilter49.equals(org.apache.rat.license.LicenseSetFactory.LicenseFilter.all));
        org.junit.Assert.assertNull(filenameFilter54);
        org.junit.Assert.assertTrue("'" + licenseFilter55 + "' != '" + org.apache.rat.license.LicenseSetFactory.LicenseFilter.all + "'", licenseFilter55.equals(org.apache.rat.license.LicenseSetFactory.LicenseFilter.all));
        org.junit.Assert.assertNotNull(iLicenseSet56);
        org.junit.Assert.assertTrue("'" + addLicenseHeaders57 + "' != '" + org.apache.rat.config.AddLicenseHeaders.FALSE + "'", addLicenseHeaders57.equals(org.apache.rat.config.AddLicenseHeaders.FALSE));
        org.junit.Assert.assertNull(claimStatistic61);
        org.junit.Assert.assertTrue("'" + licenseFilter62 + "' != '" + org.apache.rat.license.LicenseSetFactory.LicenseFilter.all + "'", licenseFilter62.equals(org.apache.rat.license.LicenseSetFactory.LicenseFilter.all));
        org.junit.Assert.assertNotNull(iLicenseFamilySet65);
        org.junit.Assert.assertNotNull(iLicenseSet66);
        org.junit.Assert.assertNotNull(iLicense68);
        org.junit.Assert.assertEquals("'" + str70 + "' != '" + "BSD-3" + "'", str70, "BSD-3");
        org.junit.Assert.assertNotNull(iLicenseFamily71);
        org.junit.Assert.assertNotNull(iLicenseFamily72);
        org.junit.Assert.assertNull(str73);
        org.junit.Assert.assertEquals("'" + str74 + "' != '" + "The Telemanagement Forum License" + "'", str74, "The Telemanagement Forum License");
        org.junit.Assert.assertNotNull(iLicenseFamily75);
    }

    @Test
    public void test12611() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest25.test12611");
        java.io.Writer writer0 = null;
        org.apache.rat.report.xml.writer.impl.base.XmlWriter xmlWriter1 = new org.apache.rat.report.xml.writer.impl.base.XmlWriter(writer0);
        org.apache.rat.report.claim.impl.xml.SimpleXmlClaimReporter simpleXmlClaimReporter2 = new org.apache.rat.report.claim.impl.xml.SimpleXmlClaimReporter((org.apache.rat.report.xml.writer.IXmlWriter) xmlWriter1);
        org.apache.rat.report.claim.impl.xml.SimpleXmlClaimReporter simpleXmlClaimReporter3 = new org.apache.rat.report.claim.impl.xml.SimpleXmlClaimReporter((org.apache.rat.report.xml.writer.IXmlWriter) xmlWriter1);
        org.apache.rat.report.claim.impl.xml.SimpleXmlClaimReporter simpleXmlClaimReporter4 = new org.apache.rat.report.claim.impl.xml.SimpleXmlClaimReporter((org.apache.rat.report.xml.writer.IXmlWriter) xmlWriter1);
        org.apache.rat.report.claim.impl.xml.SimpleXmlClaimReporter simpleXmlClaimReporter5 = new org.apache.rat.report.claim.impl.xml.SimpleXmlClaimReporter((org.apache.rat.report.xml.writer.IXmlWriter) xmlWriter1);
        org.apache.rat.report.claim.impl.xml.SimpleXmlClaimReporter simpleXmlClaimReporter6 = new org.apache.rat.report.claim.impl.xml.SimpleXmlClaimReporter((org.apache.rat.report.xml.writer.IXmlWriter) xmlWriter1);
        org.apache.rat.report.claim.impl.xml.SimpleXmlClaimReporter simpleXmlClaimReporter7 = new org.apache.rat.report.claim.impl.xml.SimpleXmlClaimReporter((org.apache.rat.report.xml.writer.IXmlWriter) xmlWriter1);
        org.apache.rat.report.claim.impl.xml.SimpleXmlClaimReporter simpleXmlClaimReporter8 = new org.apache.rat.report.claim.impl.xml.SimpleXmlClaimReporter((org.apache.rat.report.xml.writer.IXmlWriter) xmlWriter1);
        org.apache.rat.report.claim.impl.xml.SimpleXmlClaimReporter simpleXmlClaimReporter9 = new org.apache.rat.report.claim.impl.xml.SimpleXmlClaimReporter((org.apache.rat.report.xml.writer.IXmlWriter) xmlWriter1);
        org.apache.rat.report.claim.impl.xml.SimpleXmlClaimReporter simpleXmlClaimReporter10 = new org.apache.rat.report.claim.impl.xml.SimpleXmlClaimReporter((org.apache.rat.report.xml.writer.IXmlWriter) xmlWriter1);
        org.apache.rat.report.claim.ClaimStatistic claimStatistic11 = new org.apache.rat.report.claim.ClaimStatistic();
        claimStatistic11.setNumApproved((int) (short) 10);
        claimStatistic11.setNumUnknown((int) '#');
        claimStatistic11.setNumUnApproved(52);
        org.apache.rat.document.ToNameTransformer toNameTransformer18 = new org.apache.rat.document.ToNameTransformer();
        org.apache.rat.configuration.builders.AllBuilder allBuilder19 = org.apache.rat.analysis.IHeaderMatcher.Builder.all();
        java.util.List<org.apache.rat.analysis.IHeaderMatcher> iHeaderMatcherList20 = allBuilder19.getChildren();
        org.apache.rat.analysis.IHeaderMatcher iHeaderMatcher21 = allBuilder19.build();
        java.util.List<org.apache.rat.analysis.IHeaderMatcher> iHeaderMatcherList22 = allBuilder19.getChildren();
        java.lang.Object obj23 = toNameTransformer18.transform((java.lang.Object) allBuilder19);
        org.apache.rat.utils.Log log24 = null;
        org.apache.rat.ReportConfiguration reportConfiguration25 = new org.apache.rat.ReportConfiguration(log24);
        org.apache.rat.report.claim.ClaimStatistic claimStatistic26 = org.apache.rat.Reporter.report(reportConfiguration25);
        org.apache.rat.utils.Log log27 = null;
        org.apache.rat.ReportConfiguration reportConfiguration28 = new org.apache.rat.ReportConfiguration(log27);
        org.apache.rat.report.claim.ClaimStatistic claimStatistic29 = org.apache.rat.Reporter.report(reportConfiguration28);
        org.apache.rat.utils.ReportingSet.Options options30 = org.apache.rat.utils.ReportingSet.Options.OVERWRITE;
        reportConfiguration28.licenseDuplicateOption(options30);
        reportConfiguration25.familyDuplicateOption(options30);
        org.apache.commons.io.function.IOSupplier<java.io.PrintWriter> printWriterIOSupplier33 = reportConfiguration25.getWriter();
        boolean boolean34 = reportConfiguration25.isAddingLicensesForced();
        java.io.FilenameFilter filenameFilter35 = reportConfiguration25.getInputFileFilter();
        org.apache.commons.io.function.IOSupplier<java.io.InputStream> inputStreamIOSupplier36 = reportConfiguration25.getStyleSheet();
        java.util.SortedSet<java.lang.String> strSet37 = reportConfiguration25.getApprovedLicenseCategories();
        java.lang.Object obj38 = toNameTransformer18.transform((java.lang.Object) reportConfiguration25);
        // The following exception was thrown during execution in test generation
        try {
            org.apache.rat.report.RatReport ratReport39 = org.apache.rat.report.xml.XmlReportFactory.createStandardReport((org.apache.rat.report.xml.writer.IXmlWriter) xmlWriter1, claimStatistic11, reportConfiguration25);
            org.junit.Assert.fail("Expected exception of type org.apache.rat.ConfigurationException; message: At least one license must be defined");
        } catch (org.apache.rat.ConfigurationException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(allBuilder19);
        org.junit.Assert.assertNotNull(iHeaderMatcherList20);
        org.junit.Assert.assertNotNull(iHeaderMatcher21);
        org.junit.Assert.assertNotNull(iHeaderMatcherList22);
        org.junit.Assert.assertNull(obj23);
        org.junit.Assert.assertNull(claimStatistic26);
        org.junit.Assert.assertNull(claimStatistic29);
        org.junit.Assert.assertTrue("'" + options30 + "' != '" + org.apache.rat.utils.ReportingSet.Options.OVERWRITE + "'", options30.equals(org.apache.rat.utils.ReportingSet.Options.OVERWRITE));
        org.junit.Assert.assertNotNull(printWriterIOSupplier33);
        org.junit.Assert.assertTrue("'" + boolean34 + "' != '" + false + "'", boolean34 == false);
        org.junit.Assert.assertNull(filenameFilter35);
        org.junit.Assert.assertNull(inputStreamIOSupplier36);
        org.junit.Assert.assertNotNull(strSet37);
        org.junit.Assert.assertNull(obj38);
    }

    @Test
    public void test12612() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest25.test12612");
        org.apache.rat.utils.DefaultLog defaultLog0 = org.apache.rat.utils.DefaultLog.INSTANCE;
        org.apache.rat.license.ILicense.Builder builder1 = org.apache.rat.license.ILicense.builder();
        org.apache.rat.license.ILicense.Builder builder3 = builder1.setLicenseFamilyCategory("");
        org.apache.rat.analysis.matchers.CopyrightMatcher copyrightMatcher7 = new org.apache.rat.analysis.matchers.CopyrightMatcher("", "GPL1 ", "hi!");
        org.apache.rat.analysis.IHeaderMatcher.State state8 = copyrightMatcher7.finalizeState();
        org.apache.rat.license.ILicense.Builder builder9 = builder3.setMatcher((org.apache.rat.analysis.IHeaderMatcher) copyrightMatcher7);
        org.apache.rat.license.ILicense.Builder builder11 = builder9.setLicenseFamilyCategory("");
        defaultLog0.error((java.lang.Object) builder11);
        org.apache.rat.analysis.matchers.CopyrightMatcher copyrightMatcher16 = new org.apache.rat.analysis.matchers.CopyrightMatcher("", "GPL1 ", "hi!");
        copyrightMatcher16.reset();
        org.apache.rat.license.ILicense.Builder builder18 = builder11.setMatcher((org.apache.rat.analysis.IHeaderMatcher) copyrightMatcher16);
        org.apache.rat.configuration.builders.SpdxBuilder spdxBuilder19 = org.apache.rat.analysis.IHeaderMatcher.Builder.spdx();
        java.lang.String str20 = spdxBuilder19.toString();
        org.apache.rat.configuration.builders.SpdxBuilder spdxBuilder22 = spdxBuilder19.setName("ef7a8b13-64c3-4510-bb0c-dbf208e1e73f");
        org.apache.rat.license.ILicense.Builder builder23 = builder18.setMatcher((org.apache.rat.analysis.IHeaderMatcher.Builder) spdxBuilder19);
        org.apache.rat.analysis.IHeaderMatcher iHeaderMatcher24 = spdxBuilder19.build();
        org.apache.rat.configuration.builders.AbstractBuilder abstractBuilder26 = spdxBuilder19.setId("ef75a6e8-7197-4e9e-83bf-f8b367e6b3c5");
        java.lang.String str27 = spdxBuilder19.toString();
        org.apache.rat.analysis.IHeaderMatcher iHeaderMatcher28 = spdxBuilder19.build();
        org.junit.Assert.assertNotNull(defaultLog0);
        org.junit.Assert.assertNotNull(builder1);
        org.junit.Assert.assertNotNull(builder3);
        org.junit.Assert.assertTrue("'" + state8 + "' != '" + org.apache.rat.analysis.IHeaderMatcher.State.f + "'", state8.equals(org.apache.rat.analysis.IHeaderMatcher.State.f));
        org.junit.Assert.assertNotNull(builder9);
        org.junit.Assert.assertNotNull(builder11);
        org.junit.Assert.assertNotNull(builder18);
        org.junit.Assert.assertNotNull(spdxBuilder19);
        org.junit.Assert.assertEquals("'" + str20 + "' != '" + "SpdxBuilder: null" + "'", str20, "SpdxBuilder: null");
        org.junit.Assert.assertNotNull(spdxBuilder22);
        org.junit.Assert.assertNotNull(builder23);
        org.junit.Assert.assertNotNull(iHeaderMatcher24);
        org.junit.Assert.assertNotNull(abstractBuilder26);
        org.junit.Assert.assertEquals("'" + str27 + "' != '" + "SpdxBuilder: ef7a8b13-64c3-4510-bb0c-dbf208e1e73f" + "'", str27, "SpdxBuilder: ef7a8b13-64c3-4510-bb0c-dbf208e1e73f");
        org.junit.Assert.assertNotNull(iHeaderMatcher28);
    }

    @Test
    public void test12613() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest25.test12613");
        java.io.Writer writer0 = null;
        org.apache.rat.report.xml.writer.impl.base.XmlWriter xmlWriter1 = new org.apache.rat.report.xml.writer.impl.base.XmlWriter(writer0);
        org.apache.rat.report.claim.impl.xml.SimpleXmlClaimReporter simpleXmlClaimReporter2 = new org.apache.rat.report.claim.impl.xml.SimpleXmlClaimReporter((org.apache.rat.report.xml.writer.IXmlWriter) xmlWriter1);
        org.apache.rat.report.claim.impl.xml.SimpleXmlClaimReporter simpleXmlClaimReporter3 = new org.apache.rat.report.claim.impl.xml.SimpleXmlClaimReporter((org.apache.rat.report.xml.writer.IXmlWriter) xmlWriter1);
        org.apache.rat.report.claim.impl.xml.SimpleXmlClaimReporter simpleXmlClaimReporter4 = new org.apache.rat.report.claim.impl.xml.SimpleXmlClaimReporter((org.apache.rat.report.xml.writer.IXmlWriter) xmlWriter1);
        org.apache.rat.report.claim.impl.xml.SimpleXmlClaimReporter simpleXmlClaimReporter5 = new org.apache.rat.report.claim.impl.xml.SimpleXmlClaimReporter((org.apache.rat.report.xml.writer.IXmlWriter) xmlWriter1);
        org.apache.rat.report.claim.impl.xml.SimpleXmlClaimReporter simpleXmlClaimReporter6 = new org.apache.rat.report.claim.impl.xml.SimpleXmlClaimReporter((org.apache.rat.report.xml.writer.IXmlWriter) xmlWriter1);
        org.apache.rat.report.claim.impl.xml.SimpleXmlClaimReporter simpleXmlClaimReporter7 = new org.apache.rat.report.claim.impl.xml.SimpleXmlClaimReporter((org.apache.rat.report.xml.writer.IXmlWriter) xmlWriter1);
        // The following exception was thrown during execution in test generation
        try {
            org.apache.rat.report.xml.writer.IXmlWriter iXmlWriter10 = xmlWriter1.attribute((java.lang.CharSequence) "GNU GENERAL PUBLIC LICENSE, VERSION 2", (java.lang.CharSequence) "SpdxBuilder: Copyright Builder: s:.cvsignore e:null o:null");
            org.junit.Assert.fail("Expected exception of type org.apache.rat.report.xml.writer.OperationNotAllowedException; message: Close called before an element has been opened.");
        } catch (org.apache.rat.report.xml.writer.OperationNotAllowedException e) {
            // Expected exception.
        }
    }

    @Test
    public void test12614() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest25.test12614");
        org.apache.rat.analysis.matchers.FullTextMatcher fullTextMatcher2 = new org.apache.rat.analysis.matchers.FullTextMatcher("org/apache/rat/plain-rat.xsl", "RegexBuilder89662180a89f497b9301227d494d2bae");
        org.apache.rat.analysis.IHeaderMatcher.State state3 = fullTextMatcher2.currentState();
        org.junit.Assert.assertTrue("'" + state3 + "' != '" + org.apache.rat.analysis.IHeaderMatcher.State.i + "'", state3.equals(org.apache.rat.analysis.IHeaderMatcher.State.i));
    }

    @Test
    public void test12615() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest25.test12615");
        org.apache.rat.license.ILicenseFamilyBuilder iLicenseFamilyBuilder0 = new org.apache.rat.license.ILicenseFamilyBuilder();
        java.lang.String str1 = iLicenseFamilyBuilder0.getCategory();
        org.apache.rat.license.ILicenseFamily.Builder builder3 = iLicenseFamilyBuilder0.setLicenseFamilyCategory("3e2b228d-d5ff-4444-8d8c-d614494b2426");
        org.apache.rat.license.ILicenseFamily.Builder builder5 = iLicenseFamilyBuilder0.setLicenseFamilyName("GNU General Public License, version 3");
        org.apache.rat.license.ILicenseFamily iLicenseFamily6 = builder5.build();
        java.lang.String[] strArray12 = new java.lang.String[] { "http://org/apache/rat/meta-data#LicenseFamilyCategory", "Datum [ name ='http://org/apache/rat/meta-data#LicenseFamilyCategory',value ='GPL1  ']", "MANIFEST.MF", "AllBuilder:", "The MIT License" };
        org.apache.rat.utils.ReportingSet<java.lang.String> strSet13 = new org.apache.rat.utils.ReportingSet<java.lang.String>();
        boolean boolean14 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strSet13, strArray12);
        boolean boolean16 = strSet13.addIfNotPresent("http://org/apache/rat/meta-data#LicenseFamilyName");
        java.util.Iterator<java.lang.String> strItor17 = strSet13.iterator();
        strSet13.clear();
        strSet13.clear();
        java.util.Comparator<? super java.lang.String> wildcardComparator20 = strSet13.comparator();
        org.apache.rat.Defaults.Builder builder21 = org.apache.rat.Defaults.builder();
        org.apache.rat.Defaults defaults22 = builder21.build();
        org.apache.rat.license.LicenseSetFactory.LicenseFilter licenseFilter23 = org.apache.rat.license.LicenseSetFactory.LicenseFilter.approved;
        java.util.SortedSet<org.apache.rat.license.ILicenseFamily> iLicenseFamilySet24 = defaults22.getLicenseFamilies(licenseFilter23);
        org.apache.rat.policy.DefaultPolicy defaultPolicy25 = new org.apache.rat.policy.DefaultPolicy((java.util.Collection<org.apache.rat.license.ILicenseFamily>) iLicenseFamilySet24);
        boolean boolean26 = strSet13.removeAll((java.util.Collection<org.apache.rat.license.ILicenseFamily>) iLicenseFamilySet24);
        org.apache.rat.license.ILicenseFamily iLicenseFamily27 = org.apache.rat.license.LicenseFamilySetFactory.search(iLicenseFamily6, iLicenseFamilySet24);
        org.junit.Assert.assertNull(str1);
        org.junit.Assert.assertNotNull(builder3);
        org.junit.Assert.assertNotNull(builder5);
        org.junit.Assert.assertNotNull(iLicenseFamily6);
        org.junit.Assert.assertNotNull(strArray12);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + true + "'", boolean14 == true);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + true + "'", boolean16 == true);
        org.junit.Assert.assertNotNull(strItor17);
        org.junit.Assert.assertNull(wildcardComparator20);
        org.junit.Assert.assertNotNull(builder21);
        org.junit.Assert.assertNotNull(defaults22);
        org.junit.Assert.assertTrue("'" + licenseFilter23 + "' != '" + org.apache.rat.license.LicenseSetFactory.LicenseFilter.approved + "'", licenseFilter23.equals(org.apache.rat.license.LicenseSetFactory.LicenseFilter.approved));
        org.junit.Assert.assertNotNull(iLicenseFamilySet24);
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + false + "'", boolean26 == false);
        org.junit.Assert.assertNull(iLicenseFamily27);
    }

    @Test
    public void test12616() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest25.test12616");
        org.apache.rat.configuration.builders.TextBuilder textBuilder0 = new org.apache.rat.configuration.builders.TextBuilder();
        org.apache.rat.configuration.builders.TextBuilder textBuilder2 = textBuilder0.setText("true");
        org.apache.rat.configuration.builders.TextBuilder textBuilder4 = textBuilder0.setText("stand");
        org.apache.rat.configuration.builders.TextBuilder textBuilder6 = textBuilder0.setText("ApacheLicenseVersion20");
        boolean boolean7 = textBuilder6.hasId();
        org.apache.rat.configuration.builders.TextBuilder textBuilder9 = textBuilder6.setText("Copyright Builder: s:null e:null o:TextBuilder: true http://org/apache/rat/meta-data#LicenseFamilyName");
        java.lang.String str10 = textBuilder6.toString();
        org.junit.Assert.assertNotNull(textBuilder2);
        org.junit.Assert.assertNotNull(textBuilder4);
        org.junit.Assert.assertNotNull(textBuilder6);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertNotNull(textBuilder9);
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "TextBuilder: Copyright Builder: s..." + "'", str10, "TextBuilder: Copyright Builder: s...");
    }

    @Test
    public void test12617() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest25.test12617");
        boolean boolean1 = org.apache.rat.document.impl.guesser.BinaryGuesser.isBytecode("8128040d-ca94-4f3f-9deb-6252acd449bd");
        org.junit.Assert.assertTrue("'" + boolean1 + "' != '" + false + "'", boolean1 == false);
    }

    @Test
    public void test12618() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest25.test12618");
        org.apache.rat.api.MetaData metaData0 = new org.apache.rat.api.MetaData();
        java.lang.String str2 = metaData0.value("COMMON DEVELOPMENT AND DISTRIBUTION LICENSE Version 1.0");
        java.lang.String str4 = metaData0.value("W3C Document Copyright");
        boolean boolean6 = metaData0.clear("hi!");
        java.lang.String str8 = metaData0.value("true");
        org.apache.rat.api.MetaData.Datum datum10 = metaData0.get("GNU General Public License, version 1");
        org.apache.rat.api.MetaData.Datum datum12 = metaData0.get("http:");
        org.apache.rat.api.MetaData.Datum datum13 = org.apache.rat.api.MetaData.RAT_APPROVED_LICENSE_DATIM_TRUE;
        metaData0.add(datum13);
        org.apache.rat.api.MetaData.Datum datum16 = metaData0.get("ece24682-3459-4761-bb85-7fc8538fa181");
        org.apache.rat.api.MetaData.Datum datum18 = metaData0.get("67f4ee73-0b29-40fd-b100-eb4a09e17011");
        org.junit.Assert.assertNull(str2);
        org.junit.Assert.assertNull(str4);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertNull(str8);
        org.junit.Assert.assertNull(datum10);
        org.junit.Assert.assertNull(datum12);
        org.junit.Assert.assertNotNull(datum13);
        org.junit.Assert.assertNull(datum16);
        org.junit.Assert.assertNull(datum18);
    }

    @Test
    public void test12619() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest25.test12619");
        java.util.regex.Pattern pattern1 = null;
        org.apache.rat.analysis.matchers.SimpleRegexMatcher simpleRegexMatcher2 = new org.apache.rat.analysis.matchers.SimpleRegexMatcher("RegexBuilder: e484573a-f5dc-41c9-94d2-04bf4d4fa217", pattern1);
    }

    @Test
    public void test12620() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest25.test12620");
        org.apache.rat.utils.Log log0 = null;
        org.apache.rat.ReportConfiguration reportConfiguration1 = new org.apache.rat.ReportConfiguration(log0);
        java.io.FilenameFilter filenameFilter2 = reportConfiguration1.getInputFileFilter();
        org.apache.rat.license.LicenseSetFactory.LicenseFilter licenseFilter3 = org.apache.rat.license.LicenseSetFactory.LicenseFilter.all;
        java.util.SortedSet<org.apache.rat.license.ILicense> iLicenseSet4 = reportConfiguration1.getLicenses(licenseFilter3);
        org.apache.rat.config.AddLicenseHeaders addLicenseHeaders5 = org.apache.rat.config.AddLicenseHeaders.FALSE;
        reportConfiguration1.setAddLicenseHeaders(addLicenseHeaders5);
        org.apache.rat.utils.Log log7 = null;
        org.apache.rat.ReportConfiguration reportConfiguration8 = new org.apache.rat.ReportConfiguration(log7);
        org.apache.rat.report.claim.ClaimStatistic claimStatistic9 = org.apache.rat.Reporter.report(reportConfiguration8);
        org.apache.rat.license.LicenseSetFactory.LicenseFilter licenseFilter10 = org.apache.rat.license.LicenseSetFactory.LicenseFilter.all;
        org.apache.rat.Reporter.listLicenses(reportConfiguration8, licenseFilter10);
        org.apache.rat.Reporter.listLicenses(reportConfiguration1, licenseFilter10);
        org.apache.rat.utils.Log log13 = null;
        org.apache.rat.ReportConfiguration reportConfiguration14 = new org.apache.rat.ReportConfiguration(log13);
        java.io.FilenameFilter filenameFilter15 = reportConfiguration14.getInputFileFilter();
        org.apache.rat.license.LicenseSetFactory.LicenseFilter licenseFilter16 = org.apache.rat.license.LicenseSetFactory.LicenseFilter.all;
        java.util.SortedSet<org.apache.rat.license.ILicense> iLicenseSet17 = reportConfiguration14.getLicenses(licenseFilter16);
        org.apache.rat.config.AddLicenseHeaders addLicenseHeaders18 = org.apache.rat.config.AddLicenseHeaders.FALSE;
        reportConfiguration14.setAddLicenseHeaders(addLicenseHeaders18);
        org.apache.rat.utils.Log log20 = null;
        org.apache.rat.ReportConfiguration reportConfiguration21 = new org.apache.rat.ReportConfiguration(log20);
        org.apache.rat.report.claim.ClaimStatistic claimStatistic22 = org.apache.rat.Reporter.report(reportConfiguration21);
        org.apache.rat.license.LicenseSetFactory.LicenseFilter licenseFilter23 = org.apache.rat.license.LicenseSetFactory.LicenseFilter.all;
        org.apache.rat.Reporter.listLicenses(reportConfiguration21, licenseFilter23);
        org.apache.rat.Reporter.listLicenses(reportConfiguration14, licenseFilter23);
        org.apache.rat.Reporter.listLicenses(reportConfiguration1, licenseFilter23);
        org.apache.rat.license.ILicenseFamily[] iLicenseFamilyArray27 = new org.apache.rat.license.ILicenseFamily[] {};
        java.util.ArrayList<org.apache.rat.license.ILicenseFamily> iLicenseFamilyList28 = new java.util.ArrayList<org.apache.rat.license.ILicenseFamily>();
        boolean boolean29 = java.util.Collections.addAll((java.util.Collection<org.apache.rat.license.ILicenseFamily>) iLicenseFamilyList28, iLicenseFamilyArray27);
        org.apache.rat.policy.DefaultPolicy defaultPolicy30 = new org.apache.rat.policy.DefaultPolicy((java.util.Collection<org.apache.rat.license.ILicenseFamily>) iLicenseFamilyList28);
        java.util.SortedSet<org.apache.rat.license.ILicenseFamily> iLicenseFamilySet31 = defaultPolicy30.getApprovedLicenseNames();
        reportConfiguration1.addFamilies((java.util.Collection<org.apache.rat.license.ILicenseFamily>) iLicenseFamilySet31);
        org.apache.rat.utils.Log log33 = reportConfiguration1.getLog();
        java.lang.String[] strArray39 = new java.lang.String[] { "http://org/apache/rat/meta-data#LicenseFamilyCategory", "Datum [ name ='http://org/apache/rat/meta-data#LicenseFamilyCategory',value ='GPL1  ']", "MANIFEST.MF", "AllBuilder:", "The MIT License" };
        org.apache.rat.utils.ReportingSet<java.lang.String> strSet40 = new org.apache.rat.utils.ReportingSet<java.lang.String>();
        boolean boolean41 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strSet40, strArray39);
        boolean boolean43 = strSet40.addIfNotPresent("http://org/apache/rat/meta-data#LicenseFamilyName");
        boolean boolean45 = strSet40.addIfNotPresent("ef7a8b13-64c3-4510-bb0c-dbf208e1e73f");
        org.apache.rat.utils.Log log46 = null;
        org.apache.rat.ReportConfiguration reportConfiguration47 = new org.apache.rat.ReportConfiguration(log46);
        org.apache.commons.io.function.IOSupplier<java.io.OutputStream> outputStreamIOSupplier48 = reportConfiguration47.getOutput();
        org.apache.commons.io.filefilter.IOFileFilter iOFileFilter49 = reportConfiguration47.getDirectoryFilter();
        org.apache.rat.utils.Log log50 = null;
        org.apache.rat.ReportConfiguration reportConfiguration51 = new org.apache.rat.ReportConfiguration(log50);
        reportConfiguration51.addApprovedLicenseCategory(".cvsignore");
        org.apache.rat.utils.Log log54 = null;
        org.apache.rat.ReportConfiguration reportConfiguration55 = new org.apache.rat.ReportConfiguration(log54);
        java.io.FilenameFilter filenameFilter56 = reportConfiguration55.getInputFileFilter();
        org.apache.rat.license.LicenseSetFactory.LicenseFilter licenseFilter57 = org.apache.rat.license.LicenseSetFactory.LicenseFilter.all;
        java.util.SortedSet<org.apache.rat.license.ILicense> iLicenseSet58 = reportConfiguration55.getLicenses(licenseFilter57);
        reportConfiguration51.addLicensesIfNotPresent((java.util.Collection<org.apache.rat.license.ILicense>) iLicenseSet58);
        java.io.FilenameFilter filenameFilter60 = reportConfiguration51.getInputFileFilter();
        org.apache.rat.utils.Log log61 = null;
        org.apache.rat.ReportConfiguration reportConfiguration62 = new org.apache.rat.ReportConfiguration(log61);
        java.io.FilenameFilter filenameFilter63 = reportConfiguration62.getInputFileFilter();
        org.apache.rat.license.LicenseSetFactory.LicenseFilter licenseFilter64 = org.apache.rat.license.LicenseSetFactory.LicenseFilter.all;
        java.util.SortedSet<org.apache.rat.license.ILicense> iLicenseSet65 = reportConfiguration62.getLicenses(licenseFilter64);
        org.apache.rat.config.AddLicenseHeaders addLicenseHeaders66 = org.apache.rat.config.AddLicenseHeaders.FALSE;
        reportConfiguration62.setAddLicenseHeaders(addLicenseHeaders66);
        org.apache.rat.utils.Log log68 = null;
        org.apache.rat.ReportConfiguration reportConfiguration69 = new org.apache.rat.ReportConfiguration(log68);
        org.apache.rat.report.claim.ClaimStatistic claimStatistic70 = org.apache.rat.Reporter.report(reportConfiguration69);
        org.apache.rat.license.LicenseSetFactory.LicenseFilter licenseFilter71 = org.apache.rat.license.LicenseSetFactory.LicenseFilter.all;
        org.apache.rat.Reporter.listLicenses(reportConfiguration69, licenseFilter71);
        org.apache.rat.Reporter.listLicenses(reportConfiguration62, licenseFilter71);
        org.apache.rat.utils.Log log74 = null;
        org.apache.rat.ReportConfiguration reportConfiguration75 = new org.apache.rat.ReportConfiguration(log74);
        java.io.FilenameFilter filenameFilter76 = reportConfiguration75.getInputFileFilter();
        org.apache.rat.license.LicenseSetFactory.LicenseFilter licenseFilter77 = org.apache.rat.license.LicenseSetFactory.LicenseFilter.all;
        java.util.SortedSet<org.apache.rat.license.ILicense> iLicenseSet78 = reportConfiguration75.getLicenses(licenseFilter77);
        org.apache.rat.config.AddLicenseHeaders addLicenseHeaders79 = org.apache.rat.config.AddLicenseHeaders.FALSE;
        reportConfiguration75.setAddLicenseHeaders(addLicenseHeaders79);
        org.apache.rat.utils.Log log81 = null;
        org.apache.rat.ReportConfiguration reportConfiguration82 = new org.apache.rat.ReportConfiguration(log81);
        org.apache.rat.report.claim.ClaimStatistic claimStatistic83 = org.apache.rat.Reporter.report(reportConfiguration82);
        org.apache.rat.license.LicenseSetFactory.LicenseFilter licenseFilter84 = org.apache.rat.license.LicenseSetFactory.LicenseFilter.all;
        org.apache.rat.Reporter.listLicenses(reportConfiguration82, licenseFilter84);
        org.apache.rat.Reporter.listLicenses(reportConfiguration75, licenseFilter84);
        java.util.SortedSet<org.apache.rat.license.ILicenseFamily> iLicenseFamilySet87 = reportConfiguration62.getLicenseFamilies(licenseFilter84);
        org.apache.rat.Reporter.listLicenseFamilies(reportConfiguration51, licenseFilter84);
        java.util.SortedSet<org.apache.rat.license.ILicenseFamily> iLicenseFamilySet89 = reportConfiguration47.getLicenseFamilies(licenseFilter84);
        org.apache.rat.policy.DefaultPolicy defaultPolicy90 = new org.apache.rat.policy.DefaultPolicy((java.util.Collection<org.apache.rat.license.ILicenseFamily>) iLicenseFamilySet89);
        boolean boolean91 = strSet40.retainAll((java.util.Collection<org.apache.rat.license.ILicenseFamily>) iLicenseFamilySet89);
        reportConfiguration1.addFamilies((java.util.Collection<org.apache.rat.license.ILicenseFamily>) iLicenseFamilySet89);
        org.apache.rat.utils.ReportingSet.Options options93 = org.apache.rat.utils.ReportingSet.Options.FAIL;
        reportConfiguration1.familyDuplicateOption(options93);
        org.junit.Assert.assertNull(filenameFilter2);
        org.junit.Assert.assertTrue("'" + licenseFilter3 + "' != '" + org.apache.rat.license.LicenseSetFactory.LicenseFilter.all + "'", licenseFilter3.equals(org.apache.rat.license.LicenseSetFactory.LicenseFilter.all));
        org.junit.Assert.assertNotNull(iLicenseSet4);
        org.junit.Assert.assertTrue("'" + addLicenseHeaders5 + "' != '" + org.apache.rat.config.AddLicenseHeaders.FALSE + "'", addLicenseHeaders5.equals(org.apache.rat.config.AddLicenseHeaders.FALSE));
        org.junit.Assert.assertNull(claimStatistic9);
        org.junit.Assert.assertTrue("'" + licenseFilter10 + "' != '" + org.apache.rat.license.LicenseSetFactory.LicenseFilter.all + "'", licenseFilter10.equals(org.apache.rat.license.LicenseSetFactory.LicenseFilter.all));
        org.junit.Assert.assertNull(filenameFilter15);
        org.junit.Assert.assertTrue("'" + licenseFilter16 + "' != '" + org.apache.rat.license.LicenseSetFactory.LicenseFilter.all + "'", licenseFilter16.equals(org.apache.rat.license.LicenseSetFactory.LicenseFilter.all));
        org.junit.Assert.assertNotNull(iLicenseSet17);
        org.junit.Assert.assertTrue("'" + addLicenseHeaders18 + "' != '" + org.apache.rat.config.AddLicenseHeaders.FALSE + "'", addLicenseHeaders18.equals(org.apache.rat.config.AddLicenseHeaders.FALSE));
        org.junit.Assert.assertNull(claimStatistic22);
        org.junit.Assert.assertTrue("'" + licenseFilter23 + "' != '" + org.apache.rat.license.LicenseSetFactory.LicenseFilter.all + "'", licenseFilter23.equals(org.apache.rat.license.LicenseSetFactory.LicenseFilter.all));
        org.junit.Assert.assertNotNull(iLicenseFamilyArray27);
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + false + "'", boolean29 == false);
        org.junit.Assert.assertNotNull(iLicenseFamilySet31);
        org.junit.Assert.assertNull(log33);
        org.junit.Assert.assertNotNull(strArray39);
        org.junit.Assert.assertTrue("'" + boolean41 + "' != '" + true + "'", boolean41 == true);
        org.junit.Assert.assertTrue("'" + boolean43 + "' != '" + true + "'", boolean43 == true);
        org.junit.Assert.assertTrue("'" + boolean45 + "' != '" + true + "'", boolean45 == true);
        org.junit.Assert.assertNotNull(outputStreamIOSupplier48);
        org.junit.Assert.assertNotNull(iOFileFilter49);
        org.junit.Assert.assertNull(filenameFilter56);
        org.junit.Assert.assertTrue("'" + licenseFilter57 + "' != '" + org.apache.rat.license.LicenseSetFactory.LicenseFilter.all + "'", licenseFilter57.equals(org.apache.rat.license.LicenseSetFactory.LicenseFilter.all));
        org.junit.Assert.assertNotNull(iLicenseSet58);
        org.junit.Assert.assertNull(filenameFilter60);
        org.junit.Assert.assertNull(filenameFilter63);
        org.junit.Assert.assertTrue("'" + licenseFilter64 + "' != '" + org.apache.rat.license.LicenseSetFactory.LicenseFilter.all + "'", licenseFilter64.equals(org.apache.rat.license.LicenseSetFactory.LicenseFilter.all));
        org.junit.Assert.assertNotNull(iLicenseSet65);
        org.junit.Assert.assertTrue("'" + addLicenseHeaders66 + "' != '" + org.apache.rat.config.AddLicenseHeaders.FALSE + "'", addLicenseHeaders66.equals(org.apache.rat.config.AddLicenseHeaders.FALSE));
        org.junit.Assert.assertNull(claimStatistic70);
        org.junit.Assert.assertTrue("'" + licenseFilter71 + "' != '" + org.apache.rat.license.LicenseSetFactory.LicenseFilter.all + "'", licenseFilter71.equals(org.apache.rat.license.LicenseSetFactory.LicenseFilter.all));
        org.junit.Assert.assertNull(filenameFilter76);
        org.junit.Assert.assertTrue("'" + licenseFilter77 + "' != '" + org.apache.rat.license.LicenseSetFactory.LicenseFilter.all + "'", licenseFilter77.equals(org.apache.rat.license.LicenseSetFactory.LicenseFilter.all));
        org.junit.Assert.assertNotNull(iLicenseSet78);
        org.junit.Assert.assertTrue("'" + addLicenseHeaders79 + "' != '" + org.apache.rat.config.AddLicenseHeaders.FALSE + "'", addLicenseHeaders79.equals(org.apache.rat.config.AddLicenseHeaders.FALSE));
        org.junit.Assert.assertNull(claimStatistic83);
        org.junit.Assert.assertTrue("'" + licenseFilter84 + "' != '" + org.apache.rat.license.LicenseSetFactory.LicenseFilter.all + "'", licenseFilter84.equals(org.apache.rat.license.LicenseSetFactory.LicenseFilter.all));
        org.junit.Assert.assertNotNull(iLicenseFamilySet87);
        org.junit.Assert.assertNotNull(iLicenseFamilySet89);
        org.junit.Assert.assertTrue("'" + boolean91 + "' != '" + true + "'", boolean91 == true);
        org.junit.Assert.assertTrue("'" + options93 + "' != '" + org.apache.rat.utils.ReportingSet.Options.FAIL + "'", options93.equals(org.apache.rat.utils.ReportingSet.Options.FAIL));
    }

    @Test
    public void test12621() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest25.test12621");
        org.apache.rat.api.MetaData metaData0 = new org.apache.rat.api.MetaData();
        java.lang.String str2 = metaData0.value("COMMON DEVELOPMENT AND DISTRIBUTION LICENSE Version 1.0");
        java.lang.String str4 = metaData0.value("a3b53609-8989-4241-8aa6-1cc947f0d382");
        org.apache.rat.utils.Log log5 = null;
        org.apache.rat.ReportConfiguration reportConfiguration6 = new org.apache.rat.ReportConfiguration(log5);
        reportConfiguration6.addApprovedLicenseCategory(".cvsignore");
        org.apache.rat.utils.Log.Level level9 = org.apache.rat.utils.Log.Level.ERROR;
        reportConfiguration6.logLicenseCollisions(level9);
        reportConfiguration6.addApprovedLicenseCategory("73fbee1b-7ed9-442a-968e-b2b525ca688f");
        org.apache.rat.utils.Log log13 = null;
        org.apache.rat.ReportConfiguration reportConfiguration14 = new org.apache.rat.ReportConfiguration(log13);
        java.io.FilenameFilter filenameFilter15 = reportConfiguration14.getInputFileFilter();
        org.apache.rat.license.LicenseSetFactory.LicenseFilter licenseFilter16 = org.apache.rat.license.LicenseSetFactory.LicenseFilter.all;
        java.util.SortedSet<org.apache.rat.license.ILicense> iLicenseSet17 = reportConfiguration14.getLicenses(licenseFilter16);
        org.apache.rat.config.AddLicenseHeaders addLicenseHeaders18 = org.apache.rat.config.AddLicenseHeaders.FALSE;
        reportConfiguration14.setAddLicenseHeaders(addLicenseHeaders18);
        org.apache.rat.utils.Log log20 = null;
        org.apache.rat.ReportConfiguration reportConfiguration21 = new org.apache.rat.ReportConfiguration(log20);
        org.apache.rat.report.claim.ClaimStatistic claimStatistic22 = org.apache.rat.Reporter.report(reportConfiguration21);
        org.apache.rat.license.LicenseSetFactory.LicenseFilter licenseFilter23 = org.apache.rat.license.LicenseSetFactory.LicenseFilter.all;
        org.apache.rat.Reporter.listLicenses(reportConfiguration21, licenseFilter23);
        org.apache.rat.Reporter.listLicenses(reportConfiguration14, licenseFilter23);
        org.apache.rat.utils.Log log26 = null;
        org.apache.rat.ReportConfiguration reportConfiguration27 = new org.apache.rat.ReportConfiguration(log26);
        java.io.FilenameFilter filenameFilter28 = reportConfiguration27.getInputFileFilter();
        org.apache.rat.license.LicenseSetFactory.LicenseFilter licenseFilter29 = org.apache.rat.license.LicenseSetFactory.LicenseFilter.all;
        java.util.SortedSet<org.apache.rat.license.ILicense> iLicenseSet30 = reportConfiguration27.getLicenses(licenseFilter29);
        org.apache.rat.config.AddLicenseHeaders addLicenseHeaders31 = org.apache.rat.config.AddLicenseHeaders.FALSE;
        reportConfiguration27.setAddLicenseHeaders(addLicenseHeaders31);
        org.apache.rat.utils.Log log33 = null;
        org.apache.rat.ReportConfiguration reportConfiguration34 = new org.apache.rat.ReportConfiguration(log33);
        org.apache.rat.report.claim.ClaimStatistic claimStatistic35 = org.apache.rat.Reporter.report(reportConfiguration34);
        org.apache.rat.license.LicenseSetFactory.LicenseFilter licenseFilter36 = org.apache.rat.license.LicenseSetFactory.LicenseFilter.all;
        org.apache.rat.Reporter.listLicenses(reportConfiguration34, licenseFilter36);
        org.apache.rat.Reporter.listLicenses(reportConfiguration27, licenseFilter36);
        org.apache.rat.Reporter.listLicenses(reportConfiguration14, licenseFilter36);
        java.io.FilenameFilter filenameFilter40 = reportConfiguration14.getInputFileFilter();
        reportConfiguration14.setStyleReport(false);
        org.apache.rat.report.IReportable iReportable43 = null;
        reportConfiguration14.setReportable(iReportable43);
        org.apache.rat.Defaults.Builder builder46 = org.apache.rat.Defaults.builder();
        org.apache.rat.Defaults defaults47 = builder46.build();
        org.apache.rat.utils.Log log48 = null;
        org.apache.rat.ReportConfiguration reportConfiguration49 = new org.apache.rat.ReportConfiguration(log48);
        java.io.FilenameFilter filenameFilter50 = reportConfiguration49.getInputFileFilter();
        org.apache.rat.license.LicenseSetFactory.LicenseFilter licenseFilter51 = org.apache.rat.license.LicenseSetFactory.LicenseFilter.all;
        java.util.SortedSet<org.apache.rat.license.ILicense> iLicenseSet52 = reportConfiguration49.getLicenses(licenseFilter51);
        org.apache.rat.config.AddLicenseHeaders addLicenseHeaders53 = org.apache.rat.config.AddLicenseHeaders.FALSE;
        reportConfiguration49.setAddLicenseHeaders(addLicenseHeaders53);
        org.apache.rat.utils.Log log55 = null;
        org.apache.rat.ReportConfiguration reportConfiguration56 = new org.apache.rat.ReportConfiguration(log55);
        org.apache.rat.report.claim.ClaimStatistic claimStatistic57 = org.apache.rat.Reporter.report(reportConfiguration56);
        org.apache.rat.license.LicenseSetFactory.LicenseFilter licenseFilter58 = org.apache.rat.license.LicenseSetFactory.LicenseFilter.all;
        org.apache.rat.Reporter.listLicenses(reportConfiguration56, licenseFilter58);
        org.apache.rat.Reporter.listLicenses(reportConfiguration49, licenseFilter58);
        org.apache.rat.utils.Log log61 = null;
        org.apache.rat.ReportConfiguration reportConfiguration62 = new org.apache.rat.ReportConfiguration(log61);
        java.io.FilenameFilter filenameFilter63 = reportConfiguration62.getInputFileFilter();
        org.apache.rat.license.LicenseSetFactory.LicenseFilter licenseFilter64 = org.apache.rat.license.LicenseSetFactory.LicenseFilter.all;
        java.util.SortedSet<org.apache.rat.license.ILicense> iLicenseSet65 = reportConfiguration62.getLicenses(licenseFilter64);
        org.apache.rat.config.AddLicenseHeaders addLicenseHeaders66 = org.apache.rat.config.AddLicenseHeaders.FALSE;
        reportConfiguration62.setAddLicenseHeaders(addLicenseHeaders66);
        org.apache.rat.utils.Log log68 = null;
        org.apache.rat.ReportConfiguration reportConfiguration69 = new org.apache.rat.ReportConfiguration(log68);
        org.apache.rat.report.claim.ClaimStatistic claimStatistic70 = org.apache.rat.Reporter.report(reportConfiguration69);
        org.apache.rat.license.LicenseSetFactory.LicenseFilter licenseFilter71 = org.apache.rat.license.LicenseSetFactory.LicenseFilter.all;
        org.apache.rat.Reporter.listLicenses(reportConfiguration69, licenseFilter71);
        org.apache.rat.Reporter.listLicenses(reportConfiguration62, licenseFilter71);
        java.util.SortedSet<org.apache.rat.license.ILicenseFamily> iLicenseFamilySet74 = reportConfiguration49.getLicenseFamilies(licenseFilter71);
        java.util.SortedSet<org.apache.rat.license.ILicense> iLicenseSet75 = defaults47.getLicenses(licenseFilter71);
        org.apache.rat.utils.ReportingSet<org.apache.rat.license.ILicense> iLicenseSet76 = new org.apache.rat.utils.ReportingSet<org.apache.rat.license.ILicense>(iLicenseSet75);
        org.apache.rat.license.ILicense iLicense77 = org.apache.rat.license.LicenseSetFactory.search("TMF", iLicenseSet75);
        reportConfiguration14.addLicense(iLicense77);
        java.lang.String str79 = iLicense77.derivedFrom();
        reportConfiguration6.addLicense(iLicense77);
        java.lang.String str81 = iLicense77.getNotes();
        java.lang.String str82 = iLicense77.derivedFrom();
        org.apache.rat.license.ILicenseFamily iLicenseFamily83 = iLicense77.getLicenseFamily();
        java.lang.String str84 = iLicense77.getName();
        metaData0.reportOnLicense(iLicense77);
        org.apache.rat.license.ILicenseFamily iLicenseFamily86 = iLicense77.getLicenseFamily();
        org.apache.rat.license.ILicenseFamily iLicenseFamily87 = iLicense77.getLicenseFamily();
        org.apache.rat.license.ILicenseFamily iLicenseFamily88 = iLicense77.getLicenseFamily();
        org.junit.Assert.assertNull(str2);
        org.junit.Assert.assertNull(str4);
        org.junit.Assert.assertTrue("'" + level9 + "' != '" + org.apache.rat.utils.Log.Level.ERROR + "'", level9.equals(org.apache.rat.utils.Log.Level.ERROR));
        org.junit.Assert.assertNull(filenameFilter15);
        org.junit.Assert.assertTrue("'" + licenseFilter16 + "' != '" + org.apache.rat.license.LicenseSetFactory.LicenseFilter.all + "'", licenseFilter16.equals(org.apache.rat.license.LicenseSetFactory.LicenseFilter.all));
        org.junit.Assert.assertNotNull(iLicenseSet17);
        org.junit.Assert.assertTrue("'" + addLicenseHeaders18 + "' != '" + org.apache.rat.config.AddLicenseHeaders.FALSE + "'", addLicenseHeaders18.equals(org.apache.rat.config.AddLicenseHeaders.FALSE));
        org.junit.Assert.assertNull(claimStatistic22);
        org.junit.Assert.assertTrue("'" + licenseFilter23 + "' != '" + org.apache.rat.license.LicenseSetFactory.LicenseFilter.all + "'", licenseFilter23.equals(org.apache.rat.license.LicenseSetFactory.LicenseFilter.all));
        org.junit.Assert.assertNull(filenameFilter28);
        org.junit.Assert.assertTrue("'" + licenseFilter29 + "' != '" + org.apache.rat.license.LicenseSetFactory.LicenseFilter.all + "'", licenseFilter29.equals(org.apache.rat.license.LicenseSetFactory.LicenseFilter.all));
        org.junit.Assert.assertNotNull(iLicenseSet30);
        org.junit.Assert.assertTrue("'" + addLicenseHeaders31 + "' != '" + org.apache.rat.config.AddLicenseHeaders.FALSE + "'", addLicenseHeaders31.equals(org.apache.rat.config.AddLicenseHeaders.FALSE));
        org.junit.Assert.assertNull(claimStatistic35);
        org.junit.Assert.assertTrue("'" + licenseFilter36 + "' != '" + org.apache.rat.license.LicenseSetFactory.LicenseFilter.all + "'", licenseFilter36.equals(org.apache.rat.license.LicenseSetFactory.LicenseFilter.all));
        org.junit.Assert.assertNull(filenameFilter40);
        org.junit.Assert.assertNotNull(builder46);
        org.junit.Assert.assertNotNull(defaults47);
        org.junit.Assert.assertNull(filenameFilter50);
        org.junit.Assert.assertTrue("'" + licenseFilter51 + "' != '" + org.apache.rat.license.LicenseSetFactory.LicenseFilter.all + "'", licenseFilter51.equals(org.apache.rat.license.LicenseSetFactory.LicenseFilter.all));
        org.junit.Assert.assertNotNull(iLicenseSet52);
        org.junit.Assert.assertTrue("'" + addLicenseHeaders53 + "' != '" + org.apache.rat.config.AddLicenseHeaders.FALSE + "'", addLicenseHeaders53.equals(org.apache.rat.config.AddLicenseHeaders.FALSE));
        org.junit.Assert.assertNull(claimStatistic57);
        org.junit.Assert.assertTrue("'" + licenseFilter58 + "' != '" + org.apache.rat.license.LicenseSetFactory.LicenseFilter.all + "'", licenseFilter58.equals(org.apache.rat.license.LicenseSetFactory.LicenseFilter.all));
        org.junit.Assert.assertNull(filenameFilter63);
        org.junit.Assert.assertTrue("'" + licenseFilter64 + "' != '" + org.apache.rat.license.LicenseSetFactory.LicenseFilter.all + "'", licenseFilter64.equals(org.apache.rat.license.LicenseSetFactory.LicenseFilter.all));
        org.junit.Assert.assertNotNull(iLicenseSet65);
        org.junit.Assert.assertTrue("'" + addLicenseHeaders66 + "' != '" + org.apache.rat.config.AddLicenseHeaders.FALSE + "'", addLicenseHeaders66.equals(org.apache.rat.config.AddLicenseHeaders.FALSE));
        org.junit.Assert.assertNull(claimStatistic70);
        org.junit.Assert.assertTrue("'" + licenseFilter71 + "' != '" + org.apache.rat.license.LicenseSetFactory.LicenseFilter.all + "'", licenseFilter71.equals(org.apache.rat.license.LicenseSetFactory.LicenseFilter.all));
        org.junit.Assert.assertNotNull(iLicenseFamilySet74);
        org.junit.Assert.assertNotNull(iLicenseSet75);
        org.junit.Assert.assertNotNull(iLicense77);
        org.junit.Assert.assertEquals("'" + str79 + "' != '" + "BSD-3" + "'", str79, "BSD-3");
        org.junit.Assert.assertNull(str81);
        org.junit.Assert.assertEquals("'" + str82 + "' != '" + "BSD-3" + "'", str82, "BSD-3");
        org.junit.Assert.assertNotNull(iLicenseFamily83);
        org.junit.Assert.assertEquals("'" + str84 + "' != '" + "The Telemanagement Forum License" + "'", str84, "The Telemanagement Forum License");
        org.junit.Assert.assertNotNull(iLicenseFamily86);
        org.junit.Assert.assertNotNull(iLicenseFamily87);
        org.junit.Assert.assertNotNull(iLicenseFamily88);
    }

    @Test
    public void test12622() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest25.test12622");
        org.apache.rat.report.claim.ClaimStatistic claimStatistic0 = new org.apache.rat.report.claim.ClaimStatistic();
        claimStatistic0.setNumApproved((int) (short) 10);
        java.util.Map<java.lang.String, java.lang.Integer> strMap3 = null;
        claimStatistic0.setDocumentCategoryMap(strMap3);
        claimStatistic0.setNumUnknown((int) '4');
        java.util.Map<java.lang.String, java.lang.Integer> strMap7 = null;
        claimStatistic0.setLicenseFileNameMap(strMap7);
        java.util.Map<java.lang.String, java.lang.Integer> strMap9 = claimStatistic0.getDocumentCategoryMap();
        java.util.Map<java.lang.String, java.lang.Integer> strMap10 = null;
        claimStatistic0.setLicenseFileCodeMap(strMap10);
        claimStatistic0.setNumGenerated(10);
        java.util.Map<java.lang.String, java.lang.Integer> strMap14 = null;
        claimStatistic0.setLicenseFileNameMap(strMap14);
        claimStatistic0.setNumGenerated((int) (short) 10);
        java.util.Map<java.lang.String, java.lang.Integer> strMap18 = null;
        claimStatistic0.setLicenseFileCodeMap(strMap18);
        java.util.Map<java.lang.String, java.lang.Integer> strMap20 = null;
        claimStatistic0.setLicenseFileCodeMap(strMap20);
        org.junit.Assert.assertNull(strMap9);
    }

    @Test
    public void test12623() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest25.test12623");
        // The following exception was thrown during execution in test generation
        try {
            org.apache.rat.license.LicenseSetFactory.LicenseFilter licenseFilter1 = org.apache.rat.license.LicenseSetFactory.LicenseFilter.fromText("http://org/apache/rat/meta-data#LicenseFamilyCategory");
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: No enum constant org.apache.rat.license.LicenseSetFactory.LicenseFilter.http://org/apache/rat/meta-data#licensefamilycategory");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
    }

    @Test
    public void test12624() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest25.test12624");
        org.apache.rat.utils.Log log0 = null;
        org.apache.rat.ReportConfiguration reportConfiguration1 = new org.apache.rat.ReportConfiguration(log0);
        org.apache.rat.report.claim.ClaimStatistic claimStatistic2 = org.apache.rat.Reporter.report(reportConfiguration1);
        org.apache.rat.utils.Log log3 = null;
        org.apache.rat.ReportConfiguration reportConfiguration4 = new org.apache.rat.ReportConfiguration(log3);
        org.apache.rat.report.claim.ClaimStatistic claimStatistic5 = org.apache.rat.Reporter.report(reportConfiguration4);
        org.apache.rat.utils.ReportingSet.Options options6 = org.apache.rat.utils.ReportingSet.Options.OVERWRITE;
        reportConfiguration4.licenseDuplicateOption(options6);
        reportConfiguration1.familyDuplicateOption(options6);
        org.apache.commons.io.function.IOSupplier<java.io.PrintWriter> printWriterIOSupplier9 = reportConfiguration1.getWriter();
        org.apache.rat.report.IReportable iReportable10 = null;
        reportConfiguration1.setReportable(iReportable10);
        org.apache.rat.utils.Log log12 = null;
        org.apache.rat.ReportConfiguration reportConfiguration13 = new org.apache.rat.ReportConfiguration(log12);
        org.apache.commons.io.function.IOSupplier<java.io.OutputStream> outputStreamIOSupplier14 = reportConfiguration13.getOutput();
        reportConfiguration13.setCopyrightMessage("MANIFEST.MF");
        org.apache.rat.utils.Log log17 = reportConfiguration13.getLog();
        org.apache.rat.Defaults.Builder builder18 = org.apache.rat.Defaults.builder();
        org.apache.rat.Defaults.Builder builder19 = builder18.noDefault();
        org.apache.rat.Defaults defaults20 = builder19.build();
        reportConfiguration13.setFrom(defaults20);
        org.apache.rat.license.ILicenseFamilyBuilder iLicenseFamilyBuilder22 = new org.apache.rat.license.ILicenseFamilyBuilder();
        java.lang.String str23 = iLicenseFamilyBuilder22.getCategory();
        org.apache.rat.license.ILicenseFamily.Builder builder25 = iLicenseFamilyBuilder22.setLicenseFamilyCategory("AL   ");
        org.apache.rat.license.ILicenseFamily.Builder builder27 = iLicenseFamilyBuilder22.setLicenseFamilyCategory("MIT  ");
        org.apache.rat.license.ILicenseFamily.Builder builder29 = iLicenseFamilyBuilder22.setLicenseFamilyName("4a00cf7d-fe76-423e-917e-b03bbae6b8a5");
        java.lang.String str30 = iLicenseFamilyBuilder22.getCategory();
        org.apache.rat.license.ILicenseFamily.Builder builder32 = iLicenseFamilyBuilder22.setLicenseFamilyName("8ecb8cce-06e4-400f-84d9-ad1cf6289fda");
        org.apache.rat.license.ILicenseFamily iLicenseFamily33 = iLicenseFamilyBuilder22.build();
        reportConfiguration13.addApprovedLicenseCategory(iLicenseFamily33);
        reportConfiguration1.addFamily(iLicenseFamily33);
        java.util.SortedSet<java.lang.String> strSet36 = reportConfiguration1.getApprovedLicenseCategories();
        org.junit.Assert.assertNull(claimStatistic2);
        org.junit.Assert.assertNull(claimStatistic5);
        org.junit.Assert.assertTrue("'" + options6 + "' != '" + org.apache.rat.utils.ReportingSet.Options.OVERWRITE + "'", options6.equals(org.apache.rat.utils.ReportingSet.Options.OVERWRITE));
        org.junit.Assert.assertNotNull(printWriterIOSupplier9);
        org.junit.Assert.assertNotNull(outputStreamIOSupplier14);
        org.junit.Assert.assertNull(log17);
        org.junit.Assert.assertNotNull(builder18);
        org.junit.Assert.assertNotNull(builder19);
        org.junit.Assert.assertNotNull(defaults20);
        org.junit.Assert.assertNull(str23);
        org.junit.Assert.assertNotNull(builder25);
        org.junit.Assert.assertNotNull(builder27);
        org.junit.Assert.assertNotNull(builder29);
        org.junit.Assert.assertEquals("'" + str30 + "' != '" + "MIT  " + "'", str30, "MIT  ");
        org.junit.Assert.assertNotNull(builder32);
        org.junit.Assert.assertNotNull(iLicenseFamily33);
        org.junit.Assert.assertNotNull(strSet36);
    }

    @Test
    public void test12625() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest25.test12625");
        java.io.File file0 = null;
        byte[] byteArray6 = new byte[] { (byte) 0, (byte) 1, (byte) 100, (byte) 0, (byte) -1 };
        // The following exception was thrown during execution in test generation
        try {
            org.apache.rat.document.impl.ArchiveEntryDocument archiveEntryDocument7 = new org.apache.rat.document.impl.ArchiveEntryDocument(file0, byteArray6);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(byteArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray6), "[0, 1, 100, 0, -1]");
    }

    @Test
    public void test12626() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest25.test12626");
        org.apache.rat.report.claim.ClaimStatistic claimStatistic0 = new org.apache.rat.report.claim.ClaimStatistic();
        claimStatistic0.setNumApproved((int) (short) 10);
        java.util.Map<java.lang.String, java.lang.Integer> strMap3 = null;
        claimStatistic0.setDocumentCategoryMap(strMap3);
        java.util.Map<java.lang.String, java.lang.Integer> strMap5 = claimStatistic0.getLicenseFileNameMap();
        claimStatistic0.setNumUnknown((int) (byte) -1);
        claimStatistic0.setNumUnknown(30);
        int int10 = claimStatistic0.getNumUnknown();
        int int11 = claimStatistic0.getNumUnApproved();
        int int12 = claimStatistic0.getNumApproved();
        claimStatistic0.setNumApproved(4);
        int int15 = claimStatistic0.getNumApproved();
        org.junit.Assert.assertNull(strMap5);
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + 30 + "'", int10 == 30);
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 0 + "'", int11 == 0);
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + 10 + "'", int12 == 10);
        org.junit.Assert.assertTrue("'" + int15 + "' != '" + 4 + "'", int15 == 4);
    }

    @Test
    public void test12627() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest25.test12627");
        java.io.Writer writer0 = null;
        org.apache.rat.report.xml.writer.impl.base.XmlWriter xmlWriter1 = new org.apache.rat.report.xml.writer.impl.base.XmlWriter(writer0);
        org.apache.rat.report.claim.impl.xml.SimpleXmlClaimReporter simpleXmlClaimReporter2 = new org.apache.rat.report.claim.impl.xml.SimpleXmlClaimReporter((org.apache.rat.report.xml.writer.IXmlWriter) xmlWriter1);
        org.apache.rat.report.claim.impl.xml.SimpleXmlClaimReporter simpleXmlClaimReporter3 = new org.apache.rat.report.claim.impl.xml.SimpleXmlClaimReporter((org.apache.rat.report.xml.writer.IXmlWriter) xmlWriter1);
        org.apache.rat.report.claim.impl.xml.SimpleXmlClaimReporter simpleXmlClaimReporter4 = new org.apache.rat.report.claim.impl.xml.SimpleXmlClaimReporter((org.apache.rat.report.xml.writer.IXmlWriter) xmlWriter1);
        org.apache.rat.report.claim.impl.xml.SimpleXmlClaimReporter simpleXmlClaimReporter5 = new org.apache.rat.report.claim.impl.xml.SimpleXmlClaimReporter((org.apache.rat.report.xml.writer.IXmlWriter) xmlWriter1);
        org.apache.rat.report.claim.impl.xml.SimpleXmlClaimReporter simpleXmlClaimReporter6 = new org.apache.rat.report.claim.impl.xml.SimpleXmlClaimReporter((org.apache.rat.report.xml.writer.IXmlWriter) xmlWriter1);
        org.apache.rat.report.claim.impl.xml.SimpleXmlClaimReporter simpleXmlClaimReporter7 = new org.apache.rat.report.claim.impl.xml.SimpleXmlClaimReporter((org.apache.rat.report.xml.writer.IXmlWriter) xmlWriter1);
        org.apache.rat.report.claim.ClaimStatistic claimStatistic8 = new org.apache.rat.report.claim.ClaimStatistic();
        claimStatistic8.setNumUnApproved((int) (short) 10);
        java.util.Map<java.lang.String, java.lang.Integer> strMap11 = null;
        claimStatistic8.setDocumentCategoryMap(strMap11);
        claimStatistic8.setNumUnknown((int) ' ');
        claimStatistic8.setNumUnknown((int) (short) 10);
        java.util.Map<java.lang.String, java.lang.Integer> strMap17 = claimStatistic8.getLicenseFileCodeMap();
        int int18 = claimStatistic8.getNumGenerated();
        claimStatistic8.setNumGenerated(5);
        org.apache.rat.utils.DefaultLog defaultLog21 = org.apache.rat.utils.DefaultLog.INSTANCE;
        org.apache.rat.utils.Log log22 = null;
        org.apache.rat.ReportConfiguration reportConfiguration23 = new org.apache.rat.ReportConfiguration(log22);
        java.io.FilenameFilter filenameFilter24 = reportConfiguration23.getInputFileFilter();
        org.apache.rat.license.LicenseSetFactory.LicenseFilter licenseFilter25 = org.apache.rat.license.LicenseSetFactory.LicenseFilter.all;
        java.util.SortedSet<org.apache.rat.license.ILicense> iLicenseSet26 = reportConfiguration23.getLicenses(licenseFilter25);
        org.apache.rat.config.AddLicenseHeaders addLicenseHeaders27 = org.apache.rat.config.AddLicenseHeaders.FALSE;
        reportConfiguration23.setAddLicenseHeaders(addLicenseHeaders27);
        org.apache.rat.utils.Log log29 = null;
        org.apache.rat.ReportConfiguration reportConfiguration30 = new org.apache.rat.ReportConfiguration(log29);
        org.apache.rat.report.claim.ClaimStatistic claimStatistic31 = org.apache.rat.Reporter.report(reportConfiguration30);
        org.apache.rat.license.LicenseSetFactory.LicenseFilter licenseFilter32 = org.apache.rat.license.LicenseSetFactory.LicenseFilter.all;
        org.apache.rat.Reporter.listLicenses(reportConfiguration30, licenseFilter32);
        org.apache.rat.Reporter.listLicenses(reportConfiguration23, licenseFilter32);
        org.apache.rat.utils.Log log35 = null;
        org.apache.rat.ReportConfiguration reportConfiguration36 = new org.apache.rat.ReportConfiguration(log35);
        java.io.FilenameFilter filenameFilter37 = reportConfiguration36.getInputFileFilter();
        org.apache.rat.license.LicenseSetFactory.LicenseFilter licenseFilter38 = org.apache.rat.license.LicenseSetFactory.LicenseFilter.all;
        java.util.SortedSet<org.apache.rat.license.ILicense> iLicenseSet39 = reportConfiguration36.getLicenses(licenseFilter38);
        org.apache.rat.config.AddLicenseHeaders addLicenseHeaders40 = org.apache.rat.config.AddLicenseHeaders.FALSE;
        reportConfiguration36.setAddLicenseHeaders(addLicenseHeaders40);
        org.apache.rat.utils.Log log42 = null;
        org.apache.rat.ReportConfiguration reportConfiguration43 = new org.apache.rat.ReportConfiguration(log42);
        org.apache.rat.report.claim.ClaimStatistic claimStatistic44 = org.apache.rat.Reporter.report(reportConfiguration43);
        org.apache.rat.license.LicenseSetFactory.LicenseFilter licenseFilter45 = org.apache.rat.license.LicenseSetFactory.LicenseFilter.all;
        org.apache.rat.Reporter.listLicenses(reportConfiguration43, licenseFilter45);
        org.apache.rat.Reporter.listLicenses(reportConfiguration36, licenseFilter45);
        org.apache.rat.Reporter.listLicenses(reportConfiguration23, licenseFilter45);
        org.apache.rat.utils.Log log49 = null;
        org.apache.rat.ReportConfiguration reportConfiguration50 = new org.apache.rat.ReportConfiguration(log49);
        org.apache.commons.io.function.IOSupplier<java.io.OutputStream> outputStreamIOSupplier51 = reportConfiguration50.getOutput();
        reportConfiguration23.setOut(outputStreamIOSupplier51);
        org.apache.rat.utils.Log log53 = null;
        org.apache.rat.ReportConfiguration reportConfiguration54 = new org.apache.rat.ReportConfiguration(log53);
        org.apache.rat.report.claim.ClaimStatistic claimStatistic55 = org.apache.rat.Reporter.report(reportConfiguration54);
        org.apache.rat.utils.Log log56 = null;
        org.apache.rat.ReportConfiguration reportConfiguration57 = new org.apache.rat.ReportConfiguration(log56);
        org.apache.rat.report.claim.ClaimStatistic claimStatistic58 = org.apache.rat.Reporter.report(reportConfiguration57);
        org.apache.rat.utils.ReportingSet.Options options59 = org.apache.rat.utils.ReportingSet.Options.OVERWRITE;
        reportConfiguration57.licenseDuplicateOption(options59);
        reportConfiguration54.familyDuplicateOption(options59);
        reportConfiguration23.licenseDuplicateOption(options59);
        reportConfiguration23.addApprovedLicenseCategory("W3C Document Copyright");
        org.apache.rat.utils.Log log65 = null;
        org.apache.rat.ReportConfiguration reportConfiguration66 = new org.apache.rat.ReportConfiguration(log65);
        reportConfiguration66.addApprovedLicenseCategory(".cvsignore");
        org.apache.rat.utils.Log.Level level69 = org.apache.rat.utils.Log.Level.ERROR;
        reportConfiguration66.logLicenseCollisions(level69);
        reportConfiguration23.logLicenseCollisions(level69);
        defaultLog21.setLevel(level69);
        defaultLog21.warn((java.lang.Object) "GNU General Public License, version 3");
        org.apache.rat.ReportConfiguration reportConfiguration75 = new org.apache.rat.ReportConfiguration((org.apache.rat.utils.Log) defaultLog21);
        org.apache.rat.utils.DefaultLog defaultLog76 = org.apache.rat.utils.DefaultLog.INSTANCE;
        org.apache.rat.utils.Log log77 = null;
        org.apache.rat.ReportConfiguration reportConfiguration78 = new org.apache.rat.ReportConfiguration(log77);
        reportConfiguration78.addApprovedLicenseCategory(".cvsignore");
        org.apache.rat.utils.Log.Level level81 = org.apache.rat.utils.Log.Level.ERROR;
        reportConfiguration78.logFamilyCollisions(level81);
        defaultLog76.setLevel(level81);
        defaultLog21.debug((java.lang.Object) level81);
        org.apache.rat.utils.Log.Level level85 = defaultLog21.getLevel();
        org.apache.rat.annotation.ApacheV2LicenseAppender apacheV2LicenseAppender87 = new org.apache.rat.annotation.ApacheV2LicenseAppender((org.apache.rat.utils.Log) defaultLog21, "8ECB8CCE-06E4-400F-84D9-AD1CF6289FDA");
        org.apache.rat.annotation.ApacheV2LicenseAppender apacheV2LicenseAppender89 = new org.apache.rat.annotation.ApacheV2LicenseAppender((org.apache.rat.utils.Log) defaultLog21, "httporgapacheratmetadataLicenseFamilyName");
        org.apache.rat.ReportConfiguration reportConfiguration90 = new org.apache.rat.ReportConfiguration((org.apache.rat.utils.Log) defaultLog21);
        // The following exception was thrown during execution in test generation
        try {
            org.apache.rat.report.RatReport ratReport91 = org.apache.rat.report.xml.XmlReportFactory.createStandardReport((org.apache.rat.report.xml.writer.IXmlWriter) xmlWriter1, claimStatistic8, reportConfiguration90);
            org.junit.Assert.fail("Expected exception of type org.apache.rat.ConfigurationException; message: At least one license must be defined");
        } catch (org.apache.rat.ConfigurationException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNull(strMap17);
        org.junit.Assert.assertTrue("'" + int18 + "' != '" + 0 + "'", int18 == 0);
        org.junit.Assert.assertNotNull(defaultLog21);
        org.junit.Assert.assertNull(filenameFilter24);
        org.junit.Assert.assertTrue("'" + licenseFilter25 + "' != '" + org.apache.rat.license.LicenseSetFactory.LicenseFilter.all + "'", licenseFilter25.equals(org.apache.rat.license.LicenseSetFactory.LicenseFilter.all));
        org.junit.Assert.assertNotNull(iLicenseSet26);
        org.junit.Assert.assertTrue("'" + addLicenseHeaders27 + "' != '" + org.apache.rat.config.AddLicenseHeaders.FALSE + "'", addLicenseHeaders27.equals(org.apache.rat.config.AddLicenseHeaders.FALSE));
        org.junit.Assert.assertNull(claimStatistic31);
        org.junit.Assert.assertTrue("'" + licenseFilter32 + "' != '" + org.apache.rat.license.LicenseSetFactory.LicenseFilter.all + "'", licenseFilter32.equals(org.apache.rat.license.LicenseSetFactory.LicenseFilter.all));
        org.junit.Assert.assertNull(filenameFilter37);
        org.junit.Assert.assertTrue("'" + licenseFilter38 + "' != '" + org.apache.rat.license.LicenseSetFactory.LicenseFilter.all + "'", licenseFilter38.equals(org.apache.rat.license.LicenseSetFactory.LicenseFilter.all));
        org.junit.Assert.assertNotNull(iLicenseSet39);
        org.junit.Assert.assertTrue("'" + addLicenseHeaders40 + "' != '" + org.apache.rat.config.AddLicenseHeaders.FALSE + "'", addLicenseHeaders40.equals(org.apache.rat.config.AddLicenseHeaders.FALSE));
        org.junit.Assert.assertNull(claimStatistic44);
        org.junit.Assert.assertTrue("'" + licenseFilter45 + "' != '" + org.apache.rat.license.LicenseSetFactory.LicenseFilter.all + "'", licenseFilter45.equals(org.apache.rat.license.LicenseSetFactory.LicenseFilter.all));
        org.junit.Assert.assertNotNull(outputStreamIOSupplier51);
        org.junit.Assert.assertNull(claimStatistic55);
        org.junit.Assert.assertNull(claimStatistic58);
        org.junit.Assert.assertTrue("'" + options59 + "' != '" + org.apache.rat.utils.ReportingSet.Options.OVERWRITE + "'", options59.equals(org.apache.rat.utils.ReportingSet.Options.OVERWRITE));
        org.junit.Assert.assertTrue("'" + level69 + "' != '" + org.apache.rat.utils.Log.Level.ERROR + "'", level69.equals(org.apache.rat.utils.Log.Level.ERROR));
        org.junit.Assert.assertNotNull(defaultLog76);
        org.junit.Assert.assertTrue("'" + level81 + "' != '" + org.apache.rat.utils.Log.Level.ERROR + "'", level81.equals(org.apache.rat.utils.Log.Level.ERROR));
        org.junit.Assert.assertTrue("'" + level85 + "' != '" + org.apache.rat.utils.Log.Level.ERROR + "'", level85.equals(org.apache.rat.utils.Log.Level.ERROR));
    }

    @Test
    public void test12628() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest25.test12628");
        java.lang.String[] strArray5 = new java.lang.String[] { "http://org/apache/rat/meta-data#LicenseFamilyCategory", "Datum [ name ='http://org/apache/rat/meta-data#LicenseFamilyCategory',value ='GPL1  ']", "MANIFEST.MF", "AllBuilder:", "The MIT License" };
        org.apache.rat.utils.ReportingSet<java.lang.String> strSet6 = new org.apache.rat.utils.ReportingSet<java.lang.String>();
        boolean boolean7 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strSet6, strArray5);
        boolean boolean9 = strSet6.addIfNotPresent("http://org/apache/rat/meta-data#LicenseFamilyName");
        java.util.Iterator<java.lang.String> strItor10 = strSet6.iterator();
        strSet6.clear();
        int int12 = strSet6.size();
        java.util.function.Function<java.lang.String, java.lang.String> strFunction13 = null;
        org.apache.rat.utils.ReportingSet<java.lang.String> strSet14 = strSet6.setMsgFormat(strFunction13);
        boolean boolean15 = strSet14.isEmpty();
        java.lang.Object[] objArray16 = strSet14.toArray();
        int int17 = strSet14.size();
        org.junit.Assert.assertNotNull(strArray5);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + true + "'", boolean7 == true);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + true + "'", boolean9 == true);
        org.junit.Assert.assertNotNull(strItor10);
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + 0 + "'", int12 == 0);
        org.junit.Assert.assertNotNull(strSet14);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + true + "'", boolean15 == true);
        org.junit.Assert.assertNotNull(objArray16);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray16), "[]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray16), "[]");
        org.junit.Assert.assertTrue("'" + int17 + "' != '" + 0 + "'", int17 == 0);
    }

    @Test
    public void test12629() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest25.test12629");
        org.apache.rat.report.claim.ClaimStatistic claimStatistic0 = new org.apache.rat.report.claim.ClaimStatistic();
        java.util.Map<java.lang.String, java.lang.Integer> strMap1 = null;
        claimStatistic0.setDocumentCategoryMap(strMap1);
        int int3 = claimStatistic0.getNumUnApproved();
        java.util.Map<java.lang.String, java.lang.Integer> strMap4 = claimStatistic0.getDocumentCategoryMap();
        claimStatistic0.setNumUnApproved((int) (byte) 1);
        java.util.Map<java.lang.String, java.lang.Integer> strMap7 = null;
        claimStatistic0.setLicenseFileNameMap(strMap7);
        claimStatistic0.setNumApproved(3);
        claimStatistic0.setNumUnknown(0);
        claimStatistic0.setNumGenerated((int) (short) 1);
        claimStatistic0.setNumUnknown((-3));
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 0 + "'", int3 == 0);
        org.junit.Assert.assertNull(strMap4);
    }

    @Test
    public void test12630() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest25.test12630");
        org.apache.rat.utils.DefaultLog defaultLog0 = org.apache.rat.utils.DefaultLog.INSTANCE;
        org.apache.rat.license.ILicense.Builder builder1 = org.apache.rat.license.ILicense.builder();
        org.apache.rat.license.ILicense.Builder builder3 = builder1.setLicenseFamilyCategory("");
        org.apache.rat.analysis.matchers.CopyrightMatcher copyrightMatcher7 = new org.apache.rat.analysis.matchers.CopyrightMatcher("", "GPL1 ", "hi!");
        org.apache.rat.analysis.IHeaderMatcher.State state8 = copyrightMatcher7.finalizeState();
        org.apache.rat.license.ILicense.Builder builder9 = builder3.setMatcher((org.apache.rat.analysis.IHeaderMatcher) copyrightMatcher7);
        org.apache.rat.license.ILicense.Builder builder11 = builder9.setLicenseFamilyCategory("");
        defaultLog0.error((java.lang.Object) builder11);
        org.apache.rat.utils.Log log13 = null;
        org.apache.rat.ReportConfiguration reportConfiguration14 = new org.apache.rat.ReportConfiguration(log13);
        java.io.FilenameFilter filenameFilter15 = reportConfiguration14.getInputFileFilter();
        org.apache.rat.license.LicenseSetFactory.LicenseFilter licenseFilter16 = org.apache.rat.license.LicenseSetFactory.LicenseFilter.all;
        java.util.SortedSet<org.apache.rat.license.ILicense> iLicenseSet17 = reportConfiguration14.getLicenses(licenseFilter16);
        org.apache.rat.config.AddLicenseHeaders addLicenseHeaders18 = org.apache.rat.config.AddLicenseHeaders.FALSE;
        reportConfiguration14.setAddLicenseHeaders(addLicenseHeaders18);
        org.apache.rat.utils.Log log20 = null;
        org.apache.rat.ReportConfiguration reportConfiguration21 = new org.apache.rat.ReportConfiguration(log20);
        org.apache.rat.report.claim.ClaimStatistic claimStatistic22 = org.apache.rat.Reporter.report(reportConfiguration21);
        org.apache.rat.license.LicenseSetFactory.LicenseFilter licenseFilter23 = org.apache.rat.license.LicenseSetFactory.LicenseFilter.all;
        org.apache.rat.Reporter.listLicenses(reportConfiguration21, licenseFilter23);
        org.apache.rat.Reporter.listLicenses(reportConfiguration14, licenseFilter23);
        org.apache.rat.utils.Log log26 = null;
        org.apache.rat.ReportConfiguration reportConfiguration27 = new org.apache.rat.ReportConfiguration(log26);
        java.io.FilenameFilter filenameFilter28 = reportConfiguration27.getInputFileFilter();
        org.apache.rat.license.LicenseSetFactory.LicenseFilter licenseFilter29 = org.apache.rat.license.LicenseSetFactory.LicenseFilter.all;
        java.util.SortedSet<org.apache.rat.license.ILicense> iLicenseSet30 = reportConfiguration27.getLicenses(licenseFilter29);
        org.apache.rat.config.AddLicenseHeaders addLicenseHeaders31 = org.apache.rat.config.AddLicenseHeaders.FALSE;
        reportConfiguration27.setAddLicenseHeaders(addLicenseHeaders31);
        org.apache.rat.utils.Log log33 = null;
        org.apache.rat.ReportConfiguration reportConfiguration34 = new org.apache.rat.ReportConfiguration(log33);
        org.apache.rat.report.claim.ClaimStatistic claimStatistic35 = org.apache.rat.Reporter.report(reportConfiguration34);
        org.apache.rat.license.LicenseSetFactory.LicenseFilter licenseFilter36 = org.apache.rat.license.LicenseSetFactory.LicenseFilter.all;
        org.apache.rat.Reporter.listLicenses(reportConfiguration34, licenseFilter36);
        org.apache.rat.Reporter.listLicenses(reportConfiguration27, licenseFilter36);
        org.apache.rat.Reporter.listLicenses(reportConfiguration14, licenseFilter36);
        org.apache.rat.utils.Log log40 = null;
        org.apache.rat.ReportConfiguration reportConfiguration41 = new org.apache.rat.ReportConfiguration(log40);
        org.apache.commons.io.function.IOSupplier<java.io.OutputStream> outputStreamIOSupplier42 = reportConfiguration41.getOutput();
        reportConfiguration14.setOut(outputStreamIOSupplier42);
        org.apache.rat.utils.Log.Level level44 = org.apache.rat.utils.Log.Level.WARN;
        reportConfiguration14.logLicenseCollisions(level44);
        defaultLog0.warn((java.lang.Object) level44);
        org.apache.rat.utils.Log.Level level47 = defaultLog0.getLevel();
        defaultLog0.warn((java.lang.Object) 0);
        org.apache.rat.license.SimpleLicenseFamily simpleLicenseFamily50 = new org.apache.rat.license.SimpleLicenseFamily();
        simpleLicenseFamily50.setFamilyName("http://org/apache/rat/meta-data#LicenseFamilyName");
        java.lang.String str53 = simpleLicenseFamily50.toString();
        defaultLog0.warn((java.lang.Object) simpleLicenseFamily50);
        java.lang.String str55 = simpleLicenseFamily50.getFamilyCategory();
        simpleLicenseFamily50.setFamilyName("9a27162b-29e4-4613-9f18-8eafe431b3a4");
        simpleLicenseFamily50.setFamilyName("SpdxBuilder: 15ff671b-67b8-4791-9e1e-208f319fb7e2");
        java.lang.String str60 = simpleLicenseFamily50.getFamilyName();
        org.junit.Assert.assertNotNull(defaultLog0);
        org.junit.Assert.assertNotNull(builder1);
        org.junit.Assert.assertNotNull(builder3);
        org.junit.Assert.assertTrue("'" + state8 + "' != '" + org.apache.rat.analysis.IHeaderMatcher.State.f + "'", state8.equals(org.apache.rat.analysis.IHeaderMatcher.State.f));
        org.junit.Assert.assertNotNull(builder9);
        org.junit.Assert.assertNotNull(builder11);
        org.junit.Assert.assertNull(filenameFilter15);
        org.junit.Assert.assertTrue("'" + licenseFilter16 + "' != '" + org.apache.rat.license.LicenseSetFactory.LicenseFilter.all + "'", licenseFilter16.equals(org.apache.rat.license.LicenseSetFactory.LicenseFilter.all));
        org.junit.Assert.assertNotNull(iLicenseSet17);
        org.junit.Assert.assertTrue("'" + addLicenseHeaders18 + "' != '" + org.apache.rat.config.AddLicenseHeaders.FALSE + "'", addLicenseHeaders18.equals(org.apache.rat.config.AddLicenseHeaders.FALSE));
        org.junit.Assert.assertNull(claimStatistic22);
        org.junit.Assert.assertTrue("'" + licenseFilter23 + "' != '" + org.apache.rat.license.LicenseSetFactory.LicenseFilter.all + "'", licenseFilter23.equals(org.apache.rat.license.LicenseSetFactory.LicenseFilter.all));
        org.junit.Assert.assertNull(filenameFilter28);
        org.junit.Assert.assertTrue("'" + licenseFilter29 + "' != '" + org.apache.rat.license.LicenseSetFactory.LicenseFilter.all + "'", licenseFilter29.equals(org.apache.rat.license.LicenseSetFactory.LicenseFilter.all));
        org.junit.Assert.assertNotNull(iLicenseSet30);
        org.junit.Assert.assertTrue("'" + addLicenseHeaders31 + "' != '" + org.apache.rat.config.AddLicenseHeaders.FALSE + "'", addLicenseHeaders31.equals(org.apache.rat.config.AddLicenseHeaders.FALSE));
        org.junit.Assert.assertNull(claimStatistic35);
        org.junit.Assert.assertTrue("'" + licenseFilter36 + "' != '" + org.apache.rat.license.LicenseSetFactory.LicenseFilter.all + "'", licenseFilter36.equals(org.apache.rat.license.LicenseSetFactory.LicenseFilter.all));
        org.junit.Assert.assertNotNull(outputStreamIOSupplier42);
        org.junit.Assert.assertTrue("'" + level44 + "' != '" + org.apache.rat.utils.Log.Level.WARN + "'", level44.equals(org.apache.rat.utils.Log.Level.WARN));
        org.junit.Assert.assertTrue("'" + level47 + "' != '" + org.apache.rat.utils.Log.Level.ERROR + "'", level47.equals(org.apache.rat.utils.Log.Level.ERROR));
        org.junit.Assert.assertEquals("'" + str53 + "' != '" + "null http://org/apache/rat/meta-data#LicenseFamilyName" + "'", str53, "null http://org/apache/rat/meta-data#LicenseFamilyName");
        org.junit.Assert.assertNull(str55);
        org.junit.Assert.assertEquals("'" + str60 + "' != '" + "SpdxBuilder: 15ff671b-67b8-4791-9e1e-208f319fb7e2" + "'", str60, "SpdxBuilder: 15ff671b-67b8-4791-9e1e-208f319fb7e2");
    }

    @Test
    public void test12631() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest25.test12631");
        org.apache.rat.api.MetaData metaData0 = new org.apache.rat.api.MetaData();
        java.lang.String str2 = metaData0.value("COMMON DEVELOPMENT AND DISTRIBUTION LICENSE Version 1.0");
        java.lang.String str4 = metaData0.value("W3C Document Copyright");
        boolean boolean6 = metaData0.clear("hi!");
        java.lang.String str8 = metaData0.value("true");
        metaData0.clear();
        boolean boolean11 = metaData0.clear("W3CD ");
        metaData0.clear();
        java.lang.String str14 = metaData0.value("6232a9af-c312-410c-9bbb-6b12d7725116");
        java.lang.String[] strArray20 = new java.lang.String[] { "http://org/apache/rat/meta-data#LicenseFamilyCategory", "Datum [ name ='http://org/apache/rat/meta-data#LicenseFamilyCategory',value ='GPL1  ']", "MANIFEST.MF", "AllBuilder:", "The MIT License" };
        org.apache.rat.utils.ReportingSet<java.lang.String> strSet21 = new org.apache.rat.utils.ReportingSet<java.lang.String>();
        boolean boolean22 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strSet21, strArray20);
        boolean boolean24 = strSet21.addIfNotPresent("http://org/apache/rat/meta-data#LicenseFamilyName");
        org.apache.rat.api.MetaData.Datum datum25 = org.apache.rat.api.MetaData.RAT_LICENSE_FAMILY_NAME_DATUM_GPL_VERSION_2;
        boolean boolean26 = strSet21.equals((java.lang.Object) datum25);
        java.lang.String str27 = datum25.toString();
        metaData0.add(datum25);
        boolean boolean30 = metaData0.clear("Datum [ name ='b9d57440-4b03-461e-a164-b29e1341bbc8',value =' ']");
        metaData0.clear();
        java.util.Collection<org.apache.rat.api.MetaData.Datum> datumCollection32 = metaData0.getData();
        org.junit.Assert.assertNull(str2);
        org.junit.Assert.assertNull(str4);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertNull(str8);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
        org.junit.Assert.assertNull(str14);
        org.junit.Assert.assertNotNull(strArray20);
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + true + "'", boolean22 == true);
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + true + "'", boolean24 == true);
        org.junit.Assert.assertNotNull(datum25);
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + false + "'", boolean26 == false);
        org.junit.Assert.assertEquals("'" + str27 + "' != '" + "Datum [ name ='http://org/apache/rat/meta-data#LicenseFamilyName',value ='GNU General Public License, version 2 ']" + "'", str27, "Datum [ name ='http://org/apache/rat/meta-data#LicenseFamilyName',value ='GNU General Public License, version 2 ']");
        org.junit.Assert.assertTrue("'" + boolean30 + "' != '" + false + "'", boolean30 == false);
        org.junit.Assert.assertNotNull(datumCollection32);
    }

    @Test
    public void test12632() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest25.test12632");
        org.apache.rat.utils.Log log0 = null;
        org.apache.rat.ReportConfiguration reportConfiguration1 = new org.apache.rat.ReportConfiguration(log0);
        org.apache.rat.report.claim.ClaimStatistic claimStatistic2 = org.apache.rat.Reporter.report(reportConfiguration1);
        org.apache.rat.utils.Log log3 = null;
        org.apache.rat.ReportConfiguration reportConfiguration4 = new org.apache.rat.ReportConfiguration(log3);
        org.apache.rat.report.claim.ClaimStatistic claimStatistic5 = org.apache.rat.Reporter.report(reportConfiguration4);
        org.apache.rat.utils.ReportingSet.Options options6 = org.apache.rat.utils.ReportingSet.Options.OVERWRITE;
        reportConfiguration4.licenseDuplicateOption(options6);
        reportConfiguration1.familyDuplicateOption(options6);
        org.apache.commons.io.function.IOSupplier<java.io.PrintWriter> printWriterIOSupplier9 = reportConfiguration1.getWriter();
        boolean boolean10 = reportConfiguration1.isAddingLicensesForced();
        java.io.FilenameFilter filenameFilter11 = reportConfiguration1.getInputFileFilter();
        org.apache.commons.io.function.IOSupplier<java.io.InputStream> inputStreamIOSupplier12 = reportConfiguration1.getStyleSheet();
        java.lang.String str13 = reportConfiguration1.getCopyrightMessage();
        org.apache.rat.utils.Log log14 = null;
        org.apache.rat.ReportConfiguration reportConfiguration15 = new org.apache.rat.ReportConfiguration(log14);
        org.apache.rat.report.claim.ClaimStatistic claimStatistic16 = org.apache.rat.Reporter.report(reportConfiguration15);
        org.apache.commons.io.function.IOSupplier<java.io.InputStream> inputStreamIOSupplier17 = reportConfiguration15.getStyleSheet();
        org.apache.rat.analysis.license.FullTextMatchingLicense fullTextMatchingLicense18 = new org.apache.rat.analysis.license.FullTextMatchingLicense();
        fullTextMatchingLicense18.setLicenseFamilyName("hi!");
        java.lang.String str21 = fullTextMatchingLicense18.getLicenseFamilyCategory();
        java.lang.String str22 = fullTextMatchingLicense18.getLicenseFamilyName();
        fullTextMatchingLicense18.setLicenseFamilyName("SpdxBuilder: null");
        fullTextMatchingLicense18.setLicenseFamilyCategory("TMF");
        org.apache.rat.license.ILicenseFamily iLicenseFamily27 = fullTextMatchingLicense18.getLicenseFamily();
        java.lang.String str28 = iLicenseFamily27.getFamilyName();
        java.lang.String str29 = iLicenseFamily27.getFamilyName();
        reportConfiguration15.addApprovedLicenseCategory(iLicenseFamily27);
        reportConfiguration1.addApprovedLicenseCategory(iLicenseFamily27);
        java.lang.String str32 = iLicenseFamily27.getFamilyName();
        java.lang.String str33 = iLicenseFamily27.getFamilyName();
        org.junit.Assert.assertNull(claimStatistic2);
        org.junit.Assert.assertNull(claimStatistic5);
        org.junit.Assert.assertTrue("'" + options6 + "' != '" + org.apache.rat.utils.ReportingSet.Options.OVERWRITE + "'", options6.equals(org.apache.rat.utils.ReportingSet.Options.OVERWRITE));
        org.junit.Assert.assertNotNull(printWriterIOSupplier9);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertNull(filenameFilter11);
        org.junit.Assert.assertNull(inputStreamIOSupplier12);
        org.junit.Assert.assertNull(str13);
        org.junit.Assert.assertNull(claimStatistic16);
        org.junit.Assert.assertNull(inputStreamIOSupplier17);
        org.junit.Assert.assertNull(str21);
        org.junit.Assert.assertEquals("'" + str22 + "' != '" + "hi!" + "'", str22, "hi!");
        org.junit.Assert.assertNotNull(iLicenseFamily27);
        org.junit.Assert.assertEquals("'" + str28 + "' != '" + "SpdxBuilder: null" + "'", str28, "SpdxBuilder: null");
        org.junit.Assert.assertEquals("'" + str29 + "' != '" + "SpdxBuilder: null" + "'", str29, "SpdxBuilder: null");
        org.junit.Assert.assertEquals("'" + str32 + "' != '" + "SpdxBuilder: null" + "'", str32, "SpdxBuilder: null");
        org.junit.Assert.assertEquals("'" + str33 + "' != '" + "SpdxBuilder: null" + "'", str33, "SpdxBuilder: null");
    }

    @Test
    public void test12633() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest25.test12633");
        org.apache.rat.report.claim.ClaimStatistic claimStatistic0 = new org.apache.rat.report.claim.ClaimStatistic();
        claimStatistic0.setNumApproved((int) (short) 10);
        claimStatistic0.setNumUnknown((int) '#');
        int int5 = claimStatistic0.getNumUnApproved();
        java.util.Map<java.lang.String, java.lang.Integer> strMap6 = claimStatistic0.getLicenseFileCodeMap();
        claimStatistic0.setNumGenerated((int) (short) 1);
        java.util.Map<java.lang.String, java.lang.Integer> strMap9 = claimStatistic0.getLicenseFileNameMap();
        java.util.Map<java.lang.String, java.lang.Integer> strMap10 = claimStatistic0.getDocumentCategoryMap();
        int int11 = claimStatistic0.getNumUnknown();
        int int12 = claimStatistic0.getNumGenerated();
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 0 + "'", int5 == 0);
        org.junit.Assert.assertNull(strMap6);
        org.junit.Assert.assertNull(strMap9);
        org.junit.Assert.assertNull(strMap10);
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 35 + "'", int11 == 35);
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + 1 + "'", int12 == 1);
    }

    @Test
    public void test12634() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest25.test12634");
        org.apache.rat.utils.DefaultLog defaultLog0 = org.apache.rat.utils.DefaultLog.INSTANCE;
        org.apache.rat.configuration.builders.AllBuilder allBuilder1 = new org.apache.rat.configuration.builders.AllBuilder();
        org.apache.rat.configuration.builders.MatcherRefBuilder matcherRefBuilder2 = org.apache.rat.analysis.IHeaderMatcher.Builder.matcherRef();
        boolean boolean3 = matcherRefBuilder2.hasId();
        java.lang.String str4 = matcherRefBuilder2.toString();
        org.apache.rat.configuration.builders.AnyBuilder anyBuilder5 = org.apache.rat.analysis.IHeaderMatcher.Builder.any();
        org.apache.rat.configuration.builders.NotBuilder notBuilder6 = new org.apache.rat.configuration.builders.NotBuilder();
        java.lang.String str7 = notBuilder6.toString();
        org.apache.rat.configuration.builders.MatcherRefBuilder matcherRefBuilder8 = org.apache.rat.analysis.IHeaderMatcher.Builder.matcherRef();
        boolean boolean9 = matcherRefBuilder8.hasId();
        java.util.Map<java.lang.String, org.apache.rat.analysis.IHeaderMatcher> strMap10 = null;
        org.apache.rat.configuration.builders.MatcherRefBuilder matcherRefBuilder11 = matcherRefBuilder8.setMatchers(strMap10);
        org.apache.rat.configuration.builders.AllBuilder allBuilder12 = new org.apache.rat.configuration.builders.AllBuilder();
        org.apache.rat.configuration.builders.CopyrightBuilder copyrightBuilder13 = org.apache.rat.analysis.IHeaderMatcher.Builder.copyright();
        org.apache.rat.configuration.builders.CopyrightBuilder copyrightBuilder15 = copyrightBuilder13.setStart("OASIS");
        java.lang.String str16 = copyrightBuilder13.toString();
        org.apache.rat.configuration.builders.CopyrightBuilder copyrightBuilder18 = copyrightBuilder13.setStart("223f0aba-15d4-49e9-901e-5740c137aebf");
        org.apache.rat.configuration.builders.MatcherRefBuilder matcherRefBuilder19 = org.apache.rat.analysis.IHeaderMatcher.Builder.matcherRef();
        boolean boolean20 = matcherRefBuilder19.hasId();
        org.apache.rat.configuration.builders.CopyrightBuilder copyrightBuilder21 = org.apache.rat.analysis.IHeaderMatcher.Builder.copyright();
        org.apache.rat.configuration.builders.CopyrightBuilder copyrightBuilder23 = copyrightBuilder21.setStart("OASIS");
        java.lang.String str24 = copyrightBuilder21.toString();
        org.apache.rat.configuration.builders.CopyrightBuilder copyrightBuilder26 = copyrightBuilder21.setStart("223f0aba-15d4-49e9-901e-5740c137aebf");
        org.apache.rat.configuration.builders.CopyrightBuilder copyrightBuilder27 = org.apache.rat.analysis.IHeaderMatcher.Builder.copyright();
        org.apache.rat.configuration.builders.CopyrightBuilder copyrightBuilder28 = org.apache.rat.analysis.IHeaderMatcher.Builder.copyright();
        java.lang.String str29 = copyrightBuilder28.toString();
        org.apache.rat.configuration.builders.CopyrightBuilder copyrightBuilder31 = copyrightBuilder28.setEnd(".cvsignore");
        boolean boolean32 = copyrightBuilder28.hasId();
        org.apache.rat.configuration.builders.CopyrightBuilder copyrightBuilder33 = org.apache.rat.analysis.IHeaderMatcher.Builder.copyright();
        java.lang.String str34 = copyrightBuilder33.toString();
        org.apache.rat.configuration.builders.CopyrightBuilder copyrightBuilder36 = copyrightBuilder33.setEnd(".cvsignore");
        boolean boolean37 = copyrightBuilder33.hasId();
        java.lang.String str38 = copyrightBuilder33.toString();
        org.apache.rat.configuration.builders.CopyrightBuilder copyrightBuilder39 = org.apache.rat.analysis.IHeaderMatcher.Builder.copyright();
        org.apache.rat.configuration.builders.CopyrightBuilder copyrightBuilder41 = copyrightBuilder39.setStart("OASIS");
        org.apache.rat.configuration.builders.AnyBuilder anyBuilder42 = org.apache.rat.analysis.IHeaderMatcher.Builder.any();
        org.apache.rat.configuration.builders.MatcherRefBuilder matcherRefBuilder43 = org.apache.rat.analysis.IHeaderMatcher.Builder.matcherRef();
        boolean boolean44 = matcherRefBuilder43.hasId();
        java.util.Map<java.lang.String, org.apache.rat.analysis.IHeaderMatcher> strMap45 = null;
        org.apache.rat.configuration.builders.MatcherRefBuilder matcherRefBuilder46 = matcherRefBuilder43.setMatchers(strMap45);
        org.apache.rat.configuration.builders.CopyrightBuilder copyrightBuilder47 = org.apache.rat.analysis.IHeaderMatcher.Builder.copyright();
        org.apache.rat.configuration.builders.MatcherRefBuilder matcherRefBuilder48 = org.apache.rat.analysis.IHeaderMatcher.Builder.matcherRef();
        boolean boolean49 = matcherRefBuilder48.hasId();
        java.lang.String str50 = matcherRefBuilder48.toString();
        java.util.Map<java.lang.String, org.apache.rat.analysis.IHeaderMatcher> strMap51 = null;
        org.apache.rat.configuration.builders.MatcherRefBuilder matcherRefBuilder52 = matcherRefBuilder48.setMatchers(strMap51);
        org.apache.rat.analysis.IHeaderMatcher.Builder[] builderArray53 = new org.apache.rat.analysis.IHeaderMatcher.Builder[] { matcherRefBuilder8, allBuilder12, copyrightBuilder18, matcherRefBuilder19, copyrightBuilder21, copyrightBuilder27, copyrightBuilder28, copyrightBuilder33, copyrightBuilder39, anyBuilder42, matcherRefBuilder43, copyrightBuilder47, matcherRefBuilder48 };
        java.util.ArrayList<org.apache.rat.analysis.IHeaderMatcher.Builder> builderList54 = new java.util.ArrayList<org.apache.rat.analysis.IHeaderMatcher.Builder>();
        boolean boolean55 = java.util.Collections.addAll((java.util.Collection<org.apache.rat.analysis.IHeaderMatcher.Builder>) builderList54, builderArray53);
        org.apache.rat.configuration.builders.AbstractBuilder abstractBuilder56 = notBuilder6.add((java.util.Collection<org.apache.rat.analysis.IHeaderMatcher.Builder>) builderList54);
        org.apache.rat.configuration.builders.MatcherRefBuilder matcherRefBuilder57 = new org.apache.rat.configuration.builders.MatcherRefBuilder();
        org.apache.rat.analysis.IHeaderMatcher.Builder[] builderArray58 = new org.apache.rat.analysis.IHeaderMatcher.Builder[] { matcherRefBuilder2, anyBuilder5, notBuilder6, matcherRefBuilder57 };
        java.util.ArrayList<org.apache.rat.analysis.IHeaderMatcher.Builder> builderList59 = new java.util.ArrayList<org.apache.rat.analysis.IHeaderMatcher.Builder>();
        boolean boolean60 = java.util.Collections.addAll((java.util.Collection<org.apache.rat.analysis.IHeaderMatcher.Builder>) builderList59, builderArray58);
        org.apache.rat.configuration.builders.AbstractBuilder abstractBuilder61 = allBuilder1.add((java.util.Collection<org.apache.rat.analysis.IHeaderMatcher.Builder>) builderList59);
        defaultLog0.info((java.lang.Object) allBuilder1);
        org.apache.rat.annotation.ApacheV2LicenseAppender apacheV2LicenseAppender64 = new org.apache.rat.annotation.ApacheV2LicenseAppender((org.apache.rat.utils.Log) defaultLog0, "true");
        org.apache.rat.annotation.ApacheV2LicenseAppender apacheV2LicenseAppender66 = new org.apache.rat.annotation.ApacheV2LicenseAppender((org.apache.rat.utils.Log) defaultLog0, "COMMON DEVELOPMENT AND DISTRIBUTION LICENSE Version 1.0");
        org.apache.rat.ReportConfiguration reportConfiguration67 = new org.apache.rat.ReportConfiguration((org.apache.rat.utils.Log) defaultLog0);
        org.apache.rat.analysis.matchers.CopyrightMatcher copyrightMatcher71 = new org.apache.rat.analysis.matchers.CopyrightMatcher("binary", "GPL1 ", "Modified BSD License");
        defaultLog0.info((java.lang.Object) "GPL1 ");
        java.util.SortedSet<org.apache.rat.license.ILicense> iLicenseSet73 = org.apache.rat.license.LicenseSetFactory.emptyLicenseSet();
        java.lang.String[] strArray79 = new java.lang.String[] { "http://org/apache/rat/meta-data#LicenseFamilyCategory", "Datum [ name ='http://org/apache/rat/meta-data#LicenseFamilyCategory',value ='GPL1  ']", "MANIFEST.MF", "AllBuilder:", "The MIT License" };
        org.apache.rat.utils.ReportingSet<java.lang.String> strSet80 = new org.apache.rat.utils.ReportingSet<java.lang.String>();
        boolean boolean81 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strSet80, strArray79);
        boolean boolean83 = strSet80.addIfNotPresent("http://org/apache/rat/meta-data#LicenseFamilyName");
        boolean boolean85 = strSet80.addIfNotPresent("ef7a8b13-64c3-4510-bb0c-dbf208e1e73f");
        java.util.function.Function<java.lang.String, java.lang.String> strFunction86 = null;
        org.apache.rat.utils.ReportingSet<java.lang.String> strSet87 = strSet80.setMsgFormat(strFunction86);
        java.util.SortedSet<org.apache.rat.license.ILicenseFamily> iLicenseFamilySet89 = org.apache.rat.license.LicenseFamilySetFactory.emptyLicenseFamilySet();
        org.apache.rat.license.ILicenseFamily iLicenseFamily90 = org.apache.rat.license.LicenseFamilySetFactory.search("http://org/apache/rat/meta-data", iLicenseFamilySet89);
        boolean boolean91 = strSet80.containsAll((java.util.Collection<org.apache.rat.license.ILicenseFamily>) iLicenseFamilySet89);
        org.apache.rat.utils.ReportingSet<java.lang.String> strSet93 = strSet80.tailSet("http://org/apache/rat/meta-data#HeaderCategory");
        org.apache.rat.license.LicenseSetFactory licenseSetFactory94 = new org.apache.rat.license.LicenseSetFactory(iLicenseSet73, (java.util.Collection<java.lang.String>) strSet93);
        defaultLog0.info((java.lang.Object) iLicenseSet73);
        org.apache.rat.annotation.ApacheV2LicenseAppender apacheV2LicenseAppender96 = new org.apache.rat.annotation.ApacheV2LicenseAppender((org.apache.rat.utils.Log) defaultLog0);
        org.junit.Assert.assertNotNull(defaultLog0);
        org.junit.Assert.assertNotNull(matcherRefBuilder2);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "MathcerRefBuilder: null" + "'", str4, "MathcerRefBuilder: null");
        org.junit.Assert.assertNotNull(anyBuilder5);
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "NotBuilder: null" + "'", str7, "NotBuilder: null");
        org.junit.Assert.assertNotNull(matcherRefBuilder8);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertNotNull(matcherRefBuilder11);
        org.junit.Assert.assertNotNull(copyrightBuilder13);
        org.junit.Assert.assertNotNull(copyrightBuilder15);
        org.junit.Assert.assertEquals("'" + str16 + "' != '" + "Copyright Builder: s:OASIS e:null o:null" + "'", str16, "Copyright Builder: s:OASIS e:null o:null");
        org.junit.Assert.assertNotNull(copyrightBuilder18);
        org.junit.Assert.assertNotNull(matcherRefBuilder19);
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + false + "'", boolean20 == false);
        org.junit.Assert.assertNotNull(copyrightBuilder21);
        org.junit.Assert.assertNotNull(copyrightBuilder23);
        org.junit.Assert.assertEquals("'" + str24 + "' != '" + "Copyright Builder: s:OASIS e:null o:null" + "'", str24, "Copyright Builder: s:OASIS e:null o:null");
        org.junit.Assert.assertNotNull(copyrightBuilder26);
        org.junit.Assert.assertNotNull(copyrightBuilder27);
        org.junit.Assert.assertNotNull(copyrightBuilder28);
        org.junit.Assert.assertEquals("'" + str29 + "' != '" + "Copyright Builder: s:null e:null o:null" + "'", str29, "Copyright Builder: s:null e:null o:null");
        org.junit.Assert.assertNotNull(copyrightBuilder31);
        org.junit.Assert.assertTrue("'" + boolean32 + "' != '" + false + "'", boolean32 == false);
        org.junit.Assert.assertNotNull(copyrightBuilder33);
        org.junit.Assert.assertEquals("'" + str34 + "' != '" + "Copyright Builder: s:null e:null o:null" + "'", str34, "Copyright Builder: s:null e:null o:null");
        org.junit.Assert.assertNotNull(copyrightBuilder36);
        org.junit.Assert.assertTrue("'" + boolean37 + "' != '" + false + "'", boolean37 == false);
        org.junit.Assert.assertEquals("'" + str38 + "' != '" + "Copyright Builder: s:null e:.cvsignore o:null" + "'", str38, "Copyright Builder: s:null e:.cvsignore o:null");
        org.junit.Assert.assertNotNull(copyrightBuilder39);
        org.junit.Assert.assertNotNull(copyrightBuilder41);
        org.junit.Assert.assertNotNull(anyBuilder42);
        org.junit.Assert.assertNotNull(matcherRefBuilder43);
        org.junit.Assert.assertTrue("'" + boolean44 + "' != '" + false + "'", boolean44 == false);
        org.junit.Assert.assertNotNull(matcherRefBuilder46);
        org.junit.Assert.assertNotNull(copyrightBuilder47);
        org.junit.Assert.assertNotNull(matcherRefBuilder48);
        org.junit.Assert.assertTrue("'" + boolean49 + "' != '" + false + "'", boolean49 == false);
        org.junit.Assert.assertEquals("'" + str50 + "' != '" + "MathcerRefBuilder: null" + "'", str50, "MathcerRefBuilder: null");
        org.junit.Assert.assertNotNull(matcherRefBuilder52);
        org.junit.Assert.assertNotNull(builderArray53);
        org.junit.Assert.assertTrue("'" + boolean55 + "' != '" + true + "'", boolean55 == true);
        org.junit.Assert.assertNotNull(abstractBuilder56);
        org.junit.Assert.assertNotNull(builderArray58);
        org.junit.Assert.assertTrue("'" + boolean60 + "' != '" + true + "'", boolean60 == true);
        org.junit.Assert.assertNotNull(abstractBuilder61);
        org.junit.Assert.assertNotNull(iLicenseSet73);
        org.junit.Assert.assertNotNull(strArray79);
        org.junit.Assert.assertTrue("'" + boolean81 + "' != '" + true + "'", boolean81 == true);
        org.junit.Assert.assertTrue("'" + boolean83 + "' != '" + true + "'", boolean83 == true);
        org.junit.Assert.assertTrue("'" + boolean85 + "' != '" + true + "'", boolean85 == true);
        org.junit.Assert.assertNotNull(strSet87);
        org.junit.Assert.assertNotNull(iLicenseFamilySet89);
        org.junit.Assert.assertNull(iLicenseFamily90);
        org.junit.Assert.assertTrue("'" + boolean91 + "' != '" + true + "'", boolean91 == true);
        org.junit.Assert.assertNotNull(strSet93);
    }

    @Test
    public void test12635() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest25.test12635");
        org.apache.rat.api.MetaData metaData0 = new org.apache.rat.api.MetaData();
        java.lang.String str2 = metaData0.value("COMMON DEVELOPMENT AND DISTRIBUTION LICENSE Version 1.0");
        java.lang.String str4 = metaData0.value("W3C Document Copyright");
        boolean boolean6 = metaData0.clear("hi!");
        java.lang.String str8 = metaData0.value("true");
        org.apache.rat.api.MetaData.Datum datum10 = metaData0.get("GNU General Public License, version 1");
        org.apache.rat.api.MetaData.Datum datum12 = metaData0.get("http:");
        org.apache.rat.api.MetaData.Datum datum13 = org.apache.rat.api.MetaData.RAT_APPROVED_LICENSE_DATIM_TRUE;
        metaData0.add(datum13);
        metaData0.clear();
        org.apache.rat.utils.Log log16 = null;
        org.apache.rat.ReportConfiguration reportConfiguration17 = new org.apache.rat.ReportConfiguration(log16);
        reportConfiguration17.addApprovedLicenseCategory(".cvsignore");
        org.apache.rat.utils.Log.Level level20 = org.apache.rat.utils.Log.Level.ERROR;
        reportConfiguration17.logLicenseCollisions(level20);
        reportConfiguration17.addApprovedLicenseCategory("73fbee1b-7ed9-442a-968e-b2b525ca688f");
        org.apache.rat.utils.Log log24 = null;
        org.apache.rat.ReportConfiguration reportConfiguration25 = new org.apache.rat.ReportConfiguration(log24);
        java.io.FilenameFilter filenameFilter26 = reportConfiguration25.getInputFileFilter();
        org.apache.rat.license.LicenseSetFactory.LicenseFilter licenseFilter27 = org.apache.rat.license.LicenseSetFactory.LicenseFilter.all;
        java.util.SortedSet<org.apache.rat.license.ILicense> iLicenseSet28 = reportConfiguration25.getLicenses(licenseFilter27);
        org.apache.rat.config.AddLicenseHeaders addLicenseHeaders29 = org.apache.rat.config.AddLicenseHeaders.FALSE;
        reportConfiguration25.setAddLicenseHeaders(addLicenseHeaders29);
        org.apache.rat.utils.Log log31 = null;
        org.apache.rat.ReportConfiguration reportConfiguration32 = new org.apache.rat.ReportConfiguration(log31);
        org.apache.rat.report.claim.ClaimStatistic claimStatistic33 = org.apache.rat.Reporter.report(reportConfiguration32);
        org.apache.rat.license.LicenseSetFactory.LicenseFilter licenseFilter34 = org.apache.rat.license.LicenseSetFactory.LicenseFilter.all;
        org.apache.rat.Reporter.listLicenses(reportConfiguration32, licenseFilter34);
        org.apache.rat.Reporter.listLicenses(reportConfiguration25, licenseFilter34);
        org.apache.rat.utils.Log log37 = null;
        org.apache.rat.ReportConfiguration reportConfiguration38 = new org.apache.rat.ReportConfiguration(log37);
        java.io.FilenameFilter filenameFilter39 = reportConfiguration38.getInputFileFilter();
        org.apache.rat.license.LicenseSetFactory.LicenseFilter licenseFilter40 = org.apache.rat.license.LicenseSetFactory.LicenseFilter.all;
        java.util.SortedSet<org.apache.rat.license.ILicense> iLicenseSet41 = reportConfiguration38.getLicenses(licenseFilter40);
        org.apache.rat.config.AddLicenseHeaders addLicenseHeaders42 = org.apache.rat.config.AddLicenseHeaders.FALSE;
        reportConfiguration38.setAddLicenseHeaders(addLicenseHeaders42);
        org.apache.rat.utils.Log log44 = null;
        org.apache.rat.ReportConfiguration reportConfiguration45 = new org.apache.rat.ReportConfiguration(log44);
        org.apache.rat.report.claim.ClaimStatistic claimStatistic46 = org.apache.rat.Reporter.report(reportConfiguration45);
        org.apache.rat.license.LicenseSetFactory.LicenseFilter licenseFilter47 = org.apache.rat.license.LicenseSetFactory.LicenseFilter.all;
        org.apache.rat.Reporter.listLicenses(reportConfiguration45, licenseFilter47);
        org.apache.rat.Reporter.listLicenses(reportConfiguration38, licenseFilter47);
        org.apache.rat.Reporter.listLicenses(reportConfiguration25, licenseFilter47);
        java.io.FilenameFilter filenameFilter51 = reportConfiguration25.getInputFileFilter();
        reportConfiguration25.setStyleReport(false);
        org.apache.rat.report.IReportable iReportable54 = null;
        reportConfiguration25.setReportable(iReportable54);
        org.apache.rat.Defaults.Builder builder57 = org.apache.rat.Defaults.builder();
        org.apache.rat.Defaults defaults58 = builder57.build();
        org.apache.rat.utils.Log log59 = null;
        org.apache.rat.ReportConfiguration reportConfiguration60 = new org.apache.rat.ReportConfiguration(log59);
        java.io.FilenameFilter filenameFilter61 = reportConfiguration60.getInputFileFilter();
        org.apache.rat.license.LicenseSetFactory.LicenseFilter licenseFilter62 = org.apache.rat.license.LicenseSetFactory.LicenseFilter.all;
        java.util.SortedSet<org.apache.rat.license.ILicense> iLicenseSet63 = reportConfiguration60.getLicenses(licenseFilter62);
        org.apache.rat.config.AddLicenseHeaders addLicenseHeaders64 = org.apache.rat.config.AddLicenseHeaders.FALSE;
        reportConfiguration60.setAddLicenseHeaders(addLicenseHeaders64);
        org.apache.rat.utils.Log log66 = null;
        org.apache.rat.ReportConfiguration reportConfiguration67 = new org.apache.rat.ReportConfiguration(log66);
        org.apache.rat.report.claim.ClaimStatistic claimStatistic68 = org.apache.rat.Reporter.report(reportConfiguration67);
        org.apache.rat.license.LicenseSetFactory.LicenseFilter licenseFilter69 = org.apache.rat.license.LicenseSetFactory.LicenseFilter.all;
        org.apache.rat.Reporter.listLicenses(reportConfiguration67, licenseFilter69);
        org.apache.rat.Reporter.listLicenses(reportConfiguration60, licenseFilter69);
        org.apache.rat.utils.Log log72 = null;
        org.apache.rat.ReportConfiguration reportConfiguration73 = new org.apache.rat.ReportConfiguration(log72);
        java.io.FilenameFilter filenameFilter74 = reportConfiguration73.getInputFileFilter();
        org.apache.rat.license.LicenseSetFactory.LicenseFilter licenseFilter75 = org.apache.rat.license.LicenseSetFactory.LicenseFilter.all;
        java.util.SortedSet<org.apache.rat.license.ILicense> iLicenseSet76 = reportConfiguration73.getLicenses(licenseFilter75);
        org.apache.rat.config.AddLicenseHeaders addLicenseHeaders77 = org.apache.rat.config.AddLicenseHeaders.FALSE;
        reportConfiguration73.setAddLicenseHeaders(addLicenseHeaders77);
        org.apache.rat.utils.Log log79 = null;
        org.apache.rat.ReportConfiguration reportConfiguration80 = new org.apache.rat.ReportConfiguration(log79);
        org.apache.rat.report.claim.ClaimStatistic claimStatistic81 = org.apache.rat.Reporter.report(reportConfiguration80);
        org.apache.rat.license.LicenseSetFactory.LicenseFilter licenseFilter82 = org.apache.rat.license.LicenseSetFactory.LicenseFilter.all;
        org.apache.rat.Reporter.listLicenses(reportConfiguration80, licenseFilter82);
        org.apache.rat.Reporter.listLicenses(reportConfiguration73, licenseFilter82);
        java.util.SortedSet<org.apache.rat.license.ILicenseFamily> iLicenseFamilySet85 = reportConfiguration60.getLicenseFamilies(licenseFilter82);
        java.util.SortedSet<org.apache.rat.license.ILicense> iLicenseSet86 = defaults58.getLicenses(licenseFilter82);
        org.apache.rat.utils.ReportingSet<org.apache.rat.license.ILicense> iLicenseSet87 = new org.apache.rat.utils.ReportingSet<org.apache.rat.license.ILicense>(iLicenseSet86);
        org.apache.rat.license.ILicense iLicense88 = org.apache.rat.license.LicenseSetFactory.search("TMF", iLicenseSet86);
        reportConfiguration25.addLicense(iLicense88);
        java.lang.String str90 = iLicense88.derivedFrom();
        reportConfiguration17.addLicense(iLicense88);
        java.lang.String str92 = iLicense88.getNotes();
        metaData0.reportOnLicense(iLicense88);
        java.lang.String str94 = iLicense88.getName();
        org.apache.rat.analysis.matchers.NotMatcher notMatcher95 = new org.apache.rat.analysis.matchers.NotMatcher((org.apache.rat.analysis.IHeaderMatcher) iLicense88);
        java.lang.String str96 = iLicense88.derivedFrom();
        java.lang.String str97 = iLicense88.getName();
        org.apache.rat.analysis.IHeaderMatcher.State state98 = iLicense88.currentState();
        org.junit.Assert.assertNull(str2);
        org.junit.Assert.assertNull(str4);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertNull(str8);
        org.junit.Assert.assertNull(datum10);
        org.junit.Assert.assertNull(datum12);
        org.junit.Assert.assertNotNull(datum13);
        org.junit.Assert.assertTrue("'" + level20 + "' != '" + org.apache.rat.utils.Log.Level.ERROR + "'", level20.equals(org.apache.rat.utils.Log.Level.ERROR));
        org.junit.Assert.assertNull(filenameFilter26);
        org.junit.Assert.assertTrue("'" + licenseFilter27 + "' != '" + org.apache.rat.license.LicenseSetFactory.LicenseFilter.all + "'", licenseFilter27.equals(org.apache.rat.license.LicenseSetFactory.LicenseFilter.all));
        org.junit.Assert.assertNotNull(iLicenseSet28);
        org.junit.Assert.assertTrue("'" + addLicenseHeaders29 + "' != '" + org.apache.rat.config.AddLicenseHeaders.FALSE + "'", addLicenseHeaders29.equals(org.apache.rat.config.AddLicenseHeaders.FALSE));
        org.junit.Assert.assertNull(claimStatistic33);
        org.junit.Assert.assertTrue("'" + licenseFilter34 + "' != '" + org.apache.rat.license.LicenseSetFactory.LicenseFilter.all + "'", licenseFilter34.equals(org.apache.rat.license.LicenseSetFactory.LicenseFilter.all));
        org.junit.Assert.assertNull(filenameFilter39);
        org.junit.Assert.assertTrue("'" + licenseFilter40 + "' != '" + org.apache.rat.license.LicenseSetFactory.LicenseFilter.all + "'", licenseFilter40.equals(org.apache.rat.license.LicenseSetFactory.LicenseFilter.all));
        org.junit.Assert.assertNotNull(iLicenseSet41);
        org.junit.Assert.assertTrue("'" + addLicenseHeaders42 + "' != '" + org.apache.rat.config.AddLicenseHeaders.FALSE + "'", addLicenseHeaders42.equals(org.apache.rat.config.AddLicenseHeaders.FALSE));
        org.junit.Assert.assertNull(claimStatistic46);
        org.junit.Assert.assertTrue("'" + licenseFilter47 + "' != '" + org.apache.rat.license.LicenseSetFactory.LicenseFilter.all + "'", licenseFilter47.equals(org.apache.rat.license.LicenseSetFactory.LicenseFilter.all));
        org.junit.Assert.assertNull(filenameFilter51);
        org.junit.Assert.assertNotNull(builder57);
        org.junit.Assert.assertNotNull(defaults58);
        org.junit.Assert.assertNull(filenameFilter61);
        org.junit.Assert.assertTrue("'" + licenseFilter62 + "' != '" + org.apache.rat.license.LicenseSetFactory.LicenseFilter.all + "'", licenseFilter62.equals(org.apache.rat.license.LicenseSetFactory.LicenseFilter.all));
        org.junit.Assert.assertNotNull(iLicenseSet63);
        org.junit.Assert.assertTrue("'" + addLicenseHeaders64 + "' != '" + org.apache.rat.config.AddLicenseHeaders.FALSE + "'", addLicenseHeaders64.equals(org.apache.rat.config.AddLicenseHeaders.FALSE));
        org.junit.Assert.assertNull(claimStatistic68);
        org.junit.Assert.assertTrue("'" + licenseFilter69 + "' != '" + org.apache.rat.license.LicenseSetFactory.LicenseFilter.all + "'", licenseFilter69.equals(org.apache.rat.license.LicenseSetFactory.LicenseFilter.all));
        org.junit.Assert.assertNull(filenameFilter74);
        org.junit.Assert.assertTrue("'" + licenseFilter75 + "' != '" + org.apache.rat.license.LicenseSetFactory.LicenseFilter.all + "'", licenseFilter75.equals(org.apache.rat.license.LicenseSetFactory.LicenseFilter.all));
        org.junit.Assert.assertNotNull(iLicenseSet76);
        org.junit.Assert.assertTrue("'" + addLicenseHeaders77 + "' != '" + org.apache.rat.config.AddLicenseHeaders.FALSE + "'", addLicenseHeaders77.equals(org.apache.rat.config.AddLicenseHeaders.FALSE));
        org.junit.Assert.assertNull(claimStatistic81);
        org.junit.Assert.assertTrue("'" + licenseFilter82 + "' != '" + org.apache.rat.license.LicenseSetFactory.LicenseFilter.all + "'", licenseFilter82.equals(org.apache.rat.license.LicenseSetFactory.LicenseFilter.all));
        org.junit.Assert.assertNotNull(iLicenseFamilySet85);
        org.junit.Assert.assertNotNull(iLicenseSet86);
        org.junit.Assert.assertNotNull(iLicense88);
        org.junit.Assert.assertEquals("'" + str90 + "' != '" + "BSD-3" + "'", str90, "BSD-3");
        org.junit.Assert.assertNull(str92);
        org.junit.Assert.assertEquals("'" + str94 + "' != '" + "The Telemanagement Forum License" + "'", str94, "The Telemanagement Forum License");
        org.junit.Assert.assertEquals("'" + str96 + "' != '" + "BSD-3" + "'", str96, "BSD-3");
        org.junit.Assert.assertEquals("'" + str97 + "' != '" + "The Telemanagement Forum License" + "'", str97, "The Telemanagement Forum License");
        org.junit.Assert.assertTrue("'" + state98 + "' != '" + org.apache.rat.analysis.IHeaderMatcher.State.i + "'", state98.equals(org.apache.rat.analysis.IHeaderMatcher.State.i));
    }

    @Test
    public void test12636() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest25.test12636");
        org.apache.rat.license.ILicense.Builder builder0 = org.apache.rat.license.ILicense.builder();
        org.apache.rat.license.ILicense.Builder builder2 = builder0.setLicenseFamilyCategory("");
        org.apache.rat.analysis.matchers.FullTextMatcher fullTextMatcher4 = new org.apache.rat.analysis.matchers.FullTextMatcher("ef7a8b13-64c3-4510-bb0c-dbf208e1e73f");
        org.apache.rat.license.ILicense.Builder builder5 = builder0.setMatcher((org.apache.rat.analysis.IHeaderMatcher) fullTextMatcher4);
        org.apache.rat.license.ILicense.Builder builder7 = builder0.setName("Datum [ name ='http://org/apache/rat/meta-data#LicenseFamilyCategory',value ='DOJO  ']");
        org.apache.rat.license.ILicense.Builder builder9 = builder0.setDerivedFrom("OASIS Open License");
        org.apache.rat.license.ILicense.Builder builder11 = builder0.setId("binary");
        org.apache.rat.license.ILicense.Builder builder13 = builder0.setNotes("7af67e73-76a3-4497-ab9c-98701437b5de");
        org.apache.rat.configuration.builders.AllBuilder allBuilder14 = new org.apache.rat.configuration.builders.AllBuilder();
        java.lang.String str15 = allBuilder14.toString();
        java.util.List<org.apache.rat.analysis.IHeaderMatcher> iHeaderMatcherList16 = allBuilder14.getChildren();
        org.apache.rat.configuration.builders.MatcherRefBuilder matcherRefBuilder17 = new org.apache.rat.configuration.builders.MatcherRefBuilder();
        org.apache.rat.configuration.builders.AbstractBuilder abstractBuilder18 = allBuilder14.add((org.apache.rat.analysis.IHeaderMatcher.Builder) matcherRefBuilder17);
        org.apache.rat.configuration.builders.MatcherRefBuilder matcherRefBuilder20 = matcherRefBuilder17.setRefId("http:");
        java.util.Map<java.lang.String, org.apache.rat.analysis.IHeaderMatcher> strMap21 = null;
        org.apache.rat.configuration.builders.MatcherRefBuilder matcherRefBuilder22 = matcherRefBuilder20.setMatchers(strMap21);
        org.apache.rat.configuration.builders.MatcherRefBuilder matcherRefBuilder24 = matcherRefBuilder22.setRefId("");
        java.util.Map<java.lang.String, org.apache.rat.analysis.IHeaderMatcher> strMap25 = null;
        org.apache.rat.configuration.builders.MatcherRefBuilder matcherRefBuilder26 = matcherRefBuilder24.setMatchers(strMap25);
        java.util.Map<java.lang.String, org.apache.rat.analysis.IHeaderMatcher> strMap27 = null;
        org.apache.rat.configuration.builders.MatcherRefBuilder matcherRefBuilder28 = matcherRefBuilder26.setMatchers(strMap27);
        org.apache.rat.configuration.builders.MatcherRefBuilder matcherRefBuilder30 = matcherRefBuilder26.setRefId("2e3deed3-f517-459b-ae48-d6ddb543fe1f");
        org.apache.rat.license.ILicense.Builder builder31 = builder0.setMatcher((org.apache.rat.analysis.IHeaderMatcher.Builder) matcherRefBuilder30);
        java.util.Map<java.lang.String, org.apache.rat.analysis.IHeaderMatcher> strMap32 = null;
        org.apache.rat.configuration.builders.MatcherRefBuilder matcherRefBuilder33 = matcherRefBuilder30.setMatchers(strMap32);
        org.junit.Assert.assertNotNull(builder0);
        org.junit.Assert.assertNotNull(builder2);
        org.junit.Assert.assertNotNull(builder5);
        org.junit.Assert.assertNotNull(builder7);
        org.junit.Assert.assertNotNull(builder9);
        org.junit.Assert.assertNotNull(builder11);
        org.junit.Assert.assertNotNull(builder13);
        org.junit.Assert.assertEquals("'" + str15 + "' != '" + "AllBuilder:" + "'", str15, "AllBuilder:");
        org.junit.Assert.assertNotNull(iHeaderMatcherList16);
        org.junit.Assert.assertNotNull(abstractBuilder18);
        org.junit.Assert.assertNotNull(matcherRefBuilder20);
        org.junit.Assert.assertNotNull(matcherRefBuilder22);
        org.junit.Assert.assertNotNull(matcherRefBuilder24);
        org.junit.Assert.assertNotNull(matcherRefBuilder26);
        org.junit.Assert.assertNotNull(matcherRefBuilder28);
        org.junit.Assert.assertNotNull(matcherRefBuilder30);
        org.junit.Assert.assertNotNull(builder31);
        org.junit.Assert.assertNotNull(matcherRefBuilder33);
    }

    @Test
    public void test12637() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest25.test12637");
        org.apache.rat.configuration.builders.AnyBuilder anyBuilder0 = org.apache.rat.analysis.IHeaderMatcher.Builder.any();
        org.apache.rat.configuration.builders.AllBuilder allBuilder1 = new org.apache.rat.configuration.builders.AllBuilder();
        org.apache.rat.analysis.IHeaderMatcher iHeaderMatcher2 = allBuilder1.build();
        org.apache.rat.configuration.builders.AbstractBuilder abstractBuilder3 = anyBuilder0.add((org.apache.rat.analysis.IHeaderMatcher.Builder) allBuilder1);
        java.lang.String str4 = allBuilder1.toString();
        org.apache.rat.configuration.builders.AnyBuilder anyBuilder5 = org.apache.rat.analysis.IHeaderMatcher.Builder.any();
        java.lang.String str6 = anyBuilder5.toString();
        java.util.List<org.apache.rat.analysis.IHeaderMatcher> iHeaderMatcherList7 = anyBuilder5.getChildren();
        org.apache.rat.analysis.IHeaderMatcher iHeaderMatcher8 = anyBuilder5.build();
        org.apache.rat.configuration.builders.AnyBuilder anyBuilder9 = org.apache.rat.analysis.IHeaderMatcher.Builder.any();
        java.lang.String str10 = anyBuilder9.toString();
        java.util.List<org.apache.rat.analysis.IHeaderMatcher> iHeaderMatcherList11 = anyBuilder9.getChildren();
        org.apache.rat.analysis.IHeaderMatcher iHeaderMatcher12 = anyBuilder9.build();
        org.apache.rat.analysis.IHeaderMatcher iHeaderMatcher13 = anyBuilder9.build();
        java.util.List<org.apache.rat.analysis.IHeaderMatcher> iHeaderMatcherList14 = anyBuilder9.getChildren();
        org.apache.rat.configuration.builders.NotBuilder notBuilder15 = new org.apache.rat.configuration.builders.NotBuilder();
        java.lang.String str16 = notBuilder15.toString();
        org.apache.rat.configuration.builders.MatcherRefBuilder matcherRefBuilder17 = org.apache.rat.analysis.IHeaderMatcher.Builder.matcherRef();
        boolean boolean18 = matcherRefBuilder17.hasId();
        java.util.Map<java.lang.String, org.apache.rat.analysis.IHeaderMatcher> strMap19 = null;
        org.apache.rat.configuration.builders.MatcherRefBuilder matcherRefBuilder20 = matcherRefBuilder17.setMatchers(strMap19);
        org.apache.rat.configuration.builders.AllBuilder allBuilder21 = new org.apache.rat.configuration.builders.AllBuilder();
        org.apache.rat.configuration.builders.CopyrightBuilder copyrightBuilder22 = org.apache.rat.analysis.IHeaderMatcher.Builder.copyright();
        org.apache.rat.configuration.builders.CopyrightBuilder copyrightBuilder24 = copyrightBuilder22.setStart("OASIS");
        java.lang.String str25 = copyrightBuilder22.toString();
        org.apache.rat.configuration.builders.CopyrightBuilder copyrightBuilder27 = copyrightBuilder22.setStart("223f0aba-15d4-49e9-901e-5740c137aebf");
        org.apache.rat.configuration.builders.MatcherRefBuilder matcherRefBuilder28 = org.apache.rat.analysis.IHeaderMatcher.Builder.matcherRef();
        boolean boolean29 = matcherRefBuilder28.hasId();
        org.apache.rat.configuration.builders.CopyrightBuilder copyrightBuilder30 = org.apache.rat.analysis.IHeaderMatcher.Builder.copyright();
        org.apache.rat.configuration.builders.CopyrightBuilder copyrightBuilder32 = copyrightBuilder30.setStart("OASIS");
        java.lang.String str33 = copyrightBuilder30.toString();
        org.apache.rat.configuration.builders.CopyrightBuilder copyrightBuilder35 = copyrightBuilder30.setStart("223f0aba-15d4-49e9-901e-5740c137aebf");
        org.apache.rat.configuration.builders.CopyrightBuilder copyrightBuilder36 = org.apache.rat.analysis.IHeaderMatcher.Builder.copyright();
        org.apache.rat.configuration.builders.CopyrightBuilder copyrightBuilder37 = org.apache.rat.analysis.IHeaderMatcher.Builder.copyright();
        java.lang.String str38 = copyrightBuilder37.toString();
        org.apache.rat.configuration.builders.CopyrightBuilder copyrightBuilder40 = copyrightBuilder37.setEnd(".cvsignore");
        boolean boolean41 = copyrightBuilder37.hasId();
        org.apache.rat.configuration.builders.CopyrightBuilder copyrightBuilder42 = org.apache.rat.analysis.IHeaderMatcher.Builder.copyright();
        java.lang.String str43 = copyrightBuilder42.toString();
        org.apache.rat.configuration.builders.CopyrightBuilder copyrightBuilder45 = copyrightBuilder42.setEnd(".cvsignore");
        boolean boolean46 = copyrightBuilder42.hasId();
        java.lang.String str47 = copyrightBuilder42.toString();
        org.apache.rat.configuration.builders.CopyrightBuilder copyrightBuilder48 = org.apache.rat.analysis.IHeaderMatcher.Builder.copyright();
        org.apache.rat.configuration.builders.CopyrightBuilder copyrightBuilder50 = copyrightBuilder48.setStart("OASIS");
        org.apache.rat.configuration.builders.AnyBuilder anyBuilder51 = org.apache.rat.analysis.IHeaderMatcher.Builder.any();
        org.apache.rat.configuration.builders.MatcherRefBuilder matcherRefBuilder52 = org.apache.rat.analysis.IHeaderMatcher.Builder.matcherRef();
        boolean boolean53 = matcherRefBuilder52.hasId();
        java.util.Map<java.lang.String, org.apache.rat.analysis.IHeaderMatcher> strMap54 = null;
        org.apache.rat.configuration.builders.MatcherRefBuilder matcherRefBuilder55 = matcherRefBuilder52.setMatchers(strMap54);
        org.apache.rat.configuration.builders.CopyrightBuilder copyrightBuilder56 = org.apache.rat.analysis.IHeaderMatcher.Builder.copyright();
        org.apache.rat.configuration.builders.MatcherRefBuilder matcherRefBuilder57 = org.apache.rat.analysis.IHeaderMatcher.Builder.matcherRef();
        boolean boolean58 = matcherRefBuilder57.hasId();
        java.lang.String str59 = matcherRefBuilder57.toString();
        java.util.Map<java.lang.String, org.apache.rat.analysis.IHeaderMatcher> strMap60 = null;
        org.apache.rat.configuration.builders.MatcherRefBuilder matcherRefBuilder61 = matcherRefBuilder57.setMatchers(strMap60);
        org.apache.rat.analysis.IHeaderMatcher.Builder[] builderArray62 = new org.apache.rat.analysis.IHeaderMatcher.Builder[] { matcherRefBuilder17, allBuilder21, copyrightBuilder27, matcherRefBuilder28, copyrightBuilder30, copyrightBuilder36, copyrightBuilder37, copyrightBuilder42, copyrightBuilder48, anyBuilder51, matcherRefBuilder52, copyrightBuilder56, matcherRefBuilder57 };
        java.util.ArrayList<org.apache.rat.analysis.IHeaderMatcher.Builder> builderList63 = new java.util.ArrayList<org.apache.rat.analysis.IHeaderMatcher.Builder>();
        boolean boolean64 = java.util.Collections.addAll((java.util.Collection<org.apache.rat.analysis.IHeaderMatcher.Builder>) builderList63, builderArray62);
        org.apache.rat.configuration.builders.AbstractBuilder abstractBuilder65 = notBuilder15.add((java.util.Collection<org.apache.rat.analysis.IHeaderMatcher.Builder>) builderList63);
        org.apache.rat.configuration.builders.AbstractBuilder abstractBuilder66 = anyBuilder9.add((java.util.Collection<org.apache.rat.analysis.IHeaderMatcher.Builder>) builderList63);
        org.apache.rat.configuration.builders.AbstractBuilder abstractBuilder67 = anyBuilder5.add((java.util.Collection<org.apache.rat.analysis.IHeaderMatcher.Builder>) builderList63);
        org.apache.rat.configuration.builders.AbstractBuilder abstractBuilder68 = allBuilder1.add((java.util.Collection<org.apache.rat.analysis.IHeaderMatcher.Builder>) builderList63);
        java.lang.String str69 = allBuilder1.toString();
        org.junit.Assert.assertNotNull(anyBuilder0);
        org.junit.Assert.assertNotNull(iHeaderMatcher2);
        org.junit.Assert.assertNotNull(abstractBuilder3);
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "AllBuilder:" + "'", str4, "AllBuilder:");
        org.junit.Assert.assertNotNull(anyBuilder5);
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "AnyBuilder:" + "'", str6, "AnyBuilder:");
        org.junit.Assert.assertNotNull(iHeaderMatcherList7);
        org.junit.Assert.assertNotNull(iHeaderMatcher8);
        org.junit.Assert.assertNotNull(anyBuilder9);
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "AnyBuilder:" + "'", str10, "AnyBuilder:");
        org.junit.Assert.assertNotNull(iHeaderMatcherList11);
        org.junit.Assert.assertNotNull(iHeaderMatcher12);
        org.junit.Assert.assertNotNull(iHeaderMatcher13);
        org.junit.Assert.assertNotNull(iHeaderMatcherList14);
        org.junit.Assert.assertEquals("'" + str16 + "' != '" + "NotBuilder: null" + "'", str16, "NotBuilder: null");
        org.junit.Assert.assertNotNull(matcherRefBuilder17);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + false + "'", boolean18 == false);
        org.junit.Assert.assertNotNull(matcherRefBuilder20);
        org.junit.Assert.assertNotNull(copyrightBuilder22);
        org.junit.Assert.assertNotNull(copyrightBuilder24);
        org.junit.Assert.assertEquals("'" + str25 + "' != '" + "Copyright Builder: s:OASIS e:null o:null" + "'", str25, "Copyright Builder: s:OASIS e:null o:null");
        org.junit.Assert.assertNotNull(copyrightBuilder27);
        org.junit.Assert.assertNotNull(matcherRefBuilder28);
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + false + "'", boolean29 == false);
        org.junit.Assert.assertNotNull(copyrightBuilder30);
        org.junit.Assert.assertNotNull(copyrightBuilder32);
        org.junit.Assert.assertEquals("'" + str33 + "' != '" + "Copyright Builder: s:OASIS e:null o:null" + "'", str33, "Copyright Builder: s:OASIS e:null o:null");
        org.junit.Assert.assertNotNull(copyrightBuilder35);
        org.junit.Assert.assertNotNull(copyrightBuilder36);
        org.junit.Assert.assertNotNull(copyrightBuilder37);
        org.junit.Assert.assertEquals("'" + str38 + "' != '" + "Copyright Builder: s:null e:null o:null" + "'", str38, "Copyright Builder: s:null e:null o:null");
        org.junit.Assert.assertNotNull(copyrightBuilder40);
        org.junit.Assert.assertTrue("'" + boolean41 + "' != '" + false + "'", boolean41 == false);
        org.junit.Assert.assertNotNull(copyrightBuilder42);
        org.junit.Assert.assertEquals("'" + str43 + "' != '" + "Copyright Builder: s:null e:null o:null" + "'", str43, "Copyright Builder: s:null e:null o:null");
        org.junit.Assert.assertNotNull(copyrightBuilder45);
        org.junit.Assert.assertTrue("'" + boolean46 + "' != '" + false + "'", boolean46 == false);
        org.junit.Assert.assertEquals("'" + str47 + "' != '" + "Copyright Builder: s:null e:.cvsignore o:null" + "'", str47, "Copyright Builder: s:null e:.cvsignore o:null");
        org.junit.Assert.assertNotNull(copyrightBuilder48);
        org.junit.Assert.assertNotNull(copyrightBuilder50);
        org.junit.Assert.assertNotNull(anyBuilder51);
        org.junit.Assert.assertNotNull(matcherRefBuilder52);
        org.junit.Assert.assertTrue("'" + boolean53 + "' != '" + false + "'", boolean53 == false);
        org.junit.Assert.assertNotNull(matcherRefBuilder55);
        org.junit.Assert.assertNotNull(copyrightBuilder56);
        org.junit.Assert.assertNotNull(matcherRefBuilder57);
        org.junit.Assert.assertTrue("'" + boolean58 + "' != '" + false + "'", boolean58 == false);
        org.junit.Assert.assertEquals("'" + str59 + "' != '" + "MathcerRefBuilder: null" + "'", str59, "MathcerRefBuilder: null");
        org.junit.Assert.assertNotNull(matcherRefBuilder61);
        org.junit.Assert.assertNotNull(builderArray62);
        org.junit.Assert.assertTrue("'" + boolean64 + "' != '" + true + "'", boolean64 == true);
        org.junit.Assert.assertNotNull(abstractBuilder65);
        org.junit.Assert.assertNotNull(abstractBuilder66);
        org.junit.Assert.assertNotNull(abstractBuilder67);
        org.junit.Assert.assertNotNull(abstractBuilder68);
        org.junit.Assert.assertEquals("'" + str69 + "' != '" + "AllBuilder:\nMathcerRefBuilder: null\nAllBuilder:\nCopyright Builder: s:223f0aba-15d4-49e9-901e-5740c137aebf e:null o:null\nMathcerRefBuilder: null\nCopyright Builder: s:223f0aba-15d4-49e9-901e-5740c137aebf e:null o:null\nCopyright Builder: s:null e:null o:null\nCopyright Builder: s:null e:.cvsignore o:null\nCopyright Builder: s:null e:.cvsignore o:null\nCopyright Builder: s:OASIS e:null o:null\nAnyBuilder:\nMathcerRefBuilder: null\nCopyright Builder: s:null e:null o:null\nMathcerRefBuilder: null" + "'", str69, "AllBuilder:\nMathcerRefBuilder: null\nAllBuilder:\nCopyright Builder: s:223f0aba-15d4-49e9-901e-5740c137aebf e:null o:null\nMathcerRefBuilder: null\nCopyright Builder: s:223f0aba-15d4-49e9-901e-5740c137aebf e:null o:null\nCopyright Builder: s:null e:null o:null\nCopyright Builder: s:null e:.cvsignore o:null\nCopyright Builder: s:null e:.cvsignore o:null\nCopyright Builder: s:OASIS e:null o:null\nAnyBuilder:\nMathcerRefBuilder: null\nCopyright Builder: s:null e:null o:null\nMathcerRefBuilder: null");
    }

    @Test
    public void test12638() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest25.test12638");
        java.io.File file0 = null;
        org.apache.rat.utils.Log log1 = null;
        org.apache.rat.ReportConfiguration reportConfiguration2 = new org.apache.rat.ReportConfiguration(log1);
        org.apache.rat.report.claim.ClaimStatistic claimStatistic3 = org.apache.rat.Reporter.report(reportConfiguration2);
        org.apache.rat.utils.Log log4 = null;
        org.apache.rat.ReportConfiguration reportConfiguration5 = new org.apache.rat.ReportConfiguration(log4);
        org.apache.rat.report.claim.ClaimStatistic claimStatistic6 = org.apache.rat.Reporter.report(reportConfiguration5);
        org.apache.rat.utils.ReportingSet.Options options7 = org.apache.rat.utils.ReportingSet.Options.OVERWRITE;
        reportConfiguration5.licenseDuplicateOption(options7);
        reportConfiguration2.familyDuplicateOption(options7);
        org.apache.commons.io.function.IOSupplier<java.io.PrintWriter> printWriterIOSupplier10 = reportConfiguration2.getWriter();
        boolean boolean11 = reportConfiguration2.isAddingLicensesForced();
        java.io.FilenameFilter filenameFilter12 = reportConfiguration2.getInputFileFilter();
        java.io.FilenameFilter filenameFilter13 = reportConfiguration2.getInputFileFilter();
        boolean boolean14 = reportConfiguration2.isStyleReport();
        org.apache.commons.io.function.IOSupplier<java.io.OutputStream> outputStreamIOSupplier15 = reportConfiguration2.getOutput();
        org.apache.commons.io.filefilter.IOFileFilter iOFileFilter16 = reportConfiguration2.getDirectoryFilter();
        org.apache.commons.io.filefilter.IOFileFilter iOFileFilter17 = reportConfiguration2.getDirectoryFilter();
        org.apache.rat.utils.Log log18 = null;
        org.apache.rat.ReportConfiguration reportConfiguration19 = new org.apache.rat.ReportConfiguration(log18);
        org.apache.commons.io.function.IOSupplier<java.io.OutputStream> outputStreamIOSupplier20 = reportConfiguration19.getOutput();
        reportConfiguration19.setCopyrightMessage("MANIFEST.MF");
        org.apache.rat.utils.Log log23 = reportConfiguration19.getLog();
        org.apache.commons.io.function.IOSupplier<java.io.InputStream> inputStreamIOSupplier24 = org.apache.rat.Defaults.getPlainStyleSheet();
        reportConfiguration19.setStyleSheet(inputStreamIOSupplier24);
        java.lang.String str26 = reportConfiguration19.getCopyrightMessage();
        org.apache.commons.io.filefilter.IOFileFilter iOFileFilter27 = reportConfiguration19.getDirectoryFilter();
        org.apache.rat.utils.Log log28 = null;
        org.apache.rat.ReportConfiguration reportConfiguration29 = new org.apache.rat.ReportConfiguration(log28);
        java.io.FilenameFilter filenameFilter30 = reportConfiguration29.getInputFileFilter();
        org.apache.rat.license.LicenseSetFactory.LicenseFilter licenseFilter31 = org.apache.rat.license.LicenseSetFactory.LicenseFilter.all;
        java.util.SortedSet<org.apache.rat.license.ILicense> iLicenseSet32 = reportConfiguration29.getLicenses(licenseFilter31);
        org.apache.rat.license.ILicenseFamily iLicenseFamily33 = null;
        reportConfiguration29.addFamily(iLicenseFamily33);
        org.apache.commons.io.filefilter.IOFileFilter iOFileFilter35 = reportConfiguration29.getDirectoryFilter();
        org.apache.rat.utils.Log log36 = null;
        org.apache.rat.ReportConfiguration reportConfiguration37 = new org.apache.rat.ReportConfiguration(log36);
        java.io.FilenameFilter filenameFilter38 = reportConfiguration37.getInputFileFilter();
        org.apache.rat.license.LicenseSetFactory.LicenseFilter licenseFilter39 = org.apache.rat.license.LicenseSetFactory.LicenseFilter.all;
        java.util.SortedSet<org.apache.rat.license.ILicense> iLicenseSet40 = reportConfiguration37.getLicenses(licenseFilter39);
        org.apache.rat.config.AddLicenseHeaders addLicenseHeaders41 = org.apache.rat.config.AddLicenseHeaders.FALSE;
        reportConfiguration37.setAddLicenseHeaders(addLicenseHeaders41);
        org.apache.rat.utils.Log log43 = null;
        org.apache.rat.ReportConfiguration reportConfiguration44 = new org.apache.rat.ReportConfiguration(log43);
        org.apache.rat.report.claim.ClaimStatistic claimStatistic45 = org.apache.rat.Reporter.report(reportConfiguration44);
        org.apache.rat.license.LicenseSetFactory.LicenseFilter licenseFilter46 = org.apache.rat.license.LicenseSetFactory.LicenseFilter.all;
        org.apache.rat.Reporter.listLicenses(reportConfiguration44, licenseFilter46);
        org.apache.rat.Reporter.listLicenses(reportConfiguration37, licenseFilter46);
        org.apache.rat.utils.Log log49 = null;
        org.apache.rat.ReportConfiguration reportConfiguration50 = new org.apache.rat.ReportConfiguration(log49);
        java.io.FilenameFilter filenameFilter51 = reportConfiguration50.getInputFileFilter();
        org.apache.rat.license.LicenseSetFactory.LicenseFilter licenseFilter52 = org.apache.rat.license.LicenseSetFactory.LicenseFilter.all;
        java.util.SortedSet<org.apache.rat.license.ILicense> iLicenseSet53 = reportConfiguration50.getLicenses(licenseFilter52);
        org.apache.rat.config.AddLicenseHeaders addLicenseHeaders54 = org.apache.rat.config.AddLicenseHeaders.FALSE;
        reportConfiguration50.setAddLicenseHeaders(addLicenseHeaders54);
        org.apache.rat.utils.Log log56 = null;
        org.apache.rat.ReportConfiguration reportConfiguration57 = new org.apache.rat.ReportConfiguration(log56);
        org.apache.rat.report.claim.ClaimStatistic claimStatistic58 = org.apache.rat.Reporter.report(reportConfiguration57);
        org.apache.rat.license.LicenseSetFactory.LicenseFilter licenseFilter59 = org.apache.rat.license.LicenseSetFactory.LicenseFilter.all;
        org.apache.rat.Reporter.listLicenses(reportConfiguration57, licenseFilter59);
        org.apache.rat.Reporter.listLicenses(reportConfiguration50, licenseFilter59);
        org.apache.rat.Reporter.listLicenses(reportConfiguration37, licenseFilter59);
        org.apache.rat.utils.Log log63 = null;
        org.apache.rat.ReportConfiguration reportConfiguration64 = new org.apache.rat.ReportConfiguration(log63);
        org.apache.commons.io.function.IOSupplier<java.io.OutputStream> outputStreamIOSupplier65 = reportConfiguration64.getOutput();
        reportConfiguration37.setOut(outputStreamIOSupplier65);
        org.apache.rat.utils.Log.Level level67 = org.apache.rat.utils.Log.Level.WARN;
        reportConfiguration37.logLicenseCollisions(level67);
        org.apache.commons.io.filefilter.IOFileFilter iOFileFilter69 = reportConfiguration37.getDirectoryFilter();
        java.nio.file.Path path70 = null;
        boolean boolean71 = iOFileFilter69.matches(path70);
        java.nio.file.Path path72 = null;
        java.nio.file.attribute.BasicFileAttributes basicFileAttributes73 = null;
        java.nio.file.FileVisitResult fileVisitResult74 = iOFileFilter69.accept(path72, basicFileAttributes73);
        org.apache.commons.io.filefilter.IOFileFilter iOFileFilter75 = iOFileFilter35.or(iOFileFilter69);
        java.nio.file.Path path76 = null;
        java.nio.file.attribute.BasicFileAttributes basicFileAttributes77 = null;
        java.nio.file.FileVisitResult fileVisitResult78 = iOFileFilter75.accept(path76, basicFileAttributes77);
        org.apache.commons.io.filefilter.IOFileFilter iOFileFilter79 = iOFileFilter75.negate();
        org.apache.commons.io.filefilter.IOFileFilter iOFileFilter80 = iOFileFilter27.or(iOFileFilter79);
        org.apache.commons.io.filefilter.IOFileFilter iOFileFilter81 = iOFileFilter17.and(iOFileFilter80);
        // The following exception was thrown during execution in test generation
        try {
            org.apache.rat.walker.ArchiveWalker archiveWalker82 = new org.apache.rat.walker.ArchiveWalker(file0, (java.io.FilenameFilter) iOFileFilter80);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNull(claimStatistic3);
        org.junit.Assert.assertNull(claimStatistic6);
        org.junit.Assert.assertTrue("'" + options7 + "' != '" + org.apache.rat.utils.ReportingSet.Options.OVERWRITE + "'", options7.equals(org.apache.rat.utils.ReportingSet.Options.OVERWRITE));
        org.junit.Assert.assertNotNull(printWriterIOSupplier10);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
        org.junit.Assert.assertNull(filenameFilter12);
        org.junit.Assert.assertNull(filenameFilter13);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + true + "'", boolean14 == true);
        org.junit.Assert.assertNotNull(outputStreamIOSupplier15);
        org.junit.Assert.assertNotNull(iOFileFilter16);
        org.junit.Assert.assertNotNull(iOFileFilter17);
        org.junit.Assert.assertNotNull(outputStreamIOSupplier20);
        org.junit.Assert.assertNull(log23);
        org.junit.Assert.assertNotNull(inputStreamIOSupplier24);
        org.junit.Assert.assertEquals("'" + str26 + "' != '" + "MANIFEST.MF" + "'", str26, "MANIFEST.MF");
        org.junit.Assert.assertNotNull(iOFileFilter27);
        org.junit.Assert.assertNull(filenameFilter30);
        org.junit.Assert.assertTrue("'" + licenseFilter31 + "' != '" + org.apache.rat.license.LicenseSetFactory.LicenseFilter.all + "'", licenseFilter31.equals(org.apache.rat.license.LicenseSetFactory.LicenseFilter.all));
        org.junit.Assert.assertNotNull(iLicenseSet32);
        org.junit.Assert.assertNotNull(iOFileFilter35);
        org.junit.Assert.assertNull(filenameFilter38);
        org.junit.Assert.assertTrue("'" + licenseFilter39 + "' != '" + org.apache.rat.license.LicenseSetFactory.LicenseFilter.all + "'", licenseFilter39.equals(org.apache.rat.license.LicenseSetFactory.LicenseFilter.all));
        org.junit.Assert.assertNotNull(iLicenseSet40);
        org.junit.Assert.assertTrue("'" + addLicenseHeaders41 + "' != '" + org.apache.rat.config.AddLicenseHeaders.FALSE + "'", addLicenseHeaders41.equals(org.apache.rat.config.AddLicenseHeaders.FALSE));
        org.junit.Assert.assertNull(claimStatistic45);
        org.junit.Assert.assertTrue("'" + licenseFilter46 + "' != '" + org.apache.rat.license.LicenseSetFactory.LicenseFilter.all + "'", licenseFilter46.equals(org.apache.rat.license.LicenseSetFactory.LicenseFilter.all));
        org.junit.Assert.assertNull(filenameFilter51);
        org.junit.Assert.assertTrue("'" + licenseFilter52 + "' != '" + org.apache.rat.license.LicenseSetFactory.LicenseFilter.all + "'", licenseFilter52.equals(org.apache.rat.license.LicenseSetFactory.LicenseFilter.all));
        org.junit.Assert.assertNotNull(iLicenseSet53);
        org.junit.Assert.assertTrue("'" + addLicenseHeaders54 + "' != '" + org.apache.rat.config.AddLicenseHeaders.FALSE + "'", addLicenseHeaders54.equals(org.apache.rat.config.AddLicenseHeaders.FALSE));
        org.junit.Assert.assertNull(claimStatistic58);
        org.junit.Assert.assertTrue("'" + licenseFilter59 + "' != '" + org.apache.rat.license.LicenseSetFactory.LicenseFilter.all + "'", licenseFilter59.equals(org.apache.rat.license.LicenseSetFactory.LicenseFilter.all));
        org.junit.Assert.assertNotNull(outputStreamIOSupplier65);
        org.junit.Assert.assertTrue("'" + level67 + "' != '" + org.apache.rat.utils.Log.Level.WARN + "'", level67.equals(org.apache.rat.utils.Log.Level.WARN));
        org.junit.Assert.assertNotNull(iOFileFilter69);
        org.junit.Assert.assertTrue("'" + boolean71 + "' != '" + false + "'", boolean71 == false);
        org.junit.Assert.assertTrue("'" + fileVisitResult74 + "' != '" + java.nio.file.FileVisitResult.TERMINATE + "'", fileVisitResult74.equals(java.nio.file.FileVisitResult.TERMINATE));
        org.junit.Assert.assertNotNull(iOFileFilter75);
        org.junit.Assert.assertTrue("'" + fileVisitResult78 + "' != '" + java.nio.file.FileVisitResult.TERMINATE + "'", fileVisitResult78.equals(java.nio.file.FileVisitResult.TERMINATE));
        org.junit.Assert.assertNotNull(iOFileFilter79);
        org.junit.Assert.assertNotNull(iOFileFilter80);
        org.junit.Assert.assertNotNull(iOFileFilter81);
    }

    @Test
    public void test12639() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest25.test12639");
        java.lang.String str1 = org.apache.rat.license.ILicenseFamily.makeCategory("8ecb8cce06e4400f84d9ad1cf6289fda");
        org.junit.Assert.assertEquals("'" + str1 + "' != '" + "8ecb8" + "'", str1, "8ecb8");
    }

    @Test
    public void test12640() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest25.test12640");
        org.apache.rat.analysis.license.FullTextMatchingLicense fullTextMatchingLicense0 = new org.apache.rat.analysis.license.FullTextMatchingLicense();
        fullTextMatchingLicense0.setLicenseFamilyName("hi!");
        java.lang.String str3 = fullTextMatchingLicense0.getLicenseFamilyCategory();
        java.lang.String str4 = fullTextMatchingLicense0.getLicenseFamilyCategory();
        java.lang.String str5 = fullTextMatchingLicense0.getLicenseFamilyName();
        fullTextMatchingLicense0.setLicenseFamilyName("TextBuilder: stand");
        fullTextMatchingLicense0.setLicenseFamilyName("META-DATA#LICENSEFAMILYNAME");
        java.lang.String str10 = fullTextMatchingLicense0.getLicenseFamilyName();
        org.junit.Assert.assertNull(str3);
        org.junit.Assert.assertNull(str4);
        org.junit.Assert.assertEquals("'" + str5 + "' != '" + "hi!" + "'", str5, "hi!");
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "META-DATA#LICENSEFAMILYNAME" + "'", str10, "META-DATA#LICENSEFAMILYNAME");
    }

    @Test
    public void test12641() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest25.test12641");
        org.apache.rat.configuration.builders.SpdxBuilder spdxBuilder0 = org.apache.rat.analysis.IHeaderMatcher.Builder.spdx();
        java.lang.String str1 = spdxBuilder0.toString();
        org.apache.rat.configuration.builders.SpdxBuilder spdxBuilder3 = spdxBuilder0.setName("ef7a8b13-64c3-4510-bb0c-dbf208e1e73f");
        org.apache.rat.analysis.IHeaderMatcher iHeaderMatcher4 = spdxBuilder0.build();
        org.apache.rat.configuration.builders.SpdxBuilder spdxBuilder6 = spdxBuilder0.setName("641dafc1-13c3-45d4-8272-f36f10392c53");
        org.apache.rat.analysis.IHeaderMatcher iHeaderMatcher7 = spdxBuilder6.build();
        java.lang.String str8 = spdxBuilder6.toString();
        org.apache.rat.analysis.IHeaderMatcher iHeaderMatcher9 = spdxBuilder6.build();
        org.junit.Assert.assertNotNull(spdxBuilder0);
        org.junit.Assert.assertEquals("'" + str1 + "' != '" + "SpdxBuilder: null" + "'", str1, "SpdxBuilder: null");
        org.junit.Assert.assertNotNull(spdxBuilder3);
        org.junit.Assert.assertNotNull(iHeaderMatcher4);
        org.junit.Assert.assertNotNull(spdxBuilder6);
        org.junit.Assert.assertNotNull(iHeaderMatcher7);
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "SpdxBuilder: 641dafc1-13c3-45d4-8272-f36f10392c53" + "'", str8, "SpdxBuilder: 641dafc1-13c3-45d4-8272-f36f10392c53");
        org.junit.Assert.assertNotNull(iHeaderMatcher9);
    }

    @Test
    public void test12642() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest25.test12642");
        org.apache.rat.report.claim.ClaimStatistic claimStatistic0 = new org.apache.rat.report.claim.ClaimStatistic();
        claimStatistic0.setNumApproved((int) (short) 10);
        java.util.Map<java.lang.String, java.lang.Integer> strMap3 = null;
        claimStatistic0.setDocumentCategoryMap(strMap3);
        claimStatistic0.setNumUnknown((int) '4');
        claimStatistic0.setNumUnknown((int) (byte) 0);
        claimStatistic0.setNumUnknown((int) (byte) 10);
        java.util.Map<java.lang.String, java.lang.Integer> strMap11 = claimStatistic0.getDocumentCategoryMap();
        java.util.Map<java.lang.String, java.lang.Integer> strMap12 = claimStatistic0.getLicenseFileCodeMap();
        int int13 = claimStatistic0.getNumUnknown();
        int int14 = claimStatistic0.getNumUnknown();
        claimStatistic0.setNumApproved((int) (short) -1);
        java.util.Map<java.lang.String, java.lang.Integer> strMap17 = null;
        claimStatistic0.setDocumentCategoryMap(strMap17);
        org.junit.Assert.assertNull(strMap11);
        org.junit.Assert.assertNull(strMap12);
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + 10 + "'", int13 == 10);
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + 10 + "'", int14 == 10);
    }

    @Test
    public void test12643() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest25.test12643");
        org.apache.rat.license.ILicense.Builder builder0 = org.apache.rat.license.ILicense.builder();
        org.apache.rat.license.ILicense.Builder builder2 = builder0.setLicenseFamilyCategory("");
        org.apache.rat.license.ILicense.Builder builder4 = builder2.setDerivedFrom("GEN  ");
        org.apache.rat.license.ILicense.Builder builder6 = builder4.setId("DOJO ");
        org.apache.rat.configuration.builders.CopyrightBuilder copyrightBuilder7 = org.apache.rat.analysis.IHeaderMatcher.Builder.copyright();
        java.lang.String str8 = copyrightBuilder7.toString();
        org.apache.rat.license.ILicense.Builder builder9 = builder4.setMatcher((org.apache.rat.analysis.IHeaderMatcher.Builder) copyrightBuilder7);
        org.apache.rat.analysis.IHeaderMatcher iHeaderMatcher10 = copyrightBuilder7.build();
        org.apache.rat.analysis.IHeaderMatcher iHeaderMatcher11 = copyrightBuilder7.build();
        org.apache.rat.configuration.builders.CopyrightBuilder copyrightBuilder13 = copyrightBuilder7.setStart("RegexBuilder: 89662180-a89f-497b-9301-227d494d2bae");
        org.apache.rat.configuration.builders.CopyrightBuilder copyrightBuilder15 = copyrightBuilder7.setOwner("bd015714-405b-4304-9faa-36efad80e6e6 GEN  ");
        org.apache.rat.analysis.IHeaderMatcher iHeaderMatcher16 = copyrightBuilder7.build();
        org.junit.Assert.assertNotNull(builder0);
        org.junit.Assert.assertNotNull(builder2);
        org.junit.Assert.assertNotNull(builder4);
        org.junit.Assert.assertNotNull(builder6);
        org.junit.Assert.assertNotNull(copyrightBuilder7);
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "Copyright Builder: s:null e:null o:null" + "'", str8, "Copyright Builder: s:null e:null o:null");
        org.junit.Assert.assertNotNull(builder9);
        org.junit.Assert.assertNotNull(iHeaderMatcher10);
        org.junit.Assert.assertNotNull(iHeaderMatcher11);
        org.junit.Assert.assertNotNull(copyrightBuilder13);
        org.junit.Assert.assertNotNull(copyrightBuilder15);
        org.junit.Assert.assertNotNull(iHeaderMatcher16);
    }

    @Test
    public void test12644() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest25.test12644");
        org.apache.rat.utils.Log log0 = null;
        org.apache.rat.ReportConfiguration reportConfiguration1 = new org.apache.rat.ReportConfiguration(log0);
        org.apache.rat.report.claim.ClaimStatistic claimStatistic2 = org.apache.rat.Reporter.report(reportConfiguration1);
        org.apache.rat.utils.Log log3 = null;
        org.apache.rat.ReportConfiguration reportConfiguration4 = new org.apache.rat.ReportConfiguration(log3);
        org.apache.rat.report.claim.ClaimStatistic claimStatistic5 = org.apache.rat.Reporter.report(reportConfiguration4);
        org.apache.rat.utils.ReportingSet.Options options6 = org.apache.rat.utils.ReportingSet.Options.OVERWRITE;
        reportConfiguration4.licenseDuplicateOption(options6);
        reportConfiguration1.familyDuplicateOption(options6);
        org.apache.commons.io.function.IOSupplier<java.io.PrintWriter> printWriterIOSupplier9 = reportConfiguration1.getWriter();
        boolean boolean10 = reportConfiguration1.isAddingLicensesForced();
        org.apache.rat.utils.Log log11 = null;
        org.apache.rat.ReportConfiguration reportConfiguration12 = new org.apache.rat.ReportConfiguration(log11);
        reportConfiguration12.addApprovedLicenseCategory(".cvsignore");
        org.apache.rat.utils.Log.Level level15 = org.apache.rat.utils.Log.Level.ERROR;
        reportConfiguration12.logFamilyCollisions(level15);
        reportConfiguration1.logLicenseCollisions(level15);
        org.apache.rat.license.ILicenseFamilyBuilder iLicenseFamilyBuilder18 = new org.apache.rat.license.ILicenseFamilyBuilder();
        java.lang.String str19 = iLicenseFamilyBuilder18.getCategory();
        org.apache.rat.license.ILicenseFamily.Builder builder21 = iLicenseFamilyBuilder18.setLicenseFamilyCategory("AL   ");
        org.apache.rat.license.ILicenseFamily.Builder builder23 = iLicenseFamilyBuilder18.setLicenseFamilyCategory("MIT  ");
        org.apache.rat.license.ILicenseFamily.Builder builder25 = iLicenseFamilyBuilder18.setLicenseFamilyName("4a00cf7d-fe76-423e-917e-b03bbae6b8a5");
        java.lang.String str26 = iLicenseFamilyBuilder18.getCategory();
        org.apache.rat.license.ILicenseFamily.Builder builder28 = iLicenseFamilyBuilder18.setLicenseFamilyName("8ecb8cce-06e4-400f-84d9-ad1cf6289fda");
        org.apache.rat.license.ILicenseFamily iLicenseFamily29 = iLicenseFamilyBuilder18.build();
        java.lang.String str30 = iLicenseFamilyBuilder18.getCategory();
        org.apache.rat.license.ILicenseFamily.Builder builder32 = iLicenseFamilyBuilder18.setLicenseFamilyName("?????");
        reportConfiguration1.addFamily(builder32);
        org.apache.rat.report.IReportable iReportable34 = reportConfiguration1.getReportable();
        org.apache.rat.Defaults.Builder builder35 = org.apache.rat.Defaults.builder();
        org.apache.rat.Defaults.Builder builder36 = builder35.noDefault();
        org.apache.rat.Defaults defaults37 = builder36.build();
        org.apache.rat.Defaults.Builder builder38 = org.apache.rat.Defaults.builder();
        org.apache.rat.Defaults defaults39 = builder38.build();
        org.apache.rat.utils.Log log40 = null;
        org.apache.rat.ReportConfiguration reportConfiguration41 = new org.apache.rat.ReportConfiguration(log40);
        java.io.FilenameFilter filenameFilter42 = reportConfiguration41.getInputFileFilter();
        org.apache.rat.license.LicenseSetFactory.LicenseFilter licenseFilter43 = org.apache.rat.license.LicenseSetFactory.LicenseFilter.all;
        java.util.SortedSet<org.apache.rat.license.ILicense> iLicenseSet44 = reportConfiguration41.getLicenses(licenseFilter43);
        org.apache.rat.config.AddLicenseHeaders addLicenseHeaders45 = org.apache.rat.config.AddLicenseHeaders.FALSE;
        reportConfiguration41.setAddLicenseHeaders(addLicenseHeaders45);
        org.apache.rat.utils.Log log47 = null;
        org.apache.rat.ReportConfiguration reportConfiguration48 = new org.apache.rat.ReportConfiguration(log47);
        org.apache.rat.report.claim.ClaimStatistic claimStatistic49 = org.apache.rat.Reporter.report(reportConfiguration48);
        org.apache.rat.license.LicenseSetFactory.LicenseFilter licenseFilter50 = org.apache.rat.license.LicenseSetFactory.LicenseFilter.all;
        org.apache.rat.Reporter.listLicenses(reportConfiguration48, licenseFilter50);
        org.apache.rat.Reporter.listLicenses(reportConfiguration41, licenseFilter50);
        org.apache.rat.utils.Log log53 = null;
        org.apache.rat.ReportConfiguration reportConfiguration54 = new org.apache.rat.ReportConfiguration(log53);
        java.io.FilenameFilter filenameFilter55 = reportConfiguration54.getInputFileFilter();
        org.apache.rat.license.LicenseSetFactory.LicenseFilter licenseFilter56 = org.apache.rat.license.LicenseSetFactory.LicenseFilter.all;
        java.util.SortedSet<org.apache.rat.license.ILicense> iLicenseSet57 = reportConfiguration54.getLicenses(licenseFilter56);
        org.apache.rat.config.AddLicenseHeaders addLicenseHeaders58 = org.apache.rat.config.AddLicenseHeaders.FALSE;
        reportConfiguration54.setAddLicenseHeaders(addLicenseHeaders58);
        org.apache.rat.utils.Log log60 = null;
        org.apache.rat.ReportConfiguration reportConfiguration61 = new org.apache.rat.ReportConfiguration(log60);
        org.apache.rat.report.claim.ClaimStatistic claimStatistic62 = org.apache.rat.Reporter.report(reportConfiguration61);
        org.apache.rat.license.LicenseSetFactory.LicenseFilter licenseFilter63 = org.apache.rat.license.LicenseSetFactory.LicenseFilter.all;
        org.apache.rat.Reporter.listLicenses(reportConfiguration61, licenseFilter63);
        org.apache.rat.Reporter.listLicenses(reportConfiguration54, licenseFilter63);
        java.util.SortedSet<org.apache.rat.license.ILicenseFamily> iLicenseFamilySet66 = reportConfiguration41.getLicenseFamilies(licenseFilter63);
        java.util.SortedSet<org.apache.rat.license.ILicense> iLicenseSet67 = defaults39.getLicenses(licenseFilter63);
        java.util.SortedSet<org.apache.rat.license.ILicenseFamily> iLicenseFamilySet68 = defaults37.getLicenseFamilies(licenseFilter63);
        java.util.SortedSet<org.apache.rat.license.ILicense> iLicenseSet69 = reportConfiguration1.getLicenses(licenseFilter63);
        org.junit.Assert.assertNull(claimStatistic2);
        org.junit.Assert.assertNull(claimStatistic5);
        org.junit.Assert.assertTrue("'" + options6 + "' != '" + org.apache.rat.utils.ReportingSet.Options.OVERWRITE + "'", options6.equals(org.apache.rat.utils.ReportingSet.Options.OVERWRITE));
        org.junit.Assert.assertNotNull(printWriterIOSupplier9);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertTrue("'" + level15 + "' != '" + org.apache.rat.utils.Log.Level.ERROR + "'", level15.equals(org.apache.rat.utils.Log.Level.ERROR));
        org.junit.Assert.assertNull(str19);
        org.junit.Assert.assertNotNull(builder21);
        org.junit.Assert.assertNotNull(builder23);
        org.junit.Assert.assertNotNull(builder25);
        org.junit.Assert.assertEquals("'" + str26 + "' != '" + "MIT  " + "'", str26, "MIT  ");
        org.junit.Assert.assertNotNull(builder28);
        org.junit.Assert.assertNotNull(iLicenseFamily29);
        org.junit.Assert.assertEquals("'" + str30 + "' != '" + "MIT  " + "'", str30, "MIT  ");
        org.junit.Assert.assertNotNull(builder32);
        org.junit.Assert.assertNull(iReportable34);
        org.junit.Assert.assertNotNull(builder35);
        org.junit.Assert.assertNotNull(builder36);
        org.junit.Assert.assertNotNull(defaults37);
        org.junit.Assert.assertNotNull(builder38);
        org.junit.Assert.assertNotNull(defaults39);
        org.junit.Assert.assertNull(filenameFilter42);
        org.junit.Assert.assertTrue("'" + licenseFilter43 + "' != '" + org.apache.rat.license.LicenseSetFactory.LicenseFilter.all + "'", licenseFilter43.equals(org.apache.rat.license.LicenseSetFactory.LicenseFilter.all));
        org.junit.Assert.assertNotNull(iLicenseSet44);
        org.junit.Assert.assertTrue("'" + addLicenseHeaders45 + "' != '" + org.apache.rat.config.AddLicenseHeaders.FALSE + "'", addLicenseHeaders45.equals(org.apache.rat.config.AddLicenseHeaders.FALSE));
        org.junit.Assert.assertNull(claimStatistic49);
        org.junit.Assert.assertTrue("'" + licenseFilter50 + "' != '" + org.apache.rat.license.LicenseSetFactory.LicenseFilter.all + "'", licenseFilter50.equals(org.apache.rat.license.LicenseSetFactory.LicenseFilter.all));
        org.junit.Assert.assertNull(filenameFilter55);
        org.junit.Assert.assertTrue("'" + licenseFilter56 + "' != '" + org.apache.rat.license.LicenseSetFactory.LicenseFilter.all + "'", licenseFilter56.equals(org.apache.rat.license.LicenseSetFactory.LicenseFilter.all));
        org.junit.Assert.assertNotNull(iLicenseSet57);
        org.junit.Assert.assertTrue("'" + addLicenseHeaders58 + "' != '" + org.apache.rat.config.AddLicenseHeaders.FALSE + "'", addLicenseHeaders58.equals(org.apache.rat.config.AddLicenseHeaders.FALSE));
        org.junit.Assert.assertNull(claimStatistic62);
        org.junit.Assert.assertTrue("'" + licenseFilter63 + "' != '" + org.apache.rat.license.LicenseSetFactory.LicenseFilter.all + "'", licenseFilter63.equals(org.apache.rat.license.LicenseSetFactory.LicenseFilter.all));
        org.junit.Assert.assertNotNull(iLicenseFamilySet66);
        org.junit.Assert.assertNotNull(iLicenseSet67);
        org.junit.Assert.assertNotNull(iLicenseFamilySet68);
        org.junit.Assert.assertNotNull(iLicenseSet69);
    }

    @Test
    public void test12645() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest25.test12645");
        org.apache.rat.utils.Log log0 = null;
        org.apache.rat.ReportConfiguration reportConfiguration1 = new org.apache.rat.ReportConfiguration(log0);
        java.io.FilenameFilter filenameFilter2 = reportConfiguration1.getInputFileFilter();
        org.apache.rat.license.LicenseSetFactory.LicenseFilter licenseFilter3 = org.apache.rat.license.LicenseSetFactory.LicenseFilter.all;
        java.util.SortedSet<org.apache.rat.license.ILicense> iLicenseSet4 = reportConfiguration1.getLicenses(licenseFilter3);
        org.apache.rat.config.AddLicenseHeaders addLicenseHeaders5 = org.apache.rat.config.AddLicenseHeaders.FALSE;
        reportConfiguration1.setAddLicenseHeaders(addLicenseHeaders5);
        org.apache.rat.utils.Log log7 = null;
        org.apache.rat.ReportConfiguration reportConfiguration8 = new org.apache.rat.ReportConfiguration(log7);
        org.apache.rat.report.claim.ClaimStatistic claimStatistic9 = org.apache.rat.Reporter.report(reportConfiguration8);
        org.apache.rat.license.LicenseSetFactory.LicenseFilter licenseFilter10 = org.apache.rat.license.LicenseSetFactory.LicenseFilter.all;
        org.apache.rat.Reporter.listLicenses(reportConfiguration8, licenseFilter10);
        org.apache.rat.Reporter.listLicenses(reportConfiguration1, licenseFilter10);
        org.apache.rat.config.AddLicenseHeaders addLicenseHeaders13 = org.apache.rat.config.AddLicenseHeaders.FORCED;
        reportConfiguration1.setAddLicenseHeaders(addLicenseHeaders13);
        org.apache.commons.io.function.IOSupplier<java.io.PrintWriter> printWriterIOSupplier15 = reportConfiguration1.getWriter();
        org.apache.rat.utils.Log log16 = null;
        org.apache.rat.ReportConfiguration reportConfiguration17 = new org.apache.rat.ReportConfiguration(log16);
        reportConfiguration17.addApprovedLicenseCategory(".cvsignore");
        org.apache.rat.utils.Log.Level level20 = org.apache.rat.utils.Log.Level.ERROR;
        reportConfiguration17.logFamilyCollisions(level20);
        org.apache.commons.io.filefilter.IOFileFilter iOFileFilter22 = reportConfiguration17.getDirectoryFilter();
        java.lang.String[] strArray28 = new java.lang.String[] { "http://org/apache/rat/meta-data#LicenseFamilyCategory", "Datum [ name ='http://org/apache/rat/meta-data#LicenseFamilyCategory',value ='GPL1  ']", "MANIFEST.MF", "AllBuilder:", "The MIT License" };
        org.apache.rat.utils.ReportingSet<java.lang.String> strSet29 = new org.apache.rat.utils.ReportingSet<java.lang.String>();
        boolean boolean30 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strSet29, strArray28);
        boolean boolean32 = strSet29.addIfNotPresent("http://org/apache/rat/meta-data#LicenseFamilyName");
        boolean boolean34 = strSet29.addIfNotPresent("ef7a8b13-64c3-4510-bb0c-dbf208e1e73f");
        java.util.function.Function<java.lang.String, java.lang.String> strFunction35 = null;
        org.apache.rat.utils.ReportingSet<java.lang.String> strSet36 = strSet29.setMsgFormat(strFunction35);
        java.util.SortedSet<org.apache.rat.license.ILicenseFamily> iLicenseFamilySet38 = org.apache.rat.license.LicenseFamilySetFactory.emptyLicenseFamilySet();
        org.apache.rat.license.ILicenseFamily iLicenseFamily39 = org.apache.rat.license.LicenseFamilySetFactory.search("http://org/apache/rat/meta-data", iLicenseFamilySet38);
        boolean boolean40 = strSet29.containsAll((java.util.Collection<org.apache.rat.license.ILicenseFamily>) iLicenseFamilySet38);
        reportConfiguration17.removeApprovedLicenseCategories((java.util.Collection<java.lang.String>) strSet29);
        org.apache.rat.report.IReportable iReportable42 = null;
        reportConfiguration17.setReportable(iReportable42);
        org.apache.rat.utils.Log log44 = null;
        org.apache.rat.ReportConfiguration reportConfiguration45 = new org.apache.rat.ReportConfiguration(log44);
        org.apache.rat.license.ILicenseFamily[] iLicenseFamilyArray46 = new org.apache.rat.license.ILicenseFamily[] {};
        java.util.ArrayList<org.apache.rat.license.ILicenseFamily> iLicenseFamilyList47 = new java.util.ArrayList<org.apache.rat.license.ILicenseFamily>();
        boolean boolean48 = java.util.Collections.addAll((java.util.Collection<org.apache.rat.license.ILicenseFamily>) iLicenseFamilyList47, iLicenseFamilyArray46);
        reportConfiguration45.addFamilies((java.util.Collection<org.apache.rat.license.ILicenseFamily>) iLicenseFamilyList47);
        reportConfiguration45.addApprovedLicenseCategory("http://org/apache/rat/meta-data");
        org.apache.rat.report.IReportable iReportable52 = reportConfiguration45.getReportable();
        org.apache.commons.io.filefilter.IOFileFilter iOFileFilter53 = reportConfiguration45.getDirectoryFilter();
        reportConfiguration17.setDirectoryFilter(iOFileFilter53);
        org.apache.rat.report.IReportable iReportable55 = null;
        reportConfiguration17.setReportable(iReportable55);
        org.apache.commons.io.filefilter.IOFileFilter iOFileFilter57 = reportConfiguration17.getDirectoryFilter();
        reportConfiguration1.addDirectoryFilter(iOFileFilter57);
        org.apache.rat.utils.Log log59 = null;
        org.apache.rat.ReportConfiguration reportConfiguration60 = new org.apache.rat.ReportConfiguration(log59);
        org.apache.rat.report.claim.ClaimStatistic claimStatistic61 = org.apache.rat.Reporter.report(reportConfiguration60);
        org.apache.commons.io.function.IOSupplier<java.io.OutputStream> outputStreamIOSupplier62 = reportConfiguration60.getOutput();
        org.apache.rat.license.ILicense iLicense63 = null;
        reportConfiguration60.addLicense(iLicense63);
        org.apache.rat.Defaults.Builder builder65 = org.apache.rat.Defaults.builder();
        org.apache.rat.Defaults defaults66 = builder65.build();
        reportConfiguration60.setFrom(defaults66);
        org.apache.rat.license.LicenseSetFactory.LicenseFilter licenseFilter68 = org.apache.rat.license.LicenseSetFactory.LicenseFilter.all;
        java.util.SortedSet<org.apache.rat.license.ILicense> iLicenseSet69 = defaults66.getLicenses(licenseFilter68);
        java.lang.String[] strArray75 = new java.lang.String[] { "http://org/apache/rat/meta-data#LicenseFamilyCategory", "Datum [ name ='http://org/apache/rat/meta-data#LicenseFamilyCategory',value ='GPL1  ']", "MANIFEST.MF", "AllBuilder:", "The MIT License" };
        org.apache.rat.utils.ReportingSet<java.lang.String> strSet76 = new org.apache.rat.utils.ReportingSet<java.lang.String>();
        boolean boolean77 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strSet76, strArray75);
        boolean boolean79 = strSet76.addIfNotPresent("http://org/apache/rat/meta-data#LicenseFamilyName");
        boolean boolean81 = strSet76.addIfNotPresent("ef7a8b13-64c3-4510-bb0c-dbf208e1e73f");
        java.util.function.Function<java.lang.String, java.lang.String> strFunction82 = null;
        org.apache.rat.utils.ReportingSet<java.lang.String> strSet83 = strSet76.setMsgFormat(strFunction82);
        java.util.Spliterator<java.lang.String> strSpliterator84 = strSet76.spliterator();
        org.apache.rat.license.LicenseSetFactory licenseSetFactory85 = new org.apache.rat.license.LicenseSetFactory(iLicenseSet69, (java.util.Collection<java.lang.String>) strSet76);
        java.util.function.Function<java.lang.String, java.lang.String> strFunction86 = null;
        org.apache.rat.utils.ReportingSet<java.lang.String> strSet87 = strSet76.setMsgFormat(strFunction86);
        java.lang.Object[] objArray88 = strSet87.toArray();
        reportConfiguration1.removeApprovedLicenseCategories((java.util.Collection<java.lang.String>) strSet87);
        java.util.Comparator<? super java.lang.String> wildcardComparator90 = strSet87.comparator();
        java.lang.String str91 = strSet87.last();
        org.junit.Assert.assertNull(filenameFilter2);
        org.junit.Assert.assertTrue("'" + licenseFilter3 + "' != '" + org.apache.rat.license.LicenseSetFactory.LicenseFilter.all + "'", licenseFilter3.equals(org.apache.rat.license.LicenseSetFactory.LicenseFilter.all));
        org.junit.Assert.assertNotNull(iLicenseSet4);
        org.junit.Assert.assertTrue("'" + addLicenseHeaders5 + "' != '" + org.apache.rat.config.AddLicenseHeaders.FALSE + "'", addLicenseHeaders5.equals(org.apache.rat.config.AddLicenseHeaders.FALSE));
        org.junit.Assert.assertNull(claimStatistic9);
        org.junit.Assert.assertTrue("'" + licenseFilter10 + "' != '" + org.apache.rat.license.LicenseSetFactory.LicenseFilter.all + "'", licenseFilter10.equals(org.apache.rat.license.LicenseSetFactory.LicenseFilter.all));
        org.junit.Assert.assertTrue("'" + addLicenseHeaders13 + "' != '" + org.apache.rat.config.AddLicenseHeaders.FORCED + "'", addLicenseHeaders13.equals(org.apache.rat.config.AddLicenseHeaders.FORCED));
        org.junit.Assert.assertNotNull(printWriterIOSupplier15);
        org.junit.Assert.assertTrue("'" + level20 + "' != '" + org.apache.rat.utils.Log.Level.ERROR + "'", level20.equals(org.apache.rat.utils.Log.Level.ERROR));
        org.junit.Assert.assertNotNull(iOFileFilter22);
        org.junit.Assert.assertNotNull(strArray28);
        org.junit.Assert.assertTrue("'" + boolean30 + "' != '" + true + "'", boolean30 == true);
        org.junit.Assert.assertTrue("'" + boolean32 + "' != '" + true + "'", boolean32 == true);
        org.junit.Assert.assertTrue("'" + boolean34 + "' != '" + true + "'", boolean34 == true);
        org.junit.Assert.assertNotNull(strSet36);
        org.junit.Assert.assertNotNull(iLicenseFamilySet38);
        org.junit.Assert.assertNull(iLicenseFamily39);
        org.junit.Assert.assertTrue("'" + boolean40 + "' != '" + true + "'", boolean40 == true);
        org.junit.Assert.assertNotNull(iLicenseFamilyArray46);
        org.junit.Assert.assertTrue("'" + boolean48 + "' != '" + false + "'", boolean48 == false);
        org.junit.Assert.assertNull(iReportable52);
        org.junit.Assert.assertNotNull(iOFileFilter53);
        org.junit.Assert.assertNotNull(iOFileFilter57);
        org.junit.Assert.assertNull(claimStatistic61);
        org.junit.Assert.assertNotNull(outputStreamIOSupplier62);
        org.junit.Assert.assertNotNull(builder65);
        org.junit.Assert.assertNotNull(defaults66);
        org.junit.Assert.assertTrue("'" + licenseFilter68 + "' != '" + org.apache.rat.license.LicenseSetFactory.LicenseFilter.all + "'", licenseFilter68.equals(org.apache.rat.license.LicenseSetFactory.LicenseFilter.all));
        org.junit.Assert.assertNotNull(iLicenseSet69);
        org.junit.Assert.assertNotNull(strArray75);
        org.junit.Assert.assertTrue("'" + boolean77 + "' != '" + true + "'", boolean77 == true);
        org.junit.Assert.assertTrue("'" + boolean79 + "' != '" + true + "'", boolean79 == true);
        org.junit.Assert.assertTrue("'" + boolean81 + "' != '" + true + "'", boolean81 == true);
        org.junit.Assert.assertNotNull(strSet83);
        org.junit.Assert.assertNotNull(strSpliterator84);
        org.junit.Assert.assertNotNull(strSet87);
        org.junit.Assert.assertNotNull(objArray88);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray88), "[AllBuilder:, Datum [ name ='http://org/apache/rat/meta-data#LicenseFamilyCategory',value ='GPL1  '], MANIFEST.MF, The MIT License, ef7a8b13-64c3-4510-bb0c-dbf208e1e73f, http://org/apache/rat/meta-data#LicenseFamilyCategory, http://org/apache/rat/meta-data#LicenseFamilyName]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray88), "[AllBuilder:, Datum [ name ='http://org/apache/rat/meta-data#LicenseFamilyCategory',value ='GPL1  '], MANIFEST.MF, The MIT License, ef7a8b13-64c3-4510-bb0c-dbf208e1e73f, http://org/apache/rat/meta-data#LicenseFamilyCategory, http://org/apache/rat/meta-data#LicenseFamilyName]");
        org.junit.Assert.assertNull(wildcardComparator90);
        org.junit.Assert.assertEquals("'" + str91 + "' != '" + "http://org/apache/rat/meta-data#LicenseFamilyName" + "'", str91, "http://org/apache/rat/meta-data#LicenseFamilyName");
    }

    @Test
    public void test12646() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest25.test12646");
        org.apache.rat.configuration.Format format0 = org.apache.rat.configuration.Format.XML;
        org.apache.rat.configuration.LicenseReader licenseReader1 = format0.licenseReader();
        org.apache.rat.configuration.MatcherReader matcherReader2 = format0.matcherReader();
        org.apache.rat.configuration.LicenseReader licenseReader3 = format0.licenseReader();
        org.apache.rat.configuration.LicenseReader licenseReader4 = format0.licenseReader();
        org.apache.rat.configuration.MatcherReader matcherReader5 = format0.matcherReader();
        org.apache.rat.configuration.MatcherReader matcherReader6 = format0.matcherReader();
        org.apache.rat.configuration.MatcherReader matcherReader7 = format0.matcherReader();
        matcherReader7.readMatcherBuilders();
        matcherReader7.readMatcherBuilders();
        matcherReader7.readMatcherBuilders();
        matcherReader7.readMatcherBuilders();
        java.net.URL uRL12 = null;
        // The following exception was thrown during execution in test generation
        try {
            matcherReader7.addMatchers(uRL12);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + format0 + "' != '" + org.apache.rat.configuration.Format.XML + "'", format0.equals(org.apache.rat.configuration.Format.XML));
        org.junit.Assert.assertNotNull(licenseReader1);
        org.junit.Assert.assertNotNull(matcherReader2);
        org.junit.Assert.assertNotNull(licenseReader3);
        org.junit.Assert.assertNotNull(licenseReader4);
        org.junit.Assert.assertNotNull(matcherReader5);
        org.junit.Assert.assertNotNull(matcherReader6);
        org.junit.Assert.assertNotNull(matcherReader7);
    }

    @Test
    public void test12647() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest25.test12647");
        java.lang.String[] strArray5 = new java.lang.String[] { "http://org/apache/rat/meta-data#LicenseFamilyCategory", "Datum [ name ='http://org/apache/rat/meta-data#LicenseFamilyCategory',value ='GPL1  ']", "MANIFEST.MF", "AllBuilder:", "The MIT License" };
        org.apache.rat.utils.ReportingSet<java.lang.String> strSet6 = new org.apache.rat.utils.ReportingSet<java.lang.String>();
        boolean boolean7 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strSet6, strArray5);
        boolean boolean9 = strSet6.addIfNotPresent("http://org/apache/rat/meta-data#LicenseFamilyName");
        boolean boolean11 = strSet6.addIfNotPresent("ef7a8b13-64c3-4510-bb0c-dbf208e1e73f");
        java.util.function.Function<java.lang.String, java.lang.String> strFunction12 = null;
        org.apache.rat.utils.ReportingSet<java.lang.String> strSet13 = strSet6.setMsgFormat(strFunction12);
        java.util.SortedSet<org.apache.rat.license.ILicenseFamily> iLicenseFamilySet15 = org.apache.rat.license.LicenseFamilySetFactory.emptyLicenseFamilySet();
        org.apache.rat.license.ILicenseFamily iLicenseFamily16 = org.apache.rat.license.LicenseFamilySetFactory.search("http://org/apache/rat/meta-data", iLicenseFamilySet15);
        boolean boolean17 = strSet6.containsAll((java.util.Collection<org.apache.rat.license.ILicenseFamily>) iLicenseFamilySet15);
        org.apache.rat.utils.ReportingSet<java.lang.String> strSet19 = strSet6.tailSet("http://org/apache/rat/meta-data#HeaderCategory");
        org.apache.rat.utils.Log log20 = null;
        org.apache.rat.ReportConfiguration reportConfiguration21 = new org.apache.rat.ReportConfiguration(log20);
        java.io.FilenameFilter filenameFilter22 = reportConfiguration21.getInputFileFilter();
        org.apache.rat.license.LicenseSetFactory.LicenseFilter licenseFilter23 = org.apache.rat.license.LicenseSetFactory.LicenseFilter.all;
        java.util.SortedSet<org.apache.rat.license.ILicense> iLicenseSet24 = reportConfiguration21.getLicenses(licenseFilter23);
        org.apache.rat.config.AddLicenseHeaders addLicenseHeaders25 = org.apache.rat.config.AddLicenseHeaders.FALSE;
        reportConfiguration21.setAddLicenseHeaders(addLicenseHeaders25);
        org.apache.rat.utils.Log log27 = null;
        org.apache.rat.ReportConfiguration reportConfiguration28 = new org.apache.rat.ReportConfiguration(log27);
        reportConfiguration28.addApprovedLicenseCategory(".cvsignore");
        org.apache.rat.utils.Log.Level level31 = org.apache.rat.utils.Log.Level.ERROR;
        reportConfiguration28.logLicenseCollisions(level31);
        reportConfiguration21.logFamilyCollisions(level31);
        org.apache.rat.utils.ReportingSet<java.lang.String> strSet34 = strSet6.setLogLevel(level31);
        java.util.SortedSet<org.apache.rat.license.ILicenseFamily> iLicenseFamilySet35 = org.apache.rat.license.LicenseFamilySetFactory.emptyLicenseFamilySet();
        org.apache.rat.policy.DefaultPolicy defaultPolicy36 = new org.apache.rat.policy.DefaultPolicy((java.util.Collection<org.apache.rat.license.ILicenseFamily>) iLicenseFamilySet35);
        boolean boolean37 = strSet34.retainAll((java.util.Collection<org.apache.rat.license.ILicenseFamily>) iLicenseFamilySet35);
        java.util.stream.Stream<java.lang.String> strStream38 = strSet34.stream();
        boolean boolean40 = strSet34.addIfNotPresent("2ed68e58-7824-4cb9-a7a0-1fdc42449c68");
        org.apache.rat.utils.ReportingSet<java.lang.String> strSet43 = strSet34.subSet("4bc3a3d5-58d2-4ae6-a09c-2e73ed66c833", "TextBuilder: http://org/apache/ra...");
        org.junit.Assert.assertNotNull(strArray5);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + true + "'", boolean7 == true);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + true + "'", boolean9 == true);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + true + "'", boolean11 == true);
        org.junit.Assert.assertNotNull(strSet13);
        org.junit.Assert.assertNotNull(iLicenseFamilySet15);
        org.junit.Assert.assertNull(iLicenseFamily16);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + true + "'", boolean17 == true);
        org.junit.Assert.assertNotNull(strSet19);
        org.junit.Assert.assertNull(filenameFilter22);
        org.junit.Assert.assertTrue("'" + licenseFilter23 + "' != '" + org.apache.rat.license.LicenseSetFactory.LicenseFilter.all + "'", licenseFilter23.equals(org.apache.rat.license.LicenseSetFactory.LicenseFilter.all));
        org.junit.Assert.assertNotNull(iLicenseSet24);
        org.junit.Assert.assertTrue("'" + addLicenseHeaders25 + "' != '" + org.apache.rat.config.AddLicenseHeaders.FALSE + "'", addLicenseHeaders25.equals(org.apache.rat.config.AddLicenseHeaders.FALSE));
        org.junit.Assert.assertTrue("'" + level31 + "' != '" + org.apache.rat.utils.Log.Level.ERROR + "'", level31.equals(org.apache.rat.utils.Log.Level.ERROR));
        org.junit.Assert.assertNotNull(strSet34);
        org.junit.Assert.assertNotNull(iLicenseFamilySet35);
        org.junit.Assert.assertTrue("'" + boolean37 + "' != '" + true + "'", boolean37 == true);
        org.junit.Assert.assertNotNull(strStream38);
        org.junit.Assert.assertTrue("'" + boolean40 + "' != '" + true + "'", boolean40 == true);
        org.junit.Assert.assertNotNull(strSet43);
    }

    @Test
    public void test12648() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest25.test12648");
        org.apache.rat.configuration.builders.CopyrightBuilder copyrightBuilder0 = org.apache.rat.analysis.IHeaderMatcher.Builder.copyright();
        java.lang.String str1 = copyrightBuilder0.toString();
        org.apache.rat.configuration.builders.CopyrightBuilder copyrightBuilder3 = copyrightBuilder0.setEnd("W3C Software Copyright");
        org.apache.rat.configuration.builders.CopyrightBuilder copyrightBuilder5 = copyrightBuilder0.setStart("RegexBuilder: 89662180-a89f-497b-9301-227d494d2bae");
        org.apache.rat.configuration.builders.CopyrightBuilder copyrightBuilder7 = copyrightBuilder5.setStart("TextBuilder: AL   ");
        org.apache.rat.configuration.builders.CopyrightBuilder copyrightBuilder9 = copyrightBuilder7.setEnd("8d0237f7-4727-4099-af02-7cae8c4e3cfd");
        org.junit.Assert.assertNotNull(copyrightBuilder0);
        org.junit.Assert.assertEquals("'" + str1 + "' != '" + "Copyright Builder: s:null e:null o:null" + "'", str1, "Copyright Builder: s:null e:null o:null");
        org.junit.Assert.assertNotNull(copyrightBuilder3);
        org.junit.Assert.assertNotNull(copyrightBuilder5);
        org.junit.Assert.assertNotNull(copyrightBuilder7);
        org.junit.Assert.assertNotNull(copyrightBuilder9);
    }

    @Test
    public void test12649() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest25.test12649");
        org.apache.rat.configuration.builders.CopyrightBuilder copyrightBuilder0 = org.apache.rat.analysis.IHeaderMatcher.Builder.copyright();
        java.lang.String str1 = copyrightBuilder0.toString();
        org.apache.rat.configuration.builders.CopyrightBuilder copyrightBuilder3 = copyrightBuilder0.setStart("archive");
        java.lang.String str4 = copyrightBuilder0.toString();
        java.lang.String str5 = copyrightBuilder0.toString();
        org.apache.rat.configuration.builders.CopyrightBuilder copyrightBuilder7 = copyrightBuilder0.setStart("3e2b228d-d5ff-4444-8d8c-d614494b2426 null");
        org.apache.rat.analysis.IHeaderMatcher iHeaderMatcher8 = copyrightBuilder0.build();
        org.apache.rat.configuration.builders.CopyrightBuilder copyrightBuilder10 = copyrightBuilder0.setStart("");
        org.junit.Assert.assertNotNull(copyrightBuilder0);
        org.junit.Assert.assertEquals("'" + str1 + "' != '" + "Copyright Builder: s:null e:null o:null" + "'", str1, "Copyright Builder: s:null e:null o:null");
        org.junit.Assert.assertNotNull(copyrightBuilder3);
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "Copyright Builder: s:archive e:null o:null" + "'", str4, "Copyright Builder: s:archive e:null o:null");
        org.junit.Assert.assertEquals("'" + str5 + "' != '" + "Copyright Builder: s:archive e:null o:null" + "'", str5, "Copyright Builder: s:archive e:null o:null");
        org.junit.Assert.assertNotNull(copyrightBuilder7);
        org.junit.Assert.assertNotNull(iHeaderMatcher8);
        org.junit.Assert.assertNotNull(copyrightBuilder10);
    }

    @Test
    public void test12650() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest25.test12650");
        org.apache.rat.report.claim.ClaimStatistic claimStatistic0 = new org.apache.rat.report.claim.ClaimStatistic();
        claimStatistic0.setNumUnApproved((-1));
        java.util.Map<java.lang.String, java.lang.Integer> strMap3 = claimStatistic0.getLicenseFileCodeMap();
        claimStatistic0.setNumGenerated(6);
        claimStatistic0.setNumUnknown(35);
        int int8 = claimStatistic0.getNumUnknown();
        java.util.Map<java.lang.String, java.lang.Integer> strMap9 = null;
        claimStatistic0.setLicenseFileNameMap(strMap9);
        org.junit.Assert.assertNull(strMap3);
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + 35 + "'", int8 == 35);
    }

    @Test
    public void test12651() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest25.test12651");
        org.apache.rat.utils.Log log0 = null;
        org.apache.rat.ReportConfiguration reportConfiguration1 = new org.apache.rat.ReportConfiguration(log0);
        java.io.FilenameFilter filenameFilter2 = reportConfiguration1.getInputFileFilter();
        org.apache.rat.license.LicenseSetFactory.LicenseFilter licenseFilter3 = org.apache.rat.license.LicenseSetFactory.LicenseFilter.all;
        java.util.SortedSet<org.apache.rat.license.ILicense> iLicenseSet4 = reportConfiguration1.getLicenses(licenseFilter3);
        org.apache.rat.config.AddLicenseHeaders addLicenseHeaders5 = org.apache.rat.config.AddLicenseHeaders.FALSE;
        reportConfiguration1.setAddLicenseHeaders(addLicenseHeaders5);
        org.apache.rat.utils.Log log7 = null;
        org.apache.rat.ReportConfiguration reportConfiguration8 = new org.apache.rat.ReportConfiguration(log7);
        org.apache.rat.report.claim.ClaimStatistic claimStatistic9 = org.apache.rat.Reporter.report(reportConfiguration8);
        org.apache.rat.license.LicenseSetFactory.LicenseFilter licenseFilter10 = org.apache.rat.license.LicenseSetFactory.LicenseFilter.all;
        org.apache.rat.Reporter.listLicenses(reportConfiguration8, licenseFilter10);
        org.apache.rat.Reporter.listLicenses(reportConfiguration1, licenseFilter10);
        org.apache.rat.utils.Log log13 = null;
        org.apache.rat.ReportConfiguration reportConfiguration14 = new org.apache.rat.ReportConfiguration(log13);
        java.io.FilenameFilter filenameFilter15 = reportConfiguration14.getInputFileFilter();
        org.apache.rat.license.LicenseSetFactory.LicenseFilter licenseFilter16 = org.apache.rat.license.LicenseSetFactory.LicenseFilter.all;
        java.util.SortedSet<org.apache.rat.license.ILicense> iLicenseSet17 = reportConfiguration14.getLicenses(licenseFilter16);
        org.apache.rat.config.AddLicenseHeaders addLicenseHeaders18 = org.apache.rat.config.AddLicenseHeaders.FALSE;
        reportConfiguration14.setAddLicenseHeaders(addLicenseHeaders18);
        org.apache.rat.utils.Log log20 = null;
        org.apache.rat.ReportConfiguration reportConfiguration21 = new org.apache.rat.ReportConfiguration(log20);
        org.apache.rat.report.claim.ClaimStatistic claimStatistic22 = org.apache.rat.Reporter.report(reportConfiguration21);
        org.apache.rat.license.LicenseSetFactory.LicenseFilter licenseFilter23 = org.apache.rat.license.LicenseSetFactory.LicenseFilter.all;
        org.apache.rat.Reporter.listLicenses(reportConfiguration21, licenseFilter23);
        org.apache.rat.Reporter.listLicenses(reportConfiguration14, licenseFilter23);
        org.apache.rat.Reporter.listLicenses(reportConfiguration1, licenseFilter23);
        org.apache.rat.utils.Log log27 = null;
        org.apache.rat.ReportConfiguration reportConfiguration28 = new org.apache.rat.ReportConfiguration(log27);
        org.apache.commons.io.function.IOSupplier<java.io.OutputStream> outputStreamIOSupplier29 = reportConfiguration28.getOutput();
        reportConfiguration1.setOut(outputStreamIOSupplier29);
        org.apache.rat.utils.Log.Level level31 = org.apache.rat.utils.Log.Level.WARN;
        reportConfiguration1.logLicenseCollisions(level31);
        reportConfiguration1.setStyleReport(false);
        org.apache.rat.license.ILicenseFamily[] iLicenseFamilyArray35 = new org.apache.rat.license.ILicenseFamily[] {};
        java.util.ArrayList<org.apache.rat.license.ILicenseFamily> iLicenseFamilyList36 = new java.util.ArrayList<org.apache.rat.license.ILicenseFamily>();
        boolean boolean37 = java.util.Collections.addAll((java.util.Collection<org.apache.rat.license.ILicenseFamily>) iLicenseFamilyList36, iLicenseFamilyArray35);
        org.apache.rat.policy.DefaultPolicy defaultPolicy38 = new org.apache.rat.policy.DefaultPolicy((java.util.Collection<org.apache.rat.license.ILicenseFamily>) iLicenseFamilyList36);
        org.apache.rat.api.Document document39 = null;
        defaultPolicy38.analyse(document39);
        org.apache.rat.api.Document document41 = null;
        defaultPolicy38.analyse(document41);
        org.apache.rat.api.Document document43 = null;
        defaultPolicy38.analyse(document43);
        org.apache.rat.analysis.license.FullTextMatchingLicense fullTextMatchingLicense45 = new org.apache.rat.analysis.license.FullTextMatchingLicense();
        fullTextMatchingLicense45.setLicenseFamilyName("hi!");
        java.lang.String str48 = fullTextMatchingLicense45.getLicenseFamilyCategory();
        java.lang.String str49 = fullTextMatchingLicense45.getLicenseFamilyName();
        fullTextMatchingLicense45.setLicenseFamilyName("SpdxBuilder: null");
        fullTextMatchingLicense45.setLicenseFamilyCategory("TMF");
        org.apache.rat.license.ILicenseFamily iLicenseFamily54 = fullTextMatchingLicense45.getLicenseFamily();
        java.util.SortedSet<org.apache.rat.license.ILicenseFamily> iLicenseFamilySet55 = org.apache.rat.license.LicenseFamilySetFactory.emptyLicenseFamilySet();
        org.apache.rat.license.ILicenseFamily iLicenseFamily56 = org.apache.rat.license.LicenseFamilySetFactory.search(iLicenseFamily54, iLicenseFamilySet55);
        defaultPolicy38.add(iLicenseFamily54);
        java.lang.String str58 = iLicenseFamily54.getFamilyName();
        reportConfiguration1.addApprovedLicenseCategory(iLicenseFamily54);
        java.lang.String str60 = iLicenseFamily54.getFamilyCategory();
        java.lang.String str61 = iLicenseFamily54.getFamilyName();
        org.apache.rat.license.ILicenseFamilyBuilder iLicenseFamilyBuilder62 = new org.apache.rat.license.ILicenseFamilyBuilder();
        java.lang.String str63 = iLicenseFamilyBuilder62.getCategory();
        org.apache.rat.license.ILicenseFamily.Builder builder65 = iLicenseFamilyBuilder62.setLicenseFamilyCategory("AL   ");
        org.apache.rat.license.ILicenseFamily.Builder builder67 = iLicenseFamilyBuilder62.setLicenseFamilyCategory("MIT  ");
        org.apache.rat.license.ILicenseFamily.Builder builder69 = iLicenseFamilyBuilder62.setLicenseFamilyName("4a00cf7d-fe76-423e-917e-b03bbae6b8a5");
        java.lang.String str70 = iLicenseFamilyBuilder62.getCategory();
        org.apache.rat.license.ILicenseFamily iLicenseFamily71 = iLicenseFamilyBuilder62.build();
        java.lang.String str72 = iLicenseFamily71.getFamilyName();
        java.lang.String str73 = iLicenseFamily71.getFamilyName();
        int int74 = iLicenseFamily54.compareTo(iLicenseFamily71);
        org.junit.Assert.assertNull(filenameFilter2);
        org.junit.Assert.assertTrue("'" + licenseFilter3 + "' != '" + org.apache.rat.license.LicenseSetFactory.LicenseFilter.all + "'", licenseFilter3.equals(org.apache.rat.license.LicenseSetFactory.LicenseFilter.all));
        org.junit.Assert.assertNotNull(iLicenseSet4);
        org.junit.Assert.assertTrue("'" + addLicenseHeaders5 + "' != '" + org.apache.rat.config.AddLicenseHeaders.FALSE + "'", addLicenseHeaders5.equals(org.apache.rat.config.AddLicenseHeaders.FALSE));
        org.junit.Assert.assertNull(claimStatistic9);
        org.junit.Assert.assertTrue("'" + licenseFilter10 + "' != '" + org.apache.rat.license.LicenseSetFactory.LicenseFilter.all + "'", licenseFilter10.equals(org.apache.rat.license.LicenseSetFactory.LicenseFilter.all));
        org.junit.Assert.assertNull(filenameFilter15);
        org.junit.Assert.assertTrue("'" + licenseFilter16 + "' != '" + org.apache.rat.license.LicenseSetFactory.LicenseFilter.all + "'", licenseFilter16.equals(org.apache.rat.license.LicenseSetFactory.LicenseFilter.all));
        org.junit.Assert.assertNotNull(iLicenseSet17);
        org.junit.Assert.assertTrue("'" + addLicenseHeaders18 + "' != '" + org.apache.rat.config.AddLicenseHeaders.FALSE + "'", addLicenseHeaders18.equals(org.apache.rat.config.AddLicenseHeaders.FALSE));
        org.junit.Assert.assertNull(claimStatistic22);
        org.junit.Assert.assertTrue("'" + licenseFilter23 + "' != '" + org.apache.rat.license.LicenseSetFactory.LicenseFilter.all + "'", licenseFilter23.equals(org.apache.rat.license.LicenseSetFactory.LicenseFilter.all));
        org.junit.Assert.assertNotNull(outputStreamIOSupplier29);
        org.junit.Assert.assertTrue("'" + level31 + "' != '" + org.apache.rat.utils.Log.Level.WARN + "'", level31.equals(org.apache.rat.utils.Log.Level.WARN));
        org.junit.Assert.assertNotNull(iLicenseFamilyArray35);
        org.junit.Assert.assertTrue("'" + boolean37 + "' != '" + false + "'", boolean37 == false);
        org.junit.Assert.assertNull(str48);
        org.junit.Assert.assertEquals("'" + str49 + "' != '" + "hi!" + "'", str49, "hi!");
        org.junit.Assert.assertNotNull(iLicenseFamily54);
        org.junit.Assert.assertNotNull(iLicenseFamilySet55);
        org.junit.Assert.assertNull(iLicenseFamily56);
        org.junit.Assert.assertEquals("'" + str58 + "' != '" + "SpdxBuilder: null" + "'", str58, "SpdxBuilder: null");
        org.junit.Assert.assertEquals("'" + str60 + "' != '" + "TMF  " + "'", str60, "TMF  ");
        org.junit.Assert.assertEquals("'" + str61 + "' != '" + "SpdxBuilder: null" + "'", str61, "SpdxBuilder: null");
        org.junit.Assert.assertNull(str63);
        org.junit.Assert.assertNotNull(builder65);
        org.junit.Assert.assertNotNull(builder67);
        org.junit.Assert.assertNotNull(builder69);
        org.junit.Assert.assertEquals("'" + str70 + "' != '" + "MIT  " + "'", str70, "MIT  ");
        org.junit.Assert.assertNotNull(iLicenseFamily71);
        org.junit.Assert.assertEquals("'" + str72 + "' != '" + "4a00cf7d-fe76-423e-917e-b03bbae6b8a5" + "'", str72, "4a00cf7d-fe76-423e-917e-b03bbae6b8a5");
        org.junit.Assert.assertEquals("'" + str73 + "' != '" + "4a00cf7d-fe76-423e-917e-b03bbae6b8a5" + "'", str73, "4a00cf7d-fe76-423e-917e-b03bbae6b8a5");
        org.junit.Assert.assertTrue("'" + int74 + "' != '" + 7 + "'", int74 == 7);
    }

    @Test
    public void test12652() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest25.test12652");
        org.apache.rat.analysis.matchers.CopyrightMatcher copyrightMatcher3 = new org.apache.rat.analysis.matchers.CopyrightMatcher("", "TMF  ", "");
        org.apache.rat.analysis.IHeaderMatcher.State state4 = copyrightMatcher3.currentState();
        org.junit.Assert.assertTrue("'" + state4 + "' != '" + org.apache.rat.analysis.IHeaderMatcher.State.i + "'", state4.equals(org.apache.rat.analysis.IHeaderMatcher.State.i));
    }

    @Test
    public void test12653() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest25.test12653");
        org.apache.rat.configuration.Format format0 = org.apache.rat.configuration.Format.XML;
        org.apache.rat.configuration.LicenseReader licenseReader1 = format0.licenseReader();
        org.apache.rat.configuration.LicenseReader licenseReader2 = format0.licenseReader();
        org.apache.rat.configuration.LicenseReader licenseReader3 = format0.licenseReader();
        org.apache.rat.configuration.LicenseReader licenseReader4 = format0.licenseReader();
        java.util.SortedSet<org.apache.rat.license.ILicenseFamily> iLicenseFamilySet5 = licenseReader4.readFamilies();
        java.util.SortedSet<java.lang.String> strSet6 = licenseReader4.approvedLicenseId();
        org.junit.Assert.assertTrue("'" + format0 + "' != '" + org.apache.rat.configuration.Format.XML + "'", format0.equals(org.apache.rat.configuration.Format.XML));
        org.junit.Assert.assertNotNull(licenseReader1);
        org.junit.Assert.assertNotNull(licenseReader2);
        org.junit.Assert.assertNotNull(licenseReader3);
        org.junit.Assert.assertNotNull(licenseReader4);
        org.junit.Assert.assertNotNull(iLicenseFamilySet5);
        org.junit.Assert.assertNotNull(strSet6);
    }

    @Test
    public void test12654() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest25.test12654");
        org.apache.rat.analysis.matchers.FullTextMatcher fullTextMatcher2 = new org.apache.rat.analysis.matchers.FullTextMatcher("Copyright Builder: s:null e:null o:null");
        org.apache.rat.analysis.IHeaderMatcher.State state3 = fullTextMatcher2.currentState();
        fullTextMatcher2.reset();
        org.apache.rat.analysis.matchers.NotMatcher notMatcher5 = new org.apache.rat.analysis.matchers.NotMatcher("org/apache/rat/unapproved-licenses.xsl", (org.apache.rat.analysis.IHeaderMatcher) fullTextMatcher2);
        org.apache.rat.analysis.IHeaderMatcher.State state6 = notMatcher5.currentState();
        java.lang.String str7 = notMatcher5.getId();
        org.junit.Assert.assertTrue("'" + state3 + "' != '" + org.apache.rat.analysis.IHeaderMatcher.State.i + "'", state3.equals(org.apache.rat.analysis.IHeaderMatcher.State.i));
        org.junit.Assert.assertTrue("'" + state6 + "' != '" + org.apache.rat.analysis.IHeaderMatcher.State.i + "'", state6.equals(org.apache.rat.analysis.IHeaderMatcher.State.i));
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "org/apache/rat/unapproved-licenses.xsl" + "'", str7, "org/apache/rat/unapproved-licenses.xsl");
    }

    @Test
    public void test12655() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest25.test12655");
        org.apache.rat.analysis.matchers.CopyrightMatcher copyrightMatcher3 = new org.apache.rat.analysis.matchers.CopyrightMatcher("NotBuilder: null", "http://org/apache/rat/meta-data#LicenseFamilyName", "http://org/apache/rat/meta-data");
        java.lang.String str4 = copyrightMatcher3.getId();
        org.apache.rat.analysis.IHeaderMatcher.State state6 = copyrightMatcher3.matches("ed42033c-bb2d-4a0c-b6fe-b912f4d3a137");
        java.lang.String str7 = copyrightMatcher3.toString();
        org.apache.rat.analysis.IHeaderMatcher.State state9 = copyrightMatcher3.matches("SpdxBuilder: Datum [ name ='http://org/apache/rat/meta-data#ApprovedLicense',value ='false ']");
        java.lang.String str10 = copyrightMatcher3.toString();
// flaky:         org.junit.Assert.assertEquals("'" + str4 + "' != '" + "e6b4a450-b455-4f2c-b6e1-3affc1b5c7e2" + "'", str4, "e6b4a450-b455-4f2c-b6e1-3affc1b5c7e2");
        org.junit.Assert.assertTrue("'" + state6 + "' != '" + org.apache.rat.analysis.IHeaderMatcher.State.i + "'", state6.equals(org.apache.rat.analysis.IHeaderMatcher.State.i));
// flaky:         org.junit.Assert.assertEquals("'" + str7 + "' != '" + "e6b4a450-b455-4f2c-b6e1-3affc1b5c7e2" + "'", str7, "e6b4a450-b455-4f2c-b6e1-3affc1b5c7e2");
        org.junit.Assert.assertTrue("'" + state9 + "' != '" + org.apache.rat.analysis.IHeaderMatcher.State.i + "'", state9.equals(org.apache.rat.analysis.IHeaderMatcher.State.i));
// flaky:         org.junit.Assert.assertEquals("'" + str10 + "' != '" + "e6b4a450-b455-4f2c-b6e1-3affc1b5c7e2" + "'", str10, "e6b4a450-b455-4f2c-b6e1-3affc1b5c7e2");
    }

    @Test
    public void test12656() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest25.test12656");
        org.apache.rat.utils.DefaultLog defaultLog0 = org.apache.rat.utils.DefaultLog.INSTANCE;
        org.apache.rat.configuration.builders.AllBuilder allBuilder1 = new org.apache.rat.configuration.builders.AllBuilder();
        org.apache.rat.configuration.builders.MatcherRefBuilder matcherRefBuilder2 = org.apache.rat.analysis.IHeaderMatcher.Builder.matcherRef();
        boolean boolean3 = matcherRefBuilder2.hasId();
        java.lang.String str4 = matcherRefBuilder2.toString();
        org.apache.rat.configuration.builders.AnyBuilder anyBuilder5 = org.apache.rat.analysis.IHeaderMatcher.Builder.any();
        org.apache.rat.configuration.builders.NotBuilder notBuilder6 = new org.apache.rat.configuration.builders.NotBuilder();
        java.lang.String str7 = notBuilder6.toString();
        org.apache.rat.configuration.builders.MatcherRefBuilder matcherRefBuilder8 = org.apache.rat.analysis.IHeaderMatcher.Builder.matcherRef();
        boolean boolean9 = matcherRefBuilder8.hasId();
        java.util.Map<java.lang.String, org.apache.rat.analysis.IHeaderMatcher> strMap10 = null;
        org.apache.rat.configuration.builders.MatcherRefBuilder matcherRefBuilder11 = matcherRefBuilder8.setMatchers(strMap10);
        org.apache.rat.configuration.builders.AllBuilder allBuilder12 = new org.apache.rat.configuration.builders.AllBuilder();
        org.apache.rat.configuration.builders.CopyrightBuilder copyrightBuilder13 = org.apache.rat.analysis.IHeaderMatcher.Builder.copyright();
        org.apache.rat.configuration.builders.CopyrightBuilder copyrightBuilder15 = copyrightBuilder13.setStart("OASIS");
        java.lang.String str16 = copyrightBuilder13.toString();
        org.apache.rat.configuration.builders.CopyrightBuilder copyrightBuilder18 = copyrightBuilder13.setStart("223f0aba-15d4-49e9-901e-5740c137aebf");
        org.apache.rat.configuration.builders.MatcherRefBuilder matcherRefBuilder19 = org.apache.rat.analysis.IHeaderMatcher.Builder.matcherRef();
        boolean boolean20 = matcherRefBuilder19.hasId();
        org.apache.rat.configuration.builders.CopyrightBuilder copyrightBuilder21 = org.apache.rat.analysis.IHeaderMatcher.Builder.copyright();
        org.apache.rat.configuration.builders.CopyrightBuilder copyrightBuilder23 = copyrightBuilder21.setStart("OASIS");
        java.lang.String str24 = copyrightBuilder21.toString();
        org.apache.rat.configuration.builders.CopyrightBuilder copyrightBuilder26 = copyrightBuilder21.setStart("223f0aba-15d4-49e9-901e-5740c137aebf");
        org.apache.rat.configuration.builders.CopyrightBuilder copyrightBuilder27 = org.apache.rat.analysis.IHeaderMatcher.Builder.copyright();
        org.apache.rat.configuration.builders.CopyrightBuilder copyrightBuilder28 = org.apache.rat.analysis.IHeaderMatcher.Builder.copyright();
        java.lang.String str29 = copyrightBuilder28.toString();
        org.apache.rat.configuration.builders.CopyrightBuilder copyrightBuilder31 = copyrightBuilder28.setEnd(".cvsignore");
        boolean boolean32 = copyrightBuilder28.hasId();
        org.apache.rat.configuration.builders.CopyrightBuilder copyrightBuilder33 = org.apache.rat.analysis.IHeaderMatcher.Builder.copyright();
        java.lang.String str34 = copyrightBuilder33.toString();
        org.apache.rat.configuration.builders.CopyrightBuilder copyrightBuilder36 = copyrightBuilder33.setEnd(".cvsignore");
        boolean boolean37 = copyrightBuilder33.hasId();
        java.lang.String str38 = copyrightBuilder33.toString();
        org.apache.rat.configuration.builders.CopyrightBuilder copyrightBuilder39 = org.apache.rat.analysis.IHeaderMatcher.Builder.copyright();
        org.apache.rat.configuration.builders.CopyrightBuilder copyrightBuilder41 = copyrightBuilder39.setStart("OASIS");
        org.apache.rat.configuration.builders.AnyBuilder anyBuilder42 = org.apache.rat.analysis.IHeaderMatcher.Builder.any();
        org.apache.rat.configuration.builders.MatcherRefBuilder matcherRefBuilder43 = org.apache.rat.analysis.IHeaderMatcher.Builder.matcherRef();
        boolean boolean44 = matcherRefBuilder43.hasId();
        java.util.Map<java.lang.String, org.apache.rat.analysis.IHeaderMatcher> strMap45 = null;
        org.apache.rat.configuration.builders.MatcherRefBuilder matcherRefBuilder46 = matcherRefBuilder43.setMatchers(strMap45);
        org.apache.rat.configuration.builders.CopyrightBuilder copyrightBuilder47 = org.apache.rat.analysis.IHeaderMatcher.Builder.copyright();
        org.apache.rat.configuration.builders.MatcherRefBuilder matcherRefBuilder48 = org.apache.rat.analysis.IHeaderMatcher.Builder.matcherRef();
        boolean boolean49 = matcherRefBuilder48.hasId();
        java.lang.String str50 = matcherRefBuilder48.toString();
        java.util.Map<java.lang.String, org.apache.rat.analysis.IHeaderMatcher> strMap51 = null;
        org.apache.rat.configuration.builders.MatcherRefBuilder matcherRefBuilder52 = matcherRefBuilder48.setMatchers(strMap51);
        org.apache.rat.analysis.IHeaderMatcher.Builder[] builderArray53 = new org.apache.rat.analysis.IHeaderMatcher.Builder[] { matcherRefBuilder8, allBuilder12, copyrightBuilder18, matcherRefBuilder19, copyrightBuilder21, copyrightBuilder27, copyrightBuilder28, copyrightBuilder33, copyrightBuilder39, anyBuilder42, matcherRefBuilder43, copyrightBuilder47, matcherRefBuilder48 };
        java.util.ArrayList<org.apache.rat.analysis.IHeaderMatcher.Builder> builderList54 = new java.util.ArrayList<org.apache.rat.analysis.IHeaderMatcher.Builder>();
        boolean boolean55 = java.util.Collections.addAll((java.util.Collection<org.apache.rat.analysis.IHeaderMatcher.Builder>) builderList54, builderArray53);
        org.apache.rat.configuration.builders.AbstractBuilder abstractBuilder56 = notBuilder6.add((java.util.Collection<org.apache.rat.analysis.IHeaderMatcher.Builder>) builderList54);
        org.apache.rat.configuration.builders.MatcherRefBuilder matcherRefBuilder57 = new org.apache.rat.configuration.builders.MatcherRefBuilder();
        org.apache.rat.analysis.IHeaderMatcher.Builder[] builderArray58 = new org.apache.rat.analysis.IHeaderMatcher.Builder[] { matcherRefBuilder2, anyBuilder5, notBuilder6, matcherRefBuilder57 };
        java.util.ArrayList<org.apache.rat.analysis.IHeaderMatcher.Builder> builderList59 = new java.util.ArrayList<org.apache.rat.analysis.IHeaderMatcher.Builder>();
        boolean boolean60 = java.util.Collections.addAll((java.util.Collection<org.apache.rat.analysis.IHeaderMatcher.Builder>) builderList59, builderArray58);
        org.apache.rat.configuration.builders.AbstractBuilder abstractBuilder61 = allBuilder1.add((java.util.Collection<org.apache.rat.analysis.IHeaderMatcher.Builder>) builderList59);
        defaultLog0.info((java.lang.Object) allBuilder1);
        org.apache.rat.ReportConfiguration reportConfiguration63 = new org.apache.rat.ReportConfiguration((org.apache.rat.utils.Log) defaultLog0);
        org.apache.rat.license.ILicense[] iLicenseArray65 = new org.apache.rat.license.ILicense[] {};
        java.util.TreeSet<org.apache.rat.license.ILicense> iLicenseSet66 = new java.util.TreeSet<org.apache.rat.license.ILicense>();
        boolean boolean67 = java.util.Collections.addAll((java.util.Collection<org.apache.rat.license.ILicense>) iLicenseSet66, iLicenseArray65);
        java.lang.String[] strArray80 = new java.lang.String[] { "GPL2 ", "GPL1 ", "notice", "http://org/apache/rat/meta-data#LicenseFamilyName", "notice", "GPL2 ", "http://org/apache/rat/meta-data#LicenseFamilyName", "", "GPL2 ", "", "GPL1 ", "hi!" };
        java.util.ArrayList<java.lang.String> strList81 = new java.util.ArrayList<java.lang.String>();
        boolean boolean82 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strList81, strArray80);
        org.apache.rat.license.LicenseSetFactory licenseSetFactory83 = new org.apache.rat.license.LicenseSetFactory((java.util.SortedSet<org.apache.rat.license.ILicense>) iLicenseSet66, (java.util.Collection<java.lang.String>) strList81);
        org.apache.rat.license.ILicense iLicense84 = org.apache.rat.license.LicenseSetFactory.search("JAVA", (java.util.SortedSet<org.apache.rat.license.ILicense>) iLicenseSet66);
        org.apache.rat.utils.ReportingSet<org.apache.rat.license.ILicense> iLicenseSet85 = new org.apache.rat.utils.ReportingSet<org.apache.rat.license.ILicense>((java.util.SortedSet<org.apache.rat.license.ILicense>) iLicenseSet66);
        reportConfiguration63.addLicenses((java.util.Collection<org.apache.rat.license.ILicense>) iLicenseSet66);
        reportConfiguration63.removeApprovedLicenseCategory("ddd566ca-b176-4397-9768-911583d93df2");
        java.net.URI uRI89 = null;
        // The following exception was thrown during execution in test generation
        try {
            reportConfiguration63.setStyleSheet(uRI89);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: styleSheet file should not be null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(defaultLog0);
        org.junit.Assert.assertNotNull(matcherRefBuilder2);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "MathcerRefBuilder: null" + "'", str4, "MathcerRefBuilder: null");
        org.junit.Assert.assertNotNull(anyBuilder5);
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "NotBuilder: null" + "'", str7, "NotBuilder: null");
        org.junit.Assert.assertNotNull(matcherRefBuilder8);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertNotNull(matcherRefBuilder11);
        org.junit.Assert.assertNotNull(copyrightBuilder13);
        org.junit.Assert.assertNotNull(copyrightBuilder15);
        org.junit.Assert.assertEquals("'" + str16 + "' != '" + "Copyright Builder: s:OASIS e:null o:null" + "'", str16, "Copyright Builder: s:OASIS e:null o:null");
        org.junit.Assert.assertNotNull(copyrightBuilder18);
        org.junit.Assert.assertNotNull(matcherRefBuilder19);
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + false + "'", boolean20 == false);
        org.junit.Assert.assertNotNull(copyrightBuilder21);
        org.junit.Assert.assertNotNull(copyrightBuilder23);
        org.junit.Assert.assertEquals("'" + str24 + "' != '" + "Copyright Builder: s:OASIS e:null o:null" + "'", str24, "Copyright Builder: s:OASIS e:null o:null");
        org.junit.Assert.assertNotNull(copyrightBuilder26);
        org.junit.Assert.assertNotNull(copyrightBuilder27);
        org.junit.Assert.assertNotNull(copyrightBuilder28);
        org.junit.Assert.assertEquals("'" + str29 + "' != '" + "Copyright Builder: s:null e:null o:null" + "'", str29, "Copyright Builder: s:null e:null o:null");
        org.junit.Assert.assertNotNull(copyrightBuilder31);
        org.junit.Assert.assertTrue("'" + boolean32 + "' != '" + false + "'", boolean32 == false);
        org.junit.Assert.assertNotNull(copyrightBuilder33);
        org.junit.Assert.assertEquals("'" + str34 + "' != '" + "Copyright Builder: s:null e:null o:null" + "'", str34, "Copyright Builder: s:null e:null o:null");
        org.junit.Assert.assertNotNull(copyrightBuilder36);
        org.junit.Assert.assertTrue("'" + boolean37 + "' != '" + false + "'", boolean37 == false);
        org.junit.Assert.assertEquals("'" + str38 + "' != '" + "Copyright Builder: s:null e:.cvsignore o:null" + "'", str38, "Copyright Builder: s:null e:.cvsignore o:null");
        org.junit.Assert.assertNotNull(copyrightBuilder39);
        org.junit.Assert.assertNotNull(copyrightBuilder41);
        org.junit.Assert.assertNotNull(anyBuilder42);
        org.junit.Assert.assertNotNull(matcherRefBuilder43);
        org.junit.Assert.assertTrue("'" + boolean44 + "' != '" + false + "'", boolean44 == false);
        org.junit.Assert.assertNotNull(matcherRefBuilder46);
        org.junit.Assert.assertNotNull(copyrightBuilder47);
        org.junit.Assert.assertNotNull(matcherRefBuilder48);
        org.junit.Assert.assertTrue("'" + boolean49 + "' != '" + false + "'", boolean49 == false);
        org.junit.Assert.assertEquals("'" + str50 + "' != '" + "MathcerRefBuilder: null" + "'", str50, "MathcerRefBuilder: null");
        org.junit.Assert.assertNotNull(matcherRefBuilder52);
        org.junit.Assert.assertNotNull(builderArray53);
        org.junit.Assert.assertTrue("'" + boolean55 + "' != '" + true + "'", boolean55 == true);
        org.junit.Assert.assertNotNull(abstractBuilder56);
        org.junit.Assert.assertNotNull(builderArray58);
        org.junit.Assert.assertTrue("'" + boolean60 + "' != '" + true + "'", boolean60 == true);
        org.junit.Assert.assertNotNull(abstractBuilder61);
        org.junit.Assert.assertNotNull(iLicenseArray65);
        org.junit.Assert.assertTrue("'" + boolean67 + "' != '" + false + "'", boolean67 == false);
        org.junit.Assert.assertNotNull(strArray80);
        org.junit.Assert.assertTrue("'" + boolean82 + "' != '" + true + "'", boolean82 == true);
        org.junit.Assert.assertNull(iLicense84);
    }

    @Test
    public void test12657() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest25.test12657");
        org.apache.rat.Defaults.Builder builder0 = org.apache.rat.Defaults.builder();
        org.apache.rat.Defaults.Builder builder2 = builder0.add("META-DATA#LICENSEFAMILYNAME");
        org.apache.rat.Defaults.Builder builder4 = builder0.remove("Copyright Builder: s:null e:null o:null");
        org.apache.rat.Defaults.Builder builder6 = builder0.add("COMMON DEVELOPMENT AND DISTRIBUTION LICENSE Version 1.0");
        org.apache.rat.Defaults.Builder builder8 = builder6.add("Datum [ name ='http://org/apache/rat/meta-data#LicenseFamilyName',value ='????? ']");
        org.apache.rat.Defaults.Builder builder9 = builder6.noDefault();
        // The following exception was thrown during execution in test generation
        try {
            org.apache.rat.Defaults defaults10 = builder9.build();
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: No such suffix: 0");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(builder0);
        org.junit.Assert.assertNotNull(builder2);
        org.junit.Assert.assertNotNull(builder4);
        org.junit.Assert.assertNotNull(builder6);
        org.junit.Assert.assertNotNull(builder8);
        org.junit.Assert.assertNotNull(builder9);
    }

    @Test
    public void test12658() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest25.test12658");
        org.apache.rat.report.claim.ClaimStatistic claimStatistic0 = new org.apache.rat.report.claim.ClaimStatistic();
        claimStatistic0.setNumApproved((int) (short) 10);
        java.util.Map<java.lang.String, java.lang.Integer> strMap3 = null;
        claimStatistic0.setLicenseFileCodeMap(strMap3);
        int int5 = claimStatistic0.getNumUnknown();
        int int6 = claimStatistic0.getNumUnknown();
        claimStatistic0.setNumGenerated((int) (byte) 100);
        java.util.Map<java.lang.String, java.lang.Integer> strMap9 = null;
        claimStatistic0.setLicenseFileNameMap(strMap9);
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 0 + "'", int5 == 0);
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 0 + "'", int6 == 0);
    }

    @Test
    public void test12659() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest25.test12659");
        org.apache.rat.config.SourceCodeManagementSystems sourceCodeManagementSystems0 = org.apache.rat.config.SourceCodeManagementSystems.SUBVERSION;
        boolean boolean1 = sourceCodeManagementSystems0.hasIgnoreFile();
        java.util.List<java.lang.String> strList2 = sourceCodeManagementSystems0.getExclusions();
        java.util.List<java.lang.String> strList3 = sourceCodeManagementSystems0.getExclusions();
        java.util.List<java.lang.String> strList4 = sourceCodeManagementSystems0.getExclusions();
        java.util.List<java.lang.String> strList5 = sourceCodeManagementSystems0.getExclusions();
        java.util.List<java.lang.String> strList6 = sourceCodeManagementSystems0.getExclusions();
        java.lang.String str7 = sourceCodeManagementSystems0.getIgnoreFile();
        java.lang.String str8 = sourceCodeManagementSystems0.getIgnoreFile();
        org.junit.Assert.assertTrue("'" + sourceCodeManagementSystems0 + "' != '" + org.apache.rat.config.SourceCodeManagementSystems.SUBVERSION + "'", sourceCodeManagementSystems0.equals(org.apache.rat.config.SourceCodeManagementSystems.SUBVERSION));
        org.junit.Assert.assertTrue("'" + boolean1 + "' != '" + false + "'", boolean1 == false);
        org.junit.Assert.assertNotNull(strList2);
        org.junit.Assert.assertNotNull(strList3);
        org.junit.Assert.assertNotNull(strList4);
        org.junit.Assert.assertNotNull(strList5);
        org.junit.Assert.assertNotNull(strList6);
        org.junit.Assert.assertNull(str7);
        org.junit.Assert.assertNull(str8);
    }

    @Test
    public void test12660() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest25.test12660");
        org.apache.rat.api.MetaData metaData0 = new org.apache.rat.api.MetaData();
        java.lang.String str2 = metaData0.value("COMMON DEVELOPMENT AND DISTRIBUTION LICENSE Version 1.0");
        java.lang.String str4 = metaData0.value("W3C Document Copyright");
        boolean boolean6 = metaData0.clear("hi!");
        java.lang.String str8 = metaData0.value("true");
        org.apache.rat.api.MetaData.Datum datum10 = metaData0.get("GNU General Public License, version 1");
        org.apache.rat.api.MetaData.Datum datum12 = metaData0.get("http:");
        org.apache.rat.api.MetaData.Datum datum13 = org.apache.rat.api.MetaData.RAT_APPROVED_LICENSE_DATIM_TRUE;
        metaData0.add(datum13);
        boolean boolean16 = metaData0.clear("");
        org.apache.rat.api.MetaData.Datum datum17 = org.apache.rat.api.MetaData.RAT_LICENSE_FAMILY_CATEGORY_DATUM_W3C;
        metaData0.add(datum17);
        java.lang.String str19 = datum17.toString();
        java.lang.String str20 = datum17.toString();
        org.junit.Assert.assertNull(str2);
        org.junit.Assert.assertNull(str4);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertNull(str8);
        org.junit.Assert.assertNull(datum10);
        org.junit.Assert.assertNull(datum12);
        org.junit.Assert.assertNotNull(datum13);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
        org.junit.Assert.assertNotNull(datum17);
        org.junit.Assert.assertEquals("'" + str19 + "' != '" + "Datum [ name ='http://org/apache/rat/meta-data#LicenseFamilyCategory',value ='W3C   ']" + "'", str19, "Datum [ name ='http://org/apache/rat/meta-data#LicenseFamilyCategory',value ='W3C   ']");
        org.junit.Assert.assertEquals("'" + str20 + "' != '" + "Datum [ name ='http://org/apache/rat/meta-data#LicenseFamilyCategory',value ='W3C   ']" + "'", str20, "Datum [ name ='http://org/apache/rat/meta-data#LicenseFamilyCategory',value ='W3C   ']");
    }

    @Test
    public void test12661() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest25.test12661");
        boolean boolean1 = org.apache.rat.document.impl.guesser.BinaryGuesser.isImage("W3C Software Copyright");
        org.junit.Assert.assertTrue("'" + boolean1 + "' != '" + false + "'", boolean1 == false);
    }

    @Test
    public void test12662() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest25.test12662");
        org.apache.rat.Defaults.Builder builder0 = org.apache.rat.Defaults.builder();
        org.apache.rat.Defaults defaults1 = builder0.build();
        org.apache.rat.Defaults defaults2 = builder0.build();
        org.apache.rat.Defaults.Builder builder3 = builder0.noDefault();
        org.apache.rat.Defaults defaults4 = builder3.build();
        java.net.URL uRL5 = null;
        org.apache.rat.Defaults.Builder builder6 = builder3.remove(uRL5);
        org.apache.rat.Defaults.Builder builder8 = builder3.remove("89426113-1da8-4591-9c20-8025b6ece33d");
        org.apache.rat.Defaults.Builder builder10 = builder3.remove("573b0ddb-33d3-4ad4-8bf0-9d0c8cb22b1d");
        org.apache.rat.Defaults.Builder builder11 = builder10.noDefault();
        org.apache.rat.Defaults.Builder builder13 = builder10.remove("c95c8cb9-e020-4881-8b38-9a9be1df8175");
        org.junit.Assert.assertNotNull(builder0);
        org.junit.Assert.assertNotNull(defaults1);
        org.junit.Assert.assertNotNull(defaults2);
        org.junit.Assert.assertNotNull(builder3);
        org.junit.Assert.assertNotNull(defaults4);
        org.junit.Assert.assertNotNull(builder6);
        org.junit.Assert.assertNotNull(builder8);
        org.junit.Assert.assertNotNull(builder10);
        org.junit.Assert.assertNotNull(builder11);
        org.junit.Assert.assertNotNull(builder13);
    }

    @Test
    public void test12663() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest25.test12663");
        org.apache.rat.configuration.builders.AnyBuilder anyBuilder0 = new org.apache.rat.configuration.builders.AnyBuilder();
        java.lang.String str1 = anyBuilder0.toString();
        org.apache.rat.analysis.IHeaderMatcher iHeaderMatcher2 = anyBuilder0.build();
        org.apache.rat.analysis.IHeaderMatcher iHeaderMatcher3 = anyBuilder0.build();
        java.util.List<org.apache.rat.analysis.IHeaderMatcher> iHeaderMatcherList4 = anyBuilder0.getChildren();
        org.apache.rat.analysis.IHeaderMatcher iHeaderMatcher5 = anyBuilder0.build();
        org.junit.Assert.assertEquals("'" + str1 + "' != '" + "AnyBuilder:" + "'", str1, "AnyBuilder:");
        org.junit.Assert.assertNotNull(iHeaderMatcher2);
        org.junit.Assert.assertNotNull(iHeaderMatcher3);
        org.junit.Assert.assertNotNull(iHeaderMatcherList4);
        org.junit.Assert.assertNotNull(iHeaderMatcher5);
    }

    @Test
    public void test12664() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest25.test12664");
        org.apache.rat.utils.Log log0 = null;
        org.apache.rat.ReportConfiguration reportConfiguration1 = new org.apache.rat.ReportConfiguration(log0);
        org.apache.rat.license.ILicenseFamily[] iLicenseFamilyArray2 = new org.apache.rat.license.ILicenseFamily[] {};
        java.util.ArrayList<org.apache.rat.license.ILicenseFamily> iLicenseFamilyList3 = new java.util.ArrayList<org.apache.rat.license.ILicenseFamily>();
        boolean boolean4 = java.util.Collections.addAll((java.util.Collection<org.apache.rat.license.ILicenseFamily>) iLicenseFamilyList3, iLicenseFamilyArray2);
        reportConfiguration1.addFamilies((java.util.Collection<org.apache.rat.license.ILicenseFamily>) iLicenseFamilyList3);
        org.apache.rat.utils.Log.Level level6 = org.apache.rat.utils.Log.Level.ERROR;
        reportConfiguration1.logLicenseCollisions(level6);
        org.apache.rat.report.IReportable iReportable8 = reportConfiguration1.getReportable();
        org.apache.rat.utils.Log log9 = null;
        org.apache.rat.ReportConfiguration reportConfiguration10 = new org.apache.rat.ReportConfiguration(log9);
        reportConfiguration10.addApprovedLicenseCategory(".cvsignore");
        org.apache.rat.utils.Log.Level level13 = org.apache.rat.utils.Log.Level.ERROR;
        reportConfiguration10.logLicenseCollisions(level13);
        reportConfiguration10.addApprovedLicenseCategory("73fbee1b-7ed9-442a-968e-b2b525ca688f");
        org.apache.rat.utils.Log log17 = null;
        org.apache.rat.ReportConfiguration reportConfiguration18 = new org.apache.rat.ReportConfiguration(log17);
        java.io.FilenameFilter filenameFilter19 = reportConfiguration18.getInputFileFilter();
        org.apache.rat.license.LicenseSetFactory.LicenseFilter licenseFilter20 = org.apache.rat.license.LicenseSetFactory.LicenseFilter.all;
        java.util.SortedSet<org.apache.rat.license.ILicense> iLicenseSet21 = reportConfiguration18.getLicenses(licenseFilter20);
        org.apache.rat.config.AddLicenseHeaders addLicenseHeaders22 = org.apache.rat.config.AddLicenseHeaders.FALSE;
        reportConfiguration18.setAddLicenseHeaders(addLicenseHeaders22);
        org.apache.rat.utils.Log log24 = null;
        org.apache.rat.ReportConfiguration reportConfiguration25 = new org.apache.rat.ReportConfiguration(log24);
        org.apache.rat.report.claim.ClaimStatistic claimStatistic26 = org.apache.rat.Reporter.report(reportConfiguration25);
        org.apache.rat.license.LicenseSetFactory.LicenseFilter licenseFilter27 = org.apache.rat.license.LicenseSetFactory.LicenseFilter.all;
        org.apache.rat.Reporter.listLicenses(reportConfiguration25, licenseFilter27);
        org.apache.rat.Reporter.listLicenses(reportConfiguration18, licenseFilter27);
        org.apache.rat.utils.Log log30 = null;
        org.apache.rat.ReportConfiguration reportConfiguration31 = new org.apache.rat.ReportConfiguration(log30);
        java.io.FilenameFilter filenameFilter32 = reportConfiguration31.getInputFileFilter();
        org.apache.rat.license.LicenseSetFactory.LicenseFilter licenseFilter33 = org.apache.rat.license.LicenseSetFactory.LicenseFilter.all;
        java.util.SortedSet<org.apache.rat.license.ILicense> iLicenseSet34 = reportConfiguration31.getLicenses(licenseFilter33);
        org.apache.rat.config.AddLicenseHeaders addLicenseHeaders35 = org.apache.rat.config.AddLicenseHeaders.FALSE;
        reportConfiguration31.setAddLicenseHeaders(addLicenseHeaders35);
        org.apache.rat.utils.Log log37 = null;
        org.apache.rat.ReportConfiguration reportConfiguration38 = new org.apache.rat.ReportConfiguration(log37);
        org.apache.rat.report.claim.ClaimStatistic claimStatistic39 = org.apache.rat.Reporter.report(reportConfiguration38);
        org.apache.rat.license.LicenseSetFactory.LicenseFilter licenseFilter40 = org.apache.rat.license.LicenseSetFactory.LicenseFilter.all;
        org.apache.rat.Reporter.listLicenses(reportConfiguration38, licenseFilter40);
        org.apache.rat.Reporter.listLicenses(reportConfiguration31, licenseFilter40);
        org.apache.rat.Reporter.listLicenses(reportConfiguration18, licenseFilter40);
        java.io.FilenameFilter filenameFilter44 = reportConfiguration18.getInputFileFilter();
        reportConfiguration18.setStyleReport(false);
        org.apache.rat.report.IReportable iReportable47 = null;
        reportConfiguration18.setReportable(iReportable47);
        org.apache.rat.Defaults.Builder builder50 = org.apache.rat.Defaults.builder();
        org.apache.rat.Defaults defaults51 = builder50.build();
        org.apache.rat.utils.Log log52 = null;
        org.apache.rat.ReportConfiguration reportConfiguration53 = new org.apache.rat.ReportConfiguration(log52);
        java.io.FilenameFilter filenameFilter54 = reportConfiguration53.getInputFileFilter();
        org.apache.rat.license.LicenseSetFactory.LicenseFilter licenseFilter55 = org.apache.rat.license.LicenseSetFactory.LicenseFilter.all;
        java.util.SortedSet<org.apache.rat.license.ILicense> iLicenseSet56 = reportConfiguration53.getLicenses(licenseFilter55);
        org.apache.rat.config.AddLicenseHeaders addLicenseHeaders57 = org.apache.rat.config.AddLicenseHeaders.FALSE;
        reportConfiguration53.setAddLicenseHeaders(addLicenseHeaders57);
        org.apache.rat.utils.Log log59 = null;
        org.apache.rat.ReportConfiguration reportConfiguration60 = new org.apache.rat.ReportConfiguration(log59);
        org.apache.rat.report.claim.ClaimStatistic claimStatistic61 = org.apache.rat.Reporter.report(reportConfiguration60);
        org.apache.rat.license.LicenseSetFactory.LicenseFilter licenseFilter62 = org.apache.rat.license.LicenseSetFactory.LicenseFilter.all;
        org.apache.rat.Reporter.listLicenses(reportConfiguration60, licenseFilter62);
        org.apache.rat.Reporter.listLicenses(reportConfiguration53, licenseFilter62);
        org.apache.rat.utils.Log log65 = null;
        org.apache.rat.ReportConfiguration reportConfiguration66 = new org.apache.rat.ReportConfiguration(log65);
        java.io.FilenameFilter filenameFilter67 = reportConfiguration66.getInputFileFilter();
        org.apache.rat.license.LicenseSetFactory.LicenseFilter licenseFilter68 = org.apache.rat.license.LicenseSetFactory.LicenseFilter.all;
        java.util.SortedSet<org.apache.rat.license.ILicense> iLicenseSet69 = reportConfiguration66.getLicenses(licenseFilter68);
        org.apache.rat.config.AddLicenseHeaders addLicenseHeaders70 = org.apache.rat.config.AddLicenseHeaders.FALSE;
        reportConfiguration66.setAddLicenseHeaders(addLicenseHeaders70);
        org.apache.rat.utils.Log log72 = null;
        org.apache.rat.ReportConfiguration reportConfiguration73 = new org.apache.rat.ReportConfiguration(log72);
        org.apache.rat.report.claim.ClaimStatistic claimStatistic74 = org.apache.rat.Reporter.report(reportConfiguration73);
        org.apache.rat.license.LicenseSetFactory.LicenseFilter licenseFilter75 = org.apache.rat.license.LicenseSetFactory.LicenseFilter.all;
        org.apache.rat.Reporter.listLicenses(reportConfiguration73, licenseFilter75);
        org.apache.rat.Reporter.listLicenses(reportConfiguration66, licenseFilter75);
        java.util.SortedSet<org.apache.rat.license.ILicenseFamily> iLicenseFamilySet78 = reportConfiguration53.getLicenseFamilies(licenseFilter75);
        java.util.SortedSet<org.apache.rat.license.ILicense> iLicenseSet79 = defaults51.getLicenses(licenseFilter75);
        org.apache.rat.utils.ReportingSet<org.apache.rat.license.ILicense> iLicenseSet80 = new org.apache.rat.utils.ReportingSet<org.apache.rat.license.ILicense>(iLicenseSet79);
        org.apache.rat.license.ILicense iLicense81 = org.apache.rat.license.LicenseSetFactory.search("TMF", iLicenseSet79);
        reportConfiguration18.addLicense(iLicense81);
        java.lang.String str83 = iLicense81.derivedFrom();
        reportConfiguration10.addLicense(iLicense81);
        reportConfiguration1.addLicense(iLicense81);
        org.apache.rat.report.IReportable iReportable86 = reportConfiguration1.getReportable();
        java.net.URI uRI87 = null;
        // The following exception was thrown during execution in test generation
        try {
            reportConfiguration1.setStyleSheet(uRI87);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: styleSheet file should not be null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(iLicenseFamilyArray2);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertTrue("'" + level6 + "' != '" + org.apache.rat.utils.Log.Level.ERROR + "'", level6.equals(org.apache.rat.utils.Log.Level.ERROR));
        org.junit.Assert.assertNull(iReportable8);
        org.junit.Assert.assertTrue("'" + level13 + "' != '" + org.apache.rat.utils.Log.Level.ERROR + "'", level13.equals(org.apache.rat.utils.Log.Level.ERROR));
        org.junit.Assert.assertNull(filenameFilter19);
        org.junit.Assert.assertTrue("'" + licenseFilter20 + "' != '" + org.apache.rat.license.LicenseSetFactory.LicenseFilter.all + "'", licenseFilter20.equals(org.apache.rat.license.LicenseSetFactory.LicenseFilter.all));
        org.junit.Assert.assertNotNull(iLicenseSet21);
        org.junit.Assert.assertTrue("'" + addLicenseHeaders22 + "' != '" + org.apache.rat.config.AddLicenseHeaders.FALSE + "'", addLicenseHeaders22.equals(org.apache.rat.config.AddLicenseHeaders.FALSE));
        org.junit.Assert.assertNull(claimStatistic26);
        org.junit.Assert.assertTrue("'" + licenseFilter27 + "' != '" + org.apache.rat.license.LicenseSetFactory.LicenseFilter.all + "'", licenseFilter27.equals(org.apache.rat.license.LicenseSetFactory.LicenseFilter.all));
        org.junit.Assert.assertNull(filenameFilter32);
        org.junit.Assert.assertTrue("'" + licenseFilter33 + "' != '" + org.apache.rat.license.LicenseSetFactory.LicenseFilter.all + "'", licenseFilter33.equals(org.apache.rat.license.LicenseSetFactory.LicenseFilter.all));
        org.junit.Assert.assertNotNull(iLicenseSet34);
        org.junit.Assert.assertTrue("'" + addLicenseHeaders35 + "' != '" + org.apache.rat.config.AddLicenseHeaders.FALSE + "'", addLicenseHeaders35.equals(org.apache.rat.config.AddLicenseHeaders.FALSE));
        org.junit.Assert.assertNull(claimStatistic39);
        org.junit.Assert.assertTrue("'" + licenseFilter40 + "' != '" + org.apache.rat.license.LicenseSetFactory.LicenseFilter.all + "'", licenseFilter40.equals(org.apache.rat.license.LicenseSetFactory.LicenseFilter.all));
        org.junit.Assert.assertNull(filenameFilter44);
        org.junit.Assert.assertNotNull(builder50);
        org.junit.Assert.assertNotNull(defaults51);
        org.junit.Assert.assertNull(filenameFilter54);
        org.junit.Assert.assertTrue("'" + licenseFilter55 + "' != '" + org.apache.rat.license.LicenseSetFactory.LicenseFilter.all + "'", licenseFilter55.equals(org.apache.rat.license.LicenseSetFactory.LicenseFilter.all));
        org.junit.Assert.assertNotNull(iLicenseSet56);
        org.junit.Assert.assertTrue("'" + addLicenseHeaders57 + "' != '" + org.apache.rat.config.AddLicenseHeaders.FALSE + "'", addLicenseHeaders57.equals(org.apache.rat.config.AddLicenseHeaders.FALSE));
        org.junit.Assert.assertNull(claimStatistic61);
        org.junit.Assert.assertTrue("'" + licenseFilter62 + "' != '" + org.apache.rat.license.LicenseSetFactory.LicenseFilter.all + "'", licenseFilter62.equals(org.apache.rat.license.LicenseSetFactory.LicenseFilter.all));
        org.junit.Assert.assertNull(filenameFilter67);
        org.junit.Assert.assertTrue("'" + licenseFilter68 + "' != '" + org.apache.rat.license.LicenseSetFactory.LicenseFilter.all + "'", licenseFilter68.equals(org.apache.rat.license.LicenseSetFactory.LicenseFilter.all));
        org.junit.Assert.assertNotNull(iLicenseSet69);
        org.junit.Assert.assertTrue("'" + addLicenseHeaders70 + "' != '" + org.apache.rat.config.AddLicenseHeaders.FALSE + "'", addLicenseHeaders70.equals(org.apache.rat.config.AddLicenseHeaders.FALSE));
        org.junit.Assert.assertNull(claimStatistic74);
        org.junit.Assert.assertTrue("'" + licenseFilter75 + "' != '" + org.apache.rat.license.LicenseSetFactory.LicenseFilter.all + "'", licenseFilter75.equals(org.apache.rat.license.LicenseSetFactory.LicenseFilter.all));
        org.junit.Assert.assertNotNull(iLicenseFamilySet78);
        org.junit.Assert.assertNotNull(iLicenseSet79);
        org.junit.Assert.assertNotNull(iLicense81);
        org.junit.Assert.assertEquals("'" + str83 + "' != '" + "BSD-3" + "'", str83, "BSD-3");
        org.junit.Assert.assertNull(iReportable86);
    }

    @Test
    public void test12665() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest25.test12665");
        org.apache.rat.configuration.builders.RegexBuilder regexBuilder0 = new org.apache.rat.configuration.builders.RegexBuilder();
        java.lang.String str1 = regexBuilder0.toString();
        org.apache.rat.configuration.builders.RegexBuilder regexBuilder3 = regexBuilder0.setExpr("GNU General Public License, version 1");
        org.apache.rat.analysis.IHeaderMatcher iHeaderMatcher4 = regexBuilder3.build();
        org.apache.rat.analysis.IHeaderMatcher iHeaderMatcher5 = regexBuilder3.build();
        org.apache.rat.configuration.builders.RegexBuilder regexBuilder7 = regexBuilder3.setExpr("d0774232cdef4507a8b6ac22a273dde3");
        java.lang.String str8 = regexBuilder3.toString();
        org.apache.rat.configuration.builders.RegexBuilder regexBuilder10 = regexBuilder3.setExpr("Datum [ name ='binary',value =' ']");
        org.junit.Assert.assertEquals("'" + str1 + "' != '" + "RegexBuilder: null" + "'", str1, "RegexBuilder: null");
        org.junit.Assert.assertNotNull(regexBuilder3);
        org.junit.Assert.assertNotNull(iHeaderMatcher4);
        org.junit.Assert.assertNotNull(iHeaderMatcher5);
        org.junit.Assert.assertNotNull(regexBuilder7);
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "RegexBuilder: d0774232cdef4507a8b6ac22a273dde3" + "'", str8, "RegexBuilder: d0774232cdef4507a8b6ac22a273dde3");
        org.junit.Assert.assertNotNull(regexBuilder10);
    }

    @Test
    public void test12666() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest25.test12666");
        org.apache.rat.document.ToNameTransformer toNameTransformer0 = new org.apache.rat.document.ToNameTransformer();
        org.apache.rat.utils.DefaultLog defaultLog1 = org.apache.rat.utils.DefaultLog.INSTANCE;
        org.apache.rat.license.ILicense.Builder builder2 = org.apache.rat.license.ILicense.builder();
        org.apache.rat.license.ILicense.Builder builder4 = builder2.setLicenseFamilyCategory("");
        org.apache.rat.analysis.matchers.CopyrightMatcher copyrightMatcher8 = new org.apache.rat.analysis.matchers.CopyrightMatcher("", "GPL1 ", "hi!");
        org.apache.rat.analysis.IHeaderMatcher.State state9 = copyrightMatcher8.finalizeState();
        org.apache.rat.license.ILicense.Builder builder10 = builder4.setMatcher((org.apache.rat.analysis.IHeaderMatcher) copyrightMatcher8);
        org.apache.rat.license.ILicense.Builder builder12 = builder10.setLicenseFamilyCategory("");
        defaultLog1.error((java.lang.Object) builder12);
        java.lang.Object obj14 = toNameTransformer0.transform((java.lang.Object) defaultLog1);
        org.apache.rat.utils.DefaultLog defaultLog15 = org.apache.rat.utils.DefaultLog.INSTANCE;
        org.apache.rat.license.ILicense.Builder builder16 = org.apache.rat.license.ILicense.builder();
        org.apache.rat.license.ILicense.Builder builder18 = builder16.setLicenseFamilyCategory("");
        org.apache.rat.analysis.matchers.CopyrightMatcher copyrightMatcher22 = new org.apache.rat.analysis.matchers.CopyrightMatcher("", "GPL1 ", "hi!");
        org.apache.rat.analysis.IHeaderMatcher.State state23 = copyrightMatcher22.finalizeState();
        org.apache.rat.license.ILicense.Builder builder24 = builder18.setMatcher((org.apache.rat.analysis.IHeaderMatcher) copyrightMatcher22);
        org.apache.rat.license.ILicense.Builder builder26 = builder24.setLicenseFamilyCategory("");
        defaultLog15.error((java.lang.Object) builder26);
        org.apache.rat.utils.Log.Level level28 = org.apache.rat.utils.Log.Level.INFO;
        defaultLog15.log(level28, "JAVA");
        defaultLog1.setLevel(level28);
        org.apache.rat.annotation.ApacheV2LicenseAppender apacheV2LicenseAppender32 = new org.apache.rat.annotation.ApacheV2LicenseAppender((org.apache.rat.utils.Log) defaultLog1);
        org.apache.rat.ReportConfiguration reportConfiguration33 = new org.apache.rat.ReportConfiguration((org.apache.rat.utils.Log) defaultLog1);
        org.apache.rat.utils.Log log34 = null;
        org.apache.rat.ReportConfiguration reportConfiguration35 = new org.apache.rat.ReportConfiguration(log34);
        java.lang.String[] strArray79 = new java.lang.String[] { "http://org/apache/rat/meta-data", "GNU General Public License, version 2", "Modified BSD License", "COMMON DEVELOPMENT AND DISTRIBUTION LICENSE Version 1.0", "The MIT License", "OASIS", "?????", "Datum [ name ='http://org/apache/rat/meta-data#LicenseFamilyCategory',value ='OASIS ']", "6486879f-fc81-4b57-aec7-c4c77d540c30", "MANIFEST.MF", "?????", "GEN  ", "GPL3 ", "http://org/apache/rat/meta-data#HeaderCategory", "DOJO ", "true", "GPL2 ", "?????", "Apache License Version 2.0", "OASIS", "W3CD ", "OASIS", "?????", "OASIS Open License", "", "standard", "GPL2 ", "GEN  ", "W3CD ", "TMF  ", ".cvsignore", "Copyright Builder: s:null e:null o:null", "ef7a8b13-64c3-4510-bb0c-dbf208e1e73f", "274c6a15-09f6-4bfd-ac53-1827770eb507", "GNU General Public License, version 2", "W3CD ", ".cvsignore", "Apache License Version 2.0", "GEN  ", "W3C Software Copyright", "Modified BSD License", "GPL2 ", "JAVA" };
        java.util.ArrayList<java.lang.String> strList80 = new java.util.ArrayList<java.lang.String>();
        boolean boolean81 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strList80, strArray79);
        reportConfiguration35.removeApprovedLicenseCategories((java.util.Collection<java.lang.String>) strList80);
        java.lang.String str83 = reportConfiguration35.getCopyrightMessage();
        org.apache.rat.utils.Log log84 = null;
        org.apache.rat.ReportConfiguration reportConfiguration85 = new org.apache.rat.ReportConfiguration(log84);
        reportConfiguration85.addApprovedLicenseCategory(".cvsignore");
        boolean boolean88 = reportConfiguration85.isStyleReport();
        org.apache.commons.io.function.IOSupplier<java.io.InputStream> inputStreamIOSupplier89 = org.apache.rat.Defaults.getPlainStyleSheet();
        reportConfiguration85.setStyleSheet(inputStreamIOSupplier89);
        reportConfiguration35.setStyleSheet(inputStreamIOSupplier89);
        reportConfiguration33.setStyleSheet(inputStreamIOSupplier89);
        org.junit.Assert.assertNotNull(defaultLog1);
        org.junit.Assert.assertNotNull(builder2);
        org.junit.Assert.assertNotNull(builder4);
        org.junit.Assert.assertTrue("'" + state9 + "' != '" + org.apache.rat.analysis.IHeaderMatcher.State.f + "'", state9.equals(org.apache.rat.analysis.IHeaderMatcher.State.f));
        org.junit.Assert.assertNotNull(builder10);
        org.junit.Assert.assertNotNull(builder12);
        org.junit.Assert.assertNull(obj14);
        org.junit.Assert.assertNotNull(defaultLog15);
        org.junit.Assert.assertNotNull(builder16);
        org.junit.Assert.assertNotNull(builder18);
        org.junit.Assert.assertTrue("'" + state23 + "' != '" + org.apache.rat.analysis.IHeaderMatcher.State.f + "'", state23.equals(org.apache.rat.analysis.IHeaderMatcher.State.f));
        org.junit.Assert.assertNotNull(builder24);
        org.junit.Assert.assertNotNull(builder26);
        org.junit.Assert.assertTrue("'" + level28 + "' != '" + org.apache.rat.utils.Log.Level.INFO + "'", level28.equals(org.apache.rat.utils.Log.Level.INFO));
        org.junit.Assert.assertNotNull(strArray79);
        org.junit.Assert.assertTrue("'" + boolean81 + "' != '" + true + "'", boolean81 == true);
        org.junit.Assert.assertNull(str83);
        org.junit.Assert.assertTrue("'" + boolean88 + "' != '" + true + "'", boolean88 == true);
        org.junit.Assert.assertNotNull(inputStreamIOSupplier89);
    }

    @Test
    public void test12667() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest25.test12667");
        java.lang.String[] strArray5 = new java.lang.String[] { "http://org/apache/rat/meta-data#LicenseFamilyCategory", "Datum [ name ='http://org/apache/rat/meta-data#LicenseFamilyCategory',value ='GPL1  ']", "MANIFEST.MF", "AllBuilder:", "The MIT License" };
        org.apache.rat.utils.ReportingSet<java.lang.String> strSet6 = new org.apache.rat.utils.ReportingSet<java.lang.String>();
        boolean boolean7 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strSet6, strArray5);
        boolean boolean9 = strSet6.addIfNotPresent("http://org/apache/rat/meta-data#LicenseFamilyName");
        java.lang.String str10 = strSet6.first();
        java.util.stream.Stream<java.lang.String> strStream11 = strSet6.stream();
        org.apache.rat.utils.Log log12 = null;
        org.apache.rat.ReportConfiguration reportConfiguration13 = new org.apache.rat.ReportConfiguration(log12);
        org.apache.rat.report.claim.ClaimStatistic claimStatistic14 = org.apache.rat.Reporter.report(reportConfiguration13);
        reportConfiguration13.addApprovedLicenseCategory("Copyright Builder: s:null e:null o:null");
        java.util.SortedSet<java.lang.String> strSet17 = reportConfiguration13.getApprovedLicenseCategories();
        java.io.FilenameFilter filenameFilter18 = reportConfiguration13.getInputFileFilter();
        org.apache.rat.utils.Log log19 = null;
        org.apache.rat.ReportConfiguration reportConfiguration20 = new org.apache.rat.ReportConfiguration(log19);
        org.apache.rat.report.claim.ClaimStatistic claimStatistic21 = org.apache.rat.Reporter.report(reportConfiguration20);
        org.apache.rat.utils.ReportingSet.Options options22 = org.apache.rat.utils.ReportingSet.Options.OVERWRITE;
        reportConfiguration20.licenseDuplicateOption(options22);
        java.util.SortedSet<org.apache.rat.license.ILicenseFamily> iLicenseFamilySet25 = org.apache.rat.license.LicenseFamilySetFactory.emptyLicenseFamilySet();
        org.apache.rat.license.ILicenseFamily iLicenseFamily26 = org.apache.rat.license.LicenseFamilySetFactory.search("http://org/apache/rat/meta-data", iLicenseFamilySet25);
        org.apache.rat.policy.DefaultPolicy defaultPolicy27 = new org.apache.rat.policy.DefaultPolicy((java.util.Collection<org.apache.rat.license.ILicenseFamily>) iLicenseFamilySet25);
        reportConfiguration20.addFamilies((java.util.Collection<org.apache.rat.license.ILicenseFamily>) iLicenseFamilySet25);
        org.apache.rat.utils.ReportingSet<java.lang.String> strSet29 = new org.apache.rat.utils.ReportingSet<java.lang.String>();
        java.lang.Object[] objArray30 = strSet29.toArray();
        org.apache.rat.license.LicenseFamilySetFactory licenseFamilySetFactory31 = new org.apache.rat.license.LicenseFamilySetFactory(iLicenseFamilySet25, (java.util.Collection<java.lang.String>) strSet29);
        reportConfiguration13.addApprovedLicenseCategories((java.util.Collection<java.lang.String>) strSet29);
        java.util.stream.Stream<java.lang.String> strStream33 = strSet29.parallelStream();
        org.apache.rat.license.ILicenseFamily[] iLicenseFamilyArray34 = new org.apache.rat.license.ILicenseFamily[] {};
        java.util.ArrayList<org.apache.rat.license.ILicenseFamily> iLicenseFamilyList35 = new java.util.ArrayList<org.apache.rat.license.ILicenseFamily>();
        boolean boolean36 = java.util.Collections.addAll((java.util.Collection<org.apache.rat.license.ILicenseFamily>) iLicenseFamilyList35, iLicenseFamilyArray34);
        org.apache.rat.policy.DefaultPolicy defaultPolicy37 = new org.apache.rat.policy.DefaultPolicy((java.util.Collection<org.apache.rat.license.ILicenseFamily>) iLicenseFamilyList35);
        java.util.SortedSet<org.apache.rat.license.ILicenseFamily> iLicenseFamilySet38 = defaultPolicy37.getApprovedLicenseNames();
        org.apache.rat.api.Document document39 = null;
        defaultPolicy37.analyse(document39);
        org.apache.rat.analysis.license.FullTextMatchingLicense fullTextMatchingLicense41 = new org.apache.rat.analysis.license.FullTextMatchingLicense();
        fullTextMatchingLicense41.setLicenseFamilyName("hi!");
        java.lang.String str44 = fullTextMatchingLicense41.getLicenseFamilyCategory();
        java.lang.String str45 = fullTextMatchingLicense41.getLicenseFamilyName();
        fullTextMatchingLicense41.setLicenseFamilyName("SpdxBuilder: null");
        fullTextMatchingLicense41.setLicenseFamilyCategory("TMF");
        org.apache.rat.license.ILicenseFamily iLicenseFamily50 = fullTextMatchingLicense41.getLicenseFamily();
        defaultPolicy37.add(iLicenseFamily50);
        org.apache.rat.api.Document document52 = null;
        defaultPolicy37.analyse(document52);
        java.util.SortedSet<org.apache.rat.license.ILicenseFamily> iLicenseFamilySet54 = defaultPolicy37.getApprovedLicenseNames();
        boolean boolean55 = strSet29.retainAll((java.util.Collection<org.apache.rat.license.ILicenseFamily>) iLicenseFamilySet54);
        // The following exception was thrown during execution in test generation
        try {
            boolean boolean56 = strSet6.removeAll((java.util.Collection<org.apache.rat.license.ILicenseFamily>) iLicenseFamilySet54);
            org.junit.Assert.fail("Expected exception of type java.lang.ClassCastException; message: null");
        } catch (java.lang.ClassCastException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(strArray5);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + true + "'", boolean7 == true);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + true + "'", boolean9 == true);
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "AllBuilder:" + "'", str10, "AllBuilder:");
        org.junit.Assert.assertNotNull(strStream11);
        org.junit.Assert.assertNull(claimStatistic14);
        org.junit.Assert.assertNotNull(strSet17);
        org.junit.Assert.assertNull(filenameFilter18);
        org.junit.Assert.assertNull(claimStatistic21);
        org.junit.Assert.assertTrue("'" + options22 + "' != '" + org.apache.rat.utils.ReportingSet.Options.OVERWRITE + "'", options22.equals(org.apache.rat.utils.ReportingSet.Options.OVERWRITE));
        org.junit.Assert.assertNotNull(iLicenseFamilySet25);
        org.junit.Assert.assertNull(iLicenseFamily26);
        org.junit.Assert.assertNotNull(objArray30);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray30), "[]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray30), "[]");
        org.junit.Assert.assertNotNull(strStream33);
        org.junit.Assert.assertNotNull(iLicenseFamilyArray34);
        org.junit.Assert.assertTrue("'" + boolean36 + "' != '" + false + "'", boolean36 == false);
        org.junit.Assert.assertNotNull(iLicenseFamilySet38);
        org.junit.Assert.assertNull(str44);
        org.junit.Assert.assertEquals("'" + str45 + "' != '" + "hi!" + "'", str45, "hi!");
        org.junit.Assert.assertNotNull(iLicenseFamily50);
        org.junit.Assert.assertNotNull(iLicenseFamilySet54);
        org.junit.Assert.assertTrue("'" + boolean55 + "' != '" + false + "'", boolean55 == false);
    }

    @Test
    public void test12668() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest25.test12668");
        org.apache.rat.configuration.builders.NotBuilder notBuilder0 = new org.apache.rat.configuration.builders.NotBuilder();
        java.lang.String str1 = notBuilder0.toString();
        org.apache.rat.configuration.builders.MatcherRefBuilder matcherRefBuilder2 = org.apache.rat.analysis.IHeaderMatcher.Builder.matcherRef();
        boolean boolean3 = matcherRefBuilder2.hasId();
        java.util.Map<java.lang.String, org.apache.rat.analysis.IHeaderMatcher> strMap4 = null;
        org.apache.rat.configuration.builders.MatcherRefBuilder matcherRefBuilder5 = matcherRefBuilder2.setMatchers(strMap4);
        org.apache.rat.configuration.builders.AllBuilder allBuilder6 = new org.apache.rat.configuration.builders.AllBuilder();
        org.apache.rat.configuration.builders.CopyrightBuilder copyrightBuilder7 = org.apache.rat.analysis.IHeaderMatcher.Builder.copyright();
        org.apache.rat.configuration.builders.CopyrightBuilder copyrightBuilder9 = copyrightBuilder7.setStart("OASIS");
        java.lang.String str10 = copyrightBuilder7.toString();
        org.apache.rat.configuration.builders.CopyrightBuilder copyrightBuilder12 = copyrightBuilder7.setStart("223f0aba-15d4-49e9-901e-5740c137aebf");
        org.apache.rat.configuration.builders.MatcherRefBuilder matcherRefBuilder13 = org.apache.rat.analysis.IHeaderMatcher.Builder.matcherRef();
        boolean boolean14 = matcherRefBuilder13.hasId();
        org.apache.rat.configuration.builders.CopyrightBuilder copyrightBuilder15 = org.apache.rat.analysis.IHeaderMatcher.Builder.copyright();
        org.apache.rat.configuration.builders.CopyrightBuilder copyrightBuilder17 = copyrightBuilder15.setStart("OASIS");
        java.lang.String str18 = copyrightBuilder15.toString();
        org.apache.rat.configuration.builders.CopyrightBuilder copyrightBuilder20 = copyrightBuilder15.setStart("223f0aba-15d4-49e9-901e-5740c137aebf");
        org.apache.rat.configuration.builders.CopyrightBuilder copyrightBuilder21 = org.apache.rat.analysis.IHeaderMatcher.Builder.copyright();
        org.apache.rat.configuration.builders.CopyrightBuilder copyrightBuilder22 = org.apache.rat.analysis.IHeaderMatcher.Builder.copyright();
        java.lang.String str23 = copyrightBuilder22.toString();
        org.apache.rat.configuration.builders.CopyrightBuilder copyrightBuilder25 = copyrightBuilder22.setEnd(".cvsignore");
        boolean boolean26 = copyrightBuilder22.hasId();
        org.apache.rat.configuration.builders.CopyrightBuilder copyrightBuilder27 = org.apache.rat.analysis.IHeaderMatcher.Builder.copyright();
        java.lang.String str28 = copyrightBuilder27.toString();
        org.apache.rat.configuration.builders.CopyrightBuilder copyrightBuilder30 = copyrightBuilder27.setEnd(".cvsignore");
        boolean boolean31 = copyrightBuilder27.hasId();
        java.lang.String str32 = copyrightBuilder27.toString();
        org.apache.rat.configuration.builders.CopyrightBuilder copyrightBuilder33 = org.apache.rat.analysis.IHeaderMatcher.Builder.copyright();
        org.apache.rat.configuration.builders.CopyrightBuilder copyrightBuilder35 = copyrightBuilder33.setStart("OASIS");
        org.apache.rat.configuration.builders.AnyBuilder anyBuilder36 = org.apache.rat.analysis.IHeaderMatcher.Builder.any();
        org.apache.rat.configuration.builders.MatcherRefBuilder matcherRefBuilder37 = org.apache.rat.analysis.IHeaderMatcher.Builder.matcherRef();
        boolean boolean38 = matcherRefBuilder37.hasId();
        java.util.Map<java.lang.String, org.apache.rat.analysis.IHeaderMatcher> strMap39 = null;
        org.apache.rat.configuration.builders.MatcherRefBuilder matcherRefBuilder40 = matcherRefBuilder37.setMatchers(strMap39);
        org.apache.rat.configuration.builders.CopyrightBuilder copyrightBuilder41 = org.apache.rat.analysis.IHeaderMatcher.Builder.copyright();
        org.apache.rat.configuration.builders.MatcherRefBuilder matcherRefBuilder42 = org.apache.rat.analysis.IHeaderMatcher.Builder.matcherRef();
        boolean boolean43 = matcherRefBuilder42.hasId();
        java.lang.String str44 = matcherRefBuilder42.toString();
        java.util.Map<java.lang.String, org.apache.rat.analysis.IHeaderMatcher> strMap45 = null;
        org.apache.rat.configuration.builders.MatcherRefBuilder matcherRefBuilder46 = matcherRefBuilder42.setMatchers(strMap45);
        org.apache.rat.analysis.IHeaderMatcher.Builder[] builderArray47 = new org.apache.rat.analysis.IHeaderMatcher.Builder[] { matcherRefBuilder2, allBuilder6, copyrightBuilder12, matcherRefBuilder13, copyrightBuilder15, copyrightBuilder21, copyrightBuilder22, copyrightBuilder27, copyrightBuilder33, anyBuilder36, matcherRefBuilder37, copyrightBuilder41, matcherRefBuilder42 };
        java.util.ArrayList<org.apache.rat.analysis.IHeaderMatcher.Builder> builderList48 = new java.util.ArrayList<org.apache.rat.analysis.IHeaderMatcher.Builder>();
        boolean boolean49 = java.util.Collections.addAll((java.util.Collection<org.apache.rat.analysis.IHeaderMatcher.Builder>) builderList48, builderArray47);
        org.apache.rat.configuration.builders.AbstractBuilder abstractBuilder50 = notBuilder0.add((java.util.Collection<org.apache.rat.analysis.IHeaderMatcher.Builder>) builderList48);
        java.lang.String str51 = notBuilder0.toString();
        java.lang.String str52 = notBuilder0.toString();
        java.lang.String str53 = notBuilder0.toString();
        java.lang.String str54 = notBuilder0.toString();
        org.apache.rat.configuration.builders.SpdxBuilder spdxBuilder55 = org.apache.rat.analysis.IHeaderMatcher.Builder.spdx();
        java.lang.String str56 = spdxBuilder55.toString();
        org.apache.rat.configuration.builders.SpdxBuilder spdxBuilder58 = spdxBuilder55.setName("ef7a8b13-64c3-4510-bb0c-dbf208e1e73f");
        org.apache.rat.analysis.IHeaderMatcher iHeaderMatcher59 = spdxBuilder55.build();
        org.apache.rat.configuration.builders.SpdxBuilder spdxBuilder61 = spdxBuilder55.setName("641dafc1-13c3-45d4-8272-f36f10392c53");
        org.apache.rat.analysis.IHeaderMatcher iHeaderMatcher62 = spdxBuilder61.build();
        org.apache.rat.configuration.builders.SpdxBuilder spdxBuilder64 = spdxBuilder61.setName("Datum [ name ='http://org/apache/rat/meta-data#LicenseFamilyName',value ='????? ']");
        org.apache.rat.analysis.IHeaderMatcher iHeaderMatcher65 = spdxBuilder61.build();
        org.apache.rat.configuration.builders.AbstractBuilder abstractBuilder66 = notBuilder0.add((org.apache.rat.analysis.IHeaderMatcher.Builder) spdxBuilder61);
        java.lang.String str67 = notBuilder0.toString();
        // The following exception was thrown during execution in test generation
        try {
            org.apache.rat.analysis.IHeaderMatcher iHeaderMatcher68 = notBuilder0.build();
            org.junit.Assert.fail("Expected exception of type org.apache.rat.ConfigurationException; message: 'not' type matcher requires one and only one enclosed matcher");
        } catch (org.apache.rat.ConfigurationException e) {
            // Expected exception.
        }
        org.junit.Assert.assertEquals("'" + str1 + "' != '" + "NotBuilder: null" + "'", str1, "NotBuilder: null");
        org.junit.Assert.assertNotNull(matcherRefBuilder2);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertNotNull(matcherRefBuilder5);
        org.junit.Assert.assertNotNull(copyrightBuilder7);
        org.junit.Assert.assertNotNull(copyrightBuilder9);
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "Copyright Builder: s:OASIS e:null o:null" + "'", str10, "Copyright Builder: s:OASIS e:null o:null");
        org.junit.Assert.assertNotNull(copyrightBuilder12);
        org.junit.Assert.assertNotNull(matcherRefBuilder13);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
        org.junit.Assert.assertNotNull(copyrightBuilder15);
        org.junit.Assert.assertNotNull(copyrightBuilder17);
        org.junit.Assert.assertEquals("'" + str18 + "' != '" + "Copyright Builder: s:OASIS e:null o:null" + "'", str18, "Copyright Builder: s:OASIS e:null o:null");
        org.junit.Assert.assertNotNull(copyrightBuilder20);
        org.junit.Assert.assertNotNull(copyrightBuilder21);
        org.junit.Assert.assertNotNull(copyrightBuilder22);
        org.junit.Assert.assertEquals("'" + str23 + "' != '" + "Copyright Builder: s:null e:null o:null" + "'", str23, "Copyright Builder: s:null e:null o:null");
        org.junit.Assert.assertNotNull(copyrightBuilder25);
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + false + "'", boolean26 == false);
        org.junit.Assert.assertNotNull(copyrightBuilder27);
        org.junit.Assert.assertEquals("'" + str28 + "' != '" + "Copyright Builder: s:null e:null o:null" + "'", str28, "Copyright Builder: s:null e:null o:null");
        org.junit.Assert.assertNotNull(copyrightBuilder30);
        org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + false + "'", boolean31 == false);
        org.junit.Assert.assertEquals("'" + str32 + "' != '" + "Copyright Builder: s:null e:.cvsignore o:null" + "'", str32, "Copyright Builder: s:null e:.cvsignore o:null");
        org.junit.Assert.assertNotNull(copyrightBuilder33);
        org.junit.Assert.assertNotNull(copyrightBuilder35);
        org.junit.Assert.assertNotNull(anyBuilder36);
        org.junit.Assert.assertNotNull(matcherRefBuilder37);
        org.junit.Assert.assertTrue("'" + boolean38 + "' != '" + false + "'", boolean38 == false);
        org.junit.Assert.assertNotNull(matcherRefBuilder40);
        org.junit.Assert.assertNotNull(copyrightBuilder41);
        org.junit.Assert.assertNotNull(matcherRefBuilder42);
        org.junit.Assert.assertTrue("'" + boolean43 + "' != '" + false + "'", boolean43 == false);
        org.junit.Assert.assertEquals("'" + str44 + "' != '" + "MathcerRefBuilder: null" + "'", str44, "MathcerRefBuilder: null");
        org.junit.Assert.assertNotNull(matcherRefBuilder46);
        org.junit.Assert.assertNotNull(builderArray47);
        org.junit.Assert.assertTrue("'" + boolean49 + "' != '" + true + "'", boolean49 == true);
        org.junit.Assert.assertNotNull(abstractBuilder50);
        org.junit.Assert.assertEquals("'" + str51 + "' != '" + "NotBuilder: MathcerRefBuilder: null" + "'", str51, "NotBuilder: MathcerRefBuilder: null");
        org.junit.Assert.assertEquals("'" + str52 + "' != '" + "NotBuilder: MathcerRefBuilder: null" + "'", str52, "NotBuilder: MathcerRefBuilder: null");
        org.junit.Assert.assertEquals("'" + str53 + "' != '" + "NotBuilder: MathcerRefBuilder: null" + "'", str53, "NotBuilder: MathcerRefBuilder: null");
        org.junit.Assert.assertEquals("'" + str54 + "' != '" + "NotBuilder: MathcerRefBuilder: null" + "'", str54, "NotBuilder: MathcerRefBuilder: null");
        org.junit.Assert.assertNotNull(spdxBuilder55);
        org.junit.Assert.assertEquals("'" + str56 + "' != '" + "SpdxBuilder: null" + "'", str56, "SpdxBuilder: null");
        org.junit.Assert.assertNotNull(spdxBuilder58);
        org.junit.Assert.assertNotNull(iHeaderMatcher59);
        org.junit.Assert.assertNotNull(spdxBuilder61);
        org.junit.Assert.assertNotNull(iHeaderMatcher62);
        org.junit.Assert.assertNotNull(spdxBuilder64);
        org.junit.Assert.assertNotNull(iHeaderMatcher65);
        org.junit.Assert.assertNotNull(abstractBuilder66);
        org.junit.Assert.assertEquals("'" + str67 + "' != '" + "NotBuilder: MathcerRefBuilder: null" + "'", str67, "NotBuilder: MathcerRefBuilder: null");
    }

    @Test
    public void test12669() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest25.test12669");
        org.apache.rat.license.SimpleLicenseFamily simpleLicenseFamily0 = new org.apache.rat.license.SimpleLicenseFamily();
        java.lang.String str1 = simpleLicenseFamily0.getFamilyName();
        java.lang.String str2 = simpleLicenseFamily0.getFamilyCategory();
        simpleLicenseFamily0.setFamilyCategory("W3C  ");
        java.lang.String str5 = simpleLicenseFamily0.getFamilyName();
        simpleLicenseFamily0.setFamilyCategory("http://org/apache/rat/meta-data#HeaderSample");
        java.lang.String str8 = simpleLicenseFamily0.toString();
        java.lang.String str9 = simpleLicenseFamily0.toString();
        org.junit.Assert.assertNull(str1);
        org.junit.Assert.assertNull(str2);
        org.junit.Assert.assertNull(str5);
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "http://org/apache/rat/meta-data#HeaderSample null" + "'", str8, "http://org/apache/rat/meta-data#HeaderSample null");
        org.junit.Assert.assertEquals("'" + str9 + "' != '" + "http://org/apache/rat/meta-data#HeaderSample null" + "'", str9, "http://org/apache/rat/meta-data#HeaderSample null");
    }

    @Test
    public void test12670() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest25.test12670");
        org.apache.rat.utils.DefaultLog defaultLog0 = org.apache.rat.utils.DefaultLog.INSTANCE;
        org.apache.rat.configuration.builders.AllBuilder allBuilder1 = new org.apache.rat.configuration.builders.AllBuilder();
        org.apache.rat.configuration.builders.MatcherRefBuilder matcherRefBuilder2 = org.apache.rat.analysis.IHeaderMatcher.Builder.matcherRef();
        boolean boolean3 = matcherRefBuilder2.hasId();
        java.lang.String str4 = matcherRefBuilder2.toString();
        org.apache.rat.configuration.builders.AnyBuilder anyBuilder5 = org.apache.rat.analysis.IHeaderMatcher.Builder.any();
        org.apache.rat.configuration.builders.NotBuilder notBuilder6 = new org.apache.rat.configuration.builders.NotBuilder();
        java.lang.String str7 = notBuilder6.toString();
        org.apache.rat.configuration.builders.MatcherRefBuilder matcherRefBuilder8 = org.apache.rat.analysis.IHeaderMatcher.Builder.matcherRef();
        boolean boolean9 = matcherRefBuilder8.hasId();
        java.util.Map<java.lang.String, org.apache.rat.analysis.IHeaderMatcher> strMap10 = null;
        org.apache.rat.configuration.builders.MatcherRefBuilder matcherRefBuilder11 = matcherRefBuilder8.setMatchers(strMap10);
        org.apache.rat.configuration.builders.AllBuilder allBuilder12 = new org.apache.rat.configuration.builders.AllBuilder();
        org.apache.rat.configuration.builders.CopyrightBuilder copyrightBuilder13 = org.apache.rat.analysis.IHeaderMatcher.Builder.copyright();
        org.apache.rat.configuration.builders.CopyrightBuilder copyrightBuilder15 = copyrightBuilder13.setStart("OASIS");
        java.lang.String str16 = copyrightBuilder13.toString();
        org.apache.rat.configuration.builders.CopyrightBuilder copyrightBuilder18 = copyrightBuilder13.setStart("223f0aba-15d4-49e9-901e-5740c137aebf");
        org.apache.rat.configuration.builders.MatcherRefBuilder matcherRefBuilder19 = org.apache.rat.analysis.IHeaderMatcher.Builder.matcherRef();
        boolean boolean20 = matcherRefBuilder19.hasId();
        org.apache.rat.configuration.builders.CopyrightBuilder copyrightBuilder21 = org.apache.rat.analysis.IHeaderMatcher.Builder.copyright();
        org.apache.rat.configuration.builders.CopyrightBuilder copyrightBuilder23 = copyrightBuilder21.setStart("OASIS");
        java.lang.String str24 = copyrightBuilder21.toString();
        org.apache.rat.configuration.builders.CopyrightBuilder copyrightBuilder26 = copyrightBuilder21.setStart("223f0aba-15d4-49e9-901e-5740c137aebf");
        org.apache.rat.configuration.builders.CopyrightBuilder copyrightBuilder27 = org.apache.rat.analysis.IHeaderMatcher.Builder.copyright();
        org.apache.rat.configuration.builders.CopyrightBuilder copyrightBuilder28 = org.apache.rat.analysis.IHeaderMatcher.Builder.copyright();
        java.lang.String str29 = copyrightBuilder28.toString();
        org.apache.rat.configuration.builders.CopyrightBuilder copyrightBuilder31 = copyrightBuilder28.setEnd(".cvsignore");
        boolean boolean32 = copyrightBuilder28.hasId();
        org.apache.rat.configuration.builders.CopyrightBuilder copyrightBuilder33 = org.apache.rat.analysis.IHeaderMatcher.Builder.copyright();
        java.lang.String str34 = copyrightBuilder33.toString();
        org.apache.rat.configuration.builders.CopyrightBuilder copyrightBuilder36 = copyrightBuilder33.setEnd(".cvsignore");
        boolean boolean37 = copyrightBuilder33.hasId();
        java.lang.String str38 = copyrightBuilder33.toString();
        org.apache.rat.configuration.builders.CopyrightBuilder copyrightBuilder39 = org.apache.rat.analysis.IHeaderMatcher.Builder.copyright();
        org.apache.rat.configuration.builders.CopyrightBuilder copyrightBuilder41 = copyrightBuilder39.setStart("OASIS");
        org.apache.rat.configuration.builders.AnyBuilder anyBuilder42 = org.apache.rat.analysis.IHeaderMatcher.Builder.any();
        org.apache.rat.configuration.builders.MatcherRefBuilder matcherRefBuilder43 = org.apache.rat.analysis.IHeaderMatcher.Builder.matcherRef();
        boolean boolean44 = matcherRefBuilder43.hasId();
        java.util.Map<java.lang.String, org.apache.rat.analysis.IHeaderMatcher> strMap45 = null;
        org.apache.rat.configuration.builders.MatcherRefBuilder matcherRefBuilder46 = matcherRefBuilder43.setMatchers(strMap45);
        org.apache.rat.configuration.builders.CopyrightBuilder copyrightBuilder47 = org.apache.rat.analysis.IHeaderMatcher.Builder.copyright();
        org.apache.rat.configuration.builders.MatcherRefBuilder matcherRefBuilder48 = org.apache.rat.analysis.IHeaderMatcher.Builder.matcherRef();
        boolean boolean49 = matcherRefBuilder48.hasId();
        java.lang.String str50 = matcherRefBuilder48.toString();
        java.util.Map<java.lang.String, org.apache.rat.analysis.IHeaderMatcher> strMap51 = null;
        org.apache.rat.configuration.builders.MatcherRefBuilder matcherRefBuilder52 = matcherRefBuilder48.setMatchers(strMap51);
        org.apache.rat.analysis.IHeaderMatcher.Builder[] builderArray53 = new org.apache.rat.analysis.IHeaderMatcher.Builder[] { matcherRefBuilder8, allBuilder12, copyrightBuilder18, matcherRefBuilder19, copyrightBuilder21, copyrightBuilder27, copyrightBuilder28, copyrightBuilder33, copyrightBuilder39, anyBuilder42, matcherRefBuilder43, copyrightBuilder47, matcherRefBuilder48 };
        java.util.ArrayList<org.apache.rat.analysis.IHeaderMatcher.Builder> builderList54 = new java.util.ArrayList<org.apache.rat.analysis.IHeaderMatcher.Builder>();
        boolean boolean55 = java.util.Collections.addAll((java.util.Collection<org.apache.rat.analysis.IHeaderMatcher.Builder>) builderList54, builderArray53);
        org.apache.rat.configuration.builders.AbstractBuilder abstractBuilder56 = notBuilder6.add((java.util.Collection<org.apache.rat.analysis.IHeaderMatcher.Builder>) builderList54);
        org.apache.rat.configuration.builders.MatcherRefBuilder matcherRefBuilder57 = new org.apache.rat.configuration.builders.MatcherRefBuilder();
        org.apache.rat.analysis.IHeaderMatcher.Builder[] builderArray58 = new org.apache.rat.analysis.IHeaderMatcher.Builder[] { matcherRefBuilder2, anyBuilder5, notBuilder6, matcherRefBuilder57 };
        java.util.ArrayList<org.apache.rat.analysis.IHeaderMatcher.Builder> builderList59 = new java.util.ArrayList<org.apache.rat.analysis.IHeaderMatcher.Builder>();
        boolean boolean60 = java.util.Collections.addAll((java.util.Collection<org.apache.rat.analysis.IHeaderMatcher.Builder>) builderList59, builderArray58);
        org.apache.rat.configuration.builders.AbstractBuilder abstractBuilder61 = allBuilder1.add((java.util.Collection<org.apache.rat.analysis.IHeaderMatcher.Builder>) builderList59);
        defaultLog0.info((java.lang.Object) allBuilder1);
        org.apache.rat.ReportConfiguration reportConfiguration63 = new org.apache.rat.ReportConfiguration((org.apache.rat.utils.Log) defaultLog0);
        org.apache.rat.utils.Log log64 = null;
        org.apache.rat.ReportConfiguration reportConfiguration65 = new org.apache.rat.ReportConfiguration(log64);
        reportConfiguration65.addApprovedLicenseCategory(".cvsignore");
        org.apache.rat.utils.Log.Level level68 = org.apache.rat.utils.Log.Level.ERROR;
        reportConfiguration65.logFamilyCollisions(level68);
        defaultLog0.setLevel(level68);
        org.apache.rat.annotation.ApacheV2LicenseAppender apacheV2LicenseAppender72 = new org.apache.rat.annotation.ApacheV2LicenseAppender((org.apache.rat.utils.Log) defaultLog0, "true");
        org.apache.rat.ReportConfiguration reportConfiguration73 = new org.apache.rat.ReportConfiguration((org.apache.rat.utils.Log) defaultLog0);
        org.apache.rat.ReportConfiguration reportConfiguration74 = new org.apache.rat.ReportConfiguration((org.apache.rat.utils.Log) defaultLog0);
        org.apache.rat.analysis.matchers.SimpleTextMatcher simpleTextMatcher76 = new org.apache.rat.analysis.matchers.SimpleTextMatcher("2953e6cb-20a5-4dcf-a9f5-85c51cc8c635");
        org.apache.rat.analysis.IHeaderMatcher.State state77 = simpleTextMatcher76.currentState();
        defaultLog0.error((java.lang.Object) simpleTextMatcher76);
        org.apache.rat.annotation.ApacheV2LicenseAppender apacheV2LicenseAppender79 = new org.apache.rat.annotation.ApacheV2LicenseAppender((org.apache.rat.utils.Log) defaultLog0);
        apacheV2LicenseAppender79.setForce(true);
        org.junit.Assert.assertNotNull(defaultLog0);
        org.junit.Assert.assertNotNull(matcherRefBuilder2);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "MathcerRefBuilder: null" + "'", str4, "MathcerRefBuilder: null");
        org.junit.Assert.assertNotNull(anyBuilder5);
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "NotBuilder: null" + "'", str7, "NotBuilder: null");
        org.junit.Assert.assertNotNull(matcherRefBuilder8);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertNotNull(matcherRefBuilder11);
        org.junit.Assert.assertNotNull(copyrightBuilder13);
        org.junit.Assert.assertNotNull(copyrightBuilder15);
        org.junit.Assert.assertEquals("'" + str16 + "' != '" + "Copyright Builder: s:OASIS e:null o:null" + "'", str16, "Copyright Builder: s:OASIS e:null o:null");
        org.junit.Assert.assertNotNull(copyrightBuilder18);
        org.junit.Assert.assertNotNull(matcherRefBuilder19);
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + false + "'", boolean20 == false);
        org.junit.Assert.assertNotNull(copyrightBuilder21);
        org.junit.Assert.assertNotNull(copyrightBuilder23);
        org.junit.Assert.assertEquals("'" + str24 + "' != '" + "Copyright Builder: s:OASIS e:null o:null" + "'", str24, "Copyright Builder: s:OASIS e:null o:null");
        org.junit.Assert.assertNotNull(copyrightBuilder26);
        org.junit.Assert.assertNotNull(copyrightBuilder27);
        org.junit.Assert.assertNotNull(copyrightBuilder28);
        org.junit.Assert.assertEquals("'" + str29 + "' != '" + "Copyright Builder: s:null e:null o:null" + "'", str29, "Copyright Builder: s:null e:null o:null");
        org.junit.Assert.assertNotNull(copyrightBuilder31);
        org.junit.Assert.assertTrue("'" + boolean32 + "' != '" + false + "'", boolean32 == false);
        org.junit.Assert.assertNotNull(copyrightBuilder33);
        org.junit.Assert.assertEquals("'" + str34 + "' != '" + "Copyright Builder: s:null e:null o:null" + "'", str34, "Copyright Builder: s:null e:null o:null");
        org.junit.Assert.assertNotNull(copyrightBuilder36);
        org.junit.Assert.assertTrue("'" + boolean37 + "' != '" + false + "'", boolean37 == false);
        org.junit.Assert.assertEquals("'" + str38 + "' != '" + "Copyright Builder: s:null e:.cvsignore o:null" + "'", str38, "Copyright Builder: s:null e:.cvsignore o:null");
        org.junit.Assert.assertNotNull(copyrightBuilder39);
        org.junit.Assert.assertNotNull(copyrightBuilder41);
        org.junit.Assert.assertNotNull(anyBuilder42);
        org.junit.Assert.assertNotNull(matcherRefBuilder43);
        org.junit.Assert.assertTrue("'" + boolean44 + "' != '" + false + "'", boolean44 == false);
        org.junit.Assert.assertNotNull(matcherRefBuilder46);
        org.junit.Assert.assertNotNull(copyrightBuilder47);
        org.junit.Assert.assertNotNull(matcherRefBuilder48);
        org.junit.Assert.assertTrue("'" + boolean49 + "' != '" + false + "'", boolean49 == false);
        org.junit.Assert.assertEquals("'" + str50 + "' != '" + "MathcerRefBuilder: null" + "'", str50, "MathcerRefBuilder: null");
        org.junit.Assert.assertNotNull(matcherRefBuilder52);
        org.junit.Assert.assertNotNull(builderArray53);
        org.junit.Assert.assertTrue("'" + boolean55 + "' != '" + true + "'", boolean55 == true);
        org.junit.Assert.assertNotNull(abstractBuilder56);
        org.junit.Assert.assertNotNull(builderArray58);
        org.junit.Assert.assertTrue("'" + boolean60 + "' != '" + true + "'", boolean60 == true);
        org.junit.Assert.assertNotNull(abstractBuilder61);
        org.junit.Assert.assertTrue("'" + level68 + "' != '" + org.apache.rat.utils.Log.Level.ERROR + "'", level68.equals(org.apache.rat.utils.Log.Level.ERROR));
        org.junit.Assert.assertTrue("'" + state77 + "' != '" + org.apache.rat.analysis.IHeaderMatcher.State.i + "'", state77.equals(org.apache.rat.analysis.IHeaderMatcher.State.i));
    }

    @Test
    public void test12671() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest25.test12671");
        org.apache.rat.header.HeaderBean headerBean0 = new org.apache.rat.header.HeaderBean();
        boolean boolean1 = headerBean0.isMatch();
        headerBean0.setMatch(false);
        headerBean0.setMatch(false);
        java.util.regex.Pattern pattern6 = null;
        headerBean0.setHeaderPattern(pattern6);
        java.util.regex.Pattern pattern8 = null;
        headerBean0.setHeaderPattern(pattern8);
        boolean boolean10 = headerBean0.isMatch();
        java.util.regex.Pattern pattern11 = null;
        headerBean0.setHeaderPattern(pattern11);
        java.util.regex.Pattern pattern13 = headerBean0.getHeaderPattern();
        org.junit.Assert.assertTrue("'" + boolean1 + "' != '" + false + "'", boolean1 == false);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertNull(pattern13);
    }

    @Test
    public void test12672() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest25.test12672");
        org.apache.rat.configuration.builders.AllBuilder allBuilder0 = new org.apache.rat.configuration.builders.AllBuilder();
        java.lang.String str1 = allBuilder0.toString();
        java.util.List<org.apache.rat.analysis.IHeaderMatcher> iHeaderMatcherList2 = allBuilder0.getChildren();
        org.apache.rat.configuration.builders.MatcherRefBuilder matcherRefBuilder3 = new org.apache.rat.configuration.builders.MatcherRefBuilder();
        org.apache.rat.configuration.builders.AbstractBuilder abstractBuilder4 = allBuilder0.add((org.apache.rat.analysis.IHeaderMatcher.Builder) matcherRefBuilder3);
        org.apache.rat.configuration.builders.MatcherRefBuilder matcherRefBuilder6 = matcherRefBuilder3.setRefId("http:");
        java.util.Map<java.lang.String, org.apache.rat.analysis.IHeaderMatcher> strMap7 = null;
        org.apache.rat.configuration.builders.MatcherRefBuilder matcherRefBuilder8 = matcherRefBuilder3.setMatchers(strMap7);
        org.apache.rat.configuration.builders.MatcherRefBuilder matcherRefBuilder10 = matcherRefBuilder3.setRefId("7E27CD62-4403-40AB-A9F5-16E7C59AB2F1");
        org.junit.Assert.assertEquals("'" + str1 + "' != '" + "AllBuilder:" + "'", str1, "AllBuilder:");
        org.junit.Assert.assertNotNull(iHeaderMatcherList2);
        org.junit.Assert.assertNotNull(abstractBuilder4);
        org.junit.Assert.assertNotNull(matcherRefBuilder6);
        org.junit.Assert.assertNotNull(matcherRefBuilder8);
        org.junit.Assert.assertNotNull(matcherRefBuilder10);
    }

    @Test
    public void test12673() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest25.test12673");
        boolean boolean1 = org.apache.rat.document.impl.guesser.NoteGuesser.isNote("RegexBuilder: MathcerRefBuilder: Datum [ name ='http://org/apache/rat/meta-data#LicenseFamilyName',value ='Academic Free License, Version 2.1 ']");
        org.junit.Assert.assertTrue("'" + boolean1 + "' != '" + false + "'", boolean1 == false);
    }

    @Test
    public void test12674() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest25.test12674");
        org.apache.rat.license.ILicense.Builder builder0 = org.apache.rat.license.ILicense.builder();
        org.apache.rat.license.ILicense.Builder builder2 = builder0.setLicenseFamilyCategory("");
        org.apache.rat.license.ILicense.Builder builder4 = builder2.setDerivedFrom("GEN  ");
        org.apache.rat.license.ILicense.Builder builder6 = builder4.setId("DOJO ");
        org.apache.rat.configuration.builders.CopyrightBuilder copyrightBuilder7 = org.apache.rat.analysis.IHeaderMatcher.Builder.copyright();
        java.lang.String str8 = copyrightBuilder7.toString();
        org.apache.rat.license.ILicense.Builder builder9 = builder4.setMatcher((org.apache.rat.analysis.IHeaderMatcher.Builder) copyrightBuilder7);
        org.apache.rat.analysis.IHeaderMatcher iHeaderMatcher10 = copyrightBuilder7.build();
        org.apache.rat.configuration.builders.CopyrightBuilder copyrightBuilder12 = copyrightBuilder7.setOwner("TextBuilder: Datum [ name ='http:...");
        org.apache.rat.configuration.builders.CopyrightBuilder copyrightBuilder14 = copyrightBuilder7.setEnd("a1d7a6cd-e548-4846-82aa-06426863977c");
        org.apache.rat.configuration.builders.CopyrightBuilder copyrightBuilder16 = copyrightBuilder7.setOwner("64868");
        org.apache.rat.configuration.builders.CopyrightBuilder copyrightBuilder18 = copyrightBuilder16.setStart("61b8469e-2b83-41af-af61-cdb66c0dc25e");
        org.junit.Assert.assertNotNull(builder0);
        org.junit.Assert.assertNotNull(builder2);
        org.junit.Assert.assertNotNull(builder4);
        org.junit.Assert.assertNotNull(builder6);
        org.junit.Assert.assertNotNull(copyrightBuilder7);
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "Copyright Builder: s:null e:null o:null" + "'", str8, "Copyright Builder: s:null e:null o:null");
        org.junit.Assert.assertNotNull(builder9);
        org.junit.Assert.assertNotNull(iHeaderMatcher10);
        org.junit.Assert.assertNotNull(copyrightBuilder12);
        org.junit.Assert.assertNotNull(copyrightBuilder14);
        org.junit.Assert.assertNotNull(copyrightBuilder16);
        org.junit.Assert.assertNotNull(copyrightBuilder18);
    }

    @Test
    public void test12675() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest25.test12675");
        org.apache.rat.analysis.matchers.FullTextMatcher fullTextMatcher1 = new org.apache.rat.analysis.matchers.FullTextMatcher("ef7a8b13-64c3-4510-bb0c-dbf208e1e73f");
        java.lang.String str2 = fullTextMatcher1.getId();
        fullTextMatcher1.reset();
        org.apache.rat.analysis.IHeaderMatcher.State state4 = fullTextMatcher1.finalizeState();
        java.lang.String str5 = state4.toString();
// flaky:         org.junit.Assert.assertEquals("'" + str2 + "' != '" + "01a695b3-6fe4-48a1-8c30-8d23a9917ada" + "'", str2, "01a695b3-6fe4-48a1-8c30-8d23a9917ada");
        org.junit.Assert.assertTrue("'" + state4 + "' != '" + org.apache.rat.analysis.IHeaderMatcher.State.f + "'", state4.equals(org.apache.rat.analysis.IHeaderMatcher.State.f));
        org.junit.Assert.assertEquals("'" + str5 + "' != '" + "f false" + "'", str5, "f false");
    }

    @Test
    public void test12676() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest25.test12676");
        org.apache.rat.utils.Log log0 = null;
        org.apache.rat.ReportConfiguration reportConfiguration1 = new org.apache.rat.ReportConfiguration(log0);
        org.apache.rat.report.claim.ClaimStatistic claimStatistic2 = org.apache.rat.Reporter.report(reportConfiguration1);
        org.apache.commons.io.function.IOSupplier<java.io.OutputStream> outputStreamIOSupplier3 = reportConfiguration1.getOutput();
        org.apache.rat.license.ILicense iLicense4 = null;
        reportConfiguration1.addLicense(iLicense4);
        org.apache.rat.Defaults.Builder builder6 = org.apache.rat.Defaults.builder();
        org.apache.rat.Defaults defaults7 = builder6.build();
        reportConfiguration1.setFrom(defaults7);
        org.apache.rat.license.ILicense[] iLicenseArray9 = new org.apache.rat.license.ILicense[] {};
        java.util.TreeSet<org.apache.rat.license.ILicense> iLicenseSet10 = new java.util.TreeSet<org.apache.rat.license.ILicense>();
        boolean boolean11 = java.util.Collections.addAll((java.util.Collection<org.apache.rat.license.ILicense>) iLicenseSet10, iLicenseArray9);
        java.lang.String[] strArray24 = new java.lang.String[] { "GPL2 ", "GPL1 ", "notice", "http://org/apache/rat/meta-data#LicenseFamilyName", "notice", "GPL2 ", "http://org/apache/rat/meta-data#LicenseFamilyName", "", "GPL2 ", "", "GPL1 ", "hi!" };
        java.util.ArrayList<java.lang.String> strList25 = new java.util.ArrayList<java.lang.String>();
        boolean boolean26 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strList25, strArray24);
        org.apache.rat.license.LicenseSetFactory licenseSetFactory27 = new org.apache.rat.license.LicenseSetFactory((java.util.SortedSet<org.apache.rat.license.ILicense>) iLicenseSet10, (java.util.Collection<java.lang.String>) strList25);
        org.apache.rat.license.LicenseSetFactory.LicenseFilter licenseFilter28 = org.apache.rat.license.LicenseSetFactory.LicenseFilter.all;
        java.util.SortedSet<org.apache.rat.license.ILicenseFamily> iLicenseFamilySet29 = licenseSetFactory27.getLicenseFamilies(licenseFilter28);
        java.util.SortedSet<org.apache.rat.license.ILicense> iLicenseSet30 = defaults7.getLicenses(licenseFilter28);
        org.apache.rat.utils.Log log31 = null;
        org.apache.rat.ReportConfiguration reportConfiguration32 = new org.apache.rat.ReportConfiguration(log31);
        org.apache.rat.report.claim.ClaimStatistic claimStatistic33 = org.apache.rat.Reporter.report(reportConfiguration32);
        org.apache.rat.utils.Log log34 = null;
        org.apache.rat.ReportConfiguration reportConfiguration35 = new org.apache.rat.ReportConfiguration(log34);
        org.apache.rat.report.claim.ClaimStatistic claimStatistic36 = org.apache.rat.Reporter.report(reportConfiguration35);
        org.apache.rat.utils.ReportingSet.Options options37 = org.apache.rat.utils.ReportingSet.Options.OVERWRITE;
        reportConfiguration35.licenseDuplicateOption(options37);
        reportConfiguration32.familyDuplicateOption(options37);
        boolean boolean40 = reportConfiguration32.isStyleReport();
        org.apache.rat.license.ILicense[] iLicenseArray41 = new org.apache.rat.license.ILicense[] {};
        java.util.TreeSet<org.apache.rat.license.ILicense> iLicenseSet42 = new java.util.TreeSet<org.apache.rat.license.ILicense>();
        boolean boolean43 = java.util.Collections.addAll((java.util.Collection<org.apache.rat.license.ILicense>) iLicenseSet42, iLicenseArray41);
        java.lang.String[] strArray56 = new java.lang.String[] { "GPL2 ", "GPL1 ", "notice", "http://org/apache/rat/meta-data#LicenseFamilyName", "notice", "GPL2 ", "http://org/apache/rat/meta-data#LicenseFamilyName", "", "GPL2 ", "", "GPL1 ", "hi!" };
        java.util.ArrayList<java.lang.String> strList57 = new java.util.ArrayList<java.lang.String>();
        boolean boolean58 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strList57, strArray56);
        org.apache.rat.license.LicenseSetFactory licenseSetFactory59 = new org.apache.rat.license.LicenseSetFactory((java.util.SortedSet<org.apache.rat.license.ILicense>) iLicenseSet42, (java.util.Collection<java.lang.String>) strList57);
        java.io.FilenameFilter filenameFilter60 = org.apache.rat.Report.parseExclusions((java.util.List<java.lang.String>) strList57);
        java.io.FilenameFilter filenameFilter61 = org.apache.rat.Report.parseExclusions((java.util.List<java.lang.String>) strList57);
        reportConfiguration32.addApprovedLicenseCategories((java.util.Collection<java.lang.String>) strList57);
        org.apache.rat.license.LicenseSetFactory licenseSetFactory63 = new org.apache.rat.license.LicenseSetFactory(iLicenseSet30, (java.util.Collection<java.lang.String>) strList57);
        org.apache.rat.utils.ReportingSet<org.apache.rat.license.ILicense> iLicenseSet64 = new org.apache.rat.utils.ReportingSet<org.apache.rat.license.ILicense>(iLicenseSet30);
        org.apache.rat.configuration.Format format65 = org.apache.rat.configuration.Format.XML;
        org.apache.rat.configuration.LicenseReader licenseReader66 = format65.licenseReader();
        java.util.SortedSet<org.apache.rat.license.ILicense> iLicenseSet67 = licenseReader66.readLicenses();
        java.lang.String[] strArray73 = new java.lang.String[] { "http://org/apache/rat/meta-data#LicenseFamilyCategory", "Datum [ name ='http://org/apache/rat/meta-data#LicenseFamilyCategory',value ='GPL1  ']", "MANIFEST.MF", "AllBuilder:", "The MIT License" };
        org.apache.rat.utils.ReportingSet<java.lang.String> strSet74 = new org.apache.rat.utils.ReportingSet<java.lang.String>();
        boolean boolean75 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strSet74, strArray73);
        boolean boolean77 = strSet74.addIfNotPresent("http://org/apache/rat/meta-data#LicenseFamilyName");
        boolean boolean79 = strSet74.addIfNotPresent("ef7a8b13-64c3-4510-bb0c-dbf208e1e73f");
        java.util.function.Function<java.lang.String, java.lang.String> strFunction80 = null;
        org.apache.rat.utils.ReportingSet<java.lang.String> strSet81 = strSet74.setMsgFormat(strFunction80);
        boolean boolean82 = strSet74.isEmpty();
        org.apache.rat.license.LicenseSetFactory licenseSetFactory83 = new org.apache.rat.license.LicenseSetFactory(iLicenseSet67, (java.util.Collection<java.lang.String>) strSet74);
        org.apache.rat.license.ILicenseFamily[] iLicenseFamilyArray84 = new org.apache.rat.license.ILicenseFamily[] {};
        java.util.ArrayList<org.apache.rat.license.ILicenseFamily> iLicenseFamilyList85 = new java.util.ArrayList<org.apache.rat.license.ILicenseFamily>();
        boolean boolean86 = java.util.Collections.addAll((java.util.Collection<org.apache.rat.license.ILicenseFamily>) iLicenseFamilyList85, iLicenseFamilyArray84);
        org.apache.rat.policy.DefaultPolicy defaultPolicy87 = new org.apache.rat.policy.DefaultPolicy((java.util.Collection<org.apache.rat.license.ILicenseFamily>) iLicenseFamilyList85);
        boolean boolean88 = strSet74.removeAll((java.util.Collection<org.apache.rat.license.ILicenseFamily>) iLicenseFamilyList85);
        java.util.Spliterator<java.lang.String> strSpliterator89 = strSet74.spliterator();
        org.apache.rat.license.LicenseSetFactory licenseSetFactory90 = new org.apache.rat.license.LicenseSetFactory(iLicenseSet30, (java.util.Collection<java.lang.String>) strSet74);
        java.lang.String str91 = strSet74.last();
        org.junit.Assert.assertNull(claimStatistic2);
        org.junit.Assert.assertNotNull(outputStreamIOSupplier3);
        org.junit.Assert.assertNotNull(builder6);
        org.junit.Assert.assertNotNull(defaults7);
        org.junit.Assert.assertNotNull(iLicenseArray9);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
        org.junit.Assert.assertNotNull(strArray24);
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + true + "'", boolean26 == true);
        org.junit.Assert.assertTrue("'" + licenseFilter28 + "' != '" + org.apache.rat.license.LicenseSetFactory.LicenseFilter.all + "'", licenseFilter28.equals(org.apache.rat.license.LicenseSetFactory.LicenseFilter.all));
        org.junit.Assert.assertNotNull(iLicenseFamilySet29);
        org.junit.Assert.assertNotNull(iLicenseSet30);
        org.junit.Assert.assertNull(claimStatistic33);
        org.junit.Assert.assertNull(claimStatistic36);
        org.junit.Assert.assertTrue("'" + options37 + "' != '" + org.apache.rat.utils.ReportingSet.Options.OVERWRITE + "'", options37.equals(org.apache.rat.utils.ReportingSet.Options.OVERWRITE));
        org.junit.Assert.assertTrue("'" + boolean40 + "' != '" + true + "'", boolean40 == true);
        org.junit.Assert.assertNotNull(iLicenseArray41);
        org.junit.Assert.assertTrue("'" + boolean43 + "' != '" + false + "'", boolean43 == false);
        org.junit.Assert.assertNotNull(strArray56);
        org.junit.Assert.assertTrue("'" + boolean58 + "' != '" + true + "'", boolean58 == true);
        org.junit.Assert.assertNotNull(filenameFilter60);
        org.junit.Assert.assertNotNull(filenameFilter61);
        org.junit.Assert.assertTrue("'" + format65 + "' != '" + org.apache.rat.configuration.Format.XML + "'", format65.equals(org.apache.rat.configuration.Format.XML));
        org.junit.Assert.assertNotNull(licenseReader66);
        org.junit.Assert.assertNotNull(iLicenseSet67);
        org.junit.Assert.assertNotNull(strArray73);
        org.junit.Assert.assertTrue("'" + boolean75 + "' != '" + true + "'", boolean75 == true);
        org.junit.Assert.assertTrue("'" + boolean77 + "' != '" + true + "'", boolean77 == true);
        org.junit.Assert.assertTrue("'" + boolean79 + "' != '" + true + "'", boolean79 == true);
        org.junit.Assert.assertNotNull(strSet81);
        org.junit.Assert.assertTrue("'" + boolean82 + "' != '" + false + "'", boolean82 == false);
        org.junit.Assert.assertNotNull(iLicenseFamilyArray84);
        org.junit.Assert.assertTrue("'" + boolean86 + "' != '" + false + "'", boolean86 == false);
        org.junit.Assert.assertTrue("'" + boolean88 + "' != '" + false + "'", boolean88 == false);
        org.junit.Assert.assertNotNull(strSpliterator89);
        org.junit.Assert.assertEquals("'" + str91 + "' != '" + "http://org/apache/rat/meta-data#LicenseFamilyName" + "'", str91, "http://org/apache/rat/meta-data#LicenseFamilyName");
    }

    @Test
    public void test12677() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest25.test12677");
        boolean boolean1 = org.apache.rat.document.impl.guesser.BinaryGuesser.isNonBinary("Copyright Builder: s:null e:64868 o:Copyright Builder: s:org/a e:standard o:W3C  ");
        org.junit.Assert.assertTrue("'" + boolean1 + "' != '" + false + "'", boolean1 == false);
    }

    @Test
    public void test12678() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest25.test12678");
        org.apache.rat.utils.Log log0 = null;
        org.apache.rat.ReportConfiguration reportConfiguration1 = new org.apache.rat.ReportConfiguration(log0);
        java.io.FilenameFilter filenameFilter2 = reportConfiguration1.getInputFileFilter();
        org.apache.rat.license.LicenseSetFactory.LicenseFilter licenseFilter3 = org.apache.rat.license.LicenseSetFactory.LicenseFilter.all;
        java.util.SortedSet<org.apache.rat.license.ILicense> iLicenseSet4 = reportConfiguration1.getLicenses(licenseFilter3);
        org.apache.commons.io.function.IOSupplier<java.io.InputStream> inputStreamIOSupplier5 = reportConfiguration1.getStyleSheet();
        org.apache.rat.utils.Log log6 = null;
        org.apache.rat.ReportConfiguration reportConfiguration7 = new org.apache.rat.ReportConfiguration(log6);
        reportConfiguration7.addApprovedLicenseCategory(".cvsignore");
        org.apache.rat.utils.Log.Level level10 = org.apache.rat.utils.Log.Level.ERROR;
        reportConfiguration7.logLicenseCollisions(level10);
        org.apache.rat.utils.Log log12 = null;
        org.apache.rat.ReportConfiguration reportConfiguration13 = new org.apache.rat.ReportConfiguration(log12);
        java.io.FilenameFilter filenameFilter14 = reportConfiguration13.getInputFileFilter();
        org.apache.rat.license.LicenseSetFactory.LicenseFilter licenseFilter15 = org.apache.rat.license.LicenseSetFactory.LicenseFilter.all;
        java.util.SortedSet<org.apache.rat.license.ILicense> iLicenseSet16 = reportConfiguration13.getLicenses(licenseFilter15);
        org.apache.rat.config.AddLicenseHeaders addLicenseHeaders17 = org.apache.rat.config.AddLicenseHeaders.FALSE;
        reportConfiguration13.setAddLicenseHeaders(addLicenseHeaders17);
        org.apache.rat.utils.Log log19 = null;
        org.apache.rat.ReportConfiguration reportConfiguration20 = new org.apache.rat.ReportConfiguration(log19);
        org.apache.rat.report.claim.ClaimStatistic claimStatistic21 = org.apache.rat.Reporter.report(reportConfiguration20);
        org.apache.rat.license.LicenseSetFactory.LicenseFilter licenseFilter22 = org.apache.rat.license.LicenseSetFactory.LicenseFilter.all;
        org.apache.rat.Reporter.listLicenses(reportConfiguration20, licenseFilter22);
        org.apache.rat.Reporter.listLicenses(reportConfiguration13, licenseFilter22);
        org.apache.rat.utils.Log log25 = null;
        org.apache.rat.ReportConfiguration reportConfiguration26 = new org.apache.rat.ReportConfiguration(log25);
        java.io.FilenameFilter filenameFilter27 = reportConfiguration26.getInputFileFilter();
        org.apache.rat.license.LicenseSetFactory.LicenseFilter licenseFilter28 = org.apache.rat.license.LicenseSetFactory.LicenseFilter.all;
        java.util.SortedSet<org.apache.rat.license.ILicense> iLicenseSet29 = reportConfiguration26.getLicenses(licenseFilter28);
        org.apache.rat.config.AddLicenseHeaders addLicenseHeaders30 = org.apache.rat.config.AddLicenseHeaders.FALSE;
        reportConfiguration26.setAddLicenseHeaders(addLicenseHeaders30);
        org.apache.rat.utils.Log log32 = null;
        org.apache.rat.ReportConfiguration reportConfiguration33 = new org.apache.rat.ReportConfiguration(log32);
        org.apache.rat.report.claim.ClaimStatistic claimStatistic34 = org.apache.rat.Reporter.report(reportConfiguration33);
        org.apache.rat.license.LicenseSetFactory.LicenseFilter licenseFilter35 = org.apache.rat.license.LicenseSetFactory.LicenseFilter.all;
        org.apache.rat.Reporter.listLicenses(reportConfiguration33, licenseFilter35);
        org.apache.rat.Reporter.listLicenses(reportConfiguration26, licenseFilter35);
        java.util.SortedSet<org.apache.rat.license.ILicenseFamily> iLicenseFamilySet38 = reportConfiguration13.getLicenseFamilies(licenseFilter35);
        org.apache.rat.utils.Log log39 = null;
        org.apache.rat.ReportConfiguration reportConfiguration40 = new org.apache.rat.ReportConfiguration(log39);
        java.io.FilenameFilter filenameFilter41 = reportConfiguration40.getInputFileFilter();
        org.apache.rat.license.LicenseSetFactory.LicenseFilter licenseFilter42 = org.apache.rat.license.LicenseSetFactory.LicenseFilter.all;
        java.util.SortedSet<org.apache.rat.license.ILicense> iLicenseSet43 = reportConfiguration40.getLicenses(licenseFilter42);
        org.apache.rat.config.AddLicenseHeaders addLicenseHeaders44 = org.apache.rat.config.AddLicenseHeaders.FALSE;
        reportConfiguration40.setAddLicenseHeaders(addLicenseHeaders44);
        reportConfiguration13.setAddLicenseHeaders(addLicenseHeaders44);
        reportConfiguration7.setAddLicenseHeaders(addLicenseHeaders44);
        reportConfiguration1.setAddLicenseHeaders(addLicenseHeaders44);
        org.apache.rat.Defaults.Builder builder49 = org.apache.rat.Defaults.builder();
        org.apache.rat.Defaults.Builder builder50 = builder49.noDefault();
        org.apache.rat.Defaults defaults51 = builder50.build();
        org.apache.rat.Defaults.Builder builder52 = org.apache.rat.Defaults.builder();
        org.apache.rat.Defaults defaults53 = builder52.build();
        org.apache.rat.utils.Log log54 = null;
        org.apache.rat.ReportConfiguration reportConfiguration55 = new org.apache.rat.ReportConfiguration(log54);
        java.io.FilenameFilter filenameFilter56 = reportConfiguration55.getInputFileFilter();
        org.apache.rat.license.LicenseSetFactory.LicenseFilter licenseFilter57 = org.apache.rat.license.LicenseSetFactory.LicenseFilter.all;
        java.util.SortedSet<org.apache.rat.license.ILicense> iLicenseSet58 = reportConfiguration55.getLicenses(licenseFilter57);
        org.apache.rat.config.AddLicenseHeaders addLicenseHeaders59 = org.apache.rat.config.AddLicenseHeaders.FALSE;
        reportConfiguration55.setAddLicenseHeaders(addLicenseHeaders59);
        org.apache.rat.utils.Log log61 = null;
        org.apache.rat.ReportConfiguration reportConfiguration62 = new org.apache.rat.ReportConfiguration(log61);
        org.apache.rat.report.claim.ClaimStatistic claimStatistic63 = org.apache.rat.Reporter.report(reportConfiguration62);
        org.apache.rat.license.LicenseSetFactory.LicenseFilter licenseFilter64 = org.apache.rat.license.LicenseSetFactory.LicenseFilter.all;
        org.apache.rat.Reporter.listLicenses(reportConfiguration62, licenseFilter64);
        org.apache.rat.Reporter.listLicenses(reportConfiguration55, licenseFilter64);
        org.apache.rat.utils.Log log67 = null;
        org.apache.rat.ReportConfiguration reportConfiguration68 = new org.apache.rat.ReportConfiguration(log67);
        java.io.FilenameFilter filenameFilter69 = reportConfiguration68.getInputFileFilter();
        org.apache.rat.license.LicenseSetFactory.LicenseFilter licenseFilter70 = org.apache.rat.license.LicenseSetFactory.LicenseFilter.all;
        java.util.SortedSet<org.apache.rat.license.ILicense> iLicenseSet71 = reportConfiguration68.getLicenses(licenseFilter70);
        org.apache.rat.config.AddLicenseHeaders addLicenseHeaders72 = org.apache.rat.config.AddLicenseHeaders.FALSE;
        reportConfiguration68.setAddLicenseHeaders(addLicenseHeaders72);
        org.apache.rat.utils.Log log74 = null;
        org.apache.rat.ReportConfiguration reportConfiguration75 = new org.apache.rat.ReportConfiguration(log74);
        org.apache.rat.report.claim.ClaimStatistic claimStatistic76 = org.apache.rat.Reporter.report(reportConfiguration75);
        org.apache.rat.license.LicenseSetFactory.LicenseFilter licenseFilter77 = org.apache.rat.license.LicenseSetFactory.LicenseFilter.all;
        org.apache.rat.Reporter.listLicenses(reportConfiguration75, licenseFilter77);
        org.apache.rat.Reporter.listLicenses(reportConfiguration68, licenseFilter77);
        java.util.SortedSet<org.apache.rat.license.ILicenseFamily> iLicenseFamilySet80 = reportConfiguration55.getLicenseFamilies(licenseFilter77);
        java.util.SortedSet<org.apache.rat.license.ILicense> iLicenseSet81 = defaults53.getLicenses(licenseFilter77);
        java.util.SortedSet<org.apache.rat.license.ILicenseFamily> iLicenseFamilySet82 = defaults51.getLicenseFamilies(licenseFilter77);
        org.apache.rat.utils.Log log83 = null;
        org.apache.rat.ReportConfiguration reportConfiguration84 = new org.apache.rat.ReportConfiguration(log83);
        java.io.FilenameFilter filenameFilter85 = reportConfiguration84.getInputFileFilter();
        org.apache.rat.license.LicenseSetFactory.LicenseFilter licenseFilter86 = org.apache.rat.license.LicenseSetFactory.LicenseFilter.all;
        java.util.SortedSet<org.apache.rat.license.ILicense> iLicenseSet87 = reportConfiguration84.getLicenses(licenseFilter86);
        org.apache.rat.config.AddLicenseHeaders addLicenseHeaders88 = org.apache.rat.config.AddLicenseHeaders.FALSE;
        reportConfiguration84.setAddLicenseHeaders(addLicenseHeaders88);
        org.apache.rat.utils.Log log90 = null;
        org.apache.rat.ReportConfiguration reportConfiguration91 = new org.apache.rat.ReportConfiguration(log90);
        org.apache.rat.report.claim.ClaimStatistic claimStatistic92 = org.apache.rat.Reporter.report(reportConfiguration91);
        org.apache.rat.license.LicenseSetFactory.LicenseFilter licenseFilter93 = org.apache.rat.license.LicenseSetFactory.LicenseFilter.all;
        org.apache.rat.Reporter.listLicenses(reportConfiguration91, licenseFilter93);
        org.apache.rat.Reporter.listLicenses(reportConfiguration84, licenseFilter93);
        java.util.SortedSet<java.lang.String> strSet96 = defaults51.getLicenseIds(licenseFilter93);
        java.util.SortedSet<org.apache.rat.license.ILicenseFamily> iLicenseFamilySet97 = reportConfiguration1.getLicenseFamilies(licenseFilter93);
        org.apache.commons.io.function.IOSupplier<java.io.PrintWriter> printWriterIOSupplier98 = reportConfiguration1.getWriter();
        org.junit.Assert.assertNull(filenameFilter2);
        org.junit.Assert.assertTrue("'" + licenseFilter3 + "' != '" + org.apache.rat.license.LicenseSetFactory.LicenseFilter.all + "'", licenseFilter3.equals(org.apache.rat.license.LicenseSetFactory.LicenseFilter.all));
        org.junit.Assert.assertNotNull(iLicenseSet4);
        org.junit.Assert.assertNull(inputStreamIOSupplier5);
        org.junit.Assert.assertTrue("'" + level10 + "' != '" + org.apache.rat.utils.Log.Level.ERROR + "'", level10.equals(org.apache.rat.utils.Log.Level.ERROR));
        org.junit.Assert.assertNull(filenameFilter14);
        org.junit.Assert.assertTrue("'" + licenseFilter15 + "' != '" + org.apache.rat.license.LicenseSetFactory.LicenseFilter.all + "'", licenseFilter15.equals(org.apache.rat.license.LicenseSetFactory.LicenseFilter.all));
        org.junit.Assert.assertNotNull(iLicenseSet16);
        org.junit.Assert.assertTrue("'" + addLicenseHeaders17 + "' != '" + org.apache.rat.config.AddLicenseHeaders.FALSE + "'", addLicenseHeaders17.equals(org.apache.rat.config.AddLicenseHeaders.FALSE));
        org.junit.Assert.assertNull(claimStatistic21);
        org.junit.Assert.assertTrue("'" + licenseFilter22 + "' != '" + org.apache.rat.license.LicenseSetFactory.LicenseFilter.all + "'", licenseFilter22.equals(org.apache.rat.license.LicenseSetFactory.LicenseFilter.all));
        org.junit.Assert.assertNull(filenameFilter27);
        org.junit.Assert.assertTrue("'" + licenseFilter28 + "' != '" + org.apache.rat.license.LicenseSetFactory.LicenseFilter.all + "'", licenseFilter28.equals(org.apache.rat.license.LicenseSetFactory.LicenseFilter.all));
        org.junit.Assert.assertNotNull(iLicenseSet29);
        org.junit.Assert.assertTrue("'" + addLicenseHeaders30 + "' != '" + org.apache.rat.config.AddLicenseHeaders.FALSE + "'", addLicenseHeaders30.equals(org.apache.rat.config.AddLicenseHeaders.FALSE));
        org.junit.Assert.assertNull(claimStatistic34);
        org.junit.Assert.assertTrue("'" + licenseFilter35 + "' != '" + org.apache.rat.license.LicenseSetFactory.LicenseFilter.all + "'", licenseFilter35.equals(org.apache.rat.license.LicenseSetFactory.LicenseFilter.all));
        org.junit.Assert.assertNotNull(iLicenseFamilySet38);
        org.junit.Assert.assertNull(filenameFilter41);
        org.junit.Assert.assertTrue("'" + licenseFilter42 + "' != '" + org.apache.rat.license.LicenseSetFactory.LicenseFilter.all + "'", licenseFilter42.equals(org.apache.rat.license.LicenseSetFactory.LicenseFilter.all));
        org.junit.Assert.assertNotNull(iLicenseSet43);
        org.junit.Assert.assertTrue("'" + addLicenseHeaders44 + "' != '" + org.apache.rat.config.AddLicenseHeaders.FALSE + "'", addLicenseHeaders44.equals(org.apache.rat.config.AddLicenseHeaders.FALSE));
        org.junit.Assert.assertNotNull(builder49);
        org.junit.Assert.assertNotNull(builder50);
        org.junit.Assert.assertNotNull(defaults51);
        org.junit.Assert.assertNotNull(builder52);
        org.junit.Assert.assertNotNull(defaults53);
        org.junit.Assert.assertNull(filenameFilter56);
        org.junit.Assert.assertTrue("'" + licenseFilter57 + "' != '" + org.apache.rat.license.LicenseSetFactory.LicenseFilter.all + "'", licenseFilter57.equals(org.apache.rat.license.LicenseSetFactory.LicenseFilter.all));
        org.junit.Assert.assertNotNull(iLicenseSet58);
        org.junit.Assert.assertTrue("'" + addLicenseHeaders59 + "' != '" + org.apache.rat.config.AddLicenseHeaders.FALSE + "'", addLicenseHeaders59.equals(org.apache.rat.config.AddLicenseHeaders.FALSE));
        org.junit.Assert.assertNull(claimStatistic63);
        org.junit.Assert.assertTrue("'" + licenseFilter64 + "' != '" + org.apache.rat.license.LicenseSetFactory.LicenseFilter.all + "'", licenseFilter64.equals(org.apache.rat.license.LicenseSetFactory.LicenseFilter.all));
        org.junit.Assert.assertNull(filenameFilter69);
        org.junit.Assert.assertTrue("'" + licenseFilter70 + "' != '" + org.apache.rat.license.LicenseSetFactory.LicenseFilter.all + "'", licenseFilter70.equals(org.apache.rat.license.LicenseSetFactory.LicenseFilter.all));
        org.junit.Assert.assertNotNull(iLicenseSet71);
        org.junit.Assert.assertTrue("'" + addLicenseHeaders72 + "' != '" + org.apache.rat.config.AddLicenseHeaders.FALSE + "'", addLicenseHeaders72.equals(org.apache.rat.config.AddLicenseHeaders.FALSE));
        org.junit.Assert.assertNull(claimStatistic76);
        org.junit.Assert.assertTrue("'" + licenseFilter77 + "' != '" + org.apache.rat.license.LicenseSetFactory.LicenseFilter.all + "'", licenseFilter77.equals(org.apache.rat.license.LicenseSetFactory.LicenseFilter.all));
        org.junit.Assert.assertNotNull(iLicenseFamilySet80);
        org.junit.Assert.assertNotNull(iLicenseSet81);
        org.junit.Assert.assertNotNull(iLicenseFamilySet82);
        org.junit.Assert.assertNull(filenameFilter85);
        org.junit.Assert.assertTrue("'" + licenseFilter86 + "' != '" + org.apache.rat.license.LicenseSetFactory.LicenseFilter.all + "'", licenseFilter86.equals(org.apache.rat.license.LicenseSetFactory.LicenseFilter.all));
        org.junit.Assert.assertNotNull(iLicenseSet87);
        org.junit.Assert.assertTrue("'" + addLicenseHeaders88 + "' != '" + org.apache.rat.config.AddLicenseHeaders.FALSE + "'", addLicenseHeaders88.equals(org.apache.rat.config.AddLicenseHeaders.FALSE));
        org.junit.Assert.assertNull(claimStatistic92);
        org.junit.Assert.assertTrue("'" + licenseFilter93 + "' != '" + org.apache.rat.license.LicenseSetFactory.LicenseFilter.all + "'", licenseFilter93.equals(org.apache.rat.license.LicenseSetFactory.LicenseFilter.all));
        org.junit.Assert.assertNotNull(strSet96);
        org.junit.Assert.assertNotNull(iLicenseFamilySet97);
        org.junit.Assert.assertNotNull(printWriterIOSupplier98);
    }

    @Test
    public void test12679() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest25.test12679");
        org.apache.rat.utils.DefaultLog defaultLog0 = org.apache.rat.utils.DefaultLog.INSTANCE;
        org.apache.rat.utils.Log log1 = null;
        org.apache.rat.ReportConfiguration reportConfiguration2 = new org.apache.rat.ReportConfiguration(log1);
        java.io.FilenameFilter filenameFilter3 = reportConfiguration2.getInputFileFilter();
        org.apache.rat.license.LicenseSetFactory.LicenseFilter licenseFilter4 = org.apache.rat.license.LicenseSetFactory.LicenseFilter.all;
        java.util.SortedSet<org.apache.rat.license.ILicense> iLicenseSet5 = reportConfiguration2.getLicenses(licenseFilter4);
        org.apache.rat.config.AddLicenseHeaders addLicenseHeaders6 = org.apache.rat.config.AddLicenseHeaders.FALSE;
        reportConfiguration2.setAddLicenseHeaders(addLicenseHeaders6);
        org.apache.rat.utils.Log log8 = null;
        org.apache.rat.ReportConfiguration reportConfiguration9 = new org.apache.rat.ReportConfiguration(log8);
        org.apache.rat.report.claim.ClaimStatistic claimStatistic10 = org.apache.rat.Reporter.report(reportConfiguration9);
        org.apache.rat.license.LicenseSetFactory.LicenseFilter licenseFilter11 = org.apache.rat.license.LicenseSetFactory.LicenseFilter.all;
        org.apache.rat.Reporter.listLicenses(reportConfiguration9, licenseFilter11);
        org.apache.rat.Reporter.listLicenses(reportConfiguration2, licenseFilter11);
        org.apache.rat.utils.Log log14 = null;
        org.apache.rat.ReportConfiguration reportConfiguration15 = new org.apache.rat.ReportConfiguration(log14);
        java.io.FilenameFilter filenameFilter16 = reportConfiguration15.getInputFileFilter();
        org.apache.rat.license.LicenseSetFactory.LicenseFilter licenseFilter17 = org.apache.rat.license.LicenseSetFactory.LicenseFilter.all;
        java.util.SortedSet<org.apache.rat.license.ILicense> iLicenseSet18 = reportConfiguration15.getLicenses(licenseFilter17);
        org.apache.rat.config.AddLicenseHeaders addLicenseHeaders19 = org.apache.rat.config.AddLicenseHeaders.FALSE;
        reportConfiguration15.setAddLicenseHeaders(addLicenseHeaders19);
        org.apache.rat.utils.Log log21 = null;
        org.apache.rat.ReportConfiguration reportConfiguration22 = new org.apache.rat.ReportConfiguration(log21);
        org.apache.rat.report.claim.ClaimStatistic claimStatistic23 = org.apache.rat.Reporter.report(reportConfiguration22);
        org.apache.rat.license.LicenseSetFactory.LicenseFilter licenseFilter24 = org.apache.rat.license.LicenseSetFactory.LicenseFilter.all;
        org.apache.rat.Reporter.listLicenses(reportConfiguration22, licenseFilter24);
        org.apache.rat.Reporter.listLicenses(reportConfiguration15, licenseFilter24);
        org.apache.rat.Reporter.listLicenses(reportConfiguration2, licenseFilter24);
        org.apache.rat.utils.Log log28 = null;
        org.apache.rat.ReportConfiguration reportConfiguration29 = new org.apache.rat.ReportConfiguration(log28);
        org.apache.commons.io.function.IOSupplier<java.io.OutputStream> outputStreamIOSupplier30 = reportConfiguration29.getOutput();
        reportConfiguration2.setOut(outputStreamIOSupplier30);
        org.apache.rat.utils.Log log32 = null;
        org.apache.rat.ReportConfiguration reportConfiguration33 = new org.apache.rat.ReportConfiguration(log32);
        org.apache.rat.report.claim.ClaimStatistic claimStatistic34 = org.apache.rat.Reporter.report(reportConfiguration33);
        org.apache.rat.utils.Log log35 = null;
        org.apache.rat.ReportConfiguration reportConfiguration36 = new org.apache.rat.ReportConfiguration(log35);
        org.apache.rat.report.claim.ClaimStatistic claimStatistic37 = org.apache.rat.Reporter.report(reportConfiguration36);
        org.apache.rat.utils.ReportingSet.Options options38 = org.apache.rat.utils.ReportingSet.Options.OVERWRITE;
        reportConfiguration36.licenseDuplicateOption(options38);
        reportConfiguration33.familyDuplicateOption(options38);
        reportConfiguration2.licenseDuplicateOption(options38);
        reportConfiguration2.addApprovedLicenseCategory("W3C Document Copyright");
        org.apache.rat.utils.Log log44 = null;
        org.apache.rat.ReportConfiguration reportConfiguration45 = new org.apache.rat.ReportConfiguration(log44);
        reportConfiguration45.addApprovedLicenseCategory(".cvsignore");
        org.apache.rat.utils.Log.Level level48 = org.apache.rat.utils.Log.Level.ERROR;
        reportConfiguration45.logLicenseCollisions(level48);
        reportConfiguration2.logLicenseCollisions(level48);
        defaultLog0.setLevel(level48);
        defaultLog0.warn((java.lang.Object) "GNU General Public License, version 3");
        java.lang.Object obj54 = null;
        defaultLog0.debug(obj54);
        org.apache.rat.utils.Log.Level level56 = defaultLog0.getLevel();
        org.apache.rat.configuration.builders.SpdxBuilder spdxBuilder57 = org.apache.rat.analysis.IHeaderMatcher.Builder.spdx();
        java.lang.String str58 = spdxBuilder57.toString();
        org.apache.rat.configuration.builders.SpdxBuilder spdxBuilder60 = spdxBuilder57.setName("ef7a8b13-64c3-4510-bb0c-dbf208e1e73f");
        java.lang.String str61 = spdxBuilder60.toString();
        java.lang.String str62 = spdxBuilder60.toString();
        defaultLog0.warn((java.lang.Object) spdxBuilder60);
        org.apache.rat.configuration.builders.SpdxBuilder spdxBuilder65 = spdxBuilder60.setName("true");
        org.apache.rat.analysis.IHeaderMatcher iHeaderMatcher66 = spdxBuilder65.build();
        org.apache.rat.configuration.builders.SpdxBuilder spdxBuilder68 = spdxBuilder65.setName("8d0237f7-4727-4099-af02-7cae8c4e3cfd");
        org.junit.Assert.assertNotNull(defaultLog0);
        org.junit.Assert.assertNull(filenameFilter3);
        org.junit.Assert.assertTrue("'" + licenseFilter4 + "' != '" + org.apache.rat.license.LicenseSetFactory.LicenseFilter.all + "'", licenseFilter4.equals(org.apache.rat.license.LicenseSetFactory.LicenseFilter.all));
        org.junit.Assert.assertNotNull(iLicenseSet5);
        org.junit.Assert.assertTrue("'" + addLicenseHeaders6 + "' != '" + org.apache.rat.config.AddLicenseHeaders.FALSE + "'", addLicenseHeaders6.equals(org.apache.rat.config.AddLicenseHeaders.FALSE));
        org.junit.Assert.assertNull(claimStatistic10);
        org.junit.Assert.assertTrue("'" + licenseFilter11 + "' != '" + org.apache.rat.license.LicenseSetFactory.LicenseFilter.all + "'", licenseFilter11.equals(org.apache.rat.license.LicenseSetFactory.LicenseFilter.all));
        org.junit.Assert.assertNull(filenameFilter16);
        org.junit.Assert.assertTrue("'" + licenseFilter17 + "' != '" + org.apache.rat.license.LicenseSetFactory.LicenseFilter.all + "'", licenseFilter17.equals(org.apache.rat.license.LicenseSetFactory.LicenseFilter.all));
        org.junit.Assert.assertNotNull(iLicenseSet18);
        org.junit.Assert.assertTrue("'" + addLicenseHeaders19 + "' != '" + org.apache.rat.config.AddLicenseHeaders.FALSE + "'", addLicenseHeaders19.equals(org.apache.rat.config.AddLicenseHeaders.FALSE));
        org.junit.Assert.assertNull(claimStatistic23);
        org.junit.Assert.assertTrue("'" + licenseFilter24 + "' != '" + org.apache.rat.license.LicenseSetFactory.LicenseFilter.all + "'", licenseFilter24.equals(org.apache.rat.license.LicenseSetFactory.LicenseFilter.all));
        org.junit.Assert.assertNotNull(outputStreamIOSupplier30);
        org.junit.Assert.assertNull(claimStatistic34);
        org.junit.Assert.assertNull(claimStatistic37);
        org.junit.Assert.assertTrue("'" + options38 + "' != '" + org.apache.rat.utils.ReportingSet.Options.OVERWRITE + "'", options38.equals(org.apache.rat.utils.ReportingSet.Options.OVERWRITE));
        org.junit.Assert.assertTrue("'" + level48 + "' != '" + org.apache.rat.utils.Log.Level.ERROR + "'", level48.equals(org.apache.rat.utils.Log.Level.ERROR));
        org.junit.Assert.assertTrue("'" + level56 + "' != '" + org.apache.rat.utils.Log.Level.ERROR + "'", level56.equals(org.apache.rat.utils.Log.Level.ERROR));
        org.junit.Assert.assertNotNull(spdxBuilder57);
        org.junit.Assert.assertEquals("'" + str58 + "' != '" + "SpdxBuilder: null" + "'", str58, "SpdxBuilder: null");
        org.junit.Assert.assertNotNull(spdxBuilder60);
        org.junit.Assert.assertEquals("'" + str61 + "' != '" + "SpdxBuilder: ef7a8b13-64c3-4510-bb0c-dbf208e1e73f" + "'", str61, "SpdxBuilder: ef7a8b13-64c3-4510-bb0c-dbf208e1e73f");
        org.junit.Assert.assertEquals("'" + str62 + "' != '" + "SpdxBuilder: ef7a8b13-64c3-4510-bb0c-dbf208e1e73f" + "'", str62, "SpdxBuilder: ef7a8b13-64c3-4510-bb0c-dbf208e1e73f");
        org.junit.Assert.assertNotNull(spdxBuilder65);
        org.junit.Assert.assertNotNull(iHeaderMatcher66);
        org.junit.Assert.assertNotNull(spdxBuilder68);
    }

    @Test
    public void test12680() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest25.test12680");
        org.apache.rat.report.claim.ClaimStatistic claimStatistic0 = new org.apache.rat.report.claim.ClaimStatistic();
        claimStatistic0.setNumApproved((int) (short) 10);
        java.util.Map<java.lang.String, java.lang.Integer> strMap3 = null;
        claimStatistic0.setDocumentCategoryMap(strMap3);
        java.util.Map<java.lang.String, java.lang.Integer> strMap5 = claimStatistic0.getLicenseFileNameMap();
        claimStatistic0.setNumUnknown((int) (byte) -1);
        java.util.Map<java.lang.String, java.lang.Integer> strMap8 = claimStatistic0.getLicenseFileCodeMap();
        int int9 = claimStatistic0.getNumUnApproved();
        claimStatistic0.setNumUnApproved(26);
        org.junit.Assert.assertNull(strMap5);
        org.junit.Assert.assertNull(strMap8);
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + 0 + "'", int9 == 0);
    }

    @Test
    public void test12681() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest25.test12681");
        org.apache.rat.api.MetaData.Datum datum2 = new org.apache.rat.api.MetaData.Datum("RegexBuilder: 87ca16a3-83a2-467a-a3d9-01d4d380dfbd", "78EA8CF4-0699-4B4D-A824-29EDFA3C1584");
    }

    @Test
    public void test12682() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest25.test12682");
        org.apache.rat.configuration.builders.CopyrightBuilder copyrightBuilder0 = org.apache.rat.analysis.IHeaderMatcher.Builder.copyright();
        java.lang.String str1 = copyrightBuilder0.toString();
        org.apache.rat.configuration.builders.CopyrightBuilder copyrightBuilder3 = copyrightBuilder0.setEnd("W3C Software Copyright");
        org.apache.rat.configuration.builders.CopyrightBuilder copyrightBuilder5 = copyrightBuilder0.setStart("RegexBuilder: 89662180-a89f-497b-9301-227d494d2bae");
        org.apache.rat.configuration.builders.CopyrightBuilder copyrightBuilder7 = copyrightBuilder0.setEnd("http://org/apache/rat/meta-data#HeaderCategory");
        org.junit.Assert.assertNotNull(copyrightBuilder0);
        org.junit.Assert.assertEquals("'" + str1 + "' != '" + "Copyright Builder: s:null e:null o:null" + "'", str1, "Copyright Builder: s:null e:null o:null");
        org.junit.Assert.assertNotNull(copyrightBuilder3);
        org.junit.Assert.assertNotNull(copyrightBuilder5);
        org.junit.Assert.assertNotNull(copyrightBuilder7);
    }

    @Test
    public void test12683() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest25.test12683");
        org.apache.rat.utils.Log log0 = null;
        org.apache.rat.ReportConfiguration reportConfiguration1 = new org.apache.rat.ReportConfiguration(log0);
        org.apache.rat.license.ILicenseFamily[] iLicenseFamilyArray2 = new org.apache.rat.license.ILicenseFamily[] {};
        java.util.ArrayList<org.apache.rat.license.ILicenseFamily> iLicenseFamilyList3 = new java.util.ArrayList<org.apache.rat.license.ILicenseFamily>();
        boolean boolean4 = java.util.Collections.addAll((java.util.Collection<org.apache.rat.license.ILicenseFamily>) iLicenseFamilyList3, iLicenseFamilyArray2);
        reportConfiguration1.addFamilies((java.util.Collection<org.apache.rat.license.ILicenseFamily>) iLicenseFamilyList3);
        org.apache.rat.report.IReportable iReportable6 = null;
        reportConfiguration1.setReportable(iReportable6);
        java.util.SortedSet<java.lang.String> strSet8 = reportConfiguration1.getApprovedLicenseCategories();
        reportConfiguration1.addApprovedLicenseCategory("a357a28e-849d-4383-9cc0-95ecd482d23e");
        org.apache.rat.utils.Log log11 = null;
        org.apache.rat.ReportConfiguration reportConfiguration12 = new org.apache.rat.ReportConfiguration(log11);
        reportConfiguration12.addApprovedLicenseCategory(".cvsignore");
        org.apache.rat.utils.Log log15 = null;
        org.apache.rat.ReportConfiguration reportConfiguration16 = new org.apache.rat.ReportConfiguration(log15);
        java.io.FilenameFilter filenameFilter17 = reportConfiguration16.getInputFileFilter();
        org.apache.rat.license.LicenseSetFactory.LicenseFilter licenseFilter18 = org.apache.rat.license.LicenseSetFactory.LicenseFilter.all;
        java.util.SortedSet<org.apache.rat.license.ILicense> iLicenseSet19 = reportConfiguration16.getLicenses(licenseFilter18);
        reportConfiguration12.addLicensesIfNotPresent((java.util.Collection<org.apache.rat.license.ILicense>) iLicenseSet19);
        org.apache.rat.utils.Log log21 = null;
        org.apache.rat.ReportConfiguration reportConfiguration22 = new org.apache.rat.ReportConfiguration(log21);
        java.io.FilenameFilter filenameFilter23 = reportConfiguration22.getInputFileFilter();
        org.apache.rat.license.LicenseSetFactory.LicenseFilter licenseFilter24 = org.apache.rat.license.LicenseSetFactory.LicenseFilter.all;
        java.util.SortedSet<org.apache.rat.license.ILicense> iLicenseSet25 = reportConfiguration22.getLicenses(licenseFilter24);
        org.apache.rat.config.AddLicenseHeaders addLicenseHeaders26 = org.apache.rat.config.AddLicenseHeaders.FALSE;
        reportConfiguration22.setAddLicenseHeaders(addLicenseHeaders26);
        org.apache.rat.utils.Log log28 = null;
        org.apache.rat.ReportConfiguration reportConfiguration29 = new org.apache.rat.ReportConfiguration(log28);
        org.apache.rat.report.claim.ClaimStatistic claimStatistic30 = org.apache.rat.Reporter.report(reportConfiguration29);
        org.apache.rat.license.LicenseSetFactory.LicenseFilter licenseFilter31 = org.apache.rat.license.LicenseSetFactory.LicenseFilter.all;
        org.apache.rat.Reporter.listLicenses(reportConfiguration29, licenseFilter31);
        org.apache.rat.Reporter.listLicenses(reportConfiguration22, licenseFilter31);
        org.apache.rat.utils.Log log34 = null;
        org.apache.rat.ReportConfiguration reportConfiguration35 = new org.apache.rat.ReportConfiguration(log34);
        java.io.FilenameFilter filenameFilter36 = reportConfiguration35.getInputFileFilter();
        org.apache.rat.license.LicenseSetFactory.LicenseFilter licenseFilter37 = org.apache.rat.license.LicenseSetFactory.LicenseFilter.all;
        java.util.SortedSet<org.apache.rat.license.ILicense> iLicenseSet38 = reportConfiguration35.getLicenses(licenseFilter37);
        org.apache.rat.config.AddLicenseHeaders addLicenseHeaders39 = org.apache.rat.config.AddLicenseHeaders.FALSE;
        reportConfiguration35.setAddLicenseHeaders(addLicenseHeaders39);
        org.apache.rat.utils.Log log41 = null;
        org.apache.rat.ReportConfiguration reportConfiguration42 = new org.apache.rat.ReportConfiguration(log41);
        org.apache.rat.report.claim.ClaimStatistic claimStatistic43 = org.apache.rat.Reporter.report(reportConfiguration42);
        org.apache.rat.license.LicenseSetFactory.LicenseFilter licenseFilter44 = org.apache.rat.license.LicenseSetFactory.LicenseFilter.all;
        org.apache.rat.Reporter.listLicenses(reportConfiguration42, licenseFilter44);
        org.apache.rat.Reporter.listLicenses(reportConfiguration35, licenseFilter44);
        org.apache.rat.Reporter.listLicenses(reportConfiguration22, licenseFilter44);
        org.apache.rat.utils.Log log48 = null;
        org.apache.rat.ReportConfiguration reportConfiguration49 = new org.apache.rat.ReportConfiguration(log48);
        org.apache.commons.io.function.IOSupplier<java.io.OutputStream> outputStreamIOSupplier50 = reportConfiguration49.getOutput();
        reportConfiguration22.setOut(outputStreamIOSupplier50);
        org.apache.rat.utils.Log.Level level52 = org.apache.rat.utils.Log.Level.WARN;
        reportConfiguration22.logLicenseCollisions(level52);
        org.apache.commons.io.filefilter.IOFileFilter iOFileFilter54 = reportConfiguration22.getDirectoryFilter();
        java.nio.file.Path path55 = null;
        boolean boolean56 = iOFileFilter54.matches(path55);
        java.nio.file.Path path57 = null;
        java.nio.file.attribute.BasicFileAttributes basicFileAttributes58 = null;
        java.nio.file.FileVisitResult fileVisitResult59 = iOFileFilter54.accept(path57, basicFileAttributes58);
        org.apache.rat.utils.Log log60 = null;
        org.apache.rat.ReportConfiguration reportConfiguration61 = new org.apache.rat.ReportConfiguration(log60);
        java.io.FilenameFilter filenameFilter62 = reportConfiguration61.getInputFileFilter();
        org.apache.rat.license.LicenseSetFactory.LicenseFilter licenseFilter63 = org.apache.rat.license.LicenseSetFactory.LicenseFilter.all;
        java.util.SortedSet<org.apache.rat.license.ILicense> iLicenseSet64 = reportConfiguration61.getLicenses(licenseFilter63);
        org.apache.rat.config.AddLicenseHeaders addLicenseHeaders65 = org.apache.rat.config.AddLicenseHeaders.FALSE;
        reportConfiguration61.setAddLicenseHeaders(addLicenseHeaders65);
        org.apache.rat.utils.Log log67 = null;
        org.apache.rat.ReportConfiguration reportConfiguration68 = new org.apache.rat.ReportConfiguration(log67);
        org.apache.rat.report.claim.ClaimStatistic claimStatistic69 = org.apache.rat.Reporter.report(reportConfiguration68);
        org.apache.rat.license.LicenseSetFactory.LicenseFilter licenseFilter70 = org.apache.rat.license.LicenseSetFactory.LicenseFilter.all;
        org.apache.rat.Reporter.listLicenses(reportConfiguration68, licenseFilter70);
        org.apache.rat.Reporter.listLicenses(reportConfiguration61, licenseFilter70);
        org.apache.rat.utils.Log log73 = null;
        org.apache.rat.ReportConfiguration reportConfiguration74 = new org.apache.rat.ReportConfiguration(log73);
        java.io.FilenameFilter filenameFilter75 = reportConfiguration74.getInputFileFilter();
        org.apache.rat.license.LicenseSetFactory.LicenseFilter licenseFilter76 = org.apache.rat.license.LicenseSetFactory.LicenseFilter.all;
        java.util.SortedSet<org.apache.rat.license.ILicense> iLicenseSet77 = reportConfiguration74.getLicenses(licenseFilter76);
        org.apache.rat.config.AddLicenseHeaders addLicenseHeaders78 = org.apache.rat.config.AddLicenseHeaders.FALSE;
        reportConfiguration74.setAddLicenseHeaders(addLicenseHeaders78);
        org.apache.rat.utils.Log log80 = null;
        org.apache.rat.ReportConfiguration reportConfiguration81 = new org.apache.rat.ReportConfiguration(log80);
        org.apache.rat.report.claim.ClaimStatistic claimStatistic82 = org.apache.rat.Reporter.report(reportConfiguration81);
        org.apache.rat.license.LicenseSetFactory.LicenseFilter licenseFilter83 = org.apache.rat.license.LicenseSetFactory.LicenseFilter.all;
        org.apache.rat.Reporter.listLicenses(reportConfiguration81, licenseFilter83);
        org.apache.rat.Reporter.listLicenses(reportConfiguration74, licenseFilter83);
        org.apache.rat.Reporter.listLicenses(reportConfiguration61, licenseFilter83);
        org.apache.rat.utils.Log log87 = null;
        org.apache.rat.ReportConfiguration reportConfiguration88 = new org.apache.rat.ReportConfiguration(log87);
        org.apache.commons.io.function.IOSupplier<java.io.OutputStream> outputStreamIOSupplier89 = reportConfiguration88.getOutput();
        reportConfiguration61.setOut(outputStreamIOSupplier89);
        org.apache.rat.utils.Log.Level level91 = org.apache.rat.utils.Log.Level.WARN;
        reportConfiguration61.logLicenseCollisions(level91);
        org.apache.commons.io.filefilter.IOFileFilter iOFileFilter93 = reportConfiguration61.getDirectoryFilter();
        java.nio.file.Path path94 = null;
        boolean boolean95 = iOFileFilter93.matches(path94);
        org.apache.commons.io.filefilter.IOFileFilter iOFileFilter96 = iOFileFilter54.and(iOFileFilter93);
        reportConfiguration12.setDirectoryFilter(iOFileFilter96);
        reportConfiguration1.addDirectoryFilter(iOFileFilter96);
        org.junit.Assert.assertNotNull(iLicenseFamilyArray2);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertNotNull(strSet8);
        org.junit.Assert.assertNull(filenameFilter17);
        org.junit.Assert.assertTrue("'" + licenseFilter18 + "' != '" + org.apache.rat.license.LicenseSetFactory.LicenseFilter.all + "'", licenseFilter18.equals(org.apache.rat.license.LicenseSetFactory.LicenseFilter.all));
        org.junit.Assert.assertNotNull(iLicenseSet19);
        org.junit.Assert.assertNull(filenameFilter23);
        org.junit.Assert.assertTrue("'" + licenseFilter24 + "' != '" + org.apache.rat.license.LicenseSetFactory.LicenseFilter.all + "'", licenseFilter24.equals(org.apache.rat.license.LicenseSetFactory.LicenseFilter.all));
        org.junit.Assert.assertNotNull(iLicenseSet25);
        org.junit.Assert.assertTrue("'" + addLicenseHeaders26 + "' != '" + org.apache.rat.config.AddLicenseHeaders.FALSE + "'", addLicenseHeaders26.equals(org.apache.rat.config.AddLicenseHeaders.FALSE));
        org.junit.Assert.assertNull(claimStatistic30);
        org.junit.Assert.assertTrue("'" + licenseFilter31 + "' != '" + org.apache.rat.license.LicenseSetFactory.LicenseFilter.all + "'", licenseFilter31.equals(org.apache.rat.license.LicenseSetFactory.LicenseFilter.all));
        org.junit.Assert.assertNull(filenameFilter36);
        org.junit.Assert.assertTrue("'" + licenseFilter37 + "' != '" + org.apache.rat.license.LicenseSetFactory.LicenseFilter.all + "'", licenseFilter37.equals(org.apache.rat.license.LicenseSetFactory.LicenseFilter.all));
        org.junit.Assert.assertNotNull(iLicenseSet38);
        org.junit.Assert.assertTrue("'" + addLicenseHeaders39 + "' != '" + org.apache.rat.config.AddLicenseHeaders.FALSE + "'", addLicenseHeaders39.equals(org.apache.rat.config.AddLicenseHeaders.FALSE));
        org.junit.Assert.assertNull(claimStatistic43);
        org.junit.Assert.assertTrue("'" + licenseFilter44 + "' != '" + org.apache.rat.license.LicenseSetFactory.LicenseFilter.all + "'", licenseFilter44.equals(org.apache.rat.license.LicenseSetFactory.LicenseFilter.all));
        org.junit.Assert.assertNotNull(outputStreamIOSupplier50);
        org.junit.Assert.assertTrue("'" + level52 + "' != '" + org.apache.rat.utils.Log.Level.WARN + "'", level52.equals(org.apache.rat.utils.Log.Level.WARN));
        org.junit.Assert.assertNotNull(iOFileFilter54);
        org.junit.Assert.assertTrue("'" + boolean56 + "' != '" + false + "'", boolean56 == false);
        org.junit.Assert.assertTrue("'" + fileVisitResult59 + "' != '" + java.nio.file.FileVisitResult.TERMINATE + "'", fileVisitResult59.equals(java.nio.file.FileVisitResult.TERMINATE));
        org.junit.Assert.assertNull(filenameFilter62);
        org.junit.Assert.assertTrue("'" + licenseFilter63 + "' != '" + org.apache.rat.license.LicenseSetFactory.LicenseFilter.all + "'", licenseFilter63.equals(org.apache.rat.license.LicenseSetFactory.LicenseFilter.all));
        org.junit.Assert.assertNotNull(iLicenseSet64);
        org.junit.Assert.assertTrue("'" + addLicenseHeaders65 + "' != '" + org.apache.rat.config.AddLicenseHeaders.FALSE + "'", addLicenseHeaders65.equals(org.apache.rat.config.AddLicenseHeaders.FALSE));
        org.junit.Assert.assertNull(claimStatistic69);
        org.junit.Assert.assertTrue("'" + licenseFilter70 + "' != '" + org.apache.rat.license.LicenseSetFactory.LicenseFilter.all + "'", licenseFilter70.equals(org.apache.rat.license.LicenseSetFactory.LicenseFilter.all));
        org.junit.Assert.assertNull(filenameFilter75);
        org.junit.Assert.assertTrue("'" + licenseFilter76 + "' != '" + org.apache.rat.license.LicenseSetFactory.LicenseFilter.all + "'", licenseFilter76.equals(org.apache.rat.license.LicenseSetFactory.LicenseFilter.all));
        org.junit.Assert.assertNotNull(iLicenseSet77);
        org.junit.Assert.assertTrue("'" + addLicenseHeaders78 + "' != '" + org.apache.rat.config.AddLicenseHeaders.FALSE + "'", addLicenseHeaders78.equals(org.apache.rat.config.AddLicenseHeaders.FALSE));
        org.junit.Assert.assertNull(claimStatistic82);
        org.junit.Assert.assertTrue("'" + licenseFilter83 + "' != '" + org.apache.rat.license.LicenseSetFactory.LicenseFilter.all + "'", licenseFilter83.equals(org.apache.rat.license.LicenseSetFactory.LicenseFilter.all));
        org.junit.Assert.assertNotNull(outputStreamIOSupplier89);
        org.junit.Assert.assertTrue("'" + level91 + "' != '" + org.apache.rat.utils.Log.Level.WARN + "'", level91.equals(org.apache.rat.utils.Log.Level.WARN));
        org.junit.Assert.assertNotNull(iOFileFilter93);
        org.junit.Assert.assertTrue("'" + boolean95 + "' != '" + false + "'", boolean95 == false);
        org.junit.Assert.assertNotNull(iOFileFilter96);
    }

    @Test
    public void test12684() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest25.test12684");
        org.apache.rat.Defaults.Builder builder0 = org.apache.rat.Defaults.builder();
        org.apache.rat.Defaults.Builder builder1 = builder0.noDefault();
        org.apache.rat.Defaults defaults2 = builder1.build();
        org.apache.rat.utils.Log log3 = null;
        org.apache.rat.ReportConfiguration reportConfiguration4 = new org.apache.rat.ReportConfiguration(log3);
        java.io.FilenameFilter filenameFilter5 = reportConfiguration4.getInputFileFilter();
        org.apache.rat.license.LicenseSetFactory.LicenseFilter licenseFilter6 = org.apache.rat.license.LicenseSetFactory.LicenseFilter.all;
        java.util.SortedSet<org.apache.rat.license.ILicense> iLicenseSet7 = reportConfiguration4.getLicenses(licenseFilter6);
        org.apache.rat.config.AddLicenseHeaders addLicenseHeaders8 = org.apache.rat.config.AddLicenseHeaders.FALSE;
        reportConfiguration4.setAddLicenseHeaders(addLicenseHeaders8);
        org.apache.rat.utils.Log log10 = null;
        org.apache.rat.ReportConfiguration reportConfiguration11 = new org.apache.rat.ReportConfiguration(log10);
        org.apache.rat.report.claim.ClaimStatistic claimStatistic12 = org.apache.rat.Reporter.report(reportConfiguration11);
        org.apache.rat.license.LicenseSetFactory.LicenseFilter licenseFilter13 = org.apache.rat.license.LicenseSetFactory.LicenseFilter.all;
        org.apache.rat.Reporter.listLicenses(reportConfiguration11, licenseFilter13);
        org.apache.rat.Reporter.listLicenses(reportConfiguration4, licenseFilter13);
        org.apache.rat.utils.Log log16 = null;
        org.apache.rat.ReportConfiguration reportConfiguration17 = new org.apache.rat.ReportConfiguration(log16);
        java.io.FilenameFilter filenameFilter18 = reportConfiguration17.getInputFileFilter();
        org.apache.rat.license.LicenseSetFactory.LicenseFilter licenseFilter19 = org.apache.rat.license.LicenseSetFactory.LicenseFilter.all;
        java.util.SortedSet<org.apache.rat.license.ILicense> iLicenseSet20 = reportConfiguration17.getLicenses(licenseFilter19);
        org.apache.rat.config.AddLicenseHeaders addLicenseHeaders21 = org.apache.rat.config.AddLicenseHeaders.FALSE;
        reportConfiguration17.setAddLicenseHeaders(addLicenseHeaders21);
        org.apache.rat.utils.Log log23 = null;
        org.apache.rat.ReportConfiguration reportConfiguration24 = new org.apache.rat.ReportConfiguration(log23);
        org.apache.rat.report.claim.ClaimStatistic claimStatistic25 = org.apache.rat.Reporter.report(reportConfiguration24);
        org.apache.rat.license.LicenseSetFactory.LicenseFilter licenseFilter26 = org.apache.rat.license.LicenseSetFactory.LicenseFilter.all;
        org.apache.rat.Reporter.listLicenses(reportConfiguration24, licenseFilter26);
        org.apache.rat.Reporter.listLicenses(reportConfiguration17, licenseFilter26);
        org.apache.rat.Reporter.listLicenses(reportConfiguration4, licenseFilter26);
        java.util.SortedSet<org.apache.rat.license.ILicense> iLicenseSet30 = defaults2.getLicenses(licenseFilter26);
        org.apache.rat.utils.ReportingSet<java.lang.String> strSet31 = new org.apache.rat.utils.ReportingSet<java.lang.String>();
        java.lang.Object[] objArray32 = strSet31.toArray();
        org.apache.rat.utils.Log log33 = null;
        org.apache.rat.ReportConfiguration reportConfiguration34 = new org.apache.rat.ReportConfiguration(log33);
        org.apache.rat.report.claim.ClaimStatistic claimStatistic35 = org.apache.rat.Reporter.report(reportConfiguration34);
        org.apache.rat.utils.Log log36 = null;
        org.apache.rat.ReportConfiguration reportConfiguration37 = new org.apache.rat.ReportConfiguration(log36);
        org.apache.rat.report.claim.ClaimStatistic claimStatistic38 = org.apache.rat.Reporter.report(reportConfiguration37);
        org.apache.rat.utils.ReportingSet.Options options39 = org.apache.rat.utils.ReportingSet.Options.OVERWRITE;
        reportConfiguration37.licenseDuplicateOption(options39);
        reportConfiguration34.familyDuplicateOption(options39);
        org.apache.commons.io.function.IOSupplier<java.io.PrintWriter> printWriterIOSupplier42 = reportConfiguration34.getWriter();
        boolean boolean43 = reportConfiguration34.isAddingLicensesForced();
        org.apache.rat.utils.Log log44 = null;
        org.apache.rat.ReportConfiguration reportConfiguration45 = new org.apache.rat.ReportConfiguration(log44);
        reportConfiguration45.addApprovedLicenseCategory(".cvsignore");
        org.apache.rat.utils.Log.Level level48 = org.apache.rat.utils.Log.Level.ERROR;
        reportConfiguration45.logFamilyCollisions(level48);
        reportConfiguration34.logLicenseCollisions(level48);
        org.apache.rat.utils.ReportingSet<java.lang.String> strSet51 = strSet31.setLogLevel(level48);
        org.apache.rat.license.LicenseSetFactory licenseSetFactory52 = new org.apache.rat.license.LicenseSetFactory(iLicenseSet30, (java.util.Collection<java.lang.String>) strSet31);
        org.apache.rat.license.LicenseSetFactory.LicenseFilter licenseFilter53 = null;
        // The following exception was thrown during execution in test generation
        try {
            java.util.SortedSet<java.lang.String> strSet54 = licenseSetFactory52.getLicenseFamilyIds(licenseFilter53);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(builder0);
        org.junit.Assert.assertNotNull(builder1);
        org.junit.Assert.assertNotNull(defaults2);
        org.junit.Assert.assertNull(filenameFilter5);
        org.junit.Assert.assertTrue("'" + licenseFilter6 + "' != '" + org.apache.rat.license.LicenseSetFactory.LicenseFilter.all + "'", licenseFilter6.equals(org.apache.rat.license.LicenseSetFactory.LicenseFilter.all));
        org.junit.Assert.assertNotNull(iLicenseSet7);
        org.junit.Assert.assertTrue("'" + addLicenseHeaders8 + "' != '" + org.apache.rat.config.AddLicenseHeaders.FALSE + "'", addLicenseHeaders8.equals(org.apache.rat.config.AddLicenseHeaders.FALSE));
        org.junit.Assert.assertNull(claimStatistic12);
        org.junit.Assert.assertTrue("'" + licenseFilter13 + "' != '" + org.apache.rat.license.LicenseSetFactory.LicenseFilter.all + "'", licenseFilter13.equals(org.apache.rat.license.LicenseSetFactory.LicenseFilter.all));
        org.junit.Assert.assertNull(filenameFilter18);
        org.junit.Assert.assertTrue("'" + licenseFilter19 + "' != '" + org.apache.rat.license.LicenseSetFactory.LicenseFilter.all + "'", licenseFilter19.equals(org.apache.rat.license.LicenseSetFactory.LicenseFilter.all));
        org.junit.Assert.assertNotNull(iLicenseSet20);
        org.junit.Assert.assertTrue("'" + addLicenseHeaders21 + "' != '" + org.apache.rat.config.AddLicenseHeaders.FALSE + "'", addLicenseHeaders21.equals(org.apache.rat.config.AddLicenseHeaders.FALSE));
        org.junit.Assert.assertNull(claimStatistic25);
        org.junit.Assert.assertTrue("'" + licenseFilter26 + "' != '" + org.apache.rat.license.LicenseSetFactory.LicenseFilter.all + "'", licenseFilter26.equals(org.apache.rat.license.LicenseSetFactory.LicenseFilter.all));
        org.junit.Assert.assertNotNull(iLicenseSet30);
        org.junit.Assert.assertNotNull(objArray32);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray32), "[]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray32), "[]");
        org.junit.Assert.assertNull(claimStatistic35);
        org.junit.Assert.assertNull(claimStatistic38);
        org.junit.Assert.assertTrue("'" + options39 + "' != '" + org.apache.rat.utils.ReportingSet.Options.OVERWRITE + "'", options39.equals(org.apache.rat.utils.ReportingSet.Options.OVERWRITE));
        org.junit.Assert.assertNotNull(printWriterIOSupplier42);
        org.junit.Assert.assertTrue("'" + boolean43 + "' != '" + false + "'", boolean43 == false);
        org.junit.Assert.assertTrue("'" + level48 + "' != '" + org.apache.rat.utils.Log.Level.ERROR + "'", level48.equals(org.apache.rat.utils.Log.Level.ERROR));
        org.junit.Assert.assertNotNull(strSet51);
    }

    @Test
    public void test12685() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest25.test12685");
        org.apache.rat.report.claim.ClaimStatistic claimStatistic0 = new org.apache.rat.report.claim.ClaimStatistic();
        claimStatistic0.setNumApproved((int) (short) 10);
        java.util.Map<java.lang.String, java.lang.Integer> strMap3 = null;
        claimStatistic0.setDocumentCategoryMap(strMap3);
        claimStatistic0.setNumUnknown((int) '4');
        claimStatistic0.setNumUnknown((int) (byte) 0);
        java.util.Map<java.lang.String, java.lang.Integer> strMap9 = claimStatistic0.getDocumentCategoryMap();
        claimStatistic0.setNumGenerated(0);
        int int12 = claimStatistic0.getNumGenerated();
        java.util.Map<java.lang.String, java.lang.Integer> strMap13 = claimStatistic0.getLicenseFileNameMap();
        int int14 = claimStatistic0.getNumUnApproved();
        int int15 = claimStatistic0.getNumApproved();
        org.junit.Assert.assertNull(strMap9);
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + 0 + "'", int12 == 0);
        org.junit.Assert.assertNull(strMap13);
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + 0 + "'", int14 == 0);
        org.junit.Assert.assertTrue("'" + int15 + "' != '" + 10 + "'", int15 == 10);
    }

    @Test
    public void test12686() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest25.test12686");
        org.apache.rat.report.claim.ClaimStatistic claimStatistic0 = new org.apache.rat.report.claim.ClaimStatistic();
        claimStatistic0.setNumApproved(10);
        int int3 = claimStatistic0.getNumUnknown();
        java.util.Map<java.lang.String, java.lang.Integer> strMap4 = claimStatistic0.getLicenseFileNameMap();
        java.util.Map<java.lang.String, java.lang.Integer> strMap5 = null;
        claimStatistic0.setDocumentCategoryMap(strMap5);
        java.util.Map<java.lang.String, java.lang.Integer> strMap7 = null;
        claimStatistic0.setDocumentCategoryMap(strMap7);
        java.util.Map<java.lang.String, java.lang.Integer> strMap9 = null;
        claimStatistic0.setLicenseFileNameMap(strMap9);
        int int11 = claimStatistic0.getNumUnApproved();
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 0 + "'", int3 == 0);
        org.junit.Assert.assertNull(strMap4);
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 0 + "'", int11 == 0);
    }

    @Test
    public void test12687() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest25.test12687");
        boolean boolean1 = org.apache.rat.document.impl.guesser.ArchiveGuesser.isArchive("SpdxBuilder: TextBuilder: d4148d3a-edbc-4672-b...");
        org.junit.Assert.assertTrue("'" + boolean1 + "' != '" + false + "'", boolean1 == false);
    }

    @Test
    public void test12688() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest25.test12688");
        boolean boolean1 = org.apache.rat.document.impl.guesser.NoteGuesser.isNote("39a7f852-2e6c-43df-83d1-8adf2fee5ca9");
        org.junit.Assert.assertTrue("'" + boolean1 + "' != '" + false + "'", boolean1 == false);
    }

    @Test
    public void test12689() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest25.test12689");
        org.apache.rat.utils.Log log0 = null;
        org.apache.rat.ReportConfiguration reportConfiguration1 = new org.apache.rat.ReportConfiguration(log0);
        reportConfiguration1.addApprovedLicenseCategory(".cvsignore");
        org.apache.rat.utils.Log.Level level4 = org.apache.rat.utils.Log.Level.ERROR;
        reportConfiguration1.logFamilyCollisions(level4);
        org.apache.commons.io.filefilter.IOFileFilter iOFileFilter6 = reportConfiguration1.getDirectoryFilter();
        java.lang.String[] strArray12 = new java.lang.String[] { "http://org/apache/rat/meta-data#LicenseFamilyCategory", "Datum [ name ='http://org/apache/rat/meta-data#LicenseFamilyCategory',value ='GPL1  ']", "MANIFEST.MF", "AllBuilder:", "The MIT License" };
        org.apache.rat.utils.ReportingSet<java.lang.String> strSet13 = new org.apache.rat.utils.ReportingSet<java.lang.String>();
        boolean boolean14 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strSet13, strArray12);
        boolean boolean16 = strSet13.addIfNotPresent("http://org/apache/rat/meta-data#LicenseFamilyName");
        boolean boolean18 = strSet13.addIfNotPresent("ef7a8b13-64c3-4510-bb0c-dbf208e1e73f");
        java.util.function.Function<java.lang.String, java.lang.String> strFunction19 = null;
        org.apache.rat.utils.ReportingSet<java.lang.String> strSet20 = strSet13.setMsgFormat(strFunction19);
        java.util.SortedSet<org.apache.rat.license.ILicenseFamily> iLicenseFamilySet22 = org.apache.rat.license.LicenseFamilySetFactory.emptyLicenseFamilySet();
        org.apache.rat.license.ILicenseFamily iLicenseFamily23 = org.apache.rat.license.LicenseFamilySetFactory.search("http://org/apache/rat/meta-data", iLicenseFamilySet22);
        boolean boolean24 = strSet13.containsAll((java.util.Collection<org.apache.rat.license.ILicenseFamily>) iLicenseFamilySet22);
        reportConfiguration1.removeApprovedLicenseCategories((java.util.Collection<java.lang.String>) strSet13);
        java.lang.String str26 = reportConfiguration1.getCopyrightMessage();
        reportConfiguration1.setStyleReport(true);
        boolean boolean29 = reportConfiguration1.isAddingLicensesForced();
        org.junit.Assert.assertTrue("'" + level4 + "' != '" + org.apache.rat.utils.Log.Level.ERROR + "'", level4.equals(org.apache.rat.utils.Log.Level.ERROR));
        org.junit.Assert.assertNotNull(iOFileFilter6);
        org.junit.Assert.assertNotNull(strArray12);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + true + "'", boolean14 == true);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + true + "'", boolean16 == true);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + true + "'", boolean18 == true);
        org.junit.Assert.assertNotNull(strSet20);
        org.junit.Assert.assertNotNull(iLicenseFamilySet22);
        org.junit.Assert.assertNull(iLicenseFamily23);
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + true + "'", boolean24 == true);
        org.junit.Assert.assertNull(str26);
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + false + "'", boolean29 == false);
    }

    @Test
    public void test12690() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest25.test12690");
        org.apache.rat.utils.Log log0 = null;
        org.apache.rat.ReportConfiguration reportConfiguration1 = new org.apache.rat.ReportConfiguration(log0);
        reportConfiguration1.addApprovedLicenseCategory(".cvsignore");
        org.apache.rat.utils.Log log4 = null;
        org.apache.rat.ReportConfiguration reportConfiguration5 = new org.apache.rat.ReportConfiguration(log4);
        java.io.FilenameFilter filenameFilter6 = reportConfiguration5.getInputFileFilter();
        org.apache.rat.license.LicenseSetFactory.LicenseFilter licenseFilter7 = org.apache.rat.license.LicenseSetFactory.LicenseFilter.all;
        java.util.SortedSet<org.apache.rat.license.ILicense> iLicenseSet8 = reportConfiguration5.getLicenses(licenseFilter7);
        reportConfiguration1.addLicensesIfNotPresent((java.util.Collection<org.apache.rat.license.ILicense>) iLicenseSet8);
        org.apache.rat.license.ILicenseFamily iLicenseFamily10 = null;
        reportConfiguration1.addFamily(iLicenseFamily10);
        org.apache.rat.utils.Log log12 = null;
        org.apache.rat.ReportConfiguration reportConfiguration13 = new org.apache.rat.ReportConfiguration(log12);
        org.apache.rat.report.claim.ClaimStatistic claimStatistic14 = org.apache.rat.Reporter.report(reportConfiguration13);
        org.apache.rat.utils.Log log15 = null;
        org.apache.rat.ReportConfiguration reportConfiguration16 = new org.apache.rat.ReportConfiguration(log15);
        org.apache.rat.report.claim.ClaimStatistic claimStatistic17 = org.apache.rat.Reporter.report(reportConfiguration16);
        org.apache.rat.utils.ReportingSet.Options options18 = org.apache.rat.utils.ReportingSet.Options.OVERWRITE;
        reportConfiguration16.licenseDuplicateOption(options18);
        reportConfiguration13.familyDuplicateOption(options18);
        org.apache.commons.io.function.IOSupplier<java.io.PrintWriter> printWriterIOSupplier21 = reportConfiguration13.getWriter();
        boolean boolean22 = reportConfiguration13.isAddingLicensesForced();
        org.apache.rat.utils.Log log23 = null;
        org.apache.rat.ReportConfiguration reportConfiguration24 = new org.apache.rat.ReportConfiguration(log23);
        reportConfiguration24.addApprovedLicenseCategory(".cvsignore");
        org.apache.rat.utils.Log.Level level27 = org.apache.rat.utils.Log.Level.ERROR;
        reportConfiguration24.logFamilyCollisions(level27);
        reportConfiguration13.logLicenseCollisions(level27);
        org.apache.commons.io.filefilter.IOFileFilter iOFileFilter30 = reportConfiguration13.getDirectoryFilter();
        reportConfiguration1.setInputFileFilter((java.io.FilenameFilter) iOFileFilter30);
        org.apache.commons.io.function.IOSupplier<java.io.OutputStream> outputStreamIOSupplier32 = reportConfiguration1.getOutput();
        org.junit.Assert.assertNull(filenameFilter6);
        org.junit.Assert.assertTrue("'" + licenseFilter7 + "' != '" + org.apache.rat.license.LicenseSetFactory.LicenseFilter.all + "'", licenseFilter7.equals(org.apache.rat.license.LicenseSetFactory.LicenseFilter.all));
        org.junit.Assert.assertNotNull(iLicenseSet8);
        org.junit.Assert.assertNull(claimStatistic14);
        org.junit.Assert.assertNull(claimStatistic17);
        org.junit.Assert.assertTrue("'" + options18 + "' != '" + org.apache.rat.utils.ReportingSet.Options.OVERWRITE + "'", options18.equals(org.apache.rat.utils.ReportingSet.Options.OVERWRITE));
        org.junit.Assert.assertNotNull(printWriterIOSupplier21);
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + false + "'", boolean22 == false);
        org.junit.Assert.assertTrue("'" + level27 + "' != '" + org.apache.rat.utils.Log.Level.ERROR + "'", level27.equals(org.apache.rat.utils.Log.Level.ERROR));
        org.junit.Assert.assertNotNull(iOFileFilter30);
        org.junit.Assert.assertNotNull(outputStreamIOSupplier32);
    }

    @Test
    public void test12691() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest25.test12691");
        org.apache.rat.config.ReportFormat reportFormat0 = org.apache.rat.config.ReportFormat.XML;
        boolean boolean2 = reportFormat0.is("GPL1 ");
        boolean boolean4 = reportFormat0.is("TMF  ");
        boolean boolean6 = reportFormat0.is("GPL1 ");
        boolean boolean8 = reportFormat0.is("9f36e98f-2295-49a7-ab5b-2e0fa3ce7c55");
        org.junit.Assert.assertTrue("'" + reportFormat0 + "' != '" + org.apache.rat.config.ReportFormat.XML + "'", reportFormat0.equals(org.apache.rat.config.ReportFormat.XML));
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + false + "'", boolean2 == false);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
    }

    @Test
    public void test12692() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest25.test12692");
        org.apache.rat.utils.Log log0 = null;
        org.apache.rat.ReportConfiguration reportConfiguration1 = new org.apache.rat.ReportConfiguration(log0);
        org.apache.rat.report.claim.ClaimStatistic claimStatistic2 = org.apache.rat.Reporter.report(reportConfiguration1);
        org.apache.rat.report.IReportable iReportable3 = null;
        reportConfiguration1.setReportable(iReportable3);
        org.apache.rat.license.ILicense iLicense5 = null;
        reportConfiguration1.addLicense(iLicense5);
        org.apache.rat.utils.Log log7 = null;
        org.apache.rat.ReportConfiguration reportConfiguration8 = new org.apache.rat.ReportConfiguration(log7);
        org.apache.rat.utils.ReportingSet.Options options9 = org.apache.rat.utils.ReportingSet.Options.OVERWRITE;
        reportConfiguration8.licenseDuplicateOption(options9);
        reportConfiguration1.familyDuplicateOption(options9);
        org.apache.rat.utils.Log log12 = null;
        org.apache.rat.ReportConfiguration reportConfiguration13 = new org.apache.rat.ReportConfiguration(log12);
        java.io.FilenameFilter filenameFilter14 = reportConfiguration13.getInputFileFilter();
        org.apache.rat.license.LicenseSetFactory.LicenseFilter licenseFilter15 = org.apache.rat.license.LicenseSetFactory.LicenseFilter.all;
        java.util.SortedSet<org.apache.rat.license.ILicense> iLicenseSet16 = reportConfiguration13.getLicenses(licenseFilter15);
        org.apache.rat.config.AddLicenseHeaders addLicenseHeaders17 = org.apache.rat.config.AddLicenseHeaders.FALSE;
        reportConfiguration13.setAddLicenseHeaders(addLicenseHeaders17);
        org.apache.rat.utils.Log log19 = null;
        org.apache.rat.ReportConfiguration reportConfiguration20 = new org.apache.rat.ReportConfiguration(log19);
        org.apache.rat.report.claim.ClaimStatistic claimStatistic21 = org.apache.rat.Reporter.report(reportConfiguration20);
        org.apache.rat.license.LicenseSetFactory.LicenseFilter licenseFilter22 = org.apache.rat.license.LicenseSetFactory.LicenseFilter.all;
        org.apache.rat.Reporter.listLicenses(reportConfiguration20, licenseFilter22);
        org.apache.rat.Reporter.listLicenses(reportConfiguration13, licenseFilter22);
        org.apache.rat.utils.Log log25 = null;
        org.apache.rat.ReportConfiguration reportConfiguration26 = new org.apache.rat.ReportConfiguration(log25);
        java.io.FilenameFilter filenameFilter27 = reportConfiguration26.getInputFileFilter();
        org.apache.rat.license.LicenseSetFactory.LicenseFilter licenseFilter28 = org.apache.rat.license.LicenseSetFactory.LicenseFilter.all;
        java.util.SortedSet<org.apache.rat.license.ILicense> iLicenseSet29 = reportConfiguration26.getLicenses(licenseFilter28);
        org.apache.rat.config.AddLicenseHeaders addLicenseHeaders30 = org.apache.rat.config.AddLicenseHeaders.FALSE;
        reportConfiguration26.setAddLicenseHeaders(addLicenseHeaders30);
        org.apache.rat.utils.Log log32 = null;
        org.apache.rat.ReportConfiguration reportConfiguration33 = new org.apache.rat.ReportConfiguration(log32);
        org.apache.rat.report.claim.ClaimStatistic claimStatistic34 = org.apache.rat.Reporter.report(reportConfiguration33);
        org.apache.rat.license.LicenseSetFactory.LicenseFilter licenseFilter35 = org.apache.rat.license.LicenseSetFactory.LicenseFilter.all;
        org.apache.rat.Reporter.listLicenses(reportConfiguration33, licenseFilter35);
        org.apache.rat.Reporter.listLicenses(reportConfiguration26, licenseFilter35);
        org.apache.rat.Reporter.listLicenses(reportConfiguration13, licenseFilter35);
        org.apache.commons.io.function.IOSupplier<java.io.OutputStream> outputStreamIOSupplier39 = reportConfiguration13.getOutput();
        reportConfiguration1.setOut(outputStreamIOSupplier39);
        org.apache.rat.report.IReportable iReportable41 = null;
        reportConfiguration1.setReportable(iReportable41);
        org.apache.commons.io.function.IOSupplier<java.io.PrintWriter> printWriterIOSupplier43 = reportConfiguration1.getWriter();
        org.apache.commons.io.function.IOSupplier<java.io.InputStream> inputStreamIOSupplier44 = reportConfiguration1.getStyleSheet();
        org.apache.rat.Defaults.Builder builder45 = org.apache.rat.Defaults.builder();
        org.apache.rat.Defaults.Builder builder46 = builder45.noDefault();
        org.apache.rat.Defaults defaults47 = builder46.build();
        org.apache.rat.Defaults.Builder builder48 = org.apache.rat.Defaults.builder();
        org.apache.rat.Defaults defaults49 = builder48.build();
        org.apache.rat.utils.Log log50 = null;
        org.apache.rat.ReportConfiguration reportConfiguration51 = new org.apache.rat.ReportConfiguration(log50);
        java.io.FilenameFilter filenameFilter52 = reportConfiguration51.getInputFileFilter();
        org.apache.rat.license.LicenseSetFactory.LicenseFilter licenseFilter53 = org.apache.rat.license.LicenseSetFactory.LicenseFilter.all;
        java.util.SortedSet<org.apache.rat.license.ILicense> iLicenseSet54 = reportConfiguration51.getLicenses(licenseFilter53);
        org.apache.rat.config.AddLicenseHeaders addLicenseHeaders55 = org.apache.rat.config.AddLicenseHeaders.FALSE;
        reportConfiguration51.setAddLicenseHeaders(addLicenseHeaders55);
        org.apache.rat.utils.Log log57 = null;
        org.apache.rat.ReportConfiguration reportConfiguration58 = new org.apache.rat.ReportConfiguration(log57);
        org.apache.rat.report.claim.ClaimStatistic claimStatistic59 = org.apache.rat.Reporter.report(reportConfiguration58);
        org.apache.rat.license.LicenseSetFactory.LicenseFilter licenseFilter60 = org.apache.rat.license.LicenseSetFactory.LicenseFilter.all;
        org.apache.rat.Reporter.listLicenses(reportConfiguration58, licenseFilter60);
        org.apache.rat.Reporter.listLicenses(reportConfiguration51, licenseFilter60);
        org.apache.rat.utils.Log log63 = null;
        org.apache.rat.ReportConfiguration reportConfiguration64 = new org.apache.rat.ReportConfiguration(log63);
        java.io.FilenameFilter filenameFilter65 = reportConfiguration64.getInputFileFilter();
        org.apache.rat.license.LicenseSetFactory.LicenseFilter licenseFilter66 = org.apache.rat.license.LicenseSetFactory.LicenseFilter.all;
        java.util.SortedSet<org.apache.rat.license.ILicense> iLicenseSet67 = reportConfiguration64.getLicenses(licenseFilter66);
        org.apache.rat.config.AddLicenseHeaders addLicenseHeaders68 = org.apache.rat.config.AddLicenseHeaders.FALSE;
        reportConfiguration64.setAddLicenseHeaders(addLicenseHeaders68);
        org.apache.rat.utils.Log log70 = null;
        org.apache.rat.ReportConfiguration reportConfiguration71 = new org.apache.rat.ReportConfiguration(log70);
        org.apache.rat.report.claim.ClaimStatistic claimStatistic72 = org.apache.rat.Reporter.report(reportConfiguration71);
        org.apache.rat.license.LicenseSetFactory.LicenseFilter licenseFilter73 = org.apache.rat.license.LicenseSetFactory.LicenseFilter.all;
        org.apache.rat.Reporter.listLicenses(reportConfiguration71, licenseFilter73);
        org.apache.rat.Reporter.listLicenses(reportConfiguration64, licenseFilter73);
        java.util.SortedSet<org.apache.rat.license.ILicenseFamily> iLicenseFamilySet76 = reportConfiguration51.getLicenseFamilies(licenseFilter73);
        java.util.SortedSet<org.apache.rat.license.ILicense> iLicenseSet77 = defaults49.getLicenses(licenseFilter73);
        java.util.SortedSet<org.apache.rat.license.ILicenseFamily> iLicenseFamilySet78 = defaults47.getLicenseFamilies(licenseFilter73);
        org.apache.rat.utils.Log log79 = null;
        org.apache.rat.ReportConfiguration reportConfiguration80 = new org.apache.rat.ReportConfiguration(log79);
        java.io.FilenameFilter filenameFilter81 = reportConfiguration80.getInputFileFilter();
        org.apache.rat.license.LicenseSetFactory.LicenseFilter licenseFilter82 = org.apache.rat.license.LicenseSetFactory.LicenseFilter.all;
        java.util.SortedSet<org.apache.rat.license.ILicense> iLicenseSet83 = reportConfiguration80.getLicenses(licenseFilter82);
        org.apache.rat.config.AddLicenseHeaders addLicenseHeaders84 = org.apache.rat.config.AddLicenseHeaders.FALSE;
        reportConfiguration80.setAddLicenseHeaders(addLicenseHeaders84);
        org.apache.rat.utils.Log log86 = null;
        org.apache.rat.ReportConfiguration reportConfiguration87 = new org.apache.rat.ReportConfiguration(log86);
        org.apache.rat.report.claim.ClaimStatistic claimStatistic88 = org.apache.rat.Reporter.report(reportConfiguration87);
        org.apache.rat.license.LicenseSetFactory.LicenseFilter licenseFilter89 = org.apache.rat.license.LicenseSetFactory.LicenseFilter.all;
        org.apache.rat.Reporter.listLicenses(reportConfiguration87, licenseFilter89);
        org.apache.rat.Reporter.listLicenses(reportConfiguration80, licenseFilter89);
        java.util.SortedSet<java.lang.String> strSet92 = defaults47.getLicenseIds(licenseFilter89);
        reportConfiguration1.setFrom(defaults47);
        org.junit.Assert.assertNull(claimStatistic2);
        org.junit.Assert.assertTrue("'" + options9 + "' != '" + org.apache.rat.utils.ReportingSet.Options.OVERWRITE + "'", options9.equals(org.apache.rat.utils.ReportingSet.Options.OVERWRITE));
        org.junit.Assert.assertNull(filenameFilter14);
        org.junit.Assert.assertTrue("'" + licenseFilter15 + "' != '" + org.apache.rat.license.LicenseSetFactory.LicenseFilter.all + "'", licenseFilter15.equals(org.apache.rat.license.LicenseSetFactory.LicenseFilter.all));
        org.junit.Assert.assertNotNull(iLicenseSet16);
        org.junit.Assert.assertTrue("'" + addLicenseHeaders17 + "' != '" + org.apache.rat.config.AddLicenseHeaders.FALSE + "'", addLicenseHeaders17.equals(org.apache.rat.config.AddLicenseHeaders.FALSE));
        org.junit.Assert.assertNull(claimStatistic21);
        org.junit.Assert.assertTrue("'" + licenseFilter22 + "' != '" + org.apache.rat.license.LicenseSetFactory.LicenseFilter.all + "'", licenseFilter22.equals(org.apache.rat.license.LicenseSetFactory.LicenseFilter.all));
        org.junit.Assert.assertNull(filenameFilter27);
        org.junit.Assert.assertTrue("'" + licenseFilter28 + "' != '" + org.apache.rat.license.LicenseSetFactory.LicenseFilter.all + "'", licenseFilter28.equals(org.apache.rat.license.LicenseSetFactory.LicenseFilter.all));
        org.junit.Assert.assertNotNull(iLicenseSet29);
        org.junit.Assert.assertTrue("'" + addLicenseHeaders30 + "' != '" + org.apache.rat.config.AddLicenseHeaders.FALSE + "'", addLicenseHeaders30.equals(org.apache.rat.config.AddLicenseHeaders.FALSE));
        org.junit.Assert.assertNull(claimStatistic34);
        org.junit.Assert.assertTrue("'" + licenseFilter35 + "' != '" + org.apache.rat.license.LicenseSetFactory.LicenseFilter.all + "'", licenseFilter35.equals(org.apache.rat.license.LicenseSetFactory.LicenseFilter.all));
        org.junit.Assert.assertNotNull(outputStreamIOSupplier39);
        org.junit.Assert.assertNotNull(printWriterIOSupplier43);
        org.junit.Assert.assertNull(inputStreamIOSupplier44);
        org.junit.Assert.assertNotNull(builder45);
        org.junit.Assert.assertNotNull(builder46);
        org.junit.Assert.assertNotNull(defaults47);
        org.junit.Assert.assertNotNull(builder48);
        org.junit.Assert.assertNotNull(defaults49);
        org.junit.Assert.assertNull(filenameFilter52);
        org.junit.Assert.assertTrue("'" + licenseFilter53 + "' != '" + org.apache.rat.license.LicenseSetFactory.LicenseFilter.all + "'", licenseFilter53.equals(org.apache.rat.license.LicenseSetFactory.LicenseFilter.all));
        org.junit.Assert.assertNotNull(iLicenseSet54);
        org.junit.Assert.assertTrue("'" + addLicenseHeaders55 + "' != '" + org.apache.rat.config.AddLicenseHeaders.FALSE + "'", addLicenseHeaders55.equals(org.apache.rat.config.AddLicenseHeaders.FALSE));
        org.junit.Assert.assertNull(claimStatistic59);
        org.junit.Assert.assertTrue("'" + licenseFilter60 + "' != '" + org.apache.rat.license.LicenseSetFactory.LicenseFilter.all + "'", licenseFilter60.equals(org.apache.rat.license.LicenseSetFactory.LicenseFilter.all));
        org.junit.Assert.assertNull(filenameFilter65);
        org.junit.Assert.assertTrue("'" + licenseFilter66 + "' != '" + org.apache.rat.license.LicenseSetFactory.LicenseFilter.all + "'", licenseFilter66.equals(org.apache.rat.license.LicenseSetFactory.LicenseFilter.all));
        org.junit.Assert.assertNotNull(iLicenseSet67);
        org.junit.Assert.assertTrue("'" + addLicenseHeaders68 + "' != '" + org.apache.rat.config.AddLicenseHeaders.FALSE + "'", addLicenseHeaders68.equals(org.apache.rat.config.AddLicenseHeaders.FALSE));
        org.junit.Assert.assertNull(claimStatistic72);
        org.junit.Assert.assertTrue("'" + licenseFilter73 + "' != '" + org.apache.rat.license.LicenseSetFactory.LicenseFilter.all + "'", licenseFilter73.equals(org.apache.rat.license.LicenseSetFactory.LicenseFilter.all));
        org.junit.Assert.assertNotNull(iLicenseFamilySet76);
        org.junit.Assert.assertNotNull(iLicenseSet77);
        org.junit.Assert.assertNotNull(iLicenseFamilySet78);
        org.junit.Assert.assertNull(filenameFilter81);
        org.junit.Assert.assertTrue("'" + licenseFilter82 + "' != '" + org.apache.rat.license.LicenseSetFactory.LicenseFilter.all + "'", licenseFilter82.equals(org.apache.rat.license.LicenseSetFactory.LicenseFilter.all));
        org.junit.Assert.assertNotNull(iLicenseSet83);
        org.junit.Assert.assertTrue("'" + addLicenseHeaders84 + "' != '" + org.apache.rat.config.AddLicenseHeaders.FALSE + "'", addLicenseHeaders84.equals(org.apache.rat.config.AddLicenseHeaders.FALSE));
        org.junit.Assert.assertNull(claimStatistic88);
        org.junit.Assert.assertTrue("'" + licenseFilter89 + "' != '" + org.apache.rat.license.LicenseSetFactory.LicenseFilter.all + "'", licenseFilter89.equals(org.apache.rat.license.LicenseSetFactory.LicenseFilter.all));
        org.junit.Assert.assertNotNull(strSet92);
    }

    @Test
    public void test12693() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest25.test12693");
        org.apache.rat.config.SourceCodeManagementSystems sourceCodeManagementSystems0 = org.apache.rat.config.SourceCodeManagementSystems.SUBVERSION;
        boolean boolean1 = sourceCodeManagementSystems0.hasIgnoreFile();
        boolean boolean2 = sourceCodeManagementSystems0.hasIgnoreFile();
        java.lang.String str3 = sourceCodeManagementSystems0.getIgnoreFile();
        java.util.List<java.lang.String> strList4 = sourceCodeManagementSystems0.getExclusions();
        org.junit.Assert.assertTrue("'" + sourceCodeManagementSystems0 + "' != '" + org.apache.rat.config.SourceCodeManagementSystems.SUBVERSION + "'", sourceCodeManagementSystems0.equals(org.apache.rat.config.SourceCodeManagementSystems.SUBVERSION));
        org.junit.Assert.assertTrue("'" + boolean1 + "' != '" + false + "'", boolean1 == false);
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + false + "'", boolean2 == false);
        org.junit.Assert.assertNull(str3);
        org.junit.Assert.assertNotNull(strList4);
    }

    @Test
    public void test12694() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest25.test12694");
        org.apache.rat.utils.Log log0 = null;
        org.apache.rat.ReportConfiguration reportConfiguration1 = new org.apache.rat.ReportConfiguration(log0);
        org.apache.rat.report.claim.ClaimStatistic claimStatistic2 = org.apache.rat.Reporter.report(reportConfiguration1);
        org.apache.rat.license.ILicense[] iLicenseArray3 = new org.apache.rat.license.ILicense[] {};
        java.util.TreeSet<org.apache.rat.license.ILicense> iLicenseSet4 = new java.util.TreeSet<org.apache.rat.license.ILicense>();
        boolean boolean5 = java.util.Collections.addAll((java.util.Collection<org.apache.rat.license.ILicense>) iLicenseSet4, iLicenseArray3);
        java.lang.String[] strArray18 = new java.lang.String[] { "GPL2 ", "GPL1 ", "notice", "http://org/apache/rat/meta-data#LicenseFamilyName", "notice", "GPL2 ", "http://org/apache/rat/meta-data#LicenseFamilyName", "", "GPL2 ", "", "GPL1 ", "hi!" };
        java.util.ArrayList<java.lang.String> strList19 = new java.util.ArrayList<java.lang.String>();
        boolean boolean20 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strList19, strArray18);
        org.apache.rat.license.LicenseSetFactory licenseSetFactory21 = new org.apache.rat.license.LicenseSetFactory((java.util.SortedSet<org.apache.rat.license.ILicense>) iLicenseSet4, (java.util.Collection<java.lang.String>) strList19);
        org.apache.rat.utils.Log log22 = null;
        org.apache.rat.ReportConfiguration reportConfiguration23 = new org.apache.rat.ReportConfiguration(log22);
        java.io.FilenameFilter filenameFilter24 = reportConfiguration23.getInputFileFilter();
        org.apache.rat.license.LicenseSetFactory.LicenseFilter licenseFilter25 = org.apache.rat.license.LicenseSetFactory.LicenseFilter.all;
        java.util.SortedSet<org.apache.rat.license.ILicense> iLicenseSet26 = reportConfiguration23.getLicenses(licenseFilter25);
        org.apache.rat.config.AddLicenseHeaders addLicenseHeaders27 = org.apache.rat.config.AddLicenseHeaders.FALSE;
        reportConfiguration23.setAddLicenseHeaders(addLicenseHeaders27);
        org.apache.rat.utils.Log log29 = null;
        org.apache.rat.ReportConfiguration reportConfiguration30 = new org.apache.rat.ReportConfiguration(log29);
        org.apache.rat.report.claim.ClaimStatistic claimStatistic31 = org.apache.rat.Reporter.report(reportConfiguration30);
        org.apache.rat.license.LicenseSetFactory.LicenseFilter licenseFilter32 = org.apache.rat.license.LicenseSetFactory.LicenseFilter.all;
        org.apache.rat.Reporter.listLicenses(reportConfiguration30, licenseFilter32);
        org.apache.rat.Reporter.listLicenses(reportConfiguration23, licenseFilter32);
        org.apache.rat.utils.Log log35 = null;
        org.apache.rat.ReportConfiguration reportConfiguration36 = new org.apache.rat.ReportConfiguration(log35);
        java.io.FilenameFilter filenameFilter37 = reportConfiguration36.getInputFileFilter();
        org.apache.rat.license.LicenseSetFactory.LicenseFilter licenseFilter38 = org.apache.rat.license.LicenseSetFactory.LicenseFilter.all;
        java.util.SortedSet<org.apache.rat.license.ILicense> iLicenseSet39 = reportConfiguration36.getLicenses(licenseFilter38);
        org.apache.rat.config.AddLicenseHeaders addLicenseHeaders40 = org.apache.rat.config.AddLicenseHeaders.FALSE;
        reportConfiguration36.setAddLicenseHeaders(addLicenseHeaders40);
        org.apache.rat.utils.Log log42 = null;
        org.apache.rat.ReportConfiguration reportConfiguration43 = new org.apache.rat.ReportConfiguration(log42);
        org.apache.rat.report.claim.ClaimStatistic claimStatistic44 = org.apache.rat.Reporter.report(reportConfiguration43);
        org.apache.rat.license.LicenseSetFactory.LicenseFilter licenseFilter45 = org.apache.rat.license.LicenseSetFactory.LicenseFilter.all;
        org.apache.rat.Reporter.listLicenses(reportConfiguration43, licenseFilter45);
        org.apache.rat.Reporter.listLicenses(reportConfiguration36, licenseFilter45);
        org.apache.rat.Reporter.listLicenses(reportConfiguration23, licenseFilter45);
        java.util.SortedSet<org.apache.rat.license.ILicense> iLicenseSet49 = licenseSetFactory21.getLicenses(licenseFilter45);
        reportConfiguration1.addLicensesIfNotPresent((java.util.Collection<org.apache.rat.license.ILicense>) iLicenseSet49);
        org.apache.rat.utils.Log log51 = reportConfiguration1.getLog();
        reportConfiguration1.setCopyrightMessage("http://org/apache/rat/meta-data#FileCategory");
        reportConfiguration1.setCopyrightMessage("TextBuilder: META-DATA#LICENSEFAM...");
        reportConfiguration1.setStyleReport(false);
        org.junit.Assert.assertNull(claimStatistic2);
        org.junit.Assert.assertNotNull(iLicenseArray3);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertNotNull(strArray18);
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + true + "'", boolean20 == true);
        org.junit.Assert.assertNull(filenameFilter24);
        org.junit.Assert.assertTrue("'" + licenseFilter25 + "' != '" + org.apache.rat.license.LicenseSetFactory.LicenseFilter.all + "'", licenseFilter25.equals(org.apache.rat.license.LicenseSetFactory.LicenseFilter.all));
        org.junit.Assert.assertNotNull(iLicenseSet26);
        org.junit.Assert.assertTrue("'" + addLicenseHeaders27 + "' != '" + org.apache.rat.config.AddLicenseHeaders.FALSE + "'", addLicenseHeaders27.equals(org.apache.rat.config.AddLicenseHeaders.FALSE));
        org.junit.Assert.assertNull(claimStatistic31);
        org.junit.Assert.assertTrue("'" + licenseFilter32 + "' != '" + org.apache.rat.license.LicenseSetFactory.LicenseFilter.all + "'", licenseFilter32.equals(org.apache.rat.license.LicenseSetFactory.LicenseFilter.all));
        org.junit.Assert.assertNull(filenameFilter37);
        org.junit.Assert.assertTrue("'" + licenseFilter38 + "' != '" + org.apache.rat.license.LicenseSetFactory.LicenseFilter.all + "'", licenseFilter38.equals(org.apache.rat.license.LicenseSetFactory.LicenseFilter.all));
        org.junit.Assert.assertNotNull(iLicenseSet39);
        org.junit.Assert.assertTrue("'" + addLicenseHeaders40 + "' != '" + org.apache.rat.config.AddLicenseHeaders.FALSE + "'", addLicenseHeaders40.equals(org.apache.rat.config.AddLicenseHeaders.FALSE));
        org.junit.Assert.assertNull(claimStatistic44);
        org.junit.Assert.assertTrue("'" + licenseFilter45 + "' != '" + org.apache.rat.license.LicenseSetFactory.LicenseFilter.all + "'", licenseFilter45.equals(org.apache.rat.license.LicenseSetFactory.LicenseFilter.all));
        org.junit.Assert.assertNotNull(iLicenseSet49);
        org.junit.Assert.assertNull(log51);
    }

    @Test
    public void test12695() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest25.test12695");
        // The following exception was thrown during execution in test generation
        try {
            org.apache.rat.configuration.builders.AbstractBuilder abstractBuilder1 = org.apache.rat.configuration.MatcherBuilderTracker.getMatcherBuilder("cd722784-0ca5-4095-a8c9-b78aa070325f");
            org.junit.Assert.fail("Expected exception of type org.apache.rat.ConfigurationException; message: ?Valid builders?all?matcherRef?copyright?not?regex?spdx?text?any?ERROR MSG?No matcher builder named cd722784-0ca5-4095-a8c9-b78aa070325f");
        } catch (org.apache.rat.ConfigurationException e) {
            // Expected exception.
        }
    }

    @Test
    public void test12696() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest25.test12696");
        org.apache.rat.license.ILicenseFamily.Builder builder0 = org.apache.rat.license.ILicenseFamily.builder();
        java.lang.String str1 = builder0.getCategory();
        org.apache.rat.license.ILicenseFamily.Builder builder3 = builder0.setLicenseFamilyCategory("Copyright Builder: s:null e:null o:null");
        org.apache.rat.license.ILicenseFamily.Builder builder5 = builder3.setLicenseFamilyName("6486879f-fc81-4b57-aec7-c4c77d540c30");
        org.apache.rat.license.ILicenseFamily.Builder builder7 = builder3.setLicenseFamilyName("f6c7d16f90d4435db9d9a9f6c196d56a");
        org.junit.Assert.assertNotNull(builder0);
        org.junit.Assert.assertNull(str1);
        org.junit.Assert.assertNotNull(builder3);
        org.junit.Assert.assertNotNull(builder5);
        org.junit.Assert.assertNotNull(builder7);
    }

    @Test
    public void test12697() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest25.test12697");
        org.apache.rat.config.SourceCodeManagementSystems sourceCodeManagementSystems0 = org.apache.rat.config.SourceCodeManagementSystems.MERCURIAL;
        java.lang.String str1 = sourceCodeManagementSystems0.getIgnoreFile();
        java.util.List<java.lang.String> strList2 = sourceCodeManagementSystems0.getExclusions();
        boolean boolean3 = sourceCodeManagementSystems0.hasIgnoreFile();
        java.util.List<java.lang.String> strList4 = sourceCodeManagementSystems0.getExclusions();
        java.io.FilenameFilter filenameFilter5 = org.apache.rat.Report.parseExclusions(strList4);
        org.junit.Assert.assertTrue("'" + sourceCodeManagementSystems0 + "' != '" + org.apache.rat.config.SourceCodeManagementSystems.MERCURIAL + "'", sourceCodeManagementSystems0.equals(org.apache.rat.config.SourceCodeManagementSystems.MERCURIAL));
        org.junit.Assert.assertEquals("'" + str1 + "' != '" + ".hgignore" + "'", str1, ".hgignore");
        org.junit.Assert.assertNotNull(strList2);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + true + "'", boolean3 == true);
        org.junit.Assert.assertNotNull(strList4);
        org.junit.Assert.assertNotNull(filenameFilter5);
    }

    @Test
    public void test12698() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest25.test12698");
        org.apache.rat.utils.Log log0 = null;
        org.apache.rat.ReportConfiguration reportConfiguration1 = new org.apache.rat.ReportConfiguration(log0);
        org.apache.rat.report.claim.ClaimStatistic claimStatistic2 = org.apache.rat.Reporter.report(reportConfiguration1);
        reportConfiguration1.addApprovedLicenseCategory("Copyright Builder: s:null e:null o:null");
        java.util.SortedSet<java.lang.String> strSet5 = reportConfiguration1.getApprovedLicenseCategories();
        java.io.FilenameFilter filenameFilter6 = reportConfiguration1.getInputFileFilter();
        org.apache.rat.utils.Log log7 = null;
        org.apache.rat.ReportConfiguration reportConfiguration8 = new org.apache.rat.ReportConfiguration(log7);
        org.apache.rat.report.claim.ClaimStatistic claimStatistic9 = org.apache.rat.Reporter.report(reportConfiguration8);
        org.apache.rat.utils.ReportingSet.Options options10 = org.apache.rat.utils.ReportingSet.Options.OVERWRITE;
        reportConfiguration8.licenseDuplicateOption(options10);
        java.util.SortedSet<org.apache.rat.license.ILicenseFamily> iLicenseFamilySet13 = org.apache.rat.license.LicenseFamilySetFactory.emptyLicenseFamilySet();
        org.apache.rat.license.ILicenseFamily iLicenseFamily14 = org.apache.rat.license.LicenseFamilySetFactory.search("http://org/apache/rat/meta-data", iLicenseFamilySet13);
        org.apache.rat.policy.DefaultPolicy defaultPolicy15 = new org.apache.rat.policy.DefaultPolicy((java.util.Collection<org.apache.rat.license.ILicenseFamily>) iLicenseFamilySet13);
        reportConfiguration8.addFamilies((java.util.Collection<org.apache.rat.license.ILicenseFamily>) iLicenseFamilySet13);
        org.apache.rat.utils.ReportingSet<java.lang.String> strSet17 = new org.apache.rat.utils.ReportingSet<java.lang.String>();
        java.lang.Object[] objArray18 = strSet17.toArray();
        org.apache.rat.license.LicenseFamilySetFactory licenseFamilySetFactory19 = new org.apache.rat.license.LicenseFamilySetFactory(iLicenseFamilySet13, (java.util.Collection<java.lang.String>) strSet17);
        reportConfiguration1.addApprovedLicenseCategories((java.util.Collection<java.lang.String>) strSet17);
        org.apache.rat.document.ToNameTransformer toNameTransformer21 = new org.apache.rat.document.ToNameTransformer();
        org.apache.rat.utils.DefaultLog defaultLog22 = org.apache.rat.utils.DefaultLog.INSTANCE;
        org.apache.rat.license.ILicense.Builder builder23 = org.apache.rat.license.ILicense.builder();
        org.apache.rat.license.ILicense.Builder builder25 = builder23.setLicenseFamilyCategory("");
        org.apache.rat.analysis.matchers.CopyrightMatcher copyrightMatcher29 = new org.apache.rat.analysis.matchers.CopyrightMatcher("", "GPL1 ", "hi!");
        org.apache.rat.analysis.IHeaderMatcher.State state30 = copyrightMatcher29.finalizeState();
        org.apache.rat.license.ILicense.Builder builder31 = builder25.setMatcher((org.apache.rat.analysis.IHeaderMatcher) copyrightMatcher29);
        org.apache.rat.license.ILicense.Builder builder33 = builder31.setLicenseFamilyCategory("");
        defaultLog22.error((java.lang.Object) builder33);
        java.lang.Object obj35 = toNameTransformer21.transform((java.lang.Object) defaultLog22);
        org.apache.rat.utils.Log log36 = null;
        org.apache.rat.ReportConfiguration reportConfiguration37 = new org.apache.rat.ReportConfiguration(log36);
        org.apache.rat.report.claim.ClaimStatistic claimStatistic38 = org.apache.rat.Reporter.report(reportConfiguration37);
        org.apache.rat.utils.Log log39 = null;
        org.apache.rat.ReportConfiguration reportConfiguration40 = new org.apache.rat.ReportConfiguration(log39);
        org.apache.rat.report.claim.ClaimStatistic claimStatistic41 = org.apache.rat.Reporter.report(reportConfiguration40);
        org.apache.rat.utils.ReportingSet.Options options42 = org.apache.rat.utils.ReportingSet.Options.OVERWRITE;
        reportConfiguration40.licenseDuplicateOption(options42);
        reportConfiguration37.familyDuplicateOption(options42);
        org.apache.commons.io.function.IOSupplier<java.io.PrintWriter> printWriterIOSupplier45 = reportConfiguration37.getWriter();
        boolean boolean46 = reportConfiguration37.isAddingLicensesForced();
        org.apache.rat.utils.Log log47 = null;
        org.apache.rat.ReportConfiguration reportConfiguration48 = new org.apache.rat.ReportConfiguration(log47);
        reportConfiguration48.addApprovedLicenseCategory(".cvsignore");
        org.apache.rat.utils.Log.Level level51 = org.apache.rat.utils.Log.Level.ERROR;
        reportConfiguration48.logFamilyCollisions(level51);
        reportConfiguration37.logLicenseCollisions(level51);
        defaultLog22.setLevel(level51);
        boolean boolean55 = strSet17.equals((java.lang.Object) level51);
        boolean boolean57 = strSet17.add("4a00cf7d-fe76-423e-917e-b03bbae6b8a5");
        java.lang.String str58 = strSet17.first();
        org.junit.Assert.assertNull(claimStatistic2);
        org.junit.Assert.assertNotNull(strSet5);
        org.junit.Assert.assertNull(filenameFilter6);
        org.junit.Assert.assertNull(claimStatistic9);
        org.junit.Assert.assertTrue("'" + options10 + "' != '" + org.apache.rat.utils.ReportingSet.Options.OVERWRITE + "'", options10.equals(org.apache.rat.utils.ReportingSet.Options.OVERWRITE));
        org.junit.Assert.assertNotNull(iLicenseFamilySet13);
        org.junit.Assert.assertNull(iLicenseFamily14);
        org.junit.Assert.assertNotNull(objArray18);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray18), "[]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray18), "[]");
        org.junit.Assert.assertNotNull(defaultLog22);
        org.junit.Assert.assertNotNull(builder23);
        org.junit.Assert.assertNotNull(builder25);
        org.junit.Assert.assertTrue("'" + state30 + "' != '" + org.apache.rat.analysis.IHeaderMatcher.State.f + "'", state30.equals(org.apache.rat.analysis.IHeaderMatcher.State.f));
        org.junit.Assert.assertNotNull(builder31);
        org.junit.Assert.assertNotNull(builder33);
        org.junit.Assert.assertNull(obj35);
        org.junit.Assert.assertNull(claimStatistic38);
        org.junit.Assert.assertNull(claimStatistic41);
        org.junit.Assert.assertTrue("'" + options42 + "' != '" + org.apache.rat.utils.ReportingSet.Options.OVERWRITE + "'", options42.equals(org.apache.rat.utils.ReportingSet.Options.OVERWRITE));
        org.junit.Assert.assertNotNull(printWriterIOSupplier45);
        org.junit.Assert.assertTrue("'" + boolean46 + "' != '" + false + "'", boolean46 == false);
        org.junit.Assert.assertTrue("'" + level51 + "' != '" + org.apache.rat.utils.Log.Level.ERROR + "'", level51.equals(org.apache.rat.utils.Log.Level.ERROR));
        org.junit.Assert.assertTrue("'" + boolean55 + "' != '" + false + "'", boolean55 == false);
        org.junit.Assert.assertTrue("'" + boolean57 + "' != '" + true + "'", boolean57 == true);
        org.junit.Assert.assertEquals("'" + str58 + "' != '" + "4a00cf7d-fe76-423e-917e-b03bbae6b8a5" + "'", str58, "4a00cf7d-fe76-423e-917e-b03bbae6b8a5");
    }

    @Test
    public void test12699() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest25.test12699");
        org.apache.rat.utils.DefaultLog defaultLog0 = org.apache.rat.utils.DefaultLog.INSTANCE;
        org.apache.rat.license.ILicense.Builder builder1 = org.apache.rat.license.ILicense.builder();
        org.apache.rat.license.ILicense.Builder builder3 = builder1.setLicenseFamilyCategory("");
        org.apache.rat.analysis.matchers.CopyrightMatcher copyrightMatcher7 = new org.apache.rat.analysis.matchers.CopyrightMatcher("", "GPL1 ", "hi!");
        org.apache.rat.analysis.IHeaderMatcher.State state8 = copyrightMatcher7.finalizeState();
        org.apache.rat.license.ILicense.Builder builder9 = builder3.setMatcher((org.apache.rat.analysis.IHeaderMatcher) copyrightMatcher7);
        org.apache.rat.license.ILicense.Builder builder11 = builder9.setLicenseFamilyCategory("");
        defaultLog0.error((java.lang.Object) builder11);
        org.apache.rat.utils.Log log13 = null;
        org.apache.rat.ReportConfiguration reportConfiguration14 = new org.apache.rat.ReportConfiguration(log13);
        java.io.FilenameFilter filenameFilter15 = reportConfiguration14.getInputFileFilter();
        org.apache.rat.license.LicenseSetFactory.LicenseFilter licenseFilter16 = org.apache.rat.license.LicenseSetFactory.LicenseFilter.all;
        java.util.SortedSet<org.apache.rat.license.ILicense> iLicenseSet17 = reportConfiguration14.getLicenses(licenseFilter16);
        org.apache.rat.config.AddLicenseHeaders addLicenseHeaders18 = org.apache.rat.config.AddLicenseHeaders.FALSE;
        reportConfiguration14.setAddLicenseHeaders(addLicenseHeaders18);
        org.apache.rat.utils.Log log20 = null;
        org.apache.rat.ReportConfiguration reportConfiguration21 = new org.apache.rat.ReportConfiguration(log20);
        org.apache.rat.report.claim.ClaimStatistic claimStatistic22 = org.apache.rat.Reporter.report(reportConfiguration21);
        org.apache.rat.license.LicenseSetFactory.LicenseFilter licenseFilter23 = org.apache.rat.license.LicenseSetFactory.LicenseFilter.all;
        org.apache.rat.Reporter.listLicenses(reportConfiguration21, licenseFilter23);
        org.apache.rat.Reporter.listLicenses(reportConfiguration14, licenseFilter23);
        org.apache.rat.utils.Log log26 = null;
        org.apache.rat.ReportConfiguration reportConfiguration27 = new org.apache.rat.ReportConfiguration(log26);
        java.io.FilenameFilter filenameFilter28 = reportConfiguration27.getInputFileFilter();
        org.apache.rat.license.LicenseSetFactory.LicenseFilter licenseFilter29 = org.apache.rat.license.LicenseSetFactory.LicenseFilter.all;
        java.util.SortedSet<org.apache.rat.license.ILicense> iLicenseSet30 = reportConfiguration27.getLicenses(licenseFilter29);
        org.apache.rat.config.AddLicenseHeaders addLicenseHeaders31 = org.apache.rat.config.AddLicenseHeaders.FALSE;
        reportConfiguration27.setAddLicenseHeaders(addLicenseHeaders31);
        org.apache.rat.utils.Log log33 = null;
        org.apache.rat.ReportConfiguration reportConfiguration34 = new org.apache.rat.ReportConfiguration(log33);
        org.apache.rat.report.claim.ClaimStatistic claimStatistic35 = org.apache.rat.Reporter.report(reportConfiguration34);
        org.apache.rat.license.LicenseSetFactory.LicenseFilter licenseFilter36 = org.apache.rat.license.LicenseSetFactory.LicenseFilter.all;
        org.apache.rat.Reporter.listLicenses(reportConfiguration34, licenseFilter36);
        org.apache.rat.Reporter.listLicenses(reportConfiguration27, licenseFilter36);
        org.apache.rat.Reporter.listLicenses(reportConfiguration14, licenseFilter36);
        org.apache.rat.utils.Log log40 = null;
        org.apache.rat.ReportConfiguration reportConfiguration41 = new org.apache.rat.ReportConfiguration(log40);
        org.apache.commons.io.function.IOSupplier<java.io.OutputStream> outputStreamIOSupplier42 = reportConfiguration41.getOutput();
        reportConfiguration14.setOut(outputStreamIOSupplier42);
        org.apache.rat.utils.Log.Level level44 = org.apache.rat.utils.Log.Level.WARN;
        reportConfiguration14.logLicenseCollisions(level44);
        defaultLog0.warn((java.lang.Object) level44);
        defaultLog0.info((java.lang.Object) "TextBuilder: Datum [ name ='http:...");
        org.apache.rat.utils.Log log49 = null;
        org.apache.rat.ReportConfiguration reportConfiguration50 = new org.apache.rat.ReportConfiguration(log49);
        java.io.FilenameFilter filenameFilter51 = reportConfiguration50.getInputFileFilter();
        org.apache.rat.license.LicenseSetFactory.LicenseFilter licenseFilter52 = org.apache.rat.license.LicenseSetFactory.LicenseFilter.all;
        java.util.SortedSet<org.apache.rat.license.ILicense> iLicenseSet53 = reportConfiguration50.getLicenses(licenseFilter52);
        org.apache.rat.license.ILicenseFamily iLicenseFamily54 = null;
        reportConfiguration50.addFamily(iLicenseFamily54);
        reportConfiguration50.setCopyrightMessage("hi!");
        defaultLog0.error((java.lang.Object) reportConfiguration50);
        org.apache.rat.annotation.ApacheV2LicenseAppender apacheV2LicenseAppender60 = new org.apache.rat.annotation.ApacheV2LicenseAppender((org.apache.rat.utils.Log) defaultLog0, "03f7b314-6887-4617-9c7e-bf1600b331cd");
        org.apache.rat.annotation.ApacheV2LicenseAppender apacheV2LicenseAppender62 = new org.apache.rat.annotation.ApacheV2LicenseAppender((org.apache.rat.utils.Log) defaultLog0, "7480723c65a64470aa58975de51fe7c5");
        org.apache.rat.annotation.ApacheV2LicenseAppender apacheV2LicenseAppender64 = new org.apache.rat.annotation.ApacheV2LicenseAppender((org.apache.rat.utils.Log) defaultLog0, "73fbee1b-7ed9-442a-968e-b2b525ca688f");
        java.io.File file65 = null;
        // The following exception was thrown during execution in test generation
        try {
            java.lang.String str66 = apacheV2LicenseAppender64.getLicenseHeader(file65);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(defaultLog0);
        org.junit.Assert.assertNotNull(builder1);
        org.junit.Assert.assertNotNull(builder3);
        org.junit.Assert.assertTrue("'" + state8 + "' != '" + org.apache.rat.analysis.IHeaderMatcher.State.f + "'", state8.equals(org.apache.rat.analysis.IHeaderMatcher.State.f));
        org.junit.Assert.assertNotNull(builder9);
        org.junit.Assert.assertNotNull(builder11);
        org.junit.Assert.assertNull(filenameFilter15);
        org.junit.Assert.assertTrue("'" + licenseFilter16 + "' != '" + org.apache.rat.license.LicenseSetFactory.LicenseFilter.all + "'", licenseFilter16.equals(org.apache.rat.license.LicenseSetFactory.LicenseFilter.all));
        org.junit.Assert.assertNotNull(iLicenseSet17);
        org.junit.Assert.assertTrue("'" + addLicenseHeaders18 + "' != '" + org.apache.rat.config.AddLicenseHeaders.FALSE + "'", addLicenseHeaders18.equals(org.apache.rat.config.AddLicenseHeaders.FALSE));
        org.junit.Assert.assertNull(claimStatistic22);
        org.junit.Assert.assertTrue("'" + licenseFilter23 + "' != '" + org.apache.rat.license.LicenseSetFactory.LicenseFilter.all + "'", licenseFilter23.equals(org.apache.rat.license.LicenseSetFactory.LicenseFilter.all));
        org.junit.Assert.assertNull(filenameFilter28);
        org.junit.Assert.assertTrue("'" + licenseFilter29 + "' != '" + org.apache.rat.license.LicenseSetFactory.LicenseFilter.all + "'", licenseFilter29.equals(org.apache.rat.license.LicenseSetFactory.LicenseFilter.all));
        org.junit.Assert.assertNotNull(iLicenseSet30);
        org.junit.Assert.assertTrue("'" + addLicenseHeaders31 + "' != '" + org.apache.rat.config.AddLicenseHeaders.FALSE + "'", addLicenseHeaders31.equals(org.apache.rat.config.AddLicenseHeaders.FALSE));
        org.junit.Assert.assertNull(claimStatistic35);
        org.junit.Assert.assertTrue("'" + licenseFilter36 + "' != '" + org.apache.rat.license.LicenseSetFactory.LicenseFilter.all + "'", licenseFilter36.equals(org.apache.rat.license.LicenseSetFactory.LicenseFilter.all));
        org.junit.Assert.assertNotNull(outputStreamIOSupplier42);
        org.junit.Assert.assertTrue("'" + level44 + "' != '" + org.apache.rat.utils.Log.Level.WARN + "'", level44.equals(org.apache.rat.utils.Log.Level.WARN));
        org.junit.Assert.assertNull(filenameFilter51);
        org.junit.Assert.assertTrue("'" + licenseFilter52 + "' != '" + org.apache.rat.license.LicenseSetFactory.LicenseFilter.all + "'", licenseFilter52.equals(org.apache.rat.license.LicenseSetFactory.LicenseFilter.all));
        org.junit.Assert.assertNotNull(iLicenseSet53);
    }

    @Test
    public void test12700() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest25.test12700");
        org.apache.rat.license.ILicenseFamilyBuilder iLicenseFamilyBuilder0 = new org.apache.rat.license.ILicenseFamilyBuilder();
        java.lang.String str1 = iLicenseFamilyBuilder0.getCategory();
        org.apache.rat.license.ILicenseFamily.Builder builder3 = iLicenseFamilyBuilder0.setLicenseFamilyCategory("false");
        java.lang.String str4 = iLicenseFamilyBuilder0.getCategory();
        org.apache.rat.license.ILicenseFamily.Builder builder6 = iLicenseFamilyBuilder0.setLicenseFamilyName("3e2b228d-d5ff-4444-8d8c-d614494b2426 null");
        org.apache.rat.license.ILicenseFamily.Builder builder8 = iLicenseFamilyBuilder0.setLicenseFamilyCategory("http://org/apache/rat/meta-data#LicenseFamilyName");
        org.apache.rat.license.ILicenseFamily.Builder builder10 = iLicenseFamilyBuilder0.setLicenseFamilyCategory("58515");
        org.junit.Assert.assertNull(str1);
        org.junit.Assert.assertNotNull(builder3);
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "false" + "'", str4, "false");
        org.junit.Assert.assertNotNull(builder6);
        org.junit.Assert.assertNotNull(builder8);
        org.junit.Assert.assertNotNull(builder10);
    }

    @Test
    public void test12701() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest25.test12701");
        org.apache.rat.license.ILicenseFamilyBuilder iLicenseFamilyBuilder0 = new org.apache.rat.license.ILicenseFamilyBuilder();
        java.lang.String str1 = iLicenseFamilyBuilder0.getCategory();
        org.apache.rat.license.ILicenseFamily.Builder builder3 = iLicenseFamilyBuilder0.setLicenseFamilyCategory("AL   ");
        org.apache.rat.license.ILicenseFamily.Builder builder5 = iLicenseFamilyBuilder0.setLicenseFamilyName("binary");
        org.apache.rat.license.ILicenseFamily.Builder builder7 = iLicenseFamilyBuilder0.setLicenseFamilyName("http://org/apache/rat/meta-data#LicenseFamilyCategory");
        org.apache.rat.license.ILicenseFamily.Builder builder9 = iLicenseFamilyBuilder0.setLicenseFamilyName("Copyright Builder: s:null e:a1d7a6cd-e548-4846-82aa-06426863977c o:TextBuilder: Datum [ name ='http:...");
        org.junit.Assert.assertNull(str1);
        org.junit.Assert.assertNotNull(builder3);
        org.junit.Assert.assertNotNull(builder5);
        org.junit.Assert.assertNotNull(builder7);
        org.junit.Assert.assertNotNull(builder9);
    }

    @Test
    public void test12702() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest25.test12702");
        org.apache.rat.utils.Log log0 = null;
        org.apache.rat.ReportConfiguration reportConfiguration1 = new org.apache.rat.ReportConfiguration(log0);
        org.apache.commons.io.function.IOSupplier<java.io.OutputStream> outputStreamIOSupplier2 = reportConfiguration1.getOutput();
        org.apache.commons.io.filefilter.IOFileFilter iOFileFilter3 = reportConfiguration1.getDirectoryFilter();
        org.apache.rat.utils.Log log4 = null;
        org.apache.rat.ReportConfiguration reportConfiguration5 = new org.apache.rat.ReportConfiguration(log4);
        org.apache.rat.report.claim.ClaimStatistic claimStatistic6 = org.apache.rat.Reporter.report(reportConfiguration5);
        org.apache.commons.io.function.IOSupplier<java.io.OutputStream> outputStreamIOSupplier7 = reportConfiguration5.getOutput();
        boolean boolean8 = reportConfiguration5.isAddingLicensesForced();
        org.apache.rat.license.ILicense[] iLicenseArray9 = new org.apache.rat.license.ILicense[] {};
        java.util.TreeSet<org.apache.rat.license.ILicense> iLicenseSet10 = new java.util.TreeSet<org.apache.rat.license.ILicense>();
        boolean boolean11 = java.util.Collections.addAll((java.util.Collection<org.apache.rat.license.ILicense>) iLicenseSet10, iLicenseArray9);
        java.lang.String[] strArray24 = new java.lang.String[] { "GPL2 ", "GPL1 ", "notice", "http://org/apache/rat/meta-data#LicenseFamilyName", "notice", "GPL2 ", "http://org/apache/rat/meta-data#LicenseFamilyName", "", "GPL2 ", "", "GPL1 ", "hi!" };
        java.util.ArrayList<java.lang.String> strList25 = new java.util.ArrayList<java.lang.String>();
        boolean boolean26 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strList25, strArray24);
        org.apache.rat.license.LicenseSetFactory licenseSetFactory27 = new org.apache.rat.license.LicenseSetFactory((java.util.SortedSet<org.apache.rat.license.ILicense>) iLicenseSet10, (java.util.Collection<java.lang.String>) strList25);
        reportConfiguration5.addLicenses((java.util.Collection<org.apache.rat.license.ILicense>) iLicenseSet10);
        reportConfiguration1.addLicensesIfNotPresent((java.util.Collection<org.apache.rat.license.ILicense>) iLicenseSet10);
        reportConfiguration1.removeApprovedLicenseCategory("");
        org.apache.commons.io.function.IOSupplier<java.io.InputStream> inputStreamIOSupplier32 = reportConfiguration1.getStyleSheet();
        boolean boolean33 = reportConfiguration1.isAddingLicenses();
        org.junit.Assert.assertNotNull(outputStreamIOSupplier2);
        org.junit.Assert.assertNotNull(iOFileFilter3);
        org.junit.Assert.assertNull(claimStatistic6);
        org.junit.Assert.assertNotNull(outputStreamIOSupplier7);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertNotNull(iLicenseArray9);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
        org.junit.Assert.assertNotNull(strArray24);
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + true + "'", boolean26 == true);
        org.junit.Assert.assertNull(inputStreamIOSupplier32);
        org.junit.Assert.assertTrue("'" + boolean33 + "' != '" + false + "'", boolean33 == false);
    }

    @Test
    public void test12703() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest25.test12703");
        org.apache.rat.license.ILicense.Builder builder0 = org.apache.rat.license.ILicense.builder();
        org.apache.rat.license.ILicense.Builder builder2 = builder0.setLicenseFamilyCategory("");
        org.apache.rat.license.ILicense.Builder builder4 = builder2.setDerivedFrom("GEN  ");
        org.apache.rat.license.ILicense.Builder builder6 = builder4.setId("DOJO ");
        org.apache.rat.analysis.IHeaderMatcher iHeaderMatcher7 = null;
        org.apache.rat.license.ILicense.Builder builder8 = builder6.setMatcher(iHeaderMatcher7);
        org.apache.rat.license.ILicense.Builder builder10 = builder8.setName("AL   ");
        org.apache.rat.license.ILicense.Builder builder12 = builder8.setName("3e2b228d-d5ff-4444-8d8c-d614494b2426");
        org.apache.rat.analysis.matchers.CopyrightMatcher copyrightMatcher16 = new org.apache.rat.analysis.matchers.CopyrightMatcher("META-DATA#LICENSEFAMILYNAME", "W3C Document Copyright", "f false");
        org.apache.rat.license.ILicense.Builder builder17 = builder8.setMatcher((org.apache.rat.analysis.IHeaderMatcher) copyrightMatcher16);
        org.apache.rat.license.ILicense.Builder builder19 = builder17.setName("COPYRIGHT BUILDER: S:NULL E:.CVSIGNORE O:5FEC021B-B12E-48C3-A002-3EEA7A06339A");
        java.lang.Class<?> wildcardClass20 = builder19.getClass();
        org.junit.Assert.assertNotNull(builder0);
        org.junit.Assert.assertNotNull(builder2);
        org.junit.Assert.assertNotNull(builder4);
        org.junit.Assert.assertNotNull(builder6);
        org.junit.Assert.assertNotNull(builder8);
        org.junit.Assert.assertNotNull(builder10);
        org.junit.Assert.assertNotNull(builder12);
        org.junit.Assert.assertNotNull(builder17);
        org.junit.Assert.assertNotNull(builder19);
        org.junit.Assert.assertNotNull(wildcardClass20);
    }

    @Test
    public void test12704() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest25.test12704");
        org.apache.rat.configuration.builders.CopyrightBuilder copyrightBuilder0 = org.apache.rat.analysis.IHeaderMatcher.Builder.copyright();
        java.lang.String str1 = copyrightBuilder0.toString();
        org.apache.rat.configuration.builders.CopyrightBuilder copyrightBuilder3 = copyrightBuilder0.setEnd("W3C Software Copyright");
        org.apache.rat.configuration.builders.CopyrightBuilder copyrightBuilder5 = copyrightBuilder0.setStart("RegexBuilder: 89662180-a89f-497b-9301-227d494d2bae");
        org.apache.rat.configuration.builders.AbstractBuilder abstractBuilder7 = copyrightBuilder5.setId("Datum [ name ='http://org/apache/rat/meta-data#ApprovedLicense',value ='false ']");
        org.apache.rat.analysis.IHeaderMatcher iHeaderMatcher8 = copyrightBuilder5.build();
        org.apache.rat.configuration.builders.CopyrightBuilder copyrightBuilder10 = copyrightBuilder5.setEnd("64ae0b82-4b80-4d92-9c12-7c39421cb10a");
        org.apache.rat.configuration.builders.AbstractBuilder abstractBuilder12 = copyrightBuilder5.setId("dae945c0-00a3-4e9e-b53b-5fffbbb3412b");
        org.junit.Assert.assertNotNull(copyrightBuilder0);
        org.junit.Assert.assertEquals("'" + str1 + "' != '" + "Copyright Builder: s:null e:null o:null" + "'", str1, "Copyright Builder: s:null e:null o:null");
        org.junit.Assert.assertNotNull(copyrightBuilder3);
        org.junit.Assert.assertNotNull(copyrightBuilder5);
        org.junit.Assert.assertNotNull(abstractBuilder7);
        org.junit.Assert.assertNotNull(iHeaderMatcher8);
        org.junit.Assert.assertNotNull(copyrightBuilder10);
        org.junit.Assert.assertNotNull(abstractBuilder12);
    }

    @Test
    public void test12705() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest25.test12705");
        org.apache.rat.Defaults.Builder builder0 = org.apache.rat.Defaults.builder();
        org.apache.rat.Defaults defaults1 = builder0.build();
        org.apache.rat.Defaults.Builder builder2 = builder0.noDefault();
        org.apache.rat.Defaults.Builder builder4 = builder0.remove("AllBuilder:");
        org.apache.rat.Defaults.Builder builder6 = builder4.add("?????");
        org.apache.rat.Defaults.Builder builder8 = builder6.remove("");
        org.apache.rat.Defaults.Builder builder9 = builder6.noDefault();
        org.apache.rat.Defaults.Builder builder10 = builder9.noDefault();
        org.apache.rat.Defaults.Builder builder11 = builder10.noDefault();
        org.apache.rat.Defaults.Builder builder13 = builder10.remove("MathcerRefBuilder: t true");
        org.apache.rat.Defaults.Builder builder15 = builder13.add("987e1c25-0334-44a1-bb8e-96395b8caec8");
        java.net.URL uRL16 = null;
        // The following exception was thrown during execution in test generation
        try {
            org.apache.rat.Defaults.Builder builder17 = builder13.remove(uRL16);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(builder0);
        org.junit.Assert.assertNotNull(defaults1);
        org.junit.Assert.assertNotNull(builder2);
        org.junit.Assert.assertNotNull(builder4);
        org.junit.Assert.assertNotNull(builder6);
        org.junit.Assert.assertNotNull(builder8);
        org.junit.Assert.assertNotNull(builder9);
        org.junit.Assert.assertNotNull(builder10);
        org.junit.Assert.assertNotNull(builder11);
        org.junit.Assert.assertNotNull(builder13);
        org.junit.Assert.assertNotNull(builder15);
    }

    @Test
    public void test12706() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest25.test12706");
        java.lang.String[] strArray5 = new java.lang.String[] { "http://org/apache/rat/meta-data#LicenseFamilyCategory", "Datum [ name ='http://org/apache/rat/meta-data#LicenseFamilyCategory',value ='GPL1  ']", "MANIFEST.MF", "AllBuilder:", "The MIT License" };
        org.apache.rat.utils.ReportingSet<java.lang.String> strSet6 = new org.apache.rat.utils.ReportingSet<java.lang.String>();
        boolean boolean7 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strSet6, strArray5);
        boolean boolean9 = strSet6.addIfNotPresent("http://org/apache/rat/meta-data#LicenseFamilyName");
        boolean boolean11 = strSet6.addIfNotPresent("ef7a8b13-64c3-4510-bb0c-dbf208e1e73f");
        java.util.function.Function<java.lang.String, java.lang.String> strFunction12 = null;
        org.apache.rat.utils.ReportingSet<java.lang.String> strSet13 = strSet6.setMsgFormat(strFunction12);
        java.lang.String str14 = strSet6.last();
        org.apache.rat.utils.ReportingSet<java.lang.String> strSet16 = strSet6.tailSet("ece24682-3459-4761-bb85-7fc8538fa181");
        java.util.function.Function<java.lang.String, java.lang.String> strFunction17 = null;
        org.apache.rat.utils.ReportingSet<java.lang.String> strSet18 = strSet16.setMsgFormat(strFunction17);
        strSet18.clear();
        int int20 = strSet18.size();
        org.junit.Assert.assertNotNull(strArray5);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + true + "'", boolean7 == true);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + true + "'", boolean9 == true);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + true + "'", boolean11 == true);
        org.junit.Assert.assertNotNull(strSet13);
        org.junit.Assert.assertEquals("'" + str14 + "' != '" + "http://org/apache/rat/meta-data#LicenseFamilyName" + "'", str14, "http://org/apache/rat/meta-data#LicenseFamilyName");
        org.junit.Assert.assertNotNull(strSet16);
        org.junit.Assert.assertNotNull(strSet18);
        org.junit.Assert.assertTrue("'" + int20 + "' != '" + 0 + "'", int20 == 0);
    }

    @Test
    public void test12707() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest25.test12707");
        org.apache.rat.utils.DefaultLog defaultLog0 = org.apache.rat.utils.DefaultLog.INSTANCE;
        org.apache.rat.configuration.builders.AllBuilder allBuilder1 = new org.apache.rat.configuration.builders.AllBuilder();
        org.apache.rat.configuration.builders.MatcherRefBuilder matcherRefBuilder2 = org.apache.rat.analysis.IHeaderMatcher.Builder.matcherRef();
        boolean boolean3 = matcherRefBuilder2.hasId();
        java.lang.String str4 = matcherRefBuilder2.toString();
        org.apache.rat.configuration.builders.AnyBuilder anyBuilder5 = org.apache.rat.analysis.IHeaderMatcher.Builder.any();
        org.apache.rat.configuration.builders.NotBuilder notBuilder6 = new org.apache.rat.configuration.builders.NotBuilder();
        java.lang.String str7 = notBuilder6.toString();
        org.apache.rat.configuration.builders.MatcherRefBuilder matcherRefBuilder8 = org.apache.rat.analysis.IHeaderMatcher.Builder.matcherRef();
        boolean boolean9 = matcherRefBuilder8.hasId();
        java.util.Map<java.lang.String, org.apache.rat.analysis.IHeaderMatcher> strMap10 = null;
        org.apache.rat.configuration.builders.MatcherRefBuilder matcherRefBuilder11 = matcherRefBuilder8.setMatchers(strMap10);
        org.apache.rat.configuration.builders.AllBuilder allBuilder12 = new org.apache.rat.configuration.builders.AllBuilder();
        org.apache.rat.configuration.builders.CopyrightBuilder copyrightBuilder13 = org.apache.rat.analysis.IHeaderMatcher.Builder.copyright();
        org.apache.rat.configuration.builders.CopyrightBuilder copyrightBuilder15 = copyrightBuilder13.setStart("OASIS");
        java.lang.String str16 = copyrightBuilder13.toString();
        org.apache.rat.configuration.builders.CopyrightBuilder copyrightBuilder18 = copyrightBuilder13.setStart("223f0aba-15d4-49e9-901e-5740c137aebf");
        org.apache.rat.configuration.builders.MatcherRefBuilder matcherRefBuilder19 = org.apache.rat.analysis.IHeaderMatcher.Builder.matcherRef();
        boolean boolean20 = matcherRefBuilder19.hasId();
        org.apache.rat.configuration.builders.CopyrightBuilder copyrightBuilder21 = org.apache.rat.analysis.IHeaderMatcher.Builder.copyright();
        org.apache.rat.configuration.builders.CopyrightBuilder copyrightBuilder23 = copyrightBuilder21.setStart("OASIS");
        java.lang.String str24 = copyrightBuilder21.toString();
        org.apache.rat.configuration.builders.CopyrightBuilder copyrightBuilder26 = copyrightBuilder21.setStart("223f0aba-15d4-49e9-901e-5740c137aebf");
        org.apache.rat.configuration.builders.CopyrightBuilder copyrightBuilder27 = org.apache.rat.analysis.IHeaderMatcher.Builder.copyright();
        org.apache.rat.configuration.builders.CopyrightBuilder copyrightBuilder28 = org.apache.rat.analysis.IHeaderMatcher.Builder.copyright();
        java.lang.String str29 = copyrightBuilder28.toString();
        org.apache.rat.configuration.builders.CopyrightBuilder copyrightBuilder31 = copyrightBuilder28.setEnd(".cvsignore");
        boolean boolean32 = copyrightBuilder28.hasId();
        org.apache.rat.configuration.builders.CopyrightBuilder copyrightBuilder33 = org.apache.rat.analysis.IHeaderMatcher.Builder.copyright();
        java.lang.String str34 = copyrightBuilder33.toString();
        org.apache.rat.configuration.builders.CopyrightBuilder copyrightBuilder36 = copyrightBuilder33.setEnd(".cvsignore");
        boolean boolean37 = copyrightBuilder33.hasId();
        java.lang.String str38 = copyrightBuilder33.toString();
        org.apache.rat.configuration.builders.CopyrightBuilder copyrightBuilder39 = org.apache.rat.analysis.IHeaderMatcher.Builder.copyright();
        org.apache.rat.configuration.builders.CopyrightBuilder copyrightBuilder41 = copyrightBuilder39.setStart("OASIS");
        org.apache.rat.configuration.builders.AnyBuilder anyBuilder42 = org.apache.rat.analysis.IHeaderMatcher.Builder.any();
        org.apache.rat.configuration.builders.MatcherRefBuilder matcherRefBuilder43 = org.apache.rat.analysis.IHeaderMatcher.Builder.matcherRef();
        boolean boolean44 = matcherRefBuilder43.hasId();
        java.util.Map<java.lang.String, org.apache.rat.analysis.IHeaderMatcher> strMap45 = null;
        org.apache.rat.configuration.builders.MatcherRefBuilder matcherRefBuilder46 = matcherRefBuilder43.setMatchers(strMap45);
        org.apache.rat.configuration.builders.CopyrightBuilder copyrightBuilder47 = org.apache.rat.analysis.IHeaderMatcher.Builder.copyright();
        org.apache.rat.configuration.builders.MatcherRefBuilder matcherRefBuilder48 = org.apache.rat.analysis.IHeaderMatcher.Builder.matcherRef();
        boolean boolean49 = matcherRefBuilder48.hasId();
        java.lang.String str50 = matcherRefBuilder48.toString();
        java.util.Map<java.lang.String, org.apache.rat.analysis.IHeaderMatcher> strMap51 = null;
        org.apache.rat.configuration.builders.MatcherRefBuilder matcherRefBuilder52 = matcherRefBuilder48.setMatchers(strMap51);
        org.apache.rat.analysis.IHeaderMatcher.Builder[] builderArray53 = new org.apache.rat.analysis.IHeaderMatcher.Builder[] { matcherRefBuilder8, allBuilder12, copyrightBuilder18, matcherRefBuilder19, copyrightBuilder21, copyrightBuilder27, copyrightBuilder28, copyrightBuilder33, copyrightBuilder39, anyBuilder42, matcherRefBuilder43, copyrightBuilder47, matcherRefBuilder48 };
        java.util.ArrayList<org.apache.rat.analysis.IHeaderMatcher.Builder> builderList54 = new java.util.ArrayList<org.apache.rat.analysis.IHeaderMatcher.Builder>();
        boolean boolean55 = java.util.Collections.addAll((java.util.Collection<org.apache.rat.analysis.IHeaderMatcher.Builder>) builderList54, builderArray53);
        org.apache.rat.configuration.builders.AbstractBuilder abstractBuilder56 = notBuilder6.add((java.util.Collection<org.apache.rat.analysis.IHeaderMatcher.Builder>) builderList54);
        org.apache.rat.configuration.builders.MatcherRefBuilder matcherRefBuilder57 = new org.apache.rat.configuration.builders.MatcherRefBuilder();
        org.apache.rat.analysis.IHeaderMatcher.Builder[] builderArray58 = new org.apache.rat.analysis.IHeaderMatcher.Builder[] { matcherRefBuilder2, anyBuilder5, notBuilder6, matcherRefBuilder57 };
        java.util.ArrayList<org.apache.rat.analysis.IHeaderMatcher.Builder> builderList59 = new java.util.ArrayList<org.apache.rat.analysis.IHeaderMatcher.Builder>();
        boolean boolean60 = java.util.Collections.addAll((java.util.Collection<org.apache.rat.analysis.IHeaderMatcher.Builder>) builderList59, builderArray58);
        org.apache.rat.configuration.builders.AbstractBuilder abstractBuilder61 = allBuilder1.add((java.util.Collection<org.apache.rat.analysis.IHeaderMatcher.Builder>) builderList59);
        defaultLog0.info((java.lang.Object) allBuilder1);
        org.apache.rat.annotation.ApacheV2LicenseAppender apacheV2LicenseAppender64 = new org.apache.rat.annotation.ApacheV2LicenseAppender((org.apache.rat.utils.Log) defaultLog0, "true");
        org.apache.rat.configuration.builders.CopyrightBuilder copyrightBuilder65 = org.apache.rat.analysis.IHeaderMatcher.Builder.copyright();
        java.lang.String str66 = copyrightBuilder65.toString();
        org.apache.rat.configuration.builders.CopyrightBuilder copyrightBuilder68 = copyrightBuilder65.setEnd(".cvsignore");
        boolean boolean69 = copyrightBuilder65.hasId();
        org.apache.rat.configuration.builders.CopyrightBuilder copyrightBuilder71 = copyrightBuilder65.setEnd("notice");
        defaultLog0.debug((java.lang.Object) "notice");
        org.apache.rat.annotation.ApacheV2LicenseAppender apacheV2LicenseAppender73 = new org.apache.rat.annotation.ApacheV2LicenseAppender((org.apache.rat.utils.Log) defaultLog0);
        org.apache.rat.utils.Log.Level level74 = defaultLog0.getLevel();
        org.apache.rat.annotation.ApacheV2LicenseAppender apacheV2LicenseAppender76 = new org.apache.rat.annotation.ApacheV2LicenseAppender((org.apache.rat.utils.Log) defaultLog0, "50413ae6-037c-4fdd-a790-7c8514c95b09");
        org.apache.rat.ReportConfiguration reportConfiguration77 = new org.apache.rat.ReportConfiguration((org.apache.rat.utils.Log) defaultLog0);
        reportConfiguration77.removeApprovedLicenseCategory("01febb9b-15b8-4e6d-baab-05a93d5dc033");
        java.net.URL uRL80 = null;
        // The following exception was thrown during execution in test generation
        try {
            reportConfiguration77.setStyleSheet(uRL80);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: styleSheet file should not be null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(defaultLog0);
        org.junit.Assert.assertNotNull(matcherRefBuilder2);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "MathcerRefBuilder: null" + "'", str4, "MathcerRefBuilder: null");
        org.junit.Assert.assertNotNull(anyBuilder5);
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "NotBuilder: null" + "'", str7, "NotBuilder: null");
        org.junit.Assert.assertNotNull(matcherRefBuilder8);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertNotNull(matcherRefBuilder11);
        org.junit.Assert.assertNotNull(copyrightBuilder13);
        org.junit.Assert.assertNotNull(copyrightBuilder15);
        org.junit.Assert.assertEquals("'" + str16 + "' != '" + "Copyright Builder: s:OASIS e:null o:null" + "'", str16, "Copyright Builder: s:OASIS e:null o:null");
        org.junit.Assert.assertNotNull(copyrightBuilder18);
        org.junit.Assert.assertNotNull(matcherRefBuilder19);
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + false + "'", boolean20 == false);
        org.junit.Assert.assertNotNull(copyrightBuilder21);
        org.junit.Assert.assertNotNull(copyrightBuilder23);
        org.junit.Assert.assertEquals("'" + str24 + "' != '" + "Copyright Builder: s:OASIS e:null o:null" + "'", str24, "Copyright Builder: s:OASIS e:null o:null");
        org.junit.Assert.assertNotNull(copyrightBuilder26);
        org.junit.Assert.assertNotNull(copyrightBuilder27);
        org.junit.Assert.assertNotNull(copyrightBuilder28);
        org.junit.Assert.assertEquals("'" + str29 + "' != '" + "Copyright Builder: s:null e:null o:null" + "'", str29, "Copyright Builder: s:null e:null o:null");
        org.junit.Assert.assertNotNull(copyrightBuilder31);
        org.junit.Assert.assertTrue("'" + boolean32 + "' != '" + false + "'", boolean32 == false);
        org.junit.Assert.assertNotNull(copyrightBuilder33);
        org.junit.Assert.assertEquals("'" + str34 + "' != '" + "Copyright Builder: s:null e:null o:null" + "'", str34, "Copyright Builder: s:null e:null o:null");
        org.junit.Assert.assertNotNull(copyrightBuilder36);
        org.junit.Assert.assertTrue("'" + boolean37 + "' != '" + false + "'", boolean37 == false);
        org.junit.Assert.assertEquals("'" + str38 + "' != '" + "Copyright Builder: s:null e:.cvsignore o:null" + "'", str38, "Copyright Builder: s:null e:.cvsignore o:null");
        org.junit.Assert.assertNotNull(copyrightBuilder39);
        org.junit.Assert.assertNotNull(copyrightBuilder41);
        org.junit.Assert.assertNotNull(anyBuilder42);
        org.junit.Assert.assertNotNull(matcherRefBuilder43);
        org.junit.Assert.assertTrue("'" + boolean44 + "' != '" + false + "'", boolean44 == false);
        org.junit.Assert.assertNotNull(matcherRefBuilder46);
        org.junit.Assert.assertNotNull(copyrightBuilder47);
        org.junit.Assert.assertNotNull(matcherRefBuilder48);
        org.junit.Assert.assertTrue("'" + boolean49 + "' != '" + false + "'", boolean49 == false);
        org.junit.Assert.assertEquals("'" + str50 + "' != '" + "MathcerRefBuilder: null" + "'", str50, "MathcerRefBuilder: null");
        org.junit.Assert.assertNotNull(matcherRefBuilder52);
        org.junit.Assert.assertNotNull(builderArray53);
        org.junit.Assert.assertTrue("'" + boolean55 + "' != '" + true + "'", boolean55 == true);
        org.junit.Assert.assertNotNull(abstractBuilder56);
        org.junit.Assert.assertNotNull(builderArray58);
        org.junit.Assert.assertTrue("'" + boolean60 + "' != '" + true + "'", boolean60 == true);
        org.junit.Assert.assertNotNull(abstractBuilder61);
        org.junit.Assert.assertNotNull(copyrightBuilder65);
        org.junit.Assert.assertEquals("'" + str66 + "' != '" + "Copyright Builder: s:null e:null o:null" + "'", str66, "Copyright Builder: s:null e:null o:null");
        org.junit.Assert.assertNotNull(copyrightBuilder68);
        org.junit.Assert.assertTrue("'" + boolean69 + "' != '" + false + "'", boolean69 == false);
        org.junit.Assert.assertNotNull(copyrightBuilder71);
        org.junit.Assert.assertTrue("'" + level74 + "' != '" + org.apache.rat.utils.Log.Level.ERROR + "'", level74.equals(org.apache.rat.utils.Log.Level.ERROR));
    }

    @Test
    public void test12708() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest25.test12708");
        org.apache.rat.api.MetaData metaData0 = new org.apache.rat.api.MetaData();
        java.lang.String str2 = metaData0.value("COMMON DEVELOPMENT AND DISTRIBUTION LICENSE Version 1.0");
        java.lang.String str4 = metaData0.value("W3C Document Copyright");
        boolean boolean6 = metaData0.clear("hi!");
        java.lang.String str8 = metaData0.value("true");
        metaData0.clear();
        boolean boolean11 = metaData0.clear("W3CD ");
        java.util.Collection<org.apache.rat.api.MetaData.Datum> datumCollection12 = metaData0.getData();
        org.junit.Assert.assertNull(str2);
        org.junit.Assert.assertNull(str4);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertNull(str8);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
        org.junit.Assert.assertNotNull(datumCollection12);
    }

    @Test
    public void test12709() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest25.test12709");
        org.apache.rat.configuration.builders.CopyrightBuilder copyrightBuilder0 = org.apache.rat.analysis.IHeaderMatcher.Builder.copyright();
        org.apache.rat.configuration.builders.CopyrightBuilder copyrightBuilder2 = copyrightBuilder0.setStart("OASIS");
        org.apache.rat.configuration.builders.CopyrightBuilder copyrightBuilder4 = copyrightBuilder0.setOwner("Copyright Builder: s:null e:274c6a15-09f6-4bfd-ac53-1827770eb507 o:null");
        org.apache.rat.configuration.builders.CopyrightBuilder copyrightBuilder6 = copyrightBuilder0.setStart("W3CD ");
        org.apache.rat.configuration.builders.CopyrightBuilder copyrightBuilder8 = copyrightBuilder0.setStart("55614");
        java.lang.String str9 = copyrightBuilder0.toString();
        org.junit.Assert.assertNotNull(copyrightBuilder0);
        org.junit.Assert.assertNotNull(copyrightBuilder2);
        org.junit.Assert.assertNotNull(copyrightBuilder4);
        org.junit.Assert.assertNotNull(copyrightBuilder6);
        org.junit.Assert.assertNotNull(copyrightBuilder8);
        org.junit.Assert.assertEquals("'" + str9 + "' != '" + "Copyright Builder: s:55614 e:null o:Copyright Builder: s:null e:274c6a15-09f6-4bfd-ac53-1827770eb507 o:null" + "'", str9, "Copyright Builder: s:55614 e:null o:Copyright Builder: s:null e:274c6a15-09f6-4bfd-ac53-1827770eb507 o:null");
    }

    @Test
    public void test12710() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest25.test12710");
        org.apache.rat.analysis.matchers.SimpleTextMatcher simpleTextMatcher1 = new org.apache.rat.analysis.matchers.SimpleTextMatcher("binary");
        simpleTextMatcher1.reset();
        java.lang.String str3 = simpleTextMatcher1.getId();
        boolean boolean5 = simpleTextMatcher1.doMatch("6486879f-fc81-4b57-aec7-c4c77d540c30");
        java.lang.String str6 = simpleTextMatcher1.toString();
        boolean boolean8 = simpleTextMatcher1.doMatch(".cvsignore");
        org.apache.rat.analysis.IHeaderMatcher.State state9 = simpleTextMatcher1.finalizeState();
// flaky:         org.junit.Assert.assertEquals("'" + str3 + "' != '" + "d1ad0306-4f2f-4c84-ac97-96863cf7aefc" + "'", str3, "d1ad0306-4f2f-4c84-ac97-96863cf7aefc");
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
// flaky:         org.junit.Assert.assertEquals("'" + str6 + "' != '" + "d1ad0306-4f2f-4c84-ac97-96863cf7aefc" + "'", str6, "d1ad0306-4f2f-4c84-ac97-96863cf7aefc");
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertTrue("'" + state9 + "' != '" + org.apache.rat.analysis.IHeaderMatcher.State.f + "'", state9.equals(org.apache.rat.analysis.IHeaderMatcher.State.f));
    }

    @Test
    public void test12711() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest25.test12711");
        org.apache.rat.analysis.matchers.SPDXMatcherFactory sPDXMatcherFactory0 = org.apache.rat.analysis.matchers.SPDXMatcherFactory.INSTANCE;
        org.apache.rat.analysis.IHeaderMatcher iHeaderMatcher2 = sPDXMatcherFactory0.create("GPL3 ");
        org.apache.rat.analysis.IHeaderMatcher iHeaderMatcher4 = sPDXMatcherFactory0.create("6620e9ee-d651-4c18-8162-edad6d18368e");
        org.apache.rat.analysis.IHeaderMatcher iHeaderMatcher6 = sPDXMatcherFactory0.create("OASIS Open License");
        org.apache.rat.analysis.IHeaderMatcher iHeaderMatcher8 = sPDXMatcherFactory0.create("Copyright Builder: s:null e:ba9961f9-a0de-4a54-bd1f-a2e9df26a188 o:a1abad46-6a98-44f8-aa20-7839919a8270");
        org.apache.rat.analysis.IHeaderMatcher iHeaderMatcher10 = sPDXMatcherFactory0.create("f65b7401-dce0-4358-b870-cf848940a8e0");
        org.apache.rat.analysis.IHeaderMatcher.State state12 = iHeaderMatcher10.matches("49ba0523-306f-4984-949f-9db17b9667d9");
        org.junit.Assert.assertNotNull(sPDXMatcherFactory0);
        org.junit.Assert.assertNotNull(iHeaderMatcher2);
        org.junit.Assert.assertNotNull(iHeaderMatcher4);
        org.junit.Assert.assertNotNull(iHeaderMatcher6);
        org.junit.Assert.assertNotNull(iHeaderMatcher8);
        org.junit.Assert.assertNotNull(iHeaderMatcher10);
        org.junit.Assert.assertTrue("'" + state12 + "' != '" + org.apache.rat.analysis.IHeaderMatcher.State.i + "'", state12.equals(org.apache.rat.analysis.IHeaderMatcher.State.i));
    }

    @Test
    public void test12712() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest25.test12712");
        org.apache.rat.api.MetaData.Datum datum2 = new org.apache.rat.api.MetaData.Datum("MathcerRefBuilder: TMF", "71430c52-b81d-4c0f-83d3-ccf0b65a1859");
    }

    @Test
    public void test12713() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest25.test12713");
        org.apache.rat.utils.DefaultLog defaultLog0 = org.apache.rat.utils.DefaultLog.INSTANCE;
        org.apache.rat.configuration.builders.AllBuilder allBuilder1 = new org.apache.rat.configuration.builders.AllBuilder();
        org.apache.rat.configuration.builders.MatcherRefBuilder matcherRefBuilder2 = org.apache.rat.analysis.IHeaderMatcher.Builder.matcherRef();
        boolean boolean3 = matcherRefBuilder2.hasId();
        java.lang.String str4 = matcherRefBuilder2.toString();
        org.apache.rat.configuration.builders.AnyBuilder anyBuilder5 = org.apache.rat.analysis.IHeaderMatcher.Builder.any();
        org.apache.rat.configuration.builders.NotBuilder notBuilder6 = new org.apache.rat.configuration.builders.NotBuilder();
        java.lang.String str7 = notBuilder6.toString();
        org.apache.rat.configuration.builders.MatcherRefBuilder matcherRefBuilder8 = org.apache.rat.analysis.IHeaderMatcher.Builder.matcherRef();
        boolean boolean9 = matcherRefBuilder8.hasId();
        java.util.Map<java.lang.String, org.apache.rat.analysis.IHeaderMatcher> strMap10 = null;
        org.apache.rat.configuration.builders.MatcherRefBuilder matcherRefBuilder11 = matcherRefBuilder8.setMatchers(strMap10);
        org.apache.rat.configuration.builders.AllBuilder allBuilder12 = new org.apache.rat.configuration.builders.AllBuilder();
        org.apache.rat.configuration.builders.CopyrightBuilder copyrightBuilder13 = org.apache.rat.analysis.IHeaderMatcher.Builder.copyright();
        org.apache.rat.configuration.builders.CopyrightBuilder copyrightBuilder15 = copyrightBuilder13.setStart("OASIS");
        java.lang.String str16 = copyrightBuilder13.toString();
        org.apache.rat.configuration.builders.CopyrightBuilder copyrightBuilder18 = copyrightBuilder13.setStart("223f0aba-15d4-49e9-901e-5740c137aebf");
        org.apache.rat.configuration.builders.MatcherRefBuilder matcherRefBuilder19 = org.apache.rat.analysis.IHeaderMatcher.Builder.matcherRef();
        boolean boolean20 = matcherRefBuilder19.hasId();
        org.apache.rat.configuration.builders.CopyrightBuilder copyrightBuilder21 = org.apache.rat.analysis.IHeaderMatcher.Builder.copyright();
        org.apache.rat.configuration.builders.CopyrightBuilder copyrightBuilder23 = copyrightBuilder21.setStart("OASIS");
        java.lang.String str24 = copyrightBuilder21.toString();
        org.apache.rat.configuration.builders.CopyrightBuilder copyrightBuilder26 = copyrightBuilder21.setStart("223f0aba-15d4-49e9-901e-5740c137aebf");
        org.apache.rat.configuration.builders.CopyrightBuilder copyrightBuilder27 = org.apache.rat.analysis.IHeaderMatcher.Builder.copyright();
        org.apache.rat.configuration.builders.CopyrightBuilder copyrightBuilder28 = org.apache.rat.analysis.IHeaderMatcher.Builder.copyright();
        java.lang.String str29 = copyrightBuilder28.toString();
        org.apache.rat.configuration.builders.CopyrightBuilder copyrightBuilder31 = copyrightBuilder28.setEnd(".cvsignore");
        boolean boolean32 = copyrightBuilder28.hasId();
        org.apache.rat.configuration.builders.CopyrightBuilder copyrightBuilder33 = org.apache.rat.analysis.IHeaderMatcher.Builder.copyright();
        java.lang.String str34 = copyrightBuilder33.toString();
        org.apache.rat.configuration.builders.CopyrightBuilder copyrightBuilder36 = copyrightBuilder33.setEnd(".cvsignore");
        boolean boolean37 = copyrightBuilder33.hasId();
        java.lang.String str38 = copyrightBuilder33.toString();
        org.apache.rat.configuration.builders.CopyrightBuilder copyrightBuilder39 = org.apache.rat.analysis.IHeaderMatcher.Builder.copyright();
        org.apache.rat.configuration.builders.CopyrightBuilder copyrightBuilder41 = copyrightBuilder39.setStart("OASIS");
        org.apache.rat.configuration.builders.AnyBuilder anyBuilder42 = org.apache.rat.analysis.IHeaderMatcher.Builder.any();
        org.apache.rat.configuration.builders.MatcherRefBuilder matcherRefBuilder43 = org.apache.rat.analysis.IHeaderMatcher.Builder.matcherRef();
        boolean boolean44 = matcherRefBuilder43.hasId();
        java.util.Map<java.lang.String, org.apache.rat.analysis.IHeaderMatcher> strMap45 = null;
        org.apache.rat.configuration.builders.MatcherRefBuilder matcherRefBuilder46 = matcherRefBuilder43.setMatchers(strMap45);
        org.apache.rat.configuration.builders.CopyrightBuilder copyrightBuilder47 = org.apache.rat.analysis.IHeaderMatcher.Builder.copyright();
        org.apache.rat.configuration.builders.MatcherRefBuilder matcherRefBuilder48 = org.apache.rat.analysis.IHeaderMatcher.Builder.matcherRef();
        boolean boolean49 = matcherRefBuilder48.hasId();
        java.lang.String str50 = matcherRefBuilder48.toString();
        java.util.Map<java.lang.String, org.apache.rat.analysis.IHeaderMatcher> strMap51 = null;
        org.apache.rat.configuration.builders.MatcherRefBuilder matcherRefBuilder52 = matcherRefBuilder48.setMatchers(strMap51);
        org.apache.rat.analysis.IHeaderMatcher.Builder[] builderArray53 = new org.apache.rat.analysis.IHeaderMatcher.Builder[] { matcherRefBuilder8, allBuilder12, copyrightBuilder18, matcherRefBuilder19, copyrightBuilder21, copyrightBuilder27, copyrightBuilder28, copyrightBuilder33, copyrightBuilder39, anyBuilder42, matcherRefBuilder43, copyrightBuilder47, matcherRefBuilder48 };
        java.util.ArrayList<org.apache.rat.analysis.IHeaderMatcher.Builder> builderList54 = new java.util.ArrayList<org.apache.rat.analysis.IHeaderMatcher.Builder>();
        boolean boolean55 = java.util.Collections.addAll((java.util.Collection<org.apache.rat.analysis.IHeaderMatcher.Builder>) builderList54, builderArray53);
        org.apache.rat.configuration.builders.AbstractBuilder abstractBuilder56 = notBuilder6.add((java.util.Collection<org.apache.rat.analysis.IHeaderMatcher.Builder>) builderList54);
        org.apache.rat.configuration.builders.MatcherRefBuilder matcherRefBuilder57 = new org.apache.rat.configuration.builders.MatcherRefBuilder();
        org.apache.rat.analysis.IHeaderMatcher.Builder[] builderArray58 = new org.apache.rat.analysis.IHeaderMatcher.Builder[] { matcherRefBuilder2, anyBuilder5, notBuilder6, matcherRefBuilder57 };
        java.util.ArrayList<org.apache.rat.analysis.IHeaderMatcher.Builder> builderList59 = new java.util.ArrayList<org.apache.rat.analysis.IHeaderMatcher.Builder>();
        boolean boolean60 = java.util.Collections.addAll((java.util.Collection<org.apache.rat.analysis.IHeaderMatcher.Builder>) builderList59, builderArray58);
        org.apache.rat.configuration.builders.AbstractBuilder abstractBuilder61 = allBuilder1.add((java.util.Collection<org.apache.rat.analysis.IHeaderMatcher.Builder>) builderList59);
        defaultLog0.info((java.lang.Object) allBuilder1);
        org.apache.rat.ReportConfiguration reportConfiguration63 = new org.apache.rat.ReportConfiguration((org.apache.rat.utils.Log) defaultLog0);
        org.apache.rat.utils.Log log64 = null;
        org.apache.rat.ReportConfiguration reportConfiguration65 = new org.apache.rat.ReportConfiguration(log64);
        reportConfiguration65.addApprovedLicenseCategory(".cvsignore");
        org.apache.rat.utils.Log.Level level68 = org.apache.rat.utils.Log.Level.ERROR;
        reportConfiguration65.logFamilyCollisions(level68);
        defaultLog0.setLevel(level68);
        org.apache.rat.ReportConfiguration reportConfiguration71 = new org.apache.rat.ReportConfiguration((org.apache.rat.utils.Log) defaultLog0);
        org.apache.rat.utils.DefaultLog defaultLog72 = org.apache.rat.utils.DefaultLog.INSTANCE;
        org.apache.rat.license.ILicense.Builder builder73 = org.apache.rat.license.ILicense.builder();
        org.apache.rat.license.ILicense.Builder builder75 = builder73.setLicenseFamilyCategory("");
        org.apache.rat.analysis.matchers.CopyrightMatcher copyrightMatcher79 = new org.apache.rat.analysis.matchers.CopyrightMatcher("", "GPL1 ", "hi!");
        org.apache.rat.analysis.IHeaderMatcher.State state80 = copyrightMatcher79.finalizeState();
        org.apache.rat.license.ILicense.Builder builder81 = builder75.setMatcher((org.apache.rat.analysis.IHeaderMatcher) copyrightMatcher79);
        org.apache.rat.license.ILicense.Builder builder83 = builder81.setLicenseFamilyCategory("");
        defaultLog72.error((java.lang.Object) builder83);
        org.apache.rat.utils.Log.Level level85 = org.apache.rat.utils.Log.Level.INFO;
        defaultLog72.log(level85, "JAVA");
        org.apache.rat.utils.Log.Level level88 = defaultLog72.getLevel();
        org.apache.rat.utils.Log.Level level89 = defaultLog72.getLevel();
        org.apache.rat.analysis.matchers.FullTextMatcher fullTextMatcher92 = new org.apache.rat.analysis.matchers.FullTextMatcher("SpdxBuilder641dafc113c345d48272f36f10392c53", "MathcerRefBuilder: F FALSE");
        java.lang.Throwable throwable93 = null;
        // The following exception was thrown during execution in test generation
        try {
            defaultLog0.log(level89, (java.lang.Object) fullTextMatcher92, throwable93);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(defaultLog0);
        org.junit.Assert.assertNotNull(matcherRefBuilder2);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "MathcerRefBuilder: null" + "'", str4, "MathcerRefBuilder: null");
        org.junit.Assert.assertNotNull(anyBuilder5);
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "NotBuilder: null" + "'", str7, "NotBuilder: null");
        org.junit.Assert.assertNotNull(matcherRefBuilder8);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertNotNull(matcherRefBuilder11);
        org.junit.Assert.assertNotNull(copyrightBuilder13);
        org.junit.Assert.assertNotNull(copyrightBuilder15);
        org.junit.Assert.assertEquals("'" + str16 + "' != '" + "Copyright Builder: s:OASIS e:null o:null" + "'", str16, "Copyright Builder: s:OASIS e:null o:null");
        org.junit.Assert.assertNotNull(copyrightBuilder18);
        org.junit.Assert.assertNotNull(matcherRefBuilder19);
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + false + "'", boolean20 == false);
        org.junit.Assert.assertNotNull(copyrightBuilder21);
        org.junit.Assert.assertNotNull(copyrightBuilder23);
        org.junit.Assert.assertEquals("'" + str24 + "' != '" + "Copyright Builder: s:OASIS e:null o:null" + "'", str24, "Copyright Builder: s:OASIS e:null o:null");
        org.junit.Assert.assertNotNull(copyrightBuilder26);
        org.junit.Assert.assertNotNull(copyrightBuilder27);
        org.junit.Assert.assertNotNull(copyrightBuilder28);
        org.junit.Assert.assertEquals("'" + str29 + "' != '" + "Copyright Builder: s:null e:null o:null" + "'", str29, "Copyright Builder: s:null e:null o:null");
        org.junit.Assert.assertNotNull(copyrightBuilder31);
        org.junit.Assert.assertTrue("'" + boolean32 + "' != '" + false + "'", boolean32 == false);
        org.junit.Assert.assertNotNull(copyrightBuilder33);
        org.junit.Assert.assertEquals("'" + str34 + "' != '" + "Copyright Builder: s:null e:null o:null" + "'", str34, "Copyright Builder: s:null e:null o:null");
        org.junit.Assert.assertNotNull(copyrightBuilder36);
        org.junit.Assert.assertTrue("'" + boolean37 + "' != '" + false + "'", boolean37 == false);
        org.junit.Assert.assertEquals("'" + str38 + "' != '" + "Copyright Builder: s:null e:.cvsignore o:null" + "'", str38, "Copyright Builder: s:null e:.cvsignore o:null");
        org.junit.Assert.assertNotNull(copyrightBuilder39);
        org.junit.Assert.assertNotNull(copyrightBuilder41);
        org.junit.Assert.assertNotNull(anyBuilder42);
        org.junit.Assert.assertNotNull(matcherRefBuilder43);
        org.junit.Assert.assertTrue("'" + boolean44 + "' != '" + false + "'", boolean44 == false);
        org.junit.Assert.assertNotNull(matcherRefBuilder46);
        org.junit.Assert.assertNotNull(copyrightBuilder47);
        org.junit.Assert.assertNotNull(matcherRefBuilder48);
        org.junit.Assert.assertTrue("'" + boolean49 + "' != '" + false + "'", boolean49 == false);
        org.junit.Assert.assertEquals("'" + str50 + "' != '" + "MathcerRefBuilder: null" + "'", str50, "MathcerRefBuilder: null");
        org.junit.Assert.assertNotNull(matcherRefBuilder52);
        org.junit.Assert.assertNotNull(builderArray53);
        org.junit.Assert.assertTrue("'" + boolean55 + "' != '" + true + "'", boolean55 == true);
        org.junit.Assert.assertNotNull(abstractBuilder56);
        org.junit.Assert.assertNotNull(builderArray58);
        org.junit.Assert.assertTrue("'" + boolean60 + "' != '" + true + "'", boolean60 == true);
        org.junit.Assert.assertNotNull(abstractBuilder61);
        org.junit.Assert.assertTrue("'" + level68 + "' != '" + org.apache.rat.utils.Log.Level.ERROR + "'", level68.equals(org.apache.rat.utils.Log.Level.ERROR));
        org.junit.Assert.assertNotNull(defaultLog72);
        org.junit.Assert.assertNotNull(builder73);
        org.junit.Assert.assertNotNull(builder75);
        org.junit.Assert.assertTrue("'" + state80 + "' != '" + org.apache.rat.analysis.IHeaderMatcher.State.f + "'", state80.equals(org.apache.rat.analysis.IHeaderMatcher.State.f));
        org.junit.Assert.assertNotNull(builder81);
        org.junit.Assert.assertNotNull(builder83);
        org.junit.Assert.assertTrue("'" + level85 + "' != '" + org.apache.rat.utils.Log.Level.INFO + "'", level85.equals(org.apache.rat.utils.Log.Level.INFO));
        org.junit.Assert.assertTrue("'" + level88 + "' != '" + org.apache.rat.utils.Log.Level.ERROR + "'", level88.equals(org.apache.rat.utils.Log.Level.ERROR));
        org.junit.Assert.assertTrue("'" + level89 + "' != '" + org.apache.rat.utils.Log.Level.ERROR + "'", level89.equals(org.apache.rat.utils.Log.Level.ERROR));
    }

    @Test
    public void test12714() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest25.test12714");
        org.apache.rat.license.ILicense.Builder builder0 = org.apache.rat.license.ILicense.builder();
        org.apache.rat.license.ILicense.Builder builder2 = builder0.setLicenseFamilyCategory("");
        org.apache.rat.license.ILicense.Builder builder4 = builder2.setDerivedFrom("GEN  ");
        org.apache.rat.license.ILicense.Builder builder6 = builder4.setId("DOJO ");
        org.apache.rat.license.ILicense.Builder builder8 = builder6.setName("GPL3 ");
        org.apache.rat.license.ILicense.Builder builder10 = builder6.setNotes("http://org/apache/rat/meta-data");
        org.apache.rat.license.ILicense.Builder builder12 = builder10.setNotes("true|false|forced");
        org.apache.rat.license.ILicense.Builder builder14 = builder12.setId("a023dc4d-fa59-495e-8a26-ea366aed4ae0");
        org.apache.rat.license.ILicense.Builder builder16 = builder14.setLicenseFamilyCategory("AnyBuilder:\nMathcerRefBuilder: null\nAllBuilder:\nCopyright Builder: s:223f0aba-15d4-49e9-901e-5740c137aebf e:null o:null\nMathcerRefBuilder: null\nCopyright Builder: s:223f0aba-15d4-49e9-901e-5740c137aebf e:null o:null\nCopyright Builder: s:null e:null o:null\nCopyright Builder: s:null e:.cvsignore o:null\nCopyright Builder: s:null e:.cvsignore o:null\nCopyright Builder: s:OASIS e:null o:null\nAnyBuilder:\nMathcerRefBuilder: null\nCopyright Builder: s:null e:null o:null\nMathcerRefBuilder: null");
        org.apache.rat.license.ILicense.Builder builder18 = builder14.setNotes("null http://org/apache/rat/meta-data#LicenseFamilyName");
        org.junit.Assert.assertNotNull(builder0);
        org.junit.Assert.assertNotNull(builder2);
        org.junit.Assert.assertNotNull(builder4);
        org.junit.Assert.assertNotNull(builder6);
        org.junit.Assert.assertNotNull(builder8);
        org.junit.Assert.assertNotNull(builder10);
        org.junit.Assert.assertNotNull(builder12);
        org.junit.Assert.assertNotNull(builder14);
        org.junit.Assert.assertNotNull(builder16);
        org.junit.Assert.assertNotNull(builder18);
    }

    @Test
    public void test12715() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest25.test12715");
        java.util.regex.Pattern pattern1 = null;
        org.apache.rat.analysis.matchers.SimpleRegexMatcher simpleRegexMatcher2 = new org.apache.rat.analysis.matchers.SimpleRegexMatcher("5229ae24-2b36-466b-8ff4-f67a7c68ef04", pattern1);
        org.apache.rat.analysis.IHeaderMatcher.State state3 = simpleRegexMatcher2.currentState();
        org.junit.Assert.assertTrue("'" + state3 + "' != '" + org.apache.rat.analysis.IHeaderMatcher.State.i + "'", state3.equals(org.apache.rat.analysis.IHeaderMatcher.State.i));
    }

    @Test
    public void test12716() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest25.test12716");
        org.apache.rat.utils.Log log0 = null;
        org.apache.rat.ReportConfiguration reportConfiguration1 = new org.apache.rat.ReportConfiguration(log0);
        org.apache.rat.report.claim.ClaimStatistic claimStatistic2 = org.apache.rat.Reporter.report(reportConfiguration1);
        org.apache.commons.io.function.IOSupplier<java.io.OutputStream> outputStreamIOSupplier3 = reportConfiguration1.getOutput();
        org.apache.rat.license.ILicense iLicense4 = null;
        reportConfiguration1.addLicense(iLicense4);
        reportConfiguration1.removeApprovedLicenseCategory("F FALSE");
        org.apache.rat.utils.Log log8 = null;
        org.apache.rat.ReportConfiguration reportConfiguration9 = new org.apache.rat.ReportConfiguration(log8);
        java.io.FilenameFilter filenameFilter10 = reportConfiguration9.getInputFileFilter();
        org.apache.rat.license.LicenseSetFactory.LicenseFilter licenseFilter11 = org.apache.rat.license.LicenseSetFactory.LicenseFilter.all;
        java.util.SortedSet<org.apache.rat.license.ILicense> iLicenseSet12 = reportConfiguration9.getLicenses(licenseFilter11);
        org.apache.rat.config.AddLicenseHeaders addLicenseHeaders13 = org.apache.rat.config.AddLicenseHeaders.FALSE;
        reportConfiguration9.setAddLicenseHeaders(addLicenseHeaders13);
        org.apache.rat.utils.Log log15 = null;
        org.apache.rat.ReportConfiguration reportConfiguration16 = new org.apache.rat.ReportConfiguration(log15);
        org.apache.rat.report.claim.ClaimStatistic claimStatistic17 = org.apache.rat.Reporter.report(reportConfiguration16);
        org.apache.rat.license.LicenseSetFactory.LicenseFilter licenseFilter18 = org.apache.rat.license.LicenseSetFactory.LicenseFilter.all;
        org.apache.rat.Reporter.listLicenses(reportConfiguration16, licenseFilter18);
        org.apache.rat.Reporter.listLicenses(reportConfiguration9, licenseFilter18);
        org.apache.rat.utils.Log log21 = null;
        org.apache.rat.ReportConfiguration reportConfiguration22 = new org.apache.rat.ReportConfiguration(log21);
        java.io.FilenameFilter filenameFilter23 = reportConfiguration22.getInputFileFilter();
        org.apache.rat.license.LicenseSetFactory.LicenseFilter licenseFilter24 = org.apache.rat.license.LicenseSetFactory.LicenseFilter.all;
        java.util.SortedSet<org.apache.rat.license.ILicense> iLicenseSet25 = reportConfiguration22.getLicenses(licenseFilter24);
        org.apache.rat.config.AddLicenseHeaders addLicenseHeaders26 = org.apache.rat.config.AddLicenseHeaders.FALSE;
        reportConfiguration22.setAddLicenseHeaders(addLicenseHeaders26);
        org.apache.rat.utils.Log log28 = null;
        org.apache.rat.ReportConfiguration reportConfiguration29 = new org.apache.rat.ReportConfiguration(log28);
        org.apache.rat.report.claim.ClaimStatistic claimStatistic30 = org.apache.rat.Reporter.report(reportConfiguration29);
        org.apache.rat.license.LicenseSetFactory.LicenseFilter licenseFilter31 = org.apache.rat.license.LicenseSetFactory.LicenseFilter.all;
        org.apache.rat.Reporter.listLicenses(reportConfiguration29, licenseFilter31);
        org.apache.rat.Reporter.listLicenses(reportConfiguration22, licenseFilter31);
        org.apache.rat.Reporter.listLicenses(reportConfiguration9, licenseFilter31);
        java.io.FilenameFilter filenameFilter35 = reportConfiguration9.getInputFileFilter();
        org.apache.rat.utils.Log log36 = null;
        org.apache.rat.ReportConfiguration reportConfiguration37 = new org.apache.rat.ReportConfiguration(log36);
        java.io.FilenameFilter filenameFilter38 = reportConfiguration37.getInputFileFilter();
        org.apache.rat.license.LicenseSetFactory.LicenseFilter licenseFilter39 = org.apache.rat.license.LicenseSetFactory.LicenseFilter.all;
        java.util.SortedSet<org.apache.rat.license.ILicense> iLicenseSet40 = reportConfiguration37.getLicenses(licenseFilter39);
        org.apache.rat.config.AddLicenseHeaders addLicenseHeaders41 = org.apache.rat.config.AddLicenseHeaders.FALSE;
        reportConfiguration37.setAddLicenseHeaders(addLicenseHeaders41);
        org.apache.rat.utils.Log log43 = null;
        org.apache.rat.ReportConfiguration reportConfiguration44 = new org.apache.rat.ReportConfiguration(log43);
        org.apache.rat.report.claim.ClaimStatistic claimStatistic45 = org.apache.rat.Reporter.report(reportConfiguration44);
        org.apache.rat.license.LicenseSetFactory.LicenseFilter licenseFilter46 = org.apache.rat.license.LicenseSetFactory.LicenseFilter.all;
        org.apache.rat.Reporter.listLicenses(reportConfiguration44, licenseFilter46);
        org.apache.rat.Reporter.listLicenses(reportConfiguration37, licenseFilter46);
        org.apache.rat.utils.Log log49 = null;
        org.apache.rat.ReportConfiguration reportConfiguration50 = new org.apache.rat.ReportConfiguration(log49);
        java.io.FilenameFilter filenameFilter51 = reportConfiguration50.getInputFileFilter();
        org.apache.rat.license.LicenseSetFactory.LicenseFilter licenseFilter52 = org.apache.rat.license.LicenseSetFactory.LicenseFilter.all;
        java.util.SortedSet<org.apache.rat.license.ILicense> iLicenseSet53 = reportConfiguration50.getLicenses(licenseFilter52);
        org.apache.rat.config.AddLicenseHeaders addLicenseHeaders54 = org.apache.rat.config.AddLicenseHeaders.FALSE;
        reportConfiguration50.setAddLicenseHeaders(addLicenseHeaders54);
        org.apache.rat.utils.Log log56 = null;
        org.apache.rat.ReportConfiguration reportConfiguration57 = new org.apache.rat.ReportConfiguration(log56);
        org.apache.rat.report.claim.ClaimStatistic claimStatistic58 = org.apache.rat.Reporter.report(reportConfiguration57);
        org.apache.rat.license.LicenseSetFactory.LicenseFilter licenseFilter59 = org.apache.rat.license.LicenseSetFactory.LicenseFilter.all;
        org.apache.rat.Reporter.listLicenses(reportConfiguration57, licenseFilter59);
        org.apache.rat.Reporter.listLicenses(reportConfiguration50, licenseFilter59);
        org.apache.rat.Reporter.listLicenses(reportConfiguration37, licenseFilter59);
        java.util.SortedSet<org.apache.rat.license.ILicense> iLicenseSet63 = reportConfiguration9.getLicenses(licenseFilter59);
        boolean boolean64 = reportConfiguration9.isAddingLicensesForced();
        org.apache.rat.utils.Log log65 = null;
        org.apache.rat.ReportConfiguration reportConfiguration66 = new org.apache.rat.ReportConfiguration(log65);
        org.apache.rat.report.claim.ClaimStatistic claimStatistic67 = org.apache.rat.Reporter.report(reportConfiguration66);
        org.apache.rat.utils.Log log68 = null;
        org.apache.rat.ReportConfiguration reportConfiguration69 = new org.apache.rat.ReportConfiguration(log68);
        org.apache.rat.report.claim.ClaimStatistic claimStatistic70 = org.apache.rat.Reporter.report(reportConfiguration69);
        org.apache.rat.utils.ReportingSet.Options options71 = org.apache.rat.utils.ReportingSet.Options.OVERWRITE;
        reportConfiguration69.licenseDuplicateOption(options71);
        reportConfiguration66.familyDuplicateOption(options71);
        reportConfiguration9.familyDuplicateOption(options71);
        org.apache.rat.license.ILicenseFamily.Builder builder75 = org.apache.rat.license.ILicenseFamily.builder();
        java.lang.String str76 = builder75.getCategory();
        org.apache.rat.license.ILicenseFamily.Builder builder78 = builder75.setLicenseFamilyCategory("Copyright Builder: s:null e:null o:null");
        org.apache.rat.license.ILicenseFamily.Builder builder80 = builder78.setLicenseFamilyName("6486879f-fc81-4b57-aec7-c4c77d540c30");
        org.apache.rat.license.ILicenseFamily.Builder builder82 = builder80.setLicenseFamilyName("6620e9ee-d651-4c18-8162-edad6d18368e");
        reportConfiguration9.addFamily(builder80);
        org.apache.rat.license.ILicenseFamily.Builder builder85 = builder80.setLicenseFamilyCategory("NotBuilder: MathcerRefBuilder: null");
        org.apache.rat.license.ILicenseFamily.Builder builder87 = builder85.setLicenseFamilyCategory("58515fd1-71f9-42a1-b033-b509624129a7");
        reportConfiguration1.addFamily(builder85);
        org.apache.rat.config.SourceCodeManagementSystems sourceCodeManagementSystems89 = org.apache.rat.config.SourceCodeManagementSystems.SUBVERSION;
        java.util.List<java.lang.String> strList90 = sourceCodeManagementSystems89.getExclusions();
        java.util.List<java.lang.String> strList91 = sourceCodeManagementSystems89.getExclusions();
        java.io.FilenameFilter filenameFilter92 = org.apache.rat.Report.parseExclusions(strList91);
        reportConfiguration1.removeApprovedLicenseCategories((java.util.Collection<java.lang.String>) strList91);
        org.apache.rat.utils.Log log94 = reportConfiguration1.getLog();
        org.apache.commons.io.function.IOSupplier<java.io.InputStream> inputStreamIOSupplier95 = reportConfiguration1.getStyleSheet();
        org.junit.Assert.assertNull(claimStatistic2);
        org.junit.Assert.assertNotNull(outputStreamIOSupplier3);
        org.junit.Assert.assertNull(filenameFilter10);
        org.junit.Assert.assertTrue("'" + licenseFilter11 + "' != '" + org.apache.rat.license.LicenseSetFactory.LicenseFilter.all + "'", licenseFilter11.equals(org.apache.rat.license.LicenseSetFactory.LicenseFilter.all));
        org.junit.Assert.assertNotNull(iLicenseSet12);
        org.junit.Assert.assertTrue("'" + addLicenseHeaders13 + "' != '" + org.apache.rat.config.AddLicenseHeaders.FALSE + "'", addLicenseHeaders13.equals(org.apache.rat.config.AddLicenseHeaders.FALSE));
        org.junit.Assert.assertNull(claimStatistic17);
        org.junit.Assert.assertTrue("'" + licenseFilter18 + "' != '" + org.apache.rat.license.LicenseSetFactory.LicenseFilter.all + "'", licenseFilter18.equals(org.apache.rat.license.LicenseSetFactory.LicenseFilter.all));
        org.junit.Assert.assertNull(filenameFilter23);
        org.junit.Assert.assertTrue("'" + licenseFilter24 + "' != '" + org.apache.rat.license.LicenseSetFactory.LicenseFilter.all + "'", licenseFilter24.equals(org.apache.rat.license.LicenseSetFactory.LicenseFilter.all));
        org.junit.Assert.assertNotNull(iLicenseSet25);
        org.junit.Assert.assertTrue("'" + addLicenseHeaders26 + "' != '" + org.apache.rat.config.AddLicenseHeaders.FALSE + "'", addLicenseHeaders26.equals(org.apache.rat.config.AddLicenseHeaders.FALSE));
        org.junit.Assert.assertNull(claimStatistic30);
        org.junit.Assert.assertTrue("'" + licenseFilter31 + "' != '" + org.apache.rat.license.LicenseSetFactory.LicenseFilter.all + "'", licenseFilter31.equals(org.apache.rat.license.LicenseSetFactory.LicenseFilter.all));
        org.junit.Assert.assertNull(filenameFilter35);
        org.junit.Assert.assertNull(filenameFilter38);
        org.junit.Assert.assertTrue("'" + licenseFilter39 + "' != '" + org.apache.rat.license.LicenseSetFactory.LicenseFilter.all + "'", licenseFilter39.equals(org.apache.rat.license.LicenseSetFactory.LicenseFilter.all));
        org.junit.Assert.assertNotNull(iLicenseSet40);
        org.junit.Assert.assertTrue("'" + addLicenseHeaders41 + "' != '" + org.apache.rat.config.AddLicenseHeaders.FALSE + "'", addLicenseHeaders41.equals(org.apache.rat.config.AddLicenseHeaders.FALSE));
        org.junit.Assert.assertNull(claimStatistic45);
        org.junit.Assert.assertTrue("'" + licenseFilter46 + "' != '" + org.apache.rat.license.LicenseSetFactory.LicenseFilter.all + "'", licenseFilter46.equals(org.apache.rat.license.LicenseSetFactory.LicenseFilter.all));
        org.junit.Assert.assertNull(filenameFilter51);
        org.junit.Assert.assertTrue("'" + licenseFilter52 + "' != '" + org.apache.rat.license.LicenseSetFactory.LicenseFilter.all + "'", licenseFilter52.equals(org.apache.rat.license.LicenseSetFactory.LicenseFilter.all));
        org.junit.Assert.assertNotNull(iLicenseSet53);
        org.junit.Assert.assertTrue("'" + addLicenseHeaders54 + "' != '" + org.apache.rat.config.AddLicenseHeaders.FALSE + "'", addLicenseHeaders54.equals(org.apache.rat.config.AddLicenseHeaders.FALSE));
        org.junit.Assert.assertNull(claimStatistic58);
        org.junit.Assert.assertTrue("'" + licenseFilter59 + "' != '" + org.apache.rat.license.LicenseSetFactory.LicenseFilter.all + "'", licenseFilter59.equals(org.apache.rat.license.LicenseSetFactory.LicenseFilter.all));
        org.junit.Assert.assertNotNull(iLicenseSet63);
        org.junit.Assert.assertTrue("'" + boolean64 + "' != '" + false + "'", boolean64 == false);
        org.junit.Assert.assertNull(claimStatistic67);
        org.junit.Assert.assertNull(claimStatistic70);
        org.junit.Assert.assertTrue("'" + options71 + "' != '" + org.apache.rat.utils.ReportingSet.Options.OVERWRITE + "'", options71.equals(org.apache.rat.utils.ReportingSet.Options.OVERWRITE));
        org.junit.Assert.assertNotNull(builder75);
        org.junit.Assert.assertNull(str76);
        org.junit.Assert.assertNotNull(builder78);
        org.junit.Assert.assertNotNull(builder80);
        org.junit.Assert.assertNotNull(builder82);
        org.junit.Assert.assertNotNull(builder85);
        org.junit.Assert.assertNotNull(builder87);
        org.junit.Assert.assertTrue("'" + sourceCodeManagementSystems89 + "' != '" + org.apache.rat.config.SourceCodeManagementSystems.SUBVERSION + "'", sourceCodeManagementSystems89.equals(org.apache.rat.config.SourceCodeManagementSystems.SUBVERSION));
        org.junit.Assert.assertNotNull(strList90);
        org.junit.Assert.assertNotNull(strList91);
        org.junit.Assert.assertNotNull(filenameFilter92);
        org.junit.Assert.assertNull(log94);
        org.junit.Assert.assertNull(inputStreamIOSupplier95);
    }

    @Test
    public void test12717() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest25.test12717");
        java.util.List<java.lang.String> strList0 = org.apache.rat.config.SourceCodeManagementSystems.getPluginExclusions();
        java.io.FilenameFilter filenameFilter1 = org.apache.rat.Report.parseExclusions(strList0);
        java.io.FilenameFilter filenameFilter2 = org.apache.rat.Report.parseExclusions(strList0);
        org.junit.Assert.assertNotNull(strList0);
        org.junit.Assert.assertNotNull(filenameFilter1);
        org.junit.Assert.assertNotNull(filenameFilter2);
    }

    @Test
    public void test12718() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest25.test12718");
        org.apache.rat.utils.ReportingSet<java.lang.String> strSet0 = new org.apache.rat.utils.ReportingSet<java.lang.String>();
        org.apache.rat.utils.DefaultLog defaultLog1 = org.apache.rat.utils.DefaultLog.INSTANCE;
        org.apache.rat.utils.Log log2 = null;
        org.apache.rat.ReportConfiguration reportConfiguration3 = new org.apache.rat.ReportConfiguration(log2);
        java.io.FilenameFilter filenameFilter4 = reportConfiguration3.getInputFileFilter();
        org.apache.rat.license.LicenseSetFactory.LicenseFilter licenseFilter5 = org.apache.rat.license.LicenseSetFactory.LicenseFilter.all;
        java.util.SortedSet<org.apache.rat.license.ILicense> iLicenseSet6 = reportConfiguration3.getLicenses(licenseFilter5);
        org.apache.rat.config.AddLicenseHeaders addLicenseHeaders7 = org.apache.rat.config.AddLicenseHeaders.FALSE;
        reportConfiguration3.setAddLicenseHeaders(addLicenseHeaders7);
        org.apache.rat.utils.Log log9 = null;
        org.apache.rat.ReportConfiguration reportConfiguration10 = new org.apache.rat.ReportConfiguration(log9);
        org.apache.rat.report.claim.ClaimStatistic claimStatistic11 = org.apache.rat.Reporter.report(reportConfiguration10);
        org.apache.rat.license.LicenseSetFactory.LicenseFilter licenseFilter12 = org.apache.rat.license.LicenseSetFactory.LicenseFilter.all;
        org.apache.rat.Reporter.listLicenses(reportConfiguration10, licenseFilter12);
        org.apache.rat.Reporter.listLicenses(reportConfiguration3, licenseFilter12);
        org.apache.rat.utils.Log log15 = null;
        org.apache.rat.ReportConfiguration reportConfiguration16 = new org.apache.rat.ReportConfiguration(log15);
        java.io.FilenameFilter filenameFilter17 = reportConfiguration16.getInputFileFilter();
        org.apache.rat.license.LicenseSetFactory.LicenseFilter licenseFilter18 = org.apache.rat.license.LicenseSetFactory.LicenseFilter.all;
        java.util.SortedSet<org.apache.rat.license.ILicense> iLicenseSet19 = reportConfiguration16.getLicenses(licenseFilter18);
        org.apache.rat.config.AddLicenseHeaders addLicenseHeaders20 = org.apache.rat.config.AddLicenseHeaders.FALSE;
        reportConfiguration16.setAddLicenseHeaders(addLicenseHeaders20);
        org.apache.rat.utils.Log log22 = null;
        org.apache.rat.ReportConfiguration reportConfiguration23 = new org.apache.rat.ReportConfiguration(log22);
        org.apache.rat.report.claim.ClaimStatistic claimStatistic24 = org.apache.rat.Reporter.report(reportConfiguration23);
        org.apache.rat.license.LicenseSetFactory.LicenseFilter licenseFilter25 = org.apache.rat.license.LicenseSetFactory.LicenseFilter.all;
        org.apache.rat.Reporter.listLicenses(reportConfiguration23, licenseFilter25);
        org.apache.rat.Reporter.listLicenses(reportConfiguration16, licenseFilter25);
        org.apache.rat.Reporter.listLicenses(reportConfiguration3, licenseFilter25);
        org.apache.rat.utils.Log log29 = null;
        org.apache.rat.ReportConfiguration reportConfiguration30 = new org.apache.rat.ReportConfiguration(log29);
        org.apache.commons.io.function.IOSupplier<java.io.OutputStream> outputStreamIOSupplier31 = reportConfiguration30.getOutput();
        reportConfiguration3.setOut(outputStreamIOSupplier31);
        org.apache.rat.utils.Log log33 = null;
        org.apache.rat.ReportConfiguration reportConfiguration34 = new org.apache.rat.ReportConfiguration(log33);
        org.apache.rat.report.claim.ClaimStatistic claimStatistic35 = org.apache.rat.Reporter.report(reportConfiguration34);
        org.apache.rat.utils.Log log36 = null;
        org.apache.rat.ReportConfiguration reportConfiguration37 = new org.apache.rat.ReportConfiguration(log36);
        org.apache.rat.report.claim.ClaimStatistic claimStatistic38 = org.apache.rat.Reporter.report(reportConfiguration37);
        org.apache.rat.utils.ReportingSet.Options options39 = org.apache.rat.utils.ReportingSet.Options.OVERWRITE;
        reportConfiguration37.licenseDuplicateOption(options39);
        reportConfiguration34.familyDuplicateOption(options39);
        reportConfiguration3.licenseDuplicateOption(options39);
        reportConfiguration3.addApprovedLicenseCategory("W3C Document Copyright");
        org.apache.rat.utils.Log log45 = null;
        org.apache.rat.ReportConfiguration reportConfiguration46 = new org.apache.rat.ReportConfiguration(log45);
        reportConfiguration46.addApprovedLicenseCategory(".cvsignore");
        org.apache.rat.utils.Log.Level level49 = org.apache.rat.utils.Log.Level.ERROR;
        reportConfiguration46.logLicenseCollisions(level49);
        reportConfiguration3.logLicenseCollisions(level49);
        defaultLog1.setLevel(level49);
        org.apache.rat.utils.ReportingSet<java.lang.String> strSet53 = strSet0.setLog((org.apache.rat.utils.Log) defaultLog1);
        org.apache.rat.configuration.Format format54 = org.apache.rat.configuration.Format.XML;
        org.apache.rat.configuration.LicenseReader licenseReader55 = format54.licenseReader();
        java.util.SortedSet<org.apache.rat.license.ILicense> iLicenseSet56 = licenseReader55.readLicenses();
        java.lang.String[] strArray62 = new java.lang.String[] { "http://org/apache/rat/meta-data#LicenseFamilyCategory", "Datum [ name ='http://org/apache/rat/meta-data#LicenseFamilyCategory',value ='GPL1  ']", "MANIFEST.MF", "AllBuilder:", "The MIT License" };
        org.apache.rat.utils.ReportingSet<java.lang.String> strSet63 = new org.apache.rat.utils.ReportingSet<java.lang.String>();
        boolean boolean64 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strSet63, strArray62);
        boolean boolean66 = strSet63.addIfNotPresent("http://org/apache/rat/meta-data#LicenseFamilyName");
        boolean boolean68 = strSet63.addIfNotPresent("ef7a8b13-64c3-4510-bb0c-dbf208e1e73f");
        java.util.function.Function<java.lang.String, java.lang.String> strFunction69 = null;
        org.apache.rat.utils.ReportingSet<java.lang.String> strSet70 = strSet63.setMsgFormat(strFunction69);
        boolean boolean71 = strSet63.isEmpty();
        org.apache.rat.license.LicenseSetFactory licenseSetFactory72 = new org.apache.rat.license.LicenseSetFactory(iLicenseSet56, (java.util.Collection<java.lang.String>) strSet63);
        org.apache.rat.license.ILicenseFamily[] iLicenseFamilyArray73 = new org.apache.rat.license.ILicenseFamily[] {};
        java.util.ArrayList<org.apache.rat.license.ILicenseFamily> iLicenseFamilyList74 = new java.util.ArrayList<org.apache.rat.license.ILicenseFamily>();
        boolean boolean75 = java.util.Collections.addAll((java.util.Collection<org.apache.rat.license.ILicenseFamily>) iLicenseFamilyList74, iLicenseFamilyArray73);
        org.apache.rat.policy.DefaultPolicy defaultPolicy76 = new org.apache.rat.policy.DefaultPolicy((java.util.Collection<org.apache.rat.license.ILicenseFamily>) iLicenseFamilyList74);
        boolean boolean77 = strSet63.removeAll((java.util.Collection<org.apache.rat.license.ILicenseFamily>) iLicenseFamilyList74);
        org.apache.rat.policy.DefaultPolicy defaultPolicy78 = new org.apache.rat.policy.DefaultPolicy((java.util.Collection<org.apache.rat.license.ILicenseFamily>) iLicenseFamilyList74);
        boolean boolean79 = strSet0.retainAll((java.util.Collection<org.apache.rat.license.ILicenseFamily>) iLicenseFamilyList74);
        org.apache.rat.Defaults.Builder builder80 = org.apache.rat.Defaults.builder();
        org.apache.rat.Defaults defaults81 = builder80.build();
        org.apache.rat.license.LicenseSetFactory.LicenseFilter licenseFilter82 = org.apache.rat.license.LicenseSetFactory.LicenseFilter.approved;
        java.util.SortedSet<org.apache.rat.license.ILicenseFamily> iLicenseFamilySet83 = defaults81.getLicenseFamilies(licenseFilter82);
        org.apache.rat.policy.DefaultPolicy defaultPolicy84 = new org.apache.rat.policy.DefaultPolicy((java.util.Collection<org.apache.rat.license.ILicenseFamily>) iLicenseFamilySet83);
        org.apache.rat.policy.DefaultPolicy defaultPolicy85 = new org.apache.rat.policy.DefaultPolicy((java.util.Collection<org.apache.rat.license.ILicenseFamily>) iLicenseFamilySet83);
        boolean boolean86 = strSet0.containsAll((java.util.Collection<org.apache.rat.license.ILicenseFamily>) iLicenseFamilySet83);
        strSet0.clear();
        java.util.function.Function<java.lang.String, java.lang.String> strFunction88 = null;
        org.apache.rat.utils.ReportingSet<java.lang.String> strSet89 = strSet0.setMsgFormat(strFunction88);
        org.junit.Assert.assertNotNull(defaultLog1);
        org.junit.Assert.assertNull(filenameFilter4);
        org.junit.Assert.assertTrue("'" + licenseFilter5 + "' != '" + org.apache.rat.license.LicenseSetFactory.LicenseFilter.all + "'", licenseFilter5.equals(org.apache.rat.license.LicenseSetFactory.LicenseFilter.all));
        org.junit.Assert.assertNotNull(iLicenseSet6);
        org.junit.Assert.assertTrue("'" + addLicenseHeaders7 + "' != '" + org.apache.rat.config.AddLicenseHeaders.FALSE + "'", addLicenseHeaders7.equals(org.apache.rat.config.AddLicenseHeaders.FALSE));
        org.junit.Assert.assertNull(claimStatistic11);
        org.junit.Assert.assertTrue("'" + licenseFilter12 + "' != '" + org.apache.rat.license.LicenseSetFactory.LicenseFilter.all + "'", licenseFilter12.equals(org.apache.rat.license.LicenseSetFactory.LicenseFilter.all));
        org.junit.Assert.assertNull(filenameFilter17);
        org.junit.Assert.assertTrue("'" + licenseFilter18 + "' != '" + org.apache.rat.license.LicenseSetFactory.LicenseFilter.all + "'", licenseFilter18.equals(org.apache.rat.license.LicenseSetFactory.LicenseFilter.all));
        org.junit.Assert.assertNotNull(iLicenseSet19);
        org.junit.Assert.assertTrue("'" + addLicenseHeaders20 + "' != '" + org.apache.rat.config.AddLicenseHeaders.FALSE + "'", addLicenseHeaders20.equals(org.apache.rat.config.AddLicenseHeaders.FALSE));
        org.junit.Assert.assertNull(claimStatistic24);
        org.junit.Assert.assertTrue("'" + licenseFilter25 + "' != '" + org.apache.rat.license.LicenseSetFactory.LicenseFilter.all + "'", licenseFilter25.equals(org.apache.rat.license.LicenseSetFactory.LicenseFilter.all));
        org.junit.Assert.assertNotNull(outputStreamIOSupplier31);
        org.junit.Assert.assertNull(claimStatistic35);
        org.junit.Assert.assertNull(claimStatistic38);
        org.junit.Assert.assertTrue("'" + options39 + "' != '" + org.apache.rat.utils.ReportingSet.Options.OVERWRITE + "'", options39.equals(org.apache.rat.utils.ReportingSet.Options.OVERWRITE));
        org.junit.Assert.assertTrue("'" + level49 + "' != '" + org.apache.rat.utils.Log.Level.ERROR + "'", level49.equals(org.apache.rat.utils.Log.Level.ERROR));
        org.junit.Assert.assertNotNull(strSet53);
        org.junit.Assert.assertTrue("'" + format54 + "' != '" + org.apache.rat.configuration.Format.XML + "'", format54.equals(org.apache.rat.configuration.Format.XML));
        org.junit.Assert.assertNotNull(licenseReader55);
        org.junit.Assert.assertNotNull(iLicenseSet56);
        org.junit.Assert.assertNotNull(strArray62);
        org.junit.Assert.assertTrue("'" + boolean64 + "' != '" + true + "'", boolean64 == true);
        org.junit.Assert.assertTrue("'" + boolean66 + "' != '" + true + "'", boolean66 == true);
        org.junit.Assert.assertTrue("'" + boolean68 + "' != '" + true + "'", boolean68 == true);
        org.junit.Assert.assertNotNull(strSet70);
        org.junit.Assert.assertTrue("'" + boolean71 + "' != '" + false + "'", boolean71 == false);
        org.junit.Assert.assertNotNull(iLicenseFamilyArray73);
        org.junit.Assert.assertTrue("'" + boolean75 + "' != '" + false + "'", boolean75 == false);
        org.junit.Assert.assertTrue("'" + boolean77 + "' != '" + false + "'", boolean77 == false);
        org.junit.Assert.assertTrue("'" + boolean79 + "' != '" + false + "'", boolean79 == false);
        org.junit.Assert.assertNotNull(builder80);
        org.junit.Assert.assertNotNull(defaults81);
        org.junit.Assert.assertTrue("'" + licenseFilter82 + "' != '" + org.apache.rat.license.LicenseSetFactory.LicenseFilter.approved + "'", licenseFilter82.equals(org.apache.rat.license.LicenseSetFactory.LicenseFilter.approved));
        org.junit.Assert.assertNotNull(iLicenseFamilySet83);
        org.junit.Assert.assertTrue("'" + boolean86 + "' != '" + false + "'", boolean86 == false);
        org.junit.Assert.assertNotNull(strSet89);
    }

    @Test
    public void test12719() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest25.test12719");
        org.apache.rat.utils.Log log0 = null;
        org.apache.rat.ReportConfiguration reportConfiguration1 = new org.apache.rat.ReportConfiguration(log0);
        java.io.FilenameFilter filenameFilter2 = reportConfiguration1.getInputFileFilter();
        org.apache.rat.license.LicenseSetFactory.LicenseFilter licenseFilter3 = org.apache.rat.license.LicenseSetFactory.LicenseFilter.all;
        java.util.SortedSet<org.apache.rat.license.ILicense> iLicenseSet4 = reportConfiguration1.getLicenses(licenseFilter3);
        org.apache.rat.config.AddLicenseHeaders addLicenseHeaders5 = org.apache.rat.config.AddLicenseHeaders.FALSE;
        reportConfiguration1.setAddLicenseHeaders(addLicenseHeaders5);
        org.apache.rat.utils.Log log7 = null;
        org.apache.rat.ReportConfiguration reportConfiguration8 = new org.apache.rat.ReportConfiguration(log7);
        org.apache.rat.report.claim.ClaimStatistic claimStatistic9 = org.apache.rat.Reporter.report(reportConfiguration8);
        org.apache.rat.license.LicenseSetFactory.LicenseFilter licenseFilter10 = org.apache.rat.license.LicenseSetFactory.LicenseFilter.all;
        org.apache.rat.Reporter.listLicenses(reportConfiguration8, licenseFilter10);
        org.apache.rat.Reporter.listLicenses(reportConfiguration1, licenseFilter10);
        org.apache.rat.utils.Log log13 = null;
        org.apache.rat.ReportConfiguration reportConfiguration14 = new org.apache.rat.ReportConfiguration(log13);
        java.io.FilenameFilter filenameFilter15 = reportConfiguration14.getInputFileFilter();
        org.apache.rat.license.LicenseSetFactory.LicenseFilter licenseFilter16 = org.apache.rat.license.LicenseSetFactory.LicenseFilter.all;
        java.util.SortedSet<org.apache.rat.license.ILicense> iLicenseSet17 = reportConfiguration14.getLicenses(licenseFilter16);
        org.apache.rat.config.AddLicenseHeaders addLicenseHeaders18 = org.apache.rat.config.AddLicenseHeaders.FALSE;
        reportConfiguration14.setAddLicenseHeaders(addLicenseHeaders18);
        org.apache.rat.utils.Log log20 = null;
        org.apache.rat.ReportConfiguration reportConfiguration21 = new org.apache.rat.ReportConfiguration(log20);
        org.apache.rat.report.claim.ClaimStatistic claimStatistic22 = org.apache.rat.Reporter.report(reportConfiguration21);
        org.apache.rat.license.LicenseSetFactory.LicenseFilter licenseFilter23 = org.apache.rat.license.LicenseSetFactory.LicenseFilter.all;
        org.apache.rat.Reporter.listLicenses(reportConfiguration21, licenseFilter23);
        org.apache.rat.Reporter.listLicenses(reportConfiguration14, licenseFilter23);
        org.apache.rat.Reporter.listLicenses(reportConfiguration1, licenseFilter23);
        org.apache.commons.io.function.IOSupplier<java.io.OutputStream> outputStreamIOSupplier27 = reportConfiguration1.getOutput();
        org.apache.rat.license.ILicenseFamilyBuilder iLicenseFamilyBuilder28 = new org.apache.rat.license.ILicenseFamilyBuilder();
        org.apache.rat.license.ILicenseFamily.Builder builder30 = iLicenseFamilyBuilder28.setLicenseFamilyCategory("Modified BSD License");
        org.apache.rat.license.ILicenseFamily.Builder builder32 = iLicenseFamilyBuilder28.setLicenseFamilyCategory("6486879f-fc81-4b57-aec7-c4c77d540c30");
        org.apache.rat.license.ILicenseFamily.Builder builder34 = iLicenseFamilyBuilder28.setLicenseFamilyName("MathcerRefBuilder: ");
        org.apache.rat.license.ILicenseFamily.Builder builder36 = iLicenseFamilyBuilder28.setLicenseFamilyName("Copyright Builder: s:6481fb19-38f0-43f5-ab95-caf84a069ee1 e:null o:null");
        java.lang.String str37 = builder36.getCategory();
        reportConfiguration1.addFamily(builder36);
        reportConfiguration1.removeApprovedLicenseCategory("EF7A8");
        java.io.FilenameFilter filenameFilter41 = reportConfiguration1.getInputFileFilter();
        org.apache.rat.configuration.Format format42 = org.apache.rat.configuration.Format.XML;
        org.apache.rat.configuration.LicenseReader licenseReader43 = format42.licenseReader();
        java.util.SortedSet<org.apache.rat.license.ILicense> iLicenseSet44 = licenseReader43.readLicenses();
        java.lang.String[] strArray50 = new java.lang.String[] { "http://org/apache/rat/meta-data#LicenseFamilyCategory", "Datum [ name ='http://org/apache/rat/meta-data#LicenseFamilyCategory',value ='GPL1  ']", "MANIFEST.MF", "AllBuilder:", "The MIT License" };
        org.apache.rat.utils.ReportingSet<java.lang.String> strSet51 = new org.apache.rat.utils.ReportingSet<java.lang.String>();
        boolean boolean52 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strSet51, strArray50);
        boolean boolean54 = strSet51.addIfNotPresent("http://org/apache/rat/meta-data#LicenseFamilyName");
        boolean boolean56 = strSet51.addIfNotPresent("ef7a8b13-64c3-4510-bb0c-dbf208e1e73f");
        java.util.function.Function<java.lang.String, java.lang.String> strFunction57 = null;
        org.apache.rat.utils.ReportingSet<java.lang.String> strSet58 = strSet51.setMsgFormat(strFunction57);
        boolean boolean59 = strSet51.isEmpty();
        org.apache.rat.license.LicenseSetFactory licenseSetFactory60 = new org.apache.rat.license.LicenseSetFactory(iLicenseSet44, (java.util.Collection<java.lang.String>) strSet51);
        org.apache.rat.api.MetaData.Datum datum61 = org.apache.rat.api.MetaData.RAT_LICENSE_FAMILY_NAME_DATUM_GPL_VERSION_1;
        java.lang.String str62 = datum61.toString();
        boolean boolean63 = strSet51.equals((java.lang.Object) datum61);
        boolean boolean65 = strSet51.addIfNotPresent("46eea23e-d320-45bc-aa7f-844d2e1597ce");
        org.apache.rat.utils.ReportingSet<java.lang.String> strSet67 = strSet51.headSet("notice");
        org.apache.rat.utils.Log.Level level68 = org.apache.rat.utils.Log.Level.OFF;
        org.apache.rat.utils.ReportingSet<java.lang.String> strSet69 = strSet51.setLogLevel(level68);
        reportConfiguration1.logLicenseCollisions(level68);
        org.junit.Assert.assertNull(filenameFilter2);
        org.junit.Assert.assertTrue("'" + licenseFilter3 + "' != '" + org.apache.rat.license.LicenseSetFactory.LicenseFilter.all + "'", licenseFilter3.equals(org.apache.rat.license.LicenseSetFactory.LicenseFilter.all));
        org.junit.Assert.assertNotNull(iLicenseSet4);
        org.junit.Assert.assertTrue("'" + addLicenseHeaders5 + "' != '" + org.apache.rat.config.AddLicenseHeaders.FALSE + "'", addLicenseHeaders5.equals(org.apache.rat.config.AddLicenseHeaders.FALSE));
        org.junit.Assert.assertNull(claimStatistic9);
        org.junit.Assert.assertTrue("'" + licenseFilter10 + "' != '" + org.apache.rat.license.LicenseSetFactory.LicenseFilter.all + "'", licenseFilter10.equals(org.apache.rat.license.LicenseSetFactory.LicenseFilter.all));
        org.junit.Assert.assertNull(filenameFilter15);
        org.junit.Assert.assertTrue("'" + licenseFilter16 + "' != '" + org.apache.rat.license.LicenseSetFactory.LicenseFilter.all + "'", licenseFilter16.equals(org.apache.rat.license.LicenseSetFactory.LicenseFilter.all));
        org.junit.Assert.assertNotNull(iLicenseSet17);
        org.junit.Assert.assertTrue("'" + addLicenseHeaders18 + "' != '" + org.apache.rat.config.AddLicenseHeaders.FALSE + "'", addLicenseHeaders18.equals(org.apache.rat.config.AddLicenseHeaders.FALSE));
        org.junit.Assert.assertNull(claimStatistic22);
        org.junit.Assert.assertTrue("'" + licenseFilter23 + "' != '" + org.apache.rat.license.LicenseSetFactory.LicenseFilter.all + "'", licenseFilter23.equals(org.apache.rat.license.LicenseSetFactory.LicenseFilter.all));
        org.junit.Assert.assertNotNull(outputStreamIOSupplier27);
        org.junit.Assert.assertNotNull(builder30);
        org.junit.Assert.assertNotNull(builder32);
        org.junit.Assert.assertNotNull(builder34);
        org.junit.Assert.assertNotNull(builder36);
        org.junit.Assert.assertEquals("'" + str37 + "' != '" + "6486879f-fc81-4b57-aec7-c4c77d540c30" + "'", str37, "6486879f-fc81-4b57-aec7-c4c77d540c30");
        org.junit.Assert.assertNull(filenameFilter41);
        org.junit.Assert.assertTrue("'" + format42 + "' != '" + org.apache.rat.configuration.Format.XML + "'", format42.equals(org.apache.rat.configuration.Format.XML));
        org.junit.Assert.assertNotNull(licenseReader43);
        org.junit.Assert.assertNotNull(iLicenseSet44);
        org.junit.Assert.assertNotNull(strArray50);
        org.junit.Assert.assertTrue("'" + boolean52 + "' != '" + true + "'", boolean52 == true);
        org.junit.Assert.assertTrue("'" + boolean54 + "' != '" + true + "'", boolean54 == true);
        org.junit.Assert.assertTrue("'" + boolean56 + "' != '" + true + "'", boolean56 == true);
        org.junit.Assert.assertNotNull(strSet58);
        org.junit.Assert.assertTrue("'" + boolean59 + "' != '" + false + "'", boolean59 == false);
        org.junit.Assert.assertNotNull(datum61);
        org.junit.Assert.assertEquals("'" + str62 + "' != '" + "Datum [ name ='http://org/apache/rat/meta-data#LicenseFamilyName',value ='GNU General Public License, version 1 ']" + "'", str62, "Datum [ name ='http://org/apache/rat/meta-data#LicenseFamilyName',value ='GNU General Public License, version 1 ']");
        org.junit.Assert.assertTrue("'" + boolean63 + "' != '" + false + "'", boolean63 == false);
        org.junit.Assert.assertTrue("'" + boolean65 + "' != '" + true + "'", boolean65 == true);
        org.junit.Assert.assertNotNull(strSet67);
        org.junit.Assert.assertTrue("'" + level68 + "' != '" + org.apache.rat.utils.Log.Level.OFF + "'", level68.equals(org.apache.rat.utils.Log.Level.OFF));
        org.junit.Assert.assertNotNull(strSet69);
    }

    @Test
    public void test12720() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest25.test12720");
        org.apache.rat.analysis.license.FullTextMatchingLicense fullTextMatchingLicense0 = new org.apache.rat.analysis.license.FullTextMatchingLicense();
        fullTextMatchingLicense0.setLicenseFamilyName("hi!");
        java.lang.String str3 = fullTextMatchingLicense0.getLicenseFamilyCategory();
        fullTextMatchingLicense0.setNotes("MANIFEST.MF");
        fullTextMatchingLicense0.setLicenseFamilyCategory("standard");
        org.apache.rat.license.ILicenseFamily iLicenseFamily8 = fullTextMatchingLicense0.getLicenseFamily();
        java.lang.String str9 = fullTextMatchingLicense0.getLicenseFamilyCategory();
        java.lang.String str10 = fullTextMatchingLicense0.getNotes();
        fullTextMatchingLicense0.setLicenseFamilyCategory("Modified BSD License");
        java.lang.String str13 = fullTextMatchingLicense0.getLicenseFamilyCategory();
        org.junit.Assert.assertNull(str3);
        org.junit.Assert.assertNotNull(iLicenseFamily8);
        org.junit.Assert.assertEquals("'" + str9 + "' != '" + "standard" + "'", str9, "standard");
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "MANIFEST.MF" + "'", str10, "MANIFEST.MF");
        org.junit.Assert.assertEquals("'" + str13 + "' != '" + "Modified BSD License" + "'", str13, "Modified BSD License");
    }

    @Test
    public void test12721() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest25.test12721");
        java.io.Writer writer0 = null;
        org.apache.rat.report.xml.writer.impl.base.XmlWriter xmlWriter1 = new org.apache.rat.report.xml.writer.impl.base.XmlWriter(writer0);
        org.apache.rat.report.claim.impl.xml.SimpleXmlClaimReporter simpleXmlClaimReporter2 = new org.apache.rat.report.claim.impl.xml.SimpleXmlClaimReporter((org.apache.rat.report.xml.writer.IXmlWriter) xmlWriter1);
        org.apache.rat.report.claim.impl.xml.SimpleXmlClaimReporter simpleXmlClaimReporter3 = new org.apache.rat.report.claim.impl.xml.SimpleXmlClaimReporter((org.apache.rat.report.xml.writer.IXmlWriter) xmlWriter1);
        org.apache.rat.report.claim.impl.xml.SimpleXmlClaimReporter simpleXmlClaimReporter4 = new org.apache.rat.report.claim.impl.xml.SimpleXmlClaimReporter((org.apache.rat.report.xml.writer.IXmlWriter) xmlWriter1);
        org.apache.rat.report.claim.impl.xml.SimpleXmlClaimReporter simpleXmlClaimReporter5 = new org.apache.rat.report.claim.impl.xml.SimpleXmlClaimReporter((org.apache.rat.report.xml.writer.IXmlWriter) xmlWriter1);
        org.apache.rat.report.claim.impl.xml.SimpleXmlClaimReporter simpleXmlClaimReporter6 = new org.apache.rat.report.claim.impl.xml.SimpleXmlClaimReporter((org.apache.rat.report.xml.writer.IXmlWriter) xmlWriter1);
        org.apache.rat.report.claim.impl.xml.SimpleXmlClaimReporter simpleXmlClaimReporter7 = new org.apache.rat.report.claim.impl.xml.SimpleXmlClaimReporter((org.apache.rat.report.xml.writer.IXmlWriter) xmlWriter1);
        org.apache.rat.report.claim.impl.xml.SimpleXmlClaimReporter simpleXmlClaimReporter8 = new org.apache.rat.report.claim.impl.xml.SimpleXmlClaimReporter((org.apache.rat.report.xml.writer.IXmlWriter) xmlWriter1);
        org.apache.rat.report.claim.impl.xml.SimpleXmlClaimReporter simpleXmlClaimReporter9 = new org.apache.rat.report.claim.impl.xml.SimpleXmlClaimReporter((org.apache.rat.report.xml.writer.IXmlWriter) xmlWriter1);
        org.apache.rat.report.claim.impl.xml.SimpleXmlClaimReporter simpleXmlClaimReporter10 = new org.apache.rat.report.claim.impl.xml.SimpleXmlClaimReporter((org.apache.rat.report.xml.writer.IXmlWriter) xmlWriter1);
        org.apache.rat.report.claim.impl.xml.SimpleXmlClaimReporter simpleXmlClaimReporter11 = new org.apache.rat.report.claim.impl.xml.SimpleXmlClaimReporter((org.apache.rat.report.xml.writer.IXmlWriter) xmlWriter1);
        org.apache.rat.report.claim.impl.xml.SimpleXmlClaimReporter simpleXmlClaimReporter12 = new org.apache.rat.report.claim.impl.xml.SimpleXmlClaimReporter((org.apache.rat.report.xml.writer.IXmlWriter) xmlWriter1);
        org.apache.rat.report.claim.impl.xml.SimpleXmlClaimReporter simpleXmlClaimReporter13 = new org.apache.rat.report.claim.impl.xml.SimpleXmlClaimReporter((org.apache.rat.report.xml.writer.IXmlWriter) xmlWriter1);
        org.apache.rat.report.claim.impl.xml.SimpleXmlClaimReporter simpleXmlClaimReporter14 = new org.apache.rat.report.claim.impl.xml.SimpleXmlClaimReporter((org.apache.rat.report.xml.writer.IXmlWriter) xmlWriter1);
        org.apache.rat.report.claim.impl.xml.SimpleXmlClaimReporter simpleXmlClaimReporter15 = new org.apache.rat.report.claim.impl.xml.SimpleXmlClaimReporter((org.apache.rat.report.xml.writer.IXmlWriter) xmlWriter1);
        org.apache.rat.report.claim.impl.xml.SimpleXmlClaimReporter simpleXmlClaimReporter16 = new org.apache.rat.report.claim.impl.xml.SimpleXmlClaimReporter((org.apache.rat.report.xml.writer.IXmlWriter) xmlWriter1);
        org.apache.rat.report.claim.impl.xml.SimpleXmlClaimReporter simpleXmlClaimReporter17 = new org.apache.rat.report.claim.impl.xml.SimpleXmlClaimReporter((org.apache.rat.report.xml.writer.IXmlWriter) xmlWriter1);
        // The following exception was thrown during execution in test generation
        try {
            simpleXmlClaimReporter17.endReport();
            org.junit.Assert.fail("Expected exception of type org.apache.rat.api.RatException; message: Cannot close last element");
        } catch (org.apache.rat.api.RatException e) {
            // Expected exception.
        }
    }

    @Test
    public void test12722() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest25.test12722");
        org.apache.rat.utils.DefaultLog defaultLog0 = org.apache.rat.utils.DefaultLog.INSTANCE;
        org.apache.rat.license.ILicense.Builder builder1 = org.apache.rat.license.ILicense.builder();
        org.apache.rat.license.ILicense.Builder builder3 = builder1.setLicenseFamilyCategory("");
        org.apache.rat.analysis.matchers.CopyrightMatcher copyrightMatcher7 = new org.apache.rat.analysis.matchers.CopyrightMatcher("", "GPL1 ", "hi!");
        org.apache.rat.analysis.IHeaderMatcher.State state8 = copyrightMatcher7.finalizeState();
        org.apache.rat.license.ILicense.Builder builder9 = builder3.setMatcher((org.apache.rat.analysis.IHeaderMatcher) copyrightMatcher7);
        org.apache.rat.license.ILicense.Builder builder11 = builder9.setLicenseFamilyCategory("");
        defaultLog0.error((java.lang.Object) builder11);
        org.apache.rat.analysis.matchers.CopyrightMatcher copyrightMatcher16 = new org.apache.rat.analysis.matchers.CopyrightMatcher("", "GPL1 ", "hi!");
        copyrightMatcher16.reset();
        org.apache.rat.license.ILicense.Builder builder18 = builder11.setMatcher((org.apache.rat.analysis.IHeaderMatcher) copyrightMatcher16);
        java.util.regex.Pattern pattern21 = null;
        org.apache.rat.analysis.matchers.SimpleRegexMatcher simpleRegexMatcher22 = new org.apache.rat.analysis.matchers.SimpleRegexMatcher("", pattern21);
        org.apache.rat.analysis.matchers.NotMatcher notMatcher23 = new org.apache.rat.analysis.matchers.NotMatcher("GNU General Public License, version 2", (org.apache.rat.analysis.IHeaderMatcher) simpleRegexMatcher22);
        org.apache.rat.license.ILicense.Builder builder24 = builder11.setMatcher((org.apache.rat.analysis.IHeaderMatcher) notMatcher23);
        org.apache.rat.license.ILicense.Builder builder26 = builder11.setLicenseFamilyCategory("ed42033c-bb2d-4a0c-b6fe-b912f4d3a137");
        org.apache.rat.license.ILicense.Builder builder28 = builder11.setLicenseFamilyCategory("MathcerRefBuilder: ");
        org.apache.rat.license.ILicense.Builder builder30 = builder28.setNotes("2a9c4fbb-1cac-42b2-a01d-6ca9b606c9d9");
        org.apache.rat.license.ILicense[] iLicenseArray31 = new org.apache.rat.license.ILicense[] {};
        java.util.TreeSet<org.apache.rat.license.ILicense> iLicenseSet32 = new java.util.TreeSet<org.apache.rat.license.ILicense>();
        boolean boolean33 = java.util.Collections.addAll((java.util.Collection<org.apache.rat.license.ILicense>) iLicenseSet32, iLicenseArray31);
        java.lang.String[] strArray46 = new java.lang.String[] { "GPL2 ", "GPL1 ", "notice", "http://org/apache/rat/meta-data#LicenseFamilyName", "notice", "GPL2 ", "http://org/apache/rat/meta-data#LicenseFamilyName", "", "GPL2 ", "", "GPL1 ", "hi!" };
        java.util.ArrayList<java.lang.String> strList47 = new java.util.ArrayList<java.lang.String>();
        boolean boolean48 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strList47, strArray46);
        org.apache.rat.license.LicenseSetFactory licenseSetFactory49 = new org.apache.rat.license.LicenseSetFactory((java.util.SortedSet<org.apache.rat.license.ILicense>) iLicenseSet32, (java.util.Collection<java.lang.String>) strList47);
        org.apache.rat.utils.ReportingSet<org.apache.rat.license.ILicense> iLicenseSet50 = new org.apache.rat.utils.ReportingSet<org.apache.rat.license.ILicense>((java.util.SortedSet<org.apache.rat.license.ILicense>) iLicenseSet32);
        java.util.Collection<java.lang.String> strCollection51 = null;
        org.apache.rat.license.LicenseSetFactory licenseSetFactory52 = new org.apache.rat.license.LicenseSetFactory((java.util.SortedSet<org.apache.rat.license.ILicense>) iLicenseSet32, strCollection51);
        org.apache.rat.utils.DefaultLog defaultLog53 = org.apache.rat.utils.DefaultLog.INSTANCE;
        org.apache.rat.license.ILicense.Builder builder54 = org.apache.rat.license.ILicense.builder();
        org.apache.rat.license.ILicense.Builder builder56 = builder54.setLicenseFamilyCategory("");
        org.apache.rat.analysis.matchers.CopyrightMatcher copyrightMatcher60 = new org.apache.rat.analysis.matchers.CopyrightMatcher("", "GPL1 ", "hi!");
        org.apache.rat.analysis.IHeaderMatcher.State state61 = copyrightMatcher60.finalizeState();
        org.apache.rat.license.ILicense.Builder builder62 = builder56.setMatcher((org.apache.rat.analysis.IHeaderMatcher) copyrightMatcher60);
        org.apache.rat.license.ILicense.Builder builder64 = builder62.setLicenseFamilyCategory("");
        defaultLog53.error((java.lang.Object) builder64);
        org.apache.rat.utils.Log.Level level66 = org.apache.rat.utils.Log.Level.INFO;
        defaultLog53.log(level66, "JAVA");
        org.apache.rat.license.LicenseSetFactory.LicenseFilter licenseFilter69 = org.apache.rat.license.LicenseSetFactory.LicenseFilter.approved;
        defaultLog53.info((java.lang.Object) licenseFilter69);
        java.util.SortedSet<org.apache.rat.license.ILicenseFamily> iLicenseFamilySet71 = licenseSetFactory52.getLicenseFamilies(licenseFilter69);
        // The following exception was thrown during execution in test generation
        try {
            org.apache.rat.license.ILicense iLicense72 = builder30.build(iLicenseFamilySet71);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: License family MathcerRefBuilder:  not found.");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(defaultLog0);
        org.junit.Assert.assertNotNull(builder1);
        org.junit.Assert.assertNotNull(builder3);
        org.junit.Assert.assertTrue("'" + state8 + "' != '" + org.apache.rat.analysis.IHeaderMatcher.State.f + "'", state8.equals(org.apache.rat.analysis.IHeaderMatcher.State.f));
        org.junit.Assert.assertNotNull(builder9);
        org.junit.Assert.assertNotNull(builder11);
        org.junit.Assert.assertNotNull(builder18);
        org.junit.Assert.assertNotNull(builder24);
        org.junit.Assert.assertNotNull(builder26);
        org.junit.Assert.assertNotNull(builder28);
        org.junit.Assert.assertNotNull(builder30);
        org.junit.Assert.assertNotNull(iLicenseArray31);
        org.junit.Assert.assertTrue("'" + boolean33 + "' != '" + false + "'", boolean33 == false);
        org.junit.Assert.assertNotNull(strArray46);
        org.junit.Assert.assertTrue("'" + boolean48 + "' != '" + true + "'", boolean48 == true);
        org.junit.Assert.assertNotNull(defaultLog53);
        org.junit.Assert.assertNotNull(builder54);
        org.junit.Assert.assertNotNull(builder56);
        org.junit.Assert.assertTrue("'" + state61 + "' != '" + org.apache.rat.analysis.IHeaderMatcher.State.f + "'", state61.equals(org.apache.rat.analysis.IHeaderMatcher.State.f));
        org.junit.Assert.assertNotNull(builder62);
        org.junit.Assert.assertNotNull(builder64);
        org.junit.Assert.assertTrue("'" + level66 + "' != '" + org.apache.rat.utils.Log.Level.INFO + "'", level66.equals(org.apache.rat.utils.Log.Level.INFO));
        org.junit.Assert.assertTrue("'" + licenseFilter69 + "' != '" + org.apache.rat.license.LicenseSetFactory.LicenseFilter.approved + "'", licenseFilter69.equals(org.apache.rat.license.LicenseSetFactory.LicenseFilter.approved));
        org.junit.Assert.assertNotNull(iLicenseFamilySet71);
    }

    @Test
    public void test12723() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest25.test12723");
        java.io.Writer writer0 = null;
        org.apache.rat.report.xml.writer.impl.base.XmlWriter xmlWriter1 = new org.apache.rat.report.xml.writer.impl.base.XmlWriter(writer0);
        org.apache.rat.report.claim.impl.xml.SimpleXmlClaimReporter simpleXmlClaimReporter2 = new org.apache.rat.report.claim.impl.xml.SimpleXmlClaimReporter((org.apache.rat.report.xml.writer.IXmlWriter) xmlWriter1);
        org.apache.rat.report.claim.impl.xml.SimpleXmlClaimReporter simpleXmlClaimReporter3 = new org.apache.rat.report.claim.impl.xml.SimpleXmlClaimReporter((org.apache.rat.report.xml.writer.IXmlWriter) xmlWriter1);
        org.apache.rat.report.claim.impl.xml.SimpleXmlClaimReporter simpleXmlClaimReporter4 = new org.apache.rat.report.claim.impl.xml.SimpleXmlClaimReporter((org.apache.rat.report.xml.writer.IXmlWriter) xmlWriter1);
        org.apache.rat.report.claim.impl.xml.SimpleXmlClaimReporter simpleXmlClaimReporter5 = new org.apache.rat.report.claim.impl.xml.SimpleXmlClaimReporter((org.apache.rat.report.xml.writer.IXmlWriter) xmlWriter1);
        org.apache.rat.report.claim.impl.xml.SimpleXmlClaimReporter simpleXmlClaimReporter6 = new org.apache.rat.report.claim.impl.xml.SimpleXmlClaimReporter((org.apache.rat.report.xml.writer.IXmlWriter) xmlWriter1);
        org.apache.rat.report.claim.impl.xml.SimpleXmlClaimReporter simpleXmlClaimReporter7 = new org.apache.rat.report.claim.impl.xml.SimpleXmlClaimReporter((org.apache.rat.report.xml.writer.IXmlWriter) xmlWriter1);
        org.apache.rat.report.claim.impl.xml.SimpleXmlClaimReporter simpleXmlClaimReporter8 = new org.apache.rat.report.claim.impl.xml.SimpleXmlClaimReporter((org.apache.rat.report.xml.writer.IXmlWriter) xmlWriter1);
        org.apache.rat.report.claim.impl.xml.SimpleXmlClaimReporter simpleXmlClaimReporter9 = new org.apache.rat.report.claim.impl.xml.SimpleXmlClaimReporter((org.apache.rat.report.xml.writer.IXmlWriter) xmlWriter1);
        org.apache.rat.report.claim.impl.xml.SimpleXmlClaimReporter simpleXmlClaimReporter10 = new org.apache.rat.report.claim.impl.xml.SimpleXmlClaimReporter((org.apache.rat.report.xml.writer.IXmlWriter) xmlWriter1);
        org.apache.rat.report.claim.impl.xml.SimpleXmlClaimReporter simpleXmlClaimReporter11 = new org.apache.rat.report.claim.impl.xml.SimpleXmlClaimReporter((org.apache.rat.report.xml.writer.IXmlWriter) xmlWriter1);
        org.apache.rat.report.claim.impl.xml.SimpleXmlClaimReporter simpleXmlClaimReporter12 = new org.apache.rat.report.claim.impl.xml.SimpleXmlClaimReporter((org.apache.rat.report.xml.writer.IXmlWriter) xmlWriter1);
        // The following exception was thrown during execution in test generation
        try {
            org.apache.rat.report.xml.writer.IXmlWriter iXmlWriter15 = xmlWriter1.attribute((java.lang.CharSequence) "MathcerRefBuilder: TextBuilder: SpdxBuilder: null", (java.lang.CharSequence) "8128040D-CA94-4F3F-9DEB-6252ACD449BD");
            org.junit.Assert.fail("Expected exception of type org.apache.rat.report.xml.writer.OperationNotAllowedException; message: Close called before an element has been opened.");
        } catch (org.apache.rat.report.xml.writer.OperationNotAllowedException e) {
            // Expected exception.
        }
    }

    @Test
    public void test12724() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest25.test12724");
        org.apache.rat.document.IDocumentAnalyser[] iDocumentAnalyserArray0 = new org.apache.rat.document.IDocumentAnalyser[] {};
        org.apache.rat.document.impl.util.DocumentAnalyserMultiplexer documentAnalyserMultiplexer1 = new org.apache.rat.document.impl.util.DocumentAnalyserMultiplexer(iDocumentAnalyserArray0);
        org.apache.rat.document.impl.util.DocumentAnalyserMultiplexer documentAnalyserMultiplexer2 = new org.apache.rat.document.impl.util.DocumentAnalyserMultiplexer(iDocumentAnalyserArray0);
        org.apache.rat.document.impl.util.DocumentAnalyserMultiplexer documentAnalyserMultiplexer3 = new org.apache.rat.document.impl.util.DocumentAnalyserMultiplexer(iDocumentAnalyserArray0);
        org.apache.rat.api.Document document4 = null;
        documentAnalyserMultiplexer3.analyse(document4);
        org.apache.rat.api.Document document6 = null;
        documentAnalyserMultiplexer3.analyse(document6);
        org.junit.Assert.assertNotNull(iDocumentAnalyserArray0);
    }

    @Test
    public void test12725() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest25.test12725");
        java.util.regex.Pattern pattern1 = null;
        org.apache.rat.analysis.matchers.SimpleRegexMatcher simpleRegexMatcher2 = new org.apache.rat.analysis.matchers.SimpleRegexMatcher("8128040d-ca94-4f3f-9deb-6252acd449bd", pattern1);
        org.apache.rat.analysis.IHeaderMatcher.State state3 = simpleRegexMatcher2.currentState();
        org.apache.rat.analysis.IHeaderMatcher.State state4 = simpleRegexMatcher2.currentState();
        java.lang.String str5 = state4.toString();
        org.junit.Assert.assertTrue("'" + state3 + "' != '" + org.apache.rat.analysis.IHeaderMatcher.State.i + "'", state3.equals(org.apache.rat.analysis.IHeaderMatcher.State.i));
        org.junit.Assert.assertTrue("'" + state4 + "' != '" + org.apache.rat.analysis.IHeaderMatcher.State.i + "'", state4.equals(org.apache.rat.analysis.IHeaderMatcher.State.i));
        org.junit.Assert.assertEquals("'" + str5 + "' != '" + "i indeterminent" + "'", str5, "i indeterminent");
    }

    @Test
    public void test12726() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest25.test12726");
        org.apache.rat.configuration.builders.TextBuilder textBuilder0 = org.apache.rat.analysis.IHeaderMatcher.Builder.text();
        org.apache.rat.configuration.builders.TextBuilder textBuilder2 = textBuilder0.setText("");
        java.lang.String str3 = textBuilder2.toString();
        java.lang.String str4 = textBuilder2.toString();
        org.apache.rat.configuration.builders.TextBuilder textBuilder6 = textBuilder2.setText("8f0ee536-38ae-476a-a728-de95e24c13c3");
        org.apache.rat.analysis.IHeaderMatcher iHeaderMatcher7 = textBuilder2.build();
        org.junit.Assert.assertNotNull(textBuilder0);
        org.junit.Assert.assertNotNull(textBuilder2);
        org.junit.Assert.assertEquals("'" + str3 + "' != '" + "TextBuilder: " + "'", str3, "TextBuilder: ");
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "TextBuilder: " + "'", str4, "TextBuilder: ");
        org.junit.Assert.assertNotNull(textBuilder6);
        org.junit.Assert.assertNotNull(iHeaderMatcher7);
    }

    @Test
    public void test12727() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest25.test12727");
        org.apache.rat.configuration.builders.SpdxBuilder spdxBuilder0 = org.apache.rat.analysis.IHeaderMatcher.Builder.spdx();
        java.lang.String str1 = spdxBuilder0.toString();
        org.apache.rat.configuration.builders.SpdxBuilder spdxBuilder3 = spdxBuilder0.setName("ef7a8b13-64c3-4510-bb0c-dbf208e1e73f");
        org.apache.rat.analysis.IHeaderMatcher iHeaderMatcher4 = spdxBuilder0.build();
        org.apache.rat.analysis.IHeaderMatcher iHeaderMatcher5 = spdxBuilder0.build();
        org.apache.rat.analysis.IHeaderMatcher iHeaderMatcher6 = spdxBuilder0.build();
        java.lang.String str7 = spdxBuilder0.toString();
        org.apache.rat.configuration.builders.SpdxBuilder spdxBuilder9 = spdxBuilder0.setName("null f1fc8dc8-990d-4a2d-9540-4e9ece3bd92c");
        org.apache.rat.analysis.IHeaderMatcher iHeaderMatcher10 = spdxBuilder9.build();
        java.lang.String str11 = spdxBuilder9.toString();
        org.junit.Assert.assertNotNull(spdxBuilder0);
        org.junit.Assert.assertEquals("'" + str1 + "' != '" + "SpdxBuilder: null" + "'", str1, "SpdxBuilder: null");
        org.junit.Assert.assertNotNull(spdxBuilder3);
        org.junit.Assert.assertNotNull(iHeaderMatcher4);
        org.junit.Assert.assertNotNull(iHeaderMatcher5);
        org.junit.Assert.assertNotNull(iHeaderMatcher6);
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "SpdxBuilder: ef7a8b13-64c3-4510-bb0c-dbf208e1e73f" + "'", str7, "SpdxBuilder: ef7a8b13-64c3-4510-bb0c-dbf208e1e73f");
        org.junit.Assert.assertNotNull(spdxBuilder9);
        org.junit.Assert.assertNotNull(iHeaderMatcher10);
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "SpdxBuilder: null f1fc8dc8-990d-4a2d-9540-4e9ece3bd92c" + "'", str11, "SpdxBuilder: null f1fc8dc8-990d-4a2d-9540-4e9ece3bd92c");
    }

    @Test
    public void test12728() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest25.test12728");
        org.apache.rat.analysis.matchers.FullTextMatcher fullTextMatcher2 = new org.apache.rat.analysis.matchers.FullTextMatcher("TMF  ", "Apache License Version 2.0");
        org.apache.rat.analysis.IHeaderMatcher.State state3 = fullTextMatcher2.finalizeState();
        fullTextMatcher2.reset();
        fullTextMatcher2.reset();
        org.apache.rat.analysis.IHeaderMatcher.State state6 = fullTextMatcher2.currentState();
        boolean boolean8 = fullTextMatcher2.doMatch("EF7A8B13-64C3-4510-BB0C-DBF208E1E73F");
        boolean boolean10 = fullTextMatcher2.doMatch("Modified BSD License");
        org.apache.rat.analysis.matchers.NotMatcher notMatcher11 = new org.apache.rat.analysis.matchers.NotMatcher((org.apache.rat.analysis.IHeaderMatcher) fullTextMatcher2);
        org.apache.rat.analysis.IHeaderMatcher.State state12 = notMatcher11.finalizeState();
        org.junit.Assert.assertTrue("'" + state3 + "' != '" + org.apache.rat.analysis.IHeaderMatcher.State.f + "'", state3.equals(org.apache.rat.analysis.IHeaderMatcher.State.f));
        org.junit.Assert.assertTrue("'" + state6 + "' != '" + org.apache.rat.analysis.IHeaderMatcher.State.i + "'", state6.equals(org.apache.rat.analysis.IHeaderMatcher.State.i));
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertTrue("'" + state12 + "' != '" + org.apache.rat.analysis.IHeaderMatcher.State.t + "'", state12.equals(org.apache.rat.analysis.IHeaderMatcher.State.t));
    }

    @Test
    public void test12729() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest25.test12729");
        java.util.regex.Pattern pattern1 = null;
        org.apache.rat.analysis.matchers.SimpleRegexMatcher simpleRegexMatcher2 = new org.apache.rat.analysis.matchers.SimpleRegexMatcher("", pattern1);
        simpleRegexMatcher2.reset();
        org.apache.rat.analysis.IHeaderMatcher.State state4 = simpleRegexMatcher2.finalizeState();
        java.lang.String str5 = simpleRegexMatcher2.toString();
        org.apache.rat.analysis.IHeaderMatcher.State state6 = simpleRegexMatcher2.currentState();
        simpleRegexMatcher2.reset();
        org.apache.rat.analysis.matchers.NotMatcher notMatcher8 = new org.apache.rat.analysis.matchers.NotMatcher((org.apache.rat.analysis.IHeaderMatcher) simpleRegexMatcher2);
        // The following exception was thrown during execution in test generation
        try {
            boolean boolean10 = simpleRegexMatcher2.doMatch("2ed68e58-7824-4cb9-a7a0-1fdc42449c68");
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + state4 + "' != '" + org.apache.rat.analysis.IHeaderMatcher.State.f + "'", state4.equals(org.apache.rat.analysis.IHeaderMatcher.State.f));
// flaky:         org.junit.Assert.assertEquals("'" + str5 + "' != '" + "ec2ddc8f-3b9a-46e9-b326-8ffb0646167f" + "'", str5, "ec2ddc8f-3b9a-46e9-b326-8ffb0646167f");
        org.junit.Assert.assertTrue("'" + state6 + "' != '" + org.apache.rat.analysis.IHeaderMatcher.State.f + "'", state6.equals(org.apache.rat.analysis.IHeaderMatcher.State.f));
    }

    @Test
    public void test12730() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest25.test12730");
        java.lang.String[] strArray5 = new java.lang.String[] { "http://org/apache/rat/meta-data#LicenseFamilyCategory", "Datum [ name ='http://org/apache/rat/meta-data#LicenseFamilyCategory',value ='GPL1  ']", "MANIFEST.MF", "AllBuilder:", "The MIT License" };
        org.apache.rat.utils.ReportingSet<java.lang.String> strSet6 = new org.apache.rat.utils.ReportingSet<java.lang.String>();
        boolean boolean7 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strSet6, strArray5);
        boolean boolean9 = strSet6.addIfNotPresent("http://org/apache/rat/meta-data#LicenseFamilyName");
        java.util.Iterator<java.lang.String> strItor10 = strSet6.iterator();
        java.util.Comparator<? super java.lang.String> wildcardComparator11 = strSet6.comparator();
        java.util.stream.Stream<java.lang.String> strStream12 = strSet6.stream();
        org.apache.rat.utils.ReportingSet<java.lang.String> strSet14 = strSet6.tailSet("6620e9ee-d651-4c18-8162-edad6d18368e");
        java.lang.String str15 = strSet6.last();
        org.junit.Assert.assertNotNull(strArray5);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + true + "'", boolean7 == true);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + true + "'", boolean9 == true);
        org.junit.Assert.assertNotNull(strItor10);
        org.junit.Assert.assertNull(wildcardComparator11);
        org.junit.Assert.assertNotNull(strStream12);
        org.junit.Assert.assertNotNull(strSet14);
        org.junit.Assert.assertEquals("'" + str15 + "' != '" + "http://org/apache/rat/meta-data#LicenseFamilyName" + "'", str15, "http://org/apache/rat/meta-data#LicenseFamilyName");
    }

    @Test
    public void test12731() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest25.test12731");
        org.apache.rat.utils.DefaultLog defaultLog1 = org.apache.rat.utils.DefaultLog.INSTANCE;
        org.apache.rat.license.ILicense.Builder builder2 = org.apache.rat.license.ILicense.builder();
        org.apache.rat.license.ILicense.Builder builder4 = builder2.setLicenseFamilyCategory("");
        org.apache.rat.analysis.matchers.CopyrightMatcher copyrightMatcher8 = new org.apache.rat.analysis.matchers.CopyrightMatcher("", "GPL1 ", "hi!");
        org.apache.rat.analysis.IHeaderMatcher.State state9 = copyrightMatcher8.finalizeState();
        org.apache.rat.license.ILicense.Builder builder10 = builder4.setMatcher((org.apache.rat.analysis.IHeaderMatcher) copyrightMatcher8);
        org.apache.rat.license.ILicense.Builder builder12 = builder10.setLicenseFamilyCategory("");
        defaultLog1.error((java.lang.Object) builder12);
        org.apache.rat.analysis.matchers.CopyrightMatcher copyrightMatcher17 = new org.apache.rat.analysis.matchers.CopyrightMatcher("", "GPL1 ", "hi!");
        copyrightMatcher17.reset();
        org.apache.rat.license.ILicense.Builder builder19 = builder12.setMatcher((org.apache.rat.analysis.IHeaderMatcher) copyrightMatcher17);
        org.apache.rat.analysis.matchers.NotMatcher notMatcher20 = new org.apache.rat.analysis.matchers.NotMatcher("AnyBuilder:\nAllBuilder:", (org.apache.rat.analysis.IHeaderMatcher) copyrightMatcher17);
        org.apache.rat.analysis.IHeaderMatcher.State state21 = notMatcher20.currentState();
        java.lang.String str22 = notMatcher20.getId();
        org.apache.rat.analysis.IHeaderMatcher.State state23 = notMatcher20.finalizeState();
        org.junit.Assert.assertNotNull(defaultLog1);
        org.junit.Assert.assertNotNull(builder2);
        org.junit.Assert.assertNotNull(builder4);
        org.junit.Assert.assertTrue("'" + state9 + "' != '" + org.apache.rat.analysis.IHeaderMatcher.State.f + "'", state9.equals(org.apache.rat.analysis.IHeaderMatcher.State.f));
        org.junit.Assert.assertNotNull(builder10);
        org.junit.Assert.assertNotNull(builder12);
        org.junit.Assert.assertNotNull(builder19);
        org.junit.Assert.assertTrue("'" + state21 + "' != '" + org.apache.rat.analysis.IHeaderMatcher.State.i + "'", state21.equals(org.apache.rat.analysis.IHeaderMatcher.State.i));
        org.junit.Assert.assertEquals("'" + str22 + "' != '" + "AnyBuilder:\nAllBuilder:" + "'", str22, "AnyBuilder:\nAllBuilder:");
        org.junit.Assert.assertTrue("'" + state23 + "' != '" + org.apache.rat.analysis.IHeaderMatcher.State.t + "'", state23.equals(org.apache.rat.analysis.IHeaderMatcher.State.t));
    }

    @Test
    public void test12732() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest25.test12732");
        java.util.regex.Pattern pattern2 = null;
        org.apache.rat.analysis.matchers.SimpleRegexMatcher simpleRegexMatcher3 = new org.apache.rat.analysis.matchers.SimpleRegexMatcher("", pattern2);
        org.apache.rat.analysis.matchers.NotMatcher notMatcher4 = new org.apache.rat.analysis.matchers.NotMatcher("GNU General Public License, version 2", (org.apache.rat.analysis.IHeaderMatcher) simpleRegexMatcher3);
        org.apache.rat.analysis.IHeaderMatcher.State state5 = simpleRegexMatcher3.currentState();
        simpleRegexMatcher3.reset();
        // The following exception was thrown during execution in test generation
        try {
            boolean boolean8 = simpleRegexMatcher3.doMatch("");
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + state5 + "' != '" + org.apache.rat.analysis.IHeaderMatcher.State.i + "'", state5.equals(org.apache.rat.analysis.IHeaderMatcher.State.i));
    }

    @Test
    public void test12733() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest25.test12733");
        org.apache.rat.document.ToNameTransformer toNameTransformer0 = new org.apache.rat.document.ToNameTransformer();
        org.apache.rat.report.claim.ClaimStatistic claimStatistic1 = new org.apache.rat.report.claim.ClaimStatistic();
        claimStatistic1.setNumApproved((int) (short) 10);
        claimStatistic1.setNumUnknown(30);
        java.lang.Object obj6 = toNameTransformer0.transform((java.lang.Object) claimStatistic1);
        org.apache.rat.license.ILicenseFamily[] iLicenseFamilyArray7 = new org.apache.rat.license.ILicenseFamily[] {};
        java.util.ArrayList<org.apache.rat.license.ILicenseFamily> iLicenseFamilyList8 = new java.util.ArrayList<org.apache.rat.license.ILicenseFamily>();
        boolean boolean9 = java.util.Collections.addAll((java.util.Collection<org.apache.rat.license.ILicenseFamily>) iLicenseFamilyList8, iLicenseFamilyArray7);
        org.apache.rat.policy.DefaultPolicy defaultPolicy10 = new org.apache.rat.policy.DefaultPolicy((java.util.Collection<org.apache.rat.license.ILicenseFamily>) iLicenseFamilyList8);
        org.apache.rat.api.Document document11 = null;
        defaultPolicy10.analyse(document11);
        org.apache.rat.api.Document document13 = null;
        defaultPolicy10.analyse(document13);
        org.apache.rat.api.Document document15 = null;
        defaultPolicy10.analyse(document15);
        java.lang.Object obj17 = toNameTransformer0.transform((java.lang.Object) defaultPolicy10);
        org.apache.rat.report.claim.ClaimStatistic claimStatistic18 = new org.apache.rat.report.claim.ClaimStatistic();
        claimStatistic18.setNumApproved(10);
        java.util.Map<java.lang.String, java.lang.Integer> strMap21 = claimStatistic18.getLicenseFileNameMap();
        java.lang.Object obj22 = toNameTransformer0.transform((java.lang.Object) claimStatistic18);
        int int23 = claimStatistic18.getNumUnApproved();
        org.junit.Assert.assertNull(obj6);
        org.junit.Assert.assertNotNull(iLicenseFamilyArray7);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertNull(obj17);
        org.junit.Assert.assertNull(strMap21);
        org.junit.Assert.assertNull(obj22);
        org.junit.Assert.assertTrue("'" + int23 + "' != '" + 0 + "'", int23 == 0);
    }

    @Test
    public void test12734() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest25.test12734");
        org.apache.rat.api.MetaData.Datum datum2 = new org.apache.rat.api.MetaData.Datum("E5B7B7D630DE49728C78A5E3E85D54E0", "bb19fbac-b846-4793-a7d7-77a7e009c631");
        java.lang.String str3 = datum2.getValue();
        org.junit.Assert.assertEquals("'" + str3 + "' != '" + "bb19fbac-b846-4793-a7d7-77a7e009c631" + "'", str3, "bb19fbac-b846-4793-a7d7-77a7e009c631");
    }

    @Test
    public void test12735() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest25.test12735");
        org.apache.rat.configuration.builders.RegexBuilder regexBuilder0 = new org.apache.rat.configuration.builders.RegexBuilder();
        java.lang.String str1 = regexBuilder0.toString();
        java.lang.String str2 = regexBuilder0.toString();
        org.apache.rat.configuration.builders.RegexBuilder regexBuilder4 = regexBuilder0.setExpr("89662180-a89f-497b-9301-227d494d2bae");
        java.lang.String str5 = regexBuilder4.toString();
        org.apache.rat.configuration.builders.RegexBuilder regexBuilder7 = regexBuilder4.setExpr("MathcerRefBuilder: Datum [ name ='http://org/apache/rat/meta-data#LicenseFamilyName',value ='Academic Free License, Version 2.1 ']");
        java.lang.String str8 = regexBuilder4.toString();
        org.junit.Assert.assertEquals("'" + str1 + "' != '" + "RegexBuilder: null" + "'", str1, "RegexBuilder: null");
        org.junit.Assert.assertEquals("'" + str2 + "' != '" + "RegexBuilder: null" + "'", str2, "RegexBuilder: null");
        org.junit.Assert.assertNotNull(regexBuilder4);
        org.junit.Assert.assertEquals("'" + str5 + "' != '" + "RegexBuilder: 89662180-a89f-497b-9301-227d494d2bae" + "'", str5, "RegexBuilder: 89662180-a89f-497b-9301-227d494d2bae");
        org.junit.Assert.assertNotNull(regexBuilder7);
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "RegexBuilder: MathcerRefBuilder: Datum [ name ='http://org/apache/rat/meta-data#LicenseFamilyName',value ='Academic Free License, Version 2.1 ']" + "'", str8, "RegexBuilder: MathcerRefBuilder: Datum [ name ='http://org/apache/rat/meta-data#LicenseFamilyName',value ='Academic Free License, Version 2.1 ']");
    }

    @Test
    public void test12736() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest25.test12736");
        org.apache.rat.analysis.license.FullTextMatchingLicense fullTextMatchingLicense0 = new org.apache.rat.analysis.license.FullTextMatchingLicense();
        fullTextMatchingLicense0.setLicenseFamilyName("hi!");
        java.lang.String str3 = fullTextMatchingLicense0.getLicenseFamilyCategory();
        java.lang.String str4 = fullTextMatchingLicense0.getLicenseFamilyCategory();
        java.lang.String str5 = fullTextMatchingLicense0.getNotes();
        java.lang.String str6 = fullTextMatchingLicense0.getLicenseFamilyCategory();
        fullTextMatchingLicense0.setNotes("7d01b1b3-e7b9-4f85-b3dd-e0334dea8844");
        java.lang.String str9 = fullTextMatchingLicense0.getNotes();
        java.lang.String str10 = fullTextMatchingLicense0.getLicenseFamilyName();
        // The following exception was thrown during execution in test generation
        try {
            org.apache.rat.license.ILicenseFamily iLicenseFamily11 = fullTextMatchingLicense0.getLicenseFamily();
            org.junit.Assert.fail("Expected exception of type org.apache.rat.ConfigurationException; message: LicenseFamily Category must be specified");
        } catch (org.apache.rat.ConfigurationException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNull(str3);
        org.junit.Assert.assertNull(str4);
        org.junit.Assert.assertNull(str5);
        org.junit.Assert.assertNull(str6);
        org.junit.Assert.assertEquals("'" + str9 + "' != '" + "7d01b1b3-e7b9-4f85-b3dd-e0334dea8844" + "'", str9, "7d01b1b3-e7b9-4f85-b3dd-e0334dea8844");
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "hi!" + "'", str10, "hi!");
    }

    @Test
    public void test12737() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest25.test12737");
        java.io.Writer writer0 = null;
        org.apache.rat.report.xml.writer.impl.base.XmlWriter xmlWriter1 = new org.apache.rat.report.xml.writer.impl.base.XmlWriter(writer0);
        org.apache.rat.report.claim.impl.xml.SimpleXmlClaimReporter simpleXmlClaimReporter2 = new org.apache.rat.report.claim.impl.xml.SimpleXmlClaimReporter((org.apache.rat.report.xml.writer.IXmlWriter) xmlWriter1);
        org.apache.rat.report.claim.impl.xml.SimpleXmlClaimReporter simpleXmlClaimReporter3 = new org.apache.rat.report.claim.impl.xml.SimpleXmlClaimReporter((org.apache.rat.report.xml.writer.IXmlWriter) xmlWriter1);
        org.apache.rat.report.claim.impl.xml.SimpleXmlClaimReporter simpleXmlClaimReporter4 = new org.apache.rat.report.claim.impl.xml.SimpleXmlClaimReporter((org.apache.rat.report.xml.writer.IXmlWriter) xmlWriter1);
        org.apache.rat.report.claim.impl.xml.SimpleXmlClaimReporter simpleXmlClaimReporter5 = new org.apache.rat.report.claim.impl.xml.SimpleXmlClaimReporter((org.apache.rat.report.xml.writer.IXmlWriter) xmlWriter1);
        org.apache.rat.report.claim.impl.xml.SimpleXmlClaimReporter simpleXmlClaimReporter6 = new org.apache.rat.report.claim.impl.xml.SimpleXmlClaimReporter((org.apache.rat.report.xml.writer.IXmlWriter) xmlWriter1);
        org.apache.rat.report.claim.impl.xml.SimpleXmlClaimReporter simpleXmlClaimReporter7 = new org.apache.rat.report.claim.impl.xml.SimpleXmlClaimReporter((org.apache.rat.report.xml.writer.IXmlWriter) xmlWriter1);
        org.apache.rat.report.claim.ClaimStatistic claimStatistic8 = new org.apache.rat.report.claim.ClaimStatistic();
        claimStatistic8.setNumUnApproved((-1));
        java.util.Map<java.lang.String, java.lang.Integer> strMap11 = claimStatistic8.getDocumentCategoryMap();
        org.apache.rat.utils.Log log12 = null;
        org.apache.rat.ReportConfiguration reportConfiguration13 = new org.apache.rat.ReportConfiguration(log12);
        org.apache.rat.report.claim.ClaimStatistic claimStatistic14 = org.apache.rat.Reporter.report(reportConfiguration13);
        org.apache.rat.report.IReportable iReportable15 = null;
        reportConfiguration13.setReportable(iReportable15);
        org.apache.rat.utils.Log log17 = null;
        org.apache.rat.ReportConfiguration reportConfiguration18 = new org.apache.rat.ReportConfiguration(log17);
        java.io.FilenameFilter filenameFilter19 = reportConfiguration18.getInputFileFilter();
        org.apache.rat.license.LicenseSetFactory.LicenseFilter licenseFilter20 = org.apache.rat.license.LicenseSetFactory.LicenseFilter.all;
        java.util.SortedSet<org.apache.rat.license.ILicense> iLicenseSet21 = reportConfiguration18.getLicenses(licenseFilter20);
        org.apache.rat.config.AddLicenseHeaders addLicenseHeaders22 = org.apache.rat.config.AddLicenseHeaders.FALSE;
        reportConfiguration18.setAddLicenseHeaders(addLicenseHeaders22);
        org.apache.rat.utils.Log log24 = null;
        org.apache.rat.ReportConfiguration reportConfiguration25 = new org.apache.rat.ReportConfiguration(log24);
        org.apache.rat.report.claim.ClaimStatistic claimStatistic26 = org.apache.rat.Reporter.report(reportConfiguration25);
        org.apache.rat.license.LicenseSetFactory.LicenseFilter licenseFilter27 = org.apache.rat.license.LicenseSetFactory.LicenseFilter.all;
        org.apache.rat.Reporter.listLicenses(reportConfiguration25, licenseFilter27);
        org.apache.rat.Reporter.listLicenses(reportConfiguration18, licenseFilter27);
        org.apache.rat.utils.Log log30 = null;
        org.apache.rat.ReportConfiguration reportConfiguration31 = new org.apache.rat.ReportConfiguration(log30);
        java.io.FilenameFilter filenameFilter32 = reportConfiguration31.getInputFileFilter();
        org.apache.rat.license.LicenseSetFactory.LicenseFilter licenseFilter33 = org.apache.rat.license.LicenseSetFactory.LicenseFilter.all;
        java.util.SortedSet<org.apache.rat.license.ILicense> iLicenseSet34 = reportConfiguration31.getLicenses(licenseFilter33);
        org.apache.rat.config.AddLicenseHeaders addLicenseHeaders35 = org.apache.rat.config.AddLicenseHeaders.FALSE;
        reportConfiguration31.setAddLicenseHeaders(addLicenseHeaders35);
        org.apache.rat.utils.Log log37 = null;
        org.apache.rat.ReportConfiguration reportConfiguration38 = new org.apache.rat.ReportConfiguration(log37);
        org.apache.rat.report.claim.ClaimStatistic claimStatistic39 = org.apache.rat.Reporter.report(reportConfiguration38);
        org.apache.rat.license.LicenseSetFactory.LicenseFilter licenseFilter40 = org.apache.rat.license.LicenseSetFactory.LicenseFilter.all;
        org.apache.rat.Reporter.listLicenses(reportConfiguration38, licenseFilter40);
        org.apache.rat.Reporter.listLicenses(reportConfiguration31, licenseFilter40);
        org.apache.rat.Reporter.listLicenses(reportConfiguration18, licenseFilter40);
        org.apache.rat.utils.Log log44 = null;
        org.apache.rat.ReportConfiguration reportConfiguration45 = new org.apache.rat.ReportConfiguration(log44);
        org.apache.commons.io.function.IOSupplier<java.io.OutputStream> outputStreamIOSupplier46 = reportConfiguration45.getOutput();
        reportConfiguration18.setOut(outputStreamIOSupplier46);
        org.apache.rat.utils.Log log48 = null;
        org.apache.rat.ReportConfiguration reportConfiguration49 = new org.apache.rat.ReportConfiguration(log48);
        org.apache.rat.report.claim.ClaimStatistic claimStatistic50 = org.apache.rat.Reporter.report(reportConfiguration49);
        org.apache.rat.utils.Log log51 = null;
        org.apache.rat.ReportConfiguration reportConfiguration52 = new org.apache.rat.ReportConfiguration(log51);
        org.apache.rat.report.claim.ClaimStatistic claimStatistic53 = org.apache.rat.Reporter.report(reportConfiguration52);
        org.apache.rat.utils.ReportingSet.Options options54 = org.apache.rat.utils.ReportingSet.Options.OVERWRITE;
        reportConfiguration52.licenseDuplicateOption(options54);
        reportConfiguration49.familyDuplicateOption(options54);
        reportConfiguration18.licenseDuplicateOption(options54);
        reportConfiguration13.familyDuplicateOption(options54);
        org.apache.rat.config.AddLicenseHeaders addLicenseHeaders59 = org.apache.rat.config.AddLicenseHeaders.FORCED;
        reportConfiguration13.setAddLicenseHeaders(addLicenseHeaders59);
        boolean boolean61 = reportConfiguration13.isAddingLicensesForced();
        org.apache.commons.io.filefilter.IOFileFilter iOFileFilter62 = reportConfiguration13.getDirectoryFilter();
        // The following exception was thrown during execution in test generation
        try {
            org.apache.rat.report.RatReport ratReport63 = org.apache.rat.report.xml.XmlReportFactory.createStandardReport((org.apache.rat.report.xml.writer.IXmlWriter) xmlWriter1, claimStatistic8, reportConfiguration13);
            org.junit.Assert.fail("Expected exception of type org.apache.rat.ConfigurationException; message: At least one license must be defined");
        } catch (org.apache.rat.ConfigurationException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNull(strMap11);
        org.junit.Assert.assertNull(claimStatistic14);
        org.junit.Assert.assertNull(filenameFilter19);
        org.junit.Assert.assertTrue("'" + licenseFilter20 + "' != '" + org.apache.rat.license.LicenseSetFactory.LicenseFilter.all + "'", licenseFilter20.equals(org.apache.rat.license.LicenseSetFactory.LicenseFilter.all));
        org.junit.Assert.assertNotNull(iLicenseSet21);
        org.junit.Assert.assertTrue("'" + addLicenseHeaders22 + "' != '" + org.apache.rat.config.AddLicenseHeaders.FALSE + "'", addLicenseHeaders22.equals(org.apache.rat.config.AddLicenseHeaders.FALSE));
        org.junit.Assert.assertNull(claimStatistic26);
        org.junit.Assert.assertTrue("'" + licenseFilter27 + "' != '" + org.apache.rat.license.LicenseSetFactory.LicenseFilter.all + "'", licenseFilter27.equals(org.apache.rat.license.LicenseSetFactory.LicenseFilter.all));
        org.junit.Assert.assertNull(filenameFilter32);
        org.junit.Assert.assertTrue("'" + licenseFilter33 + "' != '" + org.apache.rat.license.LicenseSetFactory.LicenseFilter.all + "'", licenseFilter33.equals(org.apache.rat.license.LicenseSetFactory.LicenseFilter.all));
        org.junit.Assert.assertNotNull(iLicenseSet34);
        org.junit.Assert.assertTrue("'" + addLicenseHeaders35 + "' != '" + org.apache.rat.config.AddLicenseHeaders.FALSE + "'", addLicenseHeaders35.equals(org.apache.rat.config.AddLicenseHeaders.FALSE));
        org.junit.Assert.assertNull(claimStatistic39);
        org.junit.Assert.assertTrue("'" + licenseFilter40 + "' != '" + org.apache.rat.license.LicenseSetFactory.LicenseFilter.all + "'", licenseFilter40.equals(org.apache.rat.license.LicenseSetFactory.LicenseFilter.all));
        org.junit.Assert.assertNotNull(outputStreamIOSupplier46);
        org.junit.Assert.assertNull(claimStatistic50);
        org.junit.Assert.assertNull(claimStatistic53);
        org.junit.Assert.assertTrue("'" + options54 + "' != '" + org.apache.rat.utils.ReportingSet.Options.OVERWRITE + "'", options54.equals(org.apache.rat.utils.ReportingSet.Options.OVERWRITE));
        org.junit.Assert.assertTrue("'" + addLicenseHeaders59 + "' != '" + org.apache.rat.config.AddLicenseHeaders.FORCED + "'", addLicenseHeaders59.equals(org.apache.rat.config.AddLicenseHeaders.FORCED));
        org.junit.Assert.assertTrue("'" + boolean61 + "' != '" + true + "'", boolean61 == true);
        org.junit.Assert.assertNotNull(iOFileFilter62);
    }

    @Test
    public void test12738() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest25.test12738");
        java.io.Writer writer0 = null;
        org.apache.rat.report.xml.writer.impl.base.XmlWriter xmlWriter1 = new org.apache.rat.report.xml.writer.impl.base.XmlWriter(writer0);
        org.apache.rat.report.claim.impl.xml.SimpleXmlClaimReporter simpleXmlClaimReporter2 = new org.apache.rat.report.claim.impl.xml.SimpleXmlClaimReporter((org.apache.rat.report.xml.writer.IXmlWriter) xmlWriter1);
        org.apache.rat.report.claim.impl.xml.SimpleXmlClaimReporter simpleXmlClaimReporter3 = new org.apache.rat.report.claim.impl.xml.SimpleXmlClaimReporter((org.apache.rat.report.xml.writer.IXmlWriter) xmlWriter1);
        org.apache.rat.report.claim.impl.xml.SimpleXmlClaimReporter simpleXmlClaimReporter4 = new org.apache.rat.report.claim.impl.xml.SimpleXmlClaimReporter((org.apache.rat.report.xml.writer.IXmlWriter) xmlWriter1);
        org.apache.rat.report.claim.impl.xml.SimpleXmlClaimReporter simpleXmlClaimReporter5 = new org.apache.rat.report.claim.impl.xml.SimpleXmlClaimReporter((org.apache.rat.report.xml.writer.IXmlWriter) xmlWriter1);
        org.apache.rat.report.claim.impl.xml.SimpleXmlClaimReporter simpleXmlClaimReporter6 = new org.apache.rat.report.claim.impl.xml.SimpleXmlClaimReporter((org.apache.rat.report.xml.writer.IXmlWriter) xmlWriter1);
        org.apache.rat.report.claim.impl.xml.SimpleXmlClaimReporter simpleXmlClaimReporter7 = new org.apache.rat.report.claim.impl.xml.SimpleXmlClaimReporter((org.apache.rat.report.xml.writer.IXmlWriter) xmlWriter1);
        org.apache.rat.report.claim.impl.xml.SimpleXmlClaimReporter simpleXmlClaimReporter8 = new org.apache.rat.report.claim.impl.xml.SimpleXmlClaimReporter((org.apache.rat.report.xml.writer.IXmlWriter) xmlWriter1);
        org.apache.rat.report.claim.impl.xml.SimpleXmlClaimReporter simpleXmlClaimReporter9 = new org.apache.rat.report.claim.impl.xml.SimpleXmlClaimReporter((org.apache.rat.report.xml.writer.IXmlWriter) xmlWriter1);
        org.apache.rat.report.claim.impl.xml.SimpleXmlClaimReporter simpleXmlClaimReporter10 = new org.apache.rat.report.claim.impl.xml.SimpleXmlClaimReporter((org.apache.rat.report.xml.writer.IXmlWriter) xmlWriter1);
        // The following exception was thrown during execution in test generation
        try {
            org.apache.rat.report.xml.writer.IXmlWriter iXmlWriter12 = xmlWriter1.openElement((java.lang.CharSequence) "a8ad40e5-63d4-4711-aeee-d32efcd029a3");
            org.junit.Assert.fail("Expected exception of type org.apache.rat.report.xml.writer.InvalidXmlException; message: 'a8ad40e5-63d4-4711-aeee-d32efcd029a3' is not a valid element name");
        } catch (org.apache.rat.report.xml.writer.InvalidXmlException e) {
            // Expected exception.
        }
    }

    @Test
    public void test12739() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest25.test12739");
        java.lang.String str1 = org.apache.rat.license.ILicenseFamily.makeCategory("GPL2 ");
        org.junit.Assert.assertEquals("'" + str1 + "' != '" + "GPL2 " + "'", str1, "GPL2 ");
    }

    @Test
    public void test12740() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest25.test12740");
        java.lang.String[] strArray5 = new java.lang.String[] { "http://org/apache/rat/meta-data#LicenseFamilyCategory", "Datum [ name ='http://org/apache/rat/meta-data#LicenseFamilyCategory',value ='GPL1  ']", "MANIFEST.MF", "AllBuilder:", "The MIT License" };
        org.apache.rat.utils.ReportingSet<java.lang.String> strSet6 = new org.apache.rat.utils.ReportingSet<java.lang.String>();
        boolean boolean7 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strSet6, strArray5);
        boolean boolean9 = strSet6.addIfNotPresent("http://org/apache/rat/meta-data#LicenseFamilyName");
        boolean boolean11 = strSet6.addIfNotPresent("ef7a8b13-64c3-4510-bb0c-dbf208e1e73f");
        java.util.stream.Stream<java.lang.String> strStream12 = strSet6.stream();
        org.apache.rat.utils.DefaultLog defaultLog13 = org.apache.rat.utils.DefaultLog.INSTANCE;
        org.apache.rat.utils.Log log14 = null;
        org.apache.rat.ReportConfiguration reportConfiguration15 = new org.apache.rat.ReportConfiguration(log14);
        reportConfiguration15.addApprovedLicenseCategory(".cvsignore");
        org.apache.rat.utils.Log.Level level18 = org.apache.rat.utils.Log.Level.ERROR;
        reportConfiguration15.logFamilyCollisions(level18);
        defaultLog13.setLevel(level18);
        org.apache.rat.utils.ReportingSet<java.lang.String> strSet21 = strSet6.setLogLevel(level18);
        org.apache.rat.utils.ReportingSet<java.lang.String> strSet23 = strSet6.headSet("d4148d3a-edbc-4672-b347-0fa619553f91");
        org.apache.rat.utils.Log log24 = null;
        org.apache.rat.ReportConfiguration reportConfiguration25 = new org.apache.rat.ReportConfiguration(log24);
        org.apache.rat.report.claim.ClaimStatistic claimStatistic26 = org.apache.rat.Reporter.report(reportConfiguration25);
        org.apache.rat.report.IReportable iReportable27 = null;
        reportConfiguration25.setReportable(iReportable27);
        org.apache.rat.utils.Log log29 = null;
        org.apache.rat.ReportConfiguration reportConfiguration30 = new org.apache.rat.ReportConfiguration(log29);
        java.io.FilenameFilter filenameFilter31 = reportConfiguration30.getInputFileFilter();
        org.apache.rat.license.LicenseSetFactory.LicenseFilter licenseFilter32 = org.apache.rat.license.LicenseSetFactory.LicenseFilter.all;
        java.util.SortedSet<org.apache.rat.license.ILicense> iLicenseSet33 = reportConfiguration30.getLicenses(licenseFilter32);
        org.apache.rat.config.AddLicenseHeaders addLicenseHeaders34 = org.apache.rat.config.AddLicenseHeaders.FALSE;
        reportConfiguration30.setAddLicenseHeaders(addLicenseHeaders34);
        org.apache.rat.utils.Log log36 = null;
        org.apache.rat.ReportConfiguration reportConfiguration37 = new org.apache.rat.ReportConfiguration(log36);
        org.apache.rat.report.claim.ClaimStatistic claimStatistic38 = org.apache.rat.Reporter.report(reportConfiguration37);
        org.apache.rat.license.LicenseSetFactory.LicenseFilter licenseFilter39 = org.apache.rat.license.LicenseSetFactory.LicenseFilter.all;
        org.apache.rat.Reporter.listLicenses(reportConfiguration37, licenseFilter39);
        org.apache.rat.Reporter.listLicenses(reportConfiguration30, licenseFilter39);
        org.apache.rat.utils.Log log42 = null;
        org.apache.rat.ReportConfiguration reportConfiguration43 = new org.apache.rat.ReportConfiguration(log42);
        java.io.FilenameFilter filenameFilter44 = reportConfiguration43.getInputFileFilter();
        org.apache.rat.license.LicenseSetFactory.LicenseFilter licenseFilter45 = org.apache.rat.license.LicenseSetFactory.LicenseFilter.all;
        java.util.SortedSet<org.apache.rat.license.ILicense> iLicenseSet46 = reportConfiguration43.getLicenses(licenseFilter45);
        org.apache.rat.config.AddLicenseHeaders addLicenseHeaders47 = org.apache.rat.config.AddLicenseHeaders.FALSE;
        reportConfiguration43.setAddLicenseHeaders(addLicenseHeaders47);
        org.apache.rat.utils.Log log49 = null;
        org.apache.rat.ReportConfiguration reportConfiguration50 = new org.apache.rat.ReportConfiguration(log49);
        org.apache.rat.report.claim.ClaimStatistic claimStatistic51 = org.apache.rat.Reporter.report(reportConfiguration50);
        org.apache.rat.license.LicenseSetFactory.LicenseFilter licenseFilter52 = org.apache.rat.license.LicenseSetFactory.LicenseFilter.all;
        org.apache.rat.Reporter.listLicenses(reportConfiguration50, licenseFilter52);
        org.apache.rat.Reporter.listLicenses(reportConfiguration43, licenseFilter52);
        org.apache.rat.Reporter.listLicenses(reportConfiguration30, licenseFilter52);
        org.apache.rat.utils.Log log56 = null;
        org.apache.rat.ReportConfiguration reportConfiguration57 = new org.apache.rat.ReportConfiguration(log56);
        org.apache.commons.io.function.IOSupplier<java.io.OutputStream> outputStreamIOSupplier58 = reportConfiguration57.getOutput();
        reportConfiguration30.setOut(outputStreamIOSupplier58);
        org.apache.rat.utils.Log log60 = null;
        org.apache.rat.ReportConfiguration reportConfiguration61 = new org.apache.rat.ReportConfiguration(log60);
        org.apache.rat.report.claim.ClaimStatistic claimStatistic62 = org.apache.rat.Reporter.report(reportConfiguration61);
        org.apache.rat.utils.Log log63 = null;
        org.apache.rat.ReportConfiguration reportConfiguration64 = new org.apache.rat.ReportConfiguration(log63);
        org.apache.rat.report.claim.ClaimStatistic claimStatistic65 = org.apache.rat.Reporter.report(reportConfiguration64);
        org.apache.rat.utils.ReportingSet.Options options66 = org.apache.rat.utils.ReportingSet.Options.OVERWRITE;
        reportConfiguration64.licenseDuplicateOption(options66);
        reportConfiguration61.familyDuplicateOption(options66);
        reportConfiguration30.licenseDuplicateOption(options66);
        reportConfiguration25.familyDuplicateOption(options66);
        org.apache.rat.utils.ReportingSet<java.lang.String> strSet71 = strSet6.setDuplicateOption(options66);
        java.lang.String str72 = strSet6.first();
        boolean boolean74 = strSet6.remove((java.lang.Object) "PLAIN");
        java.util.function.Function<java.lang.String, java.lang.String> strFunction75 = null;
        org.apache.rat.utils.ReportingSet<java.lang.String> strSet76 = strSet6.setMsgFormat(strFunction75);
        boolean boolean78 = strSet76.addIfNotPresent("RegexBuilder: 255ef7d8-e270-4908-9de7-bebc7df6eb88");
        org.junit.Assert.assertNotNull(strArray5);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + true + "'", boolean7 == true);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + true + "'", boolean9 == true);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + true + "'", boolean11 == true);
        org.junit.Assert.assertNotNull(strStream12);
        org.junit.Assert.assertNotNull(defaultLog13);
        org.junit.Assert.assertTrue("'" + level18 + "' != '" + org.apache.rat.utils.Log.Level.ERROR + "'", level18.equals(org.apache.rat.utils.Log.Level.ERROR));
        org.junit.Assert.assertNotNull(strSet21);
        org.junit.Assert.assertNotNull(strSet23);
        org.junit.Assert.assertNull(claimStatistic26);
        org.junit.Assert.assertNull(filenameFilter31);
        org.junit.Assert.assertTrue("'" + licenseFilter32 + "' != '" + org.apache.rat.license.LicenseSetFactory.LicenseFilter.all + "'", licenseFilter32.equals(org.apache.rat.license.LicenseSetFactory.LicenseFilter.all));
        org.junit.Assert.assertNotNull(iLicenseSet33);
        org.junit.Assert.assertTrue("'" + addLicenseHeaders34 + "' != '" + org.apache.rat.config.AddLicenseHeaders.FALSE + "'", addLicenseHeaders34.equals(org.apache.rat.config.AddLicenseHeaders.FALSE));
        org.junit.Assert.assertNull(claimStatistic38);
        org.junit.Assert.assertTrue("'" + licenseFilter39 + "' != '" + org.apache.rat.license.LicenseSetFactory.LicenseFilter.all + "'", licenseFilter39.equals(org.apache.rat.license.LicenseSetFactory.LicenseFilter.all));
        org.junit.Assert.assertNull(filenameFilter44);
        org.junit.Assert.assertTrue("'" + licenseFilter45 + "' != '" + org.apache.rat.license.LicenseSetFactory.LicenseFilter.all + "'", licenseFilter45.equals(org.apache.rat.license.LicenseSetFactory.LicenseFilter.all));
        org.junit.Assert.assertNotNull(iLicenseSet46);
        org.junit.Assert.assertTrue("'" + addLicenseHeaders47 + "' != '" + org.apache.rat.config.AddLicenseHeaders.FALSE + "'", addLicenseHeaders47.equals(org.apache.rat.config.AddLicenseHeaders.FALSE));
        org.junit.Assert.assertNull(claimStatistic51);
        org.junit.Assert.assertTrue("'" + licenseFilter52 + "' != '" + org.apache.rat.license.LicenseSetFactory.LicenseFilter.all + "'", licenseFilter52.equals(org.apache.rat.license.LicenseSetFactory.LicenseFilter.all));
        org.junit.Assert.assertNotNull(outputStreamIOSupplier58);
        org.junit.Assert.assertNull(claimStatistic62);
        org.junit.Assert.assertNull(claimStatistic65);
        org.junit.Assert.assertTrue("'" + options66 + "' != '" + org.apache.rat.utils.ReportingSet.Options.OVERWRITE + "'", options66.equals(org.apache.rat.utils.ReportingSet.Options.OVERWRITE));
        org.junit.Assert.assertNotNull(strSet71);
        org.junit.Assert.assertEquals("'" + str72 + "' != '" + "AllBuilder:" + "'", str72, "AllBuilder:");
        org.junit.Assert.assertTrue("'" + boolean74 + "' != '" + false + "'", boolean74 == false);
        org.junit.Assert.assertNotNull(strSet76);
        org.junit.Assert.assertTrue("'" + boolean78 + "' != '" + true + "'", boolean78 == true);
    }

    @Test
    public void test12741() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest25.test12741");
        org.apache.rat.report.claim.ClaimStatistic claimStatistic0 = new org.apache.rat.report.claim.ClaimStatistic();
        claimStatistic0.setNumApproved((int) (short) 10);
        java.util.Map<java.lang.String, java.lang.Integer> strMap3 = null;
        claimStatistic0.setDocumentCategoryMap(strMap3);
        claimStatistic0.setNumUnknown((int) '4');
        claimStatistic0.setNumUnknown((int) (byte) 0);
        claimStatistic0.setNumUnknown((int) (byte) 10);
        int int11 = claimStatistic0.getNumUnknown();
        java.util.Map<java.lang.String, java.lang.Integer> strMap12 = claimStatistic0.getDocumentCategoryMap();
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 10 + "'", int11 == 10);
        org.junit.Assert.assertNull(strMap12);
    }

    @Test
    public void test12742() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest25.test12742");
        org.apache.rat.header.HeaderBean headerBean0 = new org.apache.rat.header.HeaderBean();
        boolean boolean1 = headerBean0.isMatch();
        boolean boolean2 = headerBean0.isMatch();
        java.util.regex.Pattern pattern3 = headerBean0.getHeaderPattern();
        headerBean0.setMatch(true);
        boolean boolean6 = headerBean0.isMatch();
        org.junit.Assert.assertTrue("'" + boolean1 + "' != '" + false + "'", boolean1 == false);
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + false + "'", boolean2 == false);
        org.junit.Assert.assertNull(pattern3);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + true + "'", boolean6 == true);
    }

    @Test
    public void test12743() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest25.test12743");
        // The following exception was thrown during execution in test generation
        try {
            org.apache.rat.configuration.MatcherBuilderTracker.addBuilder("71f9048b-6413-4a71-a18a-0ee565e2b3ba", "e7c2816d-f550-482a-953f-5642846d0ebd");
            org.junit.Assert.fail("Expected exception of type org.apache.rat.ConfigurationException; message: java.lang.ClassNotFoundException: 71f9048b-6413-4a71-a18a-0ee565e2b3ba");
        } catch (org.apache.rat.ConfigurationException e) {
            // Expected exception.
        }
    }

    @Test
    public void test12744() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest25.test12744");
        java.lang.String[] strArray5 = new java.lang.String[] { "http://org/apache/rat/meta-data#LicenseFamilyCategory", "Datum [ name ='http://org/apache/rat/meta-data#LicenseFamilyCategory',value ='GPL1  ']", "MANIFEST.MF", "AllBuilder:", "The MIT License" };
        org.apache.rat.utils.ReportingSet<java.lang.String> strSet6 = new org.apache.rat.utils.ReportingSet<java.lang.String>();
        boolean boolean7 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strSet6, strArray5);
        boolean boolean9 = strSet6.addIfNotPresent("http://org/apache/rat/meta-data#LicenseFamilyName");
        java.util.Iterator<java.lang.String> strItor10 = strSet6.iterator();
        org.apache.rat.utils.DefaultLog defaultLog11 = org.apache.rat.utils.DefaultLog.INSTANCE;
        org.apache.rat.license.ILicense.Builder builder12 = org.apache.rat.license.ILicense.builder();
        org.apache.rat.license.ILicense.Builder builder14 = builder12.setLicenseFamilyCategory("");
        org.apache.rat.analysis.matchers.CopyrightMatcher copyrightMatcher18 = new org.apache.rat.analysis.matchers.CopyrightMatcher("", "GPL1 ", "hi!");
        org.apache.rat.analysis.IHeaderMatcher.State state19 = copyrightMatcher18.finalizeState();
        org.apache.rat.license.ILicense.Builder builder20 = builder14.setMatcher((org.apache.rat.analysis.IHeaderMatcher) copyrightMatcher18);
        org.apache.rat.license.ILicense.Builder builder22 = builder20.setLicenseFamilyCategory("");
        defaultLog11.error((java.lang.Object) builder22);
        org.apache.rat.ReportConfiguration reportConfiguration24 = new org.apache.rat.ReportConfiguration((org.apache.rat.utils.Log) defaultLog11);
        org.apache.rat.utils.DefaultLog defaultLog25 = org.apache.rat.utils.DefaultLog.INSTANCE;
        org.apache.rat.license.ILicense.Builder builder26 = org.apache.rat.license.ILicense.builder();
        org.apache.rat.license.ILicense.Builder builder28 = builder26.setLicenseFamilyCategory("");
        org.apache.rat.analysis.matchers.CopyrightMatcher copyrightMatcher32 = new org.apache.rat.analysis.matchers.CopyrightMatcher("", "GPL1 ", "hi!");
        org.apache.rat.analysis.IHeaderMatcher.State state33 = copyrightMatcher32.finalizeState();
        org.apache.rat.license.ILicense.Builder builder34 = builder28.setMatcher((org.apache.rat.analysis.IHeaderMatcher) copyrightMatcher32);
        org.apache.rat.license.ILicense.Builder builder36 = builder34.setLicenseFamilyCategory("");
        defaultLog25.error((java.lang.Object) builder36);
        org.apache.rat.utils.Log.Level level38 = defaultLog25.getLevel();
        org.apache.rat.utils.Log log39 = null;
        org.apache.rat.ReportConfiguration reportConfiguration40 = new org.apache.rat.ReportConfiguration(log39);
        reportConfiguration40.addApprovedLicenseCategory(".cvsignore");
        org.apache.rat.utils.Log.Level level43 = org.apache.rat.utils.Log.Level.ERROR;
        reportConfiguration40.logLicenseCollisions(level43);
        defaultLog25.log(level43, "AnyBuilder:");
        defaultLog11.info((java.lang.Object) defaultLog25);
        org.apache.rat.utils.ReportingSet<java.lang.String> strSet48 = strSet6.setLog((org.apache.rat.utils.Log) defaultLog11);
        org.apache.rat.configuration.builders.MatcherRefBuilder matcherRefBuilder49 = org.apache.rat.analysis.IHeaderMatcher.Builder.matcherRef();
        boolean boolean50 = matcherRefBuilder49.hasId();
        java.lang.String str51 = matcherRefBuilder49.toString();
        java.util.Map<java.lang.String, org.apache.rat.analysis.IHeaderMatcher> strMap52 = null;
        org.apache.rat.configuration.builders.MatcherRefBuilder matcherRefBuilder53 = matcherRefBuilder49.setMatchers(strMap52);
        java.util.Map<java.lang.String, org.apache.rat.analysis.IHeaderMatcher> strMap54 = null;
        org.apache.rat.configuration.builders.MatcherRefBuilder matcherRefBuilder55 = matcherRefBuilder49.setMatchers(strMap54);
        java.util.Map<java.lang.String, org.apache.rat.analysis.IHeaderMatcher> strMap56 = null;
        org.apache.rat.configuration.builders.MatcherRefBuilder matcherRefBuilder57 = matcherRefBuilder49.setMatchers(strMap56);
        org.apache.rat.configuration.builders.MatcherRefBuilder matcherRefBuilder59 = matcherRefBuilder49.setRefId("Datum [ name ='http://org/apache/rat/meta-data#LicenseFamilyName',value ='Academic Free License, Version 2.1 ']");
        defaultLog11.error((java.lang.Object) matcherRefBuilder49);
        java.lang.String str61 = matcherRefBuilder49.toString();
        org.junit.Assert.assertNotNull(strArray5);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + true + "'", boolean7 == true);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + true + "'", boolean9 == true);
        org.junit.Assert.assertNotNull(strItor10);
        org.junit.Assert.assertNotNull(defaultLog11);
        org.junit.Assert.assertNotNull(builder12);
        org.junit.Assert.assertNotNull(builder14);
        org.junit.Assert.assertTrue("'" + state19 + "' != '" + org.apache.rat.analysis.IHeaderMatcher.State.f + "'", state19.equals(org.apache.rat.analysis.IHeaderMatcher.State.f));
        org.junit.Assert.assertNotNull(builder20);
        org.junit.Assert.assertNotNull(builder22);
        org.junit.Assert.assertNotNull(defaultLog25);
        org.junit.Assert.assertNotNull(builder26);
        org.junit.Assert.assertNotNull(builder28);
        org.junit.Assert.assertTrue("'" + state33 + "' != '" + org.apache.rat.analysis.IHeaderMatcher.State.f + "'", state33.equals(org.apache.rat.analysis.IHeaderMatcher.State.f));
        org.junit.Assert.assertNotNull(builder34);
        org.junit.Assert.assertNotNull(builder36);
        org.junit.Assert.assertTrue("'" + level38 + "' != '" + org.apache.rat.utils.Log.Level.ERROR + "'", level38.equals(org.apache.rat.utils.Log.Level.ERROR));
        org.junit.Assert.assertTrue("'" + level43 + "' != '" + org.apache.rat.utils.Log.Level.ERROR + "'", level43.equals(org.apache.rat.utils.Log.Level.ERROR));
        org.junit.Assert.assertNotNull(strSet48);
        org.junit.Assert.assertNotNull(matcherRefBuilder49);
        org.junit.Assert.assertTrue("'" + boolean50 + "' != '" + false + "'", boolean50 == false);
        org.junit.Assert.assertEquals("'" + str51 + "' != '" + "MathcerRefBuilder: null" + "'", str51, "MathcerRefBuilder: null");
        org.junit.Assert.assertNotNull(matcherRefBuilder53);
        org.junit.Assert.assertNotNull(matcherRefBuilder55);
        org.junit.Assert.assertNotNull(matcherRefBuilder57);
        org.junit.Assert.assertNotNull(matcherRefBuilder59);
        org.junit.Assert.assertEquals("'" + str61 + "' != '" + "MathcerRefBuilder: Datum [ name ='http://org/apache/rat/meta-data#LicenseFamilyName',value ='Academic Free License, Version 2.1 ']" + "'", str61, "MathcerRefBuilder: Datum [ name ='http://org/apache/rat/meta-data#LicenseFamilyName',value ='Academic Free License, Version 2.1 ']");
    }

    @Test
    public void test12745() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest25.test12745");
        org.apache.rat.analysis.matchers.FullTextMatcher fullTextMatcher2 = new org.apache.rat.analysis.matchers.FullTextMatcher("http://org/apache/rat/meta-data", "Apache License Version 2.0");
        org.apache.rat.analysis.IHeaderMatcher.State state3 = fullTextMatcher2.currentState();
        org.apache.rat.analysis.matchers.NotMatcher notMatcher4 = new org.apache.rat.analysis.matchers.NotMatcher((org.apache.rat.analysis.IHeaderMatcher) fullTextMatcher2);
        boolean boolean6 = fullTextMatcher2.doMatch("JAVA");
        org.apache.rat.analysis.matchers.NotMatcher notMatcher7 = new org.apache.rat.analysis.matchers.NotMatcher((org.apache.rat.analysis.IHeaderMatcher) fullTextMatcher2);
        boolean boolean9 = fullTextMatcher2.doMatch("GEN  ");
        org.apache.rat.analysis.matchers.NotMatcher notMatcher10 = new org.apache.rat.analysis.matchers.NotMatcher((org.apache.rat.analysis.IHeaderMatcher) fullTextMatcher2);
        org.junit.Assert.assertTrue("'" + state3 + "' != '" + org.apache.rat.analysis.IHeaderMatcher.State.i + "'", state3.equals(org.apache.rat.analysis.IHeaderMatcher.State.i));
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
    }

    @Test
    public void test12746() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest25.test12746");
        org.apache.rat.configuration.builders.TextBuilder textBuilder0 = new org.apache.rat.configuration.builders.TextBuilder();
        org.apache.rat.configuration.builders.TextBuilder textBuilder2 = textBuilder0.setText("t true");
        org.apache.rat.analysis.IHeaderMatcher iHeaderMatcher3 = textBuilder0.build();
        org.apache.rat.analysis.IHeaderMatcher iHeaderMatcher4 = textBuilder0.build();
        org.apache.rat.configuration.builders.TextBuilder textBuilder6 = textBuilder0.setText("null http://org/apache/rat/meta-data#LicenseFamilyName");
        org.apache.rat.analysis.IHeaderMatcher iHeaderMatcher7 = textBuilder6.build();
        org.apache.rat.configuration.builders.TextBuilder textBuilder9 = textBuilder6.setText(".giti");
        org.apache.rat.configuration.builders.TextBuilder textBuilder11 = textBuilder6.setText("b02ae01b-da48-4f95-b825-8ab7c1751418");
        org.apache.rat.analysis.IHeaderMatcher iHeaderMatcher12 = textBuilder6.build();
        boolean boolean13 = textBuilder6.hasId();
        org.apache.rat.configuration.builders.TextBuilder textBuilder15 = textBuilder6.setText("3f884e05-94cf-410f-8d07-7f64f90263d9");
        org.junit.Assert.assertNotNull(textBuilder2);
        org.junit.Assert.assertNotNull(iHeaderMatcher3);
        org.junit.Assert.assertNotNull(iHeaderMatcher4);
        org.junit.Assert.assertNotNull(textBuilder6);
        org.junit.Assert.assertNotNull(iHeaderMatcher7);
        org.junit.Assert.assertNotNull(textBuilder9);
        org.junit.Assert.assertNotNull(textBuilder11);
        org.junit.Assert.assertNotNull(iHeaderMatcher12);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
        org.junit.Assert.assertNotNull(textBuilder15);
    }

    @Test
    public void test12747() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest25.test12747");
        org.apache.rat.utils.Log log0 = null;
        org.apache.rat.ReportConfiguration reportConfiguration1 = new org.apache.rat.ReportConfiguration(log0);
        org.apache.commons.io.function.IOSupplier<java.io.OutputStream> outputStreamIOSupplier2 = reportConfiguration1.getOutput();
        reportConfiguration1.setCopyrightMessage("MANIFEST.MF");
        org.apache.commons.io.function.IOSupplier<java.io.OutputStream> outputStreamIOSupplier5 = reportConfiguration1.getOutput();
        org.apache.rat.utils.Log log6 = null;
        org.apache.rat.ReportConfiguration reportConfiguration7 = new org.apache.rat.ReportConfiguration(log6);
        org.apache.commons.io.function.IOSupplier<java.io.OutputStream> outputStreamIOSupplier8 = reportConfiguration7.getOutput();
        org.apache.commons.io.filefilter.IOFileFilter iOFileFilter9 = reportConfiguration7.getDirectoryFilter();
        org.apache.commons.io.filefilter.IOFileFilter iOFileFilter10 = iOFileFilter9.negate();
        org.apache.rat.utils.Log log11 = null;
        org.apache.rat.ReportConfiguration reportConfiguration12 = new org.apache.rat.ReportConfiguration(log11);
        org.apache.commons.io.function.IOSupplier<java.io.OutputStream> outputStreamIOSupplier13 = reportConfiguration12.getOutput();
        org.apache.commons.io.filefilter.IOFileFilter iOFileFilter14 = reportConfiguration12.getDirectoryFilter();
        java.nio.file.Path path15 = null;
        java.nio.file.attribute.BasicFileAttributes basicFileAttributes16 = null;
        java.nio.file.FileVisitResult fileVisitResult17 = iOFileFilter14.accept(path15, basicFileAttributes16);
        org.apache.rat.utils.Log log18 = null;
        org.apache.rat.ReportConfiguration reportConfiguration19 = new org.apache.rat.ReportConfiguration(log18);
        java.io.FilenameFilter filenameFilter20 = reportConfiguration19.getInputFileFilter();
        org.apache.rat.license.LicenseSetFactory.LicenseFilter licenseFilter21 = org.apache.rat.license.LicenseSetFactory.LicenseFilter.all;
        java.util.SortedSet<org.apache.rat.license.ILicense> iLicenseSet22 = reportConfiguration19.getLicenses(licenseFilter21);
        org.apache.rat.config.AddLicenseHeaders addLicenseHeaders23 = org.apache.rat.config.AddLicenseHeaders.FALSE;
        reportConfiguration19.setAddLicenseHeaders(addLicenseHeaders23);
        org.apache.rat.utils.Log log25 = null;
        org.apache.rat.ReportConfiguration reportConfiguration26 = new org.apache.rat.ReportConfiguration(log25);
        org.apache.rat.report.claim.ClaimStatistic claimStatistic27 = org.apache.rat.Reporter.report(reportConfiguration26);
        org.apache.rat.license.LicenseSetFactory.LicenseFilter licenseFilter28 = org.apache.rat.license.LicenseSetFactory.LicenseFilter.all;
        org.apache.rat.Reporter.listLicenses(reportConfiguration26, licenseFilter28);
        org.apache.rat.Reporter.listLicenses(reportConfiguration19, licenseFilter28);
        org.apache.rat.utils.Log log31 = null;
        org.apache.rat.ReportConfiguration reportConfiguration32 = new org.apache.rat.ReportConfiguration(log31);
        java.io.FilenameFilter filenameFilter33 = reportConfiguration32.getInputFileFilter();
        org.apache.rat.license.LicenseSetFactory.LicenseFilter licenseFilter34 = org.apache.rat.license.LicenseSetFactory.LicenseFilter.all;
        java.util.SortedSet<org.apache.rat.license.ILicense> iLicenseSet35 = reportConfiguration32.getLicenses(licenseFilter34);
        org.apache.rat.config.AddLicenseHeaders addLicenseHeaders36 = org.apache.rat.config.AddLicenseHeaders.FALSE;
        reportConfiguration32.setAddLicenseHeaders(addLicenseHeaders36);
        org.apache.rat.utils.Log log38 = null;
        org.apache.rat.ReportConfiguration reportConfiguration39 = new org.apache.rat.ReportConfiguration(log38);
        org.apache.rat.report.claim.ClaimStatistic claimStatistic40 = org.apache.rat.Reporter.report(reportConfiguration39);
        org.apache.rat.license.LicenseSetFactory.LicenseFilter licenseFilter41 = org.apache.rat.license.LicenseSetFactory.LicenseFilter.all;
        org.apache.rat.Reporter.listLicenses(reportConfiguration39, licenseFilter41);
        org.apache.rat.Reporter.listLicenses(reportConfiguration32, licenseFilter41);
        org.apache.rat.Reporter.listLicenses(reportConfiguration19, licenseFilter41);
        org.apache.rat.utils.Log log45 = null;
        org.apache.rat.ReportConfiguration reportConfiguration46 = new org.apache.rat.ReportConfiguration(log45);
        org.apache.commons.io.function.IOSupplier<java.io.OutputStream> outputStreamIOSupplier47 = reportConfiguration46.getOutput();
        reportConfiguration19.setOut(outputStreamIOSupplier47);
        org.apache.rat.utils.Log.Level level49 = org.apache.rat.utils.Log.Level.WARN;
        reportConfiguration19.logLicenseCollisions(level49);
        org.apache.commons.io.filefilter.IOFileFilter iOFileFilter51 = reportConfiguration19.getDirectoryFilter();
        java.nio.file.Path path52 = null;
        boolean boolean53 = iOFileFilter51.matches(path52);
        java.nio.file.Path path54 = null;
        java.nio.file.attribute.BasicFileAttributes basicFileAttributes55 = null;
        java.nio.file.FileVisitResult fileVisitResult56 = iOFileFilter51.accept(path54, basicFileAttributes55);
        org.apache.rat.utils.Log log57 = null;
        org.apache.rat.ReportConfiguration reportConfiguration58 = new org.apache.rat.ReportConfiguration(log57);
        java.io.FilenameFilter filenameFilter59 = reportConfiguration58.getInputFileFilter();
        org.apache.rat.license.LicenseSetFactory.LicenseFilter licenseFilter60 = org.apache.rat.license.LicenseSetFactory.LicenseFilter.all;
        java.util.SortedSet<org.apache.rat.license.ILicense> iLicenseSet61 = reportConfiguration58.getLicenses(licenseFilter60);
        org.apache.rat.config.AddLicenseHeaders addLicenseHeaders62 = org.apache.rat.config.AddLicenseHeaders.FALSE;
        reportConfiguration58.setAddLicenseHeaders(addLicenseHeaders62);
        org.apache.rat.utils.Log log64 = null;
        org.apache.rat.ReportConfiguration reportConfiguration65 = new org.apache.rat.ReportConfiguration(log64);
        org.apache.rat.report.claim.ClaimStatistic claimStatistic66 = org.apache.rat.Reporter.report(reportConfiguration65);
        org.apache.rat.license.LicenseSetFactory.LicenseFilter licenseFilter67 = org.apache.rat.license.LicenseSetFactory.LicenseFilter.all;
        org.apache.rat.Reporter.listLicenses(reportConfiguration65, licenseFilter67);
        org.apache.rat.Reporter.listLicenses(reportConfiguration58, licenseFilter67);
        org.apache.rat.utils.Log log70 = null;
        org.apache.rat.ReportConfiguration reportConfiguration71 = new org.apache.rat.ReportConfiguration(log70);
        java.io.FilenameFilter filenameFilter72 = reportConfiguration71.getInputFileFilter();
        org.apache.rat.license.LicenseSetFactory.LicenseFilter licenseFilter73 = org.apache.rat.license.LicenseSetFactory.LicenseFilter.all;
        java.util.SortedSet<org.apache.rat.license.ILicense> iLicenseSet74 = reportConfiguration71.getLicenses(licenseFilter73);
        org.apache.rat.config.AddLicenseHeaders addLicenseHeaders75 = org.apache.rat.config.AddLicenseHeaders.FALSE;
        reportConfiguration71.setAddLicenseHeaders(addLicenseHeaders75);
        org.apache.rat.utils.Log log77 = null;
        org.apache.rat.ReportConfiguration reportConfiguration78 = new org.apache.rat.ReportConfiguration(log77);
        org.apache.rat.report.claim.ClaimStatistic claimStatistic79 = org.apache.rat.Reporter.report(reportConfiguration78);
        org.apache.rat.license.LicenseSetFactory.LicenseFilter licenseFilter80 = org.apache.rat.license.LicenseSetFactory.LicenseFilter.all;
        org.apache.rat.Reporter.listLicenses(reportConfiguration78, licenseFilter80);
        org.apache.rat.Reporter.listLicenses(reportConfiguration71, licenseFilter80);
        org.apache.rat.Reporter.listLicenses(reportConfiguration58, licenseFilter80);
        org.apache.rat.utils.Log log84 = null;
        org.apache.rat.ReportConfiguration reportConfiguration85 = new org.apache.rat.ReportConfiguration(log84);
        org.apache.commons.io.function.IOSupplier<java.io.OutputStream> outputStreamIOSupplier86 = reportConfiguration85.getOutput();
        reportConfiguration58.setOut(outputStreamIOSupplier86);
        org.apache.rat.utils.Log.Level level88 = org.apache.rat.utils.Log.Level.WARN;
        reportConfiguration58.logLicenseCollisions(level88);
        org.apache.commons.io.filefilter.IOFileFilter iOFileFilter90 = reportConfiguration58.getDirectoryFilter();
        java.nio.file.Path path91 = null;
        boolean boolean92 = iOFileFilter90.matches(path91);
        org.apache.commons.io.filefilter.IOFileFilter iOFileFilter93 = iOFileFilter51.and(iOFileFilter90);
        org.apache.commons.io.filefilter.IOFileFilter iOFileFilter94 = iOFileFilter14.and(iOFileFilter51);
        org.apache.commons.io.filefilter.IOFileFilter iOFileFilter95 = iOFileFilter10.and(iOFileFilter51);
        reportConfiguration1.addDirectoryFilter(iOFileFilter95);
        org.apache.rat.utils.Log log97 = reportConfiguration1.getLog();
        org.junit.Assert.assertNotNull(outputStreamIOSupplier2);
        org.junit.Assert.assertNotNull(outputStreamIOSupplier5);
        org.junit.Assert.assertNotNull(outputStreamIOSupplier8);
        org.junit.Assert.assertNotNull(iOFileFilter9);
        org.junit.Assert.assertNotNull(iOFileFilter10);
        org.junit.Assert.assertNotNull(outputStreamIOSupplier13);
        org.junit.Assert.assertNotNull(iOFileFilter14);
        org.junit.Assert.assertTrue("'" + fileVisitResult17 + "' != '" + java.nio.file.FileVisitResult.TERMINATE + "'", fileVisitResult17.equals(java.nio.file.FileVisitResult.TERMINATE));
        org.junit.Assert.assertNull(filenameFilter20);
        org.junit.Assert.assertTrue("'" + licenseFilter21 + "' != '" + org.apache.rat.license.LicenseSetFactory.LicenseFilter.all + "'", licenseFilter21.equals(org.apache.rat.license.LicenseSetFactory.LicenseFilter.all));
        org.junit.Assert.assertNotNull(iLicenseSet22);
        org.junit.Assert.assertTrue("'" + addLicenseHeaders23 + "' != '" + org.apache.rat.config.AddLicenseHeaders.FALSE + "'", addLicenseHeaders23.equals(org.apache.rat.config.AddLicenseHeaders.FALSE));
        org.junit.Assert.assertNull(claimStatistic27);
        org.junit.Assert.assertTrue("'" + licenseFilter28 + "' != '" + org.apache.rat.license.LicenseSetFactory.LicenseFilter.all + "'", licenseFilter28.equals(org.apache.rat.license.LicenseSetFactory.LicenseFilter.all));
        org.junit.Assert.assertNull(filenameFilter33);
        org.junit.Assert.assertTrue("'" + licenseFilter34 + "' != '" + org.apache.rat.license.LicenseSetFactory.LicenseFilter.all + "'", licenseFilter34.equals(org.apache.rat.license.LicenseSetFactory.LicenseFilter.all));
        org.junit.Assert.assertNotNull(iLicenseSet35);
        org.junit.Assert.assertTrue("'" + addLicenseHeaders36 + "' != '" + org.apache.rat.config.AddLicenseHeaders.FALSE + "'", addLicenseHeaders36.equals(org.apache.rat.config.AddLicenseHeaders.FALSE));
        org.junit.Assert.assertNull(claimStatistic40);
        org.junit.Assert.assertTrue("'" + licenseFilter41 + "' != '" + org.apache.rat.license.LicenseSetFactory.LicenseFilter.all + "'", licenseFilter41.equals(org.apache.rat.license.LicenseSetFactory.LicenseFilter.all));
        org.junit.Assert.assertNotNull(outputStreamIOSupplier47);
        org.junit.Assert.assertTrue("'" + level49 + "' != '" + org.apache.rat.utils.Log.Level.WARN + "'", level49.equals(org.apache.rat.utils.Log.Level.WARN));
        org.junit.Assert.assertNotNull(iOFileFilter51);
        org.junit.Assert.assertTrue("'" + boolean53 + "' != '" + false + "'", boolean53 == false);
        org.junit.Assert.assertTrue("'" + fileVisitResult56 + "' != '" + java.nio.file.FileVisitResult.TERMINATE + "'", fileVisitResult56.equals(java.nio.file.FileVisitResult.TERMINATE));
        org.junit.Assert.assertNull(filenameFilter59);
        org.junit.Assert.assertTrue("'" + licenseFilter60 + "' != '" + org.apache.rat.license.LicenseSetFactory.LicenseFilter.all + "'", licenseFilter60.equals(org.apache.rat.license.LicenseSetFactory.LicenseFilter.all));
        org.junit.Assert.assertNotNull(iLicenseSet61);
        org.junit.Assert.assertTrue("'" + addLicenseHeaders62 + "' != '" + org.apache.rat.config.AddLicenseHeaders.FALSE + "'", addLicenseHeaders62.equals(org.apache.rat.config.AddLicenseHeaders.FALSE));
        org.junit.Assert.assertNull(claimStatistic66);
        org.junit.Assert.assertTrue("'" + licenseFilter67 + "' != '" + org.apache.rat.license.LicenseSetFactory.LicenseFilter.all + "'", licenseFilter67.equals(org.apache.rat.license.LicenseSetFactory.LicenseFilter.all));
        org.junit.Assert.assertNull(filenameFilter72);
        org.junit.Assert.assertTrue("'" + licenseFilter73 + "' != '" + org.apache.rat.license.LicenseSetFactory.LicenseFilter.all + "'", licenseFilter73.equals(org.apache.rat.license.LicenseSetFactory.LicenseFilter.all));
        org.junit.Assert.assertNotNull(iLicenseSet74);
        org.junit.Assert.assertTrue("'" + addLicenseHeaders75 + "' != '" + org.apache.rat.config.AddLicenseHeaders.FALSE + "'", addLicenseHeaders75.equals(org.apache.rat.config.AddLicenseHeaders.FALSE));
        org.junit.Assert.assertNull(claimStatistic79);
        org.junit.Assert.assertTrue("'" + licenseFilter80 + "' != '" + org.apache.rat.license.LicenseSetFactory.LicenseFilter.all + "'", licenseFilter80.equals(org.apache.rat.license.LicenseSetFactory.LicenseFilter.all));
        org.junit.Assert.assertNotNull(outputStreamIOSupplier86);
        org.junit.Assert.assertTrue("'" + level88 + "' != '" + org.apache.rat.utils.Log.Level.WARN + "'", level88.equals(org.apache.rat.utils.Log.Level.WARN));
        org.junit.Assert.assertNotNull(iOFileFilter90);
        org.junit.Assert.assertTrue("'" + boolean92 + "' != '" + false + "'", boolean92 == false);
        org.junit.Assert.assertNotNull(iOFileFilter93);
        org.junit.Assert.assertNotNull(iOFileFilter94);
        org.junit.Assert.assertNotNull(iOFileFilter95);
        org.junit.Assert.assertNull(log97);
    }

    @Test
    public void test12748() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest25.test12748");
        org.apache.rat.utils.DefaultLog defaultLog1 = org.apache.rat.utils.DefaultLog.INSTANCE;
        org.apache.rat.license.ILicense.Builder builder2 = org.apache.rat.license.ILicense.builder();
        org.apache.rat.license.ILicense.Builder builder4 = builder2.setLicenseFamilyCategory("");
        org.apache.rat.analysis.matchers.CopyrightMatcher copyrightMatcher8 = new org.apache.rat.analysis.matchers.CopyrightMatcher("", "GPL1 ", "hi!");
        org.apache.rat.analysis.IHeaderMatcher.State state9 = copyrightMatcher8.finalizeState();
        org.apache.rat.license.ILicense.Builder builder10 = builder4.setMatcher((org.apache.rat.analysis.IHeaderMatcher) copyrightMatcher8);
        org.apache.rat.license.ILicense.Builder builder12 = builder10.setLicenseFamilyCategory("");
        defaultLog1.error((java.lang.Object) builder12);
        org.apache.rat.analysis.matchers.CopyrightMatcher copyrightMatcher17 = new org.apache.rat.analysis.matchers.CopyrightMatcher("", "GPL1 ", "hi!");
        copyrightMatcher17.reset();
        org.apache.rat.license.ILicense.Builder builder19 = builder12.setMatcher((org.apache.rat.analysis.IHeaderMatcher) copyrightMatcher17);
        org.apache.rat.analysis.matchers.NotMatcher notMatcher20 = new org.apache.rat.analysis.matchers.NotMatcher("AnyBuilder:\nAllBuilder:", (org.apache.rat.analysis.IHeaderMatcher) copyrightMatcher17);
        org.apache.rat.analysis.IHeaderMatcher.State state21 = notMatcher20.currentState();
        org.apache.rat.analysis.IHeaderMatcher.State state23 = notMatcher20.matches("TheT");
        org.junit.Assert.assertNotNull(defaultLog1);
        org.junit.Assert.assertNotNull(builder2);
        org.junit.Assert.assertNotNull(builder4);
        org.junit.Assert.assertTrue("'" + state9 + "' != '" + org.apache.rat.analysis.IHeaderMatcher.State.f + "'", state9.equals(org.apache.rat.analysis.IHeaderMatcher.State.f));
        org.junit.Assert.assertNotNull(builder10);
        org.junit.Assert.assertNotNull(builder12);
        org.junit.Assert.assertNotNull(builder19);
        org.junit.Assert.assertTrue("'" + state21 + "' != '" + org.apache.rat.analysis.IHeaderMatcher.State.i + "'", state21.equals(org.apache.rat.analysis.IHeaderMatcher.State.i));
        org.junit.Assert.assertTrue("'" + state23 + "' != '" + org.apache.rat.analysis.IHeaderMatcher.State.i + "'", state23.equals(org.apache.rat.analysis.IHeaderMatcher.State.i));
    }

    @Test
    public void test12749() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest25.test12749");
        org.apache.rat.license.SimpleLicenseFamily simpleLicenseFamily0 = new org.apache.rat.license.SimpleLicenseFamily();
        java.lang.String str1 = simpleLicenseFamily0.getFamilyName();
        java.lang.String str2 = simpleLicenseFamily0.getFamilyCategory();
        simpleLicenseFamily0.setFamilyName("NotBuilder: MathcerRefBuilder: null");
        java.lang.String str5 = simpleLicenseFamily0.getFamilyCategory();
        simpleLicenseFamily0.setFamilyCategory("SpdxBuilder: ef7a8b13-64c3-4510-bb0c-dbf208e1e73f");
        simpleLicenseFamily0.setFamilyCategory("58D10");
        org.junit.Assert.assertNull(str1);
        org.junit.Assert.assertNull(str2);
        org.junit.Assert.assertNull(str5);
    }

    @Test
    public void test12750() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest25.test12750");
        org.apache.rat.configuration.builders.SpdxBuilder spdxBuilder0 = org.apache.rat.analysis.IHeaderMatcher.Builder.spdx();
        java.lang.String str1 = spdxBuilder0.toString();
        org.apache.rat.configuration.builders.SpdxBuilder spdxBuilder3 = spdxBuilder0.setName("ef7a8b13-64c3-4510-bb0c-dbf208e1e73f");
        org.apache.rat.analysis.IHeaderMatcher iHeaderMatcher4 = spdxBuilder3.build();
        org.apache.rat.configuration.builders.SpdxBuilder spdxBuilder6 = spdxBuilder3.setName("null http://org/apache/rat/meta-data#LicenseFamilyName");
        java.lang.String str7 = spdxBuilder6.toString();
        org.junit.Assert.assertNotNull(spdxBuilder0);
        org.junit.Assert.assertEquals("'" + str1 + "' != '" + "SpdxBuilder: null" + "'", str1, "SpdxBuilder: null");
        org.junit.Assert.assertNotNull(spdxBuilder3);
        org.junit.Assert.assertNotNull(iHeaderMatcher4);
        org.junit.Assert.assertNotNull(spdxBuilder6);
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "SpdxBuilder: null http://org/apache/rat/meta-data#LicenseFamilyName" + "'", str7, "SpdxBuilder: null http://org/apache/rat/meta-data#LicenseFamilyName");
    }

    @Test
    public void test12751() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest25.test12751");
        java.lang.String[] strArray5 = new java.lang.String[] { "http://org/apache/rat/meta-data#LicenseFamilyCategory", "Datum [ name ='http://org/apache/rat/meta-data#LicenseFamilyCategory',value ='GPL1  ']", "MANIFEST.MF", "AllBuilder:", "The MIT License" };
        org.apache.rat.utils.ReportingSet<java.lang.String> strSet6 = new org.apache.rat.utils.ReportingSet<java.lang.String>();
        boolean boolean7 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strSet6, strArray5);
        boolean boolean9 = strSet6.addIfNotPresent("http://org/apache/rat/meta-data#LicenseFamilyName");
        boolean boolean11 = strSet6.addIfNotPresent("ef7a8b13-64c3-4510-bb0c-dbf208e1e73f");
        java.util.function.Function<java.lang.String, java.lang.String> strFunction12 = null;
        org.apache.rat.utils.ReportingSet<java.lang.String> strSet13 = strSet6.setMsgFormat(strFunction12);
        boolean boolean14 = strSet6.isEmpty();
        java.util.Comparator<? super java.lang.String> wildcardComparator15 = strSet6.comparator();
        org.apache.rat.utils.ReportingSet<java.lang.String> strSet17 = strSet6.headSet("archive null");
        org.apache.rat.utils.ReportingSet<java.lang.String> strSet19 = strSet17.headSet("77509541-7301-4b4f-b283-f39fe4654431");
        java.lang.Object[] objArray20 = strSet17.toArray();
        org.junit.Assert.assertNotNull(strArray5);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + true + "'", boolean7 == true);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + true + "'", boolean9 == true);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + true + "'", boolean11 == true);
        org.junit.Assert.assertNotNull(strSet13);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
        org.junit.Assert.assertNull(wildcardComparator15);
        org.junit.Assert.assertNotNull(strSet17);
        org.junit.Assert.assertNotNull(strSet19);
        org.junit.Assert.assertNotNull(objArray20);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray20), "[AllBuilder:, Datum [ name ='http://org/apache/rat/meta-data#LicenseFamilyCategory',value ='GPL1  '], MANIFEST.MF, The MIT License]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray20), "[AllBuilder:, Datum [ name ='http://org/apache/rat/meta-data#LicenseFamilyCategory',value ='GPL1  '], MANIFEST.MF, The MIT License]");
    }

    @Test
    public void test12752() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest25.test12752");
        java.lang.String str1 = org.apache.rat.analysis.matchers.FullTextMatcher.prune("1aed385f-a23b-478e-be6b-efdc53693766");
        org.junit.Assert.assertEquals("'" + str1 + "' != '" + "1aed385fa23b478ebe6befdc53693766" + "'", str1, "1aed385fa23b478ebe6befdc53693766");
    }

    @Test
    public void test12753() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest25.test12753");
        org.apache.rat.report.claim.ClaimStatistic claimStatistic0 = new org.apache.rat.report.claim.ClaimStatistic();
        claimStatistic0.setNumApproved((int) (short) 10);
        claimStatistic0.setNumUnknown(30);
        java.util.Map<java.lang.String, java.lang.Integer> strMap5 = null;
        claimStatistic0.setLicenseFileNameMap(strMap5);
        claimStatistic0.setNumUnknown(35);
        claimStatistic0.setNumGenerated((int) (short) 10);
        int int11 = claimStatistic0.getNumApproved();
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 10 + "'", int11 == 10);
    }

    @Test
    public void test12754() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest25.test12754");
        org.apache.rat.utils.DefaultLog defaultLog0 = org.apache.rat.utils.DefaultLog.INSTANCE;
        org.apache.rat.utils.Log log1 = null;
        org.apache.rat.ReportConfiguration reportConfiguration2 = new org.apache.rat.ReportConfiguration(log1);
        java.io.FilenameFilter filenameFilter3 = reportConfiguration2.getInputFileFilter();
        org.apache.rat.license.LicenseSetFactory.LicenseFilter licenseFilter4 = org.apache.rat.license.LicenseSetFactory.LicenseFilter.all;
        java.util.SortedSet<org.apache.rat.license.ILicense> iLicenseSet5 = reportConfiguration2.getLicenses(licenseFilter4);
        org.apache.rat.config.AddLicenseHeaders addLicenseHeaders6 = org.apache.rat.config.AddLicenseHeaders.FALSE;
        reportConfiguration2.setAddLicenseHeaders(addLicenseHeaders6);
        org.apache.rat.utils.Log log8 = null;
        org.apache.rat.ReportConfiguration reportConfiguration9 = new org.apache.rat.ReportConfiguration(log8);
        org.apache.rat.report.claim.ClaimStatistic claimStatistic10 = org.apache.rat.Reporter.report(reportConfiguration9);
        org.apache.rat.license.LicenseSetFactory.LicenseFilter licenseFilter11 = org.apache.rat.license.LicenseSetFactory.LicenseFilter.all;
        org.apache.rat.Reporter.listLicenses(reportConfiguration9, licenseFilter11);
        org.apache.rat.Reporter.listLicenses(reportConfiguration2, licenseFilter11);
        org.apache.rat.utils.Log log14 = null;
        org.apache.rat.ReportConfiguration reportConfiguration15 = new org.apache.rat.ReportConfiguration(log14);
        java.io.FilenameFilter filenameFilter16 = reportConfiguration15.getInputFileFilter();
        org.apache.rat.license.LicenseSetFactory.LicenseFilter licenseFilter17 = org.apache.rat.license.LicenseSetFactory.LicenseFilter.all;
        java.util.SortedSet<org.apache.rat.license.ILicense> iLicenseSet18 = reportConfiguration15.getLicenses(licenseFilter17);
        org.apache.rat.config.AddLicenseHeaders addLicenseHeaders19 = org.apache.rat.config.AddLicenseHeaders.FALSE;
        reportConfiguration15.setAddLicenseHeaders(addLicenseHeaders19);
        org.apache.rat.utils.Log log21 = null;
        org.apache.rat.ReportConfiguration reportConfiguration22 = new org.apache.rat.ReportConfiguration(log21);
        org.apache.rat.report.claim.ClaimStatistic claimStatistic23 = org.apache.rat.Reporter.report(reportConfiguration22);
        org.apache.rat.license.LicenseSetFactory.LicenseFilter licenseFilter24 = org.apache.rat.license.LicenseSetFactory.LicenseFilter.all;
        org.apache.rat.Reporter.listLicenses(reportConfiguration22, licenseFilter24);
        org.apache.rat.Reporter.listLicenses(reportConfiguration15, licenseFilter24);
        org.apache.rat.Reporter.listLicenses(reportConfiguration2, licenseFilter24);
        org.apache.rat.utils.Log log28 = null;
        org.apache.rat.ReportConfiguration reportConfiguration29 = new org.apache.rat.ReportConfiguration(log28);
        org.apache.commons.io.function.IOSupplier<java.io.OutputStream> outputStreamIOSupplier30 = reportConfiguration29.getOutput();
        reportConfiguration2.setOut(outputStreamIOSupplier30);
        org.apache.rat.utils.Log log32 = null;
        org.apache.rat.ReportConfiguration reportConfiguration33 = new org.apache.rat.ReportConfiguration(log32);
        org.apache.rat.report.claim.ClaimStatistic claimStatistic34 = org.apache.rat.Reporter.report(reportConfiguration33);
        org.apache.rat.utils.Log log35 = null;
        org.apache.rat.ReportConfiguration reportConfiguration36 = new org.apache.rat.ReportConfiguration(log35);
        org.apache.rat.report.claim.ClaimStatistic claimStatistic37 = org.apache.rat.Reporter.report(reportConfiguration36);
        org.apache.rat.utils.ReportingSet.Options options38 = org.apache.rat.utils.ReportingSet.Options.OVERWRITE;
        reportConfiguration36.licenseDuplicateOption(options38);
        reportConfiguration33.familyDuplicateOption(options38);
        reportConfiguration2.licenseDuplicateOption(options38);
        reportConfiguration2.addApprovedLicenseCategory("W3C Document Copyright");
        org.apache.rat.utils.Log log44 = null;
        org.apache.rat.ReportConfiguration reportConfiguration45 = new org.apache.rat.ReportConfiguration(log44);
        reportConfiguration45.addApprovedLicenseCategory(".cvsignore");
        org.apache.rat.utils.Log.Level level48 = org.apache.rat.utils.Log.Level.ERROR;
        reportConfiguration45.logLicenseCollisions(level48);
        reportConfiguration2.logLicenseCollisions(level48);
        defaultLog0.setLevel(level48);
        org.apache.rat.ReportConfiguration reportConfiguration52 = new org.apache.rat.ReportConfiguration((org.apache.rat.utils.Log) defaultLog0);
        org.apache.rat.annotation.ApacheV2LicenseAppender apacheV2LicenseAppender53 = new org.apache.rat.annotation.ApacheV2LicenseAppender((org.apache.rat.utils.Log) defaultLog0);
        apacheV2LicenseAppender53.setForce(false);
        java.io.File file56 = null;
        // The following exception was thrown during execution in test generation
        try {
            java.lang.String str57 = apacheV2LicenseAppender53.getLicenseHeader(file56);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(defaultLog0);
        org.junit.Assert.assertNull(filenameFilter3);
        org.junit.Assert.assertTrue("'" + licenseFilter4 + "' != '" + org.apache.rat.license.LicenseSetFactory.LicenseFilter.all + "'", licenseFilter4.equals(org.apache.rat.license.LicenseSetFactory.LicenseFilter.all));
        org.junit.Assert.assertNotNull(iLicenseSet5);
        org.junit.Assert.assertTrue("'" + addLicenseHeaders6 + "' != '" + org.apache.rat.config.AddLicenseHeaders.FALSE + "'", addLicenseHeaders6.equals(org.apache.rat.config.AddLicenseHeaders.FALSE));
        org.junit.Assert.assertNull(claimStatistic10);
        org.junit.Assert.assertTrue("'" + licenseFilter11 + "' != '" + org.apache.rat.license.LicenseSetFactory.LicenseFilter.all + "'", licenseFilter11.equals(org.apache.rat.license.LicenseSetFactory.LicenseFilter.all));
        org.junit.Assert.assertNull(filenameFilter16);
        org.junit.Assert.assertTrue("'" + licenseFilter17 + "' != '" + org.apache.rat.license.LicenseSetFactory.LicenseFilter.all + "'", licenseFilter17.equals(org.apache.rat.license.LicenseSetFactory.LicenseFilter.all));
        org.junit.Assert.assertNotNull(iLicenseSet18);
        org.junit.Assert.assertTrue("'" + addLicenseHeaders19 + "' != '" + org.apache.rat.config.AddLicenseHeaders.FALSE + "'", addLicenseHeaders19.equals(org.apache.rat.config.AddLicenseHeaders.FALSE));
        org.junit.Assert.assertNull(claimStatistic23);
        org.junit.Assert.assertTrue("'" + licenseFilter24 + "' != '" + org.apache.rat.license.LicenseSetFactory.LicenseFilter.all + "'", licenseFilter24.equals(org.apache.rat.license.LicenseSetFactory.LicenseFilter.all));
        org.junit.Assert.assertNotNull(outputStreamIOSupplier30);
        org.junit.Assert.assertNull(claimStatistic34);
        org.junit.Assert.assertNull(claimStatistic37);
        org.junit.Assert.assertTrue("'" + options38 + "' != '" + org.apache.rat.utils.ReportingSet.Options.OVERWRITE + "'", options38.equals(org.apache.rat.utils.ReportingSet.Options.OVERWRITE));
        org.junit.Assert.assertTrue("'" + level48 + "' != '" + org.apache.rat.utils.Log.Level.ERROR + "'", level48.equals(org.apache.rat.utils.Log.Level.ERROR));
    }

    @Test
    public void test12755() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest25.test12755");
        org.apache.rat.license.SimpleLicenseFamily simpleLicenseFamily0 = new org.apache.rat.license.SimpleLicenseFamily();
        java.lang.String str1 = simpleLicenseFamily0.getFamilyName();
        simpleLicenseFamily0.setFamilyCategory("7480723c-65a6-4470-aa58-975de51fe7c5");
        java.lang.String str4 = simpleLicenseFamily0.toString();
        simpleLicenseFamily0.setFamilyCategory("11370891-c763-426b-9547-57e87d991d61");
        java.lang.String str7 = simpleLicenseFamily0.toString();
        org.junit.Assert.assertNull(str1);
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "7480723c-65a6-4470-aa58-975de51fe7c5 null" + "'", str4, "7480723c-65a6-4470-aa58-975de51fe7c5 null");
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "11370891-c763-426b-9547-57e87d991d61 null" + "'", str7, "11370891-c763-426b-9547-57e87d991d61 null");
    }

    @Test
    public void test12756() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest25.test12756");
        org.apache.rat.configuration.builders.RegexBuilder regexBuilder0 = new org.apache.rat.configuration.builders.RegexBuilder();
        java.lang.String str1 = regexBuilder0.toString();
        org.apache.rat.configuration.builders.RegexBuilder regexBuilder3 = regexBuilder0.setExpr("GNU General Public License, version 1");
        java.lang.String str4 = regexBuilder3.toString();
        java.lang.String str5 = regexBuilder3.toString();
        org.junit.Assert.assertEquals("'" + str1 + "' != '" + "RegexBuilder: null" + "'", str1, "RegexBuilder: null");
        org.junit.Assert.assertNotNull(regexBuilder3);
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "RegexBuilder: GNU General Public License, version 1" + "'", str4, "RegexBuilder: GNU General Public License, version 1");
        org.junit.Assert.assertEquals("'" + str5 + "' != '" + "RegexBuilder: GNU General Public License, version 1" + "'", str5, "RegexBuilder: GNU General Public License, version 1");
    }

    @Test
    public void test12757() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest25.test12757");
        org.apache.rat.Defaults.Builder builder2 = org.apache.rat.Defaults.builder();
        org.apache.rat.Defaults defaults3 = builder2.build();
        org.apache.rat.utils.Log log4 = null;
        org.apache.rat.ReportConfiguration reportConfiguration5 = new org.apache.rat.ReportConfiguration(log4);
        java.io.FilenameFilter filenameFilter6 = reportConfiguration5.getInputFileFilter();
        org.apache.rat.license.LicenseSetFactory.LicenseFilter licenseFilter7 = org.apache.rat.license.LicenseSetFactory.LicenseFilter.all;
        java.util.SortedSet<org.apache.rat.license.ILicense> iLicenseSet8 = reportConfiguration5.getLicenses(licenseFilter7);
        org.apache.rat.config.AddLicenseHeaders addLicenseHeaders9 = org.apache.rat.config.AddLicenseHeaders.FALSE;
        reportConfiguration5.setAddLicenseHeaders(addLicenseHeaders9);
        org.apache.rat.utils.Log log11 = null;
        org.apache.rat.ReportConfiguration reportConfiguration12 = new org.apache.rat.ReportConfiguration(log11);
        org.apache.rat.report.claim.ClaimStatistic claimStatistic13 = org.apache.rat.Reporter.report(reportConfiguration12);
        org.apache.rat.license.LicenseSetFactory.LicenseFilter licenseFilter14 = org.apache.rat.license.LicenseSetFactory.LicenseFilter.all;
        org.apache.rat.Reporter.listLicenses(reportConfiguration12, licenseFilter14);
        org.apache.rat.Reporter.listLicenses(reportConfiguration5, licenseFilter14);
        org.apache.rat.utils.Log log17 = null;
        org.apache.rat.ReportConfiguration reportConfiguration18 = new org.apache.rat.ReportConfiguration(log17);
        java.io.FilenameFilter filenameFilter19 = reportConfiguration18.getInputFileFilter();
        org.apache.rat.license.LicenseSetFactory.LicenseFilter licenseFilter20 = org.apache.rat.license.LicenseSetFactory.LicenseFilter.all;
        java.util.SortedSet<org.apache.rat.license.ILicense> iLicenseSet21 = reportConfiguration18.getLicenses(licenseFilter20);
        org.apache.rat.config.AddLicenseHeaders addLicenseHeaders22 = org.apache.rat.config.AddLicenseHeaders.FALSE;
        reportConfiguration18.setAddLicenseHeaders(addLicenseHeaders22);
        org.apache.rat.utils.Log log24 = null;
        org.apache.rat.ReportConfiguration reportConfiguration25 = new org.apache.rat.ReportConfiguration(log24);
        org.apache.rat.report.claim.ClaimStatistic claimStatistic26 = org.apache.rat.Reporter.report(reportConfiguration25);
        org.apache.rat.license.LicenseSetFactory.LicenseFilter licenseFilter27 = org.apache.rat.license.LicenseSetFactory.LicenseFilter.all;
        org.apache.rat.Reporter.listLicenses(reportConfiguration25, licenseFilter27);
        org.apache.rat.Reporter.listLicenses(reportConfiguration18, licenseFilter27);
        java.util.SortedSet<org.apache.rat.license.ILicenseFamily> iLicenseFamilySet30 = reportConfiguration5.getLicenseFamilies(licenseFilter27);
        java.util.SortedSet<org.apache.rat.license.ILicense> iLicenseSet31 = defaults3.getLicenses(licenseFilter27);
        org.apache.rat.utils.Log log32 = null;
        org.apache.rat.ReportConfiguration reportConfiguration33 = new org.apache.rat.ReportConfiguration(log32);
        org.apache.commons.io.function.IOSupplier<java.io.OutputStream> outputStreamIOSupplier34 = reportConfiguration33.getOutput();
        reportConfiguration33.removeApprovedLicenseCategory("EF7A8B13-64C3-4510-BB0C-DBF208E1E73F");
        org.apache.rat.utils.Log log37 = null;
        org.apache.rat.ReportConfiguration reportConfiguration38 = new org.apache.rat.ReportConfiguration(log37);
        org.apache.rat.report.claim.ClaimStatistic claimStatistic39 = org.apache.rat.Reporter.report(reportConfiguration38);
        org.apache.rat.utils.Log log40 = null;
        org.apache.rat.ReportConfiguration reportConfiguration41 = new org.apache.rat.ReportConfiguration(log40);
        org.apache.rat.report.claim.ClaimStatistic claimStatistic42 = org.apache.rat.Reporter.report(reportConfiguration41);
        org.apache.rat.utils.ReportingSet.Options options43 = org.apache.rat.utils.ReportingSet.Options.OVERWRITE;
        reportConfiguration41.licenseDuplicateOption(options43);
        reportConfiguration38.familyDuplicateOption(options43);
        org.apache.commons.io.function.IOSupplier<java.io.PrintWriter> printWriterIOSupplier46 = reportConfiguration38.getWriter();
        org.apache.rat.report.IReportable iReportable47 = null;
        reportConfiguration38.setReportable(iReportable47);
        org.apache.rat.license.ILicenseFamily[] iLicenseFamilyArray49 = new org.apache.rat.license.ILicenseFamily[] {};
        java.util.ArrayList<org.apache.rat.license.ILicenseFamily> iLicenseFamilyList50 = new java.util.ArrayList<org.apache.rat.license.ILicenseFamily>();
        boolean boolean51 = java.util.Collections.addAll((java.util.Collection<org.apache.rat.license.ILicenseFamily>) iLicenseFamilyList50, iLicenseFamilyArray49);
        org.apache.rat.policy.DefaultPolicy defaultPolicy52 = new org.apache.rat.policy.DefaultPolicy((java.util.Collection<org.apache.rat.license.ILicenseFamily>) iLicenseFamilyList50);
        reportConfiguration38.addFamilies((java.util.Collection<org.apache.rat.license.ILicenseFamily>) iLicenseFamilyList50);
        org.apache.rat.utils.Log log54 = null;
        org.apache.rat.ReportConfiguration reportConfiguration55 = new org.apache.rat.ReportConfiguration(log54);
        java.io.FilenameFilter filenameFilter56 = reportConfiguration55.getInputFileFilter();
        org.apache.rat.license.LicenseSetFactory.LicenseFilter licenseFilter57 = org.apache.rat.license.LicenseSetFactory.LicenseFilter.all;
        java.util.SortedSet<org.apache.rat.license.ILicense> iLicenseSet58 = reportConfiguration55.getLicenses(licenseFilter57);
        org.apache.rat.config.AddLicenseHeaders addLicenseHeaders59 = org.apache.rat.config.AddLicenseHeaders.FALSE;
        reportConfiguration55.setAddLicenseHeaders(addLicenseHeaders59);
        org.apache.rat.utils.Log log61 = null;
        org.apache.rat.ReportConfiguration reportConfiguration62 = new org.apache.rat.ReportConfiguration(log61);
        org.apache.rat.report.claim.ClaimStatistic claimStatistic63 = org.apache.rat.Reporter.report(reportConfiguration62);
        org.apache.rat.license.LicenseSetFactory.LicenseFilter licenseFilter64 = org.apache.rat.license.LicenseSetFactory.LicenseFilter.all;
        org.apache.rat.Reporter.listLicenses(reportConfiguration62, licenseFilter64);
        org.apache.rat.Reporter.listLicenses(reportConfiguration55, licenseFilter64);
        org.apache.rat.utils.Log log67 = null;
        org.apache.rat.ReportConfiguration reportConfiguration68 = new org.apache.rat.ReportConfiguration(log67);
        java.io.FilenameFilter filenameFilter69 = reportConfiguration68.getInputFileFilter();
        org.apache.rat.license.LicenseSetFactory.LicenseFilter licenseFilter70 = org.apache.rat.license.LicenseSetFactory.LicenseFilter.all;
        java.util.SortedSet<org.apache.rat.license.ILicense> iLicenseSet71 = reportConfiguration68.getLicenses(licenseFilter70);
        org.apache.rat.config.AddLicenseHeaders addLicenseHeaders72 = org.apache.rat.config.AddLicenseHeaders.FALSE;
        reportConfiguration68.setAddLicenseHeaders(addLicenseHeaders72);
        org.apache.rat.utils.Log log74 = null;
        org.apache.rat.ReportConfiguration reportConfiguration75 = new org.apache.rat.ReportConfiguration(log74);
        org.apache.rat.report.claim.ClaimStatistic claimStatistic76 = org.apache.rat.Reporter.report(reportConfiguration75);
        org.apache.rat.license.LicenseSetFactory.LicenseFilter licenseFilter77 = org.apache.rat.license.LicenseSetFactory.LicenseFilter.all;
        org.apache.rat.Reporter.listLicenses(reportConfiguration75, licenseFilter77);
        org.apache.rat.Reporter.listLicenses(reportConfiguration68, licenseFilter77);
        java.util.SortedSet<org.apache.rat.license.ILicenseFamily> iLicenseFamilySet80 = reportConfiguration55.getLicenseFamilies(licenseFilter77);
        java.util.SortedSet<org.apache.rat.license.ILicense> iLicenseSet81 = reportConfiguration38.getLicenses(licenseFilter77);
        org.apache.rat.Reporter.listLicenseFamilies(reportConfiguration33, licenseFilter77);
        java.util.SortedSet<org.apache.rat.license.ILicense> iLicenseSet83 = defaults3.getLicenses(licenseFilter77);
        org.apache.rat.license.ILicense iLicense84 = org.apache.rat.license.LicenseSetFactory.search("ffa6f6cf-d0e9-457f-aa74-6d159e7c6009", iLicenseSet83);
        org.apache.rat.license.ILicense iLicense85 = org.apache.rat.license.LicenseSetFactory.search("a1abad46-6a98-44f8-aa20-7839919a8270 null", iLicenseSet83);
        org.junit.Assert.assertNotNull(builder2);
        org.junit.Assert.assertNotNull(defaults3);
        org.junit.Assert.assertNull(filenameFilter6);
        org.junit.Assert.assertTrue("'" + licenseFilter7 + "' != '" + org.apache.rat.license.LicenseSetFactory.LicenseFilter.all + "'", licenseFilter7.equals(org.apache.rat.license.LicenseSetFactory.LicenseFilter.all));
        org.junit.Assert.assertNotNull(iLicenseSet8);
        org.junit.Assert.assertTrue("'" + addLicenseHeaders9 + "' != '" + org.apache.rat.config.AddLicenseHeaders.FALSE + "'", addLicenseHeaders9.equals(org.apache.rat.config.AddLicenseHeaders.FALSE));
        org.junit.Assert.assertNull(claimStatistic13);
        org.junit.Assert.assertTrue("'" + licenseFilter14 + "' != '" + org.apache.rat.license.LicenseSetFactory.LicenseFilter.all + "'", licenseFilter14.equals(org.apache.rat.license.LicenseSetFactory.LicenseFilter.all));
        org.junit.Assert.assertNull(filenameFilter19);
        org.junit.Assert.assertTrue("'" + licenseFilter20 + "' != '" + org.apache.rat.license.LicenseSetFactory.LicenseFilter.all + "'", licenseFilter20.equals(org.apache.rat.license.LicenseSetFactory.LicenseFilter.all));
        org.junit.Assert.assertNotNull(iLicenseSet21);
        org.junit.Assert.assertTrue("'" + addLicenseHeaders22 + "' != '" + org.apache.rat.config.AddLicenseHeaders.FALSE + "'", addLicenseHeaders22.equals(org.apache.rat.config.AddLicenseHeaders.FALSE));
        org.junit.Assert.assertNull(claimStatistic26);
        org.junit.Assert.assertTrue("'" + licenseFilter27 + "' != '" + org.apache.rat.license.LicenseSetFactory.LicenseFilter.all + "'", licenseFilter27.equals(org.apache.rat.license.LicenseSetFactory.LicenseFilter.all));
        org.junit.Assert.assertNotNull(iLicenseFamilySet30);
        org.junit.Assert.assertNotNull(iLicenseSet31);
        org.junit.Assert.assertNotNull(outputStreamIOSupplier34);
        org.junit.Assert.assertNull(claimStatistic39);
        org.junit.Assert.assertNull(claimStatistic42);
        org.junit.Assert.assertTrue("'" + options43 + "' != '" + org.apache.rat.utils.ReportingSet.Options.OVERWRITE + "'", options43.equals(org.apache.rat.utils.ReportingSet.Options.OVERWRITE));
        org.junit.Assert.assertNotNull(printWriterIOSupplier46);
        org.junit.Assert.assertNotNull(iLicenseFamilyArray49);
        org.junit.Assert.assertTrue("'" + boolean51 + "' != '" + false + "'", boolean51 == false);
        org.junit.Assert.assertNull(filenameFilter56);
        org.junit.Assert.assertTrue("'" + licenseFilter57 + "' != '" + org.apache.rat.license.LicenseSetFactory.LicenseFilter.all + "'", licenseFilter57.equals(org.apache.rat.license.LicenseSetFactory.LicenseFilter.all));
        org.junit.Assert.assertNotNull(iLicenseSet58);
        org.junit.Assert.assertTrue("'" + addLicenseHeaders59 + "' != '" + org.apache.rat.config.AddLicenseHeaders.FALSE + "'", addLicenseHeaders59.equals(org.apache.rat.config.AddLicenseHeaders.FALSE));
        org.junit.Assert.assertNull(claimStatistic63);
        org.junit.Assert.assertTrue("'" + licenseFilter64 + "' != '" + org.apache.rat.license.LicenseSetFactory.LicenseFilter.all + "'", licenseFilter64.equals(org.apache.rat.license.LicenseSetFactory.LicenseFilter.all));
        org.junit.Assert.assertNull(filenameFilter69);
        org.junit.Assert.assertTrue("'" + licenseFilter70 + "' != '" + org.apache.rat.license.LicenseSetFactory.LicenseFilter.all + "'", licenseFilter70.equals(org.apache.rat.license.LicenseSetFactory.LicenseFilter.all));
        org.junit.Assert.assertNotNull(iLicenseSet71);
        org.junit.Assert.assertTrue("'" + addLicenseHeaders72 + "' != '" + org.apache.rat.config.AddLicenseHeaders.FALSE + "'", addLicenseHeaders72.equals(org.apache.rat.config.AddLicenseHeaders.FALSE));
        org.junit.Assert.assertNull(claimStatistic76);
        org.junit.Assert.assertTrue("'" + licenseFilter77 + "' != '" + org.apache.rat.license.LicenseSetFactory.LicenseFilter.all + "'", licenseFilter77.equals(org.apache.rat.license.LicenseSetFactory.LicenseFilter.all));
        org.junit.Assert.assertNotNull(iLicenseFamilySet80);
        org.junit.Assert.assertNotNull(iLicenseSet81);
        org.junit.Assert.assertNotNull(iLicenseSet83);
        org.junit.Assert.assertNull(iLicense84);
        org.junit.Assert.assertNull(iLicense85);
    }

    @Test
    public void test12758() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest25.test12758");
        org.apache.rat.analysis.matchers.CopyrightMatcher copyrightMatcher5 = new org.apache.rat.analysis.matchers.CopyrightMatcher("CopyrightBuildersnulleW3CSoftwareCopyrightonull", "a8ad4", "W3C Software Copyright null", "8f82a952-5bfd-446b-ac79-15beef5b3f17");
        org.apache.rat.analysis.IHeaderMatcher.State state6 = copyrightMatcher5.currentState();
        org.apache.rat.analysis.IHeaderMatcher.State state7 = copyrightMatcher5.currentState();
        org.apache.rat.analysis.matchers.NotMatcher notMatcher8 = new org.apache.rat.analysis.matchers.NotMatcher("MathcerRefBuilder: ", (org.apache.rat.analysis.IHeaderMatcher) copyrightMatcher5);
        org.junit.Assert.assertTrue("'" + state6 + "' != '" + org.apache.rat.analysis.IHeaderMatcher.State.i + "'", state6.equals(org.apache.rat.analysis.IHeaderMatcher.State.i));
        org.junit.Assert.assertTrue("'" + state7 + "' != '" + org.apache.rat.analysis.IHeaderMatcher.State.i + "'", state7.equals(org.apache.rat.analysis.IHeaderMatcher.State.i));
    }

    @Test
    public void test12759() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest25.test12759");
        org.apache.rat.license.ILicense.Builder builder0 = org.apache.rat.license.ILicense.builder();
        org.apache.rat.license.ILicense.Builder builder2 = builder0.setLicenseFamilyCategory("");
        org.apache.rat.license.ILicense.Builder builder4 = builder2.setDerivedFrom("GEN  ");
        org.apache.rat.license.ILicense.Builder builder6 = builder4.setId("DOJO ");
        org.apache.rat.configuration.builders.CopyrightBuilder copyrightBuilder7 = org.apache.rat.analysis.IHeaderMatcher.Builder.copyright();
        java.lang.String str8 = copyrightBuilder7.toString();
        org.apache.rat.license.ILicense.Builder builder9 = builder4.setMatcher((org.apache.rat.analysis.IHeaderMatcher.Builder) copyrightBuilder7);
        org.apache.rat.analysis.matchers.CopyrightMatcher copyrightMatcher13 = new org.apache.rat.analysis.matchers.CopyrightMatcher("AL   ", "GEN  ", "GEN  ");
        org.apache.rat.analysis.IHeaderMatcher.State state15 = copyrightMatcher13.matches(".cvsignore");
        org.apache.rat.license.ILicense.Builder builder16 = builder9.setMatcher((org.apache.rat.analysis.IHeaderMatcher) copyrightMatcher13);
        org.apache.rat.license.ILicense.Builder builder18 = builder16.setLicenseFamilyCategory("RegexBuilder: http://org/apache/rat/meta-data#LicenseFamilyName");
        org.apache.rat.license.ILicense.Builder builder20 = builder18.setLicenseFamilyCategory("8a28803c-c6cf-46ab-b2e5-c55ad4ef3005");
        org.junit.Assert.assertNotNull(builder0);
        org.junit.Assert.assertNotNull(builder2);
        org.junit.Assert.assertNotNull(builder4);
        org.junit.Assert.assertNotNull(builder6);
        org.junit.Assert.assertNotNull(copyrightBuilder7);
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "Copyright Builder: s:null e:null o:null" + "'", str8, "Copyright Builder: s:null e:null o:null");
        org.junit.Assert.assertNotNull(builder9);
        org.junit.Assert.assertTrue("'" + state15 + "' != '" + org.apache.rat.analysis.IHeaderMatcher.State.i + "'", state15.equals(org.apache.rat.analysis.IHeaderMatcher.State.i));
        org.junit.Assert.assertNotNull(builder16);
        org.junit.Assert.assertNotNull(builder18);
        org.junit.Assert.assertNotNull(builder20);
    }

    @Test
    public void test12760() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest25.test12760");
        org.apache.rat.document.ToNameTransformer toNameTransformer0 = new org.apache.rat.document.ToNameTransformer();
        org.apache.rat.utils.DefaultLog defaultLog1 = org.apache.rat.utils.DefaultLog.INSTANCE;
        org.apache.rat.license.ILicense.Builder builder2 = org.apache.rat.license.ILicense.builder();
        org.apache.rat.license.ILicense.Builder builder4 = builder2.setLicenseFamilyCategory("");
        org.apache.rat.analysis.matchers.CopyrightMatcher copyrightMatcher8 = new org.apache.rat.analysis.matchers.CopyrightMatcher("", "GPL1 ", "hi!");
        org.apache.rat.analysis.IHeaderMatcher.State state9 = copyrightMatcher8.finalizeState();
        org.apache.rat.license.ILicense.Builder builder10 = builder4.setMatcher((org.apache.rat.analysis.IHeaderMatcher) copyrightMatcher8);
        org.apache.rat.license.ILicense.Builder builder12 = builder10.setLicenseFamilyCategory("");
        defaultLog1.error((java.lang.Object) builder12);
        java.lang.Object obj14 = toNameTransformer0.transform((java.lang.Object) defaultLog1);
        org.apache.rat.utils.Log log15 = null;
        org.apache.rat.ReportConfiguration reportConfiguration16 = new org.apache.rat.ReportConfiguration(log15);
        java.io.FilenameFilter filenameFilter17 = reportConfiguration16.getInputFileFilter();
        org.apache.rat.license.ILicense iLicense18 = null;
        reportConfiguration16.addLicense(iLicense18);
        org.apache.rat.license.ILicenseFamily iLicenseFamily20 = null;
        reportConfiguration16.addFamily(iLicenseFamily20);
        org.apache.commons.io.function.IOSupplier<java.io.InputStream> inputStreamIOSupplier22 = org.apache.rat.Defaults.getPlainStyleSheet();
        reportConfiguration16.setStyleSheet(inputStreamIOSupplier22);
        java.lang.Object obj24 = toNameTransformer0.transform((java.lang.Object) inputStreamIOSupplier22);
        org.apache.rat.license.ILicense[] iLicenseArray25 = new org.apache.rat.license.ILicense[] {};
        java.util.TreeSet<org.apache.rat.license.ILicense> iLicenseSet26 = new java.util.TreeSet<org.apache.rat.license.ILicense>();
        boolean boolean27 = java.util.Collections.addAll((java.util.Collection<org.apache.rat.license.ILicense>) iLicenseSet26, iLicenseArray25);
        java.lang.String[] strArray40 = new java.lang.String[] { "GPL2 ", "GPL1 ", "notice", "http://org/apache/rat/meta-data#LicenseFamilyName", "notice", "GPL2 ", "http://org/apache/rat/meta-data#LicenseFamilyName", "", "GPL2 ", "", "GPL1 ", "hi!" };
        java.util.ArrayList<java.lang.String> strList41 = new java.util.ArrayList<java.lang.String>();
        boolean boolean42 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strList41, strArray40);
        org.apache.rat.license.LicenseSetFactory licenseSetFactory43 = new org.apache.rat.license.LicenseSetFactory((java.util.SortedSet<org.apache.rat.license.ILicense>) iLicenseSet26, (java.util.Collection<java.lang.String>) strList41);
        java.io.FilenameFilter filenameFilter44 = org.apache.rat.Report.parseExclusions((java.util.List<java.lang.String>) strList41);
        java.io.FilenameFilter filenameFilter45 = org.apache.rat.Report.parseExclusions((java.util.List<java.lang.String>) strList41);
        java.io.FilenameFilter filenameFilter46 = org.apache.rat.Report.parseExclusions((java.util.List<java.lang.String>) strList41);
        java.lang.Object obj47 = toNameTransformer0.transform((java.lang.Object) strList41);
        java.lang.String[] strArray53 = new java.lang.String[] { "http://org/apache/rat/meta-data#LicenseFamilyCategory", "Datum [ name ='http://org/apache/rat/meta-data#LicenseFamilyCategory',value ='GPL1  ']", "MANIFEST.MF", "AllBuilder:", "The MIT License" };
        org.apache.rat.utils.ReportingSet<java.lang.String> strSet54 = new org.apache.rat.utils.ReportingSet<java.lang.String>();
        boolean boolean55 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strSet54, strArray53);
        boolean boolean57 = strSet54.addIfNotPresent("http://org/apache/rat/meta-data#LicenseFamilyName");
        boolean boolean59 = strSet54.addIfNotPresent("ef7a8b13-64c3-4510-bb0c-dbf208e1e73f");
        java.util.function.Function<java.lang.String, java.lang.String> strFunction60 = null;
        org.apache.rat.utils.ReportingSet<java.lang.String> strSet61 = strSet54.setMsgFormat(strFunction60);
        java.util.SortedSet<org.apache.rat.license.ILicenseFamily> iLicenseFamilySet63 = org.apache.rat.license.LicenseFamilySetFactory.emptyLicenseFamilySet();
        org.apache.rat.license.ILicenseFamily iLicenseFamily64 = org.apache.rat.license.LicenseFamilySetFactory.search("http://org/apache/rat/meta-data", iLicenseFamilySet63);
        boolean boolean65 = strSet54.containsAll((java.util.Collection<org.apache.rat.license.ILicenseFamily>) iLicenseFamilySet63);
        org.apache.rat.utils.ReportingSet<java.lang.String> strSet67 = strSet54.tailSet("http://org/apache/rat/meta-data#HeaderCategory");
        org.apache.rat.license.ILicenseFamily[] iLicenseFamilyArray68 = new org.apache.rat.license.ILicenseFamily[] {};
        java.util.ArrayList<org.apache.rat.license.ILicenseFamily> iLicenseFamilyList69 = new java.util.ArrayList<org.apache.rat.license.ILicenseFamily>();
        boolean boolean70 = java.util.Collections.addAll((java.util.Collection<org.apache.rat.license.ILicenseFamily>) iLicenseFamilyList69, iLicenseFamilyArray68);
        org.apache.rat.policy.DefaultPolicy defaultPolicy71 = new org.apache.rat.policy.DefaultPolicy((java.util.Collection<org.apache.rat.license.ILicenseFamily>) iLicenseFamilyList69);
        java.util.SortedSet<org.apache.rat.license.ILicenseFamily> iLicenseFamilySet72 = defaultPolicy71.getApprovedLicenseNames();
        boolean boolean73 = strSet67.removeAll((java.util.Collection<org.apache.rat.license.ILicenseFamily>) iLicenseFamilySet72);
        org.apache.rat.utils.DefaultLog defaultLog74 = org.apache.rat.utils.DefaultLog.INSTANCE;
        org.apache.rat.license.ILicense.Builder builder75 = org.apache.rat.license.ILicense.builder();
        org.apache.rat.license.ILicense.Builder builder77 = builder75.setLicenseFamilyCategory("");
        org.apache.rat.analysis.matchers.CopyrightMatcher copyrightMatcher81 = new org.apache.rat.analysis.matchers.CopyrightMatcher("", "GPL1 ", "hi!");
        org.apache.rat.analysis.IHeaderMatcher.State state82 = copyrightMatcher81.finalizeState();
        org.apache.rat.license.ILicense.Builder builder83 = builder77.setMatcher((org.apache.rat.analysis.IHeaderMatcher) copyrightMatcher81);
        org.apache.rat.license.ILicense.Builder builder85 = builder83.setLicenseFamilyCategory("");
        defaultLog74.error((java.lang.Object) builder85);
        org.apache.rat.utils.Log.Level level87 = org.apache.rat.utils.Log.Level.INFO;
        defaultLog74.log(level87, "JAVA");
        org.apache.rat.report.claim.ClaimStatistic claimStatistic90 = new org.apache.rat.report.claim.ClaimStatistic();
        claimStatistic90.setNumApproved((int) (short) 10);
        claimStatistic90.setNumUnknown((int) '#');
        defaultLog74.error((java.lang.Object) '#');
        org.apache.rat.utils.ReportingSet<java.lang.String> strSet96 = strSet67.setLog((org.apache.rat.utils.Log) defaultLog74);
        java.lang.Object obj97 = toNameTransformer0.transform((java.lang.Object) strSet96);
        int int98 = strSet96.size();
        org.junit.Assert.assertNotNull(defaultLog1);
        org.junit.Assert.assertNotNull(builder2);
        org.junit.Assert.assertNotNull(builder4);
        org.junit.Assert.assertTrue("'" + state9 + "' != '" + org.apache.rat.analysis.IHeaderMatcher.State.f + "'", state9.equals(org.apache.rat.analysis.IHeaderMatcher.State.f));
        org.junit.Assert.assertNotNull(builder10);
        org.junit.Assert.assertNotNull(builder12);
        org.junit.Assert.assertNull(obj14);
        org.junit.Assert.assertNull(filenameFilter17);
        org.junit.Assert.assertNotNull(inputStreamIOSupplier22);
        org.junit.Assert.assertNull(obj24);
        org.junit.Assert.assertNotNull(iLicenseArray25);
        org.junit.Assert.assertTrue("'" + boolean27 + "' != '" + false + "'", boolean27 == false);
        org.junit.Assert.assertNotNull(strArray40);
        org.junit.Assert.assertTrue("'" + boolean42 + "' != '" + true + "'", boolean42 == true);
        org.junit.Assert.assertNotNull(filenameFilter44);
        org.junit.Assert.assertNotNull(filenameFilter45);
        org.junit.Assert.assertNotNull(filenameFilter46);
        org.junit.Assert.assertNull(obj47);
        org.junit.Assert.assertNotNull(strArray53);
        org.junit.Assert.assertTrue("'" + boolean55 + "' != '" + true + "'", boolean55 == true);
        org.junit.Assert.assertTrue("'" + boolean57 + "' != '" + true + "'", boolean57 == true);
        org.junit.Assert.assertTrue("'" + boolean59 + "' != '" + true + "'", boolean59 == true);
        org.junit.Assert.assertNotNull(strSet61);
        org.junit.Assert.assertNotNull(iLicenseFamilySet63);
        org.junit.Assert.assertNull(iLicenseFamily64);
        org.junit.Assert.assertTrue("'" + boolean65 + "' != '" + true + "'", boolean65 == true);
        org.junit.Assert.assertNotNull(strSet67);
        org.junit.Assert.assertNotNull(iLicenseFamilyArray68);
        org.junit.Assert.assertTrue("'" + boolean70 + "' != '" + false + "'", boolean70 == false);
        org.junit.Assert.assertNotNull(iLicenseFamilySet72);
        org.junit.Assert.assertTrue("'" + boolean73 + "' != '" + false + "'", boolean73 == false);
        org.junit.Assert.assertNotNull(defaultLog74);
        org.junit.Assert.assertNotNull(builder75);
        org.junit.Assert.assertNotNull(builder77);
        org.junit.Assert.assertTrue("'" + state82 + "' != '" + org.apache.rat.analysis.IHeaderMatcher.State.f + "'", state82.equals(org.apache.rat.analysis.IHeaderMatcher.State.f));
        org.junit.Assert.assertNotNull(builder83);
        org.junit.Assert.assertNotNull(builder85);
        org.junit.Assert.assertTrue("'" + level87 + "' != '" + org.apache.rat.utils.Log.Level.INFO + "'", level87.equals(org.apache.rat.utils.Log.Level.INFO));
        org.junit.Assert.assertNotNull(strSet96);
        org.junit.Assert.assertNull(obj97);
        org.junit.Assert.assertTrue("'" + int98 + "' != '" + 2 + "'", int98 == 2);
    }

    @Test
    public void test12761() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest25.test12761");
        org.apache.rat.document.IDocumentAnalyser[] iDocumentAnalyserArray0 = new org.apache.rat.document.IDocumentAnalyser[] {};
        org.apache.rat.document.impl.util.DocumentAnalyserMultiplexer documentAnalyserMultiplexer1 = new org.apache.rat.document.impl.util.DocumentAnalyserMultiplexer(iDocumentAnalyserArray0);
        org.apache.rat.document.impl.util.DocumentAnalyserMultiplexer documentAnalyserMultiplexer2 = new org.apache.rat.document.impl.util.DocumentAnalyserMultiplexer(iDocumentAnalyserArray0);
        org.apache.rat.document.impl.util.DocumentAnalyserMultiplexer documentAnalyserMultiplexer3 = new org.apache.rat.document.impl.util.DocumentAnalyserMultiplexer(iDocumentAnalyserArray0);
        org.apache.rat.document.impl.util.DocumentAnalyserMultiplexer documentAnalyserMultiplexer4 = new org.apache.rat.document.impl.util.DocumentAnalyserMultiplexer(iDocumentAnalyserArray0);
        org.apache.rat.api.Document document5 = null;
        documentAnalyserMultiplexer4.analyse(document5);
        org.apache.rat.api.Document document7 = null;
        documentAnalyserMultiplexer4.analyse(document7);
        org.apache.rat.api.Document document9 = null;
        documentAnalyserMultiplexer4.analyse(document9);
        org.junit.Assert.assertNotNull(iDocumentAnalyserArray0);
    }

    @Test
    public void test12762() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest25.test12762");
        // The following exception was thrown during execution in test generation
        try {
            org.apache.rat.configuration.Format format1 = org.apache.rat.configuration.Format.fromName("MathcerRefBuilder: c523095e-4421-4cc4-93e2-039f23b91f76");
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: No such suffix: MathcerRefBuilder: c523095e-4421-4cc4-93e2-039f23b91f76");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
    }

    @Test
    public void test12763() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest25.test12763");
        org.apache.rat.configuration.builders.CopyrightBuilder copyrightBuilder0 = org.apache.rat.analysis.IHeaderMatcher.Builder.copyright();
        org.apache.rat.configuration.builders.CopyrightBuilder copyrightBuilder2 = copyrightBuilder0.setStart("OASIS");
        org.apache.rat.configuration.builders.CopyrightBuilder copyrightBuilder4 = copyrightBuilder0.setOwner("Copyright Builder: s:null e:274c6a15-09f6-4bfd-ac53-1827770eb507 o:null");
        org.apache.rat.configuration.builders.CopyrightBuilder copyrightBuilder6 = copyrightBuilder4.setStart("7E27CD62-4403-40AB-A9F5-16E7C59AB2F1");
        org.apache.rat.configuration.builders.CopyrightBuilder copyrightBuilder8 = copyrightBuilder4.setEnd("");
        org.apache.rat.analysis.IHeaderMatcher iHeaderMatcher9 = copyrightBuilder4.build();
        org.apache.rat.configuration.builders.CopyrightBuilder copyrightBuilder11 = copyrightBuilder4.setOwner("77e26c88-e393-4983-916b-adc59fc1b78e");
        org.junit.Assert.assertNotNull(copyrightBuilder0);
        org.junit.Assert.assertNotNull(copyrightBuilder2);
        org.junit.Assert.assertNotNull(copyrightBuilder4);
        org.junit.Assert.assertNotNull(copyrightBuilder6);
        org.junit.Assert.assertNotNull(copyrightBuilder8);
        org.junit.Assert.assertNotNull(iHeaderMatcher9);
        org.junit.Assert.assertNotNull(copyrightBuilder11);
    }

    @Test
    public void test12764() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest25.test12764");
        java.io.File file0 = null;
        org.apache.rat.utils.Log log1 = null;
        org.apache.rat.ReportConfiguration reportConfiguration2 = new org.apache.rat.ReportConfiguration(log1);
        java.io.FilenameFilter filenameFilter3 = reportConfiguration2.getInputFileFilter();
        org.apache.rat.license.LicenseSetFactory.LicenseFilter licenseFilter4 = org.apache.rat.license.LicenseSetFactory.LicenseFilter.all;
        java.util.SortedSet<org.apache.rat.license.ILicense> iLicenseSet5 = reportConfiguration2.getLicenses(licenseFilter4);
        org.apache.rat.config.AddLicenseHeaders addLicenseHeaders6 = org.apache.rat.config.AddLicenseHeaders.FALSE;
        reportConfiguration2.setAddLicenseHeaders(addLicenseHeaders6);
        org.apache.rat.utils.Log log8 = null;
        org.apache.rat.ReportConfiguration reportConfiguration9 = new org.apache.rat.ReportConfiguration(log8);
        org.apache.rat.report.claim.ClaimStatistic claimStatistic10 = org.apache.rat.Reporter.report(reportConfiguration9);
        org.apache.rat.license.LicenseSetFactory.LicenseFilter licenseFilter11 = org.apache.rat.license.LicenseSetFactory.LicenseFilter.all;
        org.apache.rat.Reporter.listLicenses(reportConfiguration9, licenseFilter11);
        org.apache.rat.Reporter.listLicenses(reportConfiguration2, licenseFilter11);
        org.apache.rat.report.IReportable iReportable14 = null;
        reportConfiguration2.setReportable(iReportable14);
        org.apache.commons.io.filefilter.IOFileFilter iOFileFilter16 = reportConfiguration2.getDirectoryFilter();
        java.nio.file.Path path17 = null;
        java.nio.file.attribute.BasicFileAttributes basicFileAttributes18 = null;
        java.nio.file.FileVisitResult fileVisitResult19 = iOFileFilter16.accept(path17, basicFileAttributes18);
        org.apache.commons.io.filefilter.IOFileFilter iOFileFilter20 = iOFileFilter16.negate();
        // The following exception was thrown during execution in test generation
        try {
            org.apache.rat.walker.DirectoryWalker directoryWalker21 = new org.apache.rat.walker.DirectoryWalker(file0, iOFileFilter20);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNull(filenameFilter3);
        org.junit.Assert.assertTrue("'" + licenseFilter4 + "' != '" + org.apache.rat.license.LicenseSetFactory.LicenseFilter.all + "'", licenseFilter4.equals(org.apache.rat.license.LicenseSetFactory.LicenseFilter.all));
        org.junit.Assert.assertNotNull(iLicenseSet5);
        org.junit.Assert.assertTrue("'" + addLicenseHeaders6 + "' != '" + org.apache.rat.config.AddLicenseHeaders.FALSE + "'", addLicenseHeaders6.equals(org.apache.rat.config.AddLicenseHeaders.FALSE));
        org.junit.Assert.assertNull(claimStatistic10);
        org.junit.Assert.assertTrue("'" + licenseFilter11 + "' != '" + org.apache.rat.license.LicenseSetFactory.LicenseFilter.all + "'", licenseFilter11.equals(org.apache.rat.license.LicenseSetFactory.LicenseFilter.all));
        org.junit.Assert.assertNotNull(iOFileFilter16);
        org.junit.Assert.assertTrue("'" + fileVisitResult19 + "' != '" + java.nio.file.FileVisitResult.TERMINATE + "'", fileVisitResult19.equals(java.nio.file.FileVisitResult.TERMINATE));
        org.junit.Assert.assertNotNull(iOFileFilter20);
    }

    @Test
    public void test12765() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest25.test12765");
        org.apache.rat.report.claim.ClaimStatistic claimStatistic0 = new org.apache.rat.report.claim.ClaimStatistic();
        claimStatistic0.setNumApproved((int) (short) 10);
        java.util.Map<java.lang.String, java.lang.Integer> strMap3 = null;
        claimStatistic0.setDocumentCategoryMap(strMap3);
        java.util.Map<java.lang.String, java.lang.Integer> strMap5 = claimStatistic0.getLicenseFileNameMap();
        claimStatistic0.setNumUnknown((int) (byte) -1);
        claimStatistic0.setNumUnknown(30);
        int int10 = claimStatistic0.getNumUnknown();
        int int11 = claimStatistic0.getNumUnApproved();
        int int12 = claimStatistic0.getNumApproved();
        java.util.Map<java.lang.String, java.lang.Integer> strMap13 = null;
        claimStatistic0.setLicenseFileNameMap(strMap13);
        claimStatistic0.setNumUnApproved(5);
        org.junit.Assert.assertNull(strMap5);
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + 30 + "'", int10 == 30);
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 0 + "'", int11 == 0);
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + 10 + "'", int12 == 10);
    }

    @Test
    public void test12766() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest25.test12766");
        boolean boolean1 = org.apache.rat.document.impl.guesser.BinaryGuesser.isKeystore("15fd22d7-ede2-4d18-8aba-412ffa88b3ad");
        org.junit.Assert.assertTrue("'" + boolean1 + "' != '" + false + "'", boolean1 == false);
    }

    @Test
    public void test12767() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest25.test12767");
        org.apache.rat.configuration.builders.AllBuilder allBuilder0 = new org.apache.rat.configuration.builders.AllBuilder();
        java.lang.String str1 = allBuilder0.toString();
        java.util.List<org.apache.rat.analysis.IHeaderMatcher> iHeaderMatcherList2 = allBuilder0.getChildren();
        org.apache.rat.configuration.builders.MatcherRefBuilder matcherRefBuilder3 = new org.apache.rat.configuration.builders.MatcherRefBuilder();
        org.apache.rat.configuration.builders.AbstractBuilder abstractBuilder4 = allBuilder0.add((org.apache.rat.analysis.IHeaderMatcher.Builder) matcherRefBuilder3);
        org.apache.rat.configuration.builders.MatcherRefBuilder matcherRefBuilder6 = matcherRefBuilder3.setRefId("6486879f-fc81-4b57-aec7-c4c77d540c30");
        org.apache.rat.configuration.builders.MatcherRefBuilder matcherRefBuilder8 = matcherRefBuilder3.setRefId("AnyBuilderNotBuilderMathcerRefBuildernull");
        org.junit.Assert.assertEquals("'" + str1 + "' != '" + "AllBuilder:" + "'", str1, "AllBuilder:");
        org.junit.Assert.assertNotNull(iHeaderMatcherList2);
        org.junit.Assert.assertNotNull(abstractBuilder4);
        org.junit.Assert.assertNotNull(matcherRefBuilder6);
        org.junit.Assert.assertNotNull(matcherRefBuilder8);
    }

    @Test
    public void test12768() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest25.test12768");
        org.apache.rat.Defaults.Builder builder0 = org.apache.rat.Defaults.builder();
        org.apache.rat.Defaults defaults1 = builder0.build();
        org.apache.rat.Defaults.Builder builder2 = builder0.noDefault();
        org.apache.rat.Defaults.Builder builder4 = builder0.add("W3C Document Copyright");
        org.apache.rat.Defaults.Builder builder6 = builder0.add("9c36f068-9920-4c66-98c2-ba24e3dffa9c");
        org.apache.rat.Defaults.Builder builder8 = builder6.add("The MIT License");
        org.apache.rat.Defaults.Builder builder10 = builder8.remove("00186AD8-9B49-4E79-B8F0-40326F09C054");
        org.apache.rat.Defaults.Builder builder11 = builder10.noDefault();
        java.io.File file12 = null;
        // The following exception was thrown during execution in test generation
        try {
            org.apache.rat.Defaults.Builder builder13 = builder11.add(file12);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(builder0);
        org.junit.Assert.assertNotNull(defaults1);
        org.junit.Assert.assertNotNull(builder2);
        org.junit.Assert.assertNotNull(builder4);
        org.junit.Assert.assertNotNull(builder6);
        org.junit.Assert.assertNotNull(builder8);
        org.junit.Assert.assertNotNull(builder10);
        org.junit.Assert.assertNotNull(builder11);
    }

    @Test
    public void test12769() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest25.test12769");
        org.apache.rat.configuration.builders.CopyrightBuilder copyrightBuilder0 = org.apache.rat.analysis.IHeaderMatcher.Builder.copyright();
        org.apache.rat.configuration.builders.CopyrightBuilder copyrightBuilder2 = copyrightBuilder0.setStart("OASIS");
        org.apache.rat.analysis.IHeaderMatcher iHeaderMatcher3 = copyrightBuilder0.build();
        org.apache.rat.analysis.IHeaderMatcher.State state4 = iHeaderMatcher3.finalizeState();
        java.lang.String str5 = state4.toString();
        org.junit.Assert.assertNotNull(copyrightBuilder0);
        org.junit.Assert.assertNotNull(copyrightBuilder2);
        org.junit.Assert.assertNotNull(iHeaderMatcher3);
        org.junit.Assert.assertTrue("'" + state4 + "' != '" + org.apache.rat.analysis.IHeaderMatcher.State.f + "'", state4.equals(org.apache.rat.analysis.IHeaderMatcher.State.f));
        org.junit.Assert.assertEquals("'" + str5 + "' != '" + "f false" + "'", str5, "f false");
    }

    @Test
    public void test12770() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest25.test12770");
        org.apache.rat.analysis.matchers.FullTextMatcher fullTextMatcher2 = new org.apache.rat.analysis.matchers.FullTextMatcher("TMF  ", "Apache License Version 2.0");
        org.apache.rat.analysis.IHeaderMatcher.State state3 = fullTextMatcher2.finalizeState();
        fullTextMatcher2.reset();
        fullTextMatcher2.reset();
        boolean boolean7 = fullTextMatcher2.doMatch("org/apache/rat/plain-rat.xsl");
        java.lang.String str8 = fullTextMatcher2.getId();
        org.junit.Assert.assertTrue("'" + state3 + "' != '" + org.apache.rat.analysis.IHeaderMatcher.State.f + "'", state3.equals(org.apache.rat.analysis.IHeaderMatcher.State.f));
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "TMF  " + "'", str8, "TMF  ");
    }

    @Test
    public void test12771() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest25.test12771");
        java.lang.String[] strArray10 = org.apache.commons.io.filefilter.IOFileFilter.EMPTY_STRING_ARRAY;
        boolean boolean11 = org.apache.rat.document.impl.guesser.BinaryGuesser.extensionMatches("Copyright Builder: s:null e:.cvsignore o:null", strArray10);
        boolean boolean12 = org.apache.rat.document.impl.guesser.BinaryGuesser.containsExtension("http://org/apache/rat/meta-data#HeaderCategory", strArray10);
        boolean boolean13 = org.apache.rat.document.impl.guesser.BinaryGuesser.extensionMatches("NotBuilder: MathcerRefBuilder: null", strArray10);
        boolean boolean14 = org.apache.rat.document.impl.guesser.BinaryGuesser.extensionMatches("Datum [ name ='http://org/apache/rat/meta-data#LicenseFamilyCategory',value ='GPL1  ']", strArray10);
        boolean boolean15 = org.apache.rat.document.impl.guesser.BinaryGuesser.containsExtension("true", strArray10);
        boolean boolean16 = org.apache.rat.document.impl.guesser.BinaryGuesser.extensionMatches("3a9308bd-e9ee-4b6a-bbac-7bb1dfd181d8", strArray10);
        boolean boolean17 = org.apache.rat.document.impl.guesser.BinaryGuesser.containsExtension("f8ffb5f5-053b-4c2d-b24f-60f90a9ced52", strArray10);
        boolean boolean18 = org.apache.rat.document.impl.guesser.BinaryGuesser.extensionMatches("bb19fbac-b846-4793-a7d7-77a7e009c631", strArray10);
        boolean boolean19 = org.apache.rat.document.impl.guesser.BinaryGuesser.extensionMatches("", strArray10);
        boolean boolean20 = org.apache.rat.document.impl.guesser.BinaryGuesser.containsExtension("RegexBuilder: MathcerRefBuilder: Datum [ name ='http://org/apache/rat/meta-data#LicenseFamilyName',value ='Academic Free License, Version 2.1 ']", strArray10);
        org.junit.Assert.assertNotNull(strArray10);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + false + "'", boolean15 == false);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + false + "'", boolean17 == false);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + false + "'", boolean18 == false);
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + false + "'", boolean19 == false);
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + false + "'", boolean20 == false);
    }

    @Test
    public void test12772() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest25.test12772");
        org.apache.rat.utils.Log log0 = null;
        org.apache.rat.ReportConfiguration reportConfiguration1 = new org.apache.rat.ReportConfiguration(log0);
        java.io.FilenameFilter filenameFilter2 = reportConfiguration1.getInputFileFilter();
        org.apache.rat.license.LicenseSetFactory.LicenseFilter licenseFilter3 = org.apache.rat.license.LicenseSetFactory.LicenseFilter.all;
        java.util.SortedSet<org.apache.rat.license.ILicense> iLicenseSet4 = reportConfiguration1.getLicenses(licenseFilter3);
        org.apache.rat.config.AddLicenseHeaders addLicenseHeaders5 = org.apache.rat.config.AddLicenseHeaders.FALSE;
        reportConfiguration1.setAddLicenseHeaders(addLicenseHeaders5);
        org.apache.rat.utils.Log log7 = null;
        org.apache.rat.ReportConfiguration reportConfiguration8 = new org.apache.rat.ReportConfiguration(log7);
        org.apache.rat.report.claim.ClaimStatistic claimStatistic9 = org.apache.rat.Reporter.report(reportConfiguration8);
        org.apache.rat.license.LicenseSetFactory.LicenseFilter licenseFilter10 = org.apache.rat.license.LicenseSetFactory.LicenseFilter.all;
        org.apache.rat.Reporter.listLicenses(reportConfiguration8, licenseFilter10);
        org.apache.rat.Reporter.listLicenses(reportConfiguration1, licenseFilter10);
        reportConfiguration1.addApprovedLicenseCategory("W3C Software Copyright");
        org.apache.rat.report.IReportable iReportable15 = null;
        reportConfiguration1.setReportable(iReportable15);
        java.lang.String str17 = reportConfiguration1.getCopyrightMessage();
        java.io.File file18 = null;
        // The following exception was thrown during execution in test generation
        try {
            reportConfiguration1.setOut(file18);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: output file should not be null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNull(filenameFilter2);
        org.junit.Assert.assertTrue("'" + licenseFilter3 + "' != '" + org.apache.rat.license.LicenseSetFactory.LicenseFilter.all + "'", licenseFilter3.equals(org.apache.rat.license.LicenseSetFactory.LicenseFilter.all));
        org.junit.Assert.assertNotNull(iLicenseSet4);
        org.junit.Assert.assertTrue("'" + addLicenseHeaders5 + "' != '" + org.apache.rat.config.AddLicenseHeaders.FALSE + "'", addLicenseHeaders5.equals(org.apache.rat.config.AddLicenseHeaders.FALSE));
        org.junit.Assert.assertNull(claimStatistic9);
        org.junit.Assert.assertTrue("'" + licenseFilter10 + "' != '" + org.apache.rat.license.LicenseSetFactory.LicenseFilter.all + "'", licenseFilter10.equals(org.apache.rat.license.LicenseSetFactory.LicenseFilter.all));
        org.junit.Assert.assertNull(str17);
    }

    @Test
    public void test12773() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest25.test12773");
        org.apache.rat.license.ILicenseFamilyBuilder iLicenseFamilyBuilder0 = new org.apache.rat.license.ILicenseFamilyBuilder();
        java.lang.String str1 = iLicenseFamilyBuilder0.getCategory();
        org.apache.rat.license.ILicenseFamily.Builder builder3 = iLicenseFamilyBuilder0.setLicenseFamilyCategory("AL   ");
        java.lang.String str4 = iLicenseFamilyBuilder0.getCategory();
        java.lang.String str5 = iLicenseFamilyBuilder0.getCategory();
        org.apache.rat.license.ILicenseFamily.Builder builder7 = iLicenseFamilyBuilder0.setLicenseFamilyName("httporgapacheratmetadataLicenseFamilyName");
        java.lang.String str8 = builder7.getCategory();
        org.apache.rat.license.ILicenseFamily iLicenseFamily9 = builder7.build();
        org.apache.rat.analysis.license.FullTextMatchingLicense fullTextMatchingLicense10 = new org.apache.rat.analysis.license.FullTextMatchingLicense();
        fullTextMatchingLicense10.setLicenseFamilyName("hi!");
        fullTextMatchingLicense10.setLicenseFamilyCategory("binary");
        org.apache.rat.license.ILicenseFamily iLicenseFamily15 = fullTextMatchingLicense10.getLicenseFamily();
        java.lang.String str16 = iLicenseFamily15.getFamilyCategory();
        org.apache.rat.license.ILicenseFamilyBuilder iLicenseFamilyBuilder17 = new org.apache.rat.license.ILicenseFamilyBuilder();
        org.apache.rat.license.ILicenseFamily.Builder builder19 = iLicenseFamilyBuilder17.setLicenseFamilyCategory("Modified BSD License");
        org.apache.rat.license.ILicenseFamily.Builder builder21 = iLicenseFamilyBuilder17.setLicenseFamilyCategory("6486879f-fc81-4b57-aec7-c4c77d540c30");
        org.apache.rat.license.ILicenseFamily.Builder builder23 = iLicenseFamilyBuilder17.setLicenseFamilyName("MathcerRefBuilder: ");
        org.apache.rat.license.ILicenseFamily.Builder builder25 = iLicenseFamilyBuilder17.setLicenseFamilyName("Copyright Builder: s:6481fb19-38f0-43f5-ab95-caf84a069ee1 e:null o:null");
        org.apache.rat.license.ILicenseFamily iLicenseFamily26 = iLicenseFamilyBuilder17.build();
        int int27 = iLicenseFamily15.compareTo(iLicenseFamily26);
        int int28 = iLicenseFamily9.compareTo(iLicenseFamily15);
        org.junit.Assert.assertNull(str1);
        org.junit.Assert.assertNotNull(builder3);
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "AL   " + "'", str4, "AL   ");
        org.junit.Assert.assertEquals("'" + str5 + "' != '" + "AL   " + "'", str5, "AL   ");
        org.junit.Assert.assertNotNull(builder7);
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "AL   " + "'", str8, "AL   ");
        org.junit.Assert.assertNotNull(iLicenseFamily9);
        org.junit.Assert.assertNotNull(iLicenseFamily15);
        org.junit.Assert.assertEquals("'" + str16 + "' != '" + "binar" + "'", str16, "binar");
        org.junit.Assert.assertNotNull(builder19);
        org.junit.Assert.assertNotNull(builder21);
        org.junit.Assert.assertNotNull(builder23);
        org.junit.Assert.assertNotNull(builder25);
        org.junit.Assert.assertNotNull(iLicenseFamily26);
        org.junit.Assert.assertTrue("'" + int27 + "' != '" + 44 + "'", int27 == 44);
        org.junit.Assert.assertTrue("'" + int28 + "' != '" + (-33) + "'", int28 == (-33));
    }

    @Test
    public void test12774() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest25.test12774");
        org.apache.rat.utils.DefaultLog defaultLog0 = org.apache.rat.utils.DefaultLog.INSTANCE;
        org.apache.rat.license.ILicense.Builder builder1 = org.apache.rat.license.ILicense.builder();
        org.apache.rat.license.ILicense.Builder builder3 = builder1.setLicenseFamilyCategory("");
        org.apache.rat.analysis.matchers.CopyrightMatcher copyrightMatcher7 = new org.apache.rat.analysis.matchers.CopyrightMatcher("", "GPL1 ", "hi!");
        org.apache.rat.analysis.IHeaderMatcher.State state8 = copyrightMatcher7.finalizeState();
        org.apache.rat.license.ILicense.Builder builder9 = builder3.setMatcher((org.apache.rat.analysis.IHeaderMatcher) copyrightMatcher7);
        org.apache.rat.license.ILicense.Builder builder11 = builder9.setLicenseFamilyCategory("");
        defaultLog0.error((java.lang.Object) builder11);
        org.apache.rat.utils.Log log13 = null;
        org.apache.rat.ReportConfiguration reportConfiguration14 = new org.apache.rat.ReportConfiguration(log13);
        java.io.FilenameFilter filenameFilter15 = reportConfiguration14.getInputFileFilter();
        org.apache.rat.license.LicenseSetFactory.LicenseFilter licenseFilter16 = org.apache.rat.license.LicenseSetFactory.LicenseFilter.all;
        java.util.SortedSet<org.apache.rat.license.ILicense> iLicenseSet17 = reportConfiguration14.getLicenses(licenseFilter16);
        org.apache.rat.config.AddLicenseHeaders addLicenseHeaders18 = org.apache.rat.config.AddLicenseHeaders.FALSE;
        reportConfiguration14.setAddLicenseHeaders(addLicenseHeaders18);
        org.apache.rat.utils.Log log20 = null;
        org.apache.rat.ReportConfiguration reportConfiguration21 = new org.apache.rat.ReportConfiguration(log20);
        org.apache.rat.report.claim.ClaimStatistic claimStatistic22 = org.apache.rat.Reporter.report(reportConfiguration21);
        org.apache.rat.license.LicenseSetFactory.LicenseFilter licenseFilter23 = org.apache.rat.license.LicenseSetFactory.LicenseFilter.all;
        org.apache.rat.Reporter.listLicenses(reportConfiguration21, licenseFilter23);
        org.apache.rat.Reporter.listLicenses(reportConfiguration14, licenseFilter23);
        org.apache.rat.utils.Log log26 = null;
        org.apache.rat.ReportConfiguration reportConfiguration27 = new org.apache.rat.ReportConfiguration(log26);
        java.io.FilenameFilter filenameFilter28 = reportConfiguration27.getInputFileFilter();
        org.apache.rat.license.LicenseSetFactory.LicenseFilter licenseFilter29 = org.apache.rat.license.LicenseSetFactory.LicenseFilter.all;
        java.util.SortedSet<org.apache.rat.license.ILicense> iLicenseSet30 = reportConfiguration27.getLicenses(licenseFilter29);
        org.apache.rat.config.AddLicenseHeaders addLicenseHeaders31 = org.apache.rat.config.AddLicenseHeaders.FALSE;
        reportConfiguration27.setAddLicenseHeaders(addLicenseHeaders31);
        org.apache.rat.utils.Log log33 = null;
        org.apache.rat.ReportConfiguration reportConfiguration34 = new org.apache.rat.ReportConfiguration(log33);
        org.apache.rat.report.claim.ClaimStatistic claimStatistic35 = org.apache.rat.Reporter.report(reportConfiguration34);
        org.apache.rat.license.LicenseSetFactory.LicenseFilter licenseFilter36 = org.apache.rat.license.LicenseSetFactory.LicenseFilter.all;
        org.apache.rat.Reporter.listLicenses(reportConfiguration34, licenseFilter36);
        org.apache.rat.Reporter.listLicenses(reportConfiguration27, licenseFilter36);
        org.apache.rat.Reporter.listLicenses(reportConfiguration14, licenseFilter36);
        org.apache.rat.utils.Log log40 = null;
        org.apache.rat.ReportConfiguration reportConfiguration41 = new org.apache.rat.ReportConfiguration(log40);
        org.apache.commons.io.function.IOSupplier<java.io.OutputStream> outputStreamIOSupplier42 = reportConfiguration41.getOutput();
        reportConfiguration14.setOut(outputStreamIOSupplier42);
        org.apache.rat.utils.Log.Level level44 = org.apache.rat.utils.Log.Level.WARN;
        reportConfiguration14.logLicenseCollisions(level44);
        defaultLog0.warn((java.lang.Object) level44);
        defaultLog0.info((java.lang.Object) "TextBuilder: Datum [ name ='http:...");
        org.apache.rat.utils.DefaultLog defaultLog49 = org.apache.rat.utils.DefaultLog.INSTANCE;
        org.apache.rat.license.ILicense.Builder builder50 = org.apache.rat.license.ILicense.builder();
        org.apache.rat.license.ILicense.Builder builder52 = builder50.setLicenseFamilyCategory("");
        org.apache.rat.analysis.matchers.CopyrightMatcher copyrightMatcher56 = new org.apache.rat.analysis.matchers.CopyrightMatcher("", "GPL1 ", "hi!");
        org.apache.rat.analysis.IHeaderMatcher.State state57 = copyrightMatcher56.finalizeState();
        org.apache.rat.license.ILicense.Builder builder58 = builder52.setMatcher((org.apache.rat.analysis.IHeaderMatcher) copyrightMatcher56);
        org.apache.rat.license.ILicense.Builder builder60 = builder58.setLicenseFamilyCategory("");
        defaultLog49.error((java.lang.Object) builder60);
        org.apache.rat.utils.Log.Level level62 = org.apache.rat.utils.Log.Level.INFO;
        defaultLog49.log(level62, "JAVA");
        org.apache.rat.utils.Log.Level level65 = org.apache.rat.utils.Log.Level.WARN;
        defaultLog49.log(level65, "");
        org.apache.rat.license.ILicense.Builder builder68 = org.apache.rat.license.ILicense.builder();
        org.apache.rat.license.ILicense.Builder builder70 = builder68.setLicenseFamilyCategory("");
        org.apache.rat.analysis.matchers.FullTextMatcher fullTextMatcher72 = new org.apache.rat.analysis.matchers.FullTextMatcher("ef7a8b13-64c3-4510-bb0c-dbf208e1e73f");
        org.apache.rat.license.ILicense.Builder builder73 = builder68.setMatcher((org.apache.rat.analysis.IHeaderMatcher) fullTextMatcher72);
        org.apache.rat.license.ILicense.Builder builder75 = builder73.setLicenseFamilyCategory("httporgapacheratmetadataLicenseFamilyName");
        org.apache.rat.license.ILicense.Builder builder77 = builder73.setNotes("d25f13bc-1910-4451-97b5-b72663551a5d");
        defaultLog49.error((java.lang.Object) builder77);
        defaultLog0.debug((java.lang.Object) defaultLog49);
        org.apache.rat.annotation.ApacheV2LicenseAppender apacheV2LicenseAppender81 = new org.apache.rat.annotation.ApacheV2LicenseAppender((org.apache.rat.utils.Log) defaultLog49, "468725e6-3745-47e3-807f-06bc0b3c3beb");
        org.junit.Assert.assertNotNull(defaultLog0);
        org.junit.Assert.assertNotNull(builder1);
        org.junit.Assert.assertNotNull(builder3);
        org.junit.Assert.assertTrue("'" + state8 + "' != '" + org.apache.rat.analysis.IHeaderMatcher.State.f + "'", state8.equals(org.apache.rat.analysis.IHeaderMatcher.State.f));
        org.junit.Assert.assertNotNull(builder9);
        org.junit.Assert.assertNotNull(builder11);
        org.junit.Assert.assertNull(filenameFilter15);
        org.junit.Assert.assertTrue("'" + licenseFilter16 + "' != '" + org.apache.rat.license.LicenseSetFactory.LicenseFilter.all + "'", licenseFilter16.equals(org.apache.rat.license.LicenseSetFactory.LicenseFilter.all));
        org.junit.Assert.assertNotNull(iLicenseSet17);
        org.junit.Assert.assertTrue("'" + addLicenseHeaders18 + "' != '" + org.apache.rat.config.AddLicenseHeaders.FALSE + "'", addLicenseHeaders18.equals(org.apache.rat.config.AddLicenseHeaders.FALSE));
        org.junit.Assert.assertNull(claimStatistic22);
        org.junit.Assert.assertTrue("'" + licenseFilter23 + "' != '" + org.apache.rat.license.LicenseSetFactory.LicenseFilter.all + "'", licenseFilter23.equals(org.apache.rat.license.LicenseSetFactory.LicenseFilter.all));
        org.junit.Assert.assertNull(filenameFilter28);
        org.junit.Assert.assertTrue("'" + licenseFilter29 + "' != '" + org.apache.rat.license.LicenseSetFactory.LicenseFilter.all + "'", licenseFilter29.equals(org.apache.rat.license.LicenseSetFactory.LicenseFilter.all));
        org.junit.Assert.assertNotNull(iLicenseSet30);
        org.junit.Assert.assertTrue("'" + addLicenseHeaders31 + "' != '" + org.apache.rat.config.AddLicenseHeaders.FALSE + "'", addLicenseHeaders31.equals(org.apache.rat.config.AddLicenseHeaders.FALSE));
        org.junit.Assert.assertNull(claimStatistic35);
        org.junit.Assert.assertTrue("'" + licenseFilter36 + "' != '" + org.apache.rat.license.LicenseSetFactory.LicenseFilter.all + "'", licenseFilter36.equals(org.apache.rat.license.LicenseSetFactory.LicenseFilter.all));
        org.junit.Assert.assertNotNull(outputStreamIOSupplier42);
        org.junit.Assert.assertTrue("'" + level44 + "' != '" + org.apache.rat.utils.Log.Level.WARN + "'", level44.equals(org.apache.rat.utils.Log.Level.WARN));
        org.junit.Assert.assertNotNull(defaultLog49);
        org.junit.Assert.assertNotNull(builder50);
        org.junit.Assert.assertNotNull(builder52);
        org.junit.Assert.assertTrue("'" + state57 + "' != '" + org.apache.rat.analysis.IHeaderMatcher.State.f + "'", state57.equals(org.apache.rat.analysis.IHeaderMatcher.State.f));
        org.junit.Assert.assertNotNull(builder58);
        org.junit.Assert.assertNotNull(builder60);
        org.junit.Assert.assertTrue("'" + level62 + "' != '" + org.apache.rat.utils.Log.Level.INFO + "'", level62.equals(org.apache.rat.utils.Log.Level.INFO));
        org.junit.Assert.assertTrue("'" + level65 + "' != '" + org.apache.rat.utils.Log.Level.WARN + "'", level65.equals(org.apache.rat.utils.Log.Level.WARN));
        org.junit.Assert.assertNotNull(builder68);
        org.junit.Assert.assertNotNull(builder70);
        org.junit.Assert.assertNotNull(builder73);
        org.junit.Assert.assertNotNull(builder75);
        org.junit.Assert.assertNotNull(builder77);
    }

    @Test
    public void test12775() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest25.test12775");
        org.apache.rat.api.MetaData.Datum datum2 = new org.apache.rat.api.MetaData.Datum("9DF69CA9-2229-47B6-966B-221652FD7D08", "SpdxBuilder: null");
        java.lang.String str3 = datum2.toString();
        org.junit.Assert.assertEquals("'" + str3 + "' != '" + "Datum [ name ='9DF69CA9-2229-47B6-966B-221652FD7D08',value ='SpdxBuilder: null ']" + "'", str3, "Datum [ name ='9DF69CA9-2229-47B6-966B-221652FD7D08',value ='SpdxBuilder: null ']");
    }

    @Test
    public void test12776() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest25.test12776");
        org.apache.rat.configuration.builders.TextBuilder textBuilder0 = org.apache.rat.analysis.IHeaderMatcher.Builder.text();
        org.apache.rat.configuration.builders.TextBuilder textBuilder2 = textBuilder0.setText("");
        org.apache.rat.configuration.builders.TextBuilder textBuilder4 = textBuilder0.setText("Datum [ name ='http://org/apache/rat/meta-data#LicenseFamilyCategory',value ='DOJO  ']");
        org.apache.rat.configuration.builders.TextBuilder textBuilder6 = textBuilder0.setText("Copyright Builder: s:null e:ba9961f9-a0de-4a54-bd1f-a2e9df26a188 o:The MIT License");
        org.apache.rat.analysis.IHeaderMatcher iHeaderMatcher7 = textBuilder6.build();
        org.apache.rat.configuration.builders.TextCaptureBuilder textCaptureBuilder9 = textBuilder6.setText("36f60d10-a0bd-4355-a2a6-3635adf29872");
        org.apache.rat.configuration.builders.TextBuilder textBuilder11 = textBuilder6.setText("RegexBuilder: 22d821a7-325b-4a40-8f38-f9cfc616d71a");
        org.junit.Assert.assertNotNull(textBuilder0);
        org.junit.Assert.assertNotNull(textBuilder2);
        org.junit.Assert.assertNotNull(textBuilder4);
        org.junit.Assert.assertNotNull(textBuilder6);
        org.junit.Assert.assertNotNull(iHeaderMatcher7);
        org.junit.Assert.assertNotNull(textCaptureBuilder9);
        org.junit.Assert.assertNotNull(textBuilder11);
    }

    @Test
    public void test12777() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest25.test12777");
        org.apache.rat.utils.Log log0 = null;
        org.apache.rat.ReportConfiguration reportConfiguration1 = new org.apache.rat.ReportConfiguration(log0);
        java.io.FilenameFilter filenameFilter2 = reportConfiguration1.getInputFileFilter();
        org.apache.rat.license.LicenseSetFactory.LicenseFilter licenseFilter3 = org.apache.rat.license.LicenseSetFactory.LicenseFilter.all;
        java.util.SortedSet<org.apache.rat.license.ILicense> iLicenseSet4 = reportConfiguration1.getLicenses(licenseFilter3);
        org.apache.commons.io.function.IOSupplier<java.io.InputStream> inputStreamIOSupplier5 = reportConfiguration1.getStyleSheet();
        org.apache.rat.utils.Log log6 = null;
        org.apache.rat.ReportConfiguration reportConfiguration7 = new org.apache.rat.ReportConfiguration(log6);
        reportConfiguration7.addApprovedLicenseCategory(".cvsignore");
        org.apache.rat.utils.Log.Level level10 = org.apache.rat.utils.Log.Level.ERROR;
        reportConfiguration7.logLicenseCollisions(level10);
        org.apache.rat.utils.Log log12 = null;
        org.apache.rat.ReportConfiguration reportConfiguration13 = new org.apache.rat.ReportConfiguration(log12);
        java.io.FilenameFilter filenameFilter14 = reportConfiguration13.getInputFileFilter();
        org.apache.rat.license.LicenseSetFactory.LicenseFilter licenseFilter15 = org.apache.rat.license.LicenseSetFactory.LicenseFilter.all;
        java.util.SortedSet<org.apache.rat.license.ILicense> iLicenseSet16 = reportConfiguration13.getLicenses(licenseFilter15);
        org.apache.rat.config.AddLicenseHeaders addLicenseHeaders17 = org.apache.rat.config.AddLicenseHeaders.FALSE;
        reportConfiguration13.setAddLicenseHeaders(addLicenseHeaders17);
        org.apache.rat.utils.Log log19 = null;
        org.apache.rat.ReportConfiguration reportConfiguration20 = new org.apache.rat.ReportConfiguration(log19);
        org.apache.rat.report.claim.ClaimStatistic claimStatistic21 = org.apache.rat.Reporter.report(reportConfiguration20);
        org.apache.rat.license.LicenseSetFactory.LicenseFilter licenseFilter22 = org.apache.rat.license.LicenseSetFactory.LicenseFilter.all;
        org.apache.rat.Reporter.listLicenses(reportConfiguration20, licenseFilter22);
        org.apache.rat.Reporter.listLicenses(reportConfiguration13, licenseFilter22);
        org.apache.rat.utils.Log log25 = null;
        org.apache.rat.ReportConfiguration reportConfiguration26 = new org.apache.rat.ReportConfiguration(log25);
        java.io.FilenameFilter filenameFilter27 = reportConfiguration26.getInputFileFilter();
        org.apache.rat.license.LicenseSetFactory.LicenseFilter licenseFilter28 = org.apache.rat.license.LicenseSetFactory.LicenseFilter.all;
        java.util.SortedSet<org.apache.rat.license.ILicense> iLicenseSet29 = reportConfiguration26.getLicenses(licenseFilter28);
        org.apache.rat.config.AddLicenseHeaders addLicenseHeaders30 = org.apache.rat.config.AddLicenseHeaders.FALSE;
        reportConfiguration26.setAddLicenseHeaders(addLicenseHeaders30);
        org.apache.rat.utils.Log log32 = null;
        org.apache.rat.ReportConfiguration reportConfiguration33 = new org.apache.rat.ReportConfiguration(log32);
        org.apache.rat.report.claim.ClaimStatistic claimStatistic34 = org.apache.rat.Reporter.report(reportConfiguration33);
        org.apache.rat.license.LicenseSetFactory.LicenseFilter licenseFilter35 = org.apache.rat.license.LicenseSetFactory.LicenseFilter.all;
        org.apache.rat.Reporter.listLicenses(reportConfiguration33, licenseFilter35);
        org.apache.rat.Reporter.listLicenses(reportConfiguration26, licenseFilter35);
        java.util.SortedSet<org.apache.rat.license.ILicenseFamily> iLicenseFamilySet38 = reportConfiguration13.getLicenseFamilies(licenseFilter35);
        org.apache.rat.utils.Log log39 = null;
        org.apache.rat.ReportConfiguration reportConfiguration40 = new org.apache.rat.ReportConfiguration(log39);
        java.io.FilenameFilter filenameFilter41 = reportConfiguration40.getInputFileFilter();
        org.apache.rat.license.LicenseSetFactory.LicenseFilter licenseFilter42 = org.apache.rat.license.LicenseSetFactory.LicenseFilter.all;
        java.util.SortedSet<org.apache.rat.license.ILicense> iLicenseSet43 = reportConfiguration40.getLicenses(licenseFilter42);
        org.apache.rat.config.AddLicenseHeaders addLicenseHeaders44 = org.apache.rat.config.AddLicenseHeaders.FALSE;
        reportConfiguration40.setAddLicenseHeaders(addLicenseHeaders44);
        reportConfiguration13.setAddLicenseHeaders(addLicenseHeaders44);
        reportConfiguration7.setAddLicenseHeaders(addLicenseHeaders44);
        reportConfiguration1.setAddLicenseHeaders(addLicenseHeaders44);
        org.apache.rat.utils.Log log49 = null;
        org.apache.rat.ReportConfiguration reportConfiguration50 = new org.apache.rat.ReportConfiguration(log49);
        org.apache.rat.report.claim.ClaimStatistic claimStatistic51 = org.apache.rat.Reporter.report(reportConfiguration50);
        org.apache.rat.utils.ReportingSet.Options options52 = org.apache.rat.utils.ReportingSet.Options.OVERWRITE;
        reportConfiguration50.licenseDuplicateOption(options52);
        reportConfiguration1.familyDuplicateOption(options52);
        java.io.File file55 = null;
        // The following exception was thrown during execution in test generation
        try {
            reportConfiguration1.setOut(file55);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: output file should not be null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNull(filenameFilter2);
        org.junit.Assert.assertTrue("'" + licenseFilter3 + "' != '" + org.apache.rat.license.LicenseSetFactory.LicenseFilter.all + "'", licenseFilter3.equals(org.apache.rat.license.LicenseSetFactory.LicenseFilter.all));
        org.junit.Assert.assertNotNull(iLicenseSet4);
        org.junit.Assert.assertNull(inputStreamIOSupplier5);
        org.junit.Assert.assertTrue("'" + level10 + "' != '" + org.apache.rat.utils.Log.Level.ERROR + "'", level10.equals(org.apache.rat.utils.Log.Level.ERROR));
        org.junit.Assert.assertNull(filenameFilter14);
        org.junit.Assert.assertTrue("'" + licenseFilter15 + "' != '" + org.apache.rat.license.LicenseSetFactory.LicenseFilter.all + "'", licenseFilter15.equals(org.apache.rat.license.LicenseSetFactory.LicenseFilter.all));
        org.junit.Assert.assertNotNull(iLicenseSet16);
        org.junit.Assert.assertTrue("'" + addLicenseHeaders17 + "' != '" + org.apache.rat.config.AddLicenseHeaders.FALSE + "'", addLicenseHeaders17.equals(org.apache.rat.config.AddLicenseHeaders.FALSE));
        org.junit.Assert.assertNull(claimStatistic21);
        org.junit.Assert.assertTrue("'" + licenseFilter22 + "' != '" + org.apache.rat.license.LicenseSetFactory.LicenseFilter.all + "'", licenseFilter22.equals(org.apache.rat.license.LicenseSetFactory.LicenseFilter.all));
        org.junit.Assert.assertNull(filenameFilter27);
        org.junit.Assert.assertTrue("'" + licenseFilter28 + "' != '" + org.apache.rat.license.LicenseSetFactory.LicenseFilter.all + "'", licenseFilter28.equals(org.apache.rat.license.LicenseSetFactory.LicenseFilter.all));
        org.junit.Assert.assertNotNull(iLicenseSet29);
        org.junit.Assert.assertTrue("'" + addLicenseHeaders30 + "' != '" + org.apache.rat.config.AddLicenseHeaders.FALSE + "'", addLicenseHeaders30.equals(org.apache.rat.config.AddLicenseHeaders.FALSE));
        org.junit.Assert.assertNull(claimStatistic34);
        org.junit.Assert.assertTrue("'" + licenseFilter35 + "' != '" + org.apache.rat.license.LicenseSetFactory.LicenseFilter.all + "'", licenseFilter35.equals(org.apache.rat.license.LicenseSetFactory.LicenseFilter.all));
        org.junit.Assert.assertNotNull(iLicenseFamilySet38);
        org.junit.Assert.assertNull(filenameFilter41);
        org.junit.Assert.assertTrue("'" + licenseFilter42 + "' != '" + org.apache.rat.license.LicenseSetFactory.LicenseFilter.all + "'", licenseFilter42.equals(org.apache.rat.license.LicenseSetFactory.LicenseFilter.all));
        org.junit.Assert.assertNotNull(iLicenseSet43);
        org.junit.Assert.assertTrue("'" + addLicenseHeaders44 + "' != '" + org.apache.rat.config.AddLicenseHeaders.FALSE + "'", addLicenseHeaders44.equals(org.apache.rat.config.AddLicenseHeaders.FALSE));
        org.junit.Assert.assertNull(claimStatistic51);
        org.junit.Assert.assertTrue("'" + options52 + "' != '" + org.apache.rat.utils.ReportingSet.Options.OVERWRITE + "'", options52.equals(org.apache.rat.utils.ReportingSet.Options.OVERWRITE));
    }

    @Test
    public void test12778() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest25.test12778");
        org.apache.rat.license.ILicenseFamilyBuilder iLicenseFamilyBuilder0 = new org.apache.rat.license.ILicenseFamilyBuilder();
        java.lang.String str1 = iLicenseFamilyBuilder0.getCategory();
        org.apache.rat.license.ILicenseFamily.Builder builder3 = iLicenseFamilyBuilder0.setLicenseFamilyCategory("false");
        java.lang.String str4 = iLicenseFamilyBuilder0.getCategory();
        org.apache.rat.license.ILicenseFamily.Builder builder6 = iLicenseFamilyBuilder0.setLicenseFamilyCategory("http:");
        java.lang.String str7 = iLicenseFamilyBuilder0.getCategory();
        org.apache.rat.license.ILicenseFamily.Builder builder9 = iLicenseFamilyBuilder0.setLicenseFamilyCategory("4a136a49-c8f2-4e38-a50d-743a9b9691ed");
        // The following exception was thrown during execution in test generation
        try {
            org.apache.rat.license.ILicenseFamily iLicenseFamily10 = iLicenseFamilyBuilder0.build();
            org.junit.Assert.fail("Expected exception of type org.apache.rat.ConfigurationException; message: LicenseFamily Name must be specified");
        } catch (org.apache.rat.ConfigurationException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNull(str1);
        org.junit.Assert.assertNotNull(builder3);
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "false" + "'", str4, "false");
        org.junit.Assert.assertNotNull(builder6);
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "http:" + "'", str7, "http:");
        org.junit.Assert.assertNotNull(builder9);
    }

    @Test
    public void test12779() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest25.test12779");
        org.apache.rat.utils.DefaultLog defaultLog0 = org.apache.rat.utils.DefaultLog.INSTANCE;
        org.apache.rat.license.ILicense.Builder builder1 = org.apache.rat.license.ILicense.builder();
        org.apache.rat.license.ILicense.Builder builder3 = builder1.setLicenseFamilyCategory("");
        org.apache.rat.analysis.matchers.CopyrightMatcher copyrightMatcher7 = new org.apache.rat.analysis.matchers.CopyrightMatcher("", "GPL1 ", "hi!");
        org.apache.rat.analysis.IHeaderMatcher.State state8 = copyrightMatcher7.finalizeState();
        org.apache.rat.license.ILicense.Builder builder9 = builder3.setMatcher((org.apache.rat.analysis.IHeaderMatcher) copyrightMatcher7);
        org.apache.rat.license.ILicense.Builder builder11 = builder9.setLicenseFamilyCategory("");
        defaultLog0.error((java.lang.Object) builder11);
        org.apache.rat.utils.Log log13 = null;
        org.apache.rat.ReportConfiguration reportConfiguration14 = new org.apache.rat.ReportConfiguration(log13);
        java.io.FilenameFilter filenameFilter15 = reportConfiguration14.getInputFileFilter();
        org.apache.rat.license.LicenseSetFactory.LicenseFilter licenseFilter16 = org.apache.rat.license.LicenseSetFactory.LicenseFilter.all;
        java.util.SortedSet<org.apache.rat.license.ILicense> iLicenseSet17 = reportConfiguration14.getLicenses(licenseFilter16);
        org.apache.rat.config.AddLicenseHeaders addLicenseHeaders18 = org.apache.rat.config.AddLicenseHeaders.FALSE;
        reportConfiguration14.setAddLicenseHeaders(addLicenseHeaders18);
        org.apache.rat.utils.Log log20 = null;
        org.apache.rat.ReportConfiguration reportConfiguration21 = new org.apache.rat.ReportConfiguration(log20);
        org.apache.rat.report.claim.ClaimStatistic claimStatistic22 = org.apache.rat.Reporter.report(reportConfiguration21);
        org.apache.rat.license.LicenseSetFactory.LicenseFilter licenseFilter23 = org.apache.rat.license.LicenseSetFactory.LicenseFilter.all;
        org.apache.rat.Reporter.listLicenses(reportConfiguration21, licenseFilter23);
        org.apache.rat.Reporter.listLicenses(reportConfiguration14, licenseFilter23);
        org.apache.rat.utils.Log log26 = null;
        org.apache.rat.ReportConfiguration reportConfiguration27 = new org.apache.rat.ReportConfiguration(log26);
        java.io.FilenameFilter filenameFilter28 = reportConfiguration27.getInputFileFilter();
        org.apache.rat.license.LicenseSetFactory.LicenseFilter licenseFilter29 = org.apache.rat.license.LicenseSetFactory.LicenseFilter.all;
        java.util.SortedSet<org.apache.rat.license.ILicense> iLicenseSet30 = reportConfiguration27.getLicenses(licenseFilter29);
        org.apache.rat.config.AddLicenseHeaders addLicenseHeaders31 = org.apache.rat.config.AddLicenseHeaders.FALSE;
        reportConfiguration27.setAddLicenseHeaders(addLicenseHeaders31);
        org.apache.rat.utils.Log log33 = null;
        org.apache.rat.ReportConfiguration reportConfiguration34 = new org.apache.rat.ReportConfiguration(log33);
        org.apache.rat.report.claim.ClaimStatistic claimStatistic35 = org.apache.rat.Reporter.report(reportConfiguration34);
        org.apache.rat.license.LicenseSetFactory.LicenseFilter licenseFilter36 = org.apache.rat.license.LicenseSetFactory.LicenseFilter.all;
        org.apache.rat.Reporter.listLicenses(reportConfiguration34, licenseFilter36);
        org.apache.rat.Reporter.listLicenses(reportConfiguration27, licenseFilter36);
        org.apache.rat.Reporter.listLicenses(reportConfiguration14, licenseFilter36);
        org.apache.rat.utils.Log log40 = null;
        org.apache.rat.ReportConfiguration reportConfiguration41 = new org.apache.rat.ReportConfiguration(log40);
        org.apache.commons.io.function.IOSupplier<java.io.OutputStream> outputStreamIOSupplier42 = reportConfiguration41.getOutput();
        reportConfiguration14.setOut(outputStreamIOSupplier42);
        org.apache.rat.utils.Log.Level level44 = org.apache.rat.utils.Log.Level.WARN;
        reportConfiguration14.logLicenseCollisions(level44);
        defaultLog0.warn((java.lang.Object) level44);
        defaultLog0.info((java.lang.Object) "TextBuilder: Datum [ name ='http:...");
        org.apache.rat.utils.Log log49 = null;
        org.apache.rat.ReportConfiguration reportConfiguration50 = new org.apache.rat.ReportConfiguration(log49);
        java.io.FilenameFilter filenameFilter51 = reportConfiguration50.getInputFileFilter();
        org.apache.rat.license.LicenseSetFactory.LicenseFilter licenseFilter52 = org.apache.rat.license.LicenseSetFactory.LicenseFilter.all;
        java.util.SortedSet<org.apache.rat.license.ILicense> iLicenseSet53 = reportConfiguration50.getLicenses(licenseFilter52);
        org.apache.rat.license.ILicenseFamily iLicenseFamily54 = null;
        reportConfiguration50.addFamily(iLicenseFamily54);
        reportConfiguration50.setCopyrightMessage("hi!");
        defaultLog0.error((java.lang.Object) reportConfiguration50);
        org.apache.rat.utils.DefaultLog defaultLog59 = org.apache.rat.utils.DefaultLog.INSTANCE;
        org.apache.rat.annotation.ApacheV2LicenseAppender apacheV2LicenseAppender60 = new org.apache.rat.annotation.ApacheV2LicenseAppender((org.apache.rat.utils.Log) defaultLog59);
        org.apache.rat.utils.Log log61 = null;
        org.apache.rat.ReportConfiguration reportConfiguration62 = new org.apache.rat.ReportConfiguration(log61);
        org.apache.rat.report.claim.ClaimStatistic claimStatistic63 = org.apache.rat.Reporter.report(reportConfiguration62);
        org.apache.rat.utils.Log log64 = null;
        org.apache.rat.ReportConfiguration reportConfiguration65 = new org.apache.rat.ReportConfiguration(log64);
        org.apache.rat.report.claim.ClaimStatistic claimStatistic66 = org.apache.rat.Reporter.report(reportConfiguration65);
        org.apache.rat.utils.ReportingSet.Options options67 = org.apache.rat.utils.ReportingSet.Options.OVERWRITE;
        reportConfiguration65.licenseDuplicateOption(options67);
        reportConfiguration62.familyDuplicateOption(options67);
        org.apache.commons.io.function.IOSupplier<java.io.PrintWriter> printWriterIOSupplier70 = reportConfiguration62.getWriter();
        org.apache.rat.utils.Log log71 = null;
        org.apache.rat.ReportConfiguration reportConfiguration72 = new org.apache.rat.ReportConfiguration(log71);
        reportConfiguration72.addApprovedLicenseCategory(".cvsignore");
        org.apache.rat.utils.Log.Level level75 = org.apache.rat.utils.Log.Level.ERROR;
        reportConfiguration72.logFamilyCollisions(level75);
        reportConfiguration62.logFamilyCollisions(level75);
        org.apache.rat.Defaults.Builder builder78 = org.apache.rat.Defaults.builder();
        org.apache.rat.Defaults.Builder builder79 = builder78.noDefault();
        defaultLog59.log(level75, (java.lang.Object) builder78);
        org.apache.rat.Defaults defaults81 = builder78.build();
        reportConfiguration50.setFrom(defaults81);
        reportConfiguration50.addApprovedLicenseCategory("Copyright Builder: s:OASIS e:null o:null");
        org.junit.Assert.assertNotNull(defaultLog0);
        org.junit.Assert.assertNotNull(builder1);
        org.junit.Assert.assertNotNull(builder3);
        org.junit.Assert.assertTrue("'" + state8 + "' != '" + org.apache.rat.analysis.IHeaderMatcher.State.f + "'", state8.equals(org.apache.rat.analysis.IHeaderMatcher.State.f));
        org.junit.Assert.assertNotNull(builder9);
        org.junit.Assert.assertNotNull(builder11);
        org.junit.Assert.assertNull(filenameFilter15);
        org.junit.Assert.assertTrue("'" + licenseFilter16 + "' != '" + org.apache.rat.license.LicenseSetFactory.LicenseFilter.all + "'", licenseFilter16.equals(org.apache.rat.license.LicenseSetFactory.LicenseFilter.all));
        org.junit.Assert.assertNotNull(iLicenseSet17);
        org.junit.Assert.assertTrue("'" + addLicenseHeaders18 + "' != '" + org.apache.rat.config.AddLicenseHeaders.FALSE + "'", addLicenseHeaders18.equals(org.apache.rat.config.AddLicenseHeaders.FALSE));
        org.junit.Assert.assertNull(claimStatistic22);
        org.junit.Assert.assertTrue("'" + licenseFilter23 + "' != '" + org.apache.rat.license.LicenseSetFactory.LicenseFilter.all + "'", licenseFilter23.equals(org.apache.rat.license.LicenseSetFactory.LicenseFilter.all));
        org.junit.Assert.assertNull(filenameFilter28);
        org.junit.Assert.assertTrue("'" + licenseFilter29 + "' != '" + org.apache.rat.license.LicenseSetFactory.LicenseFilter.all + "'", licenseFilter29.equals(org.apache.rat.license.LicenseSetFactory.LicenseFilter.all));
        org.junit.Assert.assertNotNull(iLicenseSet30);
        org.junit.Assert.assertTrue("'" + addLicenseHeaders31 + "' != '" + org.apache.rat.config.AddLicenseHeaders.FALSE + "'", addLicenseHeaders31.equals(org.apache.rat.config.AddLicenseHeaders.FALSE));
        org.junit.Assert.assertNull(claimStatistic35);
        org.junit.Assert.assertTrue("'" + licenseFilter36 + "' != '" + org.apache.rat.license.LicenseSetFactory.LicenseFilter.all + "'", licenseFilter36.equals(org.apache.rat.license.LicenseSetFactory.LicenseFilter.all));
        org.junit.Assert.assertNotNull(outputStreamIOSupplier42);
        org.junit.Assert.assertTrue("'" + level44 + "' != '" + org.apache.rat.utils.Log.Level.WARN + "'", level44.equals(org.apache.rat.utils.Log.Level.WARN));
        org.junit.Assert.assertNull(filenameFilter51);
        org.junit.Assert.assertTrue("'" + licenseFilter52 + "' != '" + org.apache.rat.license.LicenseSetFactory.LicenseFilter.all + "'", licenseFilter52.equals(org.apache.rat.license.LicenseSetFactory.LicenseFilter.all));
        org.junit.Assert.assertNotNull(iLicenseSet53);
        org.junit.Assert.assertNotNull(defaultLog59);
        org.junit.Assert.assertNull(claimStatistic63);
        org.junit.Assert.assertNull(claimStatistic66);
        org.junit.Assert.assertTrue("'" + options67 + "' != '" + org.apache.rat.utils.ReportingSet.Options.OVERWRITE + "'", options67.equals(org.apache.rat.utils.ReportingSet.Options.OVERWRITE));
        org.junit.Assert.assertNotNull(printWriterIOSupplier70);
        org.junit.Assert.assertTrue("'" + level75 + "' != '" + org.apache.rat.utils.Log.Level.ERROR + "'", level75.equals(org.apache.rat.utils.Log.Level.ERROR));
        org.junit.Assert.assertNotNull(builder78);
        org.junit.Assert.assertNotNull(builder79);
        org.junit.Assert.assertNotNull(defaults81);
    }

    @Test
    public void test12780() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest25.test12780");
        org.apache.rat.Defaults.Builder builder0 = org.apache.rat.Defaults.builder();
        org.apache.rat.Defaults defaults1 = builder0.build();
        org.apache.rat.Defaults.Builder builder2 = builder0.noDefault();
        org.apache.rat.Defaults.Builder builder3 = builder0.noDefault();
        org.apache.rat.Defaults.Builder builder5 = builder0.add("Datum [ name ='http://org/apache/rat/meta-data#LicenseFamilyName',value ='Academic Free License, Version 2.1 ']");
        org.apache.rat.Defaults.Builder builder6 = builder0.noDefault();
        org.apache.rat.Defaults.Builder builder8 = builder6.remove("GPL2 ");
        org.apache.rat.Defaults.Builder builder10 = builder6.add("f6c7d16f-90d4-435d-b9d9-a9f6c196d56a");
        org.apache.rat.Defaults.Builder builder12 = builder6.remove("46eea23e-d320-45bc-aa7f-844d2e1597ce");
        // The following exception was thrown during execution in test generation
        try {
            org.apache.rat.Defaults defaults13 = builder6.build();
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: No such suffix: 1%20'%5D");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(builder0);
        org.junit.Assert.assertNotNull(defaults1);
        org.junit.Assert.assertNotNull(builder2);
        org.junit.Assert.assertNotNull(builder3);
        org.junit.Assert.assertNotNull(builder5);
        org.junit.Assert.assertNotNull(builder6);
        org.junit.Assert.assertNotNull(builder8);
        org.junit.Assert.assertNotNull(builder10);
        org.junit.Assert.assertNotNull(builder12);
    }

    @Test
    public void test12781() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest25.test12781");
        org.apache.rat.analysis.license.FullTextMatchingLicense fullTextMatchingLicense0 = new org.apache.rat.analysis.license.FullTextMatchingLicense();
        fullTextMatchingLicense0.setLicenseFamilyName("hi!");
        java.lang.String str3 = fullTextMatchingLicense0.getLicenseFamilyCategory();
        java.lang.String str4 = fullTextMatchingLicense0.getLicenseFamilyName();
        fullTextMatchingLicense0.setLicenseFamilyName("SpdxBuilder: null");
        fullTextMatchingLicense0.setLicenseFamilyCategory("TMF");
        fullTextMatchingLicense0.setFullText("W3C  ");
        java.lang.String str11 = fullTextMatchingLicense0.getLicenseFamilyCategory();
        fullTextMatchingLicense0.setLicenseFamilyCategory("http://org/apache/rat/meta-data#ApprovedLicense");
        org.apache.rat.license.ILicenseFamily iLicenseFamily14 = fullTextMatchingLicense0.getLicenseFamily();
        org.apache.rat.license.ILicense.Builder builder15 = fullTextMatchingLicense0.getLicense();
        org.apache.rat.license.ILicense.Builder builder17 = builder15.setName("8b0f465d-8e20-4a9a-bf18-a9071da56719");
        org.junit.Assert.assertNull(str3);
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "hi!" + "'", str4, "hi!");
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "TMF" + "'", str11, "TMF");
        org.junit.Assert.assertNotNull(iLicenseFamily14);
        org.junit.Assert.assertNotNull(builder15);
        org.junit.Assert.assertNotNull(builder17);
    }

    @Test
    public void test12782() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest25.test12782");
        org.apache.rat.configuration.Format format0 = org.apache.rat.configuration.Format.XML;
        org.apache.rat.configuration.LicenseReader licenseReader1 = format0.licenseReader();
        org.apache.rat.configuration.MatcherReader matcherReader2 = format0.matcherReader();
        org.apache.rat.configuration.LicenseReader licenseReader3 = format0.licenseReader();
        org.apache.rat.configuration.LicenseReader licenseReader4 = format0.licenseReader();
        java.util.SortedSet<java.lang.String> strSet5 = licenseReader4.approvedLicenseId();
        java.net.URL uRL6 = null;
        // The following exception was thrown during execution in test generation
        try {
            licenseReader4.addLicenses(uRL6);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + format0 + "' != '" + org.apache.rat.configuration.Format.XML + "'", format0.equals(org.apache.rat.configuration.Format.XML));
        org.junit.Assert.assertNotNull(licenseReader1);
        org.junit.Assert.assertNotNull(matcherReader2);
        org.junit.Assert.assertNotNull(licenseReader3);
        org.junit.Assert.assertNotNull(licenseReader4);
        org.junit.Assert.assertNotNull(strSet5);
    }

    @Test
    public void test12783() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest25.test12783");
        org.apache.rat.document.ToNameTransformer toNameTransformer0 = new org.apache.rat.document.ToNameTransformer();
        org.apache.rat.report.claim.ClaimStatistic claimStatistic1 = new org.apache.rat.report.claim.ClaimStatistic();
        claimStatistic1.setNumApproved((int) (short) 10);
        claimStatistic1.setNumUnknown(30);
        java.lang.Object obj6 = toNameTransformer0.transform((java.lang.Object) claimStatistic1);
        int int7 = claimStatistic1.getNumUnknown();
        java.util.Map<java.lang.String, java.lang.Integer> strMap8 = claimStatistic1.getLicenseFileNameMap();
        java.util.Map<java.lang.String, java.lang.Integer> strMap9 = null;
        claimStatistic1.setLicenseFileNameMap(strMap9);
        java.util.Map<java.lang.String, java.lang.Integer> strMap11 = null;
        claimStatistic1.setDocumentCategoryMap(strMap11);
        claimStatistic1.setNumUnknown(30);
        int int15 = claimStatistic1.getNumUnApproved();
        org.junit.Assert.assertNull(obj6);
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 30 + "'", int7 == 30);
        org.junit.Assert.assertNull(strMap8);
        org.junit.Assert.assertTrue("'" + int15 + "' != '" + 0 + "'", int15 == 0);
    }

    @Test
    public void test12784() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest25.test12784");
        boolean boolean1 = org.apache.rat.document.impl.guesser.NoteGuesser.isNote("021187d7-27c2-4fd9-bc74-8cc00413ee52");
        org.junit.Assert.assertTrue("'" + boolean1 + "' != '" + false + "'", boolean1 == false);
    }

    @Test
    public void test12785() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest25.test12785");
        java.io.Writer writer0 = null;
        org.apache.rat.report.xml.writer.impl.base.XmlWriter xmlWriter1 = new org.apache.rat.report.xml.writer.impl.base.XmlWriter(writer0);
        org.apache.rat.report.claim.impl.xml.SimpleXmlClaimReporter simpleXmlClaimReporter2 = new org.apache.rat.report.claim.impl.xml.SimpleXmlClaimReporter((org.apache.rat.report.xml.writer.IXmlWriter) xmlWriter1);
        org.apache.rat.report.claim.impl.xml.SimpleXmlClaimReporter simpleXmlClaimReporter3 = new org.apache.rat.report.claim.impl.xml.SimpleXmlClaimReporter((org.apache.rat.report.xml.writer.IXmlWriter) xmlWriter1);
        org.apache.rat.report.claim.impl.xml.SimpleXmlClaimReporter simpleXmlClaimReporter4 = new org.apache.rat.report.claim.impl.xml.SimpleXmlClaimReporter((org.apache.rat.report.xml.writer.IXmlWriter) xmlWriter1);
        org.apache.rat.report.claim.impl.xml.SimpleXmlClaimReporter simpleXmlClaimReporter5 = new org.apache.rat.report.claim.impl.xml.SimpleXmlClaimReporter((org.apache.rat.report.xml.writer.IXmlWriter) xmlWriter1);
        org.apache.rat.report.claim.impl.xml.SimpleXmlClaimReporter simpleXmlClaimReporter6 = new org.apache.rat.report.claim.impl.xml.SimpleXmlClaimReporter((org.apache.rat.report.xml.writer.IXmlWriter) xmlWriter1);
        // The following exception was thrown during execution in test generation
        try {
            org.apache.rat.report.xml.writer.IXmlWriter iXmlWriter8 = xmlWriter1.content((java.lang.CharSequence) "SpdxBuilder: null f1fc8dc8-990d-4a2d-9540-4e9ece3bd92c");
            org.junit.Assert.fail("Expected exception of type org.apache.rat.report.xml.writer.OperationNotAllowedException; message: An element must be opened before content can be written.");
        } catch (org.apache.rat.report.xml.writer.OperationNotAllowedException e) {
            // Expected exception.
        }
    }

    @Test
    public void test12786() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest25.test12786");
        org.apache.rat.api.MetaData metaData0 = new org.apache.rat.api.MetaData();
        java.lang.String str2 = metaData0.value("COMMON DEVELOPMENT AND DISTRIBUTION LICENSE Version 1.0");
        org.apache.rat.api.MetaData.Datum datum4 = metaData0.get("Copyright Builder: s:null e:.cvsignore o:null");
        java.lang.String str6 = metaData0.value("W3C Software Copyright");
        org.apache.rat.api.MetaData.Datum datum8 = metaData0.get("255ef7d8-e270-4908-9de7-bebc7df6eb88");
        java.util.Collection<org.apache.rat.api.MetaData.Datum> datumCollection9 = metaData0.getData();
        org.apache.rat.api.MetaData.Datum datum10 = org.apache.rat.api.MetaData.RAT_LICENSE_FAMILY_CATEGORY_DATUM_UNKNOWN;
        metaData0.set(datum10);
        org.apache.rat.utils.Log log12 = null;
        org.apache.rat.ReportConfiguration reportConfiguration13 = new org.apache.rat.ReportConfiguration(log12);
        java.io.FilenameFilter filenameFilter14 = reportConfiguration13.getInputFileFilter();
        org.apache.rat.license.LicenseSetFactory.LicenseFilter licenseFilter15 = org.apache.rat.license.LicenseSetFactory.LicenseFilter.all;
        java.util.SortedSet<org.apache.rat.license.ILicense> iLicenseSet16 = reportConfiguration13.getLicenses(licenseFilter15);
        org.apache.rat.config.AddLicenseHeaders addLicenseHeaders17 = org.apache.rat.config.AddLicenseHeaders.FALSE;
        reportConfiguration13.setAddLicenseHeaders(addLicenseHeaders17);
        org.apache.rat.utils.Log log19 = null;
        org.apache.rat.ReportConfiguration reportConfiguration20 = new org.apache.rat.ReportConfiguration(log19);
        org.apache.rat.report.claim.ClaimStatistic claimStatistic21 = org.apache.rat.Reporter.report(reportConfiguration20);
        org.apache.rat.license.LicenseSetFactory.LicenseFilter licenseFilter22 = org.apache.rat.license.LicenseSetFactory.LicenseFilter.all;
        org.apache.rat.Reporter.listLicenses(reportConfiguration20, licenseFilter22);
        org.apache.rat.Reporter.listLicenses(reportConfiguration13, licenseFilter22);
        org.apache.rat.utils.Log log25 = null;
        org.apache.rat.ReportConfiguration reportConfiguration26 = new org.apache.rat.ReportConfiguration(log25);
        java.io.FilenameFilter filenameFilter27 = reportConfiguration26.getInputFileFilter();
        org.apache.rat.license.LicenseSetFactory.LicenseFilter licenseFilter28 = org.apache.rat.license.LicenseSetFactory.LicenseFilter.all;
        java.util.SortedSet<org.apache.rat.license.ILicense> iLicenseSet29 = reportConfiguration26.getLicenses(licenseFilter28);
        org.apache.rat.config.AddLicenseHeaders addLicenseHeaders30 = org.apache.rat.config.AddLicenseHeaders.FALSE;
        reportConfiguration26.setAddLicenseHeaders(addLicenseHeaders30);
        org.apache.rat.utils.Log log32 = null;
        org.apache.rat.ReportConfiguration reportConfiguration33 = new org.apache.rat.ReportConfiguration(log32);
        org.apache.rat.report.claim.ClaimStatistic claimStatistic34 = org.apache.rat.Reporter.report(reportConfiguration33);
        org.apache.rat.license.LicenseSetFactory.LicenseFilter licenseFilter35 = org.apache.rat.license.LicenseSetFactory.LicenseFilter.all;
        org.apache.rat.Reporter.listLicenses(reportConfiguration33, licenseFilter35);
        org.apache.rat.Reporter.listLicenses(reportConfiguration26, licenseFilter35);
        org.apache.rat.Reporter.listLicenses(reportConfiguration13, licenseFilter35);
        java.io.FilenameFilter filenameFilter39 = reportConfiguration13.getInputFileFilter();
        reportConfiguration13.setStyleReport(false);
        org.apache.rat.report.IReportable iReportable42 = null;
        reportConfiguration13.setReportable(iReportable42);
        org.apache.rat.Defaults.Builder builder45 = org.apache.rat.Defaults.builder();
        org.apache.rat.Defaults defaults46 = builder45.build();
        org.apache.rat.utils.Log log47 = null;
        org.apache.rat.ReportConfiguration reportConfiguration48 = new org.apache.rat.ReportConfiguration(log47);
        java.io.FilenameFilter filenameFilter49 = reportConfiguration48.getInputFileFilter();
        org.apache.rat.license.LicenseSetFactory.LicenseFilter licenseFilter50 = org.apache.rat.license.LicenseSetFactory.LicenseFilter.all;
        java.util.SortedSet<org.apache.rat.license.ILicense> iLicenseSet51 = reportConfiguration48.getLicenses(licenseFilter50);
        org.apache.rat.config.AddLicenseHeaders addLicenseHeaders52 = org.apache.rat.config.AddLicenseHeaders.FALSE;
        reportConfiguration48.setAddLicenseHeaders(addLicenseHeaders52);
        org.apache.rat.utils.Log log54 = null;
        org.apache.rat.ReportConfiguration reportConfiguration55 = new org.apache.rat.ReportConfiguration(log54);
        org.apache.rat.report.claim.ClaimStatistic claimStatistic56 = org.apache.rat.Reporter.report(reportConfiguration55);
        org.apache.rat.license.LicenseSetFactory.LicenseFilter licenseFilter57 = org.apache.rat.license.LicenseSetFactory.LicenseFilter.all;
        org.apache.rat.Reporter.listLicenses(reportConfiguration55, licenseFilter57);
        org.apache.rat.Reporter.listLicenses(reportConfiguration48, licenseFilter57);
        org.apache.rat.utils.Log log60 = null;
        org.apache.rat.ReportConfiguration reportConfiguration61 = new org.apache.rat.ReportConfiguration(log60);
        java.io.FilenameFilter filenameFilter62 = reportConfiguration61.getInputFileFilter();
        org.apache.rat.license.LicenseSetFactory.LicenseFilter licenseFilter63 = org.apache.rat.license.LicenseSetFactory.LicenseFilter.all;
        java.util.SortedSet<org.apache.rat.license.ILicense> iLicenseSet64 = reportConfiguration61.getLicenses(licenseFilter63);
        org.apache.rat.config.AddLicenseHeaders addLicenseHeaders65 = org.apache.rat.config.AddLicenseHeaders.FALSE;
        reportConfiguration61.setAddLicenseHeaders(addLicenseHeaders65);
        org.apache.rat.utils.Log log67 = null;
        org.apache.rat.ReportConfiguration reportConfiguration68 = new org.apache.rat.ReportConfiguration(log67);
        org.apache.rat.report.claim.ClaimStatistic claimStatistic69 = org.apache.rat.Reporter.report(reportConfiguration68);
        org.apache.rat.license.LicenseSetFactory.LicenseFilter licenseFilter70 = org.apache.rat.license.LicenseSetFactory.LicenseFilter.all;
        org.apache.rat.Reporter.listLicenses(reportConfiguration68, licenseFilter70);
        org.apache.rat.Reporter.listLicenses(reportConfiguration61, licenseFilter70);
        java.util.SortedSet<org.apache.rat.license.ILicenseFamily> iLicenseFamilySet73 = reportConfiguration48.getLicenseFamilies(licenseFilter70);
        java.util.SortedSet<org.apache.rat.license.ILicense> iLicenseSet74 = defaults46.getLicenses(licenseFilter70);
        org.apache.rat.utils.ReportingSet<org.apache.rat.license.ILicense> iLicenseSet75 = new org.apache.rat.utils.ReportingSet<org.apache.rat.license.ILicense>(iLicenseSet74);
        org.apache.rat.license.ILicense iLicense76 = org.apache.rat.license.LicenseSetFactory.search("TMF", iLicenseSet74);
        reportConfiguration13.addLicense(iLicense76);
        java.lang.String str78 = iLicense76.derivedFrom();
        java.lang.String str79 = iLicense76.getName();
        org.apache.rat.license.ILicenseFamily iLicenseFamily80 = iLicense76.getLicenseFamily();
        java.lang.String str81 = iLicense76.getNotes();
        org.apache.rat.license.ILicenseFamily iLicenseFamily82 = iLicense76.getLicenseFamily();
        java.lang.String str83 = iLicense76.getNotes();
        org.apache.rat.license.ILicenseFamily iLicenseFamily84 = iLicense76.getLicenseFamily();
        java.lang.String str85 = iLicense76.derivedFrom();
        metaData0.reportOnLicense(iLicense76);
        java.lang.String str87 = iLicense76.derivedFrom();
        org.apache.rat.configuration.Format format89 = org.apache.rat.configuration.Format.XML;
        org.apache.rat.configuration.LicenseReader licenseReader90 = format89.licenseReader();
        org.apache.rat.configuration.MatcherReader matcherReader91 = format89.matcherReader();
        org.apache.rat.configuration.LicenseReader licenseReader92 = format89.licenseReader();
        java.util.SortedSet<org.apache.rat.license.ILicense> iLicenseSet93 = licenseReader92.readLicenses();
        org.apache.rat.license.ILicense iLicense94 = org.apache.rat.license.LicenseSetFactory.search("Datum [ name ='http://org/apache/rat/meta-data#LicenseFamilyCategory',value ='GPL1  ']", iLicenseSet93);
        org.apache.rat.utils.ReportingSet<java.lang.String> strSet95 = new org.apache.rat.utils.ReportingSet<java.lang.String>();
        int int96 = strSet95.size();
        org.apache.rat.license.LicenseSetFactory licenseSetFactory97 = new org.apache.rat.license.LicenseSetFactory(iLicenseSet93, (java.util.Collection<java.lang.String>) strSet95);
        org.apache.rat.license.ILicense iLicense98 = org.apache.rat.license.LicenseSetFactory.search(iLicense76, iLicenseSet93);
        org.junit.Assert.assertNull(str2);
        org.junit.Assert.assertNull(datum4);
        org.junit.Assert.assertNull(str6);
        org.junit.Assert.assertNull(datum8);
        org.junit.Assert.assertNotNull(datumCollection9);
        org.junit.Assert.assertNotNull(datum10);
        org.junit.Assert.assertNull(filenameFilter14);
        org.junit.Assert.assertTrue("'" + licenseFilter15 + "' != '" + org.apache.rat.license.LicenseSetFactory.LicenseFilter.all + "'", licenseFilter15.equals(org.apache.rat.license.LicenseSetFactory.LicenseFilter.all));
        org.junit.Assert.assertNotNull(iLicenseSet16);
        org.junit.Assert.assertTrue("'" + addLicenseHeaders17 + "' != '" + org.apache.rat.config.AddLicenseHeaders.FALSE + "'", addLicenseHeaders17.equals(org.apache.rat.config.AddLicenseHeaders.FALSE));
        org.junit.Assert.assertNull(claimStatistic21);
        org.junit.Assert.assertTrue("'" + licenseFilter22 + "' != '" + org.apache.rat.license.LicenseSetFactory.LicenseFilter.all + "'", licenseFilter22.equals(org.apache.rat.license.LicenseSetFactory.LicenseFilter.all));
        org.junit.Assert.assertNull(filenameFilter27);
        org.junit.Assert.assertTrue("'" + licenseFilter28 + "' != '" + org.apache.rat.license.LicenseSetFactory.LicenseFilter.all + "'", licenseFilter28.equals(org.apache.rat.license.LicenseSetFactory.LicenseFilter.all));
        org.junit.Assert.assertNotNull(iLicenseSet29);
        org.junit.Assert.assertTrue("'" + addLicenseHeaders30 + "' != '" + org.apache.rat.config.AddLicenseHeaders.FALSE + "'", addLicenseHeaders30.equals(org.apache.rat.config.AddLicenseHeaders.FALSE));
        org.junit.Assert.assertNull(claimStatistic34);
        org.junit.Assert.assertTrue("'" + licenseFilter35 + "' != '" + org.apache.rat.license.LicenseSetFactory.LicenseFilter.all + "'", licenseFilter35.equals(org.apache.rat.license.LicenseSetFactory.LicenseFilter.all));
        org.junit.Assert.assertNull(filenameFilter39);
        org.junit.Assert.assertNotNull(builder45);
        org.junit.Assert.assertNotNull(defaults46);
        org.junit.Assert.assertNull(filenameFilter49);
        org.junit.Assert.assertTrue("'" + licenseFilter50 + "' != '" + org.apache.rat.license.LicenseSetFactory.LicenseFilter.all + "'", licenseFilter50.equals(org.apache.rat.license.LicenseSetFactory.LicenseFilter.all));
        org.junit.Assert.assertNotNull(iLicenseSet51);
        org.junit.Assert.assertTrue("'" + addLicenseHeaders52 + "' != '" + org.apache.rat.config.AddLicenseHeaders.FALSE + "'", addLicenseHeaders52.equals(org.apache.rat.config.AddLicenseHeaders.FALSE));
        org.junit.Assert.assertNull(claimStatistic56);
        org.junit.Assert.assertTrue("'" + licenseFilter57 + "' != '" + org.apache.rat.license.LicenseSetFactory.LicenseFilter.all + "'", licenseFilter57.equals(org.apache.rat.license.LicenseSetFactory.LicenseFilter.all));
        org.junit.Assert.assertNull(filenameFilter62);
        org.junit.Assert.assertTrue("'" + licenseFilter63 + "' != '" + org.apache.rat.license.LicenseSetFactory.LicenseFilter.all + "'", licenseFilter63.equals(org.apache.rat.license.LicenseSetFactory.LicenseFilter.all));
        org.junit.Assert.assertNotNull(iLicenseSet64);
        org.junit.Assert.assertTrue("'" + addLicenseHeaders65 + "' != '" + org.apache.rat.config.AddLicenseHeaders.FALSE + "'", addLicenseHeaders65.equals(org.apache.rat.config.AddLicenseHeaders.FALSE));
        org.junit.Assert.assertNull(claimStatistic69);
        org.junit.Assert.assertTrue("'" + licenseFilter70 + "' != '" + org.apache.rat.license.LicenseSetFactory.LicenseFilter.all + "'", licenseFilter70.equals(org.apache.rat.license.LicenseSetFactory.LicenseFilter.all));
        org.junit.Assert.assertNotNull(iLicenseFamilySet73);
        org.junit.Assert.assertNotNull(iLicenseSet74);
        org.junit.Assert.assertNotNull(iLicense76);
        org.junit.Assert.assertEquals("'" + str78 + "' != '" + "BSD-3" + "'", str78, "BSD-3");
        org.junit.Assert.assertEquals("'" + str79 + "' != '" + "The Telemanagement Forum License" + "'", str79, "The Telemanagement Forum License");
        org.junit.Assert.assertNotNull(iLicenseFamily80);
        org.junit.Assert.assertNull(str81);
        org.junit.Assert.assertNotNull(iLicenseFamily82);
        org.junit.Assert.assertNull(str83);
        org.junit.Assert.assertNotNull(iLicenseFamily84);
        org.junit.Assert.assertEquals("'" + str85 + "' != '" + "BSD-3" + "'", str85, "BSD-3");
        org.junit.Assert.assertEquals("'" + str87 + "' != '" + "BSD-3" + "'", str87, "BSD-3");
        org.junit.Assert.assertTrue("'" + format89 + "' != '" + org.apache.rat.configuration.Format.XML + "'", format89.equals(org.apache.rat.configuration.Format.XML));
        org.junit.Assert.assertNotNull(licenseReader90);
        org.junit.Assert.assertNotNull(matcherReader91);
        org.junit.Assert.assertNotNull(licenseReader92);
        org.junit.Assert.assertNotNull(iLicenseSet93);
        org.junit.Assert.assertNull(iLicense94);
        org.junit.Assert.assertTrue("'" + int96 + "' != '" + 0 + "'", int96 == 0);
        org.junit.Assert.assertNull(iLicense98);
    }

    @Test
    public void test12787() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest25.test12787");
        org.apache.rat.analysis.matchers.SimpleTextMatcher simpleTextMatcher2 = new org.apache.rat.analysis.matchers.SimpleTextMatcher("", "64ae0");
    }

    @Test
    public void test12788() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest25.test12788");
        org.apache.rat.analysis.matchers.FullTextMatcher fullTextMatcher2 = new org.apache.rat.analysis.matchers.FullTextMatcher("3e2b228d-d5ff-4444-8d8c-d614494b2426", "d25f13bc-1910-4451-97b5-b72663551a5d");
        org.apache.rat.analysis.IHeaderMatcher.State state4 = fullTextMatcher2.matches("f96ad0b6-2267-4692-93e4-227659f9d621");
        java.lang.String str5 = fullTextMatcher2.getId();
        java.lang.String str6 = fullTextMatcher2.getId();
        fullTextMatcher2.reset();
        org.apache.rat.analysis.matchers.NotMatcher notMatcher8 = new org.apache.rat.analysis.matchers.NotMatcher((org.apache.rat.analysis.IHeaderMatcher) fullTextMatcher2);
        org.apache.rat.analysis.IHeaderMatcher.State state10 = fullTextMatcher2.matches("274c6a15-09f6-4bfd-ac53-1827770eb507");
        fullTextMatcher2.reset();
        org.apache.rat.analysis.IHeaderMatcher.State state13 = fullTextMatcher2.matches("7d01b1b3-e7b9-4f85-b3dd-e0334dea8844");
        org.junit.Assert.assertTrue("'" + state4 + "' != '" + org.apache.rat.analysis.IHeaderMatcher.State.i + "'", state4.equals(org.apache.rat.analysis.IHeaderMatcher.State.i));
        org.junit.Assert.assertEquals("'" + str5 + "' != '" + "3e2b228d-d5ff-4444-8d8c-d614494b2426" + "'", str5, "3e2b228d-d5ff-4444-8d8c-d614494b2426");
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "3e2b228d-d5ff-4444-8d8c-d614494b2426" + "'", str6, "3e2b228d-d5ff-4444-8d8c-d614494b2426");
        org.junit.Assert.assertTrue("'" + state10 + "' != '" + org.apache.rat.analysis.IHeaderMatcher.State.i + "'", state10.equals(org.apache.rat.analysis.IHeaderMatcher.State.i));
        org.junit.Assert.assertTrue("'" + state13 + "' != '" + org.apache.rat.analysis.IHeaderMatcher.State.i + "'", state13.equals(org.apache.rat.analysis.IHeaderMatcher.State.i));
    }

    @Test
    public void test12789() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest25.test12789");
        org.apache.rat.license.SimpleLicenseFamily simpleLicenseFamily0 = new org.apache.rat.license.SimpleLicenseFamily();
        java.lang.String str1 = simpleLicenseFamily0.getFamilyName();
        java.lang.String str2 = simpleLicenseFamily0.getFamilyCategory();
        simpleLicenseFamily0.setFamilyCategory("W3C  ");
        java.lang.String str5 = simpleLicenseFamily0.getFamilyName();
        simpleLicenseFamily0.setFamilyCategory("223f0aba-15d4-49e9-901e-5740c137aebf");
        java.lang.String str8 = simpleLicenseFamily0.toString();
        simpleLicenseFamily0.setFamilyCategory("COMMO");
        java.lang.String str11 = simpleLicenseFamily0.getFamilyName();
        java.lang.String str12 = simpleLicenseFamily0.getFamilyCategory();
        org.junit.Assert.assertNull(str1);
        org.junit.Assert.assertNull(str2);
        org.junit.Assert.assertNull(str5);
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "223f0aba-15d4-49e9-901e-5740c137aebf null" + "'", str8, "223f0aba-15d4-49e9-901e-5740c137aebf null");
        org.junit.Assert.assertNull(str11);
        org.junit.Assert.assertEquals("'" + str12 + "' != '" + "COMMO" + "'", str12, "COMMO");
    }

    @Test
    public void test12790() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest25.test12790");
        java.util.regex.Pattern pattern1 = null;
        org.apache.rat.analysis.matchers.SimpleRegexMatcher simpleRegexMatcher2 = new org.apache.rat.analysis.matchers.SimpleRegexMatcher("9f36e98f-2295-49a7-ab5b-2e0fa3ce7c55", pattern1);
        java.lang.String str3 = simpleRegexMatcher2.getId();
        org.junit.Assert.assertEquals("'" + str3 + "' != '" + "9f36e98f-2295-49a7-ab5b-2e0fa3ce7c55" + "'", str3, "9f36e98f-2295-49a7-ab5b-2e0fa3ce7c55");
    }

    @Test
    public void test12791() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest25.test12791");
        // The following exception was thrown during execution in test generation
        try {
            org.apache.rat.configuration.builders.AbstractBuilder abstractBuilder1 = org.apache.rat.configuration.MatcherBuilderTracker.getMatcherBuilder("7e4f7d59-fe21-4470-9676-dacf1ee22e5d");
            org.junit.Assert.fail("Expected exception of type org.apache.rat.ConfigurationException; message: ?Valid builders?all?matcherRef?copyright?not?regex?spdx?text?any?ERROR MSG?No matcher builder named 7e4f7d59-fe21-4470-9676-dacf1ee22e5d");
        } catch (org.apache.rat.ConfigurationException e) {
            // Expected exception.
        }
    }

    @Test
    public void test12792() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest25.test12792");
        org.apache.rat.utils.Log log0 = null;
        org.apache.rat.ReportConfiguration reportConfiguration1 = new org.apache.rat.ReportConfiguration(log0);
        java.io.FilenameFilter filenameFilter2 = reportConfiguration1.getInputFileFilter();
        org.apache.rat.license.LicenseSetFactory.LicenseFilter licenseFilter3 = org.apache.rat.license.LicenseSetFactory.LicenseFilter.all;
        java.util.SortedSet<org.apache.rat.license.ILicense> iLicenseSet4 = reportConfiguration1.getLicenses(licenseFilter3);
        org.apache.rat.config.AddLicenseHeaders addLicenseHeaders5 = org.apache.rat.config.AddLicenseHeaders.FALSE;
        reportConfiguration1.setAddLicenseHeaders(addLicenseHeaders5);
        org.apache.rat.utils.Log log7 = null;
        org.apache.rat.ReportConfiguration reportConfiguration8 = new org.apache.rat.ReportConfiguration(log7);
        org.apache.rat.report.claim.ClaimStatistic claimStatistic9 = org.apache.rat.Reporter.report(reportConfiguration8);
        org.apache.rat.license.LicenseSetFactory.LicenseFilter licenseFilter10 = org.apache.rat.license.LicenseSetFactory.LicenseFilter.all;
        org.apache.rat.Reporter.listLicenses(reportConfiguration8, licenseFilter10);
        org.apache.rat.Reporter.listLicenses(reportConfiguration1, licenseFilter10);
        org.apache.rat.utils.Log log13 = null;
        org.apache.rat.ReportConfiguration reportConfiguration14 = new org.apache.rat.ReportConfiguration(log13);
        java.io.FilenameFilter filenameFilter15 = reportConfiguration14.getInputFileFilter();
        org.apache.rat.license.LicenseSetFactory.LicenseFilter licenseFilter16 = org.apache.rat.license.LicenseSetFactory.LicenseFilter.all;
        java.util.SortedSet<org.apache.rat.license.ILicense> iLicenseSet17 = reportConfiguration14.getLicenses(licenseFilter16);
        org.apache.rat.config.AddLicenseHeaders addLicenseHeaders18 = org.apache.rat.config.AddLicenseHeaders.FALSE;
        reportConfiguration14.setAddLicenseHeaders(addLicenseHeaders18);
        org.apache.rat.utils.Log log20 = null;
        org.apache.rat.ReportConfiguration reportConfiguration21 = new org.apache.rat.ReportConfiguration(log20);
        org.apache.rat.report.claim.ClaimStatistic claimStatistic22 = org.apache.rat.Reporter.report(reportConfiguration21);
        org.apache.rat.license.LicenseSetFactory.LicenseFilter licenseFilter23 = org.apache.rat.license.LicenseSetFactory.LicenseFilter.all;
        org.apache.rat.Reporter.listLicenses(reportConfiguration21, licenseFilter23);
        org.apache.rat.Reporter.listLicenses(reportConfiguration14, licenseFilter23);
        org.apache.rat.Reporter.listLicenses(reportConfiguration1, licenseFilter23);
        org.apache.rat.utils.Log log27 = null;
        org.apache.rat.ReportConfiguration reportConfiguration28 = new org.apache.rat.ReportConfiguration(log27);
        org.apache.commons.io.function.IOSupplier<java.io.OutputStream> outputStreamIOSupplier29 = reportConfiguration28.getOutput();
        reportConfiguration1.setOut(outputStreamIOSupplier29);
        org.apache.rat.utils.Log.Level level31 = org.apache.rat.utils.Log.Level.WARN;
        reportConfiguration1.logLicenseCollisions(level31);
        org.apache.rat.Defaults.Builder builder33 = org.apache.rat.Defaults.builder();
        org.apache.rat.Defaults.Builder builder34 = builder33.noDefault();
        org.apache.rat.Defaults defaults35 = builder34.build();
        org.apache.rat.utils.Log log36 = null;
        org.apache.rat.ReportConfiguration reportConfiguration37 = new org.apache.rat.ReportConfiguration(log36);
        java.io.FilenameFilter filenameFilter38 = reportConfiguration37.getInputFileFilter();
        org.apache.rat.license.LicenseSetFactory.LicenseFilter licenseFilter39 = org.apache.rat.license.LicenseSetFactory.LicenseFilter.all;
        java.util.SortedSet<org.apache.rat.license.ILicense> iLicenseSet40 = reportConfiguration37.getLicenses(licenseFilter39);
        org.apache.rat.config.AddLicenseHeaders addLicenseHeaders41 = org.apache.rat.config.AddLicenseHeaders.FALSE;
        reportConfiguration37.setAddLicenseHeaders(addLicenseHeaders41);
        org.apache.rat.utils.Log log43 = null;
        org.apache.rat.ReportConfiguration reportConfiguration44 = new org.apache.rat.ReportConfiguration(log43);
        org.apache.rat.report.claim.ClaimStatistic claimStatistic45 = org.apache.rat.Reporter.report(reportConfiguration44);
        org.apache.rat.license.LicenseSetFactory.LicenseFilter licenseFilter46 = org.apache.rat.license.LicenseSetFactory.LicenseFilter.all;
        org.apache.rat.Reporter.listLicenses(reportConfiguration44, licenseFilter46);
        org.apache.rat.Reporter.listLicenses(reportConfiguration37, licenseFilter46);
        org.apache.rat.utils.Log log49 = null;
        org.apache.rat.ReportConfiguration reportConfiguration50 = new org.apache.rat.ReportConfiguration(log49);
        java.io.FilenameFilter filenameFilter51 = reportConfiguration50.getInputFileFilter();
        org.apache.rat.license.LicenseSetFactory.LicenseFilter licenseFilter52 = org.apache.rat.license.LicenseSetFactory.LicenseFilter.all;
        java.util.SortedSet<org.apache.rat.license.ILicense> iLicenseSet53 = reportConfiguration50.getLicenses(licenseFilter52);
        org.apache.rat.config.AddLicenseHeaders addLicenseHeaders54 = org.apache.rat.config.AddLicenseHeaders.FALSE;
        reportConfiguration50.setAddLicenseHeaders(addLicenseHeaders54);
        org.apache.rat.utils.Log log56 = null;
        org.apache.rat.ReportConfiguration reportConfiguration57 = new org.apache.rat.ReportConfiguration(log56);
        org.apache.rat.report.claim.ClaimStatistic claimStatistic58 = org.apache.rat.Reporter.report(reportConfiguration57);
        org.apache.rat.license.LicenseSetFactory.LicenseFilter licenseFilter59 = org.apache.rat.license.LicenseSetFactory.LicenseFilter.all;
        org.apache.rat.Reporter.listLicenses(reportConfiguration57, licenseFilter59);
        org.apache.rat.Reporter.listLicenses(reportConfiguration50, licenseFilter59);
        org.apache.rat.Reporter.listLicenses(reportConfiguration37, licenseFilter59);
        java.util.SortedSet<org.apache.rat.license.ILicense> iLicenseSet63 = defaults35.getLicenses(licenseFilter59);
        org.apache.rat.Reporter.listLicenseFamilies(reportConfiguration1, licenseFilter59);
        java.util.SortedSet<java.lang.String> strSet65 = reportConfiguration1.getApprovedLicenseCategories();
        org.apache.rat.license.ILicenseFamilyBuilder iLicenseFamilyBuilder66 = new org.apache.rat.license.ILicenseFamilyBuilder();
        java.lang.String str67 = iLicenseFamilyBuilder66.getCategory();
        org.apache.rat.license.ILicenseFamily.Builder builder69 = iLicenseFamilyBuilder66.setLicenseFamilyCategory("false");
        org.apache.rat.license.ILicenseFamily.Builder builder71 = iLicenseFamilyBuilder66.setLicenseFamilyCategory("Modified BSD License");
        org.apache.rat.license.ILicenseFamily.Builder builder73 = iLicenseFamilyBuilder66.setLicenseFamilyName("0925e382-79b7-417a-85be-aed683d949e2");
        org.apache.rat.license.ILicenseFamily.Builder builder75 = iLicenseFamilyBuilder66.setLicenseFamilyName("Copyright Builder: s:null e:W3C Software Copyright o:null");
        reportConfiguration1.addFamily((org.apache.rat.license.ILicenseFamily.Builder) iLicenseFamilyBuilder66);
        org.junit.Assert.assertNull(filenameFilter2);
        org.junit.Assert.assertTrue("'" + licenseFilter3 + "' != '" + org.apache.rat.license.LicenseSetFactory.LicenseFilter.all + "'", licenseFilter3.equals(org.apache.rat.license.LicenseSetFactory.LicenseFilter.all));
        org.junit.Assert.assertNotNull(iLicenseSet4);
        org.junit.Assert.assertTrue("'" + addLicenseHeaders5 + "' != '" + org.apache.rat.config.AddLicenseHeaders.FALSE + "'", addLicenseHeaders5.equals(org.apache.rat.config.AddLicenseHeaders.FALSE));
        org.junit.Assert.assertNull(claimStatistic9);
        org.junit.Assert.assertTrue("'" + licenseFilter10 + "' != '" + org.apache.rat.license.LicenseSetFactory.LicenseFilter.all + "'", licenseFilter10.equals(org.apache.rat.license.LicenseSetFactory.LicenseFilter.all));
        org.junit.Assert.assertNull(filenameFilter15);
        org.junit.Assert.assertTrue("'" + licenseFilter16 + "' != '" + org.apache.rat.license.LicenseSetFactory.LicenseFilter.all + "'", licenseFilter16.equals(org.apache.rat.license.LicenseSetFactory.LicenseFilter.all));
        org.junit.Assert.assertNotNull(iLicenseSet17);
        org.junit.Assert.assertTrue("'" + addLicenseHeaders18 + "' != '" + org.apache.rat.config.AddLicenseHeaders.FALSE + "'", addLicenseHeaders18.equals(org.apache.rat.config.AddLicenseHeaders.FALSE));
        org.junit.Assert.assertNull(claimStatistic22);
        org.junit.Assert.assertTrue("'" + licenseFilter23 + "' != '" + org.apache.rat.license.LicenseSetFactory.LicenseFilter.all + "'", licenseFilter23.equals(org.apache.rat.license.LicenseSetFactory.LicenseFilter.all));
        org.junit.Assert.assertNotNull(outputStreamIOSupplier29);
        org.junit.Assert.assertTrue("'" + level31 + "' != '" + org.apache.rat.utils.Log.Level.WARN + "'", level31.equals(org.apache.rat.utils.Log.Level.WARN));
        org.junit.Assert.assertNotNull(builder33);
        org.junit.Assert.assertNotNull(builder34);
        org.junit.Assert.assertNotNull(defaults35);
        org.junit.Assert.assertNull(filenameFilter38);
        org.junit.Assert.assertTrue("'" + licenseFilter39 + "' != '" + org.apache.rat.license.LicenseSetFactory.LicenseFilter.all + "'", licenseFilter39.equals(org.apache.rat.license.LicenseSetFactory.LicenseFilter.all));
        org.junit.Assert.assertNotNull(iLicenseSet40);
        org.junit.Assert.assertTrue("'" + addLicenseHeaders41 + "' != '" + org.apache.rat.config.AddLicenseHeaders.FALSE + "'", addLicenseHeaders41.equals(org.apache.rat.config.AddLicenseHeaders.FALSE));
        org.junit.Assert.assertNull(claimStatistic45);
        org.junit.Assert.assertTrue("'" + licenseFilter46 + "' != '" + org.apache.rat.license.LicenseSetFactory.LicenseFilter.all + "'", licenseFilter46.equals(org.apache.rat.license.LicenseSetFactory.LicenseFilter.all));
        org.junit.Assert.assertNull(filenameFilter51);
        org.junit.Assert.assertTrue("'" + licenseFilter52 + "' != '" + org.apache.rat.license.LicenseSetFactory.LicenseFilter.all + "'", licenseFilter52.equals(org.apache.rat.license.LicenseSetFactory.LicenseFilter.all));
        org.junit.Assert.assertNotNull(iLicenseSet53);
        org.junit.Assert.assertTrue("'" + addLicenseHeaders54 + "' != '" + org.apache.rat.config.AddLicenseHeaders.FALSE + "'", addLicenseHeaders54.equals(org.apache.rat.config.AddLicenseHeaders.FALSE));
        org.junit.Assert.assertNull(claimStatistic58);
        org.junit.Assert.assertTrue("'" + licenseFilter59 + "' != '" + org.apache.rat.license.LicenseSetFactory.LicenseFilter.all + "'", licenseFilter59.equals(org.apache.rat.license.LicenseSetFactory.LicenseFilter.all));
        org.junit.Assert.assertNotNull(iLicenseSet63);
        org.junit.Assert.assertNotNull(strSet65);
        org.junit.Assert.assertNull(str67);
        org.junit.Assert.assertNotNull(builder69);
        org.junit.Assert.assertNotNull(builder71);
        org.junit.Assert.assertNotNull(builder73);
        org.junit.Assert.assertNotNull(builder75);
    }

    @Test
    public void test12793() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest25.test12793");
        java.io.Writer writer0 = null;
        org.apache.rat.report.xml.writer.impl.base.XmlWriter xmlWriter1 = new org.apache.rat.report.xml.writer.impl.base.XmlWriter(writer0);
        org.apache.rat.report.claim.impl.xml.SimpleXmlClaimReporter simpleXmlClaimReporter2 = new org.apache.rat.report.claim.impl.xml.SimpleXmlClaimReporter((org.apache.rat.report.xml.writer.IXmlWriter) xmlWriter1);
        org.apache.rat.report.claim.impl.xml.SimpleXmlClaimReporter simpleXmlClaimReporter3 = new org.apache.rat.report.claim.impl.xml.SimpleXmlClaimReporter((org.apache.rat.report.xml.writer.IXmlWriter) xmlWriter1);
        org.apache.rat.report.claim.impl.xml.SimpleXmlClaimReporter simpleXmlClaimReporter4 = new org.apache.rat.report.claim.impl.xml.SimpleXmlClaimReporter((org.apache.rat.report.xml.writer.IXmlWriter) xmlWriter1);
        org.apache.rat.report.claim.impl.xml.SimpleXmlClaimReporter simpleXmlClaimReporter5 = new org.apache.rat.report.claim.impl.xml.SimpleXmlClaimReporter((org.apache.rat.report.xml.writer.IXmlWriter) xmlWriter1);
        org.apache.rat.report.claim.impl.xml.SimpleXmlClaimReporter simpleXmlClaimReporter6 = new org.apache.rat.report.claim.impl.xml.SimpleXmlClaimReporter((org.apache.rat.report.xml.writer.IXmlWriter) xmlWriter1);
        org.apache.rat.report.claim.impl.xml.SimpleXmlClaimReporter simpleXmlClaimReporter7 = new org.apache.rat.report.claim.impl.xml.SimpleXmlClaimReporter((org.apache.rat.report.xml.writer.IXmlWriter) xmlWriter1);
        org.apache.rat.report.claim.impl.xml.SimpleXmlClaimReporter simpleXmlClaimReporter8 = new org.apache.rat.report.claim.impl.xml.SimpleXmlClaimReporter((org.apache.rat.report.xml.writer.IXmlWriter) xmlWriter1);
        org.apache.rat.report.claim.impl.xml.SimpleXmlClaimReporter simpleXmlClaimReporter9 = new org.apache.rat.report.claim.impl.xml.SimpleXmlClaimReporter((org.apache.rat.report.xml.writer.IXmlWriter) xmlWriter1);
        org.apache.rat.report.claim.impl.xml.SimpleXmlClaimReporter simpleXmlClaimReporter10 = new org.apache.rat.report.claim.impl.xml.SimpleXmlClaimReporter((org.apache.rat.report.xml.writer.IXmlWriter) xmlWriter1);
        org.apache.rat.report.claim.impl.xml.SimpleXmlClaimReporter simpleXmlClaimReporter11 = new org.apache.rat.report.claim.impl.xml.SimpleXmlClaimReporter((org.apache.rat.report.xml.writer.IXmlWriter) xmlWriter1);
        org.apache.rat.report.claim.impl.xml.SimpleXmlClaimReporter simpleXmlClaimReporter12 = new org.apache.rat.report.claim.impl.xml.SimpleXmlClaimReporter((org.apache.rat.report.xml.writer.IXmlWriter) xmlWriter1);
        org.apache.rat.report.claim.impl.xml.SimpleXmlClaimReporter simpleXmlClaimReporter13 = new org.apache.rat.report.claim.impl.xml.SimpleXmlClaimReporter((org.apache.rat.report.xml.writer.IXmlWriter) xmlWriter1);
        org.apache.rat.report.claim.impl.xml.SimpleXmlClaimReporter simpleXmlClaimReporter14 = new org.apache.rat.report.claim.impl.xml.SimpleXmlClaimReporter((org.apache.rat.report.xml.writer.IXmlWriter) xmlWriter1);
        org.apache.rat.report.claim.impl.xml.SimpleXmlClaimReporter simpleXmlClaimReporter15 = new org.apache.rat.report.claim.impl.xml.SimpleXmlClaimReporter((org.apache.rat.report.xml.writer.IXmlWriter) xmlWriter1);
        org.apache.rat.report.claim.impl.xml.SimpleXmlClaimReporter simpleXmlClaimReporter16 = new org.apache.rat.report.claim.impl.xml.SimpleXmlClaimReporter((org.apache.rat.report.xml.writer.IXmlWriter) xmlWriter1);
        org.apache.rat.report.claim.impl.xml.SimpleXmlClaimReporter simpleXmlClaimReporter17 = new org.apache.rat.report.claim.impl.xml.SimpleXmlClaimReporter((org.apache.rat.report.xml.writer.IXmlWriter) xmlWriter1);
        org.apache.rat.report.claim.impl.xml.SimpleXmlClaimReporter simpleXmlClaimReporter18 = new org.apache.rat.report.claim.impl.xml.SimpleXmlClaimReporter((org.apache.rat.report.xml.writer.IXmlWriter) xmlWriter1);
        // The following exception was thrown during execution in test generation
        try {
            org.apache.rat.report.xml.writer.IXmlWriter iXmlWriter20 = xmlWriter1.openElement((java.lang.CharSequence) "ANYBUILDER:");
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
    }

    @Test
    public void test12794() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest25.test12794");
        org.apache.rat.utils.Log log0 = null;
        org.apache.rat.ReportConfiguration reportConfiguration1 = new org.apache.rat.ReportConfiguration(log0);
        org.apache.rat.report.claim.ClaimStatistic claimStatistic2 = org.apache.rat.Reporter.report(reportConfiguration1);
        org.apache.commons.io.function.IOSupplier<java.io.InputStream> inputStreamIOSupplier3 = reportConfiguration1.getStyleSheet();
        org.apache.rat.report.claim.ClaimStatistic claimStatistic4 = org.apache.rat.Reporter.report(reportConfiguration1);
        org.apache.rat.config.SourceCodeManagementSystems sourceCodeManagementSystems5 = org.apache.rat.config.SourceCodeManagementSystems.CVS;
        java.lang.String str6 = sourceCodeManagementSystems5.getIgnoreFile();
        boolean boolean7 = sourceCodeManagementSystems5.hasIgnoreFile();
        java.util.List<java.lang.String> strList8 = sourceCodeManagementSystems5.getExclusions();
        java.io.FilenameFilter filenameFilter9 = org.apache.rat.Report.parseExclusions(strList8);
        reportConfiguration1.addApprovedLicenseCategories((java.util.Collection<java.lang.String>) strList8);
        org.apache.rat.utils.Log log11 = null;
        org.apache.rat.ReportConfiguration reportConfiguration12 = new org.apache.rat.ReportConfiguration(log11);
        org.apache.rat.report.claim.ClaimStatistic claimStatistic13 = org.apache.rat.Reporter.report(reportConfiguration12);
        org.apache.rat.utils.Log log14 = null;
        org.apache.rat.ReportConfiguration reportConfiguration15 = new org.apache.rat.ReportConfiguration(log14);
        org.apache.rat.report.claim.ClaimStatistic claimStatistic16 = org.apache.rat.Reporter.report(reportConfiguration15);
        org.apache.rat.utils.ReportingSet.Options options17 = org.apache.rat.utils.ReportingSet.Options.OVERWRITE;
        reportConfiguration15.licenseDuplicateOption(options17);
        reportConfiguration12.familyDuplicateOption(options17);
        org.apache.commons.io.function.IOSupplier<java.io.PrintWriter> printWriterIOSupplier20 = reportConfiguration12.getWriter();
        boolean boolean21 = reportConfiguration12.isAddingLicensesForced();
        org.apache.rat.utils.Log log22 = null;
        org.apache.rat.ReportConfiguration reportConfiguration23 = new org.apache.rat.ReportConfiguration(log22);
        org.apache.rat.report.claim.ClaimStatistic claimStatistic24 = org.apache.rat.Reporter.report(reportConfiguration23);
        org.apache.commons.io.function.IOSupplier<java.io.OutputStream> outputStreamIOSupplier25 = reportConfiguration23.getOutput();
        reportConfiguration12.setOut(outputStreamIOSupplier25);
        reportConfiguration1.setOut(outputStreamIOSupplier25);
        org.apache.rat.license.ILicenseFamilyBuilder iLicenseFamilyBuilder28 = new org.apache.rat.license.ILicenseFamilyBuilder();
        java.lang.String str29 = iLicenseFamilyBuilder28.getCategory();
        org.apache.rat.license.ILicenseFamily.Builder builder31 = iLicenseFamilyBuilder28.setLicenseFamilyCategory("AL   ");
        org.apache.rat.license.ILicenseFamily.Builder builder33 = iLicenseFamilyBuilder28.setLicenseFamilyName("binary");
        org.apache.rat.license.ILicenseFamily.Builder builder35 = iLicenseFamilyBuilder28.setLicenseFamilyCategory("3c74a3ec-8235-4035-9db7-f9f475b48681");
        org.apache.rat.license.ILicenseFamily.Builder builder37 = builder35.setLicenseFamilyCategory("49ba0523-306f-4984-949f-9db17b9667d9");
        reportConfiguration1.addFamily(builder35);
        org.apache.rat.report.IReportable iReportable39 = reportConfiguration1.getReportable();
        org.apache.commons.io.function.IOSupplier<java.io.InputStream> inputStreamIOSupplier40 = reportConfiguration1.getStyleSheet();
        org.apache.rat.utils.Log log41 = null;
        org.apache.rat.ReportConfiguration reportConfiguration42 = new org.apache.rat.ReportConfiguration(log41);
        org.apache.rat.report.claim.ClaimStatistic claimStatistic43 = org.apache.rat.Reporter.report(reportConfiguration42);
        org.apache.commons.io.function.IOSupplier<java.io.OutputStream> outputStreamIOSupplier44 = reportConfiguration42.getOutput();
        org.apache.rat.config.AddLicenseHeaders addLicenseHeaders45 = org.apache.rat.config.AddLicenseHeaders.FALSE;
        reportConfiguration42.setAddLicenseHeaders(addLicenseHeaders45);
        reportConfiguration1.setAddLicenseHeaders(addLicenseHeaders45);
        java.io.File file48 = null;
        // The following exception was thrown during execution in test generation
        try {
            reportConfiguration1.setStyleSheet(file48);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: styleSheet file should not be null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNull(claimStatistic2);
        org.junit.Assert.assertNull(inputStreamIOSupplier3);
        org.junit.Assert.assertNull(claimStatistic4);
        org.junit.Assert.assertTrue("'" + sourceCodeManagementSystems5 + "' != '" + org.apache.rat.config.SourceCodeManagementSystems.CVS + "'", sourceCodeManagementSystems5.equals(org.apache.rat.config.SourceCodeManagementSystems.CVS));
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + ".cvsignore" + "'", str6, ".cvsignore");
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + true + "'", boolean7 == true);
        org.junit.Assert.assertNotNull(strList8);
        org.junit.Assert.assertNotNull(filenameFilter9);
        org.junit.Assert.assertNull(claimStatistic13);
        org.junit.Assert.assertNull(claimStatistic16);
        org.junit.Assert.assertTrue("'" + options17 + "' != '" + org.apache.rat.utils.ReportingSet.Options.OVERWRITE + "'", options17.equals(org.apache.rat.utils.ReportingSet.Options.OVERWRITE));
        org.junit.Assert.assertNotNull(printWriterIOSupplier20);
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + false + "'", boolean21 == false);
        org.junit.Assert.assertNull(claimStatistic24);
        org.junit.Assert.assertNotNull(outputStreamIOSupplier25);
        org.junit.Assert.assertNull(str29);
        org.junit.Assert.assertNotNull(builder31);
        org.junit.Assert.assertNotNull(builder33);
        org.junit.Assert.assertNotNull(builder35);
        org.junit.Assert.assertNotNull(builder37);
        org.junit.Assert.assertNull(iReportable39);
        org.junit.Assert.assertNull(inputStreamIOSupplier40);
        org.junit.Assert.assertNull(claimStatistic43);
        org.junit.Assert.assertNotNull(outputStreamIOSupplier44);
        org.junit.Assert.assertTrue("'" + addLicenseHeaders45 + "' != '" + org.apache.rat.config.AddLicenseHeaders.FALSE + "'", addLicenseHeaders45.equals(org.apache.rat.config.AddLicenseHeaders.FALSE));
    }

    @Test
    public void test12795() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest25.test12795");
        org.apache.rat.configuration.builders.RegexBuilder regexBuilder0 = new org.apache.rat.configuration.builders.RegexBuilder();
        java.lang.String str1 = regexBuilder0.toString();
        java.lang.String str2 = regexBuilder0.toString();
        org.apache.rat.configuration.builders.RegexBuilder regexBuilder4 = regexBuilder0.setExpr("");
        java.lang.String str5 = regexBuilder4.toString();
        java.lang.String str6 = regexBuilder4.toString();
        org.junit.Assert.assertEquals("'" + str1 + "' != '" + "RegexBuilder: null" + "'", str1, "RegexBuilder: null");
        org.junit.Assert.assertEquals("'" + str2 + "' != '" + "RegexBuilder: null" + "'", str2, "RegexBuilder: null");
        org.junit.Assert.assertNotNull(regexBuilder4);
        org.junit.Assert.assertEquals("'" + str5 + "' != '" + "RegexBuilder: " + "'", str5, "RegexBuilder: ");
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "RegexBuilder: " + "'", str6, "RegexBuilder: ");
    }

    @Test
    public void test12796() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest25.test12796");
        java.io.Writer writer0 = null;
        org.apache.rat.report.xml.writer.impl.base.XmlWriter xmlWriter1 = new org.apache.rat.report.xml.writer.impl.base.XmlWriter(writer0);
        org.apache.rat.report.claim.impl.xml.SimpleXmlClaimReporter simpleXmlClaimReporter2 = new org.apache.rat.report.claim.impl.xml.SimpleXmlClaimReporter((org.apache.rat.report.xml.writer.IXmlWriter) xmlWriter1);
        org.apache.rat.report.claim.impl.xml.SimpleXmlClaimReporter simpleXmlClaimReporter3 = new org.apache.rat.report.claim.impl.xml.SimpleXmlClaimReporter((org.apache.rat.report.xml.writer.IXmlWriter) xmlWriter1);
        org.apache.rat.report.claim.impl.xml.SimpleXmlClaimReporter simpleXmlClaimReporter4 = new org.apache.rat.report.claim.impl.xml.SimpleXmlClaimReporter((org.apache.rat.report.xml.writer.IXmlWriter) xmlWriter1);
        org.apache.rat.report.claim.impl.xml.SimpleXmlClaimReporter simpleXmlClaimReporter5 = new org.apache.rat.report.claim.impl.xml.SimpleXmlClaimReporter((org.apache.rat.report.xml.writer.IXmlWriter) xmlWriter1);
        org.apache.rat.report.claim.impl.xml.SimpleXmlClaimReporter simpleXmlClaimReporter6 = new org.apache.rat.report.claim.impl.xml.SimpleXmlClaimReporter((org.apache.rat.report.xml.writer.IXmlWriter) xmlWriter1);
        org.apache.rat.report.claim.impl.xml.SimpleXmlClaimReporter simpleXmlClaimReporter7 = new org.apache.rat.report.claim.impl.xml.SimpleXmlClaimReporter((org.apache.rat.report.xml.writer.IXmlWriter) xmlWriter1);
        org.apache.rat.report.claim.impl.xml.SimpleXmlClaimReporter simpleXmlClaimReporter8 = new org.apache.rat.report.claim.impl.xml.SimpleXmlClaimReporter((org.apache.rat.report.xml.writer.IXmlWriter) xmlWriter1);
        org.apache.rat.report.claim.impl.xml.SimpleXmlClaimReporter simpleXmlClaimReporter9 = new org.apache.rat.report.claim.impl.xml.SimpleXmlClaimReporter((org.apache.rat.report.xml.writer.IXmlWriter) xmlWriter1);
        org.apache.rat.report.claim.impl.xml.SimpleXmlClaimReporter simpleXmlClaimReporter10 = new org.apache.rat.report.claim.impl.xml.SimpleXmlClaimReporter((org.apache.rat.report.xml.writer.IXmlWriter) xmlWriter1);
        org.apache.rat.report.claim.impl.xml.SimpleXmlClaimReporter simpleXmlClaimReporter11 = new org.apache.rat.report.claim.impl.xml.SimpleXmlClaimReporter((org.apache.rat.report.xml.writer.IXmlWriter) xmlWriter1);
        org.apache.rat.report.claim.impl.xml.SimpleXmlClaimReporter simpleXmlClaimReporter12 = new org.apache.rat.report.claim.impl.xml.SimpleXmlClaimReporter((org.apache.rat.report.xml.writer.IXmlWriter) xmlWriter1);
        // The following exception was thrown during execution in test generation
        try {
            org.apache.rat.report.xml.writer.IXmlWriter iXmlWriter14 = xmlWriter1.openElement((java.lang.CharSequence) "67f4e");
            org.junit.Assert.fail("Expected exception of type org.apache.rat.report.xml.writer.InvalidXmlException; message: '67f4e' is not a valid element name");
        } catch (org.apache.rat.report.xml.writer.InvalidXmlException e) {
            // Expected exception.
        }
    }

    @Test
    public void test12797() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest25.test12797");
        org.apache.rat.utils.Log log0 = null;
        org.apache.rat.ReportConfiguration reportConfiguration1 = new org.apache.rat.ReportConfiguration(log0);
        java.io.FilenameFilter filenameFilter2 = reportConfiguration1.getInputFileFilter();
        org.apache.rat.license.LicenseSetFactory.LicenseFilter licenseFilter3 = org.apache.rat.license.LicenseSetFactory.LicenseFilter.all;
        java.util.SortedSet<org.apache.rat.license.ILicense> iLicenseSet4 = reportConfiguration1.getLicenses(licenseFilter3);
        org.apache.commons.io.function.IOSupplier<java.io.InputStream> inputStreamIOSupplier5 = reportConfiguration1.getStyleSheet();
        reportConfiguration1.addApprovedLicenseCategory("true");
        org.apache.rat.utils.Log log8 = null;
        org.apache.rat.ReportConfiguration reportConfiguration9 = new org.apache.rat.ReportConfiguration(log8);
        org.apache.rat.report.claim.ClaimStatistic claimStatistic10 = org.apache.rat.Reporter.report(reportConfiguration9);
        org.apache.commons.io.function.IOSupplier<java.io.OutputStream> outputStreamIOSupplier11 = reportConfiguration9.getOutput();
        boolean boolean12 = reportConfiguration9.isAddingLicensesForced();
        java.lang.String str13 = reportConfiguration9.getCopyrightMessage();
        reportConfiguration9.removeApprovedLicenseCategory("AnyBuilder:\nAllBuilder:");
        org.apache.commons.io.function.IOSupplier<java.io.OutputStream> outputStreamIOSupplier16 = reportConfiguration9.getOutput();
        reportConfiguration1.setOut(outputStreamIOSupplier16);
        reportConfiguration1.removeApprovedLicenseCategory("ac588fb8-47ff-4c8a-b192-4b692ac6762c");
        org.apache.rat.Defaults.Builder builder20 = org.apache.rat.Defaults.builder();
        org.apache.rat.Defaults defaults21 = builder20.build();
        org.apache.rat.utils.Log log22 = null;
        org.apache.rat.ReportConfiguration reportConfiguration23 = new org.apache.rat.ReportConfiguration(log22);
        reportConfiguration23.addApprovedLicenseCategory(".cvsignore");
        org.apache.rat.utils.Log log26 = null;
        org.apache.rat.ReportConfiguration reportConfiguration27 = new org.apache.rat.ReportConfiguration(log26);
        java.io.FilenameFilter filenameFilter28 = reportConfiguration27.getInputFileFilter();
        org.apache.rat.license.LicenseSetFactory.LicenseFilter licenseFilter29 = org.apache.rat.license.LicenseSetFactory.LicenseFilter.all;
        java.util.SortedSet<org.apache.rat.license.ILicense> iLicenseSet30 = reportConfiguration27.getLicenses(licenseFilter29);
        reportConfiguration23.addLicensesIfNotPresent((java.util.Collection<org.apache.rat.license.ILicense>) iLicenseSet30);
        java.io.FilenameFilter filenameFilter32 = reportConfiguration23.getInputFileFilter();
        org.apache.rat.utils.Log log33 = null;
        org.apache.rat.ReportConfiguration reportConfiguration34 = new org.apache.rat.ReportConfiguration(log33);
        java.io.FilenameFilter filenameFilter35 = reportConfiguration34.getInputFileFilter();
        org.apache.rat.license.LicenseSetFactory.LicenseFilter licenseFilter36 = org.apache.rat.license.LicenseSetFactory.LicenseFilter.all;
        java.util.SortedSet<org.apache.rat.license.ILicense> iLicenseSet37 = reportConfiguration34.getLicenses(licenseFilter36);
        org.apache.rat.config.AddLicenseHeaders addLicenseHeaders38 = org.apache.rat.config.AddLicenseHeaders.FALSE;
        reportConfiguration34.setAddLicenseHeaders(addLicenseHeaders38);
        org.apache.rat.utils.Log log40 = null;
        org.apache.rat.ReportConfiguration reportConfiguration41 = new org.apache.rat.ReportConfiguration(log40);
        org.apache.rat.report.claim.ClaimStatistic claimStatistic42 = org.apache.rat.Reporter.report(reportConfiguration41);
        org.apache.rat.license.LicenseSetFactory.LicenseFilter licenseFilter43 = org.apache.rat.license.LicenseSetFactory.LicenseFilter.all;
        org.apache.rat.Reporter.listLicenses(reportConfiguration41, licenseFilter43);
        org.apache.rat.Reporter.listLicenses(reportConfiguration34, licenseFilter43);
        org.apache.rat.utils.Log log46 = null;
        org.apache.rat.ReportConfiguration reportConfiguration47 = new org.apache.rat.ReportConfiguration(log46);
        java.io.FilenameFilter filenameFilter48 = reportConfiguration47.getInputFileFilter();
        org.apache.rat.license.LicenseSetFactory.LicenseFilter licenseFilter49 = org.apache.rat.license.LicenseSetFactory.LicenseFilter.all;
        java.util.SortedSet<org.apache.rat.license.ILicense> iLicenseSet50 = reportConfiguration47.getLicenses(licenseFilter49);
        org.apache.rat.config.AddLicenseHeaders addLicenseHeaders51 = org.apache.rat.config.AddLicenseHeaders.FALSE;
        reportConfiguration47.setAddLicenseHeaders(addLicenseHeaders51);
        org.apache.rat.utils.Log log53 = null;
        org.apache.rat.ReportConfiguration reportConfiguration54 = new org.apache.rat.ReportConfiguration(log53);
        org.apache.rat.report.claim.ClaimStatistic claimStatistic55 = org.apache.rat.Reporter.report(reportConfiguration54);
        org.apache.rat.license.LicenseSetFactory.LicenseFilter licenseFilter56 = org.apache.rat.license.LicenseSetFactory.LicenseFilter.all;
        org.apache.rat.Reporter.listLicenses(reportConfiguration54, licenseFilter56);
        org.apache.rat.Reporter.listLicenses(reportConfiguration47, licenseFilter56);
        java.util.SortedSet<org.apache.rat.license.ILicenseFamily> iLicenseFamilySet59 = reportConfiguration34.getLicenseFamilies(licenseFilter56);
        org.apache.rat.Reporter.listLicenseFamilies(reportConfiguration23, licenseFilter56);
        java.util.SortedSet<java.lang.String> strSet61 = defaults21.getLicenseIds(licenseFilter56);
        reportConfiguration1.setFrom(defaults21);
        org.junit.Assert.assertNull(filenameFilter2);
        org.junit.Assert.assertTrue("'" + licenseFilter3 + "' != '" + org.apache.rat.license.LicenseSetFactory.LicenseFilter.all + "'", licenseFilter3.equals(org.apache.rat.license.LicenseSetFactory.LicenseFilter.all));
        org.junit.Assert.assertNotNull(iLicenseSet4);
        org.junit.Assert.assertNull(inputStreamIOSupplier5);
        org.junit.Assert.assertNull(claimStatistic10);
        org.junit.Assert.assertNotNull(outputStreamIOSupplier11);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertNull(str13);
        org.junit.Assert.assertNotNull(outputStreamIOSupplier16);
        org.junit.Assert.assertNotNull(builder20);
        org.junit.Assert.assertNotNull(defaults21);
        org.junit.Assert.assertNull(filenameFilter28);
        org.junit.Assert.assertTrue("'" + licenseFilter29 + "' != '" + org.apache.rat.license.LicenseSetFactory.LicenseFilter.all + "'", licenseFilter29.equals(org.apache.rat.license.LicenseSetFactory.LicenseFilter.all));
        org.junit.Assert.assertNotNull(iLicenseSet30);
        org.junit.Assert.assertNull(filenameFilter32);
        org.junit.Assert.assertNull(filenameFilter35);
        org.junit.Assert.assertTrue("'" + licenseFilter36 + "' != '" + org.apache.rat.license.LicenseSetFactory.LicenseFilter.all + "'", licenseFilter36.equals(org.apache.rat.license.LicenseSetFactory.LicenseFilter.all));
        org.junit.Assert.assertNotNull(iLicenseSet37);
        org.junit.Assert.assertTrue("'" + addLicenseHeaders38 + "' != '" + org.apache.rat.config.AddLicenseHeaders.FALSE + "'", addLicenseHeaders38.equals(org.apache.rat.config.AddLicenseHeaders.FALSE));
        org.junit.Assert.assertNull(claimStatistic42);
        org.junit.Assert.assertTrue("'" + licenseFilter43 + "' != '" + org.apache.rat.license.LicenseSetFactory.LicenseFilter.all + "'", licenseFilter43.equals(org.apache.rat.license.LicenseSetFactory.LicenseFilter.all));
        org.junit.Assert.assertNull(filenameFilter48);
        org.junit.Assert.assertTrue("'" + licenseFilter49 + "' != '" + org.apache.rat.license.LicenseSetFactory.LicenseFilter.all + "'", licenseFilter49.equals(org.apache.rat.license.LicenseSetFactory.LicenseFilter.all));
        org.junit.Assert.assertNotNull(iLicenseSet50);
        org.junit.Assert.assertTrue("'" + addLicenseHeaders51 + "' != '" + org.apache.rat.config.AddLicenseHeaders.FALSE + "'", addLicenseHeaders51.equals(org.apache.rat.config.AddLicenseHeaders.FALSE));
        org.junit.Assert.assertNull(claimStatistic55);
        org.junit.Assert.assertTrue("'" + licenseFilter56 + "' != '" + org.apache.rat.license.LicenseSetFactory.LicenseFilter.all + "'", licenseFilter56.equals(org.apache.rat.license.LicenseSetFactory.LicenseFilter.all));
        org.junit.Assert.assertNotNull(iLicenseFamilySet59);
        org.junit.Assert.assertNotNull(strSet61);
    }

    @Test
    public void test12798() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest25.test12798");
        org.apache.rat.api.MetaData metaData0 = new org.apache.rat.api.MetaData();
        java.lang.String str2 = metaData0.value("COMMON DEVELOPMENT AND DISTRIBUTION LICENSE Version 1.0");
        org.apache.rat.api.MetaData.Datum datum4 = metaData0.get("f false");
        org.apache.rat.api.MetaData.Datum datum7 = new org.apache.rat.api.MetaData.Datum("http://org/apache/rat/meta-data#FileCategory", "Copyright Builder: s:null e:.cvsignore o:null");
        metaData0.add(datum7);
        metaData0.clear();
        org.apache.rat.api.MetaData.Datum datum11 = metaData0.get("AnyBuilder:");
        org.junit.Assert.assertNull(str2);
        org.junit.Assert.assertNull(datum4);
        org.junit.Assert.assertNull(datum11);
    }

    @Test
    public void test12799() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest25.test12799");
        org.apache.rat.utils.DefaultLog defaultLog0 = org.apache.rat.utils.DefaultLog.INSTANCE;
        org.apache.rat.annotation.ApacheV2LicenseAppender apacheV2LicenseAppender1 = new org.apache.rat.annotation.ApacheV2LicenseAppender((org.apache.rat.utils.Log) defaultLog0);
        org.apache.rat.utils.Log.Level level2 = defaultLog0.getLevel();
        java.lang.Object obj3 = null;
        defaultLog0.warn(obj3);
        org.apache.rat.utils.Log.Level level5 = defaultLog0.getLevel();
        java.lang.Object obj6 = null;
        java.lang.Throwable throwable7 = null;
        // The following exception was thrown during execution in test generation
        try {
            defaultLog0.debug(obj6, throwable7);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(defaultLog0);
        org.junit.Assert.assertTrue("'" + level2 + "' != '" + org.apache.rat.utils.Log.Level.ERROR + "'", level2.equals(org.apache.rat.utils.Log.Level.ERROR));
        org.junit.Assert.assertTrue("'" + level5 + "' != '" + org.apache.rat.utils.Log.Level.ERROR + "'", level5.equals(org.apache.rat.utils.Log.Level.ERROR));
    }

    @Test
    public void test12800() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest25.test12800");
        org.apache.rat.analysis.matchers.CopyrightMatcher copyrightMatcher3 = new org.apache.rat.analysis.matchers.CopyrightMatcher("AnyBuilder:\nMathcerRefBuilder: null\nAllBuilder:\nCopyright Builder: s:223f0aba-15d4-49e9-901e-5740c137aebf e:null o:null\nMathcerRefBuilder: null\nCopyright Builder: s:223f0aba-15d4-49e9-901e-5740c137aebf e:null o:null\nCopyright Builder: s:null e:null o:null\nCopyright Builder: s:null e:.cvsignore o:null\nCopyright Builder: s:null e:.cvsignore o:null\nCopyright Builder: s:OASIS e:null o:null\nAnyBuilder:\nMathcerRefBuilder: null\nCopyright Builder: s:null e:null o:null\nMathcerRefBuilder: null\nRegexBuilder: ef75a6e8-7197-4e9e-83bf-f8b367e6b3c5", "Copyright Builder: s:RegexBuilder: 89662180-a89f-497b-9301-227d494d2bae e:null o:null", "ffalse");
    }

    @Test
    public void test12801() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest25.test12801");
        org.apache.rat.license.ILicenseFamilyBuilder iLicenseFamilyBuilder0 = new org.apache.rat.license.ILicenseFamilyBuilder();
        java.lang.String str1 = iLicenseFamilyBuilder0.getCategory();
        org.apache.rat.license.ILicenseFamily.Builder builder3 = iLicenseFamilyBuilder0.setLicenseFamilyCategory("AL   ");
        org.apache.rat.license.ILicenseFamily.Builder builder5 = iLicenseFamilyBuilder0.setLicenseFamilyName("binary");
        org.apache.rat.license.ILicenseFamily.Builder builder7 = iLicenseFamilyBuilder0.setLicenseFamilyCategory("3c74a3ec-8235-4035-9db7-f9f475b48681");
        java.lang.String str8 = iLicenseFamilyBuilder0.getCategory();
        org.apache.rat.license.ILicenseFamily.Builder builder10 = iLicenseFamilyBuilder0.setLicenseFamilyCategory("f02d0cdc36424583b71fdd84a120752c");
        org.apache.rat.license.ILicenseFamily.Builder builder12 = iLicenseFamilyBuilder0.setLicenseFamilyName("Datum [ name ='http://org/apache/rat/meta-data#LicenseFamilyName',value ='????? ']");
        org.apache.rat.license.ILicenseFamily.Builder builder14 = iLicenseFamilyBuilder0.setLicenseFamilyName("89426113-1da8-4591-9c20-8025b6ece33d");
        java.lang.String str15 = iLicenseFamilyBuilder0.getCategory();
        org.apache.rat.license.ILicenseFamily.Builder builder17 = iLicenseFamilyBuilder0.setLicenseFamilyName("8F0EE536-38AE-476A-A728-DE95E24C13C3");
        org.apache.rat.license.ILicenseFamily.Builder builder19 = iLicenseFamilyBuilder0.setLicenseFamilyCategory("fbb40927-c032-4101-ad4a-253592dd8a5f");
        org.apache.rat.license.ILicenseFamily.Builder builder21 = iLicenseFamilyBuilder0.setLicenseFamilyName("TextBuilder: 4fcae176-e574-46ed-b...");
        org.apache.rat.license.ILicenseFamily.Builder builder23 = iLicenseFamilyBuilder0.setLicenseFamilyName("Copyright Builder: s:null e:3c840dc2-bef0-42b5-b26c-35a568d53a24 o:null");
        org.junit.Assert.assertNull(str1);
        org.junit.Assert.assertNotNull(builder3);
        org.junit.Assert.assertNotNull(builder5);
        org.junit.Assert.assertNotNull(builder7);
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "3c74a3ec-8235-4035-9db7-f9f475b48681" + "'", str8, "3c74a3ec-8235-4035-9db7-f9f475b48681");
        org.junit.Assert.assertNotNull(builder10);
        org.junit.Assert.assertNotNull(builder12);
        org.junit.Assert.assertNotNull(builder14);
        org.junit.Assert.assertEquals("'" + str15 + "' != '" + "f02d0cdc36424583b71fdd84a120752c" + "'", str15, "f02d0cdc36424583b71fdd84a120752c");
        org.junit.Assert.assertNotNull(builder17);
        org.junit.Assert.assertNotNull(builder19);
        org.junit.Assert.assertNotNull(builder21);
        org.junit.Assert.assertNotNull(builder23);
    }

    @Test
    public void test12802() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest25.test12802");
        java.io.Writer writer0 = null;
        org.apache.rat.report.xml.writer.impl.base.XmlWriter xmlWriter1 = new org.apache.rat.report.xml.writer.impl.base.XmlWriter(writer0);
        org.apache.rat.report.claim.impl.xml.SimpleXmlClaimReporter simpleXmlClaimReporter2 = new org.apache.rat.report.claim.impl.xml.SimpleXmlClaimReporter((org.apache.rat.report.xml.writer.IXmlWriter) xmlWriter1);
        org.apache.rat.report.claim.impl.xml.SimpleXmlClaimReporter simpleXmlClaimReporter3 = new org.apache.rat.report.claim.impl.xml.SimpleXmlClaimReporter((org.apache.rat.report.xml.writer.IXmlWriter) xmlWriter1);
        org.apache.rat.report.claim.impl.xml.SimpleXmlClaimReporter simpleXmlClaimReporter4 = new org.apache.rat.report.claim.impl.xml.SimpleXmlClaimReporter((org.apache.rat.report.xml.writer.IXmlWriter) xmlWriter1);
        org.apache.rat.report.claim.impl.xml.SimpleXmlClaimReporter simpleXmlClaimReporter5 = new org.apache.rat.report.claim.impl.xml.SimpleXmlClaimReporter((org.apache.rat.report.xml.writer.IXmlWriter) xmlWriter1);
        org.apache.rat.report.claim.impl.xml.SimpleXmlClaimReporter simpleXmlClaimReporter6 = new org.apache.rat.report.claim.impl.xml.SimpleXmlClaimReporter((org.apache.rat.report.xml.writer.IXmlWriter) xmlWriter1);
        org.apache.rat.report.claim.impl.xml.SimpleXmlClaimReporter simpleXmlClaimReporter7 = new org.apache.rat.report.claim.impl.xml.SimpleXmlClaimReporter((org.apache.rat.report.xml.writer.IXmlWriter) xmlWriter1);
        org.apache.rat.report.claim.impl.xml.SimpleXmlClaimReporter simpleXmlClaimReporter8 = new org.apache.rat.report.claim.impl.xml.SimpleXmlClaimReporter((org.apache.rat.report.xml.writer.IXmlWriter) xmlWriter1);
        org.apache.rat.report.claim.impl.xml.SimpleXmlClaimReporter simpleXmlClaimReporter9 = new org.apache.rat.report.claim.impl.xml.SimpleXmlClaimReporter((org.apache.rat.report.xml.writer.IXmlWriter) xmlWriter1);
        org.apache.rat.report.claim.impl.xml.SimpleXmlClaimReporter simpleXmlClaimReporter10 = new org.apache.rat.report.claim.impl.xml.SimpleXmlClaimReporter((org.apache.rat.report.xml.writer.IXmlWriter) xmlWriter1);
        org.apache.rat.report.claim.impl.xml.SimpleXmlClaimReporter simpleXmlClaimReporter11 = new org.apache.rat.report.claim.impl.xml.SimpleXmlClaimReporter((org.apache.rat.report.xml.writer.IXmlWriter) xmlWriter1);
        org.apache.rat.report.claim.impl.xml.SimpleXmlClaimReporter simpleXmlClaimReporter12 = new org.apache.rat.report.claim.impl.xml.SimpleXmlClaimReporter((org.apache.rat.report.xml.writer.IXmlWriter) xmlWriter1);
        org.apache.rat.report.claim.impl.xml.SimpleXmlClaimReporter simpleXmlClaimReporter13 = new org.apache.rat.report.claim.impl.xml.SimpleXmlClaimReporter((org.apache.rat.report.xml.writer.IXmlWriter) xmlWriter1);
        // The following exception was thrown during execution in test generation
        try {
            org.apache.rat.report.xml.writer.IXmlWriter iXmlWriter16 = xmlWriter1.attribute((java.lang.CharSequence) "7480723c65a64470aa58975de51fe7c5", (java.lang.CharSequence) "5b0daab8-75ce-482b-bcb3-4741d11fddf7");
            org.junit.Assert.fail("Expected exception of type org.apache.rat.report.xml.writer.OperationNotAllowedException; message: Close called before an element has been opened.");
        } catch (org.apache.rat.report.xml.writer.OperationNotAllowedException e) {
            // Expected exception.
        }
    }

    @Test
    public void test12803() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest25.test12803");
        org.apache.rat.configuration.builders.MatcherRefBuilder matcherRefBuilder0 = org.apache.rat.analysis.IHeaderMatcher.Builder.matcherRef();
        java.util.Map<java.lang.String, org.apache.rat.analysis.IHeaderMatcher> strMap1 = null;
        org.apache.rat.configuration.builders.MatcherRefBuilder matcherRefBuilder2 = matcherRefBuilder0.setMatchers(strMap1);
        org.apache.rat.configuration.builders.MatcherRefBuilder matcherRefBuilder4 = matcherRefBuilder0.setRefId("38e4211d-0f24-4ec0-aa5c-260c68412f39");
        java.lang.String str5 = matcherRefBuilder0.toString();
        java.lang.String str6 = matcherRefBuilder0.toString();
        java.util.Map<java.lang.String, org.apache.rat.analysis.IHeaderMatcher> strMap7 = null;
        org.apache.rat.configuration.builders.MatcherRefBuilder matcherRefBuilder8 = matcherRefBuilder0.setMatchers(strMap7);
        org.junit.Assert.assertNotNull(matcherRefBuilder0);
        org.junit.Assert.assertNotNull(matcherRefBuilder2);
        org.junit.Assert.assertNotNull(matcherRefBuilder4);
        org.junit.Assert.assertEquals("'" + str5 + "' != '" + "MathcerRefBuilder: 38e4211d-0f24-4ec0-aa5c-260c68412f39" + "'", str5, "MathcerRefBuilder: 38e4211d-0f24-4ec0-aa5c-260c68412f39");
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "MathcerRefBuilder: 38e4211d-0f24-4ec0-aa5c-260c68412f39" + "'", str6, "MathcerRefBuilder: 38e4211d-0f24-4ec0-aa5c-260c68412f39");
        org.junit.Assert.assertNotNull(matcherRefBuilder8);
    }

    @Test
    public void test12804() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest25.test12804");
        org.apache.rat.utils.DefaultLog defaultLog0 = org.apache.rat.utils.DefaultLog.INSTANCE;
        org.apache.rat.license.ILicense.Builder builder1 = org.apache.rat.license.ILicense.builder();
        org.apache.rat.license.ILicense.Builder builder3 = builder1.setLicenseFamilyCategory("");
        org.apache.rat.analysis.matchers.CopyrightMatcher copyrightMatcher7 = new org.apache.rat.analysis.matchers.CopyrightMatcher("", "GPL1 ", "hi!");
        org.apache.rat.analysis.IHeaderMatcher.State state8 = copyrightMatcher7.finalizeState();
        org.apache.rat.license.ILicense.Builder builder9 = builder3.setMatcher((org.apache.rat.analysis.IHeaderMatcher) copyrightMatcher7);
        org.apache.rat.license.ILicense.Builder builder11 = builder9.setLicenseFamilyCategory("");
        defaultLog0.error((java.lang.Object) builder11);
        org.apache.rat.utils.Log log13 = null;
        org.apache.rat.ReportConfiguration reportConfiguration14 = new org.apache.rat.ReportConfiguration(log13);
        java.io.FilenameFilter filenameFilter15 = reportConfiguration14.getInputFileFilter();
        org.apache.rat.license.LicenseSetFactory.LicenseFilter licenseFilter16 = org.apache.rat.license.LicenseSetFactory.LicenseFilter.all;
        java.util.SortedSet<org.apache.rat.license.ILicense> iLicenseSet17 = reportConfiguration14.getLicenses(licenseFilter16);
        org.apache.rat.config.AddLicenseHeaders addLicenseHeaders18 = org.apache.rat.config.AddLicenseHeaders.FALSE;
        reportConfiguration14.setAddLicenseHeaders(addLicenseHeaders18);
        org.apache.rat.utils.Log log20 = null;
        org.apache.rat.ReportConfiguration reportConfiguration21 = new org.apache.rat.ReportConfiguration(log20);
        org.apache.rat.report.claim.ClaimStatistic claimStatistic22 = org.apache.rat.Reporter.report(reportConfiguration21);
        org.apache.rat.license.LicenseSetFactory.LicenseFilter licenseFilter23 = org.apache.rat.license.LicenseSetFactory.LicenseFilter.all;
        org.apache.rat.Reporter.listLicenses(reportConfiguration21, licenseFilter23);
        org.apache.rat.Reporter.listLicenses(reportConfiguration14, licenseFilter23);
        org.apache.rat.utils.Log log26 = null;
        org.apache.rat.ReportConfiguration reportConfiguration27 = new org.apache.rat.ReportConfiguration(log26);
        java.io.FilenameFilter filenameFilter28 = reportConfiguration27.getInputFileFilter();
        org.apache.rat.license.LicenseSetFactory.LicenseFilter licenseFilter29 = org.apache.rat.license.LicenseSetFactory.LicenseFilter.all;
        java.util.SortedSet<org.apache.rat.license.ILicense> iLicenseSet30 = reportConfiguration27.getLicenses(licenseFilter29);
        org.apache.rat.config.AddLicenseHeaders addLicenseHeaders31 = org.apache.rat.config.AddLicenseHeaders.FALSE;
        reportConfiguration27.setAddLicenseHeaders(addLicenseHeaders31);
        org.apache.rat.utils.Log log33 = null;
        org.apache.rat.ReportConfiguration reportConfiguration34 = new org.apache.rat.ReportConfiguration(log33);
        org.apache.rat.report.claim.ClaimStatistic claimStatistic35 = org.apache.rat.Reporter.report(reportConfiguration34);
        org.apache.rat.license.LicenseSetFactory.LicenseFilter licenseFilter36 = org.apache.rat.license.LicenseSetFactory.LicenseFilter.all;
        org.apache.rat.Reporter.listLicenses(reportConfiguration34, licenseFilter36);
        org.apache.rat.Reporter.listLicenses(reportConfiguration27, licenseFilter36);
        org.apache.rat.Reporter.listLicenses(reportConfiguration14, licenseFilter36);
        org.apache.rat.utils.Log log40 = null;
        org.apache.rat.ReportConfiguration reportConfiguration41 = new org.apache.rat.ReportConfiguration(log40);
        org.apache.commons.io.function.IOSupplier<java.io.OutputStream> outputStreamIOSupplier42 = reportConfiguration41.getOutput();
        reportConfiguration14.setOut(outputStreamIOSupplier42);
        org.apache.rat.utils.Log.Level level44 = org.apache.rat.utils.Log.Level.WARN;
        reportConfiguration14.logLicenseCollisions(level44);
        defaultLog0.warn((java.lang.Object) level44);
        defaultLog0.info((java.lang.Object) "TextBuilder: Datum [ name ='http:...");
        org.apache.rat.utils.Log log49 = null;
        org.apache.rat.ReportConfiguration reportConfiguration50 = new org.apache.rat.ReportConfiguration(log49);
        java.io.FilenameFilter filenameFilter51 = reportConfiguration50.getInputFileFilter();
        org.apache.rat.license.LicenseSetFactory.LicenseFilter licenseFilter52 = org.apache.rat.license.LicenseSetFactory.LicenseFilter.all;
        java.util.SortedSet<org.apache.rat.license.ILicense> iLicenseSet53 = reportConfiguration50.getLicenses(licenseFilter52);
        org.apache.rat.license.ILicenseFamily iLicenseFamily54 = null;
        reportConfiguration50.addFamily(iLicenseFamily54);
        reportConfiguration50.setCopyrightMessage("hi!");
        defaultLog0.error((java.lang.Object) reportConfiguration50);
        org.apache.rat.utils.Log.Level level59 = defaultLog0.getLevel();
        org.apache.rat.utils.Log.Level level60 = org.apache.rat.utils.Log.Level.DEBUG;
        org.apache.rat.analysis.matchers.FullTextMatcher fullTextMatcher63 = new org.apache.rat.analysis.matchers.FullTextMatcher("TMF  ", "Apache License Version 2.0");
        org.apache.rat.analysis.IHeaderMatcher.State state65 = fullTextMatcher63.matches("http://org/apache/rat/meta-data#HeaderCategory");
        fullTextMatcher63.reset();
        boolean boolean68 = fullTextMatcher63.doMatch("SpdxBuilder: null");
        org.apache.rat.analysis.IHeaderMatcher.State state69 = fullTextMatcher63.finalizeState();
        java.lang.String str70 = state69.toString();
        defaultLog0.log(level60, (java.lang.Object) state69);
        org.apache.rat.configuration.builders.RegexBuilder regexBuilder72 = new org.apache.rat.configuration.builders.RegexBuilder();
        org.apache.rat.configuration.builders.RegexBuilder regexBuilder74 = regexBuilder72.setExpr("67eb96c2-83b2-456d-bfb0-23ff916bf212");
        java.lang.String str75 = regexBuilder72.toString();
        java.lang.String str76 = regexBuilder72.toString();
        org.apache.rat.analysis.IHeaderMatcher iHeaderMatcher77 = regexBuilder72.build();
        defaultLog0.warn((java.lang.Object) iHeaderMatcher77);
        org.junit.Assert.assertNotNull(defaultLog0);
        org.junit.Assert.assertNotNull(builder1);
        org.junit.Assert.assertNotNull(builder3);
        org.junit.Assert.assertTrue("'" + state8 + "' != '" + org.apache.rat.analysis.IHeaderMatcher.State.f + "'", state8.equals(org.apache.rat.analysis.IHeaderMatcher.State.f));
        org.junit.Assert.assertNotNull(builder9);
        org.junit.Assert.assertNotNull(builder11);
        org.junit.Assert.assertNull(filenameFilter15);
        org.junit.Assert.assertTrue("'" + licenseFilter16 + "' != '" + org.apache.rat.license.LicenseSetFactory.LicenseFilter.all + "'", licenseFilter16.equals(org.apache.rat.license.LicenseSetFactory.LicenseFilter.all));
        org.junit.Assert.assertNotNull(iLicenseSet17);
        org.junit.Assert.assertTrue("'" + addLicenseHeaders18 + "' != '" + org.apache.rat.config.AddLicenseHeaders.FALSE + "'", addLicenseHeaders18.equals(org.apache.rat.config.AddLicenseHeaders.FALSE));
        org.junit.Assert.assertNull(claimStatistic22);
        org.junit.Assert.assertTrue("'" + licenseFilter23 + "' != '" + org.apache.rat.license.LicenseSetFactory.LicenseFilter.all + "'", licenseFilter23.equals(org.apache.rat.license.LicenseSetFactory.LicenseFilter.all));
        org.junit.Assert.assertNull(filenameFilter28);
        org.junit.Assert.assertTrue("'" + licenseFilter29 + "' != '" + org.apache.rat.license.LicenseSetFactory.LicenseFilter.all + "'", licenseFilter29.equals(org.apache.rat.license.LicenseSetFactory.LicenseFilter.all));
        org.junit.Assert.assertNotNull(iLicenseSet30);
        org.junit.Assert.assertTrue("'" + addLicenseHeaders31 + "' != '" + org.apache.rat.config.AddLicenseHeaders.FALSE + "'", addLicenseHeaders31.equals(org.apache.rat.config.AddLicenseHeaders.FALSE));
        org.junit.Assert.assertNull(claimStatistic35);
        org.junit.Assert.assertTrue("'" + licenseFilter36 + "' != '" + org.apache.rat.license.LicenseSetFactory.LicenseFilter.all + "'", licenseFilter36.equals(org.apache.rat.license.LicenseSetFactory.LicenseFilter.all));
        org.junit.Assert.assertNotNull(outputStreamIOSupplier42);
        org.junit.Assert.assertTrue("'" + level44 + "' != '" + org.apache.rat.utils.Log.Level.WARN + "'", level44.equals(org.apache.rat.utils.Log.Level.WARN));
        org.junit.Assert.assertNull(filenameFilter51);
        org.junit.Assert.assertTrue("'" + licenseFilter52 + "' != '" + org.apache.rat.license.LicenseSetFactory.LicenseFilter.all + "'", licenseFilter52.equals(org.apache.rat.license.LicenseSetFactory.LicenseFilter.all));
        org.junit.Assert.assertNotNull(iLicenseSet53);
        org.junit.Assert.assertTrue("'" + level59 + "' != '" + org.apache.rat.utils.Log.Level.ERROR + "'", level59.equals(org.apache.rat.utils.Log.Level.ERROR));
        org.junit.Assert.assertTrue("'" + level60 + "' != '" + org.apache.rat.utils.Log.Level.DEBUG + "'", level60.equals(org.apache.rat.utils.Log.Level.DEBUG));
        org.junit.Assert.assertTrue("'" + state65 + "' != '" + org.apache.rat.analysis.IHeaderMatcher.State.i + "'", state65.equals(org.apache.rat.analysis.IHeaderMatcher.State.i));
        org.junit.Assert.assertTrue("'" + boolean68 + "' != '" + false + "'", boolean68 == false);
        org.junit.Assert.assertTrue("'" + state69 + "' != '" + org.apache.rat.analysis.IHeaderMatcher.State.f + "'", state69.equals(org.apache.rat.analysis.IHeaderMatcher.State.f));
        org.junit.Assert.assertEquals("'" + str70 + "' != '" + "f false" + "'", str70, "f false");
        org.junit.Assert.assertNotNull(regexBuilder74);
        org.junit.Assert.assertEquals("'" + str75 + "' != '" + "RegexBuilder: 67eb96c2-83b2-456d-bfb0-23ff916bf212" + "'", str75, "RegexBuilder: 67eb96c2-83b2-456d-bfb0-23ff916bf212");
        org.junit.Assert.assertEquals("'" + str76 + "' != '" + "RegexBuilder: 67eb96c2-83b2-456d-bfb0-23ff916bf212" + "'", str76, "RegexBuilder: 67eb96c2-83b2-456d-bfb0-23ff916bf212");
        org.junit.Assert.assertNotNull(iHeaderMatcher77);
    }

    @Test
    public void test12805() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest25.test12805");
        org.apache.rat.utils.DefaultLog defaultLog0 = org.apache.rat.utils.DefaultLog.INSTANCE;
        org.apache.rat.utils.Log log1 = null;
        org.apache.rat.ReportConfiguration reportConfiguration2 = new org.apache.rat.ReportConfiguration(log1);
        java.io.FilenameFilter filenameFilter3 = reportConfiguration2.getInputFileFilter();
        org.apache.rat.license.LicenseSetFactory.LicenseFilter licenseFilter4 = org.apache.rat.license.LicenseSetFactory.LicenseFilter.all;
        java.util.SortedSet<org.apache.rat.license.ILicense> iLicenseSet5 = reportConfiguration2.getLicenses(licenseFilter4);
        org.apache.rat.config.AddLicenseHeaders addLicenseHeaders6 = org.apache.rat.config.AddLicenseHeaders.FALSE;
        reportConfiguration2.setAddLicenseHeaders(addLicenseHeaders6);
        org.apache.rat.utils.Log log8 = null;
        org.apache.rat.ReportConfiguration reportConfiguration9 = new org.apache.rat.ReportConfiguration(log8);
        org.apache.rat.report.claim.ClaimStatistic claimStatistic10 = org.apache.rat.Reporter.report(reportConfiguration9);
        org.apache.rat.license.LicenseSetFactory.LicenseFilter licenseFilter11 = org.apache.rat.license.LicenseSetFactory.LicenseFilter.all;
        org.apache.rat.Reporter.listLicenses(reportConfiguration9, licenseFilter11);
        org.apache.rat.Reporter.listLicenses(reportConfiguration2, licenseFilter11);
        org.apache.rat.utils.Log log14 = null;
        org.apache.rat.ReportConfiguration reportConfiguration15 = new org.apache.rat.ReportConfiguration(log14);
        java.io.FilenameFilter filenameFilter16 = reportConfiguration15.getInputFileFilter();
        org.apache.rat.license.LicenseSetFactory.LicenseFilter licenseFilter17 = org.apache.rat.license.LicenseSetFactory.LicenseFilter.all;
        java.util.SortedSet<org.apache.rat.license.ILicense> iLicenseSet18 = reportConfiguration15.getLicenses(licenseFilter17);
        org.apache.rat.config.AddLicenseHeaders addLicenseHeaders19 = org.apache.rat.config.AddLicenseHeaders.FALSE;
        reportConfiguration15.setAddLicenseHeaders(addLicenseHeaders19);
        org.apache.rat.utils.Log log21 = null;
        org.apache.rat.ReportConfiguration reportConfiguration22 = new org.apache.rat.ReportConfiguration(log21);
        org.apache.rat.report.claim.ClaimStatistic claimStatistic23 = org.apache.rat.Reporter.report(reportConfiguration22);
        org.apache.rat.license.LicenseSetFactory.LicenseFilter licenseFilter24 = org.apache.rat.license.LicenseSetFactory.LicenseFilter.all;
        org.apache.rat.Reporter.listLicenses(reportConfiguration22, licenseFilter24);
        org.apache.rat.Reporter.listLicenses(reportConfiguration15, licenseFilter24);
        org.apache.rat.Reporter.listLicenses(reportConfiguration2, licenseFilter24);
        org.apache.rat.utils.Log log28 = null;
        org.apache.rat.ReportConfiguration reportConfiguration29 = new org.apache.rat.ReportConfiguration(log28);
        org.apache.commons.io.function.IOSupplier<java.io.OutputStream> outputStreamIOSupplier30 = reportConfiguration29.getOutput();
        reportConfiguration2.setOut(outputStreamIOSupplier30);
        org.apache.rat.utils.Log log32 = null;
        org.apache.rat.ReportConfiguration reportConfiguration33 = new org.apache.rat.ReportConfiguration(log32);
        org.apache.rat.report.claim.ClaimStatistic claimStatistic34 = org.apache.rat.Reporter.report(reportConfiguration33);
        org.apache.rat.utils.Log log35 = null;
        org.apache.rat.ReportConfiguration reportConfiguration36 = new org.apache.rat.ReportConfiguration(log35);
        org.apache.rat.report.claim.ClaimStatistic claimStatistic37 = org.apache.rat.Reporter.report(reportConfiguration36);
        org.apache.rat.utils.ReportingSet.Options options38 = org.apache.rat.utils.ReportingSet.Options.OVERWRITE;
        reportConfiguration36.licenseDuplicateOption(options38);
        reportConfiguration33.familyDuplicateOption(options38);
        reportConfiguration2.licenseDuplicateOption(options38);
        reportConfiguration2.addApprovedLicenseCategory("W3C Document Copyright");
        org.apache.rat.utils.Log log44 = null;
        org.apache.rat.ReportConfiguration reportConfiguration45 = new org.apache.rat.ReportConfiguration(log44);
        reportConfiguration45.addApprovedLicenseCategory(".cvsignore");
        org.apache.rat.utils.Log.Level level48 = org.apache.rat.utils.Log.Level.ERROR;
        reportConfiguration45.logLicenseCollisions(level48);
        reportConfiguration2.logLicenseCollisions(level48);
        defaultLog0.setLevel(level48);
        defaultLog0.warn((java.lang.Object) "GNU General Public License, version 3");
        org.apache.rat.utils.Log.Level level54 = defaultLog0.getLevel();
        org.apache.rat.annotation.ApacheV2LicenseAppender apacheV2LicenseAppender55 = new org.apache.rat.annotation.ApacheV2LicenseAppender((org.apache.rat.utils.Log) defaultLog0);
        apacheV2LicenseAppender55.setForce(false);
        java.io.File file58 = null;
        // The following exception was thrown during execution in test generation
        try {
            java.lang.String str59 = apacheV2LicenseAppender55.getLicenseHeader(file58);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(defaultLog0);
        org.junit.Assert.assertNull(filenameFilter3);
        org.junit.Assert.assertTrue("'" + licenseFilter4 + "' != '" + org.apache.rat.license.LicenseSetFactory.LicenseFilter.all + "'", licenseFilter4.equals(org.apache.rat.license.LicenseSetFactory.LicenseFilter.all));
        org.junit.Assert.assertNotNull(iLicenseSet5);
        org.junit.Assert.assertTrue("'" + addLicenseHeaders6 + "' != '" + org.apache.rat.config.AddLicenseHeaders.FALSE + "'", addLicenseHeaders6.equals(org.apache.rat.config.AddLicenseHeaders.FALSE));
        org.junit.Assert.assertNull(claimStatistic10);
        org.junit.Assert.assertTrue("'" + licenseFilter11 + "' != '" + org.apache.rat.license.LicenseSetFactory.LicenseFilter.all + "'", licenseFilter11.equals(org.apache.rat.license.LicenseSetFactory.LicenseFilter.all));
        org.junit.Assert.assertNull(filenameFilter16);
        org.junit.Assert.assertTrue("'" + licenseFilter17 + "' != '" + org.apache.rat.license.LicenseSetFactory.LicenseFilter.all + "'", licenseFilter17.equals(org.apache.rat.license.LicenseSetFactory.LicenseFilter.all));
        org.junit.Assert.assertNotNull(iLicenseSet18);
        org.junit.Assert.assertTrue("'" + addLicenseHeaders19 + "' != '" + org.apache.rat.config.AddLicenseHeaders.FALSE + "'", addLicenseHeaders19.equals(org.apache.rat.config.AddLicenseHeaders.FALSE));
        org.junit.Assert.assertNull(claimStatistic23);
        org.junit.Assert.assertTrue("'" + licenseFilter24 + "' != '" + org.apache.rat.license.LicenseSetFactory.LicenseFilter.all + "'", licenseFilter24.equals(org.apache.rat.license.LicenseSetFactory.LicenseFilter.all));
        org.junit.Assert.assertNotNull(outputStreamIOSupplier30);
        org.junit.Assert.assertNull(claimStatistic34);
        org.junit.Assert.assertNull(claimStatistic37);
        org.junit.Assert.assertTrue("'" + options38 + "' != '" + org.apache.rat.utils.ReportingSet.Options.OVERWRITE + "'", options38.equals(org.apache.rat.utils.ReportingSet.Options.OVERWRITE));
        org.junit.Assert.assertTrue("'" + level48 + "' != '" + org.apache.rat.utils.Log.Level.ERROR + "'", level48.equals(org.apache.rat.utils.Log.Level.ERROR));
        org.junit.Assert.assertTrue("'" + level54 + "' != '" + org.apache.rat.utils.Log.Level.ERROR + "'", level54.equals(org.apache.rat.utils.Log.Level.ERROR));
    }

    @Test
    public void test12806() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest25.test12806");
        java.util.regex.Pattern pattern0 = null;
        org.apache.rat.header.HeaderBean headerBean2 = new org.apache.rat.header.HeaderBean(pattern0, true);
        boolean boolean3 = headerBean2.isMatch();
        headerBean2.setMatch(true);
        java.util.regex.Pattern pattern6 = null;
        headerBean2.setHeaderPattern(pattern6);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + true + "'", boolean3 == true);
    }

    @Test
    public void test12807() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest25.test12807");
        boolean boolean1 = org.apache.rat.document.impl.guesser.BinaryGuesser.isExecutable("Datum [ name ='http://org/apache/rat/meta-data#LicenseFamilyCategory',value ='GPL1  ']");
        org.junit.Assert.assertTrue("'" + boolean1 + "' != '" + false + "'", boolean1 == false);
    }

    @Test
    public void test12808() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest25.test12808");
        org.apache.rat.utils.DefaultLog defaultLog0 = org.apache.rat.utils.DefaultLog.INSTANCE;
        org.apache.rat.annotation.ApacheV2LicenseAppender apacheV2LicenseAppender1 = new org.apache.rat.annotation.ApacheV2LicenseAppender((org.apache.rat.utils.Log) defaultLog0);
        org.apache.rat.utils.Log log2 = null;
        org.apache.rat.ReportConfiguration reportConfiguration3 = new org.apache.rat.ReportConfiguration(log2);
        org.apache.rat.report.claim.ClaimStatistic claimStatistic4 = org.apache.rat.Reporter.report(reportConfiguration3);
        org.apache.rat.utils.Log log5 = null;
        org.apache.rat.ReportConfiguration reportConfiguration6 = new org.apache.rat.ReportConfiguration(log5);
        org.apache.rat.report.claim.ClaimStatistic claimStatistic7 = org.apache.rat.Reporter.report(reportConfiguration6);
        org.apache.rat.utils.ReportingSet.Options options8 = org.apache.rat.utils.ReportingSet.Options.OVERWRITE;
        reportConfiguration6.licenseDuplicateOption(options8);
        reportConfiguration3.familyDuplicateOption(options8);
        org.apache.commons.io.function.IOSupplier<java.io.PrintWriter> printWriterIOSupplier11 = reportConfiguration3.getWriter();
        org.apache.rat.utils.Log log12 = null;
        org.apache.rat.ReportConfiguration reportConfiguration13 = new org.apache.rat.ReportConfiguration(log12);
        reportConfiguration13.addApprovedLicenseCategory(".cvsignore");
        org.apache.rat.utils.Log.Level level16 = org.apache.rat.utils.Log.Level.ERROR;
        reportConfiguration13.logFamilyCollisions(level16);
        reportConfiguration3.logFamilyCollisions(level16);
        org.apache.rat.Defaults.Builder builder19 = org.apache.rat.Defaults.builder();
        org.apache.rat.Defaults.Builder builder20 = builder19.noDefault();
        defaultLog0.log(level16, (java.lang.Object) builder19);
        org.apache.rat.annotation.ApacheV2LicenseAppender apacheV2LicenseAppender23 = new org.apache.rat.annotation.ApacheV2LicenseAppender((org.apache.rat.utils.Log) defaultLog0, "Datum [ name ='binary',value =' ']");
        org.apache.rat.utils.Log log24 = null;
        org.apache.rat.ReportConfiguration reportConfiguration25 = new org.apache.rat.ReportConfiguration(log24);
        org.apache.commons.io.function.IOSupplier<java.io.OutputStream> outputStreamIOSupplier26 = reportConfiguration25.getOutput();
        org.apache.commons.io.filefilter.IOFileFilter iOFileFilter27 = reportConfiguration25.getDirectoryFilter();
        java.nio.file.Path path28 = null;
        java.nio.file.attribute.BasicFileAttributes basicFileAttributes29 = null;
        java.nio.file.FileVisitResult fileVisitResult30 = iOFileFilter27.accept(path28, basicFileAttributes29);
        org.apache.commons.io.filefilter.IOFileFilter iOFileFilter31 = iOFileFilter27.negate();
        defaultLog0.debug((java.lang.Object) iOFileFilter27);
        org.apache.rat.annotation.ApacheV2LicenseAppender apacheV2LicenseAppender33 = new org.apache.rat.annotation.ApacheV2LicenseAppender((org.apache.rat.utils.Log) defaultLog0);
        org.apache.rat.utils.Log.Level level34 = defaultLog0.getLevel();
        org.junit.Assert.assertNotNull(defaultLog0);
        org.junit.Assert.assertNull(claimStatistic4);
        org.junit.Assert.assertNull(claimStatistic7);
        org.junit.Assert.assertTrue("'" + options8 + "' != '" + org.apache.rat.utils.ReportingSet.Options.OVERWRITE + "'", options8.equals(org.apache.rat.utils.ReportingSet.Options.OVERWRITE));
        org.junit.Assert.assertNotNull(printWriterIOSupplier11);
        org.junit.Assert.assertTrue("'" + level16 + "' != '" + org.apache.rat.utils.Log.Level.ERROR + "'", level16.equals(org.apache.rat.utils.Log.Level.ERROR));
        org.junit.Assert.assertNotNull(builder19);
        org.junit.Assert.assertNotNull(builder20);
        org.junit.Assert.assertNotNull(outputStreamIOSupplier26);
        org.junit.Assert.assertNotNull(iOFileFilter27);
        org.junit.Assert.assertTrue("'" + fileVisitResult30 + "' != '" + java.nio.file.FileVisitResult.TERMINATE + "'", fileVisitResult30.equals(java.nio.file.FileVisitResult.TERMINATE));
        org.junit.Assert.assertNotNull(iOFileFilter31);
        org.junit.Assert.assertTrue("'" + level34 + "' != '" + org.apache.rat.utils.Log.Level.ERROR + "'", level34.equals(org.apache.rat.utils.Log.Level.ERROR));
    }

    @Test
    public void test12809() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest25.test12809");
        org.apache.rat.api.MetaData metaData0 = new org.apache.rat.api.MetaData();
        boolean boolean2 = metaData0.clear("MANIFEST.MF");
        metaData0.clear();
        org.apache.rat.api.MetaData.Datum datum4 = org.apache.rat.api.MetaData.RAT_LICENSE_FAMILY_CATEGORY_DATUM_GPL1;
        java.lang.String str5 = datum4.getValue();
        metaData0.set(datum4);
        org.apache.rat.api.MetaData metaData7 = new org.apache.rat.api.MetaData();
        java.lang.String str9 = metaData7.value("COMMON DEVELOPMENT AND DISTRIBUTION LICENSE Version 1.0");
        java.lang.String str11 = metaData7.value("W3C Document Copyright");
        boolean boolean13 = metaData7.clear("hi!");
        java.lang.String str15 = metaData7.value("true");
        org.apache.rat.api.MetaData.Datum datum17 = metaData7.get("GNU General Public License, version 1");
        org.apache.rat.api.MetaData.Datum datum19 = metaData7.get("http:");
        org.apache.rat.api.MetaData.Datum datum20 = org.apache.rat.api.MetaData.RAT_APPROVED_LICENSE_DATIM_TRUE;
        metaData7.add(datum20);
        java.lang.String str22 = datum20.toString();
        metaData0.add(datum20);
        java.lang.String str24 = datum20.toString();
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + false + "'", boolean2 == false);
        org.junit.Assert.assertNotNull(datum4);
        org.junit.Assert.assertEquals("'" + str5 + "' != '" + "GPL1 " + "'", str5, "GPL1 ");
        org.junit.Assert.assertNull(str9);
        org.junit.Assert.assertNull(str11);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
        org.junit.Assert.assertNull(str15);
        org.junit.Assert.assertNull(datum17);
        org.junit.Assert.assertNull(datum19);
        org.junit.Assert.assertNotNull(datum20);
        org.junit.Assert.assertEquals("'" + str22 + "' != '" + "Datum [ name ='http://org/apache/rat/meta-data#ApprovedLicense',value ='true ']" + "'", str22, "Datum [ name ='http://org/apache/rat/meta-data#ApprovedLicense',value ='true ']");
        org.junit.Assert.assertEquals("'" + str24 + "' != '" + "Datum [ name ='http://org/apache/rat/meta-data#ApprovedLicense',value ='true ']" + "'", str24, "Datum [ name ='http://org/apache/rat/meta-data#ApprovedLicense',value ='true ']");
    }

    @Test
    public void test12810() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest25.test12810");
        java.io.Writer writer0 = null;
        org.apache.rat.report.xml.writer.impl.base.XmlWriter xmlWriter1 = new org.apache.rat.report.xml.writer.impl.base.XmlWriter(writer0);
        org.apache.rat.report.claim.impl.xml.SimpleXmlClaimReporter simpleXmlClaimReporter2 = new org.apache.rat.report.claim.impl.xml.SimpleXmlClaimReporter((org.apache.rat.report.xml.writer.IXmlWriter) xmlWriter1);
        org.apache.rat.report.claim.impl.xml.SimpleXmlClaimReporter simpleXmlClaimReporter3 = new org.apache.rat.report.claim.impl.xml.SimpleXmlClaimReporter((org.apache.rat.report.xml.writer.IXmlWriter) xmlWriter1);
        org.apache.rat.report.claim.impl.xml.SimpleXmlClaimReporter simpleXmlClaimReporter4 = new org.apache.rat.report.claim.impl.xml.SimpleXmlClaimReporter((org.apache.rat.report.xml.writer.IXmlWriter) xmlWriter1);
        org.apache.rat.report.claim.impl.xml.SimpleXmlClaimReporter simpleXmlClaimReporter5 = new org.apache.rat.report.claim.impl.xml.SimpleXmlClaimReporter((org.apache.rat.report.xml.writer.IXmlWriter) xmlWriter1);
        org.apache.rat.report.claim.impl.xml.SimpleXmlClaimReporter simpleXmlClaimReporter6 = new org.apache.rat.report.claim.impl.xml.SimpleXmlClaimReporter((org.apache.rat.report.xml.writer.IXmlWriter) xmlWriter1);
        org.apache.rat.report.claim.impl.xml.SimpleXmlClaimReporter simpleXmlClaimReporter7 = new org.apache.rat.report.claim.impl.xml.SimpleXmlClaimReporter((org.apache.rat.report.xml.writer.IXmlWriter) xmlWriter1);
        org.apache.rat.report.claim.impl.xml.SimpleXmlClaimReporter simpleXmlClaimReporter8 = new org.apache.rat.report.claim.impl.xml.SimpleXmlClaimReporter((org.apache.rat.report.xml.writer.IXmlWriter) xmlWriter1);
        org.apache.rat.report.claim.impl.xml.SimpleXmlClaimReporter simpleXmlClaimReporter9 = new org.apache.rat.report.claim.impl.xml.SimpleXmlClaimReporter((org.apache.rat.report.xml.writer.IXmlWriter) xmlWriter1);
        org.apache.rat.report.claim.impl.xml.SimpleXmlClaimReporter simpleXmlClaimReporter10 = new org.apache.rat.report.claim.impl.xml.SimpleXmlClaimReporter((org.apache.rat.report.xml.writer.IXmlWriter) xmlWriter1);
        org.apache.rat.report.claim.impl.xml.SimpleXmlClaimReporter simpleXmlClaimReporter11 = new org.apache.rat.report.claim.impl.xml.SimpleXmlClaimReporter((org.apache.rat.report.xml.writer.IXmlWriter) xmlWriter1);
        org.apache.rat.report.claim.impl.xml.SimpleXmlClaimReporter simpleXmlClaimReporter12 = new org.apache.rat.report.claim.impl.xml.SimpleXmlClaimReporter((org.apache.rat.report.xml.writer.IXmlWriter) xmlWriter1);
        org.apache.rat.report.claim.impl.xml.SimpleXmlClaimReporter simpleXmlClaimReporter13 = new org.apache.rat.report.claim.impl.xml.SimpleXmlClaimReporter((org.apache.rat.report.xml.writer.IXmlWriter) xmlWriter1);
        // The following exception was thrown during execution in test generation
        try {
            org.apache.rat.report.xml.writer.IXmlWriter iXmlWriter15 = xmlWriter1.content((java.lang.CharSequence) "Datum [ name ='http://org/apache/rat/meta-data#LicenseFamilyCategory',value ='GPL1  ']");
            org.junit.Assert.fail("Expected exception of type org.apache.rat.report.xml.writer.OperationNotAllowedException; message: An element must be opened before content can be written.");
        } catch (org.apache.rat.report.xml.writer.OperationNotAllowedException e) {
            // Expected exception.
        }
    }

    @Test
    public void test12811() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest25.test12811");
        org.apache.rat.report.claim.ClaimStatistic claimStatistic0 = new org.apache.rat.report.claim.ClaimStatistic();
        claimStatistic0.setNumApproved((int) (short) 10);
        java.util.Map<java.lang.String, java.lang.Integer> strMap3 = null;
        claimStatistic0.setDocumentCategoryMap(strMap3);
        claimStatistic0.setNumUnknown((int) '4');
        claimStatistic0.setNumUnknown((int) (byte) 0);
        java.util.Map<java.lang.String, java.lang.Integer> strMap9 = claimStatistic0.getDocumentCategoryMap();
        claimStatistic0.setNumGenerated(0);
        int int12 = claimStatistic0.getNumGenerated();
        java.util.Map<java.lang.String, java.lang.Integer> strMap13 = claimStatistic0.getDocumentCategoryMap();
        claimStatistic0.setNumUnApproved((-12));
        claimStatistic0.setNumApproved(35);
        claimStatistic0.setNumApproved((-30));
        org.junit.Assert.assertNull(strMap9);
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + 0 + "'", int12 == 0);
        org.junit.Assert.assertNull(strMap13);
    }

    @Test
    public void test12812() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest25.test12812");
        org.apache.rat.document.ToNameTransformer toNameTransformer0 = new org.apache.rat.document.ToNameTransformer();
        org.apache.rat.utils.DefaultLog defaultLog1 = org.apache.rat.utils.DefaultLog.INSTANCE;
        org.apache.rat.license.ILicense.Builder builder2 = org.apache.rat.license.ILicense.builder();
        org.apache.rat.license.ILicense.Builder builder4 = builder2.setLicenseFamilyCategory("");
        org.apache.rat.analysis.matchers.CopyrightMatcher copyrightMatcher8 = new org.apache.rat.analysis.matchers.CopyrightMatcher("", "GPL1 ", "hi!");
        org.apache.rat.analysis.IHeaderMatcher.State state9 = copyrightMatcher8.finalizeState();
        org.apache.rat.license.ILicense.Builder builder10 = builder4.setMatcher((org.apache.rat.analysis.IHeaderMatcher) copyrightMatcher8);
        org.apache.rat.license.ILicense.Builder builder12 = builder10.setLicenseFamilyCategory("");
        defaultLog1.error((java.lang.Object) builder12);
        java.lang.Object obj14 = toNameTransformer0.transform((java.lang.Object) defaultLog1);
        java.lang.String[] strArray20 = new java.lang.String[] { "http://org/apache/rat/meta-data#LicenseFamilyCategory", "Datum [ name ='http://org/apache/rat/meta-data#LicenseFamilyCategory',value ='GPL1  ']", "MANIFEST.MF", "AllBuilder:", "The MIT License" };
        org.apache.rat.utils.ReportingSet<java.lang.String> strSet21 = new org.apache.rat.utils.ReportingSet<java.lang.String>();
        boolean boolean22 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strSet21, strArray20);
        boolean boolean24 = strSet21.addIfNotPresent("http://org/apache/rat/meta-data#LicenseFamilyName");
        boolean boolean26 = strSet21.addIfNotPresent("ef7a8b13-64c3-4510-bb0c-dbf208e1e73f");
        java.util.function.Function<java.lang.String, java.lang.String> strFunction27 = null;
        org.apache.rat.utils.ReportingSet<java.lang.String> strSet28 = strSet21.setMsgFormat(strFunction27);
        org.apache.rat.utils.DefaultLog defaultLog29 = org.apache.rat.utils.DefaultLog.INSTANCE;
        org.apache.rat.utils.Log log30 = null;
        org.apache.rat.ReportConfiguration reportConfiguration31 = new org.apache.rat.ReportConfiguration(log30);
        java.io.FilenameFilter filenameFilter32 = reportConfiguration31.getInputFileFilter();
        org.apache.rat.license.LicenseSetFactory.LicenseFilter licenseFilter33 = org.apache.rat.license.LicenseSetFactory.LicenseFilter.all;
        java.util.SortedSet<org.apache.rat.license.ILicense> iLicenseSet34 = reportConfiguration31.getLicenses(licenseFilter33);
        org.apache.rat.config.AddLicenseHeaders addLicenseHeaders35 = org.apache.rat.config.AddLicenseHeaders.FALSE;
        reportConfiguration31.setAddLicenseHeaders(addLicenseHeaders35);
        org.apache.rat.utils.Log log37 = null;
        org.apache.rat.ReportConfiguration reportConfiguration38 = new org.apache.rat.ReportConfiguration(log37);
        org.apache.rat.report.claim.ClaimStatistic claimStatistic39 = org.apache.rat.Reporter.report(reportConfiguration38);
        org.apache.rat.license.LicenseSetFactory.LicenseFilter licenseFilter40 = org.apache.rat.license.LicenseSetFactory.LicenseFilter.all;
        org.apache.rat.Reporter.listLicenses(reportConfiguration38, licenseFilter40);
        org.apache.rat.Reporter.listLicenses(reportConfiguration31, licenseFilter40);
        org.apache.rat.utils.Log log43 = null;
        org.apache.rat.ReportConfiguration reportConfiguration44 = new org.apache.rat.ReportConfiguration(log43);
        java.io.FilenameFilter filenameFilter45 = reportConfiguration44.getInputFileFilter();
        org.apache.rat.license.LicenseSetFactory.LicenseFilter licenseFilter46 = org.apache.rat.license.LicenseSetFactory.LicenseFilter.all;
        java.util.SortedSet<org.apache.rat.license.ILicense> iLicenseSet47 = reportConfiguration44.getLicenses(licenseFilter46);
        org.apache.rat.config.AddLicenseHeaders addLicenseHeaders48 = org.apache.rat.config.AddLicenseHeaders.FALSE;
        reportConfiguration44.setAddLicenseHeaders(addLicenseHeaders48);
        org.apache.rat.utils.Log log50 = null;
        org.apache.rat.ReportConfiguration reportConfiguration51 = new org.apache.rat.ReportConfiguration(log50);
        org.apache.rat.report.claim.ClaimStatistic claimStatistic52 = org.apache.rat.Reporter.report(reportConfiguration51);
        org.apache.rat.license.LicenseSetFactory.LicenseFilter licenseFilter53 = org.apache.rat.license.LicenseSetFactory.LicenseFilter.all;
        org.apache.rat.Reporter.listLicenses(reportConfiguration51, licenseFilter53);
        org.apache.rat.Reporter.listLicenses(reportConfiguration44, licenseFilter53);
        org.apache.rat.Reporter.listLicenses(reportConfiguration31, licenseFilter53);
        org.apache.rat.utils.Log log57 = null;
        org.apache.rat.ReportConfiguration reportConfiguration58 = new org.apache.rat.ReportConfiguration(log57);
        org.apache.commons.io.function.IOSupplier<java.io.OutputStream> outputStreamIOSupplier59 = reportConfiguration58.getOutput();
        reportConfiguration31.setOut(outputStreamIOSupplier59);
        org.apache.rat.utils.Log log61 = null;
        org.apache.rat.ReportConfiguration reportConfiguration62 = new org.apache.rat.ReportConfiguration(log61);
        org.apache.rat.report.claim.ClaimStatistic claimStatistic63 = org.apache.rat.Reporter.report(reportConfiguration62);
        org.apache.rat.utils.Log log64 = null;
        org.apache.rat.ReportConfiguration reportConfiguration65 = new org.apache.rat.ReportConfiguration(log64);
        org.apache.rat.report.claim.ClaimStatistic claimStatistic66 = org.apache.rat.Reporter.report(reportConfiguration65);
        org.apache.rat.utils.ReportingSet.Options options67 = org.apache.rat.utils.ReportingSet.Options.OVERWRITE;
        reportConfiguration65.licenseDuplicateOption(options67);
        reportConfiguration62.familyDuplicateOption(options67);
        reportConfiguration31.licenseDuplicateOption(options67);
        reportConfiguration31.addApprovedLicenseCategory("W3C Document Copyright");
        org.apache.rat.utils.Log log73 = null;
        org.apache.rat.ReportConfiguration reportConfiguration74 = new org.apache.rat.ReportConfiguration(log73);
        reportConfiguration74.addApprovedLicenseCategory(".cvsignore");
        org.apache.rat.utils.Log.Level level77 = org.apache.rat.utils.Log.Level.ERROR;
        reportConfiguration74.logLicenseCollisions(level77);
        reportConfiguration31.logLicenseCollisions(level77);
        defaultLog29.setLevel(level77);
        defaultLog29.warn((java.lang.Object) "GNU General Public License, version 3");
        org.apache.rat.ReportConfiguration reportConfiguration83 = new org.apache.rat.ReportConfiguration((org.apache.rat.utils.Log) defaultLog29);
        org.apache.rat.utils.DefaultLog defaultLog84 = org.apache.rat.utils.DefaultLog.INSTANCE;
        org.apache.rat.utils.Log log85 = null;
        org.apache.rat.ReportConfiguration reportConfiguration86 = new org.apache.rat.ReportConfiguration(log85);
        reportConfiguration86.addApprovedLicenseCategory(".cvsignore");
        org.apache.rat.utils.Log.Level level89 = org.apache.rat.utils.Log.Level.ERROR;
        reportConfiguration86.logFamilyCollisions(level89);
        defaultLog84.setLevel(level89);
        defaultLog29.debug((java.lang.Object) level89);
        org.apache.rat.utils.ReportingSet<java.lang.String> strSet93 = strSet28.setLogLevel(level89);
        defaultLog1.log(level89, "SpdxBuilder: Datum [ name ='http://org/apache/rat/meta-data#ApprovedLicense',value ='false ']");
        java.lang.Object obj96 = null;
        defaultLog1.debug(obj96);
        org.apache.rat.annotation.ApacheV2LicenseAppender apacheV2LicenseAppender99 = new org.apache.rat.annotation.ApacheV2LicenseAppender((org.apache.rat.utils.Log) defaultLog1, "5442eadd-c5c2-4028-96d7-364d7d405280");
        org.junit.Assert.assertNotNull(defaultLog1);
        org.junit.Assert.assertNotNull(builder2);
        org.junit.Assert.assertNotNull(builder4);
        org.junit.Assert.assertTrue("'" + state9 + "' != '" + org.apache.rat.analysis.IHeaderMatcher.State.f + "'", state9.equals(org.apache.rat.analysis.IHeaderMatcher.State.f));
        org.junit.Assert.assertNotNull(builder10);
        org.junit.Assert.assertNotNull(builder12);
        org.junit.Assert.assertNull(obj14);
        org.junit.Assert.assertNotNull(strArray20);
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + true + "'", boolean22 == true);
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + true + "'", boolean24 == true);
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + true + "'", boolean26 == true);
        org.junit.Assert.assertNotNull(strSet28);
        org.junit.Assert.assertNotNull(defaultLog29);
        org.junit.Assert.assertNull(filenameFilter32);
        org.junit.Assert.assertTrue("'" + licenseFilter33 + "' != '" + org.apache.rat.license.LicenseSetFactory.LicenseFilter.all + "'", licenseFilter33.equals(org.apache.rat.license.LicenseSetFactory.LicenseFilter.all));
        org.junit.Assert.assertNotNull(iLicenseSet34);
        org.junit.Assert.assertTrue("'" + addLicenseHeaders35 + "' != '" + org.apache.rat.config.AddLicenseHeaders.FALSE + "'", addLicenseHeaders35.equals(org.apache.rat.config.AddLicenseHeaders.FALSE));
        org.junit.Assert.assertNull(claimStatistic39);
        org.junit.Assert.assertTrue("'" + licenseFilter40 + "' != '" + org.apache.rat.license.LicenseSetFactory.LicenseFilter.all + "'", licenseFilter40.equals(org.apache.rat.license.LicenseSetFactory.LicenseFilter.all));
        org.junit.Assert.assertNull(filenameFilter45);
        org.junit.Assert.assertTrue("'" + licenseFilter46 + "' != '" + org.apache.rat.license.LicenseSetFactory.LicenseFilter.all + "'", licenseFilter46.equals(org.apache.rat.license.LicenseSetFactory.LicenseFilter.all));
        org.junit.Assert.assertNotNull(iLicenseSet47);
        org.junit.Assert.assertTrue("'" + addLicenseHeaders48 + "' != '" + org.apache.rat.config.AddLicenseHeaders.FALSE + "'", addLicenseHeaders48.equals(org.apache.rat.config.AddLicenseHeaders.FALSE));
        org.junit.Assert.assertNull(claimStatistic52);
        org.junit.Assert.assertTrue("'" + licenseFilter53 + "' != '" + org.apache.rat.license.LicenseSetFactory.LicenseFilter.all + "'", licenseFilter53.equals(org.apache.rat.license.LicenseSetFactory.LicenseFilter.all));
        org.junit.Assert.assertNotNull(outputStreamIOSupplier59);
        org.junit.Assert.assertNull(claimStatistic63);
        org.junit.Assert.assertNull(claimStatistic66);
        org.junit.Assert.assertTrue("'" + options67 + "' != '" + org.apache.rat.utils.ReportingSet.Options.OVERWRITE + "'", options67.equals(org.apache.rat.utils.ReportingSet.Options.OVERWRITE));
        org.junit.Assert.assertTrue("'" + level77 + "' != '" + org.apache.rat.utils.Log.Level.ERROR + "'", level77.equals(org.apache.rat.utils.Log.Level.ERROR));
        org.junit.Assert.assertNotNull(defaultLog84);
        org.junit.Assert.assertTrue("'" + level89 + "' != '" + org.apache.rat.utils.Log.Level.ERROR + "'", level89.equals(org.apache.rat.utils.Log.Level.ERROR));
        org.junit.Assert.assertNotNull(strSet93);
    }

    @Test
    public void test12813() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest25.test12813");
        org.apache.rat.configuration.builders.CopyrightBuilder copyrightBuilder0 = org.apache.rat.analysis.IHeaderMatcher.Builder.copyright();
        org.apache.rat.configuration.builders.CopyrightBuilder copyrightBuilder2 = copyrightBuilder0.setStart("021187d7-27c2-4fd9-bc74-8cc00413ee52");
        org.apache.rat.analysis.IHeaderMatcher iHeaderMatcher3 = copyrightBuilder0.build();
        org.apache.rat.analysis.IHeaderMatcher iHeaderMatcher4 = copyrightBuilder0.build();
        java.lang.String str5 = copyrightBuilder0.toString();
        org.apache.rat.analysis.IHeaderMatcher iHeaderMatcher6 = copyrightBuilder0.build();
        org.junit.Assert.assertNotNull(copyrightBuilder0);
        org.junit.Assert.assertNotNull(copyrightBuilder2);
        org.junit.Assert.assertNotNull(iHeaderMatcher3);
        org.junit.Assert.assertNotNull(iHeaderMatcher4);
        org.junit.Assert.assertEquals("'" + str5 + "' != '" + "Copyright Builder: s:021187d7-27c2-4fd9-bc74-8cc00413ee52 e:null o:null" + "'", str5, "Copyright Builder: s:021187d7-27c2-4fd9-bc74-8cc00413ee52 e:null o:null");
        org.junit.Assert.assertNotNull(iHeaderMatcher6);
    }

    @Test
    public void test12814() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest25.test12814");
        org.apache.rat.utils.Log log0 = null;
        org.apache.rat.ReportConfiguration reportConfiguration1 = new org.apache.rat.ReportConfiguration(log0);
        java.io.FilenameFilter filenameFilter2 = reportConfiguration1.getInputFileFilter();
        org.apache.rat.license.LicenseSetFactory.LicenseFilter licenseFilter3 = org.apache.rat.license.LicenseSetFactory.LicenseFilter.all;
        java.util.SortedSet<org.apache.rat.license.ILicense> iLicenseSet4 = reportConfiguration1.getLicenses(licenseFilter3);
        org.apache.rat.configuration.Format format6 = org.apache.rat.configuration.Format.XML;
        org.apache.rat.configuration.LicenseReader licenseReader7 = format6.licenseReader();
        org.apache.rat.configuration.MatcherReader matcherReader8 = format6.matcherReader();
        org.apache.rat.configuration.LicenseReader licenseReader9 = format6.licenseReader();
        java.util.SortedSet<org.apache.rat.license.ILicense> iLicenseSet10 = licenseReader9.readLicenses();
        org.apache.rat.license.ILicense iLicense11 = org.apache.rat.license.LicenseSetFactory.search("Datum [ name ='http://org/apache/rat/meta-data#LicenseFamilyCategory',value ='GPL1  ']", iLicenseSet10);
        java.lang.String[] strArray17 = new java.lang.String[] { "http://org/apache/rat/meta-data#LicenseFamilyCategory", "Datum [ name ='http://org/apache/rat/meta-data#LicenseFamilyCategory',value ='GPL1  ']", "MANIFEST.MF", "AllBuilder:", "The MIT License" };
        org.apache.rat.utils.ReportingSet<java.lang.String> strSet18 = new org.apache.rat.utils.ReportingSet<java.lang.String>();
        boolean boolean19 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strSet18, strArray17);
        boolean boolean21 = strSet18.addIfNotPresent("http://org/apache/rat/meta-data#LicenseFamilyName");
        boolean boolean23 = strSet18.addIfNotPresent("ef7a8b13-64c3-4510-bb0c-dbf208e1e73f");
        java.util.function.Function<java.lang.String, java.lang.String> strFunction24 = null;
        org.apache.rat.utils.ReportingSet<java.lang.String> strSet25 = strSet18.setMsgFormat(strFunction24);
        org.apache.rat.utils.DefaultLog defaultLog26 = org.apache.rat.utils.DefaultLog.INSTANCE;
        org.apache.rat.utils.Log log27 = null;
        org.apache.rat.ReportConfiguration reportConfiguration28 = new org.apache.rat.ReportConfiguration(log27);
        java.io.FilenameFilter filenameFilter29 = reportConfiguration28.getInputFileFilter();
        org.apache.rat.license.LicenseSetFactory.LicenseFilter licenseFilter30 = org.apache.rat.license.LicenseSetFactory.LicenseFilter.all;
        java.util.SortedSet<org.apache.rat.license.ILicense> iLicenseSet31 = reportConfiguration28.getLicenses(licenseFilter30);
        org.apache.rat.config.AddLicenseHeaders addLicenseHeaders32 = org.apache.rat.config.AddLicenseHeaders.FALSE;
        reportConfiguration28.setAddLicenseHeaders(addLicenseHeaders32);
        org.apache.rat.utils.Log log34 = null;
        org.apache.rat.ReportConfiguration reportConfiguration35 = new org.apache.rat.ReportConfiguration(log34);
        org.apache.rat.report.claim.ClaimStatistic claimStatistic36 = org.apache.rat.Reporter.report(reportConfiguration35);
        org.apache.rat.license.LicenseSetFactory.LicenseFilter licenseFilter37 = org.apache.rat.license.LicenseSetFactory.LicenseFilter.all;
        org.apache.rat.Reporter.listLicenses(reportConfiguration35, licenseFilter37);
        org.apache.rat.Reporter.listLicenses(reportConfiguration28, licenseFilter37);
        org.apache.rat.utils.Log log40 = null;
        org.apache.rat.ReportConfiguration reportConfiguration41 = new org.apache.rat.ReportConfiguration(log40);
        java.io.FilenameFilter filenameFilter42 = reportConfiguration41.getInputFileFilter();
        org.apache.rat.license.LicenseSetFactory.LicenseFilter licenseFilter43 = org.apache.rat.license.LicenseSetFactory.LicenseFilter.all;
        java.util.SortedSet<org.apache.rat.license.ILicense> iLicenseSet44 = reportConfiguration41.getLicenses(licenseFilter43);
        org.apache.rat.config.AddLicenseHeaders addLicenseHeaders45 = org.apache.rat.config.AddLicenseHeaders.FALSE;
        reportConfiguration41.setAddLicenseHeaders(addLicenseHeaders45);
        org.apache.rat.utils.Log log47 = null;
        org.apache.rat.ReportConfiguration reportConfiguration48 = new org.apache.rat.ReportConfiguration(log47);
        org.apache.rat.report.claim.ClaimStatistic claimStatistic49 = org.apache.rat.Reporter.report(reportConfiguration48);
        org.apache.rat.license.LicenseSetFactory.LicenseFilter licenseFilter50 = org.apache.rat.license.LicenseSetFactory.LicenseFilter.all;
        org.apache.rat.Reporter.listLicenses(reportConfiguration48, licenseFilter50);
        org.apache.rat.Reporter.listLicenses(reportConfiguration41, licenseFilter50);
        org.apache.rat.Reporter.listLicenses(reportConfiguration28, licenseFilter50);
        org.apache.rat.utils.Log log54 = null;
        org.apache.rat.ReportConfiguration reportConfiguration55 = new org.apache.rat.ReportConfiguration(log54);
        org.apache.commons.io.function.IOSupplier<java.io.OutputStream> outputStreamIOSupplier56 = reportConfiguration55.getOutput();
        reportConfiguration28.setOut(outputStreamIOSupplier56);
        org.apache.rat.utils.Log log58 = null;
        org.apache.rat.ReportConfiguration reportConfiguration59 = new org.apache.rat.ReportConfiguration(log58);
        org.apache.rat.report.claim.ClaimStatistic claimStatistic60 = org.apache.rat.Reporter.report(reportConfiguration59);
        org.apache.rat.utils.Log log61 = null;
        org.apache.rat.ReportConfiguration reportConfiguration62 = new org.apache.rat.ReportConfiguration(log61);
        org.apache.rat.report.claim.ClaimStatistic claimStatistic63 = org.apache.rat.Reporter.report(reportConfiguration62);
        org.apache.rat.utils.ReportingSet.Options options64 = org.apache.rat.utils.ReportingSet.Options.OVERWRITE;
        reportConfiguration62.licenseDuplicateOption(options64);
        reportConfiguration59.familyDuplicateOption(options64);
        reportConfiguration28.licenseDuplicateOption(options64);
        reportConfiguration28.addApprovedLicenseCategory("W3C Document Copyright");
        org.apache.rat.utils.Log log70 = null;
        org.apache.rat.ReportConfiguration reportConfiguration71 = new org.apache.rat.ReportConfiguration(log70);
        reportConfiguration71.addApprovedLicenseCategory(".cvsignore");
        org.apache.rat.utils.Log.Level level74 = org.apache.rat.utils.Log.Level.ERROR;
        reportConfiguration71.logLicenseCollisions(level74);
        reportConfiguration28.logLicenseCollisions(level74);
        defaultLog26.setLevel(level74);
        defaultLog26.warn((java.lang.Object) "GNU General Public License, version 3");
        org.apache.rat.ReportConfiguration reportConfiguration80 = new org.apache.rat.ReportConfiguration((org.apache.rat.utils.Log) defaultLog26);
        org.apache.rat.utils.DefaultLog defaultLog81 = org.apache.rat.utils.DefaultLog.INSTANCE;
        org.apache.rat.utils.Log log82 = null;
        org.apache.rat.ReportConfiguration reportConfiguration83 = new org.apache.rat.ReportConfiguration(log82);
        reportConfiguration83.addApprovedLicenseCategory(".cvsignore");
        org.apache.rat.utils.Log.Level level86 = org.apache.rat.utils.Log.Level.ERROR;
        reportConfiguration83.logFamilyCollisions(level86);
        defaultLog81.setLevel(level86);
        defaultLog26.debug((java.lang.Object) level86);
        org.apache.rat.utils.ReportingSet<java.lang.String> strSet90 = strSet25.setLogLevel(level86);
        org.apache.rat.license.LicenseSetFactory licenseSetFactory91 = new org.apache.rat.license.LicenseSetFactory(iLicenseSet10, (java.util.Collection<java.lang.String>) strSet90);
        org.apache.rat.license.LicenseSetFactory licenseSetFactory92 = new org.apache.rat.license.LicenseSetFactory(iLicenseSet4, (java.util.Collection<java.lang.String>) strSet90);
        org.apache.rat.utils.Log.Level level93 = null;
        org.apache.rat.utils.ReportingSet<java.lang.String> strSet94 = strSet90.setLogLevel(level93);
        java.util.Comparator<? super java.lang.String> wildcardComparator95 = strSet90.comparator();
        java.util.Comparator<? super java.lang.String> wildcardComparator96 = strSet90.comparator();
        org.junit.Assert.assertNull(filenameFilter2);
        org.junit.Assert.assertTrue("'" + licenseFilter3 + "' != '" + org.apache.rat.license.LicenseSetFactory.LicenseFilter.all + "'", licenseFilter3.equals(org.apache.rat.license.LicenseSetFactory.LicenseFilter.all));
        org.junit.Assert.assertNotNull(iLicenseSet4);
        org.junit.Assert.assertTrue("'" + format6 + "' != '" + org.apache.rat.configuration.Format.XML + "'", format6.equals(org.apache.rat.configuration.Format.XML));
        org.junit.Assert.assertNotNull(licenseReader7);
        org.junit.Assert.assertNotNull(matcherReader8);
        org.junit.Assert.assertNotNull(licenseReader9);
        org.junit.Assert.assertNotNull(iLicenseSet10);
        org.junit.Assert.assertNull(iLicense11);
        org.junit.Assert.assertNotNull(strArray17);
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + true + "'", boolean19 == true);
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + true + "'", boolean21 == true);
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + true + "'", boolean23 == true);
        org.junit.Assert.assertNotNull(strSet25);
        org.junit.Assert.assertNotNull(defaultLog26);
        org.junit.Assert.assertNull(filenameFilter29);
        org.junit.Assert.assertTrue("'" + licenseFilter30 + "' != '" + org.apache.rat.license.LicenseSetFactory.LicenseFilter.all + "'", licenseFilter30.equals(org.apache.rat.license.LicenseSetFactory.LicenseFilter.all));
        org.junit.Assert.assertNotNull(iLicenseSet31);
        org.junit.Assert.assertTrue("'" + addLicenseHeaders32 + "' != '" + org.apache.rat.config.AddLicenseHeaders.FALSE + "'", addLicenseHeaders32.equals(org.apache.rat.config.AddLicenseHeaders.FALSE));
        org.junit.Assert.assertNull(claimStatistic36);
        org.junit.Assert.assertTrue("'" + licenseFilter37 + "' != '" + org.apache.rat.license.LicenseSetFactory.LicenseFilter.all + "'", licenseFilter37.equals(org.apache.rat.license.LicenseSetFactory.LicenseFilter.all));
        org.junit.Assert.assertNull(filenameFilter42);
        org.junit.Assert.assertTrue("'" + licenseFilter43 + "' != '" + org.apache.rat.license.LicenseSetFactory.LicenseFilter.all + "'", licenseFilter43.equals(org.apache.rat.license.LicenseSetFactory.LicenseFilter.all));
        org.junit.Assert.assertNotNull(iLicenseSet44);
        org.junit.Assert.assertTrue("'" + addLicenseHeaders45 + "' != '" + org.apache.rat.config.AddLicenseHeaders.FALSE + "'", addLicenseHeaders45.equals(org.apache.rat.config.AddLicenseHeaders.FALSE));
        org.junit.Assert.assertNull(claimStatistic49);
        org.junit.Assert.assertTrue("'" + licenseFilter50 + "' != '" + org.apache.rat.license.LicenseSetFactory.LicenseFilter.all + "'", licenseFilter50.equals(org.apache.rat.license.LicenseSetFactory.LicenseFilter.all));
        org.junit.Assert.assertNotNull(outputStreamIOSupplier56);
        org.junit.Assert.assertNull(claimStatistic60);
        org.junit.Assert.assertNull(claimStatistic63);
        org.junit.Assert.assertTrue("'" + options64 + "' != '" + org.apache.rat.utils.ReportingSet.Options.OVERWRITE + "'", options64.equals(org.apache.rat.utils.ReportingSet.Options.OVERWRITE));
        org.junit.Assert.assertTrue("'" + level74 + "' != '" + org.apache.rat.utils.Log.Level.ERROR + "'", level74.equals(org.apache.rat.utils.Log.Level.ERROR));
        org.junit.Assert.assertNotNull(defaultLog81);
        org.junit.Assert.assertTrue("'" + level86 + "' != '" + org.apache.rat.utils.Log.Level.ERROR + "'", level86.equals(org.apache.rat.utils.Log.Level.ERROR));
        org.junit.Assert.assertNotNull(strSet90);
        org.junit.Assert.assertNotNull(strSet94);
        org.junit.Assert.assertNull(wildcardComparator95);
        org.junit.Assert.assertNull(wildcardComparator96);
    }

    @Test
    public void test12815() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest25.test12815");
        org.apache.rat.utils.Log log0 = null;
        org.apache.rat.ReportConfiguration reportConfiguration1 = new org.apache.rat.ReportConfiguration(log0);
        org.apache.rat.license.ILicenseFamily[] iLicenseFamilyArray2 = new org.apache.rat.license.ILicenseFamily[] {};
        java.util.ArrayList<org.apache.rat.license.ILicenseFamily> iLicenseFamilyList3 = new java.util.ArrayList<org.apache.rat.license.ILicenseFamily>();
        boolean boolean4 = java.util.Collections.addAll((java.util.Collection<org.apache.rat.license.ILicenseFamily>) iLicenseFamilyList3, iLicenseFamilyArray2);
        reportConfiguration1.addFamilies((java.util.Collection<org.apache.rat.license.ILicenseFamily>) iLicenseFamilyList3);
        org.apache.rat.policy.DefaultPolicy defaultPolicy6 = new org.apache.rat.policy.DefaultPolicy((java.util.Collection<org.apache.rat.license.ILicenseFamily>) iLicenseFamilyList3);
        org.apache.rat.policy.DefaultPolicy defaultPolicy7 = new org.apache.rat.policy.DefaultPolicy((java.util.Collection<org.apache.rat.license.ILicenseFamily>) iLicenseFamilyList3);
        org.apache.rat.api.Document document8 = null;
        defaultPolicy7.analyse(document8);
        org.apache.rat.api.Document document10 = null;
        // The following exception was thrown during execution in test generation
        try {
            defaultPolicy7.reportLicenseApprovalClaim(document10, false);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(iLicenseFamilyArray2);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
    }

    @Test
    public void test12816() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest25.test12816");
        java.io.Writer writer0 = null;
        org.apache.rat.report.xml.writer.impl.base.XmlWriter xmlWriter1 = new org.apache.rat.report.xml.writer.impl.base.XmlWriter(writer0);
        org.apache.rat.report.claim.impl.xml.SimpleXmlClaimReporter simpleXmlClaimReporter2 = new org.apache.rat.report.claim.impl.xml.SimpleXmlClaimReporter((org.apache.rat.report.xml.writer.IXmlWriter) xmlWriter1);
        org.apache.rat.report.claim.impl.xml.SimpleXmlClaimReporter simpleXmlClaimReporter3 = new org.apache.rat.report.claim.impl.xml.SimpleXmlClaimReporter((org.apache.rat.report.xml.writer.IXmlWriter) xmlWriter1);
        org.apache.rat.report.claim.impl.xml.SimpleXmlClaimReporter simpleXmlClaimReporter4 = new org.apache.rat.report.claim.impl.xml.SimpleXmlClaimReporter((org.apache.rat.report.xml.writer.IXmlWriter) xmlWriter1);
        org.apache.rat.report.claim.impl.xml.SimpleXmlClaimReporter simpleXmlClaimReporter5 = new org.apache.rat.report.claim.impl.xml.SimpleXmlClaimReporter((org.apache.rat.report.xml.writer.IXmlWriter) xmlWriter1);
        org.apache.rat.report.claim.impl.xml.SimpleXmlClaimReporter simpleXmlClaimReporter6 = new org.apache.rat.report.claim.impl.xml.SimpleXmlClaimReporter((org.apache.rat.report.xml.writer.IXmlWriter) xmlWriter1);
        org.apache.rat.report.claim.impl.xml.SimpleXmlClaimReporter simpleXmlClaimReporter7 = new org.apache.rat.report.claim.impl.xml.SimpleXmlClaimReporter((org.apache.rat.report.xml.writer.IXmlWriter) xmlWriter1);
        org.apache.rat.report.claim.impl.xml.SimpleXmlClaimReporter simpleXmlClaimReporter8 = new org.apache.rat.report.claim.impl.xml.SimpleXmlClaimReporter((org.apache.rat.report.xml.writer.IXmlWriter) xmlWriter1);
        org.apache.rat.report.claim.impl.xml.SimpleXmlClaimReporter simpleXmlClaimReporter9 = new org.apache.rat.report.claim.impl.xml.SimpleXmlClaimReporter((org.apache.rat.report.xml.writer.IXmlWriter) xmlWriter1);
        org.apache.rat.report.claim.impl.xml.SimpleXmlClaimReporter simpleXmlClaimReporter10 = new org.apache.rat.report.claim.impl.xml.SimpleXmlClaimReporter((org.apache.rat.report.xml.writer.IXmlWriter) xmlWriter1);
        org.apache.rat.report.claim.impl.xml.SimpleXmlClaimReporter simpleXmlClaimReporter11 = new org.apache.rat.report.claim.impl.xml.SimpleXmlClaimReporter((org.apache.rat.report.xml.writer.IXmlWriter) xmlWriter1);
        org.apache.rat.report.claim.impl.xml.SimpleXmlClaimReporter simpleXmlClaimReporter12 = new org.apache.rat.report.claim.impl.xml.SimpleXmlClaimReporter((org.apache.rat.report.xml.writer.IXmlWriter) xmlWriter1);
        org.apache.rat.report.claim.impl.xml.SimpleXmlClaimReporter simpleXmlClaimReporter13 = new org.apache.rat.report.claim.impl.xml.SimpleXmlClaimReporter((org.apache.rat.report.xml.writer.IXmlWriter) xmlWriter1);
        org.apache.rat.report.claim.impl.xml.SimpleXmlClaimReporter simpleXmlClaimReporter14 = new org.apache.rat.report.claim.impl.xml.SimpleXmlClaimReporter((org.apache.rat.report.xml.writer.IXmlWriter) xmlWriter1);
        org.apache.rat.report.claim.impl.xml.SimpleXmlClaimReporter simpleXmlClaimReporter15 = new org.apache.rat.report.claim.impl.xml.SimpleXmlClaimReporter((org.apache.rat.report.xml.writer.IXmlWriter) xmlWriter1);
        org.apache.rat.report.claim.impl.xml.SimpleXmlClaimReporter simpleXmlClaimReporter16 = new org.apache.rat.report.claim.impl.xml.SimpleXmlClaimReporter((org.apache.rat.report.xml.writer.IXmlWriter) xmlWriter1);
        org.apache.rat.report.claim.ClaimStatistic claimStatistic17 = new org.apache.rat.report.claim.ClaimStatistic();
        java.util.Map<java.lang.String, java.lang.Integer> strMap18 = claimStatistic17.getLicenseFileCodeMap();
        java.util.Map<java.lang.String, java.lang.Integer> strMap19 = claimStatistic17.getLicenseFileNameMap();
        claimStatistic17.setNumApproved((int) 'a');
        java.util.Map<java.lang.String, java.lang.Integer> strMap22 = null;
        claimStatistic17.setDocumentCategoryMap(strMap22);
        int int24 = claimStatistic17.getNumUnknown();
        java.util.Map<java.lang.String, java.lang.Integer> strMap25 = claimStatistic17.getLicenseFileNameMap();
        org.apache.rat.utils.Log log26 = null;
        org.apache.rat.ReportConfiguration reportConfiguration27 = new org.apache.rat.ReportConfiguration(log26);
        org.apache.rat.report.claim.ClaimStatistic claimStatistic28 = org.apache.rat.Reporter.report(reportConfiguration27);
        org.apache.rat.utils.ReportingSet.Options options29 = org.apache.rat.utils.ReportingSet.Options.OVERWRITE;
        reportConfiguration27.licenseDuplicateOption(options29);
        java.util.SortedSet<org.apache.rat.license.ILicenseFamily> iLicenseFamilySet32 = org.apache.rat.license.LicenseFamilySetFactory.emptyLicenseFamilySet();
        org.apache.rat.license.ILicenseFamily iLicenseFamily33 = org.apache.rat.license.LicenseFamilySetFactory.search("http://org/apache/rat/meta-data", iLicenseFamilySet32);
        org.apache.rat.policy.DefaultPolicy defaultPolicy34 = new org.apache.rat.policy.DefaultPolicy((java.util.Collection<org.apache.rat.license.ILicenseFamily>) iLicenseFamilySet32);
        reportConfiguration27.addFamilies((java.util.Collection<org.apache.rat.license.ILicenseFamily>) iLicenseFamilySet32);
        // The following exception was thrown during execution in test generation
        try {
            org.apache.rat.report.RatReport ratReport36 = org.apache.rat.report.xml.XmlReportFactory.createStandardReport((org.apache.rat.report.xml.writer.IXmlWriter) xmlWriter1, claimStatistic17, reportConfiguration27);
            org.junit.Assert.fail("Expected exception of type org.apache.rat.ConfigurationException; message: At least one license must be defined");
        } catch (org.apache.rat.ConfigurationException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNull(strMap18);
        org.junit.Assert.assertNull(strMap19);
        org.junit.Assert.assertTrue("'" + int24 + "' != '" + 0 + "'", int24 == 0);
        org.junit.Assert.assertNull(strMap25);
        org.junit.Assert.assertNull(claimStatistic28);
        org.junit.Assert.assertTrue("'" + options29 + "' != '" + org.apache.rat.utils.ReportingSet.Options.OVERWRITE + "'", options29.equals(org.apache.rat.utils.ReportingSet.Options.OVERWRITE));
        org.junit.Assert.assertNotNull(iLicenseFamilySet32);
        org.junit.Assert.assertNull(iLicenseFamily33);
    }

    @Test
    public void test12817() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest25.test12817");
        org.apache.rat.utils.Log log0 = null;
        org.apache.rat.ReportConfiguration reportConfiguration1 = new org.apache.rat.ReportConfiguration(log0);
        java.io.FilenameFilter filenameFilter2 = reportConfiguration1.getInputFileFilter();
        org.apache.rat.license.LicenseSetFactory.LicenseFilter licenseFilter3 = org.apache.rat.license.LicenseSetFactory.LicenseFilter.all;
        java.util.SortedSet<org.apache.rat.license.ILicense> iLicenseSet4 = reportConfiguration1.getLicenses(licenseFilter3);
        org.apache.rat.license.ILicenseFamily iLicenseFamily5 = null;
        reportConfiguration1.addFamily(iLicenseFamily5);
        org.apache.rat.license.ILicense iLicense7 = null;
        reportConfiguration1.addLicense(iLicense7);
        org.apache.rat.license.ILicenseFamily.Builder builder9 = org.apache.rat.license.ILicenseFamily.builder();
        java.lang.String str10 = builder9.getCategory();
        org.apache.rat.license.ILicenseFamily.Builder builder12 = builder9.setLicenseFamilyCategory("Copyright Builder: s:null e:null o:null");
        org.apache.rat.license.ILicenseFamily.Builder builder14 = builder12.setLicenseFamilyName("6486879f-fc81-4b57-aec7-c4c77d540c30");
        org.apache.rat.license.ILicenseFamily.Builder builder16 = builder12.setLicenseFamilyCategory("Datum [ name ='http://org/apache/rat/meta-data#LicenseFamilyCategory',value ='OASIS ']");
        org.apache.rat.license.ILicenseFamily.Builder builder18 = builder16.setLicenseFamilyName("standard");
        org.apache.rat.license.ILicenseFamily iLicenseFamily19 = builder18.build();
        reportConfiguration1.addFamily(iLicenseFamily19);
        org.apache.rat.utils.Log log21 = null;
        org.apache.rat.ReportConfiguration reportConfiguration22 = new org.apache.rat.ReportConfiguration(log21);
        org.apache.rat.report.claim.ClaimStatistic claimStatistic23 = org.apache.rat.Reporter.report(reportConfiguration22);
        org.apache.rat.report.IReportable iReportable24 = null;
        reportConfiguration22.setReportable(iReportable24);
        org.apache.rat.license.ILicense iLicense26 = null;
        reportConfiguration22.addLicense(iLicense26);
        org.apache.rat.utils.Log log28 = null;
        org.apache.rat.ReportConfiguration reportConfiguration29 = new org.apache.rat.ReportConfiguration(log28);
        org.apache.rat.utils.ReportingSet.Options options30 = org.apache.rat.utils.ReportingSet.Options.OVERWRITE;
        reportConfiguration29.licenseDuplicateOption(options30);
        reportConfiguration22.familyDuplicateOption(options30);
        reportConfiguration1.licenseDuplicateOption(options30);
        java.util.function.Consumer<java.lang.String> strConsumer34 = null;
        // The following exception was thrown during execution in test generation
        try {
            reportConfiguration1.validate(strConsumer34);
            org.junit.Assert.fail("Expected exception of type org.apache.rat.ConfigurationException; message: Reportable may not be null");
        } catch (org.apache.rat.ConfigurationException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNull(filenameFilter2);
        org.junit.Assert.assertTrue("'" + licenseFilter3 + "' != '" + org.apache.rat.license.LicenseSetFactory.LicenseFilter.all + "'", licenseFilter3.equals(org.apache.rat.license.LicenseSetFactory.LicenseFilter.all));
        org.junit.Assert.assertNotNull(iLicenseSet4);
        org.junit.Assert.assertNotNull(builder9);
        org.junit.Assert.assertNull(str10);
        org.junit.Assert.assertNotNull(builder12);
        org.junit.Assert.assertNotNull(builder14);
        org.junit.Assert.assertNotNull(builder16);
        org.junit.Assert.assertNotNull(builder18);
        org.junit.Assert.assertNotNull(iLicenseFamily19);
        org.junit.Assert.assertNull(claimStatistic23);
        org.junit.Assert.assertTrue("'" + options30 + "' != '" + org.apache.rat.utils.ReportingSet.Options.OVERWRITE + "'", options30.equals(org.apache.rat.utils.ReportingSet.Options.OVERWRITE));
    }

    @Test
    public void test12818() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest25.test12818");
        org.apache.rat.utils.DefaultLog defaultLog0 = org.apache.rat.utils.DefaultLog.INSTANCE;
        org.apache.rat.license.ILicense.Builder builder1 = org.apache.rat.license.ILicense.builder();
        org.apache.rat.license.ILicense.Builder builder3 = builder1.setLicenseFamilyCategory("");
        org.apache.rat.analysis.matchers.CopyrightMatcher copyrightMatcher7 = new org.apache.rat.analysis.matchers.CopyrightMatcher("", "GPL1 ", "hi!");
        org.apache.rat.analysis.IHeaderMatcher.State state8 = copyrightMatcher7.finalizeState();
        org.apache.rat.license.ILicense.Builder builder9 = builder3.setMatcher((org.apache.rat.analysis.IHeaderMatcher) copyrightMatcher7);
        org.apache.rat.license.ILicense.Builder builder11 = builder9.setLicenseFamilyCategory("");
        defaultLog0.error((java.lang.Object) builder11);
        org.apache.rat.analysis.matchers.CopyrightMatcher copyrightMatcher16 = new org.apache.rat.analysis.matchers.CopyrightMatcher("", "GPL1 ", "hi!");
        copyrightMatcher16.reset();
        org.apache.rat.license.ILicense.Builder builder18 = builder11.setMatcher((org.apache.rat.analysis.IHeaderMatcher) copyrightMatcher16);
        org.apache.rat.configuration.builders.SpdxBuilder spdxBuilder19 = org.apache.rat.analysis.IHeaderMatcher.Builder.spdx();
        java.lang.String str20 = spdxBuilder19.toString();
        org.apache.rat.configuration.builders.SpdxBuilder spdxBuilder22 = spdxBuilder19.setName("ef7a8b13-64c3-4510-bb0c-dbf208e1e73f");
        org.apache.rat.license.ILicense.Builder builder23 = builder18.setMatcher((org.apache.rat.analysis.IHeaderMatcher.Builder) spdxBuilder19);
        org.apache.rat.analysis.IHeaderMatcher iHeaderMatcher24 = spdxBuilder19.build();
        org.apache.rat.configuration.builders.AbstractBuilder abstractBuilder26 = spdxBuilder19.setId("ba9961f9-a0de-4a54-bd1f-a2e9df26a188");
        java.lang.String str27 = spdxBuilder19.toString();
        org.apache.rat.analysis.IHeaderMatcher iHeaderMatcher28 = spdxBuilder19.build();
        org.junit.Assert.assertNotNull(defaultLog0);
        org.junit.Assert.assertNotNull(builder1);
        org.junit.Assert.assertNotNull(builder3);
        org.junit.Assert.assertTrue("'" + state8 + "' != '" + org.apache.rat.analysis.IHeaderMatcher.State.f + "'", state8.equals(org.apache.rat.analysis.IHeaderMatcher.State.f));
        org.junit.Assert.assertNotNull(builder9);
        org.junit.Assert.assertNotNull(builder11);
        org.junit.Assert.assertNotNull(builder18);
        org.junit.Assert.assertNotNull(spdxBuilder19);
        org.junit.Assert.assertEquals("'" + str20 + "' != '" + "SpdxBuilder: null" + "'", str20, "SpdxBuilder: null");
        org.junit.Assert.assertNotNull(spdxBuilder22);
        org.junit.Assert.assertNotNull(builder23);
        org.junit.Assert.assertNotNull(iHeaderMatcher24);
        org.junit.Assert.assertNotNull(abstractBuilder26);
        org.junit.Assert.assertEquals("'" + str27 + "' != '" + "SpdxBuilder: ef7a8b13-64c3-4510-bb0c-dbf208e1e73f" + "'", str27, "SpdxBuilder: ef7a8b13-64c3-4510-bb0c-dbf208e1e73f");
        org.junit.Assert.assertNotNull(iHeaderMatcher28);
    }

    @Test
    public void test12819() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest25.test12819");
        java.lang.String[] strArray5 = new java.lang.String[] { "http://org/apache/rat/meta-data#LicenseFamilyCategory", "Datum [ name ='http://org/apache/rat/meta-data#LicenseFamilyCategory',value ='GPL1  ']", "MANIFEST.MF", "AllBuilder:", "The MIT License" };
        org.apache.rat.utils.ReportingSet<java.lang.String> strSet6 = new org.apache.rat.utils.ReportingSet<java.lang.String>();
        boolean boolean7 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strSet6, strArray5);
        boolean boolean9 = strSet6.addIfNotPresent("http://org/apache/rat/meta-data#LicenseFamilyName");
        java.util.Iterator<java.lang.String> strItor10 = strSet6.iterator();
        strSet6.clear();
        strSet6.clear();
        java.lang.Object[] objArray13 = strSet6.toArray();
        boolean boolean14 = strSet6.isEmpty();
        boolean boolean15 = strSet6.isEmpty();
        org.junit.Assert.assertNotNull(strArray5);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + true + "'", boolean7 == true);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + true + "'", boolean9 == true);
        org.junit.Assert.assertNotNull(strItor10);
        org.junit.Assert.assertNotNull(objArray13);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray13), "[]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray13), "[]");
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + true + "'", boolean14 == true);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + true + "'", boolean15 == true);
    }

    @Test
    public void test12820() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest25.test12820");
        org.apache.rat.Defaults.Builder builder0 = org.apache.rat.Defaults.builder();
        org.apache.rat.Defaults defaults1 = builder0.build();
        org.apache.rat.Defaults.Builder builder2 = builder0.noDefault();
        org.apache.rat.Defaults.Builder builder4 = builder0.remove("AllBuilder:");
        org.apache.rat.Defaults.Builder builder6 = builder0.remove("GNU General Public License, version 2");
        org.apache.rat.Defaults.Builder builder8 = builder0.remove("NotBuilder: MathcerRefBuilder: null");
        org.apache.rat.Defaults.Builder builder10 = builder0.remove("MathcerRefBuilder: t true");
        org.apache.rat.Defaults.Builder builder11 = builder10.noDefault();
        org.apache.rat.Defaults.Builder builder13 = builder11.add("8F0EE536-38AE-476A-A728-DE95E24C13C3");
        org.apache.rat.Defaults.Builder builder15 = builder13.add("RegexBuilder: f96ad0b6-2267-4692-93e4-227659f9d621");
        java.net.URL uRL16 = null;
        // The following exception was thrown during execution in test generation
        try {
            org.apache.rat.Defaults.Builder builder17 = builder13.remove(uRL16);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(builder0);
        org.junit.Assert.assertNotNull(defaults1);
        org.junit.Assert.assertNotNull(builder2);
        org.junit.Assert.assertNotNull(builder4);
        org.junit.Assert.assertNotNull(builder6);
        org.junit.Assert.assertNotNull(builder8);
        org.junit.Assert.assertNotNull(builder10);
        org.junit.Assert.assertNotNull(builder11);
        org.junit.Assert.assertNotNull(builder13);
        org.junit.Assert.assertNotNull(builder15);
    }

    @Test
    public void test12821() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest25.test12821");
        org.apache.rat.Defaults.Builder builder0 = org.apache.rat.Defaults.builder();
        org.apache.rat.Defaults defaults1 = builder0.build();
        org.apache.rat.Defaults.Builder builder2 = builder0.noDefault();
        org.apache.rat.Defaults.Builder builder4 = builder0.remove("AllBuilder:");
        org.apache.rat.Defaults.Builder builder6 = builder4.add("?????");
        org.apache.rat.Defaults.Builder builder7 = builder6.noDefault();
        org.apache.rat.Defaults.Builder builder9 = builder6.add("SPDX:ef7a8b13-64c3-4510-bb0c-dbf208e1e73f");
        org.junit.Assert.assertNotNull(builder0);
        org.junit.Assert.assertNotNull(defaults1);
        org.junit.Assert.assertNotNull(builder2);
        org.junit.Assert.assertNotNull(builder4);
        org.junit.Assert.assertNotNull(builder6);
        org.junit.Assert.assertNotNull(builder7);
        org.junit.Assert.assertNotNull(builder9);
    }

    @Test
    public void test12822() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest25.test12822");
        org.apache.rat.api.MetaData metaData0 = new org.apache.rat.api.MetaData();
        java.lang.String str2 = metaData0.value("COMMON DEVELOPMENT AND DISTRIBUTION LICENSE Version 1.0");
        org.apache.rat.api.MetaData.Datum datum4 = metaData0.get("f false");
        org.apache.rat.api.MetaData.Datum datum5 = org.apache.rat.api.MetaData.RAT_LICENSE_FAMILY_NAME_DATUM_GPL_VERSION_3;
        metaData0.set(datum5);
        org.apache.rat.api.MetaData.Datum datum8 = metaData0.get("021187d7-27c2-4fd9-bc74-8cc00413ee52");
        org.apache.rat.api.MetaData metaData9 = new org.apache.rat.api.MetaData();
        java.lang.String str11 = metaData9.value("COMMON DEVELOPMENT AND DISTRIBUTION LICENSE Version 1.0");
        java.lang.String str13 = metaData9.value("W3C Document Copyright");
        boolean boolean15 = metaData9.clear("hi!");
        java.lang.String str17 = metaData9.value("true");
        org.apache.rat.api.MetaData.Datum datum19 = metaData9.get("GNU General Public License, version 1");
        org.apache.rat.api.MetaData.Datum datum21 = metaData9.get("http:");
        org.apache.rat.api.MetaData.Datum datum22 = org.apache.rat.api.MetaData.RAT_APPROVED_LICENSE_DATIM_TRUE;
        metaData9.add(datum22);
        boolean boolean25 = metaData9.clear("");
        org.apache.rat.api.MetaData.Datum datum27 = metaData9.get("6fbe8280-d578-4ea3-a1a8-34d68e85abc2");
        org.apache.rat.api.MetaData metaData28 = new org.apache.rat.api.MetaData();
        java.lang.String str30 = metaData28.value("COMMON DEVELOPMENT AND DISTRIBUTION LICENSE Version 1.0");
        java.lang.String str32 = metaData28.value("W3C Document Copyright");
        boolean boolean34 = metaData28.clear("hi!");
        metaData28.clear();
        org.apache.rat.api.MetaData.Datum datum38 = new org.apache.rat.api.MetaData.Datum("b2eafdef-0477-406a-8b6d-8d332a86679e", ".cvsignore");
        metaData28.add(datum38);
        metaData9.set(datum38);
        metaData0.add(datum38);
        org.junit.Assert.assertNull(str2);
        org.junit.Assert.assertNull(datum4);
        org.junit.Assert.assertNotNull(datum5);
        org.junit.Assert.assertNull(datum8);
        org.junit.Assert.assertNull(str11);
        org.junit.Assert.assertNull(str13);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + false + "'", boolean15 == false);
        org.junit.Assert.assertNull(str17);
        org.junit.Assert.assertNull(datum19);
        org.junit.Assert.assertNull(datum21);
        org.junit.Assert.assertNotNull(datum22);
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + false + "'", boolean25 == false);
        org.junit.Assert.assertNull(datum27);
        org.junit.Assert.assertNull(str30);
        org.junit.Assert.assertNull(str32);
        org.junit.Assert.assertTrue("'" + boolean34 + "' != '" + false + "'", boolean34 == false);
    }

    @Test
    public void test12823() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest25.test12823");
        org.apache.rat.utils.Log log0 = null;
        org.apache.rat.ReportConfiguration reportConfiguration1 = new org.apache.rat.ReportConfiguration(log0);
        org.apache.commons.io.function.IOSupplier<java.io.OutputStream> outputStreamIOSupplier2 = reportConfiguration1.getOutput();
        reportConfiguration1.setCopyrightMessage("MANIFEST.MF");
        org.apache.rat.utils.Log log5 = reportConfiguration1.getLog();
        org.apache.rat.utils.Log log6 = null;
        org.apache.rat.ReportConfiguration reportConfiguration7 = new org.apache.rat.ReportConfiguration(log6);
        java.io.FilenameFilter filenameFilter8 = reportConfiguration7.getInputFileFilter();
        org.apache.rat.license.LicenseSetFactory.LicenseFilter licenseFilter9 = org.apache.rat.license.LicenseSetFactory.LicenseFilter.all;
        java.util.SortedSet<org.apache.rat.license.ILicense> iLicenseSet10 = reportConfiguration7.getLicenses(licenseFilter9);
        org.apache.rat.config.AddLicenseHeaders addLicenseHeaders11 = org.apache.rat.config.AddLicenseHeaders.FALSE;
        reportConfiguration7.setAddLicenseHeaders(addLicenseHeaders11);
        org.apache.rat.utils.Log log13 = null;
        org.apache.rat.ReportConfiguration reportConfiguration14 = new org.apache.rat.ReportConfiguration(log13);
        org.apache.rat.report.claim.ClaimStatistic claimStatistic15 = org.apache.rat.Reporter.report(reportConfiguration14);
        org.apache.rat.license.LicenseSetFactory.LicenseFilter licenseFilter16 = org.apache.rat.license.LicenseSetFactory.LicenseFilter.all;
        org.apache.rat.Reporter.listLicenses(reportConfiguration14, licenseFilter16);
        org.apache.rat.Reporter.listLicenses(reportConfiguration7, licenseFilter16);
        org.apache.rat.utils.Log log19 = null;
        org.apache.rat.ReportConfiguration reportConfiguration20 = new org.apache.rat.ReportConfiguration(log19);
        java.io.FilenameFilter filenameFilter21 = reportConfiguration20.getInputFileFilter();
        org.apache.rat.license.LicenseSetFactory.LicenseFilter licenseFilter22 = org.apache.rat.license.LicenseSetFactory.LicenseFilter.all;
        java.util.SortedSet<org.apache.rat.license.ILicense> iLicenseSet23 = reportConfiguration20.getLicenses(licenseFilter22);
        org.apache.rat.config.AddLicenseHeaders addLicenseHeaders24 = org.apache.rat.config.AddLicenseHeaders.FALSE;
        reportConfiguration20.setAddLicenseHeaders(addLicenseHeaders24);
        org.apache.rat.utils.Log log26 = null;
        org.apache.rat.ReportConfiguration reportConfiguration27 = new org.apache.rat.ReportConfiguration(log26);
        org.apache.rat.report.claim.ClaimStatistic claimStatistic28 = org.apache.rat.Reporter.report(reportConfiguration27);
        org.apache.rat.license.LicenseSetFactory.LicenseFilter licenseFilter29 = org.apache.rat.license.LicenseSetFactory.LicenseFilter.all;
        org.apache.rat.Reporter.listLicenses(reportConfiguration27, licenseFilter29);
        org.apache.rat.Reporter.listLicenses(reportConfiguration20, licenseFilter29);
        java.util.SortedSet<org.apache.rat.license.ILicenseFamily> iLicenseFamilySet32 = reportConfiguration7.getLicenseFamilies(licenseFilter29);
        org.apache.rat.license.ILicense[] iLicenseArray34 = new org.apache.rat.license.ILicense[] {};
        java.util.TreeSet<org.apache.rat.license.ILicense> iLicenseSet35 = new java.util.TreeSet<org.apache.rat.license.ILicense>();
        boolean boolean36 = java.util.Collections.addAll((java.util.Collection<org.apache.rat.license.ILicense>) iLicenseSet35, iLicenseArray34);
        java.lang.String[] strArray49 = new java.lang.String[] { "GPL2 ", "GPL1 ", "notice", "http://org/apache/rat/meta-data#LicenseFamilyName", "notice", "GPL2 ", "http://org/apache/rat/meta-data#LicenseFamilyName", "", "GPL2 ", "", "GPL1 ", "hi!" };
        java.util.ArrayList<java.lang.String> strList50 = new java.util.ArrayList<java.lang.String>();
        boolean boolean51 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strList50, strArray49);
        org.apache.rat.license.LicenseSetFactory licenseSetFactory52 = new org.apache.rat.license.LicenseSetFactory((java.util.SortedSet<org.apache.rat.license.ILicense>) iLicenseSet35, (java.util.Collection<java.lang.String>) strList50);
        org.apache.rat.license.ILicense iLicense53 = org.apache.rat.license.LicenseSetFactory.search("JAVA", (java.util.SortedSet<org.apache.rat.license.ILicense>) iLicenseSet35);
        reportConfiguration7.addLicensesIfNotPresent((java.util.Collection<org.apache.rat.license.ILicense>) iLicenseSet35);
        reportConfiguration1.addLicensesIfNotPresent((java.util.Collection<org.apache.rat.license.ILicense>) iLicenseSet35);
        java.net.URL uRL56 = null;
        // The following exception was thrown during execution in test generation
        try {
            reportConfiguration1.setStyleSheet(uRL56);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: styleSheet file should not be null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(outputStreamIOSupplier2);
        org.junit.Assert.assertNull(log5);
        org.junit.Assert.assertNull(filenameFilter8);
        org.junit.Assert.assertTrue("'" + licenseFilter9 + "' != '" + org.apache.rat.license.LicenseSetFactory.LicenseFilter.all + "'", licenseFilter9.equals(org.apache.rat.license.LicenseSetFactory.LicenseFilter.all));
        org.junit.Assert.assertNotNull(iLicenseSet10);
        org.junit.Assert.assertTrue("'" + addLicenseHeaders11 + "' != '" + org.apache.rat.config.AddLicenseHeaders.FALSE + "'", addLicenseHeaders11.equals(org.apache.rat.config.AddLicenseHeaders.FALSE));
        org.junit.Assert.assertNull(claimStatistic15);
        org.junit.Assert.assertTrue("'" + licenseFilter16 + "' != '" + org.apache.rat.license.LicenseSetFactory.LicenseFilter.all + "'", licenseFilter16.equals(org.apache.rat.license.LicenseSetFactory.LicenseFilter.all));
        org.junit.Assert.assertNull(filenameFilter21);
        org.junit.Assert.assertTrue("'" + licenseFilter22 + "' != '" + org.apache.rat.license.LicenseSetFactory.LicenseFilter.all + "'", licenseFilter22.equals(org.apache.rat.license.LicenseSetFactory.LicenseFilter.all));
        org.junit.Assert.assertNotNull(iLicenseSet23);
        org.junit.Assert.assertTrue("'" + addLicenseHeaders24 + "' != '" + org.apache.rat.config.AddLicenseHeaders.FALSE + "'", addLicenseHeaders24.equals(org.apache.rat.config.AddLicenseHeaders.FALSE));
        org.junit.Assert.assertNull(claimStatistic28);
        org.junit.Assert.assertTrue("'" + licenseFilter29 + "' != '" + org.apache.rat.license.LicenseSetFactory.LicenseFilter.all + "'", licenseFilter29.equals(org.apache.rat.license.LicenseSetFactory.LicenseFilter.all));
        org.junit.Assert.assertNotNull(iLicenseFamilySet32);
        org.junit.Assert.assertNotNull(iLicenseArray34);
        org.junit.Assert.assertTrue("'" + boolean36 + "' != '" + false + "'", boolean36 == false);
        org.junit.Assert.assertNotNull(strArray49);
        org.junit.Assert.assertTrue("'" + boolean51 + "' != '" + true + "'", boolean51 == true);
        org.junit.Assert.assertNull(iLicense53);
    }

    @Test
    public void test12824() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest25.test12824");
        org.apache.rat.report.claim.ClaimStatistic claimStatistic0 = new org.apache.rat.report.claim.ClaimStatistic();
        claimStatistic0.setNumApproved((int) (short) 10);
        java.util.Map<java.lang.String, java.lang.Integer> strMap3 = null;
        claimStatistic0.setDocumentCategoryMap(strMap3);
        claimStatistic0.setNumUnknown((int) '4');
        claimStatistic0.setNumUnknown((int) (byte) 0);
        claimStatistic0.setNumUnknown((int) (byte) 10);
        java.util.Map<java.lang.String, java.lang.Integer> strMap11 = claimStatistic0.getDocumentCategoryMap();
        int int12 = claimStatistic0.getNumUnknown();
        java.util.Map<java.lang.String, java.lang.Integer> strMap13 = null;
        claimStatistic0.setLicenseFileCodeMap(strMap13);
        int int15 = claimStatistic0.getNumUnknown();
        java.util.Map<java.lang.String, java.lang.Integer> strMap16 = null;
        claimStatistic0.setLicenseFileCodeMap(strMap16);
        java.util.Map<java.lang.String, java.lang.Integer> strMap18 = claimStatistic0.getLicenseFileCodeMap();
        org.junit.Assert.assertNull(strMap11);
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + 10 + "'", int12 == 10);
        org.junit.Assert.assertTrue("'" + int15 + "' != '" + 10 + "'", int15 == 10);
        org.junit.Assert.assertNull(strMap18);
    }

    @Test
    public void test12825() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest25.test12825");
        org.apache.rat.license.ILicenseFamilyBuilder iLicenseFamilyBuilder0 = new org.apache.rat.license.ILicenseFamilyBuilder();
        org.apache.rat.license.ILicenseFamily.Builder builder2 = iLicenseFamilyBuilder0.setLicenseFamilyCategory("Modified BSD License");
        java.lang.String str3 = iLicenseFamilyBuilder0.getCategory();
        org.apache.rat.license.ILicenseFamily.Builder builder5 = iLicenseFamilyBuilder0.setLicenseFamilyName("SpdxBuilder: 7d01b1b3-e7b9-4f85-b3dd-e0334dea8844");
        org.apache.rat.license.ILicenseFamily.Builder builder7 = iLicenseFamilyBuilder0.setLicenseFamilyName("AnyBuilder:\nMathcerRefBuilder: null\nAllBuilder:\nCopyright Builder: s:223f0aba-15d4-49e9-901e-5740c137aebf e:null o:null\nMathcerRefBuilder: null\nCopyright Builder: s:223f0aba-15d4-49e9-901e-5740c137aebf e:null o:null\nCopyright Builder: s:null e:null o:null\nCopyright Builder: s:null e:.cvsignore o:null\nCopyright Builder: s:null e:.cvsignore o:null\nCopyright Builder: s:OASIS e:null o:null\nAnyBuilder:\nMathcerRefBuilder: null\nCopyright Builder: s:null e:null o:null\nMathcerRefBuilder: null");
        org.apache.rat.license.ILicenseFamily.Builder builder9 = builder7.setLicenseFamilyName("891e6b0c-cbbb-4688-a686-7620903b54dd");
        org.junit.Assert.assertNotNull(builder2);
        org.junit.Assert.assertEquals("'" + str3 + "' != '" + "Modified BSD License" + "'", str3, "Modified BSD License");
        org.junit.Assert.assertNotNull(builder5);
        org.junit.Assert.assertNotNull(builder7);
        org.junit.Assert.assertNotNull(builder9);
    }

    @Test
    public void test12826() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest25.test12826");
        org.apache.rat.configuration.builders.RegexBuilder regexBuilder0 = new org.apache.rat.configuration.builders.RegexBuilder();
        java.lang.String str1 = regexBuilder0.toString();
        org.apache.rat.configuration.builders.RegexBuilder regexBuilder3 = regexBuilder0.setExpr("GNU General Public License, version 1");
        org.apache.rat.analysis.IHeaderMatcher iHeaderMatcher4 = regexBuilder3.build();
        org.apache.rat.analysis.IHeaderMatcher iHeaderMatcher5 = regexBuilder3.build();
        org.apache.rat.configuration.builders.RegexBuilder regexBuilder7 = regexBuilder3.setExpr("");
        java.lang.String str8 = regexBuilder3.toString();
        org.apache.rat.analysis.IHeaderMatcher iHeaderMatcher9 = regexBuilder3.build();
        org.junit.Assert.assertEquals("'" + str1 + "' != '" + "RegexBuilder: null" + "'", str1, "RegexBuilder: null");
        org.junit.Assert.assertNotNull(regexBuilder3);
        org.junit.Assert.assertNotNull(iHeaderMatcher4);
        org.junit.Assert.assertNotNull(iHeaderMatcher5);
        org.junit.Assert.assertNotNull(regexBuilder7);
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "RegexBuilder: " + "'", str8, "RegexBuilder: ");
        org.junit.Assert.assertNotNull(iHeaderMatcher9);
    }

    @Test
    public void test12827() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest25.test12827");
        org.apache.rat.analysis.matchers.FullTextMatcher fullTextMatcher2 = new org.apache.rat.analysis.matchers.FullTextMatcher("http://org/apache/rat/meta-data", "Apache License Version 2.0");
        org.apache.rat.analysis.IHeaderMatcher.State state3 = fullTextMatcher2.currentState();
        org.apache.rat.analysis.matchers.NotMatcher notMatcher4 = new org.apache.rat.analysis.matchers.NotMatcher((org.apache.rat.analysis.IHeaderMatcher) fullTextMatcher2);
        org.apache.rat.analysis.IHeaderMatcher.State state6 = notMatcher4.matches("2b7a7df2-0dac-406a-96b5-ea6b08e88337");
        org.apache.rat.analysis.IHeaderMatcher.State state8 = notMatcher4.matches("RegexBuilder: d4148d3a-edbc-4672-b347-0fa619553f91");
        org.apache.rat.analysis.IHeaderMatcher.State state10 = notMatcher4.matches("2f88b0fb-cbe0-494f-a237-c14d76af3d76");
        java.lang.String str11 = state10.toString();
        java.lang.String str12 = state10.toString();
        org.junit.Assert.assertTrue("'" + state3 + "' != '" + org.apache.rat.analysis.IHeaderMatcher.State.i + "'", state3.equals(org.apache.rat.analysis.IHeaderMatcher.State.i));
        org.junit.Assert.assertTrue("'" + state6 + "' != '" + org.apache.rat.analysis.IHeaderMatcher.State.i + "'", state6.equals(org.apache.rat.analysis.IHeaderMatcher.State.i));
        org.junit.Assert.assertTrue("'" + state8 + "' != '" + org.apache.rat.analysis.IHeaderMatcher.State.i + "'", state8.equals(org.apache.rat.analysis.IHeaderMatcher.State.i));
        org.junit.Assert.assertTrue("'" + state10 + "' != '" + org.apache.rat.analysis.IHeaderMatcher.State.i + "'", state10.equals(org.apache.rat.analysis.IHeaderMatcher.State.i));
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "i indeterminent" + "'", str11, "i indeterminent");
        org.junit.Assert.assertEquals("'" + str12 + "' != '" + "i indeterminent" + "'", str12, "i indeterminent");
    }

    @Test
    public void test12828() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest25.test12828");
        org.apache.rat.license.ILicenseFamilyBuilder iLicenseFamilyBuilder0 = new org.apache.rat.license.ILicenseFamilyBuilder();
        java.lang.String str1 = iLicenseFamilyBuilder0.getCategory();
        org.apache.rat.license.ILicenseFamily.Builder builder3 = iLicenseFamilyBuilder0.setLicenseFamilyCategory("3e2b228d-d5ff-4444-8d8c-d614494b2426");
        org.apache.rat.license.ILicenseFamily.Builder builder5 = iLicenseFamilyBuilder0.setLicenseFamilyName("GNU General Public License, version 3");
        org.apache.rat.license.ILicenseFamily iLicenseFamily6 = iLicenseFamilyBuilder0.build();
        org.junit.Assert.assertNull(str1);
        org.junit.Assert.assertNotNull(builder3);
        org.junit.Assert.assertNotNull(builder5);
        org.junit.Assert.assertNotNull(iLicenseFamily6);
    }

    @Test
    public void test12829() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest25.test12829");
        org.apache.rat.utils.DefaultLog defaultLog0 = org.apache.rat.utils.DefaultLog.INSTANCE;
        defaultLog0.info((java.lang.Object) "Modified BSD License");
        org.apache.rat.annotation.ApacheV2LicenseAppender apacheV2LicenseAppender4 = new org.apache.rat.annotation.ApacheV2LicenseAppender((org.apache.rat.utils.Log) defaultLog0, "8ecb8cce-06e4-400f-84d9-ad1cf6289fda");
        org.apache.rat.utils.Log log5 = null;
        org.apache.rat.ReportConfiguration reportConfiguration6 = new org.apache.rat.ReportConfiguration(log5);
        org.apache.rat.report.claim.ClaimStatistic claimStatistic7 = org.apache.rat.Reporter.report(reportConfiguration6);
        org.apache.rat.utils.Log log8 = null;
        org.apache.rat.ReportConfiguration reportConfiguration9 = new org.apache.rat.ReportConfiguration(log8);
        org.apache.rat.report.claim.ClaimStatistic claimStatistic10 = org.apache.rat.Reporter.report(reportConfiguration9);
        org.apache.rat.utils.ReportingSet.Options options11 = org.apache.rat.utils.ReportingSet.Options.OVERWRITE;
        reportConfiguration9.licenseDuplicateOption(options11);
        reportConfiguration6.familyDuplicateOption(options11);
        org.apache.commons.io.function.IOSupplier<java.io.PrintWriter> printWriterIOSupplier14 = reportConfiguration6.getWriter();
        boolean boolean15 = reportConfiguration6.isAddingLicensesForced();
        java.io.FilenameFilter filenameFilter16 = reportConfiguration6.getInputFileFilter();
        org.apache.commons.io.function.IOSupplier<java.io.InputStream> inputStreamIOSupplier17 = reportConfiguration6.getStyleSheet();
        org.apache.rat.utils.Log log18 = null;
        org.apache.rat.ReportConfiguration reportConfiguration19 = new org.apache.rat.ReportConfiguration(log18);
        java.io.FilenameFilter filenameFilter20 = reportConfiguration19.getInputFileFilter();
        org.apache.rat.license.LicenseSetFactory.LicenseFilter licenseFilter21 = org.apache.rat.license.LicenseSetFactory.LicenseFilter.all;
        java.util.SortedSet<org.apache.rat.license.ILicense> iLicenseSet22 = reportConfiguration19.getLicenses(licenseFilter21);
        org.apache.rat.config.AddLicenseHeaders addLicenseHeaders23 = org.apache.rat.config.AddLicenseHeaders.FALSE;
        reportConfiguration19.setAddLicenseHeaders(addLicenseHeaders23);
        org.apache.rat.utils.Log log25 = null;
        org.apache.rat.ReportConfiguration reportConfiguration26 = new org.apache.rat.ReportConfiguration(log25);
        org.apache.rat.report.claim.ClaimStatistic claimStatistic27 = org.apache.rat.Reporter.report(reportConfiguration26);
        org.apache.rat.license.LicenseSetFactory.LicenseFilter licenseFilter28 = org.apache.rat.license.LicenseSetFactory.LicenseFilter.all;
        org.apache.rat.Reporter.listLicenses(reportConfiguration26, licenseFilter28);
        org.apache.rat.Reporter.listLicenses(reportConfiguration19, licenseFilter28);
        org.apache.rat.utils.Log log31 = null;
        org.apache.rat.ReportConfiguration reportConfiguration32 = new org.apache.rat.ReportConfiguration(log31);
        java.io.FilenameFilter filenameFilter33 = reportConfiguration32.getInputFileFilter();
        org.apache.rat.license.LicenseSetFactory.LicenseFilter licenseFilter34 = org.apache.rat.license.LicenseSetFactory.LicenseFilter.all;
        java.util.SortedSet<org.apache.rat.license.ILicense> iLicenseSet35 = reportConfiguration32.getLicenses(licenseFilter34);
        org.apache.rat.config.AddLicenseHeaders addLicenseHeaders36 = org.apache.rat.config.AddLicenseHeaders.FALSE;
        reportConfiguration32.setAddLicenseHeaders(addLicenseHeaders36);
        org.apache.rat.utils.Log log38 = null;
        org.apache.rat.ReportConfiguration reportConfiguration39 = new org.apache.rat.ReportConfiguration(log38);
        org.apache.rat.report.claim.ClaimStatistic claimStatistic40 = org.apache.rat.Reporter.report(reportConfiguration39);
        org.apache.rat.license.LicenseSetFactory.LicenseFilter licenseFilter41 = org.apache.rat.license.LicenseSetFactory.LicenseFilter.all;
        org.apache.rat.Reporter.listLicenses(reportConfiguration39, licenseFilter41);
        org.apache.rat.Reporter.listLicenses(reportConfiguration32, licenseFilter41);
        org.apache.rat.Reporter.listLicenses(reportConfiguration19, licenseFilter41);
        org.apache.rat.utils.Log log45 = null;
        org.apache.rat.ReportConfiguration reportConfiguration46 = new org.apache.rat.ReportConfiguration(log45);
        org.apache.commons.io.function.IOSupplier<java.io.OutputStream> outputStreamIOSupplier47 = reportConfiguration46.getOutput();
        reportConfiguration19.setOut(outputStreamIOSupplier47);
        org.apache.rat.utils.Log log49 = null;
        org.apache.rat.ReportConfiguration reportConfiguration50 = new org.apache.rat.ReportConfiguration(log49);
        org.apache.rat.report.claim.ClaimStatistic claimStatistic51 = org.apache.rat.Reporter.report(reportConfiguration50);
        org.apache.rat.utils.Log log52 = null;
        org.apache.rat.ReportConfiguration reportConfiguration53 = new org.apache.rat.ReportConfiguration(log52);
        org.apache.rat.report.claim.ClaimStatistic claimStatistic54 = org.apache.rat.Reporter.report(reportConfiguration53);
        org.apache.rat.utils.ReportingSet.Options options55 = org.apache.rat.utils.ReportingSet.Options.OVERWRITE;
        reportConfiguration53.licenseDuplicateOption(options55);
        reportConfiguration50.familyDuplicateOption(options55);
        reportConfiguration19.licenseDuplicateOption(options55);
        reportConfiguration19.addApprovedLicenseCategory("W3C Document Copyright");
        org.apache.rat.utils.Log log61 = null;
        org.apache.rat.ReportConfiguration reportConfiguration62 = new org.apache.rat.ReportConfiguration(log61);
        reportConfiguration62.addApprovedLicenseCategory(".cvsignore");
        org.apache.rat.utils.Log.Level level65 = org.apache.rat.utils.Log.Level.ERROR;
        reportConfiguration62.logLicenseCollisions(level65);
        reportConfiguration19.logLicenseCollisions(level65);
        reportConfiguration6.logLicenseCollisions(level65);
        defaultLog0.log(level65, (java.lang.Object) 0.0d);
        org.apache.rat.analysis.matchers.SimpleTextMatcher simpleTextMatcher72 = new org.apache.rat.analysis.matchers.SimpleTextMatcher("GPL2 ");
        defaultLog0.info((java.lang.Object) "GPL2 ");
        org.apache.rat.license.ILicenseFamilyBuilder iLicenseFamilyBuilder74 = new org.apache.rat.license.ILicenseFamilyBuilder();
        java.lang.String str75 = iLicenseFamilyBuilder74.getCategory();
        org.apache.rat.license.ILicenseFamily.Builder builder77 = iLicenseFamilyBuilder74.setLicenseFamilyCategory("AL   ");
        org.apache.rat.license.ILicenseFamily.Builder builder79 = iLicenseFamilyBuilder74.setLicenseFamilyName("binary");
        org.apache.rat.license.ILicenseFamily.Builder builder81 = iLicenseFamilyBuilder74.setLicenseFamilyName("http://org/apache/rat/meta-data#LicenseFamilyCategory");
        org.apache.rat.license.ILicenseFamily.Builder builder83 = iLicenseFamilyBuilder74.setLicenseFamilyCategory("b2eafdef-0477-406a-8b6d-8d332a86679e");
        java.lang.Throwable throwable84 = null;
        // The following exception was thrown during execution in test generation
        try {
            defaultLog0.info((java.lang.Object) iLicenseFamilyBuilder74, throwable84);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(defaultLog0);
        org.junit.Assert.assertNull(claimStatistic7);
        org.junit.Assert.assertNull(claimStatistic10);
        org.junit.Assert.assertTrue("'" + options11 + "' != '" + org.apache.rat.utils.ReportingSet.Options.OVERWRITE + "'", options11.equals(org.apache.rat.utils.ReportingSet.Options.OVERWRITE));
        org.junit.Assert.assertNotNull(printWriterIOSupplier14);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + false + "'", boolean15 == false);
        org.junit.Assert.assertNull(filenameFilter16);
        org.junit.Assert.assertNull(inputStreamIOSupplier17);
        org.junit.Assert.assertNull(filenameFilter20);
        org.junit.Assert.assertTrue("'" + licenseFilter21 + "' != '" + org.apache.rat.license.LicenseSetFactory.LicenseFilter.all + "'", licenseFilter21.equals(org.apache.rat.license.LicenseSetFactory.LicenseFilter.all));
        org.junit.Assert.assertNotNull(iLicenseSet22);
        org.junit.Assert.assertTrue("'" + addLicenseHeaders23 + "' != '" + org.apache.rat.config.AddLicenseHeaders.FALSE + "'", addLicenseHeaders23.equals(org.apache.rat.config.AddLicenseHeaders.FALSE));
        org.junit.Assert.assertNull(claimStatistic27);
        org.junit.Assert.assertTrue("'" + licenseFilter28 + "' != '" + org.apache.rat.license.LicenseSetFactory.LicenseFilter.all + "'", licenseFilter28.equals(org.apache.rat.license.LicenseSetFactory.LicenseFilter.all));
        org.junit.Assert.assertNull(filenameFilter33);
        org.junit.Assert.assertTrue("'" + licenseFilter34 + "' != '" + org.apache.rat.license.LicenseSetFactory.LicenseFilter.all + "'", licenseFilter34.equals(org.apache.rat.license.LicenseSetFactory.LicenseFilter.all));
        org.junit.Assert.assertNotNull(iLicenseSet35);
        org.junit.Assert.assertTrue("'" + addLicenseHeaders36 + "' != '" + org.apache.rat.config.AddLicenseHeaders.FALSE + "'", addLicenseHeaders36.equals(org.apache.rat.config.AddLicenseHeaders.FALSE));
        org.junit.Assert.assertNull(claimStatistic40);
        org.junit.Assert.assertTrue("'" + licenseFilter41 + "' != '" + org.apache.rat.license.LicenseSetFactory.LicenseFilter.all + "'", licenseFilter41.equals(org.apache.rat.license.LicenseSetFactory.LicenseFilter.all));
        org.junit.Assert.assertNotNull(outputStreamIOSupplier47);
        org.junit.Assert.assertNull(claimStatistic51);
        org.junit.Assert.assertNull(claimStatistic54);
        org.junit.Assert.assertTrue("'" + options55 + "' != '" + org.apache.rat.utils.ReportingSet.Options.OVERWRITE + "'", options55.equals(org.apache.rat.utils.ReportingSet.Options.OVERWRITE));
        org.junit.Assert.assertTrue("'" + level65 + "' != '" + org.apache.rat.utils.Log.Level.ERROR + "'", level65.equals(org.apache.rat.utils.Log.Level.ERROR));
        org.junit.Assert.assertNull(str75);
        org.junit.Assert.assertNotNull(builder77);
        org.junit.Assert.assertNotNull(builder79);
        org.junit.Assert.assertNotNull(builder81);
        org.junit.Assert.assertNotNull(builder83);
    }

    @Test
    public void test12830() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest25.test12830");
        org.apache.rat.api.MetaData.Datum datum0 = org.apache.rat.api.MetaData.RAT_LICENSE_FAMILY_NAME_DATUM_UNKNOWN;
        java.lang.String str1 = datum0.getName();
        java.lang.String str2 = datum0.getValue();
        org.junit.Assert.assertNotNull(datum0);
        org.junit.Assert.assertEquals("'" + str1 + "' != '" + "http://org/apache/rat/meta-data#LicenseFamilyName" + "'", str1, "http://org/apache/rat/meta-data#LicenseFamilyName");
        org.junit.Assert.assertEquals("'" + str2 + "' != '" + "?????" + "'", str2, "?????");
    }

    @Test
    public void test12831() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest25.test12831");
        org.apache.rat.utils.DefaultLog defaultLog0 = org.apache.rat.utils.DefaultLog.INSTANCE;
        org.apache.rat.configuration.builders.AllBuilder allBuilder1 = new org.apache.rat.configuration.builders.AllBuilder();
        org.apache.rat.configuration.builders.MatcherRefBuilder matcherRefBuilder2 = org.apache.rat.analysis.IHeaderMatcher.Builder.matcherRef();
        boolean boolean3 = matcherRefBuilder2.hasId();
        java.lang.String str4 = matcherRefBuilder2.toString();
        org.apache.rat.configuration.builders.AnyBuilder anyBuilder5 = org.apache.rat.analysis.IHeaderMatcher.Builder.any();
        org.apache.rat.configuration.builders.NotBuilder notBuilder6 = new org.apache.rat.configuration.builders.NotBuilder();
        java.lang.String str7 = notBuilder6.toString();
        org.apache.rat.configuration.builders.MatcherRefBuilder matcherRefBuilder8 = org.apache.rat.analysis.IHeaderMatcher.Builder.matcherRef();
        boolean boolean9 = matcherRefBuilder8.hasId();
        java.util.Map<java.lang.String, org.apache.rat.analysis.IHeaderMatcher> strMap10 = null;
        org.apache.rat.configuration.builders.MatcherRefBuilder matcherRefBuilder11 = matcherRefBuilder8.setMatchers(strMap10);
        org.apache.rat.configuration.builders.AllBuilder allBuilder12 = new org.apache.rat.configuration.builders.AllBuilder();
        org.apache.rat.configuration.builders.CopyrightBuilder copyrightBuilder13 = org.apache.rat.analysis.IHeaderMatcher.Builder.copyright();
        org.apache.rat.configuration.builders.CopyrightBuilder copyrightBuilder15 = copyrightBuilder13.setStart("OASIS");
        java.lang.String str16 = copyrightBuilder13.toString();
        org.apache.rat.configuration.builders.CopyrightBuilder copyrightBuilder18 = copyrightBuilder13.setStart("223f0aba-15d4-49e9-901e-5740c137aebf");
        org.apache.rat.configuration.builders.MatcherRefBuilder matcherRefBuilder19 = org.apache.rat.analysis.IHeaderMatcher.Builder.matcherRef();
        boolean boolean20 = matcherRefBuilder19.hasId();
        org.apache.rat.configuration.builders.CopyrightBuilder copyrightBuilder21 = org.apache.rat.analysis.IHeaderMatcher.Builder.copyright();
        org.apache.rat.configuration.builders.CopyrightBuilder copyrightBuilder23 = copyrightBuilder21.setStart("OASIS");
        java.lang.String str24 = copyrightBuilder21.toString();
        org.apache.rat.configuration.builders.CopyrightBuilder copyrightBuilder26 = copyrightBuilder21.setStart("223f0aba-15d4-49e9-901e-5740c137aebf");
        org.apache.rat.configuration.builders.CopyrightBuilder copyrightBuilder27 = org.apache.rat.analysis.IHeaderMatcher.Builder.copyright();
        org.apache.rat.configuration.builders.CopyrightBuilder copyrightBuilder28 = org.apache.rat.analysis.IHeaderMatcher.Builder.copyright();
        java.lang.String str29 = copyrightBuilder28.toString();
        org.apache.rat.configuration.builders.CopyrightBuilder copyrightBuilder31 = copyrightBuilder28.setEnd(".cvsignore");
        boolean boolean32 = copyrightBuilder28.hasId();
        org.apache.rat.configuration.builders.CopyrightBuilder copyrightBuilder33 = org.apache.rat.analysis.IHeaderMatcher.Builder.copyright();
        java.lang.String str34 = copyrightBuilder33.toString();
        org.apache.rat.configuration.builders.CopyrightBuilder copyrightBuilder36 = copyrightBuilder33.setEnd(".cvsignore");
        boolean boolean37 = copyrightBuilder33.hasId();
        java.lang.String str38 = copyrightBuilder33.toString();
        org.apache.rat.configuration.builders.CopyrightBuilder copyrightBuilder39 = org.apache.rat.analysis.IHeaderMatcher.Builder.copyright();
        org.apache.rat.configuration.builders.CopyrightBuilder copyrightBuilder41 = copyrightBuilder39.setStart("OASIS");
        org.apache.rat.configuration.builders.AnyBuilder anyBuilder42 = org.apache.rat.analysis.IHeaderMatcher.Builder.any();
        org.apache.rat.configuration.builders.MatcherRefBuilder matcherRefBuilder43 = org.apache.rat.analysis.IHeaderMatcher.Builder.matcherRef();
        boolean boolean44 = matcherRefBuilder43.hasId();
        java.util.Map<java.lang.String, org.apache.rat.analysis.IHeaderMatcher> strMap45 = null;
        org.apache.rat.configuration.builders.MatcherRefBuilder matcherRefBuilder46 = matcherRefBuilder43.setMatchers(strMap45);
        org.apache.rat.configuration.builders.CopyrightBuilder copyrightBuilder47 = org.apache.rat.analysis.IHeaderMatcher.Builder.copyright();
        org.apache.rat.configuration.builders.MatcherRefBuilder matcherRefBuilder48 = org.apache.rat.analysis.IHeaderMatcher.Builder.matcherRef();
        boolean boolean49 = matcherRefBuilder48.hasId();
        java.lang.String str50 = matcherRefBuilder48.toString();
        java.util.Map<java.lang.String, org.apache.rat.analysis.IHeaderMatcher> strMap51 = null;
        org.apache.rat.configuration.builders.MatcherRefBuilder matcherRefBuilder52 = matcherRefBuilder48.setMatchers(strMap51);
        org.apache.rat.analysis.IHeaderMatcher.Builder[] builderArray53 = new org.apache.rat.analysis.IHeaderMatcher.Builder[] { matcherRefBuilder8, allBuilder12, copyrightBuilder18, matcherRefBuilder19, copyrightBuilder21, copyrightBuilder27, copyrightBuilder28, copyrightBuilder33, copyrightBuilder39, anyBuilder42, matcherRefBuilder43, copyrightBuilder47, matcherRefBuilder48 };
        java.util.ArrayList<org.apache.rat.analysis.IHeaderMatcher.Builder> builderList54 = new java.util.ArrayList<org.apache.rat.analysis.IHeaderMatcher.Builder>();
        boolean boolean55 = java.util.Collections.addAll((java.util.Collection<org.apache.rat.analysis.IHeaderMatcher.Builder>) builderList54, builderArray53);
        org.apache.rat.configuration.builders.AbstractBuilder abstractBuilder56 = notBuilder6.add((java.util.Collection<org.apache.rat.analysis.IHeaderMatcher.Builder>) builderList54);
        org.apache.rat.configuration.builders.MatcherRefBuilder matcherRefBuilder57 = new org.apache.rat.configuration.builders.MatcherRefBuilder();
        org.apache.rat.analysis.IHeaderMatcher.Builder[] builderArray58 = new org.apache.rat.analysis.IHeaderMatcher.Builder[] { matcherRefBuilder2, anyBuilder5, notBuilder6, matcherRefBuilder57 };
        java.util.ArrayList<org.apache.rat.analysis.IHeaderMatcher.Builder> builderList59 = new java.util.ArrayList<org.apache.rat.analysis.IHeaderMatcher.Builder>();
        boolean boolean60 = java.util.Collections.addAll((java.util.Collection<org.apache.rat.analysis.IHeaderMatcher.Builder>) builderList59, builderArray58);
        org.apache.rat.configuration.builders.AbstractBuilder abstractBuilder61 = allBuilder1.add((java.util.Collection<org.apache.rat.analysis.IHeaderMatcher.Builder>) builderList59);
        defaultLog0.info((java.lang.Object) allBuilder1);
        org.apache.rat.utils.Log.Level level63 = defaultLog0.getLevel();
        org.apache.rat.annotation.ApacheV2LicenseAppender apacheV2LicenseAppender64 = new org.apache.rat.annotation.ApacheV2LicenseAppender((org.apache.rat.utils.Log) defaultLog0);
        org.apache.rat.utils.Log log65 = null;
        org.apache.rat.ReportConfiguration reportConfiguration66 = new org.apache.rat.ReportConfiguration(log65);
        org.apache.commons.io.function.IOSupplier<java.io.OutputStream> outputStreamIOSupplier67 = reportConfiguration66.getOutput();
        reportConfiguration66.removeApprovedLicenseCategory("EF7A8B13-64C3-4510-BB0C-DBF208E1E73F");
        org.apache.rat.utils.Log log70 = null;
        org.apache.rat.ReportConfiguration reportConfiguration71 = new org.apache.rat.ReportConfiguration(log70);
        org.apache.rat.report.claim.ClaimStatistic claimStatistic72 = org.apache.rat.Reporter.report(reportConfiguration71);
        org.apache.rat.utils.Log log73 = null;
        org.apache.rat.ReportConfiguration reportConfiguration74 = new org.apache.rat.ReportConfiguration(log73);
        org.apache.rat.report.claim.ClaimStatistic claimStatistic75 = org.apache.rat.Reporter.report(reportConfiguration74);
        org.apache.rat.utils.ReportingSet.Options options76 = org.apache.rat.utils.ReportingSet.Options.OVERWRITE;
        reportConfiguration74.licenseDuplicateOption(options76);
        reportConfiguration71.familyDuplicateOption(options76);
        org.apache.commons.io.function.IOSupplier<java.io.PrintWriter> printWriterIOSupplier79 = reportConfiguration71.getWriter();
        boolean boolean80 = reportConfiguration71.isAddingLicensesForced();
        org.apache.rat.utils.Log log81 = null;
        org.apache.rat.ReportConfiguration reportConfiguration82 = new org.apache.rat.ReportConfiguration(log81);
        reportConfiguration82.addApprovedLicenseCategory(".cvsignore");
        org.apache.rat.utils.Log.Level level85 = org.apache.rat.utils.Log.Level.ERROR;
        reportConfiguration82.logFamilyCollisions(level85);
        reportConfiguration71.logLicenseCollisions(level85);
        reportConfiguration66.logLicenseCollisions(level85);
        defaultLog0.log(level85, "25e2860f-ef9c-4129-8905-9248377617d9");
        org.junit.Assert.assertNotNull(defaultLog0);
        org.junit.Assert.assertNotNull(matcherRefBuilder2);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "MathcerRefBuilder: null" + "'", str4, "MathcerRefBuilder: null");
        org.junit.Assert.assertNotNull(anyBuilder5);
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "NotBuilder: null" + "'", str7, "NotBuilder: null");
        org.junit.Assert.assertNotNull(matcherRefBuilder8);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertNotNull(matcherRefBuilder11);
        org.junit.Assert.assertNotNull(copyrightBuilder13);
        org.junit.Assert.assertNotNull(copyrightBuilder15);
        org.junit.Assert.assertEquals("'" + str16 + "' != '" + "Copyright Builder: s:OASIS e:null o:null" + "'", str16, "Copyright Builder: s:OASIS e:null o:null");
        org.junit.Assert.assertNotNull(copyrightBuilder18);
        org.junit.Assert.assertNotNull(matcherRefBuilder19);
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + false + "'", boolean20 == false);
        org.junit.Assert.assertNotNull(copyrightBuilder21);
        org.junit.Assert.assertNotNull(copyrightBuilder23);
        org.junit.Assert.assertEquals("'" + str24 + "' != '" + "Copyright Builder: s:OASIS e:null o:null" + "'", str24, "Copyright Builder: s:OASIS e:null o:null");
        org.junit.Assert.assertNotNull(copyrightBuilder26);
        org.junit.Assert.assertNotNull(copyrightBuilder27);
        org.junit.Assert.assertNotNull(copyrightBuilder28);
        org.junit.Assert.assertEquals("'" + str29 + "' != '" + "Copyright Builder: s:null e:null o:null" + "'", str29, "Copyright Builder: s:null e:null o:null");
        org.junit.Assert.assertNotNull(copyrightBuilder31);
        org.junit.Assert.assertTrue("'" + boolean32 + "' != '" + false + "'", boolean32 == false);
        org.junit.Assert.assertNotNull(copyrightBuilder33);
        org.junit.Assert.assertEquals("'" + str34 + "' != '" + "Copyright Builder: s:null e:null o:null" + "'", str34, "Copyright Builder: s:null e:null o:null");
        org.junit.Assert.assertNotNull(copyrightBuilder36);
        org.junit.Assert.assertTrue("'" + boolean37 + "' != '" + false + "'", boolean37 == false);
        org.junit.Assert.assertEquals("'" + str38 + "' != '" + "Copyright Builder: s:null e:.cvsignore o:null" + "'", str38, "Copyright Builder: s:null e:.cvsignore o:null");
        org.junit.Assert.assertNotNull(copyrightBuilder39);
        org.junit.Assert.assertNotNull(copyrightBuilder41);
        org.junit.Assert.assertNotNull(anyBuilder42);
        org.junit.Assert.assertNotNull(matcherRefBuilder43);
        org.junit.Assert.assertTrue("'" + boolean44 + "' != '" + false + "'", boolean44 == false);
        org.junit.Assert.assertNotNull(matcherRefBuilder46);
        org.junit.Assert.assertNotNull(copyrightBuilder47);
        org.junit.Assert.assertNotNull(matcherRefBuilder48);
        org.junit.Assert.assertTrue("'" + boolean49 + "' != '" + false + "'", boolean49 == false);
        org.junit.Assert.assertEquals("'" + str50 + "' != '" + "MathcerRefBuilder: null" + "'", str50, "MathcerRefBuilder: null");
        org.junit.Assert.assertNotNull(matcherRefBuilder52);
        org.junit.Assert.assertNotNull(builderArray53);
        org.junit.Assert.assertTrue("'" + boolean55 + "' != '" + true + "'", boolean55 == true);
        org.junit.Assert.assertNotNull(abstractBuilder56);
        org.junit.Assert.assertNotNull(builderArray58);
        org.junit.Assert.assertTrue("'" + boolean60 + "' != '" + true + "'", boolean60 == true);
        org.junit.Assert.assertNotNull(abstractBuilder61);
        org.junit.Assert.assertTrue("'" + level63 + "' != '" + org.apache.rat.utils.Log.Level.ERROR + "'", level63.equals(org.apache.rat.utils.Log.Level.ERROR));
        org.junit.Assert.assertNotNull(outputStreamIOSupplier67);
        org.junit.Assert.assertNull(claimStatistic72);
        org.junit.Assert.assertNull(claimStatistic75);
        org.junit.Assert.assertTrue("'" + options76 + "' != '" + org.apache.rat.utils.ReportingSet.Options.OVERWRITE + "'", options76.equals(org.apache.rat.utils.ReportingSet.Options.OVERWRITE));
        org.junit.Assert.assertNotNull(printWriterIOSupplier79);
        org.junit.Assert.assertTrue("'" + boolean80 + "' != '" + false + "'", boolean80 == false);
        org.junit.Assert.assertTrue("'" + level85 + "' != '" + org.apache.rat.utils.Log.Level.ERROR + "'", level85.equals(org.apache.rat.utils.Log.Level.ERROR));
    }

    @Test
    public void test12832() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest25.test12832");
        org.apache.rat.analysis.matchers.FullTextMatcher fullTextMatcher2 = new org.apache.rat.analysis.matchers.FullTextMatcher("http://org/apache/rat/meta-data", "Apache License Version 2.0");
        org.apache.rat.analysis.IHeaderMatcher.State state3 = fullTextMatcher2.currentState();
        org.apache.rat.analysis.matchers.NotMatcher notMatcher4 = new org.apache.rat.analysis.matchers.NotMatcher((org.apache.rat.analysis.IHeaderMatcher) fullTextMatcher2);
        org.apache.rat.analysis.IHeaderMatcher.State state6 = notMatcher4.matches("2b7a7df2-0dac-406a-96b5-ea6b08e88337");
        org.apache.rat.analysis.IHeaderMatcher.State state7 = notMatcher4.currentState();
        org.apache.rat.analysis.IHeaderMatcher.State state8 = notMatcher4.currentState();
        notMatcher4.reset();
        org.junit.Assert.assertTrue("'" + state3 + "' != '" + org.apache.rat.analysis.IHeaderMatcher.State.i + "'", state3.equals(org.apache.rat.analysis.IHeaderMatcher.State.i));
        org.junit.Assert.assertTrue("'" + state6 + "' != '" + org.apache.rat.analysis.IHeaderMatcher.State.i + "'", state6.equals(org.apache.rat.analysis.IHeaderMatcher.State.i));
        org.junit.Assert.assertTrue("'" + state7 + "' != '" + org.apache.rat.analysis.IHeaderMatcher.State.i + "'", state7.equals(org.apache.rat.analysis.IHeaderMatcher.State.i));
        org.junit.Assert.assertTrue("'" + state8 + "' != '" + org.apache.rat.analysis.IHeaderMatcher.State.i + "'", state8.equals(org.apache.rat.analysis.IHeaderMatcher.State.i));
    }

    @Test
    public void test12833() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest25.test12833");
        org.apache.rat.utils.Log log0 = null;
        org.apache.rat.ReportConfiguration reportConfiguration1 = new org.apache.rat.ReportConfiguration(log0);
        java.io.FilenameFilter filenameFilter2 = reportConfiguration1.getInputFileFilter();
        boolean boolean3 = reportConfiguration1.isStyleReport();
        org.apache.commons.io.function.IOSupplier<java.io.OutputStream> outputStreamIOSupplier4 = reportConfiguration1.getOutput();
        org.apache.rat.utils.Log log5 = reportConfiguration1.getLog();
        org.apache.rat.utils.Log log6 = null;
        org.apache.rat.ReportConfiguration reportConfiguration7 = new org.apache.rat.ReportConfiguration(log6);
        org.apache.rat.report.claim.ClaimStatistic claimStatistic8 = org.apache.rat.Reporter.report(reportConfiguration7);
        org.apache.rat.utils.Log log9 = null;
        org.apache.rat.ReportConfiguration reportConfiguration10 = new org.apache.rat.ReportConfiguration(log9);
        org.apache.rat.report.claim.ClaimStatistic claimStatistic11 = org.apache.rat.Reporter.report(reportConfiguration10);
        org.apache.rat.utils.ReportingSet.Options options12 = org.apache.rat.utils.ReportingSet.Options.OVERWRITE;
        reportConfiguration10.licenseDuplicateOption(options12);
        reportConfiguration7.familyDuplicateOption(options12);
        org.apache.commons.io.function.IOSupplier<java.io.PrintWriter> printWriterIOSupplier15 = reportConfiguration7.getWriter();
        boolean boolean16 = reportConfiguration7.isAddingLicensesForced();
        java.io.FilenameFilter filenameFilter17 = reportConfiguration7.getInputFileFilter();
        java.io.FilenameFilter filenameFilter18 = reportConfiguration7.getInputFileFilter();
        boolean boolean19 = reportConfiguration7.isStyleReport();
        org.apache.commons.io.function.IOSupplier<java.io.OutputStream> outputStreamIOSupplier20 = reportConfiguration7.getOutput();
        org.apache.commons.io.filefilter.IOFileFilter iOFileFilter21 = reportConfiguration7.getDirectoryFilter();
        org.apache.commons.io.filefilter.IOFileFilter iOFileFilter22 = reportConfiguration7.getDirectoryFilter();
        reportConfiguration1.setDirectoryFilter(iOFileFilter22);
        org.apache.rat.utils.Log log24 = null;
        org.apache.rat.ReportConfiguration reportConfiguration25 = new org.apache.rat.ReportConfiguration(log24);
        org.apache.rat.report.claim.ClaimStatistic claimStatistic26 = org.apache.rat.Reporter.report(reportConfiguration25);
        org.apache.rat.utils.Log log27 = null;
        org.apache.rat.ReportConfiguration reportConfiguration28 = new org.apache.rat.ReportConfiguration(log27);
        org.apache.rat.report.claim.ClaimStatistic claimStatistic29 = org.apache.rat.Reporter.report(reportConfiguration28);
        org.apache.rat.utils.ReportingSet.Options options30 = org.apache.rat.utils.ReportingSet.Options.OVERWRITE;
        reportConfiguration28.licenseDuplicateOption(options30);
        reportConfiguration25.familyDuplicateOption(options30);
        org.apache.commons.io.function.IOSupplier<java.io.PrintWriter> printWriterIOSupplier33 = reportConfiguration25.getWriter();
        org.apache.rat.utils.Log log34 = null;
        org.apache.rat.ReportConfiguration reportConfiguration35 = new org.apache.rat.ReportConfiguration(log34);
        reportConfiguration35.addApprovedLicenseCategory(".cvsignore");
        org.apache.rat.utils.Log.Level level38 = org.apache.rat.utils.Log.Level.ERROR;
        reportConfiguration35.logFamilyCollisions(level38);
        reportConfiguration25.logFamilyCollisions(level38);
        org.apache.commons.io.filefilter.IOFileFilter iOFileFilter41 = reportConfiguration25.getDirectoryFilter();
        org.apache.rat.utils.Log log42 = null;
        org.apache.rat.ReportConfiguration reportConfiguration43 = new org.apache.rat.ReportConfiguration(log42);
        reportConfiguration43.addApprovedLicenseCategory(".cvsignore");
        org.apache.rat.utils.Log.Level level46 = org.apache.rat.utils.Log.Level.ERROR;
        reportConfiguration43.logFamilyCollisions(level46);
        org.apache.commons.io.filefilter.IOFileFilter iOFileFilter48 = reportConfiguration43.getDirectoryFilter();
        org.apache.commons.io.filefilter.IOFileFilter iOFileFilter49 = iOFileFilter41.or(iOFileFilter48);
        org.apache.commons.io.filefilter.IOFileFilter iOFileFilter50 = iOFileFilter41.negate();
        java.nio.file.Path path51 = null;
        boolean boolean52 = iOFileFilter41.matches(path51);
        org.apache.commons.io.filefilter.IOFileFilter iOFileFilter53 = iOFileFilter22.and(iOFileFilter41);
        org.junit.Assert.assertNull(filenameFilter2);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + true + "'", boolean3 == true);
        org.junit.Assert.assertNotNull(outputStreamIOSupplier4);
        org.junit.Assert.assertNull(log5);
        org.junit.Assert.assertNull(claimStatistic8);
        org.junit.Assert.assertNull(claimStatistic11);
        org.junit.Assert.assertTrue("'" + options12 + "' != '" + org.apache.rat.utils.ReportingSet.Options.OVERWRITE + "'", options12.equals(org.apache.rat.utils.ReportingSet.Options.OVERWRITE));
        org.junit.Assert.assertNotNull(printWriterIOSupplier15);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
        org.junit.Assert.assertNull(filenameFilter17);
        org.junit.Assert.assertNull(filenameFilter18);
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + true + "'", boolean19 == true);
        org.junit.Assert.assertNotNull(outputStreamIOSupplier20);
        org.junit.Assert.assertNotNull(iOFileFilter21);
        org.junit.Assert.assertNotNull(iOFileFilter22);
        org.junit.Assert.assertNull(claimStatistic26);
        org.junit.Assert.assertNull(claimStatistic29);
        org.junit.Assert.assertTrue("'" + options30 + "' != '" + org.apache.rat.utils.ReportingSet.Options.OVERWRITE + "'", options30.equals(org.apache.rat.utils.ReportingSet.Options.OVERWRITE));
        org.junit.Assert.assertNotNull(printWriterIOSupplier33);
        org.junit.Assert.assertTrue("'" + level38 + "' != '" + org.apache.rat.utils.Log.Level.ERROR + "'", level38.equals(org.apache.rat.utils.Log.Level.ERROR));
        org.junit.Assert.assertNotNull(iOFileFilter41);
        org.junit.Assert.assertTrue("'" + level46 + "' != '" + org.apache.rat.utils.Log.Level.ERROR + "'", level46.equals(org.apache.rat.utils.Log.Level.ERROR));
        org.junit.Assert.assertNotNull(iOFileFilter48);
        org.junit.Assert.assertNotNull(iOFileFilter49);
        org.junit.Assert.assertNotNull(iOFileFilter50);
        org.junit.Assert.assertTrue("'" + boolean52 + "' != '" + false + "'", boolean52 == false);
        org.junit.Assert.assertNotNull(iOFileFilter53);
    }

    @Test
    public void test12834() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest25.test12834");
        org.apache.rat.utils.Log log0 = null;
        org.apache.rat.ReportConfiguration reportConfiguration1 = new org.apache.rat.ReportConfiguration(log0);
        org.apache.rat.utils.ReportingSet.Options options2 = org.apache.rat.utils.ReportingSet.Options.OVERWRITE;
        reportConfiguration1.licenseDuplicateOption(options2);
        org.apache.rat.utils.Log log4 = null;
        org.apache.rat.ReportConfiguration reportConfiguration5 = new org.apache.rat.ReportConfiguration(log4);
        java.io.FilenameFilter filenameFilter6 = reportConfiguration5.getInputFileFilter();
        org.apache.rat.license.LicenseSetFactory.LicenseFilter licenseFilter7 = org.apache.rat.license.LicenseSetFactory.LicenseFilter.all;
        java.util.SortedSet<org.apache.rat.license.ILicense> iLicenseSet8 = reportConfiguration5.getLicenses(licenseFilter7);
        org.apache.rat.config.AddLicenseHeaders addLicenseHeaders9 = org.apache.rat.config.AddLicenseHeaders.FALSE;
        reportConfiguration5.setAddLicenseHeaders(addLicenseHeaders9);
        org.apache.rat.utils.Log log11 = null;
        org.apache.rat.ReportConfiguration reportConfiguration12 = new org.apache.rat.ReportConfiguration(log11);
        org.apache.rat.report.claim.ClaimStatistic claimStatistic13 = org.apache.rat.Reporter.report(reportConfiguration12);
        org.apache.rat.license.LicenseSetFactory.LicenseFilter licenseFilter14 = org.apache.rat.license.LicenseSetFactory.LicenseFilter.all;
        org.apache.rat.Reporter.listLicenses(reportConfiguration12, licenseFilter14);
        org.apache.rat.Reporter.listLicenses(reportConfiguration5, licenseFilter14);
        org.apache.rat.utils.Log log17 = null;
        org.apache.rat.ReportConfiguration reportConfiguration18 = new org.apache.rat.ReportConfiguration(log17);
        java.io.FilenameFilter filenameFilter19 = reportConfiguration18.getInputFileFilter();
        org.apache.rat.license.LicenseSetFactory.LicenseFilter licenseFilter20 = org.apache.rat.license.LicenseSetFactory.LicenseFilter.all;
        java.util.SortedSet<org.apache.rat.license.ILicense> iLicenseSet21 = reportConfiguration18.getLicenses(licenseFilter20);
        org.apache.rat.config.AddLicenseHeaders addLicenseHeaders22 = org.apache.rat.config.AddLicenseHeaders.FALSE;
        reportConfiguration18.setAddLicenseHeaders(addLicenseHeaders22);
        org.apache.rat.utils.Log log24 = null;
        org.apache.rat.ReportConfiguration reportConfiguration25 = new org.apache.rat.ReportConfiguration(log24);
        org.apache.rat.report.claim.ClaimStatistic claimStatistic26 = org.apache.rat.Reporter.report(reportConfiguration25);
        org.apache.rat.license.LicenseSetFactory.LicenseFilter licenseFilter27 = org.apache.rat.license.LicenseSetFactory.LicenseFilter.all;
        org.apache.rat.Reporter.listLicenses(reportConfiguration25, licenseFilter27);
        org.apache.rat.Reporter.listLicenses(reportConfiguration18, licenseFilter27);
        org.apache.rat.Reporter.listLicenses(reportConfiguration5, licenseFilter27);
        org.apache.rat.utils.Log log31 = null;
        org.apache.rat.ReportConfiguration reportConfiguration32 = new org.apache.rat.ReportConfiguration(log31);
        org.apache.commons.io.function.IOSupplier<java.io.OutputStream> outputStreamIOSupplier33 = reportConfiguration32.getOutput();
        reportConfiguration5.setOut(outputStreamIOSupplier33);
        org.apache.rat.utils.Log.Level level35 = org.apache.rat.utils.Log.Level.WARN;
        reportConfiguration5.logLicenseCollisions(level35);
        org.apache.commons.io.filefilter.IOFileFilter iOFileFilter37 = reportConfiguration5.getDirectoryFilter();
        reportConfiguration1.setInputFileFilter((java.io.FilenameFilter) iOFileFilter37);
        java.nio.file.Path path39 = null;
        boolean boolean40 = iOFileFilter37.matches(path39);
        org.apache.commons.io.filefilter.IOFileFilter iOFileFilter41 = iOFileFilter37.negate();
        java.nio.file.Path path42 = null;
        boolean boolean43 = iOFileFilter37.matches(path42);
        org.apache.rat.utils.Log log44 = null;
        org.apache.rat.ReportConfiguration reportConfiguration45 = new org.apache.rat.ReportConfiguration(log44);
        java.lang.String[] strArray89 = new java.lang.String[] { "http://org/apache/rat/meta-data", "GNU General Public License, version 2", "Modified BSD License", "COMMON DEVELOPMENT AND DISTRIBUTION LICENSE Version 1.0", "The MIT License", "OASIS", "?????", "Datum [ name ='http://org/apache/rat/meta-data#LicenseFamilyCategory',value ='OASIS ']", "6486879f-fc81-4b57-aec7-c4c77d540c30", "MANIFEST.MF", "?????", "GEN  ", "GPL3 ", "http://org/apache/rat/meta-data#HeaderCategory", "DOJO ", "true", "GPL2 ", "?????", "Apache License Version 2.0", "OASIS", "W3CD ", "OASIS", "?????", "OASIS Open License", "", "standard", "GPL2 ", "GEN  ", "W3CD ", "TMF  ", ".cvsignore", "Copyright Builder: s:null e:null o:null", "ef7a8b13-64c3-4510-bb0c-dbf208e1e73f", "274c6a15-09f6-4bfd-ac53-1827770eb507", "GNU General Public License, version 2", "W3CD ", ".cvsignore", "Apache License Version 2.0", "GEN  ", "W3C Software Copyright", "Modified BSD License", "GPL2 ", "JAVA" };
        java.util.ArrayList<java.lang.String> strList90 = new java.util.ArrayList<java.lang.String>();
        boolean boolean91 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strList90, strArray89);
        reportConfiguration45.removeApprovedLicenseCategories((java.util.Collection<java.lang.String>) strList90);
        reportConfiguration45.removeApprovedLicenseCategory("META-DATA#LICENSEFAMILYNAME");
        org.apache.commons.io.filefilter.IOFileFilter iOFileFilter95 = reportConfiguration45.getDirectoryFilter();
        org.apache.commons.io.filefilter.IOFileFilter iOFileFilter96 = iOFileFilter37.or(iOFileFilter95);
        java.nio.file.Path path97 = null;
        boolean boolean98 = iOFileFilter37.matches(path97);
        org.junit.Assert.assertTrue("'" + options2 + "' != '" + org.apache.rat.utils.ReportingSet.Options.OVERWRITE + "'", options2.equals(org.apache.rat.utils.ReportingSet.Options.OVERWRITE));
        org.junit.Assert.assertNull(filenameFilter6);
        org.junit.Assert.assertTrue("'" + licenseFilter7 + "' != '" + org.apache.rat.license.LicenseSetFactory.LicenseFilter.all + "'", licenseFilter7.equals(org.apache.rat.license.LicenseSetFactory.LicenseFilter.all));
        org.junit.Assert.assertNotNull(iLicenseSet8);
        org.junit.Assert.assertTrue("'" + addLicenseHeaders9 + "' != '" + org.apache.rat.config.AddLicenseHeaders.FALSE + "'", addLicenseHeaders9.equals(org.apache.rat.config.AddLicenseHeaders.FALSE));
        org.junit.Assert.assertNull(claimStatistic13);
        org.junit.Assert.assertTrue("'" + licenseFilter14 + "' != '" + org.apache.rat.license.LicenseSetFactory.LicenseFilter.all + "'", licenseFilter14.equals(org.apache.rat.license.LicenseSetFactory.LicenseFilter.all));
        org.junit.Assert.assertNull(filenameFilter19);
        org.junit.Assert.assertTrue("'" + licenseFilter20 + "' != '" + org.apache.rat.license.LicenseSetFactory.LicenseFilter.all + "'", licenseFilter20.equals(org.apache.rat.license.LicenseSetFactory.LicenseFilter.all));
        org.junit.Assert.assertNotNull(iLicenseSet21);
        org.junit.Assert.assertTrue("'" + addLicenseHeaders22 + "' != '" + org.apache.rat.config.AddLicenseHeaders.FALSE + "'", addLicenseHeaders22.equals(org.apache.rat.config.AddLicenseHeaders.FALSE));
        org.junit.Assert.assertNull(claimStatistic26);
        org.junit.Assert.assertTrue("'" + licenseFilter27 + "' != '" + org.apache.rat.license.LicenseSetFactory.LicenseFilter.all + "'", licenseFilter27.equals(org.apache.rat.license.LicenseSetFactory.LicenseFilter.all));
        org.junit.Assert.assertNotNull(outputStreamIOSupplier33);
        org.junit.Assert.assertTrue("'" + level35 + "' != '" + org.apache.rat.utils.Log.Level.WARN + "'", level35.equals(org.apache.rat.utils.Log.Level.WARN));
        org.junit.Assert.assertNotNull(iOFileFilter37);
        org.junit.Assert.assertTrue("'" + boolean40 + "' != '" + false + "'", boolean40 == false);
        org.junit.Assert.assertNotNull(iOFileFilter41);
        org.junit.Assert.assertTrue("'" + boolean43 + "' != '" + false + "'", boolean43 == false);
        org.junit.Assert.assertNotNull(strArray89);
        org.junit.Assert.assertTrue("'" + boolean91 + "' != '" + true + "'", boolean91 == true);
        org.junit.Assert.assertNotNull(iOFileFilter95);
        org.junit.Assert.assertNotNull(iOFileFilter96);
        org.junit.Assert.assertTrue("'" + boolean98 + "' != '" + false + "'", boolean98 == false);
    }

    @Test
    public void test12835() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest25.test12835");
        org.apache.rat.utils.Log log0 = null;
        org.apache.rat.ReportConfiguration reportConfiguration1 = new org.apache.rat.ReportConfiguration(log0);
        java.io.FilenameFilter filenameFilter2 = reportConfiguration1.getInputFileFilter();
        org.apache.rat.license.LicenseSetFactory.LicenseFilter licenseFilter3 = org.apache.rat.license.LicenseSetFactory.LicenseFilter.all;
        java.util.SortedSet<org.apache.rat.license.ILicense> iLicenseSet4 = reportConfiguration1.getLicenses(licenseFilter3);
        org.apache.rat.config.AddLicenseHeaders addLicenseHeaders5 = org.apache.rat.config.AddLicenseHeaders.FALSE;
        reportConfiguration1.setAddLicenseHeaders(addLicenseHeaders5);
        org.apache.rat.utils.Log log7 = null;
        org.apache.rat.ReportConfiguration reportConfiguration8 = new org.apache.rat.ReportConfiguration(log7);
        org.apache.rat.report.claim.ClaimStatistic claimStatistic9 = org.apache.rat.Reporter.report(reportConfiguration8);
        org.apache.rat.license.LicenseSetFactory.LicenseFilter licenseFilter10 = org.apache.rat.license.LicenseSetFactory.LicenseFilter.all;
        org.apache.rat.Reporter.listLicenses(reportConfiguration8, licenseFilter10);
        org.apache.rat.Reporter.listLicenses(reportConfiguration1, licenseFilter10);
        org.apache.rat.utils.Log log13 = null;
        org.apache.rat.ReportConfiguration reportConfiguration14 = new org.apache.rat.ReportConfiguration(log13);
        java.io.FilenameFilter filenameFilter15 = reportConfiguration14.getInputFileFilter();
        org.apache.rat.license.LicenseSetFactory.LicenseFilter licenseFilter16 = org.apache.rat.license.LicenseSetFactory.LicenseFilter.all;
        java.util.SortedSet<org.apache.rat.license.ILicense> iLicenseSet17 = reportConfiguration14.getLicenses(licenseFilter16);
        org.apache.rat.config.AddLicenseHeaders addLicenseHeaders18 = org.apache.rat.config.AddLicenseHeaders.FALSE;
        reportConfiguration14.setAddLicenseHeaders(addLicenseHeaders18);
        org.apache.rat.utils.Log log20 = null;
        org.apache.rat.ReportConfiguration reportConfiguration21 = new org.apache.rat.ReportConfiguration(log20);
        org.apache.rat.report.claim.ClaimStatistic claimStatistic22 = org.apache.rat.Reporter.report(reportConfiguration21);
        org.apache.rat.license.LicenseSetFactory.LicenseFilter licenseFilter23 = org.apache.rat.license.LicenseSetFactory.LicenseFilter.all;
        org.apache.rat.Reporter.listLicenses(reportConfiguration21, licenseFilter23);
        org.apache.rat.Reporter.listLicenses(reportConfiguration14, licenseFilter23);
        org.apache.rat.Reporter.listLicenses(reportConfiguration1, licenseFilter23);
        org.apache.rat.utils.Log log27 = null;
        org.apache.rat.ReportConfiguration reportConfiguration28 = new org.apache.rat.ReportConfiguration(log27);
        org.apache.commons.io.function.IOSupplier<java.io.OutputStream> outputStreamIOSupplier29 = reportConfiguration28.getOutput();
        reportConfiguration1.setOut(outputStreamIOSupplier29);
        org.apache.rat.utils.Log.Level level31 = org.apache.rat.utils.Log.Level.WARN;
        reportConfiguration1.logLicenseCollisions(level31);
        reportConfiguration1.setStyleReport(false);
        org.apache.rat.utils.Log log35 = null;
        org.apache.rat.ReportConfiguration reportConfiguration36 = new org.apache.rat.ReportConfiguration(log35);
        org.apache.rat.report.claim.ClaimStatistic claimStatistic37 = org.apache.rat.Reporter.report(reportConfiguration36);
        org.apache.rat.utils.Log log38 = null;
        org.apache.rat.ReportConfiguration reportConfiguration39 = new org.apache.rat.ReportConfiguration(log38);
        org.apache.rat.report.claim.ClaimStatistic claimStatistic40 = org.apache.rat.Reporter.report(reportConfiguration39);
        org.apache.rat.utils.ReportingSet.Options options41 = org.apache.rat.utils.ReportingSet.Options.OVERWRITE;
        reportConfiguration39.licenseDuplicateOption(options41);
        reportConfiguration36.familyDuplicateOption(options41);
        org.apache.commons.io.function.IOSupplier<java.io.PrintWriter> printWriterIOSupplier44 = reportConfiguration36.getWriter();
        boolean boolean45 = reportConfiguration36.isAddingLicensesForced();
        java.io.FilenameFilter filenameFilter46 = reportConfiguration36.getInputFileFilter();
        org.apache.rat.utils.Log log47 = null;
        org.apache.rat.ReportConfiguration reportConfiguration48 = new org.apache.rat.ReportConfiguration(log47);
        org.apache.rat.utils.ReportingSet.Options options49 = org.apache.rat.utils.ReportingSet.Options.OVERWRITE;
        reportConfiguration48.licenseDuplicateOption(options49);
        org.apache.rat.utils.Log log51 = null;
        org.apache.rat.ReportConfiguration reportConfiguration52 = new org.apache.rat.ReportConfiguration(log51);
        java.io.FilenameFilter filenameFilter53 = reportConfiguration52.getInputFileFilter();
        org.apache.rat.license.LicenseSetFactory.LicenseFilter licenseFilter54 = org.apache.rat.license.LicenseSetFactory.LicenseFilter.all;
        java.util.SortedSet<org.apache.rat.license.ILicense> iLicenseSet55 = reportConfiguration52.getLicenses(licenseFilter54);
        org.apache.rat.config.AddLicenseHeaders addLicenseHeaders56 = org.apache.rat.config.AddLicenseHeaders.FALSE;
        reportConfiguration52.setAddLicenseHeaders(addLicenseHeaders56);
        org.apache.rat.utils.Log log58 = null;
        org.apache.rat.ReportConfiguration reportConfiguration59 = new org.apache.rat.ReportConfiguration(log58);
        org.apache.rat.report.claim.ClaimStatistic claimStatistic60 = org.apache.rat.Reporter.report(reportConfiguration59);
        org.apache.rat.license.LicenseSetFactory.LicenseFilter licenseFilter61 = org.apache.rat.license.LicenseSetFactory.LicenseFilter.all;
        org.apache.rat.Reporter.listLicenses(reportConfiguration59, licenseFilter61);
        org.apache.rat.Reporter.listLicenses(reportConfiguration52, licenseFilter61);
        org.apache.rat.utils.Log log64 = null;
        org.apache.rat.ReportConfiguration reportConfiguration65 = new org.apache.rat.ReportConfiguration(log64);
        java.io.FilenameFilter filenameFilter66 = reportConfiguration65.getInputFileFilter();
        org.apache.rat.license.LicenseSetFactory.LicenseFilter licenseFilter67 = org.apache.rat.license.LicenseSetFactory.LicenseFilter.all;
        java.util.SortedSet<org.apache.rat.license.ILicense> iLicenseSet68 = reportConfiguration65.getLicenses(licenseFilter67);
        org.apache.rat.config.AddLicenseHeaders addLicenseHeaders69 = org.apache.rat.config.AddLicenseHeaders.FALSE;
        reportConfiguration65.setAddLicenseHeaders(addLicenseHeaders69);
        org.apache.rat.utils.Log log71 = null;
        org.apache.rat.ReportConfiguration reportConfiguration72 = new org.apache.rat.ReportConfiguration(log71);
        org.apache.rat.report.claim.ClaimStatistic claimStatistic73 = org.apache.rat.Reporter.report(reportConfiguration72);
        org.apache.rat.license.LicenseSetFactory.LicenseFilter licenseFilter74 = org.apache.rat.license.LicenseSetFactory.LicenseFilter.all;
        org.apache.rat.Reporter.listLicenses(reportConfiguration72, licenseFilter74);
        org.apache.rat.Reporter.listLicenses(reportConfiguration65, licenseFilter74);
        org.apache.rat.Reporter.listLicenses(reportConfiguration52, licenseFilter74);
        org.apache.rat.utils.Log log78 = null;
        org.apache.rat.ReportConfiguration reportConfiguration79 = new org.apache.rat.ReportConfiguration(log78);
        org.apache.commons.io.function.IOSupplier<java.io.OutputStream> outputStreamIOSupplier80 = reportConfiguration79.getOutput();
        reportConfiguration52.setOut(outputStreamIOSupplier80);
        org.apache.rat.utils.Log.Level level82 = org.apache.rat.utils.Log.Level.WARN;
        reportConfiguration52.logLicenseCollisions(level82);
        org.apache.commons.io.filefilter.IOFileFilter iOFileFilter84 = reportConfiguration52.getDirectoryFilter();
        reportConfiguration48.setInputFileFilter((java.io.FilenameFilter) iOFileFilter84);
        reportConfiguration36.setInputFileFilter((java.io.FilenameFilter) iOFileFilter84);
        org.apache.commons.io.filefilter.IOFileFilter iOFileFilter87 = reportConfiguration36.getDirectoryFilter();
        reportConfiguration1.setDirectoryFilter(iOFileFilter87);
        java.nio.file.Path path89 = null;
        java.nio.file.attribute.BasicFileAttributes basicFileAttributes90 = null;
        java.nio.file.FileVisitResult fileVisitResult91 = iOFileFilter87.accept(path89, basicFileAttributes90);
        java.nio.file.Path path92 = null;
        java.nio.file.attribute.BasicFileAttributes basicFileAttributes93 = null;
        java.nio.file.FileVisitResult fileVisitResult94 = iOFileFilter87.accept(path92, basicFileAttributes93);
        org.junit.Assert.assertNull(filenameFilter2);
        org.junit.Assert.assertTrue("'" + licenseFilter3 + "' != '" + org.apache.rat.license.LicenseSetFactory.LicenseFilter.all + "'", licenseFilter3.equals(org.apache.rat.license.LicenseSetFactory.LicenseFilter.all));
        org.junit.Assert.assertNotNull(iLicenseSet4);
        org.junit.Assert.assertTrue("'" + addLicenseHeaders5 + "' != '" + org.apache.rat.config.AddLicenseHeaders.FALSE + "'", addLicenseHeaders5.equals(org.apache.rat.config.AddLicenseHeaders.FALSE));
        org.junit.Assert.assertNull(claimStatistic9);
        org.junit.Assert.assertTrue("'" + licenseFilter10 + "' != '" + org.apache.rat.license.LicenseSetFactory.LicenseFilter.all + "'", licenseFilter10.equals(org.apache.rat.license.LicenseSetFactory.LicenseFilter.all));
        org.junit.Assert.assertNull(filenameFilter15);
        org.junit.Assert.assertTrue("'" + licenseFilter16 + "' != '" + org.apache.rat.license.LicenseSetFactory.LicenseFilter.all + "'", licenseFilter16.equals(org.apache.rat.license.LicenseSetFactory.LicenseFilter.all));
        org.junit.Assert.assertNotNull(iLicenseSet17);
        org.junit.Assert.assertTrue("'" + addLicenseHeaders18 + "' != '" + org.apache.rat.config.AddLicenseHeaders.FALSE + "'", addLicenseHeaders18.equals(org.apache.rat.config.AddLicenseHeaders.FALSE));
        org.junit.Assert.assertNull(claimStatistic22);
        org.junit.Assert.assertTrue("'" + licenseFilter23 + "' != '" + org.apache.rat.license.LicenseSetFactory.LicenseFilter.all + "'", licenseFilter23.equals(org.apache.rat.license.LicenseSetFactory.LicenseFilter.all));
        org.junit.Assert.assertNotNull(outputStreamIOSupplier29);
        org.junit.Assert.assertTrue("'" + level31 + "' != '" + org.apache.rat.utils.Log.Level.WARN + "'", level31.equals(org.apache.rat.utils.Log.Level.WARN));
        org.junit.Assert.assertNull(claimStatistic37);
        org.junit.Assert.assertNull(claimStatistic40);
        org.junit.Assert.assertTrue("'" + options41 + "' != '" + org.apache.rat.utils.ReportingSet.Options.OVERWRITE + "'", options41.equals(org.apache.rat.utils.ReportingSet.Options.OVERWRITE));
        org.junit.Assert.assertNotNull(printWriterIOSupplier44);
        org.junit.Assert.assertTrue("'" + boolean45 + "' != '" + false + "'", boolean45 == false);
        org.junit.Assert.assertNull(filenameFilter46);
        org.junit.Assert.assertTrue("'" + options49 + "' != '" + org.apache.rat.utils.ReportingSet.Options.OVERWRITE + "'", options49.equals(org.apache.rat.utils.ReportingSet.Options.OVERWRITE));
        org.junit.Assert.assertNull(filenameFilter53);
        org.junit.Assert.assertTrue("'" + licenseFilter54 + "' != '" + org.apache.rat.license.LicenseSetFactory.LicenseFilter.all + "'", licenseFilter54.equals(org.apache.rat.license.LicenseSetFactory.LicenseFilter.all));
        org.junit.Assert.assertNotNull(iLicenseSet55);
        org.junit.Assert.assertTrue("'" + addLicenseHeaders56 + "' != '" + org.apache.rat.config.AddLicenseHeaders.FALSE + "'", addLicenseHeaders56.equals(org.apache.rat.config.AddLicenseHeaders.FALSE));
        org.junit.Assert.assertNull(claimStatistic60);
        org.junit.Assert.assertTrue("'" + licenseFilter61 + "' != '" + org.apache.rat.license.LicenseSetFactory.LicenseFilter.all + "'", licenseFilter61.equals(org.apache.rat.license.LicenseSetFactory.LicenseFilter.all));
        org.junit.Assert.assertNull(filenameFilter66);
        org.junit.Assert.assertTrue("'" + licenseFilter67 + "' != '" + org.apache.rat.license.LicenseSetFactory.LicenseFilter.all + "'", licenseFilter67.equals(org.apache.rat.license.LicenseSetFactory.LicenseFilter.all));
        org.junit.Assert.assertNotNull(iLicenseSet68);
        org.junit.Assert.assertTrue("'" + addLicenseHeaders69 + "' != '" + org.apache.rat.config.AddLicenseHeaders.FALSE + "'", addLicenseHeaders69.equals(org.apache.rat.config.AddLicenseHeaders.FALSE));
        org.junit.Assert.assertNull(claimStatistic73);
        org.junit.Assert.assertTrue("'" + licenseFilter74 + "' != '" + org.apache.rat.license.LicenseSetFactory.LicenseFilter.all + "'", licenseFilter74.equals(org.apache.rat.license.LicenseSetFactory.LicenseFilter.all));
        org.junit.Assert.assertNotNull(outputStreamIOSupplier80);
        org.junit.Assert.assertTrue("'" + level82 + "' != '" + org.apache.rat.utils.Log.Level.WARN + "'", level82.equals(org.apache.rat.utils.Log.Level.WARN));
        org.junit.Assert.assertNotNull(iOFileFilter84);
        org.junit.Assert.assertNotNull(iOFileFilter87);
        org.junit.Assert.assertTrue("'" + fileVisitResult91 + "' != '" + java.nio.file.FileVisitResult.TERMINATE + "'", fileVisitResult91.equals(java.nio.file.FileVisitResult.TERMINATE));
        org.junit.Assert.assertTrue("'" + fileVisitResult94 + "' != '" + java.nio.file.FileVisitResult.TERMINATE + "'", fileVisitResult94.equals(java.nio.file.FileVisitResult.TERMINATE));
    }

    @Test
    public void test12836() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest25.test12836");
        org.apache.rat.utils.DefaultLog defaultLog0 = org.apache.rat.utils.DefaultLog.INSTANCE;
        org.apache.rat.configuration.builders.AllBuilder allBuilder1 = new org.apache.rat.configuration.builders.AllBuilder();
        org.apache.rat.configuration.builders.MatcherRefBuilder matcherRefBuilder2 = org.apache.rat.analysis.IHeaderMatcher.Builder.matcherRef();
        boolean boolean3 = matcherRefBuilder2.hasId();
        java.lang.String str4 = matcherRefBuilder2.toString();
        org.apache.rat.configuration.builders.AnyBuilder anyBuilder5 = org.apache.rat.analysis.IHeaderMatcher.Builder.any();
        org.apache.rat.configuration.builders.NotBuilder notBuilder6 = new org.apache.rat.configuration.builders.NotBuilder();
        java.lang.String str7 = notBuilder6.toString();
        org.apache.rat.configuration.builders.MatcherRefBuilder matcherRefBuilder8 = org.apache.rat.analysis.IHeaderMatcher.Builder.matcherRef();
        boolean boolean9 = matcherRefBuilder8.hasId();
        java.util.Map<java.lang.String, org.apache.rat.analysis.IHeaderMatcher> strMap10 = null;
        org.apache.rat.configuration.builders.MatcherRefBuilder matcherRefBuilder11 = matcherRefBuilder8.setMatchers(strMap10);
        org.apache.rat.configuration.builders.AllBuilder allBuilder12 = new org.apache.rat.configuration.builders.AllBuilder();
        org.apache.rat.configuration.builders.CopyrightBuilder copyrightBuilder13 = org.apache.rat.analysis.IHeaderMatcher.Builder.copyright();
        org.apache.rat.configuration.builders.CopyrightBuilder copyrightBuilder15 = copyrightBuilder13.setStart("OASIS");
        java.lang.String str16 = copyrightBuilder13.toString();
        org.apache.rat.configuration.builders.CopyrightBuilder copyrightBuilder18 = copyrightBuilder13.setStart("223f0aba-15d4-49e9-901e-5740c137aebf");
        org.apache.rat.configuration.builders.MatcherRefBuilder matcherRefBuilder19 = org.apache.rat.analysis.IHeaderMatcher.Builder.matcherRef();
        boolean boolean20 = matcherRefBuilder19.hasId();
        org.apache.rat.configuration.builders.CopyrightBuilder copyrightBuilder21 = org.apache.rat.analysis.IHeaderMatcher.Builder.copyright();
        org.apache.rat.configuration.builders.CopyrightBuilder copyrightBuilder23 = copyrightBuilder21.setStart("OASIS");
        java.lang.String str24 = copyrightBuilder21.toString();
        org.apache.rat.configuration.builders.CopyrightBuilder copyrightBuilder26 = copyrightBuilder21.setStart("223f0aba-15d4-49e9-901e-5740c137aebf");
        org.apache.rat.configuration.builders.CopyrightBuilder copyrightBuilder27 = org.apache.rat.analysis.IHeaderMatcher.Builder.copyright();
        org.apache.rat.configuration.builders.CopyrightBuilder copyrightBuilder28 = org.apache.rat.analysis.IHeaderMatcher.Builder.copyright();
        java.lang.String str29 = copyrightBuilder28.toString();
        org.apache.rat.configuration.builders.CopyrightBuilder copyrightBuilder31 = copyrightBuilder28.setEnd(".cvsignore");
        boolean boolean32 = copyrightBuilder28.hasId();
        org.apache.rat.configuration.builders.CopyrightBuilder copyrightBuilder33 = org.apache.rat.analysis.IHeaderMatcher.Builder.copyright();
        java.lang.String str34 = copyrightBuilder33.toString();
        org.apache.rat.configuration.builders.CopyrightBuilder copyrightBuilder36 = copyrightBuilder33.setEnd(".cvsignore");
        boolean boolean37 = copyrightBuilder33.hasId();
        java.lang.String str38 = copyrightBuilder33.toString();
        org.apache.rat.configuration.builders.CopyrightBuilder copyrightBuilder39 = org.apache.rat.analysis.IHeaderMatcher.Builder.copyright();
        org.apache.rat.configuration.builders.CopyrightBuilder copyrightBuilder41 = copyrightBuilder39.setStart("OASIS");
        org.apache.rat.configuration.builders.AnyBuilder anyBuilder42 = org.apache.rat.analysis.IHeaderMatcher.Builder.any();
        org.apache.rat.configuration.builders.MatcherRefBuilder matcherRefBuilder43 = org.apache.rat.analysis.IHeaderMatcher.Builder.matcherRef();
        boolean boolean44 = matcherRefBuilder43.hasId();
        java.util.Map<java.lang.String, org.apache.rat.analysis.IHeaderMatcher> strMap45 = null;
        org.apache.rat.configuration.builders.MatcherRefBuilder matcherRefBuilder46 = matcherRefBuilder43.setMatchers(strMap45);
        org.apache.rat.configuration.builders.CopyrightBuilder copyrightBuilder47 = org.apache.rat.analysis.IHeaderMatcher.Builder.copyright();
        org.apache.rat.configuration.builders.MatcherRefBuilder matcherRefBuilder48 = org.apache.rat.analysis.IHeaderMatcher.Builder.matcherRef();
        boolean boolean49 = matcherRefBuilder48.hasId();
        java.lang.String str50 = matcherRefBuilder48.toString();
        java.util.Map<java.lang.String, org.apache.rat.analysis.IHeaderMatcher> strMap51 = null;
        org.apache.rat.configuration.builders.MatcherRefBuilder matcherRefBuilder52 = matcherRefBuilder48.setMatchers(strMap51);
        org.apache.rat.analysis.IHeaderMatcher.Builder[] builderArray53 = new org.apache.rat.analysis.IHeaderMatcher.Builder[] { matcherRefBuilder8, allBuilder12, copyrightBuilder18, matcherRefBuilder19, copyrightBuilder21, copyrightBuilder27, copyrightBuilder28, copyrightBuilder33, copyrightBuilder39, anyBuilder42, matcherRefBuilder43, copyrightBuilder47, matcherRefBuilder48 };
        java.util.ArrayList<org.apache.rat.analysis.IHeaderMatcher.Builder> builderList54 = new java.util.ArrayList<org.apache.rat.analysis.IHeaderMatcher.Builder>();
        boolean boolean55 = java.util.Collections.addAll((java.util.Collection<org.apache.rat.analysis.IHeaderMatcher.Builder>) builderList54, builderArray53);
        org.apache.rat.configuration.builders.AbstractBuilder abstractBuilder56 = notBuilder6.add((java.util.Collection<org.apache.rat.analysis.IHeaderMatcher.Builder>) builderList54);
        org.apache.rat.configuration.builders.MatcherRefBuilder matcherRefBuilder57 = new org.apache.rat.configuration.builders.MatcherRefBuilder();
        org.apache.rat.analysis.IHeaderMatcher.Builder[] builderArray58 = new org.apache.rat.analysis.IHeaderMatcher.Builder[] { matcherRefBuilder2, anyBuilder5, notBuilder6, matcherRefBuilder57 };
        java.util.ArrayList<org.apache.rat.analysis.IHeaderMatcher.Builder> builderList59 = new java.util.ArrayList<org.apache.rat.analysis.IHeaderMatcher.Builder>();
        boolean boolean60 = java.util.Collections.addAll((java.util.Collection<org.apache.rat.analysis.IHeaderMatcher.Builder>) builderList59, builderArray58);
        org.apache.rat.configuration.builders.AbstractBuilder abstractBuilder61 = allBuilder1.add((java.util.Collection<org.apache.rat.analysis.IHeaderMatcher.Builder>) builderList59);
        defaultLog0.info((java.lang.Object) allBuilder1);
        org.apache.rat.annotation.ApacheV2LicenseAppender apacheV2LicenseAppender64 = new org.apache.rat.annotation.ApacheV2LicenseAppender((org.apache.rat.utils.Log) defaultLog0, "true");
        org.apache.rat.utils.Log.Level level65 = defaultLog0.getLevel();
        org.apache.rat.license.SimpleLicenseFamily simpleLicenseFamily66 = new org.apache.rat.license.SimpleLicenseFamily();
        simpleLicenseFamily66.setFamilyName("http://org/apache/rat/meta-data#LicenseFamilyName");
        simpleLicenseFamily66.setFamilyName("f1fc8dc8-990d-4a2d-9540-4e9ece3bd92c");
        simpleLicenseFamily66.setFamilyCategory("");
        defaultLog0.warn((java.lang.Object) simpleLicenseFamily66);
        java.lang.Throwable throwable75 = null;
        // The following exception was thrown during execution in test generation
        try {
            defaultLog0.debug((java.lang.Object) 6, throwable75);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(defaultLog0);
        org.junit.Assert.assertNotNull(matcherRefBuilder2);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "MathcerRefBuilder: null" + "'", str4, "MathcerRefBuilder: null");
        org.junit.Assert.assertNotNull(anyBuilder5);
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "NotBuilder: null" + "'", str7, "NotBuilder: null");
        org.junit.Assert.assertNotNull(matcherRefBuilder8);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertNotNull(matcherRefBuilder11);
        org.junit.Assert.assertNotNull(copyrightBuilder13);
        org.junit.Assert.assertNotNull(copyrightBuilder15);
        org.junit.Assert.assertEquals("'" + str16 + "' != '" + "Copyright Builder: s:OASIS e:null o:null" + "'", str16, "Copyright Builder: s:OASIS e:null o:null");
        org.junit.Assert.assertNotNull(copyrightBuilder18);
        org.junit.Assert.assertNotNull(matcherRefBuilder19);
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + false + "'", boolean20 == false);
        org.junit.Assert.assertNotNull(copyrightBuilder21);
        org.junit.Assert.assertNotNull(copyrightBuilder23);
        org.junit.Assert.assertEquals("'" + str24 + "' != '" + "Copyright Builder: s:OASIS e:null o:null" + "'", str24, "Copyright Builder: s:OASIS e:null o:null");
        org.junit.Assert.assertNotNull(copyrightBuilder26);
        org.junit.Assert.assertNotNull(copyrightBuilder27);
        org.junit.Assert.assertNotNull(copyrightBuilder28);
        org.junit.Assert.assertEquals("'" + str29 + "' != '" + "Copyright Builder: s:null e:null o:null" + "'", str29, "Copyright Builder: s:null e:null o:null");
        org.junit.Assert.assertNotNull(copyrightBuilder31);
        org.junit.Assert.assertTrue("'" + boolean32 + "' != '" + false + "'", boolean32 == false);
        org.junit.Assert.assertNotNull(copyrightBuilder33);
        org.junit.Assert.assertEquals("'" + str34 + "' != '" + "Copyright Builder: s:null e:null o:null" + "'", str34, "Copyright Builder: s:null e:null o:null");
        org.junit.Assert.assertNotNull(copyrightBuilder36);
        org.junit.Assert.assertTrue("'" + boolean37 + "' != '" + false + "'", boolean37 == false);
        org.junit.Assert.assertEquals("'" + str38 + "' != '" + "Copyright Builder: s:null e:.cvsignore o:null" + "'", str38, "Copyright Builder: s:null e:.cvsignore o:null");
        org.junit.Assert.assertNotNull(copyrightBuilder39);
        org.junit.Assert.assertNotNull(copyrightBuilder41);
        org.junit.Assert.assertNotNull(anyBuilder42);
        org.junit.Assert.assertNotNull(matcherRefBuilder43);
        org.junit.Assert.assertTrue("'" + boolean44 + "' != '" + false + "'", boolean44 == false);
        org.junit.Assert.assertNotNull(matcherRefBuilder46);
        org.junit.Assert.assertNotNull(copyrightBuilder47);
        org.junit.Assert.assertNotNull(matcherRefBuilder48);
        org.junit.Assert.assertTrue("'" + boolean49 + "' != '" + false + "'", boolean49 == false);
        org.junit.Assert.assertEquals("'" + str50 + "' != '" + "MathcerRefBuilder: null" + "'", str50, "MathcerRefBuilder: null");
        org.junit.Assert.assertNotNull(matcherRefBuilder52);
        org.junit.Assert.assertNotNull(builderArray53);
        org.junit.Assert.assertTrue("'" + boolean55 + "' != '" + true + "'", boolean55 == true);
        org.junit.Assert.assertNotNull(abstractBuilder56);
        org.junit.Assert.assertNotNull(builderArray58);
        org.junit.Assert.assertTrue("'" + boolean60 + "' != '" + true + "'", boolean60 == true);
        org.junit.Assert.assertNotNull(abstractBuilder61);
        org.junit.Assert.assertTrue("'" + level65 + "' != '" + org.apache.rat.utils.Log.Level.ERROR + "'", level65.equals(org.apache.rat.utils.Log.Level.ERROR));
    }

    @Test
    public void test12837() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest25.test12837");
        org.apache.rat.configuration.builders.RegexBuilder regexBuilder0 = new org.apache.rat.configuration.builders.RegexBuilder();
        java.lang.String str1 = regexBuilder0.toString();
        java.lang.String str2 = regexBuilder0.toString();
        org.apache.rat.configuration.builders.RegexBuilder regexBuilder4 = regexBuilder0.setExpr("89662180-a89f-497b-9301-227d494d2bae");
        org.apache.rat.configuration.builders.RegexBuilder regexBuilder6 = regexBuilder4.setExpr("http://org/apache/rat/meta-data#LicenseFamilyName");
        org.apache.rat.configuration.builders.RegexBuilder regexBuilder8 = regexBuilder4.setExpr("AL   ");
        org.apache.rat.analysis.IHeaderMatcher iHeaderMatcher9 = regexBuilder4.build();
        org.apache.rat.configuration.builders.RegexBuilder regexBuilder11 = regexBuilder4.setExpr("3e2b228d-d5ff-4444-8d8c-d614494b2426 null");
        org.apache.rat.analysis.IHeaderMatcher iHeaderMatcher12 = regexBuilder4.build();
        org.junit.Assert.assertEquals("'" + str1 + "' != '" + "RegexBuilder: null" + "'", str1, "RegexBuilder: null");
        org.junit.Assert.assertEquals("'" + str2 + "' != '" + "RegexBuilder: null" + "'", str2, "RegexBuilder: null");
        org.junit.Assert.assertNotNull(regexBuilder4);
        org.junit.Assert.assertNotNull(regexBuilder6);
        org.junit.Assert.assertNotNull(regexBuilder8);
        org.junit.Assert.assertNotNull(iHeaderMatcher9);
        org.junit.Assert.assertNotNull(regexBuilder11);
        org.junit.Assert.assertNotNull(iHeaderMatcher12);
    }

    @Test
    public void test12838() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest25.test12838");
        org.apache.rat.analysis.matchers.CopyrightMatcher copyrightMatcher4 = new org.apache.rat.analysis.matchers.CopyrightMatcher("Copyright Builder: s:null e:ba9961f9-a0de-4a54-bd1f-a2e9df26a188 o:a1abad46-6a98-44f8-aa20-7839919a8270", "97f57b71-8f44-4dda-a148-19f50c572927", "49ba0523-306f-4984-949f-9db17b9667d9", "9ec38a8d-0e0f-4c31-8d12-d6138412a101");
        java.lang.String str5 = copyrightMatcher4.getId();
        org.junit.Assert.assertEquals("'" + str5 + "' != '" + "Copyright Builder: s:null e:ba9961f9-a0de-4a54-bd1f-a2e9df26a188 o:a1abad46-6a98-44f8-aa20-7839919a8270" + "'", str5, "Copyright Builder: s:null e:ba9961f9-a0de-4a54-bd1f-a2e9df26a188 o:a1abad46-6a98-44f8-aa20-7839919a8270");
    }

    @Test
    public void test12839() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest25.test12839");
        boolean boolean1 = org.apache.rat.document.impl.guesser.BinaryGuesser.isNonBinary("COPYRIGHT BUILDER: S:90663EFF-7ED8-41BD-85A8-E8F189198BC6 E:NULL O:NULL");
        org.junit.Assert.assertTrue("'" + boolean1 + "' != '" + false + "'", boolean1 == false);
    }

    @Test
    public void test12840() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest25.test12840");
        org.apache.rat.license.ILicenseFamilyBuilder iLicenseFamilyBuilder0 = new org.apache.rat.license.ILicenseFamilyBuilder();
        java.lang.String str1 = iLicenseFamilyBuilder0.getCategory();
        org.apache.rat.license.ILicenseFamily.Builder builder3 = iLicenseFamilyBuilder0.setLicenseFamilyCategory("AL   ");
        java.lang.String str4 = iLicenseFamilyBuilder0.getCategory();
        org.apache.rat.license.ILicenseFamily.Builder builder6 = iLicenseFamilyBuilder0.setLicenseFamilyName("535b5d01-f553-45e5-bb29-a646e4b8b66f");
        java.lang.String str7 = iLicenseFamilyBuilder0.getCategory();
        org.apache.rat.license.ILicenseFamily.Builder builder9 = iLicenseFamilyBuilder0.setLicenseFamilyName("Copyright Builder: s:null e:CopyrightBuildersnulleW3CSoftwareCopyrightonull o:null");
        org.apache.rat.license.ILicenseFamily.Builder builder11 = iLicenseFamilyBuilder0.setLicenseFamilyCategory("W3C   null");
        org.apache.rat.license.ILicenseFamily.Builder builder13 = iLicenseFamilyBuilder0.setLicenseFamilyName("ab913e1f-22c2-4747-9d4b-1a549cb028f0");
        org.apache.rat.license.ILicenseFamily.Builder builder15 = iLicenseFamilyBuilder0.setLicenseFamilyCategory("TextBuilder: 9340895e-47fd-411d-8...");
        org.junit.Assert.assertNull(str1);
        org.junit.Assert.assertNotNull(builder3);
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "AL   " + "'", str4, "AL   ");
        org.junit.Assert.assertNotNull(builder6);
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "AL   " + "'", str7, "AL   ");
        org.junit.Assert.assertNotNull(builder9);
        org.junit.Assert.assertNotNull(builder11);
        org.junit.Assert.assertNotNull(builder13);
        org.junit.Assert.assertNotNull(builder15);
    }

    @Test
    public void test12841() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest25.test12841");
        java.lang.String[] strArray5 = new java.lang.String[] { "http://org/apache/rat/meta-data#LicenseFamilyCategory", "Datum [ name ='http://org/apache/rat/meta-data#LicenseFamilyCategory',value ='GPL1  ']", "MANIFEST.MF", "AllBuilder:", "The MIT License" };
        org.apache.rat.utils.ReportingSet<java.lang.String> strSet6 = new org.apache.rat.utils.ReportingSet<java.lang.String>();
        boolean boolean7 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strSet6, strArray5);
        boolean boolean9 = strSet6.addIfNotPresent("http://org/apache/rat/meta-data#LicenseFamilyName");
        java.util.Iterator<java.lang.String> strItor10 = strSet6.iterator();
        strSet6.clear();
        strSet6.clear();
        java.lang.Object[] objArray13 = strSet6.toArray();
        java.util.stream.Stream<java.lang.String> strStream14 = strSet6.stream();
        java.util.Comparator<? super java.lang.String> wildcardComparator15 = strSet6.comparator();
        org.apache.rat.utils.DefaultLog defaultLog16 = org.apache.rat.utils.DefaultLog.INSTANCE;
        org.apache.rat.utils.Log log17 = null;
        org.apache.rat.ReportConfiguration reportConfiguration18 = new org.apache.rat.ReportConfiguration(log17);
        java.io.FilenameFilter filenameFilter19 = reportConfiguration18.getInputFileFilter();
        org.apache.rat.license.LicenseSetFactory.LicenseFilter licenseFilter20 = org.apache.rat.license.LicenseSetFactory.LicenseFilter.all;
        java.util.SortedSet<org.apache.rat.license.ILicense> iLicenseSet21 = reportConfiguration18.getLicenses(licenseFilter20);
        org.apache.rat.config.AddLicenseHeaders addLicenseHeaders22 = org.apache.rat.config.AddLicenseHeaders.FALSE;
        reportConfiguration18.setAddLicenseHeaders(addLicenseHeaders22);
        org.apache.rat.utils.Log log24 = null;
        org.apache.rat.ReportConfiguration reportConfiguration25 = new org.apache.rat.ReportConfiguration(log24);
        org.apache.rat.report.claim.ClaimStatistic claimStatistic26 = org.apache.rat.Reporter.report(reportConfiguration25);
        org.apache.rat.license.LicenseSetFactory.LicenseFilter licenseFilter27 = org.apache.rat.license.LicenseSetFactory.LicenseFilter.all;
        org.apache.rat.Reporter.listLicenses(reportConfiguration25, licenseFilter27);
        org.apache.rat.Reporter.listLicenses(reportConfiguration18, licenseFilter27);
        org.apache.rat.utils.Log log30 = null;
        org.apache.rat.ReportConfiguration reportConfiguration31 = new org.apache.rat.ReportConfiguration(log30);
        java.io.FilenameFilter filenameFilter32 = reportConfiguration31.getInputFileFilter();
        org.apache.rat.license.LicenseSetFactory.LicenseFilter licenseFilter33 = org.apache.rat.license.LicenseSetFactory.LicenseFilter.all;
        java.util.SortedSet<org.apache.rat.license.ILicense> iLicenseSet34 = reportConfiguration31.getLicenses(licenseFilter33);
        org.apache.rat.config.AddLicenseHeaders addLicenseHeaders35 = org.apache.rat.config.AddLicenseHeaders.FALSE;
        reportConfiguration31.setAddLicenseHeaders(addLicenseHeaders35);
        org.apache.rat.utils.Log log37 = null;
        org.apache.rat.ReportConfiguration reportConfiguration38 = new org.apache.rat.ReportConfiguration(log37);
        org.apache.rat.report.claim.ClaimStatistic claimStatistic39 = org.apache.rat.Reporter.report(reportConfiguration38);
        org.apache.rat.license.LicenseSetFactory.LicenseFilter licenseFilter40 = org.apache.rat.license.LicenseSetFactory.LicenseFilter.all;
        org.apache.rat.Reporter.listLicenses(reportConfiguration38, licenseFilter40);
        org.apache.rat.Reporter.listLicenses(reportConfiguration31, licenseFilter40);
        org.apache.rat.Reporter.listLicenses(reportConfiguration18, licenseFilter40);
        org.apache.rat.utils.Log log44 = null;
        org.apache.rat.ReportConfiguration reportConfiguration45 = new org.apache.rat.ReportConfiguration(log44);
        org.apache.commons.io.function.IOSupplier<java.io.OutputStream> outputStreamIOSupplier46 = reportConfiguration45.getOutput();
        reportConfiguration18.setOut(outputStreamIOSupplier46);
        org.apache.rat.utils.Log log48 = null;
        org.apache.rat.ReportConfiguration reportConfiguration49 = new org.apache.rat.ReportConfiguration(log48);
        org.apache.rat.report.claim.ClaimStatistic claimStatistic50 = org.apache.rat.Reporter.report(reportConfiguration49);
        org.apache.rat.utils.Log log51 = null;
        org.apache.rat.ReportConfiguration reportConfiguration52 = new org.apache.rat.ReportConfiguration(log51);
        org.apache.rat.report.claim.ClaimStatistic claimStatistic53 = org.apache.rat.Reporter.report(reportConfiguration52);
        org.apache.rat.utils.ReportingSet.Options options54 = org.apache.rat.utils.ReportingSet.Options.OVERWRITE;
        reportConfiguration52.licenseDuplicateOption(options54);
        reportConfiguration49.familyDuplicateOption(options54);
        reportConfiguration18.licenseDuplicateOption(options54);
        reportConfiguration18.addApprovedLicenseCategory("W3C Document Copyright");
        org.apache.rat.utils.Log log60 = null;
        org.apache.rat.ReportConfiguration reportConfiguration61 = new org.apache.rat.ReportConfiguration(log60);
        reportConfiguration61.addApprovedLicenseCategory(".cvsignore");
        org.apache.rat.utils.Log.Level level64 = org.apache.rat.utils.Log.Level.ERROR;
        reportConfiguration61.logLicenseCollisions(level64);
        reportConfiguration18.logLicenseCollisions(level64);
        defaultLog16.setLevel(level64);
        org.apache.rat.utils.ReportingSet<java.lang.String> strSet68 = strSet6.setLog((org.apache.rat.utils.Log) defaultLog16);
        java.util.stream.Stream<java.lang.String> strStream69 = strSet68.stream();
        boolean boolean71 = strSet68.add("Datum [ name ='http://org/apache/rat/meta-data#LicenseFamilyName',value ='Academic Free License, Version 2.1 ']");
        org.junit.Assert.assertNotNull(strArray5);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + true + "'", boolean7 == true);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + true + "'", boolean9 == true);
        org.junit.Assert.assertNotNull(strItor10);
        org.junit.Assert.assertNotNull(objArray13);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray13), "[]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray13), "[]");
        org.junit.Assert.assertNotNull(strStream14);
        org.junit.Assert.assertNull(wildcardComparator15);
        org.junit.Assert.assertNotNull(defaultLog16);
        org.junit.Assert.assertNull(filenameFilter19);
        org.junit.Assert.assertTrue("'" + licenseFilter20 + "' != '" + org.apache.rat.license.LicenseSetFactory.LicenseFilter.all + "'", licenseFilter20.equals(org.apache.rat.license.LicenseSetFactory.LicenseFilter.all));
        org.junit.Assert.assertNotNull(iLicenseSet21);
        org.junit.Assert.assertTrue("'" + addLicenseHeaders22 + "' != '" + org.apache.rat.config.AddLicenseHeaders.FALSE + "'", addLicenseHeaders22.equals(org.apache.rat.config.AddLicenseHeaders.FALSE));
        org.junit.Assert.assertNull(claimStatistic26);
        org.junit.Assert.assertTrue("'" + licenseFilter27 + "' != '" + org.apache.rat.license.LicenseSetFactory.LicenseFilter.all + "'", licenseFilter27.equals(org.apache.rat.license.LicenseSetFactory.LicenseFilter.all));
        org.junit.Assert.assertNull(filenameFilter32);
        org.junit.Assert.assertTrue("'" + licenseFilter33 + "' != '" + org.apache.rat.license.LicenseSetFactory.LicenseFilter.all + "'", licenseFilter33.equals(org.apache.rat.license.LicenseSetFactory.LicenseFilter.all));
        org.junit.Assert.assertNotNull(iLicenseSet34);
        org.junit.Assert.assertTrue("'" + addLicenseHeaders35 + "' != '" + org.apache.rat.config.AddLicenseHeaders.FALSE + "'", addLicenseHeaders35.equals(org.apache.rat.config.AddLicenseHeaders.FALSE));
        org.junit.Assert.assertNull(claimStatistic39);
        org.junit.Assert.assertTrue("'" + licenseFilter40 + "' != '" + org.apache.rat.license.LicenseSetFactory.LicenseFilter.all + "'", licenseFilter40.equals(org.apache.rat.license.LicenseSetFactory.LicenseFilter.all));
        org.junit.Assert.assertNotNull(outputStreamIOSupplier46);
        org.junit.Assert.assertNull(claimStatistic50);
        org.junit.Assert.assertNull(claimStatistic53);
        org.junit.Assert.assertTrue("'" + options54 + "' != '" + org.apache.rat.utils.ReportingSet.Options.OVERWRITE + "'", options54.equals(org.apache.rat.utils.ReportingSet.Options.OVERWRITE));
        org.junit.Assert.assertTrue("'" + level64 + "' != '" + org.apache.rat.utils.Log.Level.ERROR + "'", level64.equals(org.apache.rat.utils.Log.Level.ERROR));
        org.junit.Assert.assertNotNull(strSet68);
        org.junit.Assert.assertNotNull(strStream69);
        org.junit.Assert.assertTrue("'" + boolean71 + "' != '" + true + "'", boolean71 == true);
    }

    @Test
    public void test12842() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest25.test12842");
        org.apache.rat.utils.Log log0 = null;
        org.apache.rat.ReportConfiguration reportConfiguration1 = new org.apache.rat.ReportConfiguration(log0);
        java.io.FilenameFilter filenameFilter2 = reportConfiguration1.getInputFileFilter();
        org.apache.rat.license.ILicense iLicense3 = null;
        reportConfiguration1.addLicense(iLicense3);
        org.apache.rat.license.ILicenseFamily iLicenseFamily5 = null;
        reportConfiguration1.addFamily(iLicenseFamily5);
        org.apache.commons.io.function.IOSupplier<java.io.InputStream> inputStreamIOSupplier7 = org.apache.rat.Defaults.getPlainStyleSheet();
        reportConfiguration1.setStyleSheet(inputStreamIOSupplier7);
        org.apache.rat.report.IReportable iReportable9 = null;
        reportConfiguration1.setReportable(iReportable9);
        reportConfiguration1.setCopyrightMessage("http:");
        java.util.SortedSet<java.lang.String> strSet13 = reportConfiguration1.getApprovedLicenseCategories();
        org.junit.Assert.assertNull(filenameFilter2);
        org.junit.Assert.assertNotNull(inputStreamIOSupplier7);
        org.junit.Assert.assertNotNull(strSet13);
    }

    @Test
    public void test12843() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest25.test12843");
        org.apache.rat.utils.Log log0 = null;
        org.apache.rat.ReportConfiguration reportConfiguration1 = new org.apache.rat.ReportConfiguration(log0);
        java.io.FilenameFilter filenameFilter2 = reportConfiguration1.getInputFileFilter();
        org.apache.rat.license.ILicense iLicense3 = null;
        reportConfiguration1.addLicense(iLicense3);
        org.apache.rat.utils.Log log5 = null;
        org.apache.rat.ReportConfiguration reportConfiguration6 = new org.apache.rat.ReportConfiguration(log5);
        java.io.FilenameFilter filenameFilter7 = reportConfiguration6.getInputFileFilter();
        boolean boolean8 = reportConfiguration6.isStyleReport();
        org.apache.commons.io.function.IOSupplier<java.io.OutputStream> outputStreamIOSupplier9 = reportConfiguration6.getOutput();
        reportConfiguration1.setOut(outputStreamIOSupplier9);
        org.apache.commons.io.function.IOSupplier<java.io.InputStream> inputStreamIOSupplier11 = reportConfiguration1.getStyleSheet();
        java.util.function.Consumer<java.lang.String> strConsumer12 = null;
        // The following exception was thrown during execution in test generation
        try {
            reportConfiguration1.validate(strConsumer12);
            org.junit.Assert.fail("Expected exception of type org.apache.rat.ConfigurationException; message: Reportable may not be null");
        } catch (org.apache.rat.ConfigurationException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNull(filenameFilter2);
        org.junit.Assert.assertNull(filenameFilter7);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + true + "'", boolean8 == true);
        org.junit.Assert.assertNotNull(outputStreamIOSupplier9);
        org.junit.Assert.assertNull(inputStreamIOSupplier11);
    }

    @Test
    public void test12844() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest25.test12844");
        org.apache.rat.Defaults.Builder builder0 = org.apache.rat.Defaults.builder();
        org.apache.rat.Defaults defaults1 = builder0.build();
        org.apache.rat.Defaults.Builder builder2 = builder0.noDefault();
        org.apache.rat.Defaults.Builder builder4 = builder0.remove("AllBuilder:");
        org.apache.rat.Defaults.Builder builder6 = builder4.add("?????");
        org.apache.rat.Defaults.Builder builder8 = builder6.remove("");
        org.apache.rat.Defaults.Builder builder10 = builder8.remove("COMMON DEVELOPMENT AND DISTRIBUTION LICENSE Version 1.0");
        org.apache.rat.Defaults.Builder builder11 = builder10.noDefault();
        org.apache.rat.Defaults.Builder builder13 = builder10.add("COMMON DEVELOPMENT AND DISTRIBUTION LICENSE VERSION 1.0");
        org.junit.Assert.assertNotNull(builder0);
        org.junit.Assert.assertNotNull(defaults1);
        org.junit.Assert.assertNotNull(builder2);
        org.junit.Assert.assertNotNull(builder4);
        org.junit.Assert.assertNotNull(builder6);
        org.junit.Assert.assertNotNull(builder8);
        org.junit.Assert.assertNotNull(builder10);
        org.junit.Assert.assertNotNull(builder11);
        org.junit.Assert.assertNotNull(builder13);
    }

    @Test
    public void test12845() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest25.test12845");
        java.io.File file0 = null;
        byte[] byteArray6 = new byte[] { (byte) 100, (byte) -1, (byte) -1, (byte) 0, (byte) 100 };
        // The following exception was thrown during execution in test generation
        try {
            org.apache.rat.document.impl.ArchiveEntryDocument archiveEntryDocument7 = new org.apache.rat.document.impl.ArchiveEntryDocument(file0, byteArray6);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(byteArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray6), "[100, -1, -1, 0, 100]");
    }

    @Test
    public void test12846() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest25.test12846");
        org.apache.rat.utils.Log log0 = null;
        org.apache.rat.ReportConfiguration reportConfiguration1 = new org.apache.rat.ReportConfiguration(log0);
        java.io.FilenameFilter filenameFilter2 = reportConfiguration1.getInputFileFilter();
        org.apache.rat.license.LicenseSetFactory.LicenseFilter licenseFilter3 = org.apache.rat.license.LicenseSetFactory.LicenseFilter.all;
        java.util.SortedSet<org.apache.rat.license.ILicense> iLicenseSet4 = reportConfiguration1.getLicenses(licenseFilter3);
        org.apache.rat.config.AddLicenseHeaders addLicenseHeaders5 = org.apache.rat.config.AddLicenseHeaders.FALSE;
        reportConfiguration1.setAddLicenseHeaders(addLicenseHeaders5);
        org.apache.rat.utils.Log log7 = null;
        org.apache.rat.ReportConfiguration reportConfiguration8 = new org.apache.rat.ReportConfiguration(log7);
        org.apache.rat.report.claim.ClaimStatistic claimStatistic9 = org.apache.rat.Reporter.report(reportConfiguration8);
        org.apache.rat.license.LicenseSetFactory.LicenseFilter licenseFilter10 = org.apache.rat.license.LicenseSetFactory.LicenseFilter.all;
        org.apache.rat.Reporter.listLicenses(reportConfiguration8, licenseFilter10);
        org.apache.rat.Reporter.listLicenses(reportConfiguration1, licenseFilter10);
        org.apache.rat.report.IReportable iReportable13 = null;
        reportConfiguration1.setReportable(iReportable13);
        java.lang.String str15 = reportConfiguration1.getCopyrightMessage();
        org.apache.rat.utils.ReportingSet<java.lang.String> strSet16 = new org.apache.rat.utils.ReportingSet<java.lang.String>();
        org.apache.rat.utils.ReportingSet<java.lang.String> strSet18 = strSet16.tailSet("hi!");
        org.apache.rat.utils.Log log19 = null;
        org.apache.rat.ReportConfiguration reportConfiguration20 = new org.apache.rat.ReportConfiguration(log19);
        java.io.FilenameFilter filenameFilter21 = reportConfiguration20.getInputFileFilter();
        org.apache.rat.license.LicenseSetFactory.LicenseFilter licenseFilter22 = org.apache.rat.license.LicenseSetFactory.LicenseFilter.all;
        java.util.SortedSet<org.apache.rat.license.ILicense> iLicenseSet23 = reportConfiguration20.getLicenses(licenseFilter22);
        org.apache.rat.config.AddLicenseHeaders addLicenseHeaders24 = org.apache.rat.config.AddLicenseHeaders.FALSE;
        reportConfiguration20.setAddLicenseHeaders(addLicenseHeaders24);
        org.apache.rat.utils.Log log26 = null;
        org.apache.rat.ReportConfiguration reportConfiguration27 = new org.apache.rat.ReportConfiguration(log26);
        org.apache.rat.report.claim.ClaimStatistic claimStatistic28 = org.apache.rat.Reporter.report(reportConfiguration27);
        org.apache.rat.license.LicenseSetFactory.LicenseFilter licenseFilter29 = org.apache.rat.license.LicenseSetFactory.LicenseFilter.all;
        org.apache.rat.Reporter.listLicenses(reportConfiguration27, licenseFilter29);
        org.apache.rat.Reporter.listLicenses(reportConfiguration20, licenseFilter29);
        org.apache.rat.utils.Log log32 = null;
        org.apache.rat.ReportConfiguration reportConfiguration33 = new org.apache.rat.ReportConfiguration(log32);
        java.io.FilenameFilter filenameFilter34 = reportConfiguration33.getInputFileFilter();
        org.apache.rat.license.LicenseSetFactory.LicenseFilter licenseFilter35 = org.apache.rat.license.LicenseSetFactory.LicenseFilter.all;
        java.util.SortedSet<org.apache.rat.license.ILicense> iLicenseSet36 = reportConfiguration33.getLicenses(licenseFilter35);
        org.apache.rat.config.AddLicenseHeaders addLicenseHeaders37 = org.apache.rat.config.AddLicenseHeaders.FALSE;
        reportConfiguration33.setAddLicenseHeaders(addLicenseHeaders37);
        org.apache.rat.utils.Log log39 = null;
        org.apache.rat.ReportConfiguration reportConfiguration40 = new org.apache.rat.ReportConfiguration(log39);
        org.apache.rat.report.claim.ClaimStatistic claimStatistic41 = org.apache.rat.Reporter.report(reportConfiguration40);
        org.apache.rat.license.LicenseSetFactory.LicenseFilter licenseFilter42 = org.apache.rat.license.LicenseSetFactory.LicenseFilter.all;
        org.apache.rat.Reporter.listLicenses(reportConfiguration40, licenseFilter42);
        org.apache.rat.Reporter.listLicenses(reportConfiguration33, licenseFilter42);
        org.apache.rat.Reporter.listLicenses(reportConfiguration20, licenseFilter42);
        org.apache.rat.utils.Log log46 = null;
        org.apache.rat.ReportConfiguration reportConfiguration47 = new org.apache.rat.ReportConfiguration(log46);
        org.apache.commons.io.function.IOSupplier<java.io.OutputStream> outputStreamIOSupplier48 = reportConfiguration47.getOutput();
        reportConfiguration20.setOut(outputStreamIOSupplier48);
        org.apache.rat.utils.Log log50 = null;
        org.apache.rat.ReportConfiguration reportConfiguration51 = new org.apache.rat.ReportConfiguration(log50);
        org.apache.commons.io.function.IOSupplier<java.io.OutputStream> outputStreamIOSupplier52 = reportConfiguration51.getOutput();
        reportConfiguration20.setOut(outputStreamIOSupplier52);
        boolean boolean54 = strSet16.equals((java.lang.Object) outputStreamIOSupplier52);
        reportConfiguration1.removeApprovedLicenseCategories((java.util.Collection<java.lang.String>) strSet16);
        int int56 = strSet16.size();
        org.apache.rat.utils.DefaultLog defaultLog57 = org.apache.rat.utils.DefaultLog.INSTANCE;
        org.apache.rat.license.ILicense.Builder builder58 = org.apache.rat.license.ILicense.builder();
        org.apache.rat.license.ILicense.Builder builder60 = builder58.setLicenseFamilyCategory("");
        org.apache.rat.analysis.matchers.CopyrightMatcher copyrightMatcher64 = new org.apache.rat.analysis.matchers.CopyrightMatcher("", "GPL1 ", "hi!");
        org.apache.rat.analysis.IHeaderMatcher.State state65 = copyrightMatcher64.finalizeState();
        org.apache.rat.license.ILicense.Builder builder66 = builder60.setMatcher((org.apache.rat.analysis.IHeaderMatcher) copyrightMatcher64);
        org.apache.rat.license.ILicense.Builder builder68 = builder66.setLicenseFamilyCategory("");
        defaultLog57.error((java.lang.Object) builder68);
        org.apache.rat.utils.Log.Level level70 = org.apache.rat.utils.Log.Level.INFO;
        defaultLog57.log(level70, "JAVA");
        org.apache.rat.utils.ReportingSet<java.lang.String> strSet73 = strSet16.setLog((org.apache.rat.utils.Log) defaultLog57);
        org.apache.rat.ReportConfiguration reportConfiguration74 = new org.apache.rat.ReportConfiguration((org.apache.rat.utils.Log) defaultLog57);
        java.util.regex.Pattern pattern77 = null;
        org.apache.rat.analysis.matchers.SimpleRegexMatcher simpleRegexMatcher78 = new org.apache.rat.analysis.matchers.SimpleRegexMatcher("", pattern77);
        simpleRegexMatcher78.reset();
        java.lang.String str80 = simpleRegexMatcher78.getId();
        org.apache.rat.analysis.matchers.NotMatcher notMatcher81 = new org.apache.rat.analysis.matchers.NotMatcher((org.apache.rat.analysis.IHeaderMatcher) simpleRegexMatcher78);
        org.apache.rat.analysis.matchers.NotMatcher notMatcher82 = new org.apache.rat.analysis.matchers.NotMatcher("GNU General Public License, version 1", (org.apache.rat.analysis.IHeaderMatcher) simpleRegexMatcher78);
        notMatcher82.reset();
        notMatcher82.reset();
        java.lang.String str85 = notMatcher82.getId();
        defaultLog57.warn((java.lang.Object) str85);
        org.apache.rat.ReportConfiguration reportConfiguration87 = new org.apache.rat.ReportConfiguration((org.apache.rat.utils.Log) defaultLog57);
        org.junit.Assert.assertNull(filenameFilter2);
        org.junit.Assert.assertTrue("'" + licenseFilter3 + "' != '" + org.apache.rat.license.LicenseSetFactory.LicenseFilter.all + "'", licenseFilter3.equals(org.apache.rat.license.LicenseSetFactory.LicenseFilter.all));
        org.junit.Assert.assertNotNull(iLicenseSet4);
        org.junit.Assert.assertTrue("'" + addLicenseHeaders5 + "' != '" + org.apache.rat.config.AddLicenseHeaders.FALSE + "'", addLicenseHeaders5.equals(org.apache.rat.config.AddLicenseHeaders.FALSE));
        org.junit.Assert.assertNull(claimStatistic9);
        org.junit.Assert.assertTrue("'" + licenseFilter10 + "' != '" + org.apache.rat.license.LicenseSetFactory.LicenseFilter.all + "'", licenseFilter10.equals(org.apache.rat.license.LicenseSetFactory.LicenseFilter.all));
        org.junit.Assert.assertNull(str15);
        org.junit.Assert.assertNotNull(strSet18);
        org.junit.Assert.assertNull(filenameFilter21);
        org.junit.Assert.assertTrue("'" + licenseFilter22 + "' != '" + org.apache.rat.license.LicenseSetFactory.LicenseFilter.all + "'", licenseFilter22.equals(org.apache.rat.license.LicenseSetFactory.LicenseFilter.all));
        org.junit.Assert.assertNotNull(iLicenseSet23);
        org.junit.Assert.assertTrue("'" + addLicenseHeaders24 + "' != '" + org.apache.rat.config.AddLicenseHeaders.FALSE + "'", addLicenseHeaders24.equals(org.apache.rat.config.AddLicenseHeaders.FALSE));
        org.junit.Assert.assertNull(claimStatistic28);
        org.junit.Assert.assertTrue("'" + licenseFilter29 + "' != '" + org.apache.rat.license.LicenseSetFactory.LicenseFilter.all + "'", licenseFilter29.equals(org.apache.rat.license.LicenseSetFactory.LicenseFilter.all));
        org.junit.Assert.assertNull(filenameFilter34);
        org.junit.Assert.assertTrue("'" + licenseFilter35 + "' != '" + org.apache.rat.license.LicenseSetFactory.LicenseFilter.all + "'", licenseFilter35.equals(org.apache.rat.license.LicenseSetFactory.LicenseFilter.all));
        org.junit.Assert.assertNotNull(iLicenseSet36);
        org.junit.Assert.assertTrue("'" + addLicenseHeaders37 + "' != '" + org.apache.rat.config.AddLicenseHeaders.FALSE + "'", addLicenseHeaders37.equals(org.apache.rat.config.AddLicenseHeaders.FALSE));
        org.junit.Assert.assertNull(claimStatistic41);
        org.junit.Assert.assertTrue("'" + licenseFilter42 + "' != '" + org.apache.rat.license.LicenseSetFactory.LicenseFilter.all + "'", licenseFilter42.equals(org.apache.rat.license.LicenseSetFactory.LicenseFilter.all));
        org.junit.Assert.assertNotNull(outputStreamIOSupplier48);
        org.junit.Assert.assertNotNull(outputStreamIOSupplier52);
        org.junit.Assert.assertTrue("'" + boolean54 + "' != '" + false + "'", boolean54 == false);
        org.junit.Assert.assertTrue("'" + int56 + "' != '" + 0 + "'", int56 == 0);
        org.junit.Assert.assertNotNull(defaultLog57);
        org.junit.Assert.assertNotNull(builder58);
        org.junit.Assert.assertNotNull(builder60);
        org.junit.Assert.assertTrue("'" + state65 + "' != '" + org.apache.rat.analysis.IHeaderMatcher.State.f + "'", state65.equals(org.apache.rat.analysis.IHeaderMatcher.State.f));
        org.junit.Assert.assertNotNull(builder66);
        org.junit.Assert.assertNotNull(builder68);
        org.junit.Assert.assertTrue("'" + level70 + "' != '" + org.apache.rat.utils.Log.Level.INFO + "'", level70.equals(org.apache.rat.utils.Log.Level.INFO));
        org.junit.Assert.assertNotNull(strSet73);
// flaky:         org.junit.Assert.assertEquals("'" + str80 + "' != '" + "6a8ef05f-f2b2-4cb5-b520-1fd3d1f6a782" + "'", str80, "6a8ef05f-f2b2-4cb5-b520-1fd3d1f6a782");
        org.junit.Assert.assertEquals("'" + str85 + "' != '" + "GNU General Public License, version 1" + "'", str85, "GNU General Public License, version 1");
    }

    @Test
    public void test12847() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest25.test12847");
        org.apache.rat.utils.Log log0 = null;
        org.apache.rat.ReportConfiguration reportConfiguration1 = new org.apache.rat.ReportConfiguration(log0);
        org.apache.commons.io.function.IOSupplier<java.io.OutputStream> outputStreamIOSupplier2 = reportConfiguration1.getOutput();
        org.apache.commons.io.filefilter.IOFileFilter iOFileFilter3 = reportConfiguration1.getDirectoryFilter();
        org.apache.rat.utils.Log log4 = null;
        org.apache.rat.ReportConfiguration reportConfiguration5 = new org.apache.rat.ReportConfiguration(log4);
        reportConfiguration5.addApprovedLicenseCategory(".cvsignore");
        org.apache.rat.utils.Log log8 = null;
        org.apache.rat.ReportConfiguration reportConfiguration9 = new org.apache.rat.ReportConfiguration(log8);
        java.io.FilenameFilter filenameFilter10 = reportConfiguration9.getInputFileFilter();
        org.apache.rat.license.LicenseSetFactory.LicenseFilter licenseFilter11 = org.apache.rat.license.LicenseSetFactory.LicenseFilter.all;
        java.util.SortedSet<org.apache.rat.license.ILicense> iLicenseSet12 = reportConfiguration9.getLicenses(licenseFilter11);
        reportConfiguration5.addLicensesIfNotPresent((java.util.Collection<org.apache.rat.license.ILicense>) iLicenseSet12);
        java.io.FilenameFilter filenameFilter14 = reportConfiguration5.getInputFileFilter();
        org.apache.rat.utils.Log log15 = null;
        org.apache.rat.ReportConfiguration reportConfiguration16 = new org.apache.rat.ReportConfiguration(log15);
        java.io.FilenameFilter filenameFilter17 = reportConfiguration16.getInputFileFilter();
        org.apache.rat.license.LicenseSetFactory.LicenseFilter licenseFilter18 = org.apache.rat.license.LicenseSetFactory.LicenseFilter.all;
        java.util.SortedSet<org.apache.rat.license.ILicense> iLicenseSet19 = reportConfiguration16.getLicenses(licenseFilter18);
        org.apache.rat.config.AddLicenseHeaders addLicenseHeaders20 = org.apache.rat.config.AddLicenseHeaders.FALSE;
        reportConfiguration16.setAddLicenseHeaders(addLicenseHeaders20);
        org.apache.rat.utils.Log log22 = null;
        org.apache.rat.ReportConfiguration reportConfiguration23 = new org.apache.rat.ReportConfiguration(log22);
        org.apache.rat.report.claim.ClaimStatistic claimStatistic24 = org.apache.rat.Reporter.report(reportConfiguration23);
        org.apache.rat.license.LicenseSetFactory.LicenseFilter licenseFilter25 = org.apache.rat.license.LicenseSetFactory.LicenseFilter.all;
        org.apache.rat.Reporter.listLicenses(reportConfiguration23, licenseFilter25);
        org.apache.rat.Reporter.listLicenses(reportConfiguration16, licenseFilter25);
        org.apache.rat.utils.Log log28 = null;
        org.apache.rat.ReportConfiguration reportConfiguration29 = new org.apache.rat.ReportConfiguration(log28);
        java.io.FilenameFilter filenameFilter30 = reportConfiguration29.getInputFileFilter();
        org.apache.rat.license.LicenseSetFactory.LicenseFilter licenseFilter31 = org.apache.rat.license.LicenseSetFactory.LicenseFilter.all;
        java.util.SortedSet<org.apache.rat.license.ILicense> iLicenseSet32 = reportConfiguration29.getLicenses(licenseFilter31);
        org.apache.rat.config.AddLicenseHeaders addLicenseHeaders33 = org.apache.rat.config.AddLicenseHeaders.FALSE;
        reportConfiguration29.setAddLicenseHeaders(addLicenseHeaders33);
        org.apache.rat.utils.Log log35 = null;
        org.apache.rat.ReportConfiguration reportConfiguration36 = new org.apache.rat.ReportConfiguration(log35);
        org.apache.rat.report.claim.ClaimStatistic claimStatistic37 = org.apache.rat.Reporter.report(reportConfiguration36);
        org.apache.rat.license.LicenseSetFactory.LicenseFilter licenseFilter38 = org.apache.rat.license.LicenseSetFactory.LicenseFilter.all;
        org.apache.rat.Reporter.listLicenses(reportConfiguration36, licenseFilter38);
        org.apache.rat.Reporter.listLicenses(reportConfiguration29, licenseFilter38);
        java.util.SortedSet<org.apache.rat.license.ILicenseFamily> iLicenseFamilySet41 = reportConfiguration16.getLicenseFamilies(licenseFilter38);
        org.apache.rat.Reporter.listLicenseFamilies(reportConfiguration5, licenseFilter38);
        java.util.SortedSet<org.apache.rat.license.ILicenseFamily> iLicenseFamilySet43 = reportConfiguration1.getLicenseFamilies(licenseFilter38);
        org.apache.rat.policy.DefaultPolicy defaultPolicy44 = new org.apache.rat.policy.DefaultPolicy((java.util.Collection<org.apache.rat.license.ILicenseFamily>) iLicenseFamilySet43);
        org.apache.rat.api.Document document45 = null;
        defaultPolicy44.analyse(document45);
        org.apache.rat.api.Document document47 = null;
        defaultPolicy44.analyse(document47);
        org.apache.rat.utils.Log log49 = null;
        org.apache.rat.ReportConfiguration reportConfiguration50 = new org.apache.rat.ReportConfiguration(log49);
        org.apache.rat.report.claim.ClaimStatistic claimStatistic51 = org.apache.rat.Reporter.report(reportConfiguration50);
        org.apache.commons.io.function.IOSupplier<java.io.OutputStream> outputStreamIOSupplier52 = reportConfiguration50.getOutput();
        org.apache.rat.license.ILicense iLicense53 = null;
        reportConfiguration50.addLicense(iLicense53);
        org.apache.rat.Defaults.Builder builder55 = org.apache.rat.Defaults.builder();
        org.apache.rat.Defaults defaults56 = builder55.build();
        reportConfiguration50.setFrom(defaults56);
        org.apache.rat.utils.Log log58 = null;
        org.apache.rat.ReportConfiguration reportConfiguration59 = new org.apache.rat.ReportConfiguration(log58);
        org.apache.rat.license.ILicenseFamily[] iLicenseFamilyArray60 = new org.apache.rat.license.ILicenseFamily[] {};
        java.util.ArrayList<org.apache.rat.license.ILicenseFamily> iLicenseFamilyList61 = new java.util.ArrayList<org.apache.rat.license.ILicenseFamily>();
        boolean boolean62 = java.util.Collections.addAll((java.util.Collection<org.apache.rat.license.ILicenseFamily>) iLicenseFamilyList61, iLicenseFamilyArray60);
        reportConfiguration59.addFamilies((java.util.Collection<org.apache.rat.license.ILicenseFamily>) iLicenseFamilyList61);
        org.apache.rat.analysis.license.FullTextMatchingLicense fullTextMatchingLicense64 = new org.apache.rat.analysis.license.FullTextMatchingLicense();
        fullTextMatchingLicense64.setLicenseFamilyName("hi!");
        java.lang.String str67 = fullTextMatchingLicense64.getLicenseFamilyCategory();
        java.lang.String str68 = fullTextMatchingLicense64.getLicenseFamilyName();
        fullTextMatchingLicense64.setLicenseFamilyName("SpdxBuilder: null");
        fullTextMatchingLicense64.setLicenseFamilyCategory("TMF");
        org.apache.rat.license.ILicenseFamily iLicenseFamily73 = fullTextMatchingLicense64.getLicenseFamily();
        reportConfiguration59.addFamily(iLicenseFamily73);
        java.lang.String str75 = iLicenseFamily73.getFamilyName();
        java.lang.String str76 = iLicenseFamily73.getFamilyName();
        reportConfiguration50.addApprovedLicenseCategory(iLicenseFamily73);
        java.lang.String str78 = iLicenseFamily73.getFamilyName();
        defaultPolicy44.add(iLicenseFamily73);
        org.junit.Assert.assertNotNull(outputStreamIOSupplier2);
        org.junit.Assert.assertNotNull(iOFileFilter3);
        org.junit.Assert.assertNull(filenameFilter10);
        org.junit.Assert.assertTrue("'" + licenseFilter11 + "' != '" + org.apache.rat.license.LicenseSetFactory.LicenseFilter.all + "'", licenseFilter11.equals(org.apache.rat.license.LicenseSetFactory.LicenseFilter.all));
        org.junit.Assert.assertNotNull(iLicenseSet12);
        org.junit.Assert.assertNull(filenameFilter14);
        org.junit.Assert.assertNull(filenameFilter17);
        org.junit.Assert.assertTrue("'" + licenseFilter18 + "' != '" + org.apache.rat.license.LicenseSetFactory.LicenseFilter.all + "'", licenseFilter18.equals(org.apache.rat.license.LicenseSetFactory.LicenseFilter.all));
        org.junit.Assert.assertNotNull(iLicenseSet19);
        org.junit.Assert.assertTrue("'" + addLicenseHeaders20 + "' != '" + org.apache.rat.config.AddLicenseHeaders.FALSE + "'", addLicenseHeaders20.equals(org.apache.rat.config.AddLicenseHeaders.FALSE));
        org.junit.Assert.assertNull(claimStatistic24);
        org.junit.Assert.assertTrue("'" + licenseFilter25 + "' != '" + org.apache.rat.license.LicenseSetFactory.LicenseFilter.all + "'", licenseFilter25.equals(org.apache.rat.license.LicenseSetFactory.LicenseFilter.all));
        org.junit.Assert.assertNull(filenameFilter30);
        org.junit.Assert.assertTrue("'" + licenseFilter31 + "' != '" + org.apache.rat.license.LicenseSetFactory.LicenseFilter.all + "'", licenseFilter31.equals(org.apache.rat.license.LicenseSetFactory.LicenseFilter.all));
        org.junit.Assert.assertNotNull(iLicenseSet32);
        org.junit.Assert.assertTrue("'" + addLicenseHeaders33 + "' != '" + org.apache.rat.config.AddLicenseHeaders.FALSE + "'", addLicenseHeaders33.equals(org.apache.rat.config.AddLicenseHeaders.FALSE));
        org.junit.Assert.assertNull(claimStatistic37);
        org.junit.Assert.assertTrue("'" + licenseFilter38 + "' != '" + org.apache.rat.license.LicenseSetFactory.LicenseFilter.all + "'", licenseFilter38.equals(org.apache.rat.license.LicenseSetFactory.LicenseFilter.all));
        org.junit.Assert.assertNotNull(iLicenseFamilySet41);
        org.junit.Assert.assertNotNull(iLicenseFamilySet43);
        org.junit.Assert.assertNull(claimStatistic51);
        org.junit.Assert.assertNotNull(outputStreamIOSupplier52);
        org.junit.Assert.assertNotNull(builder55);
        org.junit.Assert.assertNotNull(defaults56);
        org.junit.Assert.assertNotNull(iLicenseFamilyArray60);
        org.junit.Assert.assertTrue("'" + boolean62 + "' != '" + false + "'", boolean62 == false);
        org.junit.Assert.assertNull(str67);
        org.junit.Assert.assertEquals("'" + str68 + "' != '" + "hi!" + "'", str68, "hi!");
        org.junit.Assert.assertNotNull(iLicenseFamily73);
        org.junit.Assert.assertEquals("'" + str75 + "' != '" + "SpdxBuilder: null" + "'", str75, "SpdxBuilder: null");
        org.junit.Assert.assertEquals("'" + str76 + "' != '" + "SpdxBuilder: null" + "'", str76, "SpdxBuilder: null");
        org.junit.Assert.assertEquals("'" + str78 + "' != '" + "SpdxBuilder: null" + "'", str78, "SpdxBuilder: null");
    }

    @Test
    public void test12848() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest25.test12848");
        org.apache.rat.analysis.matchers.CopyrightMatcher copyrightMatcher4 = new org.apache.rat.analysis.matchers.CopyrightMatcher("binary", "GPL1 ", "Modified BSD License");
        org.apache.rat.analysis.IHeaderMatcher.State state5 = copyrightMatcher4.currentState();
        org.apache.rat.analysis.matchers.NotMatcher notMatcher6 = new org.apache.rat.analysis.matchers.NotMatcher("stand", (org.apache.rat.analysis.IHeaderMatcher) copyrightMatcher4);
        org.apache.rat.analysis.IHeaderMatcher.State state8 = notMatcher6.matches("");
        org.junit.Assert.assertTrue("'" + state5 + "' != '" + org.apache.rat.analysis.IHeaderMatcher.State.i + "'", state5.equals(org.apache.rat.analysis.IHeaderMatcher.State.i));
        org.junit.Assert.assertTrue("'" + state8 + "' != '" + org.apache.rat.analysis.IHeaderMatcher.State.i + "'", state8.equals(org.apache.rat.analysis.IHeaderMatcher.State.i));
    }

    @Test
    public void test12849() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest25.test12849");
        org.apache.rat.analysis.matchers.SimpleTextMatcher simpleTextMatcher1 = new org.apache.rat.analysis.matchers.SimpleTextMatcher("09515");
    }

    @Test
    public void test12850() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest25.test12850");
        org.apache.rat.configuration.builders.RegexBuilder regexBuilder0 = new org.apache.rat.configuration.builders.RegexBuilder();
        java.lang.String str1 = regexBuilder0.toString();
        org.apache.rat.configuration.builders.RegexBuilder regexBuilder3 = regexBuilder0.setExpr("GNU General Public License, version 1");
        org.apache.rat.analysis.IHeaderMatcher iHeaderMatcher4 = regexBuilder3.build();
        org.apache.rat.analysis.IHeaderMatcher iHeaderMatcher5 = regexBuilder3.build();
        org.apache.rat.configuration.builders.RegexBuilder regexBuilder7 = regexBuilder3.setExpr("d0774232cdef4507a8b6ac22a273dde3");
        java.lang.String str8 = regexBuilder7.toString();
        org.junit.Assert.assertEquals("'" + str1 + "' != '" + "RegexBuilder: null" + "'", str1, "RegexBuilder: null");
        org.junit.Assert.assertNotNull(regexBuilder3);
        org.junit.Assert.assertNotNull(iHeaderMatcher4);
        org.junit.Assert.assertNotNull(iHeaderMatcher5);
        org.junit.Assert.assertNotNull(regexBuilder7);
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "RegexBuilder: d0774232cdef4507a8b6ac22a273dde3" + "'", str8, "RegexBuilder: d0774232cdef4507a8b6ac22a273dde3");
    }

    @Test
    public void test12851() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest25.test12851");
        org.apache.rat.utils.DefaultLog defaultLog0 = org.apache.rat.utils.DefaultLog.INSTANCE;
        defaultLog0.info((java.lang.Object) "Modified BSD License");
        org.apache.rat.annotation.ApacheV2LicenseAppender apacheV2LicenseAppender4 = new org.apache.rat.annotation.ApacheV2LicenseAppender((org.apache.rat.utils.Log) defaultLog0, "W3CD ");
        org.apache.rat.report.claim.ClaimStatistic claimStatistic5 = new org.apache.rat.report.claim.ClaimStatistic();
        claimStatistic5.setNumApproved((int) (short) 10);
        claimStatistic5.setNumUnknown((int) '#');
        int int10 = claimStatistic5.getNumUnApproved();
        java.util.Map<java.lang.String, java.lang.Integer> strMap11 = claimStatistic5.getLicenseFileCodeMap();
        java.util.Map<java.lang.String, java.lang.Integer> strMap12 = null;
        claimStatistic5.setLicenseFileCodeMap(strMap12);
        java.util.Map<java.lang.String, java.lang.Integer> strMap14 = null;
        claimStatistic5.setLicenseFileCodeMap(strMap14);
        defaultLog0.error((java.lang.Object) strMap14);
        org.apache.rat.utils.Log.Level level17 = defaultLog0.getLevel();
        org.apache.rat.ReportConfiguration reportConfiguration18 = new org.apache.rat.ReportConfiguration((org.apache.rat.utils.Log) defaultLog0);
        java.io.FilenameFilter filenameFilter19 = reportConfiguration18.getInputFileFilter();
        java.util.function.Consumer<java.lang.String> strConsumer20 = null;
        // The following exception was thrown during execution in test generation
        try {
            reportConfiguration18.validate(strConsumer20);
            org.junit.Assert.fail("Expected exception of type org.apache.rat.ConfigurationException; message: Reportable may not be null");
        } catch (org.apache.rat.ConfigurationException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(defaultLog0);
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + 0 + "'", int10 == 0);
        org.junit.Assert.assertNull(strMap11);
        org.junit.Assert.assertTrue("'" + level17 + "' != '" + org.apache.rat.utils.Log.Level.ERROR + "'", level17.equals(org.apache.rat.utils.Log.Level.ERROR));
        org.junit.Assert.assertNull(filenameFilter19);
    }

    @Test
    public void test12852() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest25.test12852");
        org.apache.rat.utils.Log log0 = null;
        org.apache.rat.ReportConfiguration reportConfiguration1 = new org.apache.rat.ReportConfiguration(log0);
        org.apache.commons.io.function.IOSupplier<java.io.OutputStream> outputStreamIOSupplier2 = reportConfiguration1.getOutput();
        reportConfiguration1.setCopyrightMessage("MANIFEST.MF");
        boolean boolean5 = reportConfiguration1.isAddingLicensesForced();
        java.net.URL uRL6 = null;
        // The following exception was thrown during execution in test generation
        try {
            reportConfiguration1.setStyleSheet(uRL6);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: styleSheet file should not be null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(outputStreamIOSupplier2);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
    }

    @Test
    public void test12853() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest25.test12853");
        org.apache.rat.utils.Log log0 = null;
        org.apache.rat.ReportConfiguration reportConfiguration1 = new org.apache.rat.ReportConfiguration(log0);
        reportConfiguration1.addApprovedLicenseCategory(".cvsignore");
        org.apache.rat.utils.Log log4 = null;
        org.apache.rat.ReportConfiguration reportConfiguration5 = new org.apache.rat.ReportConfiguration(log4);
        java.io.FilenameFilter filenameFilter6 = reportConfiguration5.getInputFileFilter();
        org.apache.rat.license.LicenseSetFactory.LicenseFilter licenseFilter7 = org.apache.rat.license.LicenseSetFactory.LicenseFilter.all;
        java.util.SortedSet<org.apache.rat.license.ILicense> iLicenseSet8 = reportConfiguration5.getLicenses(licenseFilter7);
        reportConfiguration1.addLicensesIfNotPresent((java.util.Collection<org.apache.rat.license.ILicense>) iLicenseSet8);
        reportConfiguration1.setCopyrightMessage("MathcerRefBuilder: null");
        boolean boolean12 = reportConfiguration1.isAddingLicenses();
        java.io.FilenameFilter filenameFilter13 = reportConfiguration1.getInputFileFilter();
        org.junit.Assert.assertNull(filenameFilter6);
        org.junit.Assert.assertTrue("'" + licenseFilter7 + "' != '" + org.apache.rat.license.LicenseSetFactory.LicenseFilter.all + "'", licenseFilter7.equals(org.apache.rat.license.LicenseSetFactory.LicenseFilter.all));
        org.junit.Assert.assertNotNull(iLicenseSet8);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertNull(filenameFilter13);
    }

    @Test
    public void test12854() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest25.test12854");
        org.apache.rat.analysis.matchers.FullTextMatcher fullTextMatcher2 = new org.apache.rat.analysis.matchers.FullTextMatcher("Datum [ name ='http://org/apache/rat/meta-data#LicenseFamilyCategory',value ='OASIS ']", "hi!");
        boolean boolean4 = fullTextMatcher2.doMatch("RegexBuilder: archive W3CD ");
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + true + "'", boolean4 == true);
    }

    @Test
    public void test12855() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest25.test12855");
        org.apache.rat.report.claim.ClaimStatistic claimStatistic0 = new org.apache.rat.report.claim.ClaimStatistic();
        claimStatistic0.setNumApproved((int) (short) 10);
        java.util.Map<java.lang.String, java.lang.Integer> strMap3 = claimStatistic0.getLicenseFileNameMap();
        java.util.Map<java.lang.String, java.lang.Integer> strMap4 = null;
        claimStatistic0.setLicenseFileCodeMap(strMap4);
        java.util.Map<java.lang.String, java.lang.Integer> strMap6 = null;
        claimStatistic0.setLicenseFileNameMap(strMap6);
        java.util.Map<java.lang.String, java.lang.Integer> strMap8 = null;
        claimStatistic0.setDocumentCategoryMap(strMap8);
        java.util.Map<java.lang.String, java.lang.Integer> strMap10 = claimStatistic0.getLicenseFileCodeMap();
        claimStatistic0.setNumGenerated(32);
        org.junit.Assert.assertNull(strMap3);
        org.junit.Assert.assertNull(strMap10);
    }

    @Test
    public void test12856() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest25.test12856");
        boolean boolean1 = org.apache.rat.document.impl.guesser.BinaryGuesser.isExecutable("cf5c3ee0-4d50-40a4-b469-e637f1a21514");
        org.junit.Assert.assertTrue("'" + boolean1 + "' != '" + false + "'", boolean1 == false);
    }

    @Test
    public void test12857() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest25.test12857");
        org.apache.rat.utils.Log log0 = null;
        org.apache.rat.ReportConfiguration reportConfiguration1 = new org.apache.rat.ReportConfiguration(log0);
        org.apache.rat.report.claim.ClaimStatistic claimStatistic2 = org.apache.rat.Reporter.report(reportConfiguration1);
        org.apache.rat.utils.Log log3 = null;
        org.apache.rat.ReportConfiguration reportConfiguration4 = new org.apache.rat.ReportConfiguration(log3);
        org.apache.rat.report.claim.ClaimStatistic claimStatistic5 = org.apache.rat.Reporter.report(reportConfiguration4);
        org.apache.rat.utils.ReportingSet.Options options6 = org.apache.rat.utils.ReportingSet.Options.OVERWRITE;
        reportConfiguration4.licenseDuplicateOption(options6);
        reportConfiguration1.familyDuplicateOption(options6);
        org.apache.commons.io.function.IOSupplier<java.io.PrintWriter> printWriterIOSupplier9 = reportConfiguration1.getWriter();
        boolean boolean10 = reportConfiguration1.isAddingLicensesForced();
        java.io.FilenameFilter filenameFilter11 = reportConfiguration1.getInputFileFilter();
        java.io.FilenameFilter filenameFilter12 = reportConfiguration1.getInputFileFilter();
        boolean boolean13 = reportConfiguration1.isStyleReport();
        org.apache.rat.utils.Log log14 = reportConfiguration1.getLog();
        org.apache.commons.io.filefilter.IOFileFilter iOFileFilter15 = reportConfiguration1.getDirectoryFilter();
        java.util.SortedSet<java.lang.String> strSet16 = reportConfiguration1.getApprovedLicenseCategories();
        org.apache.commons.io.function.IOSupplier<java.io.OutputStream> outputStreamIOSupplier17 = reportConfiguration1.getOutput();
        org.apache.rat.license.ILicenseFamily[] iLicenseFamilyArray18 = new org.apache.rat.license.ILicenseFamily[] {};
        java.util.ArrayList<org.apache.rat.license.ILicenseFamily> iLicenseFamilyList19 = new java.util.ArrayList<org.apache.rat.license.ILicenseFamily>();
        boolean boolean20 = java.util.Collections.addAll((java.util.Collection<org.apache.rat.license.ILicenseFamily>) iLicenseFamilyList19, iLicenseFamilyArray18);
        org.apache.rat.policy.DefaultPolicy defaultPolicy21 = new org.apache.rat.policy.DefaultPolicy((java.util.Collection<org.apache.rat.license.ILicenseFamily>) iLicenseFamilyList19);
        org.apache.rat.api.Document document22 = null;
        defaultPolicy21.analyse(document22);
        java.util.SortedSet<org.apache.rat.license.ILicenseFamily> iLicenseFamilySet24 = defaultPolicy21.getApprovedLicenseNames();
        org.apache.rat.api.Document document25 = null;
        defaultPolicy21.analyse(document25);
        org.apache.rat.api.Document document27 = null;
        defaultPolicy21.analyse(document27);
        org.apache.rat.api.Document document29 = null;
        defaultPolicy21.analyse(document29);
        org.apache.rat.utils.Log log31 = null;
        org.apache.rat.ReportConfiguration reportConfiguration32 = new org.apache.rat.ReportConfiguration(log31);
        org.apache.rat.report.claim.ClaimStatistic claimStatistic33 = org.apache.rat.Reporter.report(reportConfiguration32);
        org.apache.commons.io.function.IOSupplier<java.io.OutputStream> outputStreamIOSupplier34 = reportConfiguration32.getOutput();
        org.apache.rat.license.ILicense iLicense35 = null;
        reportConfiguration32.addLicense(iLicense35);
        org.apache.rat.Defaults.Builder builder37 = org.apache.rat.Defaults.builder();
        org.apache.rat.Defaults defaults38 = builder37.build();
        reportConfiguration32.setFrom(defaults38);
        org.apache.rat.utils.Log log40 = null;
        org.apache.rat.ReportConfiguration reportConfiguration41 = new org.apache.rat.ReportConfiguration(log40);
        org.apache.rat.license.ILicenseFamily[] iLicenseFamilyArray42 = new org.apache.rat.license.ILicenseFamily[] {};
        java.util.ArrayList<org.apache.rat.license.ILicenseFamily> iLicenseFamilyList43 = new java.util.ArrayList<org.apache.rat.license.ILicenseFamily>();
        boolean boolean44 = java.util.Collections.addAll((java.util.Collection<org.apache.rat.license.ILicenseFamily>) iLicenseFamilyList43, iLicenseFamilyArray42);
        reportConfiguration41.addFamilies((java.util.Collection<org.apache.rat.license.ILicenseFamily>) iLicenseFamilyList43);
        org.apache.rat.analysis.license.FullTextMatchingLicense fullTextMatchingLicense46 = new org.apache.rat.analysis.license.FullTextMatchingLicense();
        fullTextMatchingLicense46.setLicenseFamilyName("hi!");
        java.lang.String str49 = fullTextMatchingLicense46.getLicenseFamilyCategory();
        java.lang.String str50 = fullTextMatchingLicense46.getLicenseFamilyName();
        fullTextMatchingLicense46.setLicenseFamilyName("SpdxBuilder: null");
        fullTextMatchingLicense46.setLicenseFamilyCategory("TMF");
        org.apache.rat.license.ILicenseFamily iLicenseFamily55 = fullTextMatchingLicense46.getLicenseFamily();
        reportConfiguration41.addFamily(iLicenseFamily55);
        java.lang.String str57 = iLicenseFamily55.getFamilyName();
        java.lang.String str58 = iLicenseFamily55.getFamilyName();
        reportConfiguration32.addApprovedLicenseCategory(iLicenseFamily55);
        defaultPolicy21.add(iLicenseFamily55);
        reportConfiguration1.addFamily(iLicenseFamily55);
        org.apache.rat.utils.Log log62 = null;
        org.apache.rat.ReportConfiguration reportConfiguration63 = new org.apache.rat.ReportConfiguration(log62);
        java.io.FilenameFilter filenameFilter64 = reportConfiguration63.getInputFileFilter();
        org.apache.rat.license.ILicense iLicense65 = null;
        reportConfiguration63.addLicense(iLicense65);
        org.apache.rat.utils.Log log67 = null;
        org.apache.rat.ReportConfiguration reportConfiguration68 = new org.apache.rat.ReportConfiguration(log67);
        java.io.FilenameFilter filenameFilter69 = reportConfiguration68.getInputFileFilter();
        boolean boolean70 = reportConfiguration68.isStyleReport();
        org.apache.commons.io.function.IOSupplier<java.io.OutputStream> outputStreamIOSupplier71 = reportConfiguration68.getOutput();
        reportConfiguration63.setOut(outputStreamIOSupplier71);
        org.apache.commons.io.function.IOSupplier<java.io.InputStream> inputStreamIOSupplier73 = reportConfiguration63.getStyleSheet();
        org.apache.rat.utils.DefaultLog defaultLog74 = org.apache.rat.utils.DefaultLog.INSTANCE;
        defaultLog74.info((java.lang.Object) "Modified BSD License");
        org.apache.rat.annotation.ApacheV2LicenseAppender apacheV2LicenseAppender78 = new org.apache.rat.annotation.ApacheV2LicenseAppender((org.apache.rat.utils.Log) defaultLog74, "8ecb8cce-06e4-400f-84d9-ad1cf6289fda");
        org.apache.rat.license.ILicenseFamilyBuilder iLicenseFamilyBuilder79 = new org.apache.rat.license.ILicenseFamilyBuilder();
        java.lang.String str80 = iLicenseFamilyBuilder79.getCategory();
        org.apache.rat.license.ILicenseFamily.Builder builder82 = iLicenseFamilyBuilder79.setLicenseFamilyCategory("false");
        java.lang.String str83 = iLicenseFamilyBuilder79.getCategory();
        org.apache.rat.license.ILicenseFamily.Builder builder85 = iLicenseFamilyBuilder79.setLicenseFamilyCategory("GPL3 ");
        org.apache.rat.license.ILicenseFamily.Builder builder87 = builder85.setLicenseFamilyCategory("33ac78df-d24f-43c9-beeb-83abf1fa7aa0");
        defaultLog74.warn((java.lang.Object) builder87);
        org.apache.rat.license.ILicenseFamily.Builder builder90 = builder87.setLicenseFamilyName("MathcerRefBuilder: http:");
        org.apache.rat.license.ILicenseFamily iLicenseFamily91 = builder87.build();
        reportConfiguration63.addFamily(iLicenseFamily91);
        int int93 = iLicenseFamily55.compareTo(iLicenseFamily91);
        java.lang.String str94 = iLicenseFamily55.getFamilyCategory();
        org.junit.Assert.assertNull(claimStatistic2);
        org.junit.Assert.assertNull(claimStatistic5);
        org.junit.Assert.assertTrue("'" + options6 + "' != '" + org.apache.rat.utils.ReportingSet.Options.OVERWRITE + "'", options6.equals(org.apache.rat.utils.ReportingSet.Options.OVERWRITE));
        org.junit.Assert.assertNotNull(printWriterIOSupplier9);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertNull(filenameFilter11);
        org.junit.Assert.assertNull(filenameFilter12);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + true + "'", boolean13 == true);
        org.junit.Assert.assertNull(log14);
        org.junit.Assert.assertNotNull(iOFileFilter15);
        org.junit.Assert.assertNotNull(strSet16);
        org.junit.Assert.assertNotNull(outputStreamIOSupplier17);
        org.junit.Assert.assertNotNull(iLicenseFamilyArray18);
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + false + "'", boolean20 == false);
        org.junit.Assert.assertNotNull(iLicenseFamilySet24);
        org.junit.Assert.assertNull(claimStatistic33);
        org.junit.Assert.assertNotNull(outputStreamIOSupplier34);
        org.junit.Assert.assertNotNull(builder37);
        org.junit.Assert.assertNotNull(defaults38);
        org.junit.Assert.assertNotNull(iLicenseFamilyArray42);
        org.junit.Assert.assertTrue("'" + boolean44 + "' != '" + false + "'", boolean44 == false);
        org.junit.Assert.assertNull(str49);
        org.junit.Assert.assertEquals("'" + str50 + "' != '" + "hi!" + "'", str50, "hi!");
        org.junit.Assert.assertNotNull(iLicenseFamily55);
        org.junit.Assert.assertEquals("'" + str57 + "' != '" + "SpdxBuilder: null" + "'", str57, "SpdxBuilder: null");
        org.junit.Assert.assertEquals("'" + str58 + "' != '" + "SpdxBuilder: null" + "'", str58, "SpdxBuilder: null");
        org.junit.Assert.assertNull(filenameFilter64);
        org.junit.Assert.assertNull(filenameFilter69);
        org.junit.Assert.assertTrue("'" + boolean70 + "' != '" + true + "'", boolean70 == true);
        org.junit.Assert.assertNotNull(outputStreamIOSupplier71);
        org.junit.Assert.assertNull(inputStreamIOSupplier73);
        org.junit.Assert.assertNotNull(defaultLog74);
        org.junit.Assert.assertNull(str80);
        org.junit.Assert.assertNotNull(builder82);
        org.junit.Assert.assertEquals("'" + str83 + "' != '" + "false" + "'", str83, "false");
        org.junit.Assert.assertNotNull(builder85);
        org.junit.Assert.assertNotNull(builder87);
        org.junit.Assert.assertNotNull(builder90);
        org.junit.Assert.assertNotNull(iLicenseFamily91);
        org.junit.Assert.assertTrue("'" + int93 + "' != '" + 33 + "'", int93 == 33);
        org.junit.Assert.assertEquals("'" + str94 + "' != '" + "TMF  " + "'", str94, "TMF  ");
    }

    @Test
    public void test12858() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest25.test12858");
        java.lang.String str1 = org.apache.rat.analysis.matchers.FullTextMatcher.prune("1ebd86ed-5df0-41b1-b846-bcf1182a4757");
        org.junit.Assert.assertEquals("'" + str1 + "' != '" + "1ebd86ed5df041b1b846bcf1182a4757" + "'", str1, "1ebd86ed5df041b1b846bcf1182a4757");
    }

    @Test
    public void test12859() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest25.test12859");
        org.apache.rat.api.MetaData metaData0 = new org.apache.rat.api.MetaData();
        java.lang.String str2 = metaData0.value("COMMON DEVELOPMENT AND DISTRIBUTION LICENSE Version 1.0");
        java.lang.String str4 = metaData0.value("W3C Document Copyright");
        boolean boolean6 = metaData0.clear("hi!");
        metaData0.clear();
        metaData0.clear();
        metaData0.clear();
        metaData0.clear();
        org.apache.rat.api.MetaData metaData11 = new org.apache.rat.api.MetaData();
        java.lang.String str13 = metaData11.value("COMMON DEVELOPMENT AND DISTRIBUTION LICENSE Version 1.0");
        java.lang.String str15 = metaData11.value("W3C Document Copyright");
        boolean boolean17 = metaData11.clear("hi!");
        metaData11.clear();
        org.apache.rat.api.MetaData.Datum datum19 = org.apache.rat.api.MetaData.RAT_LICENSE_FAMILY_NAME_DATUM_GPL_VERSION_1;
        metaData11.set(datum19);
        metaData11.clear();
        org.apache.rat.api.MetaData.Datum datum22 = org.apache.rat.api.MetaData.RAT_LICENSE_FAMILY_CATEGORY_DATUM_CDLL1;
        java.lang.String str23 = datum22.getName();
        metaData11.add(datum22);
        metaData11.clear();
        org.apache.rat.api.MetaData metaData26 = new org.apache.rat.api.MetaData();
        java.lang.String str28 = metaData26.value("COMMON DEVELOPMENT AND DISTRIBUTION LICENSE Version 1.0");
        java.lang.String str30 = metaData26.value("a3b53609-8989-4241-8aa6-1cc947f0d382");
        org.apache.rat.api.MetaData metaData31 = new org.apache.rat.api.MetaData();
        java.lang.String str33 = metaData31.value("COMMON DEVELOPMENT AND DISTRIBUTION LICENSE Version 1.0");
        org.apache.rat.api.MetaData.Datum datum34 = org.apache.rat.api.MetaData.RAT_DOCUMENT_CATEGORY_DATUM_STANDARD;
        metaData31.add(datum34);
        java.lang.String str37 = metaData31.value("3c840dc2-bef0-42b5-b26c-35a568d53a24");
        org.apache.rat.api.MetaData.Datum datum40 = new org.apache.rat.api.MetaData.Datum("GNU General Public License, version 1", "W3C  ");
        metaData31.add(datum40);
        metaData26.add(datum40);
        metaData11.set(datum40);
        metaData0.set(datum40);
        java.lang.String str45 = datum40.getValue();
        org.junit.Assert.assertNull(str2);
        org.junit.Assert.assertNull(str4);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertNull(str13);
        org.junit.Assert.assertNull(str15);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + false + "'", boolean17 == false);
        org.junit.Assert.assertNotNull(datum19);
        org.junit.Assert.assertNotNull(datum22);
        org.junit.Assert.assertEquals("'" + str23 + "' != '" + "http://org/apache/rat/meta-data#LicenseFamilyCategory" + "'", str23, "http://org/apache/rat/meta-data#LicenseFamilyCategory");
        org.junit.Assert.assertNull(str28);
        org.junit.Assert.assertNull(str30);
        org.junit.Assert.assertNull(str33);
        org.junit.Assert.assertNotNull(datum34);
        org.junit.Assert.assertNull(str37);
        org.junit.Assert.assertEquals("'" + str45 + "' != '" + "W3C  " + "'", str45, "W3C  ");
    }

    @Test
    public void test12860() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest25.test12860");
        org.apache.rat.utils.Log log0 = null;
        org.apache.rat.ReportConfiguration reportConfiguration1 = new org.apache.rat.ReportConfiguration(log0);
        org.apache.rat.report.claim.ClaimStatistic claimStatistic2 = org.apache.rat.Reporter.report(reportConfiguration1);
        org.apache.commons.io.function.IOSupplier<java.io.OutputStream> outputStreamIOSupplier3 = reportConfiguration1.getOutput();
        org.apache.rat.license.ILicense iLicense4 = null;
        reportConfiguration1.addLicense(iLicense4);
        org.apache.rat.Defaults.Builder builder6 = org.apache.rat.Defaults.builder();
        org.apache.rat.Defaults defaults7 = builder6.build();
        reportConfiguration1.setFrom(defaults7);
        org.apache.rat.license.LicenseSetFactory.LicenseFilter licenseFilter9 = org.apache.rat.license.LicenseSetFactory.LicenseFilter.all;
        java.util.SortedSet<org.apache.rat.license.ILicense> iLicenseSet10 = defaults7.getLicenses(licenseFilter9);
        java.lang.String[] strArray16 = new java.lang.String[] { "http://org/apache/rat/meta-data#LicenseFamilyCategory", "Datum [ name ='http://org/apache/rat/meta-data#LicenseFamilyCategory',value ='GPL1  ']", "MANIFEST.MF", "AllBuilder:", "The MIT License" };
        org.apache.rat.utils.ReportingSet<java.lang.String> strSet17 = new org.apache.rat.utils.ReportingSet<java.lang.String>();
        boolean boolean18 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strSet17, strArray16);
        boolean boolean20 = strSet17.addIfNotPresent("http://org/apache/rat/meta-data#LicenseFamilyName");
        boolean boolean22 = strSet17.addIfNotPresent("ef7a8b13-64c3-4510-bb0c-dbf208e1e73f");
        java.util.function.Function<java.lang.String, java.lang.String> strFunction23 = null;
        org.apache.rat.utils.ReportingSet<java.lang.String> strSet24 = strSet17.setMsgFormat(strFunction23);
        java.util.Spliterator<java.lang.String> strSpliterator25 = strSet17.spliterator();
        org.apache.rat.license.LicenseSetFactory licenseSetFactory26 = new org.apache.rat.license.LicenseSetFactory(iLicenseSet10, (java.util.Collection<java.lang.String>) strSet17);
        org.apache.rat.utils.ReportingSet<java.lang.String> strSet29 = strSet17.subSet("MathcerRefBuilder: null", "ffalse");
        org.apache.rat.utils.ReportingSet<java.lang.String> strSet31 = strSet17.tailSet("357bf79d-4123-4d3b-a061-96986cdaedaa");
        org.apache.rat.utils.Log log32 = null;
        org.apache.rat.ReportConfiguration reportConfiguration33 = new org.apache.rat.ReportConfiguration(log32);
        org.apache.rat.report.claim.ClaimStatistic claimStatistic34 = org.apache.rat.Reporter.report(reportConfiguration33);
        org.apache.rat.utils.Log log35 = null;
        org.apache.rat.ReportConfiguration reportConfiguration36 = new org.apache.rat.ReportConfiguration(log35);
        org.apache.rat.report.claim.ClaimStatistic claimStatistic37 = org.apache.rat.Reporter.report(reportConfiguration36);
        org.apache.rat.utils.ReportingSet.Options options38 = org.apache.rat.utils.ReportingSet.Options.OVERWRITE;
        reportConfiguration36.licenseDuplicateOption(options38);
        reportConfiguration33.familyDuplicateOption(options38);
        org.apache.commons.io.function.IOSupplier<java.io.PrintWriter> printWriterIOSupplier41 = reportConfiguration33.getWriter();
        org.apache.rat.utils.Log log42 = null;
        org.apache.rat.ReportConfiguration reportConfiguration43 = new org.apache.rat.ReportConfiguration(log42);
        reportConfiguration43.addApprovedLicenseCategory(".cvsignore");
        org.apache.rat.utils.Log.Level level46 = org.apache.rat.utils.Log.Level.ERROR;
        reportConfiguration43.logFamilyCollisions(level46);
        reportConfiguration33.logFamilyCollisions(level46);
        org.apache.rat.utils.ReportingSet<java.lang.String> strSet49 = strSet31.setLogLevel(level46);
        java.util.Comparator<? super java.lang.String> wildcardComparator50 = strSet31.comparator();
        int int51 = strSet31.size();
        org.apache.rat.utils.ReportingSet<java.lang.String> strSet54 = strSet31.subSet("804cbd55d8ca4b15b3a8d94b4c47af38", "f96ad0b6-2267-4692-93e4-227659f9d621");
        org.junit.Assert.assertNull(claimStatistic2);
        org.junit.Assert.assertNotNull(outputStreamIOSupplier3);
        org.junit.Assert.assertNotNull(builder6);
        org.junit.Assert.assertNotNull(defaults7);
        org.junit.Assert.assertTrue("'" + licenseFilter9 + "' != '" + org.apache.rat.license.LicenseSetFactory.LicenseFilter.all + "'", licenseFilter9.equals(org.apache.rat.license.LicenseSetFactory.LicenseFilter.all));
        org.junit.Assert.assertNotNull(iLicenseSet10);
        org.junit.Assert.assertNotNull(strArray16);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + true + "'", boolean18 == true);
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + true + "'", boolean20 == true);
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + true + "'", boolean22 == true);
        org.junit.Assert.assertNotNull(strSet24);
        org.junit.Assert.assertNotNull(strSpliterator25);
        org.junit.Assert.assertNotNull(strSet29);
        org.junit.Assert.assertNotNull(strSet31);
        org.junit.Assert.assertNull(claimStatistic34);
        org.junit.Assert.assertNull(claimStatistic37);
        org.junit.Assert.assertTrue("'" + options38 + "' != '" + org.apache.rat.utils.ReportingSet.Options.OVERWRITE + "'", options38.equals(org.apache.rat.utils.ReportingSet.Options.OVERWRITE));
        org.junit.Assert.assertNotNull(printWriterIOSupplier41);
        org.junit.Assert.assertTrue("'" + level46 + "' != '" + org.apache.rat.utils.Log.Level.ERROR + "'", level46.equals(org.apache.rat.utils.Log.Level.ERROR));
        org.junit.Assert.assertNotNull(strSet49);
        org.junit.Assert.assertNull(wildcardComparator50);
        org.junit.Assert.assertTrue("'" + int51 + "' != '" + 7 + "'", int51 == 7);
        org.junit.Assert.assertNotNull(strSet54);
    }

    @Test
    public void test12861() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest25.test12861");
        org.apache.rat.utils.Log log0 = null;
        org.apache.rat.ReportConfiguration reportConfiguration1 = new org.apache.rat.ReportConfiguration(log0);
        java.io.FilenameFilter filenameFilter2 = reportConfiguration1.getInputFileFilter();
        org.apache.rat.license.LicenseSetFactory.LicenseFilter licenseFilter3 = org.apache.rat.license.LicenseSetFactory.LicenseFilter.all;
        java.util.SortedSet<org.apache.rat.license.ILicense> iLicenseSet4 = reportConfiguration1.getLicenses(licenseFilter3);
        org.apache.rat.config.AddLicenseHeaders addLicenseHeaders5 = org.apache.rat.config.AddLicenseHeaders.FALSE;
        reportConfiguration1.setAddLicenseHeaders(addLicenseHeaders5);
        org.apache.rat.utils.Log log7 = null;
        org.apache.rat.ReportConfiguration reportConfiguration8 = new org.apache.rat.ReportConfiguration(log7);
        org.apache.rat.report.claim.ClaimStatistic claimStatistic9 = org.apache.rat.Reporter.report(reportConfiguration8);
        org.apache.rat.license.LicenseSetFactory.LicenseFilter licenseFilter10 = org.apache.rat.license.LicenseSetFactory.LicenseFilter.all;
        org.apache.rat.Reporter.listLicenses(reportConfiguration8, licenseFilter10);
        org.apache.rat.Reporter.listLicenses(reportConfiguration1, licenseFilter10);
        org.apache.rat.utils.Log log13 = null;
        org.apache.rat.ReportConfiguration reportConfiguration14 = new org.apache.rat.ReportConfiguration(log13);
        java.io.FilenameFilter filenameFilter15 = reportConfiguration14.getInputFileFilter();
        org.apache.rat.license.LicenseSetFactory.LicenseFilter licenseFilter16 = org.apache.rat.license.LicenseSetFactory.LicenseFilter.all;
        java.util.SortedSet<org.apache.rat.license.ILicense> iLicenseSet17 = reportConfiguration14.getLicenses(licenseFilter16);
        org.apache.rat.config.AddLicenseHeaders addLicenseHeaders18 = org.apache.rat.config.AddLicenseHeaders.FALSE;
        reportConfiguration14.setAddLicenseHeaders(addLicenseHeaders18);
        org.apache.rat.utils.Log log20 = null;
        org.apache.rat.ReportConfiguration reportConfiguration21 = new org.apache.rat.ReportConfiguration(log20);
        org.apache.rat.report.claim.ClaimStatistic claimStatistic22 = org.apache.rat.Reporter.report(reportConfiguration21);
        org.apache.rat.license.LicenseSetFactory.LicenseFilter licenseFilter23 = org.apache.rat.license.LicenseSetFactory.LicenseFilter.all;
        org.apache.rat.Reporter.listLicenses(reportConfiguration21, licenseFilter23);
        org.apache.rat.Reporter.listLicenses(reportConfiguration14, licenseFilter23);
        java.util.SortedSet<org.apache.rat.license.ILicenseFamily> iLicenseFamilySet26 = reportConfiguration1.getLicenseFamilies(licenseFilter23);
        org.apache.rat.utils.Log log27 = null;
        org.apache.rat.ReportConfiguration reportConfiguration28 = new org.apache.rat.ReportConfiguration(log27);
        java.io.FilenameFilter filenameFilter29 = reportConfiguration28.getInputFileFilter();
        org.apache.rat.license.LicenseSetFactory.LicenseFilter licenseFilter30 = org.apache.rat.license.LicenseSetFactory.LicenseFilter.all;
        java.util.SortedSet<org.apache.rat.license.ILicense> iLicenseSet31 = reportConfiguration28.getLicenses(licenseFilter30);
        org.apache.rat.config.AddLicenseHeaders addLicenseHeaders32 = org.apache.rat.config.AddLicenseHeaders.FALSE;
        reportConfiguration28.setAddLicenseHeaders(addLicenseHeaders32);
        reportConfiguration1.setAddLicenseHeaders(addLicenseHeaders32);
        org.apache.rat.utils.Log log35 = null;
        org.apache.rat.ReportConfiguration reportConfiguration36 = new org.apache.rat.ReportConfiguration(log35);
        org.apache.rat.utils.ReportingSet.Options options37 = org.apache.rat.utils.ReportingSet.Options.OVERWRITE;
        reportConfiguration36.licenseDuplicateOption(options37);
        org.apache.rat.utils.Log log39 = null;
        org.apache.rat.ReportConfiguration reportConfiguration40 = new org.apache.rat.ReportConfiguration(log39);
        java.io.FilenameFilter filenameFilter41 = reportConfiguration40.getInputFileFilter();
        org.apache.rat.license.LicenseSetFactory.LicenseFilter licenseFilter42 = org.apache.rat.license.LicenseSetFactory.LicenseFilter.all;
        java.util.SortedSet<org.apache.rat.license.ILicense> iLicenseSet43 = reportConfiguration40.getLicenses(licenseFilter42);
        org.apache.rat.config.AddLicenseHeaders addLicenseHeaders44 = org.apache.rat.config.AddLicenseHeaders.FALSE;
        reportConfiguration40.setAddLicenseHeaders(addLicenseHeaders44);
        org.apache.rat.utils.Log log46 = null;
        org.apache.rat.ReportConfiguration reportConfiguration47 = new org.apache.rat.ReportConfiguration(log46);
        org.apache.rat.report.claim.ClaimStatistic claimStatistic48 = org.apache.rat.Reporter.report(reportConfiguration47);
        org.apache.rat.license.LicenseSetFactory.LicenseFilter licenseFilter49 = org.apache.rat.license.LicenseSetFactory.LicenseFilter.all;
        org.apache.rat.Reporter.listLicenses(reportConfiguration47, licenseFilter49);
        org.apache.rat.Reporter.listLicenses(reportConfiguration40, licenseFilter49);
        org.apache.rat.utils.Log log52 = null;
        org.apache.rat.ReportConfiguration reportConfiguration53 = new org.apache.rat.ReportConfiguration(log52);
        java.io.FilenameFilter filenameFilter54 = reportConfiguration53.getInputFileFilter();
        org.apache.rat.license.LicenseSetFactory.LicenseFilter licenseFilter55 = org.apache.rat.license.LicenseSetFactory.LicenseFilter.all;
        java.util.SortedSet<org.apache.rat.license.ILicense> iLicenseSet56 = reportConfiguration53.getLicenses(licenseFilter55);
        org.apache.rat.config.AddLicenseHeaders addLicenseHeaders57 = org.apache.rat.config.AddLicenseHeaders.FALSE;
        reportConfiguration53.setAddLicenseHeaders(addLicenseHeaders57);
        org.apache.rat.utils.Log log59 = null;
        org.apache.rat.ReportConfiguration reportConfiguration60 = new org.apache.rat.ReportConfiguration(log59);
        org.apache.rat.report.claim.ClaimStatistic claimStatistic61 = org.apache.rat.Reporter.report(reportConfiguration60);
        org.apache.rat.license.LicenseSetFactory.LicenseFilter licenseFilter62 = org.apache.rat.license.LicenseSetFactory.LicenseFilter.all;
        org.apache.rat.Reporter.listLicenses(reportConfiguration60, licenseFilter62);
        org.apache.rat.Reporter.listLicenses(reportConfiguration53, licenseFilter62);
        org.apache.rat.Reporter.listLicenses(reportConfiguration40, licenseFilter62);
        org.apache.rat.utils.Log log66 = null;
        org.apache.rat.ReportConfiguration reportConfiguration67 = new org.apache.rat.ReportConfiguration(log66);
        org.apache.commons.io.function.IOSupplier<java.io.OutputStream> outputStreamIOSupplier68 = reportConfiguration67.getOutput();
        reportConfiguration40.setOut(outputStreamIOSupplier68);
        org.apache.rat.utils.Log.Level level70 = org.apache.rat.utils.Log.Level.WARN;
        reportConfiguration40.logLicenseCollisions(level70);
        org.apache.commons.io.filefilter.IOFileFilter iOFileFilter72 = reportConfiguration40.getDirectoryFilter();
        reportConfiguration36.setInputFileFilter((java.io.FilenameFilter) iOFileFilter72);
        java.nio.file.Path path74 = null;
        boolean boolean75 = iOFileFilter72.matches(path74);
        org.apache.commons.io.filefilter.IOFileFilter iOFileFilter76 = iOFileFilter72.negate();
        java.nio.file.Path path77 = null;
        boolean boolean78 = iOFileFilter72.matches(path77);
        org.apache.commons.io.filefilter.IOFileFilter iOFileFilter79 = iOFileFilter72.negate();
        reportConfiguration1.setInputFileFilter((java.io.FilenameFilter) iOFileFilter79);
        java.nio.file.Path path81 = null;
        boolean boolean82 = iOFileFilter79.matches(path81);
        org.junit.Assert.assertNull(filenameFilter2);
        org.junit.Assert.assertTrue("'" + licenseFilter3 + "' != '" + org.apache.rat.license.LicenseSetFactory.LicenseFilter.all + "'", licenseFilter3.equals(org.apache.rat.license.LicenseSetFactory.LicenseFilter.all));
        org.junit.Assert.assertNotNull(iLicenseSet4);
        org.junit.Assert.assertTrue("'" + addLicenseHeaders5 + "' != '" + org.apache.rat.config.AddLicenseHeaders.FALSE + "'", addLicenseHeaders5.equals(org.apache.rat.config.AddLicenseHeaders.FALSE));
        org.junit.Assert.assertNull(claimStatistic9);
        org.junit.Assert.assertTrue("'" + licenseFilter10 + "' != '" + org.apache.rat.license.LicenseSetFactory.LicenseFilter.all + "'", licenseFilter10.equals(org.apache.rat.license.LicenseSetFactory.LicenseFilter.all));
        org.junit.Assert.assertNull(filenameFilter15);
        org.junit.Assert.assertTrue("'" + licenseFilter16 + "' != '" + org.apache.rat.license.LicenseSetFactory.LicenseFilter.all + "'", licenseFilter16.equals(org.apache.rat.license.LicenseSetFactory.LicenseFilter.all));
        org.junit.Assert.assertNotNull(iLicenseSet17);
        org.junit.Assert.assertTrue("'" + addLicenseHeaders18 + "' != '" + org.apache.rat.config.AddLicenseHeaders.FALSE + "'", addLicenseHeaders18.equals(org.apache.rat.config.AddLicenseHeaders.FALSE));
        org.junit.Assert.assertNull(claimStatistic22);
        org.junit.Assert.assertTrue("'" + licenseFilter23 + "' != '" + org.apache.rat.license.LicenseSetFactory.LicenseFilter.all + "'", licenseFilter23.equals(org.apache.rat.license.LicenseSetFactory.LicenseFilter.all));
        org.junit.Assert.assertNotNull(iLicenseFamilySet26);
        org.junit.Assert.assertNull(filenameFilter29);
        org.junit.Assert.assertTrue("'" + licenseFilter30 + "' != '" + org.apache.rat.license.LicenseSetFactory.LicenseFilter.all + "'", licenseFilter30.equals(org.apache.rat.license.LicenseSetFactory.LicenseFilter.all));
        org.junit.Assert.assertNotNull(iLicenseSet31);
        org.junit.Assert.assertTrue("'" + addLicenseHeaders32 + "' != '" + org.apache.rat.config.AddLicenseHeaders.FALSE + "'", addLicenseHeaders32.equals(org.apache.rat.config.AddLicenseHeaders.FALSE));
        org.junit.Assert.assertTrue("'" + options37 + "' != '" + org.apache.rat.utils.ReportingSet.Options.OVERWRITE + "'", options37.equals(org.apache.rat.utils.ReportingSet.Options.OVERWRITE));
        org.junit.Assert.assertNull(filenameFilter41);
        org.junit.Assert.assertTrue("'" + licenseFilter42 + "' != '" + org.apache.rat.license.LicenseSetFactory.LicenseFilter.all + "'", licenseFilter42.equals(org.apache.rat.license.LicenseSetFactory.LicenseFilter.all));
        org.junit.Assert.assertNotNull(iLicenseSet43);
        org.junit.Assert.assertTrue("'" + addLicenseHeaders44 + "' != '" + org.apache.rat.config.AddLicenseHeaders.FALSE + "'", addLicenseHeaders44.equals(org.apache.rat.config.AddLicenseHeaders.FALSE));
        org.junit.Assert.assertNull(claimStatistic48);
        org.junit.Assert.assertTrue("'" + licenseFilter49 + "' != '" + org.apache.rat.license.LicenseSetFactory.LicenseFilter.all + "'", licenseFilter49.equals(org.apache.rat.license.LicenseSetFactory.LicenseFilter.all));
        org.junit.Assert.assertNull(filenameFilter54);
        org.junit.Assert.assertTrue("'" + licenseFilter55 + "' != '" + org.apache.rat.license.LicenseSetFactory.LicenseFilter.all + "'", licenseFilter55.equals(org.apache.rat.license.LicenseSetFactory.LicenseFilter.all));
        org.junit.Assert.assertNotNull(iLicenseSet56);
        org.junit.Assert.assertTrue("'" + addLicenseHeaders57 + "' != '" + org.apache.rat.config.AddLicenseHeaders.FALSE + "'", addLicenseHeaders57.equals(org.apache.rat.config.AddLicenseHeaders.FALSE));
        org.junit.Assert.assertNull(claimStatistic61);
        org.junit.Assert.assertTrue("'" + licenseFilter62 + "' != '" + org.apache.rat.license.LicenseSetFactory.LicenseFilter.all + "'", licenseFilter62.equals(org.apache.rat.license.LicenseSetFactory.LicenseFilter.all));
        org.junit.Assert.assertNotNull(outputStreamIOSupplier68);
        org.junit.Assert.assertTrue("'" + level70 + "' != '" + org.apache.rat.utils.Log.Level.WARN + "'", level70.equals(org.apache.rat.utils.Log.Level.WARN));
        org.junit.Assert.assertNotNull(iOFileFilter72);
        org.junit.Assert.assertTrue("'" + boolean75 + "' != '" + false + "'", boolean75 == false);
        org.junit.Assert.assertNotNull(iOFileFilter76);
        org.junit.Assert.assertTrue("'" + boolean78 + "' != '" + false + "'", boolean78 == false);
        org.junit.Assert.assertNotNull(iOFileFilter79);
        org.junit.Assert.assertTrue("'" + boolean82 + "' != '" + true + "'", boolean82 == true);
    }

    @Test
    public void test12862() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest25.test12862");
        java.lang.String[] strArray5 = new java.lang.String[] { "http://org/apache/rat/meta-data#LicenseFamilyCategory", "Datum [ name ='http://org/apache/rat/meta-data#LicenseFamilyCategory',value ='GPL1  ']", "MANIFEST.MF", "AllBuilder:", "The MIT License" };
        org.apache.rat.utils.ReportingSet<java.lang.String> strSet6 = new org.apache.rat.utils.ReportingSet<java.lang.String>();
        boolean boolean7 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strSet6, strArray5);
        boolean boolean9 = strSet6.addIfNotPresent("http://org/apache/rat/meta-data#LicenseFamilyName");
        java.util.Iterator<java.lang.String> strItor10 = strSet6.iterator();
        java.lang.Object[] objArray11 = strSet6.toArray();
        java.lang.String[] strArray17 = new java.lang.String[] { "http://org/apache/rat/meta-data#LicenseFamilyCategory", "Datum [ name ='http://org/apache/rat/meta-data#LicenseFamilyCategory',value ='GPL1  ']", "MANIFEST.MF", "AllBuilder:", "The MIT License" };
        org.apache.rat.utils.ReportingSet<java.lang.String> strSet18 = new org.apache.rat.utils.ReportingSet<java.lang.String>();
        boolean boolean19 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strSet18, strArray17);
        boolean boolean21 = strSet18.addIfNotPresent("http://org/apache/rat/meta-data#LicenseFamilyName");
        java.util.SortedSet<org.apache.rat.license.ILicenseFamily> iLicenseFamilySet22 = org.apache.rat.license.LicenseFamilySetFactory.emptyLicenseFamilySet();
        boolean boolean23 = strSet18.removeAll((java.util.Collection<org.apache.rat.license.ILicenseFamily>) iLicenseFamilySet22);
        boolean boolean24 = strSet6.containsAll((java.util.Collection<org.apache.rat.license.ILicenseFamily>) iLicenseFamilySet22);
        java.util.Spliterator<java.lang.String> strSpliterator25 = strSet6.spliterator();
        org.apache.rat.utils.DefaultLog defaultLog26 = org.apache.rat.utils.DefaultLog.INSTANCE;
        org.apache.rat.utils.Log log27 = null;
        org.apache.rat.ReportConfiguration reportConfiguration28 = new org.apache.rat.ReportConfiguration(log27);
        reportConfiguration28.addApprovedLicenseCategory(".cvsignore");
        org.apache.rat.utils.Log.Level level31 = org.apache.rat.utils.Log.Level.ERROR;
        reportConfiguration28.logFamilyCollisions(level31);
        defaultLog26.setLevel(level31);
        org.apache.rat.utils.Log log34 = null;
        org.apache.rat.ReportConfiguration reportConfiguration35 = new org.apache.rat.ReportConfiguration(log34);
        java.io.FilenameFilter filenameFilter36 = reportConfiguration35.getInputFileFilter();
        org.apache.rat.license.LicenseSetFactory.LicenseFilter licenseFilter37 = org.apache.rat.license.LicenseSetFactory.LicenseFilter.all;
        java.util.SortedSet<org.apache.rat.license.ILicense> iLicenseSet38 = reportConfiguration35.getLicenses(licenseFilter37);
        org.apache.rat.config.AddLicenseHeaders addLicenseHeaders39 = org.apache.rat.config.AddLicenseHeaders.FALSE;
        reportConfiguration35.setAddLicenseHeaders(addLicenseHeaders39);
        org.apache.rat.utils.Log log41 = null;
        org.apache.rat.ReportConfiguration reportConfiguration42 = new org.apache.rat.ReportConfiguration(log41);
        org.apache.rat.report.claim.ClaimStatistic claimStatistic43 = org.apache.rat.Reporter.report(reportConfiguration42);
        org.apache.rat.license.LicenseSetFactory.LicenseFilter licenseFilter44 = org.apache.rat.license.LicenseSetFactory.LicenseFilter.all;
        org.apache.rat.Reporter.listLicenses(reportConfiguration42, licenseFilter44);
        org.apache.rat.Reporter.listLicenses(reportConfiguration35, licenseFilter44);
        org.apache.rat.utils.Log log47 = null;
        org.apache.rat.ReportConfiguration reportConfiguration48 = new org.apache.rat.ReportConfiguration(log47);
        java.io.FilenameFilter filenameFilter49 = reportConfiguration48.getInputFileFilter();
        org.apache.rat.license.LicenseSetFactory.LicenseFilter licenseFilter50 = org.apache.rat.license.LicenseSetFactory.LicenseFilter.all;
        java.util.SortedSet<org.apache.rat.license.ILicense> iLicenseSet51 = reportConfiguration48.getLicenses(licenseFilter50);
        org.apache.rat.config.AddLicenseHeaders addLicenseHeaders52 = org.apache.rat.config.AddLicenseHeaders.FALSE;
        reportConfiguration48.setAddLicenseHeaders(addLicenseHeaders52);
        org.apache.rat.utils.Log log54 = null;
        org.apache.rat.ReportConfiguration reportConfiguration55 = new org.apache.rat.ReportConfiguration(log54);
        org.apache.rat.report.claim.ClaimStatistic claimStatistic56 = org.apache.rat.Reporter.report(reportConfiguration55);
        org.apache.rat.license.LicenseSetFactory.LicenseFilter licenseFilter57 = org.apache.rat.license.LicenseSetFactory.LicenseFilter.all;
        org.apache.rat.Reporter.listLicenses(reportConfiguration55, licenseFilter57);
        org.apache.rat.Reporter.listLicenses(reportConfiguration48, licenseFilter57);
        org.apache.rat.Reporter.listLicenses(reportConfiguration35, licenseFilter57);
        org.apache.rat.utils.Log log61 = null;
        org.apache.rat.ReportConfiguration reportConfiguration62 = new org.apache.rat.ReportConfiguration(log61);
        org.apache.commons.io.function.IOSupplier<java.io.OutputStream> outputStreamIOSupplier63 = reportConfiguration62.getOutput();
        reportConfiguration35.setOut(outputStreamIOSupplier63);
        org.apache.rat.utils.Log log65 = null;
        org.apache.rat.ReportConfiguration reportConfiguration66 = new org.apache.rat.ReportConfiguration(log65);
        org.apache.rat.report.claim.ClaimStatistic claimStatistic67 = org.apache.rat.Reporter.report(reportConfiguration66);
        org.apache.rat.utils.Log log68 = null;
        org.apache.rat.ReportConfiguration reportConfiguration69 = new org.apache.rat.ReportConfiguration(log68);
        org.apache.rat.report.claim.ClaimStatistic claimStatistic70 = org.apache.rat.Reporter.report(reportConfiguration69);
        org.apache.rat.utils.ReportingSet.Options options71 = org.apache.rat.utils.ReportingSet.Options.OVERWRITE;
        reportConfiguration69.licenseDuplicateOption(options71);
        reportConfiguration66.familyDuplicateOption(options71);
        reportConfiguration35.licenseDuplicateOption(options71);
        reportConfiguration35.addApprovedLicenseCategory("W3C Document Copyright");
        org.apache.rat.utils.Log log77 = null;
        org.apache.rat.ReportConfiguration reportConfiguration78 = new org.apache.rat.ReportConfiguration(log77);
        reportConfiguration78.addApprovedLicenseCategory(".cvsignore");
        org.apache.rat.utils.Log.Level level81 = org.apache.rat.utils.Log.Level.ERROR;
        reportConfiguration78.logLicenseCollisions(level81);
        reportConfiguration35.logLicenseCollisions(level81);
        defaultLog26.log(level81, "GNU General Public License, version 1");
        org.apache.rat.utils.ReportingSet<java.lang.String> strSet86 = strSet6.setLog((org.apache.rat.utils.Log) defaultLog26);
        java.util.Spliterator<java.lang.String> strSpliterator87 = strSet86.spliterator();
        org.apache.rat.utils.ReportingSet<java.lang.String> strSet89 = strSet86.tailSet("5229ae24-2b36-466b-8ff4-f67a7c68ef04");
        boolean boolean91 = strSet86.contains((java.lang.Object) "Datum [ name ='OASIS',value ='SpdxBuilder: ef7a8b13-64c3-4510-bb0c-dbf208e1e73f ']");
        java.util.Comparator<? super java.lang.String> wildcardComparator92 = strSet86.comparator();
        org.junit.Assert.assertNotNull(strArray5);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + true + "'", boolean7 == true);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + true + "'", boolean9 == true);
        org.junit.Assert.assertNotNull(strItor10);
        org.junit.Assert.assertNotNull(objArray11);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray11), "[AllBuilder:, Datum [ name ='http://org/apache/rat/meta-data#LicenseFamilyCategory',value ='GPL1  '], MANIFEST.MF, The MIT License, http://org/apache/rat/meta-data#LicenseFamilyCategory, http://org/apache/rat/meta-data#LicenseFamilyName]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray11), "[AllBuilder:, Datum [ name ='http://org/apache/rat/meta-data#LicenseFamilyCategory',value ='GPL1  '], MANIFEST.MF, The MIT License, http://org/apache/rat/meta-data#LicenseFamilyCategory, http://org/apache/rat/meta-data#LicenseFamilyName]");
        org.junit.Assert.assertNotNull(strArray17);
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + true + "'", boolean19 == true);
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + true + "'", boolean21 == true);
        org.junit.Assert.assertNotNull(iLicenseFamilySet22);
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + false + "'", boolean23 == false);
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + true + "'", boolean24 == true);
        org.junit.Assert.assertNotNull(strSpliterator25);
        org.junit.Assert.assertNotNull(defaultLog26);
        org.junit.Assert.assertTrue("'" + level31 + "' != '" + org.apache.rat.utils.Log.Level.ERROR + "'", level31.equals(org.apache.rat.utils.Log.Level.ERROR));
        org.junit.Assert.assertNull(filenameFilter36);
        org.junit.Assert.assertTrue("'" + licenseFilter37 + "' != '" + org.apache.rat.license.LicenseSetFactory.LicenseFilter.all + "'", licenseFilter37.equals(org.apache.rat.license.LicenseSetFactory.LicenseFilter.all));
        org.junit.Assert.assertNotNull(iLicenseSet38);
        org.junit.Assert.assertTrue("'" + addLicenseHeaders39 + "' != '" + org.apache.rat.config.AddLicenseHeaders.FALSE + "'", addLicenseHeaders39.equals(org.apache.rat.config.AddLicenseHeaders.FALSE));
        org.junit.Assert.assertNull(claimStatistic43);
        org.junit.Assert.assertTrue("'" + licenseFilter44 + "' != '" + org.apache.rat.license.LicenseSetFactory.LicenseFilter.all + "'", licenseFilter44.equals(org.apache.rat.license.LicenseSetFactory.LicenseFilter.all));
        org.junit.Assert.assertNull(filenameFilter49);
        org.junit.Assert.assertTrue("'" + licenseFilter50 + "' != '" + org.apache.rat.license.LicenseSetFactory.LicenseFilter.all + "'", licenseFilter50.equals(org.apache.rat.license.LicenseSetFactory.LicenseFilter.all));
        org.junit.Assert.assertNotNull(iLicenseSet51);
        org.junit.Assert.assertTrue("'" + addLicenseHeaders52 + "' != '" + org.apache.rat.config.AddLicenseHeaders.FALSE + "'", addLicenseHeaders52.equals(org.apache.rat.config.AddLicenseHeaders.FALSE));
        org.junit.Assert.assertNull(claimStatistic56);
        org.junit.Assert.assertTrue("'" + licenseFilter57 + "' != '" + org.apache.rat.license.LicenseSetFactory.LicenseFilter.all + "'", licenseFilter57.equals(org.apache.rat.license.LicenseSetFactory.LicenseFilter.all));
        org.junit.Assert.assertNotNull(outputStreamIOSupplier63);
        org.junit.Assert.assertNull(claimStatistic67);
        org.junit.Assert.assertNull(claimStatistic70);
        org.junit.Assert.assertTrue("'" + options71 + "' != '" + org.apache.rat.utils.ReportingSet.Options.OVERWRITE + "'", options71.equals(org.apache.rat.utils.ReportingSet.Options.OVERWRITE));
        org.junit.Assert.assertTrue("'" + level81 + "' != '" + org.apache.rat.utils.Log.Level.ERROR + "'", level81.equals(org.apache.rat.utils.Log.Level.ERROR));
        org.junit.Assert.assertNotNull(strSet86);
        org.junit.Assert.assertNotNull(strSpliterator87);
        org.junit.Assert.assertNotNull(strSet89);
        org.junit.Assert.assertTrue("'" + boolean91 + "' != '" + false + "'", boolean91 == false);
        org.junit.Assert.assertNull(wildcardComparator92);
    }

    @Test
    public void test12863() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest25.test12863");
        org.apache.rat.configuration.Format format0 = org.apache.rat.configuration.Format.TXT;
        org.apache.rat.configuration.MatcherReader matcherReader1 = format0.matcherReader();
        org.apache.rat.configuration.MatcherReader matcherReader2 = format0.matcherReader();
        org.apache.rat.configuration.MatcherReader matcherReader3 = format0.matcherReader();
        org.apache.rat.configuration.MatcherReader matcherReader4 = format0.matcherReader();
        org.apache.rat.configuration.MatcherReader matcherReader5 = format0.matcherReader();
        org.junit.Assert.assertTrue("'" + format0 + "' != '" + org.apache.rat.configuration.Format.TXT + "'", format0.equals(org.apache.rat.configuration.Format.TXT));
        org.junit.Assert.assertNull(matcherReader1);
        org.junit.Assert.assertNull(matcherReader2);
        org.junit.Assert.assertNull(matcherReader3);
        org.junit.Assert.assertNull(matcherReader4);
        org.junit.Assert.assertNull(matcherReader5);
    }

    @Test
    public void test12864() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest25.test12864");
        org.apache.rat.analysis.matchers.CopyrightMatcher copyrightMatcher3 = new org.apache.rat.analysis.matchers.CopyrightMatcher("TextBuilder: http://org/apache/ra...", "6232a9af-c312-410c-9bbb-6b12d7725116", "5479da42-d4d7-4457-9e6b-e6ae8ab5c74c");
        org.apache.rat.analysis.IHeaderMatcher.State state5 = copyrightMatcher3.matches("MathcerRefBuilder: 90663eff7ed841bd85a8e8f189198bc6");
        org.junit.Assert.assertTrue("'" + state5 + "' != '" + org.apache.rat.analysis.IHeaderMatcher.State.i + "'", state5.equals(org.apache.rat.analysis.IHeaderMatcher.State.i));
    }

    @Test
    public void test12865() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest25.test12865");
        org.apache.rat.license.ILicenseFamilyBuilder iLicenseFamilyBuilder0 = new org.apache.rat.license.ILicenseFamilyBuilder();
        java.lang.String str1 = iLicenseFamilyBuilder0.getCategory();
        org.apache.rat.license.ILicenseFamily.Builder builder3 = iLicenseFamilyBuilder0.setLicenseFamilyCategory("AL   ");
        java.lang.String str4 = iLicenseFamilyBuilder0.getCategory();
        org.apache.rat.license.ILicenseFamily.Builder builder6 = iLicenseFamilyBuilder0.setLicenseFamilyCategory("SpdxB");
        java.lang.String str7 = iLicenseFamilyBuilder0.getCategory();
        org.apache.rat.license.ILicenseFamily.Builder builder9 = iLicenseFamilyBuilder0.setLicenseFamilyName("b44875e2-725e-49f9-8e21-90384e2ef96f");
        org.apache.rat.license.ILicenseFamily.Builder builder11 = iLicenseFamilyBuilder0.setLicenseFamilyCategory("58a74a86-23a5-4705-bb36-2d667e35fb54");
        org.apache.rat.license.ILicenseFamily iLicenseFamily12 = builder11.build();
        org.junit.Assert.assertNull(str1);
        org.junit.Assert.assertNotNull(builder3);
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "AL   " + "'", str4, "AL   ");
        org.junit.Assert.assertNotNull(builder6);
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "SpdxB" + "'", str7, "SpdxB");
        org.junit.Assert.assertNotNull(builder9);
        org.junit.Assert.assertNotNull(builder11);
        org.junit.Assert.assertNotNull(iLicenseFamily12);
    }

    @Test
    public void test12866() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest25.test12866");
        org.apache.rat.utils.ReportingSet<java.lang.String> strSet0 = new org.apache.rat.utils.ReportingSet<java.lang.String>();
        org.apache.rat.license.ILicense[] iLicenseArray1 = new org.apache.rat.license.ILicense[] {};
        java.util.TreeSet<org.apache.rat.license.ILicense> iLicenseSet2 = new java.util.TreeSet<org.apache.rat.license.ILicense>();
        boolean boolean3 = java.util.Collections.addAll((java.util.Collection<org.apache.rat.license.ILicense>) iLicenseSet2, iLicenseArray1);
        java.lang.String[] strArray16 = new java.lang.String[] { "GPL2 ", "GPL1 ", "notice", "http://org/apache/rat/meta-data#LicenseFamilyName", "notice", "GPL2 ", "http://org/apache/rat/meta-data#LicenseFamilyName", "", "GPL2 ", "", "GPL1 ", "hi!" };
        java.util.ArrayList<java.lang.String> strList17 = new java.util.ArrayList<java.lang.String>();
        boolean boolean18 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strList17, strArray16);
        org.apache.rat.license.LicenseSetFactory licenseSetFactory19 = new org.apache.rat.license.LicenseSetFactory((java.util.SortedSet<org.apache.rat.license.ILicense>) iLicenseSet2, (java.util.Collection<java.lang.String>) strList17);
        org.apache.rat.license.LicenseSetFactory.LicenseFilter licenseFilter20 = org.apache.rat.license.LicenseSetFactory.LicenseFilter.all;
        java.util.SortedSet<org.apache.rat.license.ILicenseFamily> iLicenseFamilySet21 = licenseSetFactory19.getLicenseFamilies(licenseFilter20);
        org.apache.rat.policy.DefaultPolicy defaultPolicy22 = new org.apache.rat.policy.DefaultPolicy((java.util.Collection<org.apache.rat.license.ILicenseFamily>) iLicenseFamilySet21);
        boolean boolean23 = strSet0.containsAll((java.util.Collection<org.apache.rat.license.ILicenseFamily>) iLicenseFamilySet21);
        java.lang.String[] strArray29 = new java.lang.String[] { "http://org/apache/rat/meta-data#LicenseFamilyCategory", "Datum [ name ='http://org/apache/rat/meta-data#LicenseFamilyCategory',value ='GPL1  ']", "MANIFEST.MF", "AllBuilder:", "The MIT License" };
        org.apache.rat.utils.ReportingSet<java.lang.String> strSet30 = new org.apache.rat.utils.ReportingSet<java.lang.String>();
        boolean boolean31 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strSet30, strArray29);
        boolean boolean33 = strSet30.addIfNotPresent("http://org/apache/rat/meta-data#LicenseFamilyName");
        boolean boolean35 = strSet30.addIfNotPresent("ef7a8b13-64c3-4510-bb0c-dbf208e1e73f");
        java.util.stream.Stream<java.lang.String> strStream36 = strSet30.stream();
        org.apache.rat.utils.DefaultLog defaultLog37 = org.apache.rat.utils.DefaultLog.INSTANCE;
        org.apache.rat.utils.Log log38 = null;
        org.apache.rat.ReportConfiguration reportConfiguration39 = new org.apache.rat.ReportConfiguration(log38);
        reportConfiguration39.addApprovedLicenseCategory(".cvsignore");
        org.apache.rat.utils.Log.Level level42 = org.apache.rat.utils.Log.Level.ERROR;
        reportConfiguration39.logFamilyCollisions(level42);
        defaultLog37.setLevel(level42);
        org.apache.rat.utils.ReportingSet<java.lang.String> strSet45 = strSet30.setLogLevel(level42);
        boolean boolean47 = strSet45.addIfNotPresent("OASIS Open License");
        java.util.Iterator<java.lang.String> strItor48 = strSet45.iterator();
        org.apache.rat.utils.ReportingSet<java.lang.String> strSet51 = strSet45.subSet("MathcerRefBuilder: t true", "PLAIN");
        org.apache.rat.license.LicenseFamilySetFactory licenseFamilySetFactory52 = new org.apache.rat.license.LicenseFamilySetFactory(iLicenseFamilySet21, (java.util.Collection<java.lang.String>) strSet51);
        org.apache.rat.report.xml.XmlReportFactory xmlReportFactory53 = new org.apache.rat.report.xml.XmlReportFactory();
        org.apache.rat.report.xml.XmlReportFactory xmlReportFactory54 = new org.apache.rat.report.xml.XmlReportFactory();
        org.apache.rat.report.xml.XmlReportFactory xmlReportFactory55 = new org.apache.rat.report.xml.XmlReportFactory();
        org.apache.rat.report.xml.XmlReportFactory xmlReportFactory56 = new org.apache.rat.report.xml.XmlReportFactory();
        org.apache.rat.report.xml.XmlReportFactory[] xmlReportFactoryArray57 = new org.apache.rat.report.xml.XmlReportFactory[] { xmlReportFactory53, xmlReportFactory54, xmlReportFactory55, xmlReportFactory56 };
        // The following exception was thrown during execution in test generation
        try {
            org.apache.rat.report.xml.XmlReportFactory[] xmlReportFactoryArray58 = strSet51.toArray(xmlReportFactoryArray57);
            org.junit.Assert.fail("Expected exception of type java.lang.ArrayStoreException; message: java.lang.String");
        } catch (java.lang.ArrayStoreException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(iLicenseArray1);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertNotNull(strArray16);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + true + "'", boolean18 == true);
        org.junit.Assert.assertTrue("'" + licenseFilter20 + "' != '" + org.apache.rat.license.LicenseSetFactory.LicenseFilter.all + "'", licenseFilter20.equals(org.apache.rat.license.LicenseSetFactory.LicenseFilter.all));
        org.junit.Assert.assertNotNull(iLicenseFamilySet21);
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + true + "'", boolean23 == true);
        org.junit.Assert.assertNotNull(strArray29);
        org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + true + "'", boolean31 == true);
        org.junit.Assert.assertTrue("'" + boolean33 + "' != '" + true + "'", boolean33 == true);
        org.junit.Assert.assertTrue("'" + boolean35 + "' != '" + true + "'", boolean35 == true);
        org.junit.Assert.assertNotNull(strStream36);
        org.junit.Assert.assertNotNull(defaultLog37);
        org.junit.Assert.assertTrue("'" + level42 + "' != '" + org.apache.rat.utils.Log.Level.ERROR + "'", level42.equals(org.apache.rat.utils.Log.Level.ERROR));
        org.junit.Assert.assertNotNull(strSet45);
        org.junit.Assert.assertTrue("'" + boolean47 + "' != '" + true + "'", boolean47 == true);
        org.junit.Assert.assertNotNull(strItor48);
        org.junit.Assert.assertNotNull(strSet51);
        org.junit.Assert.assertNotNull(xmlReportFactoryArray57);
    }

    @Test
    public void test12867() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest25.test12867");
        java.lang.String[] strArray5 = new java.lang.String[] { "http://org/apache/rat/meta-data#LicenseFamilyCategory", "Datum [ name ='http://org/apache/rat/meta-data#LicenseFamilyCategory',value ='GPL1  ']", "MANIFEST.MF", "AllBuilder:", "The MIT License" };
        org.apache.rat.utils.ReportingSet<java.lang.String> strSet6 = new org.apache.rat.utils.ReportingSet<java.lang.String>();
        boolean boolean7 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strSet6, strArray5);
        boolean boolean9 = strSet6.addIfNotPresent("http://org/apache/rat/meta-data#LicenseFamilyName");
        boolean boolean11 = strSet6.addIfNotPresent("ef7a8b13-64c3-4510-bb0c-dbf208e1e73f");
        java.util.function.Function<java.lang.String, java.lang.String> strFunction12 = null;
        org.apache.rat.utils.ReportingSet<java.lang.String> strSet13 = strSet6.setMsgFormat(strFunction12);
        java.lang.String str14 = strSet6.last();
        org.apache.rat.utils.ReportingSet<java.lang.String> strSet16 = strSet6.tailSet("SpdxBuilder: null");
        java.lang.String str17 = strSet16.first();
        org.junit.Assert.assertNotNull(strArray5);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + true + "'", boolean7 == true);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + true + "'", boolean9 == true);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + true + "'", boolean11 == true);
        org.junit.Assert.assertNotNull(strSet13);
        org.junit.Assert.assertEquals("'" + str14 + "' != '" + "http://org/apache/rat/meta-data#LicenseFamilyName" + "'", str14, "http://org/apache/rat/meta-data#LicenseFamilyName");
        org.junit.Assert.assertNotNull(strSet16);
        org.junit.Assert.assertEquals("'" + str17 + "' != '" + "The MIT License" + "'", str17, "The MIT License");
    }

    @Test
    public void test12868() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest25.test12868");
        org.apache.rat.utils.Log log0 = null;
        org.apache.rat.ReportConfiguration reportConfiguration1 = new org.apache.rat.ReportConfiguration(log0);
        org.apache.rat.report.claim.ClaimStatistic claimStatistic2 = org.apache.rat.Reporter.report(reportConfiguration1);
        org.apache.commons.io.function.IOSupplier<java.io.OutputStream> outputStreamIOSupplier3 = reportConfiguration1.getOutput();
        org.apache.rat.license.ILicense iLicense4 = null;
        reportConfiguration1.addLicense(iLicense4);
        reportConfiguration1.removeApprovedLicenseCategory("F FALSE");
        boolean boolean8 = reportConfiguration1.isAddingLicenses();
        org.apache.rat.configuration.Format format10 = org.apache.rat.configuration.Format.XML;
        org.apache.rat.configuration.LicenseReader licenseReader11 = format10.licenseReader();
        org.apache.rat.configuration.MatcherReader matcherReader12 = format10.matcherReader();
        org.apache.rat.configuration.LicenseReader licenseReader13 = format10.licenseReader();
        java.util.SortedSet<org.apache.rat.license.ILicense> iLicenseSet14 = licenseReader13.readLicenses();
        org.apache.rat.license.ILicense iLicense15 = org.apache.rat.license.LicenseSetFactory.search("Datum [ name ='http://org/apache/rat/meta-data#LicenseFamilyCategory',value ='GPL1  ']", iLicenseSet14);
        org.apache.rat.utils.ReportingSet<java.lang.String> strSet16 = new org.apache.rat.utils.ReportingSet<java.lang.String>();
        int int17 = strSet16.size();
        org.apache.rat.license.LicenseSetFactory licenseSetFactory18 = new org.apache.rat.license.LicenseSetFactory(iLicenseSet14, (java.util.Collection<java.lang.String>) strSet16);
        org.apache.rat.license.ILicenseFamily[] iLicenseFamilyArray19 = new org.apache.rat.license.ILicenseFamily[] {};
        java.util.ArrayList<org.apache.rat.license.ILicenseFamily> iLicenseFamilyList20 = new java.util.ArrayList<org.apache.rat.license.ILicenseFamily>();
        boolean boolean21 = java.util.Collections.addAll((java.util.Collection<org.apache.rat.license.ILicenseFamily>) iLicenseFamilyList20, iLicenseFamilyArray19);
        org.apache.rat.policy.DefaultPolicy defaultPolicy22 = new org.apache.rat.policy.DefaultPolicy((java.util.Collection<org.apache.rat.license.ILicenseFamily>) iLicenseFamilyList20);
        java.util.SortedSet<org.apache.rat.license.ILicenseFamily> iLicenseFamilySet23 = defaultPolicy22.getApprovedLicenseNames();
        java.util.SortedSet<org.apache.rat.license.ILicenseFamily> iLicenseFamilySet24 = defaultPolicy22.getApprovedLicenseNames();
        boolean boolean25 = strSet16.retainAll((java.util.Collection<org.apache.rat.license.ILicenseFamily>) iLicenseFamilySet24);
        boolean boolean26 = strSet16.isEmpty();
        reportConfiguration1.removeApprovedLicenseCategories((java.util.Collection<java.lang.String>) strSet16);
        org.apache.rat.utils.Log log28 = null;
        org.apache.rat.ReportConfiguration reportConfiguration29 = new org.apache.rat.ReportConfiguration(log28);
        org.apache.rat.license.ILicenseFamily[] iLicenseFamilyArray30 = new org.apache.rat.license.ILicenseFamily[] {};
        java.util.ArrayList<org.apache.rat.license.ILicenseFamily> iLicenseFamilyList31 = new java.util.ArrayList<org.apache.rat.license.ILicenseFamily>();
        boolean boolean32 = java.util.Collections.addAll((java.util.Collection<org.apache.rat.license.ILicenseFamily>) iLicenseFamilyList31, iLicenseFamilyArray30);
        reportConfiguration29.addFamilies((java.util.Collection<org.apache.rat.license.ILicenseFamily>) iLicenseFamilyList31);
        org.apache.rat.report.IReportable iReportable34 = null;
        reportConfiguration29.setReportable(iReportable34);
        org.apache.rat.utils.ReportingSet<java.lang.String> strSet36 = new org.apache.rat.utils.ReportingSet<java.lang.String>();
        java.lang.Object[] objArray37 = strSet36.toArray();
        org.apache.rat.utils.Log log38 = null;
        org.apache.rat.ReportConfiguration reportConfiguration39 = new org.apache.rat.ReportConfiguration(log38);
        org.apache.rat.report.claim.ClaimStatistic claimStatistic40 = org.apache.rat.Reporter.report(reportConfiguration39);
        org.apache.rat.utils.Log log41 = null;
        org.apache.rat.ReportConfiguration reportConfiguration42 = new org.apache.rat.ReportConfiguration(log41);
        org.apache.rat.report.claim.ClaimStatistic claimStatistic43 = org.apache.rat.Reporter.report(reportConfiguration42);
        org.apache.rat.utils.ReportingSet.Options options44 = org.apache.rat.utils.ReportingSet.Options.OVERWRITE;
        reportConfiguration42.licenseDuplicateOption(options44);
        reportConfiguration39.familyDuplicateOption(options44);
        org.apache.commons.io.function.IOSupplier<java.io.PrintWriter> printWriterIOSupplier47 = reportConfiguration39.getWriter();
        boolean boolean48 = reportConfiguration39.isAddingLicensesForced();
        org.apache.rat.utils.Log log49 = null;
        org.apache.rat.ReportConfiguration reportConfiguration50 = new org.apache.rat.ReportConfiguration(log49);
        reportConfiguration50.addApprovedLicenseCategory(".cvsignore");
        org.apache.rat.utils.Log.Level level53 = org.apache.rat.utils.Log.Level.ERROR;
        reportConfiguration50.logFamilyCollisions(level53);
        reportConfiguration39.logLicenseCollisions(level53);
        org.apache.rat.utils.ReportingSet<java.lang.String> strSet56 = strSet36.setLogLevel(level53);
        java.util.stream.Stream<java.lang.String> strStream57 = strSet56.stream();
        reportConfiguration29.addApprovedLicenseCategories((java.util.Collection<java.lang.String>) strSet56);
        org.apache.rat.utils.Log log59 = null;
        org.apache.rat.ReportConfiguration reportConfiguration60 = new org.apache.rat.ReportConfiguration(log59);
        org.apache.rat.report.claim.ClaimStatistic claimStatistic61 = org.apache.rat.Reporter.report(reportConfiguration60);
        org.apache.rat.report.IReportable iReportable62 = null;
        reportConfiguration60.setReportable(iReportable62);
        org.apache.rat.license.ILicense iLicense64 = null;
        reportConfiguration60.addLicense(iLicense64);
        org.apache.rat.utils.Log log66 = null;
        org.apache.rat.ReportConfiguration reportConfiguration67 = new org.apache.rat.ReportConfiguration(log66);
        org.apache.rat.utils.ReportingSet.Options options68 = org.apache.rat.utils.ReportingSet.Options.OVERWRITE;
        reportConfiguration67.licenseDuplicateOption(options68);
        reportConfiguration60.familyDuplicateOption(options68);
        reportConfiguration29.familyDuplicateOption(options68);
        org.apache.commons.io.function.IOSupplier<java.io.InputStream> inputStreamIOSupplier72 = org.apache.rat.Defaults.getUnapprovedLicensesStyleSheet();
        reportConfiguration29.setStyleSheet(inputStreamIOSupplier72);
        java.lang.String[] strArray79 = new java.lang.String[] { "http://org/apache/rat/meta-data#LicenseFamilyCategory", "Datum [ name ='http://org/apache/rat/meta-data#LicenseFamilyCategory',value ='GPL1  ']", "MANIFEST.MF", "AllBuilder:", "The MIT License" };
        org.apache.rat.utils.ReportingSet<java.lang.String> strSet80 = new org.apache.rat.utils.ReportingSet<java.lang.String>();
        boolean boolean81 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strSet80, strArray79);
        boolean boolean83 = strSet80.addIfNotPresent("http://org/apache/rat/meta-data#LicenseFamilyName");
        boolean boolean85 = strSet80.addIfNotPresent("ef7a8b13-64c3-4510-bb0c-dbf208e1e73f");
        java.util.stream.Stream<java.lang.String> strStream86 = strSet80.stream();
        org.apache.rat.utils.DefaultLog defaultLog87 = org.apache.rat.utils.DefaultLog.INSTANCE;
        org.apache.rat.utils.Log log88 = null;
        org.apache.rat.ReportConfiguration reportConfiguration89 = new org.apache.rat.ReportConfiguration(log88);
        reportConfiguration89.addApprovedLicenseCategory(".cvsignore");
        org.apache.rat.utils.Log.Level level92 = org.apache.rat.utils.Log.Level.ERROR;
        reportConfiguration89.logFamilyCollisions(level92);
        defaultLog87.setLevel(level92);
        org.apache.rat.utils.ReportingSet<java.lang.String> strSet95 = strSet80.setLogLevel(level92);
        boolean boolean96 = strSet95.isEmpty();
        reportConfiguration29.addApprovedLicenseCategories((java.util.Collection<java.lang.String>) strSet95);
        reportConfiguration1.addApprovedLicenseCategories((java.util.Collection<java.lang.String>) strSet95);
        org.junit.Assert.assertNull(claimStatistic2);
        org.junit.Assert.assertNotNull(outputStreamIOSupplier3);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertTrue("'" + format10 + "' != '" + org.apache.rat.configuration.Format.XML + "'", format10.equals(org.apache.rat.configuration.Format.XML));
        org.junit.Assert.assertNotNull(licenseReader11);
        org.junit.Assert.assertNotNull(matcherReader12);
        org.junit.Assert.assertNotNull(licenseReader13);
        org.junit.Assert.assertNotNull(iLicenseSet14);
        org.junit.Assert.assertNull(iLicense15);
        org.junit.Assert.assertTrue("'" + int17 + "' != '" + 0 + "'", int17 == 0);
        org.junit.Assert.assertNotNull(iLicenseFamilyArray19);
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + false + "'", boolean21 == false);
        org.junit.Assert.assertNotNull(iLicenseFamilySet23);
        org.junit.Assert.assertNotNull(iLicenseFamilySet24);
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + false + "'", boolean25 == false);
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + true + "'", boolean26 == true);
        org.junit.Assert.assertNotNull(iLicenseFamilyArray30);
        org.junit.Assert.assertTrue("'" + boolean32 + "' != '" + false + "'", boolean32 == false);
        org.junit.Assert.assertNotNull(objArray37);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray37), "[]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray37), "[]");
        org.junit.Assert.assertNull(claimStatistic40);
        org.junit.Assert.assertNull(claimStatistic43);
        org.junit.Assert.assertTrue("'" + options44 + "' != '" + org.apache.rat.utils.ReportingSet.Options.OVERWRITE + "'", options44.equals(org.apache.rat.utils.ReportingSet.Options.OVERWRITE));
        org.junit.Assert.assertNotNull(printWriterIOSupplier47);
        org.junit.Assert.assertTrue("'" + boolean48 + "' != '" + false + "'", boolean48 == false);
        org.junit.Assert.assertTrue("'" + level53 + "' != '" + org.apache.rat.utils.Log.Level.ERROR + "'", level53.equals(org.apache.rat.utils.Log.Level.ERROR));
        org.junit.Assert.assertNotNull(strSet56);
        org.junit.Assert.assertNotNull(strStream57);
        org.junit.Assert.assertNull(claimStatistic61);
        org.junit.Assert.assertTrue("'" + options68 + "' != '" + org.apache.rat.utils.ReportingSet.Options.OVERWRITE + "'", options68.equals(org.apache.rat.utils.ReportingSet.Options.OVERWRITE));
        org.junit.Assert.assertNotNull(inputStreamIOSupplier72);
        org.junit.Assert.assertNotNull(strArray79);
        org.junit.Assert.assertTrue("'" + boolean81 + "' != '" + true + "'", boolean81 == true);
        org.junit.Assert.assertTrue("'" + boolean83 + "' != '" + true + "'", boolean83 == true);
        org.junit.Assert.assertTrue("'" + boolean85 + "' != '" + true + "'", boolean85 == true);
        org.junit.Assert.assertNotNull(strStream86);
        org.junit.Assert.assertNotNull(defaultLog87);
        org.junit.Assert.assertTrue("'" + level92 + "' != '" + org.apache.rat.utils.Log.Level.ERROR + "'", level92.equals(org.apache.rat.utils.Log.Level.ERROR));
        org.junit.Assert.assertNotNull(strSet95);
        org.junit.Assert.assertTrue("'" + boolean96 + "' != '" + false + "'", boolean96 == false);
    }

    @Test
    public void test12869() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest25.test12869");
        java.lang.String[] strArray5 = new java.lang.String[] { "http://org/apache/rat/meta-data#LicenseFamilyCategory", "Datum [ name ='http://org/apache/rat/meta-data#LicenseFamilyCategory',value ='GPL1  ']", "MANIFEST.MF", "AllBuilder:", "The MIT License" };
        org.apache.rat.utils.ReportingSet<java.lang.String> strSet6 = new org.apache.rat.utils.ReportingSet<java.lang.String>();
        boolean boolean7 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strSet6, strArray5);
        boolean boolean9 = strSet6.addIfNotPresent("http://org/apache/rat/meta-data#LicenseFamilyName");
        boolean boolean11 = strSet6.addIfNotPresent("ef7a8b13-64c3-4510-bb0c-dbf208e1e73f");
        java.util.stream.Stream<java.lang.String> strStream12 = strSet6.stream();
        org.apache.rat.utils.DefaultLog defaultLog13 = org.apache.rat.utils.DefaultLog.INSTANCE;
        org.apache.rat.utils.Log log14 = null;
        org.apache.rat.ReportConfiguration reportConfiguration15 = new org.apache.rat.ReportConfiguration(log14);
        reportConfiguration15.addApprovedLicenseCategory(".cvsignore");
        org.apache.rat.utils.Log.Level level18 = org.apache.rat.utils.Log.Level.ERROR;
        reportConfiguration15.logFamilyCollisions(level18);
        defaultLog13.setLevel(level18);
        org.apache.rat.utils.ReportingSet<java.lang.String> strSet21 = strSet6.setLogLevel(level18);
        boolean boolean23 = strSet21.addIfNotPresent("OASIS Open License");
        java.util.Iterator<java.lang.String> strItor24 = strSet21.iterator();
        org.apache.rat.utils.ReportingSet<java.lang.String> strSet27 = strSet21.subSet("MathcerRefBuilder: t true", "PLAIN");
        org.apache.rat.license.ILicenseFamilyBuilder iLicenseFamilyBuilder28 = new org.apache.rat.license.ILicenseFamilyBuilder();
        java.lang.String str29 = iLicenseFamilyBuilder28.getCategory();
        org.apache.rat.license.ILicenseFamily.Builder builder31 = iLicenseFamilyBuilder28.setLicenseFamilyCategory("false");
        org.apache.rat.license.ILicenseFamily.Builder builder33 = iLicenseFamilyBuilder28.setLicenseFamilyName("Copyright Builder: s:null e:.cvsignore o:null");
        org.apache.rat.license.ILicenseFamily.Builder builder35 = iLicenseFamilyBuilder28.setLicenseFamilyName("");
        boolean boolean36 = strSet27.remove((java.lang.Object) "");
        // The following exception was thrown during execution in test generation
        try {
            org.apache.rat.utils.ReportingSet<java.lang.String> strSet38 = strSet27.headSet("bb19fbac-b846-4793-a7d7-77a7e009c631");
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: toKey out of range");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(strArray5);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + true + "'", boolean7 == true);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + true + "'", boolean9 == true);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + true + "'", boolean11 == true);
        org.junit.Assert.assertNotNull(strStream12);
        org.junit.Assert.assertNotNull(defaultLog13);
        org.junit.Assert.assertTrue("'" + level18 + "' != '" + org.apache.rat.utils.Log.Level.ERROR + "'", level18.equals(org.apache.rat.utils.Log.Level.ERROR));
        org.junit.Assert.assertNotNull(strSet21);
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + true + "'", boolean23 == true);
        org.junit.Assert.assertNotNull(strItor24);
        org.junit.Assert.assertNotNull(strSet27);
        org.junit.Assert.assertNull(str29);
        org.junit.Assert.assertNotNull(builder31);
        org.junit.Assert.assertNotNull(builder33);
        org.junit.Assert.assertNotNull(builder35);
        org.junit.Assert.assertTrue("'" + boolean36 + "' != '" + false + "'", boolean36 == false);
    }

    @Test
    public void test12870() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest25.test12870");
        org.apache.rat.api.MetaData metaData0 = new org.apache.rat.api.MetaData();
        java.lang.String str2 = metaData0.value("COMMON DEVELOPMENT AND DISTRIBUTION LICENSE Version 1.0");
        java.util.Collection<org.apache.rat.api.MetaData.Datum> datumCollection3 = metaData0.getData();
        java.lang.String str5 = metaData0.value("hi!");
        metaData0.clear();
        boolean boolean8 = metaData0.clear("7E27CD62-4403-40AB-A9F5-16E7C59AB2F1");
        org.apache.rat.api.MetaData.Datum datum10 = metaData0.get("Copyright Builder: s:90663eff-7ed8-41bd-85a8-e8f189198bc6 e:null o:null");
        org.apache.rat.api.MetaData.Datum datum12 = metaData0.get("26befe44-3963-441c-b461-10e25182f535");
        org.apache.rat.api.MetaData metaData13 = new org.apache.rat.api.MetaData();
        java.lang.String str15 = metaData13.value("COMMON DEVELOPMENT AND DISTRIBUTION LICENSE Version 1.0");
        java.lang.String str17 = metaData13.value("W3C Document Copyright");
        boolean boolean19 = metaData13.clear("hi!");
        java.lang.String str21 = metaData13.value("true");
        org.apache.rat.api.MetaData.Datum datum23 = metaData13.get("GNU General Public License, version 1");
        org.apache.rat.api.MetaData.Datum datum25 = metaData13.get("http:");
        org.apache.rat.api.MetaData.Datum datum27 = metaData13.get("TextBuilder: ");
        java.util.Collection<org.apache.rat.api.MetaData.Datum> datumCollection28 = metaData13.getData();
        org.apache.rat.api.MetaData metaData29 = new org.apache.rat.api.MetaData();
        java.lang.String str31 = metaData29.value("COMMON DEVELOPMENT AND DISTRIBUTION LICENSE Version 1.0");
        org.apache.rat.api.MetaData.Datum datum33 = metaData29.get("Copyright Builder: s:null e:.cvsignore o:null");
        java.lang.String str35 = metaData29.value("W3C Software Copyright");
        java.lang.String str37 = metaData29.value("null http://org/apache/rat/meta-data#LicenseFamilyName");
        org.apache.rat.api.MetaData.Datum datum38 = org.apache.rat.api.MetaData.RAT_APPROVED_LICENSE_DATUM_FALSE;
        metaData29.add(datum38);
        metaData13.set(datum38);
        metaData0.set(datum38);
        java.lang.String str42 = datum38.getName();
        java.lang.String str43 = datum38.getName();
        org.junit.Assert.assertNull(str2);
        org.junit.Assert.assertNotNull(datumCollection3);
        org.junit.Assert.assertNull(str5);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertNull(datum10);
        org.junit.Assert.assertNull(datum12);
        org.junit.Assert.assertNull(str15);
        org.junit.Assert.assertNull(str17);
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + false + "'", boolean19 == false);
        org.junit.Assert.assertNull(str21);
        org.junit.Assert.assertNull(datum23);
        org.junit.Assert.assertNull(datum25);
        org.junit.Assert.assertNull(datum27);
        org.junit.Assert.assertNotNull(datumCollection28);
        org.junit.Assert.assertNull(str31);
        org.junit.Assert.assertNull(datum33);
        org.junit.Assert.assertNull(str35);
        org.junit.Assert.assertNull(str37);
        org.junit.Assert.assertNotNull(datum38);
        org.junit.Assert.assertEquals("'" + str42 + "' != '" + "http://org/apache/rat/meta-data#ApprovedLicense" + "'", str42, "http://org/apache/rat/meta-data#ApprovedLicense");
        org.junit.Assert.assertEquals("'" + str43 + "' != '" + "http://org/apache/rat/meta-data#ApprovedLicense" + "'", str43, "http://org/apache/rat/meta-data#ApprovedLicense");
    }

    @Test
    public void test12871() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest25.test12871");
        java.util.regex.Pattern pattern2 = null;
        org.apache.rat.analysis.matchers.SimpleRegexMatcher simpleRegexMatcher3 = new org.apache.rat.analysis.matchers.SimpleRegexMatcher("", pattern2);
        org.apache.rat.analysis.matchers.NotMatcher notMatcher4 = new org.apache.rat.analysis.matchers.NotMatcher("GNU General Public License, version 2", (org.apache.rat.analysis.IHeaderMatcher) simpleRegexMatcher3);
        org.apache.rat.analysis.IHeaderMatcher.State state5 = simpleRegexMatcher3.currentState();
        simpleRegexMatcher3.reset();
        java.lang.String str7 = simpleRegexMatcher3.getId();
        org.apache.rat.analysis.IHeaderMatcher.State state8 = simpleRegexMatcher3.currentState();
        // The following exception was thrown during execution in test generation
        try {
            boolean boolean10 = simpleRegexMatcher3.doMatch("3c74a3ec-8235-4035-9db7-f9f475b48681");
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + state5 + "' != '" + org.apache.rat.analysis.IHeaderMatcher.State.i + "'", state5.equals(org.apache.rat.analysis.IHeaderMatcher.State.i));
// flaky:         org.junit.Assert.assertEquals("'" + str7 + "' != '" + "ccd5f660-07de-4716-9041-c8e07215d2b3" + "'", str7, "ccd5f660-07de-4716-9041-c8e07215d2b3");
        org.junit.Assert.assertTrue("'" + state8 + "' != '" + org.apache.rat.analysis.IHeaderMatcher.State.i + "'", state8.equals(org.apache.rat.analysis.IHeaderMatcher.State.i));
    }

    @Test
    public void test12872() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest25.test12872");
        boolean boolean1 = org.apache.rat.document.impl.guesser.BinaryGuesser.isExecutable("Datum [ name ='http://org/apache/rat/meta-data#LicenseFamilyCategory',value ='CDDL1 ']");
        org.junit.Assert.assertTrue("'" + boolean1 + "' != '" + false + "'", boolean1 == false);
    }

    @Test
    public void test12873() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest25.test12873");
        org.apache.rat.configuration.Format format0 = org.apache.rat.configuration.Format.XML;
        org.apache.rat.configuration.LicenseReader licenseReader1 = format0.licenseReader();
        org.apache.rat.configuration.MatcherReader matcherReader2 = format0.matcherReader();
        org.apache.rat.configuration.LicenseReader licenseReader3 = format0.licenseReader();
        org.apache.rat.configuration.LicenseReader licenseReader4 = format0.licenseReader();
        org.apache.rat.configuration.MatcherReader matcherReader5 = format0.matcherReader();
        org.apache.rat.configuration.LicenseReader licenseReader6 = format0.licenseReader();
        org.apache.rat.configuration.MatcherReader matcherReader7 = format0.matcherReader();
        org.apache.rat.configuration.MatcherReader matcherReader8 = format0.matcherReader();
        java.net.URL uRL9 = null;
        // The following exception was thrown during execution in test generation
        try {
            matcherReader8.addMatchers(uRL9);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + format0 + "' != '" + org.apache.rat.configuration.Format.XML + "'", format0.equals(org.apache.rat.configuration.Format.XML));
        org.junit.Assert.assertNotNull(licenseReader1);
        org.junit.Assert.assertNotNull(matcherReader2);
        org.junit.Assert.assertNotNull(licenseReader3);
        org.junit.Assert.assertNotNull(licenseReader4);
        org.junit.Assert.assertNotNull(matcherReader5);
        org.junit.Assert.assertNotNull(licenseReader6);
        org.junit.Assert.assertNotNull(matcherReader7);
        org.junit.Assert.assertNotNull(matcherReader8);
    }

    @Test
    public void test12874() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest25.test12874");
        org.apache.rat.utils.ReportingSet<java.lang.String> strSet0 = new org.apache.rat.utils.ReportingSet<java.lang.String>();
        int int1 = strSet0.size();
        org.apache.rat.utils.ReportingSet<java.lang.String> strSet3 = strSet0.headSet("?????");
        org.apache.rat.utils.ReportingSet<java.lang.String> strSet5 = strSet0.tailSet("W3C Document Copyright");
        java.util.stream.Stream<java.lang.String> strStream6 = strSet0.parallelStream();
        int int7 = strSet0.size();
        java.util.stream.Stream<java.lang.String> strStream8 = strSet0.parallelStream();
        org.apache.rat.utils.ReportingSet<java.lang.String> strSet10 = strSet0.tailSet("GPL2 ");
        java.lang.Object[] objArray11 = strSet0.toArray();
        org.apache.rat.report.claim.ClaimStatistic claimStatistic12 = new org.apache.rat.report.claim.ClaimStatistic();
        claimStatistic12.setNumApproved((int) (short) 10);
        java.util.Map<java.lang.String, java.lang.Integer> strMap15 = null;
        claimStatistic12.setDocumentCategoryMap(strMap15);
        java.util.Map<java.lang.String, java.lang.Integer> strMap17 = null;
        claimStatistic12.setLicenseFileNameMap(strMap17);
        claimStatistic12.setNumUnknown(100);
        java.util.Map<java.lang.String, java.lang.Integer> strMap21 = null;
        claimStatistic12.setDocumentCategoryMap(strMap21);
        // The following exception was thrown during execution in test generation
        try {
            boolean boolean23 = strSet0.contains((java.lang.Object) strMap21);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + int1 + "' != '" + 0 + "'", int1 == 0);
        org.junit.Assert.assertNotNull(strSet3);
        org.junit.Assert.assertNotNull(strSet5);
        org.junit.Assert.assertNotNull(strStream6);
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 0 + "'", int7 == 0);
        org.junit.Assert.assertNotNull(strStream8);
        org.junit.Assert.assertNotNull(strSet10);
        org.junit.Assert.assertNotNull(objArray11);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray11), "[]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray11), "[]");
    }

    @Test
    public void test12875() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest25.test12875");
        org.apache.rat.license.ILicense.Builder builder0 = org.apache.rat.license.ILicense.builder();
        org.apache.rat.license.ILicense.Builder builder2 = builder0.setLicenseFamilyCategory("");
        org.apache.rat.analysis.matchers.FullTextMatcher fullTextMatcher4 = new org.apache.rat.analysis.matchers.FullTextMatcher("ef7a8b13-64c3-4510-bb0c-dbf208e1e73f");
        org.apache.rat.license.ILicense.Builder builder5 = builder0.setMatcher((org.apache.rat.analysis.IHeaderMatcher) fullTextMatcher4);
        java.util.regex.Pattern pattern7 = null;
        org.apache.rat.analysis.matchers.SimpleRegexMatcher simpleRegexMatcher8 = new org.apache.rat.analysis.matchers.SimpleRegexMatcher("", pattern7);
        java.lang.String str9 = simpleRegexMatcher8.toString();
        simpleRegexMatcher8.reset();
        java.lang.String str11 = simpleRegexMatcher8.getId();
        org.apache.rat.license.ILicense.Builder builder12 = builder5.setMatcher((org.apache.rat.analysis.IHeaderMatcher) simpleRegexMatcher8);
        org.apache.rat.license.ILicense.Builder builder14 = builder5.setId("d25f13bc-1910-4451-97b5-b72663551a5d");
        org.apache.rat.analysis.matchers.SPDXMatcherFactory sPDXMatcherFactory15 = org.apache.rat.analysis.matchers.SPDXMatcherFactory.INSTANCE;
        org.apache.rat.analysis.IHeaderMatcher iHeaderMatcher17 = sPDXMatcherFactory15.create("GPL3 ");
        org.apache.rat.analysis.IHeaderMatcher iHeaderMatcher19 = sPDXMatcherFactory15.create("6620e9ee-d651-4c18-8162-edad6d18368e");
        org.apache.rat.analysis.IHeaderMatcher iHeaderMatcher21 = sPDXMatcherFactory15.create("Copyright Builder: s:null e:null o:null");
        org.apache.rat.analysis.IHeaderMatcher iHeaderMatcher23 = sPDXMatcherFactory15.create("TextBuilder: 4a00cf7d-fe76-423e-9...");
        org.apache.rat.license.ILicense.Builder builder24 = builder14.setMatcher(iHeaderMatcher23);
        org.apache.rat.analysis.matchers.SimpleTextMatcher simpleTextMatcher26 = new org.apache.rat.analysis.matchers.SimpleTextMatcher("f06626c1-35ed-4c9c-a3c4-db199c6e7bfb");
        boolean boolean28 = simpleTextMatcher26.doMatch("65e45");
        org.apache.rat.license.ILicense.Builder builder29 = builder14.setMatcher((org.apache.rat.analysis.IHeaderMatcher) simpleTextMatcher26);
        org.junit.Assert.assertNotNull(builder0);
        org.junit.Assert.assertNotNull(builder2);
        org.junit.Assert.assertNotNull(builder5);
// flaky:         org.junit.Assert.assertEquals("'" + str9 + "' != '" + "cfd81561-e126-4536-bf92-7232a775b4bd" + "'", str9, "cfd81561-e126-4536-bf92-7232a775b4bd");
// flaky:         org.junit.Assert.assertEquals("'" + str11 + "' != '" + "cfd81561-e126-4536-bf92-7232a775b4bd" + "'", str11, "cfd81561-e126-4536-bf92-7232a775b4bd");
        org.junit.Assert.assertNotNull(builder12);
        org.junit.Assert.assertNotNull(builder14);
        org.junit.Assert.assertNotNull(sPDXMatcherFactory15);
        org.junit.Assert.assertNotNull(iHeaderMatcher17);
        org.junit.Assert.assertNotNull(iHeaderMatcher19);
        org.junit.Assert.assertNotNull(iHeaderMatcher21);
        org.junit.Assert.assertNotNull(iHeaderMatcher23);
        org.junit.Assert.assertNotNull(builder24);
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + false + "'", boolean28 == false);
        org.junit.Assert.assertNotNull(builder29);
    }

    @Test
    public void test12876() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest25.test12876");
        org.apache.rat.api.MetaData metaData0 = new org.apache.rat.api.MetaData();
        java.lang.String str2 = metaData0.value("COMMON DEVELOPMENT AND DISTRIBUTION LICENSE Version 1.0");
        java.lang.String str4 = metaData0.value("W3C Document Copyright");
        boolean boolean6 = metaData0.clear("hi!");
        metaData0.clear();
        boolean boolean9 = metaData0.clear("GNU General Public License, version 2");
        org.apache.rat.api.MetaData metaData10 = new org.apache.rat.api.MetaData();
        java.lang.String str12 = metaData10.value("COMMON DEVELOPMENT AND DISTRIBUTION LICENSE Version 1.0");
        java.lang.String str14 = metaData10.value("W3C Document Copyright");
        boolean boolean16 = metaData10.clear("hi!");
        java.lang.String str18 = metaData10.value("true");
        org.apache.rat.api.MetaData.Datum datum20 = metaData10.get("GNU General Public License, version 1");
        org.apache.rat.api.MetaData.Datum datum21 = org.apache.rat.api.MetaData.RAT_LICENSE_FAMILY_CATEGORY_DATUM_MIT;
        java.lang.String str22 = datum21.getName();
        metaData10.set(datum21);
        boolean boolean25 = metaData10.clear("TextBuilder: true http://org/apache/rat/meta-data#LicenseFamilyName");
        metaData10.clear();
        org.apache.rat.api.MetaData.Datum datum27 = org.apache.rat.api.MetaData.RAT_LICENSE_FAMILY_CATEGORY_DATUM_UNKNOWN;
        java.lang.String str28 = datum27.getValue();
        java.lang.String str29 = datum27.getValue();
        metaData10.set(datum27);
        metaData0.set(datum27);
        boolean boolean33 = metaData0.clear("491b6ccf-4ab4-4414-ac34-a9dc2423c7de");
        org.junit.Assert.assertNull(str2);
        org.junit.Assert.assertNull(str4);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertNull(str12);
        org.junit.Assert.assertNull(str14);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
        org.junit.Assert.assertNull(str18);
        org.junit.Assert.assertNull(datum20);
        org.junit.Assert.assertNotNull(datum21);
        org.junit.Assert.assertEquals("'" + str22 + "' != '" + "http://org/apache/rat/meta-data#LicenseFamilyCategory" + "'", str22, "http://org/apache/rat/meta-data#LicenseFamilyCategory");
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + false + "'", boolean25 == false);
        org.junit.Assert.assertNotNull(datum27);
        org.junit.Assert.assertEquals("'" + str28 + "' != '" + "?????" + "'", str28, "?????");
        org.junit.Assert.assertEquals("'" + str29 + "' != '" + "?????" + "'", str29, "?????");
        org.junit.Assert.assertTrue("'" + boolean33 + "' != '" + false + "'", boolean33 == false);
    }

    @Test
    public void test12877() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest25.test12877");
        org.apache.rat.utils.DefaultLog defaultLog0 = org.apache.rat.utils.DefaultLog.INSTANCE;
        org.apache.rat.utils.Log log1 = null;
        org.apache.rat.ReportConfiguration reportConfiguration2 = new org.apache.rat.ReportConfiguration(log1);
        java.io.FilenameFilter filenameFilter3 = reportConfiguration2.getInputFileFilter();
        org.apache.rat.license.LicenseSetFactory.LicenseFilter licenseFilter4 = org.apache.rat.license.LicenseSetFactory.LicenseFilter.all;
        java.util.SortedSet<org.apache.rat.license.ILicense> iLicenseSet5 = reportConfiguration2.getLicenses(licenseFilter4);
        org.apache.rat.config.AddLicenseHeaders addLicenseHeaders6 = org.apache.rat.config.AddLicenseHeaders.FALSE;
        reportConfiguration2.setAddLicenseHeaders(addLicenseHeaders6);
        org.apache.rat.utils.Log log8 = null;
        org.apache.rat.ReportConfiguration reportConfiguration9 = new org.apache.rat.ReportConfiguration(log8);
        org.apache.rat.report.claim.ClaimStatistic claimStatistic10 = org.apache.rat.Reporter.report(reportConfiguration9);
        org.apache.rat.license.LicenseSetFactory.LicenseFilter licenseFilter11 = org.apache.rat.license.LicenseSetFactory.LicenseFilter.all;
        org.apache.rat.Reporter.listLicenses(reportConfiguration9, licenseFilter11);
        org.apache.rat.Reporter.listLicenses(reportConfiguration2, licenseFilter11);
        org.apache.rat.utils.Log log14 = null;
        org.apache.rat.ReportConfiguration reportConfiguration15 = new org.apache.rat.ReportConfiguration(log14);
        java.io.FilenameFilter filenameFilter16 = reportConfiguration15.getInputFileFilter();
        org.apache.rat.license.LicenseSetFactory.LicenseFilter licenseFilter17 = org.apache.rat.license.LicenseSetFactory.LicenseFilter.all;
        java.util.SortedSet<org.apache.rat.license.ILicense> iLicenseSet18 = reportConfiguration15.getLicenses(licenseFilter17);
        org.apache.rat.config.AddLicenseHeaders addLicenseHeaders19 = org.apache.rat.config.AddLicenseHeaders.FALSE;
        reportConfiguration15.setAddLicenseHeaders(addLicenseHeaders19);
        org.apache.rat.utils.Log log21 = null;
        org.apache.rat.ReportConfiguration reportConfiguration22 = new org.apache.rat.ReportConfiguration(log21);
        org.apache.rat.report.claim.ClaimStatistic claimStatistic23 = org.apache.rat.Reporter.report(reportConfiguration22);
        org.apache.rat.license.LicenseSetFactory.LicenseFilter licenseFilter24 = org.apache.rat.license.LicenseSetFactory.LicenseFilter.all;
        org.apache.rat.Reporter.listLicenses(reportConfiguration22, licenseFilter24);
        org.apache.rat.Reporter.listLicenses(reportConfiguration15, licenseFilter24);
        org.apache.rat.Reporter.listLicenses(reportConfiguration2, licenseFilter24);
        org.apache.rat.utils.Log log28 = null;
        org.apache.rat.ReportConfiguration reportConfiguration29 = new org.apache.rat.ReportConfiguration(log28);
        org.apache.commons.io.function.IOSupplier<java.io.OutputStream> outputStreamIOSupplier30 = reportConfiguration29.getOutput();
        reportConfiguration2.setOut(outputStreamIOSupplier30);
        org.apache.rat.utils.Log log32 = null;
        org.apache.rat.ReportConfiguration reportConfiguration33 = new org.apache.rat.ReportConfiguration(log32);
        org.apache.rat.report.claim.ClaimStatistic claimStatistic34 = org.apache.rat.Reporter.report(reportConfiguration33);
        org.apache.rat.utils.Log log35 = null;
        org.apache.rat.ReportConfiguration reportConfiguration36 = new org.apache.rat.ReportConfiguration(log35);
        org.apache.rat.report.claim.ClaimStatistic claimStatistic37 = org.apache.rat.Reporter.report(reportConfiguration36);
        org.apache.rat.utils.ReportingSet.Options options38 = org.apache.rat.utils.ReportingSet.Options.OVERWRITE;
        reportConfiguration36.licenseDuplicateOption(options38);
        reportConfiguration33.familyDuplicateOption(options38);
        reportConfiguration2.licenseDuplicateOption(options38);
        reportConfiguration2.addApprovedLicenseCategory("W3C Document Copyright");
        org.apache.rat.utils.Log log44 = null;
        org.apache.rat.ReportConfiguration reportConfiguration45 = new org.apache.rat.ReportConfiguration(log44);
        reportConfiguration45.addApprovedLicenseCategory(".cvsignore");
        org.apache.rat.utils.Log.Level level48 = org.apache.rat.utils.Log.Level.ERROR;
        reportConfiguration45.logLicenseCollisions(level48);
        reportConfiguration2.logLicenseCollisions(level48);
        defaultLog0.setLevel(level48);
        org.apache.rat.ReportConfiguration reportConfiguration52 = new org.apache.rat.ReportConfiguration((org.apache.rat.utils.Log) defaultLog0);
        org.apache.rat.annotation.ApacheV2LicenseAppender apacheV2LicenseAppender54 = new org.apache.rat.annotation.ApacheV2LicenseAppender((org.apache.rat.utils.Log) defaultLog0, "Datum [ name ='d0774232-cdef-4507-a8b6-ac22a273dde3',value ='10ceccc6-9da0-47a6-810c-684cf0a59f88 ']");
        java.io.File file55 = null;
        // The following exception was thrown during execution in test generation
        try {
            apacheV2LicenseAppender54.append(file55);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(defaultLog0);
        org.junit.Assert.assertNull(filenameFilter3);
        org.junit.Assert.assertTrue("'" + licenseFilter4 + "' != '" + org.apache.rat.license.LicenseSetFactory.LicenseFilter.all + "'", licenseFilter4.equals(org.apache.rat.license.LicenseSetFactory.LicenseFilter.all));
        org.junit.Assert.assertNotNull(iLicenseSet5);
        org.junit.Assert.assertTrue("'" + addLicenseHeaders6 + "' != '" + org.apache.rat.config.AddLicenseHeaders.FALSE + "'", addLicenseHeaders6.equals(org.apache.rat.config.AddLicenseHeaders.FALSE));
        org.junit.Assert.assertNull(claimStatistic10);
        org.junit.Assert.assertTrue("'" + licenseFilter11 + "' != '" + org.apache.rat.license.LicenseSetFactory.LicenseFilter.all + "'", licenseFilter11.equals(org.apache.rat.license.LicenseSetFactory.LicenseFilter.all));
        org.junit.Assert.assertNull(filenameFilter16);
        org.junit.Assert.assertTrue("'" + licenseFilter17 + "' != '" + org.apache.rat.license.LicenseSetFactory.LicenseFilter.all + "'", licenseFilter17.equals(org.apache.rat.license.LicenseSetFactory.LicenseFilter.all));
        org.junit.Assert.assertNotNull(iLicenseSet18);
        org.junit.Assert.assertTrue("'" + addLicenseHeaders19 + "' != '" + org.apache.rat.config.AddLicenseHeaders.FALSE + "'", addLicenseHeaders19.equals(org.apache.rat.config.AddLicenseHeaders.FALSE));
        org.junit.Assert.assertNull(claimStatistic23);
        org.junit.Assert.assertTrue("'" + licenseFilter24 + "' != '" + org.apache.rat.license.LicenseSetFactory.LicenseFilter.all + "'", licenseFilter24.equals(org.apache.rat.license.LicenseSetFactory.LicenseFilter.all));
        org.junit.Assert.assertNotNull(outputStreamIOSupplier30);
        org.junit.Assert.assertNull(claimStatistic34);
        org.junit.Assert.assertNull(claimStatistic37);
        org.junit.Assert.assertTrue("'" + options38 + "' != '" + org.apache.rat.utils.ReportingSet.Options.OVERWRITE + "'", options38.equals(org.apache.rat.utils.ReportingSet.Options.OVERWRITE));
        org.junit.Assert.assertTrue("'" + level48 + "' != '" + org.apache.rat.utils.Log.Level.ERROR + "'", level48.equals(org.apache.rat.utils.Log.Level.ERROR));
    }

    @Test
    public void test12878() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest25.test12878");
        org.apache.rat.license.ILicense[] iLicenseArray0 = new org.apache.rat.license.ILicense[] {};
        java.util.TreeSet<org.apache.rat.license.ILicense> iLicenseSet1 = new java.util.TreeSet<org.apache.rat.license.ILicense>();
        boolean boolean2 = java.util.Collections.addAll((java.util.Collection<org.apache.rat.license.ILicense>) iLicenseSet1, iLicenseArray0);
        java.lang.String[] strArray15 = new java.lang.String[] { "GPL2 ", "GPL1 ", "notice", "http://org/apache/rat/meta-data#LicenseFamilyName", "notice", "GPL2 ", "http://org/apache/rat/meta-data#LicenseFamilyName", "", "GPL2 ", "", "GPL1 ", "hi!" };
        java.util.ArrayList<java.lang.String> strList16 = new java.util.ArrayList<java.lang.String>();
        boolean boolean17 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strList16, strArray15);
        org.apache.rat.license.LicenseSetFactory licenseSetFactory18 = new org.apache.rat.license.LicenseSetFactory((java.util.SortedSet<org.apache.rat.license.ILicense>) iLicenseSet1, (java.util.Collection<java.lang.String>) strList16);
        org.apache.rat.configuration.Format format19 = org.apache.rat.configuration.Format.XML;
        org.apache.rat.configuration.LicenseReader licenseReader20 = format19.licenseReader();
        java.util.SortedSet<java.lang.String> strSet21 = licenseReader20.approvedLicenseId();
        org.apache.rat.license.LicenseSetFactory licenseSetFactory22 = new org.apache.rat.license.LicenseSetFactory((java.util.SortedSet<org.apache.rat.license.ILicense>) iLicenseSet1, (java.util.Collection<java.lang.String>) strSet21);
        org.apache.rat.license.ILicense[] iLicenseArray24 = new org.apache.rat.license.ILicense[] {};
        java.util.TreeSet<org.apache.rat.license.ILicense> iLicenseSet25 = new java.util.TreeSet<org.apache.rat.license.ILicense>();
        boolean boolean26 = java.util.Collections.addAll((java.util.Collection<org.apache.rat.license.ILicense>) iLicenseSet25, iLicenseArray24);
        java.lang.String[] strArray39 = new java.lang.String[] { "GPL2 ", "GPL1 ", "notice", "http://org/apache/rat/meta-data#LicenseFamilyName", "notice", "GPL2 ", "http://org/apache/rat/meta-data#LicenseFamilyName", "", "GPL2 ", "", "GPL1 ", "hi!" };
        java.util.ArrayList<java.lang.String> strList40 = new java.util.ArrayList<java.lang.String>();
        boolean boolean41 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strList40, strArray39);
        org.apache.rat.license.LicenseSetFactory licenseSetFactory42 = new org.apache.rat.license.LicenseSetFactory((java.util.SortedSet<org.apache.rat.license.ILicense>) iLicenseSet25, (java.util.Collection<java.lang.String>) strList40);
        org.apache.rat.license.ILicense iLicense43 = org.apache.rat.license.LicenseSetFactory.search("GNU General Public License, version 1", (java.util.SortedSet<org.apache.rat.license.ILicense>) iLicenseSet25);
        org.apache.rat.utils.ReportingSet<org.apache.rat.license.ILicense> iLicenseSet44 = new org.apache.rat.utils.ReportingSet<org.apache.rat.license.ILicense>((java.util.SortedSet<org.apache.rat.license.ILicense>) iLicenseSet25);
        org.apache.rat.utils.ReportingSet<org.apache.rat.license.ILicense> iLicenseSet45 = new org.apache.rat.utils.ReportingSet<org.apache.rat.license.ILicense>((java.util.SortedSet<org.apache.rat.license.ILicense>) iLicenseSet25);
        java.lang.String[] strArray51 = new java.lang.String[] { "http://org/apache/rat/meta-data#LicenseFamilyCategory", "Datum [ name ='http://org/apache/rat/meta-data#LicenseFamilyCategory',value ='GPL1  ']", "MANIFEST.MF", "AllBuilder:", "The MIT License" };
        org.apache.rat.utils.ReportingSet<java.lang.String> strSet52 = new org.apache.rat.utils.ReportingSet<java.lang.String>();
        boolean boolean53 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strSet52, strArray51);
        boolean boolean55 = strSet52.addIfNotPresent("http://org/apache/rat/meta-data#LicenseFamilyName");
        boolean boolean57 = strSet52.addIfNotPresent("ef7a8b13-64c3-4510-bb0c-dbf208e1e73f");
        java.util.function.Function<java.lang.String, java.lang.String> strFunction58 = null;
        org.apache.rat.utils.ReportingSet<java.lang.String> strSet59 = strSet52.setMsgFormat(strFunction58);
        boolean boolean60 = strSet52.isEmpty();
        boolean boolean62 = strSet52.addIfNotPresent("OASIS Open License");
        org.apache.rat.utils.Log log63 = null;
        org.apache.rat.ReportConfiguration reportConfiguration64 = new org.apache.rat.ReportConfiguration(log63);
        org.apache.rat.report.claim.ClaimStatistic claimStatistic65 = org.apache.rat.Reporter.report(reportConfiguration64);
        org.apache.rat.utils.Log log66 = null;
        org.apache.rat.ReportConfiguration reportConfiguration67 = new org.apache.rat.ReportConfiguration(log66);
        org.apache.rat.report.claim.ClaimStatistic claimStatistic68 = org.apache.rat.Reporter.report(reportConfiguration67);
        org.apache.rat.utils.ReportingSet.Options options69 = org.apache.rat.utils.ReportingSet.Options.OVERWRITE;
        reportConfiguration67.licenseDuplicateOption(options69);
        reportConfiguration64.familyDuplicateOption(options69);
        org.apache.commons.io.function.IOSupplier<java.io.PrintWriter> printWriterIOSupplier72 = reportConfiguration64.getWriter();
        org.apache.rat.utils.Log log73 = null;
        org.apache.rat.ReportConfiguration reportConfiguration74 = new org.apache.rat.ReportConfiguration(log73);
        reportConfiguration74.addApprovedLicenseCategory(".cvsignore");
        org.apache.rat.utils.Log.Level level77 = org.apache.rat.utils.Log.Level.ERROR;
        reportConfiguration74.logFamilyCollisions(level77);
        reportConfiguration64.logFamilyCollisions(level77);
        org.apache.rat.utils.ReportingSet<java.lang.String> strSet80 = strSet52.setLogLevel(level77);
        org.apache.rat.utils.ReportingSet<java.lang.String> strSet82 = strSet52.tailSet("bd015714-405b-4304-9faa-36efad80e6e6 GEN  ");
        java.util.stream.Stream<java.lang.String> strStream83 = strSet82.parallelStream();
        org.apache.rat.license.LicenseSetFactory licenseSetFactory84 = new org.apache.rat.license.LicenseSetFactory((java.util.SortedSet<org.apache.rat.license.ILicense>) iLicenseSet25, (java.util.Collection<java.lang.String>) strSet82);
        org.apache.rat.Defaults.Builder builder85 = org.apache.rat.Defaults.builder();
        org.apache.rat.Defaults defaults86 = builder85.build();
        org.apache.rat.license.LicenseSetFactory.LicenseFilter licenseFilter87 = org.apache.rat.license.LicenseSetFactory.LicenseFilter.approved;
        java.util.SortedSet<org.apache.rat.license.ILicenseFamily> iLicenseFamilySet88 = defaults86.getLicenseFamilies(licenseFilter87);
        java.util.SortedSet<org.apache.rat.license.ILicenseFamily> iLicenseFamilySet89 = licenseSetFactory84.getLicenseFamilies(licenseFilter87);
        java.util.SortedSet<java.lang.String> strSet90 = licenseSetFactory22.getLicenseFamilyIds(licenseFilter87);
        org.junit.Assert.assertNotNull(iLicenseArray0);
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + false + "'", boolean2 == false);
        org.junit.Assert.assertNotNull(strArray15);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + true + "'", boolean17 == true);
        org.junit.Assert.assertTrue("'" + format19 + "' != '" + org.apache.rat.configuration.Format.XML + "'", format19.equals(org.apache.rat.configuration.Format.XML));
        org.junit.Assert.assertNotNull(licenseReader20);
        org.junit.Assert.assertNotNull(strSet21);
        org.junit.Assert.assertNotNull(iLicenseArray24);
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + false + "'", boolean26 == false);
        org.junit.Assert.assertNotNull(strArray39);
        org.junit.Assert.assertTrue("'" + boolean41 + "' != '" + true + "'", boolean41 == true);
        org.junit.Assert.assertNull(iLicense43);
        org.junit.Assert.assertNotNull(strArray51);
        org.junit.Assert.assertTrue("'" + boolean53 + "' != '" + true + "'", boolean53 == true);
        org.junit.Assert.assertTrue("'" + boolean55 + "' != '" + true + "'", boolean55 == true);
        org.junit.Assert.assertTrue("'" + boolean57 + "' != '" + true + "'", boolean57 == true);
        org.junit.Assert.assertNotNull(strSet59);
        org.junit.Assert.assertTrue("'" + boolean60 + "' != '" + false + "'", boolean60 == false);
        org.junit.Assert.assertTrue("'" + boolean62 + "' != '" + true + "'", boolean62 == true);
        org.junit.Assert.assertNull(claimStatistic65);
        org.junit.Assert.assertNull(claimStatistic68);
        org.junit.Assert.assertTrue("'" + options69 + "' != '" + org.apache.rat.utils.ReportingSet.Options.OVERWRITE + "'", options69.equals(org.apache.rat.utils.ReportingSet.Options.OVERWRITE));
        org.junit.Assert.assertNotNull(printWriterIOSupplier72);
        org.junit.Assert.assertTrue("'" + level77 + "' != '" + org.apache.rat.utils.Log.Level.ERROR + "'", level77.equals(org.apache.rat.utils.Log.Level.ERROR));
        org.junit.Assert.assertNotNull(strSet80);
        org.junit.Assert.assertNotNull(strSet82);
        org.junit.Assert.assertNotNull(strStream83);
        org.junit.Assert.assertNotNull(builder85);
        org.junit.Assert.assertNotNull(defaults86);
        org.junit.Assert.assertTrue("'" + licenseFilter87 + "' != '" + org.apache.rat.license.LicenseSetFactory.LicenseFilter.approved + "'", licenseFilter87.equals(org.apache.rat.license.LicenseSetFactory.LicenseFilter.approved));
        org.junit.Assert.assertNotNull(iLicenseFamilySet88);
        org.junit.Assert.assertNotNull(iLicenseFamilySet89);
        org.junit.Assert.assertNotNull(strSet90);
    }

    @Test
    public void test12879() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest25.test12879");
        java.util.regex.Pattern pattern1 = null;
        org.apache.rat.analysis.matchers.SimpleRegexMatcher simpleRegexMatcher2 = new org.apache.rat.analysis.matchers.SimpleRegexMatcher("da66b7f2-d322-468d-9fbb-171364cff2b2", pattern1);
        simpleRegexMatcher2.reset();
    }

    @Test
    public void test12880() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest25.test12880");
        org.apache.rat.utils.DefaultLog defaultLog0 = org.apache.rat.utils.DefaultLog.INSTANCE;
        org.apache.rat.license.ILicense.Builder builder1 = org.apache.rat.license.ILicense.builder();
        org.apache.rat.license.ILicense.Builder builder3 = builder1.setLicenseFamilyCategory("");
        org.apache.rat.analysis.matchers.CopyrightMatcher copyrightMatcher7 = new org.apache.rat.analysis.matchers.CopyrightMatcher("", "GPL1 ", "hi!");
        org.apache.rat.analysis.IHeaderMatcher.State state8 = copyrightMatcher7.finalizeState();
        org.apache.rat.license.ILicense.Builder builder9 = builder3.setMatcher((org.apache.rat.analysis.IHeaderMatcher) copyrightMatcher7);
        org.apache.rat.license.ILicense.Builder builder11 = builder9.setLicenseFamilyCategory("");
        defaultLog0.error((java.lang.Object) builder11);
        org.apache.rat.utils.Log.Level level13 = org.apache.rat.utils.Log.Level.DEBUG;
        defaultLog0.setLevel(level13);
        org.apache.rat.annotation.ApacheV2LicenseAppender apacheV2LicenseAppender16 = new org.apache.rat.annotation.ApacheV2LicenseAppender((org.apache.rat.utils.Log) defaultLog0, "ffa6f6cf-d0e9-457f-aa74-6d159e7c6009");
        org.apache.rat.annotation.ApacheV2LicenseAppender apacheV2LicenseAppender18 = new org.apache.rat.annotation.ApacheV2LicenseAppender((org.apache.rat.utils.Log) defaultLog0, "70c3a0ba-1174-4b62-ba88-76dbbb88e3b3");
        org.apache.rat.annotation.ApacheV2LicenseAppender apacheV2LicenseAppender20 = new org.apache.rat.annotation.ApacheV2LicenseAppender((org.apache.rat.utils.Log) defaultLog0, "55614104-0318-4696-AD8F-51F38556D5D6");
        org.junit.Assert.assertNotNull(defaultLog0);
        org.junit.Assert.assertNotNull(builder1);
        org.junit.Assert.assertNotNull(builder3);
        org.junit.Assert.assertTrue("'" + state8 + "' != '" + org.apache.rat.analysis.IHeaderMatcher.State.f + "'", state8.equals(org.apache.rat.analysis.IHeaderMatcher.State.f));
        org.junit.Assert.assertNotNull(builder9);
        org.junit.Assert.assertNotNull(builder11);
        org.junit.Assert.assertTrue("'" + level13 + "' != '" + org.apache.rat.utils.Log.Level.DEBUG + "'", level13.equals(org.apache.rat.utils.Log.Level.DEBUG));
    }

    @Test
    public void test12881() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest25.test12881");
        org.apache.rat.configuration.builders.CopyrightBuilder copyrightBuilder0 = org.apache.rat.analysis.IHeaderMatcher.Builder.copyright();
        java.lang.String str1 = copyrightBuilder0.toString();
        org.apache.rat.configuration.builders.CopyrightBuilder copyrightBuilder3 = copyrightBuilder0.setEnd(".cvsignore");
        boolean boolean4 = copyrightBuilder0.hasId();
        org.apache.rat.configuration.builders.CopyrightBuilder copyrightBuilder6 = copyrightBuilder0.setOwner("3c840dc2-bef0-42b5-b26c-35a568d53a24");
        org.apache.rat.configuration.builders.CopyrightBuilder copyrightBuilder8 = copyrightBuilder6.setOwner("GPL1 ");
        java.lang.String str9 = copyrightBuilder6.toString();
        org.apache.rat.configuration.builders.CopyrightBuilder copyrightBuilder11 = copyrightBuilder6.setStart("Datum [ name ='http://org/apache/rat/meta-data#LicenseFamilyCategory',value ='GPL1  ']");
        org.apache.rat.analysis.IHeaderMatcher iHeaderMatcher12 = copyrightBuilder6.build();
        org.apache.rat.analysis.IHeaderMatcher.State state13 = iHeaderMatcher12.currentState();
        org.apache.rat.analysis.IHeaderMatcher.State state14 = iHeaderMatcher12.finalizeState();
        org.junit.Assert.assertNotNull(copyrightBuilder0);
        org.junit.Assert.assertEquals("'" + str1 + "' != '" + "Copyright Builder: s:null e:null o:null" + "'", str1, "Copyright Builder: s:null e:null o:null");
        org.junit.Assert.assertNotNull(copyrightBuilder3);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertNotNull(copyrightBuilder6);
        org.junit.Assert.assertNotNull(copyrightBuilder8);
        org.junit.Assert.assertEquals("'" + str9 + "' != '" + "Copyright Builder: s:null e:.cvsignore o:GPL1 " + "'", str9, "Copyright Builder: s:null e:.cvsignore o:GPL1 ");
        org.junit.Assert.assertNotNull(copyrightBuilder11);
        org.junit.Assert.assertNotNull(iHeaderMatcher12);
        org.junit.Assert.assertTrue("'" + state13 + "' != '" + org.apache.rat.analysis.IHeaderMatcher.State.i + "'", state13.equals(org.apache.rat.analysis.IHeaderMatcher.State.i));
        org.junit.Assert.assertTrue("'" + state14 + "' != '" + org.apache.rat.analysis.IHeaderMatcher.State.f + "'", state14.equals(org.apache.rat.analysis.IHeaderMatcher.State.f));
    }

    @Test
    public void test12882() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest25.test12882");
        org.apache.commons.cli.CommandLine commandLine1 = null;
        // The following exception was thrown during execution in test generation
        try {
            org.apache.rat.ReportConfiguration reportConfiguration2 = org.apache.rat.Report.createConfiguration("GPL1 ", commandLine1);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
    }

    @Test
    public void test12883() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest25.test12883");
        org.apache.rat.analysis.license.FullTextMatchingLicense fullTextMatchingLicense0 = new org.apache.rat.analysis.license.FullTextMatchingLicense();
        fullTextMatchingLicense0.setLicenseFamilyName("hi!");
        java.lang.String str3 = fullTextMatchingLicense0.getLicenseFamilyCategory();
        java.lang.String str4 = fullTextMatchingLicense0.getLicenseFamilyName();
        fullTextMatchingLicense0.setLicenseFamilyName("SpdxBuilder: null");
        fullTextMatchingLicense0.setLicenseFamilyCategory("TMF");
        fullTextMatchingLicense0.setFullText("W3C  ");
        java.lang.String str11 = fullTextMatchingLicense0.getLicenseFamilyCategory();
        java.lang.String str12 = fullTextMatchingLicense0.getLicenseFamilyName();
        org.apache.rat.license.ILicense.Builder builder13 = fullTextMatchingLicense0.getLicense();
        fullTextMatchingLicense0.setLicenseFamilyCategory("3e2b228d-d5ff-4444-8d8c-d614494b2426");
        fullTextMatchingLicense0.setFullText("TextBuilder: GEN  ");
        org.junit.Assert.assertNull(str3);
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "hi!" + "'", str4, "hi!");
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "TMF" + "'", str11, "TMF");
        org.junit.Assert.assertEquals("'" + str12 + "' != '" + "SpdxBuilder: null" + "'", str12, "SpdxBuilder: null");
        org.junit.Assert.assertNotNull(builder13);
    }

    @Test
    public void test12884() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest25.test12884");
        org.apache.rat.utils.Log log0 = null;
        org.apache.rat.ReportConfiguration reportConfiguration1 = new org.apache.rat.ReportConfiguration(log0);
        reportConfiguration1.addApprovedLicenseCategory(".cvsignore");
        org.apache.rat.utils.Log.Level level4 = org.apache.rat.utils.Log.Level.ERROR;
        reportConfiguration1.logLicenseCollisions(level4);
        reportConfiguration1.addApprovedLicenseCategory("73fbee1b-7ed9-442a-968e-b2b525ca688f");
        org.apache.rat.utils.Log log8 = null;
        org.apache.rat.ReportConfiguration reportConfiguration9 = new org.apache.rat.ReportConfiguration(log8);
        java.io.FilenameFilter filenameFilter10 = reportConfiguration9.getInputFileFilter();
        org.apache.rat.license.LicenseSetFactory.LicenseFilter licenseFilter11 = org.apache.rat.license.LicenseSetFactory.LicenseFilter.all;
        java.util.SortedSet<org.apache.rat.license.ILicense> iLicenseSet12 = reportConfiguration9.getLicenses(licenseFilter11);
        org.apache.rat.config.AddLicenseHeaders addLicenseHeaders13 = org.apache.rat.config.AddLicenseHeaders.FALSE;
        reportConfiguration9.setAddLicenseHeaders(addLicenseHeaders13);
        org.apache.rat.utils.Log log15 = null;
        org.apache.rat.ReportConfiguration reportConfiguration16 = new org.apache.rat.ReportConfiguration(log15);
        org.apache.rat.report.claim.ClaimStatistic claimStatistic17 = org.apache.rat.Reporter.report(reportConfiguration16);
        org.apache.rat.license.LicenseSetFactory.LicenseFilter licenseFilter18 = org.apache.rat.license.LicenseSetFactory.LicenseFilter.all;
        org.apache.rat.Reporter.listLicenses(reportConfiguration16, licenseFilter18);
        org.apache.rat.Reporter.listLicenses(reportConfiguration9, licenseFilter18);
        org.apache.rat.utils.Log log21 = null;
        org.apache.rat.ReportConfiguration reportConfiguration22 = new org.apache.rat.ReportConfiguration(log21);
        java.io.FilenameFilter filenameFilter23 = reportConfiguration22.getInputFileFilter();
        org.apache.rat.license.LicenseSetFactory.LicenseFilter licenseFilter24 = org.apache.rat.license.LicenseSetFactory.LicenseFilter.all;
        java.util.SortedSet<org.apache.rat.license.ILicense> iLicenseSet25 = reportConfiguration22.getLicenses(licenseFilter24);
        org.apache.rat.config.AddLicenseHeaders addLicenseHeaders26 = org.apache.rat.config.AddLicenseHeaders.FALSE;
        reportConfiguration22.setAddLicenseHeaders(addLicenseHeaders26);
        org.apache.rat.utils.Log log28 = null;
        org.apache.rat.ReportConfiguration reportConfiguration29 = new org.apache.rat.ReportConfiguration(log28);
        org.apache.rat.report.claim.ClaimStatistic claimStatistic30 = org.apache.rat.Reporter.report(reportConfiguration29);
        org.apache.rat.license.LicenseSetFactory.LicenseFilter licenseFilter31 = org.apache.rat.license.LicenseSetFactory.LicenseFilter.all;
        org.apache.rat.Reporter.listLicenses(reportConfiguration29, licenseFilter31);
        org.apache.rat.Reporter.listLicenses(reportConfiguration22, licenseFilter31);
        org.apache.rat.Reporter.listLicenses(reportConfiguration9, licenseFilter31);
        java.io.FilenameFilter filenameFilter35 = reportConfiguration9.getInputFileFilter();
        reportConfiguration9.setStyleReport(false);
        org.apache.rat.report.IReportable iReportable38 = null;
        reportConfiguration9.setReportable(iReportable38);
        org.apache.rat.Defaults.Builder builder41 = org.apache.rat.Defaults.builder();
        org.apache.rat.Defaults defaults42 = builder41.build();
        org.apache.rat.utils.Log log43 = null;
        org.apache.rat.ReportConfiguration reportConfiguration44 = new org.apache.rat.ReportConfiguration(log43);
        java.io.FilenameFilter filenameFilter45 = reportConfiguration44.getInputFileFilter();
        org.apache.rat.license.LicenseSetFactory.LicenseFilter licenseFilter46 = org.apache.rat.license.LicenseSetFactory.LicenseFilter.all;
        java.util.SortedSet<org.apache.rat.license.ILicense> iLicenseSet47 = reportConfiguration44.getLicenses(licenseFilter46);
        org.apache.rat.config.AddLicenseHeaders addLicenseHeaders48 = org.apache.rat.config.AddLicenseHeaders.FALSE;
        reportConfiguration44.setAddLicenseHeaders(addLicenseHeaders48);
        org.apache.rat.utils.Log log50 = null;
        org.apache.rat.ReportConfiguration reportConfiguration51 = new org.apache.rat.ReportConfiguration(log50);
        org.apache.rat.report.claim.ClaimStatistic claimStatistic52 = org.apache.rat.Reporter.report(reportConfiguration51);
        org.apache.rat.license.LicenseSetFactory.LicenseFilter licenseFilter53 = org.apache.rat.license.LicenseSetFactory.LicenseFilter.all;
        org.apache.rat.Reporter.listLicenses(reportConfiguration51, licenseFilter53);
        org.apache.rat.Reporter.listLicenses(reportConfiguration44, licenseFilter53);
        org.apache.rat.utils.Log log56 = null;
        org.apache.rat.ReportConfiguration reportConfiguration57 = new org.apache.rat.ReportConfiguration(log56);
        java.io.FilenameFilter filenameFilter58 = reportConfiguration57.getInputFileFilter();
        org.apache.rat.license.LicenseSetFactory.LicenseFilter licenseFilter59 = org.apache.rat.license.LicenseSetFactory.LicenseFilter.all;
        java.util.SortedSet<org.apache.rat.license.ILicense> iLicenseSet60 = reportConfiguration57.getLicenses(licenseFilter59);
        org.apache.rat.config.AddLicenseHeaders addLicenseHeaders61 = org.apache.rat.config.AddLicenseHeaders.FALSE;
        reportConfiguration57.setAddLicenseHeaders(addLicenseHeaders61);
        org.apache.rat.utils.Log log63 = null;
        org.apache.rat.ReportConfiguration reportConfiguration64 = new org.apache.rat.ReportConfiguration(log63);
        org.apache.rat.report.claim.ClaimStatistic claimStatistic65 = org.apache.rat.Reporter.report(reportConfiguration64);
        org.apache.rat.license.LicenseSetFactory.LicenseFilter licenseFilter66 = org.apache.rat.license.LicenseSetFactory.LicenseFilter.all;
        org.apache.rat.Reporter.listLicenses(reportConfiguration64, licenseFilter66);
        org.apache.rat.Reporter.listLicenses(reportConfiguration57, licenseFilter66);
        java.util.SortedSet<org.apache.rat.license.ILicenseFamily> iLicenseFamilySet69 = reportConfiguration44.getLicenseFamilies(licenseFilter66);
        java.util.SortedSet<org.apache.rat.license.ILicense> iLicenseSet70 = defaults42.getLicenses(licenseFilter66);
        org.apache.rat.utils.ReportingSet<org.apache.rat.license.ILicense> iLicenseSet71 = new org.apache.rat.utils.ReportingSet<org.apache.rat.license.ILicense>(iLicenseSet70);
        org.apache.rat.license.ILicense iLicense72 = org.apache.rat.license.LicenseSetFactory.search("TMF", iLicenseSet70);
        reportConfiguration9.addLicense(iLicense72);
        java.lang.String str74 = iLicense72.derivedFrom();
        reportConfiguration1.addLicense(iLicense72);
        java.lang.String str76 = iLicense72.getName();
        org.apache.rat.license.ILicenseFamily iLicenseFamily77 = iLicense72.getLicenseFamily();
        org.apache.rat.configuration.Format format78 = org.apache.rat.configuration.Format.XML;
        org.apache.rat.configuration.LicenseReader licenseReader79 = format78.licenseReader();
        org.apache.rat.configuration.MatcherReader matcherReader80 = format78.matcherReader();
        org.apache.rat.configuration.LicenseReader licenseReader81 = format78.licenseReader();
        org.apache.rat.configuration.LicenseReader licenseReader82 = format78.licenseReader();
        org.apache.rat.configuration.MatcherReader matcherReader83 = format78.matcherReader();
        org.apache.rat.configuration.LicenseReader licenseReader84 = format78.licenseReader();
        org.apache.rat.configuration.LicenseReader licenseReader85 = format78.licenseReader();
        java.util.SortedSet<org.apache.rat.license.ILicenseFamily> iLicenseFamilySet86 = licenseReader85.readFamilies();
        java.util.SortedSet<org.apache.rat.license.ILicense> iLicenseSet87 = licenseReader85.readLicenses();
        org.apache.rat.license.ILicense iLicense88 = org.apache.rat.license.LicenseSetFactory.search(iLicense72, iLicenseSet87);
        // The following exception was thrown during execution in test generation
        try {
            java.lang.Class<?> wildcardClass89 = iLicense88.getClass();
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + level4 + "' != '" + org.apache.rat.utils.Log.Level.ERROR + "'", level4.equals(org.apache.rat.utils.Log.Level.ERROR));
        org.junit.Assert.assertNull(filenameFilter10);
        org.junit.Assert.assertTrue("'" + licenseFilter11 + "' != '" + org.apache.rat.license.LicenseSetFactory.LicenseFilter.all + "'", licenseFilter11.equals(org.apache.rat.license.LicenseSetFactory.LicenseFilter.all));
        org.junit.Assert.assertNotNull(iLicenseSet12);
        org.junit.Assert.assertTrue("'" + addLicenseHeaders13 + "' != '" + org.apache.rat.config.AddLicenseHeaders.FALSE + "'", addLicenseHeaders13.equals(org.apache.rat.config.AddLicenseHeaders.FALSE));
        org.junit.Assert.assertNull(claimStatistic17);
        org.junit.Assert.assertTrue("'" + licenseFilter18 + "' != '" + org.apache.rat.license.LicenseSetFactory.LicenseFilter.all + "'", licenseFilter18.equals(org.apache.rat.license.LicenseSetFactory.LicenseFilter.all));
        org.junit.Assert.assertNull(filenameFilter23);
        org.junit.Assert.assertTrue("'" + licenseFilter24 + "' != '" + org.apache.rat.license.LicenseSetFactory.LicenseFilter.all + "'", licenseFilter24.equals(org.apache.rat.license.LicenseSetFactory.LicenseFilter.all));
        org.junit.Assert.assertNotNull(iLicenseSet25);
        org.junit.Assert.assertTrue("'" + addLicenseHeaders26 + "' != '" + org.apache.rat.config.AddLicenseHeaders.FALSE + "'", addLicenseHeaders26.equals(org.apache.rat.config.AddLicenseHeaders.FALSE));
        org.junit.Assert.assertNull(claimStatistic30);
        org.junit.Assert.assertTrue("'" + licenseFilter31 + "' != '" + org.apache.rat.license.LicenseSetFactory.LicenseFilter.all + "'", licenseFilter31.equals(org.apache.rat.license.LicenseSetFactory.LicenseFilter.all));
        org.junit.Assert.assertNull(filenameFilter35);
        org.junit.Assert.assertNotNull(builder41);
        org.junit.Assert.assertNotNull(defaults42);
        org.junit.Assert.assertNull(filenameFilter45);
        org.junit.Assert.assertTrue("'" + licenseFilter46 + "' != '" + org.apache.rat.license.LicenseSetFactory.LicenseFilter.all + "'", licenseFilter46.equals(org.apache.rat.license.LicenseSetFactory.LicenseFilter.all));
        org.junit.Assert.assertNotNull(iLicenseSet47);
        org.junit.Assert.assertTrue("'" + addLicenseHeaders48 + "' != '" + org.apache.rat.config.AddLicenseHeaders.FALSE + "'", addLicenseHeaders48.equals(org.apache.rat.config.AddLicenseHeaders.FALSE));
        org.junit.Assert.assertNull(claimStatistic52);
        org.junit.Assert.assertTrue("'" + licenseFilter53 + "' != '" + org.apache.rat.license.LicenseSetFactory.LicenseFilter.all + "'", licenseFilter53.equals(org.apache.rat.license.LicenseSetFactory.LicenseFilter.all));
        org.junit.Assert.assertNull(filenameFilter58);
        org.junit.Assert.assertTrue("'" + licenseFilter59 + "' != '" + org.apache.rat.license.LicenseSetFactory.LicenseFilter.all + "'", licenseFilter59.equals(org.apache.rat.license.LicenseSetFactory.LicenseFilter.all));
        org.junit.Assert.assertNotNull(iLicenseSet60);
        org.junit.Assert.assertTrue("'" + addLicenseHeaders61 + "' != '" + org.apache.rat.config.AddLicenseHeaders.FALSE + "'", addLicenseHeaders61.equals(org.apache.rat.config.AddLicenseHeaders.FALSE));
        org.junit.Assert.assertNull(claimStatistic65);
        org.junit.Assert.assertTrue("'" + licenseFilter66 + "' != '" + org.apache.rat.license.LicenseSetFactory.LicenseFilter.all + "'", licenseFilter66.equals(org.apache.rat.license.LicenseSetFactory.LicenseFilter.all));
        org.junit.Assert.assertNotNull(iLicenseFamilySet69);
        org.junit.Assert.assertNotNull(iLicenseSet70);
        org.junit.Assert.assertNotNull(iLicense72);
        org.junit.Assert.assertEquals("'" + str74 + "' != '" + "BSD-3" + "'", str74, "BSD-3");
        org.junit.Assert.assertEquals("'" + str76 + "' != '" + "The Telemanagement Forum License" + "'", str76, "The Telemanagement Forum License");
        org.junit.Assert.assertNotNull(iLicenseFamily77);
        org.junit.Assert.assertTrue("'" + format78 + "' != '" + org.apache.rat.configuration.Format.XML + "'", format78.equals(org.apache.rat.configuration.Format.XML));
        org.junit.Assert.assertNotNull(licenseReader79);
        org.junit.Assert.assertNotNull(matcherReader80);
        org.junit.Assert.assertNotNull(licenseReader81);
        org.junit.Assert.assertNotNull(licenseReader82);
        org.junit.Assert.assertNotNull(matcherReader83);
        org.junit.Assert.assertNotNull(licenseReader84);
        org.junit.Assert.assertNotNull(licenseReader85);
        org.junit.Assert.assertNotNull(iLicenseFamilySet86);
        org.junit.Assert.assertNotNull(iLicenseSet87);
        org.junit.Assert.assertNull(iLicense88);
    }

    @Test
    public void test12885() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest25.test12885");
        org.apache.rat.utils.Log log0 = null;
        org.apache.rat.ReportConfiguration reportConfiguration1 = new org.apache.rat.ReportConfiguration(log0);
        reportConfiguration1.addApprovedLicenseCategory(".cvsignore");
        boolean boolean4 = reportConfiguration1.isStyleReport();
        org.apache.commons.io.function.IOSupplier<java.io.InputStream> inputStreamIOSupplier5 = org.apache.rat.Defaults.getPlainStyleSheet();
        reportConfiguration1.setStyleSheet(inputStreamIOSupplier5);
        java.lang.String[] strArray12 = new java.lang.String[] { "http://org/apache/rat/meta-data#LicenseFamilyCategory", "Datum [ name ='http://org/apache/rat/meta-data#LicenseFamilyCategory',value ='GPL1  ']", "MANIFEST.MF", "AllBuilder:", "The MIT License" };
        org.apache.rat.utils.ReportingSet<java.lang.String> strSet13 = new org.apache.rat.utils.ReportingSet<java.lang.String>();
        boolean boolean14 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strSet13, strArray12);
        boolean boolean16 = strSet13.addIfNotPresent("http://org/apache/rat/meta-data#LicenseFamilyName");
        boolean boolean18 = strSet13.addIfNotPresent("ef7a8b13-64c3-4510-bb0c-dbf208e1e73f");
        java.util.function.Function<java.lang.String, java.lang.String> strFunction19 = null;
        org.apache.rat.utils.ReportingSet<java.lang.String> strSet20 = strSet13.setMsgFormat(strFunction19);
        java.util.SortedSet<org.apache.rat.license.ILicenseFamily> iLicenseFamilySet22 = org.apache.rat.license.LicenseFamilySetFactory.emptyLicenseFamilySet();
        org.apache.rat.license.ILicenseFamily iLicenseFamily23 = org.apache.rat.license.LicenseFamilySetFactory.search("http://org/apache/rat/meta-data", iLicenseFamilySet22);
        boolean boolean24 = strSet13.containsAll((java.util.Collection<org.apache.rat.license.ILicenseFamily>) iLicenseFamilySet22);
        org.apache.rat.utils.ReportingSet<java.lang.String> strSet26 = strSet13.tailSet("http://org/apache/rat/meta-data#HeaderCategory");
        org.apache.rat.utils.Log log27 = null;
        org.apache.rat.ReportConfiguration reportConfiguration28 = new org.apache.rat.ReportConfiguration(log27);
        java.io.FilenameFilter filenameFilter29 = reportConfiguration28.getInputFileFilter();
        org.apache.rat.license.LicenseSetFactory.LicenseFilter licenseFilter30 = org.apache.rat.license.LicenseSetFactory.LicenseFilter.all;
        java.util.SortedSet<org.apache.rat.license.ILicense> iLicenseSet31 = reportConfiguration28.getLicenses(licenseFilter30);
        org.apache.rat.config.AddLicenseHeaders addLicenseHeaders32 = org.apache.rat.config.AddLicenseHeaders.FALSE;
        reportConfiguration28.setAddLicenseHeaders(addLicenseHeaders32);
        org.apache.rat.utils.Log log34 = null;
        org.apache.rat.ReportConfiguration reportConfiguration35 = new org.apache.rat.ReportConfiguration(log34);
        reportConfiguration35.addApprovedLicenseCategory(".cvsignore");
        org.apache.rat.utils.Log.Level level38 = org.apache.rat.utils.Log.Level.ERROR;
        reportConfiguration35.logLicenseCollisions(level38);
        reportConfiguration28.logFamilyCollisions(level38);
        org.apache.rat.utils.ReportingSet<java.lang.String> strSet41 = strSet13.setLogLevel(level38);
        reportConfiguration1.logFamilyCollisions(level38);
        java.lang.String[] strArray48 = new java.lang.String[] { "http://org/apache/rat/meta-data#LicenseFamilyCategory", "Datum [ name ='http://org/apache/rat/meta-data#LicenseFamilyCategory',value ='GPL1  ']", "MANIFEST.MF", "AllBuilder:", "The MIT License" };
        org.apache.rat.utils.ReportingSet<java.lang.String> strSet49 = new org.apache.rat.utils.ReportingSet<java.lang.String>();
        boolean boolean50 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strSet49, strArray48);
        boolean boolean52 = strSet49.addIfNotPresent("http://org/apache/rat/meta-data#LicenseFamilyName");
        boolean boolean54 = strSet49.addIfNotPresent("ef7a8b13-64c3-4510-bb0c-dbf208e1e73f");
        java.util.function.Function<java.lang.String, java.lang.String> strFunction55 = null;
        org.apache.rat.utils.ReportingSet<java.lang.String> strSet56 = strSet49.setMsgFormat(strFunction55);
        reportConfiguration1.removeApprovedLicenseCategories((java.util.Collection<java.lang.String>) strSet49);
        strSet49.clear();
        java.util.Spliterator<java.lang.String> strSpliterator59 = strSet49.spliterator();
        java.lang.Object[] objArray60 = strSet49.toArray();
        java.util.stream.Stream<java.lang.String> strStream61 = strSet49.parallelStream();
        strSet49.clear();
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + true + "'", boolean4 == true);
        org.junit.Assert.assertNotNull(inputStreamIOSupplier5);
        org.junit.Assert.assertNotNull(strArray12);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + true + "'", boolean14 == true);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + true + "'", boolean16 == true);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + true + "'", boolean18 == true);
        org.junit.Assert.assertNotNull(strSet20);
        org.junit.Assert.assertNotNull(iLicenseFamilySet22);
        org.junit.Assert.assertNull(iLicenseFamily23);
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + true + "'", boolean24 == true);
        org.junit.Assert.assertNotNull(strSet26);
        org.junit.Assert.assertNull(filenameFilter29);
        org.junit.Assert.assertTrue("'" + licenseFilter30 + "' != '" + org.apache.rat.license.LicenseSetFactory.LicenseFilter.all + "'", licenseFilter30.equals(org.apache.rat.license.LicenseSetFactory.LicenseFilter.all));
        org.junit.Assert.assertNotNull(iLicenseSet31);
        org.junit.Assert.assertTrue("'" + addLicenseHeaders32 + "' != '" + org.apache.rat.config.AddLicenseHeaders.FALSE + "'", addLicenseHeaders32.equals(org.apache.rat.config.AddLicenseHeaders.FALSE));
        org.junit.Assert.assertTrue("'" + level38 + "' != '" + org.apache.rat.utils.Log.Level.ERROR + "'", level38.equals(org.apache.rat.utils.Log.Level.ERROR));
        org.junit.Assert.assertNotNull(strSet41);
        org.junit.Assert.assertNotNull(strArray48);
        org.junit.Assert.assertTrue("'" + boolean50 + "' != '" + true + "'", boolean50 == true);
        org.junit.Assert.assertTrue("'" + boolean52 + "' != '" + true + "'", boolean52 == true);
        org.junit.Assert.assertTrue("'" + boolean54 + "' != '" + true + "'", boolean54 == true);
        org.junit.Assert.assertNotNull(strSet56);
        org.junit.Assert.assertNotNull(strSpliterator59);
        org.junit.Assert.assertNotNull(objArray60);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray60), "[]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray60), "[]");
        org.junit.Assert.assertNotNull(strStream61);
    }

    @Test
    public void test12886() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest25.test12886");
        org.apache.rat.utils.Log log0 = null;
        org.apache.rat.ReportConfiguration reportConfiguration1 = new org.apache.rat.ReportConfiguration(log0);
        org.apache.rat.report.claim.ClaimStatistic claimStatistic2 = org.apache.rat.Reporter.report(reportConfiguration1);
        org.apache.rat.utils.Log log3 = null;
        org.apache.rat.ReportConfiguration reportConfiguration4 = new org.apache.rat.ReportConfiguration(log3);
        org.apache.rat.report.claim.ClaimStatistic claimStatistic5 = org.apache.rat.Reporter.report(reportConfiguration4);
        org.apache.rat.utils.ReportingSet.Options options6 = org.apache.rat.utils.ReportingSet.Options.OVERWRITE;
        reportConfiguration4.licenseDuplicateOption(options6);
        reportConfiguration1.familyDuplicateOption(options6);
        org.apache.commons.io.function.IOSupplier<java.io.PrintWriter> printWriterIOSupplier9 = reportConfiguration1.getWriter();
        boolean boolean10 = reportConfiguration1.isAddingLicensesForced();
        java.io.FilenameFilter filenameFilter11 = reportConfiguration1.getInputFileFilter();
        java.io.FilenameFilter filenameFilter12 = reportConfiguration1.getInputFileFilter();
        boolean boolean13 = reportConfiguration1.isStyleReport();
        org.apache.rat.utils.Log log14 = null;
        org.apache.rat.ReportConfiguration reportConfiguration15 = new org.apache.rat.ReportConfiguration(log14);
        java.io.FilenameFilter filenameFilter16 = reportConfiguration15.getInputFileFilter();
        org.apache.rat.license.ILicense iLicense17 = null;
        reportConfiguration15.addLicense(iLicense17);
        org.apache.rat.utils.Log log19 = null;
        org.apache.rat.ReportConfiguration reportConfiguration20 = new org.apache.rat.ReportConfiguration(log19);
        java.io.FilenameFilter filenameFilter21 = reportConfiguration20.getInputFileFilter();
        boolean boolean22 = reportConfiguration20.isStyleReport();
        org.apache.commons.io.function.IOSupplier<java.io.OutputStream> outputStreamIOSupplier23 = reportConfiguration20.getOutput();
        reportConfiguration15.setOut(outputStreamIOSupplier23);
        reportConfiguration1.setOut(outputStreamIOSupplier23);
        org.apache.rat.utils.Log log26 = null;
        org.apache.rat.ReportConfiguration reportConfiguration27 = new org.apache.rat.ReportConfiguration(log26);
        org.apache.rat.report.claim.ClaimStatistic claimStatistic28 = org.apache.rat.Reporter.report(reportConfiguration27);
        org.apache.rat.utils.Log log29 = null;
        org.apache.rat.ReportConfiguration reportConfiguration30 = new org.apache.rat.ReportConfiguration(log29);
        org.apache.rat.report.claim.ClaimStatistic claimStatistic31 = org.apache.rat.Reporter.report(reportConfiguration30);
        org.apache.rat.utils.ReportingSet.Options options32 = org.apache.rat.utils.ReportingSet.Options.OVERWRITE;
        reportConfiguration30.licenseDuplicateOption(options32);
        reportConfiguration27.familyDuplicateOption(options32);
        org.apache.commons.io.function.IOSupplier<java.io.PrintWriter> printWriterIOSupplier35 = reportConfiguration27.getWriter();
        boolean boolean36 = reportConfiguration27.isAddingLicensesForced();
        java.io.FilenameFilter filenameFilter37 = reportConfiguration27.getInputFileFilter();
        org.apache.commons.io.function.IOSupplier<java.io.InputStream> inputStreamIOSupplier38 = reportConfiguration27.getStyleSheet();
        java.lang.String str39 = reportConfiguration27.getCopyrightMessage();
        org.apache.rat.utils.Log log40 = null;
        org.apache.rat.ReportConfiguration reportConfiguration41 = new org.apache.rat.ReportConfiguration(log40);
        org.apache.rat.report.claim.ClaimStatistic claimStatistic42 = org.apache.rat.Reporter.report(reportConfiguration41);
        org.apache.commons.io.function.IOSupplier<java.io.InputStream> inputStreamIOSupplier43 = reportConfiguration41.getStyleSheet();
        org.apache.rat.analysis.license.FullTextMatchingLicense fullTextMatchingLicense44 = new org.apache.rat.analysis.license.FullTextMatchingLicense();
        fullTextMatchingLicense44.setLicenseFamilyName("hi!");
        java.lang.String str47 = fullTextMatchingLicense44.getLicenseFamilyCategory();
        java.lang.String str48 = fullTextMatchingLicense44.getLicenseFamilyName();
        fullTextMatchingLicense44.setLicenseFamilyName("SpdxBuilder: null");
        fullTextMatchingLicense44.setLicenseFamilyCategory("TMF");
        org.apache.rat.license.ILicenseFamily iLicenseFamily53 = fullTextMatchingLicense44.getLicenseFamily();
        java.lang.String str54 = iLicenseFamily53.getFamilyName();
        java.lang.String str55 = iLicenseFamily53.getFamilyName();
        reportConfiguration41.addApprovedLicenseCategory(iLicenseFamily53);
        reportConfiguration27.addApprovedLicenseCategory(iLicenseFamily53);
        reportConfiguration1.addApprovedLicenseCategory(iLicenseFamily53);
        java.io.File file59 = null;
        // The following exception was thrown during execution in test generation
        try {
            reportConfiguration1.setOut(file59);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: output file should not be null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNull(claimStatistic2);
        org.junit.Assert.assertNull(claimStatistic5);
        org.junit.Assert.assertTrue("'" + options6 + "' != '" + org.apache.rat.utils.ReportingSet.Options.OVERWRITE + "'", options6.equals(org.apache.rat.utils.ReportingSet.Options.OVERWRITE));
        org.junit.Assert.assertNotNull(printWriterIOSupplier9);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertNull(filenameFilter11);
        org.junit.Assert.assertNull(filenameFilter12);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + true + "'", boolean13 == true);
        org.junit.Assert.assertNull(filenameFilter16);
        org.junit.Assert.assertNull(filenameFilter21);
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + true + "'", boolean22 == true);
        org.junit.Assert.assertNotNull(outputStreamIOSupplier23);
        org.junit.Assert.assertNull(claimStatistic28);
        org.junit.Assert.assertNull(claimStatistic31);
        org.junit.Assert.assertTrue("'" + options32 + "' != '" + org.apache.rat.utils.ReportingSet.Options.OVERWRITE + "'", options32.equals(org.apache.rat.utils.ReportingSet.Options.OVERWRITE));
        org.junit.Assert.assertNotNull(printWriterIOSupplier35);
        org.junit.Assert.assertTrue("'" + boolean36 + "' != '" + false + "'", boolean36 == false);
        org.junit.Assert.assertNull(filenameFilter37);
        org.junit.Assert.assertNull(inputStreamIOSupplier38);
        org.junit.Assert.assertNull(str39);
        org.junit.Assert.assertNull(claimStatistic42);
        org.junit.Assert.assertNull(inputStreamIOSupplier43);
        org.junit.Assert.assertNull(str47);
        org.junit.Assert.assertEquals("'" + str48 + "' != '" + "hi!" + "'", str48, "hi!");
        org.junit.Assert.assertNotNull(iLicenseFamily53);
        org.junit.Assert.assertEquals("'" + str54 + "' != '" + "SpdxBuilder: null" + "'", str54, "SpdxBuilder: null");
        org.junit.Assert.assertEquals("'" + str55 + "' != '" + "SpdxBuilder: null" + "'", str55, "SpdxBuilder: null");
    }

    @Test
    public void test12887() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest25.test12887");
        org.apache.rat.configuration.builders.RegexBuilder regexBuilder0 = new org.apache.rat.configuration.builders.RegexBuilder();
        java.lang.String str1 = regexBuilder0.toString();
        java.lang.String str2 = regexBuilder0.toString();
        org.apache.rat.configuration.builders.RegexBuilder regexBuilder4 = regexBuilder0.setExpr("d4148d3a-edbc-4672-b347-0fa619553f91");
        java.lang.String str5 = regexBuilder0.toString();
        org.junit.Assert.assertEquals("'" + str1 + "' != '" + "RegexBuilder: null" + "'", str1, "RegexBuilder: null");
        org.junit.Assert.assertEquals("'" + str2 + "' != '" + "RegexBuilder: null" + "'", str2, "RegexBuilder: null");
        org.junit.Assert.assertNotNull(regexBuilder4);
        org.junit.Assert.assertEquals("'" + str5 + "' != '" + "RegexBuilder: d4148d3a-edbc-4672-b347-0fa619553f91" + "'", str5, "RegexBuilder: d4148d3a-edbc-4672-b347-0fa619553f91");
    }

    @Test
    public void test12888() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest25.test12888");
        org.apache.rat.analysis.matchers.FullTextMatcher fullTextMatcher1 = new org.apache.rat.analysis.matchers.FullTextMatcher("Datum [ name ='http://org/apache/rat/meta-data#LicenseFamilyName',value ='GNU General Public License, version 1 ']");
        org.apache.rat.analysis.IHeaderMatcher.State state3 = fullTextMatcher1.matches("afc10539-c84a-498f-8937-f7e142d90175");
        org.junit.Assert.assertTrue("'" + state3 + "' != '" + org.apache.rat.analysis.IHeaderMatcher.State.i + "'", state3.equals(org.apache.rat.analysis.IHeaderMatcher.State.i));
    }

    @Test
    public void test12889() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest25.test12889");
        org.apache.rat.header.HeaderBean headerBean0 = new org.apache.rat.header.HeaderBean();
        boolean boolean1 = headerBean0.isMatch();
        java.util.regex.Pattern pattern2 = null;
        headerBean0.setHeaderPattern(pattern2);
        headerBean0.setMatch(false);
        java.util.regex.Pattern pattern6 = headerBean0.getHeaderPattern();
        java.util.regex.Pattern pattern7 = headerBean0.getHeaderPattern();
        headerBean0.setMatch(true);
        headerBean0.setMatch(false);
        org.junit.Assert.assertTrue("'" + boolean1 + "' != '" + false + "'", boolean1 == false);
        org.junit.Assert.assertNull(pattern6);
        org.junit.Assert.assertNull(pattern7);
    }

    @Test
    public void test12890() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest25.test12890");
        org.apache.rat.license.SimpleLicenseFamily simpleLicenseFamily0 = new org.apache.rat.license.SimpleLicenseFamily();
        simpleLicenseFamily0.setFamilyName("http://org/apache/rat/meta-data#LicenseFamilyName");
        java.lang.String str3 = simpleLicenseFamily0.toString();
        java.lang.String str4 = simpleLicenseFamily0.getFamilyCategory();
        simpleLicenseFamily0.setFamilyName("?????");
        java.lang.String str7 = simpleLicenseFamily0.toString();
        simpleLicenseFamily0.setFamilyCategory("GNU General Public License, version 2");
        simpleLicenseFamily0.setFamilyName("01a695b3-6fe4-48a1-8c30-8d23a9917ada");
        org.junit.Assert.assertEquals("'" + str3 + "' != '" + "null http://org/apache/rat/meta-data#LicenseFamilyName" + "'", str3, "null http://org/apache/rat/meta-data#LicenseFamilyName");
        org.junit.Assert.assertNull(str4);
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "null ?????" + "'", str7, "null ?????");
    }

    @Test
    public void test12891() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest25.test12891");
        org.apache.rat.configuration.builders.NotBuilder notBuilder0 = new org.apache.rat.configuration.builders.NotBuilder();
        org.apache.rat.configuration.builders.AnyBuilder anyBuilder1 = org.apache.rat.analysis.IHeaderMatcher.Builder.any();
        java.lang.String str2 = anyBuilder1.toString();
        java.util.List<org.apache.rat.analysis.IHeaderMatcher> iHeaderMatcherList3 = anyBuilder1.getChildren();
        org.apache.rat.analysis.IHeaderMatcher iHeaderMatcher4 = anyBuilder1.build();
        org.apache.rat.configuration.builders.AnyBuilder anyBuilder5 = org.apache.rat.analysis.IHeaderMatcher.Builder.any();
        java.lang.String str6 = anyBuilder5.toString();
        java.util.List<org.apache.rat.analysis.IHeaderMatcher> iHeaderMatcherList7 = anyBuilder5.getChildren();
        org.apache.rat.analysis.IHeaderMatcher iHeaderMatcher8 = anyBuilder5.build();
        org.apache.rat.analysis.IHeaderMatcher iHeaderMatcher9 = anyBuilder5.build();
        java.util.List<org.apache.rat.analysis.IHeaderMatcher> iHeaderMatcherList10 = anyBuilder5.getChildren();
        org.apache.rat.configuration.builders.NotBuilder notBuilder11 = new org.apache.rat.configuration.builders.NotBuilder();
        java.lang.String str12 = notBuilder11.toString();
        org.apache.rat.configuration.builders.MatcherRefBuilder matcherRefBuilder13 = org.apache.rat.analysis.IHeaderMatcher.Builder.matcherRef();
        boolean boolean14 = matcherRefBuilder13.hasId();
        java.util.Map<java.lang.String, org.apache.rat.analysis.IHeaderMatcher> strMap15 = null;
        org.apache.rat.configuration.builders.MatcherRefBuilder matcherRefBuilder16 = matcherRefBuilder13.setMatchers(strMap15);
        org.apache.rat.configuration.builders.AllBuilder allBuilder17 = new org.apache.rat.configuration.builders.AllBuilder();
        org.apache.rat.configuration.builders.CopyrightBuilder copyrightBuilder18 = org.apache.rat.analysis.IHeaderMatcher.Builder.copyright();
        org.apache.rat.configuration.builders.CopyrightBuilder copyrightBuilder20 = copyrightBuilder18.setStart("OASIS");
        java.lang.String str21 = copyrightBuilder18.toString();
        org.apache.rat.configuration.builders.CopyrightBuilder copyrightBuilder23 = copyrightBuilder18.setStart("223f0aba-15d4-49e9-901e-5740c137aebf");
        org.apache.rat.configuration.builders.MatcherRefBuilder matcherRefBuilder24 = org.apache.rat.analysis.IHeaderMatcher.Builder.matcherRef();
        boolean boolean25 = matcherRefBuilder24.hasId();
        org.apache.rat.configuration.builders.CopyrightBuilder copyrightBuilder26 = org.apache.rat.analysis.IHeaderMatcher.Builder.copyright();
        org.apache.rat.configuration.builders.CopyrightBuilder copyrightBuilder28 = copyrightBuilder26.setStart("OASIS");
        java.lang.String str29 = copyrightBuilder26.toString();
        org.apache.rat.configuration.builders.CopyrightBuilder copyrightBuilder31 = copyrightBuilder26.setStart("223f0aba-15d4-49e9-901e-5740c137aebf");
        org.apache.rat.configuration.builders.CopyrightBuilder copyrightBuilder32 = org.apache.rat.analysis.IHeaderMatcher.Builder.copyright();
        org.apache.rat.configuration.builders.CopyrightBuilder copyrightBuilder33 = org.apache.rat.analysis.IHeaderMatcher.Builder.copyright();
        java.lang.String str34 = copyrightBuilder33.toString();
        org.apache.rat.configuration.builders.CopyrightBuilder copyrightBuilder36 = copyrightBuilder33.setEnd(".cvsignore");
        boolean boolean37 = copyrightBuilder33.hasId();
        org.apache.rat.configuration.builders.CopyrightBuilder copyrightBuilder38 = org.apache.rat.analysis.IHeaderMatcher.Builder.copyright();
        java.lang.String str39 = copyrightBuilder38.toString();
        org.apache.rat.configuration.builders.CopyrightBuilder copyrightBuilder41 = copyrightBuilder38.setEnd(".cvsignore");
        boolean boolean42 = copyrightBuilder38.hasId();
        java.lang.String str43 = copyrightBuilder38.toString();
        org.apache.rat.configuration.builders.CopyrightBuilder copyrightBuilder44 = org.apache.rat.analysis.IHeaderMatcher.Builder.copyright();
        org.apache.rat.configuration.builders.CopyrightBuilder copyrightBuilder46 = copyrightBuilder44.setStart("OASIS");
        org.apache.rat.configuration.builders.AnyBuilder anyBuilder47 = org.apache.rat.analysis.IHeaderMatcher.Builder.any();
        org.apache.rat.configuration.builders.MatcherRefBuilder matcherRefBuilder48 = org.apache.rat.analysis.IHeaderMatcher.Builder.matcherRef();
        boolean boolean49 = matcherRefBuilder48.hasId();
        java.util.Map<java.lang.String, org.apache.rat.analysis.IHeaderMatcher> strMap50 = null;
        org.apache.rat.configuration.builders.MatcherRefBuilder matcherRefBuilder51 = matcherRefBuilder48.setMatchers(strMap50);
        org.apache.rat.configuration.builders.CopyrightBuilder copyrightBuilder52 = org.apache.rat.analysis.IHeaderMatcher.Builder.copyright();
        org.apache.rat.configuration.builders.MatcherRefBuilder matcherRefBuilder53 = org.apache.rat.analysis.IHeaderMatcher.Builder.matcherRef();
        boolean boolean54 = matcherRefBuilder53.hasId();
        java.lang.String str55 = matcherRefBuilder53.toString();
        java.util.Map<java.lang.String, org.apache.rat.analysis.IHeaderMatcher> strMap56 = null;
        org.apache.rat.configuration.builders.MatcherRefBuilder matcherRefBuilder57 = matcherRefBuilder53.setMatchers(strMap56);
        org.apache.rat.analysis.IHeaderMatcher.Builder[] builderArray58 = new org.apache.rat.analysis.IHeaderMatcher.Builder[] { matcherRefBuilder13, allBuilder17, copyrightBuilder23, matcherRefBuilder24, copyrightBuilder26, copyrightBuilder32, copyrightBuilder33, copyrightBuilder38, copyrightBuilder44, anyBuilder47, matcherRefBuilder48, copyrightBuilder52, matcherRefBuilder53 };
        java.util.ArrayList<org.apache.rat.analysis.IHeaderMatcher.Builder> builderList59 = new java.util.ArrayList<org.apache.rat.analysis.IHeaderMatcher.Builder>();
        boolean boolean60 = java.util.Collections.addAll((java.util.Collection<org.apache.rat.analysis.IHeaderMatcher.Builder>) builderList59, builderArray58);
        org.apache.rat.configuration.builders.AbstractBuilder abstractBuilder61 = notBuilder11.add((java.util.Collection<org.apache.rat.analysis.IHeaderMatcher.Builder>) builderList59);
        org.apache.rat.configuration.builders.AbstractBuilder abstractBuilder62 = anyBuilder5.add((java.util.Collection<org.apache.rat.analysis.IHeaderMatcher.Builder>) builderList59);
        org.apache.rat.configuration.builders.AbstractBuilder abstractBuilder63 = anyBuilder1.add((java.util.Collection<org.apache.rat.analysis.IHeaderMatcher.Builder>) builderList59);
        org.apache.rat.configuration.builders.AbstractBuilder abstractBuilder64 = notBuilder0.add((java.util.Collection<org.apache.rat.analysis.IHeaderMatcher.Builder>) builderList59);
        org.apache.rat.configuration.builders.TextBuilder textBuilder65 = org.apache.rat.analysis.IHeaderMatcher.Builder.text();
        org.apache.rat.configuration.builders.TextBuilder textBuilder67 = textBuilder65.setText("");
        java.lang.String str68 = textBuilder67.toString();
        org.apache.rat.configuration.builders.TextBuilder textBuilder70 = textBuilder67.setText("d4148d3a-edbc-4672-b347-0fa619553f91");
        org.apache.rat.configuration.builders.TextBuilder textBuilder72 = textBuilder70.setText("f629778c-c97c-4f52-a91a-ec6e154d2523");
        org.apache.rat.configuration.builders.AbstractBuilder abstractBuilder73 = notBuilder0.add((org.apache.rat.analysis.IHeaderMatcher.Builder) textBuilder70);
        java.lang.String str74 = notBuilder0.toString();
        org.junit.Assert.assertNotNull(anyBuilder1);
        org.junit.Assert.assertEquals("'" + str2 + "' != '" + "AnyBuilder:" + "'", str2, "AnyBuilder:");
        org.junit.Assert.assertNotNull(iHeaderMatcherList3);
        org.junit.Assert.assertNotNull(iHeaderMatcher4);
        org.junit.Assert.assertNotNull(anyBuilder5);
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "AnyBuilder:" + "'", str6, "AnyBuilder:");
        org.junit.Assert.assertNotNull(iHeaderMatcherList7);
        org.junit.Assert.assertNotNull(iHeaderMatcher8);
        org.junit.Assert.assertNotNull(iHeaderMatcher9);
        org.junit.Assert.assertNotNull(iHeaderMatcherList10);
        org.junit.Assert.assertEquals("'" + str12 + "' != '" + "NotBuilder: null" + "'", str12, "NotBuilder: null");
        org.junit.Assert.assertNotNull(matcherRefBuilder13);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
        org.junit.Assert.assertNotNull(matcherRefBuilder16);
        org.junit.Assert.assertNotNull(copyrightBuilder18);
        org.junit.Assert.assertNotNull(copyrightBuilder20);
        org.junit.Assert.assertEquals("'" + str21 + "' != '" + "Copyright Builder: s:OASIS e:null o:null" + "'", str21, "Copyright Builder: s:OASIS e:null o:null");
        org.junit.Assert.assertNotNull(copyrightBuilder23);
        org.junit.Assert.assertNotNull(matcherRefBuilder24);
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + false + "'", boolean25 == false);
        org.junit.Assert.assertNotNull(copyrightBuilder26);
        org.junit.Assert.assertNotNull(copyrightBuilder28);
        org.junit.Assert.assertEquals("'" + str29 + "' != '" + "Copyright Builder: s:OASIS e:null o:null" + "'", str29, "Copyright Builder: s:OASIS e:null o:null");
        org.junit.Assert.assertNotNull(copyrightBuilder31);
        org.junit.Assert.assertNotNull(copyrightBuilder32);
        org.junit.Assert.assertNotNull(copyrightBuilder33);
        org.junit.Assert.assertEquals("'" + str34 + "' != '" + "Copyright Builder: s:null e:null o:null" + "'", str34, "Copyright Builder: s:null e:null o:null");
        org.junit.Assert.assertNotNull(copyrightBuilder36);
        org.junit.Assert.assertTrue("'" + boolean37 + "' != '" + false + "'", boolean37 == false);
        org.junit.Assert.assertNotNull(copyrightBuilder38);
        org.junit.Assert.assertEquals("'" + str39 + "' != '" + "Copyright Builder: s:null e:null o:null" + "'", str39, "Copyright Builder: s:null e:null o:null");
        org.junit.Assert.assertNotNull(copyrightBuilder41);
        org.junit.Assert.assertTrue("'" + boolean42 + "' != '" + false + "'", boolean42 == false);
        org.junit.Assert.assertEquals("'" + str43 + "' != '" + "Copyright Builder: s:null e:.cvsignore o:null" + "'", str43, "Copyright Builder: s:null e:.cvsignore o:null");
        org.junit.Assert.assertNotNull(copyrightBuilder44);
        org.junit.Assert.assertNotNull(copyrightBuilder46);
        org.junit.Assert.assertNotNull(anyBuilder47);
        org.junit.Assert.assertNotNull(matcherRefBuilder48);
        org.junit.Assert.assertTrue("'" + boolean49 + "' != '" + false + "'", boolean49 == false);
        org.junit.Assert.assertNotNull(matcherRefBuilder51);
        org.junit.Assert.assertNotNull(copyrightBuilder52);
        org.junit.Assert.assertNotNull(matcherRefBuilder53);
        org.junit.Assert.assertTrue("'" + boolean54 + "' != '" + false + "'", boolean54 == false);
        org.junit.Assert.assertEquals("'" + str55 + "' != '" + "MathcerRefBuilder: null" + "'", str55, "MathcerRefBuilder: null");
        org.junit.Assert.assertNotNull(matcherRefBuilder57);
        org.junit.Assert.assertNotNull(builderArray58);
        org.junit.Assert.assertTrue("'" + boolean60 + "' != '" + true + "'", boolean60 == true);
        org.junit.Assert.assertNotNull(abstractBuilder61);
        org.junit.Assert.assertNotNull(abstractBuilder62);
        org.junit.Assert.assertNotNull(abstractBuilder63);
        org.junit.Assert.assertNotNull(abstractBuilder64);
        org.junit.Assert.assertNotNull(textBuilder65);
        org.junit.Assert.assertNotNull(textBuilder67);
        org.junit.Assert.assertEquals("'" + str68 + "' != '" + "TextBuilder: " + "'", str68, "TextBuilder: ");
        org.junit.Assert.assertNotNull(textBuilder70);
        org.junit.Assert.assertNotNull(textBuilder72);
        org.junit.Assert.assertNotNull(abstractBuilder73);
        org.junit.Assert.assertEquals("'" + str74 + "' != '" + "NotBuilder: MathcerRefBuilder: null" + "'", str74, "NotBuilder: MathcerRefBuilder: null");
    }

    @Test
    public void test12892() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest25.test12892");
        org.apache.rat.configuration.builders.NotBuilder notBuilder0 = org.apache.rat.analysis.IHeaderMatcher.Builder.not();
        boolean boolean1 = notBuilder0.hasId();
        org.apache.rat.document.ToNameTransformer toNameTransformer2 = new org.apache.rat.document.ToNameTransformer();
        org.apache.rat.utils.DefaultLog defaultLog3 = org.apache.rat.utils.DefaultLog.INSTANCE;
        org.apache.rat.license.ILicense.Builder builder4 = org.apache.rat.license.ILicense.builder();
        org.apache.rat.license.ILicense.Builder builder6 = builder4.setLicenseFamilyCategory("");
        org.apache.rat.analysis.matchers.CopyrightMatcher copyrightMatcher10 = new org.apache.rat.analysis.matchers.CopyrightMatcher("", "GPL1 ", "hi!");
        org.apache.rat.analysis.IHeaderMatcher.State state11 = copyrightMatcher10.finalizeState();
        org.apache.rat.license.ILicense.Builder builder12 = builder6.setMatcher((org.apache.rat.analysis.IHeaderMatcher) copyrightMatcher10);
        org.apache.rat.license.ILicense.Builder builder14 = builder12.setLicenseFamilyCategory("");
        defaultLog3.error((java.lang.Object) builder14);
        java.lang.Object obj16 = toNameTransformer2.transform((java.lang.Object) defaultLog3);
        org.apache.rat.configuration.builders.AllBuilder allBuilder17 = new org.apache.rat.configuration.builders.AllBuilder();
        java.lang.String str18 = allBuilder17.toString();
        java.util.List<org.apache.rat.analysis.IHeaderMatcher> iHeaderMatcherList19 = allBuilder17.getChildren();
        java.lang.Object obj20 = toNameTransformer2.transform((java.lang.Object) allBuilder17);
        org.apache.rat.configuration.builders.AllBuilder allBuilder21 = org.apache.rat.analysis.IHeaderMatcher.Builder.all();
        org.apache.rat.configuration.builders.AbstractBuilder abstractBuilder22 = allBuilder17.add((org.apache.rat.analysis.IHeaderMatcher.Builder) allBuilder21);
        org.apache.rat.configuration.builders.AllBuilder allBuilder23 = new org.apache.rat.configuration.builders.AllBuilder();
        java.lang.String str24 = allBuilder23.toString();
        java.lang.String str25 = allBuilder23.toString();
        java.lang.String str26 = allBuilder23.toString();
        org.apache.rat.analysis.IHeaderMatcher iHeaderMatcher27 = allBuilder23.build();
        org.apache.rat.configuration.builders.AnyBuilder anyBuilder28 = new org.apache.rat.configuration.builders.AnyBuilder();
        java.lang.String str29 = anyBuilder28.toString();
        org.apache.rat.analysis.IHeaderMatcher iHeaderMatcher30 = anyBuilder28.build();
        org.apache.rat.configuration.builders.AnyBuilder anyBuilder31 = org.apache.rat.analysis.IHeaderMatcher.Builder.any();
        java.lang.String str32 = anyBuilder31.toString();
        java.util.List<org.apache.rat.analysis.IHeaderMatcher> iHeaderMatcherList33 = anyBuilder31.getChildren();
        org.apache.rat.analysis.IHeaderMatcher iHeaderMatcher34 = anyBuilder31.build();
        org.apache.rat.analysis.IHeaderMatcher iHeaderMatcher35 = anyBuilder31.build();
        java.util.List<org.apache.rat.analysis.IHeaderMatcher> iHeaderMatcherList36 = anyBuilder31.getChildren();
        org.apache.rat.configuration.builders.NotBuilder notBuilder37 = new org.apache.rat.configuration.builders.NotBuilder();
        java.lang.String str38 = notBuilder37.toString();
        org.apache.rat.configuration.builders.MatcherRefBuilder matcherRefBuilder39 = org.apache.rat.analysis.IHeaderMatcher.Builder.matcherRef();
        boolean boolean40 = matcherRefBuilder39.hasId();
        java.util.Map<java.lang.String, org.apache.rat.analysis.IHeaderMatcher> strMap41 = null;
        org.apache.rat.configuration.builders.MatcherRefBuilder matcherRefBuilder42 = matcherRefBuilder39.setMatchers(strMap41);
        org.apache.rat.configuration.builders.AllBuilder allBuilder43 = new org.apache.rat.configuration.builders.AllBuilder();
        org.apache.rat.configuration.builders.CopyrightBuilder copyrightBuilder44 = org.apache.rat.analysis.IHeaderMatcher.Builder.copyright();
        org.apache.rat.configuration.builders.CopyrightBuilder copyrightBuilder46 = copyrightBuilder44.setStart("OASIS");
        java.lang.String str47 = copyrightBuilder44.toString();
        org.apache.rat.configuration.builders.CopyrightBuilder copyrightBuilder49 = copyrightBuilder44.setStart("223f0aba-15d4-49e9-901e-5740c137aebf");
        org.apache.rat.configuration.builders.MatcherRefBuilder matcherRefBuilder50 = org.apache.rat.analysis.IHeaderMatcher.Builder.matcherRef();
        boolean boolean51 = matcherRefBuilder50.hasId();
        org.apache.rat.configuration.builders.CopyrightBuilder copyrightBuilder52 = org.apache.rat.analysis.IHeaderMatcher.Builder.copyright();
        org.apache.rat.configuration.builders.CopyrightBuilder copyrightBuilder54 = copyrightBuilder52.setStart("OASIS");
        java.lang.String str55 = copyrightBuilder52.toString();
        org.apache.rat.configuration.builders.CopyrightBuilder copyrightBuilder57 = copyrightBuilder52.setStart("223f0aba-15d4-49e9-901e-5740c137aebf");
        org.apache.rat.configuration.builders.CopyrightBuilder copyrightBuilder58 = org.apache.rat.analysis.IHeaderMatcher.Builder.copyright();
        org.apache.rat.configuration.builders.CopyrightBuilder copyrightBuilder59 = org.apache.rat.analysis.IHeaderMatcher.Builder.copyright();
        java.lang.String str60 = copyrightBuilder59.toString();
        org.apache.rat.configuration.builders.CopyrightBuilder copyrightBuilder62 = copyrightBuilder59.setEnd(".cvsignore");
        boolean boolean63 = copyrightBuilder59.hasId();
        org.apache.rat.configuration.builders.CopyrightBuilder copyrightBuilder64 = org.apache.rat.analysis.IHeaderMatcher.Builder.copyright();
        java.lang.String str65 = copyrightBuilder64.toString();
        org.apache.rat.configuration.builders.CopyrightBuilder copyrightBuilder67 = copyrightBuilder64.setEnd(".cvsignore");
        boolean boolean68 = copyrightBuilder64.hasId();
        java.lang.String str69 = copyrightBuilder64.toString();
        org.apache.rat.configuration.builders.CopyrightBuilder copyrightBuilder70 = org.apache.rat.analysis.IHeaderMatcher.Builder.copyright();
        org.apache.rat.configuration.builders.CopyrightBuilder copyrightBuilder72 = copyrightBuilder70.setStart("OASIS");
        org.apache.rat.configuration.builders.AnyBuilder anyBuilder73 = org.apache.rat.analysis.IHeaderMatcher.Builder.any();
        org.apache.rat.configuration.builders.MatcherRefBuilder matcherRefBuilder74 = org.apache.rat.analysis.IHeaderMatcher.Builder.matcherRef();
        boolean boolean75 = matcherRefBuilder74.hasId();
        java.util.Map<java.lang.String, org.apache.rat.analysis.IHeaderMatcher> strMap76 = null;
        org.apache.rat.configuration.builders.MatcherRefBuilder matcherRefBuilder77 = matcherRefBuilder74.setMatchers(strMap76);
        org.apache.rat.configuration.builders.CopyrightBuilder copyrightBuilder78 = org.apache.rat.analysis.IHeaderMatcher.Builder.copyright();
        org.apache.rat.configuration.builders.MatcherRefBuilder matcherRefBuilder79 = org.apache.rat.analysis.IHeaderMatcher.Builder.matcherRef();
        boolean boolean80 = matcherRefBuilder79.hasId();
        java.lang.String str81 = matcherRefBuilder79.toString();
        java.util.Map<java.lang.String, org.apache.rat.analysis.IHeaderMatcher> strMap82 = null;
        org.apache.rat.configuration.builders.MatcherRefBuilder matcherRefBuilder83 = matcherRefBuilder79.setMatchers(strMap82);
        org.apache.rat.analysis.IHeaderMatcher.Builder[] builderArray84 = new org.apache.rat.analysis.IHeaderMatcher.Builder[] { matcherRefBuilder39, allBuilder43, copyrightBuilder49, matcherRefBuilder50, copyrightBuilder52, copyrightBuilder58, copyrightBuilder59, copyrightBuilder64, copyrightBuilder70, anyBuilder73, matcherRefBuilder74, copyrightBuilder78, matcherRefBuilder79 };
        java.util.ArrayList<org.apache.rat.analysis.IHeaderMatcher.Builder> builderList85 = new java.util.ArrayList<org.apache.rat.analysis.IHeaderMatcher.Builder>();
        boolean boolean86 = java.util.Collections.addAll((java.util.Collection<org.apache.rat.analysis.IHeaderMatcher.Builder>) builderList85, builderArray84);
        org.apache.rat.configuration.builders.AbstractBuilder abstractBuilder87 = notBuilder37.add((java.util.Collection<org.apache.rat.analysis.IHeaderMatcher.Builder>) builderList85);
        org.apache.rat.configuration.builders.AbstractBuilder abstractBuilder88 = anyBuilder31.add((java.util.Collection<org.apache.rat.analysis.IHeaderMatcher.Builder>) builderList85);
        org.apache.rat.configuration.builders.AbstractBuilder abstractBuilder89 = anyBuilder28.add((java.util.Collection<org.apache.rat.analysis.IHeaderMatcher.Builder>) builderList85);
        org.apache.rat.configuration.builders.AbstractBuilder abstractBuilder90 = allBuilder23.add((java.util.Collection<org.apache.rat.analysis.IHeaderMatcher.Builder>) builderList85);
        org.apache.rat.configuration.builders.AbstractBuilder abstractBuilder91 = allBuilder21.add((java.util.Collection<org.apache.rat.analysis.IHeaderMatcher.Builder>) builderList85);
        org.apache.rat.configuration.builders.AbstractBuilder abstractBuilder92 = notBuilder0.add((java.util.Collection<org.apache.rat.analysis.IHeaderMatcher.Builder>) builderList85);
        org.apache.rat.configuration.builders.AllBuilder allBuilder93 = org.apache.rat.analysis.IHeaderMatcher.Builder.all();
        org.apache.rat.analysis.IHeaderMatcher iHeaderMatcher94 = allBuilder93.build();
        org.apache.rat.configuration.builders.AbstractBuilder abstractBuilder95 = notBuilder0.add((org.apache.rat.analysis.IHeaderMatcher.Builder) allBuilder93);
        java.lang.String str96 = notBuilder0.toString();
        org.junit.Assert.assertNotNull(notBuilder0);
        org.junit.Assert.assertTrue("'" + boolean1 + "' != '" + false + "'", boolean1 == false);
        org.junit.Assert.assertNotNull(defaultLog3);
        org.junit.Assert.assertNotNull(builder4);
        org.junit.Assert.assertNotNull(builder6);
        org.junit.Assert.assertTrue("'" + state11 + "' != '" + org.apache.rat.analysis.IHeaderMatcher.State.f + "'", state11.equals(org.apache.rat.analysis.IHeaderMatcher.State.f));
        org.junit.Assert.assertNotNull(builder12);
        org.junit.Assert.assertNotNull(builder14);
        org.junit.Assert.assertNull(obj16);
        org.junit.Assert.assertEquals("'" + str18 + "' != '" + "AllBuilder:" + "'", str18, "AllBuilder:");
        org.junit.Assert.assertNotNull(iHeaderMatcherList19);
        org.junit.Assert.assertNull(obj20);
        org.junit.Assert.assertNotNull(allBuilder21);
        org.junit.Assert.assertNotNull(abstractBuilder22);
        org.junit.Assert.assertEquals("'" + str24 + "' != '" + "AllBuilder:" + "'", str24, "AllBuilder:");
        org.junit.Assert.assertEquals("'" + str25 + "' != '" + "AllBuilder:" + "'", str25, "AllBuilder:");
        org.junit.Assert.assertEquals("'" + str26 + "' != '" + "AllBuilder:" + "'", str26, "AllBuilder:");
        org.junit.Assert.assertNotNull(iHeaderMatcher27);
        org.junit.Assert.assertEquals("'" + str29 + "' != '" + "AnyBuilder:" + "'", str29, "AnyBuilder:");
        org.junit.Assert.assertNotNull(iHeaderMatcher30);
        org.junit.Assert.assertNotNull(anyBuilder31);
        org.junit.Assert.assertEquals("'" + str32 + "' != '" + "AnyBuilder:" + "'", str32, "AnyBuilder:");
        org.junit.Assert.assertNotNull(iHeaderMatcherList33);
        org.junit.Assert.assertNotNull(iHeaderMatcher34);
        org.junit.Assert.assertNotNull(iHeaderMatcher35);
        org.junit.Assert.assertNotNull(iHeaderMatcherList36);
        org.junit.Assert.assertEquals("'" + str38 + "' != '" + "NotBuilder: null" + "'", str38, "NotBuilder: null");
        org.junit.Assert.assertNotNull(matcherRefBuilder39);
        org.junit.Assert.assertTrue("'" + boolean40 + "' != '" + false + "'", boolean40 == false);
        org.junit.Assert.assertNotNull(matcherRefBuilder42);
        org.junit.Assert.assertNotNull(copyrightBuilder44);
        org.junit.Assert.assertNotNull(copyrightBuilder46);
        org.junit.Assert.assertEquals("'" + str47 + "' != '" + "Copyright Builder: s:OASIS e:null o:null" + "'", str47, "Copyright Builder: s:OASIS e:null o:null");
        org.junit.Assert.assertNotNull(copyrightBuilder49);
        org.junit.Assert.assertNotNull(matcherRefBuilder50);
        org.junit.Assert.assertTrue("'" + boolean51 + "' != '" + false + "'", boolean51 == false);
        org.junit.Assert.assertNotNull(copyrightBuilder52);
        org.junit.Assert.assertNotNull(copyrightBuilder54);
        org.junit.Assert.assertEquals("'" + str55 + "' != '" + "Copyright Builder: s:OASIS e:null o:null" + "'", str55, "Copyright Builder: s:OASIS e:null o:null");
        org.junit.Assert.assertNotNull(copyrightBuilder57);
        org.junit.Assert.assertNotNull(copyrightBuilder58);
        org.junit.Assert.assertNotNull(copyrightBuilder59);
        org.junit.Assert.assertEquals("'" + str60 + "' != '" + "Copyright Builder: s:null e:null o:null" + "'", str60, "Copyright Builder: s:null e:null o:null");
        org.junit.Assert.assertNotNull(copyrightBuilder62);
        org.junit.Assert.assertTrue("'" + boolean63 + "' != '" + false + "'", boolean63 == false);
        org.junit.Assert.assertNotNull(copyrightBuilder64);
        org.junit.Assert.assertEquals("'" + str65 + "' != '" + "Copyright Builder: s:null e:null o:null" + "'", str65, "Copyright Builder: s:null e:null o:null");
        org.junit.Assert.assertNotNull(copyrightBuilder67);
        org.junit.Assert.assertTrue("'" + boolean68 + "' != '" + false + "'", boolean68 == false);
        org.junit.Assert.assertEquals("'" + str69 + "' != '" + "Copyright Builder: s:null e:.cvsignore o:null" + "'", str69, "Copyright Builder: s:null e:.cvsignore o:null");
        org.junit.Assert.assertNotNull(copyrightBuilder70);
        org.junit.Assert.assertNotNull(copyrightBuilder72);
        org.junit.Assert.assertNotNull(anyBuilder73);
        org.junit.Assert.assertNotNull(matcherRefBuilder74);
        org.junit.Assert.assertTrue("'" + boolean75 + "' != '" + false + "'", boolean75 == false);
        org.junit.Assert.assertNotNull(matcherRefBuilder77);
        org.junit.Assert.assertNotNull(copyrightBuilder78);
        org.junit.Assert.assertNotNull(matcherRefBuilder79);
        org.junit.Assert.assertTrue("'" + boolean80 + "' != '" + false + "'", boolean80 == false);
        org.junit.Assert.assertEquals("'" + str81 + "' != '" + "MathcerRefBuilder: null" + "'", str81, "MathcerRefBuilder: null");
        org.junit.Assert.assertNotNull(matcherRefBuilder83);
        org.junit.Assert.assertNotNull(builderArray84);
        org.junit.Assert.assertTrue("'" + boolean86 + "' != '" + true + "'", boolean86 == true);
        org.junit.Assert.assertNotNull(abstractBuilder87);
        org.junit.Assert.assertNotNull(abstractBuilder88);
        org.junit.Assert.assertNotNull(abstractBuilder89);
        org.junit.Assert.assertNotNull(abstractBuilder90);
        org.junit.Assert.assertNotNull(abstractBuilder91);
        org.junit.Assert.assertNotNull(abstractBuilder92);
        org.junit.Assert.assertNotNull(allBuilder93);
        org.junit.Assert.assertNotNull(iHeaderMatcher94);
        org.junit.Assert.assertNotNull(abstractBuilder95);
        org.junit.Assert.assertEquals("'" + str96 + "' != '" + "NotBuilder: MathcerRefBuilder: null" + "'", str96, "NotBuilder: MathcerRefBuilder: null");
    }

    @Test
    public void test12893() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest25.test12893");
        boolean boolean1 = org.apache.rat.document.impl.guesser.BinaryGuesser.isBinaryData("58b635db-013c-4c62-a5ea-1307084f8666");
        org.junit.Assert.assertTrue("'" + boolean1 + "' != '" + false + "'", boolean1 == false);
    }

    @Test
    public void test12894() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest25.test12894");
        java.lang.String[] strArray8 = new java.lang.String[] { "NotBuilder: null", "Datum [ name ='http://org/apache/rat/meta-data#LicenseFamilyCategory',value ='OASIS ']", "Copyright Builder: s:null e:null o:null", "Datum [ name ='http://org/apache/rat/meta-data#LicenseFamilyCategory',value ='DOJO  ']", "Datum [ name ='http://org/apache/rat/meta-data#LicenseFamilyCategory',value ='OASIS ']", "http://org/apache/rat/meta-data#HeaderCategory" };
        boolean boolean9 = org.apache.rat.document.impl.guesser.BinaryGuesser.extensionMatches("Modified BSD License", strArray8);
        boolean boolean10 = org.apache.rat.document.impl.guesser.BinaryGuesser.extensionMatches("faa10b62-dcc0-4eae-baec-502cdfefeaee", strArray8);
        org.junit.Assert.assertNotNull(strArray8);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
    }

    @Test
    public void test12895() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest25.test12895");
        org.apache.rat.analysis.matchers.FullTextMatcher fullTextMatcher2 = new org.apache.rat.analysis.matchers.FullTextMatcher("TMF  ", "Apache License Version 2.0");
        org.apache.rat.analysis.IHeaderMatcher.State state3 = fullTextMatcher2.finalizeState();
        fullTextMatcher2.reset();
        fullTextMatcher2.reset();
        boolean boolean7 = fullTextMatcher2.doMatch("org/apache/rat/plain-rat.xsl");
        org.apache.rat.analysis.IHeaderMatcher.State state8 = fullTextMatcher2.finalizeState();
        org.apache.rat.analysis.IHeaderMatcher.State state10 = fullTextMatcher2.matches("bd015714-405b-4304-9faa-36efad80e6e6");
        fullTextMatcher2.reset();
        org.junit.Assert.assertTrue("'" + state3 + "' != '" + org.apache.rat.analysis.IHeaderMatcher.State.f + "'", state3.equals(org.apache.rat.analysis.IHeaderMatcher.State.f));
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertTrue("'" + state8 + "' != '" + org.apache.rat.analysis.IHeaderMatcher.State.f + "'", state8.equals(org.apache.rat.analysis.IHeaderMatcher.State.f));
        org.junit.Assert.assertTrue("'" + state10 + "' != '" + org.apache.rat.analysis.IHeaderMatcher.State.f + "'", state10.equals(org.apache.rat.analysis.IHeaderMatcher.State.f));
    }

    @Test
    public void test12896() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest25.test12896");
        java.lang.String[] strArray5 = new java.lang.String[] { "http://org/apache/rat/meta-data#LicenseFamilyCategory", "Datum [ name ='http://org/apache/rat/meta-data#LicenseFamilyCategory',value ='GPL1  ']", "MANIFEST.MF", "AllBuilder:", "The MIT License" };
        org.apache.rat.utils.ReportingSet<java.lang.String> strSet6 = new org.apache.rat.utils.ReportingSet<java.lang.String>();
        boolean boolean7 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strSet6, strArray5);
        boolean boolean9 = strSet6.addIfNotPresent("http://org/apache/rat/meta-data#LicenseFamilyName");
        boolean boolean11 = strSet6.addIfNotPresent("ef7a8b13-64c3-4510-bb0c-dbf208e1e73f");
        java.util.function.Function<java.lang.String, java.lang.String> strFunction12 = null;
        org.apache.rat.utils.ReportingSet<java.lang.String> strSet13 = strSet6.setMsgFormat(strFunction12);
        java.util.SortedSet<org.apache.rat.license.ILicenseFamily> iLicenseFamilySet15 = org.apache.rat.license.LicenseFamilySetFactory.emptyLicenseFamilySet();
        org.apache.rat.license.ILicenseFamily iLicenseFamily16 = org.apache.rat.license.LicenseFamilySetFactory.search("http://org/apache/rat/meta-data", iLicenseFamilySet15);
        boolean boolean17 = strSet6.containsAll((java.util.Collection<org.apache.rat.license.ILicenseFamily>) iLicenseFamilySet15);
        boolean boolean18 = strSet6.isEmpty();
        java.util.Spliterator<java.lang.String> strSpliterator19 = strSet6.spliterator();
        org.junit.Assert.assertNotNull(strArray5);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + true + "'", boolean7 == true);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + true + "'", boolean9 == true);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + true + "'", boolean11 == true);
        org.junit.Assert.assertNotNull(strSet13);
        org.junit.Assert.assertNotNull(iLicenseFamilySet15);
        org.junit.Assert.assertNull(iLicenseFamily16);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + true + "'", boolean17 == true);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + false + "'", boolean18 == false);
        org.junit.Assert.assertNotNull(strSpliterator19);
    }

    @Test
    public void test12897() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest25.test12897");
        boolean boolean1 = org.apache.rat.document.impl.guesser.BinaryGuesser.isAudio("W3CD ");
        org.junit.Assert.assertTrue("'" + boolean1 + "' != '" + false + "'", boolean1 == false);
    }

    @Test
    public void test12898() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest25.test12898");
        org.apache.rat.configuration.builders.AllBuilder allBuilder0 = new org.apache.rat.configuration.builders.AllBuilder();
        java.lang.String str1 = allBuilder0.toString();
        java.lang.String str2 = allBuilder0.toString();
        java.lang.String str3 = allBuilder0.toString();
        org.apache.rat.analysis.IHeaderMatcher iHeaderMatcher4 = allBuilder0.build();
        org.apache.rat.configuration.builders.TextBuilder textBuilder5 = new org.apache.rat.configuration.builders.TextBuilder();
        org.apache.rat.configuration.builders.TextBuilder textBuilder7 = textBuilder5.setText("true");
        java.lang.String str8 = textBuilder7.toString();
        org.apache.rat.configuration.builders.TextBuilder textBuilder10 = textBuilder7.setText("1c65536e-7ce4-4a7c-817f-dbd9c07a163f");
        org.apache.rat.configuration.builders.AbstractBuilder abstractBuilder11 = allBuilder0.add((org.apache.rat.analysis.IHeaderMatcher.Builder) textBuilder10);
        org.junit.Assert.assertEquals("'" + str1 + "' != '" + "AllBuilder:" + "'", str1, "AllBuilder:");
        org.junit.Assert.assertEquals("'" + str2 + "' != '" + "AllBuilder:" + "'", str2, "AllBuilder:");
        org.junit.Assert.assertEquals("'" + str3 + "' != '" + "AllBuilder:" + "'", str3, "AllBuilder:");
        org.junit.Assert.assertNotNull(iHeaderMatcher4);
        org.junit.Assert.assertNotNull(textBuilder7);
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "TextBuilder: true" + "'", str8, "TextBuilder: true");
        org.junit.Assert.assertNotNull(textBuilder10);
        org.junit.Assert.assertNotNull(abstractBuilder11);
    }

    @Test
    public void test12899() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest25.test12899");
        org.apache.rat.configuration.Format format0 = org.apache.rat.configuration.Format.XML;
        org.apache.rat.configuration.LicenseReader licenseReader1 = format0.licenseReader();
        org.apache.rat.configuration.MatcherReader matcherReader2 = format0.matcherReader();
        org.apache.rat.configuration.LicenseReader licenseReader3 = format0.licenseReader();
        org.apache.rat.configuration.LicenseReader licenseReader4 = format0.licenseReader();
        java.util.SortedSet<org.apache.rat.license.ILicenseFamily> iLicenseFamilySet5 = licenseReader4.readFamilies();
        org.apache.rat.utils.ReportingSet<java.lang.String> strSet6 = new org.apache.rat.utils.ReportingSet<java.lang.String>();
        boolean boolean8 = strSet6.addIfNotPresent("OASIS Open License");
        java.util.function.Function<java.lang.String, java.lang.String> strFunction9 = null;
        org.apache.rat.utils.ReportingSet<java.lang.String> strSet10 = strSet6.setMsgFormat(strFunction9);
        java.util.Iterator<java.lang.String> strItor11 = strSet6.iterator();
        boolean boolean13 = strSet6.addIfNotPresent("c523095e-4421-4cc4-93e2-039f23b91f76");
        org.apache.rat.utils.ReportingSet<java.lang.String> strSet15 = strSet6.tailSet("535b5d01-f553-45e5-bb29-a646e4b8b66f");
        org.apache.rat.license.LicenseFamilySetFactory licenseFamilySetFactory16 = new org.apache.rat.license.LicenseFamilySetFactory(iLicenseFamilySet5, (java.util.Collection<java.lang.String>) strSet15);
        boolean boolean17 = strSet15.isEmpty();
        strSet15.clear();
        org.junit.Assert.assertTrue("'" + format0 + "' != '" + org.apache.rat.configuration.Format.XML + "'", format0.equals(org.apache.rat.configuration.Format.XML));
        org.junit.Assert.assertNotNull(licenseReader1);
        org.junit.Assert.assertNotNull(matcherReader2);
        org.junit.Assert.assertNotNull(licenseReader3);
        org.junit.Assert.assertNotNull(licenseReader4);
        org.junit.Assert.assertNotNull(iLicenseFamilySet5);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + true + "'", boolean8 == true);
        org.junit.Assert.assertNotNull(strSet10);
        org.junit.Assert.assertNotNull(strItor11);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + true + "'", boolean13 == true);
        org.junit.Assert.assertNotNull(strSet15);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + false + "'", boolean17 == false);
    }

    @Test
    public void test12900() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest25.test12900");
        org.apache.rat.Defaults.Builder builder0 = org.apache.rat.Defaults.builder();
        org.apache.rat.Defaults.Builder builder2 = builder0.add("META-DATA#LICENSEFAMILYNAME");
        org.apache.rat.Defaults.Builder builder4 = builder0.remove("Copyright Builder: s:null e:null o:null");
        org.apache.rat.Defaults.Builder builder6 = builder0.add("COMMON DEVELOPMENT AND DISTRIBUTION LICENSE Version 1.0");
        org.apache.rat.Defaults.Builder builder7 = builder0.noDefault();
        org.apache.rat.Defaults.Builder builder9 = builder0.remove("");
        // The following exception was thrown during execution in test generation
        try {
            org.apache.rat.Defaults defaults10 = builder9.build();
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: No such suffix: 0");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(builder0);
        org.junit.Assert.assertNotNull(builder2);
        org.junit.Assert.assertNotNull(builder4);
        org.junit.Assert.assertNotNull(builder6);
        org.junit.Assert.assertNotNull(builder7);
        org.junit.Assert.assertNotNull(builder9);
    }

    @Test
    public void test12901() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest25.test12901");
        org.apache.rat.utils.ReportingSet<java.lang.String> strSet0 = new org.apache.rat.utils.ReportingSet<java.lang.String>();
        boolean boolean2 = strSet0.addIfNotPresent("OASIS Open License");
        boolean boolean4 = strSet0.add("http://org/apache/rat/meta-data#HeaderCategory");
        java.util.Iterator<java.lang.String> strItor5 = strSet0.iterator();
        org.apache.rat.utils.ReportingSet<java.lang.String> strSet7 = strSet0.tailSet("0356753d-7389-48e7-8d63-056fd4c4548c");
        java.lang.String str8 = strSet7.first();
        int int9 = strSet7.size();
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + true + "'", boolean2 == true);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + true + "'", boolean4 == true);
        org.junit.Assert.assertNotNull(strItor5);
        org.junit.Assert.assertNotNull(strSet7);
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "OASIS Open License" + "'", str8, "OASIS Open License");
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + 2 + "'", int9 == 2);
    }

    @Test
    public void test12902() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest25.test12902");
        org.apache.rat.Defaults.Builder builder0 = org.apache.rat.Defaults.builder();
        org.apache.rat.Defaults defaults1 = builder0.build();
        org.apache.rat.Defaults.Builder builder2 = builder0.noDefault();
        org.apache.rat.Defaults.Builder builder4 = builder0.add("W3C Document Copyright");
        org.apache.rat.Defaults.Builder builder6 = builder0.add("9c36f068-9920-4c66-98c2-ba24e3dffa9c");
        org.apache.rat.Defaults.Builder builder8 = builder6.add("The MIT License");
        org.apache.rat.Defaults.Builder builder10 = builder8.remove("00186AD8-9B49-4E79-B8F0-40326F09C054");
        org.apache.rat.Defaults.Builder builder12 = builder8.add("EBC30EB7B3EA4F39BAEA5FEA4FA0278B");
        java.io.File file13 = null;
        // The following exception was thrown during execution in test generation
        try {
            org.apache.rat.Defaults.Builder builder14 = builder8.remove(file13);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(builder0);
        org.junit.Assert.assertNotNull(defaults1);
        org.junit.Assert.assertNotNull(builder2);
        org.junit.Assert.assertNotNull(builder4);
        org.junit.Assert.assertNotNull(builder6);
        org.junit.Assert.assertNotNull(builder8);
        org.junit.Assert.assertNotNull(builder10);
        org.junit.Assert.assertNotNull(builder12);
    }

    @Test
    public void test12903() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest25.test12903");
        org.apache.rat.license.ILicense.Builder builder0 = org.apache.rat.license.ILicense.builder();
        org.apache.rat.license.ILicense.Builder builder2 = builder0.setLicenseFamilyCategory("");
        org.apache.rat.license.ILicense.Builder builder4 = builder2.setDerivedFrom("GEN  ");
        org.apache.rat.license.ILicense.Builder builder6 = builder4.setLicenseFamilyCategory("Datum [ name ='http://org/apache/rat/meta-data#LicenseFamilyName',value ='????? ']");
        org.apache.rat.license.ILicense.Builder builder8 = builder6.setDerivedFrom("GPL3 ");
        org.apache.rat.license.ILicense.Builder builder10 = builder8.setDerivedFrom("Datum [ name ='http://org/apache/rat/meta-data#LicenseFamilyCategory',value ='OASIS ']");
        org.apache.rat.license.ILicense.Builder builder12 = builder8.setName("8a28803c-c6cf-46ab-b2e5-c55ad4ef3005");
        org.apache.rat.configuration.builders.NotBuilder notBuilder13 = new org.apache.rat.configuration.builders.NotBuilder();
        java.lang.String str14 = notBuilder13.toString();
        org.apache.rat.configuration.builders.MatcherRefBuilder matcherRefBuilder15 = org.apache.rat.analysis.IHeaderMatcher.Builder.matcherRef();
        boolean boolean16 = matcherRefBuilder15.hasId();
        java.util.Map<java.lang.String, org.apache.rat.analysis.IHeaderMatcher> strMap17 = null;
        org.apache.rat.configuration.builders.MatcherRefBuilder matcherRefBuilder18 = matcherRefBuilder15.setMatchers(strMap17);
        org.apache.rat.configuration.builders.AllBuilder allBuilder19 = new org.apache.rat.configuration.builders.AllBuilder();
        org.apache.rat.configuration.builders.CopyrightBuilder copyrightBuilder20 = org.apache.rat.analysis.IHeaderMatcher.Builder.copyright();
        org.apache.rat.configuration.builders.CopyrightBuilder copyrightBuilder22 = copyrightBuilder20.setStart("OASIS");
        java.lang.String str23 = copyrightBuilder20.toString();
        org.apache.rat.configuration.builders.CopyrightBuilder copyrightBuilder25 = copyrightBuilder20.setStart("223f0aba-15d4-49e9-901e-5740c137aebf");
        org.apache.rat.configuration.builders.MatcherRefBuilder matcherRefBuilder26 = org.apache.rat.analysis.IHeaderMatcher.Builder.matcherRef();
        boolean boolean27 = matcherRefBuilder26.hasId();
        org.apache.rat.configuration.builders.CopyrightBuilder copyrightBuilder28 = org.apache.rat.analysis.IHeaderMatcher.Builder.copyright();
        org.apache.rat.configuration.builders.CopyrightBuilder copyrightBuilder30 = copyrightBuilder28.setStart("OASIS");
        java.lang.String str31 = copyrightBuilder28.toString();
        org.apache.rat.configuration.builders.CopyrightBuilder copyrightBuilder33 = copyrightBuilder28.setStart("223f0aba-15d4-49e9-901e-5740c137aebf");
        org.apache.rat.configuration.builders.CopyrightBuilder copyrightBuilder34 = org.apache.rat.analysis.IHeaderMatcher.Builder.copyright();
        org.apache.rat.configuration.builders.CopyrightBuilder copyrightBuilder35 = org.apache.rat.analysis.IHeaderMatcher.Builder.copyright();
        java.lang.String str36 = copyrightBuilder35.toString();
        org.apache.rat.configuration.builders.CopyrightBuilder copyrightBuilder38 = copyrightBuilder35.setEnd(".cvsignore");
        boolean boolean39 = copyrightBuilder35.hasId();
        org.apache.rat.configuration.builders.CopyrightBuilder copyrightBuilder40 = org.apache.rat.analysis.IHeaderMatcher.Builder.copyright();
        java.lang.String str41 = copyrightBuilder40.toString();
        org.apache.rat.configuration.builders.CopyrightBuilder copyrightBuilder43 = copyrightBuilder40.setEnd(".cvsignore");
        boolean boolean44 = copyrightBuilder40.hasId();
        java.lang.String str45 = copyrightBuilder40.toString();
        org.apache.rat.configuration.builders.CopyrightBuilder copyrightBuilder46 = org.apache.rat.analysis.IHeaderMatcher.Builder.copyright();
        org.apache.rat.configuration.builders.CopyrightBuilder copyrightBuilder48 = copyrightBuilder46.setStart("OASIS");
        org.apache.rat.configuration.builders.AnyBuilder anyBuilder49 = org.apache.rat.analysis.IHeaderMatcher.Builder.any();
        org.apache.rat.configuration.builders.MatcherRefBuilder matcherRefBuilder50 = org.apache.rat.analysis.IHeaderMatcher.Builder.matcherRef();
        boolean boolean51 = matcherRefBuilder50.hasId();
        java.util.Map<java.lang.String, org.apache.rat.analysis.IHeaderMatcher> strMap52 = null;
        org.apache.rat.configuration.builders.MatcherRefBuilder matcherRefBuilder53 = matcherRefBuilder50.setMatchers(strMap52);
        org.apache.rat.configuration.builders.CopyrightBuilder copyrightBuilder54 = org.apache.rat.analysis.IHeaderMatcher.Builder.copyright();
        org.apache.rat.configuration.builders.MatcherRefBuilder matcherRefBuilder55 = org.apache.rat.analysis.IHeaderMatcher.Builder.matcherRef();
        boolean boolean56 = matcherRefBuilder55.hasId();
        java.lang.String str57 = matcherRefBuilder55.toString();
        java.util.Map<java.lang.String, org.apache.rat.analysis.IHeaderMatcher> strMap58 = null;
        org.apache.rat.configuration.builders.MatcherRefBuilder matcherRefBuilder59 = matcherRefBuilder55.setMatchers(strMap58);
        org.apache.rat.analysis.IHeaderMatcher.Builder[] builderArray60 = new org.apache.rat.analysis.IHeaderMatcher.Builder[] { matcherRefBuilder15, allBuilder19, copyrightBuilder25, matcherRefBuilder26, copyrightBuilder28, copyrightBuilder34, copyrightBuilder35, copyrightBuilder40, copyrightBuilder46, anyBuilder49, matcherRefBuilder50, copyrightBuilder54, matcherRefBuilder55 };
        java.util.ArrayList<org.apache.rat.analysis.IHeaderMatcher.Builder> builderList61 = new java.util.ArrayList<org.apache.rat.analysis.IHeaderMatcher.Builder>();
        boolean boolean62 = java.util.Collections.addAll((java.util.Collection<org.apache.rat.analysis.IHeaderMatcher.Builder>) builderList61, builderArray60);
        org.apache.rat.configuration.builders.AbstractBuilder abstractBuilder63 = notBuilder13.add((java.util.Collection<org.apache.rat.analysis.IHeaderMatcher.Builder>) builderList61);
        java.lang.String str64 = notBuilder13.toString();
        java.lang.String str65 = notBuilder13.toString();
        org.apache.rat.license.ILicense.Builder builder66 = builder12.setMatcher((org.apache.rat.analysis.IHeaderMatcher.Builder) notBuilder13);
        org.junit.Assert.assertNotNull(builder0);
        org.junit.Assert.assertNotNull(builder2);
        org.junit.Assert.assertNotNull(builder4);
        org.junit.Assert.assertNotNull(builder6);
        org.junit.Assert.assertNotNull(builder8);
        org.junit.Assert.assertNotNull(builder10);
        org.junit.Assert.assertNotNull(builder12);
        org.junit.Assert.assertEquals("'" + str14 + "' != '" + "NotBuilder: null" + "'", str14, "NotBuilder: null");
        org.junit.Assert.assertNotNull(matcherRefBuilder15);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
        org.junit.Assert.assertNotNull(matcherRefBuilder18);
        org.junit.Assert.assertNotNull(copyrightBuilder20);
        org.junit.Assert.assertNotNull(copyrightBuilder22);
        org.junit.Assert.assertEquals("'" + str23 + "' != '" + "Copyright Builder: s:OASIS e:null o:null" + "'", str23, "Copyright Builder: s:OASIS e:null o:null");
        org.junit.Assert.assertNotNull(copyrightBuilder25);
        org.junit.Assert.assertNotNull(matcherRefBuilder26);
        org.junit.Assert.assertTrue("'" + boolean27 + "' != '" + false + "'", boolean27 == false);
        org.junit.Assert.assertNotNull(copyrightBuilder28);
        org.junit.Assert.assertNotNull(copyrightBuilder30);
        org.junit.Assert.assertEquals("'" + str31 + "' != '" + "Copyright Builder: s:OASIS e:null o:null" + "'", str31, "Copyright Builder: s:OASIS e:null o:null");
        org.junit.Assert.assertNotNull(copyrightBuilder33);
        org.junit.Assert.assertNotNull(copyrightBuilder34);
        org.junit.Assert.assertNotNull(copyrightBuilder35);
        org.junit.Assert.assertEquals("'" + str36 + "' != '" + "Copyright Builder: s:null e:null o:null" + "'", str36, "Copyright Builder: s:null e:null o:null");
        org.junit.Assert.assertNotNull(copyrightBuilder38);
        org.junit.Assert.assertTrue("'" + boolean39 + "' != '" + false + "'", boolean39 == false);
        org.junit.Assert.assertNotNull(copyrightBuilder40);
        org.junit.Assert.assertEquals("'" + str41 + "' != '" + "Copyright Builder: s:null e:null o:null" + "'", str41, "Copyright Builder: s:null e:null o:null");
        org.junit.Assert.assertNotNull(copyrightBuilder43);
        org.junit.Assert.assertTrue("'" + boolean44 + "' != '" + false + "'", boolean44 == false);
        org.junit.Assert.assertEquals("'" + str45 + "' != '" + "Copyright Builder: s:null e:.cvsignore o:null" + "'", str45, "Copyright Builder: s:null e:.cvsignore o:null");
        org.junit.Assert.assertNotNull(copyrightBuilder46);
        org.junit.Assert.assertNotNull(copyrightBuilder48);
        org.junit.Assert.assertNotNull(anyBuilder49);
        org.junit.Assert.assertNotNull(matcherRefBuilder50);
        org.junit.Assert.assertTrue("'" + boolean51 + "' != '" + false + "'", boolean51 == false);
        org.junit.Assert.assertNotNull(matcherRefBuilder53);
        org.junit.Assert.assertNotNull(copyrightBuilder54);
        org.junit.Assert.assertNotNull(matcherRefBuilder55);
        org.junit.Assert.assertTrue("'" + boolean56 + "' != '" + false + "'", boolean56 == false);
        org.junit.Assert.assertEquals("'" + str57 + "' != '" + "MathcerRefBuilder: null" + "'", str57, "MathcerRefBuilder: null");
        org.junit.Assert.assertNotNull(matcherRefBuilder59);
        org.junit.Assert.assertNotNull(builderArray60);
        org.junit.Assert.assertTrue("'" + boolean62 + "' != '" + true + "'", boolean62 == true);
        org.junit.Assert.assertNotNull(abstractBuilder63);
        org.junit.Assert.assertEquals("'" + str64 + "' != '" + "NotBuilder: MathcerRefBuilder: null" + "'", str64, "NotBuilder: MathcerRefBuilder: null");
        org.junit.Assert.assertEquals("'" + str65 + "' != '" + "NotBuilder: MathcerRefBuilder: null" + "'", str65, "NotBuilder: MathcerRefBuilder: null");
        org.junit.Assert.assertNotNull(builder66);
    }

    @Test
    public void test12904() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest25.test12904");
        org.apache.rat.analysis.matchers.FullTextMatcher fullTextMatcher1 = new org.apache.rat.analysis.matchers.FullTextMatcher("Copyright Builder: s:null e:null o:null");
        org.apache.rat.analysis.IHeaderMatcher.State state3 = fullTextMatcher1.matches("f false");
        fullTextMatcher1.reset();
        org.apache.rat.analysis.IHeaderMatcher.State state5 = fullTextMatcher1.currentState();
        fullTextMatcher1.reset();
        org.apache.rat.analysis.IHeaderMatcher.State state8 = fullTextMatcher1.matches("a31c35e6-bb4e-4807-ad11-4dc9b09d976b");
        java.lang.String str9 = fullTextMatcher1.getId();
        boolean boolean11 = fullTextMatcher1.doMatch("902d119b-8109-446b-807f-4c6b5ad0e05d");
        org.junit.Assert.assertTrue("'" + state3 + "' != '" + org.apache.rat.analysis.IHeaderMatcher.State.i + "'", state3.equals(org.apache.rat.analysis.IHeaderMatcher.State.i));
        org.junit.Assert.assertTrue("'" + state5 + "' != '" + org.apache.rat.analysis.IHeaderMatcher.State.i + "'", state5.equals(org.apache.rat.analysis.IHeaderMatcher.State.i));
        org.junit.Assert.assertTrue("'" + state8 + "' != '" + org.apache.rat.analysis.IHeaderMatcher.State.i + "'", state8.equals(org.apache.rat.analysis.IHeaderMatcher.State.i));
// flaky:         org.junit.Assert.assertEquals("'" + str9 + "' != '" + "a2ec5e3d-6cd4-4333-b4ee-67c9ff4da435" + "'", str9, "a2ec5e3d-6cd4-4333-b4ee-67c9ff4da435");
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
    }

    @Test
    public void test12905() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest25.test12905");
        // The following exception was thrown during execution in test generation
        try {
            org.apache.rat.configuration.Format format1 = org.apache.rat.configuration.Format.fromName("454fa");
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: No such suffix: 454fa");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
    }

    @Test
    public void test12906() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest25.test12906");
        org.apache.rat.license.ILicenseFamily[] iLicenseFamilyArray0 = new org.apache.rat.license.ILicenseFamily[] {};
        java.util.ArrayList<org.apache.rat.license.ILicenseFamily> iLicenseFamilyList1 = new java.util.ArrayList<org.apache.rat.license.ILicenseFamily>();
        boolean boolean2 = java.util.Collections.addAll((java.util.Collection<org.apache.rat.license.ILicenseFamily>) iLicenseFamilyList1, iLicenseFamilyArray0);
        org.apache.rat.policy.DefaultPolicy defaultPolicy3 = new org.apache.rat.policy.DefaultPolicy((java.util.Collection<org.apache.rat.license.ILicenseFamily>) iLicenseFamilyList1);
        java.util.SortedSet<org.apache.rat.license.ILicenseFamily> iLicenseFamilySet4 = defaultPolicy3.getApprovedLicenseNames();
        org.apache.rat.api.Document document5 = null;
        defaultPolicy3.analyse(document5);
        java.util.SortedSet<org.apache.rat.license.ILicenseFamily> iLicenseFamilySet7 = defaultPolicy3.getApprovedLicenseNames();
        org.apache.rat.api.Document document8 = null;
        defaultPolicy3.analyse(document8);
        java.util.SortedSet<org.apache.rat.license.ILicenseFamily> iLicenseFamilySet10 = defaultPolicy3.getApprovedLicenseNames();
        org.junit.Assert.assertNotNull(iLicenseFamilyArray0);
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + false + "'", boolean2 == false);
        org.junit.Assert.assertNotNull(iLicenseFamilySet4);
        org.junit.Assert.assertNotNull(iLicenseFamilySet7);
        org.junit.Assert.assertNotNull(iLicenseFamilySet10);
    }

    @Test
    public void test12907() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest25.test12907");
        org.apache.rat.analysis.license.FullTextMatchingLicense fullTextMatchingLicense0 = new org.apache.rat.analysis.license.FullTextMatchingLicense();
        fullTextMatchingLicense0.setLicenseFamilyName("hi!");
        java.lang.String str3 = fullTextMatchingLicense0.getLicenseFamilyCategory();
        java.lang.String str4 = fullTextMatchingLicense0.getLicenseFamilyName();
        fullTextMatchingLicense0.setLicenseFamilyName("SpdxBuilder: null");
        fullTextMatchingLicense0.setLicenseFamilyName("7d01b1b3-e7b9-4f85-b3dd-e0334dea8844");
        java.lang.String str9 = fullTextMatchingLicense0.getLicenseFamilyName();
        fullTextMatchingLicense0.setFullText("AllBuilder:\nMathcerRefBuilder: null\nAnyBuilder:\nNotBuilder: MathcerRefBuilder: null\nMathcerRefBuilder: null");
        org.junit.Assert.assertNull(str3);
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "hi!" + "'", str4, "hi!");
        org.junit.Assert.assertEquals("'" + str9 + "' != '" + "7d01b1b3-e7b9-4f85-b3dd-e0334dea8844" + "'", str9, "7d01b1b3-e7b9-4f85-b3dd-e0334dea8844");
    }

    @Test
    public void test12908() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest25.test12908");
        org.apache.rat.configuration.builders.TextBuilder textBuilder0 = new org.apache.rat.configuration.builders.TextBuilder();
        org.apache.rat.configuration.builders.TextBuilder textBuilder2 = textBuilder0.setText("true");
        org.apache.rat.configuration.builders.TextBuilder textBuilder4 = textBuilder2.setText("http://org/apache/rat/meta-data#HeaderSample");
        org.apache.rat.analysis.IHeaderMatcher iHeaderMatcher5 = textBuilder4.build();
        org.apache.rat.configuration.builders.TextCaptureBuilder textCaptureBuilder7 = textBuilder4.setText("W3C  ");
        org.apache.rat.configuration.builders.TextBuilder textBuilder9 = textBuilder4.setText("4fcae176-e574-46ed-b9e4-dea2e2f3b458");
        boolean boolean10 = textBuilder4.hasId();
        org.apache.rat.analysis.IHeaderMatcher iHeaderMatcher11 = textBuilder4.build();
        org.junit.Assert.assertNotNull(textBuilder2);
        org.junit.Assert.assertNotNull(textBuilder4);
        org.junit.Assert.assertNotNull(iHeaderMatcher5);
        org.junit.Assert.assertNotNull(textCaptureBuilder7);
        org.junit.Assert.assertNotNull(textBuilder9);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertNotNull(iHeaderMatcher11);
    }

    @Test
    public void test12909() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest25.test12909");
        java.util.regex.Pattern pattern1 = null;
        org.apache.rat.analysis.matchers.SimpleRegexMatcher simpleRegexMatcher2 = new org.apache.rat.analysis.matchers.SimpleRegexMatcher("org/apache/rat/unapproved-licenses.xsl", pattern1);
        // The following exception was thrown during execution in test generation
        try {
            boolean boolean4 = simpleRegexMatcher2.doMatch("Copyright Builder: s:null e:a1d7a6cd-e548-4846-82aa-06426863977c o:TextBuilder: Datum [ name ='http:...");
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
    }

    @Test
    public void test12910() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest25.test12910");
        org.apache.rat.configuration.Format format0 = org.apache.rat.configuration.Format.XML;
        org.apache.rat.configuration.LicenseReader licenseReader1 = format0.licenseReader();
        java.util.SortedSet<org.apache.rat.license.ILicense> iLicenseSet2 = licenseReader1.readLicenses();
        java.lang.String[] strArray8 = new java.lang.String[] { "http://org/apache/rat/meta-data#LicenseFamilyCategory", "Datum [ name ='http://org/apache/rat/meta-data#LicenseFamilyCategory',value ='GPL1  ']", "MANIFEST.MF", "AllBuilder:", "The MIT License" };
        org.apache.rat.utils.ReportingSet<java.lang.String> strSet9 = new org.apache.rat.utils.ReportingSet<java.lang.String>();
        boolean boolean10 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strSet9, strArray8);
        boolean boolean12 = strSet9.addIfNotPresent("http://org/apache/rat/meta-data#LicenseFamilyName");
        boolean boolean14 = strSet9.addIfNotPresent("ef7a8b13-64c3-4510-bb0c-dbf208e1e73f");
        java.util.function.Function<java.lang.String, java.lang.String> strFunction15 = null;
        org.apache.rat.utils.ReportingSet<java.lang.String> strSet16 = strSet9.setMsgFormat(strFunction15);
        boolean boolean17 = strSet9.isEmpty();
        org.apache.rat.license.LicenseSetFactory licenseSetFactory18 = new org.apache.rat.license.LicenseSetFactory(iLicenseSet2, (java.util.Collection<java.lang.String>) strSet9);
        boolean boolean19 = strSet9.isEmpty();
        org.apache.rat.utils.ReportingSet<java.lang.String> strSet21 = strSet9.tailSet("MANIFEST.MF");
        java.util.stream.Stream<java.lang.String> strStream22 = strSet21.stream();
        org.apache.rat.utils.ReportingSet<java.lang.String> strSet24 = strSet21.tailSet("MathcerRefBuilder: http:");
        org.junit.Assert.assertTrue("'" + format0 + "' != '" + org.apache.rat.configuration.Format.XML + "'", format0.equals(org.apache.rat.configuration.Format.XML));
        org.junit.Assert.assertNotNull(licenseReader1);
        org.junit.Assert.assertNotNull(iLicenseSet2);
        org.junit.Assert.assertNotNull(strArray8);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + true + "'", boolean10 == true);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + true + "'", boolean12 == true);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + true + "'", boolean14 == true);
        org.junit.Assert.assertNotNull(strSet16);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + false + "'", boolean17 == false);
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + false + "'", boolean19 == false);
        org.junit.Assert.assertNotNull(strSet21);
        org.junit.Assert.assertNotNull(strStream22);
        org.junit.Assert.assertNotNull(strSet24);
    }

    @Test
    public void test12911() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest25.test12911");
        org.apache.rat.report.claim.ClaimStatistic claimStatistic0 = new org.apache.rat.report.claim.ClaimStatistic();
        claimStatistic0.setNumApproved((int) (short) 10);
        java.util.Map<java.lang.String, java.lang.Integer> strMap3 = null;
        claimStatistic0.setDocumentCategoryMap(strMap3);
        java.util.Map<java.lang.String, java.lang.Integer> strMap5 = claimStatistic0.getLicenseFileNameMap();
        claimStatistic0.setNumUnknown((int) (byte) -1);
        java.util.Map<java.lang.String, java.lang.Integer> strMap8 = claimStatistic0.getDocumentCategoryMap();
        int int9 = claimStatistic0.getNumUnknown();
        int int10 = claimStatistic0.getNumUnApproved();
        org.junit.Assert.assertNull(strMap5);
        org.junit.Assert.assertNull(strMap8);
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + (-1) + "'", int9 == (-1));
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + 0 + "'", int10 == 0);
    }

    @Test
    public void test12912() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest25.test12912");
        org.apache.rat.api.MetaData.Datum datum2 = new org.apache.rat.api.MetaData.Datum("5fec021b-b12e-48c3-a002-3eea7a06339a", "Datum [ name ='http://org/apache/rat/meta-data#ApprovedLicense',value ='false ']");
    }

    @Test
    public void test12913() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest25.test12913");
        org.apache.rat.configuration.Format format2 = org.apache.rat.configuration.Format.XML;
        org.apache.rat.configuration.LicenseReader licenseReader3 = format2.licenseReader();
        java.util.SortedSet<org.apache.rat.license.ILicense> iLicenseSet4 = licenseReader3.readLicenses();
        java.lang.String[] strArray10 = new java.lang.String[] { "http://org/apache/rat/meta-data#LicenseFamilyCategory", "Datum [ name ='http://org/apache/rat/meta-data#LicenseFamilyCategory',value ='GPL1  ']", "MANIFEST.MF", "AllBuilder:", "The MIT License" };
        org.apache.rat.utils.ReportingSet<java.lang.String> strSet11 = new org.apache.rat.utils.ReportingSet<java.lang.String>();
        boolean boolean12 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strSet11, strArray10);
        boolean boolean14 = strSet11.addIfNotPresent("http://org/apache/rat/meta-data#LicenseFamilyName");
        boolean boolean16 = strSet11.addIfNotPresent("ef7a8b13-64c3-4510-bb0c-dbf208e1e73f");
        java.util.function.Function<java.lang.String, java.lang.String> strFunction17 = null;
        org.apache.rat.utils.ReportingSet<java.lang.String> strSet18 = strSet11.setMsgFormat(strFunction17);
        boolean boolean19 = strSet11.isEmpty();
        org.apache.rat.license.LicenseSetFactory licenseSetFactory20 = new org.apache.rat.license.LicenseSetFactory(iLicenseSet4, (java.util.Collection<java.lang.String>) strSet11);
        org.apache.rat.utils.ReportingSet<org.apache.rat.license.ILicense> iLicenseSet21 = new org.apache.rat.utils.ReportingSet<org.apache.rat.license.ILicense>(iLicenseSet4);
        org.apache.rat.license.ILicense iLicense22 = org.apache.rat.license.LicenseSetFactory.search("4fcae176-e574-46ed-b9e4-dea2e2f3b458", (java.util.SortedSet<org.apache.rat.license.ILicense>) iLicenseSet21);
        org.apache.rat.utils.ReportingSet<org.apache.rat.license.ILicense> iLicenseSet23 = new org.apache.rat.utils.ReportingSet<org.apache.rat.license.ILicense>((java.util.SortedSet<org.apache.rat.license.ILicense>) iLicenseSet21);
        org.apache.rat.license.ILicense iLicense24 = org.apache.rat.license.LicenseSetFactory.search(".BZRIGNORE", (java.util.SortedSet<org.apache.rat.license.ILicense>) iLicenseSet21);
        org.junit.Assert.assertTrue("'" + format2 + "' != '" + org.apache.rat.configuration.Format.XML + "'", format2.equals(org.apache.rat.configuration.Format.XML));
        org.junit.Assert.assertNotNull(licenseReader3);
        org.junit.Assert.assertNotNull(iLicenseSet4);
        org.junit.Assert.assertNotNull(strArray10);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + true + "'", boolean12 == true);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + true + "'", boolean14 == true);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + true + "'", boolean16 == true);
        org.junit.Assert.assertNotNull(strSet18);
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + false + "'", boolean19 == false);
        org.junit.Assert.assertNull(iLicense22);
        org.junit.Assert.assertNull(iLicense24);
    }

    @Test
    public void test12914() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest25.test12914");
        org.apache.rat.analysis.matchers.FullTextMatcher fullTextMatcher2 = new org.apache.rat.analysis.matchers.FullTextMatcher("8f0ee536-38ae-476a-a728-de95e24c13c3", "Datum [ name ='http://org/apache/rat/meta-data#FileCategory',value ='archive ']");
        org.apache.rat.analysis.IHeaderMatcher.State state3 = fullTextMatcher2.currentState();
        org.apache.rat.analysis.IHeaderMatcher.State state4 = fullTextMatcher2.currentState();
        boolean boolean6 = fullTextMatcher2.doMatch("GNU General Public License, version 3");
        org.junit.Assert.assertTrue("'" + state3 + "' != '" + org.apache.rat.analysis.IHeaderMatcher.State.i + "'", state3.equals(org.apache.rat.analysis.IHeaderMatcher.State.i));
        org.junit.Assert.assertTrue("'" + state4 + "' != '" + org.apache.rat.analysis.IHeaderMatcher.State.i + "'", state4.equals(org.apache.rat.analysis.IHeaderMatcher.State.i));
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
    }

    @Test
    public void test12915() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest25.test12915");
        java.io.Writer writer0 = null;
        org.apache.rat.report.xml.writer.impl.base.XmlWriter xmlWriter1 = new org.apache.rat.report.xml.writer.impl.base.XmlWriter(writer0);
        org.apache.rat.report.claim.impl.xml.SimpleXmlClaimReporter simpleXmlClaimReporter2 = new org.apache.rat.report.claim.impl.xml.SimpleXmlClaimReporter((org.apache.rat.report.xml.writer.IXmlWriter) xmlWriter1);
        org.apache.rat.report.claim.impl.xml.SimpleXmlClaimReporter simpleXmlClaimReporter3 = new org.apache.rat.report.claim.impl.xml.SimpleXmlClaimReporter((org.apache.rat.report.xml.writer.IXmlWriter) xmlWriter1);
        // The following exception was thrown during execution in test generation
        try {
            org.apache.rat.report.xml.writer.IXmlWriter iXmlWriter5 = xmlWriter1.content((java.lang.CharSequence) "3136db71-7b49-4c17-a09c-dca53cc533ad");
            org.junit.Assert.fail("Expected exception of type org.apache.rat.report.xml.writer.OperationNotAllowedException; message: An element must be opened before content can be written.");
        } catch (org.apache.rat.report.xml.writer.OperationNotAllowedException e) {
            // Expected exception.
        }
    }

    @Test
    public void test12916() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest25.test12916");
        org.apache.rat.api.MetaData metaData0 = new org.apache.rat.api.MetaData();
        java.lang.String str2 = metaData0.value("COMMON DEVELOPMENT AND DISTRIBUTION LICENSE Version 1.0");
        java.lang.String str4 = metaData0.value("W3C Document Copyright");
        boolean boolean6 = metaData0.clear("hi!");
        java.lang.String str8 = metaData0.value("true");
        metaData0.clear();
        boolean boolean11 = metaData0.clear("W3CD ");
        org.apache.rat.api.MetaData.Datum datum13 = metaData0.get("");
        metaData0.clear();
        org.apache.rat.api.MetaData.Datum datum16 = metaData0.get("5c847b1e-9c69-4319-a528-fb19292d5e95");
        org.junit.Assert.assertNull(str2);
        org.junit.Assert.assertNull(str4);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertNull(str8);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
        org.junit.Assert.assertNull(datum13);
        org.junit.Assert.assertNull(datum16);
    }

    @Test
    public void test12917() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest25.test12917");
        org.apache.rat.license.ILicenseFamilyBuilder iLicenseFamilyBuilder0 = new org.apache.rat.license.ILicenseFamilyBuilder();
        java.lang.String str1 = iLicenseFamilyBuilder0.getCategory();
        org.apache.rat.license.ILicenseFamily.Builder builder3 = iLicenseFamilyBuilder0.setLicenseFamilyCategory("AL   ");
        java.lang.String str4 = iLicenseFamilyBuilder0.getCategory();
        org.apache.rat.license.ILicenseFamily.Builder builder6 = iLicenseFamilyBuilder0.setLicenseFamilyCategory("SpdxB");
        org.apache.rat.license.ILicenseFamily.Builder builder8 = iLicenseFamilyBuilder0.setLicenseFamilyCategory("a357a28e-849d-4383-9cc0-95ecd482d23e");
        org.apache.rat.license.ILicenseFamily.Builder builder10 = iLicenseFamilyBuilder0.setLicenseFamilyName("TextBuilder: COMMON DEVELOPMENT A...");
        org.apache.rat.license.ILicenseFamily.Builder builder12 = iLicenseFamilyBuilder0.setLicenseFamilyName("");
        org.apache.rat.license.ILicenseFamily.Builder builder14 = iLicenseFamilyBuilder0.setLicenseFamilyName("BSD 3 clause");
        org.junit.Assert.assertNull(str1);
        org.junit.Assert.assertNotNull(builder3);
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "AL   " + "'", str4, "AL   ");
        org.junit.Assert.assertNotNull(builder6);
        org.junit.Assert.assertNotNull(builder8);
        org.junit.Assert.assertNotNull(builder10);
        org.junit.Assert.assertNotNull(builder12);
        org.junit.Assert.assertNotNull(builder14);
    }

    @Test
    public void test12918() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest25.test12918");
        boolean boolean1 = org.apache.rat.document.impl.guesser.BinaryGuesser.isBinary("GNU General Public License, version 2");
        org.junit.Assert.assertTrue("'" + boolean1 + "' != '" + false + "'", boolean1 == false);
    }

    @Test
    public void test12919() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest25.test12919");
        org.apache.rat.license.SimpleLicenseFamily simpleLicenseFamily0 = new org.apache.rat.license.SimpleLicenseFamily();
        java.lang.String str1 = simpleLicenseFamily0.getFamilyName();
        java.lang.String str2 = simpleLicenseFamily0.getFamilyCategory();
        java.lang.String str3 = simpleLicenseFamily0.getFamilyName();
        simpleLicenseFamily0.setFamilyName("W3C  ");
        simpleLicenseFamily0.setFamilyName("f9686227-2048-447b-8a8f-3164382365d2");
        java.lang.String str8 = simpleLicenseFamily0.getFamilyName();
        org.junit.Assert.assertNull(str1);
        org.junit.Assert.assertNull(str2);
        org.junit.Assert.assertNull(str3);
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "f9686227-2048-447b-8a8f-3164382365d2" + "'", str8, "f9686227-2048-447b-8a8f-3164382365d2");
    }

    @Test
    public void test12920() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest25.test12920");
        java.util.regex.Pattern pattern2 = null;
        org.apache.rat.analysis.matchers.SimpleRegexMatcher simpleRegexMatcher3 = new org.apache.rat.analysis.matchers.SimpleRegexMatcher("", pattern2);
        org.apache.rat.analysis.matchers.NotMatcher notMatcher4 = new org.apache.rat.analysis.matchers.NotMatcher("GNU General Public License, version 2", (org.apache.rat.analysis.IHeaderMatcher) simpleRegexMatcher3);
        notMatcher4.reset();
        org.apache.rat.analysis.IHeaderMatcher.State state6 = notMatcher4.finalizeState();
        notMatcher4.reset();
        org.apache.rat.analysis.IHeaderMatcher.State state8 = notMatcher4.currentState();
        org.junit.Assert.assertTrue("'" + state6 + "' != '" + org.apache.rat.analysis.IHeaderMatcher.State.t + "'", state6.equals(org.apache.rat.analysis.IHeaderMatcher.State.t));
        org.junit.Assert.assertTrue("'" + state8 + "' != '" + org.apache.rat.analysis.IHeaderMatcher.State.i + "'", state8.equals(org.apache.rat.analysis.IHeaderMatcher.State.i));
    }

    @Test
    public void test12921() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest25.test12921");
        java.lang.String[] strArray5 = new java.lang.String[] { "http://org/apache/rat/meta-data#LicenseFamilyCategory", "Datum [ name ='http://org/apache/rat/meta-data#LicenseFamilyCategory',value ='GPL1  ']", "MANIFEST.MF", "AllBuilder:", "The MIT License" };
        org.apache.rat.utils.ReportingSet<java.lang.String> strSet6 = new org.apache.rat.utils.ReportingSet<java.lang.String>();
        boolean boolean7 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strSet6, strArray5);
        boolean boolean9 = strSet6.addIfNotPresent("http://org/apache/rat/meta-data#LicenseFamilyName");
        boolean boolean11 = strSet6.addIfNotPresent("ef7a8b13-64c3-4510-bb0c-dbf208e1e73f");
        java.util.function.Function<java.lang.String, java.lang.String> strFunction12 = null;
        org.apache.rat.utils.ReportingSet<java.lang.String> strSet13 = strSet6.setMsgFormat(strFunction12);
        java.lang.String str14 = strSet6.last();
        org.apache.rat.utils.ReportingSet<java.lang.String> strSet16 = strSet6.tailSet("SpdxBuilder: null");
        org.apache.rat.analysis.matchers.SimpleTextMatcher simpleTextMatcher19 = new org.apache.rat.analysis.matchers.SimpleTextMatcher("a357a28e-849d-4383-9cc0-95ecd482d23e", "TextBuilder: COMMON DEVELOPMENT A...");
        // The following exception was thrown during execution in test generation
        try {
            boolean boolean20 = strSet6.contains((java.lang.Object) simpleTextMatcher19);
            org.junit.Assert.fail("Expected exception of type java.lang.ClassCastException; message: null");
        } catch (java.lang.ClassCastException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(strArray5);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + true + "'", boolean7 == true);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + true + "'", boolean9 == true);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + true + "'", boolean11 == true);
        org.junit.Assert.assertNotNull(strSet13);
        org.junit.Assert.assertEquals("'" + str14 + "' != '" + "http://org/apache/rat/meta-data#LicenseFamilyName" + "'", str14, "http://org/apache/rat/meta-data#LicenseFamilyName");
        org.junit.Assert.assertNotNull(strSet16);
    }

    @Test
    public void test12922() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest25.test12922");
        org.apache.rat.utils.Log log0 = null;
        org.apache.rat.ReportConfiguration reportConfiguration1 = new org.apache.rat.ReportConfiguration(log0);
        org.apache.rat.report.claim.ClaimStatistic claimStatistic2 = org.apache.rat.Reporter.report(reportConfiguration1);
        org.apache.rat.utils.Log log3 = null;
        org.apache.rat.ReportConfiguration reportConfiguration4 = new org.apache.rat.ReportConfiguration(log3);
        org.apache.rat.report.claim.ClaimStatistic claimStatistic5 = org.apache.rat.Reporter.report(reportConfiguration4);
        org.apache.rat.utils.ReportingSet.Options options6 = org.apache.rat.utils.ReportingSet.Options.OVERWRITE;
        reportConfiguration4.licenseDuplicateOption(options6);
        reportConfiguration1.familyDuplicateOption(options6);
        org.apache.commons.io.function.IOSupplier<java.io.PrintWriter> printWriterIOSupplier9 = reportConfiguration1.getWriter();
        boolean boolean10 = reportConfiguration1.isAddingLicensesForced();
        org.apache.rat.utils.Log log11 = null;
        org.apache.rat.ReportConfiguration reportConfiguration12 = new org.apache.rat.ReportConfiguration(log11);
        reportConfiguration12.addApprovedLicenseCategory(".cvsignore");
        org.apache.rat.utils.Log.Level level15 = org.apache.rat.utils.Log.Level.ERROR;
        reportConfiguration12.logFamilyCollisions(level15);
        reportConfiguration1.logLicenseCollisions(level15);
        boolean boolean18 = reportConfiguration1.isAddingLicenses();
        reportConfiguration1.addApprovedLicenseCategory("46eea");
        org.junit.Assert.assertNull(claimStatistic2);
        org.junit.Assert.assertNull(claimStatistic5);
        org.junit.Assert.assertTrue("'" + options6 + "' != '" + org.apache.rat.utils.ReportingSet.Options.OVERWRITE + "'", options6.equals(org.apache.rat.utils.ReportingSet.Options.OVERWRITE));
        org.junit.Assert.assertNotNull(printWriterIOSupplier9);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertTrue("'" + level15 + "' != '" + org.apache.rat.utils.Log.Level.ERROR + "'", level15.equals(org.apache.rat.utils.Log.Level.ERROR));
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + false + "'", boolean18 == false);
    }

    @Test
    public void test12923() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest25.test12923");
        org.apache.rat.utils.Log log0 = null;
        org.apache.rat.ReportConfiguration reportConfiguration1 = new org.apache.rat.ReportConfiguration(log0);
        org.apache.rat.report.claim.ClaimStatistic claimStatistic2 = org.apache.rat.Reporter.report(reportConfiguration1);
        org.apache.rat.utils.Log log3 = null;
        org.apache.rat.ReportConfiguration reportConfiguration4 = new org.apache.rat.ReportConfiguration(log3);
        org.apache.rat.report.claim.ClaimStatistic claimStatistic5 = org.apache.rat.Reporter.report(reportConfiguration4);
        org.apache.rat.utils.ReportingSet.Options options6 = org.apache.rat.utils.ReportingSet.Options.OVERWRITE;
        reportConfiguration4.licenseDuplicateOption(options6);
        reportConfiguration1.familyDuplicateOption(options6);
        org.apache.commons.io.function.IOSupplier<java.io.PrintWriter> printWriterIOSupplier9 = reportConfiguration1.getWriter();
        boolean boolean10 = reportConfiguration1.isAddingLicensesForced();
        java.io.FilenameFilter filenameFilter11 = reportConfiguration1.getInputFileFilter();
        java.io.FilenameFilter filenameFilter12 = reportConfiguration1.getInputFileFilter();
        boolean boolean13 = reportConfiguration1.isStyleReport();
        org.apache.commons.io.function.IOSupplier<java.io.InputStream> inputStreamIOSupplier14 = reportConfiguration1.getStyleSheet();
        org.apache.rat.utils.Log log15 = null;
        org.apache.rat.ReportConfiguration reportConfiguration16 = new org.apache.rat.ReportConfiguration(log15);
        org.apache.rat.license.ILicenseFamily[] iLicenseFamilyArray17 = new org.apache.rat.license.ILicenseFamily[] {};
        java.util.ArrayList<org.apache.rat.license.ILicenseFamily> iLicenseFamilyList18 = new java.util.ArrayList<org.apache.rat.license.ILicenseFamily>();
        boolean boolean19 = java.util.Collections.addAll((java.util.Collection<org.apache.rat.license.ILicenseFamily>) iLicenseFamilyList18, iLicenseFamilyArray17);
        reportConfiguration16.addFamilies((java.util.Collection<org.apache.rat.license.ILicenseFamily>) iLicenseFamilyList18);
        org.apache.rat.utils.Log.Level level21 = org.apache.rat.utils.Log.Level.ERROR;
        reportConfiguration16.logLicenseCollisions(level21);
        org.apache.rat.report.IReportable iReportable23 = reportConfiguration16.getReportable();
        org.apache.rat.report.IReportable iReportable24 = reportConfiguration16.getReportable();
        org.apache.rat.utils.ReportingSet.Options options25 = org.apache.rat.utils.ReportingSet.Options.OVERWRITE;
        reportConfiguration16.licenseDuplicateOption(options25);
        reportConfiguration1.licenseDuplicateOption(options25);
        org.apache.rat.utils.Log.Level level28 = null;
        reportConfiguration1.logLicenseCollisions(level28);
        java.util.SortedSet<java.lang.String> strSet30 = reportConfiguration1.getApprovedLicenseCategories();
        org.apache.rat.utils.Log log31 = null;
        org.apache.rat.ReportConfiguration reportConfiguration32 = new org.apache.rat.ReportConfiguration(log31);
        reportConfiguration32.addApprovedLicenseCategory(".cvsignore");
        org.apache.rat.utils.Log.Level level35 = org.apache.rat.utils.Log.Level.ERROR;
        reportConfiguration32.logLicenseCollisions(level35);
        org.apache.rat.utils.Log log37 = null;
        org.apache.rat.ReportConfiguration reportConfiguration38 = new org.apache.rat.ReportConfiguration(log37);
        java.io.FilenameFilter filenameFilter39 = reportConfiguration38.getInputFileFilter();
        org.apache.rat.license.LicenseSetFactory.LicenseFilter licenseFilter40 = org.apache.rat.license.LicenseSetFactory.LicenseFilter.all;
        java.util.SortedSet<org.apache.rat.license.ILicense> iLicenseSet41 = reportConfiguration38.getLicenses(licenseFilter40);
        org.apache.rat.config.AddLicenseHeaders addLicenseHeaders42 = org.apache.rat.config.AddLicenseHeaders.FALSE;
        reportConfiguration38.setAddLicenseHeaders(addLicenseHeaders42);
        org.apache.rat.utils.Log log44 = null;
        org.apache.rat.ReportConfiguration reportConfiguration45 = new org.apache.rat.ReportConfiguration(log44);
        org.apache.rat.report.claim.ClaimStatistic claimStatistic46 = org.apache.rat.Reporter.report(reportConfiguration45);
        org.apache.rat.license.LicenseSetFactory.LicenseFilter licenseFilter47 = org.apache.rat.license.LicenseSetFactory.LicenseFilter.all;
        org.apache.rat.Reporter.listLicenses(reportConfiguration45, licenseFilter47);
        org.apache.rat.Reporter.listLicenses(reportConfiguration38, licenseFilter47);
        org.apache.rat.utils.Log log50 = null;
        org.apache.rat.ReportConfiguration reportConfiguration51 = new org.apache.rat.ReportConfiguration(log50);
        java.io.FilenameFilter filenameFilter52 = reportConfiguration51.getInputFileFilter();
        org.apache.rat.license.LicenseSetFactory.LicenseFilter licenseFilter53 = org.apache.rat.license.LicenseSetFactory.LicenseFilter.all;
        java.util.SortedSet<org.apache.rat.license.ILicense> iLicenseSet54 = reportConfiguration51.getLicenses(licenseFilter53);
        org.apache.rat.config.AddLicenseHeaders addLicenseHeaders55 = org.apache.rat.config.AddLicenseHeaders.FALSE;
        reportConfiguration51.setAddLicenseHeaders(addLicenseHeaders55);
        org.apache.rat.utils.Log log57 = null;
        org.apache.rat.ReportConfiguration reportConfiguration58 = new org.apache.rat.ReportConfiguration(log57);
        org.apache.rat.report.claim.ClaimStatistic claimStatistic59 = org.apache.rat.Reporter.report(reportConfiguration58);
        org.apache.rat.license.LicenseSetFactory.LicenseFilter licenseFilter60 = org.apache.rat.license.LicenseSetFactory.LicenseFilter.all;
        org.apache.rat.Reporter.listLicenses(reportConfiguration58, licenseFilter60);
        org.apache.rat.Reporter.listLicenses(reportConfiguration51, licenseFilter60);
        java.util.SortedSet<org.apache.rat.license.ILicenseFamily> iLicenseFamilySet63 = reportConfiguration38.getLicenseFamilies(licenseFilter60);
        org.apache.rat.utils.Log log64 = null;
        org.apache.rat.ReportConfiguration reportConfiguration65 = new org.apache.rat.ReportConfiguration(log64);
        java.io.FilenameFilter filenameFilter66 = reportConfiguration65.getInputFileFilter();
        org.apache.rat.license.LicenseSetFactory.LicenseFilter licenseFilter67 = org.apache.rat.license.LicenseSetFactory.LicenseFilter.all;
        java.util.SortedSet<org.apache.rat.license.ILicense> iLicenseSet68 = reportConfiguration65.getLicenses(licenseFilter67);
        org.apache.rat.config.AddLicenseHeaders addLicenseHeaders69 = org.apache.rat.config.AddLicenseHeaders.FALSE;
        reportConfiguration65.setAddLicenseHeaders(addLicenseHeaders69);
        reportConfiguration38.setAddLicenseHeaders(addLicenseHeaders69);
        reportConfiguration32.setAddLicenseHeaders(addLicenseHeaders69);
        reportConfiguration1.setAddLicenseHeaders(addLicenseHeaders69);
        org.junit.Assert.assertNull(claimStatistic2);
        org.junit.Assert.assertNull(claimStatistic5);
        org.junit.Assert.assertTrue("'" + options6 + "' != '" + org.apache.rat.utils.ReportingSet.Options.OVERWRITE + "'", options6.equals(org.apache.rat.utils.ReportingSet.Options.OVERWRITE));
        org.junit.Assert.assertNotNull(printWriterIOSupplier9);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertNull(filenameFilter11);
        org.junit.Assert.assertNull(filenameFilter12);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + true + "'", boolean13 == true);
        org.junit.Assert.assertNull(inputStreamIOSupplier14);
        org.junit.Assert.assertNotNull(iLicenseFamilyArray17);
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + false + "'", boolean19 == false);
        org.junit.Assert.assertTrue("'" + level21 + "' != '" + org.apache.rat.utils.Log.Level.ERROR + "'", level21.equals(org.apache.rat.utils.Log.Level.ERROR));
        org.junit.Assert.assertNull(iReportable23);
        org.junit.Assert.assertNull(iReportable24);
        org.junit.Assert.assertTrue("'" + options25 + "' != '" + org.apache.rat.utils.ReportingSet.Options.OVERWRITE + "'", options25.equals(org.apache.rat.utils.ReportingSet.Options.OVERWRITE));
        org.junit.Assert.assertNotNull(strSet30);
        org.junit.Assert.assertTrue("'" + level35 + "' != '" + org.apache.rat.utils.Log.Level.ERROR + "'", level35.equals(org.apache.rat.utils.Log.Level.ERROR));
        org.junit.Assert.assertNull(filenameFilter39);
        org.junit.Assert.assertTrue("'" + licenseFilter40 + "' != '" + org.apache.rat.license.LicenseSetFactory.LicenseFilter.all + "'", licenseFilter40.equals(org.apache.rat.license.LicenseSetFactory.LicenseFilter.all));
        org.junit.Assert.assertNotNull(iLicenseSet41);
        org.junit.Assert.assertTrue("'" + addLicenseHeaders42 + "' != '" + org.apache.rat.config.AddLicenseHeaders.FALSE + "'", addLicenseHeaders42.equals(org.apache.rat.config.AddLicenseHeaders.FALSE));
        org.junit.Assert.assertNull(claimStatistic46);
        org.junit.Assert.assertTrue("'" + licenseFilter47 + "' != '" + org.apache.rat.license.LicenseSetFactory.LicenseFilter.all + "'", licenseFilter47.equals(org.apache.rat.license.LicenseSetFactory.LicenseFilter.all));
        org.junit.Assert.assertNull(filenameFilter52);
        org.junit.Assert.assertTrue("'" + licenseFilter53 + "' != '" + org.apache.rat.license.LicenseSetFactory.LicenseFilter.all + "'", licenseFilter53.equals(org.apache.rat.license.LicenseSetFactory.LicenseFilter.all));
        org.junit.Assert.assertNotNull(iLicenseSet54);
        org.junit.Assert.assertTrue("'" + addLicenseHeaders55 + "' != '" + org.apache.rat.config.AddLicenseHeaders.FALSE + "'", addLicenseHeaders55.equals(org.apache.rat.config.AddLicenseHeaders.FALSE));
        org.junit.Assert.assertNull(claimStatistic59);
        org.junit.Assert.assertTrue("'" + licenseFilter60 + "' != '" + org.apache.rat.license.LicenseSetFactory.LicenseFilter.all + "'", licenseFilter60.equals(org.apache.rat.license.LicenseSetFactory.LicenseFilter.all));
        org.junit.Assert.assertNotNull(iLicenseFamilySet63);
        org.junit.Assert.assertNull(filenameFilter66);
        org.junit.Assert.assertTrue("'" + licenseFilter67 + "' != '" + org.apache.rat.license.LicenseSetFactory.LicenseFilter.all + "'", licenseFilter67.equals(org.apache.rat.license.LicenseSetFactory.LicenseFilter.all));
        org.junit.Assert.assertNotNull(iLicenseSet68);
        org.junit.Assert.assertTrue("'" + addLicenseHeaders69 + "' != '" + org.apache.rat.config.AddLicenseHeaders.FALSE + "'", addLicenseHeaders69.equals(org.apache.rat.config.AddLicenseHeaders.FALSE));
    }

    @Test
    public void test12924() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest25.test12924");
        org.apache.rat.license.ILicense.Builder builder0 = org.apache.rat.license.ILicense.builder();
        org.apache.rat.license.ILicense.Builder builder2 = builder0.setDerivedFrom("GPL1 ");
        java.util.SortedSet<org.apache.rat.license.ILicenseFamily> iLicenseFamilySet3 = null;
        // The following exception was thrown during execution in test generation
        try {
            org.apache.rat.license.ILicense iLicense4 = builder2.build(iLicenseFamilySet3);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: Matcher must not be null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(builder0);
        org.junit.Assert.assertNotNull(builder2);
    }

    @Test
    public void test12925() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest25.test12925");
        org.apache.rat.api.MetaData metaData0 = new org.apache.rat.api.MetaData();
        java.lang.String str2 = metaData0.value("COMMON DEVELOPMENT AND DISTRIBUTION LICENSE Version 1.0");
        java.lang.String str4 = metaData0.value("W3C Document Copyright");
        boolean boolean6 = metaData0.clear("hi!");
        java.lang.String str8 = metaData0.value("true");
        org.apache.rat.api.MetaData.Datum datum10 = metaData0.get("GNU General Public License, version 1");
        java.util.Collection<org.apache.rat.api.MetaData.Datum> datumCollection11 = metaData0.getData();
        java.util.Collection<org.apache.rat.api.MetaData.Datum> datumCollection12 = metaData0.getData();
        java.lang.String str14 = metaData0.value("8209d00a-be69-49da-9b04-4936e89b34c6");
        org.junit.Assert.assertNull(str2);
        org.junit.Assert.assertNull(str4);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertNull(str8);
        org.junit.Assert.assertNull(datum10);
        org.junit.Assert.assertNotNull(datumCollection11);
        org.junit.Assert.assertNotNull(datumCollection12);
        org.junit.Assert.assertNull(str14);
    }

    @Test
    public void test12926() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest25.test12926");
        boolean boolean1 = org.apache.rat.document.impl.guesser.BinaryGuesser.isNonBinary("Copyright Builder: s:.cvsignore e:.gitignore o:RegexBuilder: CopyrightBuildersarchiveenullonull");
        org.junit.Assert.assertTrue("'" + boolean1 + "' != '" + false + "'", boolean1 == false);
    }

    @Test
    public void test12927() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest25.test12927");
        org.apache.rat.configuration.builders.AllBuilder allBuilder0 = org.apache.rat.analysis.IHeaderMatcher.Builder.all();
        java.util.List<org.apache.rat.analysis.IHeaderMatcher> iHeaderMatcherList1 = allBuilder0.getChildren();
        org.apache.rat.analysis.IHeaderMatcher iHeaderMatcher2 = allBuilder0.build();
        org.apache.rat.analysis.IHeaderMatcher iHeaderMatcher3 = allBuilder0.build();
        org.junit.Assert.assertNotNull(allBuilder0);
        org.junit.Assert.assertNotNull(iHeaderMatcherList1);
        org.junit.Assert.assertNotNull(iHeaderMatcher2);
        org.junit.Assert.assertNotNull(iHeaderMatcher3);
    }

    @Test
    public void test12928() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest25.test12928");
        org.apache.rat.configuration.builders.AllBuilder allBuilder0 = new org.apache.rat.configuration.builders.AllBuilder();
        java.lang.String str1 = allBuilder0.toString();
        java.util.List<org.apache.rat.analysis.IHeaderMatcher> iHeaderMatcherList2 = allBuilder0.getChildren();
        org.apache.rat.configuration.builders.MatcherRefBuilder matcherRefBuilder3 = new org.apache.rat.configuration.builders.MatcherRefBuilder();
        org.apache.rat.configuration.builders.AbstractBuilder abstractBuilder4 = allBuilder0.add((org.apache.rat.analysis.IHeaderMatcher.Builder) matcherRefBuilder3);
        org.apache.rat.configuration.builders.MatcherRefBuilder matcherRefBuilder6 = matcherRefBuilder3.setRefId("http:");
        java.util.Map<java.lang.String, org.apache.rat.analysis.IHeaderMatcher> strMap7 = null;
        org.apache.rat.configuration.builders.MatcherRefBuilder matcherRefBuilder8 = matcherRefBuilder3.setMatchers(strMap7);
        java.lang.String str9 = matcherRefBuilder3.toString();
        org.apache.rat.configuration.builders.MatcherRefBuilder matcherRefBuilder11 = matcherRefBuilder3.setRefId("AL   ");
        java.util.Map<java.lang.String, org.apache.rat.analysis.IHeaderMatcher> strMap12 = null;
        org.apache.rat.configuration.builders.MatcherRefBuilder matcherRefBuilder13 = matcherRefBuilder3.setMatchers(strMap12);
        org.junit.Assert.assertEquals("'" + str1 + "' != '" + "AllBuilder:" + "'", str1, "AllBuilder:");
        org.junit.Assert.assertNotNull(iHeaderMatcherList2);
        org.junit.Assert.assertNotNull(abstractBuilder4);
        org.junit.Assert.assertNotNull(matcherRefBuilder6);
        org.junit.Assert.assertNotNull(matcherRefBuilder8);
        org.junit.Assert.assertEquals("'" + str9 + "' != '" + "MathcerRefBuilder: http:" + "'", str9, "MathcerRefBuilder: http:");
        org.junit.Assert.assertNotNull(matcherRefBuilder11);
        org.junit.Assert.assertNotNull(matcherRefBuilder13);
    }

    @Test
    public void test12929() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest25.test12929");
        org.apache.rat.utils.Log log0 = null;
        org.apache.rat.ReportConfiguration reportConfiguration1 = new org.apache.rat.ReportConfiguration(log0);
        java.io.FilenameFilter filenameFilter2 = reportConfiguration1.getInputFileFilter();
        org.apache.rat.license.LicenseSetFactory.LicenseFilter licenseFilter3 = org.apache.rat.license.LicenseSetFactory.LicenseFilter.all;
        java.util.SortedSet<org.apache.rat.license.ILicense> iLicenseSet4 = reportConfiguration1.getLicenses(licenseFilter3);
        org.apache.rat.config.AddLicenseHeaders addLicenseHeaders5 = org.apache.rat.config.AddLicenseHeaders.FALSE;
        reportConfiguration1.setAddLicenseHeaders(addLicenseHeaders5);
        org.apache.rat.utils.Log log7 = null;
        org.apache.rat.ReportConfiguration reportConfiguration8 = new org.apache.rat.ReportConfiguration(log7);
        org.apache.rat.report.claim.ClaimStatistic claimStatistic9 = org.apache.rat.Reporter.report(reportConfiguration8);
        org.apache.rat.license.LicenseSetFactory.LicenseFilter licenseFilter10 = org.apache.rat.license.LicenseSetFactory.LicenseFilter.all;
        org.apache.rat.Reporter.listLicenses(reportConfiguration8, licenseFilter10);
        org.apache.rat.Reporter.listLicenses(reportConfiguration1, licenseFilter10);
        org.apache.rat.utils.Log log13 = null;
        org.apache.rat.ReportConfiguration reportConfiguration14 = new org.apache.rat.ReportConfiguration(log13);
        java.io.FilenameFilter filenameFilter15 = reportConfiguration14.getInputFileFilter();
        org.apache.rat.license.LicenseSetFactory.LicenseFilter licenseFilter16 = org.apache.rat.license.LicenseSetFactory.LicenseFilter.all;
        java.util.SortedSet<org.apache.rat.license.ILicense> iLicenseSet17 = reportConfiguration14.getLicenses(licenseFilter16);
        org.apache.rat.config.AddLicenseHeaders addLicenseHeaders18 = org.apache.rat.config.AddLicenseHeaders.FALSE;
        reportConfiguration14.setAddLicenseHeaders(addLicenseHeaders18);
        org.apache.rat.utils.Log log20 = null;
        org.apache.rat.ReportConfiguration reportConfiguration21 = new org.apache.rat.ReportConfiguration(log20);
        org.apache.rat.report.claim.ClaimStatistic claimStatistic22 = org.apache.rat.Reporter.report(reportConfiguration21);
        org.apache.rat.license.LicenseSetFactory.LicenseFilter licenseFilter23 = org.apache.rat.license.LicenseSetFactory.LicenseFilter.all;
        org.apache.rat.Reporter.listLicenses(reportConfiguration21, licenseFilter23);
        org.apache.rat.Reporter.listLicenses(reportConfiguration14, licenseFilter23);
        org.apache.rat.Reporter.listLicenses(reportConfiguration1, licenseFilter23);
        org.apache.rat.utils.Log log27 = null;
        org.apache.rat.ReportConfiguration reportConfiguration28 = new org.apache.rat.ReportConfiguration(log27);
        org.apache.commons.io.function.IOSupplier<java.io.OutputStream> outputStreamIOSupplier29 = reportConfiguration28.getOutput();
        reportConfiguration1.setOut(outputStreamIOSupplier29);
        boolean boolean31 = reportConfiguration1.isStyleReport();
        boolean boolean32 = reportConfiguration1.isStyleReport();
        org.apache.rat.utils.Log log33 = null;
        org.apache.rat.ReportConfiguration reportConfiguration34 = new org.apache.rat.ReportConfiguration(log33);
        reportConfiguration34.addApprovedLicenseCategory(".cvsignore");
        org.apache.rat.utils.Log.Level level37 = org.apache.rat.utils.Log.Level.ERROR;
        reportConfiguration34.logLicenseCollisions(level37);
        reportConfiguration1.logLicenseCollisions(level37);
        reportConfiguration1.setCopyrightMessage("TMF  ");
        boolean boolean42 = reportConfiguration1.isAddingLicensesForced();
        org.apache.rat.report.claim.ClaimStatistic claimStatistic43 = org.apache.rat.Reporter.report(reportConfiguration1);
        org.junit.Assert.assertNull(filenameFilter2);
        org.junit.Assert.assertTrue("'" + licenseFilter3 + "' != '" + org.apache.rat.license.LicenseSetFactory.LicenseFilter.all + "'", licenseFilter3.equals(org.apache.rat.license.LicenseSetFactory.LicenseFilter.all));
        org.junit.Assert.assertNotNull(iLicenseSet4);
        org.junit.Assert.assertTrue("'" + addLicenseHeaders5 + "' != '" + org.apache.rat.config.AddLicenseHeaders.FALSE + "'", addLicenseHeaders5.equals(org.apache.rat.config.AddLicenseHeaders.FALSE));
        org.junit.Assert.assertNull(claimStatistic9);
        org.junit.Assert.assertTrue("'" + licenseFilter10 + "' != '" + org.apache.rat.license.LicenseSetFactory.LicenseFilter.all + "'", licenseFilter10.equals(org.apache.rat.license.LicenseSetFactory.LicenseFilter.all));
        org.junit.Assert.assertNull(filenameFilter15);
        org.junit.Assert.assertTrue("'" + licenseFilter16 + "' != '" + org.apache.rat.license.LicenseSetFactory.LicenseFilter.all + "'", licenseFilter16.equals(org.apache.rat.license.LicenseSetFactory.LicenseFilter.all));
        org.junit.Assert.assertNotNull(iLicenseSet17);
        org.junit.Assert.assertTrue("'" + addLicenseHeaders18 + "' != '" + org.apache.rat.config.AddLicenseHeaders.FALSE + "'", addLicenseHeaders18.equals(org.apache.rat.config.AddLicenseHeaders.FALSE));
        org.junit.Assert.assertNull(claimStatistic22);
        org.junit.Assert.assertTrue("'" + licenseFilter23 + "' != '" + org.apache.rat.license.LicenseSetFactory.LicenseFilter.all + "'", licenseFilter23.equals(org.apache.rat.license.LicenseSetFactory.LicenseFilter.all));
        org.junit.Assert.assertNotNull(outputStreamIOSupplier29);
        org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + true + "'", boolean31 == true);
        org.junit.Assert.assertTrue("'" + boolean32 + "' != '" + true + "'", boolean32 == true);
        org.junit.Assert.assertTrue("'" + level37 + "' != '" + org.apache.rat.utils.Log.Level.ERROR + "'", level37.equals(org.apache.rat.utils.Log.Level.ERROR));
        org.junit.Assert.assertTrue("'" + boolean42 + "' != '" + false + "'", boolean42 == false);
        org.junit.Assert.assertNull(claimStatistic43);
    }

    @Test
    public void test12930() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest25.test12930");
        java.io.File file0 = null;
        byte[] byteArray3 = new byte[] { (byte) -1, (byte) 10 };
        // The following exception was thrown during execution in test generation
        try {
            org.apache.rat.document.impl.ArchiveEntryDocument archiveEntryDocument4 = new org.apache.rat.document.impl.ArchiveEntryDocument(file0, byteArray3);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(byteArray3);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray3), "[-1, 10]");
    }

    @Test
    public void test12931() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest25.test12931");
        org.apache.rat.utils.Log log0 = null;
        org.apache.rat.ReportConfiguration reportConfiguration1 = new org.apache.rat.ReportConfiguration(log0);
        reportConfiguration1.addApprovedLicenseCategory(".cvsignore");
        org.apache.rat.utils.Log.Level level4 = org.apache.rat.utils.Log.Level.ERROR;
        reportConfiguration1.logFamilyCollisions(level4);
        org.apache.commons.io.filefilter.IOFileFilter iOFileFilter6 = reportConfiguration1.getDirectoryFilter();
        java.lang.String[] strArray12 = new java.lang.String[] { "http://org/apache/rat/meta-data#LicenseFamilyCategory", "Datum [ name ='http://org/apache/rat/meta-data#LicenseFamilyCategory',value ='GPL1  ']", "MANIFEST.MF", "AllBuilder:", "The MIT License" };
        org.apache.rat.utils.ReportingSet<java.lang.String> strSet13 = new org.apache.rat.utils.ReportingSet<java.lang.String>();
        boolean boolean14 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strSet13, strArray12);
        boolean boolean16 = strSet13.addIfNotPresent("http://org/apache/rat/meta-data#LicenseFamilyName");
        boolean boolean18 = strSet13.addIfNotPresent("ef7a8b13-64c3-4510-bb0c-dbf208e1e73f");
        java.util.function.Function<java.lang.String, java.lang.String> strFunction19 = null;
        org.apache.rat.utils.ReportingSet<java.lang.String> strSet20 = strSet13.setMsgFormat(strFunction19);
        java.util.SortedSet<org.apache.rat.license.ILicenseFamily> iLicenseFamilySet22 = org.apache.rat.license.LicenseFamilySetFactory.emptyLicenseFamilySet();
        org.apache.rat.license.ILicenseFamily iLicenseFamily23 = org.apache.rat.license.LicenseFamilySetFactory.search("http://org/apache/rat/meta-data", iLicenseFamilySet22);
        boolean boolean24 = strSet13.containsAll((java.util.Collection<org.apache.rat.license.ILicenseFamily>) iLicenseFamilySet22);
        reportConfiguration1.removeApprovedLicenseCategories((java.util.Collection<java.lang.String>) strSet13);
        java.lang.String str26 = reportConfiguration1.getCopyrightMessage();
        org.apache.rat.utils.Log log27 = null;
        org.apache.rat.ReportConfiguration reportConfiguration28 = new org.apache.rat.ReportConfiguration(log27);
        org.apache.commons.io.function.IOSupplier<java.io.OutputStream> outputStreamIOSupplier29 = reportConfiguration28.getOutput();
        org.apache.commons.io.filefilter.IOFileFilter iOFileFilter30 = reportConfiguration28.getDirectoryFilter();
        org.apache.commons.io.filefilter.IOFileFilter iOFileFilter31 = iOFileFilter30.negate();
        reportConfiguration1.setInputFileFilter((java.io.FilenameFilter) iOFileFilter30);
        org.junit.Assert.assertTrue("'" + level4 + "' != '" + org.apache.rat.utils.Log.Level.ERROR + "'", level4.equals(org.apache.rat.utils.Log.Level.ERROR));
        org.junit.Assert.assertNotNull(iOFileFilter6);
        org.junit.Assert.assertNotNull(strArray12);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + true + "'", boolean14 == true);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + true + "'", boolean16 == true);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + true + "'", boolean18 == true);
        org.junit.Assert.assertNotNull(strSet20);
        org.junit.Assert.assertNotNull(iLicenseFamilySet22);
        org.junit.Assert.assertNull(iLicenseFamily23);
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + true + "'", boolean24 == true);
        org.junit.Assert.assertNull(str26);
        org.junit.Assert.assertNotNull(outputStreamIOSupplier29);
        org.junit.Assert.assertNotNull(iOFileFilter30);
        org.junit.Assert.assertNotNull(iOFileFilter31);
    }

    @Test
    public void test12932() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest25.test12932");
        org.apache.rat.utils.Log log0 = null;
        org.apache.rat.ReportConfiguration reportConfiguration1 = new org.apache.rat.ReportConfiguration(log0);
        org.apache.commons.io.function.IOSupplier<java.io.OutputStream> outputStreamIOSupplier2 = reportConfiguration1.getOutput();
        org.apache.commons.io.filefilter.IOFileFilter iOFileFilter3 = reportConfiguration1.getDirectoryFilter();
        org.apache.rat.utils.Log log4 = null;
        org.apache.rat.ReportConfiguration reportConfiguration5 = new org.apache.rat.ReportConfiguration(log4);
        reportConfiguration5.addApprovedLicenseCategory(".cvsignore");
        org.apache.rat.utils.Log log8 = null;
        org.apache.rat.ReportConfiguration reportConfiguration9 = new org.apache.rat.ReportConfiguration(log8);
        java.io.FilenameFilter filenameFilter10 = reportConfiguration9.getInputFileFilter();
        org.apache.rat.license.LicenseSetFactory.LicenseFilter licenseFilter11 = org.apache.rat.license.LicenseSetFactory.LicenseFilter.all;
        java.util.SortedSet<org.apache.rat.license.ILicense> iLicenseSet12 = reportConfiguration9.getLicenses(licenseFilter11);
        reportConfiguration5.addLicensesIfNotPresent((java.util.Collection<org.apache.rat.license.ILicense>) iLicenseSet12);
        java.io.FilenameFilter filenameFilter14 = reportConfiguration5.getInputFileFilter();
        org.apache.rat.utils.Log log15 = null;
        org.apache.rat.ReportConfiguration reportConfiguration16 = new org.apache.rat.ReportConfiguration(log15);
        java.io.FilenameFilter filenameFilter17 = reportConfiguration16.getInputFileFilter();
        org.apache.rat.license.LicenseSetFactory.LicenseFilter licenseFilter18 = org.apache.rat.license.LicenseSetFactory.LicenseFilter.all;
        java.util.SortedSet<org.apache.rat.license.ILicense> iLicenseSet19 = reportConfiguration16.getLicenses(licenseFilter18);
        org.apache.rat.config.AddLicenseHeaders addLicenseHeaders20 = org.apache.rat.config.AddLicenseHeaders.FALSE;
        reportConfiguration16.setAddLicenseHeaders(addLicenseHeaders20);
        org.apache.rat.utils.Log log22 = null;
        org.apache.rat.ReportConfiguration reportConfiguration23 = new org.apache.rat.ReportConfiguration(log22);
        org.apache.rat.report.claim.ClaimStatistic claimStatistic24 = org.apache.rat.Reporter.report(reportConfiguration23);
        org.apache.rat.license.LicenseSetFactory.LicenseFilter licenseFilter25 = org.apache.rat.license.LicenseSetFactory.LicenseFilter.all;
        org.apache.rat.Reporter.listLicenses(reportConfiguration23, licenseFilter25);
        org.apache.rat.Reporter.listLicenses(reportConfiguration16, licenseFilter25);
        org.apache.rat.utils.Log log28 = null;
        org.apache.rat.ReportConfiguration reportConfiguration29 = new org.apache.rat.ReportConfiguration(log28);
        java.io.FilenameFilter filenameFilter30 = reportConfiguration29.getInputFileFilter();
        org.apache.rat.license.LicenseSetFactory.LicenseFilter licenseFilter31 = org.apache.rat.license.LicenseSetFactory.LicenseFilter.all;
        java.util.SortedSet<org.apache.rat.license.ILicense> iLicenseSet32 = reportConfiguration29.getLicenses(licenseFilter31);
        org.apache.rat.config.AddLicenseHeaders addLicenseHeaders33 = org.apache.rat.config.AddLicenseHeaders.FALSE;
        reportConfiguration29.setAddLicenseHeaders(addLicenseHeaders33);
        org.apache.rat.utils.Log log35 = null;
        org.apache.rat.ReportConfiguration reportConfiguration36 = new org.apache.rat.ReportConfiguration(log35);
        org.apache.rat.report.claim.ClaimStatistic claimStatistic37 = org.apache.rat.Reporter.report(reportConfiguration36);
        org.apache.rat.license.LicenseSetFactory.LicenseFilter licenseFilter38 = org.apache.rat.license.LicenseSetFactory.LicenseFilter.all;
        org.apache.rat.Reporter.listLicenses(reportConfiguration36, licenseFilter38);
        org.apache.rat.Reporter.listLicenses(reportConfiguration29, licenseFilter38);
        java.util.SortedSet<org.apache.rat.license.ILicenseFamily> iLicenseFamilySet41 = reportConfiguration16.getLicenseFamilies(licenseFilter38);
        org.apache.rat.Reporter.listLicenseFamilies(reportConfiguration5, licenseFilter38);
        java.util.SortedSet<org.apache.rat.license.ILicenseFamily> iLicenseFamilySet43 = reportConfiguration1.getLicenseFamilies(licenseFilter38);
        org.apache.rat.policy.DefaultPolicy defaultPolicy44 = new org.apache.rat.policy.DefaultPolicy((java.util.Collection<org.apache.rat.license.ILicenseFamily>) iLicenseFamilySet43);
        org.apache.rat.api.Document document45 = null;
        defaultPolicy44.analyse(document45);
        java.util.SortedSet<org.apache.rat.license.ILicenseFamily> iLicenseFamilySet47 = defaultPolicy44.getApprovedLicenseNames();
        org.apache.rat.api.Document document48 = null;
        defaultPolicy44.analyse(document48);
        org.apache.rat.api.Document document50 = null;
        // The following exception was thrown during execution in test generation
        try {
            defaultPolicy44.reportLicenseApprovalClaim(document50, false);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(outputStreamIOSupplier2);
        org.junit.Assert.assertNotNull(iOFileFilter3);
        org.junit.Assert.assertNull(filenameFilter10);
        org.junit.Assert.assertTrue("'" + licenseFilter11 + "' != '" + org.apache.rat.license.LicenseSetFactory.LicenseFilter.all + "'", licenseFilter11.equals(org.apache.rat.license.LicenseSetFactory.LicenseFilter.all));
        org.junit.Assert.assertNotNull(iLicenseSet12);
        org.junit.Assert.assertNull(filenameFilter14);
        org.junit.Assert.assertNull(filenameFilter17);
        org.junit.Assert.assertTrue("'" + licenseFilter18 + "' != '" + org.apache.rat.license.LicenseSetFactory.LicenseFilter.all + "'", licenseFilter18.equals(org.apache.rat.license.LicenseSetFactory.LicenseFilter.all));
        org.junit.Assert.assertNotNull(iLicenseSet19);
        org.junit.Assert.assertTrue("'" + addLicenseHeaders20 + "' != '" + org.apache.rat.config.AddLicenseHeaders.FALSE + "'", addLicenseHeaders20.equals(org.apache.rat.config.AddLicenseHeaders.FALSE));
        org.junit.Assert.assertNull(claimStatistic24);
        org.junit.Assert.assertTrue("'" + licenseFilter25 + "' != '" + org.apache.rat.license.LicenseSetFactory.LicenseFilter.all + "'", licenseFilter25.equals(org.apache.rat.license.LicenseSetFactory.LicenseFilter.all));
        org.junit.Assert.assertNull(filenameFilter30);
        org.junit.Assert.assertTrue("'" + licenseFilter31 + "' != '" + org.apache.rat.license.LicenseSetFactory.LicenseFilter.all + "'", licenseFilter31.equals(org.apache.rat.license.LicenseSetFactory.LicenseFilter.all));
        org.junit.Assert.assertNotNull(iLicenseSet32);
        org.junit.Assert.assertTrue("'" + addLicenseHeaders33 + "' != '" + org.apache.rat.config.AddLicenseHeaders.FALSE + "'", addLicenseHeaders33.equals(org.apache.rat.config.AddLicenseHeaders.FALSE));
        org.junit.Assert.assertNull(claimStatistic37);
        org.junit.Assert.assertTrue("'" + licenseFilter38 + "' != '" + org.apache.rat.license.LicenseSetFactory.LicenseFilter.all + "'", licenseFilter38.equals(org.apache.rat.license.LicenseSetFactory.LicenseFilter.all));
        org.junit.Assert.assertNotNull(iLicenseFamilySet41);
        org.junit.Assert.assertNotNull(iLicenseFamilySet43);
        org.junit.Assert.assertNotNull(iLicenseFamilySet47);
    }

    @Test
    public void test12933() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest25.test12933");
        org.apache.rat.analysis.matchers.SimpleTextMatcher simpleTextMatcher1 = new org.apache.rat.analysis.matchers.SimpleTextMatcher("binary");
        org.apache.rat.analysis.IHeaderMatcher.State state2 = simpleTextMatcher1.finalizeState();
        boolean boolean4 = simpleTextMatcher1.doMatch("null http://org/apache/rat/meta-data#LicenseFamilyName");
        org.apache.rat.analysis.IHeaderMatcher.State state6 = simpleTextMatcher1.matches("AnyBuilderNotBuilderMathcerRefBuildernull");
        org.junit.Assert.assertTrue("'" + state2 + "' != '" + org.apache.rat.analysis.IHeaderMatcher.State.f + "'", state2.equals(org.apache.rat.analysis.IHeaderMatcher.State.f));
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertTrue("'" + state6 + "' != '" + org.apache.rat.analysis.IHeaderMatcher.State.f + "'", state6.equals(org.apache.rat.analysis.IHeaderMatcher.State.f));
    }

    @Test
    public void test12934() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest25.test12934");
        java.lang.String[] strArray5 = new java.lang.String[] { "http://org/apache/rat/meta-data#LicenseFamilyCategory", "Datum [ name ='http://org/apache/rat/meta-data#LicenseFamilyCategory',value ='GPL1  ']", "MANIFEST.MF", "AllBuilder:", "The MIT License" };
        org.apache.rat.utils.ReportingSet<java.lang.String> strSet6 = new org.apache.rat.utils.ReportingSet<java.lang.String>();
        boolean boolean7 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strSet6, strArray5);
        boolean boolean9 = strSet6.addIfNotPresent("http://org/apache/rat/meta-data#LicenseFamilyName");
        java.util.Iterator<java.lang.String> strItor10 = strSet6.iterator();
        strSet6.clear();
        strSet6.clear();
        java.lang.Object[] objArray13 = strSet6.toArray();
        java.util.stream.Stream<java.lang.String> strStream14 = strSet6.stream();
        java.util.Spliterator<java.lang.String> strSpliterator15 = strSet6.spliterator();
        org.apache.rat.Defaults.Builder builder16 = org.apache.rat.Defaults.builder();
        org.apache.rat.Defaults defaults17 = builder16.build();
        org.apache.rat.utils.Log log18 = null;
        org.apache.rat.ReportConfiguration reportConfiguration19 = new org.apache.rat.ReportConfiguration(log18);
        org.apache.rat.report.claim.ClaimStatistic claimStatistic20 = org.apache.rat.Reporter.report(reportConfiguration19);
        org.apache.rat.license.LicenseSetFactory.LicenseFilter licenseFilter21 = org.apache.rat.license.LicenseSetFactory.LicenseFilter.all;
        org.apache.rat.Reporter.listLicenses(reportConfiguration19, licenseFilter21);
        java.util.SortedSet<org.apache.rat.license.ILicenseFamily> iLicenseFamilySet23 = defaults17.getLicenseFamilies(licenseFilter21);
        boolean boolean24 = strSet6.containsAll((java.util.Collection<org.apache.rat.license.ILicenseFamily>) iLicenseFamilySet23);
        boolean boolean25 = strSet6.isEmpty();
        boolean boolean27 = strSet6.add("58D10");
        org.junit.Assert.assertNotNull(strArray5);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + true + "'", boolean7 == true);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + true + "'", boolean9 == true);
        org.junit.Assert.assertNotNull(strItor10);
        org.junit.Assert.assertNotNull(objArray13);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray13), "[]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray13), "[]");
        org.junit.Assert.assertNotNull(strStream14);
        org.junit.Assert.assertNotNull(strSpliterator15);
        org.junit.Assert.assertNotNull(builder16);
        org.junit.Assert.assertNotNull(defaults17);
        org.junit.Assert.assertNull(claimStatistic20);
        org.junit.Assert.assertTrue("'" + licenseFilter21 + "' != '" + org.apache.rat.license.LicenseSetFactory.LicenseFilter.all + "'", licenseFilter21.equals(org.apache.rat.license.LicenseSetFactory.LicenseFilter.all));
        org.junit.Assert.assertNotNull(iLicenseFamilySet23);
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + false + "'", boolean24 == false);
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + true + "'", boolean25 == true);
        org.junit.Assert.assertTrue("'" + boolean27 + "' != '" + true + "'", boolean27 == true);
    }

    @Test
    public void test12935() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest25.test12935");
        org.apache.rat.utils.Log log0 = null;
        org.apache.rat.ReportConfiguration reportConfiguration1 = new org.apache.rat.ReportConfiguration(log0);
        reportConfiguration1.addApprovedLicenseCategory(".cvsignore");
        org.apache.rat.utils.Log log4 = null;
        org.apache.rat.ReportConfiguration reportConfiguration5 = new org.apache.rat.ReportConfiguration(log4);
        java.io.FilenameFilter filenameFilter6 = reportConfiguration5.getInputFileFilter();
        org.apache.rat.license.LicenseSetFactory.LicenseFilter licenseFilter7 = org.apache.rat.license.LicenseSetFactory.LicenseFilter.all;
        java.util.SortedSet<org.apache.rat.license.ILicense> iLicenseSet8 = reportConfiguration5.getLicenses(licenseFilter7);
        reportConfiguration1.addLicensesIfNotPresent((java.util.Collection<org.apache.rat.license.ILicense>) iLicenseSet8);
        reportConfiguration1.removeApprovedLicenseCategory("The MIT License");
        org.apache.rat.license.ILicense[] iLicenseArray12 = new org.apache.rat.license.ILicense[] {};
        java.util.TreeSet<org.apache.rat.license.ILicense> iLicenseSet13 = new java.util.TreeSet<org.apache.rat.license.ILicense>();
        boolean boolean14 = java.util.Collections.addAll((java.util.Collection<org.apache.rat.license.ILicense>) iLicenseSet13, iLicenseArray12);
        java.lang.String[] strArray27 = new java.lang.String[] { "GPL2 ", "GPL1 ", "notice", "http://org/apache/rat/meta-data#LicenseFamilyName", "notice", "GPL2 ", "http://org/apache/rat/meta-data#LicenseFamilyName", "", "GPL2 ", "", "GPL1 ", "hi!" };
        java.util.ArrayList<java.lang.String> strList28 = new java.util.ArrayList<java.lang.String>();
        boolean boolean29 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strList28, strArray27);
        org.apache.rat.license.LicenseSetFactory licenseSetFactory30 = new org.apache.rat.license.LicenseSetFactory((java.util.SortedSet<org.apache.rat.license.ILicense>) iLicenseSet13, (java.util.Collection<java.lang.String>) strList28);
        org.apache.rat.utils.Log log31 = null;
        org.apache.rat.ReportConfiguration reportConfiguration32 = new org.apache.rat.ReportConfiguration(log31);
        java.io.FilenameFilter filenameFilter33 = reportConfiguration32.getInputFileFilter();
        org.apache.rat.license.LicenseSetFactory.LicenseFilter licenseFilter34 = org.apache.rat.license.LicenseSetFactory.LicenseFilter.all;
        java.util.SortedSet<org.apache.rat.license.ILicense> iLicenseSet35 = reportConfiguration32.getLicenses(licenseFilter34);
        org.apache.rat.config.AddLicenseHeaders addLicenseHeaders36 = org.apache.rat.config.AddLicenseHeaders.FALSE;
        reportConfiguration32.setAddLicenseHeaders(addLicenseHeaders36);
        org.apache.rat.utils.Log log38 = null;
        org.apache.rat.ReportConfiguration reportConfiguration39 = new org.apache.rat.ReportConfiguration(log38);
        org.apache.rat.report.claim.ClaimStatistic claimStatistic40 = org.apache.rat.Reporter.report(reportConfiguration39);
        org.apache.rat.license.LicenseSetFactory.LicenseFilter licenseFilter41 = org.apache.rat.license.LicenseSetFactory.LicenseFilter.all;
        org.apache.rat.Reporter.listLicenses(reportConfiguration39, licenseFilter41);
        org.apache.rat.Reporter.listLicenses(reportConfiguration32, licenseFilter41);
        org.apache.rat.utils.Log log44 = null;
        org.apache.rat.ReportConfiguration reportConfiguration45 = new org.apache.rat.ReportConfiguration(log44);
        java.io.FilenameFilter filenameFilter46 = reportConfiguration45.getInputFileFilter();
        org.apache.rat.license.LicenseSetFactory.LicenseFilter licenseFilter47 = org.apache.rat.license.LicenseSetFactory.LicenseFilter.all;
        java.util.SortedSet<org.apache.rat.license.ILicense> iLicenseSet48 = reportConfiguration45.getLicenses(licenseFilter47);
        org.apache.rat.config.AddLicenseHeaders addLicenseHeaders49 = org.apache.rat.config.AddLicenseHeaders.FALSE;
        reportConfiguration45.setAddLicenseHeaders(addLicenseHeaders49);
        org.apache.rat.utils.Log log51 = null;
        org.apache.rat.ReportConfiguration reportConfiguration52 = new org.apache.rat.ReportConfiguration(log51);
        org.apache.rat.report.claim.ClaimStatistic claimStatistic53 = org.apache.rat.Reporter.report(reportConfiguration52);
        org.apache.rat.license.LicenseSetFactory.LicenseFilter licenseFilter54 = org.apache.rat.license.LicenseSetFactory.LicenseFilter.all;
        org.apache.rat.Reporter.listLicenses(reportConfiguration52, licenseFilter54);
        org.apache.rat.Reporter.listLicenses(reportConfiguration45, licenseFilter54);
        org.apache.rat.Reporter.listLicenses(reportConfiguration32, licenseFilter54);
        java.util.SortedSet<org.apache.rat.license.ILicense> iLicenseSet58 = licenseSetFactory30.getLicenses(licenseFilter54);
        reportConfiguration1.addLicenses((java.util.Collection<org.apache.rat.license.ILicense>) iLicenseSet58);
        org.apache.rat.utils.Log log60 = null;
        org.apache.rat.ReportConfiguration reportConfiguration61 = new org.apache.rat.ReportConfiguration(log60);
        org.apache.rat.report.claim.ClaimStatistic claimStatistic62 = org.apache.rat.Reporter.report(reportConfiguration61);
        org.apache.commons.io.function.IOSupplier<java.io.OutputStream> outputStreamIOSupplier63 = reportConfiguration61.getOutput();
        org.apache.rat.license.ILicense iLicense64 = null;
        reportConfiguration61.addLicense(iLicense64);
        org.apache.rat.Defaults.Builder builder66 = org.apache.rat.Defaults.builder();
        org.apache.rat.Defaults defaults67 = builder66.build();
        reportConfiguration61.setFrom(defaults67);
        org.apache.rat.license.ILicense[] iLicenseArray69 = new org.apache.rat.license.ILicense[] {};
        java.util.TreeSet<org.apache.rat.license.ILicense> iLicenseSet70 = new java.util.TreeSet<org.apache.rat.license.ILicense>();
        boolean boolean71 = java.util.Collections.addAll((java.util.Collection<org.apache.rat.license.ILicense>) iLicenseSet70, iLicenseArray69);
        java.lang.String[] strArray84 = new java.lang.String[] { "GPL2 ", "GPL1 ", "notice", "http://org/apache/rat/meta-data#LicenseFamilyName", "notice", "GPL2 ", "http://org/apache/rat/meta-data#LicenseFamilyName", "", "GPL2 ", "", "GPL1 ", "hi!" };
        java.util.ArrayList<java.lang.String> strList85 = new java.util.ArrayList<java.lang.String>();
        boolean boolean86 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strList85, strArray84);
        org.apache.rat.license.LicenseSetFactory licenseSetFactory87 = new org.apache.rat.license.LicenseSetFactory((java.util.SortedSet<org.apache.rat.license.ILicense>) iLicenseSet70, (java.util.Collection<java.lang.String>) strList85);
        org.apache.rat.license.LicenseSetFactory.LicenseFilter licenseFilter88 = org.apache.rat.license.LicenseSetFactory.LicenseFilter.all;
        java.util.SortedSet<org.apache.rat.license.ILicenseFamily> iLicenseFamilySet89 = licenseSetFactory87.getLicenseFamilies(licenseFilter88);
        java.util.SortedSet<org.apache.rat.license.ILicense> iLicenseSet90 = defaults67.getLicenses(licenseFilter88);
        reportConfiguration1.addLicensesIfNotPresent((java.util.Collection<org.apache.rat.license.ILicense>) iLicenseSet90);
        org.apache.commons.io.function.IOSupplier<java.io.InputStream> inputStreamIOSupplier92 = reportConfiguration1.getStyleSheet();
        java.lang.String str93 = reportConfiguration1.getCopyrightMessage();
        java.util.function.Consumer<java.lang.String> strConsumer94 = null;
        // The following exception was thrown during execution in test generation
        try {
            reportConfiguration1.validate(strConsumer94);
            org.junit.Assert.fail("Expected exception of type org.apache.rat.ConfigurationException; message: Reportable may not be null");
        } catch (org.apache.rat.ConfigurationException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNull(filenameFilter6);
        org.junit.Assert.assertTrue("'" + licenseFilter7 + "' != '" + org.apache.rat.license.LicenseSetFactory.LicenseFilter.all + "'", licenseFilter7.equals(org.apache.rat.license.LicenseSetFactory.LicenseFilter.all));
        org.junit.Assert.assertNotNull(iLicenseSet8);
        org.junit.Assert.assertNotNull(iLicenseArray12);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
        org.junit.Assert.assertNotNull(strArray27);
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + true + "'", boolean29 == true);
        org.junit.Assert.assertNull(filenameFilter33);
        org.junit.Assert.assertTrue("'" + licenseFilter34 + "' != '" + org.apache.rat.license.LicenseSetFactory.LicenseFilter.all + "'", licenseFilter34.equals(org.apache.rat.license.LicenseSetFactory.LicenseFilter.all));
        org.junit.Assert.assertNotNull(iLicenseSet35);
        org.junit.Assert.assertTrue("'" + addLicenseHeaders36 + "' != '" + org.apache.rat.config.AddLicenseHeaders.FALSE + "'", addLicenseHeaders36.equals(org.apache.rat.config.AddLicenseHeaders.FALSE));
        org.junit.Assert.assertNull(claimStatistic40);
        org.junit.Assert.assertTrue("'" + licenseFilter41 + "' != '" + org.apache.rat.license.LicenseSetFactory.LicenseFilter.all + "'", licenseFilter41.equals(org.apache.rat.license.LicenseSetFactory.LicenseFilter.all));
        org.junit.Assert.assertNull(filenameFilter46);
        org.junit.Assert.assertTrue("'" + licenseFilter47 + "' != '" + org.apache.rat.license.LicenseSetFactory.LicenseFilter.all + "'", licenseFilter47.equals(org.apache.rat.license.LicenseSetFactory.LicenseFilter.all));
        org.junit.Assert.assertNotNull(iLicenseSet48);
        org.junit.Assert.assertTrue("'" + addLicenseHeaders49 + "' != '" + org.apache.rat.config.AddLicenseHeaders.FALSE + "'", addLicenseHeaders49.equals(org.apache.rat.config.AddLicenseHeaders.FALSE));
        org.junit.Assert.assertNull(claimStatistic53);
        org.junit.Assert.assertTrue("'" + licenseFilter54 + "' != '" + org.apache.rat.license.LicenseSetFactory.LicenseFilter.all + "'", licenseFilter54.equals(org.apache.rat.license.LicenseSetFactory.LicenseFilter.all));
        org.junit.Assert.assertNotNull(iLicenseSet58);
        org.junit.Assert.assertNull(claimStatistic62);
        org.junit.Assert.assertNotNull(outputStreamIOSupplier63);
        org.junit.Assert.assertNotNull(builder66);
        org.junit.Assert.assertNotNull(defaults67);
        org.junit.Assert.assertNotNull(iLicenseArray69);
        org.junit.Assert.assertTrue("'" + boolean71 + "' != '" + false + "'", boolean71 == false);
        org.junit.Assert.assertNotNull(strArray84);
        org.junit.Assert.assertTrue("'" + boolean86 + "' != '" + true + "'", boolean86 == true);
        org.junit.Assert.assertTrue("'" + licenseFilter88 + "' != '" + org.apache.rat.license.LicenseSetFactory.LicenseFilter.all + "'", licenseFilter88.equals(org.apache.rat.license.LicenseSetFactory.LicenseFilter.all));
        org.junit.Assert.assertNotNull(iLicenseFamilySet89);
        org.junit.Assert.assertNotNull(iLicenseSet90);
        org.junit.Assert.assertNull(inputStreamIOSupplier92);
        org.junit.Assert.assertNull(str93);
    }

    @Test
    public void test12936() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest25.test12936");
        org.apache.rat.report.claim.ClaimStatistic claimStatistic0 = new org.apache.rat.report.claim.ClaimStatistic();
        claimStatistic0.setNumApproved((int) (short) 10);
        claimStatistic0.setNumUnknown(30);
        java.util.Map<java.lang.String, java.lang.Integer> strMap5 = claimStatistic0.getDocumentCategoryMap();
        claimStatistic0.setNumUnApproved((int) (byte) 10);
        java.util.Map<java.lang.String, java.lang.Integer> strMap8 = null;
        claimStatistic0.setLicenseFileCodeMap(strMap8);
        org.junit.Assert.assertNull(strMap5);
    }

    @Test
    public void test12937() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest25.test12937");
        org.apache.rat.api.MetaData.Datum datum2 = new org.apache.rat.api.MetaData.Datum("Copyright Builder: s:null e:.cvsignore o:GPL1  null", "E5B7B7D630DE49728C78A5E3E85D54E0");
        java.lang.String str3 = datum2.toString();
        org.junit.Assert.assertEquals("'" + str3 + "' != '" + "Datum [ name ='Copyright Builder: s:null e:.cvsignore o:GPL1  null',value ='E5B7B7D630DE49728C78A5E3E85D54E0 ']" + "'", str3, "Datum [ name ='Copyright Builder: s:null e:.cvsignore o:GPL1  null',value ='E5B7B7D630DE49728C78A5E3E85D54E0 ']");
    }

    @Test
    public void test12938() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest25.test12938");
        org.apache.rat.api.MetaData metaData0 = new org.apache.rat.api.MetaData();
        java.lang.String str2 = metaData0.value("COMMON DEVELOPMENT AND DISTRIBUTION LICENSE Version 1.0");
        java.lang.String str4 = metaData0.value("W3C Document Copyright");
        boolean boolean6 = metaData0.clear("hi!");
        java.lang.String str8 = metaData0.value("true");
        org.apache.rat.api.MetaData.Datum datum10 = metaData0.get("GNU General Public License, version 1");
        org.apache.rat.api.MetaData.Datum datum12 = metaData0.get("http:");
        org.apache.rat.api.MetaData.Datum datum14 = metaData0.get("TextBuilder: ");
        java.util.Collection<org.apache.rat.api.MetaData.Datum> datumCollection15 = metaData0.getData();
        metaData0.clear();
        metaData0.clear();
        metaData0.clear();
        org.apache.rat.utils.Log log19 = null;
        org.apache.rat.ReportConfiguration reportConfiguration20 = new org.apache.rat.ReportConfiguration(log19);
        org.apache.rat.report.claim.ClaimStatistic claimStatistic21 = org.apache.rat.Reporter.report(reportConfiguration20);
        org.apache.rat.report.IReportable iReportable22 = null;
        reportConfiguration20.setReportable(iReportable22);
        boolean boolean24 = reportConfiguration20.isAddingLicensesForced();
        org.apache.commons.io.filefilter.IOFileFilter iOFileFilter25 = reportConfiguration20.getDirectoryFilter();
        org.apache.rat.utils.Log log26 = null;
        org.apache.rat.ReportConfiguration reportConfiguration27 = new org.apache.rat.ReportConfiguration(log26);
        java.io.FilenameFilter filenameFilter28 = reportConfiguration27.getInputFileFilter();
        org.apache.rat.license.LicenseSetFactory.LicenseFilter licenseFilter29 = org.apache.rat.license.LicenseSetFactory.LicenseFilter.all;
        java.util.SortedSet<org.apache.rat.license.ILicense> iLicenseSet30 = reportConfiguration27.getLicenses(licenseFilter29);
        org.apache.rat.config.AddLicenseHeaders addLicenseHeaders31 = org.apache.rat.config.AddLicenseHeaders.FALSE;
        reportConfiguration27.setAddLicenseHeaders(addLicenseHeaders31);
        org.apache.rat.utils.Log log33 = null;
        org.apache.rat.ReportConfiguration reportConfiguration34 = new org.apache.rat.ReportConfiguration(log33);
        org.apache.rat.report.claim.ClaimStatistic claimStatistic35 = org.apache.rat.Reporter.report(reportConfiguration34);
        org.apache.rat.license.LicenseSetFactory.LicenseFilter licenseFilter36 = org.apache.rat.license.LicenseSetFactory.LicenseFilter.all;
        org.apache.rat.Reporter.listLicenses(reportConfiguration34, licenseFilter36);
        org.apache.rat.Reporter.listLicenses(reportConfiguration27, licenseFilter36);
        org.apache.rat.utils.Log log39 = null;
        org.apache.rat.ReportConfiguration reportConfiguration40 = new org.apache.rat.ReportConfiguration(log39);
        java.io.FilenameFilter filenameFilter41 = reportConfiguration40.getInputFileFilter();
        org.apache.rat.license.LicenseSetFactory.LicenseFilter licenseFilter42 = org.apache.rat.license.LicenseSetFactory.LicenseFilter.all;
        java.util.SortedSet<org.apache.rat.license.ILicense> iLicenseSet43 = reportConfiguration40.getLicenses(licenseFilter42);
        org.apache.rat.config.AddLicenseHeaders addLicenseHeaders44 = org.apache.rat.config.AddLicenseHeaders.FALSE;
        reportConfiguration40.setAddLicenseHeaders(addLicenseHeaders44);
        org.apache.rat.utils.Log log46 = null;
        org.apache.rat.ReportConfiguration reportConfiguration47 = new org.apache.rat.ReportConfiguration(log46);
        org.apache.rat.report.claim.ClaimStatistic claimStatistic48 = org.apache.rat.Reporter.report(reportConfiguration47);
        org.apache.rat.license.LicenseSetFactory.LicenseFilter licenseFilter49 = org.apache.rat.license.LicenseSetFactory.LicenseFilter.all;
        org.apache.rat.Reporter.listLicenses(reportConfiguration47, licenseFilter49);
        org.apache.rat.Reporter.listLicenses(reportConfiguration40, licenseFilter49);
        org.apache.rat.Reporter.listLicenses(reportConfiguration27, licenseFilter49);
        java.io.FilenameFilter filenameFilter53 = reportConfiguration27.getInputFileFilter();
        reportConfiguration27.setStyleReport(false);
        org.apache.rat.report.IReportable iReportable56 = null;
        reportConfiguration27.setReportable(iReportable56);
        org.apache.rat.Defaults.Builder builder59 = org.apache.rat.Defaults.builder();
        org.apache.rat.Defaults defaults60 = builder59.build();
        org.apache.rat.utils.Log log61 = null;
        org.apache.rat.ReportConfiguration reportConfiguration62 = new org.apache.rat.ReportConfiguration(log61);
        java.io.FilenameFilter filenameFilter63 = reportConfiguration62.getInputFileFilter();
        org.apache.rat.license.LicenseSetFactory.LicenseFilter licenseFilter64 = org.apache.rat.license.LicenseSetFactory.LicenseFilter.all;
        java.util.SortedSet<org.apache.rat.license.ILicense> iLicenseSet65 = reportConfiguration62.getLicenses(licenseFilter64);
        org.apache.rat.config.AddLicenseHeaders addLicenseHeaders66 = org.apache.rat.config.AddLicenseHeaders.FALSE;
        reportConfiguration62.setAddLicenseHeaders(addLicenseHeaders66);
        org.apache.rat.utils.Log log68 = null;
        org.apache.rat.ReportConfiguration reportConfiguration69 = new org.apache.rat.ReportConfiguration(log68);
        org.apache.rat.report.claim.ClaimStatistic claimStatistic70 = org.apache.rat.Reporter.report(reportConfiguration69);
        org.apache.rat.license.LicenseSetFactory.LicenseFilter licenseFilter71 = org.apache.rat.license.LicenseSetFactory.LicenseFilter.all;
        org.apache.rat.Reporter.listLicenses(reportConfiguration69, licenseFilter71);
        org.apache.rat.Reporter.listLicenses(reportConfiguration62, licenseFilter71);
        org.apache.rat.utils.Log log74 = null;
        org.apache.rat.ReportConfiguration reportConfiguration75 = new org.apache.rat.ReportConfiguration(log74);
        java.io.FilenameFilter filenameFilter76 = reportConfiguration75.getInputFileFilter();
        org.apache.rat.license.LicenseSetFactory.LicenseFilter licenseFilter77 = org.apache.rat.license.LicenseSetFactory.LicenseFilter.all;
        java.util.SortedSet<org.apache.rat.license.ILicense> iLicenseSet78 = reportConfiguration75.getLicenses(licenseFilter77);
        org.apache.rat.config.AddLicenseHeaders addLicenseHeaders79 = org.apache.rat.config.AddLicenseHeaders.FALSE;
        reportConfiguration75.setAddLicenseHeaders(addLicenseHeaders79);
        org.apache.rat.utils.Log log81 = null;
        org.apache.rat.ReportConfiguration reportConfiguration82 = new org.apache.rat.ReportConfiguration(log81);
        org.apache.rat.report.claim.ClaimStatistic claimStatistic83 = org.apache.rat.Reporter.report(reportConfiguration82);
        org.apache.rat.license.LicenseSetFactory.LicenseFilter licenseFilter84 = org.apache.rat.license.LicenseSetFactory.LicenseFilter.all;
        org.apache.rat.Reporter.listLicenses(reportConfiguration82, licenseFilter84);
        org.apache.rat.Reporter.listLicenses(reportConfiguration75, licenseFilter84);
        java.util.SortedSet<org.apache.rat.license.ILicenseFamily> iLicenseFamilySet87 = reportConfiguration62.getLicenseFamilies(licenseFilter84);
        java.util.SortedSet<org.apache.rat.license.ILicense> iLicenseSet88 = defaults60.getLicenses(licenseFilter84);
        org.apache.rat.utils.ReportingSet<org.apache.rat.license.ILicense> iLicenseSet89 = new org.apache.rat.utils.ReportingSet<org.apache.rat.license.ILicense>(iLicenseSet88);
        org.apache.rat.license.ILicense iLicense90 = org.apache.rat.license.LicenseSetFactory.search("TMF", iLicenseSet88);
        reportConfiguration27.addLicense(iLicense90);
        java.lang.String str92 = iLicense90.derivedFrom();
        java.lang.String str93 = iLicense90.getName();
        java.lang.String str94 = iLicense90.getName();
        java.lang.String str95 = iLicense90.derivedFrom();
        reportConfiguration20.addLicense(iLicense90);
        metaData0.reportOnLicense(iLicense90);
        java.lang.String str98 = iLicense90.getName();
        org.junit.Assert.assertNull(str2);
        org.junit.Assert.assertNull(str4);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertNull(str8);
        org.junit.Assert.assertNull(datum10);
        org.junit.Assert.assertNull(datum12);
        org.junit.Assert.assertNull(datum14);
        org.junit.Assert.assertNotNull(datumCollection15);
        org.junit.Assert.assertNull(claimStatistic21);
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + false + "'", boolean24 == false);
        org.junit.Assert.assertNotNull(iOFileFilter25);
        org.junit.Assert.assertNull(filenameFilter28);
        org.junit.Assert.assertTrue("'" + licenseFilter29 + "' != '" + org.apache.rat.license.LicenseSetFactory.LicenseFilter.all + "'", licenseFilter29.equals(org.apache.rat.license.LicenseSetFactory.LicenseFilter.all));
        org.junit.Assert.assertNotNull(iLicenseSet30);
        org.junit.Assert.assertTrue("'" + addLicenseHeaders31 + "' != '" + org.apache.rat.config.AddLicenseHeaders.FALSE + "'", addLicenseHeaders31.equals(org.apache.rat.config.AddLicenseHeaders.FALSE));
        org.junit.Assert.assertNull(claimStatistic35);
        org.junit.Assert.assertTrue("'" + licenseFilter36 + "' != '" + org.apache.rat.license.LicenseSetFactory.LicenseFilter.all + "'", licenseFilter36.equals(org.apache.rat.license.LicenseSetFactory.LicenseFilter.all));
        org.junit.Assert.assertNull(filenameFilter41);
        org.junit.Assert.assertTrue("'" + licenseFilter42 + "' != '" + org.apache.rat.license.LicenseSetFactory.LicenseFilter.all + "'", licenseFilter42.equals(org.apache.rat.license.LicenseSetFactory.LicenseFilter.all));
        org.junit.Assert.assertNotNull(iLicenseSet43);
        org.junit.Assert.assertTrue("'" + addLicenseHeaders44 + "' != '" + org.apache.rat.config.AddLicenseHeaders.FALSE + "'", addLicenseHeaders44.equals(org.apache.rat.config.AddLicenseHeaders.FALSE));
        org.junit.Assert.assertNull(claimStatistic48);
        org.junit.Assert.assertTrue("'" + licenseFilter49 + "' != '" + org.apache.rat.license.LicenseSetFactory.LicenseFilter.all + "'", licenseFilter49.equals(org.apache.rat.license.LicenseSetFactory.LicenseFilter.all));
        org.junit.Assert.assertNull(filenameFilter53);
        org.junit.Assert.assertNotNull(builder59);
        org.junit.Assert.assertNotNull(defaults60);
        org.junit.Assert.assertNull(filenameFilter63);
        org.junit.Assert.assertTrue("'" + licenseFilter64 + "' != '" + org.apache.rat.license.LicenseSetFactory.LicenseFilter.all + "'", licenseFilter64.equals(org.apache.rat.license.LicenseSetFactory.LicenseFilter.all));
        org.junit.Assert.assertNotNull(iLicenseSet65);
        org.junit.Assert.assertTrue("'" + addLicenseHeaders66 + "' != '" + org.apache.rat.config.AddLicenseHeaders.FALSE + "'", addLicenseHeaders66.equals(org.apache.rat.config.AddLicenseHeaders.FALSE));
        org.junit.Assert.assertNull(claimStatistic70);
        org.junit.Assert.assertTrue("'" + licenseFilter71 + "' != '" + org.apache.rat.license.LicenseSetFactory.LicenseFilter.all + "'", licenseFilter71.equals(org.apache.rat.license.LicenseSetFactory.LicenseFilter.all));
        org.junit.Assert.assertNull(filenameFilter76);
        org.junit.Assert.assertTrue("'" + licenseFilter77 + "' != '" + org.apache.rat.license.LicenseSetFactory.LicenseFilter.all + "'", licenseFilter77.equals(org.apache.rat.license.LicenseSetFactory.LicenseFilter.all));
        org.junit.Assert.assertNotNull(iLicenseSet78);
        org.junit.Assert.assertTrue("'" + addLicenseHeaders79 + "' != '" + org.apache.rat.config.AddLicenseHeaders.FALSE + "'", addLicenseHeaders79.equals(org.apache.rat.config.AddLicenseHeaders.FALSE));
        org.junit.Assert.assertNull(claimStatistic83);
        org.junit.Assert.assertTrue("'" + licenseFilter84 + "' != '" + org.apache.rat.license.LicenseSetFactory.LicenseFilter.all + "'", licenseFilter84.equals(org.apache.rat.license.LicenseSetFactory.LicenseFilter.all));
        org.junit.Assert.assertNotNull(iLicenseFamilySet87);
        org.junit.Assert.assertNotNull(iLicenseSet88);
        org.junit.Assert.assertNotNull(iLicense90);
        org.junit.Assert.assertEquals("'" + str92 + "' != '" + "BSD-3" + "'", str92, "BSD-3");
        org.junit.Assert.assertEquals("'" + str93 + "' != '" + "The Telemanagement Forum License" + "'", str93, "The Telemanagement Forum License");
        org.junit.Assert.assertEquals("'" + str94 + "' != '" + "The Telemanagement Forum License" + "'", str94, "The Telemanagement Forum License");
        org.junit.Assert.assertEquals("'" + str95 + "' != '" + "BSD-3" + "'", str95, "BSD-3");
        org.junit.Assert.assertEquals("'" + str98 + "' != '" + "The Telemanagement Forum License" + "'", str98, "The Telemanagement Forum License");
    }

    @Test
    public void test12939() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest25.test12939");
        java.io.Writer writer0 = null;
        org.apache.rat.report.xml.writer.impl.base.XmlWriter xmlWriter1 = new org.apache.rat.report.xml.writer.impl.base.XmlWriter(writer0);
        org.apache.rat.report.claim.impl.xml.SimpleXmlClaimReporter simpleXmlClaimReporter2 = new org.apache.rat.report.claim.impl.xml.SimpleXmlClaimReporter((org.apache.rat.report.xml.writer.IXmlWriter) xmlWriter1);
        org.apache.rat.report.claim.impl.xml.SimpleXmlClaimReporter simpleXmlClaimReporter3 = new org.apache.rat.report.claim.impl.xml.SimpleXmlClaimReporter((org.apache.rat.report.xml.writer.IXmlWriter) xmlWriter1);
        // The following exception was thrown during execution in test generation
        try {
            org.apache.rat.report.xml.writer.IXmlWriter iXmlWriter5 = xmlWriter1.content((java.lang.CharSequence) "binar");
            org.junit.Assert.fail("Expected exception of type org.apache.rat.report.xml.writer.OperationNotAllowedException; message: An element must be opened before content can be written.");
        } catch (org.apache.rat.report.xml.writer.OperationNotAllowedException e) {
            // Expected exception.
        }
    }

    @Test
    public void test12940() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest25.test12940");
        org.apache.rat.license.ILicense.Builder builder0 = org.apache.rat.license.ILicense.builder();
        org.apache.rat.license.ILicense.Builder builder2 = builder0.setLicenseFamilyCategory("http://org/apache/rat/meta-data#HeaderCategory");
        org.apache.rat.license.ILicense.Builder builder4 = builder0.setDerivedFrom("MANIFEST.MF");
        org.apache.rat.license.ILicense.Builder builder6 = builder0.setId("ed0faf32-f32c-46f1-a629-4fe87704cb0e");
        org.apache.rat.license.ILicense.Builder builder8 = builder0.setDerivedFrom("01cd6410-ba98-464c-a66e-0b7190dd6096");
        org.apache.rat.license.ILicense.Builder builder10 = builder0.setName(".bzrignore");
        org.apache.rat.license.ILicense.Builder builder12 = builder0.setName("SpdxBuilder: SpdxB");
        org.apache.rat.license.ILicense.Builder builder14 = builder0.setId("MathcerRefBuilder: AllBuilder:\nCopyright Builder: s:null e:.cvsignore o:3c840dc2-bef0-42b5-b26c-35a568d53a24\nTextBuilder: t true");
        org.junit.Assert.assertNotNull(builder0);
        org.junit.Assert.assertNotNull(builder2);
        org.junit.Assert.assertNotNull(builder4);
        org.junit.Assert.assertNotNull(builder6);
        org.junit.Assert.assertNotNull(builder8);
        org.junit.Assert.assertNotNull(builder10);
        org.junit.Assert.assertNotNull(builder12);
        org.junit.Assert.assertNotNull(builder14);
    }

    @Test
    public void test12941() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest25.test12941");
        org.apache.rat.report.claim.ClaimStatistic claimStatistic0 = new org.apache.rat.report.claim.ClaimStatistic();
        claimStatistic0.setNumApproved((int) (short) 10);
        claimStatistic0.setNumUnknown(30);
        java.util.Map<java.lang.String, java.lang.Integer> strMap5 = null;
        claimStatistic0.setLicenseFileNameMap(strMap5);
        claimStatistic0.setNumUnknown(35);
        claimStatistic0.setNumUnApproved(4);
        java.util.Map<java.lang.String, java.lang.Integer> strMap11 = claimStatistic0.getLicenseFileNameMap();
        claimStatistic0.setNumGenerated((-28));
        java.util.Map<java.lang.String, java.lang.Integer> strMap14 = null;
        claimStatistic0.setDocumentCategoryMap(strMap14);
        java.util.Map<java.lang.String, java.lang.Integer> strMap16 = null;
        claimStatistic0.setDocumentCategoryMap(strMap16);
        java.util.Map<java.lang.String, java.lang.Integer> strMap18 = null;
        claimStatistic0.setDocumentCategoryMap(strMap18);
        org.junit.Assert.assertNull(strMap11);
    }

    @Test
    public void test12942() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest25.test12942");
        org.apache.rat.analysis.matchers.CopyrightMatcher copyrightMatcher3 = new org.apache.rat.analysis.matchers.CopyrightMatcher("AnyBuilder:\nMathcerRefBuilder: null\nAllBuilder:\nCopyright Builder: s:223f0aba-15d4-49e9-901e-5740c137aebf e:null o:null\nMathcerRefBuilder: null\nCopyright Builder: s:223f0aba-15d4-49e9-901e-5740c137aebf e:null o:null\nCopyright Builder: s:null e:null o:null\nCopyright Builder: s:null e:.cvsignore o:null\nCopyright Builder: s:null e:.cvsignore o:null\nCopyright Builder: s:OASIS e:null o:null\nAnyBuilder:\nMathcerRefBuilder: null\nCopyright Builder: s:null e:null o:null\nMathcerRefBuilder: null", "TextBuilder: 9340895e-47fd-411d-8...", "65e45");
    }

    @Test
    public void test12943() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest25.test12943");
        org.apache.rat.analysis.matchers.FullTextMatcher fullTextMatcher2 = new org.apache.rat.analysis.matchers.FullTextMatcher("notice", "3c840dc2-bef0-42b5-b26c-35a568d53a24");
        org.apache.rat.analysis.IHeaderMatcher.State state4 = fullTextMatcher2.matches("Copyright Builder: s:021187d7-27c2-4fd9-bc74-8cc00413ee52 e: o:null");
        fullTextMatcher2.reset();
        org.junit.Assert.assertTrue("'" + state4 + "' != '" + org.apache.rat.analysis.IHeaderMatcher.State.i + "'", state4.equals(org.apache.rat.analysis.IHeaderMatcher.State.i));
    }

    @Test
    public void test12944() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest25.test12944");
        org.apache.rat.utils.ReportingSet<java.lang.String> strSet0 = new org.apache.rat.utils.ReportingSet<java.lang.String>();
        org.apache.rat.license.ILicense[] iLicenseArray1 = new org.apache.rat.license.ILicense[] {};
        java.util.TreeSet<org.apache.rat.license.ILicense> iLicenseSet2 = new java.util.TreeSet<org.apache.rat.license.ILicense>();
        boolean boolean3 = java.util.Collections.addAll((java.util.Collection<org.apache.rat.license.ILicense>) iLicenseSet2, iLicenseArray1);
        java.lang.String[] strArray16 = new java.lang.String[] { "GPL2 ", "GPL1 ", "notice", "http://org/apache/rat/meta-data#LicenseFamilyName", "notice", "GPL2 ", "http://org/apache/rat/meta-data#LicenseFamilyName", "", "GPL2 ", "", "GPL1 ", "hi!" };
        java.util.ArrayList<java.lang.String> strList17 = new java.util.ArrayList<java.lang.String>();
        boolean boolean18 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strList17, strArray16);
        org.apache.rat.license.LicenseSetFactory licenseSetFactory19 = new org.apache.rat.license.LicenseSetFactory((java.util.SortedSet<org.apache.rat.license.ILicense>) iLicenseSet2, (java.util.Collection<java.lang.String>) strList17);
        org.apache.rat.license.LicenseSetFactory.LicenseFilter licenseFilter20 = org.apache.rat.license.LicenseSetFactory.LicenseFilter.all;
        java.util.SortedSet<org.apache.rat.license.ILicenseFamily> iLicenseFamilySet21 = licenseSetFactory19.getLicenseFamilies(licenseFilter20);
        org.apache.rat.policy.DefaultPolicy defaultPolicy22 = new org.apache.rat.policy.DefaultPolicy((java.util.Collection<org.apache.rat.license.ILicenseFamily>) iLicenseFamilySet21);
        boolean boolean23 = strSet0.containsAll((java.util.Collection<org.apache.rat.license.ILicenseFamily>) iLicenseFamilySet21);
        java.lang.Object[] objArray24 = strSet0.toArray();
        org.apache.rat.utils.ReportingSet<java.lang.String> strSet26 = strSet0.tailSet("f7c80ac5-f6d7-4a47-993b-a27ea27d7efb");
        int int27 = strSet0.size();
        // The following exception was thrown during execution in test generation
        try {
            java.lang.String str28 = strSet0.first();
            org.junit.Assert.fail("Expected exception of type java.util.NoSuchElementException; message: null");
        } catch (java.util.NoSuchElementException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(iLicenseArray1);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertNotNull(strArray16);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + true + "'", boolean18 == true);
        org.junit.Assert.assertTrue("'" + licenseFilter20 + "' != '" + org.apache.rat.license.LicenseSetFactory.LicenseFilter.all + "'", licenseFilter20.equals(org.apache.rat.license.LicenseSetFactory.LicenseFilter.all));
        org.junit.Assert.assertNotNull(iLicenseFamilySet21);
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + true + "'", boolean23 == true);
        org.junit.Assert.assertNotNull(objArray24);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray24), "[]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray24), "[]");
        org.junit.Assert.assertNotNull(strSet26);
        org.junit.Assert.assertTrue("'" + int27 + "' != '" + 0 + "'", int27 == 0);
    }

    @Test
    public void test12945() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest25.test12945");
        org.apache.rat.report.claim.ClaimStatistic claimStatistic0 = new org.apache.rat.report.claim.ClaimStatistic();
        claimStatistic0.setNumUnApproved((int) (short) 10);
        java.util.Map<java.lang.String, java.lang.Integer> strMap3 = null;
        claimStatistic0.setDocumentCategoryMap(strMap3);
        claimStatistic0.setNumUnknown((int) ' ');
        int int7 = claimStatistic0.getNumUnApproved();
        int int8 = claimStatistic0.getNumUnApproved();
        java.util.Map<java.lang.String, java.lang.Integer> strMap9 = null;
        claimStatistic0.setLicenseFileNameMap(strMap9);
        java.util.Map<java.lang.String, java.lang.Integer> strMap11 = null;
        claimStatistic0.setLicenseFileCodeMap(strMap11);
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 10 + "'", int7 == 10);
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + 10 + "'", int8 == 10);
    }

    @Test
    public void test12946() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest25.test12946");
        org.apache.rat.document.IDocumentAnalyser[] iDocumentAnalyserArray0 = new org.apache.rat.document.IDocumentAnalyser[] {};
        org.apache.rat.document.impl.util.DocumentAnalyserMultiplexer documentAnalyserMultiplexer1 = new org.apache.rat.document.impl.util.DocumentAnalyserMultiplexer(iDocumentAnalyserArray0);
        org.apache.rat.api.Document document2 = null;
        documentAnalyserMultiplexer1.analyse(document2);
        org.apache.rat.api.Document document4 = null;
        documentAnalyserMultiplexer1.analyse(document4);
        org.apache.rat.api.Document document6 = null;
        documentAnalyserMultiplexer1.analyse(document6);
        org.apache.rat.api.Document document8 = null;
        documentAnalyserMultiplexer1.analyse(document8);
        org.apache.rat.api.Document document10 = null;
        documentAnalyserMultiplexer1.analyse(document10);
        org.apache.rat.api.Document document12 = null;
        documentAnalyserMultiplexer1.analyse(document12);
        org.apache.rat.api.Document document14 = null;
        documentAnalyserMultiplexer1.analyse(document14);
        org.junit.Assert.assertNotNull(iDocumentAnalyserArray0);
    }

    @Test
    public void test12947() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest25.test12947");
        java.lang.String[] strArray5 = new java.lang.String[] { "http://org/apache/rat/meta-data#LicenseFamilyCategory", "Datum [ name ='http://org/apache/rat/meta-data#LicenseFamilyCategory',value ='GPL1  ']", "MANIFEST.MF", "AllBuilder:", "The MIT License" };
        org.apache.rat.utils.ReportingSet<java.lang.String> strSet6 = new org.apache.rat.utils.ReportingSet<java.lang.String>();
        boolean boolean7 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strSet6, strArray5);
        boolean boolean9 = strSet6.addIfNotPresent("http://org/apache/rat/meta-data#LicenseFamilyName");
        boolean boolean11 = strSet6.addIfNotPresent("ef7a8b13-64c3-4510-bb0c-dbf208e1e73f");
        java.util.function.Function<java.lang.String, java.lang.String> strFunction12 = null;
        org.apache.rat.utils.ReportingSet<java.lang.String> strSet13 = strSet6.setMsgFormat(strFunction12);
        java.util.SortedSet<org.apache.rat.license.ILicenseFamily> iLicenseFamilySet15 = org.apache.rat.license.LicenseFamilySetFactory.emptyLicenseFamilySet();
        org.apache.rat.license.ILicenseFamily iLicenseFamily16 = org.apache.rat.license.LicenseFamilySetFactory.search("http://org/apache/rat/meta-data", iLicenseFamilySet15);
        boolean boolean17 = strSet6.containsAll((java.util.Collection<org.apache.rat.license.ILicenseFamily>) iLicenseFamilySet15);
        org.apache.rat.utils.ReportingSet<java.lang.String> strSet19 = strSet6.tailSet("http://org/apache/rat/meta-data#HeaderCategory");
        org.apache.rat.license.ILicenseFamily[] iLicenseFamilyArray20 = new org.apache.rat.license.ILicenseFamily[] {};
        java.util.ArrayList<org.apache.rat.license.ILicenseFamily> iLicenseFamilyList21 = new java.util.ArrayList<org.apache.rat.license.ILicenseFamily>();
        boolean boolean22 = java.util.Collections.addAll((java.util.Collection<org.apache.rat.license.ILicenseFamily>) iLicenseFamilyList21, iLicenseFamilyArray20);
        org.apache.rat.policy.DefaultPolicy defaultPolicy23 = new org.apache.rat.policy.DefaultPolicy((java.util.Collection<org.apache.rat.license.ILicenseFamily>) iLicenseFamilyList21);
        java.util.SortedSet<org.apache.rat.license.ILicenseFamily> iLicenseFamilySet24 = defaultPolicy23.getApprovedLicenseNames();
        boolean boolean25 = strSet19.removeAll((java.util.Collection<org.apache.rat.license.ILicenseFamily>) iLicenseFamilySet24);
        org.apache.rat.utils.DefaultLog defaultLog26 = org.apache.rat.utils.DefaultLog.INSTANCE;
        org.apache.rat.license.ILicense.Builder builder27 = org.apache.rat.license.ILicense.builder();
        org.apache.rat.license.ILicense.Builder builder29 = builder27.setLicenseFamilyCategory("");
        org.apache.rat.analysis.matchers.CopyrightMatcher copyrightMatcher33 = new org.apache.rat.analysis.matchers.CopyrightMatcher("", "GPL1 ", "hi!");
        org.apache.rat.analysis.IHeaderMatcher.State state34 = copyrightMatcher33.finalizeState();
        org.apache.rat.license.ILicense.Builder builder35 = builder29.setMatcher((org.apache.rat.analysis.IHeaderMatcher) copyrightMatcher33);
        org.apache.rat.license.ILicense.Builder builder37 = builder35.setLicenseFamilyCategory("");
        defaultLog26.error((java.lang.Object) builder37);
        org.apache.rat.utils.Log.Level level39 = org.apache.rat.utils.Log.Level.INFO;
        defaultLog26.log(level39, "JAVA");
        org.apache.rat.report.claim.ClaimStatistic claimStatistic42 = new org.apache.rat.report.claim.ClaimStatistic();
        claimStatistic42.setNumApproved((int) (short) 10);
        claimStatistic42.setNumUnknown((int) '#');
        defaultLog26.error((java.lang.Object) '#');
        org.apache.rat.utils.ReportingSet<java.lang.String> strSet48 = strSet19.setLog((org.apache.rat.utils.Log) defaultLog26);
        org.apache.rat.utils.Log.Level level49 = org.apache.rat.utils.Log.Level.WARN;
        defaultLog26.log(level49, "1d5cdc49-c9ab-43d6-aa9d-24a42ff437aa");
        java.util.Collection<org.apache.rat.license.ILicense> iLicenseCollection52 = null;
        // The following exception was thrown during execution in test generation
        try {
            org.apache.rat.document.IDocumentAnalyser iDocumentAnalyser53 = org.apache.rat.analysis.DefaultAnalyserFactory.createDefaultAnalyser((org.apache.rat.utils.Log) defaultLog26, iLicenseCollection52);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(strArray5);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + true + "'", boolean7 == true);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + true + "'", boolean9 == true);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + true + "'", boolean11 == true);
        org.junit.Assert.assertNotNull(strSet13);
        org.junit.Assert.assertNotNull(iLicenseFamilySet15);
        org.junit.Assert.assertNull(iLicenseFamily16);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + true + "'", boolean17 == true);
        org.junit.Assert.assertNotNull(strSet19);
        org.junit.Assert.assertNotNull(iLicenseFamilyArray20);
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + false + "'", boolean22 == false);
        org.junit.Assert.assertNotNull(iLicenseFamilySet24);
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + false + "'", boolean25 == false);
        org.junit.Assert.assertNotNull(defaultLog26);
        org.junit.Assert.assertNotNull(builder27);
        org.junit.Assert.assertNotNull(builder29);
        org.junit.Assert.assertTrue("'" + state34 + "' != '" + org.apache.rat.analysis.IHeaderMatcher.State.f + "'", state34.equals(org.apache.rat.analysis.IHeaderMatcher.State.f));
        org.junit.Assert.assertNotNull(builder35);
        org.junit.Assert.assertNotNull(builder37);
        org.junit.Assert.assertTrue("'" + level39 + "' != '" + org.apache.rat.utils.Log.Level.INFO + "'", level39.equals(org.apache.rat.utils.Log.Level.INFO));
        org.junit.Assert.assertNotNull(strSet48);
        org.junit.Assert.assertTrue("'" + level49 + "' != '" + org.apache.rat.utils.Log.Level.WARN + "'", level49.equals(org.apache.rat.utils.Log.Level.WARN));
    }

    @Test
    public void test12948() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest25.test12948");
        org.apache.rat.utils.Log log0 = null;
        org.apache.rat.ReportConfiguration reportConfiguration1 = new org.apache.rat.ReportConfiguration(log0);
        org.apache.rat.report.claim.ClaimStatistic claimStatistic2 = org.apache.rat.Reporter.report(reportConfiguration1);
        org.apache.commons.io.function.IOSupplier<java.io.InputStream> inputStreamIOSupplier3 = reportConfiguration1.getStyleSheet();
        org.apache.rat.report.claim.ClaimStatistic claimStatistic4 = org.apache.rat.Reporter.report(reportConfiguration1);
        org.apache.rat.config.SourceCodeManagementSystems sourceCodeManagementSystems5 = org.apache.rat.config.SourceCodeManagementSystems.CVS;
        java.lang.String str6 = sourceCodeManagementSystems5.getIgnoreFile();
        boolean boolean7 = sourceCodeManagementSystems5.hasIgnoreFile();
        java.util.List<java.lang.String> strList8 = sourceCodeManagementSystems5.getExclusions();
        java.io.FilenameFilter filenameFilter9 = org.apache.rat.Report.parseExclusions(strList8);
        reportConfiguration1.addApprovedLicenseCategories((java.util.Collection<java.lang.String>) strList8);
        org.apache.rat.utils.Log log11 = null;
        org.apache.rat.ReportConfiguration reportConfiguration12 = new org.apache.rat.ReportConfiguration(log11);
        org.apache.rat.report.claim.ClaimStatistic claimStatistic13 = org.apache.rat.Reporter.report(reportConfiguration12);
        org.apache.rat.utils.Log log14 = null;
        org.apache.rat.ReportConfiguration reportConfiguration15 = new org.apache.rat.ReportConfiguration(log14);
        org.apache.rat.report.claim.ClaimStatistic claimStatistic16 = org.apache.rat.Reporter.report(reportConfiguration15);
        org.apache.rat.utils.ReportingSet.Options options17 = org.apache.rat.utils.ReportingSet.Options.OVERWRITE;
        reportConfiguration15.licenseDuplicateOption(options17);
        reportConfiguration12.familyDuplicateOption(options17);
        org.apache.commons.io.function.IOSupplier<java.io.PrintWriter> printWriterIOSupplier20 = reportConfiguration12.getWriter();
        boolean boolean21 = reportConfiguration12.isAddingLicensesForced();
        org.apache.rat.utils.Log log22 = null;
        org.apache.rat.ReportConfiguration reportConfiguration23 = new org.apache.rat.ReportConfiguration(log22);
        org.apache.rat.report.claim.ClaimStatistic claimStatistic24 = org.apache.rat.Reporter.report(reportConfiguration23);
        org.apache.commons.io.function.IOSupplier<java.io.OutputStream> outputStreamIOSupplier25 = reportConfiguration23.getOutput();
        reportConfiguration12.setOut(outputStreamIOSupplier25);
        reportConfiguration1.setOut(outputStreamIOSupplier25);
        org.apache.rat.license.ILicenseFamilyBuilder iLicenseFamilyBuilder28 = new org.apache.rat.license.ILicenseFamilyBuilder();
        java.lang.String str29 = iLicenseFamilyBuilder28.getCategory();
        org.apache.rat.license.ILicenseFamily.Builder builder31 = iLicenseFamilyBuilder28.setLicenseFamilyCategory("AL   ");
        org.apache.rat.license.ILicenseFamily.Builder builder33 = iLicenseFamilyBuilder28.setLicenseFamilyName("binary");
        org.apache.rat.license.ILicenseFamily.Builder builder35 = iLicenseFamilyBuilder28.setLicenseFamilyCategory("3c74a3ec-8235-4035-9db7-f9f475b48681");
        org.apache.rat.license.ILicenseFamily.Builder builder37 = builder35.setLicenseFamilyCategory("49ba0523-306f-4984-949f-9db17b9667d9");
        reportConfiguration1.addFamily(builder35);
        org.apache.rat.utils.DefaultLog defaultLog39 = org.apache.rat.utils.DefaultLog.INSTANCE;
        org.apache.rat.license.ILicense.Builder builder40 = org.apache.rat.license.ILicense.builder();
        org.apache.rat.license.ILicense.Builder builder42 = builder40.setLicenseFamilyCategory("");
        org.apache.rat.analysis.matchers.CopyrightMatcher copyrightMatcher46 = new org.apache.rat.analysis.matchers.CopyrightMatcher("", "GPL1 ", "hi!");
        org.apache.rat.analysis.IHeaderMatcher.State state47 = copyrightMatcher46.finalizeState();
        org.apache.rat.license.ILicense.Builder builder48 = builder42.setMatcher((org.apache.rat.analysis.IHeaderMatcher) copyrightMatcher46);
        org.apache.rat.license.ILicense.Builder builder50 = builder48.setLicenseFamilyCategory("");
        defaultLog39.error((java.lang.Object) builder50);
        org.apache.rat.utils.Log.Level level52 = defaultLog39.getLevel();
        org.apache.rat.utils.Log log53 = null;
        org.apache.rat.ReportConfiguration reportConfiguration54 = new org.apache.rat.ReportConfiguration(log53);
        reportConfiguration54.addApprovedLicenseCategory(".cvsignore");
        org.apache.rat.utils.Log.Level level57 = org.apache.rat.utils.Log.Level.ERROR;
        reportConfiguration54.logLicenseCollisions(level57);
        defaultLog39.log(level57, "AnyBuilder:");
        reportConfiguration1.logLicenseCollisions(level57);
        java.net.URL uRL62 = null;
        // The following exception was thrown during execution in test generation
        try {
            reportConfiguration1.setStyleSheet(uRL62);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: styleSheet file should not be null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNull(claimStatistic2);
        org.junit.Assert.assertNull(inputStreamIOSupplier3);
        org.junit.Assert.assertNull(claimStatistic4);
        org.junit.Assert.assertTrue("'" + sourceCodeManagementSystems5 + "' != '" + org.apache.rat.config.SourceCodeManagementSystems.CVS + "'", sourceCodeManagementSystems5.equals(org.apache.rat.config.SourceCodeManagementSystems.CVS));
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + ".cvsignore" + "'", str6, ".cvsignore");
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + true + "'", boolean7 == true);
        org.junit.Assert.assertNotNull(strList8);
        org.junit.Assert.assertNotNull(filenameFilter9);
        org.junit.Assert.assertNull(claimStatistic13);
        org.junit.Assert.assertNull(claimStatistic16);
        org.junit.Assert.assertTrue("'" + options17 + "' != '" + org.apache.rat.utils.ReportingSet.Options.OVERWRITE + "'", options17.equals(org.apache.rat.utils.ReportingSet.Options.OVERWRITE));
        org.junit.Assert.assertNotNull(printWriterIOSupplier20);
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + false + "'", boolean21 == false);
        org.junit.Assert.assertNull(claimStatistic24);
        org.junit.Assert.assertNotNull(outputStreamIOSupplier25);
        org.junit.Assert.assertNull(str29);
        org.junit.Assert.assertNotNull(builder31);
        org.junit.Assert.assertNotNull(builder33);
        org.junit.Assert.assertNotNull(builder35);
        org.junit.Assert.assertNotNull(builder37);
        org.junit.Assert.assertNotNull(defaultLog39);
        org.junit.Assert.assertNotNull(builder40);
        org.junit.Assert.assertNotNull(builder42);
        org.junit.Assert.assertTrue("'" + state47 + "' != '" + org.apache.rat.analysis.IHeaderMatcher.State.f + "'", state47.equals(org.apache.rat.analysis.IHeaderMatcher.State.f));
        org.junit.Assert.assertNotNull(builder48);
        org.junit.Assert.assertNotNull(builder50);
// flaky:         org.junit.Assert.assertTrue("'" + level52 + "' != '" + org.apache.rat.utils.Log.Level.ERROR + "'", level52.equals(org.apache.rat.utils.Log.Level.ERROR));
        org.junit.Assert.assertTrue("'" + level57 + "' != '" + org.apache.rat.utils.Log.Level.ERROR + "'", level57.equals(org.apache.rat.utils.Log.Level.ERROR));
    }

    @Test
    public void test12949() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest25.test12949");
        org.apache.rat.Defaults.Builder builder0 = org.apache.rat.Defaults.builder();
        org.apache.rat.Defaults defaults1 = builder0.build();
        org.apache.rat.Defaults.Builder builder2 = builder0.noDefault();
        org.apache.rat.Defaults.Builder builder4 = builder0.remove("AllBuilder:");
        org.apache.rat.Defaults.Builder builder6 = builder0.remove("GNU General Public License, version 2");
        org.apache.rat.Defaults.Builder builder8 = builder0.remove("NotBuilder: MathcerRefBuilder: null");
        org.apache.rat.Defaults.Builder builder9 = builder8.noDefault();
        org.apache.rat.Defaults.Builder builder10 = builder9.noDefault();
        java.io.File file11 = null;
        // The following exception was thrown during execution in test generation
        try {
            org.apache.rat.Defaults.Builder builder12 = builder10.add(file11);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(builder0);
        org.junit.Assert.assertNotNull(defaults1);
        org.junit.Assert.assertNotNull(builder2);
        org.junit.Assert.assertNotNull(builder4);
        org.junit.Assert.assertNotNull(builder6);
        org.junit.Assert.assertNotNull(builder8);
        org.junit.Assert.assertNotNull(builder9);
        org.junit.Assert.assertNotNull(builder10);
    }

    @Test
    public void test12950() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest25.test12950");
        org.apache.rat.Defaults.Builder builder0 = org.apache.rat.Defaults.builder();
        org.apache.rat.Defaults defaults1 = builder0.build();
        org.apache.rat.Defaults defaults2 = builder0.build();
        org.apache.rat.Defaults.Builder builder3 = builder0.noDefault();
        org.apache.rat.Defaults defaults4 = builder3.build();
        java.net.URL uRL5 = null;
        org.apache.rat.Defaults.Builder builder6 = builder3.remove(uRL5);
        org.apache.rat.Defaults defaults7 = builder3.build();
        java.net.URL uRL8 = null;
        org.apache.rat.Defaults.Builder builder9 = builder3.remove(uRL8);
        org.junit.Assert.assertNotNull(builder0);
        org.junit.Assert.assertNotNull(defaults1);
        org.junit.Assert.assertNotNull(defaults2);
        org.junit.Assert.assertNotNull(builder3);
        org.junit.Assert.assertNotNull(defaults4);
        org.junit.Assert.assertNotNull(builder6);
        org.junit.Assert.assertNotNull(defaults7);
        org.junit.Assert.assertNotNull(builder9);
    }

    @Test
    public void test12951() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest25.test12951");
        java.util.regex.Pattern pattern2 = null;
        org.apache.rat.analysis.matchers.SimpleRegexMatcher simpleRegexMatcher3 = new org.apache.rat.analysis.matchers.SimpleRegexMatcher("", pattern2);
        org.apache.rat.analysis.matchers.NotMatcher notMatcher4 = new org.apache.rat.analysis.matchers.NotMatcher("GNU General Public License, version 2", (org.apache.rat.analysis.IHeaderMatcher) simpleRegexMatcher3);
        org.apache.rat.analysis.IHeaderMatcher.State state5 = notMatcher4.finalizeState();
        java.lang.String str6 = notMatcher4.toString();
        org.apache.rat.analysis.IHeaderMatcher.State state7 = notMatcher4.currentState();
        org.apache.rat.analysis.IHeaderMatcher.State state8 = notMatcher4.finalizeState();
        org.apache.rat.analysis.matchers.NotMatcher notMatcher9 = new org.apache.rat.analysis.matchers.NotMatcher((org.apache.rat.analysis.IHeaderMatcher) notMatcher4);
        java.lang.String str10 = notMatcher9.toString();
        org.junit.Assert.assertTrue("'" + state5 + "' != '" + org.apache.rat.analysis.IHeaderMatcher.State.t + "'", state5.equals(org.apache.rat.analysis.IHeaderMatcher.State.t));
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "GNU General Public License, version 2" + "'", str6, "GNU General Public License, version 2");
        org.junit.Assert.assertTrue("'" + state7 + "' != '" + org.apache.rat.analysis.IHeaderMatcher.State.t + "'", state7.equals(org.apache.rat.analysis.IHeaderMatcher.State.t));
        org.junit.Assert.assertTrue("'" + state8 + "' != '" + org.apache.rat.analysis.IHeaderMatcher.State.t + "'", state8.equals(org.apache.rat.analysis.IHeaderMatcher.State.t));
// flaky:         org.junit.Assert.assertEquals("'" + str10 + "' != '" + "172b9aff-1377-4728-858b-34f5d07e8e34" + "'", str10, "172b9aff-1377-4728-858b-34f5d07e8e34");
    }

    @Test
    public void test12952() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest25.test12952");
        org.apache.rat.configuration.builders.AllBuilder allBuilder0 = new org.apache.rat.configuration.builders.AllBuilder();
        java.lang.String str1 = allBuilder0.toString();
        java.util.List<org.apache.rat.analysis.IHeaderMatcher> iHeaderMatcherList2 = allBuilder0.getChildren();
        org.apache.rat.configuration.builders.MatcherRefBuilder matcherRefBuilder3 = new org.apache.rat.configuration.builders.MatcherRefBuilder();
        org.apache.rat.configuration.builders.AbstractBuilder abstractBuilder4 = allBuilder0.add((org.apache.rat.analysis.IHeaderMatcher.Builder) matcherRefBuilder3);
        org.apache.rat.configuration.builders.MatcherRefBuilder matcherRefBuilder6 = matcherRefBuilder3.setRefId("6486879f-fc81-4b57-aec7-c4c77d540c30");
        java.lang.String str7 = matcherRefBuilder3.toString();
        org.junit.Assert.assertEquals("'" + str1 + "' != '" + "AllBuilder:" + "'", str1, "AllBuilder:");
        org.junit.Assert.assertNotNull(iHeaderMatcherList2);
        org.junit.Assert.assertNotNull(abstractBuilder4);
        org.junit.Assert.assertNotNull(matcherRefBuilder6);
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "MathcerRefBuilder: 6486879f-fc81-4b57-aec7-c4c77d540c30" + "'", str7, "MathcerRefBuilder: 6486879f-fc81-4b57-aec7-c4c77d540c30");
    }

    @Test
    public void test12953() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest25.test12953");
        org.apache.rat.analysis.license.FullTextMatchingLicense fullTextMatchingLicense0 = new org.apache.rat.analysis.license.FullTextMatchingLicense();
        fullTextMatchingLicense0.setLicenseFamilyName("hi!");
        java.lang.String str3 = fullTextMatchingLicense0.getLicenseFamilyCategory();
        java.lang.String str4 = fullTextMatchingLicense0.getLicenseFamilyName();
        fullTextMatchingLicense0.setLicenseFamilyName("SpdxBuilder: null");
        fullTextMatchingLicense0.setLicenseFamilyCategory("TMF");
        fullTextMatchingLicense0.setFullText("W3C  ");
        fullTextMatchingLicense0.setFullText("PLAIN-RAT.XSL");
        org.apache.rat.license.ILicense.Builder builder13 = fullTextMatchingLicense0.getLicense();
        org.apache.rat.license.ILicense.Builder builder14 = fullTextMatchingLicense0.getLicense();
        fullTextMatchingLicense0.setLicenseFamilyCategory("89662180a89f497b9301227d494d2bae");
        fullTextMatchingLicense0.setLicenseFamilyCategory("SpdxBuilder: Copyright Builder: s:.cvsignore e:null o:null");
        org.junit.Assert.assertNull(str3);
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "hi!" + "'", str4, "hi!");
        org.junit.Assert.assertNotNull(builder13);
        org.junit.Assert.assertNotNull(builder14);
    }

    @Test
    public void test12954() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest25.test12954");
        org.apache.rat.analysis.matchers.FullTextMatcher fullTextMatcher1 = new org.apache.rat.analysis.matchers.FullTextMatcher("CDDL1");
        fullTextMatcher1.reset();
    }

    @Test
    public void test12955() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest25.test12955");
        org.apache.rat.report.claim.ClaimStatistic claimStatistic0 = new org.apache.rat.report.claim.ClaimStatistic();
        claimStatistic0.setNumApproved((int) (short) 10);
        java.util.Map<java.lang.String, java.lang.Integer> strMap3 = null;
        claimStatistic0.setLicenseFileCodeMap(strMap3);
        java.util.Map<java.lang.String, java.lang.Integer> strMap5 = claimStatistic0.getLicenseFileCodeMap();
        java.util.Map<java.lang.String, java.lang.Integer> strMap6 = null;
        claimStatistic0.setLicenseFileNameMap(strMap6);
        claimStatistic0.setNumUnknown(8);
        claimStatistic0.setNumUnknown(33);
        java.util.Map<java.lang.String, java.lang.Integer> strMap12 = null;
        claimStatistic0.setLicenseFileNameMap(strMap12);
        java.util.Map<java.lang.String, java.lang.Integer> strMap14 = claimStatistic0.getLicenseFileNameMap();
        org.junit.Assert.assertNull(strMap5);
        org.junit.Assert.assertNull(strMap14);
    }

    @Test
    public void test12956() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest25.test12956");
        java.io.Writer writer0 = null;
        org.apache.rat.report.xml.writer.impl.base.XmlWriter xmlWriter1 = new org.apache.rat.report.xml.writer.impl.base.XmlWriter(writer0);
        org.apache.rat.report.claim.impl.xml.SimpleXmlClaimReporter simpleXmlClaimReporter2 = new org.apache.rat.report.claim.impl.xml.SimpleXmlClaimReporter((org.apache.rat.report.xml.writer.IXmlWriter) xmlWriter1);
        org.apache.rat.report.claim.impl.xml.SimpleXmlClaimReporter simpleXmlClaimReporter3 = new org.apache.rat.report.claim.impl.xml.SimpleXmlClaimReporter((org.apache.rat.report.xml.writer.IXmlWriter) xmlWriter1);
        org.apache.rat.report.claim.impl.xml.SimpleXmlClaimReporter simpleXmlClaimReporter4 = new org.apache.rat.report.claim.impl.xml.SimpleXmlClaimReporter((org.apache.rat.report.xml.writer.IXmlWriter) xmlWriter1);
        org.apache.rat.report.claim.impl.xml.SimpleXmlClaimReporter simpleXmlClaimReporter5 = new org.apache.rat.report.claim.impl.xml.SimpleXmlClaimReporter((org.apache.rat.report.xml.writer.IXmlWriter) xmlWriter1);
        org.apache.rat.report.claim.impl.xml.SimpleXmlClaimReporter simpleXmlClaimReporter6 = new org.apache.rat.report.claim.impl.xml.SimpleXmlClaimReporter((org.apache.rat.report.xml.writer.IXmlWriter) xmlWriter1);
        org.apache.rat.report.claim.impl.xml.SimpleXmlClaimReporter simpleXmlClaimReporter7 = new org.apache.rat.report.claim.impl.xml.SimpleXmlClaimReporter((org.apache.rat.report.xml.writer.IXmlWriter) xmlWriter1);
        org.apache.rat.report.claim.impl.xml.SimpleXmlClaimReporter simpleXmlClaimReporter8 = new org.apache.rat.report.claim.impl.xml.SimpleXmlClaimReporter((org.apache.rat.report.xml.writer.IXmlWriter) xmlWriter1);
        org.apache.rat.report.claim.impl.xml.SimpleXmlClaimReporter simpleXmlClaimReporter9 = new org.apache.rat.report.claim.impl.xml.SimpleXmlClaimReporter((org.apache.rat.report.xml.writer.IXmlWriter) xmlWriter1);
        org.apache.rat.report.claim.impl.xml.SimpleXmlClaimReporter simpleXmlClaimReporter10 = new org.apache.rat.report.claim.impl.xml.SimpleXmlClaimReporter((org.apache.rat.report.xml.writer.IXmlWriter) xmlWriter1);
        org.apache.rat.report.claim.impl.xml.SimpleXmlClaimReporter simpleXmlClaimReporter11 = new org.apache.rat.report.claim.impl.xml.SimpleXmlClaimReporter((org.apache.rat.report.xml.writer.IXmlWriter) xmlWriter1);
        org.apache.rat.report.claim.impl.xml.SimpleXmlClaimReporter simpleXmlClaimReporter12 = new org.apache.rat.report.claim.impl.xml.SimpleXmlClaimReporter((org.apache.rat.report.xml.writer.IXmlWriter) xmlWriter1);
        org.apache.rat.report.claim.impl.xml.SimpleXmlClaimReporter simpleXmlClaimReporter13 = new org.apache.rat.report.claim.impl.xml.SimpleXmlClaimReporter((org.apache.rat.report.xml.writer.IXmlWriter) xmlWriter1);
        org.apache.rat.report.claim.impl.xml.SimpleXmlClaimReporter simpleXmlClaimReporter14 = new org.apache.rat.report.claim.impl.xml.SimpleXmlClaimReporter((org.apache.rat.report.xml.writer.IXmlWriter) xmlWriter1);
        // The following exception was thrown during execution in test generation
        try {
            org.apache.rat.report.xml.writer.IXmlWriter iXmlWriter16 = xmlWriter1.content((java.lang.CharSequence) "Copyright Builder: s:.cvsignore e:standard o:W3C  ");
            org.junit.Assert.fail("Expected exception of type org.apache.rat.report.xml.writer.OperationNotAllowedException; message: An element must be opened before content can be written.");
        } catch (org.apache.rat.report.xml.writer.OperationNotAllowedException e) {
            // Expected exception.
        }
    }

    @Test
    public void test12957() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest25.test12957");
        org.apache.rat.document.ToNameTransformer toNameTransformer0 = new org.apache.rat.document.ToNameTransformer();
        org.apache.rat.report.claim.ClaimStatistic claimStatistic1 = new org.apache.rat.report.claim.ClaimStatistic();
        claimStatistic1.setNumApproved((int) (short) 10);
        claimStatistic1.setNumUnknown(30);
        java.lang.Object obj6 = toNameTransformer0.transform((java.lang.Object) claimStatistic1);
        int int7 = claimStatistic1.getNumUnknown();
        java.util.Map<java.lang.String, java.lang.Integer> strMap8 = claimStatistic1.getLicenseFileNameMap();
        java.util.Map<java.lang.String, java.lang.Integer> strMap9 = null;
        claimStatistic1.setLicenseFileNameMap(strMap9);
        java.util.Map<java.lang.String, java.lang.Integer> strMap11 = null;
        claimStatistic1.setLicenseFileNameMap(strMap11);
        int int13 = claimStatistic1.getNumGenerated();
        org.junit.Assert.assertNull(obj6);
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 30 + "'", int7 == 30);
        org.junit.Assert.assertNull(strMap8);
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + 0 + "'", int13 == 0);
    }

    @Test
    public void test12958() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest25.test12958");
        org.apache.rat.report.claim.ClaimStatistic claimStatistic0 = new org.apache.rat.report.claim.ClaimStatistic();
        claimStatistic0.setNumApproved((int) (short) 10);
        java.util.Map<java.lang.String, java.lang.Integer> strMap3 = null;
        claimStatistic0.setDocumentCategoryMap(strMap3);
        java.util.Map<java.lang.String, java.lang.Integer> strMap5 = claimStatistic0.getLicenseFileNameMap();
        claimStatistic0.setNumUnknown((int) (byte) -1);
        java.util.Map<java.lang.String, java.lang.Integer> strMap8 = claimStatistic0.getLicenseFileCodeMap();
        java.util.Map<java.lang.String, java.lang.Integer> strMap9 = null;
        claimStatistic0.setLicenseFileNameMap(strMap9);
        int int11 = claimStatistic0.getNumUnApproved();
        int int12 = claimStatistic0.getNumUnApproved();
        org.junit.Assert.assertNull(strMap5);
        org.junit.Assert.assertNull(strMap8);
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 0 + "'", int11 == 0);
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + 0 + "'", int12 == 0);
    }

    @Test
    public void test12959() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest25.test12959");
        org.apache.rat.utils.Log log0 = null;
        org.apache.rat.ReportConfiguration reportConfiguration1 = new org.apache.rat.ReportConfiguration(log0);
        org.apache.rat.report.claim.ClaimStatistic claimStatistic2 = org.apache.rat.Reporter.report(reportConfiguration1);
        org.apache.commons.io.function.IOSupplier<java.io.OutputStream> outputStreamIOSupplier3 = reportConfiguration1.getOutput();
        org.apache.rat.license.ILicense iLicense4 = null;
        reportConfiguration1.addLicense(iLicense4);
        reportConfiguration1.removeApprovedLicenseCategory("F FALSE");
        boolean boolean8 = reportConfiguration1.isAddingLicenses();
        org.apache.commons.io.filefilter.IOFileFilter iOFileFilter9 = null;
        reportConfiguration1.setDirectoryFilter(iOFileFilter9);
        java.lang.String[] strArray16 = new java.lang.String[] { "http://org/apache/rat/meta-data#LicenseFamilyCategory", "Datum [ name ='http://org/apache/rat/meta-data#LicenseFamilyCategory',value ='GPL1  ']", "MANIFEST.MF", "AllBuilder:", "The MIT License" };
        org.apache.rat.utils.ReportingSet<java.lang.String> strSet17 = new org.apache.rat.utils.ReportingSet<java.lang.String>();
        boolean boolean18 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strSet17, strArray16);
        boolean boolean20 = strSet17.addIfNotPresent("http://org/apache/rat/meta-data#LicenseFamilyName");
        java.util.SortedSet<org.apache.rat.license.ILicenseFamily> iLicenseFamilySet21 = org.apache.rat.license.LicenseFamilySetFactory.emptyLicenseFamilySet();
        boolean boolean22 = strSet17.removeAll((java.util.Collection<org.apache.rat.license.ILicenseFamily>) iLicenseFamilySet21);
        org.apache.rat.utils.Log log23 = null;
        org.apache.rat.ReportConfiguration reportConfiguration24 = new org.apache.rat.ReportConfiguration(log23);
        org.apache.rat.license.ILicenseFamily[] iLicenseFamilyArray25 = new org.apache.rat.license.ILicenseFamily[] {};
        java.util.ArrayList<org.apache.rat.license.ILicenseFamily> iLicenseFamilyList26 = new java.util.ArrayList<org.apache.rat.license.ILicenseFamily>();
        boolean boolean27 = java.util.Collections.addAll((java.util.Collection<org.apache.rat.license.ILicenseFamily>) iLicenseFamilyList26, iLicenseFamilyArray25);
        reportConfiguration24.addFamilies((java.util.Collection<org.apache.rat.license.ILicenseFamily>) iLicenseFamilyList26);
        org.apache.rat.utils.Log.Level level29 = org.apache.rat.utils.Log.Level.ERROR;
        reportConfiguration24.logLicenseCollisions(level29);
        org.apache.rat.report.IReportable iReportable31 = reportConfiguration24.getReportable();
        org.apache.rat.report.IReportable iReportable32 = reportConfiguration24.getReportable();
        org.apache.rat.utils.ReportingSet.Options options33 = org.apache.rat.utils.ReportingSet.Options.OVERWRITE;
        reportConfiguration24.licenseDuplicateOption(options33);
        org.apache.rat.utils.ReportingSet<java.lang.String> strSet35 = strSet17.setDuplicateOption(options33);
        reportConfiguration1.familyDuplicateOption(options33);
        org.apache.rat.utils.Log log37 = null;
        org.apache.rat.ReportConfiguration reportConfiguration38 = new org.apache.rat.ReportConfiguration(log37);
        org.apache.rat.report.claim.ClaimStatistic claimStatistic39 = org.apache.rat.Reporter.report(reportConfiguration38);
        org.apache.rat.license.ILicense[] iLicenseArray40 = new org.apache.rat.license.ILicense[] {};
        java.util.TreeSet<org.apache.rat.license.ILicense> iLicenseSet41 = new java.util.TreeSet<org.apache.rat.license.ILicense>();
        boolean boolean42 = java.util.Collections.addAll((java.util.Collection<org.apache.rat.license.ILicense>) iLicenseSet41, iLicenseArray40);
        java.lang.String[] strArray55 = new java.lang.String[] { "GPL2 ", "GPL1 ", "notice", "http://org/apache/rat/meta-data#LicenseFamilyName", "notice", "GPL2 ", "http://org/apache/rat/meta-data#LicenseFamilyName", "", "GPL2 ", "", "GPL1 ", "hi!" };
        java.util.ArrayList<java.lang.String> strList56 = new java.util.ArrayList<java.lang.String>();
        boolean boolean57 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strList56, strArray55);
        org.apache.rat.license.LicenseSetFactory licenseSetFactory58 = new org.apache.rat.license.LicenseSetFactory((java.util.SortedSet<org.apache.rat.license.ILicense>) iLicenseSet41, (java.util.Collection<java.lang.String>) strList56);
        org.apache.rat.utils.Log log59 = null;
        org.apache.rat.ReportConfiguration reportConfiguration60 = new org.apache.rat.ReportConfiguration(log59);
        java.io.FilenameFilter filenameFilter61 = reportConfiguration60.getInputFileFilter();
        org.apache.rat.license.LicenseSetFactory.LicenseFilter licenseFilter62 = org.apache.rat.license.LicenseSetFactory.LicenseFilter.all;
        java.util.SortedSet<org.apache.rat.license.ILicense> iLicenseSet63 = reportConfiguration60.getLicenses(licenseFilter62);
        org.apache.rat.config.AddLicenseHeaders addLicenseHeaders64 = org.apache.rat.config.AddLicenseHeaders.FALSE;
        reportConfiguration60.setAddLicenseHeaders(addLicenseHeaders64);
        org.apache.rat.utils.Log log66 = null;
        org.apache.rat.ReportConfiguration reportConfiguration67 = new org.apache.rat.ReportConfiguration(log66);
        org.apache.rat.report.claim.ClaimStatistic claimStatistic68 = org.apache.rat.Reporter.report(reportConfiguration67);
        org.apache.rat.license.LicenseSetFactory.LicenseFilter licenseFilter69 = org.apache.rat.license.LicenseSetFactory.LicenseFilter.all;
        org.apache.rat.Reporter.listLicenses(reportConfiguration67, licenseFilter69);
        org.apache.rat.Reporter.listLicenses(reportConfiguration60, licenseFilter69);
        org.apache.rat.utils.Log log72 = null;
        org.apache.rat.ReportConfiguration reportConfiguration73 = new org.apache.rat.ReportConfiguration(log72);
        java.io.FilenameFilter filenameFilter74 = reportConfiguration73.getInputFileFilter();
        org.apache.rat.license.LicenseSetFactory.LicenseFilter licenseFilter75 = org.apache.rat.license.LicenseSetFactory.LicenseFilter.all;
        java.util.SortedSet<org.apache.rat.license.ILicense> iLicenseSet76 = reportConfiguration73.getLicenses(licenseFilter75);
        org.apache.rat.config.AddLicenseHeaders addLicenseHeaders77 = org.apache.rat.config.AddLicenseHeaders.FALSE;
        reportConfiguration73.setAddLicenseHeaders(addLicenseHeaders77);
        org.apache.rat.utils.Log log79 = null;
        org.apache.rat.ReportConfiguration reportConfiguration80 = new org.apache.rat.ReportConfiguration(log79);
        org.apache.rat.report.claim.ClaimStatistic claimStatistic81 = org.apache.rat.Reporter.report(reportConfiguration80);
        org.apache.rat.license.LicenseSetFactory.LicenseFilter licenseFilter82 = org.apache.rat.license.LicenseSetFactory.LicenseFilter.all;
        org.apache.rat.Reporter.listLicenses(reportConfiguration80, licenseFilter82);
        org.apache.rat.Reporter.listLicenses(reportConfiguration73, licenseFilter82);
        org.apache.rat.Reporter.listLicenses(reportConfiguration60, licenseFilter82);
        java.util.SortedSet<org.apache.rat.license.ILicense> iLicenseSet86 = licenseSetFactory58.getLicenses(licenseFilter82);
        reportConfiguration38.addLicensesIfNotPresent((java.util.Collection<org.apache.rat.license.ILicense>) iLicenseSet86);
        reportConfiguration1.addLicenses((java.util.Collection<org.apache.rat.license.ILicense>) iLicenseSet86);
        org.junit.Assert.assertNull(claimStatistic2);
        org.junit.Assert.assertNotNull(outputStreamIOSupplier3);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertNotNull(strArray16);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + true + "'", boolean18 == true);
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + true + "'", boolean20 == true);
        org.junit.Assert.assertNotNull(iLicenseFamilySet21);
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + false + "'", boolean22 == false);
        org.junit.Assert.assertNotNull(iLicenseFamilyArray25);
        org.junit.Assert.assertTrue("'" + boolean27 + "' != '" + false + "'", boolean27 == false);
        org.junit.Assert.assertTrue("'" + level29 + "' != '" + org.apache.rat.utils.Log.Level.ERROR + "'", level29.equals(org.apache.rat.utils.Log.Level.ERROR));
        org.junit.Assert.assertNull(iReportable31);
        org.junit.Assert.assertNull(iReportable32);
        org.junit.Assert.assertTrue("'" + options33 + "' != '" + org.apache.rat.utils.ReportingSet.Options.OVERWRITE + "'", options33.equals(org.apache.rat.utils.ReportingSet.Options.OVERWRITE));
        org.junit.Assert.assertNotNull(strSet35);
        org.junit.Assert.assertNull(claimStatistic39);
        org.junit.Assert.assertNotNull(iLicenseArray40);
        org.junit.Assert.assertTrue("'" + boolean42 + "' != '" + false + "'", boolean42 == false);
        org.junit.Assert.assertNotNull(strArray55);
        org.junit.Assert.assertTrue("'" + boolean57 + "' != '" + true + "'", boolean57 == true);
        org.junit.Assert.assertNull(filenameFilter61);
        org.junit.Assert.assertTrue("'" + licenseFilter62 + "' != '" + org.apache.rat.license.LicenseSetFactory.LicenseFilter.all + "'", licenseFilter62.equals(org.apache.rat.license.LicenseSetFactory.LicenseFilter.all));
        org.junit.Assert.assertNotNull(iLicenseSet63);
        org.junit.Assert.assertTrue("'" + addLicenseHeaders64 + "' != '" + org.apache.rat.config.AddLicenseHeaders.FALSE + "'", addLicenseHeaders64.equals(org.apache.rat.config.AddLicenseHeaders.FALSE));
        org.junit.Assert.assertNull(claimStatistic68);
        org.junit.Assert.assertTrue("'" + licenseFilter69 + "' != '" + org.apache.rat.license.LicenseSetFactory.LicenseFilter.all + "'", licenseFilter69.equals(org.apache.rat.license.LicenseSetFactory.LicenseFilter.all));
        org.junit.Assert.assertNull(filenameFilter74);
        org.junit.Assert.assertTrue("'" + licenseFilter75 + "' != '" + org.apache.rat.license.LicenseSetFactory.LicenseFilter.all + "'", licenseFilter75.equals(org.apache.rat.license.LicenseSetFactory.LicenseFilter.all));
        org.junit.Assert.assertNotNull(iLicenseSet76);
        org.junit.Assert.assertTrue("'" + addLicenseHeaders77 + "' != '" + org.apache.rat.config.AddLicenseHeaders.FALSE + "'", addLicenseHeaders77.equals(org.apache.rat.config.AddLicenseHeaders.FALSE));
        org.junit.Assert.assertNull(claimStatistic81);
        org.junit.Assert.assertTrue("'" + licenseFilter82 + "' != '" + org.apache.rat.license.LicenseSetFactory.LicenseFilter.all + "'", licenseFilter82.equals(org.apache.rat.license.LicenseSetFactory.LicenseFilter.all));
        org.junit.Assert.assertNotNull(iLicenseSet86);
    }

    @Test
    public void test12960() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest25.test12960");
        org.apache.rat.analysis.license.FullTextMatchingLicense fullTextMatchingLicense0 = new org.apache.rat.analysis.license.FullTextMatchingLicense();
        fullTextMatchingLicense0.setLicenseFamilyName("hi!");
        java.lang.String str3 = fullTextMatchingLicense0.getLicenseFamilyCategory();
        java.lang.String str4 = fullTextMatchingLicense0.getLicenseFamilyCategory();
        fullTextMatchingLicense0.setLicenseFamilyCategory("DOJO ");
        java.lang.String str7 = fullTextMatchingLicense0.getNotes();
        fullTextMatchingLicense0.setLicenseFamilyCategory("da5fe944-291b-4f2c-8b38-a63be532e7b8");
        org.junit.Assert.assertNull(str3);
        org.junit.Assert.assertNull(str4);
        org.junit.Assert.assertNull(str7);
    }

    @Test
    public void test12961() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest25.test12961");
        org.apache.rat.utils.Log log0 = null;
        org.apache.rat.ReportConfiguration reportConfiguration1 = new org.apache.rat.ReportConfiguration(log0);
        org.apache.rat.report.claim.ClaimStatistic claimStatistic2 = org.apache.rat.Reporter.report(reportConfiguration1);
        reportConfiguration1.addApprovedLicenseCategory("Copyright Builder: s:null e:null o:null");
        org.apache.commons.io.function.IOSupplier<java.io.InputStream> inputStreamIOSupplier5 = reportConfiguration1.getStyleSheet();
        org.apache.rat.utils.Log log6 = reportConfiguration1.getLog();
        org.junit.Assert.assertNull(claimStatistic2);
        org.junit.Assert.assertNull(inputStreamIOSupplier5);
        org.junit.Assert.assertNull(log6);
    }

    @Test
    public void test12962() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest25.test12962");
        org.apache.rat.configuration.Format format0 = org.apache.rat.configuration.Format.XML;
        org.apache.rat.configuration.LicenseReader licenseReader1 = format0.licenseReader();
        org.apache.rat.configuration.LicenseReader licenseReader2 = format0.licenseReader();
        org.apache.rat.configuration.LicenseReader licenseReader3 = format0.licenseReader();
        org.apache.rat.configuration.LicenseReader licenseReader4 = format0.licenseReader();
        org.apache.rat.configuration.LicenseReader licenseReader5 = format0.licenseReader();
        java.util.SortedSet<java.lang.String> strSet6 = licenseReader5.approvedLicenseId();
        org.junit.Assert.assertTrue("'" + format0 + "' != '" + org.apache.rat.configuration.Format.XML + "'", format0.equals(org.apache.rat.configuration.Format.XML));
        org.junit.Assert.assertNotNull(licenseReader1);
        org.junit.Assert.assertNotNull(licenseReader2);
        org.junit.Assert.assertNotNull(licenseReader3);
        org.junit.Assert.assertNotNull(licenseReader4);
        org.junit.Assert.assertNotNull(licenseReader5);
        org.junit.Assert.assertNotNull(strSet6);
    }

    @Test
    public void test12963() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest25.test12963");
        org.apache.rat.report.claim.ClaimStatistic claimStatistic0 = new org.apache.rat.report.claim.ClaimStatistic();
        claimStatistic0.setNumApproved((int) (short) 10);
        java.util.Map<java.lang.String, java.lang.Integer> strMap3 = null;
        claimStatistic0.setLicenseFileCodeMap(strMap3);
        int int5 = claimStatistic0.getNumUnknown();
        claimStatistic0.setNumUnApproved((int) (byte) 100);
        java.util.Map<java.lang.String, java.lang.Integer> strMap8 = claimStatistic0.getDocumentCategoryMap();
        int int9 = claimStatistic0.getNumUnknown();
        int int10 = claimStatistic0.getNumUnknown();
        java.util.Map<java.lang.String, java.lang.Integer> strMap11 = claimStatistic0.getLicenseFileCodeMap();
        claimStatistic0.setNumUnApproved(7);
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 0 + "'", int5 == 0);
        org.junit.Assert.assertNull(strMap8);
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + 0 + "'", int9 == 0);
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + 0 + "'", int10 == 0);
        org.junit.Assert.assertNull(strMap11);
    }

    @Test
    public void test12964() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest25.test12964");
        java.lang.String[] strArray5 = new java.lang.String[] { "http://org/apache/rat/meta-data#LicenseFamilyCategory", "Datum [ name ='http://org/apache/rat/meta-data#LicenseFamilyCategory',value ='GPL1  ']", "MANIFEST.MF", "AllBuilder:", "The MIT License" };
        org.apache.rat.utils.ReportingSet<java.lang.String> strSet6 = new org.apache.rat.utils.ReportingSet<java.lang.String>();
        boolean boolean7 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strSet6, strArray5);
        boolean boolean9 = strSet6.addIfNotPresent("http://org/apache/rat/meta-data#LicenseFamilyName");
        boolean boolean11 = strSet6.addIfNotPresent("ef7a8b13-64c3-4510-bb0c-dbf208e1e73f");
        java.util.stream.Stream<java.lang.String> strStream12 = strSet6.stream();
        org.apache.rat.utils.DefaultLog defaultLog13 = org.apache.rat.utils.DefaultLog.INSTANCE;
        org.apache.rat.utils.Log log14 = null;
        org.apache.rat.ReportConfiguration reportConfiguration15 = new org.apache.rat.ReportConfiguration(log14);
        reportConfiguration15.addApprovedLicenseCategory(".cvsignore");
        org.apache.rat.utils.Log.Level level18 = org.apache.rat.utils.Log.Level.ERROR;
        reportConfiguration15.logFamilyCollisions(level18);
        defaultLog13.setLevel(level18);
        org.apache.rat.utils.ReportingSet<java.lang.String> strSet21 = strSet6.setLogLevel(level18);
        org.apache.rat.utils.ReportingSet<java.lang.String> strSet23 = strSet6.headSet("d4148d3a-edbc-4672-b347-0fa619553f91");
        org.apache.rat.utils.Log log24 = null;
        org.apache.rat.ReportConfiguration reportConfiguration25 = new org.apache.rat.ReportConfiguration(log24);
        org.apache.rat.report.claim.ClaimStatistic claimStatistic26 = org.apache.rat.Reporter.report(reportConfiguration25);
        org.apache.rat.report.IReportable iReportable27 = null;
        reportConfiguration25.setReportable(iReportable27);
        org.apache.rat.utils.Log log29 = null;
        org.apache.rat.ReportConfiguration reportConfiguration30 = new org.apache.rat.ReportConfiguration(log29);
        java.io.FilenameFilter filenameFilter31 = reportConfiguration30.getInputFileFilter();
        org.apache.rat.license.LicenseSetFactory.LicenseFilter licenseFilter32 = org.apache.rat.license.LicenseSetFactory.LicenseFilter.all;
        java.util.SortedSet<org.apache.rat.license.ILicense> iLicenseSet33 = reportConfiguration30.getLicenses(licenseFilter32);
        org.apache.rat.config.AddLicenseHeaders addLicenseHeaders34 = org.apache.rat.config.AddLicenseHeaders.FALSE;
        reportConfiguration30.setAddLicenseHeaders(addLicenseHeaders34);
        org.apache.rat.utils.Log log36 = null;
        org.apache.rat.ReportConfiguration reportConfiguration37 = new org.apache.rat.ReportConfiguration(log36);
        org.apache.rat.report.claim.ClaimStatistic claimStatistic38 = org.apache.rat.Reporter.report(reportConfiguration37);
        org.apache.rat.license.LicenseSetFactory.LicenseFilter licenseFilter39 = org.apache.rat.license.LicenseSetFactory.LicenseFilter.all;
        org.apache.rat.Reporter.listLicenses(reportConfiguration37, licenseFilter39);
        org.apache.rat.Reporter.listLicenses(reportConfiguration30, licenseFilter39);
        org.apache.rat.utils.Log log42 = null;
        org.apache.rat.ReportConfiguration reportConfiguration43 = new org.apache.rat.ReportConfiguration(log42);
        java.io.FilenameFilter filenameFilter44 = reportConfiguration43.getInputFileFilter();
        org.apache.rat.license.LicenseSetFactory.LicenseFilter licenseFilter45 = org.apache.rat.license.LicenseSetFactory.LicenseFilter.all;
        java.util.SortedSet<org.apache.rat.license.ILicense> iLicenseSet46 = reportConfiguration43.getLicenses(licenseFilter45);
        org.apache.rat.config.AddLicenseHeaders addLicenseHeaders47 = org.apache.rat.config.AddLicenseHeaders.FALSE;
        reportConfiguration43.setAddLicenseHeaders(addLicenseHeaders47);
        org.apache.rat.utils.Log log49 = null;
        org.apache.rat.ReportConfiguration reportConfiguration50 = new org.apache.rat.ReportConfiguration(log49);
        org.apache.rat.report.claim.ClaimStatistic claimStatistic51 = org.apache.rat.Reporter.report(reportConfiguration50);
        org.apache.rat.license.LicenseSetFactory.LicenseFilter licenseFilter52 = org.apache.rat.license.LicenseSetFactory.LicenseFilter.all;
        org.apache.rat.Reporter.listLicenses(reportConfiguration50, licenseFilter52);
        org.apache.rat.Reporter.listLicenses(reportConfiguration43, licenseFilter52);
        org.apache.rat.Reporter.listLicenses(reportConfiguration30, licenseFilter52);
        org.apache.rat.utils.Log log56 = null;
        org.apache.rat.ReportConfiguration reportConfiguration57 = new org.apache.rat.ReportConfiguration(log56);
        org.apache.commons.io.function.IOSupplier<java.io.OutputStream> outputStreamIOSupplier58 = reportConfiguration57.getOutput();
        reportConfiguration30.setOut(outputStreamIOSupplier58);
        org.apache.rat.utils.Log log60 = null;
        org.apache.rat.ReportConfiguration reportConfiguration61 = new org.apache.rat.ReportConfiguration(log60);
        org.apache.rat.report.claim.ClaimStatistic claimStatistic62 = org.apache.rat.Reporter.report(reportConfiguration61);
        org.apache.rat.utils.Log log63 = null;
        org.apache.rat.ReportConfiguration reportConfiguration64 = new org.apache.rat.ReportConfiguration(log63);
        org.apache.rat.report.claim.ClaimStatistic claimStatistic65 = org.apache.rat.Reporter.report(reportConfiguration64);
        org.apache.rat.utils.ReportingSet.Options options66 = org.apache.rat.utils.ReportingSet.Options.OVERWRITE;
        reportConfiguration64.licenseDuplicateOption(options66);
        reportConfiguration61.familyDuplicateOption(options66);
        reportConfiguration30.licenseDuplicateOption(options66);
        reportConfiguration25.familyDuplicateOption(options66);
        org.apache.rat.utils.ReportingSet<java.lang.String> strSet71 = strSet6.setDuplicateOption(options66);
        boolean boolean73 = strSet71.contains((java.lang.Object) "d4148d3a-edbc-4672-b347-0fa619553f91");
        java.util.Iterator<java.lang.String> strItor74 = strSet71.iterator();
        java.lang.String str75 = strSet71.first();
        org.junit.Assert.assertNotNull(strArray5);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + true + "'", boolean7 == true);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + true + "'", boolean9 == true);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + true + "'", boolean11 == true);
        org.junit.Assert.assertNotNull(strStream12);
        org.junit.Assert.assertNotNull(defaultLog13);
        org.junit.Assert.assertTrue("'" + level18 + "' != '" + org.apache.rat.utils.Log.Level.ERROR + "'", level18.equals(org.apache.rat.utils.Log.Level.ERROR));
        org.junit.Assert.assertNotNull(strSet21);
        org.junit.Assert.assertNotNull(strSet23);
        org.junit.Assert.assertNull(claimStatistic26);
        org.junit.Assert.assertNull(filenameFilter31);
        org.junit.Assert.assertTrue("'" + licenseFilter32 + "' != '" + org.apache.rat.license.LicenseSetFactory.LicenseFilter.all + "'", licenseFilter32.equals(org.apache.rat.license.LicenseSetFactory.LicenseFilter.all));
        org.junit.Assert.assertNotNull(iLicenseSet33);
        org.junit.Assert.assertTrue("'" + addLicenseHeaders34 + "' != '" + org.apache.rat.config.AddLicenseHeaders.FALSE + "'", addLicenseHeaders34.equals(org.apache.rat.config.AddLicenseHeaders.FALSE));
        org.junit.Assert.assertNull(claimStatistic38);
        org.junit.Assert.assertTrue("'" + licenseFilter39 + "' != '" + org.apache.rat.license.LicenseSetFactory.LicenseFilter.all + "'", licenseFilter39.equals(org.apache.rat.license.LicenseSetFactory.LicenseFilter.all));
        org.junit.Assert.assertNull(filenameFilter44);
        org.junit.Assert.assertTrue("'" + licenseFilter45 + "' != '" + org.apache.rat.license.LicenseSetFactory.LicenseFilter.all + "'", licenseFilter45.equals(org.apache.rat.license.LicenseSetFactory.LicenseFilter.all));
        org.junit.Assert.assertNotNull(iLicenseSet46);
        org.junit.Assert.assertTrue("'" + addLicenseHeaders47 + "' != '" + org.apache.rat.config.AddLicenseHeaders.FALSE + "'", addLicenseHeaders47.equals(org.apache.rat.config.AddLicenseHeaders.FALSE));
        org.junit.Assert.assertNull(claimStatistic51);
        org.junit.Assert.assertTrue("'" + licenseFilter52 + "' != '" + org.apache.rat.license.LicenseSetFactory.LicenseFilter.all + "'", licenseFilter52.equals(org.apache.rat.license.LicenseSetFactory.LicenseFilter.all));
        org.junit.Assert.assertNotNull(outputStreamIOSupplier58);
        org.junit.Assert.assertNull(claimStatistic62);
        org.junit.Assert.assertNull(claimStatistic65);
        org.junit.Assert.assertTrue("'" + options66 + "' != '" + org.apache.rat.utils.ReportingSet.Options.OVERWRITE + "'", options66.equals(org.apache.rat.utils.ReportingSet.Options.OVERWRITE));
        org.junit.Assert.assertNotNull(strSet71);
        org.junit.Assert.assertTrue("'" + boolean73 + "' != '" + false + "'", boolean73 == false);
        org.junit.Assert.assertNotNull(strItor74);
        org.junit.Assert.assertEquals("'" + str75 + "' != '" + "AllBuilder:" + "'", str75, "AllBuilder:");
    }

    @Test
    public void test12965() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest25.test12965");
        org.apache.rat.analysis.matchers.SimpleTextMatcher simpleTextMatcher2 = new org.apache.rat.analysis.matchers.SimpleTextMatcher("eba9cdef-527a-48ca-947b-897e2e06ea31", "67eb9");
        org.apache.rat.analysis.IHeaderMatcher.State state3 = simpleTextMatcher2.finalizeState();
        org.junit.Assert.assertTrue("'" + state3 + "' != '" + org.apache.rat.analysis.IHeaderMatcher.State.f + "'", state3.equals(org.apache.rat.analysis.IHeaderMatcher.State.f));
    }

    @Test
    public void test12966() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest25.test12966");
        boolean boolean1 = org.apache.rat.document.impl.guesser.BinaryGuesser.isAudio("SpdxBuilder: 03F7B314-6887-4617-9C7E-BF1600B331CD");
        org.junit.Assert.assertTrue("'" + boolean1 + "' != '" + false + "'", boolean1 == false);
    }

    @Test
    public void test12967() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest25.test12967");
        org.apache.rat.utils.Log log0 = null;
        org.apache.rat.ReportConfiguration reportConfiguration1 = new org.apache.rat.ReportConfiguration(log0);
        reportConfiguration1.addApprovedLicenseCategory(".cvsignore");
        org.apache.rat.utils.Log.Level level4 = org.apache.rat.utils.Log.Level.ERROR;
        reportConfiguration1.logFamilyCollisions(level4);
        org.apache.commons.io.function.IOSupplier<java.io.OutputStream> outputStreamIOSupplier6 = reportConfiguration1.getOutput();
        org.apache.rat.utils.Log log7 = null;
        org.apache.rat.ReportConfiguration reportConfiguration8 = new org.apache.rat.ReportConfiguration(log7);
        reportConfiguration8.addApprovedLicenseCategory(".cvsignore");
        org.apache.rat.utils.Log log11 = null;
        org.apache.rat.ReportConfiguration reportConfiguration12 = new org.apache.rat.ReportConfiguration(log11);
        java.io.FilenameFilter filenameFilter13 = reportConfiguration12.getInputFileFilter();
        org.apache.rat.license.LicenseSetFactory.LicenseFilter licenseFilter14 = org.apache.rat.license.LicenseSetFactory.LicenseFilter.all;
        java.util.SortedSet<org.apache.rat.license.ILicense> iLicenseSet15 = reportConfiguration12.getLicenses(licenseFilter14);
        reportConfiguration8.addLicensesIfNotPresent((java.util.Collection<org.apache.rat.license.ILicense>) iLicenseSet15);
        java.io.FilenameFilter filenameFilter17 = reportConfiguration8.getInputFileFilter();
        org.apache.rat.utils.Log log18 = null;
        org.apache.rat.ReportConfiguration reportConfiguration19 = new org.apache.rat.ReportConfiguration(log18);
        java.io.FilenameFilter filenameFilter20 = reportConfiguration19.getInputFileFilter();
        org.apache.rat.license.LicenseSetFactory.LicenseFilter licenseFilter21 = org.apache.rat.license.LicenseSetFactory.LicenseFilter.all;
        java.util.SortedSet<org.apache.rat.license.ILicense> iLicenseSet22 = reportConfiguration19.getLicenses(licenseFilter21);
        org.apache.rat.config.AddLicenseHeaders addLicenseHeaders23 = org.apache.rat.config.AddLicenseHeaders.FALSE;
        reportConfiguration19.setAddLicenseHeaders(addLicenseHeaders23);
        org.apache.rat.utils.Log log25 = null;
        org.apache.rat.ReportConfiguration reportConfiguration26 = new org.apache.rat.ReportConfiguration(log25);
        org.apache.rat.report.claim.ClaimStatistic claimStatistic27 = org.apache.rat.Reporter.report(reportConfiguration26);
        org.apache.rat.license.LicenseSetFactory.LicenseFilter licenseFilter28 = org.apache.rat.license.LicenseSetFactory.LicenseFilter.all;
        org.apache.rat.Reporter.listLicenses(reportConfiguration26, licenseFilter28);
        org.apache.rat.Reporter.listLicenses(reportConfiguration19, licenseFilter28);
        org.apache.rat.utils.Log log31 = null;
        org.apache.rat.ReportConfiguration reportConfiguration32 = new org.apache.rat.ReportConfiguration(log31);
        java.io.FilenameFilter filenameFilter33 = reportConfiguration32.getInputFileFilter();
        org.apache.rat.license.LicenseSetFactory.LicenseFilter licenseFilter34 = org.apache.rat.license.LicenseSetFactory.LicenseFilter.all;
        java.util.SortedSet<org.apache.rat.license.ILicense> iLicenseSet35 = reportConfiguration32.getLicenses(licenseFilter34);
        org.apache.rat.config.AddLicenseHeaders addLicenseHeaders36 = org.apache.rat.config.AddLicenseHeaders.FALSE;
        reportConfiguration32.setAddLicenseHeaders(addLicenseHeaders36);
        org.apache.rat.utils.Log log38 = null;
        org.apache.rat.ReportConfiguration reportConfiguration39 = new org.apache.rat.ReportConfiguration(log38);
        org.apache.rat.report.claim.ClaimStatistic claimStatistic40 = org.apache.rat.Reporter.report(reportConfiguration39);
        org.apache.rat.license.LicenseSetFactory.LicenseFilter licenseFilter41 = org.apache.rat.license.LicenseSetFactory.LicenseFilter.all;
        org.apache.rat.Reporter.listLicenses(reportConfiguration39, licenseFilter41);
        org.apache.rat.Reporter.listLicenses(reportConfiguration32, licenseFilter41);
        java.util.SortedSet<org.apache.rat.license.ILicenseFamily> iLicenseFamilySet44 = reportConfiguration19.getLicenseFamilies(licenseFilter41);
        org.apache.rat.Reporter.listLicenseFamilies(reportConfiguration8, licenseFilter41);
        java.util.SortedSet<org.apache.rat.license.ILicenseFamily> iLicenseFamilySet46 = reportConfiguration1.getLicenseFamilies(licenseFilter41);
        java.util.Collection<java.lang.String> strCollection47 = null;
        org.apache.rat.license.LicenseFamilySetFactory licenseFamilySetFactory48 = new org.apache.rat.license.LicenseFamilySetFactory(iLicenseFamilySet46, strCollection47);
        org.apache.rat.policy.DefaultPolicy defaultPolicy49 = new org.apache.rat.policy.DefaultPolicy((java.util.Collection<org.apache.rat.license.ILicenseFamily>) iLicenseFamilySet46);
        org.apache.rat.api.Document document50 = null;
        defaultPolicy49.analyse(document50);
        java.util.SortedSet<org.apache.rat.license.ILicenseFamily> iLicenseFamilySet52 = defaultPolicy49.getApprovedLicenseNames();
        org.apache.rat.api.Document document53 = null;
        defaultPolicy49.analyse(document53);
        org.junit.Assert.assertTrue("'" + level4 + "' != '" + org.apache.rat.utils.Log.Level.ERROR + "'", level4.equals(org.apache.rat.utils.Log.Level.ERROR));
        org.junit.Assert.assertNotNull(outputStreamIOSupplier6);
        org.junit.Assert.assertNull(filenameFilter13);
        org.junit.Assert.assertTrue("'" + licenseFilter14 + "' != '" + org.apache.rat.license.LicenseSetFactory.LicenseFilter.all + "'", licenseFilter14.equals(org.apache.rat.license.LicenseSetFactory.LicenseFilter.all));
        org.junit.Assert.assertNotNull(iLicenseSet15);
        org.junit.Assert.assertNull(filenameFilter17);
        org.junit.Assert.assertNull(filenameFilter20);
        org.junit.Assert.assertTrue("'" + licenseFilter21 + "' != '" + org.apache.rat.license.LicenseSetFactory.LicenseFilter.all + "'", licenseFilter21.equals(org.apache.rat.license.LicenseSetFactory.LicenseFilter.all));
        org.junit.Assert.assertNotNull(iLicenseSet22);
        org.junit.Assert.assertTrue("'" + addLicenseHeaders23 + "' != '" + org.apache.rat.config.AddLicenseHeaders.FALSE + "'", addLicenseHeaders23.equals(org.apache.rat.config.AddLicenseHeaders.FALSE));
        org.junit.Assert.assertNull(claimStatistic27);
        org.junit.Assert.assertTrue("'" + licenseFilter28 + "' != '" + org.apache.rat.license.LicenseSetFactory.LicenseFilter.all + "'", licenseFilter28.equals(org.apache.rat.license.LicenseSetFactory.LicenseFilter.all));
        org.junit.Assert.assertNull(filenameFilter33);
        org.junit.Assert.assertTrue("'" + licenseFilter34 + "' != '" + org.apache.rat.license.LicenseSetFactory.LicenseFilter.all + "'", licenseFilter34.equals(org.apache.rat.license.LicenseSetFactory.LicenseFilter.all));
        org.junit.Assert.assertNotNull(iLicenseSet35);
        org.junit.Assert.assertTrue("'" + addLicenseHeaders36 + "' != '" + org.apache.rat.config.AddLicenseHeaders.FALSE + "'", addLicenseHeaders36.equals(org.apache.rat.config.AddLicenseHeaders.FALSE));
        org.junit.Assert.assertNull(claimStatistic40);
        org.junit.Assert.assertTrue("'" + licenseFilter41 + "' != '" + org.apache.rat.license.LicenseSetFactory.LicenseFilter.all + "'", licenseFilter41.equals(org.apache.rat.license.LicenseSetFactory.LicenseFilter.all));
        org.junit.Assert.assertNotNull(iLicenseFamilySet44);
        org.junit.Assert.assertNotNull(iLicenseFamilySet46);
        org.junit.Assert.assertNotNull(iLicenseFamilySet52);
    }

    @Test
    public void test12968() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest25.test12968");
        org.apache.rat.license.ILicense[] iLicenseArray1 = new org.apache.rat.license.ILicense[] {};
        java.util.TreeSet<org.apache.rat.license.ILicense> iLicenseSet2 = new java.util.TreeSet<org.apache.rat.license.ILicense>();
        boolean boolean3 = java.util.Collections.addAll((java.util.Collection<org.apache.rat.license.ILicense>) iLicenseSet2, iLicenseArray1);
        java.lang.String[] strArray16 = new java.lang.String[] { "GPL2 ", "GPL1 ", "notice", "http://org/apache/rat/meta-data#LicenseFamilyName", "notice", "GPL2 ", "http://org/apache/rat/meta-data#LicenseFamilyName", "", "GPL2 ", "", "GPL1 ", "hi!" };
        java.util.ArrayList<java.lang.String> strList17 = new java.util.ArrayList<java.lang.String>();
        boolean boolean18 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strList17, strArray16);
        org.apache.rat.license.LicenseSetFactory licenseSetFactory19 = new org.apache.rat.license.LicenseSetFactory((java.util.SortedSet<org.apache.rat.license.ILicense>) iLicenseSet2, (java.util.Collection<java.lang.String>) strList17);
        org.apache.rat.license.LicenseSetFactory.LicenseFilter licenseFilter20 = org.apache.rat.license.LicenseSetFactory.LicenseFilter.all;
        java.util.SortedSet<org.apache.rat.license.ILicenseFamily> iLicenseFamilySet21 = licenseSetFactory19.getLicenseFamilies(licenseFilter20);
        org.apache.rat.license.ILicense[] iLicenseArray22 = new org.apache.rat.license.ILicense[] {};
        java.util.TreeSet<org.apache.rat.license.ILicense> iLicenseSet23 = new java.util.TreeSet<org.apache.rat.license.ILicense>();
        boolean boolean24 = java.util.Collections.addAll((java.util.Collection<org.apache.rat.license.ILicense>) iLicenseSet23, iLicenseArray22);
        java.lang.String[] strArray37 = new java.lang.String[] { "GPL2 ", "GPL1 ", "notice", "http://org/apache/rat/meta-data#LicenseFamilyName", "notice", "GPL2 ", "http://org/apache/rat/meta-data#LicenseFamilyName", "", "GPL2 ", "", "GPL1 ", "hi!" };
        java.util.ArrayList<java.lang.String> strList38 = new java.util.ArrayList<java.lang.String>();
        boolean boolean39 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strList38, strArray37);
        org.apache.rat.license.LicenseSetFactory licenseSetFactory40 = new org.apache.rat.license.LicenseSetFactory((java.util.SortedSet<org.apache.rat.license.ILicense>) iLicenseSet23, (java.util.Collection<java.lang.String>) strList38);
        org.apache.rat.utils.Log log41 = null;
        org.apache.rat.ReportConfiguration reportConfiguration42 = new org.apache.rat.ReportConfiguration(log41);
        java.io.FilenameFilter filenameFilter43 = reportConfiguration42.getInputFileFilter();
        org.apache.rat.license.LicenseSetFactory.LicenseFilter licenseFilter44 = org.apache.rat.license.LicenseSetFactory.LicenseFilter.all;
        java.util.SortedSet<org.apache.rat.license.ILicense> iLicenseSet45 = reportConfiguration42.getLicenses(licenseFilter44);
        org.apache.rat.config.AddLicenseHeaders addLicenseHeaders46 = org.apache.rat.config.AddLicenseHeaders.FALSE;
        reportConfiguration42.setAddLicenseHeaders(addLicenseHeaders46);
        org.apache.rat.utils.Log log48 = null;
        org.apache.rat.ReportConfiguration reportConfiguration49 = new org.apache.rat.ReportConfiguration(log48);
        org.apache.rat.report.claim.ClaimStatistic claimStatistic50 = org.apache.rat.Reporter.report(reportConfiguration49);
        org.apache.rat.license.LicenseSetFactory.LicenseFilter licenseFilter51 = org.apache.rat.license.LicenseSetFactory.LicenseFilter.all;
        org.apache.rat.Reporter.listLicenses(reportConfiguration49, licenseFilter51);
        org.apache.rat.Reporter.listLicenses(reportConfiguration42, licenseFilter51);
        org.apache.rat.utils.Log log54 = null;
        org.apache.rat.ReportConfiguration reportConfiguration55 = new org.apache.rat.ReportConfiguration(log54);
        java.io.FilenameFilter filenameFilter56 = reportConfiguration55.getInputFileFilter();
        org.apache.rat.license.LicenseSetFactory.LicenseFilter licenseFilter57 = org.apache.rat.license.LicenseSetFactory.LicenseFilter.all;
        java.util.SortedSet<org.apache.rat.license.ILicense> iLicenseSet58 = reportConfiguration55.getLicenses(licenseFilter57);
        org.apache.rat.config.AddLicenseHeaders addLicenseHeaders59 = org.apache.rat.config.AddLicenseHeaders.FALSE;
        reportConfiguration55.setAddLicenseHeaders(addLicenseHeaders59);
        org.apache.rat.utils.Log log61 = null;
        org.apache.rat.ReportConfiguration reportConfiguration62 = new org.apache.rat.ReportConfiguration(log61);
        org.apache.rat.report.claim.ClaimStatistic claimStatistic63 = org.apache.rat.Reporter.report(reportConfiguration62);
        org.apache.rat.license.LicenseSetFactory.LicenseFilter licenseFilter64 = org.apache.rat.license.LicenseSetFactory.LicenseFilter.all;
        org.apache.rat.Reporter.listLicenses(reportConfiguration62, licenseFilter64);
        org.apache.rat.Reporter.listLicenses(reportConfiguration55, licenseFilter64);
        org.apache.rat.Reporter.listLicenses(reportConfiguration42, licenseFilter64);
        java.util.SortedSet<org.apache.rat.license.ILicense> iLicenseSet68 = licenseSetFactory40.getLicenses(licenseFilter64);
        java.util.SortedSet<org.apache.rat.license.ILicenseFamily> iLicenseFamilySet69 = licenseSetFactory19.getLicenseFamilies(licenseFilter64);
        org.apache.rat.policy.DefaultPolicy defaultPolicy70 = new org.apache.rat.policy.DefaultPolicy((java.util.Collection<org.apache.rat.license.ILicenseFamily>) iLicenseFamilySet69);
        org.apache.rat.api.Document document71 = null;
        defaultPolicy70.analyse(document71);
        java.util.SortedSet<org.apache.rat.license.ILicenseFamily> iLicenseFamilySet73 = defaultPolicy70.getApprovedLicenseNames();
        org.apache.rat.policy.DefaultPolicy defaultPolicy74 = new org.apache.rat.policy.DefaultPolicy((java.util.Collection<org.apache.rat.license.ILicenseFamily>) iLicenseFamilySet73);
        org.apache.rat.api.Document document75 = null;
        defaultPolicy74.analyse(document75);
        org.apache.rat.analysis.license.FullTextMatchingLicense fullTextMatchingLicense77 = new org.apache.rat.analysis.license.FullTextMatchingLicense();
        fullTextMatchingLicense77.setLicenseFamilyName("hi!");
        java.lang.String str80 = fullTextMatchingLicense77.getLicenseFamilyCategory();
        java.lang.String str81 = fullTextMatchingLicense77.getLicenseFamilyName();
        fullTextMatchingLicense77.setLicenseFamilyName("SpdxBuilder: null");
        fullTextMatchingLicense77.setLicenseFamilyCategory("TMF");
        fullTextMatchingLicense77.setFullText("W3C  ");
        java.lang.String str88 = fullTextMatchingLicense77.getLicenseFamilyCategory();
        fullTextMatchingLicense77.setLicenseFamilyCategory("http://org/apache/rat/meta-data#ApprovedLicense");
        org.apache.rat.license.ILicenseFamily iLicenseFamily91 = fullTextMatchingLicense77.getLicenseFamily();
        defaultPolicy74.add(iLicenseFamily91);
        java.util.SortedSet<org.apache.rat.license.ILicenseFamily> iLicenseFamilySet93 = defaultPolicy74.getApprovedLicenseNames();
        org.apache.rat.license.ILicenseFamily iLicenseFamily94 = org.apache.rat.license.LicenseFamilySetFactory.search("Copyright Builder: s:null e:64868 o:Copyright Builder: s:org/a e:standard o:W3C  ", iLicenseFamilySet93);
        org.junit.Assert.assertNotNull(iLicenseArray1);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertNotNull(strArray16);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + true + "'", boolean18 == true);
        org.junit.Assert.assertTrue("'" + licenseFilter20 + "' != '" + org.apache.rat.license.LicenseSetFactory.LicenseFilter.all + "'", licenseFilter20.equals(org.apache.rat.license.LicenseSetFactory.LicenseFilter.all));
        org.junit.Assert.assertNotNull(iLicenseFamilySet21);
        org.junit.Assert.assertNotNull(iLicenseArray22);
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + false + "'", boolean24 == false);
        org.junit.Assert.assertNotNull(strArray37);
        org.junit.Assert.assertTrue("'" + boolean39 + "' != '" + true + "'", boolean39 == true);
        org.junit.Assert.assertNull(filenameFilter43);
        org.junit.Assert.assertTrue("'" + licenseFilter44 + "' != '" + org.apache.rat.license.LicenseSetFactory.LicenseFilter.all + "'", licenseFilter44.equals(org.apache.rat.license.LicenseSetFactory.LicenseFilter.all));
        org.junit.Assert.assertNotNull(iLicenseSet45);
        org.junit.Assert.assertTrue("'" + addLicenseHeaders46 + "' != '" + org.apache.rat.config.AddLicenseHeaders.FALSE + "'", addLicenseHeaders46.equals(org.apache.rat.config.AddLicenseHeaders.FALSE));
        org.junit.Assert.assertNull(claimStatistic50);
        org.junit.Assert.assertTrue("'" + licenseFilter51 + "' != '" + org.apache.rat.license.LicenseSetFactory.LicenseFilter.all + "'", licenseFilter51.equals(org.apache.rat.license.LicenseSetFactory.LicenseFilter.all));
        org.junit.Assert.assertNull(filenameFilter56);
        org.junit.Assert.assertTrue("'" + licenseFilter57 + "' != '" + org.apache.rat.license.LicenseSetFactory.LicenseFilter.all + "'", licenseFilter57.equals(org.apache.rat.license.LicenseSetFactory.LicenseFilter.all));
        org.junit.Assert.assertNotNull(iLicenseSet58);
        org.junit.Assert.assertTrue("'" + addLicenseHeaders59 + "' != '" + org.apache.rat.config.AddLicenseHeaders.FALSE + "'", addLicenseHeaders59.equals(org.apache.rat.config.AddLicenseHeaders.FALSE));
        org.junit.Assert.assertNull(claimStatistic63);
        org.junit.Assert.assertTrue("'" + licenseFilter64 + "' != '" + org.apache.rat.license.LicenseSetFactory.LicenseFilter.all + "'", licenseFilter64.equals(org.apache.rat.license.LicenseSetFactory.LicenseFilter.all));
        org.junit.Assert.assertNotNull(iLicenseSet68);
        org.junit.Assert.assertNotNull(iLicenseFamilySet69);
        org.junit.Assert.assertNotNull(iLicenseFamilySet73);
        org.junit.Assert.assertNull(str80);
        org.junit.Assert.assertEquals("'" + str81 + "' != '" + "hi!" + "'", str81, "hi!");
        org.junit.Assert.assertEquals("'" + str88 + "' != '" + "TMF" + "'", str88, "TMF");
        org.junit.Assert.assertNotNull(iLicenseFamily91);
        org.junit.Assert.assertNotNull(iLicenseFamilySet93);
        org.junit.Assert.assertNull(iLicenseFamily94);
    }

    @Test
    public void test12969() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest25.test12969");
        org.apache.rat.analysis.license.FullTextMatchingLicense fullTextMatchingLicense0 = new org.apache.rat.analysis.license.FullTextMatchingLicense();
        fullTextMatchingLicense0.setLicenseFamilyName("hi!");
        java.lang.String str3 = fullTextMatchingLicense0.getLicenseFamilyCategory();
        java.lang.String str4 = fullTextMatchingLicense0.getLicenseFamilyName();
        fullTextMatchingLicense0.setLicenseFamilyName("http://org/apache/rat/meta-data#LicenseFamilyName");
        java.lang.String str7 = fullTextMatchingLicense0.getLicenseFamilyCategory();
        java.lang.String str8 = fullTextMatchingLicense0.getLicenseFamilyCategory();
        fullTextMatchingLicense0.setLicenseFamilyCategory("641dafc1-13c3-45d4-8272-f36f10392c53");
        java.lang.String str11 = fullTextMatchingLicense0.getLicenseFamilyName();
        org.apache.rat.license.ILicenseFamily iLicenseFamily12 = fullTextMatchingLicense0.getLicenseFamily();
        org.apache.rat.analysis.license.FullTextMatchingLicense fullTextMatchingLicense13 = new org.apache.rat.analysis.license.FullTextMatchingLicense();
        fullTextMatchingLicense13.setLicenseFamilyName("hi!");
        fullTextMatchingLicense13.setLicenseFamilyCategory("binary");
        org.apache.rat.license.ILicenseFamily iLicenseFamily18 = fullTextMatchingLicense13.getLicenseFamily();
        java.lang.String str19 = iLicenseFamily18.getFamilyCategory();
        org.apache.rat.license.ILicenseFamilyBuilder iLicenseFamilyBuilder20 = new org.apache.rat.license.ILicenseFamilyBuilder();
        org.apache.rat.license.ILicenseFamily.Builder builder22 = iLicenseFamilyBuilder20.setLicenseFamilyCategory("Modified BSD License");
        org.apache.rat.license.ILicenseFamily.Builder builder24 = iLicenseFamilyBuilder20.setLicenseFamilyCategory("6486879f-fc81-4b57-aec7-c4c77d540c30");
        org.apache.rat.license.ILicenseFamily.Builder builder26 = iLicenseFamilyBuilder20.setLicenseFamilyName("MathcerRefBuilder: ");
        org.apache.rat.license.ILicenseFamily.Builder builder28 = iLicenseFamilyBuilder20.setLicenseFamilyName("Copyright Builder: s:6481fb19-38f0-43f5-ab95-caf84a069ee1 e:null o:null");
        org.apache.rat.license.ILicenseFamily iLicenseFamily29 = iLicenseFamilyBuilder20.build();
        int int30 = iLicenseFamily18.compareTo(iLicenseFamily29);
        org.apache.rat.utils.Log log31 = null;
        org.apache.rat.ReportConfiguration reportConfiguration32 = new org.apache.rat.ReportConfiguration(log31);
        java.io.FilenameFilter filenameFilter33 = reportConfiguration32.getInputFileFilter();
        org.apache.rat.license.LicenseSetFactory.LicenseFilter licenseFilter34 = org.apache.rat.license.LicenseSetFactory.LicenseFilter.all;
        java.util.SortedSet<org.apache.rat.license.ILicense> iLicenseSet35 = reportConfiguration32.getLicenses(licenseFilter34);
        org.apache.rat.config.AddLicenseHeaders addLicenseHeaders36 = org.apache.rat.config.AddLicenseHeaders.FALSE;
        reportConfiguration32.setAddLicenseHeaders(addLicenseHeaders36);
        org.apache.rat.utils.Log log38 = null;
        org.apache.rat.ReportConfiguration reportConfiguration39 = new org.apache.rat.ReportConfiguration(log38);
        org.apache.rat.report.claim.ClaimStatistic claimStatistic40 = org.apache.rat.Reporter.report(reportConfiguration39);
        org.apache.rat.license.LicenseSetFactory.LicenseFilter licenseFilter41 = org.apache.rat.license.LicenseSetFactory.LicenseFilter.all;
        org.apache.rat.Reporter.listLicenses(reportConfiguration39, licenseFilter41);
        org.apache.rat.Reporter.listLicenses(reportConfiguration32, licenseFilter41);
        org.apache.rat.utils.Log log44 = null;
        org.apache.rat.ReportConfiguration reportConfiguration45 = new org.apache.rat.ReportConfiguration(log44);
        java.io.FilenameFilter filenameFilter46 = reportConfiguration45.getInputFileFilter();
        org.apache.rat.license.LicenseSetFactory.LicenseFilter licenseFilter47 = org.apache.rat.license.LicenseSetFactory.LicenseFilter.all;
        java.util.SortedSet<org.apache.rat.license.ILicense> iLicenseSet48 = reportConfiguration45.getLicenses(licenseFilter47);
        org.apache.rat.config.AddLicenseHeaders addLicenseHeaders49 = org.apache.rat.config.AddLicenseHeaders.FALSE;
        reportConfiguration45.setAddLicenseHeaders(addLicenseHeaders49);
        org.apache.rat.utils.Log log51 = null;
        org.apache.rat.ReportConfiguration reportConfiguration52 = new org.apache.rat.ReportConfiguration(log51);
        org.apache.rat.report.claim.ClaimStatistic claimStatistic53 = org.apache.rat.Reporter.report(reportConfiguration52);
        org.apache.rat.license.LicenseSetFactory.LicenseFilter licenseFilter54 = org.apache.rat.license.LicenseSetFactory.LicenseFilter.all;
        org.apache.rat.Reporter.listLicenses(reportConfiguration52, licenseFilter54);
        org.apache.rat.Reporter.listLicenses(reportConfiguration45, licenseFilter54);
        java.util.SortedSet<org.apache.rat.license.ILicenseFamily> iLicenseFamilySet57 = reportConfiguration32.getLicenseFamilies(licenseFilter54);
        org.apache.rat.utils.Log log58 = null;
        org.apache.rat.ReportConfiguration reportConfiguration59 = new org.apache.rat.ReportConfiguration(log58);
        org.apache.rat.report.claim.ClaimStatistic claimStatistic60 = org.apache.rat.Reporter.report(reportConfiguration59);
        org.apache.rat.utils.Log log61 = null;
        org.apache.rat.ReportConfiguration reportConfiguration62 = new org.apache.rat.ReportConfiguration(log61);
        org.apache.rat.report.claim.ClaimStatistic claimStatistic63 = org.apache.rat.Reporter.report(reportConfiguration62);
        org.apache.rat.utils.ReportingSet.Options options64 = org.apache.rat.utils.ReportingSet.Options.OVERWRITE;
        reportConfiguration62.licenseDuplicateOption(options64);
        reportConfiguration59.familyDuplicateOption(options64);
        org.apache.commons.io.function.IOSupplier<java.io.PrintWriter> printWriterIOSupplier67 = reportConfiguration59.getWriter();
        org.apache.rat.report.IReportable iReportable68 = null;
        reportConfiguration59.setReportable(iReportable68);
        org.apache.rat.utils.Log log70 = null;
        org.apache.rat.ReportConfiguration reportConfiguration71 = new org.apache.rat.ReportConfiguration(log70);
        java.io.FilenameFilter filenameFilter72 = reportConfiguration71.getInputFileFilter();
        org.apache.rat.license.LicenseSetFactory.LicenseFilter licenseFilter73 = org.apache.rat.license.LicenseSetFactory.LicenseFilter.all;
        java.util.SortedSet<org.apache.rat.license.ILicense> iLicenseSet74 = reportConfiguration71.getLicenses(licenseFilter73);
        java.util.SortedSet<org.apache.rat.license.ILicenseFamily> iLicenseFamilySet75 = reportConfiguration59.getLicenseFamilies(licenseFilter73);
        java.util.SortedSet<org.apache.rat.license.ILicenseFamily> iLicenseFamilySet76 = reportConfiguration32.getLicenseFamilies(licenseFilter73);
        org.apache.rat.license.ILicenseFamily iLicenseFamily77 = org.apache.rat.license.LicenseFamilySetFactory.search(iLicenseFamily18, iLicenseFamilySet76);
        int int78 = iLicenseFamily12.compareTo(iLicenseFamily18);
        org.apache.rat.utils.ReportingSet<java.lang.String> strSet79 = new org.apache.rat.utils.ReportingSet<java.lang.String>();
        int int80 = strSet79.size();
        org.apache.rat.utils.ReportingSet<java.lang.String> strSet82 = strSet79.headSet("?????");
        org.apache.rat.utils.Log log83 = null;
        org.apache.rat.ReportConfiguration reportConfiguration84 = new org.apache.rat.ReportConfiguration(log83);
        org.apache.rat.report.claim.ClaimStatistic claimStatistic85 = org.apache.rat.Reporter.report(reportConfiguration84);
        org.apache.rat.utils.ReportingSet.Options options86 = org.apache.rat.utils.ReportingSet.Options.OVERWRITE;
        reportConfiguration84.licenseDuplicateOption(options86);
        java.util.SortedSet<org.apache.rat.license.ILicenseFamily> iLicenseFamilySet89 = org.apache.rat.license.LicenseFamilySetFactory.emptyLicenseFamilySet();
        org.apache.rat.license.ILicenseFamily iLicenseFamily90 = org.apache.rat.license.LicenseFamilySetFactory.search("http://org/apache/rat/meta-data", iLicenseFamilySet89);
        org.apache.rat.policy.DefaultPolicy defaultPolicy91 = new org.apache.rat.policy.DefaultPolicy((java.util.Collection<org.apache.rat.license.ILicenseFamily>) iLicenseFamilySet89);
        reportConfiguration84.addFamilies((java.util.Collection<org.apache.rat.license.ILicenseFamily>) iLicenseFamilySet89);
        boolean boolean93 = strSet79.containsAll((java.util.Collection<org.apache.rat.license.ILicenseFamily>) iLicenseFamilySet89);
        org.apache.rat.license.ILicenseFamily iLicenseFamily94 = org.apache.rat.license.LicenseFamilySetFactory.search(iLicenseFamily18, iLicenseFamilySet89);
        org.junit.Assert.assertNull(str3);
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "hi!" + "'", str4, "hi!");
        org.junit.Assert.assertNull(str7);
        org.junit.Assert.assertNull(str8);
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "http://org/apache/rat/meta-data#LicenseFamilyName" + "'", str11, "http://org/apache/rat/meta-data#LicenseFamilyName");
        org.junit.Assert.assertNotNull(iLicenseFamily12);
        org.junit.Assert.assertNotNull(iLicenseFamily18);
        org.junit.Assert.assertEquals("'" + str19 + "' != '" + "binar" + "'", str19, "binar");
        org.junit.Assert.assertNotNull(builder22);
        org.junit.Assert.assertNotNull(builder24);
        org.junit.Assert.assertNotNull(builder26);
        org.junit.Assert.assertNotNull(builder28);
        org.junit.Assert.assertNotNull(iLicenseFamily29);
        org.junit.Assert.assertTrue("'" + int30 + "' != '" + 44 + "'", int30 == 44);
        org.junit.Assert.assertNull(filenameFilter33);
        org.junit.Assert.assertTrue("'" + licenseFilter34 + "' != '" + org.apache.rat.license.LicenseSetFactory.LicenseFilter.all + "'", licenseFilter34.equals(org.apache.rat.license.LicenseSetFactory.LicenseFilter.all));
        org.junit.Assert.assertNotNull(iLicenseSet35);
        org.junit.Assert.assertTrue("'" + addLicenseHeaders36 + "' != '" + org.apache.rat.config.AddLicenseHeaders.FALSE + "'", addLicenseHeaders36.equals(org.apache.rat.config.AddLicenseHeaders.FALSE));
        org.junit.Assert.assertNull(claimStatistic40);
        org.junit.Assert.assertTrue("'" + licenseFilter41 + "' != '" + org.apache.rat.license.LicenseSetFactory.LicenseFilter.all + "'", licenseFilter41.equals(org.apache.rat.license.LicenseSetFactory.LicenseFilter.all));
        org.junit.Assert.assertNull(filenameFilter46);
        org.junit.Assert.assertTrue("'" + licenseFilter47 + "' != '" + org.apache.rat.license.LicenseSetFactory.LicenseFilter.all + "'", licenseFilter47.equals(org.apache.rat.license.LicenseSetFactory.LicenseFilter.all));
        org.junit.Assert.assertNotNull(iLicenseSet48);
        org.junit.Assert.assertTrue("'" + addLicenseHeaders49 + "' != '" + org.apache.rat.config.AddLicenseHeaders.FALSE + "'", addLicenseHeaders49.equals(org.apache.rat.config.AddLicenseHeaders.FALSE));
        org.junit.Assert.assertNull(claimStatistic53);
        org.junit.Assert.assertTrue("'" + licenseFilter54 + "' != '" + org.apache.rat.license.LicenseSetFactory.LicenseFilter.all + "'", licenseFilter54.equals(org.apache.rat.license.LicenseSetFactory.LicenseFilter.all));
        org.junit.Assert.assertNotNull(iLicenseFamilySet57);
        org.junit.Assert.assertNull(claimStatistic60);
        org.junit.Assert.assertNull(claimStatistic63);
        org.junit.Assert.assertTrue("'" + options64 + "' != '" + org.apache.rat.utils.ReportingSet.Options.OVERWRITE + "'", options64.equals(org.apache.rat.utils.ReportingSet.Options.OVERWRITE));
        org.junit.Assert.assertNotNull(printWriterIOSupplier67);
        org.junit.Assert.assertNull(filenameFilter72);
        org.junit.Assert.assertTrue("'" + licenseFilter73 + "' != '" + org.apache.rat.license.LicenseSetFactory.LicenseFilter.all + "'", licenseFilter73.equals(org.apache.rat.license.LicenseSetFactory.LicenseFilter.all));
        org.junit.Assert.assertNotNull(iLicenseSet74);
        org.junit.Assert.assertNotNull(iLicenseFamilySet75);
        org.junit.Assert.assertNotNull(iLicenseFamilySet76);
        org.junit.Assert.assertNull(iLicenseFamily77);
        org.junit.Assert.assertTrue("'" + int78 + "' != '" + (-44) + "'", int78 == (-44));
        org.junit.Assert.assertTrue("'" + int80 + "' != '" + 0 + "'", int80 == 0);
        org.junit.Assert.assertNotNull(strSet82);
        org.junit.Assert.assertNull(claimStatistic85);
        org.junit.Assert.assertTrue("'" + options86 + "' != '" + org.apache.rat.utils.ReportingSet.Options.OVERWRITE + "'", options86.equals(org.apache.rat.utils.ReportingSet.Options.OVERWRITE));
        org.junit.Assert.assertNotNull(iLicenseFamilySet89);
        org.junit.Assert.assertNull(iLicenseFamily90);
        org.junit.Assert.assertTrue("'" + boolean93 + "' != '" + true + "'", boolean93 == true);
        org.junit.Assert.assertNull(iLicenseFamily94);
    }

    @Test
    public void test12970() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest25.test12970");
        java.io.File file0 = null;
        org.apache.rat.utils.Log log1 = null;
        org.apache.rat.ReportConfiguration reportConfiguration2 = new org.apache.rat.ReportConfiguration(log1);
        java.io.FilenameFilter filenameFilter3 = reportConfiguration2.getInputFileFilter();
        org.apache.rat.license.LicenseSetFactory.LicenseFilter licenseFilter4 = org.apache.rat.license.LicenseSetFactory.LicenseFilter.all;
        java.util.SortedSet<org.apache.rat.license.ILicense> iLicenseSet5 = reportConfiguration2.getLicenses(licenseFilter4);
        org.apache.rat.config.AddLicenseHeaders addLicenseHeaders6 = org.apache.rat.config.AddLicenseHeaders.FALSE;
        reportConfiguration2.setAddLicenseHeaders(addLicenseHeaders6);
        org.apache.rat.utils.Log log8 = null;
        org.apache.rat.ReportConfiguration reportConfiguration9 = new org.apache.rat.ReportConfiguration(log8);
        org.apache.rat.report.claim.ClaimStatistic claimStatistic10 = org.apache.rat.Reporter.report(reportConfiguration9);
        org.apache.rat.license.LicenseSetFactory.LicenseFilter licenseFilter11 = org.apache.rat.license.LicenseSetFactory.LicenseFilter.all;
        org.apache.rat.Reporter.listLicenses(reportConfiguration9, licenseFilter11);
        org.apache.rat.Reporter.listLicenses(reportConfiguration2, licenseFilter11);
        org.apache.rat.utils.Log log14 = null;
        org.apache.rat.ReportConfiguration reportConfiguration15 = new org.apache.rat.ReportConfiguration(log14);
        java.io.FilenameFilter filenameFilter16 = reportConfiguration15.getInputFileFilter();
        org.apache.rat.license.LicenseSetFactory.LicenseFilter licenseFilter17 = org.apache.rat.license.LicenseSetFactory.LicenseFilter.all;
        java.util.SortedSet<org.apache.rat.license.ILicense> iLicenseSet18 = reportConfiguration15.getLicenses(licenseFilter17);
        org.apache.rat.config.AddLicenseHeaders addLicenseHeaders19 = org.apache.rat.config.AddLicenseHeaders.FALSE;
        reportConfiguration15.setAddLicenseHeaders(addLicenseHeaders19);
        org.apache.rat.utils.Log log21 = null;
        org.apache.rat.ReportConfiguration reportConfiguration22 = new org.apache.rat.ReportConfiguration(log21);
        org.apache.rat.report.claim.ClaimStatistic claimStatistic23 = org.apache.rat.Reporter.report(reportConfiguration22);
        org.apache.rat.license.LicenseSetFactory.LicenseFilter licenseFilter24 = org.apache.rat.license.LicenseSetFactory.LicenseFilter.all;
        org.apache.rat.Reporter.listLicenses(reportConfiguration22, licenseFilter24);
        org.apache.rat.Reporter.listLicenses(reportConfiguration15, licenseFilter24);
        org.apache.rat.Reporter.listLicenses(reportConfiguration2, licenseFilter24);
        org.apache.rat.utils.Log log28 = null;
        org.apache.rat.ReportConfiguration reportConfiguration29 = new org.apache.rat.ReportConfiguration(log28);
        org.apache.commons.io.function.IOSupplier<java.io.OutputStream> outputStreamIOSupplier30 = reportConfiguration29.getOutput();
        reportConfiguration2.setOut(outputStreamIOSupplier30);
        org.apache.rat.utils.Log.Level level32 = org.apache.rat.utils.Log.Level.WARN;
        reportConfiguration2.logLicenseCollisions(level32);
        org.apache.commons.io.filefilter.IOFileFilter iOFileFilter34 = reportConfiguration2.getDirectoryFilter();
        java.nio.file.Path path35 = null;
        boolean boolean36 = iOFileFilter34.matches(path35);
        java.nio.file.Path path37 = null;
        java.nio.file.attribute.BasicFileAttributes basicFileAttributes38 = null;
        java.nio.file.FileVisitResult fileVisitResult39 = iOFileFilter34.accept(path37, basicFileAttributes38);
        org.apache.rat.utils.Log log40 = null;
        org.apache.rat.ReportConfiguration reportConfiguration41 = new org.apache.rat.ReportConfiguration(log40);
        org.apache.rat.report.claim.ClaimStatistic claimStatistic42 = org.apache.rat.Reporter.report(reportConfiguration41);
        org.apache.commons.io.function.IOSupplier<java.io.InputStream> inputStreamIOSupplier43 = reportConfiguration41.getStyleSheet();
        org.apache.rat.analysis.license.FullTextMatchingLicense fullTextMatchingLicense44 = new org.apache.rat.analysis.license.FullTextMatchingLicense();
        fullTextMatchingLicense44.setLicenseFamilyName("hi!");
        java.lang.String str47 = fullTextMatchingLicense44.getLicenseFamilyCategory();
        java.lang.String str48 = fullTextMatchingLicense44.getLicenseFamilyName();
        fullTextMatchingLicense44.setLicenseFamilyName("SpdxBuilder: null");
        fullTextMatchingLicense44.setLicenseFamilyCategory("TMF");
        org.apache.rat.license.ILicenseFamily iLicenseFamily53 = fullTextMatchingLicense44.getLicenseFamily();
        java.lang.String str54 = iLicenseFamily53.getFamilyName();
        java.lang.String str55 = iLicenseFamily53.getFamilyName();
        reportConfiguration41.addApprovedLicenseCategory(iLicenseFamily53);
        org.apache.rat.utils.Log log57 = null;
        org.apache.rat.ReportConfiguration reportConfiguration58 = new org.apache.rat.ReportConfiguration(log57);
        org.apache.rat.report.claim.ClaimStatistic claimStatistic59 = org.apache.rat.Reporter.report(reportConfiguration58);
        org.apache.rat.utils.Log log60 = null;
        org.apache.rat.ReportConfiguration reportConfiguration61 = new org.apache.rat.ReportConfiguration(log60);
        org.apache.rat.report.claim.ClaimStatistic claimStatistic62 = org.apache.rat.Reporter.report(reportConfiguration61);
        org.apache.rat.utils.ReportingSet.Options options63 = org.apache.rat.utils.ReportingSet.Options.OVERWRITE;
        reportConfiguration61.licenseDuplicateOption(options63);
        reportConfiguration58.familyDuplicateOption(options63);
        org.apache.commons.io.function.IOSupplier<java.io.PrintWriter> printWriterIOSupplier66 = reportConfiguration58.getWriter();
        org.apache.rat.utils.Log log67 = null;
        org.apache.rat.ReportConfiguration reportConfiguration68 = new org.apache.rat.ReportConfiguration(log67);
        reportConfiguration68.addApprovedLicenseCategory(".cvsignore");
        org.apache.rat.utils.Log.Level level71 = org.apache.rat.utils.Log.Level.ERROR;
        reportConfiguration68.logFamilyCollisions(level71);
        reportConfiguration58.logFamilyCollisions(level71);
        org.apache.commons.io.filefilter.IOFileFilter iOFileFilter74 = reportConfiguration58.getDirectoryFilter();
        reportConfiguration41.addDirectoryFilter(iOFileFilter74);
        java.nio.file.Path path76 = null;
        java.nio.file.attribute.BasicFileAttributes basicFileAttributes77 = null;
        java.nio.file.FileVisitResult fileVisitResult78 = iOFileFilter74.accept(path76, basicFileAttributes77);
        org.apache.commons.io.filefilter.IOFileFilter iOFileFilter79 = iOFileFilter34.and(iOFileFilter74);
        java.nio.file.Path path80 = null;
        boolean boolean81 = iOFileFilter34.matches(path80);
        // The following exception was thrown during execution in test generation
        try {
            org.apache.rat.walker.DirectoryWalker directoryWalker82 = new org.apache.rat.walker.DirectoryWalker(file0, iOFileFilter34);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNull(filenameFilter3);
        org.junit.Assert.assertTrue("'" + licenseFilter4 + "' != '" + org.apache.rat.license.LicenseSetFactory.LicenseFilter.all + "'", licenseFilter4.equals(org.apache.rat.license.LicenseSetFactory.LicenseFilter.all));
        org.junit.Assert.assertNotNull(iLicenseSet5);
        org.junit.Assert.assertTrue("'" + addLicenseHeaders6 + "' != '" + org.apache.rat.config.AddLicenseHeaders.FALSE + "'", addLicenseHeaders6.equals(org.apache.rat.config.AddLicenseHeaders.FALSE));
        org.junit.Assert.assertNull(claimStatistic10);
        org.junit.Assert.assertTrue("'" + licenseFilter11 + "' != '" + org.apache.rat.license.LicenseSetFactory.LicenseFilter.all + "'", licenseFilter11.equals(org.apache.rat.license.LicenseSetFactory.LicenseFilter.all));
        org.junit.Assert.assertNull(filenameFilter16);
        org.junit.Assert.assertTrue("'" + licenseFilter17 + "' != '" + org.apache.rat.license.LicenseSetFactory.LicenseFilter.all + "'", licenseFilter17.equals(org.apache.rat.license.LicenseSetFactory.LicenseFilter.all));
        org.junit.Assert.assertNotNull(iLicenseSet18);
        org.junit.Assert.assertTrue("'" + addLicenseHeaders19 + "' != '" + org.apache.rat.config.AddLicenseHeaders.FALSE + "'", addLicenseHeaders19.equals(org.apache.rat.config.AddLicenseHeaders.FALSE));
        org.junit.Assert.assertNull(claimStatistic23);
        org.junit.Assert.assertTrue("'" + licenseFilter24 + "' != '" + org.apache.rat.license.LicenseSetFactory.LicenseFilter.all + "'", licenseFilter24.equals(org.apache.rat.license.LicenseSetFactory.LicenseFilter.all));
        org.junit.Assert.assertNotNull(outputStreamIOSupplier30);
        org.junit.Assert.assertTrue("'" + level32 + "' != '" + org.apache.rat.utils.Log.Level.WARN + "'", level32.equals(org.apache.rat.utils.Log.Level.WARN));
        org.junit.Assert.assertNotNull(iOFileFilter34);
        org.junit.Assert.assertTrue("'" + boolean36 + "' != '" + false + "'", boolean36 == false);
        org.junit.Assert.assertTrue("'" + fileVisitResult39 + "' != '" + java.nio.file.FileVisitResult.TERMINATE + "'", fileVisitResult39.equals(java.nio.file.FileVisitResult.TERMINATE));
        org.junit.Assert.assertNull(claimStatistic42);
        org.junit.Assert.assertNull(inputStreamIOSupplier43);
        org.junit.Assert.assertNull(str47);
        org.junit.Assert.assertEquals("'" + str48 + "' != '" + "hi!" + "'", str48, "hi!");
        org.junit.Assert.assertNotNull(iLicenseFamily53);
        org.junit.Assert.assertEquals("'" + str54 + "' != '" + "SpdxBuilder: null" + "'", str54, "SpdxBuilder: null");
        org.junit.Assert.assertEquals("'" + str55 + "' != '" + "SpdxBuilder: null" + "'", str55, "SpdxBuilder: null");
        org.junit.Assert.assertNull(claimStatistic59);
        org.junit.Assert.assertNull(claimStatistic62);
        org.junit.Assert.assertTrue("'" + options63 + "' != '" + org.apache.rat.utils.ReportingSet.Options.OVERWRITE + "'", options63.equals(org.apache.rat.utils.ReportingSet.Options.OVERWRITE));
        org.junit.Assert.assertNotNull(printWriterIOSupplier66);
        org.junit.Assert.assertTrue("'" + level71 + "' != '" + org.apache.rat.utils.Log.Level.ERROR + "'", level71.equals(org.apache.rat.utils.Log.Level.ERROR));
        org.junit.Assert.assertNotNull(iOFileFilter74);
        org.junit.Assert.assertTrue("'" + fileVisitResult78 + "' != '" + java.nio.file.FileVisitResult.TERMINATE + "'", fileVisitResult78.equals(java.nio.file.FileVisitResult.TERMINATE));
        org.junit.Assert.assertNotNull(iOFileFilter79);
        org.junit.Assert.assertTrue("'" + boolean81 + "' != '" + false + "'", boolean81 == false);
    }

    @Test
    public void test12971() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest25.test12971");
        org.apache.rat.analysis.license.FullTextMatchingLicense fullTextMatchingLicense0 = new org.apache.rat.analysis.license.FullTextMatchingLicense();
        fullTextMatchingLicense0.setLicenseFamilyName("hi!");
        java.lang.String str3 = fullTextMatchingLicense0.getLicenseFamilyCategory();
        java.lang.String str4 = fullTextMatchingLicense0.getLicenseFamilyCategory();
        fullTextMatchingLicense0.setLicenseFamilyCategory("DOJO ");
        java.lang.String str7 = fullTextMatchingLicense0.getLicenseFamilyName();
        fullTextMatchingLicense0.setNotes("SpdxBuilder: null http://org/apache/rat/meta-data#LicenseFamilyName");
        org.apache.rat.license.ILicenseFamily iLicenseFamily10 = fullTextMatchingLicense0.getLicenseFamily();
        fullTextMatchingLicense0.setLicenseFamilyName("Datum [ name ='MANIFEST.MF',value ='GPL2  ']");
        java.lang.String str13 = fullTextMatchingLicense0.getLicenseFamilyName();
        fullTextMatchingLicense0.setLicenseFamilyCategory("e5b7b7d6-30de-4972-8c78-a5e3e85d54e0");
        org.apache.rat.license.ILicenseFamily iLicenseFamily16 = fullTextMatchingLicense0.getLicenseFamily();
        org.apache.rat.license.ILicenseFamily iLicenseFamily17 = fullTextMatchingLicense0.getLicenseFamily();
        org.junit.Assert.assertNull(str3);
        org.junit.Assert.assertNull(str4);
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "hi!" + "'", str7, "hi!");
        org.junit.Assert.assertNotNull(iLicenseFamily10);
        org.junit.Assert.assertEquals("'" + str13 + "' != '" + "Datum [ name ='MANIFEST.MF',value ='GPL2  ']" + "'", str13, "Datum [ name ='MANIFEST.MF',value ='GPL2  ']");
        org.junit.Assert.assertNotNull(iLicenseFamily16);
        org.junit.Assert.assertNotNull(iLicenseFamily17);
    }

    @Test
    public void test12972() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest25.test12972");
        org.apache.rat.configuration.Format format0 = org.apache.rat.configuration.Format.XML;
        org.apache.rat.configuration.LicenseReader licenseReader1 = format0.licenseReader();
        org.apache.rat.configuration.MatcherReader matcherReader2 = format0.matcherReader();
        org.apache.rat.configuration.LicenseReader licenseReader3 = format0.licenseReader();
        org.apache.rat.configuration.LicenseReader licenseReader4 = format0.licenseReader();
        java.util.SortedSet<org.apache.rat.license.ILicenseFamily> iLicenseFamilySet5 = licenseReader4.readFamilies();
        java.util.SortedSet<org.apache.rat.license.ILicenseFamily> iLicenseFamilySet6 = licenseReader4.readFamilies();
        java.util.SortedSet<org.apache.rat.license.ILicenseFamily> iLicenseFamilySet7 = licenseReader4.readFamilies();
        java.util.SortedSet<org.apache.rat.license.ILicenseFamily> iLicenseFamilySet8 = licenseReader4.readFamilies();
        java.util.SortedSet<java.lang.String> strSet9 = licenseReader4.approvedLicenseId();
        org.junit.Assert.assertTrue("'" + format0 + "' != '" + org.apache.rat.configuration.Format.XML + "'", format0.equals(org.apache.rat.configuration.Format.XML));
        org.junit.Assert.assertNotNull(licenseReader1);
        org.junit.Assert.assertNotNull(matcherReader2);
        org.junit.Assert.assertNotNull(licenseReader3);
        org.junit.Assert.assertNotNull(licenseReader4);
        org.junit.Assert.assertNotNull(iLicenseFamilySet5);
        org.junit.Assert.assertNotNull(iLicenseFamilySet6);
        org.junit.Assert.assertNotNull(iLicenseFamilySet7);
        org.junit.Assert.assertNotNull(iLicenseFamilySet8);
        org.junit.Assert.assertNotNull(strSet9);
    }

    @Test
    public void test12973() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest25.test12973");
        java.io.File file0 = null;
        java.util.regex.Pattern pattern1 = null;
        org.apache.rat.utils.Log log2 = null;
        org.apache.rat.ReportConfiguration reportConfiguration3 = new org.apache.rat.ReportConfiguration(log2);
        reportConfiguration3.addApprovedLicenseCategory(".cvsignore");
        org.apache.rat.utils.Log.Level level6 = org.apache.rat.utils.Log.Level.ERROR;
        reportConfiguration3.logFamilyCollisions(level6);
        org.apache.commons.io.filefilter.IOFileFilter iOFileFilter8 = reportConfiguration3.getDirectoryFilter();
        java.lang.String[] strArray14 = new java.lang.String[] { "http://org/apache/rat/meta-data#LicenseFamilyCategory", "Datum [ name ='http://org/apache/rat/meta-data#LicenseFamilyCategory',value ='GPL1  ']", "MANIFEST.MF", "AllBuilder:", "The MIT License" };
        org.apache.rat.utils.ReportingSet<java.lang.String> strSet15 = new org.apache.rat.utils.ReportingSet<java.lang.String>();
        boolean boolean16 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strSet15, strArray14);
        boolean boolean18 = strSet15.addIfNotPresent("http://org/apache/rat/meta-data#LicenseFamilyName");
        boolean boolean20 = strSet15.addIfNotPresent("ef7a8b13-64c3-4510-bb0c-dbf208e1e73f");
        java.util.function.Function<java.lang.String, java.lang.String> strFunction21 = null;
        org.apache.rat.utils.ReportingSet<java.lang.String> strSet22 = strSet15.setMsgFormat(strFunction21);
        java.util.SortedSet<org.apache.rat.license.ILicenseFamily> iLicenseFamilySet24 = org.apache.rat.license.LicenseFamilySetFactory.emptyLicenseFamilySet();
        org.apache.rat.license.ILicenseFamily iLicenseFamily25 = org.apache.rat.license.LicenseFamilySetFactory.search("http://org/apache/rat/meta-data", iLicenseFamilySet24);
        boolean boolean26 = strSet15.containsAll((java.util.Collection<org.apache.rat.license.ILicenseFamily>) iLicenseFamilySet24);
        reportConfiguration3.removeApprovedLicenseCategories((java.util.Collection<java.lang.String>) strSet15);
        org.apache.rat.report.IReportable iReportable28 = null;
        reportConfiguration3.setReportable(iReportable28);
        org.apache.rat.utils.Log log30 = null;
        org.apache.rat.ReportConfiguration reportConfiguration31 = new org.apache.rat.ReportConfiguration(log30);
        org.apache.rat.license.ILicenseFamily[] iLicenseFamilyArray32 = new org.apache.rat.license.ILicenseFamily[] {};
        java.util.ArrayList<org.apache.rat.license.ILicenseFamily> iLicenseFamilyList33 = new java.util.ArrayList<org.apache.rat.license.ILicenseFamily>();
        boolean boolean34 = java.util.Collections.addAll((java.util.Collection<org.apache.rat.license.ILicenseFamily>) iLicenseFamilyList33, iLicenseFamilyArray32);
        reportConfiguration31.addFamilies((java.util.Collection<org.apache.rat.license.ILicenseFamily>) iLicenseFamilyList33);
        reportConfiguration31.addApprovedLicenseCategory("http://org/apache/rat/meta-data");
        org.apache.rat.report.IReportable iReportable38 = reportConfiguration31.getReportable();
        org.apache.commons.io.filefilter.IOFileFilter iOFileFilter39 = reportConfiguration31.getDirectoryFilter();
        reportConfiguration3.setDirectoryFilter(iOFileFilter39);
        org.apache.rat.utils.Log log41 = null;
        org.apache.rat.ReportConfiguration reportConfiguration42 = new org.apache.rat.ReportConfiguration(log41);
        org.apache.rat.report.claim.ClaimStatistic claimStatistic43 = org.apache.rat.Reporter.report(reportConfiguration42);
        org.apache.rat.utils.Log log44 = null;
        org.apache.rat.ReportConfiguration reportConfiguration45 = new org.apache.rat.ReportConfiguration(log44);
        org.apache.rat.report.claim.ClaimStatistic claimStatistic46 = org.apache.rat.Reporter.report(reportConfiguration45);
        org.apache.rat.utils.ReportingSet.Options options47 = org.apache.rat.utils.ReportingSet.Options.OVERWRITE;
        reportConfiguration45.licenseDuplicateOption(options47);
        reportConfiguration42.familyDuplicateOption(options47);
        org.apache.commons.io.function.IOSupplier<java.io.PrintWriter> printWriterIOSupplier50 = reportConfiguration42.getWriter();
        boolean boolean51 = reportConfiguration42.isAddingLicensesForced();
        java.io.FilenameFilter filenameFilter52 = reportConfiguration42.getInputFileFilter();
        java.io.FilenameFilter filenameFilter53 = reportConfiguration42.getInputFileFilter();
        boolean boolean54 = reportConfiguration42.isStyleReport();
        org.apache.commons.io.function.IOSupplier<java.io.OutputStream> outputStreamIOSupplier55 = reportConfiguration42.getOutput();
        org.apache.commons.io.filefilter.IOFileFilter iOFileFilter56 = reportConfiguration42.getDirectoryFilter();
        org.apache.commons.io.filefilter.IOFileFilter iOFileFilter57 = reportConfiguration42.getDirectoryFilter();
        org.apache.commons.io.filefilter.IOFileFilter iOFileFilter58 = iOFileFilter39.or(iOFileFilter57);
        // The following exception was thrown during execution in test generation
        try {
            org.apache.rat.walker.DirectoryWalker directoryWalker59 = new org.apache.rat.walker.DirectoryWalker(file0, pattern1, iOFileFilter57);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + level6 + "' != '" + org.apache.rat.utils.Log.Level.ERROR + "'", level6.equals(org.apache.rat.utils.Log.Level.ERROR));
        org.junit.Assert.assertNotNull(iOFileFilter8);
        org.junit.Assert.assertNotNull(strArray14);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + true + "'", boolean16 == true);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + true + "'", boolean18 == true);
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + true + "'", boolean20 == true);
        org.junit.Assert.assertNotNull(strSet22);
        org.junit.Assert.assertNotNull(iLicenseFamilySet24);
        org.junit.Assert.assertNull(iLicenseFamily25);
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + true + "'", boolean26 == true);
        org.junit.Assert.assertNotNull(iLicenseFamilyArray32);
        org.junit.Assert.assertTrue("'" + boolean34 + "' != '" + false + "'", boolean34 == false);
        org.junit.Assert.assertNull(iReportable38);
        org.junit.Assert.assertNotNull(iOFileFilter39);
        org.junit.Assert.assertNull(claimStatistic43);
        org.junit.Assert.assertNull(claimStatistic46);
        org.junit.Assert.assertTrue("'" + options47 + "' != '" + org.apache.rat.utils.ReportingSet.Options.OVERWRITE + "'", options47.equals(org.apache.rat.utils.ReportingSet.Options.OVERWRITE));
        org.junit.Assert.assertNotNull(printWriterIOSupplier50);
        org.junit.Assert.assertTrue("'" + boolean51 + "' != '" + false + "'", boolean51 == false);
        org.junit.Assert.assertNull(filenameFilter52);
        org.junit.Assert.assertNull(filenameFilter53);
        org.junit.Assert.assertTrue("'" + boolean54 + "' != '" + true + "'", boolean54 == true);
        org.junit.Assert.assertNotNull(outputStreamIOSupplier55);
        org.junit.Assert.assertNotNull(iOFileFilter56);
        org.junit.Assert.assertNotNull(iOFileFilter57);
        org.junit.Assert.assertNotNull(iOFileFilter58);
    }

    @Test
    public void test12974() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest25.test12974");
        org.apache.rat.Defaults.Builder builder1 = org.apache.rat.Defaults.builder();
        org.apache.rat.Defaults defaults2 = builder1.build();
        org.apache.rat.utils.Log log3 = null;
        org.apache.rat.ReportConfiguration reportConfiguration4 = new org.apache.rat.ReportConfiguration(log3);
        java.io.FilenameFilter filenameFilter5 = reportConfiguration4.getInputFileFilter();
        org.apache.rat.license.LicenseSetFactory.LicenseFilter licenseFilter6 = org.apache.rat.license.LicenseSetFactory.LicenseFilter.all;
        java.util.SortedSet<org.apache.rat.license.ILicense> iLicenseSet7 = reportConfiguration4.getLicenses(licenseFilter6);
        org.apache.rat.config.AddLicenseHeaders addLicenseHeaders8 = org.apache.rat.config.AddLicenseHeaders.FALSE;
        reportConfiguration4.setAddLicenseHeaders(addLicenseHeaders8);
        org.apache.rat.utils.Log log10 = null;
        org.apache.rat.ReportConfiguration reportConfiguration11 = new org.apache.rat.ReportConfiguration(log10);
        org.apache.rat.report.claim.ClaimStatistic claimStatistic12 = org.apache.rat.Reporter.report(reportConfiguration11);
        org.apache.rat.license.LicenseSetFactory.LicenseFilter licenseFilter13 = org.apache.rat.license.LicenseSetFactory.LicenseFilter.all;
        org.apache.rat.Reporter.listLicenses(reportConfiguration11, licenseFilter13);
        org.apache.rat.Reporter.listLicenses(reportConfiguration4, licenseFilter13);
        org.apache.rat.utils.Log log16 = null;
        org.apache.rat.ReportConfiguration reportConfiguration17 = new org.apache.rat.ReportConfiguration(log16);
        java.io.FilenameFilter filenameFilter18 = reportConfiguration17.getInputFileFilter();
        org.apache.rat.license.LicenseSetFactory.LicenseFilter licenseFilter19 = org.apache.rat.license.LicenseSetFactory.LicenseFilter.all;
        java.util.SortedSet<org.apache.rat.license.ILicense> iLicenseSet20 = reportConfiguration17.getLicenses(licenseFilter19);
        org.apache.rat.config.AddLicenseHeaders addLicenseHeaders21 = org.apache.rat.config.AddLicenseHeaders.FALSE;
        reportConfiguration17.setAddLicenseHeaders(addLicenseHeaders21);
        org.apache.rat.utils.Log log23 = null;
        org.apache.rat.ReportConfiguration reportConfiguration24 = new org.apache.rat.ReportConfiguration(log23);
        org.apache.rat.report.claim.ClaimStatistic claimStatistic25 = org.apache.rat.Reporter.report(reportConfiguration24);
        org.apache.rat.license.LicenseSetFactory.LicenseFilter licenseFilter26 = org.apache.rat.license.LicenseSetFactory.LicenseFilter.all;
        org.apache.rat.Reporter.listLicenses(reportConfiguration24, licenseFilter26);
        org.apache.rat.Reporter.listLicenses(reportConfiguration17, licenseFilter26);
        java.util.SortedSet<org.apache.rat.license.ILicenseFamily> iLicenseFamilySet29 = reportConfiguration4.getLicenseFamilies(licenseFilter26);
        java.util.SortedSet<org.apache.rat.license.ILicense> iLicenseSet30 = defaults2.getLicenses(licenseFilter26);
        org.apache.rat.utils.ReportingSet<org.apache.rat.license.ILicense> iLicenseSet31 = new org.apache.rat.utils.ReportingSet<org.apache.rat.license.ILicense>(iLicenseSet30);
        org.apache.rat.license.ILicense iLicense32 = org.apache.rat.license.LicenseSetFactory.search("TMF", iLicenseSet30);
        java.lang.String str33 = iLicense32.derivedFrom();
        org.apache.rat.license.ILicenseFamily iLicenseFamily34 = iLicense32.getLicenseFamily();
        org.apache.rat.license.ILicense iLicense35 = null;
        // The following exception was thrown during execution in test generation
        try {
            int int36 = iLicense32.compareTo(iLicense35);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(builder1);
        org.junit.Assert.assertNotNull(defaults2);
        org.junit.Assert.assertNull(filenameFilter5);
        org.junit.Assert.assertTrue("'" + licenseFilter6 + "' != '" + org.apache.rat.license.LicenseSetFactory.LicenseFilter.all + "'", licenseFilter6.equals(org.apache.rat.license.LicenseSetFactory.LicenseFilter.all));
        org.junit.Assert.assertNotNull(iLicenseSet7);
        org.junit.Assert.assertTrue("'" + addLicenseHeaders8 + "' != '" + org.apache.rat.config.AddLicenseHeaders.FALSE + "'", addLicenseHeaders8.equals(org.apache.rat.config.AddLicenseHeaders.FALSE));
        org.junit.Assert.assertNull(claimStatistic12);
        org.junit.Assert.assertTrue("'" + licenseFilter13 + "' != '" + org.apache.rat.license.LicenseSetFactory.LicenseFilter.all + "'", licenseFilter13.equals(org.apache.rat.license.LicenseSetFactory.LicenseFilter.all));
        org.junit.Assert.assertNull(filenameFilter18);
        org.junit.Assert.assertTrue("'" + licenseFilter19 + "' != '" + org.apache.rat.license.LicenseSetFactory.LicenseFilter.all + "'", licenseFilter19.equals(org.apache.rat.license.LicenseSetFactory.LicenseFilter.all));
        org.junit.Assert.assertNotNull(iLicenseSet20);
        org.junit.Assert.assertTrue("'" + addLicenseHeaders21 + "' != '" + org.apache.rat.config.AddLicenseHeaders.FALSE + "'", addLicenseHeaders21.equals(org.apache.rat.config.AddLicenseHeaders.FALSE));
        org.junit.Assert.assertNull(claimStatistic25);
        org.junit.Assert.assertTrue("'" + licenseFilter26 + "' != '" + org.apache.rat.license.LicenseSetFactory.LicenseFilter.all + "'", licenseFilter26.equals(org.apache.rat.license.LicenseSetFactory.LicenseFilter.all));
        org.junit.Assert.assertNotNull(iLicenseFamilySet29);
        org.junit.Assert.assertNotNull(iLicenseSet30);
        org.junit.Assert.assertNotNull(iLicense32);
        org.junit.Assert.assertEquals("'" + str33 + "' != '" + "BSD-3" + "'", str33, "BSD-3");
        org.junit.Assert.assertNotNull(iLicenseFamily34);
    }

    @Test
    public void test12975() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest25.test12975");
        java.lang.String[] strArray13 = new java.lang.String[] { "NotBuilder: null", "Datum [ name ='http://org/apache/rat/meta-data#LicenseFamilyCategory',value ='OASIS ']", "Copyright Builder: s:null e:null o:null", "Datum [ name ='http://org/apache/rat/meta-data#LicenseFamilyCategory',value ='DOJO  ']", "Datum [ name ='http://org/apache/rat/meta-data#LicenseFamilyCategory',value ='OASIS ']", "http://org/apache/rat/meta-data#HeaderCategory" };
        boolean boolean14 = org.apache.rat.document.impl.guesser.BinaryGuesser.extensionMatches("Modified BSD License", strArray13);
        boolean boolean15 = org.apache.rat.document.impl.guesser.BinaryGuesser.containsExtension("true", strArray13);
        boolean boolean16 = org.apache.rat.document.impl.guesser.BinaryGuesser.containsExtension("3c840dc2-bef0-42b5-b26c-35a568d53a24", strArray13);
        boolean boolean17 = org.apache.rat.document.impl.guesser.BinaryGuesser.containsExtension("Copyright Builder: s:null e:.cvsignore o:3c840dc2-bef0-42b5-b26c-35a568d53a24", strArray13);
        boolean boolean18 = org.apache.rat.document.impl.guesser.BinaryGuesser.extensionMatches("d25f13bc-1910-4451-97b5-b72663551a5d", strArray13);
        boolean boolean19 = org.apache.rat.document.impl.guesser.BinaryGuesser.extensionMatches("PLAIN-RAT.XSL", strArray13);
        boolean boolean20 = org.apache.rat.document.impl.guesser.BinaryGuesser.extensionMatches("da66b7f2-d322-468d-9fbb-171364cff2b2", strArray13);
        org.junit.Assert.assertNotNull(strArray13);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + false + "'", boolean15 == false);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + false + "'", boolean17 == false);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + false + "'", boolean18 == false);
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + false + "'", boolean19 == false);
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + false + "'", boolean20 == false);
    }

    @Test
    public void test12976() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest25.test12976");
        org.apache.rat.license.ILicense.Builder builder0 = org.apache.rat.license.ILicense.builder();
        org.apache.rat.license.ILicense.Builder builder2 = builder0.setLicenseFamilyCategory("");
        org.apache.rat.analysis.matchers.FullTextMatcher fullTextMatcher4 = new org.apache.rat.analysis.matchers.FullTextMatcher("ef7a8b13-64c3-4510-bb0c-dbf208e1e73f");
        org.apache.rat.license.ILicense.Builder builder5 = builder0.setMatcher((org.apache.rat.analysis.IHeaderMatcher) fullTextMatcher4);
        org.apache.rat.license.ILicense.Builder builder7 = builder0.setName("Datum [ name ='http://org/apache/rat/meta-data#LicenseFamilyCategory',value ='DOJO  ']");
        org.apache.rat.license.ILicense.Builder builder9 = builder0.setDerivedFrom("OASIS Open License");
        org.apache.rat.license.ILicense.Builder builder11 = builder0.setId("binary");
        org.apache.rat.license.ILicense.Builder builder13 = builder0.setNotes("7af67e73-76a3-4497-ab9c-98701437b5de");
        org.apache.rat.utils.DefaultLog defaultLog14 = org.apache.rat.utils.DefaultLog.INSTANCE;
        org.apache.rat.license.ILicense.Builder builder15 = org.apache.rat.license.ILicense.builder();
        org.apache.rat.license.ILicense.Builder builder17 = builder15.setLicenseFamilyCategory("");
        org.apache.rat.analysis.matchers.CopyrightMatcher copyrightMatcher21 = new org.apache.rat.analysis.matchers.CopyrightMatcher("", "GPL1 ", "hi!");
        org.apache.rat.analysis.IHeaderMatcher.State state22 = copyrightMatcher21.finalizeState();
        org.apache.rat.license.ILicense.Builder builder23 = builder17.setMatcher((org.apache.rat.analysis.IHeaderMatcher) copyrightMatcher21);
        org.apache.rat.license.ILicense.Builder builder25 = builder23.setLicenseFamilyCategory("");
        defaultLog14.error((java.lang.Object) builder25);
        org.apache.rat.analysis.matchers.CopyrightMatcher copyrightMatcher30 = new org.apache.rat.analysis.matchers.CopyrightMatcher("", "GPL1 ", "hi!");
        copyrightMatcher30.reset();
        org.apache.rat.license.ILicense.Builder builder32 = builder25.setMatcher((org.apache.rat.analysis.IHeaderMatcher) copyrightMatcher30);
        org.apache.rat.configuration.builders.SpdxBuilder spdxBuilder33 = org.apache.rat.analysis.IHeaderMatcher.Builder.spdx();
        java.lang.String str34 = spdxBuilder33.toString();
        org.apache.rat.configuration.builders.SpdxBuilder spdxBuilder36 = spdxBuilder33.setName("ef7a8b13-64c3-4510-bb0c-dbf208e1e73f");
        org.apache.rat.license.ILicense.Builder builder37 = builder32.setMatcher((org.apache.rat.analysis.IHeaderMatcher.Builder) spdxBuilder33);
        org.apache.rat.analysis.IHeaderMatcher iHeaderMatcher38 = spdxBuilder33.build();
        org.apache.rat.configuration.builders.AbstractBuilder abstractBuilder40 = spdxBuilder33.setId("ef75a6e8-7197-4e9e-83bf-f8b367e6b3c5");
        java.lang.String str41 = spdxBuilder33.toString();
        org.apache.rat.analysis.IHeaderMatcher iHeaderMatcher42 = spdxBuilder33.build();
        org.apache.rat.license.ILicense.Builder builder43 = builder13.setMatcher(iHeaderMatcher42);
        org.apache.rat.license.ILicense.Builder builder45 = builder43.setNotes("ff805aa7-6c84-4c2e-bb4a-c24488510ce4");
        org.apache.rat.license.ILicense.Builder builder47 = builder43.setId("f0e63aab-6bbb-429b-a543-8d03caca5b69");
        org.junit.Assert.assertNotNull(builder0);
        org.junit.Assert.assertNotNull(builder2);
        org.junit.Assert.assertNotNull(builder5);
        org.junit.Assert.assertNotNull(builder7);
        org.junit.Assert.assertNotNull(builder9);
        org.junit.Assert.assertNotNull(builder11);
        org.junit.Assert.assertNotNull(builder13);
        org.junit.Assert.assertNotNull(defaultLog14);
        org.junit.Assert.assertNotNull(builder15);
        org.junit.Assert.assertNotNull(builder17);
        org.junit.Assert.assertTrue("'" + state22 + "' != '" + org.apache.rat.analysis.IHeaderMatcher.State.f + "'", state22.equals(org.apache.rat.analysis.IHeaderMatcher.State.f));
        org.junit.Assert.assertNotNull(builder23);
        org.junit.Assert.assertNotNull(builder25);
        org.junit.Assert.assertNotNull(builder32);
        org.junit.Assert.assertNotNull(spdxBuilder33);
        org.junit.Assert.assertEquals("'" + str34 + "' != '" + "SpdxBuilder: null" + "'", str34, "SpdxBuilder: null");
        org.junit.Assert.assertNotNull(spdxBuilder36);
        org.junit.Assert.assertNotNull(builder37);
        org.junit.Assert.assertNotNull(iHeaderMatcher38);
        org.junit.Assert.assertNotNull(abstractBuilder40);
        org.junit.Assert.assertEquals("'" + str41 + "' != '" + "SpdxBuilder: ef7a8b13-64c3-4510-bb0c-dbf208e1e73f" + "'", str41, "SpdxBuilder: ef7a8b13-64c3-4510-bb0c-dbf208e1e73f");
        org.junit.Assert.assertNotNull(iHeaderMatcher42);
        org.junit.Assert.assertNotNull(builder43);
        org.junit.Assert.assertNotNull(builder45);
        org.junit.Assert.assertNotNull(builder47);
    }

    @Test
    public void test12977() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest25.test12977");
        org.apache.rat.utils.Log log0 = null;
        org.apache.rat.ReportConfiguration reportConfiguration1 = new org.apache.rat.ReportConfiguration(log0);
        org.apache.rat.license.ILicenseFamily[] iLicenseFamilyArray2 = new org.apache.rat.license.ILicenseFamily[] {};
        java.util.ArrayList<org.apache.rat.license.ILicenseFamily> iLicenseFamilyList3 = new java.util.ArrayList<org.apache.rat.license.ILicenseFamily>();
        boolean boolean4 = java.util.Collections.addAll((java.util.Collection<org.apache.rat.license.ILicenseFamily>) iLicenseFamilyList3, iLicenseFamilyArray2);
        reportConfiguration1.addFamilies((java.util.Collection<org.apache.rat.license.ILicenseFamily>) iLicenseFamilyList3);
        org.apache.rat.report.IReportable iReportable6 = null;
        reportConfiguration1.setReportable(iReportable6);
        org.apache.rat.utils.ReportingSet<java.lang.String> strSet8 = new org.apache.rat.utils.ReportingSet<java.lang.String>();
        java.lang.Object[] objArray9 = strSet8.toArray();
        org.apache.rat.utils.Log log10 = null;
        org.apache.rat.ReportConfiguration reportConfiguration11 = new org.apache.rat.ReportConfiguration(log10);
        org.apache.rat.report.claim.ClaimStatistic claimStatistic12 = org.apache.rat.Reporter.report(reportConfiguration11);
        org.apache.rat.utils.Log log13 = null;
        org.apache.rat.ReportConfiguration reportConfiguration14 = new org.apache.rat.ReportConfiguration(log13);
        org.apache.rat.report.claim.ClaimStatistic claimStatistic15 = org.apache.rat.Reporter.report(reportConfiguration14);
        org.apache.rat.utils.ReportingSet.Options options16 = org.apache.rat.utils.ReportingSet.Options.OVERWRITE;
        reportConfiguration14.licenseDuplicateOption(options16);
        reportConfiguration11.familyDuplicateOption(options16);
        org.apache.commons.io.function.IOSupplier<java.io.PrintWriter> printWriterIOSupplier19 = reportConfiguration11.getWriter();
        boolean boolean20 = reportConfiguration11.isAddingLicensesForced();
        org.apache.rat.utils.Log log21 = null;
        org.apache.rat.ReportConfiguration reportConfiguration22 = new org.apache.rat.ReportConfiguration(log21);
        reportConfiguration22.addApprovedLicenseCategory(".cvsignore");
        org.apache.rat.utils.Log.Level level25 = org.apache.rat.utils.Log.Level.ERROR;
        reportConfiguration22.logFamilyCollisions(level25);
        reportConfiguration11.logLicenseCollisions(level25);
        org.apache.rat.utils.ReportingSet<java.lang.String> strSet28 = strSet8.setLogLevel(level25);
        java.util.stream.Stream<java.lang.String> strStream29 = strSet28.stream();
        reportConfiguration1.addApprovedLicenseCategories((java.util.Collection<java.lang.String>) strSet28);
        org.apache.rat.utils.ReportingSet<java.lang.String> strSet32 = strSet28.tailSet("1e96b21e-f913-4d52-87cc-09323c460281");
        boolean boolean34 = strSet28.add("f9686227-2048-447b-8a8f-3164382365d2");
        org.apache.rat.utils.ReportingSet<java.lang.String> strSet36 = strSet28.headSet("c8f389b8-5295-40d4-be8e-f0d0afde51c6");
        java.util.Iterator<java.lang.String> strItor37 = strSet36.iterator();
        org.junit.Assert.assertNotNull(iLicenseFamilyArray2);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertNotNull(objArray9);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray9), "[]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray9), "[]");
        org.junit.Assert.assertNull(claimStatistic12);
        org.junit.Assert.assertNull(claimStatistic15);
        org.junit.Assert.assertTrue("'" + options16 + "' != '" + org.apache.rat.utils.ReportingSet.Options.OVERWRITE + "'", options16.equals(org.apache.rat.utils.ReportingSet.Options.OVERWRITE));
        org.junit.Assert.assertNotNull(printWriterIOSupplier19);
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + false + "'", boolean20 == false);
        org.junit.Assert.assertTrue("'" + level25 + "' != '" + org.apache.rat.utils.Log.Level.ERROR + "'", level25.equals(org.apache.rat.utils.Log.Level.ERROR));
        org.junit.Assert.assertNotNull(strSet28);
        org.junit.Assert.assertNotNull(strStream29);
        org.junit.Assert.assertNotNull(strSet32);
        org.junit.Assert.assertTrue("'" + boolean34 + "' != '" + true + "'", boolean34 == true);
        org.junit.Assert.assertNotNull(strSet36);
        org.junit.Assert.assertNotNull(strItor37);
    }

    @Test
    public void test12978() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest25.test12978");
        org.apache.rat.report.claim.ClaimStatistic claimStatistic0 = new org.apache.rat.report.claim.ClaimStatistic();
        claimStatistic0.setNumApproved((int) (short) 10);
        claimStatistic0.setNumUnknown((int) '#');
        int int5 = claimStatistic0.getNumUnApproved();
        java.util.Map<java.lang.String, java.lang.Integer> strMap6 = claimStatistic0.getLicenseFileCodeMap();
        claimStatistic0.setNumGenerated((int) (short) 1);
        java.util.Map<java.lang.String, java.lang.Integer> strMap9 = claimStatistic0.getLicenseFileNameMap();
        java.util.Map<java.lang.String, java.lang.Integer> strMap10 = claimStatistic0.getLicenseFileNameMap();
        int int11 = claimStatistic0.getNumUnApproved();
        java.util.Map<java.lang.String, java.lang.Integer> strMap12 = null;
        claimStatistic0.setLicenseFileCodeMap(strMap12);
        int int14 = claimStatistic0.getNumUnApproved();
        java.util.Map<java.lang.String, java.lang.Integer> strMap15 = null;
        claimStatistic0.setDocumentCategoryMap(strMap15);
        claimStatistic0.setNumUnApproved((-38));
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 0 + "'", int5 == 0);
        org.junit.Assert.assertNull(strMap6);
        org.junit.Assert.assertNull(strMap9);
        org.junit.Assert.assertNull(strMap10);
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 0 + "'", int11 == 0);
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + 0 + "'", int14 == 0);
    }

    @Test
    public void test12979() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest25.test12979");
        boolean boolean1 = org.apache.rat.document.impl.guesser.BinaryGuesser.isExecutable("09515582-f498-42b1-81db-55dad652cc61");
        org.junit.Assert.assertTrue("'" + boolean1 + "' != '" + false + "'", boolean1 == false);
    }

    @Test
    public void test12980() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest25.test12980");
        org.apache.rat.utils.Log log0 = null;
        org.apache.rat.ReportConfiguration reportConfiguration1 = new org.apache.rat.ReportConfiguration(log0);
        org.apache.rat.report.claim.ClaimStatistic claimStatistic2 = org.apache.rat.Reporter.report(reportConfiguration1);
        org.apache.commons.io.function.IOSupplier<java.io.InputStream> inputStreamIOSupplier3 = reportConfiguration1.getStyleSheet();
        org.apache.rat.report.claim.ClaimStatistic claimStatistic4 = org.apache.rat.Reporter.report(reportConfiguration1);
        org.apache.rat.config.SourceCodeManagementSystems sourceCodeManagementSystems5 = org.apache.rat.config.SourceCodeManagementSystems.CVS;
        java.lang.String str6 = sourceCodeManagementSystems5.getIgnoreFile();
        boolean boolean7 = sourceCodeManagementSystems5.hasIgnoreFile();
        java.util.List<java.lang.String> strList8 = sourceCodeManagementSystems5.getExclusions();
        java.io.FilenameFilter filenameFilter9 = org.apache.rat.Report.parseExclusions(strList8);
        reportConfiguration1.addApprovedLicenseCategories((java.util.Collection<java.lang.String>) strList8);
        org.apache.rat.utils.Log log11 = null;
        org.apache.rat.ReportConfiguration reportConfiguration12 = new org.apache.rat.ReportConfiguration(log11);
        org.apache.rat.report.claim.ClaimStatistic claimStatistic13 = org.apache.rat.Reporter.report(reportConfiguration12);
        org.apache.rat.utils.Log log14 = null;
        org.apache.rat.ReportConfiguration reportConfiguration15 = new org.apache.rat.ReportConfiguration(log14);
        org.apache.rat.report.claim.ClaimStatistic claimStatistic16 = org.apache.rat.Reporter.report(reportConfiguration15);
        org.apache.rat.utils.ReportingSet.Options options17 = org.apache.rat.utils.ReportingSet.Options.OVERWRITE;
        reportConfiguration15.licenseDuplicateOption(options17);
        reportConfiguration12.familyDuplicateOption(options17);
        org.apache.commons.io.function.IOSupplier<java.io.PrintWriter> printWriterIOSupplier20 = reportConfiguration12.getWriter();
        boolean boolean21 = reportConfiguration12.isAddingLicensesForced();
        org.apache.rat.utils.Log log22 = null;
        org.apache.rat.ReportConfiguration reportConfiguration23 = new org.apache.rat.ReportConfiguration(log22);
        org.apache.rat.report.claim.ClaimStatistic claimStatistic24 = org.apache.rat.Reporter.report(reportConfiguration23);
        org.apache.commons.io.function.IOSupplier<java.io.OutputStream> outputStreamIOSupplier25 = reportConfiguration23.getOutput();
        reportConfiguration12.setOut(outputStreamIOSupplier25);
        reportConfiguration1.setOut(outputStreamIOSupplier25);
        org.apache.rat.license.ILicenseFamilyBuilder iLicenseFamilyBuilder28 = new org.apache.rat.license.ILicenseFamilyBuilder();
        java.lang.String str29 = iLicenseFamilyBuilder28.getCategory();
        org.apache.rat.license.ILicenseFamily.Builder builder31 = iLicenseFamilyBuilder28.setLicenseFamilyCategory("AL   ");
        org.apache.rat.license.ILicenseFamily.Builder builder33 = iLicenseFamilyBuilder28.setLicenseFamilyName("binary");
        org.apache.rat.license.ILicenseFamily.Builder builder35 = iLicenseFamilyBuilder28.setLicenseFamilyCategory("3c74a3ec-8235-4035-9db7-f9f475b48681");
        org.apache.rat.license.ILicenseFamily.Builder builder37 = builder35.setLicenseFamilyCategory("49ba0523-306f-4984-949f-9db17b9667d9");
        reportConfiguration1.addFamily(builder35);
        boolean boolean39 = reportConfiguration1.isStyleReport();
        org.junit.Assert.assertNull(claimStatistic2);
        org.junit.Assert.assertNull(inputStreamIOSupplier3);
        org.junit.Assert.assertNull(claimStatistic4);
        org.junit.Assert.assertTrue("'" + sourceCodeManagementSystems5 + "' != '" + org.apache.rat.config.SourceCodeManagementSystems.CVS + "'", sourceCodeManagementSystems5.equals(org.apache.rat.config.SourceCodeManagementSystems.CVS));
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + ".cvsignore" + "'", str6, ".cvsignore");
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + true + "'", boolean7 == true);
        org.junit.Assert.assertNotNull(strList8);
        org.junit.Assert.assertNotNull(filenameFilter9);
        org.junit.Assert.assertNull(claimStatistic13);
        org.junit.Assert.assertNull(claimStatistic16);
        org.junit.Assert.assertTrue("'" + options17 + "' != '" + org.apache.rat.utils.ReportingSet.Options.OVERWRITE + "'", options17.equals(org.apache.rat.utils.ReportingSet.Options.OVERWRITE));
        org.junit.Assert.assertNotNull(printWriterIOSupplier20);
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + false + "'", boolean21 == false);
        org.junit.Assert.assertNull(claimStatistic24);
        org.junit.Assert.assertNotNull(outputStreamIOSupplier25);
        org.junit.Assert.assertNull(str29);
        org.junit.Assert.assertNotNull(builder31);
        org.junit.Assert.assertNotNull(builder33);
        org.junit.Assert.assertNotNull(builder35);
        org.junit.Assert.assertNotNull(builder37);
        org.junit.Assert.assertTrue("'" + boolean39 + "' != '" + true + "'", boolean39 == true);
    }

    @Test
    public void test12981() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest25.test12981");
        org.apache.rat.analysis.matchers.FullTextMatcher fullTextMatcher3 = new org.apache.rat.analysis.matchers.FullTextMatcher("notice", "3c840dc2-bef0-42b5-b26c-35a568d53a24");
        boolean boolean5 = fullTextMatcher3.doMatch("RegexBuilder: http://org/apache/rat/meta-data#LicenseFamilyName");
        org.apache.rat.analysis.IHeaderMatcher.State state6 = fullTextMatcher3.finalizeState();
        org.apache.rat.analysis.matchers.NotMatcher notMatcher7 = new org.apache.rat.analysis.matchers.NotMatcher("D0774232-CDEF-4507-A8B6-AC22A273DDE3", (org.apache.rat.analysis.IHeaderMatcher) fullTextMatcher3);
        java.lang.String str8 = notMatcher7.getId();
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertTrue("'" + state6 + "' != '" + org.apache.rat.analysis.IHeaderMatcher.State.f + "'", state6.equals(org.apache.rat.analysis.IHeaderMatcher.State.f));
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "D0774232-CDEF-4507-A8B6-AC22A273DDE3" + "'", str8, "D0774232-CDEF-4507-A8B6-AC22A273DDE3");
    }

    @Test
    public void test12982() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest25.test12982");
        org.apache.rat.utils.DefaultLog defaultLog0 = org.apache.rat.utils.DefaultLog.INSTANCE;
        org.apache.rat.configuration.builders.AllBuilder allBuilder1 = new org.apache.rat.configuration.builders.AllBuilder();
        org.apache.rat.configuration.builders.MatcherRefBuilder matcherRefBuilder2 = org.apache.rat.analysis.IHeaderMatcher.Builder.matcherRef();
        boolean boolean3 = matcherRefBuilder2.hasId();
        java.lang.String str4 = matcherRefBuilder2.toString();
        org.apache.rat.configuration.builders.AnyBuilder anyBuilder5 = org.apache.rat.analysis.IHeaderMatcher.Builder.any();
        org.apache.rat.configuration.builders.NotBuilder notBuilder6 = new org.apache.rat.configuration.builders.NotBuilder();
        java.lang.String str7 = notBuilder6.toString();
        org.apache.rat.configuration.builders.MatcherRefBuilder matcherRefBuilder8 = org.apache.rat.analysis.IHeaderMatcher.Builder.matcherRef();
        boolean boolean9 = matcherRefBuilder8.hasId();
        java.util.Map<java.lang.String, org.apache.rat.analysis.IHeaderMatcher> strMap10 = null;
        org.apache.rat.configuration.builders.MatcherRefBuilder matcherRefBuilder11 = matcherRefBuilder8.setMatchers(strMap10);
        org.apache.rat.configuration.builders.AllBuilder allBuilder12 = new org.apache.rat.configuration.builders.AllBuilder();
        org.apache.rat.configuration.builders.CopyrightBuilder copyrightBuilder13 = org.apache.rat.analysis.IHeaderMatcher.Builder.copyright();
        org.apache.rat.configuration.builders.CopyrightBuilder copyrightBuilder15 = copyrightBuilder13.setStart("OASIS");
        java.lang.String str16 = copyrightBuilder13.toString();
        org.apache.rat.configuration.builders.CopyrightBuilder copyrightBuilder18 = copyrightBuilder13.setStart("223f0aba-15d4-49e9-901e-5740c137aebf");
        org.apache.rat.configuration.builders.MatcherRefBuilder matcherRefBuilder19 = org.apache.rat.analysis.IHeaderMatcher.Builder.matcherRef();
        boolean boolean20 = matcherRefBuilder19.hasId();
        org.apache.rat.configuration.builders.CopyrightBuilder copyrightBuilder21 = org.apache.rat.analysis.IHeaderMatcher.Builder.copyright();
        org.apache.rat.configuration.builders.CopyrightBuilder copyrightBuilder23 = copyrightBuilder21.setStart("OASIS");
        java.lang.String str24 = copyrightBuilder21.toString();
        org.apache.rat.configuration.builders.CopyrightBuilder copyrightBuilder26 = copyrightBuilder21.setStart("223f0aba-15d4-49e9-901e-5740c137aebf");
        org.apache.rat.configuration.builders.CopyrightBuilder copyrightBuilder27 = org.apache.rat.analysis.IHeaderMatcher.Builder.copyright();
        org.apache.rat.configuration.builders.CopyrightBuilder copyrightBuilder28 = org.apache.rat.analysis.IHeaderMatcher.Builder.copyright();
        java.lang.String str29 = copyrightBuilder28.toString();
        org.apache.rat.configuration.builders.CopyrightBuilder copyrightBuilder31 = copyrightBuilder28.setEnd(".cvsignore");
        boolean boolean32 = copyrightBuilder28.hasId();
        org.apache.rat.configuration.builders.CopyrightBuilder copyrightBuilder33 = org.apache.rat.analysis.IHeaderMatcher.Builder.copyright();
        java.lang.String str34 = copyrightBuilder33.toString();
        org.apache.rat.configuration.builders.CopyrightBuilder copyrightBuilder36 = copyrightBuilder33.setEnd(".cvsignore");
        boolean boolean37 = copyrightBuilder33.hasId();
        java.lang.String str38 = copyrightBuilder33.toString();
        org.apache.rat.configuration.builders.CopyrightBuilder copyrightBuilder39 = org.apache.rat.analysis.IHeaderMatcher.Builder.copyright();
        org.apache.rat.configuration.builders.CopyrightBuilder copyrightBuilder41 = copyrightBuilder39.setStart("OASIS");
        org.apache.rat.configuration.builders.AnyBuilder anyBuilder42 = org.apache.rat.analysis.IHeaderMatcher.Builder.any();
        org.apache.rat.configuration.builders.MatcherRefBuilder matcherRefBuilder43 = org.apache.rat.analysis.IHeaderMatcher.Builder.matcherRef();
        boolean boolean44 = matcherRefBuilder43.hasId();
        java.util.Map<java.lang.String, org.apache.rat.analysis.IHeaderMatcher> strMap45 = null;
        org.apache.rat.configuration.builders.MatcherRefBuilder matcherRefBuilder46 = matcherRefBuilder43.setMatchers(strMap45);
        org.apache.rat.configuration.builders.CopyrightBuilder copyrightBuilder47 = org.apache.rat.analysis.IHeaderMatcher.Builder.copyright();
        org.apache.rat.configuration.builders.MatcherRefBuilder matcherRefBuilder48 = org.apache.rat.analysis.IHeaderMatcher.Builder.matcherRef();
        boolean boolean49 = matcherRefBuilder48.hasId();
        java.lang.String str50 = matcherRefBuilder48.toString();
        java.util.Map<java.lang.String, org.apache.rat.analysis.IHeaderMatcher> strMap51 = null;
        org.apache.rat.configuration.builders.MatcherRefBuilder matcherRefBuilder52 = matcherRefBuilder48.setMatchers(strMap51);
        org.apache.rat.analysis.IHeaderMatcher.Builder[] builderArray53 = new org.apache.rat.analysis.IHeaderMatcher.Builder[] { matcherRefBuilder8, allBuilder12, copyrightBuilder18, matcherRefBuilder19, copyrightBuilder21, copyrightBuilder27, copyrightBuilder28, copyrightBuilder33, copyrightBuilder39, anyBuilder42, matcherRefBuilder43, copyrightBuilder47, matcherRefBuilder48 };
        java.util.ArrayList<org.apache.rat.analysis.IHeaderMatcher.Builder> builderList54 = new java.util.ArrayList<org.apache.rat.analysis.IHeaderMatcher.Builder>();
        boolean boolean55 = java.util.Collections.addAll((java.util.Collection<org.apache.rat.analysis.IHeaderMatcher.Builder>) builderList54, builderArray53);
        org.apache.rat.configuration.builders.AbstractBuilder abstractBuilder56 = notBuilder6.add((java.util.Collection<org.apache.rat.analysis.IHeaderMatcher.Builder>) builderList54);
        org.apache.rat.configuration.builders.MatcherRefBuilder matcherRefBuilder57 = new org.apache.rat.configuration.builders.MatcherRefBuilder();
        org.apache.rat.analysis.IHeaderMatcher.Builder[] builderArray58 = new org.apache.rat.analysis.IHeaderMatcher.Builder[] { matcherRefBuilder2, anyBuilder5, notBuilder6, matcherRefBuilder57 };
        java.util.ArrayList<org.apache.rat.analysis.IHeaderMatcher.Builder> builderList59 = new java.util.ArrayList<org.apache.rat.analysis.IHeaderMatcher.Builder>();
        boolean boolean60 = java.util.Collections.addAll((java.util.Collection<org.apache.rat.analysis.IHeaderMatcher.Builder>) builderList59, builderArray58);
        org.apache.rat.configuration.builders.AbstractBuilder abstractBuilder61 = allBuilder1.add((java.util.Collection<org.apache.rat.analysis.IHeaderMatcher.Builder>) builderList59);
        defaultLog0.info((java.lang.Object) allBuilder1);
        org.apache.rat.annotation.ApacheV2LicenseAppender apacheV2LicenseAppender64 = new org.apache.rat.annotation.ApacheV2LicenseAppender((org.apache.rat.utils.Log) defaultLog0, "true");
        org.apache.rat.utils.DefaultLog defaultLog65 = org.apache.rat.utils.DefaultLog.INSTANCE;
        org.apache.rat.annotation.ApacheV2LicenseAppender apacheV2LicenseAppender66 = new org.apache.rat.annotation.ApacheV2LicenseAppender((org.apache.rat.utils.Log) defaultLog65);
        org.apache.rat.utils.Log log67 = null;
        org.apache.rat.ReportConfiguration reportConfiguration68 = new org.apache.rat.ReportConfiguration(log67);
        org.apache.rat.report.claim.ClaimStatistic claimStatistic69 = org.apache.rat.Reporter.report(reportConfiguration68);
        org.apache.rat.utils.Log log70 = null;
        org.apache.rat.ReportConfiguration reportConfiguration71 = new org.apache.rat.ReportConfiguration(log70);
        org.apache.rat.report.claim.ClaimStatistic claimStatistic72 = org.apache.rat.Reporter.report(reportConfiguration71);
        org.apache.rat.utils.ReportingSet.Options options73 = org.apache.rat.utils.ReportingSet.Options.OVERWRITE;
        reportConfiguration71.licenseDuplicateOption(options73);
        reportConfiguration68.familyDuplicateOption(options73);
        org.apache.commons.io.function.IOSupplier<java.io.PrintWriter> printWriterIOSupplier76 = reportConfiguration68.getWriter();
        org.apache.rat.utils.Log log77 = null;
        org.apache.rat.ReportConfiguration reportConfiguration78 = new org.apache.rat.ReportConfiguration(log77);
        reportConfiguration78.addApprovedLicenseCategory(".cvsignore");
        org.apache.rat.utils.Log.Level level81 = org.apache.rat.utils.Log.Level.ERROR;
        reportConfiguration78.logFamilyCollisions(level81);
        reportConfiguration68.logFamilyCollisions(level81);
        org.apache.rat.Defaults.Builder builder84 = org.apache.rat.Defaults.builder();
        org.apache.rat.Defaults.Builder builder85 = builder84.noDefault();
        defaultLog65.log(level81, (java.lang.Object) builder84);
        org.apache.rat.analysis.license.FullTextMatchingLicense fullTextMatchingLicense87 = new org.apache.rat.analysis.license.FullTextMatchingLicense();
        fullTextMatchingLicense87.setLicenseFamilyName("hi!");
        java.lang.String str90 = fullTextMatchingLicense87.getLicenseFamilyCategory();
        java.lang.String str91 = fullTextMatchingLicense87.getLicenseFamilyName();
        fullTextMatchingLicense87.setLicenseFamilyName("SpdxBuilder: null");
        fullTextMatchingLicense87.setLicenseFamilyCategory("TMF");
        org.apache.rat.license.ILicenseFamily iLicenseFamily96 = fullTextMatchingLicense87.getLicenseFamily();
        defaultLog0.log(level81, (java.lang.Object) fullTextMatchingLicense87);
        // The following exception was thrown during execution in test generation
        try {
            org.apache.rat.license.ILicense.Builder builder98 = fullTextMatchingLicense87.getLicense();
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: text may not be null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(defaultLog0);
        org.junit.Assert.assertNotNull(matcherRefBuilder2);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "MathcerRefBuilder: null" + "'", str4, "MathcerRefBuilder: null");
        org.junit.Assert.assertNotNull(anyBuilder5);
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "NotBuilder: null" + "'", str7, "NotBuilder: null");
        org.junit.Assert.assertNotNull(matcherRefBuilder8);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertNotNull(matcherRefBuilder11);
        org.junit.Assert.assertNotNull(copyrightBuilder13);
        org.junit.Assert.assertNotNull(copyrightBuilder15);
        org.junit.Assert.assertEquals("'" + str16 + "' != '" + "Copyright Builder: s:OASIS e:null o:null" + "'", str16, "Copyright Builder: s:OASIS e:null o:null");
        org.junit.Assert.assertNotNull(copyrightBuilder18);
        org.junit.Assert.assertNotNull(matcherRefBuilder19);
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + false + "'", boolean20 == false);
        org.junit.Assert.assertNotNull(copyrightBuilder21);
        org.junit.Assert.assertNotNull(copyrightBuilder23);
        org.junit.Assert.assertEquals("'" + str24 + "' != '" + "Copyright Builder: s:OASIS e:null o:null" + "'", str24, "Copyright Builder: s:OASIS e:null o:null");
        org.junit.Assert.assertNotNull(copyrightBuilder26);
        org.junit.Assert.assertNotNull(copyrightBuilder27);
        org.junit.Assert.assertNotNull(copyrightBuilder28);
        org.junit.Assert.assertEquals("'" + str29 + "' != '" + "Copyright Builder: s:null e:null o:null" + "'", str29, "Copyright Builder: s:null e:null o:null");
        org.junit.Assert.assertNotNull(copyrightBuilder31);
        org.junit.Assert.assertTrue("'" + boolean32 + "' != '" + false + "'", boolean32 == false);
        org.junit.Assert.assertNotNull(copyrightBuilder33);
        org.junit.Assert.assertEquals("'" + str34 + "' != '" + "Copyright Builder: s:null e:null o:null" + "'", str34, "Copyright Builder: s:null e:null o:null");
        org.junit.Assert.assertNotNull(copyrightBuilder36);
        org.junit.Assert.assertTrue("'" + boolean37 + "' != '" + false + "'", boolean37 == false);
        org.junit.Assert.assertEquals("'" + str38 + "' != '" + "Copyright Builder: s:null e:.cvsignore o:null" + "'", str38, "Copyright Builder: s:null e:.cvsignore o:null");
        org.junit.Assert.assertNotNull(copyrightBuilder39);
        org.junit.Assert.assertNotNull(copyrightBuilder41);
        org.junit.Assert.assertNotNull(anyBuilder42);
        org.junit.Assert.assertNotNull(matcherRefBuilder43);
        org.junit.Assert.assertTrue("'" + boolean44 + "' != '" + false + "'", boolean44 == false);
        org.junit.Assert.assertNotNull(matcherRefBuilder46);
        org.junit.Assert.assertNotNull(copyrightBuilder47);
        org.junit.Assert.assertNotNull(matcherRefBuilder48);
        org.junit.Assert.assertTrue("'" + boolean49 + "' != '" + false + "'", boolean49 == false);
        org.junit.Assert.assertEquals("'" + str50 + "' != '" + "MathcerRefBuilder: null" + "'", str50, "MathcerRefBuilder: null");
        org.junit.Assert.assertNotNull(matcherRefBuilder52);
        org.junit.Assert.assertNotNull(builderArray53);
        org.junit.Assert.assertTrue("'" + boolean55 + "' != '" + true + "'", boolean55 == true);
        org.junit.Assert.assertNotNull(abstractBuilder56);
        org.junit.Assert.assertNotNull(builderArray58);
        org.junit.Assert.assertTrue("'" + boolean60 + "' != '" + true + "'", boolean60 == true);
        org.junit.Assert.assertNotNull(abstractBuilder61);
        org.junit.Assert.assertNotNull(defaultLog65);
        org.junit.Assert.assertNull(claimStatistic69);
        org.junit.Assert.assertNull(claimStatistic72);
        org.junit.Assert.assertTrue("'" + options73 + "' != '" + org.apache.rat.utils.ReportingSet.Options.OVERWRITE + "'", options73.equals(org.apache.rat.utils.ReportingSet.Options.OVERWRITE));
        org.junit.Assert.assertNotNull(printWriterIOSupplier76);
        org.junit.Assert.assertTrue("'" + level81 + "' != '" + org.apache.rat.utils.Log.Level.ERROR + "'", level81.equals(org.apache.rat.utils.Log.Level.ERROR));
        org.junit.Assert.assertNotNull(builder84);
        org.junit.Assert.assertNotNull(builder85);
        org.junit.Assert.assertNull(str90);
        org.junit.Assert.assertEquals("'" + str91 + "' != '" + "hi!" + "'", str91, "hi!");
        org.junit.Assert.assertNotNull(iLicenseFamily96);
    }

    @Test
    public void test12983() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest25.test12983");
        org.apache.rat.configuration.builders.MatcherRefBuilder matcherRefBuilder0 = org.apache.rat.analysis.IHeaderMatcher.Builder.matcherRef();
        boolean boolean1 = matcherRefBuilder0.hasId();
        boolean boolean2 = matcherRefBuilder0.hasId();
        org.apache.rat.configuration.builders.MatcherRefBuilder matcherRefBuilder4 = matcherRefBuilder0.setRefId("");
        org.apache.rat.configuration.builders.MatcherRefBuilder matcherRefBuilder6 = matcherRefBuilder4.setRefId("01febb9b-15b8-4e6d-baab-05a93d5dc033");
        org.junit.Assert.assertNotNull(matcherRefBuilder0);
        org.junit.Assert.assertTrue("'" + boolean1 + "' != '" + false + "'", boolean1 == false);
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + false + "'", boolean2 == false);
        org.junit.Assert.assertNotNull(matcherRefBuilder4);
        org.junit.Assert.assertNotNull(matcherRefBuilder6);
    }

    @Test
    public void test12984() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest25.test12984");
        java.util.regex.Pattern pattern1 = null;
        org.apache.rat.analysis.matchers.SimpleRegexMatcher simpleRegexMatcher2 = new org.apache.rat.analysis.matchers.SimpleRegexMatcher("7af67e73-76a3-4497-ab9c-98701437b5de", pattern1);
        java.lang.String str3 = simpleRegexMatcher2.getId();
        org.junit.Assert.assertEquals("'" + str3 + "' != '" + "7af67e73-76a3-4497-ab9c-98701437b5de" + "'", str3, "7af67e73-76a3-4497-ab9c-98701437b5de");
    }

    @Test
    public void test12985() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest25.test12985");
        org.apache.rat.utils.Log log0 = null;
        org.apache.rat.ReportConfiguration reportConfiguration1 = new org.apache.rat.ReportConfiguration(log0);
        org.apache.rat.report.claim.ClaimStatistic claimStatistic2 = org.apache.rat.Reporter.report(reportConfiguration1);
        org.apache.rat.utils.Log log3 = null;
        org.apache.rat.ReportConfiguration reportConfiguration4 = new org.apache.rat.ReportConfiguration(log3);
        org.apache.rat.report.claim.ClaimStatistic claimStatistic5 = org.apache.rat.Reporter.report(reportConfiguration4);
        org.apache.rat.utils.ReportingSet.Options options6 = org.apache.rat.utils.ReportingSet.Options.OVERWRITE;
        reportConfiguration4.licenseDuplicateOption(options6);
        reportConfiguration1.familyDuplicateOption(options6);
        org.apache.commons.io.function.IOSupplier<java.io.PrintWriter> printWriterIOSupplier9 = reportConfiguration1.getWriter();
        org.apache.rat.utils.Log log10 = null;
        org.apache.rat.ReportConfiguration reportConfiguration11 = new org.apache.rat.ReportConfiguration(log10);
        reportConfiguration11.addApprovedLicenseCategory(".cvsignore");
        org.apache.rat.utils.Log.Level level14 = org.apache.rat.utils.Log.Level.ERROR;
        reportConfiguration11.logFamilyCollisions(level14);
        reportConfiguration1.logFamilyCollisions(level14);
        org.apache.rat.utils.Log log17 = null;
        org.apache.rat.ReportConfiguration reportConfiguration18 = new org.apache.rat.ReportConfiguration(log17);
        reportConfiguration18.addApprovedLicenseCategory(".cvsignore");
        org.apache.rat.utils.Log log21 = null;
        org.apache.rat.ReportConfiguration reportConfiguration22 = new org.apache.rat.ReportConfiguration(log21);
        java.io.FilenameFilter filenameFilter23 = reportConfiguration22.getInputFileFilter();
        org.apache.rat.license.LicenseSetFactory.LicenseFilter licenseFilter24 = org.apache.rat.license.LicenseSetFactory.LicenseFilter.all;
        java.util.SortedSet<org.apache.rat.license.ILicense> iLicenseSet25 = reportConfiguration22.getLicenses(licenseFilter24);
        reportConfiguration18.addLicensesIfNotPresent((java.util.Collection<org.apache.rat.license.ILicense>) iLicenseSet25);
        java.io.FilenameFilter filenameFilter27 = reportConfiguration18.getInputFileFilter();
        org.apache.rat.utils.Log log28 = null;
        org.apache.rat.ReportConfiguration reportConfiguration29 = new org.apache.rat.ReportConfiguration(log28);
        java.io.FilenameFilter filenameFilter30 = reportConfiguration29.getInputFileFilter();
        org.apache.rat.license.LicenseSetFactory.LicenseFilter licenseFilter31 = org.apache.rat.license.LicenseSetFactory.LicenseFilter.all;
        java.util.SortedSet<org.apache.rat.license.ILicense> iLicenseSet32 = reportConfiguration29.getLicenses(licenseFilter31);
        org.apache.rat.config.AddLicenseHeaders addLicenseHeaders33 = org.apache.rat.config.AddLicenseHeaders.FALSE;
        reportConfiguration29.setAddLicenseHeaders(addLicenseHeaders33);
        org.apache.rat.utils.Log log35 = null;
        org.apache.rat.ReportConfiguration reportConfiguration36 = new org.apache.rat.ReportConfiguration(log35);
        org.apache.rat.report.claim.ClaimStatistic claimStatistic37 = org.apache.rat.Reporter.report(reportConfiguration36);
        org.apache.rat.license.LicenseSetFactory.LicenseFilter licenseFilter38 = org.apache.rat.license.LicenseSetFactory.LicenseFilter.all;
        org.apache.rat.Reporter.listLicenses(reportConfiguration36, licenseFilter38);
        org.apache.rat.Reporter.listLicenses(reportConfiguration29, licenseFilter38);
        org.apache.rat.utils.Log log41 = null;
        org.apache.rat.ReportConfiguration reportConfiguration42 = new org.apache.rat.ReportConfiguration(log41);
        java.io.FilenameFilter filenameFilter43 = reportConfiguration42.getInputFileFilter();
        org.apache.rat.license.LicenseSetFactory.LicenseFilter licenseFilter44 = org.apache.rat.license.LicenseSetFactory.LicenseFilter.all;
        java.util.SortedSet<org.apache.rat.license.ILicense> iLicenseSet45 = reportConfiguration42.getLicenses(licenseFilter44);
        org.apache.rat.config.AddLicenseHeaders addLicenseHeaders46 = org.apache.rat.config.AddLicenseHeaders.FALSE;
        reportConfiguration42.setAddLicenseHeaders(addLicenseHeaders46);
        org.apache.rat.utils.Log log48 = null;
        org.apache.rat.ReportConfiguration reportConfiguration49 = new org.apache.rat.ReportConfiguration(log48);
        org.apache.rat.report.claim.ClaimStatistic claimStatistic50 = org.apache.rat.Reporter.report(reportConfiguration49);
        org.apache.rat.license.LicenseSetFactory.LicenseFilter licenseFilter51 = org.apache.rat.license.LicenseSetFactory.LicenseFilter.all;
        org.apache.rat.Reporter.listLicenses(reportConfiguration49, licenseFilter51);
        org.apache.rat.Reporter.listLicenses(reportConfiguration42, licenseFilter51);
        java.util.SortedSet<org.apache.rat.license.ILicenseFamily> iLicenseFamilySet54 = reportConfiguration29.getLicenseFamilies(licenseFilter51);
        org.apache.rat.Reporter.listLicenseFamilies(reportConfiguration18, licenseFilter51);
        java.util.SortedSet<org.apache.rat.license.ILicenseFamily> iLicenseFamilySet57 = org.apache.rat.license.LicenseFamilySetFactory.emptyLicenseFamilySet();
        org.apache.rat.license.ILicenseFamily iLicenseFamily58 = org.apache.rat.license.LicenseFamilySetFactory.search("http://org/apache/rat/meta-data", iLicenseFamilySet57);
        org.apache.rat.policy.DefaultPolicy defaultPolicy59 = new org.apache.rat.policy.DefaultPolicy((java.util.Collection<org.apache.rat.license.ILicenseFamily>) iLicenseFamilySet57);
        org.apache.rat.api.Document document60 = null;
        defaultPolicy59.analyse(document60);
        org.apache.rat.analysis.license.FullTextMatchingLicense fullTextMatchingLicense62 = new org.apache.rat.analysis.license.FullTextMatchingLicense();
        fullTextMatchingLicense62.setLicenseFamilyName("hi!");
        java.lang.String str65 = fullTextMatchingLicense62.getLicenseFamilyCategory();
        java.lang.String str66 = fullTextMatchingLicense62.getLicenseFamilyName();
        fullTextMatchingLicense62.setLicenseFamilyName("SpdxBuilder: null");
        fullTextMatchingLicense62.setLicenseFamilyCategory("TMF");
        org.apache.rat.license.ILicenseFamily iLicenseFamily71 = fullTextMatchingLicense62.getLicenseFamily();
        java.lang.String str72 = iLicenseFamily71.getFamilyName();
        java.lang.String str73 = iLicenseFamily71.getFamilyName();
        org.apache.rat.license.ILicenseFamilyBuilder iLicenseFamilyBuilder74 = new org.apache.rat.license.ILicenseFamilyBuilder();
        java.lang.String str75 = iLicenseFamilyBuilder74.getCategory();
        org.apache.rat.license.ILicenseFamily.Builder builder77 = iLicenseFamilyBuilder74.setLicenseFamilyCategory("AL   ");
        org.apache.rat.license.ILicenseFamily.Builder builder79 = iLicenseFamilyBuilder74.setLicenseFamilyCategory("MIT  ");
        org.apache.rat.license.ILicenseFamily.Builder builder81 = iLicenseFamilyBuilder74.setLicenseFamilyName("4a00cf7d-fe76-423e-917e-b03bbae6b8a5");
        java.lang.String str82 = iLicenseFamilyBuilder74.getCategory();
        org.apache.rat.license.ILicenseFamily.Builder builder84 = iLicenseFamilyBuilder74.setLicenseFamilyName("8ecb8cce-06e4-400f-84d9-ad1cf6289fda");
        org.apache.rat.license.ILicenseFamily iLicenseFamily85 = iLicenseFamilyBuilder74.build();
        int int86 = iLicenseFamily71.compareTo(iLicenseFamily85);
        defaultPolicy59.add(iLicenseFamily85);
        reportConfiguration18.addFamily(iLicenseFamily85);
        reportConfiguration1.addFamily(iLicenseFamily85);
        java.lang.String str90 = iLicenseFamily85.getFamilyCategory();
        java.lang.String str91 = iLicenseFamily85.getFamilyCategory();
        org.junit.Assert.assertNull(claimStatistic2);
        org.junit.Assert.assertNull(claimStatistic5);
        org.junit.Assert.assertTrue("'" + options6 + "' != '" + org.apache.rat.utils.ReportingSet.Options.OVERWRITE + "'", options6.equals(org.apache.rat.utils.ReportingSet.Options.OVERWRITE));
        org.junit.Assert.assertNotNull(printWriterIOSupplier9);
        org.junit.Assert.assertTrue("'" + level14 + "' != '" + org.apache.rat.utils.Log.Level.ERROR + "'", level14.equals(org.apache.rat.utils.Log.Level.ERROR));
        org.junit.Assert.assertNull(filenameFilter23);
        org.junit.Assert.assertTrue("'" + licenseFilter24 + "' != '" + org.apache.rat.license.LicenseSetFactory.LicenseFilter.all + "'", licenseFilter24.equals(org.apache.rat.license.LicenseSetFactory.LicenseFilter.all));
        org.junit.Assert.assertNotNull(iLicenseSet25);
        org.junit.Assert.assertNull(filenameFilter27);
        org.junit.Assert.assertNull(filenameFilter30);
        org.junit.Assert.assertTrue("'" + licenseFilter31 + "' != '" + org.apache.rat.license.LicenseSetFactory.LicenseFilter.all + "'", licenseFilter31.equals(org.apache.rat.license.LicenseSetFactory.LicenseFilter.all));
        org.junit.Assert.assertNotNull(iLicenseSet32);
        org.junit.Assert.assertTrue("'" + addLicenseHeaders33 + "' != '" + org.apache.rat.config.AddLicenseHeaders.FALSE + "'", addLicenseHeaders33.equals(org.apache.rat.config.AddLicenseHeaders.FALSE));
        org.junit.Assert.assertNull(claimStatistic37);
        org.junit.Assert.assertTrue("'" + licenseFilter38 + "' != '" + org.apache.rat.license.LicenseSetFactory.LicenseFilter.all + "'", licenseFilter38.equals(org.apache.rat.license.LicenseSetFactory.LicenseFilter.all));
        org.junit.Assert.assertNull(filenameFilter43);
        org.junit.Assert.assertTrue("'" + licenseFilter44 + "' != '" + org.apache.rat.license.LicenseSetFactory.LicenseFilter.all + "'", licenseFilter44.equals(org.apache.rat.license.LicenseSetFactory.LicenseFilter.all));
        org.junit.Assert.assertNotNull(iLicenseSet45);
        org.junit.Assert.assertTrue("'" + addLicenseHeaders46 + "' != '" + org.apache.rat.config.AddLicenseHeaders.FALSE + "'", addLicenseHeaders46.equals(org.apache.rat.config.AddLicenseHeaders.FALSE));
        org.junit.Assert.assertNull(claimStatistic50);
        org.junit.Assert.assertTrue("'" + licenseFilter51 + "' != '" + org.apache.rat.license.LicenseSetFactory.LicenseFilter.all + "'", licenseFilter51.equals(org.apache.rat.license.LicenseSetFactory.LicenseFilter.all));
        org.junit.Assert.assertNotNull(iLicenseFamilySet54);
        org.junit.Assert.assertNotNull(iLicenseFamilySet57);
        org.junit.Assert.assertNull(iLicenseFamily58);
        org.junit.Assert.assertNull(str65);
        org.junit.Assert.assertEquals("'" + str66 + "' != '" + "hi!" + "'", str66, "hi!");
        org.junit.Assert.assertNotNull(iLicenseFamily71);
        org.junit.Assert.assertEquals("'" + str72 + "' != '" + "SpdxBuilder: null" + "'", str72, "SpdxBuilder: null");
        org.junit.Assert.assertEquals("'" + str73 + "' != '" + "SpdxBuilder: null" + "'", str73, "SpdxBuilder: null");
        org.junit.Assert.assertNull(str75);
        org.junit.Assert.assertNotNull(builder77);
        org.junit.Assert.assertNotNull(builder79);
        org.junit.Assert.assertNotNull(builder81);
        org.junit.Assert.assertEquals("'" + str82 + "' != '" + "MIT  " + "'", str82, "MIT  ");
        org.junit.Assert.assertNotNull(builder84);
        org.junit.Assert.assertNotNull(iLicenseFamily85);
        org.junit.Assert.assertTrue("'" + int86 + "' != '" + 7 + "'", int86 == 7);
        org.junit.Assert.assertEquals("'" + str90 + "' != '" + "MIT  " + "'", str90, "MIT  ");
        org.junit.Assert.assertEquals("'" + str91 + "' != '" + "MIT  " + "'", str91, "MIT  ");
    }

    @Test
    public void test12986() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest25.test12986");
        org.apache.rat.utils.ReportingSet<java.lang.String> strSet0 = new org.apache.rat.utils.ReportingSet<java.lang.String>();
        org.apache.rat.utils.ReportingSet<java.lang.String> strSet2 = strSet0.tailSet("hi!");
        org.apache.rat.configuration.LicenseReader[] licenseReaderArray3 = new org.apache.rat.configuration.LicenseReader[] {};
        org.apache.rat.configuration.LicenseReader[] licenseReaderArray4 = strSet2.toArray(licenseReaderArray3);
        org.apache.rat.utils.Log log5 = null;
        org.apache.rat.ReportConfiguration reportConfiguration6 = new org.apache.rat.ReportConfiguration(log5);
        org.apache.rat.report.claim.ClaimStatistic claimStatistic7 = org.apache.rat.Reporter.report(reportConfiguration6);
        org.apache.rat.utils.Log log8 = null;
        org.apache.rat.ReportConfiguration reportConfiguration9 = new org.apache.rat.ReportConfiguration(log8);
        org.apache.rat.report.claim.ClaimStatistic claimStatistic10 = org.apache.rat.Reporter.report(reportConfiguration9);
        org.apache.rat.utils.ReportingSet.Options options11 = org.apache.rat.utils.ReportingSet.Options.OVERWRITE;
        reportConfiguration9.licenseDuplicateOption(options11);
        reportConfiguration6.familyDuplicateOption(options11);
        org.apache.rat.utils.ReportingSet<java.lang.String> strSet14 = strSet2.setDuplicateOption(options11);
        boolean boolean16 = strSet2.remove((java.lang.Object) "28dca3d8-d654-4253-aa51-1b1f7affbc28");
        java.util.stream.Stream<java.lang.String> strStream17 = strSet2.stream();
        org.junit.Assert.assertNotNull(strSet2);
        org.junit.Assert.assertNotNull(licenseReaderArray3);
        org.junit.Assert.assertNotNull(licenseReaderArray4);
        org.junit.Assert.assertNull(claimStatistic7);
        org.junit.Assert.assertNull(claimStatistic10);
        org.junit.Assert.assertTrue("'" + options11 + "' != '" + org.apache.rat.utils.ReportingSet.Options.OVERWRITE + "'", options11.equals(org.apache.rat.utils.ReportingSet.Options.OVERWRITE));
        org.junit.Assert.assertNotNull(strSet14);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
        org.junit.Assert.assertNotNull(strStream17);
    }

    @Test
    public void test12987() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest25.test12987");
        org.apache.rat.api.MetaData metaData0 = new org.apache.rat.api.MetaData();
        java.lang.String str2 = metaData0.value("COMMON DEVELOPMENT AND DISTRIBUTION LICENSE Version 1.0");
        java.lang.String str4 = metaData0.value("W3C Document Copyright");
        boolean boolean6 = metaData0.clear("hi!");
        metaData0.clear();
        org.apache.rat.utils.Log log8 = null;
        org.apache.rat.ReportConfiguration reportConfiguration9 = new org.apache.rat.ReportConfiguration(log8);
        java.io.FilenameFilter filenameFilter10 = reportConfiguration9.getInputFileFilter();
        org.apache.rat.license.LicenseSetFactory.LicenseFilter licenseFilter11 = org.apache.rat.license.LicenseSetFactory.LicenseFilter.all;
        java.util.SortedSet<org.apache.rat.license.ILicense> iLicenseSet12 = reportConfiguration9.getLicenses(licenseFilter11);
        org.apache.rat.config.AddLicenseHeaders addLicenseHeaders13 = org.apache.rat.config.AddLicenseHeaders.FALSE;
        reportConfiguration9.setAddLicenseHeaders(addLicenseHeaders13);
        org.apache.rat.utils.Log log15 = null;
        org.apache.rat.ReportConfiguration reportConfiguration16 = new org.apache.rat.ReportConfiguration(log15);
        org.apache.rat.report.claim.ClaimStatistic claimStatistic17 = org.apache.rat.Reporter.report(reportConfiguration16);
        org.apache.rat.license.LicenseSetFactory.LicenseFilter licenseFilter18 = org.apache.rat.license.LicenseSetFactory.LicenseFilter.all;
        org.apache.rat.Reporter.listLicenses(reportConfiguration16, licenseFilter18);
        org.apache.rat.Reporter.listLicenses(reportConfiguration9, licenseFilter18);
        org.apache.rat.utils.Log log21 = null;
        org.apache.rat.ReportConfiguration reportConfiguration22 = new org.apache.rat.ReportConfiguration(log21);
        java.io.FilenameFilter filenameFilter23 = reportConfiguration22.getInputFileFilter();
        org.apache.rat.license.LicenseSetFactory.LicenseFilter licenseFilter24 = org.apache.rat.license.LicenseSetFactory.LicenseFilter.all;
        java.util.SortedSet<org.apache.rat.license.ILicense> iLicenseSet25 = reportConfiguration22.getLicenses(licenseFilter24);
        org.apache.rat.config.AddLicenseHeaders addLicenseHeaders26 = org.apache.rat.config.AddLicenseHeaders.FALSE;
        reportConfiguration22.setAddLicenseHeaders(addLicenseHeaders26);
        org.apache.rat.utils.Log log28 = null;
        org.apache.rat.ReportConfiguration reportConfiguration29 = new org.apache.rat.ReportConfiguration(log28);
        org.apache.rat.report.claim.ClaimStatistic claimStatistic30 = org.apache.rat.Reporter.report(reportConfiguration29);
        org.apache.rat.license.LicenseSetFactory.LicenseFilter licenseFilter31 = org.apache.rat.license.LicenseSetFactory.LicenseFilter.all;
        org.apache.rat.Reporter.listLicenses(reportConfiguration29, licenseFilter31);
        org.apache.rat.Reporter.listLicenses(reportConfiguration22, licenseFilter31);
        org.apache.rat.Reporter.listLicenses(reportConfiguration9, licenseFilter31);
        java.io.FilenameFilter filenameFilter35 = reportConfiguration9.getInputFileFilter();
        reportConfiguration9.setStyleReport(false);
        org.apache.rat.report.IReportable iReportable38 = null;
        reportConfiguration9.setReportable(iReportable38);
        org.apache.rat.Defaults.Builder builder41 = org.apache.rat.Defaults.builder();
        org.apache.rat.Defaults defaults42 = builder41.build();
        org.apache.rat.utils.Log log43 = null;
        org.apache.rat.ReportConfiguration reportConfiguration44 = new org.apache.rat.ReportConfiguration(log43);
        java.io.FilenameFilter filenameFilter45 = reportConfiguration44.getInputFileFilter();
        org.apache.rat.license.LicenseSetFactory.LicenseFilter licenseFilter46 = org.apache.rat.license.LicenseSetFactory.LicenseFilter.all;
        java.util.SortedSet<org.apache.rat.license.ILicense> iLicenseSet47 = reportConfiguration44.getLicenses(licenseFilter46);
        org.apache.rat.config.AddLicenseHeaders addLicenseHeaders48 = org.apache.rat.config.AddLicenseHeaders.FALSE;
        reportConfiguration44.setAddLicenseHeaders(addLicenseHeaders48);
        org.apache.rat.utils.Log log50 = null;
        org.apache.rat.ReportConfiguration reportConfiguration51 = new org.apache.rat.ReportConfiguration(log50);
        org.apache.rat.report.claim.ClaimStatistic claimStatistic52 = org.apache.rat.Reporter.report(reportConfiguration51);
        org.apache.rat.license.LicenseSetFactory.LicenseFilter licenseFilter53 = org.apache.rat.license.LicenseSetFactory.LicenseFilter.all;
        org.apache.rat.Reporter.listLicenses(reportConfiguration51, licenseFilter53);
        org.apache.rat.Reporter.listLicenses(reportConfiguration44, licenseFilter53);
        org.apache.rat.utils.Log log56 = null;
        org.apache.rat.ReportConfiguration reportConfiguration57 = new org.apache.rat.ReportConfiguration(log56);
        java.io.FilenameFilter filenameFilter58 = reportConfiguration57.getInputFileFilter();
        org.apache.rat.license.LicenseSetFactory.LicenseFilter licenseFilter59 = org.apache.rat.license.LicenseSetFactory.LicenseFilter.all;
        java.util.SortedSet<org.apache.rat.license.ILicense> iLicenseSet60 = reportConfiguration57.getLicenses(licenseFilter59);
        org.apache.rat.config.AddLicenseHeaders addLicenseHeaders61 = org.apache.rat.config.AddLicenseHeaders.FALSE;
        reportConfiguration57.setAddLicenseHeaders(addLicenseHeaders61);
        org.apache.rat.utils.Log log63 = null;
        org.apache.rat.ReportConfiguration reportConfiguration64 = new org.apache.rat.ReportConfiguration(log63);
        org.apache.rat.report.claim.ClaimStatistic claimStatistic65 = org.apache.rat.Reporter.report(reportConfiguration64);
        org.apache.rat.license.LicenseSetFactory.LicenseFilter licenseFilter66 = org.apache.rat.license.LicenseSetFactory.LicenseFilter.all;
        org.apache.rat.Reporter.listLicenses(reportConfiguration64, licenseFilter66);
        org.apache.rat.Reporter.listLicenses(reportConfiguration57, licenseFilter66);
        java.util.SortedSet<org.apache.rat.license.ILicenseFamily> iLicenseFamilySet69 = reportConfiguration44.getLicenseFamilies(licenseFilter66);
        java.util.SortedSet<org.apache.rat.license.ILicense> iLicenseSet70 = defaults42.getLicenses(licenseFilter66);
        org.apache.rat.utils.ReportingSet<org.apache.rat.license.ILicense> iLicenseSet71 = new org.apache.rat.utils.ReportingSet<org.apache.rat.license.ILicense>(iLicenseSet70);
        org.apache.rat.license.ILicense iLicense72 = org.apache.rat.license.LicenseSetFactory.search("TMF", iLicenseSet70);
        reportConfiguration9.addLicense(iLicense72);
        java.lang.String str74 = iLicense72.derivedFrom();
        org.apache.rat.license.ILicenseFamily iLicenseFamily75 = iLicense72.getLicenseFamily();
        org.apache.rat.license.ILicenseFamily iLicenseFamily76 = iLicense72.getLicenseFamily();
        org.apache.rat.license.ILicenseFamily iLicenseFamily77 = iLicense72.getLicenseFamily();
        metaData0.reportOnLicense(iLicense72);
        java.util.Collection<org.apache.rat.api.MetaData.Datum> datumCollection79 = metaData0.getData();
        java.lang.String[] strArray85 = new java.lang.String[] { "http://org/apache/rat/meta-data#LicenseFamilyCategory", "Datum [ name ='http://org/apache/rat/meta-data#LicenseFamilyCategory',value ='GPL1  ']", "MANIFEST.MF", "AllBuilder:", "The MIT License" };
        org.apache.rat.utils.ReportingSet<java.lang.String> strSet86 = new org.apache.rat.utils.ReportingSet<java.lang.String>();
        boolean boolean87 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strSet86, strArray85);
        boolean boolean89 = strSet86.addIfNotPresent("http://org/apache/rat/meta-data#LicenseFamilyName");
        org.apache.rat.api.MetaData.Datum datum90 = org.apache.rat.api.MetaData.RAT_LICENSE_FAMILY_NAME_DATUM_GPL_VERSION_2;
        boolean boolean91 = strSet86.equals((java.lang.Object) datum90);
        metaData0.set(datum90);
        metaData0.clear();
        org.junit.Assert.assertNull(str2);
        org.junit.Assert.assertNull(str4);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertNull(filenameFilter10);
        org.junit.Assert.assertTrue("'" + licenseFilter11 + "' != '" + org.apache.rat.license.LicenseSetFactory.LicenseFilter.all + "'", licenseFilter11.equals(org.apache.rat.license.LicenseSetFactory.LicenseFilter.all));
        org.junit.Assert.assertNotNull(iLicenseSet12);
        org.junit.Assert.assertTrue("'" + addLicenseHeaders13 + "' != '" + org.apache.rat.config.AddLicenseHeaders.FALSE + "'", addLicenseHeaders13.equals(org.apache.rat.config.AddLicenseHeaders.FALSE));
        org.junit.Assert.assertNull(claimStatistic17);
        org.junit.Assert.assertTrue("'" + licenseFilter18 + "' != '" + org.apache.rat.license.LicenseSetFactory.LicenseFilter.all + "'", licenseFilter18.equals(org.apache.rat.license.LicenseSetFactory.LicenseFilter.all));
        org.junit.Assert.assertNull(filenameFilter23);
        org.junit.Assert.assertTrue("'" + licenseFilter24 + "' != '" + org.apache.rat.license.LicenseSetFactory.LicenseFilter.all + "'", licenseFilter24.equals(org.apache.rat.license.LicenseSetFactory.LicenseFilter.all));
        org.junit.Assert.assertNotNull(iLicenseSet25);
        org.junit.Assert.assertTrue("'" + addLicenseHeaders26 + "' != '" + org.apache.rat.config.AddLicenseHeaders.FALSE + "'", addLicenseHeaders26.equals(org.apache.rat.config.AddLicenseHeaders.FALSE));
        org.junit.Assert.assertNull(claimStatistic30);
        org.junit.Assert.assertTrue("'" + licenseFilter31 + "' != '" + org.apache.rat.license.LicenseSetFactory.LicenseFilter.all + "'", licenseFilter31.equals(org.apache.rat.license.LicenseSetFactory.LicenseFilter.all));
        org.junit.Assert.assertNull(filenameFilter35);
        org.junit.Assert.assertNotNull(builder41);
        org.junit.Assert.assertNotNull(defaults42);
        org.junit.Assert.assertNull(filenameFilter45);
        org.junit.Assert.assertTrue("'" + licenseFilter46 + "' != '" + org.apache.rat.license.LicenseSetFactory.LicenseFilter.all + "'", licenseFilter46.equals(org.apache.rat.license.LicenseSetFactory.LicenseFilter.all));
        org.junit.Assert.assertNotNull(iLicenseSet47);
        org.junit.Assert.assertTrue("'" + addLicenseHeaders48 + "' != '" + org.apache.rat.config.AddLicenseHeaders.FALSE + "'", addLicenseHeaders48.equals(org.apache.rat.config.AddLicenseHeaders.FALSE));
        org.junit.Assert.assertNull(claimStatistic52);
        org.junit.Assert.assertTrue("'" + licenseFilter53 + "' != '" + org.apache.rat.license.LicenseSetFactory.LicenseFilter.all + "'", licenseFilter53.equals(org.apache.rat.license.LicenseSetFactory.LicenseFilter.all));
        org.junit.Assert.assertNull(filenameFilter58);
        org.junit.Assert.assertTrue("'" + licenseFilter59 + "' != '" + org.apache.rat.license.LicenseSetFactory.LicenseFilter.all + "'", licenseFilter59.equals(org.apache.rat.license.LicenseSetFactory.LicenseFilter.all));
        org.junit.Assert.assertNotNull(iLicenseSet60);
        org.junit.Assert.assertTrue("'" + addLicenseHeaders61 + "' != '" + org.apache.rat.config.AddLicenseHeaders.FALSE + "'", addLicenseHeaders61.equals(org.apache.rat.config.AddLicenseHeaders.FALSE));
        org.junit.Assert.assertNull(claimStatistic65);
        org.junit.Assert.assertTrue("'" + licenseFilter66 + "' != '" + org.apache.rat.license.LicenseSetFactory.LicenseFilter.all + "'", licenseFilter66.equals(org.apache.rat.license.LicenseSetFactory.LicenseFilter.all));
        org.junit.Assert.assertNotNull(iLicenseFamilySet69);
        org.junit.Assert.assertNotNull(iLicenseSet70);
        org.junit.Assert.assertNotNull(iLicense72);
        org.junit.Assert.assertEquals("'" + str74 + "' != '" + "BSD-3" + "'", str74, "BSD-3");
        org.junit.Assert.assertNotNull(iLicenseFamily75);
        org.junit.Assert.assertNotNull(iLicenseFamily76);
        org.junit.Assert.assertNotNull(iLicenseFamily77);
        org.junit.Assert.assertNotNull(datumCollection79);
        org.junit.Assert.assertNotNull(strArray85);
        org.junit.Assert.assertTrue("'" + boolean87 + "' != '" + true + "'", boolean87 == true);
        org.junit.Assert.assertTrue("'" + boolean89 + "' != '" + true + "'", boolean89 == true);
        org.junit.Assert.assertNotNull(datum90);
        org.junit.Assert.assertTrue("'" + boolean91 + "' != '" + false + "'", boolean91 == false);
    }

    @Test
    public void test12988() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest25.test12988");
        org.apache.rat.analysis.license.FullTextMatchingLicense fullTextMatchingLicense0 = new org.apache.rat.analysis.license.FullTextMatchingLicense();
        fullTextMatchingLicense0.setLicenseFamilyName("hi!");
        java.lang.String str3 = fullTextMatchingLicense0.getLicenseFamilyCategory();
        java.lang.String str4 = fullTextMatchingLicense0.getLicenseFamilyName();
        fullTextMatchingLicense0.setFullText("AnyBuilder:\nAllBuilder:");
        java.lang.String str7 = fullTextMatchingLicense0.getLicenseFamilyName();
        java.lang.String str8 = fullTextMatchingLicense0.getLicenseFamilyCategory();
        org.apache.rat.license.ILicense.Builder builder9 = fullTextMatchingLicense0.getLicense();
        fullTextMatchingLicense0.setFullText("336987e8-9ddb-46d8-8c1c-67ab8c91d714");
        fullTextMatchingLicense0.setFullText("fe6be119881745678d33352365bfa7c8");
        org.apache.rat.license.ILicense.Builder builder14 = fullTextMatchingLicense0.getLicense();
        org.apache.rat.license.ILicense.Builder builder15 = fullTextMatchingLicense0.getLicense();
        java.lang.String str16 = fullTextMatchingLicense0.getLicenseFamilyCategory();
        fullTextMatchingLicense0.setLicenseFamilyCategory("2ea856f6-1011-4ed4-a263-a91beac9bcbf");
        org.junit.Assert.assertNull(str3);
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "hi!" + "'", str4, "hi!");
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "hi!" + "'", str7, "hi!");
        org.junit.Assert.assertNull(str8);
        org.junit.Assert.assertNotNull(builder9);
        org.junit.Assert.assertNotNull(builder14);
        org.junit.Assert.assertNotNull(builder15);
        org.junit.Assert.assertNull(str16);
    }

    @Test
    public void test12989() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest25.test12989");
        java.io.Writer writer0 = null;
        org.apache.rat.report.xml.writer.impl.base.XmlWriter xmlWriter1 = new org.apache.rat.report.xml.writer.impl.base.XmlWriter(writer0);
        org.apache.rat.report.claim.impl.xml.SimpleXmlClaimReporter simpleXmlClaimReporter2 = new org.apache.rat.report.claim.impl.xml.SimpleXmlClaimReporter((org.apache.rat.report.xml.writer.IXmlWriter) xmlWriter1);
        org.apache.rat.report.claim.impl.xml.SimpleXmlClaimReporter simpleXmlClaimReporter3 = new org.apache.rat.report.claim.impl.xml.SimpleXmlClaimReporter((org.apache.rat.report.xml.writer.IXmlWriter) xmlWriter1);
        org.apache.rat.report.claim.impl.xml.SimpleXmlClaimReporter simpleXmlClaimReporter4 = new org.apache.rat.report.claim.impl.xml.SimpleXmlClaimReporter((org.apache.rat.report.xml.writer.IXmlWriter) xmlWriter1);
        org.apache.rat.report.claim.impl.xml.SimpleXmlClaimReporter simpleXmlClaimReporter5 = new org.apache.rat.report.claim.impl.xml.SimpleXmlClaimReporter((org.apache.rat.report.xml.writer.IXmlWriter) xmlWriter1);
        org.apache.rat.report.claim.impl.xml.SimpleXmlClaimReporter simpleXmlClaimReporter6 = new org.apache.rat.report.claim.impl.xml.SimpleXmlClaimReporter((org.apache.rat.report.xml.writer.IXmlWriter) xmlWriter1);
        org.apache.rat.report.claim.impl.xml.SimpleXmlClaimReporter simpleXmlClaimReporter7 = new org.apache.rat.report.claim.impl.xml.SimpleXmlClaimReporter((org.apache.rat.report.xml.writer.IXmlWriter) xmlWriter1);
        org.apache.rat.report.claim.impl.xml.SimpleXmlClaimReporter simpleXmlClaimReporter8 = new org.apache.rat.report.claim.impl.xml.SimpleXmlClaimReporter((org.apache.rat.report.xml.writer.IXmlWriter) xmlWriter1);
        org.apache.rat.report.claim.impl.xml.SimpleXmlClaimReporter simpleXmlClaimReporter9 = new org.apache.rat.report.claim.impl.xml.SimpleXmlClaimReporter((org.apache.rat.report.xml.writer.IXmlWriter) xmlWriter1);
        org.apache.rat.report.claim.impl.xml.SimpleXmlClaimReporter simpleXmlClaimReporter10 = new org.apache.rat.report.claim.impl.xml.SimpleXmlClaimReporter((org.apache.rat.report.xml.writer.IXmlWriter) xmlWriter1);
        org.apache.rat.report.claim.impl.xml.SimpleXmlClaimReporter simpleXmlClaimReporter11 = new org.apache.rat.report.claim.impl.xml.SimpleXmlClaimReporter((org.apache.rat.report.xml.writer.IXmlWriter) xmlWriter1);
        org.apache.rat.report.claim.impl.xml.SimpleXmlClaimReporter simpleXmlClaimReporter12 = new org.apache.rat.report.claim.impl.xml.SimpleXmlClaimReporter((org.apache.rat.report.xml.writer.IXmlWriter) xmlWriter1);
        org.apache.rat.report.claim.impl.xml.SimpleXmlClaimReporter simpleXmlClaimReporter13 = new org.apache.rat.report.claim.impl.xml.SimpleXmlClaimReporter((org.apache.rat.report.xml.writer.IXmlWriter) xmlWriter1);
        org.apache.rat.report.claim.impl.xml.SimpleXmlClaimReporter simpleXmlClaimReporter14 = new org.apache.rat.report.claim.impl.xml.SimpleXmlClaimReporter((org.apache.rat.report.xml.writer.IXmlWriter) xmlWriter1);
        org.apache.rat.report.claim.impl.xml.SimpleXmlClaimReporter simpleXmlClaimReporter15 = new org.apache.rat.report.claim.impl.xml.SimpleXmlClaimReporter((org.apache.rat.report.xml.writer.IXmlWriter) xmlWriter1);
        org.apache.rat.report.claim.impl.xml.SimpleXmlClaimReporter simpleXmlClaimReporter16 = new org.apache.rat.report.claim.impl.xml.SimpleXmlClaimReporter((org.apache.rat.report.xml.writer.IXmlWriter) xmlWriter1);
        org.apache.rat.report.claim.impl.xml.SimpleXmlClaimReporter simpleXmlClaimReporter17 = new org.apache.rat.report.claim.impl.xml.SimpleXmlClaimReporter((org.apache.rat.report.xml.writer.IXmlWriter) xmlWriter1);
        org.apache.rat.report.claim.impl.xml.SimpleXmlClaimReporter simpleXmlClaimReporter18 = new org.apache.rat.report.claim.impl.xml.SimpleXmlClaimReporter((org.apache.rat.report.xml.writer.IXmlWriter) xmlWriter1);
        org.apache.rat.api.Document document19 = null;
        // The following exception was thrown during execution in test generation
        try {
            simpleXmlClaimReporter18.report(document19);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
    }

    @Test
    public void test12990() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest25.test12990");
        org.apache.rat.configuration.builders.CopyrightBuilder copyrightBuilder0 = org.apache.rat.analysis.IHeaderMatcher.Builder.copyright();
        java.lang.String str1 = copyrightBuilder0.toString();
        org.apache.rat.configuration.builders.CopyrightBuilder copyrightBuilder3 = copyrightBuilder0.setEnd("W3C Software Copyright");
        org.apache.rat.configuration.builders.CopyrightBuilder copyrightBuilder5 = copyrightBuilder0.setStart("RegexBuilder: 89662180-a89f-497b-9301-227d494d2bae");
        org.apache.rat.configuration.builders.CopyrightBuilder copyrightBuilder7 = copyrightBuilder5.setOwner("Datum [ name ='3c840dc2-bef0-42b5-b26c-35a568d53a24',value ='TextBuilder: fe6be119-8817-4567-8... ']");
        org.junit.Assert.assertNotNull(copyrightBuilder0);
        org.junit.Assert.assertEquals("'" + str1 + "' != '" + "Copyright Builder: s:null e:null o:null" + "'", str1, "Copyright Builder: s:null e:null o:null");
        org.junit.Assert.assertNotNull(copyrightBuilder3);
        org.junit.Assert.assertNotNull(copyrightBuilder5);
        org.junit.Assert.assertNotNull(copyrightBuilder7);
    }

    @Test
    public void test12991() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest25.test12991");
        org.apache.rat.utils.Log log0 = null;
        org.apache.rat.ReportConfiguration reportConfiguration1 = new org.apache.rat.ReportConfiguration(log0);
        org.apache.rat.report.claim.ClaimStatistic claimStatistic2 = org.apache.rat.Reporter.report(reportConfiguration1);
        org.apache.rat.license.ILicense[] iLicenseArray3 = new org.apache.rat.license.ILicense[] {};
        java.util.TreeSet<org.apache.rat.license.ILicense> iLicenseSet4 = new java.util.TreeSet<org.apache.rat.license.ILicense>();
        boolean boolean5 = java.util.Collections.addAll((java.util.Collection<org.apache.rat.license.ILicense>) iLicenseSet4, iLicenseArray3);
        java.lang.String[] strArray18 = new java.lang.String[] { "GPL2 ", "GPL1 ", "notice", "http://org/apache/rat/meta-data#LicenseFamilyName", "notice", "GPL2 ", "http://org/apache/rat/meta-data#LicenseFamilyName", "", "GPL2 ", "", "GPL1 ", "hi!" };
        java.util.ArrayList<java.lang.String> strList19 = new java.util.ArrayList<java.lang.String>();
        boolean boolean20 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strList19, strArray18);
        org.apache.rat.license.LicenseSetFactory licenseSetFactory21 = new org.apache.rat.license.LicenseSetFactory((java.util.SortedSet<org.apache.rat.license.ILicense>) iLicenseSet4, (java.util.Collection<java.lang.String>) strList19);
        org.apache.rat.utils.Log log22 = null;
        org.apache.rat.ReportConfiguration reportConfiguration23 = new org.apache.rat.ReportConfiguration(log22);
        java.io.FilenameFilter filenameFilter24 = reportConfiguration23.getInputFileFilter();
        org.apache.rat.license.LicenseSetFactory.LicenseFilter licenseFilter25 = org.apache.rat.license.LicenseSetFactory.LicenseFilter.all;
        java.util.SortedSet<org.apache.rat.license.ILicense> iLicenseSet26 = reportConfiguration23.getLicenses(licenseFilter25);
        org.apache.rat.config.AddLicenseHeaders addLicenseHeaders27 = org.apache.rat.config.AddLicenseHeaders.FALSE;
        reportConfiguration23.setAddLicenseHeaders(addLicenseHeaders27);
        org.apache.rat.utils.Log log29 = null;
        org.apache.rat.ReportConfiguration reportConfiguration30 = new org.apache.rat.ReportConfiguration(log29);
        org.apache.rat.report.claim.ClaimStatistic claimStatistic31 = org.apache.rat.Reporter.report(reportConfiguration30);
        org.apache.rat.license.LicenseSetFactory.LicenseFilter licenseFilter32 = org.apache.rat.license.LicenseSetFactory.LicenseFilter.all;
        org.apache.rat.Reporter.listLicenses(reportConfiguration30, licenseFilter32);
        org.apache.rat.Reporter.listLicenses(reportConfiguration23, licenseFilter32);
        org.apache.rat.utils.Log log35 = null;
        org.apache.rat.ReportConfiguration reportConfiguration36 = new org.apache.rat.ReportConfiguration(log35);
        java.io.FilenameFilter filenameFilter37 = reportConfiguration36.getInputFileFilter();
        org.apache.rat.license.LicenseSetFactory.LicenseFilter licenseFilter38 = org.apache.rat.license.LicenseSetFactory.LicenseFilter.all;
        java.util.SortedSet<org.apache.rat.license.ILicense> iLicenseSet39 = reportConfiguration36.getLicenses(licenseFilter38);
        org.apache.rat.config.AddLicenseHeaders addLicenseHeaders40 = org.apache.rat.config.AddLicenseHeaders.FALSE;
        reportConfiguration36.setAddLicenseHeaders(addLicenseHeaders40);
        org.apache.rat.utils.Log log42 = null;
        org.apache.rat.ReportConfiguration reportConfiguration43 = new org.apache.rat.ReportConfiguration(log42);
        org.apache.rat.report.claim.ClaimStatistic claimStatistic44 = org.apache.rat.Reporter.report(reportConfiguration43);
        org.apache.rat.license.LicenseSetFactory.LicenseFilter licenseFilter45 = org.apache.rat.license.LicenseSetFactory.LicenseFilter.all;
        org.apache.rat.Reporter.listLicenses(reportConfiguration43, licenseFilter45);
        org.apache.rat.Reporter.listLicenses(reportConfiguration36, licenseFilter45);
        org.apache.rat.Reporter.listLicenses(reportConfiguration23, licenseFilter45);
        java.util.SortedSet<org.apache.rat.license.ILicense> iLicenseSet49 = licenseSetFactory21.getLicenses(licenseFilter45);
        reportConfiguration1.addLicensesIfNotPresent((java.util.Collection<org.apache.rat.license.ILicense>) iLicenseSet49);
        java.io.FilenameFilter filenameFilter51 = reportConfiguration1.getInputFileFilter();
        org.apache.rat.utils.Log log52 = null;
        org.apache.rat.ReportConfiguration reportConfiguration53 = new org.apache.rat.ReportConfiguration(log52);
        org.apache.rat.report.claim.ClaimStatistic claimStatistic54 = org.apache.rat.Reporter.report(reportConfiguration53);
        org.apache.rat.utils.Log log55 = null;
        org.apache.rat.ReportConfiguration reportConfiguration56 = new org.apache.rat.ReportConfiguration(log55);
        org.apache.rat.report.claim.ClaimStatistic claimStatistic57 = org.apache.rat.Reporter.report(reportConfiguration56);
        org.apache.rat.utils.ReportingSet.Options options58 = org.apache.rat.utils.ReportingSet.Options.OVERWRITE;
        reportConfiguration56.licenseDuplicateOption(options58);
        reportConfiguration53.familyDuplicateOption(options58);
        reportConfiguration1.familyDuplicateOption(options58);
        java.lang.String str62 = reportConfiguration1.getCopyrightMessage();
        org.apache.commons.io.function.IOSupplier<java.io.InputStream> inputStreamIOSupplier63 = reportConfiguration1.getStyleSheet();
        org.junit.Assert.assertNull(claimStatistic2);
        org.junit.Assert.assertNotNull(iLicenseArray3);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertNotNull(strArray18);
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + true + "'", boolean20 == true);
        org.junit.Assert.assertNull(filenameFilter24);
        org.junit.Assert.assertTrue("'" + licenseFilter25 + "' != '" + org.apache.rat.license.LicenseSetFactory.LicenseFilter.all + "'", licenseFilter25.equals(org.apache.rat.license.LicenseSetFactory.LicenseFilter.all));
        org.junit.Assert.assertNotNull(iLicenseSet26);
        org.junit.Assert.assertTrue("'" + addLicenseHeaders27 + "' != '" + org.apache.rat.config.AddLicenseHeaders.FALSE + "'", addLicenseHeaders27.equals(org.apache.rat.config.AddLicenseHeaders.FALSE));
        org.junit.Assert.assertNull(claimStatistic31);
        org.junit.Assert.assertTrue("'" + licenseFilter32 + "' != '" + org.apache.rat.license.LicenseSetFactory.LicenseFilter.all + "'", licenseFilter32.equals(org.apache.rat.license.LicenseSetFactory.LicenseFilter.all));
        org.junit.Assert.assertNull(filenameFilter37);
        org.junit.Assert.assertTrue("'" + licenseFilter38 + "' != '" + org.apache.rat.license.LicenseSetFactory.LicenseFilter.all + "'", licenseFilter38.equals(org.apache.rat.license.LicenseSetFactory.LicenseFilter.all));
        org.junit.Assert.assertNotNull(iLicenseSet39);
        org.junit.Assert.assertTrue("'" + addLicenseHeaders40 + "' != '" + org.apache.rat.config.AddLicenseHeaders.FALSE + "'", addLicenseHeaders40.equals(org.apache.rat.config.AddLicenseHeaders.FALSE));
        org.junit.Assert.assertNull(claimStatistic44);
        org.junit.Assert.assertTrue("'" + licenseFilter45 + "' != '" + org.apache.rat.license.LicenseSetFactory.LicenseFilter.all + "'", licenseFilter45.equals(org.apache.rat.license.LicenseSetFactory.LicenseFilter.all));
        org.junit.Assert.assertNotNull(iLicenseSet49);
        org.junit.Assert.assertNull(filenameFilter51);
        org.junit.Assert.assertNull(claimStatistic54);
        org.junit.Assert.assertNull(claimStatistic57);
        org.junit.Assert.assertTrue("'" + options58 + "' != '" + org.apache.rat.utils.ReportingSet.Options.OVERWRITE + "'", options58.equals(org.apache.rat.utils.ReportingSet.Options.OVERWRITE));
        org.junit.Assert.assertNull(str62);
        org.junit.Assert.assertNull(inputStreamIOSupplier63);
    }

    @Test
    public void test12992() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest25.test12992");
        org.apache.rat.configuration.Format format0 = org.apache.rat.configuration.Format.XML;
        org.apache.rat.configuration.LicenseReader licenseReader1 = format0.licenseReader();
        org.apache.rat.configuration.MatcherReader matcherReader2 = format0.matcherReader();
        org.apache.rat.configuration.LicenseReader licenseReader3 = format0.licenseReader();
        org.apache.rat.configuration.LicenseReader licenseReader4 = format0.licenseReader();
        org.apache.rat.configuration.MatcherReader matcherReader5 = format0.matcherReader();
        org.apache.rat.configuration.MatcherReader matcherReader6 = format0.matcherReader();
        org.apache.rat.configuration.MatcherReader matcherReader7 = format0.matcherReader();
        org.apache.rat.configuration.MatcherReader matcherReader8 = format0.matcherReader();
        org.apache.rat.configuration.LicenseReader licenseReader9 = format0.licenseReader();
        org.apache.rat.configuration.MatcherReader matcherReader10 = format0.matcherReader();
        org.apache.rat.configuration.MatcherReader matcherReader11 = format0.matcherReader();
        org.apache.rat.configuration.LicenseReader licenseReader12 = format0.licenseReader();
        org.junit.Assert.assertTrue("'" + format0 + "' != '" + org.apache.rat.configuration.Format.XML + "'", format0.equals(org.apache.rat.configuration.Format.XML));
        org.junit.Assert.assertNotNull(licenseReader1);
        org.junit.Assert.assertNotNull(matcherReader2);
        org.junit.Assert.assertNotNull(licenseReader3);
        org.junit.Assert.assertNotNull(licenseReader4);
        org.junit.Assert.assertNotNull(matcherReader5);
        org.junit.Assert.assertNotNull(matcherReader6);
        org.junit.Assert.assertNotNull(matcherReader7);
        org.junit.Assert.assertNotNull(matcherReader8);
        org.junit.Assert.assertNotNull(licenseReader9);
        org.junit.Assert.assertNotNull(matcherReader10);
        org.junit.Assert.assertNotNull(matcherReader11);
        org.junit.Assert.assertNotNull(licenseReader12);
    }

    @Test
    public void test12993() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest25.test12993");
        org.apache.rat.analysis.matchers.SPDXMatcherFactory sPDXMatcherFactory0 = org.apache.rat.analysis.matchers.SPDXMatcherFactory.INSTANCE;
        org.apache.rat.analysis.IHeaderMatcher iHeaderMatcher2 = sPDXMatcherFactory0.create("http://org/apache/rat/meta-data");
        org.apache.rat.analysis.matchers.NotMatcher notMatcher3 = new org.apache.rat.analysis.matchers.NotMatcher(iHeaderMatcher2);
        org.apache.rat.analysis.matchers.NotMatcher notMatcher4 = new org.apache.rat.analysis.matchers.NotMatcher((org.apache.rat.analysis.IHeaderMatcher) notMatcher3);
        org.apache.rat.analysis.IHeaderMatcher.State state5 = notMatcher3.finalizeState();
        org.apache.rat.analysis.IHeaderMatcher.State state6 = notMatcher3.currentState();
        org.apache.rat.analysis.IHeaderMatcher.State state7 = notMatcher3.currentState();
        boolean boolean8 = state7.asBoolean();
        org.junit.Assert.assertNotNull(sPDXMatcherFactory0);
        org.junit.Assert.assertNotNull(iHeaderMatcher2);
        org.junit.Assert.assertTrue("'" + state5 + "' != '" + org.apache.rat.analysis.IHeaderMatcher.State.t + "'", state5.equals(org.apache.rat.analysis.IHeaderMatcher.State.t));
        org.junit.Assert.assertTrue("'" + state6 + "' != '" + org.apache.rat.analysis.IHeaderMatcher.State.t + "'", state6.equals(org.apache.rat.analysis.IHeaderMatcher.State.t));
        org.junit.Assert.assertTrue("'" + state7 + "' != '" + org.apache.rat.analysis.IHeaderMatcher.State.t + "'", state7.equals(org.apache.rat.analysis.IHeaderMatcher.State.t));
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + true + "'", boolean8 == true);
    }

    @Test
    public void test12994() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest25.test12994");
        org.apache.rat.utils.Log log0 = null;
        org.apache.rat.ReportConfiguration reportConfiguration1 = new org.apache.rat.ReportConfiguration(log0);
        org.apache.rat.report.claim.ClaimStatistic claimStatistic2 = org.apache.rat.Reporter.report(reportConfiguration1);
        reportConfiguration1.addApprovedLicenseCategory("Copyright Builder: s:null e:null o:null");
        java.util.SortedSet<java.lang.String> strSet5 = reportConfiguration1.getApprovedLicenseCategories();
        org.apache.rat.utils.DefaultLog defaultLog6 = org.apache.rat.utils.DefaultLog.INSTANCE;
        org.apache.rat.configuration.builders.AllBuilder allBuilder7 = new org.apache.rat.configuration.builders.AllBuilder();
        org.apache.rat.configuration.builders.MatcherRefBuilder matcherRefBuilder8 = org.apache.rat.analysis.IHeaderMatcher.Builder.matcherRef();
        boolean boolean9 = matcherRefBuilder8.hasId();
        java.lang.String str10 = matcherRefBuilder8.toString();
        org.apache.rat.configuration.builders.AnyBuilder anyBuilder11 = org.apache.rat.analysis.IHeaderMatcher.Builder.any();
        org.apache.rat.configuration.builders.NotBuilder notBuilder12 = new org.apache.rat.configuration.builders.NotBuilder();
        java.lang.String str13 = notBuilder12.toString();
        org.apache.rat.configuration.builders.MatcherRefBuilder matcherRefBuilder14 = org.apache.rat.analysis.IHeaderMatcher.Builder.matcherRef();
        boolean boolean15 = matcherRefBuilder14.hasId();
        java.util.Map<java.lang.String, org.apache.rat.analysis.IHeaderMatcher> strMap16 = null;
        org.apache.rat.configuration.builders.MatcherRefBuilder matcherRefBuilder17 = matcherRefBuilder14.setMatchers(strMap16);
        org.apache.rat.configuration.builders.AllBuilder allBuilder18 = new org.apache.rat.configuration.builders.AllBuilder();
        org.apache.rat.configuration.builders.CopyrightBuilder copyrightBuilder19 = org.apache.rat.analysis.IHeaderMatcher.Builder.copyright();
        org.apache.rat.configuration.builders.CopyrightBuilder copyrightBuilder21 = copyrightBuilder19.setStart("OASIS");
        java.lang.String str22 = copyrightBuilder19.toString();
        org.apache.rat.configuration.builders.CopyrightBuilder copyrightBuilder24 = copyrightBuilder19.setStart("223f0aba-15d4-49e9-901e-5740c137aebf");
        org.apache.rat.configuration.builders.MatcherRefBuilder matcherRefBuilder25 = org.apache.rat.analysis.IHeaderMatcher.Builder.matcherRef();
        boolean boolean26 = matcherRefBuilder25.hasId();
        org.apache.rat.configuration.builders.CopyrightBuilder copyrightBuilder27 = org.apache.rat.analysis.IHeaderMatcher.Builder.copyright();
        org.apache.rat.configuration.builders.CopyrightBuilder copyrightBuilder29 = copyrightBuilder27.setStart("OASIS");
        java.lang.String str30 = copyrightBuilder27.toString();
        org.apache.rat.configuration.builders.CopyrightBuilder copyrightBuilder32 = copyrightBuilder27.setStart("223f0aba-15d4-49e9-901e-5740c137aebf");
        org.apache.rat.configuration.builders.CopyrightBuilder copyrightBuilder33 = org.apache.rat.analysis.IHeaderMatcher.Builder.copyright();
        org.apache.rat.configuration.builders.CopyrightBuilder copyrightBuilder34 = org.apache.rat.analysis.IHeaderMatcher.Builder.copyright();
        java.lang.String str35 = copyrightBuilder34.toString();
        org.apache.rat.configuration.builders.CopyrightBuilder copyrightBuilder37 = copyrightBuilder34.setEnd(".cvsignore");
        boolean boolean38 = copyrightBuilder34.hasId();
        org.apache.rat.configuration.builders.CopyrightBuilder copyrightBuilder39 = org.apache.rat.analysis.IHeaderMatcher.Builder.copyright();
        java.lang.String str40 = copyrightBuilder39.toString();
        org.apache.rat.configuration.builders.CopyrightBuilder copyrightBuilder42 = copyrightBuilder39.setEnd(".cvsignore");
        boolean boolean43 = copyrightBuilder39.hasId();
        java.lang.String str44 = copyrightBuilder39.toString();
        org.apache.rat.configuration.builders.CopyrightBuilder copyrightBuilder45 = org.apache.rat.analysis.IHeaderMatcher.Builder.copyright();
        org.apache.rat.configuration.builders.CopyrightBuilder copyrightBuilder47 = copyrightBuilder45.setStart("OASIS");
        org.apache.rat.configuration.builders.AnyBuilder anyBuilder48 = org.apache.rat.analysis.IHeaderMatcher.Builder.any();
        org.apache.rat.configuration.builders.MatcherRefBuilder matcherRefBuilder49 = org.apache.rat.analysis.IHeaderMatcher.Builder.matcherRef();
        boolean boolean50 = matcherRefBuilder49.hasId();
        java.util.Map<java.lang.String, org.apache.rat.analysis.IHeaderMatcher> strMap51 = null;
        org.apache.rat.configuration.builders.MatcherRefBuilder matcherRefBuilder52 = matcherRefBuilder49.setMatchers(strMap51);
        org.apache.rat.configuration.builders.CopyrightBuilder copyrightBuilder53 = org.apache.rat.analysis.IHeaderMatcher.Builder.copyright();
        org.apache.rat.configuration.builders.MatcherRefBuilder matcherRefBuilder54 = org.apache.rat.analysis.IHeaderMatcher.Builder.matcherRef();
        boolean boolean55 = matcherRefBuilder54.hasId();
        java.lang.String str56 = matcherRefBuilder54.toString();
        java.util.Map<java.lang.String, org.apache.rat.analysis.IHeaderMatcher> strMap57 = null;
        org.apache.rat.configuration.builders.MatcherRefBuilder matcherRefBuilder58 = matcherRefBuilder54.setMatchers(strMap57);
        org.apache.rat.analysis.IHeaderMatcher.Builder[] builderArray59 = new org.apache.rat.analysis.IHeaderMatcher.Builder[] { matcherRefBuilder14, allBuilder18, copyrightBuilder24, matcherRefBuilder25, copyrightBuilder27, copyrightBuilder33, copyrightBuilder34, copyrightBuilder39, copyrightBuilder45, anyBuilder48, matcherRefBuilder49, copyrightBuilder53, matcherRefBuilder54 };
        java.util.ArrayList<org.apache.rat.analysis.IHeaderMatcher.Builder> builderList60 = new java.util.ArrayList<org.apache.rat.analysis.IHeaderMatcher.Builder>();
        boolean boolean61 = java.util.Collections.addAll((java.util.Collection<org.apache.rat.analysis.IHeaderMatcher.Builder>) builderList60, builderArray59);
        org.apache.rat.configuration.builders.AbstractBuilder abstractBuilder62 = notBuilder12.add((java.util.Collection<org.apache.rat.analysis.IHeaderMatcher.Builder>) builderList60);
        org.apache.rat.configuration.builders.MatcherRefBuilder matcherRefBuilder63 = new org.apache.rat.configuration.builders.MatcherRefBuilder();
        org.apache.rat.analysis.IHeaderMatcher.Builder[] builderArray64 = new org.apache.rat.analysis.IHeaderMatcher.Builder[] { matcherRefBuilder8, anyBuilder11, notBuilder12, matcherRefBuilder63 };
        java.util.ArrayList<org.apache.rat.analysis.IHeaderMatcher.Builder> builderList65 = new java.util.ArrayList<org.apache.rat.analysis.IHeaderMatcher.Builder>();
        boolean boolean66 = java.util.Collections.addAll((java.util.Collection<org.apache.rat.analysis.IHeaderMatcher.Builder>) builderList65, builderArray64);
        org.apache.rat.configuration.builders.AbstractBuilder abstractBuilder67 = allBuilder7.add((java.util.Collection<org.apache.rat.analysis.IHeaderMatcher.Builder>) builderList65);
        defaultLog6.info((java.lang.Object) allBuilder7);
        org.apache.rat.ReportConfiguration reportConfiguration69 = new org.apache.rat.ReportConfiguration((org.apache.rat.utils.Log) defaultLog6);
        org.apache.rat.license.ILicense[] iLicenseArray71 = new org.apache.rat.license.ILicense[] {};
        java.util.TreeSet<org.apache.rat.license.ILicense> iLicenseSet72 = new java.util.TreeSet<org.apache.rat.license.ILicense>();
        boolean boolean73 = java.util.Collections.addAll((java.util.Collection<org.apache.rat.license.ILicense>) iLicenseSet72, iLicenseArray71);
        java.lang.String[] strArray86 = new java.lang.String[] { "GPL2 ", "GPL1 ", "notice", "http://org/apache/rat/meta-data#LicenseFamilyName", "notice", "GPL2 ", "http://org/apache/rat/meta-data#LicenseFamilyName", "", "GPL2 ", "", "GPL1 ", "hi!" };
        java.util.ArrayList<java.lang.String> strList87 = new java.util.ArrayList<java.lang.String>();
        boolean boolean88 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strList87, strArray86);
        org.apache.rat.license.LicenseSetFactory licenseSetFactory89 = new org.apache.rat.license.LicenseSetFactory((java.util.SortedSet<org.apache.rat.license.ILicense>) iLicenseSet72, (java.util.Collection<java.lang.String>) strList87);
        org.apache.rat.license.ILicense iLicense90 = org.apache.rat.license.LicenseSetFactory.search("JAVA", (java.util.SortedSet<org.apache.rat.license.ILicense>) iLicenseSet72);
        org.apache.rat.utils.ReportingSet<org.apache.rat.license.ILicense> iLicenseSet91 = new org.apache.rat.utils.ReportingSet<org.apache.rat.license.ILicense>((java.util.SortedSet<org.apache.rat.license.ILicense>) iLicenseSet72);
        reportConfiguration69.addLicenses((java.util.Collection<org.apache.rat.license.ILicense>) iLicenseSet72);
        reportConfiguration1.addLicenses((java.util.Collection<org.apache.rat.license.ILicense>) iLicenseSet72);
        org.apache.commons.io.function.IOSupplier<java.io.InputStream> inputStreamIOSupplier94 = null;
        reportConfiguration1.setStyleSheet(inputStreamIOSupplier94);
        org.junit.Assert.assertNull(claimStatistic2);
        org.junit.Assert.assertNotNull(strSet5);
        org.junit.Assert.assertNotNull(defaultLog6);
        org.junit.Assert.assertNotNull(matcherRefBuilder8);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "MathcerRefBuilder: null" + "'", str10, "MathcerRefBuilder: null");
        org.junit.Assert.assertNotNull(anyBuilder11);
        org.junit.Assert.assertEquals("'" + str13 + "' != '" + "NotBuilder: null" + "'", str13, "NotBuilder: null");
        org.junit.Assert.assertNotNull(matcherRefBuilder14);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + false + "'", boolean15 == false);
        org.junit.Assert.assertNotNull(matcherRefBuilder17);
        org.junit.Assert.assertNotNull(copyrightBuilder19);
        org.junit.Assert.assertNotNull(copyrightBuilder21);
        org.junit.Assert.assertEquals("'" + str22 + "' != '" + "Copyright Builder: s:OASIS e:null o:null" + "'", str22, "Copyright Builder: s:OASIS e:null o:null");
        org.junit.Assert.assertNotNull(copyrightBuilder24);
        org.junit.Assert.assertNotNull(matcherRefBuilder25);
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + false + "'", boolean26 == false);
        org.junit.Assert.assertNotNull(copyrightBuilder27);
        org.junit.Assert.assertNotNull(copyrightBuilder29);
        org.junit.Assert.assertEquals("'" + str30 + "' != '" + "Copyright Builder: s:OASIS e:null o:null" + "'", str30, "Copyright Builder: s:OASIS e:null o:null");
        org.junit.Assert.assertNotNull(copyrightBuilder32);
        org.junit.Assert.assertNotNull(copyrightBuilder33);
        org.junit.Assert.assertNotNull(copyrightBuilder34);
        org.junit.Assert.assertEquals("'" + str35 + "' != '" + "Copyright Builder: s:null e:null o:null" + "'", str35, "Copyright Builder: s:null e:null o:null");
        org.junit.Assert.assertNotNull(copyrightBuilder37);
        org.junit.Assert.assertTrue("'" + boolean38 + "' != '" + false + "'", boolean38 == false);
        org.junit.Assert.assertNotNull(copyrightBuilder39);
        org.junit.Assert.assertEquals("'" + str40 + "' != '" + "Copyright Builder: s:null e:null o:null" + "'", str40, "Copyright Builder: s:null e:null o:null");
        org.junit.Assert.assertNotNull(copyrightBuilder42);
        org.junit.Assert.assertTrue("'" + boolean43 + "' != '" + false + "'", boolean43 == false);
        org.junit.Assert.assertEquals("'" + str44 + "' != '" + "Copyright Builder: s:null e:.cvsignore o:null" + "'", str44, "Copyright Builder: s:null e:.cvsignore o:null");
        org.junit.Assert.assertNotNull(copyrightBuilder45);
        org.junit.Assert.assertNotNull(copyrightBuilder47);
        org.junit.Assert.assertNotNull(anyBuilder48);
        org.junit.Assert.assertNotNull(matcherRefBuilder49);
        org.junit.Assert.assertTrue("'" + boolean50 + "' != '" + false + "'", boolean50 == false);
        org.junit.Assert.assertNotNull(matcherRefBuilder52);
        org.junit.Assert.assertNotNull(copyrightBuilder53);
        org.junit.Assert.assertNotNull(matcherRefBuilder54);
        org.junit.Assert.assertTrue("'" + boolean55 + "' != '" + false + "'", boolean55 == false);
        org.junit.Assert.assertEquals("'" + str56 + "' != '" + "MathcerRefBuilder: null" + "'", str56, "MathcerRefBuilder: null");
        org.junit.Assert.assertNotNull(matcherRefBuilder58);
        org.junit.Assert.assertNotNull(builderArray59);
        org.junit.Assert.assertTrue("'" + boolean61 + "' != '" + true + "'", boolean61 == true);
        org.junit.Assert.assertNotNull(abstractBuilder62);
        org.junit.Assert.assertNotNull(builderArray64);
        org.junit.Assert.assertTrue("'" + boolean66 + "' != '" + true + "'", boolean66 == true);
        org.junit.Assert.assertNotNull(abstractBuilder67);
        org.junit.Assert.assertNotNull(iLicenseArray71);
        org.junit.Assert.assertTrue("'" + boolean73 + "' != '" + false + "'", boolean73 == false);
        org.junit.Assert.assertNotNull(strArray86);
        org.junit.Assert.assertTrue("'" + boolean88 + "' != '" + true + "'", boolean88 == true);
        org.junit.Assert.assertNull(iLicense90);
    }

    @Test
    public void test12995() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest25.test12995");
        org.apache.rat.utils.Log log0 = null;
        org.apache.rat.ReportConfiguration reportConfiguration1 = new org.apache.rat.ReportConfiguration(log0);
        org.apache.rat.report.claim.ClaimStatistic claimStatistic2 = org.apache.rat.Reporter.report(reportConfiguration1);
        org.apache.rat.utils.ReportingSet.Options options3 = org.apache.rat.utils.ReportingSet.Options.OVERWRITE;
        reportConfiguration1.licenseDuplicateOption(options3);
        org.apache.rat.license.ILicenseFamily iLicenseFamily5 = null;
        reportConfiguration1.addFamily(iLicenseFamily5);
        org.apache.rat.utils.Log log7 = reportConfiguration1.getLog();
        org.junit.Assert.assertNull(claimStatistic2);
        org.junit.Assert.assertTrue("'" + options3 + "' != '" + org.apache.rat.utils.ReportingSet.Options.OVERWRITE + "'", options3.equals(org.apache.rat.utils.ReportingSet.Options.OVERWRITE));
        org.junit.Assert.assertNull(log7);
    }

    @Test
    public void test12996() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest25.test12996");
        org.apache.rat.Defaults.Builder builder0 = org.apache.rat.Defaults.builder();
        org.apache.rat.Defaults defaults1 = builder0.build();
        org.apache.rat.Defaults.Builder builder2 = builder0.noDefault();
        org.apache.rat.Defaults.Builder builder3 = builder0.noDefault();
        org.apache.rat.Defaults.Builder builder5 = builder0.add("Datum [ name ='http://org/apache/rat/meta-data#LicenseFamilyName',value ='Academic Free License, Version 2.1 ']");
        org.apache.rat.Defaults.Builder builder6 = builder0.noDefault();
        org.apache.rat.Defaults.Builder builder8 = builder6.remove("GPL2 ");
        org.apache.rat.Defaults.Builder builder10 = builder8.add("MathcerRefBuilder: Datum [ name ='http://org/apache/rat/meta-data#LicenseFamilyName',value ='GNU General Public License, version 1 ']");
        org.apache.rat.Defaults.Builder builder11 = builder8.noDefault();
        org.junit.Assert.assertNotNull(builder0);
        org.junit.Assert.assertNotNull(defaults1);
        org.junit.Assert.assertNotNull(builder2);
        org.junit.Assert.assertNotNull(builder3);
        org.junit.Assert.assertNotNull(builder5);
        org.junit.Assert.assertNotNull(builder6);
        org.junit.Assert.assertNotNull(builder8);
        org.junit.Assert.assertNotNull(builder10);
        org.junit.Assert.assertNotNull(builder11);
    }

    @Test
    public void test12997() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest25.test12997");
        org.apache.rat.license.ILicenseFamilyBuilder iLicenseFamilyBuilder0 = new org.apache.rat.license.ILicenseFamilyBuilder();
        java.lang.String str1 = iLicenseFamilyBuilder0.getCategory();
        org.apache.rat.license.ILicenseFamily.Builder builder3 = iLicenseFamilyBuilder0.setLicenseFamilyCategory("3e2b228d-d5ff-4444-8d8c-d614494b2426");
        org.apache.rat.license.ILicenseFamily.Builder builder5 = iLicenseFamilyBuilder0.setLicenseFamilyCategory("f false");
        java.lang.String str6 = iLicenseFamilyBuilder0.getCategory();
        org.apache.rat.license.ILicenseFamily.Builder builder8 = iLicenseFamilyBuilder0.setLicenseFamilyName("094643D494C6478AB86115E14BD2E656");
        org.junit.Assert.assertNull(str1);
        org.junit.Assert.assertNotNull(builder3);
        org.junit.Assert.assertNotNull(builder5);
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "f false" + "'", str6, "f false");
        org.junit.Assert.assertNotNull(builder8);
    }

    @Test
    public void test12998() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest25.test12998");
        org.apache.commons.cli.CommandLine commandLine1 = null;
        // The following exception was thrown during execution in test generation
        try {
            org.apache.rat.ReportConfiguration reportConfiguration2 = org.apache.rat.Report.createConfiguration("FFALSE", commandLine1);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
    }

    @Test
    public void test12999() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest25.test12999");
        org.apache.rat.license.ILicenseFamilyBuilder iLicenseFamilyBuilder0 = new org.apache.rat.license.ILicenseFamilyBuilder();
        java.lang.String str1 = iLicenseFamilyBuilder0.getCategory();
        org.apache.rat.license.ILicenseFamily.Builder builder3 = iLicenseFamilyBuilder0.setLicenseFamilyCategory("AL   ");
        java.lang.String str4 = iLicenseFamilyBuilder0.getCategory();
        org.apache.rat.license.ILicenseFamily.Builder builder6 = iLicenseFamilyBuilder0.setLicenseFamilyCategory("SpdxB");
        org.apache.rat.license.ILicenseFamily.Builder builder8 = iLicenseFamilyBuilder0.setLicenseFamilyName("70c3a0ba-1174-4b62-ba88-76dbbb88e3b3");
        java.lang.String str9 = iLicenseFamilyBuilder0.getCategory();
        java.lang.String str10 = iLicenseFamilyBuilder0.getCategory();
        org.junit.Assert.assertNull(str1);
        org.junit.Assert.assertNotNull(builder3);
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "AL   " + "'", str4, "AL   ");
        org.junit.Assert.assertNotNull(builder6);
        org.junit.Assert.assertNotNull(builder8);
        org.junit.Assert.assertEquals("'" + str9 + "' != '" + "SpdxB" + "'", str9, "SpdxB");
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "SpdxB" + "'", str10, "SpdxB");
    }

    @Test
    public void test13000() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest25.test13000");
        org.apache.rat.utils.Log log0 = null;
        org.apache.rat.ReportConfiguration reportConfiguration1 = new org.apache.rat.ReportConfiguration(log0);
        org.apache.rat.report.claim.ClaimStatistic claimStatistic2 = org.apache.rat.Reporter.report(reportConfiguration1);
        org.apache.rat.report.IReportable iReportable3 = null;
        reportConfiguration1.setReportable(iReportable3);
        org.apache.rat.license.ILicense iLicense5 = null;
        reportConfiguration1.addLicense(iLicense5);
        org.apache.rat.utils.Log log7 = null;
        org.apache.rat.ReportConfiguration reportConfiguration8 = new org.apache.rat.ReportConfiguration(log7);
        reportConfiguration8.addApprovedLicenseCategory(".cvsignore");
        org.apache.rat.utils.Log.Level level11 = org.apache.rat.utils.Log.Level.ERROR;
        reportConfiguration8.logFamilyCollisions(level11);
        org.apache.commons.io.function.IOSupplier<java.io.OutputStream> outputStreamIOSupplier13 = reportConfiguration8.getOutput();
        org.apache.rat.utils.Log log14 = null;
        org.apache.rat.ReportConfiguration reportConfiguration15 = new org.apache.rat.ReportConfiguration(log14);
        reportConfiguration15.addApprovedLicenseCategory(".cvsignore");
        org.apache.rat.utils.Log log18 = null;
        org.apache.rat.ReportConfiguration reportConfiguration19 = new org.apache.rat.ReportConfiguration(log18);
        java.io.FilenameFilter filenameFilter20 = reportConfiguration19.getInputFileFilter();
        org.apache.rat.license.LicenseSetFactory.LicenseFilter licenseFilter21 = org.apache.rat.license.LicenseSetFactory.LicenseFilter.all;
        java.util.SortedSet<org.apache.rat.license.ILicense> iLicenseSet22 = reportConfiguration19.getLicenses(licenseFilter21);
        reportConfiguration15.addLicensesIfNotPresent((java.util.Collection<org.apache.rat.license.ILicense>) iLicenseSet22);
        java.io.FilenameFilter filenameFilter24 = reportConfiguration15.getInputFileFilter();
        org.apache.rat.utils.Log log25 = null;
        org.apache.rat.ReportConfiguration reportConfiguration26 = new org.apache.rat.ReportConfiguration(log25);
        java.io.FilenameFilter filenameFilter27 = reportConfiguration26.getInputFileFilter();
        org.apache.rat.license.LicenseSetFactory.LicenseFilter licenseFilter28 = org.apache.rat.license.LicenseSetFactory.LicenseFilter.all;
        java.util.SortedSet<org.apache.rat.license.ILicense> iLicenseSet29 = reportConfiguration26.getLicenses(licenseFilter28);
        org.apache.rat.config.AddLicenseHeaders addLicenseHeaders30 = org.apache.rat.config.AddLicenseHeaders.FALSE;
        reportConfiguration26.setAddLicenseHeaders(addLicenseHeaders30);
        org.apache.rat.utils.Log log32 = null;
        org.apache.rat.ReportConfiguration reportConfiguration33 = new org.apache.rat.ReportConfiguration(log32);
        org.apache.rat.report.claim.ClaimStatistic claimStatistic34 = org.apache.rat.Reporter.report(reportConfiguration33);
        org.apache.rat.license.LicenseSetFactory.LicenseFilter licenseFilter35 = org.apache.rat.license.LicenseSetFactory.LicenseFilter.all;
        org.apache.rat.Reporter.listLicenses(reportConfiguration33, licenseFilter35);
        org.apache.rat.Reporter.listLicenses(reportConfiguration26, licenseFilter35);
        org.apache.rat.utils.Log log38 = null;
        org.apache.rat.ReportConfiguration reportConfiguration39 = new org.apache.rat.ReportConfiguration(log38);
        java.io.FilenameFilter filenameFilter40 = reportConfiguration39.getInputFileFilter();
        org.apache.rat.license.LicenseSetFactory.LicenseFilter licenseFilter41 = org.apache.rat.license.LicenseSetFactory.LicenseFilter.all;
        java.util.SortedSet<org.apache.rat.license.ILicense> iLicenseSet42 = reportConfiguration39.getLicenses(licenseFilter41);
        org.apache.rat.config.AddLicenseHeaders addLicenseHeaders43 = org.apache.rat.config.AddLicenseHeaders.FALSE;
        reportConfiguration39.setAddLicenseHeaders(addLicenseHeaders43);
        org.apache.rat.utils.Log log45 = null;
        org.apache.rat.ReportConfiguration reportConfiguration46 = new org.apache.rat.ReportConfiguration(log45);
        org.apache.rat.report.claim.ClaimStatistic claimStatistic47 = org.apache.rat.Reporter.report(reportConfiguration46);
        org.apache.rat.license.LicenseSetFactory.LicenseFilter licenseFilter48 = org.apache.rat.license.LicenseSetFactory.LicenseFilter.all;
        org.apache.rat.Reporter.listLicenses(reportConfiguration46, licenseFilter48);
        org.apache.rat.Reporter.listLicenses(reportConfiguration39, licenseFilter48);
        java.util.SortedSet<org.apache.rat.license.ILicenseFamily> iLicenseFamilySet51 = reportConfiguration26.getLicenseFamilies(licenseFilter48);
        org.apache.rat.Reporter.listLicenseFamilies(reportConfiguration15, licenseFilter48);
        java.util.SortedSet<org.apache.rat.license.ILicenseFamily> iLicenseFamilySet53 = reportConfiguration8.getLicenseFamilies(licenseFilter48);
        org.apache.commons.io.filefilter.IOFileFilter iOFileFilter54 = reportConfiguration8.getDirectoryFilter();
        reportConfiguration1.addDirectoryFilter(iOFileFilter54);
        org.apache.commons.io.function.IOSupplier<java.io.InputStream> inputStreamIOSupplier56 = reportConfiguration1.getStyleSheet();
        org.junit.Assert.assertNull(claimStatistic2);
        org.junit.Assert.assertTrue("'" + level11 + "' != '" + org.apache.rat.utils.Log.Level.ERROR + "'", level11.equals(org.apache.rat.utils.Log.Level.ERROR));
        org.junit.Assert.assertNotNull(outputStreamIOSupplier13);
        org.junit.Assert.assertNull(filenameFilter20);
        org.junit.Assert.assertTrue("'" + licenseFilter21 + "' != '" + org.apache.rat.license.LicenseSetFactory.LicenseFilter.all + "'", licenseFilter21.equals(org.apache.rat.license.LicenseSetFactory.LicenseFilter.all));
        org.junit.Assert.assertNotNull(iLicenseSet22);
        org.junit.Assert.assertNull(filenameFilter24);
        org.junit.Assert.assertNull(filenameFilter27);
        org.junit.Assert.assertTrue("'" + licenseFilter28 + "' != '" + org.apache.rat.license.LicenseSetFactory.LicenseFilter.all + "'", licenseFilter28.equals(org.apache.rat.license.LicenseSetFactory.LicenseFilter.all));
        org.junit.Assert.assertNotNull(iLicenseSet29);
        org.junit.Assert.assertTrue("'" + addLicenseHeaders30 + "' != '" + org.apache.rat.config.AddLicenseHeaders.FALSE + "'", addLicenseHeaders30.equals(org.apache.rat.config.AddLicenseHeaders.FALSE));
        org.junit.Assert.assertNull(claimStatistic34);
        org.junit.Assert.assertTrue("'" + licenseFilter35 + "' != '" + org.apache.rat.license.LicenseSetFactory.LicenseFilter.all + "'", licenseFilter35.equals(org.apache.rat.license.LicenseSetFactory.LicenseFilter.all));
        org.junit.Assert.assertNull(filenameFilter40);
        org.junit.Assert.assertTrue("'" + licenseFilter41 + "' != '" + org.apache.rat.license.LicenseSetFactory.LicenseFilter.all + "'", licenseFilter41.equals(org.apache.rat.license.LicenseSetFactory.LicenseFilter.all));
        org.junit.Assert.assertNotNull(iLicenseSet42);
        org.junit.Assert.assertTrue("'" + addLicenseHeaders43 + "' != '" + org.apache.rat.config.AddLicenseHeaders.FALSE + "'", addLicenseHeaders43.equals(org.apache.rat.config.AddLicenseHeaders.FALSE));
        org.junit.Assert.assertNull(claimStatistic47);
        org.junit.Assert.assertTrue("'" + licenseFilter48 + "' != '" + org.apache.rat.license.LicenseSetFactory.LicenseFilter.all + "'", licenseFilter48.equals(org.apache.rat.license.LicenseSetFactory.LicenseFilter.all));
        org.junit.Assert.assertNotNull(iLicenseFamilySet51);
        org.junit.Assert.assertNotNull(iLicenseFamilySet53);
        org.junit.Assert.assertNotNull(iOFileFilter54);
        org.junit.Assert.assertNull(inputStreamIOSupplier56);
    }
}
