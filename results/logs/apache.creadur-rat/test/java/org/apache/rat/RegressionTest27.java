package org.apache.rat;

import org.junit.FixMethodOrder;
import org.junit.Test;
import org.junit.runners.MethodSorters;

@FixMethodOrder(MethodSorters.NAME_ASCENDING)
public class RegressionTest27 {

    public static boolean debug = false;

    @Test
    public void test13501() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest27.test13501");
        org.apache.rat.analysis.matchers.SPDXMatcherFactory sPDXMatcherFactory0 = org.apache.rat.analysis.matchers.SPDXMatcherFactory.INSTANCE;
        org.apache.rat.analysis.IHeaderMatcher iHeaderMatcher2 = sPDXMatcherFactory0.create("http://org/apache/rat/meta-data");
        org.apache.rat.analysis.IHeaderMatcher iHeaderMatcher4 = sPDXMatcherFactory0.create("9e61083a-6568-4c3f-b7d9-f502a517d761");
        org.apache.rat.analysis.IHeaderMatcher iHeaderMatcher6 = sPDXMatcherFactory0.create("i ind");
        org.junit.Assert.assertNotNull(sPDXMatcherFactory0);
        org.junit.Assert.assertNotNull(iHeaderMatcher2);
        org.junit.Assert.assertNotNull(iHeaderMatcher4);
        org.junit.Assert.assertNotNull(iHeaderMatcher6);
    }

    @Test
    public void test13502() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest27.test13502");
        org.apache.rat.analysis.license.FullTextMatchingLicense fullTextMatchingLicense0 = new org.apache.rat.analysis.license.FullTextMatchingLicense();
        fullTextMatchingLicense0.setLicenseFamilyName("hi!");
        fullTextMatchingLicense0.setFullText("MANIFEST.MF");
        fullTextMatchingLicense0.setFullText("JAVA");
        fullTextMatchingLicense0.setFullText("8128040d-ca94-4f3f-9deb-6252acd449bd");
        org.apache.rat.license.ILicense.Builder builder9 = fullTextMatchingLicense0.getLicense();
        org.apache.rat.license.ILicense.Builder builder10 = fullTextMatchingLicense0.getLicense();
        java.lang.String str11 = fullTextMatchingLicense0.getLicenseFamilyName();
        fullTextMatchingLicense0.setLicenseFamilyCategory("GNUGeneralPublicLicenseversion3");
        org.junit.Assert.assertNotNull(builder9);
        org.junit.Assert.assertNotNull(builder10);
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "hi!" + "'", str11, "hi!");
    }

    @Test
    public void test13503() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest27.test13503");
        org.apache.rat.report.claim.ClaimStatistic claimStatistic0 = new org.apache.rat.report.claim.ClaimStatistic();
        claimStatistic0.setNumApproved((int) (short) 10);
        java.util.Map<java.lang.String, java.lang.Integer> strMap3 = null;
        claimStatistic0.setDocumentCategoryMap(strMap3);
        int int5 = claimStatistic0.getNumGenerated();
        java.util.Map<java.lang.String, java.lang.Integer> strMap6 = claimStatistic0.getLicenseFileNameMap();
        claimStatistic0.setNumGenerated((int) (byte) 10);
        claimStatistic0.setNumUnknown(0);
        int int11 = claimStatistic0.getNumUnApproved();
        claimStatistic0.setNumUnknown(10);
        java.util.Map<java.lang.String, java.lang.Integer> strMap14 = null;
        claimStatistic0.setLicenseFileCodeMap(strMap14);
        int int16 = claimStatistic0.getNumUnApproved();
        int int17 = claimStatistic0.getNumUnApproved();
        java.util.Map<java.lang.String, java.lang.Integer> strMap18 = claimStatistic0.getLicenseFileNameMap();
        int int19 = claimStatistic0.getNumApproved();
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 0 + "'", int5 == 0);
        org.junit.Assert.assertNull(strMap6);
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 0 + "'", int11 == 0);
        org.junit.Assert.assertTrue("'" + int16 + "' != '" + 0 + "'", int16 == 0);
        org.junit.Assert.assertTrue("'" + int17 + "' != '" + 0 + "'", int17 == 0);
        org.junit.Assert.assertNull(strMap18);
        org.junit.Assert.assertTrue("'" + int19 + "' != '" + 10 + "'", int19 == 10);
    }

    @Test
    public void test13504() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest27.test13504");
        org.apache.rat.configuration.builders.AllBuilder allBuilder0 = new org.apache.rat.configuration.builders.AllBuilder();
        java.lang.String str1 = allBuilder0.toString();
        java.util.List<org.apache.rat.analysis.IHeaderMatcher> iHeaderMatcherList2 = allBuilder0.getChildren();
        org.apache.rat.configuration.builders.MatcherRefBuilder matcherRefBuilder3 = new org.apache.rat.configuration.builders.MatcherRefBuilder();
        org.apache.rat.configuration.builders.AbstractBuilder abstractBuilder4 = allBuilder0.add((org.apache.rat.analysis.IHeaderMatcher.Builder) matcherRefBuilder3);
        org.apache.rat.configuration.builders.MatcherRefBuilder matcherRefBuilder6 = matcherRefBuilder3.setRefId("http:");
        java.util.Map<java.lang.String, org.apache.rat.analysis.IHeaderMatcher> strMap7 = null;
        org.apache.rat.configuration.builders.MatcherRefBuilder matcherRefBuilder8 = matcherRefBuilder3.setMatchers(strMap7);
        java.lang.String str9 = matcherRefBuilder3.toString();
        org.apache.rat.configuration.builders.MatcherRefBuilder matcherRefBuilder11 = matcherRefBuilder3.setRefId("AL   ");
        java.lang.String str12 = matcherRefBuilder11.toString();
        java.lang.String str13 = matcherRefBuilder11.toString();
        org.junit.Assert.assertEquals("'" + str1 + "' != '" + "AllBuilder:" + "'", str1, "AllBuilder:");
        org.junit.Assert.assertNotNull(iHeaderMatcherList2);
        org.junit.Assert.assertNotNull(abstractBuilder4);
        org.junit.Assert.assertNotNull(matcherRefBuilder6);
        org.junit.Assert.assertNotNull(matcherRefBuilder8);
        org.junit.Assert.assertEquals("'" + str9 + "' != '" + "MathcerRefBuilder: http:" + "'", str9, "MathcerRefBuilder: http:");
        org.junit.Assert.assertNotNull(matcherRefBuilder11);
        org.junit.Assert.assertEquals("'" + str12 + "' != '" + "MathcerRefBuilder: AL   " + "'", str12, "MathcerRefBuilder: AL   ");
        org.junit.Assert.assertEquals("'" + str13 + "' != '" + "MathcerRefBuilder: AL   " + "'", str13, "MathcerRefBuilder: AL   ");
    }

    @Test
    public void test13505() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest27.test13505");
        org.apache.rat.utils.Log log0 = null;
        org.apache.rat.ReportConfiguration reportConfiguration1 = new org.apache.rat.ReportConfiguration(log0);
        java.io.FilenameFilter filenameFilter2 = reportConfiguration1.getInputFileFilter();
        boolean boolean3 = reportConfiguration1.isStyleReport();
        org.apache.rat.utils.Log log4 = null;
        org.apache.rat.ReportConfiguration reportConfiguration5 = new org.apache.rat.ReportConfiguration(log4);
        reportConfiguration5.addApprovedLicenseCategory(".cvsignore");
        org.apache.rat.utils.Log.Level level8 = org.apache.rat.utils.Log.Level.ERROR;
        reportConfiguration5.logLicenseCollisions(level8);
        reportConfiguration1.logLicenseCollisions(level8);
        reportConfiguration1.setCopyrightMessage("5b0daab8-75ce-482b-bcb3-4741d11fddf7");
        reportConfiguration1.addApprovedLicenseCategory("MathcerRefBuildernull");
        org.junit.Assert.assertNull(filenameFilter2);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + true + "'", boolean3 == true);
        org.junit.Assert.assertTrue("'" + level8 + "' != '" + org.apache.rat.utils.Log.Level.ERROR + "'", level8.equals(org.apache.rat.utils.Log.Level.ERROR));
    }

    @Test
    public void test13506() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest27.test13506");
        org.apache.rat.configuration.builders.TextBuilder textBuilder0 = org.apache.rat.analysis.IHeaderMatcher.Builder.text();
        org.apache.rat.configuration.builders.TextBuilder textBuilder2 = textBuilder0.setText("");
        java.lang.String str3 = textBuilder2.toString();
        java.lang.String str4 = textBuilder2.toString();
        org.apache.rat.configuration.builders.TextBuilder textBuilder6 = textBuilder2.setText("8f0ee536-38ae-476a-a728-de95e24c13c3");
        boolean boolean7 = textBuilder6.hasId();
        org.apache.rat.configuration.builders.TextBuilder textBuilder9 = textBuilder6.setText("f04d752a-120e-425d-a417-7027fca36057");
        java.lang.String str10 = textBuilder6.toString();
        org.junit.Assert.assertNotNull(textBuilder0);
        org.junit.Assert.assertNotNull(textBuilder2);
        org.junit.Assert.assertEquals("'" + str3 + "' != '" + "TextBuilder: " + "'", str3, "TextBuilder: ");
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "TextBuilder: " + "'", str4, "TextBuilder: ");
        org.junit.Assert.assertNotNull(textBuilder6);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertNotNull(textBuilder9);
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "TextBuilder: f04d752a-120e-425d-a..." + "'", str10, "TextBuilder: f04d752a-120e-425d-a...");
    }

    @Test
    public void test13507() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest27.test13507");
        org.apache.rat.analysis.matchers.SPDXMatcherFactory sPDXMatcherFactory0 = org.apache.rat.analysis.matchers.SPDXMatcherFactory.INSTANCE;
        org.apache.rat.analysis.IHeaderMatcher iHeaderMatcher2 = sPDXMatcherFactory0.create("GPL3 ");
        org.apache.rat.analysis.IHeaderMatcher iHeaderMatcher4 = sPDXMatcherFactory0.create("6620e9ee-d651-4c18-8162-edad6d18368e");
        org.apache.rat.analysis.IHeaderMatcher iHeaderMatcher6 = sPDXMatcherFactory0.create("021187d7-27c2-4fd9-bc74-8cc00413ee52");
        org.apache.rat.analysis.IHeaderMatcher iHeaderMatcher8 = sPDXMatcherFactory0.create("f02d0cdc-3642-4583-b71f-dd84a120752c");
        org.apache.rat.analysis.IHeaderMatcher iHeaderMatcher10 = sPDXMatcherFactory0.create("223f0aba-15d4-49e9-901e-5740c137aebf null");
        org.apache.rat.analysis.IHeaderMatcher iHeaderMatcher12 = sPDXMatcherFactory0.create("1179c4df-a201-41fe-a117-cdd63136e455");
        org.junit.Assert.assertNotNull(sPDXMatcherFactory0);
        org.junit.Assert.assertNotNull(iHeaderMatcher2);
        org.junit.Assert.assertNotNull(iHeaderMatcher4);
        org.junit.Assert.assertNotNull(iHeaderMatcher6);
        org.junit.Assert.assertNotNull(iHeaderMatcher8);
        org.junit.Assert.assertNotNull(iHeaderMatcher10);
        org.junit.Assert.assertNotNull(iHeaderMatcher12);
    }

    @Test
    public void test13508() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest27.test13508");
        org.apache.rat.document.ToNameTransformer toNameTransformer0 = new org.apache.rat.document.ToNameTransformer();
        org.apache.rat.utils.DefaultLog defaultLog1 = org.apache.rat.utils.DefaultLog.INSTANCE;
        org.apache.rat.license.ILicense.Builder builder2 = org.apache.rat.license.ILicense.builder();
        org.apache.rat.license.ILicense.Builder builder4 = builder2.setLicenseFamilyCategory("");
        org.apache.rat.analysis.matchers.CopyrightMatcher copyrightMatcher8 = new org.apache.rat.analysis.matchers.CopyrightMatcher("", "GPL1 ", "hi!");
        org.apache.rat.analysis.IHeaderMatcher.State state9 = copyrightMatcher8.finalizeState();
        org.apache.rat.license.ILicense.Builder builder10 = builder4.setMatcher((org.apache.rat.analysis.IHeaderMatcher) copyrightMatcher8);
        org.apache.rat.license.ILicense.Builder builder12 = builder10.setLicenseFamilyCategory("");
        defaultLog1.error((java.lang.Object) builder12);
        java.lang.Object obj14 = toNameTransformer0.transform((java.lang.Object) defaultLog1);
        org.apache.rat.document.ToNameTransformer toNameTransformer15 = new org.apache.rat.document.ToNameTransformer();
        org.apache.rat.utils.DefaultLog defaultLog16 = org.apache.rat.utils.DefaultLog.INSTANCE;
        org.apache.rat.license.ILicense.Builder builder17 = org.apache.rat.license.ILicense.builder();
        org.apache.rat.license.ILicense.Builder builder19 = builder17.setLicenseFamilyCategory("");
        org.apache.rat.analysis.matchers.CopyrightMatcher copyrightMatcher23 = new org.apache.rat.analysis.matchers.CopyrightMatcher("", "GPL1 ", "hi!");
        org.apache.rat.analysis.IHeaderMatcher.State state24 = copyrightMatcher23.finalizeState();
        org.apache.rat.license.ILicense.Builder builder25 = builder19.setMatcher((org.apache.rat.analysis.IHeaderMatcher) copyrightMatcher23);
        org.apache.rat.license.ILicense.Builder builder27 = builder25.setLicenseFamilyCategory("");
        defaultLog16.error((java.lang.Object) builder27);
        java.lang.Object obj29 = toNameTransformer15.transform((java.lang.Object) defaultLog16);
        org.apache.rat.utils.Log log30 = null;
        org.apache.rat.ReportConfiguration reportConfiguration31 = new org.apache.rat.ReportConfiguration(log30);
        org.apache.rat.report.claim.ClaimStatistic claimStatistic32 = org.apache.rat.Reporter.report(reportConfiguration31);
        org.apache.rat.utils.Log log33 = null;
        org.apache.rat.ReportConfiguration reportConfiguration34 = new org.apache.rat.ReportConfiguration(log33);
        org.apache.rat.report.claim.ClaimStatistic claimStatistic35 = org.apache.rat.Reporter.report(reportConfiguration34);
        org.apache.rat.utils.ReportingSet.Options options36 = org.apache.rat.utils.ReportingSet.Options.OVERWRITE;
        reportConfiguration34.licenseDuplicateOption(options36);
        reportConfiguration31.familyDuplicateOption(options36);
        org.apache.commons.io.function.IOSupplier<java.io.PrintWriter> printWriterIOSupplier39 = reportConfiguration31.getWriter();
        boolean boolean40 = reportConfiguration31.isAddingLicensesForced();
        org.apache.rat.utils.Log log41 = null;
        org.apache.rat.ReportConfiguration reportConfiguration42 = new org.apache.rat.ReportConfiguration(log41);
        reportConfiguration42.addApprovedLicenseCategory(".cvsignore");
        org.apache.rat.utils.Log.Level level45 = org.apache.rat.utils.Log.Level.ERROR;
        reportConfiguration42.logFamilyCollisions(level45);
        reportConfiguration31.logLicenseCollisions(level45);
        defaultLog16.setLevel(level45);
        defaultLog1.setLevel(level45);
        org.apache.rat.utils.DefaultLog defaultLog50 = org.apache.rat.utils.DefaultLog.INSTANCE;
        org.apache.rat.license.ILicense.Builder builder51 = org.apache.rat.license.ILicense.builder();
        org.apache.rat.license.ILicense.Builder builder53 = builder51.setLicenseFamilyCategory("");
        org.apache.rat.analysis.matchers.CopyrightMatcher copyrightMatcher57 = new org.apache.rat.analysis.matchers.CopyrightMatcher("", "GPL1 ", "hi!");
        org.apache.rat.analysis.IHeaderMatcher.State state58 = copyrightMatcher57.finalizeState();
        org.apache.rat.license.ILicense.Builder builder59 = builder53.setMatcher((org.apache.rat.analysis.IHeaderMatcher) copyrightMatcher57);
        org.apache.rat.license.ILicense.Builder builder61 = builder59.setLicenseFamilyCategory("");
        defaultLog50.error((java.lang.Object) builder61);
        org.apache.rat.analysis.matchers.CopyrightMatcher copyrightMatcher66 = new org.apache.rat.analysis.matchers.CopyrightMatcher("", "GPL1 ", "hi!");
        copyrightMatcher66.reset();
        org.apache.rat.license.ILicense.Builder builder68 = builder61.setMatcher((org.apache.rat.analysis.IHeaderMatcher) copyrightMatcher66);
        org.apache.rat.configuration.builders.SpdxBuilder spdxBuilder69 = org.apache.rat.analysis.IHeaderMatcher.Builder.spdx();
        java.lang.String str70 = spdxBuilder69.toString();
        org.apache.rat.configuration.builders.SpdxBuilder spdxBuilder72 = spdxBuilder69.setName("ef7a8b13-64c3-4510-bb0c-dbf208e1e73f");
        org.apache.rat.license.ILicense.Builder builder73 = builder68.setMatcher((org.apache.rat.analysis.IHeaderMatcher.Builder) spdxBuilder69);
        org.apache.rat.license.ILicense.Builder builder75 = builder73.setName("DOJO ");
        org.apache.rat.license.ILicense.Builder builder77 = builder75.setLicenseFamilyCategory("RegexBuilder: http://org/apache/rat/meta-data#LicenseFamilyName");
        org.apache.rat.configuration.builders.MatcherRefBuilder matcherRefBuilder78 = org.apache.rat.analysis.IHeaderMatcher.Builder.matcherRef();
        boolean boolean79 = matcherRefBuilder78.hasId();
        java.util.Map<java.lang.String, org.apache.rat.analysis.IHeaderMatcher> strMap80 = null;
        org.apache.rat.configuration.builders.MatcherRefBuilder matcherRefBuilder81 = matcherRefBuilder78.setMatchers(strMap80);
        java.util.Map<java.lang.String, org.apache.rat.analysis.IHeaderMatcher> strMap82 = null;
        org.apache.rat.configuration.builders.MatcherRefBuilder matcherRefBuilder83 = matcherRefBuilder81.setMatchers(strMap82);
        org.apache.rat.license.ILicense.Builder builder84 = builder77.setMatcher((org.apache.rat.analysis.IHeaderMatcher.Builder) matcherRefBuilder81);
        defaultLog1.warn((java.lang.Object) builder84);
        org.apache.rat.license.ILicense.Builder builder87 = builder84.setName("1db26473-2949-4321-aafe-6e514ee5d2a4");
        org.junit.Assert.assertNotNull(defaultLog1);
        org.junit.Assert.assertNotNull(builder2);
        org.junit.Assert.assertNotNull(builder4);
        org.junit.Assert.assertTrue("'" + state9 + "' != '" + org.apache.rat.analysis.IHeaderMatcher.State.f + "'", state9.equals(org.apache.rat.analysis.IHeaderMatcher.State.f));
        org.junit.Assert.assertNotNull(builder10);
        org.junit.Assert.assertNotNull(builder12);
        org.junit.Assert.assertNull(obj14);
        org.junit.Assert.assertNotNull(defaultLog16);
        org.junit.Assert.assertNotNull(builder17);
        org.junit.Assert.assertNotNull(builder19);
        org.junit.Assert.assertTrue("'" + state24 + "' != '" + org.apache.rat.analysis.IHeaderMatcher.State.f + "'", state24.equals(org.apache.rat.analysis.IHeaderMatcher.State.f));
        org.junit.Assert.assertNotNull(builder25);
        org.junit.Assert.assertNotNull(builder27);
        org.junit.Assert.assertNull(obj29);
        org.junit.Assert.assertNull(claimStatistic32);
        org.junit.Assert.assertNull(claimStatistic35);
        org.junit.Assert.assertTrue("'" + options36 + "' != '" + org.apache.rat.utils.ReportingSet.Options.OVERWRITE + "'", options36.equals(org.apache.rat.utils.ReportingSet.Options.OVERWRITE));
        org.junit.Assert.assertNotNull(printWriterIOSupplier39);
        org.junit.Assert.assertTrue("'" + boolean40 + "' != '" + false + "'", boolean40 == false);
        org.junit.Assert.assertTrue("'" + level45 + "' != '" + org.apache.rat.utils.Log.Level.ERROR + "'", level45.equals(org.apache.rat.utils.Log.Level.ERROR));
        org.junit.Assert.assertNotNull(defaultLog50);
        org.junit.Assert.assertNotNull(builder51);
        org.junit.Assert.assertNotNull(builder53);
        org.junit.Assert.assertTrue("'" + state58 + "' != '" + org.apache.rat.analysis.IHeaderMatcher.State.f + "'", state58.equals(org.apache.rat.analysis.IHeaderMatcher.State.f));
        org.junit.Assert.assertNotNull(builder59);
        org.junit.Assert.assertNotNull(builder61);
        org.junit.Assert.assertNotNull(builder68);
        org.junit.Assert.assertNotNull(spdxBuilder69);
        org.junit.Assert.assertEquals("'" + str70 + "' != '" + "SpdxBuilder: null" + "'", str70, "SpdxBuilder: null");
        org.junit.Assert.assertNotNull(spdxBuilder72);
        org.junit.Assert.assertNotNull(builder73);
        org.junit.Assert.assertNotNull(builder75);
        org.junit.Assert.assertNotNull(builder77);
        org.junit.Assert.assertNotNull(matcherRefBuilder78);
        org.junit.Assert.assertTrue("'" + boolean79 + "' != '" + false + "'", boolean79 == false);
        org.junit.Assert.assertNotNull(matcherRefBuilder81);
        org.junit.Assert.assertNotNull(matcherRefBuilder83);
        org.junit.Assert.assertNotNull(builder84);
        org.junit.Assert.assertNotNull(builder87);
    }

    @Test
    public void test13509() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest27.test13509");
        org.apache.rat.analysis.matchers.FullTextMatcher fullTextMatcher2 = new org.apache.rat.analysis.matchers.FullTextMatcher("MANIFEST.MF", "0356753d-7389-48e7-8d63-056fd4c4548c");
        fullTextMatcher2.reset();
    }

    @Test
    public void test13510() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest27.test13510");
        org.apache.rat.Defaults.Builder builder0 = org.apache.rat.Defaults.builder();
        org.apache.rat.Defaults defaults1 = builder0.build();
        org.apache.rat.Defaults.Builder builder2 = builder0.noDefault();
        org.apache.rat.Defaults.Builder builder3 = builder0.noDefault();
        org.apache.rat.Defaults.Builder builder5 = builder0.add("Datum [ name ='http://org/apache/rat/meta-data#LicenseFamilyName',value ='Academic Free License, Version 2.1 ']");
        org.apache.rat.Defaults.Builder builder7 = builder0.remove("GNU General Public License, version 3");
        org.apache.rat.Defaults.Builder builder9 = builder0.remove("f300711b-0269-45ff-a34e-20094c87f793");
        org.apache.rat.Defaults.Builder builder11 = builder9.add("5fec021b-b12e-48c3-a002-3eea7a06339a");
        org.apache.rat.Defaults.Builder builder12 = builder11.noDefault();
        java.io.File file13 = null;
        // The following exception was thrown during execution in test generation
        try {
            org.apache.rat.Defaults.Builder builder14 = builder12.remove(file13);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(builder0);
        org.junit.Assert.assertNotNull(defaults1);
        org.junit.Assert.assertNotNull(builder2);
        org.junit.Assert.assertNotNull(builder3);
        org.junit.Assert.assertNotNull(builder5);
        org.junit.Assert.assertNotNull(builder7);
        org.junit.Assert.assertNotNull(builder9);
        org.junit.Assert.assertNotNull(builder11);
        org.junit.Assert.assertNotNull(builder12);
    }

    @Test
    public void test13511() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest27.test13511");
        java.io.Writer writer0 = null;
        org.apache.rat.report.xml.writer.impl.base.XmlWriter xmlWriter1 = new org.apache.rat.report.xml.writer.impl.base.XmlWriter(writer0);
        org.apache.rat.report.claim.impl.xml.SimpleXmlClaimReporter simpleXmlClaimReporter2 = new org.apache.rat.report.claim.impl.xml.SimpleXmlClaimReporter((org.apache.rat.report.xml.writer.IXmlWriter) xmlWriter1);
        org.apache.rat.report.claim.impl.xml.SimpleXmlClaimReporter simpleXmlClaimReporter3 = new org.apache.rat.report.claim.impl.xml.SimpleXmlClaimReporter((org.apache.rat.report.xml.writer.IXmlWriter) xmlWriter1);
        org.apache.rat.report.claim.impl.xml.SimpleXmlClaimReporter simpleXmlClaimReporter4 = new org.apache.rat.report.claim.impl.xml.SimpleXmlClaimReporter((org.apache.rat.report.xml.writer.IXmlWriter) xmlWriter1);
        org.apache.rat.report.claim.impl.xml.SimpleXmlClaimReporter simpleXmlClaimReporter5 = new org.apache.rat.report.claim.impl.xml.SimpleXmlClaimReporter((org.apache.rat.report.xml.writer.IXmlWriter) xmlWriter1);
        org.apache.rat.report.claim.impl.xml.SimpleXmlClaimReporter simpleXmlClaimReporter6 = new org.apache.rat.report.claim.impl.xml.SimpleXmlClaimReporter((org.apache.rat.report.xml.writer.IXmlWriter) xmlWriter1);
        org.apache.rat.report.claim.impl.xml.SimpleXmlClaimReporter simpleXmlClaimReporter7 = new org.apache.rat.report.claim.impl.xml.SimpleXmlClaimReporter((org.apache.rat.report.xml.writer.IXmlWriter) xmlWriter1);
        org.apache.rat.report.claim.impl.xml.SimpleXmlClaimReporter simpleXmlClaimReporter8 = new org.apache.rat.report.claim.impl.xml.SimpleXmlClaimReporter((org.apache.rat.report.xml.writer.IXmlWriter) xmlWriter1);
        org.apache.rat.report.claim.impl.xml.SimpleXmlClaimReporter simpleXmlClaimReporter9 = new org.apache.rat.report.claim.impl.xml.SimpleXmlClaimReporter((org.apache.rat.report.xml.writer.IXmlWriter) xmlWriter1);
        org.apache.rat.report.claim.impl.xml.SimpleXmlClaimReporter simpleXmlClaimReporter10 = new org.apache.rat.report.claim.impl.xml.SimpleXmlClaimReporter((org.apache.rat.report.xml.writer.IXmlWriter) xmlWriter1);
        org.apache.rat.report.claim.impl.xml.SimpleXmlClaimReporter simpleXmlClaimReporter11 = new org.apache.rat.report.claim.impl.xml.SimpleXmlClaimReporter((org.apache.rat.report.xml.writer.IXmlWriter) xmlWriter1);
        org.apache.rat.report.claim.impl.xml.SimpleXmlClaimReporter simpleXmlClaimReporter12 = new org.apache.rat.report.claim.impl.xml.SimpleXmlClaimReporter((org.apache.rat.report.xml.writer.IXmlWriter) xmlWriter1);
        org.apache.rat.report.claim.impl.xml.SimpleXmlClaimReporter simpleXmlClaimReporter13 = new org.apache.rat.report.claim.impl.xml.SimpleXmlClaimReporter((org.apache.rat.report.xml.writer.IXmlWriter) xmlWriter1);
        org.apache.rat.report.claim.impl.xml.SimpleXmlClaimReporter simpleXmlClaimReporter14 = new org.apache.rat.report.claim.impl.xml.SimpleXmlClaimReporter((org.apache.rat.report.xml.writer.IXmlWriter) xmlWriter1);
        org.apache.rat.report.claim.impl.xml.SimpleXmlClaimReporter simpleXmlClaimReporter15 = new org.apache.rat.report.claim.impl.xml.SimpleXmlClaimReporter((org.apache.rat.report.xml.writer.IXmlWriter) xmlWriter1);
        // The following exception was thrown during execution in test generation
        try {
            org.apache.rat.report.xml.writer.IXmlWriter iXmlWriter17 = xmlWriter1.openElement((java.lang.CharSequence) "17db7eb09a7d443899492a058192f60a");
            org.junit.Assert.fail("Expected exception of type org.apache.rat.report.xml.writer.InvalidXmlException; message: '17db7eb09a7d443899492a058192f60a' is not a valid element name");
        } catch (org.apache.rat.report.xml.writer.InvalidXmlException e) {
            // Expected exception.
        }
    }

    @Test
    public void test13512() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest27.test13512");
        boolean boolean1 = org.apache.rat.document.impl.guesser.BinaryGuesser.isNonBinary("1d5cdc49-c9ab-43d6-aa9d-24a42ff437aa");
        org.junit.Assert.assertTrue("'" + boolean1 + "' != '" + false + "'", boolean1 == false);
    }

    @Test
    public void test13513() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest27.test13513");
        org.apache.rat.utils.DefaultLog defaultLog0 = org.apache.rat.utils.DefaultLog.INSTANCE;
        org.apache.rat.license.ILicense.Builder builder1 = org.apache.rat.license.ILicense.builder();
        org.apache.rat.license.ILicense.Builder builder3 = builder1.setLicenseFamilyCategory("");
        org.apache.rat.analysis.matchers.CopyrightMatcher copyrightMatcher7 = new org.apache.rat.analysis.matchers.CopyrightMatcher("", "GPL1 ", "hi!");
        org.apache.rat.analysis.IHeaderMatcher.State state8 = copyrightMatcher7.finalizeState();
        org.apache.rat.license.ILicense.Builder builder9 = builder3.setMatcher((org.apache.rat.analysis.IHeaderMatcher) copyrightMatcher7);
        org.apache.rat.license.ILicense.Builder builder11 = builder9.setLicenseFamilyCategory("");
        defaultLog0.error((java.lang.Object) builder11);
        org.apache.rat.utils.Log log13 = null;
        org.apache.rat.ReportConfiguration reportConfiguration14 = new org.apache.rat.ReportConfiguration(log13);
        java.io.FilenameFilter filenameFilter15 = reportConfiguration14.getInputFileFilter();
        org.apache.rat.license.LicenseSetFactory.LicenseFilter licenseFilter16 = org.apache.rat.license.LicenseSetFactory.LicenseFilter.all;
        java.util.SortedSet<org.apache.rat.license.ILicense> iLicenseSet17 = reportConfiguration14.getLicenses(licenseFilter16);
        org.apache.rat.config.AddLicenseHeaders addLicenseHeaders18 = org.apache.rat.config.AddLicenseHeaders.FALSE;
        reportConfiguration14.setAddLicenseHeaders(addLicenseHeaders18);
        org.apache.rat.utils.Log log20 = null;
        org.apache.rat.ReportConfiguration reportConfiguration21 = new org.apache.rat.ReportConfiguration(log20);
        org.apache.rat.report.claim.ClaimStatistic claimStatistic22 = org.apache.rat.Reporter.report(reportConfiguration21);
        org.apache.rat.license.LicenseSetFactory.LicenseFilter licenseFilter23 = org.apache.rat.license.LicenseSetFactory.LicenseFilter.all;
        org.apache.rat.Reporter.listLicenses(reportConfiguration21, licenseFilter23);
        org.apache.rat.Reporter.listLicenses(reportConfiguration14, licenseFilter23);
        org.apache.rat.utils.Log log26 = null;
        org.apache.rat.ReportConfiguration reportConfiguration27 = new org.apache.rat.ReportConfiguration(log26);
        java.io.FilenameFilter filenameFilter28 = reportConfiguration27.getInputFileFilter();
        org.apache.rat.license.LicenseSetFactory.LicenseFilter licenseFilter29 = org.apache.rat.license.LicenseSetFactory.LicenseFilter.all;
        java.util.SortedSet<org.apache.rat.license.ILicense> iLicenseSet30 = reportConfiguration27.getLicenses(licenseFilter29);
        org.apache.rat.config.AddLicenseHeaders addLicenseHeaders31 = org.apache.rat.config.AddLicenseHeaders.FALSE;
        reportConfiguration27.setAddLicenseHeaders(addLicenseHeaders31);
        org.apache.rat.utils.Log log33 = null;
        org.apache.rat.ReportConfiguration reportConfiguration34 = new org.apache.rat.ReportConfiguration(log33);
        org.apache.rat.report.claim.ClaimStatistic claimStatistic35 = org.apache.rat.Reporter.report(reportConfiguration34);
        org.apache.rat.license.LicenseSetFactory.LicenseFilter licenseFilter36 = org.apache.rat.license.LicenseSetFactory.LicenseFilter.all;
        org.apache.rat.Reporter.listLicenses(reportConfiguration34, licenseFilter36);
        org.apache.rat.Reporter.listLicenses(reportConfiguration27, licenseFilter36);
        org.apache.rat.Reporter.listLicenses(reportConfiguration14, licenseFilter36);
        org.apache.rat.utils.Log log40 = null;
        org.apache.rat.ReportConfiguration reportConfiguration41 = new org.apache.rat.ReportConfiguration(log40);
        org.apache.commons.io.function.IOSupplier<java.io.OutputStream> outputStreamIOSupplier42 = reportConfiguration41.getOutput();
        reportConfiguration14.setOut(outputStreamIOSupplier42);
        org.apache.rat.utils.Log.Level level44 = org.apache.rat.utils.Log.Level.WARN;
        reportConfiguration14.logLicenseCollisions(level44);
        defaultLog0.warn((java.lang.Object) level44);
        defaultLog0.info((java.lang.Object) "TextBuilder: Datum [ name ='http:...");
        org.apache.rat.utils.Log log49 = null;
        org.apache.rat.ReportConfiguration reportConfiguration50 = new org.apache.rat.ReportConfiguration(log49);
        java.io.FilenameFilter filenameFilter51 = reportConfiguration50.getInputFileFilter();
        org.apache.rat.license.LicenseSetFactory.LicenseFilter licenseFilter52 = org.apache.rat.license.LicenseSetFactory.LicenseFilter.all;
        java.util.SortedSet<org.apache.rat.license.ILicense> iLicenseSet53 = reportConfiguration50.getLicenses(licenseFilter52);
        org.apache.rat.license.ILicenseFamily iLicenseFamily54 = null;
        reportConfiguration50.addFamily(iLicenseFamily54);
        reportConfiguration50.setCopyrightMessage("hi!");
        defaultLog0.error((java.lang.Object) reportConfiguration50);
        org.apache.rat.annotation.ApacheV2LicenseAppender apacheV2LicenseAppender59 = new org.apache.rat.annotation.ApacheV2LicenseAppender((org.apache.rat.utils.Log) defaultLog0);
        org.apache.rat.annotation.ApacheV2LicenseAppender apacheV2LicenseAppender61 = new org.apache.rat.annotation.ApacheV2LicenseAppender((org.apache.rat.utils.Log) defaultLog0, "RegexBuilder: d4148d3a-edbc-4672-b347-0fa619553f91");
        org.junit.Assert.assertNotNull(defaultLog0);
        org.junit.Assert.assertNotNull(builder1);
        org.junit.Assert.assertNotNull(builder3);
        org.junit.Assert.assertTrue("'" + state8 + "' != '" + org.apache.rat.analysis.IHeaderMatcher.State.f + "'", state8.equals(org.apache.rat.analysis.IHeaderMatcher.State.f));
        org.junit.Assert.assertNotNull(builder9);
        org.junit.Assert.assertNotNull(builder11);
        org.junit.Assert.assertNull(filenameFilter15);
        org.junit.Assert.assertTrue("'" + licenseFilter16 + "' != '" + org.apache.rat.license.LicenseSetFactory.LicenseFilter.all + "'", licenseFilter16.equals(org.apache.rat.license.LicenseSetFactory.LicenseFilter.all));
        org.junit.Assert.assertNotNull(iLicenseSet17);
        org.junit.Assert.assertTrue("'" + addLicenseHeaders18 + "' != '" + org.apache.rat.config.AddLicenseHeaders.FALSE + "'", addLicenseHeaders18.equals(org.apache.rat.config.AddLicenseHeaders.FALSE));
        org.junit.Assert.assertNull(claimStatistic22);
        org.junit.Assert.assertTrue("'" + licenseFilter23 + "' != '" + org.apache.rat.license.LicenseSetFactory.LicenseFilter.all + "'", licenseFilter23.equals(org.apache.rat.license.LicenseSetFactory.LicenseFilter.all));
        org.junit.Assert.assertNull(filenameFilter28);
        org.junit.Assert.assertTrue("'" + licenseFilter29 + "' != '" + org.apache.rat.license.LicenseSetFactory.LicenseFilter.all + "'", licenseFilter29.equals(org.apache.rat.license.LicenseSetFactory.LicenseFilter.all));
        org.junit.Assert.assertNotNull(iLicenseSet30);
        org.junit.Assert.assertTrue("'" + addLicenseHeaders31 + "' != '" + org.apache.rat.config.AddLicenseHeaders.FALSE + "'", addLicenseHeaders31.equals(org.apache.rat.config.AddLicenseHeaders.FALSE));
        org.junit.Assert.assertNull(claimStatistic35);
        org.junit.Assert.assertTrue("'" + licenseFilter36 + "' != '" + org.apache.rat.license.LicenseSetFactory.LicenseFilter.all + "'", licenseFilter36.equals(org.apache.rat.license.LicenseSetFactory.LicenseFilter.all));
        org.junit.Assert.assertNotNull(outputStreamIOSupplier42);
        org.junit.Assert.assertTrue("'" + level44 + "' != '" + org.apache.rat.utils.Log.Level.WARN + "'", level44.equals(org.apache.rat.utils.Log.Level.WARN));
        org.junit.Assert.assertNull(filenameFilter51);
        org.junit.Assert.assertTrue("'" + licenseFilter52 + "' != '" + org.apache.rat.license.LicenseSetFactory.LicenseFilter.all + "'", licenseFilter52.equals(org.apache.rat.license.LicenseSetFactory.LicenseFilter.all));
        org.junit.Assert.assertNotNull(iLicenseSet53);
    }

    @Test
    public void test13514() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest27.test13514");
        org.apache.rat.report.claim.ClaimStatistic claimStatistic0 = new org.apache.rat.report.claim.ClaimStatistic();
        java.util.Map<java.lang.String, java.lang.Integer> strMap1 = claimStatistic0.getLicenseFileCodeMap();
        java.util.Map<java.lang.String, java.lang.Integer> strMap2 = claimStatistic0.getLicenseFileNameMap();
        java.util.Map<java.lang.String, java.lang.Integer> strMap3 = claimStatistic0.getLicenseFileNameMap();
        claimStatistic0.setNumGenerated(14);
        int int6 = claimStatistic0.getNumApproved();
        org.junit.Assert.assertNull(strMap1);
        org.junit.Assert.assertNull(strMap2);
        org.junit.Assert.assertNull(strMap3);
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 0 + "'", int6 == 0);
    }

    @Test
    public void test13515() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest27.test13515");
        org.apache.rat.utils.Log log0 = null;
        org.apache.rat.ReportConfiguration reportConfiguration1 = new org.apache.rat.ReportConfiguration(log0);
        java.io.FilenameFilter filenameFilter2 = reportConfiguration1.getInputFileFilter();
        org.apache.rat.license.LicenseSetFactory.LicenseFilter licenseFilter3 = org.apache.rat.license.LicenseSetFactory.LicenseFilter.all;
        java.util.SortedSet<org.apache.rat.license.ILicense> iLicenseSet4 = reportConfiguration1.getLicenses(licenseFilter3);
        org.apache.rat.config.AddLicenseHeaders addLicenseHeaders5 = org.apache.rat.config.AddLicenseHeaders.FALSE;
        reportConfiguration1.setAddLicenseHeaders(addLicenseHeaders5);
        org.apache.rat.utils.Log log7 = null;
        org.apache.rat.ReportConfiguration reportConfiguration8 = new org.apache.rat.ReportConfiguration(log7);
        org.apache.rat.report.claim.ClaimStatistic claimStatistic9 = org.apache.rat.Reporter.report(reportConfiguration8);
        org.apache.rat.license.LicenseSetFactory.LicenseFilter licenseFilter10 = org.apache.rat.license.LicenseSetFactory.LicenseFilter.all;
        org.apache.rat.Reporter.listLicenses(reportConfiguration8, licenseFilter10);
        org.apache.rat.Reporter.listLicenses(reportConfiguration1, licenseFilter10);
        org.apache.rat.report.IReportable iReportable13 = null;
        reportConfiguration1.setReportable(iReportable13);
        java.lang.String str15 = reportConfiguration1.getCopyrightMessage();
        org.apache.commons.io.filefilter.IOFileFilter iOFileFilter16 = reportConfiguration1.getDirectoryFilter();
        org.apache.rat.report.IReportable iReportable17 = null;
        reportConfiguration1.setReportable(iReportable17);
        java.net.URL uRL19 = null;
        // The following exception was thrown during execution in test generation
        try {
            reportConfiguration1.setStyleSheet(uRL19);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: styleSheet file should not be null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNull(filenameFilter2);
        org.junit.Assert.assertTrue("'" + licenseFilter3 + "' != '" + org.apache.rat.license.LicenseSetFactory.LicenseFilter.all + "'", licenseFilter3.equals(org.apache.rat.license.LicenseSetFactory.LicenseFilter.all));
        org.junit.Assert.assertNotNull(iLicenseSet4);
        org.junit.Assert.assertTrue("'" + addLicenseHeaders5 + "' != '" + org.apache.rat.config.AddLicenseHeaders.FALSE + "'", addLicenseHeaders5.equals(org.apache.rat.config.AddLicenseHeaders.FALSE));
        org.junit.Assert.assertNull(claimStatistic9);
        org.junit.Assert.assertTrue("'" + licenseFilter10 + "' != '" + org.apache.rat.license.LicenseSetFactory.LicenseFilter.all + "'", licenseFilter10.equals(org.apache.rat.license.LicenseSetFactory.LicenseFilter.all));
        org.junit.Assert.assertNull(str15);
        org.junit.Assert.assertNotNull(iOFileFilter16);
    }

    @Test
    public void test13516() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest27.test13516");
        org.apache.rat.license.SimpleLicenseFamily simpleLicenseFamily0 = new org.apache.rat.license.SimpleLicenseFamily();
        simpleLicenseFamily0.setFamilyName("http://org/apache/rat/meta-data#LicenseFamilyName");
        simpleLicenseFamily0.setFamilyCategory("c523095e-4421-4cc4-93e2-039f23b91f76");
        simpleLicenseFamily0.setFamilyCategory("192e4c47-958b-400b-8306-1fae145a0161");
    }

    @Test
    public void test13517() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest27.test13517");
        java.util.regex.Pattern pattern1 = null;
        org.apache.rat.analysis.matchers.SimpleRegexMatcher simpleRegexMatcher2 = new org.apache.rat.analysis.matchers.SimpleRegexMatcher("", pattern1);
        simpleRegexMatcher2.reset();
        java.lang.String str4 = simpleRegexMatcher2.getId();
        org.apache.rat.analysis.matchers.NotMatcher notMatcher5 = new org.apache.rat.analysis.matchers.NotMatcher((org.apache.rat.analysis.IHeaderMatcher) simpleRegexMatcher2);
        java.lang.String str6 = notMatcher5.getId();
        org.apache.rat.analysis.IHeaderMatcher.State state7 = notMatcher5.finalizeState();
        org.apache.rat.analysis.IHeaderMatcher.State state8 = notMatcher5.finalizeState();
        notMatcher5.reset();
        java.lang.String str10 = notMatcher5.getId();
// flaky:         org.junit.Assert.assertEquals("'" + str4 + "' != '" + "bac8ff20-a833-4cdc-84cf-5543a3d6bce2" + "'", str4, "bac8ff20-a833-4cdc-84cf-5543a3d6bce2");
// flaky:         org.junit.Assert.assertEquals("'" + str6 + "' != '" + "beedd4f2-4dd4-4aba-b61b-96954bf7a601" + "'", str6, "beedd4f2-4dd4-4aba-b61b-96954bf7a601");
        org.junit.Assert.assertTrue("'" + state7 + "' != '" + org.apache.rat.analysis.IHeaderMatcher.State.t + "'", state7.equals(org.apache.rat.analysis.IHeaderMatcher.State.t));
        org.junit.Assert.assertTrue("'" + state8 + "' != '" + org.apache.rat.analysis.IHeaderMatcher.State.t + "'", state8.equals(org.apache.rat.analysis.IHeaderMatcher.State.t));
// flaky:         org.junit.Assert.assertEquals("'" + str10 + "' != '" + "beedd4f2-4dd4-4aba-b61b-96954bf7a601" + "'", str10, "beedd4f2-4dd4-4aba-b61b-96954bf7a601");
    }

    @Test
    public void test13518() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest27.test13518");
        org.apache.rat.api.MetaData.Datum datum2 = new org.apache.rat.api.MetaData.Datum("4bc3a3d5-58d2-4ae6-a09c-2e73ed66c833", "688df92f-f2ac-4527-846e-6d6bf8643eb7");
        java.lang.String str3 = datum2.getValue();
        java.lang.String str4 = datum2.getValue();
        java.lang.String str5 = datum2.toString();
        org.junit.Assert.assertEquals("'" + str3 + "' != '" + "688df92f-f2ac-4527-846e-6d6bf8643eb7" + "'", str3, "688df92f-f2ac-4527-846e-6d6bf8643eb7");
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "688df92f-f2ac-4527-846e-6d6bf8643eb7" + "'", str4, "688df92f-f2ac-4527-846e-6d6bf8643eb7");
        org.junit.Assert.assertEquals("'" + str5 + "' != '" + "Datum [ name ='4bc3a3d5-58d2-4ae6-a09c-2e73ed66c833',value ='688df92f-f2ac-4527-846e-6d6bf8643eb7 ']" + "'", str5, "Datum [ name ='4bc3a3d5-58d2-4ae6-a09c-2e73ed66c833',value ='688df92f-f2ac-4527-846e-6d6bf8643eb7 ']");
    }

    @Test
    public void test13519() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest27.test13519");
        org.apache.rat.license.ILicenseFamilyBuilder iLicenseFamilyBuilder0 = new org.apache.rat.license.ILicenseFamilyBuilder();
        java.lang.String str1 = iLicenseFamilyBuilder0.getCategory();
        org.apache.rat.license.ILicenseFamily.Builder builder3 = iLicenseFamilyBuilder0.setLicenseFamilyCategory("AL   ");
        org.apache.rat.license.ILicenseFamily.Builder builder5 = iLicenseFamilyBuilder0.setLicenseFamilyCategory("MIT  ");
        org.apache.rat.license.ILicenseFamily.Builder builder7 = iLicenseFamilyBuilder0.setLicenseFamilyName("4a00cf7d-fe76-423e-917e-b03bbae6b8a5");
        java.lang.String str8 = iLicenseFamilyBuilder0.getCategory();
        org.apache.rat.license.ILicenseFamily.Builder builder10 = iLicenseFamilyBuilder0.setLicenseFamilyName("8ecb8cce-06e4-400f-84d9-ad1cf6289fda");
        org.apache.rat.license.ILicenseFamily iLicenseFamily11 = iLicenseFamilyBuilder0.build();
        java.lang.String str12 = iLicenseFamilyBuilder0.getCategory();
        org.apache.rat.license.ILicenseFamily.Builder builder14 = iLicenseFamilyBuilder0.setLicenseFamilyName("?????");
        java.lang.String str15 = iLicenseFamilyBuilder0.getCategory();
        org.apache.rat.license.ILicenseFamily.Builder builder17 = iLicenseFamilyBuilder0.setLicenseFamilyCategory("Copyright Builder: s:021187d7-27c2-4fd9-bc74-8cc00413ee52 e: o:null");
        org.apache.rat.license.ILicenseFamily iLicenseFamily18 = iLicenseFamilyBuilder0.build();
        org.junit.Assert.assertNull(str1);
        org.junit.Assert.assertNotNull(builder3);
        org.junit.Assert.assertNotNull(builder5);
        org.junit.Assert.assertNotNull(builder7);
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "MIT  " + "'", str8, "MIT  ");
        org.junit.Assert.assertNotNull(builder10);
        org.junit.Assert.assertNotNull(iLicenseFamily11);
        org.junit.Assert.assertEquals("'" + str12 + "' != '" + "MIT  " + "'", str12, "MIT  ");
        org.junit.Assert.assertNotNull(builder14);
        org.junit.Assert.assertEquals("'" + str15 + "' != '" + "MIT  " + "'", str15, "MIT  ");
        org.junit.Assert.assertNotNull(builder17);
        org.junit.Assert.assertNotNull(iLicenseFamily18);
    }

    @Test
    public void test13520() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest27.test13520");
        org.apache.rat.configuration.builders.SpdxBuilder spdxBuilder0 = org.apache.rat.analysis.IHeaderMatcher.Builder.spdx();
        java.lang.String str1 = spdxBuilder0.toString();
        org.apache.rat.configuration.builders.SpdxBuilder spdxBuilder3 = spdxBuilder0.setName("ef7a8b13-64c3-4510-bb0c-dbf208e1e73f");
        java.lang.String str4 = spdxBuilder3.toString();
        java.lang.String str5 = spdxBuilder3.toString();
        org.apache.rat.analysis.IHeaderMatcher iHeaderMatcher6 = spdxBuilder3.build();
        org.apache.rat.analysis.IHeaderMatcher iHeaderMatcher7 = spdxBuilder3.build();
        org.junit.Assert.assertNotNull(spdxBuilder0);
        org.junit.Assert.assertEquals("'" + str1 + "' != '" + "SpdxBuilder: null" + "'", str1, "SpdxBuilder: null");
        org.junit.Assert.assertNotNull(spdxBuilder3);
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "SpdxBuilder: ef7a8b13-64c3-4510-bb0c-dbf208e1e73f" + "'", str4, "SpdxBuilder: ef7a8b13-64c3-4510-bb0c-dbf208e1e73f");
        org.junit.Assert.assertEquals("'" + str5 + "' != '" + "SpdxBuilder: ef7a8b13-64c3-4510-bb0c-dbf208e1e73f" + "'", str5, "SpdxBuilder: ef7a8b13-64c3-4510-bb0c-dbf208e1e73f");
        org.junit.Assert.assertNotNull(iHeaderMatcher6);
        org.junit.Assert.assertNotNull(iHeaderMatcher7);
    }

    @Test
    public void test13521() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest27.test13521");
        org.apache.rat.utils.Log log0 = null;
        org.apache.rat.ReportConfiguration reportConfiguration1 = new org.apache.rat.ReportConfiguration(log0);
        org.apache.rat.report.claim.ClaimStatistic claimStatistic2 = org.apache.rat.Reporter.report(reportConfiguration1);
        org.apache.commons.io.function.IOSupplier<java.io.OutputStream> outputStreamIOSupplier3 = reportConfiguration1.getOutput();
        boolean boolean4 = reportConfiguration1.isAddingLicensesForced();
        java.lang.String str5 = reportConfiguration1.getCopyrightMessage();
        org.apache.rat.license.ILicense[] iLicenseArray6 = new org.apache.rat.license.ILicense[] {};
        java.util.TreeSet<org.apache.rat.license.ILicense> iLicenseSet7 = new java.util.TreeSet<org.apache.rat.license.ILicense>();
        boolean boolean8 = java.util.Collections.addAll((java.util.Collection<org.apache.rat.license.ILicense>) iLicenseSet7, iLicenseArray6);
        java.lang.String[] strArray21 = new java.lang.String[] { "GPL2 ", "GPL1 ", "notice", "http://org/apache/rat/meta-data#LicenseFamilyName", "notice", "GPL2 ", "http://org/apache/rat/meta-data#LicenseFamilyName", "", "GPL2 ", "", "GPL1 ", "hi!" };
        java.util.ArrayList<java.lang.String> strList22 = new java.util.ArrayList<java.lang.String>();
        boolean boolean23 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strList22, strArray21);
        org.apache.rat.license.LicenseSetFactory licenseSetFactory24 = new org.apache.rat.license.LicenseSetFactory((java.util.SortedSet<org.apache.rat.license.ILicense>) iLicenseSet7, (java.util.Collection<java.lang.String>) strList22);
        org.apache.rat.utils.Log log25 = null;
        org.apache.rat.ReportConfiguration reportConfiguration26 = new org.apache.rat.ReportConfiguration(log25);
        java.io.FilenameFilter filenameFilter27 = reportConfiguration26.getInputFileFilter();
        org.apache.rat.license.LicenseSetFactory.LicenseFilter licenseFilter28 = org.apache.rat.license.LicenseSetFactory.LicenseFilter.all;
        java.util.SortedSet<org.apache.rat.license.ILicense> iLicenseSet29 = reportConfiguration26.getLicenses(licenseFilter28);
        org.apache.rat.config.AddLicenseHeaders addLicenseHeaders30 = org.apache.rat.config.AddLicenseHeaders.FALSE;
        reportConfiguration26.setAddLicenseHeaders(addLicenseHeaders30);
        org.apache.rat.utils.Log log32 = null;
        org.apache.rat.ReportConfiguration reportConfiguration33 = new org.apache.rat.ReportConfiguration(log32);
        org.apache.rat.report.claim.ClaimStatistic claimStatistic34 = org.apache.rat.Reporter.report(reportConfiguration33);
        org.apache.rat.license.LicenseSetFactory.LicenseFilter licenseFilter35 = org.apache.rat.license.LicenseSetFactory.LicenseFilter.all;
        org.apache.rat.Reporter.listLicenses(reportConfiguration33, licenseFilter35);
        org.apache.rat.Reporter.listLicenses(reportConfiguration26, licenseFilter35);
        org.apache.rat.utils.Log log38 = null;
        org.apache.rat.ReportConfiguration reportConfiguration39 = new org.apache.rat.ReportConfiguration(log38);
        java.io.FilenameFilter filenameFilter40 = reportConfiguration39.getInputFileFilter();
        org.apache.rat.license.LicenseSetFactory.LicenseFilter licenseFilter41 = org.apache.rat.license.LicenseSetFactory.LicenseFilter.all;
        java.util.SortedSet<org.apache.rat.license.ILicense> iLicenseSet42 = reportConfiguration39.getLicenses(licenseFilter41);
        org.apache.rat.config.AddLicenseHeaders addLicenseHeaders43 = org.apache.rat.config.AddLicenseHeaders.FALSE;
        reportConfiguration39.setAddLicenseHeaders(addLicenseHeaders43);
        org.apache.rat.utils.Log log45 = null;
        org.apache.rat.ReportConfiguration reportConfiguration46 = new org.apache.rat.ReportConfiguration(log45);
        org.apache.rat.report.claim.ClaimStatistic claimStatistic47 = org.apache.rat.Reporter.report(reportConfiguration46);
        org.apache.rat.license.LicenseSetFactory.LicenseFilter licenseFilter48 = org.apache.rat.license.LicenseSetFactory.LicenseFilter.all;
        org.apache.rat.Reporter.listLicenses(reportConfiguration46, licenseFilter48);
        org.apache.rat.Reporter.listLicenses(reportConfiguration39, licenseFilter48);
        org.apache.rat.Reporter.listLicenses(reportConfiguration26, licenseFilter48);
        java.util.SortedSet<org.apache.rat.license.ILicense> iLicenseSet52 = licenseSetFactory24.getLicenses(licenseFilter48);
        org.apache.rat.Reporter.listLicenseFamilies(reportConfiguration1, licenseFilter48);
        boolean boolean54 = reportConfiguration1.isAddingLicenses();
        reportConfiguration1.setCopyrightMessage("binar");
        org.junit.Assert.assertNull(claimStatistic2);
        org.junit.Assert.assertNotNull(outputStreamIOSupplier3);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertNull(str5);
        org.junit.Assert.assertNotNull(iLicenseArray6);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertNotNull(strArray21);
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + true + "'", boolean23 == true);
        org.junit.Assert.assertNull(filenameFilter27);
        org.junit.Assert.assertTrue("'" + licenseFilter28 + "' != '" + org.apache.rat.license.LicenseSetFactory.LicenseFilter.all + "'", licenseFilter28.equals(org.apache.rat.license.LicenseSetFactory.LicenseFilter.all));
        org.junit.Assert.assertNotNull(iLicenseSet29);
        org.junit.Assert.assertTrue("'" + addLicenseHeaders30 + "' != '" + org.apache.rat.config.AddLicenseHeaders.FALSE + "'", addLicenseHeaders30.equals(org.apache.rat.config.AddLicenseHeaders.FALSE));
        org.junit.Assert.assertNull(claimStatistic34);
        org.junit.Assert.assertTrue("'" + licenseFilter35 + "' != '" + org.apache.rat.license.LicenseSetFactory.LicenseFilter.all + "'", licenseFilter35.equals(org.apache.rat.license.LicenseSetFactory.LicenseFilter.all));
        org.junit.Assert.assertNull(filenameFilter40);
        org.junit.Assert.assertTrue("'" + licenseFilter41 + "' != '" + org.apache.rat.license.LicenseSetFactory.LicenseFilter.all + "'", licenseFilter41.equals(org.apache.rat.license.LicenseSetFactory.LicenseFilter.all));
        org.junit.Assert.assertNotNull(iLicenseSet42);
        org.junit.Assert.assertTrue("'" + addLicenseHeaders43 + "' != '" + org.apache.rat.config.AddLicenseHeaders.FALSE + "'", addLicenseHeaders43.equals(org.apache.rat.config.AddLicenseHeaders.FALSE));
        org.junit.Assert.assertNull(claimStatistic47);
        org.junit.Assert.assertTrue("'" + licenseFilter48 + "' != '" + org.apache.rat.license.LicenseSetFactory.LicenseFilter.all + "'", licenseFilter48.equals(org.apache.rat.license.LicenseSetFactory.LicenseFilter.all));
        org.junit.Assert.assertNotNull(iLicenseSet52);
        org.junit.Assert.assertTrue("'" + boolean54 + "' != '" + false + "'", boolean54 == false);
    }

    @Test
    public void test13522() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest27.test13522");
        org.apache.rat.utils.Log log0 = null;
        org.apache.rat.ReportConfiguration reportConfiguration1 = new org.apache.rat.ReportConfiguration(log0);
        java.io.FilenameFilter filenameFilter2 = reportConfiguration1.getInputFileFilter();
        org.apache.rat.license.LicenseSetFactory.LicenseFilter licenseFilter3 = org.apache.rat.license.LicenseSetFactory.LicenseFilter.all;
        java.util.SortedSet<org.apache.rat.license.ILicense> iLicenseSet4 = reportConfiguration1.getLicenses(licenseFilter3);
        org.apache.rat.config.AddLicenseHeaders addLicenseHeaders5 = org.apache.rat.config.AddLicenseHeaders.FALSE;
        reportConfiguration1.setAddLicenseHeaders(addLicenseHeaders5);
        org.apache.rat.utils.Log log7 = null;
        org.apache.rat.ReportConfiguration reportConfiguration8 = new org.apache.rat.ReportConfiguration(log7);
        org.apache.rat.report.claim.ClaimStatistic claimStatistic9 = org.apache.rat.Reporter.report(reportConfiguration8);
        org.apache.rat.license.LicenseSetFactory.LicenseFilter licenseFilter10 = org.apache.rat.license.LicenseSetFactory.LicenseFilter.all;
        org.apache.rat.Reporter.listLicenses(reportConfiguration8, licenseFilter10);
        org.apache.rat.Reporter.listLicenses(reportConfiguration1, licenseFilter10);
        java.io.FilenameFilter filenameFilter13 = reportConfiguration1.getInputFileFilter();
        reportConfiguration1.addApprovedLicenseCategory("106ab050-2110-44f8-a9e7-726c4af443ea");
        java.net.URI uRI16 = null;
        // The following exception was thrown during execution in test generation
        try {
            reportConfiguration1.setStyleSheet(uRI16);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: styleSheet file should not be null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNull(filenameFilter2);
        org.junit.Assert.assertTrue("'" + licenseFilter3 + "' != '" + org.apache.rat.license.LicenseSetFactory.LicenseFilter.all + "'", licenseFilter3.equals(org.apache.rat.license.LicenseSetFactory.LicenseFilter.all));
        org.junit.Assert.assertNotNull(iLicenseSet4);
        org.junit.Assert.assertTrue("'" + addLicenseHeaders5 + "' != '" + org.apache.rat.config.AddLicenseHeaders.FALSE + "'", addLicenseHeaders5.equals(org.apache.rat.config.AddLicenseHeaders.FALSE));
        org.junit.Assert.assertNull(claimStatistic9);
        org.junit.Assert.assertTrue("'" + licenseFilter10 + "' != '" + org.apache.rat.license.LicenseSetFactory.LicenseFilter.all + "'", licenseFilter10.equals(org.apache.rat.license.LicenseSetFactory.LicenseFilter.all));
        org.junit.Assert.assertNull(filenameFilter13);
    }

    @Test
    public void test13523() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest27.test13523");
        org.apache.rat.report.claim.ClaimStatistic claimStatistic0 = new org.apache.rat.report.claim.ClaimStatistic();
        claimStatistic0.setNumApproved((int) (short) 10);
        java.util.Map<java.lang.String, java.lang.Integer> strMap3 = null;
        claimStatistic0.setDocumentCategoryMap(strMap3);
        java.util.Map<java.lang.String, java.lang.Integer> strMap5 = null;
        claimStatistic0.setLicenseFileNameMap(strMap5);
        int int7 = claimStatistic0.getNumUnknown();
        claimStatistic0.setNumUnknown(6);
        int int10 = claimStatistic0.getNumUnknown();
        claimStatistic0.setNumGenerated(14);
        int int13 = claimStatistic0.getNumGenerated();
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 0 + "'", int7 == 0);
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + 6 + "'", int10 == 6);
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + 14 + "'", int13 == 14);
    }

    @Test
    public void test13524() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest27.test13524");
        org.apache.rat.utils.ReportingSet<java.lang.String> strSet0 = new org.apache.rat.utils.ReportingSet<java.lang.String>();
        int int1 = strSet0.size();
        org.apache.rat.config.SourceCodeManagementSystems sourceCodeManagementSystems2 = org.apache.rat.config.SourceCodeManagementSystems.SUBVERSION;
        boolean boolean3 = sourceCodeManagementSystems2.hasIgnoreFile();
        java.util.List<java.lang.String> strList4 = sourceCodeManagementSystems2.getExclusions();
        java.util.List<java.lang.String> strList5 = sourceCodeManagementSystems2.getExclusions();
        java.util.List<java.lang.String> strList6 = sourceCodeManagementSystems2.getExclusions();
        java.util.List<java.lang.String> strList7 = sourceCodeManagementSystems2.getExclusions();
        boolean boolean8 = strSet0.equals((java.lang.Object) sourceCodeManagementSystems2);
        strSet0.clear();
        org.junit.Assert.assertTrue("'" + int1 + "' != '" + 0 + "'", int1 == 0);
        org.junit.Assert.assertTrue("'" + sourceCodeManagementSystems2 + "' != '" + org.apache.rat.config.SourceCodeManagementSystems.SUBVERSION + "'", sourceCodeManagementSystems2.equals(org.apache.rat.config.SourceCodeManagementSystems.SUBVERSION));
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertNotNull(strList4);
        org.junit.Assert.assertNotNull(strList5);
        org.junit.Assert.assertNotNull(strList6);
        org.junit.Assert.assertNotNull(strList7);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
    }

    @Test
    public void test13525() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest27.test13525");
        org.apache.rat.utils.DefaultLog defaultLog0 = org.apache.rat.utils.DefaultLog.INSTANCE;
        org.apache.rat.license.ILicense.Builder builder1 = org.apache.rat.license.ILicense.builder();
        org.apache.rat.license.ILicense.Builder builder3 = builder1.setLicenseFamilyCategory("");
        org.apache.rat.analysis.matchers.CopyrightMatcher copyrightMatcher7 = new org.apache.rat.analysis.matchers.CopyrightMatcher("", "GPL1 ", "hi!");
        org.apache.rat.analysis.IHeaderMatcher.State state8 = copyrightMatcher7.finalizeState();
        org.apache.rat.license.ILicense.Builder builder9 = builder3.setMatcher((org.apache.rat.analysis.IHeaderMatcher) copyrightMatcher7);
        org.apache.rat.license.ILicense.Builder builder11 = builder9.setLicenseFamilyCategory("");
        defaultLog0.error((java.lang.Object) builder11);
        org.apache.rat.utils.Log log13 = null;
        org.apache.rat.ReportConfiguration reportConfiguration14 = new org.apache.rat.ReportConfiguration(log13);
        java.io.FilenameFilter filenameFilter15 = reportConfiguration14.getInputFileFilter();
        org.apache.rat.license.LicenseSetFactory.LicenseFilter licenseFilter16 = org.apache.rat.license.LicenseSetFactory.LicenseFilter.all;
        java.util.SortedSet<org.apache.rat.license.ILicense> iLicenseSet17 = reportConfiguration14.getLicenses(licenseFilter16);
        org.apache.rat.config.AddLicenseHeaders addLicenseHeaders18 = org.apache.rat.config.AddLicenseHeaders.FALSE;
        reportConfiguration14.setAddLicenseHeaders(addLicenseHeaders18);
        org.apache.rat.utils.Log log20 = null;
        org.apache.rat.ReportConfiguration reportConfiguration21 = new org.apache.rat.ReportConfiguration(log20);
        org.apache.rat.report.claim.ClaimStatistic claimStatistic22 = org.apache.rat.Reporter.report(reportConfiguration21);
        org.apache.rat.license.LicenseSetFactory.LicenseFilter licenseFilter23 = org.apache.rat.license.LicenseSetFactory.LicenseFilter.all;
        org.apache.rat.Reporter.listLicenses(reportConfiguration21, licenseFilter23);
        org.apache.rat.Reporter.listLicenses(reportConfiguration14, licenseFilter23);
        org.apache.rat.utils.Log log26 = null;
        org.apache.rat.ReportConfiguration reportConfiguration27 = new org.apache.rat.ReportConfiguration(log26);
        java.io.FilenameFilter filenameFilter28 = reportConfiguration27.getInputFileFilter();
        org.apache.rat.license.LicenseSetFactory.LicenseFilter licenseFilter29 = org.apache.rat.license.LicenseSetFactory.LicenseFilter.all;
        java.util.SortedSet<org.apache.rat.license.ILicense> iLicenseSet30 = reportConfiguration27.getLicenses(licenseFilter29);
        org.apache.rat.config.AddLicenseHeaders addLicenseHeaders31 = org.apache.rat.config.AddLicenseHeaders.FALSE;
        reportConfiguration27.setAddLicenseHeaders(addLicenseHeaders31);
        org.apache.rat.utils.Log log33 = null;
        org.apache.rat.ReportConfiguration reportConfiguration34 = new org.apache.rat.ReportConfiguration(log33);
        org.apache.rat.report.claim.ClaimStatistic claimStatistic35 = org.apache.rat.Reporter.report(reportConfiguration34);
        org.apache.rat.license.LicenseSetFactory.LicenseFilter licenseFilter36 = org.apache.rat.license.LicenseSetFactory.LicenseFilter.all;
        org.apache.rat.Reporter.listLicenses(reportConfiguration34, licenseFilter36);
        org.apache.rat.Reporter.listLicenses(reportConfiguration27, licenseFilter36);
        org.apache.rat.Reporter.listLicenses(reportConfiguration14, licenseFilter36);
        org.apache.rat.utils.Log log40 = null;
        org.apache.rat.ReportConfiguration reportConfiguration41 = new org.apache.rat.ReportConfiguration(log40);
        org.apache.commons.io.function.IOSupplier<java.io.OutputStream> outputStreamIOSupplier42 = reportConfiguration41.getOutput();
        reportConfiguration14.setOut(outputStreamIOSupplier42);
        org.apache.rat.utils.Log.Level level44 = org.apache.rat.utils.Log.Level.WARN;
        reportConfiguration14.logLicenseCollisions(level44);
        defaultLog0.warn((java.lang.Object) level44);
        org.apache.rat.ReportConfiguration reportConfiguration47 = new org.apache.rat.ReportConfiguration((org.apache.rat.utils.Log) defaultLog0);
        org.apache.rat.utils.DefaultLog defaultLog48 = org.apache.rat.utils.DefaultLog.INSTANCE;
        org.apache.rat.license.ILicense.Builder builder49 = org.apache.rat.license.ILicense.builder();
        org.apache.rat.license.ILicense.Builder builder51 = builder49.setLicenseFamilyCategory("");
        org.apache.rat.analysis.matchers.CopyrightMatcher copyrightMatcher55 = new org.apache.rat.analysis.matchers.CopyrightMatcher("", "GPL1 ", "hi!");
        org.apache.rat.analysis.IHeaderMatcher.State state56 = copyrightMatcher55.finalizeState();
        org.apache.rat.license.ILicense.Builder builder57 = builder51.setMatcher((org.apache.rat.analysis.IHeaderMatcher) copyrightMatcher55);
        org.apache.rat.license.ILicense.Builder builder59 = builder57.setLicenseFamilyCategory("");
        defaultLog48.error((java.lang.Object) builder59);
        org.apache.rat.utils.Log.Level level61 = org.apache.rat.utils.Log.Level.INFO;
        defaultLog48.log(level61, "JAVA");
        org.apache.rat.utils.Log log64 = null;
        org.apache.rat.ReportConfiguration reportConfiguration65 = new org.apache.rat.ReportConfiguration(log64);
        org.apache.commons.io.function.IOSupplier<java.io.OutputStream> outputStreamIOSupplier66 = reportConfiguration65.getOutput();
        reportConfiguration65.setCopyrightMessage("MANIFEST.MF");
        org.apache.rat.utils.Log log69 = reportConfiguration65.getLog();
        org.apache.rat.utils.Log.Level level70 = org.apache.rat.utils.Log.Level.INFO;
        reportConfiguration65.logFamilyCollisions(level70);
        defaultLog48.setLevel(level70);
        java.lang.String[] strArray78 = new java.lang.String[] { "http://org/apache/rat/meta-data#LicenseFamilyCategory", "Datum [ name ='http://org/apache/rat/meta-data#LicenseFamilyCategory',value ='GPL1  ']", "MANIFEST.MF", "AllBuilder:", "The MIT License" };
        org.apache.rat.utils.ReportingSet<java.lang.String> strSet79 = new org.apache.rat.utils.ReportingSet<java.lang.String>();
        boolean boolean80 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strSet79, strArray78);
        boolean boolean82 = strSet79.addIfNotPresent("http://org/apache/rat/meta-data#LicenseFamilyName");
        boolean boolean84 = strSet79.addIfNotPresent("ef7a8b13-64c3-4510-bb0c-dbf208e1e73f");
        java.util.function.Function<java.lang.String, java.lang.String> strFunction85 = null;
        org.apache.rat.utils.ReportingSet<java.lang.String> strSet86 = strSet79.setMsgFormat(strFunction85);
        java.util.SortedSet<org.apache.rat.license.ILicenseFamily> iLicenseFamilySet88 = org.apache.rat.license.LicenseFamilySetFactory.emptyLicenseFamilySet();
        org.apache.rat.license.ILicenseFamily iLicenseFamily89 = org.apache.rat.license.LicenseFamilySetFactory.search("http://org/apache/rat/meta-data", iLicenseFamilySet88);
        boolean boolean90 = strSet79.containsAll((java.util.Collection<org.apache.rat.license.ILicenseFamily>) iLicenseFamilySet88);
        org.apache.rat.utils.ReportingSet<java.lang.String> strSet92 = strSet79.tailSet("http://org/apache/rat/meta-data#HeaderCategory");
        boolean boolean94 = strSet79.addIfNotPresent("ccda37f8-8aec-461c-a257-84923fc7818c");
        java.lang.Throwable throwable95 = null;
        // The following exception was thrown during execution in test generation
        try {
            defaultLog0.log(level70, (java.lang.Object) "ccda37f8-8aec-461c-a257-84923fc7818c", throwable95);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(defaultLog0);
        org.junit.Assert.assertNotNull(builder1);
        org.junit.Assert.assertNotNull(builder3);
        org.junit.Assert.assertTrue("'" + state8 + "' != '" + org.apache.rat.analysis.IHeaderMatcher.State.f + "'", state8.equals(org.apache.rat.analysis.IHeaderMatcher.State.f));
        org.junit.Assert.assertNotNull(builder9);
        org.junit.Assert.assertNotNull(builder11);
        org.junit.Assert.assertNull(filenameFilter15);
        org.junit.Assert.assertTrue("'" + licenseFilter16 + "' != '" + org.apache.rat.license.LicenseSetFactory.LicenseFilter.all + "'", licenseFilter16.equals(org.apache.rat.license.LicenseSetFactory.LicenseFilter.all));
        org.junit.Assert.assertNotNull(iLicenseSet17);
        org.junit.Assert.assertTrue("'" + addLicenseHeaders18 + "' != '" + org.apache.rat.config.AddLicenseHeaders.FALSE + "'", addLicenseHeaders18.equals(org.apache.rat.config.AddLicenseHeaders.FALSE));
        org.junit.Assert.assertNull(claimStatistic22);
        org.junit.Assert.assertTrue("'" + licenseFilter23 + "' != '" + org.apache.rat.license.LicenseSetFactory.LicenseFilter.all + "'", licenseFilter23.equals(org.apache.rat.license.LicenseSetFactory.LicenseFilter.all));
        org.junit.Assert.assertNull(filenameFilter28);
        org.junit.Assert.assertTrue("'" + licenseFilter29 + "' != '" + org.apache.rat.license.LicenseSetFactory.LicenseFilter.all + "'", licenseFilter29.equals(org.apache.rat.license.LicenseSetFactory.LicenseFilter.all));
        org.junit.Assert.assertNotNull(iLicenseSet30);
        org.junit.Assert.assertTrue("'" + addLicenseHeaders31 + "' != '" + org.apache.rat.config.AddLicenseHeaders.FALSE + "'", addLicenseHeaders31.equals(org.apache.rat.config.AddLicenseHeaders.FALSE));
        org.junit.Assert.assertNull(claimStatistic35);
        org.junit.Assert.assertTrue("'" + licenseFilter36 + "' != '" + org.apache.rat.license.LicenseSetFactory.LicenseFilter.all + "'", licenseFilter36.equals(org.apache.rat.license.LicenseSetFactory.LicenseFilter.all));
        org.junit.Assert.assertNotNull(outputStreamIOSupplier42);
        org.junit.Assert.assertTrue("'" + level44 + "' != '" + org.apache.rat.utils.Log.Level.WARN + "'", level44.equals(org.apache.rat.utils.Log.Level.WARN));
        org.junit.Assert.assertNotNull(defaultLog48);
        org.junit.Assert.assertNotNull(builder49);
        org.junit.Assert.assertNotNull(builder51);
        org.junit.Assert.assertTrue("'" + state56 + "' != '" + org.apache.rat.analysis.IHeaderMatcher.State.f + "'", state56.equals(org.apache.rat.analysis.IHeaderMatcher.State.f));
        org.junit.Assert.assertNotNull(builder57);
        org.junit.Assert.assertNotNull(builder59);
        org.junit.Assert.assertTrue("'" + level61 + "' != '" + org.apache.rat.utils.Log.Level.INFO + "'", level61.equals(org.apache.rat.utils.Log.Level.INFO));
        org.junit.Assert.assertNotNull(outputStreamIOSupplier66);
        org.junit.Assert.assertNull(log69);
        org.junit.Assert.assertTrue("'" + level70 + "' != '" + org.apache.rat.utils.Log.Level.INFO + "'", level70.equals(org.apache.rat.utils.Log.Level.INFO));
        org.junit.Assert.assertNotNull(strArray78);
        org.junit.Assert.assertTrue("'" + boolean80 + "' != '" + true + "'", boolean80 == true);
        org.junit.Assert.assertTrue("'" + boolean82 + "' != '" + true + "'", boolean82 == true);
        org.junit.Assert.assertTrue("'" + boolean84 + "' != '" + true + "'", boolean84 == true);
        org.junit.Assert.assertNotNull(strSet86);
        org.junit.Assert.assertNotNull(iLicenseFamilySet88);
        org.junit.Assert.assertNull(iLicenseFamily89);
        org.junit.Assert.assertTrue("'" + boolean90 + "' != '" + true + "'", boolean90 == true);
        org.junit.Assert.assertNotNull(strSet92);
        org.junit.Assert.assertTrue("'" + boolean94 + "' != '" + true + "'", boolean94 == true);
    }

    @Test
    public void test13526() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest27.test13526");
        org.apache.rat.utils.Log log0 = null;
        org.apache.rat.ReportConfiguration reportConfiguration1 = new org.apache.rat.ReportConfiguration(log0);
        org.apache.rat.report.claim.ClaimStatistic claimStatistic2 = org.apache.rat.Reporter.report(reportConfiguration1);
        org.apache.rat.utils.Log log3 = null;
        org.apache.rat.ReportConfiguration reportConfiguration4 = new org.apache.rat.ReportConfiguration(log3);
        org.apache.rat.report.claim.ClaimStatistic claimStatistic5 = org.apache.rat.Reporter.report(reportConfiguration4);
        org.apache.rat.utils.ReportingSet.Options options6 = org.apache.rat.utils.ReportingSet.Options.OVERWRITE;
        reportConfiguration4.licenseDuplicateOption(options6);
        reportConfiguration1.familyDuplicateOption(options6);
        boolean boolean9 = reportConfiguration1.isStyleReport();
        org.apache.rat.license.ILicense[] iLicenseArray10 = new org.apache.rat.license.ILicense[] {};
        java.util.TreeSet<org.apache.rat.license.ILicense> iLicenseSet11 = new java.util.TreeSet<org.apache.rat.license.ILicense>();
        boolean boolean12 = java.util.Collections.addAll((java.util.Collection<org.apache.rat.license.ILicense>) iLicenseSet11, iLicenseArray10);
        java.lang.String[] strArray25 = new java.lang.String[] { "GPL2 ", "GPL1 ", "notice", "http://org/apache/rat/meta-data#LicenseFamilyName", "notice", "GPL2 ", "http://org/apache/rat/meta-data#LicenseFamilyName", "", "GPL2 ", "", "GPL1 ", "hi!" };
        java.util.ArrayList<java.lang.String> strList26 = new java.util.ArrayList<java.lang.String>();
        boolean boolean27 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strList26, strArray25);
        org.apache.rat.license.LicenseSetFactory licenseSetFactory28 = new org.apache.rat.license.LicenseSetFactory((java.util.SortedSet<org.apache.rat.license.ILicense>) iLicenseSet11, (java.util.Collection<java.lang.String>) strList26);
        java.io.FilenameFilter filenameFilter29 = org.apache.rat.Report.parseExclusions((java.util.List<java.lang.String>) strList26);
        java.io.FilenameFilter filenameFilter30 = org.apache.rat.Report.parseExclusions((java.util.List<java.lang.String>) strList26);
        reportConfiguration1.addApprovedLicenseCategories((java.util.Collection<java.lang.String>) strList26);
        org.apache.commons.io.function.IOSupplier<java.io.InputStream> inputStreamIOSupplier32 = reportConfiguration1.getStyleSheet();
        java.lang.String[] strArray38 = new java.lang.String[] { "http://org/apache/rat/meta-data#LicenseFamilyCategory", "Datum [ name ='http://org/apache/rat/meta-data#LicenseFamilyCategory',value ='GPL1  ']", "MANIFEST.MF", "AllBuilder:", "The MIT License" };
        org.apache.rat.utils.ReportingSet<java.lang.String> strSet39 = new org.apache.rat.utils.ReportingSet<java.lang.String>();
        boolean boolean40 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strSet39, strArray38);
        boolean boolean42 = strSet39.addIfNotPresent("http://org/apache/rat/meta-data#LicenseFamilyName");
        boolean boolean44 = strSet39.addIfNotPresent("ef7a8b13-64c3-4510-bb0c-dbf208e1e73f");
        java.util.function.Function<java.lang.String, java.lang.String> strFunction45 = null;
        org.apache.rat.utils.ReportingSet<java.lang.String> strSet46 = strSet39.setMsgFormat(strFunction45);
        java.util.SortedSet<org.apache.rat.license.ILicenseFamily> iLicenseFamilySet48 = org.apache.rat.license.LicenseFamilySetFactory.emptyLicenseFamilySet();
        org.apache.rat.license.ILicenseFamily iLicenseFamily49 = org.apache.rat.license.LicenseFamilySetFactory.search("http://org/apache/rat/meta-data", iLicenseFamilySet48);
        boolean boolean50 = strSet39.containsAll((java.util.Collection<org.apache.rat.license.ILicenseFamily>) iLicenseFamilySet48);
        org.apache.rat.utils.ReportingSet<java.lang.String> strSet52 = strSet39.tailSet("http://org/apache/rat/meta-data#HeaderCategory");
        org.apache.rat.license.ILicenseFamily[] iLicenseFamilyArray53 = new org.apache.rat.license.ILicenseFamily[] {};
        java.util.ArrayList<org.apache.rat.license.ILicenseFamily> iLicenseFamilyList54 = new java.util.ArrayList<org.apache.rat.license.ILicenseFamily>();
        boolean boolean55 = java.util.Collections.addAll((java.util.Collection<org.apache.rat.license.ILicenseFamily>) iLicenseFamilyList54, iLicenseFamilyArray53);
        org.apache.rat.policy.DefaultPolicy defaultPolicy56 = new org.apache.rat.policy.DefaultPolicy((java.util.Collection<org.apache.rat.license.ILicenseFamily>) iLicenseFamilyList54);
        java.util.SortedSet<org.apache.rat.license.ILicenseFamily> iLicenseFamilySet57 = defaultPolicy56.getApprovedLicenseNames();
        boolean boolean58 = strSet52.removeAll((java.util.Collection<org.apache.rat.license.ILicenseFamily>) iLicenseFamilySet57);
        org.apache.rat.utils.DefaultLog defaultLog59 = org.apache.rat.utils.DefaultLog.INSTANCE;
        org.apache.rat.license.ILicense.Builder builder60 = org.apache.rat.license.ILicense.builder();
        org.apache.rat.license.ILicense.Builder builder62 = builder60.setLicenseFamilyCategory("");
        org.apache.rat.analysis.matchers.CopyrightMatcher copyrightMatcher66 = new org.apache.rat.analysis.matchers.CopyrightMatcher("", "GPL1 ", "hi!");
        org.apache.rat.analysis.IHeaderMatcher.State state67 = copyrightMatcher66.finalizeState();
        org.apache.rat.license.ILicense.Builder builder68 = builder62.setMatcher((org.apache.rat.analysis.IHeaderMatcher) copyrightMatcher66);
        org.apache.rat.license.ILicense.Builder builder70 = builder68.setLicenseFamilyCategory("");
        defaultLog59.error((java.lang.Object) builder70);
        org.apache.rat.utils.Log.Level level72 = org.apache.rat.utils.Log.Level.INFO;
        defaultLog59.log(level72, "JAVA");
        org.apache.rat.report.claim.ClaimStatistic claimStatistic75 = new org.apache.rat.report.claim.ClaimStatistic();
        claimStatistic75.setNumApproved((int) (short) 10);
        claimStatistic75.setNumUnknown((int) '#');
        defaultLog59.error((java.lang.Object) '#');
        org.apache.rat.utils.ReportingSet<java.lang.String> strSet81 = strSet52.setLog((org.apache.rat.utils.Log) defaultLog59);
        org.apache.rat.utils.Log.Level level82 = defaultLog59.getLevel();
        reportConfiguration1.logFamilyCollisions(level82);
        org.junit.Assert.assertNull(claimStatistic2);
        org.junit.Assert.assertNull(claimStatistic5);
        org.junit.Assert.assertTrue("'" + options6 + "' != '" + org.apache.rat.utils.ReportingSet.Options.OVERWRITE + "'", options6.equals(org.apache.rat.utils.ReportingSet.Options.OVERWRITE));
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + true + "'", boolean9 == true);
        org.junit.Assert.assertNotNull(iLicenseArray10);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertNotNull(strArray25);
        org.junit.Assert.assertTrue("'" + boolean27 + "' != '" + true + "'", boolean27 == true);
        org.junit.Assert.assertNotNull(filenameFilter29);
        org.junit.Assert.assertNotNull(filenameFilter30);
        org.junit.Assert.assertNull(inputStreamIOSupplier32);
        org.junit.Assert.assertNotNull(strArray38);
        org.junit.Assert.assertTrue("'" + boolean40 + "' != '" + true + "'", boolean40 == true);
        org.junit.Assert.assertTrue("'" + boolean42 + "' != '" + true + "'", boolean42 == true);
        org.junit.Assert.assertTrue("'" + boolean44 + "' != '" + true + "'", boolean44 == true);
        org.junit.Assert.assertNotNull(strSet46);
        org.junit.Assert.assertNotNull(iLicenseFamilySet48);
        org.junit.Assert.assertNull(iLicenseFamily49);
        org.junit.Assert.assertTrue("'" + boolean50 + "' != '" + true + "'", boolean50 == true);
        org.junit.Assert.assertNotNull(strSet52);
        org.junit.Assert.assertNotNull(iLicenseFamilyArray53);
        org.junit.Assert.assertTrue("'" + boolean55 + "' != '" + false + "'", boolean55 == false);
        org.junit.Assert.assertNotNull(iLicenseFamilySet57);
        org.junit.Assert.assertTrue("'" + boolean58 + "' != '" + false + "'", boolean58 == false);
        org.junit.Assert.assertNotNull(defaultLog59);
        org.junit.Assert.assertNotNull(builder60);
        org.junit.Assert.assertNotNull(builder62);
        org.junit.Assert.assertTrue("'" + state67 + "' != '" + org.apache.rat.analysis.IHeaderMatcher.State.f + "'", state67.equals(org.apache.rat.analysis.IHeaderMatcher.State.f));
        org.junit.Assert.assertNotNull(builder68);
        org.junit.Assert.assertNotNull(builder70);
        org.junit.Assert.assertTrue("'" + level72 + "' != '" + org.apache.rat.utils.Log.Level.INFO + "'", level72.equals(org.apache.rat.utils.Log.Level.INFO));
        org.junit.Assert.assertNotNull(strSet81);
        org.junit.Assert.assertTrue("'" + level82 + "' != '" + org.apache.rat.utils.Log.Level.INFO + "'", level82.equals(org.apache.rat.utils.Log.Level.INFO));
    }

    @Test
    public void test13527() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest27.test13527");
        org.apache.rat.analysis.license.FullTextMatchingLicense fullTextMatchingLicense0 = new org.apache.rat.analysis.license.FullTextMatchingLicense();
        fullTextMatchingLicense0.setLicenseFamilyName("hi!");
        java.lang.String str3 = fullTextMatchingLicense0.getLicenseFamilyCategory();
        java.lang.String str4 = fullTextMatchingLicense0.getLicenseFamilyName();
        fullTextMatchingLicense0.setLicenseFamilyName("http://org/apache/rat/meta-data#LicenseFamilyName");
        fullTextMatchingLicense0.setFullText("9c36f068-9920-4c66-98c2-ba24e3dffa9c");
        fullTextMatchingLicense0.setNotes("0925e382-79b7-417a-85be-aed683d949e2");
        fullTextMatchingLicense0.setLicenseFamilyCategory("");
        java.lang.String str13 = fullTextMatchingLicense0.getLicenseFamilyCategory();
        fullTextMatchingLicense0.setLicenseFamilyName("NOTBUILDER: NULL");
        // The following exception was thrown during execution in test generation
        try {
            org.apache.rat.license.ILicenseFamily iLicenseFamily16 = fullTextMatchingLicense0.getLicenseFamily();
            org.junit.Assert.fail("Expected exception of type org.apache.rat.ConfigurationException; message: LicenseFamily Category must be specified");
        } catch (org.apache.rat.ConfigurationException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNull(str3);
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "hi!" + "'", str4, "hi!");
        org.junit.Assert.assertEquals("'" + str13 + "' != '" + "" + "'", str13, "");
    }

    @Test
    public void test13528() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest27.test13528");
        org.apache.rat.utils.Log log0 = null;
        org.apache.rat.ReportConfiguration reportConfiguration1 = new org.apache.rat.ReportConfiguration(log0);
        org.apache.rat.report.claim.ClaimStatistic claimStatistic2 = org.apache.rat.Reporter.report(reportConfiguration1);
        org.apache.commons.io.function.IOSupplier<java.io.OutputStream> outputStreamIOSupplier3 = reportConfiguration1.getOutput();
        boolean boolean4 = reportConfiguration1.isAddingLicensesForced();
        org.apache.rat.license.ILicense[] iLicenseArray5 = new org.apache.rat.license.ILicense[] {};
        java.util.TreeSet<org.apache.rat.license.ILicense> iLicenseSet6 = new java.util.TreeSet<org.apache.rat.license.ILicense>();
        boolean boolean7 = java.util.Collections.addAll((java.util.Collection<org.apache.rat.license.ILicense>) iLicenseSet6, iLicenseArray5);
        java.lang.String[] strArray20 = new java.lang.String[] { "GPL2 ", "GPL1 ", "notice", "http://org/apache/rat/meta-data#LicenseFamilyName", "notice", "GPL2 ", "http://org/apache/rat/meta-data#LicenseFamilyName", "", "GPL2 ", "", "GPL1 ", "hi!" };
        java.util.ArrayList<java.lang.String> strList21 = new java.util.ArrayList<java.lang.String>();
        boolean boolean22 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strList21, strArray20);
        org.apache.rat.license.LicenseSetFactory licenseSetFactory23 = new org.apache.rat.license.LicenseSetFactory((java.util.SortedSet<org.apache.rat.license.ILicense>) iLicenseSet6, (java.util.Collection<java.lang.String>) strList21);
        reportConfiguration1.addLicenses((java.util.Collection<org.apache.rat.license.ILicense>) iLicenseSet6);
        reportConfiguration1.setStyleReport(true);
        org.apache.commons.io.function.IOSupplier<java.io.OutputStream> outputStreamIOSupplier27 = reportConfiguration1.getOutput();
        reportConfiguration1.setStyleReport(false);
        boolean boolean30 = reportConfiguration1.isStyleReport();
        org.apache.rat.utils.Log log31 = null;
        org.apache.rat.ReportConfiguration reportConfiguration32 = new org.apache.rat.ReportConfiguration(log31);
        org.apache.commons.io.function.IOSupplier<java.io.OutputStream> outputStreamIOSupplier33 = reportConfiguration32.getOutput();
        reportConfiguration32.setCopyrightMessage("MANIFEST.MF");
        org.apache.rat.utils.Log log36 = reportConfiguration32.getLog();
        org.apache.rat.utils.Log.Level level37 = org.apache.rat.utils.Log.Level.INFO;
        reportConfiguration32.logFamilyCollisions(level37);
        org.apache.rat.license.ILicense[] iLicenseArray40 = new org.apache.rat.license.ILicense[] {};
        java.util.TreeSet<org.apache.rat.license.ILicense> iLicenseSet41 = new java.util.TreeSet<org.apache.rat.license.ILicense>();
        boolean boolean42 = java.util.Collections.addAll((java.util.Collection<org.apache.rat.license.ILicense>) iLicenseSet41, iLicenseArray40);
        java.lang.String[] strArray55 = new java.lang.String[] { "GPL2 ", "GPL1 ", "notice", "http://org/apache/rat/meta-data#LicenseFamilyName", "notice", "GPL2 ", "http://org/apache/rat/meta-data#LicenseFamilyName", "", "GPL2 ", "", "GPL1 ", "hi!" };
        java.util.ArrayList<java.lang.String> strList56 = new java.util.ArrayList<java.lang.String>();
        boolean boolean57 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strList56, strArray55);
        org.apache.rat.license.LicenseSetFactory licenseSetFactory58 = new org.apache.rat.license.LicenseSetFactory((java.util.SortedSet<org.apache.rat.license.ILicense>) iLicenseSet41, (java.util.Collection<java.lang.String>) strList56);
        org.apache.rat.license.ILicense iLicense59 = org.apache.rat.license.LicenseSetFactory.search("JAVA", (java.util.SortedSet<org.apache.rat.license.ILicense>) iLicenseSet41);
        org.apache.rat.utils.ReportingSet<org.apache.rat.license.ILicense> iLicenseSet60 = new org.apache.rat.utils.ReportingSet<org.apache.rat.license.ILicense>((java.util.SortedSet<org.apache.rat.license.ILicense>) iLicenseSet41);
        reportConfiguration32.addLicenses((java.util.Collection<org.apache.rat.license.ILicense>) iLicenseSet60);
        org.apache.rat.utils.Log log62 = null;
        org.apache.rat.ReportConfiguration reportConfiguration63 = new org.apache.rat.ReportConfiguration(log62);
        org.apache.rat.report.claim.ClaimStatistic claimStatistic64 = org.apache.rat.Reporter.report(reportConfiguration63);
        org.apache.rat.utils.Log log65 = null;
        org.apache.rat.ReportConfiguration reportConfiguration66 = new org.apache.rat.ReportConfiguration(log65);
        org.apache.rat.report.claim.ClaimStatistic claimStatistic67 = org.apache.rat.Reporter.report(reportConfiguration66);
        org.apache.rat.utils.ReportingSet.Options options68 = org.apache.rat.utils.ReportingSet.Options.OVERWRITE;
        reportConfiguration66.licenseDuplicateOption(options68);
        reportConfiguration63.familyDuplicateOption(options68);
        reportConfiguration32.licenseDuplicateOption(options68);
        reportConfiguration1.familyDuplicateOption(options68);
        org.apache.rat.config.SourceCodeManagementSystems sourceCodeManagementSystems73 = org.apache.rat.config.SourceCodeManagementSystems.SUBVERSION;
        java.util.List<java.lang.String> strList74 = sourceCodeManagementSystems73.getExclusions();
        java.util.List<java.lang.String> strList75 = sourceCodeManagementSystems73.getExclusions();
        java.io.FilenameFilter filenameFilter76 = org.apache.rat.Report.parseExclusions(strList75);
        java.io.FilenameFilter filenameFilter77 = org.apache.rat.Report.parseExclusions(strList75);
        reportConfiguration1.setInputFileFilter(filenameFilter77);
        reportConfiguration1.setStyleReport(true);
        org.junit.Assert.assertNull(claimStatistic2);
        org.junit.Assert.assertNotNull(outputStreamIOSupplier3);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertNotNull(iLicenseArray5);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertNotNull(strArray20);
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + true + "'", boolean22 == true);
        org.junit.Assert.assertNotNull(outputStreamIOSupplier27);
        org.junit.Assert.assertTrue("'" + boolean30 + "' != '" + false + "'", boolean30 == false);
        org.junit.Assert.assertNotNull(outputStreamIOSupplier33);
        org.junit.Assert.assertNull(log36);
        org.junit.Assert.assertTrue("'" + level37 + "' != '" + org.apache.rat.utils.Log.Level.INFO + "'", level37.equals(org.apache.rat.utils.Log.Level.INFO));
        org.junit.Assert.assertNotNull(iLicenseArray40);
        org.junit.Assert.assertTrue("'" + boolean42 + "' != '" + false + "'", boolean42 == false);
        org.junit.Assert.assertNotNull(strArray55);
        org.junit.Assert.assertTrue("'" + boolean57 + "' != '" + true + "'", boolean57 == true);
        org.junit.Assert.assertNull(iLicense59);
        org.junit.Assert.assertNull(claimStatistic64);
        org.junit.Assert.assertNull(claimStatistic67);
        org.junit.Assert.assertTrue("'" + options68 + "' != '" + org.apache.rat.utils.ReportingSet.Options.OVERWRITE + "'", options68.equals(org.apache.rat.utils.ReportingSet.Options.OVERWRITE));
        org.junit.Assert.assertTrue("'" + sourceCodeManagementSystems73 + "' != '" + org.apache.rat.config.SourceCodeManagementSystems.SUBVERSION + "'", sourceCodeManagementSystems73.equals(org.apache.rat.config.SourceCodeManagementSystems.SUBVERSION));
        org.junit.Assert.assertNotNull(strList74);
        org.junit.Assert.assertNotNull(strList75);
        org.junit.Assert.assertNotNull(filenameFilter76);
        org.junit.Assert.assertNotNull(filenameFilter77);
    }

    @Test
    public void test13529() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest27.test13529");
        org.apache.rat.license.ILicense.Builder builder0 = org.apache.rat.license.ILicense.builder();
        org.apache.rat.license.ILicense.Builder builder2 = builder0.setLicenseFamilyCategory("");
        org.apache.rat.license.ILicense.Builder builder4 = builder2.setDerivedFrom("GEN  ");
        org.apache.rat.license.ILicense.Builder builder6 = builder4.setId("DOJO ");
        org.apache.rat.configuration.builders.CopyrightBuilder copyrightBuilder7 = org.apache.rat.analysis.IHeaderMatcher.Builder.copyright();
        java.lang.String str8 = copyrightBuilder7.toString();
        org.apache.rat.license.ILicense.Builder builder9 = builder4.setMatcher((org.apache.rat.analysis.IHeaderMatcher.Builder) copyrightBuilder7);
        org.apache.rat.license.ILicense.Builder builder11 = builder4.setNotes("http:");
        org.apache.rat.configuration.builders.TextBuilder textBuilder12 = new org.apache.rat.configuration.builders.TextBuilder();
        org.apache.rat.configuration.builders.TextBuilder textBuilder14 = textBuilder12.setText("true");
        org.apache.rat.configuration.builders.TextBuilder textBuilder16 = textBuilder14.setText("http://org/apache/rat/meta-data#HeaderSample");
        org.apache.rat.analysis.IHeaderMatcher iHeaderMatcher17 = textBuilder16.build();
        org.apache.rat.configuration.builders.TextCaptureBuilder textCaptureBuilder19 = textBuilder16.setText("W3C  ");
        org.apache.rat.license.ILicense.Builder builder20 = builder11.setMatcher((org.apache.rat.analysis.IHeaderMatcher.Builder) textBuilder16);
        org.apache.rat.license.ILicense.Builder builder22 = builder20.setNotes("5ec88d4a-976f-43fe-a84a-4db7ce9efa7b");
        org.apache.rat.analysis.matchers.FullTextMatcher fullTextMatcher25 = new org.apache.rat.analysis.matchers.FullTextMatcher("org/apache/rat/plain-rat.xsl", "07df4fad-71a5-4d35-bd9f-0c3cefff7a88");
        org.apache.rat.license.ILicense.Builder builder26 = builder22.setMatcher((org.apache.rat.analysis.IHeaderMatcher) fullTextMatcher25);
        org.junit.Assert.assertNotNull(builder0);
        org.junit.Assert.assertNotNull(builder2);
        org.junit.Assert.assertNotNull(builder4);
        org.junit.Assert.assertNotNull(builder6);
        org.junit.Assert.assertNotNull(copyrightBuilder7);
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "Copyright Builder: s:null e:null o:null" + "'", str8, "Copyright Builder: s:null e:null o:null");
        org.junit.Assert.assertNotNull(builder9);
        org.junit.Assert.assertNotNull(builder11);
        org.junit.Assert.assertNotNull(textBuilder14);
        org.junit.Assert.assertNotNull(textBuilder16);
        org.junit.Assert.assertNotNull(iHeaderMatcher17);
        org.junit.Assert.assertNotNull(textCaptureBuilder19);
        org.junit.Assert.assertNotNull(builder20);
        org.junit.Assert.assertNotNull(builder22);
        org.junit.Assert.assertNotNull(builder26);
    }

    @Test
    public void test13530() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest27.test13530");
        boolean boolean1 = org.apache.rat.document.impl.guesser.BinaryGuesser.isAudio("24f42afd-56e3-4900-bb5a-202cb72104f3");
        org.junit.Assert.assertTrue("'" + boolean1 + "' != '" + false + "'", boolean1 == false);
    }

    @Test
    public void test13531() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest27.test13531");
        org.apache.rat.configuration.builders.AllBuilder allBuilder0 = new org.apache.rat.configuration.builders.AllBuilder();
        org.apache.rat.analysis.IHeaderMatcher iHeaderMatcher1 = allBuilder0.build();
        org.apache.rat.configuration.builders.AllBuilder allBuilder2 = new org.apache.rat.configuration.builders.AllBuilder();
        org.apache.rat.analysis.IHeaderMatcher iHeaderMatcher3 = allBuilder2.build();
        org.apache.rat.analysis.IHeaderMatcher iHeaderMatcher4 = allBuilder2.build();
        org.apache.rat.analysis.IHeaderMatcher iHeaderMatcher5 = allBuilder2.build();
        org.apache.rat.configuration.builders.CopyrightBuilder copyrightBuilder6 = org.apache.rat.analysis.IHeaderMatcher.Builder.copyright();
        java.lang.String str7 = copyrightBuilder6.toString();
        org.apache.rat.configuration.builders.CopyrightBuilder copyrightBuilder9 = copyrightBuilder6.setEnd(".cvsignore");
        boolean boolean10 = copyrightBuilder6.hasId();
        org.apache.rat.configuration.builders.CopyrightBuilder copyrightBuilder12 = copyrightBuilder6.setOwner("3c840dc2-bef0-42b5-b26c-35a568d53a24");
        org.apache.rat.configuration.builders.AbstractBuilder abstractBuilder13 = allBuilder2.add((org.apache.rat.analysis.IHeaderMatcher.Builder) copyrightBuilder6);
        org.apache.rat.configuration.builders.CopyrightBuilder copyrightBuilder15 = copyrightBuilder6.setEnd("Copyright Builder: s:021187d7-27c2-4fd9-bc74-8cc00413ee52 e:null o:null");
        org.apache.rat.configuration.builders.AbstractBuilder abstractBuilder16 = allBuilder0.add((org.apache.rat.analysis.IHeaderMatcher.Builder) copyrightBuilder15);
        org.apache.rat.analysis.IHeaderMatcher iHeaderMatcher17 = allBuilder0.build();
        org.junit.Assert.assertNotNull(iHeaderMatcher1);
        org.junit.Assert.assertNotNull(iHeaderMatcher3);
        org.junit.Assert.assertNotNull(iHeaderMatcher4);
        org.junit.Assert.assertNotNull(iHeaderMatcher5);
        org.junit.Assert.assertNotNull(copyrightBuilder6);
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "Copyright Builder: s:null e:null o:null" + "'", str7, "Copyright Builder: s:null e:null o:null");
        org.junit.Assert.assertNotNull(copyrightBuilder9);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertNotNull(copyrightBuilder12);
        org.junit.Assert.assertNotNull(abstractBuilder13);
        org.junit.Assert.assertNotNull(copyrightBuilder15);
        org.junit.Assert.assertNotNull(abstractBuilder16);
        org.junit.Assert.assertNotNull(iHeaderMatcher17);
    }

    @Test
    public void test13532() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest27.test13532");
        org.apache.rat.utils.DefaultLog defaultLog0 = org.apache.rat.utils.DefaultLog.INSTANCE;
        org.apache.rat.license.ILicense.Builder builder1 = org.apache.rat.license.ILicense.builder();
        org.apache.rat.license.ILicense.Builder builder3 = builder1.setLicenseFamilyCategory("");
        org.apache.rat.analysis.matchers.CopyrightMatcher copyrightMatcher7 = new org.apache.rat.analysis.matchers.CopyrightMatcher("", "GPL1 ", "hi!");
        org.apache.rat.analysis.IHeaderMatcher.State state8 = copyrightMatcher7.finalizeState();
        org.apache.rat.license.ILicense.Builder builder9 = builder3.setMatcher((org.apache.rat.analysis.IHeaderMatcher) copyrightMatcher7);
        org.apache.rat.license.ILicense.Builder builder11 = builder9.setLicenseFamilyCategory("");
        defaultLog0.error((java.lang.Object) builder11);
        org.apache.rat.utils.Log.Level level13 = org.apache.rat.utils.Log.Level.DEBUG;
        defaultLog0.setLevel(level13);
        org.apache.rat.license.SimpleLicenseFamily simpleLicenseFamily15 = new org.apache.rat.license.SimpleLicenseFamily();
        java.lang.String str16 = simpleLicenseFamily15.getFamilyName();
        java.lang.String str17 = simpleLicenseFamily15.getFamilyCategory();
        simpleLicenseFamily15.setFamilyCategory("W3C  ");
        simpleLicenseFamily15.setFamilyCategory("AllBuilder:");
        defaultLog0.info((java.lang.Object) simpleLicenseFamily15);
        org.apache.rat.ReportConfiguration reportConfiguration23 = new org.apache.rat.ReportConfiguration((org.apache.rat.utils.Log) defaultLog0);
        org.apache.rat.analysis.matchers.FullTextMatcher fullTextMatcher26 = new org.apache.rat.analysis.matchers.FullTextMatcher("http://org/apache/rat/meta-data", "Apache License Version 2.0");
        org.apache.rat.analysis.matchers.NotMatcher notMatcher27 = new org.apache.rat.analysis.matchers.NotMatcher((org.apache.rat.analysis.IHeaderMatcher) fullTextMatcher26);
        java.lang.String str28 = notMatcher27.getId();
        defaultLog0.debug((java.lang.Object) notMatcher27);
        org.apache.rat.utils.Log.Level level30 = org.apache.rat.utils.Log.Level.OFF;
        defaultLog0.log(level30, "da5fe944-291b-4f2c-8b38-a63be532e7b8");
        org.apache.rat.utils.Log log33 = null;
        org.apache.rat.ReportConfiguration reportConfiguration34 = new org.apache.rat.ReportConfiguration(log33);
        org.apache.commons.io.function.IOSupplier<java.io.OutputStream> outputStreamIOSupplier35 = reportConfiguration34.getOutput();
        org.apache.commons.io.filefilter.IOFileFilter iOFileFilter36 = reportConfiguration34.getDirectoryFilter();
        java.nio.file.Path path37 = null;
        java.nio.file.attribute.BasicFileAttributes basicFileAttributes38 = null;
        java.nio.file.FileVisitResult fileVisitResult39 = iOFileFilter36.accept(path37, basicFileAttributes38);
        org.apache.commons.io.filefilter.IOFileFilter iOFileFilter40 = iOFileFilter36.negate();
        java.nio.file.Path path41 = null;
        boolean boolean42 = iOFileFilter40.matches(path41);
        defaultLog0.warn((java.lang.Object) path41);
        java.util.regex.Pattern pattern47 = null;
        org.apache.rat.analysis.matchers.SimpleRegexMatcher simpleRegexMatcher48 = new org.apache.rat.analysis.matchers.SimpleRegexMatcher("", pattern47);
        org.apache.rat.analysis.matchers.NotMatcher notMatcher49 = new org.apache.rat.analysis.matchers.NotMatcher("GNU General Public License, version 2", (org.apache.rat.analysis.IHeaderMatcher) simpleRegexMatcher48);
        org.apache.rat.analysis.IHeaderMatcher.State state50 = notMatcher49.finalizeState();
        org.apache.rat.analysis.matchers.NotMatcher notMatcher51 = new org.apache.rat.analysis.matchers.NotMatcher("binary", (org.apache.rat.analysis.IHeaderMatcher) notMatcher49);
        notMatcher49.reset();
        defaultLog0.error((java.lang.Object) notMatcher49);
        org.apache.rat.analysis.license.FullTextMatchingLicense fullTextMatchingLicense54 = new org.apache.rat.analysis.license.FullTextMatchingLicense();
        fullTextMatchingLicense54.setLicenseFamilyName("hi!");
        java.lang.String str57 = fullTextMatchingLicense54.getLicenseFamilyCategory();
        java.lang.String str58 = fullTextMatchingLicense54.getLicenseFamilyName();
        fullTextMatchingLicense54.setLicenseFamilyName("http://org/apache/rat/meta-data#LicenseFamilyName");
        java.lang.String str61 = fullTextMatchingLicense54.getLicenseFamilyCategory();
        java.lang.String str62 = fullTextMatchingLicense54.getLicenseFamilyCategory();
        fullTextMatchingLicense54.setLicenseFamilyCategory("641dafc1-13c3-45d4-8272-f36f10392c53");
        java.lang.String str65 = fullTextMatchingLicense54.getLicenseFamilyName();
        org.apache.rat.license.ILicenseFamily iLicenseFamily66 = fullTextMatchingLicense54.getLicenseFamily();
        fullTextMatchingLicense54.setFullText("Copyright Builder: s:null e:W3C Software Copyright o:null");
        java.lang.String str69 = fullTextMatchingLicense54.getNotes();
        java.lang.String str70 = fullTextMatchingLicense54.getNotes();
        defaultLog0.debug((java.lang.Object) fullTextMatchingLicense54);
        java.lang.String str72 = fullTextMatchingLicense54.getNotes();
        org.apache.rat.license.ILicense.Builder builder73 = fullTextMatchingLicense54.getLicense();
        org.junit.Assert.assertNotNull(defaultLog0);
        org.junit.Assert.assertNotNull(builder1);
        org.junit.Assert.assertNotNull(builder3);
        org.junit.Assert.assertTrue("'" + state8 + "' != '" + org.apache.rat.analysis.IHeaderMatcher.State.f + "'", state8.equals(org.apache.rat.analysis.IHeaderMatcher.State.f));
        org.junit.Assert.assertNotNull(builder9);
        org.junit.Assert.assertNotNull(builder11);
        org.junit.Assert.assertTrue("'" + level13 + "' != '" + org.apache.rat.utils.Log.Level.DEBUG + "'", level13.equals(org.apache.rat.utils.Log.Level.DEBUG));
        org.junit.Assert.assertNull(str16);
        org.junit.Assert.assertNull(str17);
// flaky:         org.junit.Assert.assertEquals("'" + str28 + "' != '" + "4c292d2e-6063-486e-b0f1-9fd76f2130c3" + "'", str28, "4c292d2e-6063-486e-b0f1-9fd76f2130c3");
        org.junit.Assert.assertTrue("'" + level30 + "' != '" + org.apache.rat.utils.Log.Level.OFF + "'", level30.equals(org.apache.rat.utils.Log.Level.OFF));
        org.junit.Assert.assertNotNull(outputStreamIOSupplier35);
        org.junit.Assert.assertNotNull(iOFileFilter36);
        org.junit.Assert.assertTrue("'" + fileVisitResult39 + "' != '" + java.nio.file.FileVisitResult.TERMINATE + "'", fileVisitResult39.equals(java.nio.file.FileVisitResult.TERMINATE));
        org.junit.Assert.assertNotNull(iOFileFilter40);
        org.junit.Assert.assertTrue("'" + boolean42 + "' != '" + true + "'", boolean42 == true);
        org.junit.Assert.assertTrue("'" + state50 + "' != '" + org.apache.rat.analysis.IHeaderMatcher.State.t + "'", state50.equals(org.apache.rat.analysis.IHeaderMatcher.State.t));
        org.junit.Assert.assertNull(str57);
        org.junit.Assert.assertEquals("'" + str58 + "' != '" + "hi!" + "'", str58, "hi!");
        org.junit.Assert.assertNull(str61);
        org.junit.Assert.assertNull(str62);
        org.junit.Assert.assertEquals("'" + str65 + "' != '" + "http://org/apache/rat/meta-data#LicenseFamilyName" + "'", str65, "http://org/apache/rat/meta-data#LicenseFamilyName");
        org.junit.Assert.assertNotNull(iLicenseFamily66);
        org.junit.Assert.assertNull(str69);
        org.junit.Assert.assertNull(str70);
        org.junit.Assert.assertNull(str72);
        org.junit.Assert.assertNotNull(builder73);
    }

    @Test
    public void test13533() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest27.test13533");
        org.apache.rat.license.SimpleLicenseFamily simpleLicenseFamily0 = new org.apache.rat.license.SimpleLicenseFamily();
        java.lang.String str1 = simpleLicenseFamily0.getFamilyName();
        java.lang.String str2 = simpleLicenseFamily0.getFamilyCategory();
        simpleLicenseFamily0.setFamilyCategory("W3C  ");
        java.lang.String str5 = simpleLicenseFamily0.getFamilyName();
        simpleLicenseFamily0.setFamilyCategory("TextBuilder: true");
        java.lang.String str8 = simpleLicenseFamily0.getFamilyName();
        simpleLicenseFamily0.setFamilyCategory("W3C  ");
        java.lang.String str11 = simpleLicenseFamily0.getFamilyName();
        java.lang.String str12 = simpleLicenseFamily0.toString();
        java.lang.String str13 = simpleLicenseFamily0.toString();
        simpleLicenseFamily0.setFamilyName("W3C Software Copyright");
        org.junit.Assert.assertNull(str1);
        org.junit.Assert.assertNull(str2);
        org.junit.Assert.assertNull(str5);
        org.junit.Assert.assertNull(str8);
        org.junit.Assert.assertNull(str11);
        org.junit.Assert.assertEquals("'" + str12 + "' != '" + "W3C   null" + "'", str12, "W3C   null");
        org.junit.Assert.assertEquals("'" + str13 + "' != '" + "W3C   null" + "'", str13, "W3C   null");
    }

    @Test
    public void test13534() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest27.test13534");
        org.apache.rat.utils.Log log0 = null;
        org.apache.rat.ReportConfiguration reportConfiguration1 = new org.apache.rat.ReportConfiguration(log0);
        java.io.FilenameFilter filenameFilter2 = reportConfiguration1.getInputFileFilter();
        org.apache.rat.license.LicenseSetFactory.LicenseFilter licenseFilter3 = org.apache.rat.license.LicenseSetFactory.LicenseFilter.all;
        java.util.SortedSet<org.apache.rat.license.ILicense> iLicenseSet4 = reportConfiguration1.getLicenses(licenseFilter3);
        org.apache.rat.config.AddLicenseHeaders addLicenseHeaders5 = org.apache.rat.config.AddLicenseHeaders.FALSE;
        reportConfiguration1.setAddLicenseHeaders(addLicenseHeaders5);
        org.apache.rat.utils.Log log7 = null;
        org.apache.rat.ReportConfiguration reportConfiguration8 = new org.apache.rat.ReportConfiguration(log7);
        org.apache.rat.report.claim.ClaimStatistic claimStatistic9 = org.apache.rat.Reporter.report(reportConfiguration8);
        org.apache.rat.license.LicenseSetFactory.LicenseFilter licenseFilter10 = org.apache.rat.license.LicenseSetFactory.LicenseFilter.all;
        org.apache.rat.Reporter.listLicenses(reportConfiguration8, licenseFilter10);
        org.apache.rat.Reporter.listLicenses(reportConfiguration1, licenseFilter10);
        org.apache.rat.report.IReportable iReportable13 = null;
        reportConfiguration1.setReportable(iReportable13);
        java.lang.String str15 = reportConfiguration1.getCopyrightMessage();
        org.apache.rat.report.IReportable iReportable16 = reportConfiguration1.getReportable();
        org.apache.rat.license.ILicenseFamily.Builder builder17 = org.apache.rat.license.ILicenseFamily.builder();
        java.lang.String str18 = builder17.getCategory();
        org.apache.rat.license.ILicenseFamily.Builder builder20 = builder17.setLicenseFamilyCategory("Copyright Builder: s:null e:null o:null");
        org.apache.rat.license.ILicenseFamily.Builder builder22 = builder20.setLicenseFamilyName("6486879f-fc81-4b57-aec7-c4c77d540c30");
        org.apache.rat.license.ILicenseFamily.Builder builder24 = builder22.setLicenseFamilyName("6620e9ee-d651-4c18-8162-edad6d18368e");
        reportConfiguration1.addFamily(builder24);
        org.apache.rat.utils.Log log26 = reportConfiguration1.getLog();
        java.util.SortedSet<java.lang.String> strSet27 = reportConfiguration1.getApprovedLicenseCategories();
        org.apache.commons.io.filefilter.IOFileFilter iOFileFilter28 = reportConfiguration1.getDirectoryFilter();
        java.io.File file29 = null;
        // The following exception was thrown during execution in test generation
        try {
            reportConfiguration1.setOut(file29);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: output file should not be null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNull(filenameFilter2);
        org.junit.Assert.assertTrue("'" + licenseFilter3 + "' != '" + org.apache.rat.license.LicenseSetFactory.LicenseFilter.all + "'", licenseFilter3.equals(org.apache.rat.license.LicenseSetFactory.LicenseFilter.all));
        org.junit.Assert.assertNotNull(iLicenseSet4);
        org.junit.Assert.assertTrue("'" + addLicenseHeaders5 + "' != '" + org.apache.rat.config.AddLicenseHeaders.FALSE + "'", addLicenseHeaders5.equals(org.apache.rat.config.AddLicenseHeaders.FALSE));
        org.junit.Assert.assertNull(claimStatistic9);
        org.junit.Assert.assertTrue("'" + licenseFilter10 + "' != '" + org.apache.rat.license.LicenseSetFactory.LicenseFilter.all + "'", licenseFilter10.equals(org.apache.rat.license.LicenseSetFactory.LicenseFilter.all));
        org.junit.Assert.assertNull(str15);
        org.junit.Assert.assertNull(iReportable16);
        org.junit.Assert.assertNotNull(builder17);
        org.junit.Assert.assertNull(str18);
        org.junit.Assert.assertNotNull(builder20);
        org.junit.Assert.assertNotNull(builder22);
        org.junit.Assert.assertNotNull(builder24);
        org.junit.Assert.assertNull(log26);
        org.junit.Assert.assertNotNull(strSet27);
        org.junit.Assert.assertNotNull(iOFileFilter28);
    }

    @Test
    public void test13535() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest27.test13535");
        org.apache.rat.api.MetaData.Datum datum2 = new org.apache.rat.api.MetaData.Datum("24b2bc0b-f6f1-4bb9-ae41-2a282b3cbafd", "9d334763-6150-4fa3-86d4-32f09aebbaad");
    }

    @Test
    public void test13536() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest27.test13536");
        org.apache.rat.api.MetaData.Datum datum2 = new org.apache.rat.api.MetaData.Datum("MANIFEST.MF", "GPL2 ");
        java.lang.String str3 = datum2.toString();
        java.lang.String str4 = datum2.toString();
        org.junit.Assert.assertEquals("'" + str3 + "' != '" + "Datum [ name ='MANIFEST.MF',value ='GPL2  ']" + "'", str3, "Datum [ name ='MANIFEST.MF',value ='GPL2  ']");
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "Datum [ name ='MANIFEST.MF',value ='GPL2  ']" + "'", str4, "Datum [ name ='MANIFEST.MF',value ='GPL2  ']");
    }

    @Test
    public void test13537() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest27.test13537");
        org.apache.rat.analysis.license.FullTextMatchingLicense fullTextMatchingLicense0 = new org.apache.rat.analysis.license.FullTextMatchingLicense();
        fullTextMatchingLicense0.setLicenseFamilyName("hi!");
        java.lang.String str3 = fullTextMatchingLicense0.getLicenseFamilyCategory();
        java.lang.String str4 = fullTextMatchingLicense0.getLicenseFamilyName();
        fullTextMatchingLicense0.setFullText("AnyBuilder:\nAllBuilder:");
        java.lang.String str7 = fullTextMatchingLicense0.getLicenseFamilyName();
        fullTextMatchingLicense0.setLicenseFamilyCategory("RegexBuilder: JAVA");
        fullTextMatchingLicense0.setLicenseFamilyCategory("6481fb19-38f0-43f5-ab95-caf84a069ee1");
        java.lang.String str12 = fullTextMatchingLicense0.getNotes();
        fullTextMatchingLicense0.setNotes("4f6baee5-accf-42cc-adfd-2bd688852a2e");
        org.junit.Assert.assertNull(str3);
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "hi!" + "'", str4, "hi!");
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "hi!" + "'", str7, "hi!");
        org.junit.Assert.assertNull(str12);
    }

    @Test
    public void test13538() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest27.test13538");
        java.lang.String str1 = org.apache.rat.document.impl.guesser.GuessUtils.normalise("W3C Document Copyright");
        org.junit.Assert.assertEquals("'" + str1 + "' != '" + "W3C DOCUMENT COPYRIGHT" + "'", str1, "W3C DOCUMENT COPYRIGHT");
    }

    @Test
    public void test13539() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest27.test13539");
        org.apache.rat.analysis.license.FullTextMatchingLicense fullTextMatchingLicense0 = new org.apache.rat.analysis.license.FullTextMatchingLicense();
        fullTextMatchingLicense0.setLicenseFamilyName("hi!");
        java.lang.String str3 = fullTextMatchingLicense0.getLicenseFamilyCategory();
        java.lang.String str4 = fullTextMatchingLicense0.getLicenseFamilyName();
        fullTextMatchingLicense0.setLicenseFamilyName("http://org/apache/rat/meta-data#LicenseFamilyName");
        java.lang.String str7 = fullTextMatchingLicense0.getLicenseFamilyCategory();
        java.lang.String str8 = fullTextMatchingLicense0.getNotes();
        fullTextMatchingLicense0.setLicenseFamilyName("W3C Document Copyright");
        fullTextMatchingLicense0.setLicenseFamilyCategory("0356753d-7389-48e7-8d63-056fd4c4548c");
        java.lang.String str13 = fullTextMatchingLicense0.getLicenseFamilyCategory();
        fullTextMatchingLicense0.setNotes("ddd566ca-b176-4397-9768-911583d93df2");
        org.apache.rat.license.ILicenseFamily iLicenseFamily16 = fullTextMatchingLicense0.getLicenseFamily();
        org.junit.Assert.assertNull(str3);
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "hi!" + "'", str4, "hi!");
        org.junit.Assert.assertNull(str7);
        org.junit.Assert.assertNull(str8);
        org.junit.Assert.assertEquals("'" + str13 + "' != '" + "0356753d-7389-48e7-8d63-056fd4c4548c" + "'", str13, "0356753d-7389-48e7-8d63-056fd4c4548c");
        org.junit.Assert.assertNotNull(iLicenseFamily16);
    }

    @Test
    public void test13540() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest27.test13540");
        org.apache.rat.utils.DefaultLog defaultLog0 = org.apache.rat.utils.DefaultLog.INSTANCE;
        org.apache.rat.license.ILicense.Builder builder1 = org.apache.rat.license.ILicense.builder();
        org.apache.rat.license.ILicense.Builder builder3 = builder1.setLicenseFamilyCategory("");
        org.apache.rat.analysis.matchers.CopyrightMatcher copyrightMatcher7 = new org.apache.rat.analysis.matchers.CopyrightMatcher("", "GPL1 ", "hi!");
        org.apache.rat.analysis.IHeaderMatcher.State state8 = copyrightMatcher7.finalizeState();
        org.apache.rat.license.ILicense.Builder builder9 = builder3.setMatcher((org.apache.rat.analysis.IHeaderMatcher) copyrightMatcher7);
        org.apache.rat.license.ILicense.Builder builder11 = builder9.setLicenseFamilyCategory("");
        defaultLog0.error((java.lang.Object) builder11);
        org.apache.rat.ReportConfiguration reportConfiguration13 = new org.apache.rat.ReportConfiguration((org.apache.rat.utils.Log) defaultLog0);
        org.apache.rat.license.ILicenseFamily[] iLicenseFamilyArray14 = new org.apache.rat.license.ILicenseFamily[] {};
        java.util.ArrayList<org.apache.rat.license.ILicenseFamily> iLicenseFamilyList15 = new java.util.ArrayList<org.apache.rat.license.ILicenseFamily>();
        boolean boolean16 = java.util.Collections.addAll((java.util.Collection<org.apache.rat.license.ILicenseFamily>) iLicenseFamilyList15, iLicenseFamilyArray14);
        org.apache.rat.policy.DefaultPolicy defaultPolicy17 = new org.apache.rat.policy.DefaultPolicy((java.util.Collection<org.apache.rat.license.ILicenseFamily>) iLicenseFamilyList15);
        org.apache.rat.api.Document document18 = null;
        defaultPolicy17.analyse(document18);
        org.apache.rat.api.Document document20 = null;
        defaultPolicy17.analyse(document20);
        org.apache.rat.api.Document document22 = null;
        defaultPolicy17.analyse(document22);
        org.apache.rat.analysis.license.FullTextMatchingLicense fullTextMatchingLicense24 = new org.apache.rat.analysis.license.FullTextMatchingLicense();
        fullTextMatchingLicense24.setLicenseFamilyName("hi!");
        java.lang.String str27 = fullTextMatchingLicense24.getLicenseFamilyCategory();
        java.lang.String str28 = fullTextMatchingLicense24.getLicenseFamilyName();
        fullTextMatchingLicense24.setLicenseFamilyName("SpdxBuilder: null");
        fullTextMatchingLicense24.setLicenseFamilyCategory("TMF");
        org.apache.rat.license.ILicenseFamily iLicenseFamily33 = fullTextMatchingLicense24.getLicenseFamily();
        java.util.SortedSet<org.apache.rat.license.ILicenseFamily> iLicenseFamilySet34 = org.apache.rat.license.LicenseFamilySetFactory.emptyLicenseFamilySet();
        org.apache.rat.license.ILicenseFamily iLicenseFamily35 = org.apache.rat.license.LicenseFamilySetFactory.search(iLicenseFamily33, iLicenseFamilySet34);
        defaultPolicy17.add(iLicenseFamily33);
        reportConfiguration13.addFamily(iLicenseFamily33);
        java.lang.String[] strArray43 = new java.lang.String[] { "http://org/apache/rat/meta-data#LicenseFamilyCategory", "Datum [ name ='http://org/apache/rat/meta-data#LicenseFamilyCategory',value ='GPL1  ']", "MANIFEST.MF", "AllBuilder:", "The MIT License" };
        org.apache.rat.utils.ReportingSet<java.lang.String> strSet44 = new org.apache.rat.utils.ReportingSet<java.lang.String>();
        boolean boolean45 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strSet44, strArray43);
        boolean boolean47 = strSet44.addIfNotPresent("http://org/apache/rat/meta-data#LicenseFamilyName");
        java.util.Iterator<java.lang.String> strItor48 = strSet44.iterator();
        java.lang.Object[] objArray49 = strSet44.toArray();
        java.util.stream.Stream<java.lang.String> strStream50 = strSet44.parallelStream();
        boolean boolean51 = strSet44.isEmpty();
        org.apache.rat.license.ILicense[] iLicenseArray52 = new org.apache.rat.license.ILicense[] {};
        java.util.TreeSet<org.apache.rat.license.ILicense> iLicenseSet53 = new java.util.TreeSet<org.apache.rat.license.ILicense>();
        boolean boolean54 = java.util.Collections.addAll((java.util.Collection<org.apache.rat.license.ILicense>) iLicenseSet53, iLicenseArray52);
        java.lang.String[] strArray67 = new java.lang.String[] { "GPL2 ", "GPL1 ", "notice", "http://org/apache/rat/meta-data#LicenseFamilyName", "notice", "GPL2 ", "http://org/apache/rat/meta-data#LicenseFamilyName", "", "GPL2 ", "", "GPL1 ", "hi!" };
        java.util.ArrayList<java.lang.String> strList68 = new java.util.ArrayList<java.lang.String>();
        boolean boolean69 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strList68, strArray67);
        org.apache.rat.license.LicenseSetFactory licenseSetFactory70 = new org.apache.rat.license.LicenseSetFactory((java.util.SortedSet<org.apache.rat.license.ILicense>) iLicenseSet53, (java.util.Collection<java.lang.String>) strList68);
        org.apache.rat.license.LicenseSetFactory.LicenseFilter licenseFilter71 = org.apache.rat.license.LicenseSetFactory.LicenseFilter.all;
        java.util.SortedSet<org.apache.rat.license.ILicenseFamily> iLicenseFamilySet72 = licenseSetFactory70.getLicenseFamilies(licenseFilter71);
        org.apache.rat.policy.DefaultPolicy defaultPolicy73 = new org.apache.rat.policy.DefaultPolicy((java.util.Collection<org.apache.rat.license.ILicenseFamily>) iLicenseFamilySet72);
        org.apache.rat.policy.DefaultPolicy defaultPolicy74 = new org.apache.rat.policy.DefaultPolicy((java.util.Collection<org.apache.rat.license.ILicenseFamily>) iLicenseFamilySet72);
        boolean boolean75 = strSet44.retainAll((java.util.Collection<org.apache.rat.license.ILicenseFamily>) iLicenseFamilySet72);
        reportConfiguration13.removeApprovedLicenseCategories((java.util.Collection<java.lang.String>) strSet44);
        boolean boolean77 = reportConfiguration13.isAddingLicensesForced();
        org.junit.Assert.assertNotNull(defaultLog0);
        org.junit.Assert.assertNotNull(builder1);
        org.junit.Assert.assertNotNull(builder3);
        org.junit.Assert.assertTrue("'" + state8 + "' != '" + org.apache.rat.analysis.IHeaderMatcher.State.f + "'", state8.equals(org.apache.rat.analysis.IHeaderMatcher.State.f));
        org.junit.Assert.assertNotNull(builder9);
        org.junit.Assert.assertNotNull(builder11);
        org.junit.Assert.assertNotNull(iLicenseFamilyArray14);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
        org.junit.Assert.assertNull(str27);
        org.junit.Assert.assertEquals("'" + str28 + "' != '" + "hi!" + "'", str28, "hi!");
        org.junit.Assert.assertNotNull(iLicenseFamily33);
        org.junit.Assert.assertNotNull(iLicenseFamilySet34);
        org.junit.Assert.assertNull(iLicenseFamily35);
        org.junit.Assert.assertNotNull(strArray43);
        org.junit.Assert.assertTrue("'" + boolean45 + "' != '" + true + "'", boolean45 == true);
        org.junit.Assert.assertTrue("'" + boolean47 + "' != '" + true + "'", boolean47 == true);
        org.junit.Assert.assertNotNull(strItor48);
        org.junit.Assert.assertNotNull(objArray49);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray49), "[AllBuilder:, Datum [ name ='http://org/apache/rat/meta-data#LicenseFamilyCategory',value ='GPL1  '], MANIFEST.MF, The MIT License, http://org/apache/rat/meta-data#LicenseFamilyCategory, http://org/apache/rat/meta-data#LicenseFamilyName]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray49), "[AllBuilder:, Datum [ name ='http://org/apache/rat/meta-data#LicenseFamilyCategory',value ='GPL1  '], MANIFEST.MF, The MIT License, http://org/apache/rat/meta-data#LicenseFamilyCategory, http://org/apache/rat/meta-data#LicenseFamilyName]");
        org.junit.Assert.assertNotNull(strStream50);
        org.junit.Assert.assertTrue("'" + boolean51 + "' != '" + false + "'", boolean51 == false);
        org.junit.Assert.assertNotNull(iLicenseArray52);
        org.junit.Assert.assertTrue("'" + boolean54 + "' != '" + false + "'", boolean54 == false);
        org.junit.Assert.assertNotNull(strArray67);
        org.junit.Assert.assertTrue("'" + boolean69 + "' != '" + true + "'", boolean69 == true);
        org.junit.Assert.assertTrue("'" + licenseFilter71 + "' != '" + org.apache.rat.license.LicenseSetFactory.LicenseFilter.all + "'", licenseFilter71.equals(org.apache.rat.license.LicenseSetFactory.LicenseFilter.all));
        org.junit.Assert.assertNotNull(iLicenseFamilySet72);
        org.junit.Assert.assertTrue("'" + boolean75 + "' != '" + true + "'", boolean75 == true);
        org.junit.Assert.assertTrue("'" + boolean77 + "' != '" + false + "'", boolean77 == false);
    }

    @Test
    public void test13541() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest27.test13541");
        org.apache.rat.utils.DefaultLog defaultLog0 = org.apache.rat.utils.DefaultLog.INSTANCE;
        org.apache.rat.configuration.builders.AllBuilder allBuilder1 = new org.apache.rat.configuration.builders.AllBuilder();
        org.apache.rat.configuration.builders.MatcherRefBuilder matcherRefBuilder2 = org.apache.rat.analysis.IHeaderMatcher.Builder.matcherRef();
        boolean boolean3 = matcherRefBuilder2.hasId();
        java.lang.String str4 = matcherRefBuilder2.toString();
        org.apache.rat.configuration.builders.AnyBuilder anyBuilder5 = org.apache.rat.analysis.IHeaderMatcher.Builder.any();
        org.apache.rat.configuration.builders.NotBuilder notBuilder6 = new org.apache.rat.configuration.builders.NotBuilder();
        java.lang.String str7 = notBuilder6.toString();
        org.apache.rat.configuration.builders.MatcherRefBuilder matcherRefBuilder8 = org.apache.rat.analysis.IHeaderMatcher.Builder.matcherRef();
        boolean boolean9 = matcherRefBuilder8.hasId();
        java.util.Map<java.lang.String, org.apache.rat.analysis.IHeaderMatcher> strMap10 = null;
        org.apache.rat.configuration.builders.MatcherRefBuilder matcherRefBuilder11 = matcherRefBuilder8.setMatchers(strMap10);
        org.apache.rat.configuration.builders.AllBuilder allBuilder12 = new org.apache.rat.configuration.builders.AllBuilder();
        org.apache.rat.configuration.builders.CopyrightBuilder copyrightBuilder13 = org.apache.rat.analysis.IHeaderMatcher.Builder.copyright();
        org.apache.rat.configuration.builders.CopyrightBuilder copyrightBuilder15 = copyrightBuilder13.setStart("OASIS");
        java.lang.String str16 = copyrightBuilder13.toString();
        org.apache.rat.configuration.builders.CopyrightBuilder copyrightBuilder18 = copyrightBuilder13.setStart("223f0aba-15d4-49e9-901e-5740c137aebf");
        org.apache.rat.configuration.builders.MatcherRefBuilder matcherRefBuilder19 = org.apache.rat.analysis.IHeaderMatcher.Builder.matcherRef();
        boolean boolean20 = matcherRefBuilder19.hasId();
        org.apache.rat.configuration.builders.CopyrightBuilder copyrightBuilder21 = org.apache.rat.analysis.IHeaderMatcher.Builder.copyright();
        org.apache.rat.configuration.builders.CopyrightBuilder copyrightBuilder23 = copyrightBuilder21.setStart("OASIS");
        java.lang.String str24 = copyrightBuilder21.toString();
        org.apache.rat.configuration.builders.CopyrightBuilder copyrightBuilder26 = copyrightBuilder21.setStart("223f0aba-15d4-49e9-901e-5740c137aebf");
        org.apache.rat.configuration.builders.CopyrightBuilder copyrightBuilder27 = org.apache.rat.analysis.IHeaderMatcher.Builder.copyright();
        org.apache.rat.configuration.builders.CopyrightBuilder copyrightBuilder28 = org.apache.rat.analysis.IHeaderMatcher.Builder.copyright();
        java.lang.String str29 = copyrightBuilder28.toString();
        org.apache.rat.configuration.builders.CopyrightBuilder copyrightBuilder31 = copyrightBuilder28.setEnd(".cvsignore");
        boolean boolean32 = copyrightBuilder28.hasId();
        org.apache.rat.configuration.builders.CopyrightBuilder copyrightBuilder33 = org.apache.rat.analysis.IHeaderMatcher.Builder.copyright();
        java.lang.String str34 = copyrightBuilder33.toString();
        org.apache.rat.configuration.builders.CopyrightBuilder copyrightBuilder36 = copyrightBuilder33.setEnd(".cvsignore");
        boolean boolean37 = copyrightBuilder33.hasId();
        java.lang.String str38 = copyrightBuilder33.toString();
        org.apache.rat.configuration.builders.CopyrightBuilder copyrightBuilder39 = org.apache.rat.analysis.IHeaderMatcher.Builder.copyright();
        org.apache.rat.configuration.builders.CopyrightBuilder copyrightBuilder41 = copyrightBuilder39.setStart("OASIS");
        org.apache.rat.configuration.builders.AnyBuilder anyBuilder42 = org.apache.rat.analysis.IHeaderMatcher.Builder.any();
        org.apache.rat.configuration.builders.MatcherRefBuilder matcherRefBuilder43 = org.apache.rat.analysis.IHeaderMatcher.Builder.matcherRef();
        boolean boolean44 = matcherRefBuilder43.hasId();
        java.util.Map<java.lang.String, org.apache.rat.analysis.IHeaderMatcher> strMap45 = null;
        org.apache.rat.configuration.builders.MatcherRefBuilder matcherRefBuilder46 = matcherRefBuilder43.setMatchers(strMap45);
        org.apache.rat.configuration.builders.CopyrightBuilder copyrightBuilder47 = org.apache.rat.analysis.IHeaderMatcher.Builder.copyright();
        org.apache.rat.configuration.builders.MatcherRefBuilder matcherRefBuilder48 = org.apache.rat.analysis.IHeaderMatcher.Builder.matcherRef();
        boolean boolean49 = matcherRefBuilder48.hasId();
        java.lang.String str50 = matcherRefBuilder48.toString();
        java.util.Map<java.lang.String, org.apache.rat.analysis.IHeaderMatcher> strMap51 = null;
        org.apache.rat.configuration.builders.MatcherRefBuilder matcherRefBuilder52 = matcherRefBuilder48.setMatchers(strMap51);
        org.apache.rat.analysis.IHeaderMatcher.Builder[] builderArray53 = new org.apache.rat.analysis.IHeaderMatcher.Builder[] { matcherRefBuilder8, allBuilder12, copyrightBuilder18, matcherRefBuilder19, copyrightBuilder21, copyrightBuilder27, copyrightBuilder28, copyrightBuilder33, copyrightBuilder39, anyBuilder42, matcherRefBuilder43, copyrightBuilder47, matcherRefBuilder48 };
        java.util.ArrayList<org.apache.rat.analysis.IHeaderMatcher.Builder> builderList54 = new java.util.ArrayList<org.apache.rat.analysis.IHeaderMatcher.Builder>();
        boolean boolean55 = java.util.Collections.addAll((java.util.Collection<org.apache.rat.analysis.IHeaderMatcher.Builder>) builderList54, builderArray53);
        org.apache.rat.configuration.builders.AbstractBuilder abstractBuilder56 = notBuilder6.add((java.util.Collection<org.apache.rat.analysis.IHeaderMatcher.Builder>) builderList54);
        org.apache.rat.configuration.builders.MatcherRefBuilder matcherRefBuilder57 = new org.apache.rat.configuration.builders.MatcherRefBuilder();
        org.apache.rat.analysis.IHeaderMatcher.Builder[] builderArray58 = new org.apache.rat.analysis.IHeaderMatcher.Builder[] { matcherRefBuilder2, anyBuilder5, notBuilder6, matcherRefBuilder57 };
        java.util.ArrayList<org.apache.rat.analysis.IHeaderMatcher.Builder> builderList59 = new java.util.ArrayList<org.apache.rat.analysis.IHeaderMatcher.Builder>();
        boolean boolean60 = java.util.Collections.addAll((java.util.Collection<org.apache.rat.analysis.IHeaderMatcher.Builder>) builderList59, builderArray58);
        org.apache.rat.configuration.builders.AbstractBuilder abstractBuilder61 = allBuilder1.add((java.util.Collection<org.apache.rat.analysis.IHeaderMatcher.Builder>) builderList59);
        defaultLog0.info((java.lang.Object) allBuilder1);
        org.apache.rat.annotation.ApacheV2LicenseAppender apacheV2LicenseAppender64 = new org.apache.rat.annotation.ApacheV2LicenseAppender((org.apache.rat.utils.Log) defaultLog0, "true");
        org.apache.rat.ReportConfiguration reportConfiguration65 = new org.apache.rat.ReportConfiguration((org.apache.rat.utils.Log) defaultLog0);
        org.apache.rat.report.IReportable iReportable66 = null;
        reportConfiguration65.setReportable(iReportable66);
        org.junit.Assert.assertNotNull(defaultLog0);
        org.junit.Assert.assertNotNull(matcherRefBuilder2);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "MathcerRefBuilder: null" + "'", str4, "MathcerRefBuilder: null");
        org.junit.Assert.assertNotNull(anyBuilder5);
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "NotBuilder: null" + "'", str7, "NotBuilder: null");
        org.junit.Assert.assertNotNull(matcherRefBuilder8);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertNotNull(matcherRefBuilder11);
        org.junit.Assert.assertNotNull(copyrightBuilder13);
        org.junit.Assert.assertNotNull(copyrightBuilder15);
        org.junit.Assert.assertEquals("'" + str16 + "' != '" + "Copyright Builder: s:OASIS e:null o:null" + "'", str16, "Copyright Builder: s:OASIS e:null o:null");
        org.junit.Assert.assertNotNull(copyrightBuilder18);
        org.junit.Assert.assertNotNull(matcherRefBuilder19);
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + false + "'", boolean20 == false);
        org.junit.Assert.assertNotNull(copyrightBuilder21);
        org.junit.Assert.assertNotNull(copyrightBuilder23);
        org.junit.Assert.assertEquals("'" + str24 + "' != '" + "Copyright Builder: s:OASIS e:null o:null" + "'", str24, "Copyright Builder: s:OASIS e:null o:null");
        org.junit.Assert.assertNotNull(copyrightBuilder26);
        org.junit.Assert.assertNotNull(copyrightBuilder27);
        org.junit.Assert.assertNotNull(copyrightBuilder28);
        org.junit.Assert.assertEquals("'" + str29 + "' != '" + "Copyright Builder: s:null e:null o:null" + "'", str29, "Copyright Builder: s:null e:null o:null");
        org.junit.Assert.assertNotNull(copyrightBuilder31);
        org.junit.Assert.assertTrue("'" + boolean32 + "' != '" + false + "'", boolean32 == false);
        org.junit.Assert.assertNotNull(copyrightBuilder33);
        org.junit.Assert.assertEquals("'" + str34 + "' != '" + "Copyright Builder: s:null e:null o:null" + "'", str34, "Copyright Builder: s:null e:null o:null");
        org.junit.Assert.assertNotNull(copyrightBuilder36);
        org.junit.Assert.assertTrue("'" + boolean37 + "' != '" + false + "'", boolean37 == false);
        org.junit.Assert.assertEquals("'" + str38 + "' != '" + "Copyright Builder: s:null e:.cvsignore o:null" + "'", str38, "Copyright Builder: s:null e:.cvsignore o:null");
        org.junit.Assert.assertNotNull(copyrightBuilder39);
        org.junit.Assert.assertNotNull(copyrightBuilder41);
        org.junit.Assert.assertNotNull(anyBuilder42);
        org.junit.Assert.assertNotNull(matcherRefBuilder43);
        org.junit.Assert.assertTrue("'" + boolean44 + "' != '" + false + "'", boolean44 == false);
        org.junit.Assert.assertNotNull(matcherRefBuilder46);
        org.junit.Assert.assertNotNull(copyrightBuilder47);
        org.junit.Assert.assertNotNull(matcherRefBuilder48);
        org.junit.Assert.assertTrue("'" + boolean49 + "' != '" + false + "'", boolean49 == false);
        org.junit.Assert.assertEquals("'" + str50 + "' != '" + "MathcerRefBuilder: null" + "'", str50, "MathcerRefBuilder: null");
        org.junit.Assert.assertNotNull(matcherRefBuilder52);
        org.junit.Assert.assertNotNull(builderArray53);
        org.junit.Assert.assertTrue("'" + boolean55 + "' != '" + true + "'", boolean55 == true);
        org.junit.Assert.assertNotNull(abstractBuilder56);
        org.junit.Assert.assertNotNull(builderArray58);
        org.junit.Assert.assertTrue("'" + boolean60 + "' != '" + true + "'", boolean60 == true);
        org.junit.Assert.assertNotNull(abstractBuilder61);
    }

    @Test
    public void test13542() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest27.test13542");
        org.apache.rat.utils.DefaultLog defaultLog0 = org.apache.rat.utils.DefaultLog.INSTANCE;
        org.apache.rat.configuration.builders.AllBuilder allBuilder1 = new org.apache.rat.configuration.builders.AllBuilder();
        org.apache.rat.configuration.builders.MatcherRefBuilder matcherRefBuilder2 = org.apache.rat.analysis.IHeaderMatcher.Builder.matcherRef();
        boolean boolean3 = matcherRefBuilder2.hasId();
        java.lang.String str4 = matcherRefBuilder2.toString();
        org.apache.rat.configuration.builders.AnyBuilder anyBuilder5 = org.apache.rat.analysis.IHeaderMatcher.Builder.any();
        org.apache.rat.configuration.builders.NotBuilder notBuilder6 = new org.apache.rat.configuration.builders.NotBuilder();
        java.lang.String str7 = notBuilder6.toString();
        org.apache.rat.configuration.builders.MatcherRefBuilder matcherRefBuilder8 = org.apache.rat.analysis.IHeaderMatcher.Builder.matcherRef();
        boolean boolean9 = matcherRefBuilder8.hasId();
        java.util.Map<java.lang.String, org.apache.rat.analysis.IHeaderMatcher> strMap10 = null;
        org.apache.rat.configuration.builders.MatcherRefBuilder matcherRefBuilder11 = matcherRefBuilder8.setMatchers(strMap10);
        org.apache.rat.configuration.builders.AllBuilder allBuilder12 = new org.apache.rat.configuration.builders.AllBuilder();
        org.apache.rat.configuration.builders.CopyrightBuilder copyrightBuilder13 = org.apache.rat.analysis.IHeaderMatcher.Builder.copyright();
        org.apache.rat.configuration.builders.CopyrightBuilder copyrightBuilder15 = copyrightBuilder13.setStart("OASIS");
        java.lang.String str16 = copyrightBuilder13.toString();
        org.apache.rat.configuration.builders.CopyrightBuilder copyrightBuilder18 = copyrightBuilder13.setStart("223f0aba-15d4-49e9-901e-5740c137aebf");
        org.apache.rat.configuration.builders.MatcherRefBuilder matcherRefBuilder19 = org.apache.rat.analysis.IHeaderMatcher.Builder.matcherRef();
        boolean boolean20 = matcherRefBuilder19.hasId();
        org.apache.rat.configuration.builders.CopyrightBuilder copyrightBuilder21 = org.apache.rat.analysis.IHeaderMatcher.Builder.copyright();
        org.apache.rat.configuration.builders.CopyrightBuilder copyrightBuilder23 = copyrightBuilder21.setStart("OASIS");
        java.lang.String str24 = copyrightBuilder21.toString();
        org.apache.rat.configuration.builders.CopyrightBuilder copyrightBuilder26 = copyrightBuilder21.setStart("223f0aba-15d4-49e9-901e-5740c137aebf");
        org.apache.rat.configuration.builders.CopyrightBuilder copyrightBuilder27 = org.apache.rat.analysis.IHeaderMatcher.Builder.copyright();
        org.apache.rat.configuration.builders.CopyrightBuilder copyrightBuilder28 = org.apache.rat.analysis.IHeaderMatcher.Builder.copyright();
        java.lang.String str29 = copyrightBuilder28.toString();
        org.apache.rat.configuration.builders.CopyrightBuilder copyrightBuilder31 = copyrightBuilder28.setEnd(".cvsignore");
        boolean boolean32 = copyrightBuilder28.hasId();
        org.apache.rat.configuration.builders.CopyrightBuilder copyrightBuilder33 = org.apache.rat.analysis.IHeaderMatcher.Builder.copyright();
        java.lang.String str34 = copyrightBuilder33.toString();
        org.apache.rat.configuration.builders.CopyrightBuilder copyrightBuilder36 = copyrightBuilder33.setEnd(".cvsignore");
        boolean boolean37 = copyrightBuilder33.hasId();
        java.lang.String str38 = copyrightBuilder33.toString();
        org.apache.rat.configuration.builders.CopyrightBuilder copyrightBuilder39 = org.apache.rat.analysis.IHeaderMatcher.Builder.copyright();
        org.apache.rat.configuration.builders.CopyrightBuilder copyrightBuilder41 = copyrightBuilder39.setStart("OASIS");
        org.apache.rat.configuration.builders.AnyBuilder anyBuilder42 = org.apache.rat.analysis.IHeaderMatcher.Builder.any();
        org.apache.rat.configuration.builders.MatcherRefBuilder matcherRefBuilder43 = org.apache.rat.analysis.IHeaderMatcher.Builder.matcherRef();
        boolean boolean44 = matcherRefBuilder43.hasId();
        java.util.Map<java.lang.String, org.apache.rat.analysis.IHeaderMatcher> strMap45 = null;
        org.apache.rat.configuration.builders.MatcherRefBuilder matcherRefBuilder46 = matcherRefBuilder43.setMatchers(strMap45);
        org.apache.rat.configuration.builders.CopyrightBuilder copyrightBuilder47 = org.apache.rat.analysis.IHeaderMatcher.Builder.copyright();
        org.apache.rat.configuration.builders.MatcherRefBuilder matcherRefBuilder48 = org.apache.rat.analysis.IHeaderMatcher.Builder.matcherRef();
        boolean boolean49 = matcherRefBuilder48.hasId();
        java.lang.String str50 = matcherRefBuilder48.toString();
        java.util.Map<java.lang.String, org.apache.rat.analysis.IHeaderMatcher> strMap51 = null;
        org.apache.rat.configuration.builders.MatcherRefBuilder matcherRefBuilder52 = matcherRefBuilder48.setMatchers(strMap51);
        org.apache.rat.analysis.IHeaderMatcher.Builder[] builderArray53 = new org.apache.rat.analysis.IHeaderMatcher.Builder[] { matcherRefBuilder8, allBuilder12, copyrightBuilder18, matcherRefBuilder19, copyrightBuilder21, copyrightBuilder27, copyrightBuilder28, copyrightBuilder33, copyrightBuilder39, anyBuilder42, matcherRefBuilder43, copyrightBuilder47, matcherRefBuilder48 };
        java.util.ArrayList<org.apache.rat.analysis.IHeaderMatcher.Builder> builderList54 = new java.util.ArrayList<org.apache.rat.analysis.IHeaderMatcher.Builder>();
        boolean boolean55 = java.util.Collections.addAll((java.util.Collection<org.apache.rat.analysis.IHeaderMatcher.Builder>) builderList54, builderArray53);
        org.apache.rat.configuration.builders.AbstractBuilder abstractBuilder56 = notBuilder6.add((java.util.Collection<org.apache.rat.analysis.IHeaderMatcher.Builder>) builderList54);
        org.apache.rat.configuration.builders.MatcherRefBuilder matcherRefBuilder57 = new org.apache.rat.configuration.builders.MatcherRefBuilder();
        org.apache.rat.analysis.IHeaderMatcher.Builder[] builderArray58 = new org.apache.rat.analysis.IHeaderMatcher.Builder[] { matcherRefBuilder2, anyBuilder5, notBuilder6, matcherRefBuilder57 };
        java.util.ArrayList<org.apache.rat.analysis.IHeaderMatcher.Builder> builderList59 = new java.util.ArrayList<org.apache.rat.analysis.IHeaderMatcher.Builder>();
        boolean boolean60 = java.util.Collections.addAll((java.util.Collection<org.apache.rat.analysis.IHeaderMatcher.Builder>) builderList59, builderArray58);
        org.apache.rat.configuration.builders.AbstractBuilder abstractBuilder61 = allBuilder1.add((java.util.Collection<org.apache.rat.analysis.IHeaderMatcher.Builder>) builderList59);
        defaultLog0.info((java.lang.Object) allBuilder1);
        org.apache.rat.ReportConfiguration reportConfiguration63 = new org.apache.rat.ReportConfiguration((org.apache.rat.utils.Log) defaultLog0);
        org.apache.rat.utils.Log log64 = null;
        org.apache.rat.ReportConfiguration reportConfiguration65 = new org.apache.rat.ReportConfiguration(log64);
        reportConfiguration65.addApprovedLicenseCategory(".cvsignore");
        org.apache.rat.utils.Log.Level level68 = org.apache.rat.utils.Log.Level.ERROR;
        reportConfiguration65.logFamilyCollisions(level68);
        defaultLog0.setLevel(level68);
        org.apache.rat.annotation.ApacheV2LicenseAppender apacheV2LicenseAppender72 = new org.apache.rat.annotation.ApacheV2LicenseAppender((org.apache.rat.utils.Log) defaultLog0, "true");
        org.apache.rat.ReportConfiguration reportConfiguration73 = new org.apache.rat.ReportConfiguration((org.apache.rat.utils.Log) defaultLog0);
        org.apache.rat.analysis.matchers.SimpleTextMatcher simpleTextMatcher76 = new org.apache.rat.analysis.matchers.SimpleTextMatcher("COMMO", "ef75a6e8-7197-4e9e-83bf-f8b367e6b3c5");
        defaultLog0.error((java.lang.Object) simpleTextMatcher76);
        simpleTextMatcher76.reset();
        org.apache.rat.analysis.IHeaderMatcher.State state79 = simpleTextMatcher76.finalizeState();
        org.junit.Assert.assertNotNull(defaultLog0);
        org.junit.Assert.assertNotNull(matcherRefBuilder2);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "MathcerRefBuilder: null" + "'", str4, "MathcerRefBuilder: null");
        org.junit.Assert.assertNotNull(anyBuilder5);
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "NotBuilder: null" + "'", str7, "NotBuilder: null");
        org.junit.Assert.assertNotNull(matcherRefBuilder8);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertNotNull(matcherRefBuilder11);
        org.junit.Assert.assertNotNull(copyrightBuilder13);
        org.junit.Assert.assertNotNull(copyrightBuilder15);
        org.junit.Assert.assertEquals("'" + str16 + "' != '" + "Copyright Builder: s:OASIS e:null o:null" + "'", str16, "Copyright Builder: s:OASIS e:null o:null");
        org.junit.Assert.assertNotNull(copyrightBuilder18);
        org.junit.Assert.assertNotNull(matcherRefBuilder19);
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + false + "'", boolean20 == false);
        org.junit.Assert.assertNotNull(copyrightBuilder21);
        org.junit.Assert.assertNotNull(copyrightBuilder23);
        org.junit.Assert.assertEquals("'" + str24 + "' != '" + "Copyright Builder: s:OASIS e:null o:null" + "'", str24, "Copyright Builder: s:OASIS e:null o:null");
        org.junit.Assert.assertNotNull(copyrightBuilder26);
        org.junit.Assert.assertNotNull(copyrightBuilder27);
        org.junit.Assert.assertNotNull(copyrightBuilder28);
        org.junit.Assert.assertEquals("'" + str29 + "' != '" + "Copyright Builder: s:null e:null o:null" + "'", str29, "Copyright Builder: s:null e:null o:null");
        org.junit.Assert.assertNotNull(copyrightBuilder31);
        org.junit.Assert.assertTrue("'" + boolean32 + "' != '" + false + "'", boolean32 == false);
        org.junit.Assert.assertNotNull(copyrightBuilder33);
        org.junit.Assert.assertEquals("'" + str34 + "' != '" + "Copyright Builder: s:null e:null o:null" + "'", str34, "Copyright Builder: s:null e:null o:null");
        org.junit.Assert.assertNotNull(copyrightBuilder36);
        org.junit.Assert.assertTrue("'" + boolean37 + "' != '" + false + "'", boolean37 == false);
        org.junit.Assert.assertEquals("'" + str38 + "' != '" + "Copyright Builder: s:null e:.cvsignore o:null" + "'", str38, "Copyright Builder: s:null e:.cvsignore o:null");
        org.junit.Assert.assertNotNull(copyrightBuilder39);
        org.junit.Assert.assertNotNull(copyrightBuilder41);
        org.junit.Assert.assertNotNull(anyBuilder42);
        org.junit.Assert.assertNotNull(matcherRefBuilder43);
        org.junit.Assert.assertTrue("'" + boolean44 + "' != '" + false + "'", boolean44 == false);
        org.junit.Assert.assertNotNull(matcherRefBuilder46);
        org.junit.Assert.assertNotNull(copyrightBuilder47);
        org.junit.Assert.assertNotNull(matcherRefBuilder48);
        org.junit.Assert.assertTrue("'" + boolean49 + "' != '" + false + "'", boolean49 == false);
        org.junit.Assert.assertEquals("'" + str50 + "' != '" + "MathcerRefBuilder: null" + "'", str50, "MathcerRefBuilder: null");
        org.junit.Assert.assertNotNull(matcherRefBuilder52);
        org.junit.Assert.assertNotNull(builderArray53);
        org.junit.Assert.assertTrue("'" + boolean55 + "' != '" + true + "'", boolean55 == true);
        org.junit.Assert.assertNotNull(abstractBuilder56);
        org.junit.Assert.assertNotNull(builderArray58);
        org.junit.Assert.assertTrue("'" + boolean60 + "' != '" + true + "'", boolean60 == true);
        org.junit.Assert.assertNotNull(abstractBuilder61);
        org.junit.Assert.assertTrue("'" + level68 + "' != '" + org.apache.rat.utils.Log.Level.ERROR + "'", level68.equals(org.apache.rat.utils.Log.Level.ERROR));
        org.junit.Assert.assertTrue("'" + state79 + "' != '" + org.apache.rat.analysis.IHeaderMatcher.State.f + "'", state79.equals(org.apache.rat.analysis.IHeaderMatcher.State.f));
    }

    @Test
    public void test13543() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest27.test13543");
        org.apache.rat.license.SimpleLicenseFamily simpleLicenseFamily0 = new org.apache.rat.license.SimpleLicenseFamily();
        java.lang.String str1 = simpleLicenseFamily0.getFamilyName();
        java.lang.String str2 = simpleLicenseFamily0.getFamilyCategory();
        java.lang.String str3 = simpleLicenseFamily0.getFamilyName();
        simpleLicenseFamily0.setFamilyName("c523095e-4421-4cc4-93e2-039f23b91f76");
        simpleLicenseFamily0.setFamilyName("d4148d3a-edbc-4672-b347-0fa619553f91");
        simpleLicenseFamily0.setFamilyName("t true");
        simpleLicenseFamily0.setFamilyName("");
        java.lang.String str12 = simpleLicenseFamily0.toString();
        org.junit.Assert.assertNull(str1);
        org.junit.Assert.assertNull(str2);
        org.junit.Assert.assertNull(str3);
        org.junit.Assert.assertEquals("'" + str12 + "' != '" + "null " + "'", str12, "null ");
    }

    @Test
    public void test13544() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest27.test13544");
        org.apache.rat.utils.Log log0 = null;
        org.apache.rat.ReportConfiguration reportConfiguration1 = new org.apache.rat.ReportConfiguration(log0);
        org.apache.commons.io.function.IOSupplier<java.io.OutputStream> outputStreamIOSupplier2 = reportConfiguration1.getOutput();
        reportConfiguration1.setCopyrightMessage("MANIFEST.MF");
        org.apache.rat.utils.Log log5 = reportConfiguration1.getLog();
        org.apache.commons.io.function.IOSupplier<java.io.InputStream> inputStreamIOSupplier6 = org.apache.rat.Defaults.getPlainStyleSheet();
        reportConfiguration1.setStyleSheet(inputStreamIOSupplier6);
        java.lang.String str8 = reportConfiguration1.getCopyrightMessage();
        org.apache.rat.utils.Log log9 = null;
        org.apache.rat.ReportConfiguration reportConfiguration10 = new org.apache.rat.ReportConfiguration(log9);
        org.apache.rat.license.ILicenseFamily[] iLicenseFamilyArray11 = new org.apache.rat.license.ILicenseFamily[] {};
        java.util.ArrayList<org.apache.rat.license.ILicenseFamily> iLicenseFamilyList12 = new java.util.ArrayList<org.apache.rat.license.ILicenseFamily>();
        boolean boolean13 = java.util.Collections.addAll((java.util.Collection<org.apache.rat.license.ILicenseFamily>) iLicenseFamilyList12, iLicenseFamilyArray11);
        reportConfiguration10.addFamilies((java.util.Collection<org.apache.rat.license.ILicenseFamily>) iLicenseFamilyList12);
        org.apache.rat.report.IReportable iReportable15 = null;
        reportConfiguration10.setReportable(iReportable15);
        reportConfiguration10.addApprovedLicenseCategory("http://org/apache/rat/meta-data#LicenseFamilyCategory");
        org.apache.rat.utils.Log log19 = null;
        org.apache.rat.ReportConfiguration reportConfiguration20 = new org.apache.rat.ReportConfiguration(log19);
        java.io.FilenameFilter filenameFilter21 = reportConfiguration20.getInputFileFilter();
        org.apache.rat.license.LicenseSetFactory.LicenseFilter licenseFilter22 = org.apache.rat.license.LicenseSetFactory.LicenseFilter.all;
        java.util.SortedSet<org.apache.rat.license.ILicense> iLicenseSet23 = reportConfiguration20.getLicenses(licenseFilter22);
        org.apache.rat.license.ILicenseFamily iLicenseFamily24 = null;
        reportConfiguration20.addFamily(iLicenseFamily24);
        org.apache.commons.io.filefilter.IOFileFilter iOFileFilter26 = reportConfiguration20.getDirectoryFilter();
        org.apache.rat.document.ToNameTransformer toNameTransformer27 = new org.apache.rat.document.ToNameTransformer();
        org.apache.rat.utils.DefaultLog defaultLog28 = org.apache.rat.utils.DefaultLog.INSTANCE;
        org.apache.rat.license.ILicense.Builder builder29 = org.apache.rat.license.ILicense.builder();
        org.apache.rat.license.ILicense.Builder builder31 = builder29.setLicenseFamilyCategory("");
        org.apache.rat.analysis.matchers.CopyrightMatcher copyrightMatcher35 = new org.apache.rat.analysis.matchers.CopyrightMatcher("", "GPL1 ", "hi!");
        org.apache.rat.analysis.IHeaderMatcher.State state36 = copyrightMatcher35.finalizeState();
        org.apache.rat.license.ILicense.Builder builder37 = builder31.setMatcher((org.apache.rat.analysis.IHeaderMatcher) copyrightMatcher35);
        org.apache.rat.license.ILicense.Builder builder39 = builder37.setLicenseFamilyCategory("");
        defaultLog28.error((java.lang.Object) builder39);
        java.lang.Object obj41 = toNameTransformer27.transform((java.lang.Object) defaultLog28);
        org.apache.rat.utils.Log log42 = null;
        org.apache.rat.ReportConfiguration reportConfiguration43 = new org.apache.rat.ReportConfiguration(log42);
        java.io.FilenameFilter filenameFilter44 = reportConfiguration43.getInputFileFilter();
        org.apache.rat.license.ILicense iLicense45 = null;
        reportConfiguration43.addLicense(iLicense45);
        org.apache.rat.license.ILicenseFamily iLicenseFamily47 = null;
        reportConfiguration43.addFamily(iLicenseFamily47);
        org.apache.commons.io.function.IOSupplier<java.io.InputStream> inputStreamIOSupplier49 = org.apache.rat.Defaults.getPlainStyleSheet();
        reportConfiguration43.setStyleSheet(inputStreamIOSupplier49);
        java.lang.Object obj51 = toNameTransformer27.transform((java.lang.Object) inputStreamIOSupplier49);
        reportConfiguration20.setStyleSheet(inputStreamIOSupplier49);
        reportConfiguration10.setStyleSheet(inputStreamIOSupplier49);
        org.apache.rat.utils.DefaultLog defaultLog54 = org.apache.rat.utils.DefaultLog.INSTANCE;
        org.apache.rat.license.ILicense.Builder builder55 = org.apache.rat.license.ILicense.builder();
        org.apache.rat.license.ILicense.Builder builder57 = builder55.setLicenseFamilyCategory("");
        org.apache.rat.analysis.matchers.CopyrightMatcher copyrightMatcher61 = new org.apache.rat.analysis.matchers.CopyrightMatcher("", "GPL1 ", "hi!");
        org.apache.rat.analysis.IHeaderMatcher.State state62 = copyrightMatcher61.finalizeState();
        org.apache.rat.license.ILicense.Builder builder63 = builder57.setMatcher((org.apache.rat.analysis.IHeaderMatcher) copyrightMatcher61);
        org.apache.rat.license.ILicense.Builder builder65 = builder63.setLicenseFamilyCategory("");
        defaultLog54.error((java.lang.Object) builder65);
        org.apache.rat.utils.Log.Level level67 = org.apache.rat.utils.Log.Level.INFO;
        defaultLog54.log(level67, "JAVA");
        org.apache.rat.utils.Log log70 = null;
        org.apache.rat.ReportConfiguration reportConfiguration71 = new org.apache.rat.ReportConfiguration(log70);
        org.apache.commons.io.function.IOSupplier<java.io.OutputStream> outputStreamIOSupplier72 = reportConfiguration71.getOutput();
        reportConfiguration71.setCopyrightMessage("MANIFEST.MF");
        org.apache.rat.utils.Log log75 = reportConfiguration71.getLog();
        org.apache.rat.utils.Log.Level level76 = org.apache.rat.utils.Log.Level.INFO;
        reportConfiguration71.logFamilyCollisions(level76);
        defaultLog54.setLevel(level76);
        reportConfiguration10.logLicenseCollisions(level76);
        reportConfiguration1.logFamilyCollisions(level76);
        org.junit.Assert.assertNotNull(outputStreamIOSupplier2);
        org.junit.Assert.assertNull(log5);
        org.junit.Assert.assertNotNull(inputStreamIOSupplier6);
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "MANIFEST.MF" + "'", str8, "MANIFEST.MF");
        org.junit.Assert.assertNotNull(iLicenseFamilyArray11);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
        org.junit.Assert.assertNull(filenameFilter21);
        org.junit.Assert.assertTrue("'" + licenseFilter22 + "' != '" + org.apache.rat.license.LicenseSetFactory.LicenseFilter.all + "'", licenseFilter22.equals(org.apache.rat.license.LicenseSetFactory.LicenseFilter.all));
        org.junit.Assert.assertNotNull(iLicenseSet23);
        org.junit.Assert.assertNotNull(iOFileFilter26);
        org.junit.Assert.assertNotNull(defaultLog28);
        org.junit.Assert.assertNotNull(builder29);
        org.junit.Assert.assertNotNull(builder31);
        org.junit.Assert.assertTrue("'" + state36 + "' != '" + org.apache.rat.analysis.IHeaderMatcher.State.f + "'", state36.equals(org.apache.rat.analysis.IHeaderMatcher.State.f));
        org.junit.Assert.assertNotNull(builder37);
        org.junit.Assert.assertNotNull(builder39);
        org.junit.Assert.assertNull(obj41);
        org.junit.Assert.assertNull(filenameFilter44);
        org.junit.Assert.assertNotNull(inputStreamIOSupplier49);
        org.junit.Assert.assertNull(obj51);
        org.junit.Assert.assertNotNull(defaultLog54);
        org.junit.Assert.assertNotNull(builder55);
        org.junit.Assert.assertNotNull(builder57);
        org.junit.Assert.assertTrue("'" + state62 + "' != '" + org.apache.rat.analysis.IHeaderMatcher.State.f + "'", state62.equals(org.apache.rat.analysis.IHeaderMatcher.State.f));
        org.junit.Assert.assertNotNull(builder63);
        org.junit.Assert.assertNotNull(builder65);
        org.junit.Assert.assertTrue("'" + level67 + "' != '" + org.apache.rat.utils.Log.Level.INFO + "'", level67.equals(org.apache.rat.utils.Log.Level.INFO));
        org.junit.Assert.assertNotNull(outputStreamIOSupplier72);
        org.junit.Assert.assertNull(log75);
        org.junit.Assert.assertTrue("'" + level76 + "' != '" + org.apache.rat.utils.Log.Level.INFO + "'", level76.equals(org.apache.rat.utils.Log.Level.INFO));
    }

    @Test
    public void test13545() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest27.test13545");
        java.util.regex.Pattern pattern1 = null;
        org.apache.rat.analysis.matchers.SimpleRegexMatcher simpleRegexMatcher2 = new org.apache.rat.analysis.matchers.SimpleRegexMatcher("824f4e11-66e9-46be-a4d6-3a2b761d6238", pattern1);
        // The following exception was thrown during execution in test generation
        try {
            boolean boolean4 = simpleRegexMatcher2.doMatch("0efc75e6-7b61-4598-a9af-ecc9887f66c4");
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
    }

    @Test
    public void test13546() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest27.test13546");
        org.apache.rat.utils.Log log0 = null;
        org.apache.rat.ReportConfiguration reportConfiguration1 = new org.apache.rat.ReportConfiguration(log0);
        org.apache.rat.report.claim.ClaimStatistic claimStatistic2 = org.apache.rat.Reporter.report(reportConfiguration1);
        org.apache.commons.io.function.IOSupplier<java.io.InputStream> inputStreamIOSupplier3 = reportConfiguration1.getStyleSheet();
        org.apache.rat.analysis.license.FullTextMatchingLicense fullTextMatchingLicense4 = new org.apache.rat.analysis.license.FullTextMatchingLicense();
        fullTextMatchingLicense4.setLicenseFamilyName("hi!");
        java.lang.String str7 = fullTextMatchingLicense4.getLicenseFamilyCategory();
        java.lang.String str8 = fullTextMatchingLicense4.getLicenseFamilyName();
        fullTextMatchingLicense4.setLicenseFamilyName("SpdxBuilder: null");
        fullTextMatchingLicense4.setLicenseFamilyCategory("TMF");
        org.apache.rat.license.ILicenseFamily iLicenseFamily13 = fullTextMatchingLicense4.getLicenseFamily();
        java.lang.String str14 = iLicenseFamily13.getFamilyName();
        java.lang.String str15 = iLicenseFamily13.getFamilyName();
        reportConfiguration1.addApprovedLicenseCategory(iLicenseFamily13);
        reportConfiguration1.setCopyrightMessage("GNU General Public License, version 1");
        boolean boolean19 = reportConfiguration1.isAddingLicenses();
        org.junit.Assert.assertNull(claimStatistic2);
        org.junit.Assert.assertNull(inputStreamIOSupplier3);
        org.junit.Assert.assertNull(str7);
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "hi!" + "'", str8, "hi!");
        org.junit.Assert.assertNotNull(iLicenseFamily13);
        org.junit.Assert.assertEquals("'" + str14 + "' != '" + "SpdxBuilder: null" + "'", str14, "SpdxBuilder: null");
        org.junit.Assert.assertEquals("'" + str15 + "' != '" + "SpdxBuilder: null" + "'", str15, "SpdxBuilder: null");
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + false + "'", boolean19 == false);
    }

    @Test
    public void test13547() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest27.test13547");
        org.apache.rat.utils.Log log0 = null;
        org.apache.rat.ReportConfiguration reportConfiguration1 = new org.apache.rat.ReportConfiguration(log0);
        org.apache.commons.io.function.IOSupplier<java.io.OutputStream> outputStreamIOSupplier2 = reportConfiguration1.getOutput();
        org.apache.commons.io.filefilter.IOFileFilter iOFileFilter3 = reportConfiguration1.getDirectoryFilter();
        org.apache.rat.utils.Log log4 = null;
        org.apache.rat.ReportConfiguration reportConfiguration5 = new org.apache.rat.ReportConfiguration(log4);
        reportConfiguration5.addApprovedLicenseCategory(".cvsignore");
        org.apache.rat.utils.Log log8 = null;
        org.apache.rat.ReportConfiguration reportConfiguration9 = new org.apache.rat.ReportConfiguration(log8);
        java.io.FilenameFilter filenameFilter10 = reportConfiguration9.getInputFileFilter();
        org.apache.rat.license.LicenseSetFactory.LicenseFilter licenseFilter11 = org.apache.rat.license.LicenseSetFactory.LicenseFilter.all;
        java.util.SortedSet<org.apache.rat.license.ILicense> iLicenseSet12 = reportConfiguration9.getLicenses(licenseFilter11);
        reportConfiguration5.addLicensesIfNotPresent((java.util.Collection<org.apache.rat.license.ILicense>) iLicenseSet12);
        java.io.FilenameFilter filenameFilter14 = reportConfiguration5.getInputFileFilter();
        org.apache.rat.utils.Log log15 = null;
        org.apache.rat.ReportConfiguration reportConfiguration16 = new org.apache.rat.ReportConfiguration(log15);
        java.io.FilenameFilter filenameFilter17 = reportConfiguration16.getInputFileFilter();
        org.apache.rat.license.LicenseSetFactory.LicenseFilter licenseFilter18 = org.apache.rat.license.LicenseSetFactory.LicenseFilter.all;
        java.util.SortedSet<org.apache.rat.license.ILicense> iLicenseSet19 = reportConfiguration16.getLicenses(licenseFilter18);
        org.apache.rat.config.AddLicenseHeaders addLicenseHeaders20 = org.apache.rat.config.AddLicenseHeaders.FALSE;
        reportConfiguration16.setAddLicenseHeaders(addLicenseHeaders20);
        org.apache.rat.utils.Log log22 = null;
        org.apache.rat.ReportConfiguration reportConfiguration23 = new org.apache.rat.ReportConfiguration(log22);
        org.apache.rat.report.claim.ClaimStatistic claimStatistic24 = org.apache.rat.Reporter.report(reportConfiguration23);
        org.apache.rat.license.LicenseSetFactory.LicenseFilter licenseFilter25 = org.apache.rat.license.LicenseSetFactory.LicenseFilter.all;
        org.apache.rat.Reporter.listLicenses(reportConfiguration23, licenseFilter25);
        org.apache.rat.Reporter.listLicenses(reportConfiguration16, licenseFilter25);
        org.apache.rat.utils.Log log28 = null;
        org.apache.rat.ReportConfiguration reportConfiguration29 = new org.apache.rat.ReportConfiguration(log28);
        java.io.FilenameFilter filenameFilter30 = reportConfiguration29.getInputFileFilter();
        org.apache.rat.license.LicenseSetFactory.LicenseFilter licenseFilter31 = org.apache.rat.license.LicenseSetFactory.LicenseFilter.all;
        java.util.SortedSet<org.apache.rat.license.ILicense> iLicenseSet32 = reportConfiguration29.getLicenses(licenseFilter31);
        org.apache.rat.config.AddLicenseHeaders addLicenseHeaders33 = org.apache.rat.config.AddLicenseHeaders.FALSE;
        reportConfiguration29.setAddLicenseHeaders(addLicenseHeaders33);
        org.apache.rat.utils.Log log35 = null;
        org.apache.rat.ReportConfiguration reportConfiguration36 = new org.apache.rat.ReportConfiguration(log35);
        org.apache.rat.report.claim.ClaimStatistic claimStatistic37 = org.apache.rat.Reporter.report(reportConfiguration36);
        org.apache.rat.license.LicenseSetFactory.LicenseFilter licenseFilter38 = org.apache.rat.license.LicenseSetFactory.LicenseFilter.all;
        org.apache.rat.Reporter.listLicenses(reportConfiguration36, licenseFilter38);
        org.apache.rat.Reporter.listLicenses(reportConfiguration29, licenseFilter38);
        java.util.SortedSet<org.apache.rat.license.ILicenseFamily> iLicenseFamilySet41 = reportConfiguration16.getLicenseFamilies(licenseFilter38);
        org.apache.rat.Reporter.listLicenseFamilies(reportConfiguration5, licenseFilter38);
        java.util.SortedSet<org.apache.rat.license.ILicenseFamily> iLicenseFamilySet43 = reportConfiguration1.getLicenseFamilies(licenseFilter38);
        reportConfiguration1.setStyleReport(true);
        org.junit.Assert.assertNotNull(outputStreamIOSupplier2);
        org.junit.Assert.assertNotNull(iOFileFilter3);
        org.junit.Assert.assertNull(filenameFilter10);
        org.junit.Assert.assertTrue("'" + licenseFilter11 + "' != '" + org.apache.rat.license.LicenseSetFactory.LicenseFilter.all + "'", licenseFilter11.equals(org.apache.rat.license.LicenseSetFactory.LicenseFilter.all));
        org.junit.Assert.assertNotNull(iLicenseSet12);
        org.junit.Assert.assertNull(filenameFilter14);
        org.junit.Assert.assertNull(filenameFilter17);
        org.junit.Assert.assertTrue("'" + licenseFilter18 + "' != '" + org.apache.rat.license.LicenseSetFactory.LicenseFilter.all + "'", licenseFilter18.equals(org.apache.rat.license.LicenseSetFactory.LicenseFilter.all));
        org.junit.Assert.assertNotNull(iLicenseSet19);
        org.junit.Assert.assertTrue("'" + addLicenseHeaders20 + "' != '" + org.apache.rat.config.AddLicenseHeaders.FALSE + "'", addLicenseHeaders20.equals(org.apache.rat.config.AddLicenseHeaders.FALSE));
        org.junit.Assert.assertNull(claimStatistic24);
        org.junit.Assert.assertTrue("'" + licenseFilter25 + "' != '" + org.apache.rat.license.LicenseSetFactory.LicenseFilter.all + "'", licenseFilter25.equals(org.apache.rat.license.LicenseSetFactory.LicenseFilter.all));
        org.junit.Assert.assertNull(filenameFilter30);
        org.junit.Assert.assertTrue("'" + licenseFilter31 + "' != '" + org.apache.rat.license.LicenseSetFactory.LicenseFilter.all + "'", licenseFilter31.equals(org.apache.rat.license.LicenseSetFactory.LicenseFilter.all));
        org.junit.Assert.assertNotNull(iLicenseSet32);
        org.junit.Assert.assertTrue("'" + addLicenseHeaders33 + "' != '" + org.apache.rat.config.AddLicenseHeaders.FALSE + "'", addLicenseHeaders33.equals(org.apache.rat.config.AddLicenseHeaders.FALSE));
        org.junit.Assert.assertNull(claimStatistic37);
        org.junit.Assert.assertTrue("'" + licenseFilter38 + "' != '" + org.apache.rat.license.LicenseSetFactory.LicenseFilter.all + "'", licenseFilter38.equals(org.apache.rat.license.LicenseSetFactory.LicenseFilter.all));
        org.junit.Assert.assertNotNull(iLicenseFamilySet41);
        org.junit.Assert.assertNotNull(iLicenseFamilySet43);
    }

    @Test
    public void test13548() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest27.test13548");
        org.apache.rat.configuration.builders.TextBuilder textBuilder0 = org.apache.rat.analysis.IHeaderMatcher.Builder.text();
        org.apache.rat.configuration.builders.TextBuilder textBuilder2 = textBuilder0.setText("");
        java.lang.String str3 = textBuilder2.toString();
        org.apache.rat.configuration.builders.TextBuilder textBuilder5 = textBuilder2.setText("d4148d3a-edbc-4672-b347-0fa619553f91");
        org.apache.rat.configuration.builders.TextCaptureBuilder textCaptureBuilder7 = textBuilder5.setText("4f1be289-aaa7-4730-8076-690bc1f926c5");
        org.apache.rat.configuration.builders.TextBuilder textBuilder9 = textBuilder5.setText("90663eff7ed841bd85a8e8f189198bc6");
        java.lang.String str10 = textBuilder9.toString();
        java.lang.String str11 = textBuilder9.toString();
        java.lang.String str12 = textBuilder9.toString();
        org.junit.Assert.assertNotNull(textBuilder0);
        org.junit.Assert.assertNotNull(textBuilder2);
        org.junit.Assert.assertEquals("'" + str3 + "' != '" + "TextBuilder: " + "'", str3, "TextBuilder: ");
        org.junit.Assert.assertNotNull(textBuilder5);
        org.junit.Assert.assertNotNull(textCaptureBuilder7);
        org.junit.Assert.assertNotNull(textBuilder9);
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "TextBuilder: 90663eff7ed841bd85a8..." + "'", str10, "TextBuilder: 90663eff7ed841bd85a8...");
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "TextBuilder: 90663eff7ed841bd85a8..." + "'", str11, "TextBuilder: 90663eff7ed841bd85a8...");
        org.junit.Assert.assertEquals("'" + str12 + "' != '" + "TextBuilder: 90663eff7ed841bd85a8..." + "'", str12, "TextBuilder: 90663eff7ed841bd85a8...");
    }

    @Test
    public void test13549() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest27.test13549");
        org.apache.rat.license.ILicense.Builder builder0 = org.apache.rat.license.ILicense.builder();
        org.apache.rat.license.ILicense.Builder builder2 = builder0.setLicenseFamilyCategory("");
        org.apache.rat.analysis.matchers.FullTextMatcher fullTextMatcher4 = new org.apache.rat.analysis.matchers.FullTextMatcher("ef7a8b13-64c3-4510-bb0c-dbf208e1e73f");
        org.apache.rat.license.ILicense.Builder builder5 = builder0.setMatcher((org.apache.rat.analysis.IHeaderMatcher) fullTextMatcher4);
        org.apache.rat.configuration.builders.AnyBuilder anyBuilder6 = org.apache.rat.analysis.IHeaderMatcher.Builder.any();
        java.lang.String str7 = anyBuilder6.toString();
        java.util.List<org.apache.rat.analysis.IHeaderMatcher> iHeaderMatcherList8 = anyBuilder6.getChildren();
        org.apache.rat.analysis.IHeaderMatcher iHeaderMatcher9 = anyBuilder6.build();
        org.apache.rat.analysis.IHeaderMatcher iHeaderMatcher10 = anyBuilder6.build();
        java.util.List<org.apache.rat.analysis.IHeaderMatcher> iHeaderMatcherList11 = anyBuilder6.getChildren();
        org.apache.rat.license.ILicense.Builder builder12 = builder0.setMatcher((org.apache.rat.analysis.IHeaderMatcher.Builder) anyBuilder6);
        org.apache.rat.analysis.matchers.SimpleTextMatcher simpleTextMatcher14 = new org.apache.rat.analysis.matchers.SimpleTextMatcher("binary");
        org.apache.rat.analysis.IHeaderMatcher.State state15 = simpleTextMatcher14.finalizeState();
        boolean boolean17 = simpleTextMatcher14.doMatch("null http://org/apache/rat/meta-data#LicenseFamilyName");
        org.apache.rat.license.ILicense.Builder builder18 = builder12.setMatcher((org.apache.rat.analysis.IHeaderMatcher) simpleTextMatcher14);
        org.apache.rat.analysis.matchers.SimpleTextMatcher simpleTextMatcher20 = new org.apache.rat.analysis.matchers.SimpleTextMatcher("hi!");
        org.apache.rat.analysis.matchers.NotMatcher notMatcher21 = new org.apache.rat.analysis.matchers.NotMatcher((org.apache.rat.analysis.IHeaderMatcher) simpleTextMatcher20);
        org.apache.rat.analysis.IHeaderMatcher.State state22 = notMatcher21.currentState();
        org.apache.rat.license.ILicense.Builder builder23 = builder12.setMatcher((org.apache.rat.analysis.IHeaderMatcher) notMatcher21);
        org.apache.rat.analysis.matchers.NotMatcher notMatcher24 = new org.apache.rat.analysis.matchers.NotMatcher((org.apache.rat.analysis.IHeaderMatcher) notMatcher21);
        org.apache.rat.analysis.IHeaderMatcher.State state25 = notMatcher24.finalizeState();
        org.apache.rat.analysis.IHeaderMatcher.State state26 = notMatcher24.currentState();
        org.junit.Assert.assertNotNull(builder0);
        org.junit.Assert.assertNotNull(builder2);
        org.junit.Assert.assertNotNull(builder5);
        org.junit.Assert.assertNotNull(anyBuilder6);
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "AnyBuilder:" + "'", str7, "AnyBuilder:");
        org.junit.Assert.assertNotNull(iHeaderMatcherList8);
        org.junit.Assert.assertNotNull(iHeaderMatcher9);
        org.junit.Assert.assertNotNull(iHeaderMatcher10);
        org.junit.Assert.assertNotNull(iHeaderMatcherList11);
        org.junit.Assert.assertNotNull(builder12);
        org.junit.Assert.assertTrue("'" + state15 + "' != '" + org.apache.rat.analysis.IHeaderMatcher.State.f + "'", state15.equals(org.apache.rat.analysis.IHeaderMatcher.State.f));
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + false + "'", boolean17 == false);
        org.junit.Assert.assertNotNull(builder18);
        org.junit.Assert.assertTrue("'" + state22 + "' != '" + org.apache.rat.analysis.IHeaderMatcher.State.i + "'", state22.equals(org.apache.rat.analysis.IHeaderMatcher.State.i));
        org.junit.Assert.assertNotNull(builder23);
        org.junit.Assert.assertTrue("'" + state25 + "' != '" + org.apache.rat.analysis.IHeaderMatcher.State.f + "'", state25.equals(org.apache.rat.analysis.IHeaderMatcher.State.f));
        org.junit.Assert.assertTrue("'" + state26 + "' != '" + org.apache.rat.analysis.IHeaderMatcher.State.f + "'", state26.equals(org.apache.rat.analysis.IHeaderMatcher.State.f));
    }

    @Test
    public void test13550() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest27.test13550");
        org.apache.rat.header.HeaderBean headerBean0 = new org.apache.rat.header.HeaderBean();
        boolean boolean1 = headerBean0.isMatch();
        headerBean0.setMatch(false);
        headerBean0.setMatch(false);
        java.util.regex.Pattern pattern6 = null;
        headerBean0.setHeaderPattern(pattern6);
        boolean boolean8 = headerBean0.isMatch();
        headerBean0.setMatch(false);
        java.util.regex.Pattern pattern11 = headerBean0.getHeaderPattern();
        headerBean0.setMatch(false);
        org.junit.Assert.assertTrue("'" + boolean1 + "' != '" + false + "'", boolean1 == false);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertNull(pattern11);
    }

    @Test
    public void test13551() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest27.test13551");
        org.apache.rat.report.claim.ClaimStatistic claimStatistic0 = new org.apache.rat.report.claim.ClaimStatistic();
        java.util.Map<java.lang.String, java.lang.Integer> strMap1 = null;
        claimStatistic0.setDocumentCategoryMap(strMap1);
        int int3 = claimStatistic0.getNumUnApproved();
        java.util.Map<java.lang.String, java.lang.Integer> strMap4 = claimStatistic0.getDocumentCategoryMap();
        claimStatistic0.setNumUnApproved((int) (byte) 1);
        java.util.Map<java.lang.String, java.lang.Integer> strMap7 = null;
        claimStatistic0.setDocumentCategoryMap(strMap7);
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 0 + "'", int3 == 0);
        org.junit.Assert.assertNull(strMap4);
    }

    @Test
    public void test13552() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest27.test13552");
        org.apache.rat.utils.Log log0 = null;
        org.apache.rat.ReportConfiguration reportConfiguration1 = new org.apache.rat.ReportConfiguration(log0);
        org.apache.rat.report.claim.ClaimStatistic claimStatistic2 = org.apache.rat.Reporter.report(reportConfiguration1);
        org.apache.rat.utils.Log log3 = null;
        org.apache.rat.ReportConfiguration reportConfiguration4 = new org.apache.rat.ReportConfiguration(log3);
        org.apache.rat.report.claim.ClaimStatistic claimStatistic5 = org.apache.rat.Reporter.report(reportConfiguration4);
        org.apache.rat.utils.ReportingSet.Options options6 = org.apache.rat.utils.ReportingSet.Options.OVERWRITE;
        reportConfiguration4.licenseDuplicateOption(options6);
        reportConfiguration1.familyDuplicateOption(options6);
        org.apache.commons.io.function.IOSupplier<java.io.PrintWriter> printWriterIOSupplier9 = reportConfiguration1.getWriter();
        org.apache.rat.report.IReportable iReportable10 = reportConfiguration1.getReportable();
        org.apache.rat.report.IReportable iReportable11 = null;
        reportConfiguration1.setReportable(iReportable11);
        boolean boolean13 = reportConfiguration1.isAddingLicensesForced();
        org.apache.rat.config.SourceCodeManagementSystems sourceCodeManagementSystems14 = org.apache.rat.config.SourceCodeManagementSystems.CVS;
        java.lang.String str15 = sourceCodeManagementSystems14.getIgnoreFile();
        boolean boolean16 = sourceCodeManagementSystems14.hasIgnoreFile();
        java.util.List<java.lang.String> strList17 = sourceCodeManagementSystems14.getExclusions();
        java.io.FilenameFilter filenameFilter18 = org.apache.rat.Report.parseExclusions(strList17);
        java.io.FilenameFilter filenameFilter19 = org.apache.rat.Report.parseExclusions(strList17);
        reportConfiguration1.removeApprovedLicenseCategories((java.util.Collection<java.lang.String>) strList17);
        org.apache.commons.io.filefilter.IOFileFilter iOFileFilter21 = reportConfiguration1.getDirectoryFilter();
        java.nio.file.Path path22 = null;
        boolean boolean23 = iOFileFilter21.matches(path22);
        org.junit.Assert.assertNull(claimStatistic2);
        org.junit.Assert.assertNull(claimStatistic5);
        org.junit.Assert.assertTrue("'" + options6 + "' != '" + org.apache.rat.utils.ReportingSet.Options.OVERWRITE + "'", options6.equals(org.apache.rat.utils.ReportingSet.Options.OVERWRITE));
        org.junit.Assert.assertNotNull(printWriterIOSupplier9);
        org.junit.Assert.assertNull(iReportable10);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
        org.junit.Assert.assertTrue("'" + sourceCodeManagementSystems14 + "' != '" + org.apache.rat.config.SourceCodeManagementSystems.CVS + "'", sourceCodeManagementSystems14.equals(org.apache.rat.config.SourceCodeManagementSystems.CVS));
        org.junit.Assert.assertEquals("'" + str15 + "' != '" + ".cvsignore" + "'", str15, ".cvsignore");
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + true + "'", boolean16 == true);
        org.junit.Assert.assertNotNull(strList17);
        org.junit.Assert.assertNotNull(filenameFilter18);
        org.junit.Assert.assertNotNull(filenameFilter19);
        org.junit.Assert.assertNotNull(iOFileFilter21);
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + false + "'", boolean23 == false);
    }

    @Test
    public void test13553() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest27.test13553");
        org.apache.rat.Defaults.Builder builder0 = org.apache.rat.Defaults.builder();
        org.apache.rat.Defaults.Builder builder1 = builder0.noDefault();
        org.apache.rat.Defaults.Builder builder3 = builder1.remove("ebc30eb7-b3ea-4f39-baea-5fea4fa0278b");
        java.net.URL uRL4 = null;
        org.apache.rat.Defaults.Builder builder5 = builder3.remove(uRL4);
        org.apache.rat.Defaults.Builder builder7 = builder3.add("c4c4fff5-2656-471f-bd41-62e472c2ca7b");
        org.apache.rat.Defaults.Builder builder9 = builder3.add("Datum [ name ='http://org/apache/rat/meta-data#LicenseFamilyName',value ='GNU General Public License, version 2 ']");
        org.junit.Assert.assertNotNull(builder0);
        org.junit.Assert.assertNotNull(builder1);
        org.junit.Assert.assertNotNull(builder3);
        org.junit.Assert.assertNotNull(builder5);
        org.junit.Assert.assertNotNull(builder7);
        org.junit.Assert.assertNotNull(builder9);
    }

    @Test
    public void test13554() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest27.test13554");
        org.apache.rat.api.MetaData metaData0 = new org.apache.rat.api.MetaData();
        java.lang.String str2 = metaData0.value("COMMON DEVELOPMENT AND DISTRIBUTION LICENSE Version 1.0");
        java.util.Collection<org.apache.rat.api.MetaData.Datum> datumCollection3 = metaData0.getData();
        org.apache.rat.api.MetaData.Datum datum4 = org.apache.rat.api.MetaData.RAT_LICENSE_FAMILY_NAME_DATUM_APACHE_LICENSE_VERSION_2_0;
        metaData0.set(datum4);
        java.util.Collection<org.apache.rat.api.MetaData.Datum> datumCollection6 = metaData0.getData();
        org.apache.rat.api.MetaData metaData7 = new org.apache.rat.api.MetaData();
        java.lang.String str9 = metaData7.value("COMMON DEVELOPMENT AND DISTRIBUTION LICENSE Version 1.0");
        org.apache.rat.api.MetaData.Datum datum11 = metaData7.get("Copyright Builder: s:null e:.cvsignore o:null");
        java.lang.String str13 = metaData7.value("W3C Software Copyright");
        java.lang.String str15 = metaData7.value("null http://org/apache/rat/meta-data#LicenseFamilyName");
        org.apache.rat.api.MetaData.Datum datum16 = org.apache.rat.api.MetaData.RAT_LICENSE_FAMILY_NAME_DATUM_UNKNOWN;
        metaData7.set(datum16);
        metaData0.add(datum16);
        org.junit.Assert.assertNull(str2);
        org.junit.Assert.assertNotNull(datumCollection3);
        org.junit.Assert.assertNotNull(datum4);
        org.junit.Assert.assertNotNull(datumCollection6);
        org.junit.Assert.assertNull(str9);
        org.junit.Assert.assertNull(datum11);
        org.junit.Assert.assertNull(str13);
        org.junit.Assert.assertNull(str15);
        org.junit.Assert.assertNotNull(datum16);
    }

    @Test
    public void test13555() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest27.test13555");
        org.apache.rat.report.claim.ClaimStatistic claimStatistic0 = new org.apache.rat.report.claim.ClaimStatistic();
        claimStatistic0.setNumApproved((int) (short) 10);
        java.util.Map<java.lang.String, java.lang.Integer> strMap3 = null;
        claimStatistic0.setDocumentCategoryMap(strMap3);
        java.util.Map<java.lang.String, java.lang.Integer> strMap5 = claimStatistic0.getLicenseFileNameMap();
        claimStatistic0.setNumUnknown((int) (byte) -1);
        claimStatistic0.setNumApproved((int) (short) 1);
        java.util.Map<java.lang.String, java.lang.Integer> strMap10 = claimStatistic0.getDocumentCategoryMap();
        java.util.Map<java.lang.String, java.lang.Integer> strMap11 = claimStatistic0.getLicenseFileNameMap();
        int int12 = claimStatistic0.getNumUnApproved();
        java.util.Map<java.lang.String, java.lang.Integer> strMap13 = claimStatistic0.getLicenseFileCodeMap();
        org.junit.Assert.assertNull(strMap5);
        org.junit.Assert.assertNull(strMap10);
        org.junit.Assert.assertNull(strMap11);
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + 0 + "'", int12 == 0);
        org.junit.Assert.assertNull(strMap13);
    }

    @Test
    public void test13556() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest27.test13556");
        org.apache.rat.analysis.license.FullTextMatchingLicense fullTextMatchingLicense0 = new org.apache.rat.analysis.license.FullTextMatchingLicense();
        fullTextMatchingLicense0.setLicenseFamilyName("hi!");
        fullTextMatchingLicense0.setFullText("MANIFEST.MF");
        fullTextMatchingLicense0.setFullText("JAVA");
        fullTextMatchingLicense0.setFullText("8128040d-ca94-4f3f-9deb-6252acd449bd");
        java.lang.String str9 = fullTextMatchingLicense0.getLicenseFamilyName();
        fullTextMatchingLicense0.setNotes("MathcerRefBuilder: ");
        fullTextMatchingLicense0.setLicenseFamilyCategory("Copyright Builder: s:archive e:null o:null");
        java.lang.String str14 = fullTextMatchingLicense0.getLicenseFamilyName();
        org.apache.rat.license.ILicense.Builder builder15 = fullTextMatchingLicense0.getLicense();
        org.apache.rat.license.ILicense.Builder builder16 = fullTextMatchingLicense0.getLicense();
        org.junit.Assert.assertEquals("'" + str9 + "' != '" + "hi!" + "'", str9, "hi!");
        org.junit.Assert.assertEquals("'" + str14 + "' != '" + "hi!" + "'", str14, "hi!");
        org.junit.Assert.assertNotNull(builder15);
        org.junit.Assert.assertNotNull(builder16);
    }

    @Test
    public void test13557() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest27.test13557");
        org.apache.rat.utils.Log log0 = null;
        org.apache.rat.ReportConfiguration reportConfiguration1 = new org.apache.rat.ReportConfiguration(log0);
        org.apache.rat.report.claim.ClaimStatistic claimStatistic2 = org.apache.rat.Reporter.report(reportConfiguration1);
        org.apache.rat.utils.Log log3 = null;
        org.apache.rat.ReportConfiguration reportConfiguration4 = new org.apache.rat.ReportConfiguration(log3);
        org.apache.rat.report.claim.ClaimStatistic claimStatistic5 = org.apache.rat.Reporter.report(reportConfiguration4);
        org.apache.rat.utils.ReportingSet.Options options6 = org.apache.rat.utils.ReportingSet.Options.OVERWRITE;
        reportConfiguration4.licenseDuplicateOption(options6);
        reportConfiguration1.familyDuplicateOption(options6);
        boolean boolean9 = reportConfiguration1.isStyleReport();
        org.apache.rat.license.ILicense[] iLicenseArray10 = new org.apache.rat.license.ILicense[] {};
        java.util.TreeSet<org.apache.rat.license.ILicense> iLicenseSet11 = new java.util.TreeSet<org.apache.rat.license.ILicense>();
        boolean boolean12 = java.util.Collections.addAll((java.util.Collection<org.apache.rat.license.ILicense>) iLicenseSet11, iLicenseArray10);
        java.lang.String[] strArray25 = new java.lang.String[] { "GPL2 ", "GPL1 ", "notice", "http://org/apache/rat/meta-data#LicenseFamilyName", "notice", "GPL2 ", "http://org/apache/rat/meta-data#LicenseFamilyName", "", "GPL2 ", "", "GPL1 ", "hi!" };
        java.util.ArrayList<java.lang.String> strList26 = new java.util.ArrayList<java.lang.String>();
        boolean boolean27 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strList26, strArray25);
        org.apache.rat.license.LicenseSetFactory licenseSetFactory28 = new org.apache.rat.license.LicenseSetFactory((java.util.SortedSet<org.apache.rat.license.ILicense>) iLicenseSet11, (java.util.Collection<java.lang.String>) strList26);
        java.io.FilenameFilter filenameFilter29 = org.apache.rat.Report.parseExclusions((java.util.List<java.lang.String>) strList26);
        java.io.FilenameFilter filenameFilter30 = org.apache.rat.Report.parseExclusions((java.util.List<java.lang.String>) strList26);
        reportConfiguration1.addApprovedLicenseCategories((java.util.Collection<java.lang.String>) strList26);
        org.apache.commons.io.function.IOSupplier<java.io.InputStream> inputStreamIOSupplier32 = reportConfiguration1.getStyleSheet();
        org.apache.rat.utils.Log log33 = null;
        org.apache.rat.ReportConfiguration reportConfiguration34 = new org.apache.rat.ReportConfiguration(log33);
        org.apache.rat.utils.ReportingSet.Options options35 = org.apache.rat.utils.ReportingSet.Options.OVERWRITE;
        reportConfiguration34.licenseDuplicateOption(options35);
        org.apache.rat.utils.Log log37 = null;
        org.apache.rat.ReportConfiguration reportConfiguration38 = new org.apache.rat.ReportConfiguration(log37);
        java.io.FilenameFilter filenameFilter39 = reportConfiguration38.getInputFileFilter();
        org.apache.rat.license.LicenseSetFactory.LicenseFilter licenseFilter40 = org.apache.rat.license.LicenseSetFactory.LicenseFilter.all;
        java.util.SortedSet<org.apache.rat.license.ILicense> iLicenseSet41 = reportConfiguration38.getLicenses(licenseFilter40);
        org.apache.rat.config.AddLicenseHeaders addLicenseHeaders42 = org.apache.rat.config.AddLicenseHeaders.FALSE;
        reportConfiguration38.setAddLicenseHeaders(addLicenseHeaders42);
        org.apache.rat.utils.Log log44 = null;
        org.apache.rat.ReportConfiguration reportConfiguration45 = new org.apache.rat.ReportConfiguration(log44);
        org.apache.rat.report.claim.ClaimStatistic claimStatistic46 = org.apache.rat.Reporter.report(reportConfiguration45);
        org.apache.rat.license.LicenseSetFactory.LicenseFilter licenseFilter47 = org.apache.rat.license.LicenseSetFactory.LicenseFilter.all;
        org.apache.rat.Reporter.listLicenses(reportConfiguration45, licenseFilter47);
        org.apache.rat.Reporter.listLicenses(reportConfiguration38, licenseFilter47);
        org.apache.rat.utils.Log log50 = null;
        org.apache.rat.ReportConfiguration reportConfiguration51 = new org.apache.rat.ReportConfiguration(log50);
        java.io.FilenameFilter filenameFilter52 = reportConfiguration51.getInputFileFilter();
        org.apache.rat.license.LicenseSetFactory.LicenseFilter licenseFilter53 = org.apache.rat.license.LicenseSetFactory.LicenseFilter.all;
        java.util.SortedSet<org.apache.rat.license.ILicense> iLicenseSet54 = reportConfiguration51.getLicenses(licenseFilter53);
        org.apache.rat.config.AddLicenseHeaders addLicenseHeaders55 = org.apache.rat.config.AddLicenseHeaders.FALSE;
        reportConfiguration51.setAddLicenseHeaders(addLicenseHeaders55);
        org.apache.rat.utils.Log log57 = null;
        org.apache.rat.ReportConfiguration reportConfiguration58 = new org.apache.rat.ReportConfiguration(log57);
        org.apache.rat.report.claim.ClaimStatistic claimStatistic59 = org.apache.rat.Reporter.report(reportConfiguration58);
        org.apache.rat.license.LicenseSetFactory.LicenseFilter licenseFilter60 = org.apache.rat.license.LicenseSetFactory.LicenseFilter.all;
        org.apache.rat.Reporter.listLicenses(reportConfiguration58, licenseFilter60);
        org.apache.rat.Reporter.listLicenses(reportConfiguration51, licenseFilter60);
        org.apache.rat.Reporter.listLicenses(reportConfiguration38, licenseFilter60);
        org.apache.rat.utils.Log log64 = null;
        org.apache.rat.ReportConfiguration reportConfiguration65 = new org.apache.rat.ReportConfiguration(log64);
        org.apache.commons.io.function.IOSupplier<java.io.OutputStream> outputStreamIOSupplier66 = reportConfiguration65.getOutput();
        reportConfiguration38.setOut(outputStreamIOSupplier66);
        org.apache.rat.utils.Log.Level level68 = org.apache.rat.utils.Log.Level.WARN;
        reportConfiguration38.logLicenseCollisions(level68);
        org.apache.commons.io.filefilter.IOFileFilter iOFileFilter70 = reportConfiguration38.getDirectoryFilter();
        reportConfiguration34.setInputFileFilter((java.io.FilenameFilter) iOFileFilter70);
        java.nio.file.Path path72 = null;
        boolean boolean73 = iOFileFilter70.matches(path72);
        org.apache.commons.io.filefilter.IOFileFilter iOFileFilter74 = iOFileFilter70.negate();
        java.nio.file.Path path75 = null;
        boolean boolean76 = iOFileFilter70.matches(path75);
        org.apache.commons.io.filefilter.IOFileFilter iOFileFilter77 = iOFileFilter70.negate();
        org.apache.rat.utils.Log log78 = null;
        org.apache.rat.ReportConfiguration reportConfiguration79 = new org.apache.rat.ReportConfiguration(log78);
        org.apache.rat.report.claim.ClaimStatistic claimStatistic80 = org.apache.rat.Reporter.report(reportConfiguration79);
        org.apache.rat.utils.Log log81 = null;
        org.apache.rat.ReportConfiguration reportConfiguration82 = new org.apache.rat.ReportConfiguration(log81);
        org.apache.rat.report.claim.ClaimStatistic claimStatistic83 = org.apache.rat.Reporter.report(reportConfiguration82);
        org.apache.rat.utils.ReportingSet.Options options84 = org.apache.rat.utils.ReportingSet.Options.OVERWRITE;
        reportConfiguration82.licenseDuplicateOption(options84);
        reportConfiguration79.familyDuplicateOption(options84);
        org.apache.commons.io.function.IOSupplier<java.io.PrintWriter> printWriterIOSupplier87 = reportConfiguration79.getWriter();
        boolean boolean88 = reportConfiguration79.isAddingLicensesForced();
        java.io.FilenameFilter filenameFilter89 = reportConfiguration79.getInputFileFilter();
        java.io.FilenameFilter filenameFilter90 = reportConfiguration79.getInputFileFilter();
        boolean boolean91 = reportConfiguration79.isStyleReport();
        org.apache.commons.io.function.IOSupplier<java.io.OutputStream> outputStreamIOSupplier92 = reportConfiguration79.getOutput();
        org.apache.commons.io.filefilter.IOFileFilter iOFileFilter93 = reportConfiguration79.getDirectoryFilter();
        org.apache.commons.io.filefilter.IOFileFilter iOFileFilter94 = reportConfiguration79.getDirectoryFilter();
        org.apache.commons.io.filefilter.IOFileFilter iOFileFilter95 = iOFileFilter70.and(iOFileFilter94);
        org.apache.commons.io.filefilter.IOFileFilter iOFileFilter96 = iOFileFilter94.negate();
        reportConfiguration1.addDirectoryFilter(iOFileFilter96);
        java.io.FilenameFilter filenameFilter98 = reportConfiguration1.getInputFileFilter();
        org.junit.Assert.assertNull(claimStatistic2);
        org.junit.Assert.assertNull(claimStatistic5);
        org.junit.Assert.assertTrue("'" + options6 + "' != '" + org.apache.rat.utils.ReportingSet.Options.OVERWRITE + "'", options6.equals(org.apache.rat.utils.ReportingSet.Options.OVERWRITE));
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + true + "'", boolean9 == true);
        org.junit.Assert.assertNotNull(iLicenseArray10);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertNotNull(strArray25);
        org.junit.Assert.assertTrue("'" + boolean27 + "' != '" + true + "'", boolean27 == true);
        org.junit.Assert.assertNotNull(filenameFilter29);
        org.junit.Assert.assertNotNull(filenameFilter30);
        org.junit.Assert.assertNull(inputStreamIOSupplier32);
        org.junit.Assert.assertTrue("'" + options35 + "' != '" + org.apache.rat.utils.ReportingSet.Options.OVERWRITE + "'", options35.equals(org.apache.rat.utils.ReportingSet.Options.OVERWRITE));
        org.junit.Assert.assertNull(filenameFilter39);
        org.junit.Assert.assertTrue("'" + licenseFilter40 + "' != '" + org.apache.rat.license.LicenseSetFactory.LicenseFilter.all + "'", licenseFilter40.equals(org.apache.rat.license.LicenseSetFactory.LicenseFilter.all));
        org.junit.Assert.assertNotNull(iLicenseSet41);
        org.junit.Assert.assertTrue("'" + addLicenseHeaders42 + "' != '" + org.apache.rat.config.AddLicenseHeaders.FALSE + "'", addLicenseHeaders42.equals(org.apache.rat.config.AddLicenseHeaders.FALSE));
        org.junit.Assert.assertNull(claimStatistic46);
        org.junit.Assert.assertTrue("'" + licenseFilter47 + "' != '" + org.apache.rat.license.LicenseSetFactory.LicenseFilter.all + "'", licenseFilter47.equals(org.apache.rat.license.LicenseSetFactory.LicenseFilter.all));
        org.junit.Assert.assertNull(filenameFilter52);
        org.junit.Assert.assertTrue("'" + licenseFilter53 + "' != '" + org.apache.rat.license.LicenseSetFactory.LicenseFilter.all + "'", licenseFilter53.equals(org.apache.rat.license.LicenseSetFactory.LicenseFilter.all));
        org.junit.Assert.assertNotNull(iLicenseSet54);
        org.junit.Assert.assertTrue("'" + addLicenseHeaders55 + "' != '" + org.apache.rat.config.AddLicenseHeaders.FALSE + "'", addLicenseHeaders55.equals(org.apache.rat.config.AddLicenseHeaders.FALSE));
        org.junit.Assert.assertNull(claimStatistic59);
        org.junit.Assert.assertTrue("'" + licenseFilter60 + "' != '" + org.apache.rat.license.LicenseSetFactory.LicenseFilter.all + "'", licenseFilter60.equals(org.apache.rat.license.LicenseSetFactory.LicenseFilter.all));
        org.junit.Assert.assertNotNull(outputStreamIOSupplier66);
        org.junit.Assert.assertTrue("'" + level68 + "' != '" + org.apache.rat.utils.Log.Level.WARN + "'", level68.equals(org.apache.rat.utils.Log.Level.WARN));
        org.junit.Assert.assertNotNull(iOFileFilter70);
        org.junit.Assert.assertTrue("'" + boolean73 + "' != '" + false + "'", boolean73 == false);
        org.junit.Assert.assertNotNull(iOFileFilter74);
        org.junit.Assert.assertTrue("'" + boolean76 + "' != '" + false + "'", boolean76 == false);
        org.junit.Assert.assertNotNull(iOFileFilter77);
        org.junit.Assert.assertNull(claimStatistic80);
        org.junit.Assert.assertNull(claimStatistic83);
        org.junit.Assert.assertTrue("'" + options84 + "' != '" + org.apache.rat.utils.ReportingSet.Options.OVERWRITE + "'", options84.equals(org.apache.rat.utils.ReportingSet.Options.OVERWRITE));
        org.junit.Assert.assertNotNull(printWriterIOSupplier87);
        org.junit.Assert.assertTrue("'" + boolean88 + "' != '" + false + "'", boolean88 == false);
        org.junit.Assert.assertNull(filenameFilter89);
        org.junit.Assert.assertNull(filenameFilter90);
        org.junit.Assert.assertTrue("'" + boolean91 + "' != '" + true + "'", boolean91 == true);
        org.junit.Assert.assertNotNull(outputStreamIOSupplier92);
        org.junit.Assert.assertNotNull(iOFileFilter93);
        org.junit.Assert.assertNotNull(iOFileFilter94);
        org.junit.Assert.assertNotNull(iOFileFilter95);
        org.junit.Assert.assertNotNull(iOFileFilter96);
        org.junit.Assert.assertNull(filenameFilter98);
    }

    @Test
    public void test13558() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest27.test13558");
        org.apache.rat.configuration.Format format0 = org.apache.rat.configuration.Format.XML;
        org.apache.rat.configuration.LicenseReader licenseReader1 = format0.licenseReader();
        org.apache.rat.configuration.MatcherReader matcherReader2 = format0.matcherReader();
        org.apache.rat.configuration.LicenseReader licenseReader3 = format0.licenseReader();
        org.apache.rat.configuration.LicenseReader licenseReader4 = format0.licenseReader();
        org.apache.rat.configuration.MatcherReader matcherReader5 = format0.matcherReader();
        org.apache.rat.configuration.MatcherReader matcherReader6 = format0.matcherReader();
        org.apache.rat.configuration.MatcherReader matcherReader7 = format0.matcherReader();
        org.apache.rat.configuration.MatcherReader matcherReader8 = format0.matcherReader();
        org.apache.rat.configuration.LicenseReader licenseReader9 = format0.licenseReader();
        org.apache.rat.configuration.LicenseReader licenseReader10 = format0.licenseReader();
        org.apache.rat.configuration.LicenseReader licenseReader11 = format0.licenseReader();
        org.apache.rat.configuration.MatcherReader matcherReader12 = format0.matcherReader();
        java.net.URL uRL13 = null;
        // The following exception was thrown during execution in test generation
        try {
            matcherReader12.addMatchers(uRL13);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + format0 + "' != '" + org.apache.rat.configuration.Format.XML + "'", format0.equals(org.apache.rat.configuration.Format.XML));
        org.junit.Assert.assertNotNull(licenseReader1);
        org.junit.Assert.assertNotNull(matcherReader2);
        org.junit.Assert.assertNotNull(licenseReader3);
        org.junit.Assert.assertNotNull(licenseReader4);
        org.junit.Assert.assertNotNull(matcherReader5);
        org.junit.Assert.assertNotNull(matcherReader6);
        org.junit.Assert.assertNotNull(matcherReader7);
        org.junit.Assert.assertNotNull(matcherReader8);
        org.junit.Assert.assertNotNull(licenseReader9);
        org.junit.Assert.assertNotNull(licenseReader10);
        org.junit.Assert.assertNotNull(licenseReader11);
        org.junit.Assert.assertNotNull(matcherReader12);
    }

    @Test
    public void test13559() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest27.test13559");
        org.apache.rat.utils.Log log0 = null;
        org.apache.rat.ReportConfiguration reportConfiguration1 = new org.apache.rat.ReportConfiguration(log0);
        java.io.FilenameFilter filenameFilter2 = reportConfiguration1.getInputFileFilter();
        org.apache.rat.license.LicenseSetFactory.LicenseFilter licenseFilter3 = org.apache.rat.license.LicenseSetFactory.LicenseFilter.all;
        java.util.SortedSet<org.apache.rat.license.ILicense> iLicenseSet4 = reportConfiguration1.getLicenses(licenseFilter3);
        org.apache.rat.config.AddLicenseHeaders addLicenseHeaders5 = org.apache.rat.config.AddLicenseHeaders.FALSE;
        reportConfiguration1.setAddLicenseHeaders(addLicenseHeaders5);
        org.apache.rat.utils.Log log7 = null;
        org.apache.rat.ReportConfiguration reportConfiguration8 = new org.apache.rat.ReportConfiguration(log7);
        org.apache.rat.report.claim.ClaimStatistic claimStatistic9 = org.apache.rat.Reporter.report(reportConfiguration8);
        org.apache.rat.license.LicenseSetFactory.LicenseFilter licenseFilter10 = org.apache.rat.license.LicenseSetFactory.LicenseFilter.all;
        org.apache.rat.Reporter.listLicenses(reportConfiguration8, licenseFilter10);
        org.apache.rat.Reporter.listLicenses(reportConfiguration1, licenseFilter10);
        org.apache.rat.utils.Log log13 = null;
        org.apache.rat.ReportConfiguration reportConfiguration14 = new org.apache.rat.ReportConfiguration(log13);
        java.io.FilenameFilter filenameFilter15 = reportConfiguration14.getInputFileFilter();
        org.apache.rat.license.LicenseSetFactory.LicenseFilter licenseFilter16 = org.apache.rat.license.LicenseSetFactory.LicenseFilter.all;
        java.util.SortedSet<org.apache.rat.license.ILicense> iLicenseSet17 = reportConfiguration14.getLicenses(licenseFilter16);
        org.apache.rat.config.AddLicenseHeaders addLicenseHeaders18 = org.apache.rat.config.AddLicenseHeaders.FALSE;
        reportConfiguration14.setAddLicenseHeaders(addLicenseHeaders18);
        org.apache.rat.utils.Log log20 = null;
        org.apache.rat.ReportConfiguration reportConfiguration21 = new org.apache.rat.ReportConfiguration(log20);
        org.apache.rat.report.claim.ClaimStatistic claimStatistic22 = org.apache.rat.Reporter.report(reportConfiguration21);
        org.apache.rat.license.LicenseSetFactory.LicenseFilter licenseFilter23 = org.apache.rat.license.LicenseSetFactory.LicenseFilter.all;
        org.apache.rat.Reporter.listLicenses(reportConfiguration21, licenseFilter23);
        org.apache.rat.Reporter.listLicenses(reportConfiguration14, licenseFilter23);
        org.apache.rat.Reporter.listLicenses(reportConfiguration1, licenseFilter23);
        java.io.FilenameFilter filenameFilter27 = reportConfiguration1.getInputFileFilter();
        org.apache.rat.utils.Log log28 = null;
        org.apache.rat.ReportConfiguration reportConfiguration29 = new org.apache.rat.ReportConfiguration(log28);
        java.io.FilenameFilter filenameFilter30 = reportConfiguration29.getInputFileFilter();
        org.apache.rat.license.LicenseSetFactory.LicenseFilter licenseFilter31 = org.apache.rat.license.LicenseSetFactory.LicenseFilter.all;
        java.util.SortedSet<org.apache.rat.license.ILicense> iLicenseSet32 = reportConfiguration29.getLicenses(licenseFilter31);
        org.apache.rat.config.AddLicenseHeaders addLicenseHeaders33 = org.apache.rat.config.AddLicenseHeaders.FALSE;
        reportConfiguration29.setAddLicenseHeaders(addLicenseHeaders33);
        org.apache.rat.utils.Log log35 = null;
        org.apache.rat.ReportConfiguration reportConfiguration36 = new org.apache.rat.ReportConfiguration(log35);
        org.apache.rat.report.claim.ClaimStatistic claimStatistic37 = org.apache.rat.Reporter.report(reportConfiguration36);
        org.apache.rat.license.LicenseSetFactory.LicenseFilter licenseFilter38 = org.apache.rat.license.LicenseSetFactory.LicenseFilter.all;
        org.apache.rat.Reporter.listLicenses(reportConfiguration36, licenseFilter38);
        org.apache.rat.Reporter.listLicenses(reportConfiguration29, licenseFilter38);
        org.apache.rat.utils.Log log41 = null;
        org.apache.rat.ReportConfiguration reportConfiguration42 = new org.apache.rat.ReportConfiguration(log41);
        java.io.FilenameFilter filenameFilter43 = reportConfiguration42.getInputFileFilter();
        org.apache.rat.license.LicenseSetFactory.LicenseFilter licenseFilter44 = org.apache.rat.license.LicenseSetFactory.LicenseFilter.all;
        java.util.SortedSet<org.apache.rat.license.ILicense> iLicenseSet45 = reportConfiguration42.getLicenses(licenseFilter44);
        org.apache.rat.config.AddLicenseHeaders addLicenseHeaders46 = org.apache.rat.config.AddLicenseHeaders.FALSE;
        reportConfiguration42.setAddLicenseHeaders(addLicenseHeaders46);
        org.apache.rat.utils.Log log48 = null;
        org.apache.rat.ReportConfiguration reportConfiguration49 = new org.apache.rat.ReportConfiguration(log48);
        org.apache.rat.report.claim.ClaimStatistic claimStatistic50 = org.apache.rat.Reporter.report(reportConfiguration49);
        org.apache.rat.license.LicenseSetFactory.LicenseFilter licenseFilter51 = org.apache.rat.license.LicenseSetFactory.LicenseFilter.all;
        org.apache.rat.Reporter.listLicenses(reportConfiguration49, licenseFilter51);
        org.apache.rat.Reporter.listLicenses(reportConfiguration42, licenseFilter51);
        org.apache.rat.Reporter.listLicenses(reportConfiguration29, licenseFilter51);
        java.util.SortedSet<org.apache.rat.license.ILicense> iLicenseSet55 = reportConfiguration1.getLicenses(licenseFilter51);
        boolean boolean56 = reportConfiguration1.isAddingLicensesForced();
        org.apache.rat.utils.Log log57 = null;
        org.apache.rat.ReportConfiguration reportConfiguration58 = new org.apache.rat.ReportConfiguration(log57);
        org.apache.rat.report.claim.ClaimStatistic claimStatistic59 = org.apache.rat.Reporter.report(reportConfiguration58);
        org.apache.rat.utils.Log log60 = null;
        org.apache.rat.ReportConfiguration reportConfiguration61 = new org.apache.rat.ReportConfiguration(log60);
        org.apache.rat.report.claim.ClaimStatistic claimStatistic62 = org.apache.rat.Reporter.report(reportConfiguration61);
        org.apache.rat.utils.ReportingSet.Options options63 = org.apache.rat.utils.ReportingSet.Options.OVERWRITE;
        reportConfiguration61.licenseDuplicateOption(options63);
        reportConfiguration58.familyDuplicateOption(options63);
        reportConfiguration1.familyDuplicateOption(options63);
        java.util.SortedSet<java.lang.String> strSet67 = reportConfiguration1.getApprovedLicenseCategories();
        java.lang.String[] strArray73 = new java.lang.String[] { "http://org/apache/rat/meta-data#LicenseFamilyCategory", "Datum [ name ='http://org/apache/rat/meta-data#LicenseFamilyCategory',value ='GPL1  ']", "MANIFEST.MF", "AllBuilder:", "The MIT License" };
        org.apache.rat.utils.ReportingSet<java.lang.String> strSet74 = new org.apache.rat.utils.ReportingSet<java.lang.String>();
        boolean boolean75 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strSet74, strArray73);
        boolean boolean77 = strSet74.addIfNotPresent("http://org/apache/rat/meta-data#LicenseFamilyName");
        boolean boolean79 = strSet74.addIfNotPresent("ef7a8b13-64c3-4510-bb0c-dbf208e1e73f");
        java.util.function.Function<java.lang.String, java.lang.String> strFunction80 = null;
        org.apache.rat.utils.ReportingSet<java.lang.String> strSet81 = strSet74.setMsgFormat(strFunction80);
        java.lang.String str82 = strSet74.last();
        reportConfiguration1.removeApprovedLicenseCategories((java.util.Collection<java.lang.String>) strSet74);
        boolean boolean85 = strSet74.addIfNotPresent("eba9cdef-527a-48ca-947b-897e2e06ea31");
        org.apache.rat.configuration.Format format86 = org.apache.rat.configuration.Format.XML;
        org.apache.rat.configuration.LicenseReader licenseReader87 = format86.licenseReader();
        org.apache.rat.configuration.MatcherReader matcherReader88 = format86.matcherReader();
        org.apache.rat.configuration.LicenseReader licenseReader89 = format86.licenseReader();
        org.apache.rat.configuration.LicenseReader licenseReader90 = format86.licenseReader();
        java.util.SortedSet<org.apache.rat.license.ILicenseFamily> iLicenseFamilySet91 = licenseReader90.readFamilies();
        java.util.SortedSet<org.apache.rat.license.ILicenseFamily> iLicenseFamilySet92 = licenseReader90.readFamilies();
        java.util.SortedSet<org.apache.rat.license.ILicenseFamily> iLicenseFamilySet93 = licenseReader90.readFamilies();
        java.util.SortedSet<org.apache.rat.license.ILicenseFamily> iLicenseFamilySet94 = licenseReader90.readFamilies();
        boolean boolean95 = strSet74.retainAll((java.util.Collection<org.apache.rat.license.ILicenseFamily>) iLicenseFamilySet94);
        org.junit.Assert.assertNull(filenameFilter2);
        org.junit.Assert.assertTrue("'" + licenseFilter3 + "' != '" + org.apache.rat.license.LicenseSetFactory.LicenseFilter.all + "'", licenseFilter3.equals(org.apache.rat.license.LicenseSetFactory.LicenseFilter.all));
        org.junit.Assert.assertNotNull(iLicenseSet4);
        org.junit.Assert.assertTrue("'" + addLicenseHeaders5 + "' != '" + org.apache.rat.config.AddLicenseHeaders.FALSE + "'", addLicenseHeaders5.equals(org.apache.rat.config.AddLicenseHeaders.FALSE));
        org.junit.Assert.assertNull(claimStatistic9);
        org.junit.Assert.assertTrue("'" + licenseFilter10 + "' != '" + org.apache.rat.license.LicenseSetFactory.LicenseFilter.all + "'", licenseFilter10.equals(org.apache.rat.license.LicenseSetFactory.LicenseFilter.all));
        org.junit.Assert.assertNull(filenameFilter15);
        org.junit.Assert.assertTrue("'" + licenseFilter16 + "' != '" + org.apache.rat.license.LicenseSetFactory.LicenseFilter.all + "'", licenseFilter16.equals(org.apache.rat.license.LicenseSetFactory.LicenseFilter.all));
        org.junit.Assert.assertNotNull(iLicenseSet17);
        org.junit.Assert.assertTrue("'" + addLicenseHeaders18 + "' != '" + org.apache.rat.config.AddLicenseHeaders.FALSE + "'", addLicenseHeaders18.equals(org.apache.rat.config.AddLicenseHeaders.FALSE));
        org.junit.Assert.assertNull(claimStatistic22);
        org.junit.Assert.assertTrue("'" + licenseFilter23 + "' != '" + org.apache.rat.license.LicenseSetFactory.LicenseFilter.all + "'", licenseFilter23.equals(org.apache.rat.license.LicenseSetFactory.LicenseFilter.all));
        org.junit.Assert.assertNull(filenameFilter27);
        org.junit.Assert.assertNull(filenameFilter30);
        org.junit.Assert.assertTrue("'" + licenseFilter31 + "' != '" + org.apache.rat.license.LicenseSetFactory.LicenseFilter.all + "'", licenseFilter31.equals(org.apache.rat.license.LicenseSetFactory.LicenseFilter.all));
        org.junit.Assert.assertNotNull(iLicenseSet32);
        org.junit.Assert.assertTrue("'" + addLicenseHeaders33 + "' != '" + org.apache.rat.config.AddLicenseHeaders.FALSE + "'", addLicenseHeaders33.equals(org.apache.rat.config.AddLicenseHeaders.FALSE));
        org.junit.Assert.assertNull(claimStatistic37);
        org.junit.Assert.assertTrue("'" + licenseFilter38 + "' != '" + org.apache.rat.license.LicenseSetFactory.LicenseFilter.all + "'", licenseFilter38.equals(org.apache.rat.license.LicenseSetFactory.LicenseFilter.all));
        org.junit.Assert.assertNull(filenameFilter43);
        org.junit.Assert.assertTrue("'" + licenseFilter44 + "' != '" + org.apache.rat.license.LicenseSetFactory.LicenseFilter.all + "'", licenseFilter44.equals(org.apache.rat.license.LicenseSetFactory.LicenseFilter.all));
        org.junit.Assert.assertNotNull(iLicenseSet45);
        org.junit.Assert.assertTrue("'" + addLicenseHeaders46 + "' != '" + org.apache.rat.config.AddLicenseHeaders.FALSE + "'", addLicenseHeaders46.equals(org.apache.rat.config.AddLicenseHeaders.FALSE));
        org.junit.Assert.assertNull(claimStatistic50);
        org.junit.Assert.assertTrue("'" + licenseFilter51 + "' != '" + org.apache.rat.license.LicenseSetFactory.LicenseFilter.all + "'", licenseFilter51.equals(org.apache.rat.license.LicenseSetFactory.LicenseFilter.all));
        org.junit.Assert.assertNotNull(iLicenseSet55);
        org.junit.Assert.assertTrue("'" + boolean56 + "' != '" + false + "'", boolean56 == false);
        org.junit.Assert.assertNull(claimStatistic59);
        org.junit.Assert.assertNull(claimStatistic62);
        org.junit.Assert.assertTrue("'" + options63 + "' != '" + org.apache.rat.utils.ReportingSet.Options.OVERWRITE + "'", options63.equals(org.apache.rat.utils.ReportingSet.Options.OVERWRITE));
        org.junit.Assert.assertNotNull(strSet67);
        org.junit.Assert.assertNotNull(strArray73);
        org.junit.Assert.assertTrue("'" + boolean75 + "' != '" + true + "'", boolean75 == true);
        org.junit.Assert.assertTrue("'" + boolean77 + "' != '" + true + "'", boolean77 == true);
        org.junit.Assert.assertTrue("'" + boolean79 + "' != '" + true + "'", boolean79 == true);
        org.junit.Assert.assertNotNull(strSet81);
        org.junit.Assert.assertEquals("'" + str82 + "' != '" + "http://org/apache/rat/meta-data#LicenseFamilyName" + "'", str82, "http://org/apache/rat/meta-data#LicenseFamilyName");
        org.junit.Assert.assertTrue("'" + boolean85 + "' != '" + true + "'", boolean85 == true);
        org.junit.Assert.assertTrue("'" + format86 + "' != '" + org.apache.rat.configuration.Format.XML + "'", format86.equals(org.apache.rat.configuration.Format.XML));
        org.junit.Assert.assertNotNull(licenseReader87);
        org.junit.Assert.assertNotNull(matcherReader88);
        org.junit.Assert.assertNotNull(licenseReader89);
        org.junit.Assert.assertNotNull(licenseReader90);
        org.junit.Assert.assertNotNull(iLicenseFamilySet91);
        org.junit.Assert.assertNotNull(iLicenseFamilySet92);
        org.junit.Assert.assertNotNull(iLicenseFamilySet93);
        org.junit.Assert.assertNotNull(iLicenseFamilySet94);
        org.junit.Assert.assertTrue("'" + boolean95 + "' != '" + true + "'", boolean95 == true);
    }

    @Test
    public void test13560() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest27.test13560");
        org.apache.rat.configuration.Format format0 = org.apache.rat.configuration.Format.TXT;
        org.apache.rat.configuration.LicenseReader licenseReader1 = format0.licenseReader();
        org.apache.rat.configuration.MatcherReader matcherReader2 = format0.matcherReader();
        org.apache.rat.configuration.LicenseReader licenseReader3 = format0.licenseReader();
        org.apache.rat.configuration.LicenseReader licenseReader4 = format0.licenseReader();
        org.apache.rat.configuration.MatcherReader matcherReader5 = format0.matcherReader();
        org.junit.Assert.assertTrue("'" + format0 + "' != '" + org.apache.rat.configuration.Format.TXT + "'", format0.equals(org.apache.rat.configuration.Format.TXT));
        org.junit.Assert.assertNull(licenseReader1);
        org.junit.Assert.assertNull(matcherReader2);
        org.junit.Assert.assertNull(licenseReader3);
        org.junit.Assert.assertNull(licenseReader4);
        org.junit.Assert.assertNull(matcherReader5);
    }

    @Test
    public void test13561() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest27.test13561");
        org.apache.rat.analysis.matchers.SimpleTextMatcher simpleTextMatcher2 = new org.apache.rat.analysis.matchers.SimpleTextMatcher("c4c4fff5-2656-471f-bd41-62e472c2ca7b", "7934b3ba-1073-4ff1-bfc3-c46ebe8a6c06");
        org.apache.rat.analysis.matchers.NotMatcher notMatcher3 = new org.apache.rat.analysis.matchers.NotMatcher((org.apache.rat.analysis.IHeaderMatcher) simpleTextMatcher2);
        org.apache.rat.analysis.IHeaderMatcher.State state5 = simpleTextMatcher2.matches("4332afa1-5b0a-4efc-9be6-c0dd49b836ab");
        org.junit.Assert.assertTrue("'" + state5 + "' != '" + org.apache.rat.analysis.IHeaderMatcher.State.i + "'", state5.equals(org.apache.rat.analysis.IHeaderMatcher.State.i));
    }

    @Test
    public void test13562() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest27.test13562");
        org.apache.rat.analysis.matchers.SimpleTextMatcher simpleTextMatcher2 = new org.apache.rat.analysis.matchers.SimpleTextMatcher("GPL1 ", "CDDL1");
        boolean boolean4 = simpleTextMatcher2.doMatch("0E4CF59D6E2347EB854E2C010E384F16");
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
    }

    @Test
    public void test13563() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest27.test13563");
        org.apache.rat.api.MetaData metaData0 = new org.apache.rat.api.MetaData();
        java.lang.String str2 = metaData0.value("COMMON DEVELOPMENT AND DISTRIBUTION LICENSE Version 1.0");
        java.lang.String str4 = metaData0.value("W3C Document Copyright");
        boolean boolean6 = metaData0.clear("hi!");
        java.lang.String str8 = metaData0.value("true");
        org.apache.rat.api.MetaData.Datum datum10 = metaData0.get("GNU General Public License, version 1");
        org.apache.rat.api.MetaData.Datum datum12 = metaData0.get("http:");
        org.apache.rat.api.MetaData.Datum datum13 = org.apache.rat.api.MetaData.RAT_APPROVED_LICENSE_DATIM_TRUE;
        metaData0.add(datum13);
        boolean boolean16 = metaData0.clear("");
        org.apache.rat.api.MetaData.Datum datum18 = metaData0.get("6fbe8280-d578-4ea3-a1a8-34d68e85abc2");
        boolean boolean20 = metaData0.clear("Copyright Builder: s:021187d7-27c2-4fd9-bc74-8cc00413ee52 e:null o:Datum [ name ='http://org/apache/rat/meta-data#LicenseFamilyName',value ='GNU General Public License, version 1 ']");
        org.junit.Assert.assertNull(str2);
        org.junit.Assert.assertNull(str4);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertNull(str8);
        org.junit.Assert.assertNull(datum10);
        org.junit.Assert.assertNull(datum12);
        org.junit.Assert.assertNotNull(datum13);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
        org.junit.Assert.assertNull(datum18);
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + false + "'", boolean20 == false);
    }

    @Test
    public void test13564() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest27.test13564");
        org.apache.rat.license.SimpleLicenseFamily simpleLicenseFamily0 = new org.apache.rat.license.SimpleLicenseFamily();
        java.lang.String str1 = simpleLicenseFamily0.getFamilyName();
        java.lang.String str2 = simpleLicenseFamily0.getFamilyCategory();
        java.lang.String str3 = simpleLicenseFamily0.getFamilyName();
        simpleLicenseFamily0.setFamilyName("W3C  ");
        java.lang.String str6 = simpleLicenseFamily0.getFamilyName();
        simpleLicenseFamily0.setFamilyName("TextBuilder: ae1d3f1b-6a63-45e7-a...");
        simpleLicenseFamily0.setFamilyCategory("RegexBuilder: SpdxBuilder: 7d01b1b3-e7b9-4f85-b3dd-e0334dea8844");
        org.junit.Assert.assertNull(str1);
        org.junit.Assert.assertNull(str2);
        org.junit.Assert.assertNull(str3);
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "W3C  " + "'", str6, "W3C  ");
    }

    @Test
    public void test13565() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest27.test13565");
        org.apache.rat.document.ToNameTransformer toNameTransformer0 = new org.apache.rat.document.ToNameTransformer();
        org.apache.rat.report.claim.ClaimStatistic claimStatistic1 = new org.apache.rat.report.claim.ClaimStatistic();
        claimStatistic1.setNumApproved((int) (short) 10);
        claimStatistic1.setNumUnknown(30);
        java.lang.Object obj6 = toNameTransformer0.transform((java.lang.Object) claimStatistic1);
        claimStatistic1.setNumGenerated((int) (short) 100);
        int int9 = claimStatistic1.getNumApproved();
        java.util.Map<java.lang.String, java.lang.Integer> strMap10 = claimStatistic1.getLicenseFileNameMap();
        java.util.Map<java.lang.String, java.lang.Integer> strMap11 = claimStatistic1.getLicenseFileCodeMap();
        claimStatistic1.setNumApproved(44);
        org.junit.Assert.assertNull(obj6);
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + 10 + "'", int9 == 10);
        org.junit.Assert.assertNull(strMap10);
        org.junit.Assert.assertNull(strMap11);
    }

    @Test
    public void test13566() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest27.test13566");
        org.apache.rat.Defaults.Builder builder0 = org.apache.rat.Defaults.builder();
        org.apache.rat.Defaults.Builder builder1 = builder0.noDefault();
        org.apache.rat.Defaults.Builder builder3 = builder1.remove("org/apache/rat/plain-rat.xsl");
        org.apache.rat.Defaults.Builder builder5 = builder1.remove("38e4211d-0f24-4ec0-aa5c-260c68412f39");
        org.apache.rat.Defaults.Builder builder7 = builder1.add("Copyright Builder: s:null e:.cvsignore o:null");
        // The following exception was thrown during execution in test generation
        try {
            org.apache.rat.Defaults defaults8 = builder1.build();
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: No such suffix: cvsignore%20o:null");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(builder0);
        org.junit.Assert.assertNotNull(builder1);
        org.junit.Assert.assertNotNull(builder3);
        org.junit.Assert.assertNotNull(builder5);
        org.junit.Assert.assertNotNull(builder7);
    }

    @Test
    public void test13567() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest27.test13567");
        org.apache.rat.utils.ReportingSet<java.lang.String> strSet0 = new org.apache.rat.utils.ReportingSet<java.lang.String>();
        org.apache.rat.utils.DefaultLog defaultLog1 = org.apache.rat.utils.DefaultLog.INSTANCE;
        org.apache.rat.utils.Log log2 = null;
        org.apache.rat.ReportConfiguration reportConfiguration3 = new org.apache.rat.ReportConfiguration(log2);
        java.io.FilenameFilter filenameFilter4 = reportConfiguration3.getInputFileFilter();
        org.apache.rat.license.LicenseSetFactory.LicenseFilter licenseFilter5 = org.apache.rat.license.LicenseSetFactory.LicenseFilter.all;
        java.util.SortedSet<org.apache.rat.license.ILicense> iLicenseSet6 = reportConfiguration3.getLicenses(licenseFilter5);
        org.apache.rat.config.AddLicenseHeaders addLicenseHeaders7 = org.apache.rat.config.AddLicenseHeaders.FALSE;
        reportConfiguration3.setAddLicenseHeaders(addLicenseHeaders7);
        org.apache.rat.utils.Log log9 = null;
        org.apache.rat.ReportConfiguration reportConfiguration10 = new org.apache.rat.ReportConfiguration(log9);
        org.apache.rat.report.claim.ClaimStatistic claimStatistic11 = org.apache.rat.Reporter.report(reportConfiguration10);
        org.apache.rat.license.LicenseSetFactory.LicenseFilter licenseFilter12 = org.apache.rat.license.LicenseSetFactory.LicenseFilter.all;
        org.apache.rat.Reporter.listLicenses(reportConfiguration10, licenseFilter12);
        org.apache.rat.Reporter.listLicenses(reportConfiguration3, licenseFilter12);
        org.apache.rat.utils.Log log15 = null;
        org.apache.rat.ReportConfiguration reportConfiguration16 = new org.apache.rat.ReportConfiguration(log15);
        java.io.FilenameFilter filenameFilter17 = reportConfiguration16.getInputFileFilter();
        org.apache.rat.license.LicenseSetFactory.LicenseFilter licenseFilter18 = org.apache.rat.license.LicenseSetFactory.LicenseFilter.all;
        java.util.SortedSet<org.apache.rat.license.ILicense> iLicenseSet19 = reportConfiguration16.getLicenses(licenseFilter18);
        org.apache.rat.config.AddLicenseHeaders addLicenseHeaders20 = org.apache.rat.config.AddLicenseHeaders.FALSE;
        reportConfiguration16.setAddLicenseHeaders(addLicenseHeaders20);
        org.apache.rat.utils.Log log22 = null;
        org.apache.rat.ReportConfiguration reportConfiguration23 = new org.apache.rat.ReportConfiguration(log22);
        org.apache.rat.report.claim.ClaimStatistic claimStatistic24 = org.apache.rat.Reporter.report(reportConfiguration23);
        org.apache.rat.license.LicenseSetFactory.LicenseFilter licenseFilter25 = org.apache.rat.license.LicenseSetFactory.LicenseFilter.all;
        org.apache.rat.Reporter.listLicenses(reportConfiguration23, licenseFilter25);
        org.apache.rat.Reporter.listLicenses(reportConfiguration16, licenseFilter25);
        org.apache.rat.Reporter.listLicenses(reportConfiguration3, licenseFilter25);
        org.apache.rat.utils.Log log29 = null;
        org.apache.rat.ReportConfiguration reportConfiguration30 = new org.apache.rat.ReportConfiguration(log29);
        org.apache.commons.io.function.IOSupplier<java.io.OutputStream> outputStreamIOSupplier31 = reportConfiguration30.getOutput();
        reportConfiguration3.setOut(outputStreamIOSupplier31);
        org.apache.rat.utils.Log log33 = null;
        org.apache.rat.ReportConfiguration reportConfiguration34 = new org.apache.rat.ReportConfiguration(log33);
        org.apache.rat.report.claim.ClaimStatistic claimStatistic35 = org.apache.rat.Reporter.report(reportConfiguration34);
        org.apache.rat.utils.Log log36 = null;
        org.apache.rat.ReportConfiguration reportConfiguration37 = new org.apache.rat.ReportConfiguration(log36);
        org.apache.rat.report.claim.ClaimStatistic claimStatistic38 = org.apache.rat.Reporter.report(reportConfiguration37);
        org.apache.rat.utils.ReportingSet.Options options39 = org.apache.rat.utils.ReportingSet.Options.OVERWRITE;
        reportConfiguration37.licenseDuplicateOption(options39);
        reportConfiguration34.familyDuplicateOption(options39);
        reportConfiguration3.licenseDuplicateOption(options39);
        reportConfiguration3.addApprovedLicenseCategory("W3C Document Copyright");
        org.apache.rat.utils.Log log45 = null;
        org.apache.rat.ReportConfiguration reportConfiguration46 = new org.apache.rat.ReportConfiguration(log45);
        reportConfiguration46.addApprovedLicenseCategory(".cvsignore");
        org.apache.rat.utils.Log.Level level49 = org.apache.rat.utils.Log.Level.ERROR;
        reportConfiguration46.logLicenseCollisions(level49);
        reportConfiguration3.logLicenseCollisions(level49);
        defaultLog1.setLevel(level49);
        org.apache.rat.utils.ReportingSet<java.lang.String> strSet53 = strSet0.setLog((org.apache.rat.utils.Log) defaultLog1);
        java.lang.String[] strArray59 = new java.lang.String[] { "http://org/apache/rat/meta-data#LicenseFamilyCategory", "Datum [ name ='http://org/apache/rat/meta-data#LicenseFamilyCategory',value ='GPL1  ']", "MANIFEST.MF", "AllBuilder:", "The MIT License" };
        org.apache.rat.utils.ReportingSet<java.lang.String> strSet60 = new org.apache.rat.utils.ReportingSet<java.lang.String>();
        boolean boolean61 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strSet60, strArray59);
        boolean boolean63 = strSet60.addIfNotPresent("http://org/apache/rat/meta-data#LicenseFamilyName");
        java.util.Iterator<java.lang.String> strItor64 = strSet60.iterator();
        java.lang.Object[] objArray65 = strSet60.toArray();
        java.lang.String[] strArray71 = new java.lang.String[] { "http://org/apache/rat/meta-data#LicenseFamilyCategory", "Datum [ name ='http://org/apache/rat/meta-data#LicenseFamilyCategory',value ='GPL1  ']", "MANIFEST.MF", "AllBuilder:", "The MIT License" };
        org.apache.rat.utils.ReportingSet<java.lang.String> strSet72 = new org.apache.rat.utils.ReportingSet<java.lang.String>();
        boolean boolean73 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strSet72, strArray71);
        boolean boolean75 = strSet72.addIfNotPresent("http://org/apache/rat/meta-data#LicenseFamilyName");
        java.util.SortedSet<org.apache.rat.license.ILicenseFamily> iLicenseFamilySet76 = org.apache.rat.license.LicenseFamilySetFactory.emptyLicenseFamilySet();
        boolean boolean77 = strSet72.removeAll((java.util.Collection<org.apache.rat.license.ILicenseFamily>) iLicenseFamilySet76);
        boolean boolean78 = strSet60.containsAll((java.util.Collection<org.apache.rat.license.ILicenseFamily>) iLicenseFamilySet76);
        boolean boolean79 = strSet0.containsAll((java.util.Collection<org.apache.rat.license.ILicenseFamily>) iLicenseFamilySet76);
        java.util.Collection<java.lang.String> strCollection80 = null;
        org.apache.rat.license.LicenseFamilySetFactory licenseFamilySetFactory81 = new org.apache.rat.license.LicenseFamilySetFactory(iLicenseFamilySet76, strCollection80);
        org.junit.Assert.assertNotNull(defaultLog1);
        org.junit.Assert.assertNull(filenameFilter4);
        org.junit.Assert.assertTrue("'" + licenseFilter5 + "' != '" + org.apache.rat.license.LicenseSetFactory.LicenseFilter.all + "'", licenseFilter5.equals(org.apache.rat.license.LicenseSetFactory.LicenseFilter.all));
        org.junit.Assert.assertNotNull(iLicenseSet6);
        org.junit.Assert.assertTrue("'" + addLicenseHeaders7 + "' != '" + org.apache.rat.config.AddLicenseHeaders.FALSE + "'", addLicenseHeaders7.equals(org.apache.rat.config.AddLicenseHeaders.FALSE));
        org.junit.Assert.assertNull(claimStatistic11);
        org.junit.Assert.assertTrue("'" + licenseFilter12 + "' != '" + org.apache.rat.license.LicenseSetFactory.LicenseFilter.all + "'", licenseFilter12.equals(org.apache.rat.license.LicenseSetFactory.LicenseFilter.all));
        org.junit.Assert.assertNull(filenameFilter17);
        org.junit.Assert.assertTrue("'" + licenseFilter18 + "' != '" + org.apache.rat.license.LicenseSetFactory.LicenseFilter.all + "'", licenseFilter18.equals(org.apache.rat.license.LicenseSetFactory.LicenseFilter.all));
        org.junit.Assert.assertNotNull(iLicenseSet19);
        org.junit.Assert.assertTrue("'" + addLicenseHeaders20 + "' != '" + org.apache.rat.config.AddLicenseHeaders.FALSE + "'", addLicenseHeaders20.equals(org.apache.rat.config.AddLicenseHeaders.FALSE));
        org.junit.Assert.assertNull(claimStatistic24);
        org.junit.Assert.assertTrue("'" + licenseFilter25 + "' != '" + org.apache.rat.license.LicenseSetFactory.LicenseFilter.all + "'", licenseFilter25.equals(org.apache.rat.license.LicenseSetFactory.LicenseFilter.all));
        org.junit.Assert.assertNotNull(outputStreamIOSupplier31);
        org.junit.Assert.assertNull(claimStatistic35);
        org.junit.Assert.assertNull(claimStatistic38);
        org.junit.Assert.assertTrue("'" + options39 + "' != '" + org.apache.rat.utils.ReportingSet.Options.OVERWRITE + "'", options39.equals(org.apache.rat.utils.ReportingSet.Options.OVERWRITE));
        org.junit.Assert.assertTrue("'" + level49 + "' != '" + org.apache.rat.utils.Log.Level.ERROR + "'", level49.equals(org.apache.rat.utils.Log.Level.ERROR));
        org.junit.Assert.assertNotNull(strSet53);
        org.junit.Assert.assertNotNull(strArray59);
        org.junit.Assert.assertTrue("'" + boolean61 + "' != '" + true + "'", boolean61 == true);
        org.junit.Assert.assertTrue("'" + boolean63 + "' != '" + true + "'", boolean63 == true);
        org.junit.Assert.assertNotNull(strItor64);
        org.junit.Assert.assertNotNull(objArray65);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray65), "[AllBuilder:, Datum [ name ='http://org/apache/rat/meta-data#LicenseFamilyCategory',value ='GPL1  '], MANIFEST.MF, The MIT License, http://org/apache/rat/meta-data#LicenseFamilyCategory, http://org/apache/rat/meta-data#LicenseFamilyName]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray65), "[AllBuilder:, Datum [ name ='http://org/apache/rat/meta-data#LicenseFamilyCategory',value ='GPL1  '], MANIFEST.MF, The MIT License, http://org/apache/rat/meta-data#LicenseFamilyCategory, http://org/apache/rat/meta-data#LicenseFamilyName]");
        org.junit.Assert.assertNotNull(strArray71);
        org.junit.Assert.assertTrue("'" + boolean73 + "' != '" + true + "'", boolean73 == true);
        org.junit.Assert.assertTrue("'" + boolean75 + "' != '" + true + "'", boolean75 == true);
        org.junit.Assert.assertNotNull(iLicenseFamilySet76);
        org.junit.Assert.assertTrue("'" + boolean77 + "' != '" + false + "'", boolean77 == false);
        org.junit.Assert.assertTrue("'" + boolean78 + "' != '" + true + "'", boolean78 == true);
        org.junit.Assert.assertTrue("'" + boolean79 + "' != '" + true + "'", boolean79 == true);
    }

    @Test
    public void test13568() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest27.test13568");
        org.apache.rat.configuration.builders.SpdxBuilder spdxBuilder0 = org.apache.rat.analysis.IHeaderMatcher.Builder.spdx();
        java.lang.String str1 = spdxBuilder0.toString();
        org.apache.rat.configuration.builders.SpdxBuilder spdxBuilder3 = spdxBuilder0.setName("ef7a8b13-64c3-4510-bb0c-dbf208e1e73f");
        org.apache.rat.analysis.IHeaderMatcher iHeaderMatcher4 = spdxBuilder0.build();
        org.apache.rat.configuration.builders.SpdxBuilder spdxBuilder6 = spdxBuilder0.setName("641dafc1-13c3-45d4-8272-f36f10392c53");
        org.apache.rat.analysis.IHeaderMatcher iHeaderMatcher7 = spdxBuilder6.build();
        org.apache.rat.configuration.builders.SpdxBuilder spdxBuilder9 = spdxBuilder6.setName("Datum [ name ='http://org/apache/rat/meta-data#LicenseFamilyName',value ='????? ']");
        java.lang.String str10 = spdxBuilder6.toString();
        org.apache.rat.configuration.builders.SpdxBuilder spdxBuilder12 = spdxBuilder6.setName("627a48a5-d45b-45fb-950a-d1c48cacf40a");
        org.junit.Assert.assertNotNull(spdxBuilder0);
        org.junit.Assert.assertEquals("'" + str1 + "' != '" + "SpdxBuilder: null" + "'", str1, "SpdxBuilder: null");
        org.junit.Assert.assertNotNull(spdxBuilder3);
        org.junit.Assert.assertNotNull(iHeaderMatcher4);
        org.junit.Assert.assertNotNull(spdxBuilder6);
        org.junit.Assert.assertNotNull(iHeaderMatcher7);
        org.junit.Assert.assertNotNull(spdxBuilder9);
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "SpdxBuilder: Datum [ name ='http://org/apache/rat/meta-data#LicenseFamilyName',value ='????? ']" + "'", str10, "SpdxBuilder: Datum [ name ='http://org/apache/rat/meta-data#LicenseFamilyName',value ='????? ']");
        org.junit.Assert.assertNotNull(spdxBuilder12);
    }

    @Test
    public void test13569() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest27.test13569");
        org.apache.rat.analysis.matchers.CopyrightMatcher copyrightMatcher4 = new org.apache.rat.analysis.matchers.CopyrightMatcher("1d9c9d9e-3274-4f05-8f26-218d38f9ae19", "9DF69CA9-2229-47B6-966B-221652FD7D08", "Copyright Builder: s:org/a e:standard o:W3C  ", "B5CB0999-B639-4E9C-AB9C-268137BC8846");
        org.apache.rat.analysis.IHeaderMatcher.State state6 = copyrightMatcher4.matches("W3C Software Copyright null");
        java.lang.String str7 = state6.toString();
        org.junit.Assert.assertTrue("'" + state6 + "' != '" + org.apache.rat.analysis.IHeaderMatcher.State.i + "'", state6.equals(org.apache.rat.analysis.IHeaderMatcher.State.i));
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "i indeterminent" + "'", str7, "i indeterminent");
    }

    @Test
    public void test13570() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest27.test13570");
        java.lang.String[] strArray5 = new java.lang.String[] { "http://org/apache/rat/meta-data#LicenseFamilyCategory", "Datum [ name ='http://org/apache/rat/meta-data#LicenseFamilyCategory',value ='GPL1  ']", "MANIFEST.MF", "AllBuilder:", "The MIT License" };
        org.apache.rat.utils.ReportingSet<java.lang.String> strSet6 = new org.apache.rat.utils.ReportingSet<java.lang.String>();
        boolean boolean7 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strSet6, strArray5);
        boolean boolean9 = strSet6.addIfNotPresent("http://org/apache/rat/meta-data#LicenseFamilyName");
        java.util.Iterator<java.lang.String> strItor10 = strSet6.iterator();
        java.lang.Object[] objArray11 = strSet6.toArray();
        org.apache.rat.utils.ReportingSet.Options options12 = null;
        org.apache.rat.utils.ReportingSet<java.lang.String> strSet13 = strSet6.setDuplicateOption(options12);
        boolean boolean15 = strSet13.add("bd015714-405b-4304-9faa-36efad80e6e6 GEN  ");
        org.apache.rat.utils.ReportingSet<java.lang.String> strSet17 = strSet13.headSet("b49bbf96-8d22-4667-8eed-1e7199c8356e");
        java.lang.String str18 = strSet13.last();
        org.apache.rat.utils.ReportingSet<java.lang.String> strSet20 = strSet13.tailSet("1f5aa559-4feb-4541-97db-90be35893a11");
        int int21 = strSet13.size();
        org.junit.Assert.assertNotNull(strArray5);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + true + "'", boolean7 == true);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + true + "'", boolean9 == true);
        org.junit.Assert.assertNotNull(strItor10);
        org.junit.Assert.assertNotNull(objArray11);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray11), "[AllBuilder:, Datum [ name ='http://org/apache/rat/meta-data#LicenseFamilyCategory',value ='GPL1  '], MANIFEST.MF, The MIT License, http://org/apache/rat/meta-data#LicenseFamilyCategory, http://org/apache/rat/meta-data#LicenseFamilyName]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray11), "[AllBuilder:, Datum [ name ='http://org/apache/rat/meta-data#LicenseFamilyCategory',value ='GPL1  '], MANIFEST.MF, The MIT License, http://org/apache/rat/meta-data#LicenseFamilyCategory, http://org/apache/rat/meta-data#LicenseFamilyName]");
        org.junit.Assert.assertNotNull(strSet13);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + true + "'", boolean15 == true);
        org.junit.Assert.assertNotNull(strSet17);
        org.junit.Assert.assertEquals("'" + str18 + "' != '" + "http://org/apache/rat/meta-data#LicenseFamilyName" + "'", str18, "http://org/apache/rat/meta-data#LicenseFamilyName");
        org.junit.Assert.assertNotNull(strSet20);
        org.junit.Assert.assertTrue("'" + int21 + "' != '" + 7 + "'", int21 == 7);
    }

    @Test
    public void test13571() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest27.test13571");
        org.apache.rat.api.MetaData.Datum datum0 = org.apache.rat.api.MetaData.RAT_LICENSE_FAMILY_NAME_DATUM_CDDL1;
        java.lang.String str1 = datum0.toString();
        org.junit.Assert.assertNotNull(datum0);
        org.junit.Assert.assertEquals("'" + str1 + "' != '" + "Datum [ name ='http://org/apache/rat/meta-data#LicenseFamilyName',value ='COMMON DEVELOPMENT AND DISTRIBUTION LICENSE Version 1.0 ']" + "'", str1, "Datum [ name ='http://org/apache/rat/meta-data#LicenseFamilyName',value ='COMMON DEVELOPMENT AND DISTRIBUTION LICENSE Version 1.0 ']");
    }

    @Test
    public void test13572() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest27.test13572");
        org.apache.rat.configuration.builders.SpdxBuilder spdxBuilder0 = org.apache.rat.analysis.IHeaderMatcher.Builder.spdx();
        java.lang.String str1 = spdxBuilder0.toString();
        org.apache.rat.configuration.builders.SpdxBuilder spdxBuilder3 = spdxBuilder0.setName("ef7a8b13-64c3-4510-bb0c-dbf208e1e73f");
        org.apache.rat.analysis.IHeaderMatcher iHeaderMatcher4 = spdxBuilder0.build();
        org.apache.rat.analysis.IHeaderMatcher iHeaderMatcher5 = spdxBuilder0.build();
        org.apache.rat.analysis.IHeaderMatcher iHeaderMatcher6 = spdxBuilder0.build();
        org.apache.rat.analysis.IHeaderMatcher iHeaderMatcher7 = spdxBuilder0.build();
        org.apache.rat.configuration.builders.SpdxBuilder spdxBuilder9 = spdxBuilder0.setName("7d01b1b3-e7b9-4f85-b3dd-e0334dea8844");
        org.apache.rat.configuration.builders.SpdxBuilder spdxBuilder11 = spdxBuilder0.setName("Datum [ name ='http://org/apache/rat/meta-data#ApprovedLicense',value ='false ']");
        org.apache.rat.configuration.builders.SpdxBuilder spdxBuilder13 = spdxBuilder0.setName("fe6be119881745678d33352365bfa7c8");
        org.apache.rat.configuration.builders.SpdxBuilder spdxBuilder15 = spdxBuilder0.setName("AllBuilder:\nCopyright Builder: s:.cvsignore e:.gitignore o:null");
        org.apache.rat.analysis.IHeaderMatcher iHeaderMatcher16 = spdxBuilder0.build();
        org.junit.Assert.assertNotNull(spdxBuilder0);
        org.junit.Assert.assertEquals("'" + str1 + "' != '" + "SpdxBuilder: null" + "'", str1, "SpdxBuilder: null");
        org.junit.Assert.assertNotNull(spdxBuilder3);
        org.junit.Assert.assertNotNull(iHeaderMatcher4);
        org.junit.Assert.assertNotNull(iHeaderMatcher5);
        org.junit.Assert.assertNotNull(iHeaderMatcher6);
        org.junit.Assert.assertNotNull(iHeaderMatcher7);
        org.junit.Assert.assertNotNull(spdxBuilder9);
        org.junit.Assert.assertNotNull(spdxBuilder11);
        org.junit.Assert.assertNotNull(spdxBuilder13);
        org.junit.Assert.assertNotNull(spdxBuilder15);
        org.junit.Assert.assertNotNull(iHeaderMatcher16);
    }

    @Test
    public void test13573() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest27.test13573");
        org.apache.rat.utils.Log log0 = null;
        org.apache.rat.ReportConfiguration reportConfiguration1 = new org.apache.rat.ReportConfiguration(log0);
        org.apache.rat.report.claim.ClaimStatistic claimStatistic2 = org.apache.rat.Reporter.report(reportConfiguration1);
        org.apache.rat.utils.Log log3 = null;
        org.apache.rat.ReportConfiguration reportConfiguration4 = new org.apache.rat.ReportConfiguration(log3);
        java.io.FilenameFilter filenameFilter5 = reportConfiguration4.getInputFileFilter();
        org.apache.rat.config.AddLicenseHeaders addLicenseHeaders6 = org.apache.rat.config.AddLicenseHeaders.TRUE;
        reportConfiguration4.setAddLicenseHeaders(addLicenseHeaders6);
        reportConfiguration1.setAddLicenseHeaders(addLicenseHeaders6);
        org.apache.rat.configuration.Format format10 = org.apache.rat.configuration.Format.XML;
        org.apache.rat.configuration.LicenseReader licenseReader11 = format10.licenseReader();
        org.apache.rat.configuration.MatcherReader matcherReader12 = format10.matcherReader();
        org.apache.rat.configuration.LicenseReader licenseReader13 = format10.licenseReader();
        java.util.SortedSet<org.apache.rat.license.ILicense> iLicenseSet14 = licenseReader13.readLicenses();
        org.apache.rat.license.ILicense iLicense15 = org.apache.rat.license.LicenseSetFactory.search("Datum [ name ='http://org/apache/rat/meta-data#LicenseFamilyCategory',value ='GPL1  ']", iLicenseSet14);
        org.apache.rat.utils.ReportingSet<org.apache.rat.license.ILicense> iLicenseSet16 = new org.apache.rat.utils.ReportingSet<org.apache.rat.license.ILicense>(iLicenseSet14);
        reportConfiguration1.addLicenses((java.util.Collection<org.apache.rat.license.ILicense>) iLicenseSet14);
        org.apache.rat.Defaults.Builder builder18 = org.apache.rat.Defaults.builder();
        org.apache.rat.Defaults defaults19 = builder18.build();
        org.apache.rat.license.ILicense[] iLicenseArray20 = new org.apache.rat.license.ILicense[] {};
        java.util.TreeSet<org.apache.rat.license.ILicense> iLicenseSet21 = new java.util.TreeSet<org.apache.rat.license.ILicense>();
        boolean boolean22 = java.util.Collections.addAll((java.util.Collection<org.apache.rat.license.ILicense>) iLicenseSet21, iLicenseArray20);
        java.lang.String[] strArray35 = new java.lang.String[] { "GPL2 ", "GPL1 ", "notice", "http://org/apache/rat/meta-data#LicenseFamilyName", "notice", "GPL2 ", "http://org/apache/rat/meta-data#LicenseFamilyName", "", "GPL2 ", "", "GPL1 ", "hi!" };
        java.util.ArrayList<java.lang.String> strList36 = new java.util.ArrayList<java.lang.String>();
        boolean boolean37 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strList36, strArray35);
        org.apache.rat.license.LicenseSetFactory licenseSetFactory38 = new org.apache.rat.license.LicenseSetFactory((java.util.SortedSet<org.apache.rat.license.ILicense>) iLicenseSet21, (java.util.Collection<java.lang.String>) strList36);
        org.apache.rat.utils.Log log39 = null;
        org.apache.rat.ReportConfiguration reportConfiguration40 = new org.apache.rat.ReportConfiguration(log39);
        java.io.FilenameFilter filenameFilter41 = reportConfiguration40.getInputFileFilter();
        org.apache.rat.license.LicenseSetFactory.LicenseFilter licenseFilter42 = org.apache.rat.license.LicenseSetFactory.LicenseFilter.all;
        java.util.SortedSet<org.apache.rat.license.ILicense> iLicenseSet43 = reportConfiguration40.getLicenses(licenseFilter42);
        org.apache.rat.config.AddLicenseHeaders addLicenseHeaders44 = org.apache.rat.config.AddLicenseHeaders.FALSE;
        reportConfiguration40.setAddLicenseHeaders(addLicenseHeaders44);
        org.apache.rat.utils.Log log46 = null;
        org.apache.rat.ReportConfiguration reportConfiguration47 = new org.apache.rat.ReportConfiguration(log46);
        org.apache.rat.report.claim.ClaimStatistic claimStatistic48 = org.apache.rat.Reporter.report(reportConfiguration47);
        org.apache.rat.license.LicenseSetFactory.LicenseFilter licenseFilter49 = org.apache.rat.license.LicenseSetFactory.LicenseFilter.all;
        org.apache.rat.Reporter.listLicenses(reportConfiguration47, licenseFilter49);
        org.apache.rat.Reporter.listLicenses(reportConfiguration40, licenseFilter49);
        org.apache.rat.utils.Log log52 = null;
        org.apache.rat.ReportConfiguration reportConfiguration53 = new org.apache.rat.ReportConfiguration(log52);
        java.io.FilenameFilter filenameFilter54 = reportConfiguration53.getInputFileFilter();
        org.apache.rat.license.LicenseSetFactory.LicenseFilter licenseFilter55 = org.apache.rat.license.LicenseSetFactory.LicenseFilter.all;
        java.util.SortedSet<org.apache.rat.license.ILicense> iLicenseSet56 = reportConfiguration53.getLicenses(licenseFilter55);
        org.apache.rat.config.AddLicenseHeaders addLicenseHeaders57 = org.apache.rat.config.AddLicenseHeaders.FALSE;
        reportConfiguration53.setAddLicenseHeaders(addLicenseHeaders57);
        org.apache.rat.utils.Log log59 = null;
        org.apache.rat.ReportConfiguration reportConfiguration60 = new org.apache.rat.ReportConfiguration(log59);
        org.apache.rat.report.claim.ClaimStatistic claimStatistic61 = org.apache.rat.Reporter.report(reportConfiguration60);
        org.apache.rat.license.LicenseSetFactory.LicenseFilter licenseFilter62 = org.apache.rat.license.LicenseSetFactory.LicenseFilter.all;
        org.apache.rat.Reporter.listLicenses(reportConfiguration60, licenseFilter62);
        org.apache.rat.Reporter.listLicenses(reportConfiguration53, licenseFilter62);
        org.apache.rat.Reporter.listLicenses(reportConfiguration40, licenseFilter62);
        java.util.SortedSet<org.apache.rat.license.ILicense> iLicenseSet66 = licenseSetFactory38.getLicenses(licenseFilter62);
        java.util.SortedSet<org.apache.rat.license.ILicenseFamily> iLicenseFamilySet67 = defaults19.getLicenseFamilies(licenseFilter62);
        org.apache.rat.license.LicenseSetFactory.LicenseFilter licenseFilter68 = org.apache.rat.license.LicenseSetFactory.LicenseFilter.approved;
        java.util.SortedSet<org.apache.rat.license.ILicenseFamily> iLicenseFamilySet69 = defaults19.getLicenseFamilies(licenseFilter68);
        java.util.SortedSet<org.apache.rat.license.ILicenseFamily> iLicenseFamilySet70 = reportConfiguration1.getLicenseFamilies(licenseFilter68);
        org.junit.Assert.assertNull(claimStatistic2);
        org.junit.Assert.assertNull(filenameFilter5);
        org.junit.Assert.assertTrue("'" + addLicenseHeaders6 + "' != '" + org.apache.rat.config.AddLicenseHeaders.TRUE + "'", addLicenseHeaders6.equals(org.apache.rat.config.AddLicenseHeaders.TRUE));
        org.junit.Assert.assertTrue("'" + format10 + "' != '" + org.apache.rat.configuration.Format.XML + "'", format10.equals(org.apache.rat.configuration.Format.XML));
        org.junit.Assert.assertNotNull(licenseReader11);
        org.junit.Assert.assertNotNull(matcherReader12);
        org.junit.Assert.assertNotNull(licenseReader13);
        org.junit.Assert.assertNotNull(iLicenseSet14);
        org.junit.Assert.assertNull(iLicense15);
        org.junit.Assert.assertNotNull(builder18);
        org.junit.Assert.assertNotNull(defaults19);
        org.junit.Assert.assertNotNull(iLicenseArray20);
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + false + "'", boolean22 == false);
        org.junit.Assert.assertNotNull(strArray35);
        org.junit.Assert.assertTrue("'" + boolean37 + "' != '" + true + "'", boolean37 == true);
        org.junit.Assert.assertNull(filenameFilter41);
        org.junit.Assert.assertTrue("'" + licenseFilter42 + "' != '" + org.apache.rat.license.LicenseSetFactory.LicenseFilter.all + "'", licenseFilter42.equals(org.apache.rat.license.LicenseSetFactory.LicenseFilter.all));
        org.junit.Assert.assertNotNull(iLicenseSet43);
        org.junit.Assert.assertTrue("'" + addLicenseHeaders44 + "' != '" + org.apache.rat.config.AddLicenseHeaders.FALSE + "'", addLicenseHeaders44.equals(org.apache.rat.config.AddLicenseHeaders.FALSE));
        org.junit.Assert.assertNull(claimStatistic48);
        org.junit.Assert.assertTrue("'" + licenseFilter49 + "' != '" + org.apache.rat.license.LicenseSetFactory.LicenseFilter.all + "'", licenseFilter49.equals(org.apache.rat.license.LicenseSetFactory.LicenseFilter.all));
        org.junit.Assert.assertNull(filenameFilter54);
        org.junit.Assert.assertTrue("'" + licenseFilter55 + "' != '" + org.apache.rat.license.LicenseSetFactory.LicenseFilter.all + "'", licenseFilter55.equals(org.apache.rat.license.LicenseSetFactory.LicenseFilter.all));
        org.junit.Assert.assertNotNull(iLicenseSet56);
        org.junit.Assert.assertTrue("'" + addLicenseHeaders57 + "' != '" + org.apache.rat.config.AddLicenseHeaders.FALSE + "'", addLicenseHeaders57.equals(org.apache.rat.config.AddLicenseHeaders.FALSE));
        org.junit.Assert.assertNull(claimStatistic61);
        org.junit.Assert.assertTrue("'" + licenseFilter62 + "' != '" + org.apache.rat.license.LicenseSetFactory.LicenseFilter.all + "'", licenseFilter62.equals(org.apache.rat.license.LicenseSetFactory.LicenseFilter.all));
        org.junit.Assert.assertNotNull(iLicenseSet66);
        org.junit.Assert.assertNotNull(iLicenseFamilySet67);
        org.junit.Assert.assertTrue("'" + licenseFilter68 + "' != '" + org.apache.rat.license.LicenseSetFactory.LicenseFilter.approved + "'", licenseFilter68.equals(org.apache.rat.license.LicenseSetFactory.LicenseFilter.approved));
        org.junit.Assert.assertNotNull(iLicenseFamilySet69);
        org.junit.Assert.assertNotNull(iLicenseFamilySet70);
    }

    @Test
    public void test13574() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest27.test13574");
        org.apache.rat.configuration.Format format0 = org.apache.rat.configuration.Format.XML;
        org.apache.rat.configuration.LicenseReader licenseReader1 = format0.licenseReader();
        java.util.SortedSet<org.apache.rat.license.ILicense> iLicenseSet2 = licenseReader1.readLicenses();
        java.lang.String[] strArray8 = new java.lang.String[] { "http://org/apache/rat/meta-data#LicenseFamilyCategory", "Datum [ name ='http://org/apache/rat/meta-data#LicenseFamilyCategory',value ='GPL1  ']", "MANIFEST.MF", "AllBuilder:", "The MIT License" };
        org.apache.rat.utils.ReportingSet<java.lang.String> strSet9 = new org.apache.rat.utils.ReportingSet<java.lang.String>();
        boolean boolean10 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strSet9, strArray8);
        boolean boolean12 = strSet9.addIfNotPresent("http://org/apache/rat/meta-data#LicenseFamilyName");
        boolean boolean14 = strSet9.addIfNotPresent("ef7a8b13-64c3-4510-bb0c-dbf208e1e73f");
        java.util.function.Function<java.lang.String, java.lang.String> strFunction15 = null;
        org.apache.rat.utils.ReportingSet<java.lang.String> strSet16 = strSet9.setMsgFormat(strFunction15);
        boolean boolean17 = strSet9.isEmpty();
        org.apache.rat.license.LicenseSetFactory licenseSetFactory18 = new org.apache.rat.license.LicenseSetFactory(iLicenseSet2, (java.util.Collection<java.lang.String>) strSet9);
        boolean boolean19 = strSet9.isEmpty();
        org.apache.rat.utils.ReportingSet<java.lang.String> strSet21 = strSet9.tailSet("MANIFEST.MF");
        strSet9.clear();
        java.util.Comparator<? super java.lang.String> wildcardComparator23 = strSet9.comparator();
        org.junit.Assert.assertTrue("'" + format0 + "' != '" + org.apache.rat.configuration.Format.XML + "'", format0.equals(org.apache.rat.configuration.Format.XML));
        org.junit.Assert.assertNotNull(licenseReader1);
        org.junit.Assert.assertNotNull(iLicenseSet2);
        org.junit.Assert.assertNotNull(strArray8);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + true + "'", boolean10 == true);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + true + "'", boolean12 == true);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + true + "'", boolean14 == true);
        org.junit.Assert.assertNotNull(strSet16);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + false + "'", boolean17 == false);
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + false + "'", boolean19 == false);
        org.junit.Assert.assertNotNull(strSet21);
        org.junit.Assert.assertNull(wildcardComparator23);
    }

    @Test
    public void test13575() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest27.test13575");
        boolean boolean1 = org.apache.rat.document.impl.guesser.BinaryGuesser.isImage("SpdxBuilder: Datum [ name ='http://org/apache/rat/meta-data#LicenseFamilyCategory',value ='MIT   ']");
        org.junit.Assert.assertTrue("'" + boolean1 + "' != '" + false + "'", boolean1 == false);
    }

    @Test
    public void test13576() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest27.test13576");
        boolean boolean1 = org.apache.rat.document.impl.guesser.BinaryGuesser.isExecutable("925a4f37-0b7f-4b7a-8780-84dc302488fc");
        org.junit.Assert.assertTrue("'" + boolean1 + "' != '" + false + "'", boolean1 == false);
    }

    @Test
    public void test13577() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest27.test13577");
        org.apache.rat.report.claim.ClaimStatistic claimStatistic0 = new org.apache.rat.report.claim.ClaimStatistic();
        claimStatistic0.setNumApproved((int) (short) 10);
        java.util.Map<java.lang.String, java.lang.Integer> strMap3 = null;
        claimStatistic0.setDocumentCategoryMap(strMap3);
        java.util.Map<java.lang.String, java.lang.Integer> strMap5 = claimStatistic0.getLicenseFileNameMap();
        java.util.Map<java.lang.String, java.lang.Integer> strMap6 = null;
        claimStatistic0.setDocumentCategoryMap(strMap6);
        java.util.Map<java.lang.String, java.lang.Integer> strMap8 = claimStatistic0.getLicenseFileCodeMap();
        java.util.Map<java.lang.String, java.lang.Integer> strMap9 = null;
        claimStatistic0.setLicenseFileNameMap(strMap9);
        org.junit.Assert.assertNull(strMap5);
        org.junit.Assert.assertNull(strMap8);
    }

    @Test
    public void test13578() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest27.test13578");
        org.apache.rat.header.HeaderBean headerBean0 = new org.apache.rat.header.HeaderBean();
        boolean boolean1 = headerBean0.isMatch();
        java.util.regex.Pattern pattern2 = null;
        headerBean0.setHeaderPattern(pattern2);
        boolean boolean4 = headerBean0.isMatch();
        java.util.regex.Pattern pattern5 = headerBean0.getHeaderPattern();
        java.util.regex.Pattern pattern6 = headerBean0.getHeaderPattern();
        headerBean0.setMatch(false);
        java.util.regex.Pattern pattern9 = headerBean0.getHeaderPattern();
        boolean boolean10 = headerBean0.isMatch();
        java.util.regex.Pattern pattern11 = headerBean0.getHeaderPattern();
        headerBean0.setMatch(false);
        java.util.regex.Pattern pattern14 = null;
        headerBean0.setHeaderPattern(pattern14);
        org.junit.Assert.assertTrue("'" + boolean1 + "' != '" + false + "'", boolean1 == false);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertNull(pattern5);
        org.junit.Assert.assertNull(pattern6);
        org.junit.Assert.assertNull(pattern9);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertNull(pattern11);
    }

    @Test
    public void test13579() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest27.test13579");
        org.apache.rat.utils.Log log0 = null;
        org.apache.rat.ReportConfiguration reportConfiguration1 = new org.apache.rat.ReportConfiguration(log0);
        org.apache.commons.io.function.IOSupplier<java.io.OutputStream> outputStreamIOSupplier2 = reportConfiguration1.getOutput();
        reportConfiguration1.setCopyrightMessage("MANIFEST.MF");
        org.apache.rat.utils.Log log5 = reportConfiguration1.getLog();
        org.apache.rat.utils.Log log6 = null;
        org.apache.rat.ReportConfiguration reportConfiguration7 = new org.apache.rat.ReportConfiguration(log6);
        org.apache.commons.io.function.IOSupplier<java.io.OutputStream> outputStreamIOSupplier8 = reportConfiguration7.getOutput();
        reportConfiguration7.removeApprovedLicenseCategory("EF7A8B13-64C3-4510-BB0C-DBF208E1E73F");
        java.util.SortedSet<java.lang.String> strSet11 = reportConfiguration7.getApprovedLicenseCategories();
        org.apache.rat.Defaults.Builder builder12 = org.apache.rat.Defaults.builder();
        org.apache.rat.Defaults defaults13 = builder12.build();
        org.apache.rat.utils.Log log14 = null;
        org.apache.rat.ReportConfiguration reportConfiguration15 = new org.apache.rat.ReportConfiguration(log14);
        java.io.FilenameFilter filenameFilter16 = reportConfiguration15.getInputFileFilter();
        org.apache.rat.license.LicenseSetFactory.LicenseFilter licenseFilter17 = org.apache.rat.license.LicenseSetFactory.LicenseFilter.all;
        java.util.SortedSet<org.apache.rat.license.ILicense> iLicenseSet18 = reportConfiguration15.getLicenses(licenseFilter17);
        org.apache.rat.config.AddLicenseHeaders addLicenseHeaders19 = org.apache.rat.config.AddLicenseHeaders.FALSE;
        reportConfiguration15.setAddLicenseHeaders(addLicenseHeaders19);
        org.apache.rat.utils.Log log21 = null;
        org.apache.rat.ReportConfiguration reportConfiguration22 = new org.apache.rat.ReportConfiguration(log21);
        org.apache.rat.report.claim.ClaimStatistic claimStatistic23 = org.apache.rat.Reporter.report(reportConfiguration22);
        org.apache.rat.license.LicenseSetFactory.LicenseFilter licenseFilter24 = org.apache.rat.license.LicenseSetFactory.LicenseFilter.all;
        org.apache.rat.Reporter.listLicenses(reportConfiguration22, licenseFilter24);
        org.apache.rat.Reporter.listLicenses(reportConfiguration15, licenseFilter24);
        org.apache.rat.utils.Log log27 = null;
        org.apache.rat.ReportConfiguration reportConfiguration28 = new org.apache.rat.ReportConfiguration(log27);
        java.io.FilenameFilter filenameFilter29 = reportConfiguration28.getInputFileFilter();
        org.apache.rat.license.LicenseSetFactory.LicenseFilter licenseFilter30 = org.apache.rat.license.LicenseSetFactory.LicenseFilter.all;
        java.util.SortedSet<org.apache.rat.license.ILicense> iLicenseSet31 = reportConfiguration28.getLicenses(licenseFilter30);
        org.apache.rat.config.AddLicenseHeaders addLicenseHeaders32 = org.apache.rat.config.AddLicenseHeaders.FALSE;
        reportConfiguration28.setAddLicenseHeaders(addLicenseHeaders32);
        org.apache.rat.utils.Log log34 = null;
        org.apache.rat.ReportConfiguration reportConfiguration35 = new org.apache.rat.ReportConfiguration(log34);
        org.apache.rat.report.claim.ClaimStatistic claimStatistic36 = org.apache.rat.Reporter.report(reportConfiguration35);
        org.apache.rat.license.LicenseSetFactory.LicenseFilter licenseFilter37 = org.apache.rat.license.LicenseSetFactory.LicenseFilter.all;
        org.apache.rat.Reporter.listLicenses(reportConfiguration35, licenseFilter37);
        org.apache.rat.Reporter.listLicenses(reportConfiguration28, licenseFilter37);
        java.util.SortedSet<org.apache.rat.license.ILicenseFamily> iLicenseFamilySet40 = reportConfiguration15.getLicenseFamilies(licenseFilter37);
        java.util.SortedSet<org.apache.rat.license.ILicense> iLicenseSet41 = defaults13.getLicenses(licenseFilter37);
        org.apache.rat.utils.Log log42 = null;
        org.apache.rat.ReportConfiguration reportConfiguration43 = new org.apache.rat.ReportConfiguration(log42);
        org.apache.commons.io.function.IOSupplier<java.io.OutputStream> outputStreamIOSupplier44 = reportConfiguration43.getOutput();
        reportConfiguration43.removeApprovedLicenseCategory("EF7A8B13-64C3-4510-BB0C-DBF208E1E73F");
        org.apache.rat.utils.Log log47 = null;
        org.apache.rat.ReportConfiguration reportConfiguration48 = new org.apache.rat.ReportConfiguration(log47);
        org.apache.rat.report.claim.ClaimStatistic claimStatistic49 = org.apache.rat.Reporter.report(reportConfiguration48);
        org.apache.rat.utils.Log log50 = null;
        org.apache.rat.ReportConfiguration reportConfiguration51 = new org.apache.rat.ReportConfiguration(log50);
        org.apache.rat.report.claim.ClaimStatistic claimStatistic52 = org.apache.rat.Reporter.report(reportConfiguration51);
        org.apache.rat.utils.ReportingSet.Options options53 = org.apache.rat.utils.ReportingSet.Options.OVERWRITE;
        reportConfiguration51.licenseDuplicateOption(options53);
        reportConfiguration48.familyDuplicateOption(options53);
        org.apache.commons.io.function.IOSupplier<java.io.PrintWriter> printWriterIOSupplier56 = reportConfiguration48.getWriter();
        org.apache.rat.report.IReportable iReportable57 = null;
        reportConfiguration48.setReportable(iReportable57);
        org.apache.rat.license.ILicenseFamily[] iLicenseFamilyArray59 = new org.apache.rat.license.ILicenseFamily[] {};
        java.util.ArrayList<org.apache.rat.license.ILicenseFamily> iLicenseFamilyList60 = new java.util.ArrayList<org.apache.rat.license.ILicenseFamily>();
        boolean boolean61 = java.util.Collections.addAll((java.util.Collection<org.apache.rat.license.ILicenseFamily>) iLicenseFamilyList60, iLicenseFamilyArray59);
        org.apache.rat.policy.DefaultPolicy defaultPolicy62 = new org.apache.rat.policy.DefaultPolicy((java.util.Collection<org.apache.rat.license.ILicenseFamily>) iLicenseFamilyList60);
        reportConfiguration48.addFamilies((java.util.Collection<org.apache.rat.license.ILicenseFamily>) iLicenseFamilyList60);
        org.apache.rat.utils.Log log64 = null;
        org.apache.rat.ReportConfiguration reportConfiguration65 = new org.apache.rat.ReportConfiguration(log64);
        java.io.FilenameFilter filenameFilter66 = reportConfiguration65.getInputFileFilter();
        org.apache.rat.license.LicenseSetFactory.LicenseFilter licenseFilter67 = org.apache.rat.license.LicenseSetFactory.LicenseFilter.all;
        java.util.SortedSet<org.apache.rat.license.ILicense> iLicenseSet68 = reportConfiguration65.getLicenses(licenseFilter67);
        org.apache.rat.config.AddLicenseHeaders addLicenseHeaders69 = org.apache.rat.config.AddLicenseHeaders.FALSE;
        reportConfiguration65.setAddLicenseHeaders(addLicenseHeaders69);
        org.apache.rat.utils.Log log71 = null;
        org.apache.rat.ReportConfiguration reportConfiguration72 = new org.apache.rat.ReportConfiguration(log71);
        org.apache.rat.report.claim.ClaimStatistic claimStatistic73 = org.apache.rat.Reporter.report(reportConfiguration72);
        org.apache.rat.license.LicenseSetFactory.LicenseFilter licenseFilter74 = org.apache.rat.license.LicenseSetFactory.LicenseFilter.all;
        org.apache.rat.Reporter.listLicenses(reportConfiguration72, licenseFilter74);
        org.apache.rat.Reporter.listLicenses(reportConfiguration65, licenseFilter74);
        org.apache.rat.utils.Log log77 = null;
        org.apache.rat.ReportConfiguration reportConfiguration78 = new org.apache.rat.ReportConfiguration(log77);
        java.io.FilenameFilter filenameFilter79 = reportConfiguration78.getInputFileFilter();
        org.apache.rat.license.LicenseSetFactory.LicenseFilter licenseFilter80 = org.apache.rat.license.LicenseSetFactory.LicenseFilter.all;
        java.util.SortedSet<org.apache.rat.license.ILicense> iLicenseSet81 = reportConfiguration78.getLicenses(licenseFilter80);
        org.apache.rat.config.AddLicenseHeaders addLicenseHeaders82 = org.apache.rat.config.AddLicenseHeaders.FALSE;
        reportConfiguration78.setAddLicenseHeaders(addLicenseHeaders82);
        org.apache.rat.utils.Log log84 = null;
        org.apache.rat.ReportConfiguration reportConfiguration85 = new org.apache.rat.ReportConfiguration(log84);
        org.apache.rat.report.claim.ClaimStatistic claimStatistic86 = org.apache.rat.Reporter.report(reportConfiguration85);
        org.apache.rat.license.LicenseSetFactory.LicenseFilter licenseFilter87 = org.apache.rat.license.LicenseSetFactory.LicenseFilter.all;
        org.apache.rat.Reporter.listLicenses(reportConfiguration85, licenseFilter87);
        org.apache.rat.Reporter.listLicenses(reportConfiguration78, licenseFilter87);
        java.util.SortedSet<org.apache.rat.license.ILicenseFamily> iLicenseFamilySet90 = reportConfiguration65.getLicenseFamilies(licenseFilter87);
        java.util.SortedSet<org.apache.rat.license.ILicense> iLicenseSet91 = reportConfiguration48.getLicenses(licenseFilter87);
        org.apache.rat.Reporter.listLicenseFamilies(reportConfiguration43, licenseFilter87);
        java.util.SortedSet<org.apache.rat.license.ILicense> iLicenseSet93 = defaults13.getLicenses(licenseFilter87);
        reportConfiguration7.setFrom(defaults13);
        reportConfiguration1.setFrom(defaults13);
        reportConfiguration1.removeApprovedLicenseCategory("");
        org.junit.Assert.assertNotNull(outputStreamIOSupplier2);
        org.junit.Assert.assertNull(log5);
        org.junit.Assert.assertNotNull(outputStreamIOSupplier8);
        org.junit.Assert.assertNotNull(strSet11);
        org.junit.Assert.assertNotNull(builder12);
        org.junit.Assert.assertNotNull(defaults13);
        org.junit.Assert.assertNull(filenameFilter16);
        org.junit.Assert.assertTrue("'" + licenseFilter17 + "' != '" + org.apache.rat.license.LicenseSetFactory.LicenseFilter.all + "'", licenseFilter17.equals(org.apache.rat.license.LicenseSetFactory.LicenseFilter.all));
        org.junit.Assert.assertNotNull(iLicenseSet18);
        org.junit.Assert.assertTrue("'" + addLicenseHeaders19 + "' != '" + org.apache.rat.config.AddLicenseHeaders.FALSE + "'", addLicenseHeaders19.equals(org.apache.rat.config.AddLicenseHeaders.FALSE));
        org.junit.Assert.assertNull(claimStatistic23);
        org.junit.Assert.assertTrue("'" + licenseFilter24 + "' != '" + org.apache.rat.license.LicenseSetFactory.LicenseFilter.all + "'", licenseFilter24.equals(org.apache.rat.license.LicenseSetFactory.LicenseFilter.all));
        org.junit.Assert.assertNull(filenameFilter29);
        org.junit.Assert.assertTrue("'" + licenseFilter30 + "' != '" + org.apache.rat.license.LicenseSetFactory.LicenseFilter.all + "'", licenseFilter30.equals(org.apache.rat.license.LicenseSetFactory.LicenseFilter.all));
        org.junit.Assert.assertNotNull(iLicenseSet31);
        org.junit.Assert.assertTrue("'" + addLicenseHeaders32 + "' != '" + org.apache.rat.config.AddLicenseHeaders.FALSE + "'", addLicenseHeaders32.equals(org.apache.rat.config.AddLicenseHeaders.FALSE));
        org.junit.Assert.assertNull(claimStatistic36);
        org.junit.Assert.assertTrue("'" + licenseFilter37 + "' != '" + org.apache.rat.license.LicenseSetFactory.LicenseFilter.all + "'", licenseFilter37.equals(org.apache.rat.license.LicenseSetFactory.LicenseFilter.all));
        org.junit.Assert.assertNotNull(iLicenseFamilySet40);
        org.junit.Assert.assertNotNull(iLicenseSet41);
        org.junit.Assert.assertNotNull(outputStreamIOSupplier44);
        org.junit.Assert.assertNull(claimStatistic49);
        org.junit.Assert.assertNull(claimStatistic52);
        org.junit.Assert.assertTrue("'" + options53 + "' != '" + org.apache.rat.utils.ReportingSet.Options.OVERWRITE + "'", options53.equals(org.apache.rat.utils.ReportingSet.Options.OVERWRITE));
        org.junit.Assert.assertNotNull(printWriterIOSupplier56);
        org.junit.Assert.assertNotNull(iLicenseFamilyArray59);
        org.junit.Assert.assertTrue("'" + boolean61 + "' != '" + false + "'", boolean61 == false);
        org.junit.Assert.assertNull(filenameFilter66);
        org.junit.Assert.assertTrue("'" + licenseFilter67 + "' != '" + org.apache.rat.license.LicenseSetFactory.LicenseFilter.all + "'", licenseFilter67.equals(org.apache.rat.license.LicenseSetFactory.LicenseFilter.all));
        org.junit.Assert.assertNotNull(iLicenseSet68);
        org.junit.Assert.assertTrue("'" + addLicenseHeaders69 + "' != '" + org.apache.rat.config.AddLicenseHeaders.FALSE + "'", addLicenseHeaders69.equals(org.apache.rat.config.AddLicenseHeaders.FALSE));
        org.junit.Assert.assertNull(claimStatistic73);
        org.junit.Assert.assertTrue("'" + licenseFilter74 + "' != '" + org.apache.rat.license.LicenseSetFactory.LicenseFilter.all + "'", licenseFilter74.equals(org.apache.rat.license.LicenseSetFactory.LicenseFilter.all));
        org.junit.Assert.assertNull(filenameFilter79);
        org.junit.Assert.assertTrue("'" + licenseFilter80 + "' != '" + org.apache.rat.license.LicenseSetFactory.LicenseFilter.all + "'", licenseFilter80.equals(org.apache.rat.license.LicenseSetFactory.LicenseFilter.all));
        org.junit.Assert.assertNotNull(iLicenseSet81);
        org.junit.Assert.assertTrue("'" + addLicenseHeaders82 + "' != '" + org.apache.rat.config.AddLicenseHeaders.FALSE + "'", addLicenseHeaders82.equals(org.apache.rat.config.AddLicenseHeaders.FALSE));
        org.junit.Assert.assertNull(claimStatistic86);
        org.junit.Assert.assertTrue("'" + licenseFilter87 + "' != '" + org.apache.rat.license.LicenseSetFactory.LicenseFilter.all + "'", licenseFilter87.equals(org.apache.rat.license.LicenseSetFactory.LicenseFilter.all));
        org.junit.Assert.assertNotNull(iLicenseFamilySet90);
        org.junit.Assert.assertNotNull(iLicenseSet91);
        org.junit.Assert.assertNotNull(iLicenseSet93);
    }

    @Test
    public void test13580() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest27.test13580");
        java.io.File file0 = null;
        org.apache.rat.utils.Log log1 = null;
        org.apache.rat.ReportConfiguration reportConfiguration2 = new org.apache.rat.ReportConfiguration(log1);
        java.io.FilenameFilter filenameFilter3 = reportConfiguration2.getInputFileFilter();
        org.apache.rat.license.LicenseSetFactory.LicenseFilter licenseFilter4 = org.apache.rat.license.LicenseSetFactory.LicenseFilter.all;
        java.util.SortedSet<org.apache.rat.license.ILicense> iLicenseSet5 = reportConfiguration2.getLicenses(licenseFilter4);
        org.apache.rat.config.AddLicenseHeaders addLicenseHeaders6 = org.apache.rat.config.AddLicenseHeaders.FALSE;
        reportConfiguration2.setAddLicenseHeaders(addLicenseHeaders6);
        org.apache.rat.utils.Log log8 = null;
        org.apache.rat.ReportConfiguration reportConfiguration9 = new org.apache.rat.ReportConfiguration(log8);
        org.apache.rat.report.claim.ClaimStatistic claimStatistic10 = org.apache.rat.Reporter.report(reportConfiguration9);
        org.apache.rat.license.LicenseSetFactory.LicenseFilter licenseFilter11 = org.apache.rat.license.LicenseSetFactory.LicenseFilter.all;
        org.apache.rat.Reporter.listLicenses(reportConfiguration9, licenseFilter11);
        org.apache.rat.Reporter.listLicenses(reportConfiguration2, licenseFilter11);
        org.apache.rat.utils.Log log14 = null;
        org.apache.rat.ReportConfiguration reportConfiguration15 = new org.apache.rat.ReportConfiguration(log14);
        java.io.FilenameFilter filenameFilter16 = reportConfiguration15.getInputFileFilter();
        org.apache.rat.license.LicenseSetFactory.LicenseFilter licenseFilter17 = org.apache.rat.license.LicenseSetFactory.LicenseFilter.all;
        java.util.SortedSet<org.apache.rat.license.ILicense> iLicenseSet18 = reportConfiguration15.getLicenses(licenseFilter17);
        org.apache.rat.config.AddLicenseHeaders addLicenseHeaders19 = org.apache.rat.config.AddLicenseHeaders.FALSE;
        reportConfiguration15.setAddLicenseHeaders(addLicenseHeaders19);
        org.apache.rat.utils.Log log21 = null;
        org.apache.rat.ReportConfiguration reportConfiguration22 = new org.apache.rat.ReportConfiguration(log21);
        org.apache.rat.report.claim.ClaimStatistic claimStatistic23 = org.apache.rat.Reporter.report(reportConfiguration22);
        org.apache.rat.license.LicenseSetFactory.LicenseFilter licenseFilter24 = org.apache.rat.license.LicenseSetFactory.LicenseFilter.all;
        org.apache.rat.Reporter.listLicenses(reportConfiguration22, licenseFilter24);
        org.apache.rat.Reporter.listLicenses(reportConfiguration15, licenseFilter24);
        org.apache.rat.Reporter.listLicenses(reportConfiguration2, licenseFilter24);
        org.apache.rat.utils.Log log28 = null;
        org.apache.rat.ReportConfiguration reportConfiguration29 = new org.apache.rat.ReportConfiguration(log28);
        org.apache.commons.io.function.IOSupplier<java.io.OutputStream> outputStreamIOSupplier30 = reportConfiguration29.getOutput();
        reportConfiguration2.setOut(outputStreamIOSupplier30);
        org.apache.rat.utils.Log.Level level32 = org.apache.rat.utils.Log.Level.WARN;
        reportConfiguration2.logLicenseCollisions(level32);
        reportConfiguration2.setStyleReport(false);
        org.apache.rat.utils.Log log36 = null;
        org.apache.rat.ReportConfiguration reportConfiguration37 = new org.apache.rat.ReportConfiguration(log36);
        org.apache.rat.report.claim.ClaimStatistic claimStatistic38 = org.apache.rat.Reporter.report(reportConfiguration37);
        org.apache.rat.utils.Log log39 = null;
        org.apache.rat.ReportConfiguration reportConfiguration40 = new org.apache.rat.ReportConfiguration(log39);
        org.apache.rat.report.claim.ClaimStatistic claimStatistic41 = org.apache.rat.Reporter.report(reportConfiguration40);
        org.apache.rat.utils.ReportingSet.Options options42 = org.apache.rat.utils.ReportingSet.Options.OVERWRITE;
        reportConfiguration40.licenseDuplicateOption(options42);
        reportConfiguration37.familyDuplicateOption(options42);
        org.apache.commons.io.function.IOSupplier<java.io.PrintWriter> printWriterIOSupplier45 = reportConfiguration37.getWriter();
        boolean boolean46 = reportConfiguration37.isAddingLicensesForced();
        java.io.FilenameFilter filenameFilter47 = reportConfiguration37.getInputFileFilter();
        org.apache.rat.utils.Log log48 = null;
        org.apache.rat.ReportConfiguration reportConfiguration49 = new org.apache.rat.ReportConfiguration(log48);
        org.apache.rat.utils.ReportingSet.Options options50 = org.apache.rat.utils.ReportingSet.Options.OVERWRITE;
        reportConfiguration49.licenseDuplicateOption(options50);
        org.apache.rat.utils.Log log52 = null;
        org.apache.rat.ReportConfiguration reportConfiguration53 = new org.apache.rat.ReportConfiguration(log52);
        java.io.FilenameFilter filenameFilter54 = reportConfiguration53.getInputFileFilter();
        org.apache.rat.license.LicenseSetFactory.LicenseFilter licenseFilter55 = org.apache.rat.license.LicenseSetFactory.LicenseFilter.all;
        java.util.SortedSet<org.apache.rat.license.ILicense> iLicenseSet56 = reportConfiguration53.getLicenses(licenseFilter55);
        org.apache.rat.config.AddLicenseHeaders addLicenseHeaders57 = org.apache.rat.config.AddLicenseHeaders.FALSE;
        reportConfiguration53.setAddLicenseHeaders(addLicenseHeaders57);
        org.apache.rat.utils.Log log59 = null;
        org.apache.rat.ReportConfiguration reportConfiguration60 = new org.apache.rat.ReportConfiguration(log59);
        org.apache.rat.report.claim.ClaimStatistic claimStatistic61 = org.apache.rat.Reporter.report(reportConfiguration60);
        org.apache.rat.license.LicenseSetFactory.LicenseFilter licenseFilter62 = org.apache.rat.license.LicenseSetFactory.LicenseFilter.all;
        org.apache.rat.Reporter.listLicenses(reportConfiguration60, licenseFilter62);
        org.apache.rat.Reporter.listLicenses(reportConfiguration53, licenseFilter62);
        org.apache.rat.utils.Log log65 = null;
        org.apache.rat.ReportConfiguration reportConfiguration66 = new org.apache.rat.ReportConfiguration(log65);
        java.io.FilenameFilter filenameFilter67 = reportConfiguration66.getInputFileFilter();
        org.apache.rat.license.LicenseSetFactory.LicenseFilter licenseFilter68 = org.apache.rat.license.LicenseSetFactory.LicenseFilter.all;
        java.util.SortedSet<org.apache.rat.license.ILicense> iLicenseSet69 = reportConfiguration66.getLicenses(licenseFilter68);
        org.apache.rat.config.AddLicenseHeaders addLicenseHeaders70 = org.apache.rat.config.AddLicenseHeaders.FALSE;
        reportConfiguration66.setAddLicenseHeaders(addLicenseHeaders70);
        org.apache.rat.utils.Log log72 = null;
        org.apache.rat.ReportConfiguration reportConfiguration73 = new org.apache.rat.ReportConfiguration(log72);
        org.apache.rat.report.claim.ClaimStatistic claimStatistic74 = org.apache.rat.Reporter.report(reportConfiguration73);
        org.apache.rat.license.LicenseSetFactory.LicenseFilter licenseFilter75 = org.apache.rat.license.LicenseSetFactory.LicenseFilter.all;
        org.apache.rat.Reporter.listLicenses(reportConfiguration73, licenseFilter75);
        org.apache.rat.Reporter.listLicenses(reportConfiguration66, licenseFilter75);
        org.apache.rat.Reporter.listLicenses(reportConfiguration53, licenseFilter75);
        org.apache.rat.utils.Log log79 = null;
        org.apache.rat.ReportConfiguration reportConfiguration80 = new org.apache.rat.ReportConfiguration(log79);
        org.apache.commons.io.function.IOSupplier<java.io.OutputStream> outputStreamIOSupplier81 = reportConfiguration80.getOutput();
        reportConfiguration53.setOut(outputStreamIOSupplier81);
        org.apache.rat.utils.Log.Level level83 = org.apache.rat.utils.Log.Level.WARN;
        reportConfiguration53.logLicenseCollisions(level83);
        org.apache.commons.io.filefilter.IOFileFilter iOFileFilter85 = reportConfiguration53.getDirectoryFilter();
        reportConfiguration49.setInputFileFilter((java.io.FilenameFilter) iOFileFilter85);
        reportConfiguration37.setInputFileFilter((java.io.FilenameFilter) iOFileFilter85);
        org.apache.commons.io.filefilter.IOFileFilter iOFileFilter88 = reportConfiguration37.getDirectoryFilter();
        reportConfiguration2.setDirectoryFilter(iOFileFilter88);
        // The following exception was thrown during execution in test generation
        try {
            org.apache.rat.walker.DirectoryWalker directoryWalker90 = new org.apache.rat.walker.DirectoryWalker(file0, iOFileFilter88);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNull(filenameFilter3);
        org.junit.Assert.assertTrue("'" + licenseFilter4 + "' != '" + org.apache.rat.license.LicenseSetFactory.LicenseFilter.all + "'", licenseFilter4.equals(org.apache.rat.license.LicenseSetFactory.LicenseFilter.all));
        org.junit.Assert.assertNotNull(iLicenseSet5);
        org.junit.Assert.assertTrue("'" + addLicenseHeaders6 + "' != '" + org.apache.rat.config.AddLicenseHeaders.FALSE + "'", addLicenseHeaders6.equals(org.apache.rat.config.AddLicenseHeaders.FALSE));
        org.junit.Assert.assertNull(claimStatistic10);
        org.junit.Assert.assertTrue("'" + licenseFilter11 + "' != '" + org.apache.rat.license.LicenseSetFactory.LicenseFilter.all + "'", licenseFilter11.equals(org.apache.rat.license.LicenseSetFactory.LicenseFilter.all));
        org.junit.Assert.assertNull(filenameFilter16);
        org.junit.Assert.assertTrue("'" + licenseFilter17 + "' != '" + org.apache.rat.license.LicenseSetFactory.LicenseFilter.all + "'", licenseFilter17.equals(org.apache.rat.license.LicenseSetFactory.LicenseFilter.all));
        org.junit.Assert.assertNotNull(iLicenseSet18);
        org.junit.Assert.assertTrue("'" + addLicenseHeaders19 + "' != '" + org.apache.rat.config.AddLicenseHeaders.FALSE + "'", addLicenseHeaders19.equals(org.apache.rat.config.AddLicenseHeaders.FALSE));
        org.junit.Assert.assertNull(claimStatistic23);
        org.junit.Assert.assertTrue("'" + licenseFilter24 + "' != '" + org.apache.rat.license.LicenseSetFactory.LicenseFilter.all + "'", licenseFilter24.equals(org.apache.rat.license.LicenseSetFactory.LicenseFilter.all));
        org.junit.Assert.assertNotNull(outputStreamIOSupplier30);
        org.junit.Assert.assertTrue("'" + level32 + "' != '" + org.apache.rat.utils.Log.Level.WARN + "'", level32.equals(org.apache.rat.utils.Log.Level.WARN));
        org.junit.Assert.assertNull(claimStatistic38);
        org.junit.Assert.assertNull(claimStatistic41);
        org.junit.Assert.assertTrue("'" + options42 + "' != '" + org.apache.rat.utils.ReportingSet.Options.OVERWRITE + "'", options42.equals(org.apache.rat.utils.ReportingSet.Options.OVERWRITE));
        org.junit.Assert.assertNotNull(printWriterIOSupplier45);
        org.junit.Assert.assertTrue("'" + boolean46 + "' != '" + false + "'", boolean46 == false);
        org.junit.Assert.assertNull(filenameFilter47);
        org.junit.Assert.assertTrue("'" + options50 + "' != '" + org.apache.rat.utils.ReportingSet.Options.OVERWRITE + "'", options50.equals(org.apache.rat.utils.ReportingSet.Options.OVERWRITE));
        org.junit.Assert.assertNull(filenameFilter54);
        org.junit.Assert.assertTrue("'" + licenseFilter55 + "' != '" + org.apache.rat.license.LicenseSetFactory.LicenseFilter.all + "'", licenseFilter55.equals(org.apache.rat.license.LicenseSetFactory.LicenseFilter.all));
        org.junit.Assert.assertNotNull(iLicenseSet56);
        org.junit.Assert.assertTrue("'" + addLicenseHeaders57 + "' != '" + org.apache.rat.config.AddLicenseHeaders.FALSE + "'", addLicenseHeaders57.equals(org.apache.rat.config.AddLicenseHeaders.FALSE));
        org.junit.Assert.assertNull(claimStatistic61);
        org.junit.Assert.assertTrue("'" + licenseFilter62 + "' != '" + org.apache.rat.license.LicenseSetFactory.LicenseFilter.all + "'", licenseFilter62.equals(org.apache.rat.license.LicenseSetFactory.LicenseFilter.all));
        org.junit.Assert.assertNull(filenameFilter67);
        org.junit.Assert.assertTrue("'" + licenseFilter68 + "' != '" + org.apache.rat.license.LicenseSetFactory.LicenseFilter.all + "'", licenseFilter68.equals(org.apache.rat.license.LicenseSetFactory.LicenseFilter.all));
        org.junit.Assert.assertNotNull(iLicenseSet69);
        org.junit.Assert.assertTrue("'" + addLicenseHeaders70 + "' != '" + org.apache.rat.config.AddLicenseHeaders.FALSE + "'", addLicenseHeaders70.equals(org.apache.rat.config.AddLicenseHeaders.FALSE));
        org.junit.Assert.assertNull(claimStatistic74);
        org.junit.Assert.assertTrue("'" + licenseFilter75 + "' != '" + org.apache.rat.license.LicenseSetFactory.LicenseFilter.all + "'", licenseFilter75.equals(org.apache.rat.license.LicenseSetFactory.LicenseFilter.all));
        org.junit.Assert.assertNotNull(outputStreamIOSupplier81);
        org.junit.Assert.assertTrue("'" + level83 + "' != '" + org.apache.rat.utils.Log.Level.WARN + "'", level83.equals(org.apache.rat.utils.Log.Level.WARN));
        org.junit.Assert.assertNotNull(iOFileFilter85);
        org.junit.Assert.assertNotNull(iOFileFilter88);
    }

    @Test
    public void test13581() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest27.test13581");
        org.apache.rat.configuration.builders.NotBuilder notBuilder0 = new org.apache.rat.configuration.builders.NotBuilder();
        java.lang.String str1 = notBuilder0.toString();
        org.apache.rat.configuration.builders.MatcherRefBuilder matcherRefBuilder2 = org.apache.rat.analysis.IHeaderMatcher.Builder.matcherRef();
        boolean boolean3 = matcherRefBuilder2.hasId();
        java.util.Map<java.lang.String, org.apache.rat.analysis.IHeaderMatcher> strMap4 = null;
        org.apache.rat.configuration.builders.MatcherRefBuilder matcherRefBuilder5 = matcherRefBuilder2.setMatchers(strMap4);
        org.apache.rat.configuration.builders.AllBuilder allBuilder6 = new org.apache.rat.configuration.builders.AllBuilder();
        org.apache.rat.configuration.builders.CopyrightBuilder copyrightBuilder7 = org.apache.rat.analysis.IHeaderMatcher.Builder.copyright();
        org.apache.rat.configuration.builders.CopyrightBuilder copyrightBuilder9 = copyrightBuilder7.setStart("OASIS");
        java.lang.String str10 = copyrightBuilder7.toString();
        org.apache.rat.configuration.builders.CopyrightBuilder copyrightBuilder12 = copyrightBuilder7.setStart("223f0aba-15d4-49e9-901e-5740c137aebf");
        org.apache.rat.configuration.builders.MatcherRefBuilder matcherRefBuilder13 = org.apache.rat.analysis.IHeaderMatcher.Builder.matcherRef();
        boolean boolean14 = matcherRefBuilder13.hasId();
        org.apache.rat.configuration.builders.CopyrightBuilder copyrightBuilder15 = org.apache.rat.analysis.IHeaderMatcher.Builder.copyright();
        org.apache.rat.configuration.builders.CopyrightBuilder copyrightBuilder17 = copyrightBuilder15.setStart("OASIS");
        java.lang.String str18 = copyrightBuilder15.toString();
        org.apache.rat.configuration.builders.CopyrightBuilder copyrightBuilder20 = copyrightBuilder15.setStart("223f0aba-15d4-49e9-901e-5740c137aebf");
        org.apache.rat.configuration.builders.CopyrightBuilder copyrightBuilder21 = org.apache.rat.analysis.IHeaderMatcher.Builder.copyright();
        org.apache.rat.configuration.builders.CopyrightBuilder copyrightBuilder22 = org.apache.rat.analysis.IHeaderMatcher.Builder.copyright();
        java.lang.String str23 = copyrightBuilder22.toString();
        org.apache.rat.configuration.builders.CopyrightBuilder copyrightBuilder25 = copyrightBuilder22.setEnd(".cvsignore");
        boolean boolean26 = copyrightBuilder22.hasId();
        org.apache.rat.configuration.builders.CopyrightBuilder copyrightBuilder27 = org.apache.rat.analysis.IHeaderMatcher.Builder.copyright();
        java.lang.String str28 = copyrightBuilder27.toString();
        org.apache.rat.configuration.builders.CopyrightBuilder copyrightBuilder30 = copyrightBuilder27.setEnd(".cvsignore");
        boolean boolean31 = copyrightBuilder27.hasId();
        java.lang.String str32 = copyrightBuilder27.toString();
        org.apache.rat.configuration.builders.CopyrightBuilder copyrightBuilder33 = org.apache.rat.analysis.IHeaderMatcher.Builder.copyright();
        org.apache.rat.configuration.builders.CopyrightBuilder copyrightBuilder35 = copyrightBuilder33.setStart("OASIS");
        org.apache.rat.configuration.builders.AnyBuilder anyBuilder36 = org.apache.rat.analysis.IHeaderMatcher.Builder.any();
        org.apache.rat.configuration.builders.MatcherRefBuilder matcherRefBuilder37 = org.apache.rat.analysis.IHeaderMatcher.Builder.matcherRef();
        boolean boolean38 = matcherRefBuilder37.hasId();
        java.util.Map<java.lang.String, org.apache.rat.analysis.IHeaderMatcher> strMap39 = null;
        org.apache.rat.configuration.builders.MatcherRefBuilder matcherRefBuilder40 = matcherRefBuilder37.setMatchers(strMap39);
        org.apache.rat.configuration.builders.CopyrightBuilder copyrightBuilder41 = org.apache.rat.analysis.IHeaderMatcher.Builder.copyright();
        org.apache.rat.configuration.builders.MatcherRefBuilder matcherRefBuilder42 = org.apache.rat.analysis.IHeaderMatcher.Builder.matcherRef();
        boolean boolean43 = matcherRefBuilder42.hasId();
        java.lang.String str44 = matcherRefBuilder42.toString();
        java.util.Map<java.lang.String, org.apache.rat.analysis.IHeaderMatcher> strMap45 = null;
        org.apache.rat.configuration.builders.MatcherRefBuilder matcherRefBuilder46 = matcherRefBuilder42.setMatchers(strMap45);
        org.apache.rat.analysis.IHeaderMatcher.Builder[] builderArray47 = new org.apache.rat.analysis.IHeaderMatcher.Builder[] { matcherRefBuilder2, allBuilder6, copyrightBuilder12, matcherRefBuilder13, copyrightBuilder15, copyrightBuilder21, copyrightBuilder22, copyrightBuilder27, copyrightBuilder33, anyBuilder36, matcherRefBuilder37, copyrightBuilder41, matcherRefBuilder42 };
        java.util.ArrayList<org.apache.rat.analysis.IHeaderMatcher.Builder> builderList48 = new java.util.ArrayList<org.apache.rat.analysis.IHeaderMatcher.Builder>();
        boolean boolean49 = java.util.Collections.addAll((java.util.Collection<org.apache.rat.analysis.IHeaderMatcher.Builder>) builderList48, builderArray47);
        org.apache.rat.configuration.builders.AbstractBuilder abstractBuilder50 = notBuilder0.add((java.util.Collection<org.apache.rat.analysis.IHeaderMatcher.Builder>) builderList48);
        java.lang.String str51 = notBuilder0.toString();
        org.apache.rat.configuration.builders.AbstractBuilder abstractBuilder53 = notBuilder0.setResource("");
        java.lang.String str54 = notBuilder0.toString();
        // The following exception was thrown during execution in test generation
        try {
            org.apache.rat.analysis.IHeaderMatcher iHeaderMatcher55 = notBuilder0.build();
            org.junit.Assert.fail("Expected exception of type org.apache.rat.ConfigurationException; message: 'not' type matcher requires one and only one enclosed matcher");
        } catch (org.apache.rat.ConfigurationException e) {
            // Expected exception.
        }
        org.junit.Assert.assertEquals("'" + str1 + "' != '" + "NotBuilder: null" + "'", str1, "NotBuilder: null");
        org.junit.Assert.assertNotNull(matcherRefBuilder2);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertNotNull(matcherRefBuilder5);
        org.junit.Assert.assertNotNull(copyrightBuilder7);
        org.junit.Assert.assertNotNull(copyrightBuilder9);
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "Copyright Builder: s:OASIS e:null o:null" + "'", str10, "Copyright Builder: s:OASIS e:null o:null");
        org.junit.Assert.assertNotNull(copyrightBuilder12);
        org.junit.Assert.assertNotNull(matcherRefBuilder13);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
        org.junit.Assert.assertNotNull(copyrightBuilder15);
        org.junit.Assert.assertNotNull(copyrightBuilder17);
        org.junit.Assert.assertEquals("'" + str18 + "' != '" + "Copyright Builder: s:OASIS e:null o:null" + "'", str18, "Copyright Builder: s:OASIS e:null o:null");
        org.junit.Assert.assertNotNull(copyrightBuilder20);
        org.junit.Assert.assertNotNull(copyrightBuilder21);
        org.junit.Assert.assertNotNull(copyrightBuilder22);
        org.junit.Assert.assertEquals("'" + str23 + "' != '" + "Copyright Builder: s:null e:null o:null" + "'", str23, "Copyright Builder: s:null e:null o:null");
        org.junit.Assert.assertNotNull(copyrightBuilder25);
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + false + "'", boolean26 == false);
        org.junit.Assert.assertNotNull(copyrightBuilder27);
        org.junit.Assert.assertEquals("'" + str28 + "' != '" + "Copyright Builder: s:null e:null o:null" + "'", str28, "Copyright Builder: s:null e:null o:null");
        org.junit.Assert.assertNotNull(copyrightBuilder30);
        org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + false + "'", boolean31 == false);
        org.junit.Assert.assertEquals("'" + str32 + "' != '" + "Copyright Builder: s:null e:.cvsignore o:null" + "'", str32, "Copyright Builder: s:null e:.cvsignore o:null");
        org.junit.Assert.assertNotNull(copyrightBuilder33);
        org.junit.Assert.assertNotNull(copyrightBuilder35);
        org.junit.Assert.assertNotNull(anyBuilder36);
        org.junit.Assert.assertNotNull(matcherRefBuilder37);
        org.junit.Assert.assertTrue("'" + boolean38 + "' != '" + false + "'", boolean38 == false);
        org.junit.Assert.assertNotNull(matcherRefBuilder40);
        org.junit.Assert.assertNotNull(copyrightBuilder41);
        org.junit.Assert.assertNotNull(matcherRefBuilder42);
        org.junit.Assert.assertTrue("'" + boolean43 + "' != '" + false + "'", boolean43 == false);
        org.junit.Assert.assertEquals("'" + str44 + "' != '" + "MathcerRefBuilder: null" + "'", str44, "MathcerRefBuilder: null");
        org.junit.Assert.assertNotNull(matcherRefBuilder46);
        org.junit.Assert.assertNotNull(builderArray47);
        org.junit.Assert.assertTrue("'" + boolean49 + "' != '" + true + "'", boolean49 == true);
        org.junit.Assert.assertNotNull(abstractBuilder50);
        org.junit.Assert.assertEquals("'" + str51 + "' != '" + "NotBuilder: MathcerRefBuilder: null" + "'", str51, "NotBuilder: MathcerRefBuilder: null");
        org.junit.Assert.assertNotNull(abstractBuilder53);
        org.junit.Assert.assertEquals("'" + str54 + "' != '" + "NotBuilder: MathcerRefBuilder: null" + "'", str54, "NotBuilder: MathcerRefBuilder: null");
    }

    @Test
    public void test13582() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest27.test13582");
        org.apache.rat.license.ILicenseFamilyBuilder iLicenseFamilyBuilder0 = new org.apache.rat.license.ILicenseFamilyBuilder();
        java.lang.String str1 = iLicenseFamilyBuilder0.getCategory();
        org.apache.rat.license.ILicenseFamily.Builder builder3 = iLicenseFamilyBuilder0.setLicenseFamilyCategory("AL   ");
        org.apache.rat.license.ILicenseFamily.Builder builder5 = iLicenseFamilyBuilder0.setLicenseFamilyName("binary");
        org.apache.rat.license.ILicenseFamily.Builder builder7 = iLicenseFamilyBuilder0.setLicenseFamilyCategory("3c74a3ec-8235-4035-9db7-f9f475b48681");
        java.lang.String str8 = iLicenseFamilyBuilder0.getCategory();
        org.apache.rat.license.ILicenseFamily.Builder builder10 = iLicenseFamilyBuilder0.setLicenseFamilyCategory("f02d0cdc36424583b71fdd84a120752c");
        org.apache.rat.license.ILicenseFamily.Builder builder12 = iLicenseFamilyBuilder0.setLicenseFamilyName("725f33f3-3304-4bfa-b1c1-c226b58a407e");
        org.apache.rat.license.ILicenseFamily.Builder builder14 = iLicenseFamilyBuilder0.setLicenseFamilyCategory("Copyright Builder: s:SpdxBuilder: Datum [ name ='http://org/apache/rat/meta-data#ApprovedLicense',value ='false '] e:W3C Software Copyright o:null");
        org.apache.rat.license.ILicenseFamily.Builder builder16 = iLicenseFamilyBuilder0.setLicenseFamilyName("NOTBUILDER: NULL");
        org.apache.rat.license.ILicenseFamily.Builder builder18 = iLicenseFamilyBuilder0.setLicenseFamilyName("null ?????");
        org.apache.rat.license.ILicenseFamily iLicenseFamily19 = iLicenseFamilyBuilder0.build();
        org.junit.Assert.assertNull(str1);
        org.junit.Assert.assertNotNull(builder3);
        org.junit.Assert.assertNotNull(builder5);
        org.junit.Assert.assertNotNull(builder7);
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "3c74a3ec-8235-4035-9db7-f9f475b48681" + "'", str8, "3c74a3ec-8235-4035-9db7-f9f475b48681");
        org.junit.Assert.assertNotNull(builder10);
        org.junit.Assert.assertNotNull(builder12);
        org.junit.Assert.assertNotNull(builder14);
        org.junit.Assert.assertNotNull(builder16);
        org.junit.Assert.assertNotNull(builder18);
        org.junit.Assert.assertNotNull(iLicenseFamily19);
    }

    @Test
    public void test13583() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest27.test13583");
        org.apache.rat.utils.ReportingSet<java.lang.String> strSet0 = new org.apache.rat.utils.ReportingSet<java.lang.String>();
        org.apache.rat.utils.DefaultLog defaultLog1 = org.apache.rat.utils.DefaultLog.INSTANCE;
        org.apache.rat.utils.Log log2 = null;
        org.apache.rat.ReportConfiguration reportConfiguration3 = new org.apache.rat.ReportConfiguration(log2);
        java.io.FilenameFilter filenameFilter4 = reportConfiguration3.getInputFileFilter();
        org.apache.rat.license.LicenseSetFactory.LicenseFilter licenseFilter5 = org.apache.rat.license.LicenseSetFactory.LicenseFilter.all;
        java.util.SortedSet<org.apache.rat.license.ILicense> iLicenseSet6 = reportConfiguration3.getLicenses(licenseFilter5);
        org.apache.rat.config.AddLicenseHeaders addLicenseHeaders7 = org.apache.rat.config.AddLicenseHeaders.FALSE;
        reportConfiguration3.setAddLicenseHeaders(addLicenseHeaders7);
        org.apache.rat.utils.Log log9 = null;
        org.apache.rat.ReportConfiguration reportConfiguration10 = new org.apache.rat.ReportConfiguration(log9);
        org.apache.rat.report.claim.ClaimStatistic claimStatistic11 = org.apache.rat.Reporter.report(reportConfiguration10);
        org.apache.rat.license.LicenseSetFactory.LicenseFilter licenseFilter12 = org.apache.rat.license.LicenseSetFactory.LicenseFilter.all;
        org.apache.rat.Reporter.listLicenses(reportConfiguration10, licenseFilter12);
        org.apache.rat.Reporter.listLicenses(reportConfiguration3, licenseFilter12);
        org.apache.rat.utils.Log log15 = null;
        org.apache.rat.ReportConfiguration reportConfiguration16 = new org.apache.rat.ReportConfiguration(log15);
        java.io.FilenameFilter filenameFilter17 = reportConfiguration16.getInputFileFilter();
        org.apache.rat.license.LicenseSetFactory.LicenseFilter licenseFilter18 = org.apache.rat.license.LicenseSetFactory.LicenseFilter.all;
        java.util.SortedSet<org.apache.rat.license.ILicense> iLicenseSet19 = reportConfiguration16.getLicenses(licenseFilter18);
        org.apache.rat.config.AddLicenseHeaders addLicenseHeaders20 = org.apache.rat.config.AddLicenseHeaders.FALSE;
        reportConfiguration16.setAddLicenseHeaders(addLicenseHeaders20);
        org.apache.rat.utils.Log log22 = null;
        org.apache.rat.ReportConfiguration reportConfiguration23 = new org.apache.rat.ReportConfiguration(log22);
        org.apache.rat.report.claim.ClaimStatistic claimStatistic24 = org.apache.rat.Reporter.report(reportConfiguration23);
        org.apache.rat.license.LicenseSetFactory.LicenseFilter licenseFilter25 = org.apache.rat.license.LicenseSetFactory.LicenseFilter.all;
        org.apache.rat.Reporter.listLicenses(reportConfiguration23, licenseFilter25);
        org.apache.rat.Reporter.listLicenses(reportConfiguration16, licenseFilter25);
        org.apache.rat.Reporter.listLicenses(reportConfiguration3, licenseFilter25);
        org.apache.rat.utils.Log log29 = null;
        org.apache.rat.ReportConfiguration reportConfiguration30 = new org.apache.rat.ReportConfiguration(log29);
        org.apache.commons.io.function.IOSupplier<java.io.OutputStream> outputStreamIOSupplier31 = reportConfiguration30.getOutput();
        reportConfiguration3.setOut(outputStreamIOSupplier31);
        org.apache.rat.utils.Log log33 = null;
        org.apache.rat.ReportConfiguration reportConfiguration34 = new org.apache.rat.ReportConfiguration(log33);
        org.apache.rat.report.claim.ClaimStatistic claimStatistic35 = org.apache.rat.Reporter.report(reportConfiguration34);
        org.apache.rat.utils.Log log36 = null;
        org.apache.rat.ReportConfiguration reportConfiguration37 = new org.apache.rat.ReportConfiguration(log36);
        org.apache.rat.report.claim.ClaimStatistic claimStatistic38 = org.apache.rat.Reporter.report(reportConfiguration37);
        org.apache.rat.utils.ReportingSet.Options options39 = org.apache.rat.utils.ReportingSet.Options.OVERWRITE;
        reportConfiguration37.licenseDuplicateOption(options39);
        reportConfiguration34.familyDuplicateOption(options39);
        reportConfiguration3.licenseDuplicateOption(options39);
        reportConfiguration3.addApprovedLicenseCategory("W3C Document Copyright");
        org.apache.rat.utils.Log log45 = null;
        org.apache.rat.ReportConfiguration reportConfiguration46 = new org.apache.rat.ReportConfiguration(log45);
        reportConfiguration46.addApprovedLicenseCategory(".cvsignore");
        org.apache.rat.utils.Log.Level level49 = org.apache.rat.utils.Log.Level.ERROR;
        reportConfiguration46.logLicenseCollisions(level49);
        reportConfiguration3.logLicenseCollisions(level49);
        defaultLog1.setLevel(level49);
        org.apache.rat.utils.ReportingSet<java.lang.String> strSet53 = strSet0.setLog((org.apache.rat.utils.Log) defaultLog1);
        org.apache.rat.analysis.matchers.CopyrightMatcher copyrightMatcher58 = new org.apache.rat.analysis.matchers.CopyrightMatcher("", "ACADEMIC FREE LICENSE, VERSION 2.1", "641dafc1-13c3-45d4-8272-f36f10392c53", "MathcerRefBuilder: ");
        boolean boolean59 = strSet0.remove((java.lang.Object) "ACADEMIC FREE LICENSE, VERSION 2.1");
        org.apache.rat.configuration.Format format60 = org.apache.rat.configuration.Format.XML;
        org.apache.rat.configuration.LicenseReader licenseReader61 = format60.licenseReader();
        org.apache.rat.configuration.LicenseReader licenseReader62 = format60.licenseReader();
        org.apache.rat.configuration.LicenseReader licenseReader63 = format60.licenseReader();
        org.apache.rat.configuration.LicenseReader licenseReader64 = format60.licenseReader();
        java.util.SortedSet<org.apache.rat.license.ILicenseFamily> iLicenseFamilySet65 = licenseReader64.readFamilies();
        java.util.SortedSet<org.apache.rat.license.ILicenseFamily> iLicenseFamilySet66 = licenseReader64.readFamilies();
        boolean boolean67 = strSet0.retainAll((java.util.Collection<org.apache.rat.license.ILicenseFamily>) iLicenseFamilySet66);
        java.lang.Object[] objArray68 = strSet0.toArray();
        java.util.stream.Stream<java.lang.String> strStream69 = strSet0.parallelStream();
        org.junit.Assert.assertNotNull(defaultLog1);
        org.junit.Assert.assertNull(filenameFilter4);
        org.junit.Assert.assertTrue("'" + licenseFilter5 + "' != '" + org.apache.rat.license.LicenseSetFactory.LicenseFilter.all + "'", licenseFilter5.equals(org.apache.rat.license.LicenseSetFactory.LicenseFilter.all));
        org.junit.Assert.assertNotNull(iLicenseSet6);
        org.junit.Assert.assertTrue("'" + addLicenseHeaders7 + "' != '" + org.apache.rat.config.AddLicenseHeaders.FALSE + "'", addLicenseHeaders7.equals(org.apache.rat.config.AddLicenseHeaders.FALSE));
        org.junit.Assert.assertNull(claimStatistic11);
        org.junit.Assert.assertTrue("'" + licenseFilter12 + "' != '" + org.apache.rat.license.LicenseSetFactory.LicenseFilter.all + "'", licenseFilter12.equals(org.apache.rat.license.LicenseSetFactory.LicenseFilter.all));
        org.junit.Assert.assertNull(filenameFilter17);
        org.junit.Assert.assertTrue("'" + licenseFilter18 + "' != '" + org.apache.rat.license.LicenseSetFactory.LicenseFilter.all + "'", licenseFilter18.equals(org.apache.rat.license.LicenseSetFactory.LicenseFilter.all));
        org.junit.Assert.assertNotNull(iLicenseSet19);
        org.junit.Assert.assertTrue("'" + addLicenseHeaders20 + "' != '" + org.apache.rat.config.AddLicenseHeaders.FALSE + "'", addLicenseHeaders20.equals(org.apache.rat.config.AddLicenseHeaders.FALSE));
        org.junit.Assert.assertNull(claimStatistic24);
        org.junit.Assert.assertTrue("'" + licenseFilter25 + "' != '" + org.apache.rat.license.LicenseSetFactory.LicenseFilter.all + "'", licenseFilter25.equals(org.apache.rat.license.LicenseSetFactory.LicenseFilter.all));
        org.junit.Assert.assertNotNull(outputStreamIOSupplier31);
        org.junit.Assert.assertNull(claimStatistic35);
        org.junit.Assert.assertNull(claimStatistic38);
        org.junit.Assert.assertTrue("'" + options39 + "' != '" + org.apache.rat.utils.ReportingSet.Options.OVERWRITE + "'", options39.equals(org.apache.rat.utils.ReportingSet.Options.OVERWRITE));
        org.junit.Assert.assertTrue("'" + level49 + "' != '" + org.apache.rat.utils.Log.Level.ERROR + "'", level49.equals(org.apache.rat.utils.Log.Level.ERROR));
        org.junit.Assert.assertNotNull(strSet53);
        org.junit.Assert.assertTrue("'" + boolean59 + "' != '" + false + "'", boolean59 == false);
        org.junit.Assert.assertTrue("'" + format60 + "' != '" + org.apache.rat.configuration.Format.XML + "'", format60.equals(org.apache.rat.configuration.Format.XML));
        org.junit.Assert.assertNotNull(licenseReader61);
        org.junit.Assert.assertNotNull(licenseReader62);
        org.junit.Assert.assertNotNull(licenseReader63);
        org.junit.Assert.assertNotNull(licenseReader64);
        org.junit.Assert.assertNotNull(iLicenseFamilySet65);
        org.junit.Assert.assertNotNull(iLicenseFamilySet66);
        org.junit.Assert.assertTrue("'" + boolean67 + "' != '" + false + "'", boolean67 == false);
        org.junit.Assert.assertNotNull(objArray68);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray68), "[]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray68), "[]");
        org.junit.Assert.assertNotNull(strStream69);
    }

    @Test
    public void test13584() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest27.test13584");
        org.apache.rat.configuration.builders.CopyrightBuilder copyrightBuilder0 = org.apache.rat.analysis.IHeaderMatcher.Builder.copyright();
        org.apache.rat.configuration.builders.CopyrightBuilder copyrightBuilder2 = copyrightBuilder0.setStart("021187d7-27c2-4fd9-bc74-8cc00413ee52");
        org.apache.rat.analysis.IHeaderMatcher iHeaderMatcher3 = copyrightBuilder0.build();
        org.apache.rat.analysis.IHeaderMatcher iHeaderMatcher4 = copyrightBuilder0.build();
        org.apache.rat.configuration.builders.CopyrightBuilder copyrightBuilder6 = copyrightBuilder0.setOwner("SpdxBuilder: Datum [ name ='http://org/apache/rat/meta-data#LicenseFamilyName',value ='????? ']");
        org.junit.Assert.assertNotNull(copyrightBuilder0);
        org.junit.Assert.assertNotNull(copyrightBuilder2);
        org.junit.Assert.assertNotNull(iHeaderMatcher3);
        org.junit.Assert.assertNotNull(iHeaderMatcher4);
        org.junit.Assert.assertNotNull(copyrightBuilder6);
    }

    @Test
    public void test13585() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest27.test13585");
        org.apache.rat.document.ToNameTransformer toNameTransformer0 = new org.apache.rat.document.ToNameTransformer();
        org.apache.rat.report.claim.ClaimStatistic claimStatistic1 = new org.apache.rat.report.claim.ClaimStatistic();
        claimStatistic1.setNumApproved((int) (short) 10);
        claimStatistic1.setNumUnknown(30);
        java.lang.Object obj6 = toNameTransformer0.transform((java.lang.Object) claimStatistic1);
        int int7 = claimStatistic1.getNumUnknown();
        int int8 = claimStatistic1.getNumApproved();
        java.util.Map<java.lang.String, java.lang.Integer> strMap9 = null;
        claimStatistic1.setDocumentCategoryMap(strMap9);
        claimStatistic1.setNumGenerated(2);
        org.junit.Assert.assertNull(obj6);
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 30 + "'", int7 == 30);
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + 10 + "'", int8 == 10);
    }

    @Test
    public void test13586() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest27.test13586");
        org.apache.rat.utils.DefaultLog defaultLog0 = org.apache.rat.utils.DefaultLog.INSTANCE;
        org.apache.rat.configuration.builders.AllBuilder allBuilder1 = new org.apache.rat.configuration.builders.AllBuilder();
        org.apache.rat.configuration.builders.MatcherRefBuilder matcherRefBuilder2 = org.apache.rat.analysis.IHeaderMatcher.Builder.matcherRef();
        boolean boolean3 = matcherRefBuilder2.hasId();
        java.lang.String str4 = matcherRefBuilder2.toString();
        org.apache.rat.configuration.builders.AnyBuilder anyBuilder5 = org.apache.rat.analysis.IHeaderMatcher.Builder.any();
        org.apache.rat.configuration.builders.NotBuilder notBuilder6 = new org.apache.rat.configuration.builders.NotBuilder();
        java.lang.String str7 = notBuilder6.toString();
        org.apache.rat.configuration.builders.MatcherRefBuilder matcherRefBuilder8 = org.apache.rat.analysis.IHeaderMatcher.Builder.matcherRef();
        boolean boolean9 = matcherRefBuilder8.hasId();
        java.util.Map<java.lang.String, org.apache.rat.analysis.IHeaderMatcher> strMap10 = null;
        org.apache.rat.configuration.builders.MatcherRefBuilder matcherRefBuilder11 = matcherRefBuilder8.setMatchers(strMap10);
        org.apache.rat.configuration.builders.AllBuilder allBuilder12 = new org.apache.rat.configuration.builders.AllBuilder();
        org.apache.rat.configuration.builders.CopyrightBuilder copyrightBuilder13 = org.apache.rat.analysis.IHeaderMatcher.Builder.copyright();
        org.apache.rat.configuration.builders.CopyrightBuilder copyrightBuilder15 = copyrightBuilder13.setStart("OASIS");
        java.lang.String str16 = copyrightBuilder13.toString();
        org.apache.rat.configuration.builders.CopyrightBuilder copyrightBuilder18 = copyrightBuilder13.setStart("223f0aba-15d4-49e9-901e-5740c137aebf");
        org.apache.rat.configuration.builders.MatcherRefBuilder matcherRefBuilder19 = org.apache.rat.analysis.IHeaderMatcher.Builder.matcherRef();
        boolean boolean20 = matcherRefBuilder19.hasId();
        org.apache.rat.configuration.builders.CopyrightBuilder copyrightBuilder21 = org.apache.rat.analysis.IHeaderMatcher.Builder.copyright();
        org.apache.rat.configuration.builders.CopyrightBuilder copyrightBuilder23 = copyrightBuilder21.setStart("OASIS");
        java.lang.String str24 = copyrightBuilder21.toString();
        org.apache.rat.configuration.builders.CopyrightBuilder copyrightBuilder26 = copyrightBuilder21.setStart("223f0aba-15d4-49e9-901e-5740c137aebf");
        org.apache.rat.configuration.builders.CopyrightBuilder copyrightBuilder27 = org.apache.rat.analysis.IHeaderMatcher.Builder.copyright();
        org.apache.rat.configuration.builders.CopyrightBuilder copyrightBuilder28 = org.apache.rat.analysis.IHeaderMatcher.Builder.copyright();
        java.lang.String str29 = copyrightBuilder28.toString();
        org.apache.rat.configuration.builders.CopyrightBuilder copyrightBuilder31 = copyrightBuilder28.setEnd(".cvsignore");
        boolean boolean32 = copyrightBuilder28.hasId();
        org.apache.rat.configuration.builders.CopyrightBuilder copyrightBuilder33 = org.apache.rat.analysis.IHeaderMatcher.Builder.copyright();
        java.lang.String str34 = copyrightBuilder33.toString();
        org.apache.rat.configuration.builders.CopyrightBuilder copyrightBuilder36 = copyrightBuilder33.setEnd(".cvsignore");
        boolean boolean37 = copyrightBuilder33.hasId();
        java.lang.String str38 = copyrightBuilder33.toString();
        org.apache.rat.configuration.builders.CopyrightBuilder copyrightBuilder39 = org.apache.rat.analysis.IHeaderMatcher.Builder.copyright();
        org.apache.rat.configuration.builders.CopyrightBuilder copyrightBuilder41 = copyrightBuilder39.setStart("OASIS");
        org.apache.rat.configuration.builders.AnyBuilder anyBuilder42 = org.apache.rat.analysis.IHeaderMatcher.Builder.any();
        org.apache.rat.configuration.builders.MatcherRefBuilder matcherRefBuilder43 = org.apache.rat.analysis.IHeaderMatcher.Builder.matcherRef();
        boolean boolean44 = matcherRefBuilder43.hasId();
        java.util.Map<java.lang.String, org.apache.rat.analysis.IHeaderMatcher> strMap45 = null;
        org.apache.rat.configuration.builders.MatcherRefBuilder matcherRefBuilder46 = matcherRefBuilder43.setMatchers(strMap45);
        org.apache.rat.configuration.builders.CopyrightBuilder copyrightBuilder47 = org.apache.rat.analysis.IHeaderMatcher.Builder.copyright();
        org.apache.rat.configuration.builders.MatcherRefBuilder matcherRefBuilder48 = org.apache.rat.analysis.IHeaderMatcher.Builder.matcherRef();
        boolean boolean49 = matcherRefBuilder48.hasId();
        java.lang.String str50 = matcherRefBuilder48.toString();
        java.util.Map<java.lang.String, org.apache.rat.analysis.IHeaderMatcher> strMap51 = null;
        org.apache.rat.configuration.builders.MatcherRefBuilder matcherRefBuilder52 = matcherRefBuilder48.setMatchers(strMap51);
        org.apache.rat.analysis.IHeaderMatcher.Builder[] builderArray53 = new org.apache.rat.analysis.IHeaderMatcher.Builder[] { matcherRefBuilder8, allBuilder12, copyrightBuilder18, matcherRefBuilder19, copyrightBuilder21, copyrightBuilder27, copyrightBuilder28, copyrightBuilder33, copyrightBuilder39, anyBuilder42, matcherRefBuilder43, copyrightBuilder47, matcherRefBuilder48 };
        java.util.ArrayList<org.apache.rat.analysis.IHeaderMatcher.Builder> builderList54 = new java.util.ArrayList<org.apache.rat.analysis.IHeaderMatcher.Builder>();
        boolean boolean55 = java.util.Collections.addAll((java.util.Collection<org.apache.rat.analysis.IHeaderMatcher.Builder>) builderList54, builderArray53);
        org.apache.rat.configuration.builders.AbstractBuilder abstractBuilder56 = notBuilder6.add((java.util.Collection<org.apache.rat.analysis.IHeaderMatcher.Builder>) builderList54);
        org.apache.rat.configuration.builders.MatcherRefBuilder matcherRefBuilder57 = new org.apache.rat.configuration.builders.MatcherRefBuilder();
        org.apache.rat.analysis.IHeaderMatcher.Builder[] builderArray58 = new org.apache.rat.analysis.IHeaderMatcher.Builder[] { matcherRefBuilder2, anyBuilder5, notBuilder6, matcherRefBuilder57 };
        java.util.ArrayList<org.apache.rat.analysis.IHeaderMatcher.Builder> builderList59 = new java.util.ArrayList<org.apache.rat.analysis.IHeaderMatcher.Builder>();
        boolean boolean60 = java.util.Collections.addAll((java.util.Collection<org.apache.rat.analysis.IHeaderMatcher.Builder>) builderList59, builderArray58);
        org.apache.rat.configuration.builders.AbstractBuilder abstractBuilder61 = allBuilder1.add((java.util.Collection<org.apache.rat.analysis.IHeaderMatcher.Builder>) builderList59);
        defaultLog0.info((java.lang.Object) allBuilder1);
        org.apache.rat.annotation.ApacheV2LicenseAppender apacheV2LicenseAppender64 = new org.apache.rat.annotation.ApacheV2LicenseAppender((org.apache.rat.utils.Log) defaultLog0, "true");
        org.apache.rat.utils.Log.Level level65 = defaultLog0.getLevel();
        org.apache.rat.annotation.ApacheV2LicenseAppender apacheV2LicenseAppender67 = new org.apache.rat.annotation.ApacheV2LicenseAppender((org.apache.rat.utils.Log) defaultLog0, "8d0237f7-4727-4099-af02-7cae8c4e3cfd");
        org.apache.rat.ReportConfiguration reportConfiguration68 = new org.apache.rat.ReportConfiguration((org.apache.rat.utils.Log) defaultLog0);
        org.apache.rat.Defaults.Builder builder69 = org.apache.rat.Defaults.builder();
        org.apache.rat.Defaults.Builder builder70 = builder69.noDefault();
        org.apache.rat.Defaults defaults71 = builder70.build();
        org.apache.rat.Defaults defaults72 = builder70.build();
        reportConfiguration68.setFrom(defaults72);
        org.junit.Assert.assertNotNull(defaultLog0);
        org.junit.Assert.assertNotNull(matcherRefBuilder2);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "MathcerRefBuilder: null" + "'", str4, "MathcerRefBuilder: null");
        org.junit.Assert.assertNotNull(anyBuilder5);
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "NotBuilder: null" + "'", str7, "NotBuilder: null");
        org.junit.Assert.assertNotNull(matcherRefBuilder8);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertNotNull(matcherRefBuilder11);
        org.junit.Assert.assertNotNull(copyrightBuilder13);
        org.junit.Assert.assertNotNull(copyrightBuilder15);
        org.junit.Assert.assertEquals("'" + str16 + "' != '" + "Copyright Builder: s:OASIS e:null o:null" + "'", str16, "Copyright Builder: s:OASIS e:null o:null");
        org.junit.Assert.assertNotNull(copyrightBuilder18);
        org.junit.Assert.assertNotNull(matcherRefBuilder19);
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + false + "'", boolean20 == false);
        org.junit.Assert.assertNotNull(copyrightBuilder21);
        org.junit.Assert.assertNotNull(copyrightBuilder23);
        org.junit.Assert.assertEquals("'" + str24 + "' != '" + "Copyright Builder: s:OASIS e:null o:null" + "'", str24, "Copyright Builder: s:OASIS e:null o:null");
        org.junit.Assert.assertNotNull(copyrightBuilder26);
        org.junit.Assert.assertNotNull(copyrightBuilder27);
        org.junit.Assert.assertNotNull(copyrightBuilder28);
        org.junit.Assert.assertEquals("'" + str29 + "' != '" + "Copyright Builder: s:null e:null o:null" + "'", str29, "Copyright Builder: s:null e:null o:null");
        org.junit.Assert.assertNotNull(copyrightBuilder31);
        org.junit.Assert.assertTrue("'" + boolean32 + "' != '" + false + "'", boolean32 == false);
        org.junit.Assert.assertNotNull(copyrightBuilder33);
        org.junit.Assert.assertEquals("'" + str34 + "' != '" + "Copyright Builder: s:null e:null o:null" + "'", str34, "Copyright Builder: s:null e:null o:null");
        org.junit.Assert.assertNotNull(copyrightBuilder36);
        org.junit.Assert.assertTrue("'" + boolean37 + "' != '" + false + "'", boolean37 == false);
        org.junit.Assert.assertEquals("'" + str38 + "' != '" + "Copyright Builder: s:null e:.cvsignore o:null" + "'", str38, "Copyright Builder: s:null e:.cvsignore o:null");
        org.junit.Assert.assertNotNull(copyrightBuilder39);
        org.junit.Assert.assertNotNull(copyrightBuilder41);
        org.junit.Assert.assertNotNull(anyBuilder42);
        org.junit.Assert.assertNotNull(matcherRefBuilder43);
        org.junit.Assert.assertTrue("'" + boolean44 + "' != '" + false + "'", boolean44 == false);
        org.junit.Assert.assertNotNull(matcherRefBuilder46);
        org.junit.Assert.assertNotNull(copyrightBuilder47);
        org.junit.Assert.assertNotNull(matcherRefBuilder48);
        org.junit.Assert.assertTrue("'" + boolean49 + "' != '" + false + "'", boolean49 == false);
        org.junit.Assert.assertEquals("'" + str50 + "' != '" + "MathcerRefBuilder: null" + "'", str50, "MathcerRefBuilder: null");
        org.junit.Assert.assertNotNull(matcherRefBuilder52);
        org.junit.Assert.assertNotNull(builderArray53);
        org.junit.Assert.assertTrue("'" + boolean55 + "' != '" + true + "'", boolean55 == true);
        org.junit.Assert.assertNotNull(abstractBuilder56);
        org.junit.Assert.assertNotNull(builderArray58);
        org.junit.Assert.assertTrue("'" + boolean60 + "' != '" + true + "'", boolean60 == true);
        org.junit.Assert.assertNotNull(abstractBuilder61);
        org.junit.Assert.assertTrue("'" + level65 + "' != '" + org.apache.rat.utils.Log.Level.ERROR + "'", level65.equals(org.apache.rat.utils.Log.Level.ERROR));
        org.junit.Assert.assertNotNull(builder69);
        org.junit.Assert.assertNotNull(builder70);
        org.junit.Assert.assertNotNull(defaults71);
        org.junit.Assert.assertNotNull(defaults72);
    }

    @Test
    public void test13587() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest27.test13587");
        org.apache.rat.utils.DefaultLog defaultLog0 = org.apache.rat.utils.DefaultLog.INSTANCE;
        org.apache.rat.utils.Log log1 = null;
        org.apache.rat.ReportConfiguration reportConfiguration2 = new org.apache.rat.ReportConfiguration(log1);
        java.io.FilenameFilter filenameFilter3 = reportConfiguration2.getInputFileFilter();
        org.apache.rat.license.LicenseSetFactory.LicenseFilter licenseFilter4 = org.apache.rat.license.LicenseSetFactory.LicenseFilter.all;
        java.util.SortedSet<org.apache.rat.license.ILicense> iLicenseSet5 = reportConfiguration2.getLicenses(licenseFilter4);
        org.apache.rat.config.AddLicenseHeaders addLicenseHeaders6 = org.apache.rat.config.AddLicenseHeaders.FALSE;
        reportConfiguration2.setAddLicenseHeaders(addLicenseHeaders6);
        org.apache.rat.utils.Log log8 = null;
        org.apache.rat.ReportConfiguration reportConfiguration9 = new org.apache.rat.ReportConfiguration(log8);
        org.apache.rat.report.claim.ClaimStatistic claimStatistic10 = org.apache.rat.Reporter.report(reportConfiguration9);
        org.apache.rat.license.LicenseSetFactory.LicenseFilter licenseFilter11 = org.apache.rat.license.LicenseSetFactory.LicenseFilter.all;
        org.apache.rat.Reporter.listLicenses(reportConfiguration9, licenseFilter11);
        org.apache.rat.Reporter.listLicenses(reportConfiguration2, licenseFilter11);
        org.apache.rat.utils.Log log14 = null;
        org.apache.rat.ReportConfiguration reportConfiguration15 = new org.apache.rat.ReportConfiguration(log14);
        java.io.FilenameFilter filenameFilter16 = reportConfiguration15.getInputFileFilter();
        org.apache.rat.license.LicenseSetFactory.LicenseFilter licenseFilter17 = org.apache.rat.license.LicenseSetFactory.LicenseFilter.all;
        java.util.SortedSet<org.apache.rat.license.ILicense> iLicenseSet18 = reportConfiguration15.getLicenses(licenseFilter17);
        org.apache.rat.config.AddLicenseHeaders addLicenseHeaders19 = org.apache.rat.config.AddLicenseHeaders.FALSE;
        reportConfiguration15.setAddLicenseHeaders(addLicenseHeaders19);
        org.apache.rat.utils.Log log21 = null;
        org.apache.rat.ReportConfiguration reportConfiguration22 = new org.apache.rat.ReportConfiguration(log21);
        org.apache.rat.report.claim.ClaimStatistic claimStatistic23 = org.apache.rat.Reporter.report(reportConfiguration22);
        org.apache.rat.license.LicenseSetFactory.LicenseFilter licenseFilter24 = org.apache.rat.license.LicenseSetFactory.LicenseFilter.all;
        org.apache.rat.Reporter.listLicenses(reportConfiguration22, licenseFilter24);
        org.apache.rat.Reporter.listLicenses(reportConfiguration15, licenseFilter24);
        org.apache.rat.Reporter.listLicenses(reportConfiguration2, licenseFilter24);
        org.apache.rat.utils.Log log28 = null;
        org.apache.rat.ReportConfiguration reportConfiguration29 = new org.apache.rat.ReportConfiguration(log28);
        org.apache.commons.io.function.IOSupplier<java.io.OutputStream> outputStreamIOSupplier30 = reportConfiguration29.getOutput();
        reportConfiguration2.setOut(outputStreamIOSupplier30);
        org.apache.rat.utils.Log log32 = null;
        org.apache.rat.ReportConfiguration reportConfiguration33 = new org.apache.rat.ReportConfiguration(log32);
        org.apache.rat.report.claim.ClaimStatistic claimStatistic34 = org.apache.rat.Reporter.report(reportConfiguration33);
        org.apache.rat.utils.Log log35 = null;
        org.apache.rat.ReportConfiguration reportConfiguration36 = new org.apache.rat.ReportConfiguration(log35);
        org.apache.rat.report.claim.ClaimStatistic claimStatistic37 = org.apache.rat.Reporter.report(reportConfiguration36);
        org.apache.rat.utils.ReportingSet.Options options38 = org.apache.rat.utils.ReportingSet.Options.OVERWRITE;
        reportConfiguration36.licenseDuplicateOption(options38);
        reportConfiguration33.familyDuplicateOption(options38);
        reportConfiguration2.licenseDuplicateOption(options38);
        reportConfiguration2.addApprovedLicenseCategory("W3C Document Copyright");
        org.apache.rat.utils.Log log44 = null;
        org.apache.rat.ReportConfiguration reportConfiguration45 = new org.apache.rat.ReportConfiguration(log44);
        reportConfiguration45.addApprovedLicenseCategory(".cvsignore");
        org.apache.rat.utils.Log.Level level48 = org.apache.rat.utils.Log.Level.ERROR;
        reportConfiguration45.logLicenseCollisions(level48);
        reportConfiguration2.logLicenseCollisions(level48);
        defaultLog0.setLevel(level48);
        defaultLog0.warn((java.lang.Object) "GNU General Public License, version 3");
        org.apache.rat.ReportConfiguration reportConfiguration54 = new org.apache.rat.ReportConfiguration((org.apache.rat.utils.Log) defaultLog0);
        org.apache.rat.ReportConfiguration reportConfiguration55 = new org.apache.rat.ReportConfiguration((org.apache.rat.utils.Log) defaultLog0);
        org.apache.rat.utils.Log.Level level56 = defaultLog0.getLevel();
        org.apache.rat.annotation.ApacheV2LicenseAppender apacheV2LicenseAppender57 = new org.apache.rat.annotation.ApacheV2LicenseAppender((org.apache.rat.utils.Log) defaultLog0);
        org.apache.rat.annotation.ApacheV2LicenseAppender apacheV2LicenseAppender59 = new org.apache.rat.annotation.ApacheV2LicenseAppender((org.apache.rat.utils.Log) defaultLog0, "33ba9086-9202-465d-abcb-376ea3efcd83");
        apacheV2LicenseAppender59.setForce(false);
        apacheV2LicenseAppender59.setForce(false);
        org.junit.Assert.assertNotNull(defaultLog0);
        org.junit.Assert.assertNull(filenameFilter3);
        org.junit.Assert.assertTrue("'" + licenseFilter4 + "' != '" + org.apache.rat.license.LicenseSetFactory.LicenseFilter.all + "'", licenseFilter4.equals(org.apache.rat.license.LicenseSetFactory.LicenseFilter.all));
        org.junit.Assert.assertNotNull(iLicenseSet5);
        org.junit.Assert.assertTrue("'" + addLicenseHeaders6 + "' != '" + org.apache.rat.config.AddLicenseHeaders.FALSE + "'", addLicenseHeaders6.equals(org.apache.rat.config.AddLicenseHeaders.FALSE));
        org.junit.Assert.assertNull(claimStatistic10);
        org.junit.Assert.assertTrue("'" + licenseFilter11 + "' != '" + org.apache.rat.license.LicenseSetFactory.LicenseFilter.all + "'", licenseFilter11.equals(org.apache.rat.license.LicenseSetFactory.LicenseFilter.all));
        org.junit.Assert.assertNull(filenameFilter16);
        org.junit.Assert.assertTrue("'" + licenseFilter17 + "' != '" + org.apache.rat.license.LicenseSetFactory.LicenseFilter.all + "'", licenseFilter17.equals(org.apache.rat.license.LicenseSetFactory.LicenseFilter.all));
        org.junit.Assert.assertNotNull(iLicenseSet18);
        org.junit.Assert.assertTrue("'" + addLicenseHeaders19 + "' != '" + org.apache.rat.config.AddLicenseHeaders.FALSE + "'", addLicenseHeaders19.equals(org.apache.rat.config.AddLicenseHeaders.FALSE));
        org.junit.Assert.assertNull(claimStatistic23);
        org.junit.Assert.assertTrue("'" + licenseFilter24 + "' != '" + org.apache.rat.license.LicenseSetFactory.LicenseFilter.all + "'", licenseFilter24.equals(org.apache.rat.license.LicenseSetFactory.LicenseFilter.all));
        org.junit.Assert.assertNotNull(outputStreamIOSupplier30);
        org.junit.Assert.assertNull(claimStatistic34);
        org.junit.Assert.assertNull(claimStatistic37);
        org.junit.Assert.assertTrue("'" + options38 + "' != '" + org.apache.rat.utils.ReportingSet.Options.OVERWRITE + "'", options38.equals(org.apache.rat.utils.ReportingSet.Options.OVERWRITE));
        org.junit.Assert.assertTrue("'" + level48 + "' != '" + org.apache.rat.utils.Log.Level.ERROR + "'", level48.equals(org.apache.rat.utils.Log.Level.ERROR));
        org.junit.Assert.assertTrue("'" + level56 + "' != '" + org.apache.rat.utils.Log.Level.ERROR + "'", level56.equals(org.apache.rat.utils.Log.Level.ERROR));
    }

    @Test
    public void test13588() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest27.test13588");
        org.apache.rat.utils.Log log0 = null;
        org.apache.rat.ReportConfiguration reportConfiguration1 = new org.apache.rat.ReportConfiguration(log0);
        org.apache.rat.report.claim.ClaimStatistic claimStatistic2 = org.apache.rat.Reporter.report(reportConfiguration1);
        org.apache.rat.utils.Log log3 = null;
        org.apache.rat.ReportConfiguration reportConfiguration4 = new org.apache.rat.ReportConfiguration(log3);
        org.apache.rat.report.claim.ClaimStatistic claimStatistic5 = org.apache.rat.Reporter.report(reportConfiguration4);
        org.apache.rat.utils.ReportingSet.Options options6 = org.apache.rat.utils.ReportingSet.Options.OVERWRITE;
        reportConfiguration4.licenseDuplicateOption(options6);
        reportConfiguration1.familyDuplicateOption(options6);
        org.apache.commons.io.function.IOSupplier<java.io.PrintWriter> printWriterIOSupplier9 = reportConfiguration1.getWriter();
        boolean boolean10 = reportConfiguration1.isAddingLicensesForced();
        org.apache.rat.utils.Log log11 = null;
        org.apache.rat.ReportConfiguration reportConfiguration12 = new org.apache.rat.ReportConfiguration(log11);
        reportConfiguration12.addApprovedLicenseCategory(".cvsignore");
        org.apache.rat.utils.Log.Level level15 = org.apache.rat.utils.Log.Level.ERROR;
        reportConfiguration12.logFamilyCollisions(level15);
        reportConfiguration1.logLicenseCollisions(level15);
        boolean boolean18 = reportConfiguration1.isAddingLicenses();
        java.io.File file19 = null;
        // The following exception was thrown during execution in test generation
        try {
            reportConfiguration1.setOut(file19);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: output file should not be null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNull(claimStatistic2);
        org.junit.Assert.assertNull(claimStatistic5);
        org.junit.Assert.assertTrue("'" + options6 + "' != '" + org.apache.rat.utils.ReportingSet.Options.OVERWRITE + "'", options6.equals(org.apache.rat.utils.ReportingSet.Options.OVERWRITE));
        org.junit.Assert.assertNotNull(printWriterIOSupplier9);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertTrue("'" + level15 + "' != '" + org.apache.rat.utils.Log.Level.ERROR + "'", level15.equals(org.apache.rat.utils.Log.Level.ERROR));
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + false + "'", boolean18 == false);
    }

    @Test
    public void test13589() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest27.test13589");
        org.apache.rat.report.claim.ClaimStatistic claimStatistic0 = new org.apache.rat.report.claim.ClaimStatistic();
        claimStatistic0.setNumApproved((int) (short) 10);
        java.util.Map<java.lang.String, java.lang.Integer> strMap3 = null;
        claimStatistic0.setLicenseFileCodeMap(strMap3);
        int int5 = claimStatistic0.getNumUnknown();
        int int6 = claimStatistic0.getNumUnknown();
        java.util.Map<java.lang.String, java.lang.Integer> strMap7 = claimStatistic0.getLicenseFileCodeMap();
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 0 + "'", int5 == 0);
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 0 + "'", int6 == 0);
        org.junit.Assert.assertNull(strMap7);
    }

    @Test
    public void test13590() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest27.test13590");
        org.apache.rat.utils.Log log0 = null;
        org.apache.rat.ReportConfiguration reportConfiguration1 = new org.apache.rat.ReportConfiguration(log0);
        java.io.FilenameFilter filenameFilter2 = reportConfiguration1.getInputFileFilter();
        org.apache.rat.license.LicenseSetFactory.LicenseFilter licenseFilter3 = org.apache.rat.license.LicenseSetFactory.LicenseFilter.all;
        java.util.SortedSet<org.apache.rat.license.ILicense> iLicenseSet4 = reportConfiguration1.getLicenses(licenseFilter3);
        org.apache.rat.config.AddLicenseHeaders addLicenseHeaders5 = org.apache.rat.config.AddLicenseHeaders.FALSE;
        reportConfiguration1.setAddLicenseHeaders(addLicenseHeaders5);
        org.apache.rat.utils.Log log7 = null;
        org.apache.rat.ReportConfiguration reportConfiguration8 = new org.apache.rat.ReportConfiguration(log7);
        org.apache.rat.report.claim.ClaimStatistic claimStatistic9 = org.apache.rat.Reporter.report(reportConfiguration8);
        org.apache.rat.license.LicenseSetFactory.LicenseFilter licenseFilter10 = org.apache.rat.license.LicenseSetFactory.LicenseFilter.all;
        org.apache.rat.Reporter.listLicenses(reportConfiguration8, licenseFilter10);
        org.apache.rat.Reporter.listLicenses(reportConfiguration1, licenseFilter10);
        org.apache.rat.utils.Log log13 = null;
        org.apache.rat.ReportConfiguration reportConfiguration14 = new org.apache.rat.ReportConfiguration(log13);
        java.io.FilenameFilter filenameFilter15 = reportConfiguration14.getInputFileFilter();
        org.apache.rat.license.LicenseSetFactory.LicenseFilter licenseFilter16 = org.apache.rat.license.LicenseSetFactory.LicenseFilter.all;
        java.util.SortedSet<org.apache.rat.license.ILicense> iLicenseSet17 = reportConfiguration14.getLicenses(licenseFilter16);
        org.apache.rat.config.AddLicenseHeaders addLicenseHeaders18 = org.apache.rat.config.AddLicenseHeaders.FALSE;
        reportConfiguration14.setAddLicenseHeaders(addLicenseHeaders18);
        org.apache.rat.utils.Log log20 = null;
        org.apache.rat.ReportConfiguration reportConfiguration21 = new org.apache.rat.ReportConfiguration(log20);
        org.apache.rat.report.claim.ClaimStatistic claimStatistic22 = org.apache.rat.Reporter.report(reportConfiguration21);
        org.apache.rat.license.LicenseSetFactory.LicenseFilter licenseFilter23 = org.apache.rat.license.LicenseSetFactory.LicenseFilter.all;
        org.apache.rat.Reporter.listLicenses(reportConfiguration21, licenseFilter23);
        org.apache.rat.Reporter.listLicenses(reportConfiguration14, licenseFilter23);
        org.apache.rat.Reporter.listLicenses(reportConfiguration1, licenseFilter23);
        org.apache.rat.utils.Log log27 = null;
        org.apache.rat.ReportConfiguration reportConfiguration28 = new org.apache.rat.ReportConfiguration(log27);
        org.apache.commons.io.function.IOSupplier<java.io.OutputStream> outputStreamIOSupplier29 = reportConfiguration28.getOutput();
        reportConfiguration1.setOut(outputStreamIOSupplier29);
        org.apache.rat.utils.Log.Level level31 = org.apache.rat.utils.Log.Level.WARN;
        reportConfiguration1.logLicenseCollisions(level31);
        org.apache.commons.io.filefilter.IOFileFilter iOFileFilter33 = reportConfiguration1.getDirectoryFilter();
        java.nio.file.Path path34 = null;
        boolean boolean35 = iOFileFilter33.matches(path34);
        java.nio.file.Path path36 = null;
        java.nio.file.attribute.BasicFileAttributes basicFileAttributes37 = null;
        java.nio.file.FileVisitResult fileVisitResult38 = iOFileFilter33.accept(path36, basicFileAttributes37);
        org.apache.rat.utils.Log log39 = null;
        org.apache.rat.ReportConfiguration reportConfiguration40 = new org.apache.rat.ReportConfiguration(log39);
        org.apache.rat.report.claim.ClaimStatistic claimStatistic41 = org.apache.rat.Reporter.report(reportConfiguration40);
        org.apache.commons.io.function.IOSupplier<java.io.InputStream> inputStreamIOSupplier42 = reportConfiguration40.getStyleSheet();
        org.apache.rat.analysis.license.FullTextMatchingLicense fullTextMatchingLicense43 = new org.apache.rat.analysis.license.FullTextMatchingLicense();
        fullTextMatchingLicense43.setLicenseFamilyName("hi!");
        java.lang.String str46 = fullTextMatchingLicense43.getLicenseFamilyCategory();
        java.lang.String str47 = fullTextMatchingLicense43.getLicenseFamilyName();
        fullTextMatchingLicense43.setLicenseFamilyName("SpdxBuilder: null");
        fullTextMatchingLicense43.setLicenseFamilyCategory("TMF");
        org.apache.rat.license.ILicenseFamily iLicenseFamily52 = fullTextMatchingLicense43.getLicenseFamily();
        java.lang.String str53 = iLicenseFamily52.getFamilyName();
        java.lang.String str54 = iLicenseFamily52.getFamilyName();
        reportConfiguration40.addApprovedLicenseCategory(iLicenseFamily52);
        org.apache.rat.utils.Log log56 = null;
        org.apache.rat.ReportConfiguration reportConfiguration57 = new org.apache.rat.ReportConfiguration(log56);
        org.apache.rat.report.claim.ClaimStatistic claimStatistic58 = org.apache.rat.Reporter.report(reportConfiguration57);
        org.apache.rat.utils.Log log59 = null;
        org.apache.rat.ReportConfiguration reportConfiguration60 = new org.apache.rat.ReportConfiguration(log59);
        org.apache.rat.report.claim.ClaimStatistic claimStatistic61 = org.apache.rat.Reporter.report(reportConfiguration60);
        org.apache.rat.utils.ReportingSet.Options options62 = org.apache.rat.utils.ReportingSet.Options.OVERWRITE;
        reportConfiguration60.licenseDuplicateOption(options62);
        reportConfiguration57.familyDuplicateOption(options62);
        org.apache.commons.io.function.IOSupplier<java.io.PrintWriter> printWriterIOSupplier65 = reportConfiguration57.getWriter();
        org.apache.rat.utils.Log log66 = null;
        org.apache.rat.ReportConfiguration reportConfiguration67 = new org.apache.rat.ReportConfiguration(log66);
        reportConfiguration67.addApprovedLicenseCategory(".cvsignore");
        org.apache.rat.utils.Log.Level level70 = org.apache.rat.utils.Log.Level.ERROR;
        reportConfiguration67.logFamilyCollisions(level70);
        reportConfiguration57.logFamilyCollisions(level70);
        org.apache.commons.io.filefilter.IOFileFilter iOFileFilter73 = reportConfiguration57.getDirectoryFilter();
        reportConfiguration40.addDirectoryFilter(iOFileFilter73);
        java.nio.file.Path path75 = null;
        java.nio.file.attribute.BasicFileAttributes basicFileAttributes76 = null;
        java.nio.file.FileVisitResult fileVisitResult77 = iOFileFilter73.accept(path75, basicFileAttributes76);
        org.apache.commons.io.filefilter.IOFileFilter iOFileFilter78 = iOFileFilter33.and(iOFileFilter73);
        java.nio.file.Path path79 = null;
        boolean boolean80 = iOFileFilter33.matches(path79);
        java.nio.file.Path path81 = null;
        boolean boolean82 = iOFileFilter33.matches(path81);
        org.junit.Assert.assertNull(filenameFilter2);
        org.junit.Assert.assertTrue("'" + licenseFilter3 + "' != '" + org.apache.rat.license.LicenseSetFactory.LicenseFilter.all + "'", licenseFilter3.equals(org.apache.rat.license.LicenseSetFactory.LicenseFilter.all));
        org.junit.Assert.assertNotNull(iLicenseSet4);
        org.junit.Assert.assertTrue("'" + addLicenseHeaders5 + "' != '" + org.apache.rat.config.AddLicenseHeaders.FALSE + "'", addLicenseHeaders5.equals(org.apache.rat.config.AddLicenseHeaders.FALSE));
        org.junit.Assert.assertNull(claimStatistic9);
        org.junit.Assert.assertTrue("'" + licenseFilter10 + "' != '" + org.apache.rat.license.LicenseSetFactory.LicenseFilter.all + "'", licenseFilter10.equals(org.apache.rat.license.LicenseSetFactory.LicenseFilter.all));
        org.junit.Assert.assertNull(filenameFilter15);
        org.junit.Assert.assertTrue("'" + licenseFilter16 + "' != '" + org.apache.rat.license.LicenseSetFactory.LicenseFilter.all + "'", licenseFilter16.equals(org.apache.rat.license.LicenseSetFactory.LicenseFilter.all));
        org.junit.Assert.assertNotNull(iLicenseSet17);
        org.junit.Assert.assertTrue("'" + addLicenseHeaders18 + "' != '" + org.apache.rat.config.AddLicenseHeaders.FALSE + "'", addLicenseHeaders18.equals(org.apache.rat.config.AddLicenseHeaders.FALSE));
        org.junit.Assert.assertNull(claimStatistic22);
        org.junit.Assert.assertTrue("'" + licenseFilter23 + "' != '" + org.apache.rat.license.LicenseSetFactory.LicenseFilter.all + "'", licenseFilter23.equals(org.apache.rat.license.LicenseSetFactory.LicenseFilter.all));
        org.junit.Assert.assertNotNull(outputStreamIOSupplier29);
        org.junit.Assert.assertTrue("'" + level31 + "' != '" + org.apache.rat.utils.Log.Level.WARN + "'", level31.equals(org.apache.rat.utils.Log.Level.WARN));
        org.junit.Assert.assertNotNull(iOFileFilter33);
        org.junit.Assert.assertTrue("'" + boolean35 + "' != '" + false + "'", boolean35 == false);
        org.junit.Assert.assertTrue("'" + fileVisitResult38 + "' != '" + java.nio.file.FileVisitResult.TERMINATE + "'", fileVisitResult38.equals(java.nio.file.FileVisitResult.TERMINATE));
        org.junit.Assert.assertNull(claimStatistic41);
        org.junit.Assert.assertNull(inputStreamIOSupplier42);
        org.junit.Assert.assertNull(str46);
        org.junit.Assert.assertEquals("'" + str47 + "' != '" + "hi!" + "'", str47, "hi!");
        org.junit.Assert.assertNotNull(iLicenseFamily52);
        org.junit.Assert.assertEquals("'" + str53 + "' != '" + "SpdxBuilder: null" + "'", str53, "SpdxBuilder: null");
        org.junit.Assert.assertEquals("'" + str54 + "' != '" + "SpdxBuilder: null" + "'", str54, "SpdxBuilder: null");
        org.junit.Assert.assertNull(claimStatistic58);
        org.junit.Assert.assertNull(claimStatistic61);
        org.junit.Assert.assertTrue("'" + options62 + "' != '" + org.apache.rat.utils.ReportingSet.Options.OVERWRITE + "'", options62.equals(org.apache.rat.utils.ReportingSet.Options.OVERWRITE));
        org.junit.Assert.assertNotNull(printWriterIOSupplier65);
        org.junit.Assert.assertTrue("'" + level70 + "' != '" + org.apache.rat.utils.Log.Level.ERROR + "'", level70.equals(org.apache.rat.utils.Log.Level.ERROR));
        org.junit.Assert.assertNotNull(iOFileFilter73);
        org.junit.Assert.assertTrue("'" + fileVisitResult77 + "' != '" + java.nio.file.FileVisitResult.TERMINATE + "'", fileVisitResult77.equals(java.nio.file.FileVisitResult.TERMINATE));
        org.junit.Assert.assertNotNull(iOFileFilter78);
        org.junit.Assert.assertTrue("'" + boolean80 + "' != '" + false + "'", boolean80 == false);
        org.junit.Assert.assertTrue("'" + boolean82 + "' != '" + false + "'", boolean82 == false);
    }

    @Test
    public void test13591() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest27.test13591");
        java.io.File file0 = null;
        org.apache.rat.utils.Log log1 = null;
        org.apache.rat.ReportConfiguration reportConfiguration2 = new org.apache.rat.ReportConfiguration(log1);
        org.apache.rat.report.claim.ClaimStatistic claimStatistic3 = org.apache.rat.Reporter.report(reportConfiguration2);
        org.apache.rat.report.IReportable iReportable4 = null;
        reportConfiguration2.setReportable(iReportable4);
        boolean boolean6 = reportConfiguration2.isAddingLicensesForced();
        org.apache.commons.io.filefilter.IOFileFilter iOFileFilter7 = reportConfiguration2.getDirectoryFilter();
        org.apache.commons.io.filefilter.IOFileFilter iOFileFilter8 = iOFileFilter7.negate();
        org.apache.rat.utils.Log log9 = null;
        org.apache.rat.ReportConfiguration reportConfiguration10 = new org.apache.rat.ReportConfiguration(log9);
        java.io.FilenameFilter filenameFilter11 = reportConfiguration10.getInputFileFilter();
        org.apache.rat.utils.Log log12 = null;
        org.apache.rat.ReportConfiguration reportConfiguration13 = new org.apache.rat.ReportConfiguration(log12);
        java.io.FilenameFilter filenameFilter14 = reportConfiguration13.getInputFileFilter();
        boolean boolean15 = reportConfiguration13.isStyleReport();
        org.apache.commons.io.function.IOSupplier<java.io.OutputStream> outputStreamIOSupplier16 = reportConfiguration13.getOutput();
        org.apache.commons.io.function.IOSupplier<java.io.InputStream> inputStreamIOSupplier17 = reportConfiguration13.getStyleSheet();
        org.apache.rat.report.claim.ClaimStatistic claimStatistic18 = org.apache.rat.Reporter.report(reportConfiguration13);
        org.apache.rat.utils.Log log19 = null;
        org.apache.rat.ReportConfiguration reportConfiguration20 = new org.apache.rat.ReportConfiguration(log19);
        java.io.FilenameFilter filenameFilter21 = reportConfiguration20.getInputFileFilter();
        org.apache.rat.license.LicenseSetFactory.LicenseFilter licenseFilter22 = org.apache.rat.license.LicenseSetFactory.LicenseFilter.all;
        java.util.SortedSet<org.apache.rat.license.ILicense> iLicenseSet23 = reportConfiguration20.getLicenses(licenseFilter22);
        org.apache.rat.config.AddLicenseHeaders addLicenseHeaders24 = org.apache.rat.config.AddLicenseHeaders.FALSE;
        reportConfiguration20.setAddLicenseHeaders(addLicenseHeaders24);
        org.apache.rat.utils.Log log26 = null;
        org.apache.rat.ReportConfiguration reportConfiguration27 = new org.apache.rat.ReportConfiguration(log26);
        org.apache.rat.report.claim.ClaimStatistic claimStatistic28 = org.apache.rat.Reporter.report(reportConfiguration27);
        org.apache.rat.license.LicenseSetFactory.LicenseFilter licenseFilter29 = org.apache.rat.license.LicenseSetFactory.LicenseFilter.all;
        org.apache.rat.Reporter.listLicenses(reportConfiguration27, licenseFilter29);
        org.apache.rat.Reporter.listLicenses(reportConfiguration20, licenseFilter29);
        org.apache.rat.utils.Log log32 = null;
        org.apache.rat.ReportConfiguration reportConfiguration33 = new org.apache.rat.ReportConfiguration(log32);
        java.io.FilenameFilter filenameFilter34 = reportConfiguration33.getInputFileFilter();
        org.apache.rat.license.LicenseSetFactory.LicenseFilter licenseFilter35 = org.apache.rat.license.LicenseSetFactory.LicenseFilter.all;
        java.util.SortedSet<org.apache.rat.license.ILicense> iLicenseSet36 = reportConfiguration33.getLicenses(licenseFilter35);
        org.apache.rat.config.AddLicenseHeaders addLicenseHeaders37 = org.apache.rat.config.AddLicenseHeaders.FALSE;
        reportConfiguration33.setAddLicenseHeaders(addLicenseHeaders37);
        org.apache.rat.utils.Log log39 = null;
        org.apache.rat.ReportConfiguration reportConfiguration40 = new org.apache.rat.ReportConfiguration(log39);
        org.apache.rat.report.claim.ClaimStatistic claimStatistic41 = org.apache.rat.Reporter.report(reportConfiguration40);
        org.apache.rat.license.LicenseSetFactory.LicenseFilter licenseFilter42 = org.apache.rat.license.LicenseSetFactory.LicenseFilter.all;
        org.apache.rat.Reporter.listLicenses(reportConfiguration40, licenseFilter42);
        org.apache.rat.Reporter.listLicenses(reportConfiguration33, licenseFilter42);
        org.apache.rat.Reporter.listLicenses(reportConfiguration20, licenseFilter42);
        org.apache.rat.utils.Log log46 = null;
        org.apache.rat.ReportConfiguration reportConfiguration47 = new org.apache.rat.ReportConfiguration(log46);
        org.apache.commons.io.function.IOSupplier<java.io.OutputStream> outputStreamIOSupplier48 = reportConfiguration47.getOutput();
        reportConfiguration20.setOut(outputStreamIOSupplier48);
        boolean boolean50 = reportConfiguration20.isStyleReport();
        boolean boolean51 = reportConfiguration20.isStyleReport();
        org.apache.rat.utils.Log log52 = null;
        org.apache.rat.ReportConfiguration reportConfiguration53 = new org.apache.rat.ReportConfiguration(log52);
        reportConfiguration53.addApprovedLicenseCategory(".cvsignore");
        org.apache.rat.utils.Log.Level level56 = org.apache.rat.utils.Log.Level.ERROR;
        reportConfiguration53.logLicenseCollisions(level56);
        reportConfiguration20.logLicenseCollisions(level56);
        org.apache.rat.utils.Log.Level level59 = org.apache.rat.utils.Log.Level.DEBUG;
        reportConfiguration20.logLicenseCollisions(level59);
        org.apache.rat.utils.Log log61 = null;
        org.apache.rat.ReportConfiguration reportConfiguration62 = new org.apache.rat.ReportConfiguration(log61);
        org.apache.rat.license.ILicenseFamily[] iLicenseFamilyArray63 = new org.apache.rat.license.ILicenseFamily[] {};
        java.util.ArrayList<org.apache.rat.license.ILicenseFamily> iLicenseFamilyList64 = new java.util.ArrayList<org.apache.rat.license.ILicenseFamily>();
        boolean boolean65 = java.util.Collections.addAll((java.util.Collection<org.apache.rat.license.ILicenseFamily>) iLicenseFamilyList64, iLicenseFamilyArray63);
        reportConfiguration62.addFamilies((java.util.Collection<org.apache.rat.license.ILicenseFamily>) iLicenseFamilyList64);
        org.apache.rat.analysis.license.FullTextMatchingLicense fullTextMatchingLicense67 = new org.apache.rat.analysis.license.FullTextMatchingLicense();
        fullTextMatchingLicense67.setLicenseFamilyName("hi!");
        java.lang.String str70 = fullTextMatchingLicense67.getLicenseFamilyCategory();
        java.lang.String str71 = fullTextMatchingLicense67.getLicenseFamilyName();
        fullTextMatchingLicense67.setLicenseFamilyName("SpdxBuilder: null");
        fullTextMatchingLicense67.setLicenseFamilyCategory("TMF");
        org.apache.rat.license.ILicenseFamily iLicenseFamily76 = fullTextMatchingLicense67.getLicenseFamily();
        reportConfiguration62.addFamily(iLicenseFamily76);
        reportConfiguration20.addFamily(iLicenseFamily76);
        reportConfiguration13.addFamily(iLicenseFamily76);
        java.lang.String str80 = iLicenseFamily76.getFamilyCategory();
        reportConfiguration10.addApprovedLicenseCategory(iLicenseFamily76);
        org.apache.commons.io.filefilter.IOFileFilter iOFileFilter82 = reportConfiguration10.getDirectoryFilter();
        // The following exception was thrown during execution in test generation
        try {
            org.apache.rat.walker.DirectoryWalker directoryWalker83 = new org.apache.rat.walker.DirectoryWalker(file0, (java.io.FilenameFilter) iOFileFilter7, iOFileFilter82);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNull(claimStatistic3);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertNotNull(iOFileFilter7);
        org.junit.Assert.assertNotNull(iOFileFilter8);
        org.junit.Assert.assertNull(filenameFilter11);
        org.junit.Assert.assertNull(filenameFilter14);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + true + "'", boolean15 == true);
        org.junit.Assert.assertNotNull(outputStreamIOSupplier16);
        org.junit.Assert.assertNull(inputStreamIOSupplier17);
        org.junit.Assert.assertNull(claimStatistic18);
        org.junit.Assert.assertNull(filenameFilter21);
        org.junit.Assert.assertTrue("'" + licenseFilter22 + "' != '" + org.apache.rat.license.LicenseSetFactory.LicenseFilter.all + "'", licenseFilter22.equals(org.apache.rat.license.LicenseSetFactory.LicenseFilter.all));
        org.junit.Assert.assertNotNull(iLicenseSet23);
        org.junit.Assert.assertTrue("'" + addLicenseHeaders24 + "' != '" + org.apache.rat.config.AddLicenseHeaders.FALSE + "'", addLicenseHeaders24.equals(org.apache.rat.config.AddLicenseHeaders.FALSE));
        org.junit.Assert.assertNull(claimStatistic28);
        org.junit.Assert.assertTrue("'" + licenseFilter29 + "' != '" + org.apache.rat.license.LicenseSetFactory.LicenseFilter.all + "'", licenseFilter29.equals(org.apache.rat.license.LicenseSetFactory.LicenseFilter.all));
        org.junit.Assert.assertNull(filenameFilter34);
        org.junit.Assert.assertTrue("'" + licenseFilter35 + "' != '" + org.apache.rat.license.LicenseSetFactory.LicenseFilter.all + "'", licenseFilter35.equals(org.apache.rat.license.LicenseSetFactory.LicenseFilter.all));
        org.junit.Assert.assertNotNull(iLicenseSet36);
        org.junit.Assert.assertTrue("'" + addLicenseHeaders37 + "' != '" + org.apache.rat.config.AddLicenseHeaders.FALSE + "'", addLicenseHeaders37.equals(org.apache.rat.config.AddLicenseHeaders.FALSE));
        org.junit.Assert.assertNull(claimStatistic41);
        org.junit.Assert.assertTrue("'" + licenseFilter42 + "' != '" + org.apache.rat.license.LicenseSetFactory.LicenseFilter.all + "'", licenseFilter42.equals(org.apache.rat.license.LicenseSetFactory.LicenseFilter.all));
        org.junit.Assert.assertNotNull(outputStreamIOSupplier48);
        org.junit.Assert.assertTrue("'" + boolean50 + "' != '" + true + "'", boolean50 == true);
        org.junit.Assert.assertTrue("'" + boolean51 + "' != '" + true + "'", boolean51 == true);
        org.junit.Assert.assertTrue("'" + level56 + "' != '" + org.apache.rat.utils.Log.Level.ERROR + "'", level56.equals(org.apache.rat.utils.Log.Level.ERROR));
        org.junit.Assert.assertTrue("'" + level59 + "' != '" + org.apache.rat.utils.Log.Level.DEBUG + "'", level59.equals(org.apache.rat.utils.Log.Level.DEBUG));
        org.junit.Assert.assertNotNull(iLicenseFamilyArray63);
        org.junit.Assert.assertTrue("'" + boolean65 + "' != '" + false + "'", boolean65 == false);
        org.junit.Assert.assertNull(str70);
        org.junit.Assert.assertEquals("'" + str71 + "' != '" + "hi!" + "'", str71, "hi!");
        org.junit.Assert.assertNotNull(iLicenseFamily76);
        org.junit.Assert.assertEquals("'" + str80 + "' != '" + "TMF  " + "'", str80, "TMF  ");
        org.junit.Assert.assertNotNull(iOFileFilter82);
    }

    @Test
    public void test13592() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest27.test13592");
        org.apache.rat.license.ILicenseFamilyBuilder iLicenseFamilyBuilder0 = new org.apache.rat.license.ILicenseFamilyBuilder();
        org.apache.rat.license.ILicenseFamily.Builder builder2 = iLicenseFamilyBuilder0.setLicenseFamilyCategory("Modified BSD License");
        java.lang.String str3 = iLicenseFamilyBuilder0.getCategory();
        org.apache.rat.license.ILicenseFamily.Builder builder5 = iLicenseFamilyBuilder0.setLicenseFamilyCategory("MathcerRefBuildernull");
        java.lang.String str6 = builder5.getCategory();
        org.junit.Assert.assertNotNull(builder2);
        org.junit.Assert.assertEquals("'" + str3 + "' != '" + "Modified BSD License" + "'", str3, "Modified BSD License");
        org.junit.Assert.assertNotNull(builder5);
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "MathcerRefBuildernull" + "'", str6, "MathcerRefBuildernull");
    }

    @Test
    public void test13593() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest27.test13593");
        java.lang.String[] strArray5 = new java.lang.String[] { "http://org/apache/rat/meta-data#LicenseFamilyCategory", "Datum [ name ='http://org/apache/rat/meta-data#LicenseFamilyCategory',value ='GPL1  ']", "MANIFEST.MF", "AllBuilder:", "The MIT License" };
        org.apache.rat.utils.ReportingSet<java.lang.String> strSet6 = new org.apache.rat.utils.ReportingSet<java.lang.String>();
        boolean boolean7 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strSet6, strArray5);
        boolean boolean9 = strSet6.addIfNotPresent("http://org/apache/rat/meta-data#LicenseFamilyName");
        java.util.Iterator<java.lang.String> strItor10 = strSet6.iterator();
        strSet6.clear();
        strSet6.clear();
        java.lang.Object[] objArray13 = strSet6.toArray();
        java.util.stream.Stream<java.lang.String> strStream14 = strSet6.stream();
        java.util.Iterator<java.lang.String> strItor15 = strSet6.iterator();
        boolean boolean17 = strSet6.addIfNotPresent("9b58713f-df10-4eb5-a5e7-b2e82c48d768");
        org.apache.rat.utils.ReportingSet<java.lang.String> strSet19 = strSet6.tailSet("8f82a952-5bfd-446b-ac79-15beef5b3f17");
        java.util.Spliterator<java.lang.String> strSpliterator20 = strSet19.spliterator();
        org.junit.Assert.assertNotNull(strArray5);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + true + "'", boolean7 == true);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + true + "'", boolean9 == true);
        org.junit.Assert.assertNotNull(strItor10);
        org.junit.Assert.assertNotNull(objArray13);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray13), "[]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray13), "[]");
        org.junit.Assert.assertNotNull(strStream14);
        org.junit.Assert.assertNotNull(strItor15);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + true + "'", boolean17 == true);
        org.junit.Assert.assertNotNull(strSet19);
        org.junit.Assert.assertNotNull(strSpliterator20);
    }

    @Test
    public void test13594() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest27.test13594");
        org.apache.rat.configuration.builders.RegexBuilder regexBuilder0 = new org.apache.rat.configuration.builders.RegexBuilder();
        java.lang.String str1 = regexBuilder0.toString();
        java.lang.String str2 = regexBuilder0.toString();
        org.apache.rat.configuration.builders.RegexBuilder regexBuilder4 = regexBuilder0.setExpr("89662180-a89f-497b-9301-227d494d2bae");
        org.apache.rat.configuration.builders.RegexBuilder regexBuilder6 = regexBuilder4.setExpr("http://org/apache/rat/meta-data#LicenseFamilyName");
        org.apache.rat.analysis.IHeaderMatcher iHeaderMatcher7 = regexBuilder4.build();
        org.apache.rat.configuration.builders.RegexBuilder regexBuilder9 = regexBuilder4.setExpr("SpdxBuilder: ef7a8b13-64c3-4510-bb0c-dbf208e1e73f");
        java.lang.String str10 = regexBuilder9.toString();
        org.junit.Assert.assertEquals("'" + str1 + "' != '" + "RegexBuilder: null" + "'", str1, "RegexBuilder: null");
        org.junit.Assert.assertEquals("'" + str2 + "' != '" + "RegexBuilder: null" + "'", str2, "RegexBuilder: null");
        org.junit.Assert.assertNotNull(regexBuilder4);
        org.junit.Assert.assertNotNull(regexBuilder6);
        org.junit.Assert.assertNotNull(iHeaderMatcher7);
        org.junit.Assert.assertNotNull(regexBuilder9);
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "RegexBuilder: SpdxBuilder: ef7a8b13-64c3-4510-bb0c-dbf208e1e73f" + "'", str10, "RegexBuilder: SpdxBuilder: ef7a8b13-64c3-4510-bb0c-dbf208e1e73f");
    }

    @Test
    public void test13595() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest27.test13595");
        org.apache.rat.utils.Log log0 = null;
        org.apache.rat.ReportConfiguration reportConfiguration1 = new org.apache.rat.ReportConfiguration(log0);
        org.apache.rat.report.claim.ClaimStatistic claimStatistic2 = org.apache.rat.Reporter.report(reportConfiguration1);
        org.apache.rat.utils.Log log3 = null;
        org.apache.rat.ReportConfiguration reportConfiguration4 = new org.apache.rat.ReportConfiguration(log3);
        org.apache.rat.report.claim.ClaimStatistic claimStatistic5 = org.apache.rat.Reporter.report(reportConfiguration4);
        org.apache.rat.utils.ReportingSet.Options options6 = org.apache.rat.utils.ReportingSet.Options.OVERWRITE;
        reportConfiguration4.licenseDuplicateOption(options6);
        reportConfiguration1.familyDuplicateOption(options6);
        org.apache.commons.io.function.IOSupplier<java.io.PrintWriter> printWriterIOSupplier9 = reportConfiguration1.getWriter();
        boolean boolean10 = reportConfiguration1.isAddingLicensesForced();
        java.io.FilenameFilter filenameFilter11 = reportConfiguration1.getInputFileFilter();
        java.io.FilenameFilter filenameFilter12 = reportConfiguration1.getInputFileFilter();
        reportConfiguration1.setStyleReport(false);
        org.junit.Assert.assertNull(claimStatistic2);
        org.junit.Assert.assertNull(claimStatistic5);
        org.junit.Assert.assertTrue("'" + options6 + "' != '" + org.apache.rat.utils.ReportingSet.Options.OVERWRITE + "'", options6.equals(org.apache.rat.utils.ReportingSet.Options.OVERWRITE));
        org.junit.Assert.assertNotNull(printWriterIOSupplier9);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertNull(filenameFilter11);
        org.junit.Assert.assertNull(filenameFilter12);
    }

    @Test
    public void test13596() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest27.test13596");
        org.apache.rat.Defaults.Builder builder0 = org.apache.rat.Defaults.builder();
        org.apache.rat.Defaults defaults1 = builder0.build();
        org.apache.rat.Defaults.Builder builder2 = builder0.noDefault();
        org.apache.rat.Defaults.Builder builder4 = builder0.add("W3C Document Copyright");
        java.net.URL uRL5 = null;
        // The following exception was thrown during execution in test generation
        try {
            org.apache.rat.Defaults.Builder builder6 = builder4.add(uRL5);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(builder0);
        org.junit.Assert.assertNotNull(defaults1);
        org.junit.Assert.assertNotNull(builder2);
        org.junit.Assert.assertNotNull(builder4);
    }

    @Test
    public void test13597() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest27.test13597");
        org.apache.rat.utils.DefaultLog defaultLog0 = org.apache.rat.utils.DefaultLog.INSTANCE;
        org.apache.rat.utils.Log log1 = null;
        org.apache.rat.ReportConfiguration reportConfiguration2 = new org.apache.rat.ReportConfiguration(log1);
        java.io.FilenameFilter filenameFilter3 = reportConfiguration2.getInputFileFilter();
        org.apache.rat.license.LicenseSetFactory.LicenseFilter licenseFilter4 = org.apache.rat.license.LicenseSetFactory.LicenseFilter.all;
        java.util.SortedSet<org.apache.rat.license.ILicense> iLicenseSet5 = reportConfiguration2.getLicenses(licenseFilter4);
        org.apache.rat.config.AddLicenseHeaders addLicenseHeaders6 = org.apache.rat.config.AddLicenseHeaders.FALSE;
        reportConfiguration2.setAddLicenseHeaders(addLicenseHeaders6);
        org.apache.rat.utils.Log log8 = null;
        org.apache.rat.ReportConfiguration reportConfiguration9 = new org.apache.rat.ReportConfiguration(log8);
        org.apache.rat.report.claim.ClaimStatistic claimStatistic10 = org.apache.rat.Reporter.report(reportConfiguration9);
        org.apache.rat.license.LicenseSetFactory.LicenseFilter licenseFilter11 = org.apache.rat.license.LicenseSetFactory.LicenseFilter.all;
        org.apache.rat.Reporter.listLicenses(reportConfiguration9, licenseFilter11);
        org.apache.rat.Reporter.listLicenses(reportConfiguration2, licenseFilter11);
        org.apache.rat.utils.Log log14 = null;
        org.apache.rat.ReportConfiguration reportConfiguration15 = new org.apache.rat.ReportConfiguration(log14);
        java.io.FilenameFilter filenameFilter16 = reportConfiguration15.getInputFileFilter();
        org.apache.rat.license.LicenseSetFactory.LicenseFilter licenseFilter17 = org.apache.rat.license.LicenseSetFactory.LicenseFilter.all;
        java.util.SortedSet<org.apache.rat.license.ILicense> iLicenseSet18 = reportConfiguration15.getLicenses(licenseFilter17);
        org.apache.rat.config.AddLicenseHeaders addLicenseHeaders19 = org.apache.rat.config.AddLicenseHeaders.FALSE;
        reportConfiguration15.setAddLicenseHeaders(addLicenseHeaders19);
        org.apache.rat.utils.Log log21 = null;
        org.apache.rat.ReportConfiguration reportConfiguration22 = new org.apache.rat.ReportConfiguration(log21);
        org.apache.rat.report.claim.ClaimStatistic claimStatistic23 = org.apache.rat.Reporter.report(reportConfiguration22);
        org.apache.rat.license.LicenseSetFactory.LicenseFilter licenseFilter24 = org.apache.rat.license.LicenseSetFactory.LicenseFilter.all;
        org.apache.rat.Reporter.listLicenses(reportConfiguration22, licenseFilter24);
        org.apache.rat.Reporter.listLicenses(reportConfiguration15, licenseFilter24);
        org.apache.rat.Reporter.listLicenses(reportConfiguration2, licenseFilter24);
        org.apache.rat.utils.Log log28 = null;
        org.apache.rat.ReportConfiguration reportConfiguration29 = new org.apache.rat.ReportConfiguration(log28);
        org.apache.commons.io.function.IOSupplier<java.io.OutputStream> outputStreamIOSupplier30 = reportConfiguration29.getOutput();
        reportConfiguration2.setOut(outputStreamIOSupplier30);
        org.apache.rat.utils.Log log32 = null;
        org.apache.rat.ReportConfiguration reportConfiguration33 = new org.apache.rat.ReportConfiguration(log32);
        org.apache.rat.report.claim.ClaimStatistic claimStatistic34 = org.apache.rat.Reporter.report(reportConfiguration33);
        org.apache.rat.utils.Log log35 = null;
        org.apache.rat.ReportConfiguration reportConfiguration36 = new org.apache.rat.ReportConfiguration(log35);
        org.apache.rat.report.claim.ClaimStatistic claimStatistic37 = org.apache.rat.Reporter.report(reportConfiguration36);
        org.apache.rat.utils.ReportingSet.Options options38 = org.apache.rat.utils.ReportingSet.Options.OVERWRITE;
        reportConfiguration36.licenseDuplicateOption(options38);
        reportConfiguration33.familyDuplicateOption(options38);
        reportConfiguration2.licenseDuplicateOption(options38);
        reportConfiguration2.addApprovedLicenseCategory("W3C Document Copyright");
        org.apache.rat.utils.Log log44 = null;
        org.apache.rat.ReportConfiguration reportConfiguration45 = new org.apache.rat.ReportConfiguration(log44);
        reportConfiguration45.addApprovedLicenseCategory(".cvsignore");
        org.apache.rat.utils.Log.Level level48 = org.apache.rat.utils.Log.Level.ERROR;
        reportConfiguration45.logLicenseCollisions(level48);
        reportConfiguration2.logLicenseCollisions(level48);
        defaultLog0.setLevel(level48);
        defaultLog0.warn((java.lang.Object) "GNU General Public License, version 3");
        org.apache.rat.utils.Log.Level level54 = defaultLog0.getLevel();
        org.apache.rat.annotation.ApacheV2LicenseAppender apacheV2LicenseAppender55 = new org.apache.rat.annotation.ApacheV2LicenseAppender((org.apache.rat.utils.Log) defaultLog0);
        org.apache.rat.utils.DefaultLog defaultLog56 = org.apache.rat.utils.DefaultLog.INSTANCE;
        org.apache.rat.annotation.ApacheV2LicenseAppender apacheV2LicenseAppender58 = new org.apache.rat.annotation.ApacheV2LicenseAppender((org.apache.rat.utils.Log) defaultLog56, "2953e6cb-20a5-4dcf-a9f5-85c51cc8c635");
        org.apache.rat.utils.Log.Level level59 = defaultLog56.getLevel();
        org.apache.rat.utils.Log.Level level60 = org.apache.rat.utils.Log.Level.DEBUG;
        defaultLog56.log(level60, "W3CD ");
        java.lang.Object obj63 = null;
        defaultLog0.log(level60, obj63);
        org.apache.rat.analysis.matchers.CopyrightMatcher copyrightMatcher70 = new org.apache.rat.analysis.matchers.CopyrightMatcher("", "GPL1 ", "notice", "GPL2 ");
        org.apache.rat.analysis.IHeaderMatcher.State state72 = copyrightMatcher70.matches("false");
        org.apache.rat.analysis.matchers.NotMatcher notMatcher73 = new org.apache.rat.analysis.matchers.NotMatcher("7d01b1b3-e7b9-4f85-b3dd-e0334dea8844", (org.apache.rat.analysis.IHeaderMatcher) copyrightMatcher70);
        org.apache.rat.analysis.IHeaderMatcher.State state74 = notMatcher73.finalizeState();
        defaultLog0.info((java.lang.Object) notMatcher73);
        org.apache.rat.annotation.ApacheV2LicenseAppender apacheV2LicenseAppender77 = new org.apache.rat.annotation.ApacheV2LicenseAppender((org.apache.rat.utils.Log) defaultLog0, "d5b3cead-3d07-43ee-903a-1e1ba144eb11");
        java.io.File file78 = null;
        // The following exception was thrown during execution in test generation
        try {
            apacheV2LicenseAppender77.append(file78);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(defaultLog0);
        org.junit.Assert.assertNull(filenameFilter3);
        org.junit.Assert.assertTrue("'" + licenseFilter4 + "' != '" + org.apache.rat.license.LicenseSetFactory.LicenseFilter.all + "'", licenseFilter4.equals(org.apache.rat.license.LicenseSetFactory.LicenseFilter.all));
        org.junit.Assert.assertNotNull(iLicenseSet5);
        org.junit.Assert.assertTrue("'" + addLicenseHeaders6 + "' != '" + org.apache.rat.config.AddLicenseHeaders.FALSE + "'", addLicenseHeaders6.equals(org.apache.rat.config.AddLicenseHeaders.FALSE));
        org.junit.Assert.assertNull(claimStatistic10);
        org.junit.Assert.assertTrue("'" + licenseFilter11 + "' != '" + org.apache.rat.license.LicenseSetFactory.LicenseFilter.all + "'", licenseFilter11.equals(org.apache.rat.license.LicenseSetFactory.LicenseFilter.all));
        org.junit.Assert.assertNull(filenameFilter16);
        org.junit.Assert.assertTrue("'" + licenseFilter17 + "' != '" + org.apache.rat.license.LicenseSetFactory.LicenseFilter.all + "'", licenseFilter17.equals(org.apache.rat.license.LicenseSetFactory.LicenseFilter.all));
        org.junit.Assert.assertNotNull(iLicenseSet18);
        org.junit.Assert.assertTrue("'" + addLicenseHeaders19 + "' != '" + org.apache.rat.config.AddLicenseHeaders.FALSE + "'", addLicenseHeaders19.equals(org.apache.rat.config.AddLicenseHeaders.FALSE));
        org.junit.Assert.assertNull(claimStatistic23);
        org.junit.Assert.assertTrue("'" + licenseFilter24 + "' != '" + org.apache.rat.license.LicenseSetFactory.LicenseFilter.all + "'", licenseFilter24.equals(org.apache.rat.license.LicenseSetFactory.LicenseFilter.all));
        org.junit.Assert.assertNotNull(outputStreamIOSupplier30);
        org.junit.Assert.assertNull(claimStatistic34);
        org.junit.Assert.assertNull(claimStatistic37);
        org.junit.Assert.assertTrue("'" + options38 + "' != '" + org.apache.rat.utils.ReportingSet.Options.OVERWRITE + "'", options38.equals(org.apache.rat.utils.ReportingSet.Options.OVERWRITE));
        org.junit.Assert.assertTrue("'" + level48 + "' != '" + org.apache.rat.utils.Log.Level.ERROR + "'", level48.equals(org.apache.rat.utils.Log.Level.ERROR));
        org.junit.Assert.assertTrue("'" + level54 + "' != '" + org.apache.rat.utils.Log.Level.ERROR + "'", level54.equals(org.apache.rat.utils.Log.Level.ERROR));
        org.junit.Assert.assertNotNull(defaultLog56);
        org.junit.Assert.assertTrue("'" + level59 + "' != '" + org.apache.rat.utils.Log.Level.ERROR + "'", level59.equals(org.apache.rat.utils.Log.Level.ERROR));
        org.junit.Assert.assertTrue("'" + level60 + "' != '" + org.apache.rat.utils.Log.Level.DEBUG + "'", level60.equals(org.apache.rat.utils.Log.Level.DEBUG));
        org.junit.Assert.assertTrue("'" + state72 + "' != '" + org.apache.rat.analysis.IHeaderMatcher.State.i + "'", state72.equals(org.apache.rat.analysis.IHeaderMatcher.State.i));
        org.junit.Assert.assertTrue("'" + state74 + "' != '" + org.apache.rat.analysis.IHeaderMatcher.State.t + "'", state74.equals(org.apache.rat.analysis.IHeaderMatcher.State.t));
    }

    @Test
    public void test13598() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest27.test13598");
        org.apache.rat.configuration.builders.SpdxBuilder spdxBuilder1 = org.apache.rat.analysis.IHeaderMatcher.Builder.spdx();
        java.lang.String str2 = spdxBuilder1.toString();
        org.apache.rat.configuration.builders.SpdxBuilder spdxBuilder4 = spdxBuilder1.setName("ef7a8b13-64c3-4510-bb0c-dbf208e1e73f");
        org.apache.rat.analysis.IHeaderMatcher iHeaderMatcher5 = spdxBuilder1.build();
        org.apache.rat.analysis.IHeaderMatcher iHeaderMatcher6 = spdxBuilder1.build();
        org.apache.rat.analysis.IHeaderMatcher iHeaderMatcher7 = spdxBuilder1.build();
        org.apache.rat.analysis.matchers.NotMatcher notMatcher8 = new org.apache.rat.analysis.matchers.NotMatcher("TextBuilder: true", iHeaderMatcher7);
        java.lang.String str9 = notMatcher8.getId();
        org.apache.rat.analysis.matchers.NotMatcher notMatcher10 = new org.apache.rat.analysis.matchers.NotMatcher((org.apache.rat.analysis.IHeaderMatcher) notMatcher8);
        java.lang.String str11 = notMatcher10.getId();
        org.junit.Assert.assertNotNull(spdxBuilder1);
        org.junit.Assert.assertEquals("'" + str2 + "' != '" + "SpdxBuilder: null" + "'", str2, "SpdxBuilder: null");
        org.junit.Assert.assertNotNull(spdxBuilder4);
        org.junit.Assert.assertNotNull(iHeaderMatcher5);
        org.junit.Assert.assertNotNull(iHeaderMatcher6);
        org.junit.Assert.assertNotNull(iHeaderMatcher7);
        org.junit.Assert.assertEquals("'" + str9 + "' != '" + "TextBuilder: true" + "'", str9, "TextBuilder: true");
// flaky:         org.junit.Assert.assertEquals("'" + str11 + "' != '" + "e4a1b989-248a-4e39-9d0f-c6fd33532c67" + "'", str11, "e4a1b989-248a-4e39-9d0f-c6fd33532c67");
    }

    @Test
    public void test13599() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest27.test13599");
        org.apache.rat.utils.DefaultLog defaultLog0 = org.apache.rat.utils.DefaultLog.INSTANCE;
        org.apache.rat.license.ILicense.Builder builder1 = org.apache.rat.license.ILicense.builder();
        org.apache.rat.license.ILicense.Builder builder3 = builder1.setLicenseFamilyCategory("");
        org.apache.rat.analysis.matchers.CopyrightMatcher copyrightMatcher7 = new org.apache.rat.analysis.matchers.CopyrightMatcher("", "GPL1 ", "hi!");
        org.apache.rat.analysis.IHeaderMatcher.State state8 = copyrightMatcher7.finalizeState();
        org.apache.rat.license.ILicense.Builder builder9 = builder3.setMatcher((org.apache.rat.analysis.IHeaderMatcher) copyrightMatcher7);
        org.apache.rat.license.ILicense.Builder builder11 = builder9.setLicenseFamilyCategory("");
        defaultLog0.error((java.lang.Object) builder11);
        org.apache.rat.ReportConfiguration reportConfiguration13 = new org.apache.rat.ReportConfiguration((org.apache.rat.utils.Log) defaultLog0);
        org.apache.rat.Defaults.Builder builder14 = org.apache.rat.Defaults.builder();
        org.apache.rat.Defaults defaults15 = builder14.build();
        org.apache.rat.utils.Log log16 = null;
        org.apache.rat.ReportConfiguration reportConfiguration17 = new org.apache.rat.ReportConfiguration(log16);
        java.io.FilenameFilter filenameFilter18 = reportConfiguration17.getInputFileFilter();
        org.apache.rat.license.LicenseSetFactory.LicenseFilter licenseFilter19 = org.apache.rat.license.LicenseSetFactory.LicenseFilter.all;
        java.util.SortedSet<org.apache.rat.license.ILicense> iLicenseSet20 = reportConfiguration17.getLicenses(licenseFilter19);
        org.apache.rat.config.AddLicenseHeaders addLicenseHeaders21 = org.apache.rat.config.AddLicenseHeaders.FALSE;
        reportConfiguration17.setAddLicenseHeaders(addLicenseHeaders21);
        org.apache.rat.utils.Log log23 = null;
        org.apache.rat.ReportConfiguration reportConfiguration24 = new org.apache.rat.ReportConfiguration(log23);
        org.apache.rat.report.claim.ClaimStatistic claimStatistic25 = org.apache.rat.Reporter.report(reportConfiguration24);
        org.apache.rat.license.LicenseSetFactory.LicenseFilter licenseFilter26 = org.apache.rat.license.LicenseSetFactory.LicenseFilter.all;
        org.apache.rat.Reporter.listLicenses(reportConfiguration24, licenseFilter26);
        org.apache.rat.Reporter.listLicenses(reportConfiguration17, licenseFilter26);
        org.apache.rat.utils.Log log29 = null;
        org.apache.rat.ReportConfiguration reportConfiguration30 = new org.apache.rat.ReportConfiguration(log29);
        java.io.FilenameFilter filenameFilter31 = reportConfiguration30.getInputFileFilter();
        org.apache.rat.license.LicenseSetFactory.LicenseFilter licenseFilter32 = org.apache.rat.license.LicenseSetFactory.LicenseFilter.all;
        java.util.SortedSet<org.apache.rat.license.ILicense> iLicenseSet33 = reportConfiguration30.getLicenses(licenseFilter32);
        org.apache.rat.config.AddLicenseHeaders addLicenseHeaders34 = org.apache.rat.config.AddLicenseHeaders.FALSE;
        reportConfiguration30.setAddLicenseHeaders(addLicenseHeaders34);
        org.apache.rat.utils.Log log36 = null;
        org.apache.rat.ReportConfiguration reportConfiguration37 = new org.apache.rat.ReportConfiguration(log36);
        org.apache.rat.report.claim.ClaimStatistic claimStatistic38 = org.apache.rat.Reporter.report(reportConfiguration37);
        org.apache.rat.license.LicenseSetFactory.LicenseFilter licenseFilter39 = org.apache.rat.license.LicenseSetFactory.LicenseFilter.all;
        org.apache.rat.Reporter.listLicenses(reportConfiguration37, licenseFilter39);
        org.apache.rat.Reporter.listLicenses(reportConfiguration30, licenseFilter39);
        java.util.SortedSet<org.apache.rat.license.ILicenseFamily> iLicenseFamilySet42 = reportConfiguration17.getLicenseFamilies(licenseFilter39);
        java.util.SortedSet<org.apache.rat.license.ILicense> iLicenseSet43 = defaults15.getLicenses(licenseFilter39);
        org.apache.rat.utils.ReportingSet<org.apache.rat.license.ILicense> iLicenseSet44 = new org.apache.rat.utils.ReportingSet<org.apache.rat.license.ILicense>(iLicenseSet43);
        org.apache.rat.document.IDocumentAnalyser iDocumentAnalyser45 = org.apache.rat.analysis.DefaultAnalyserFactory.createDefaultAnalyser((org.apache.rat.utils.Log) defaultLog0, (java.util.Collection<org.apache.rat.license.ILicense>) iLicenseSet43);
        org.apache.rat.document.IDocumentAnalyser[] iDocumentAnalyserArray46 = new org.apache.rat.document.IDocumentAnalyser[] { iDocumentAnalyser45 };
        org.apache.rat.document.impl.util.DocumentAnalyserMultiplexer documentAnalyserMultiplexer47 = new org.apache.rat.document.impl.util.DocumentAnalyserMultiplexer(iDocumentAnalyserArray46);
        org.apache.rat.document.impl.util.DocumentAnalyserMultiplexer documentAnalyserMultiplexer48 = new org.apache.rat.document.impl.util.DocumentAnalyserMultiplexer(iDocumentAnalyserArray46);
        org.apache.rat.document.impl.util.DocumentAnalyserMultiplexer documentAnalyserMultiplexer49 = new org.apache.rat.document.impl.util.DocumentAnalyserMultiplexer(iDocumentAnalyserArray46);
        java.lang.Class<?> wildcardClass50 = iDocumentAnalyserArray46.getClass();
        org.junit.Assert.assertNotNull(defaultLog0);
        org.junit.Assert.assertNotNull(builder1);
        org.junit.Assert.assertNotNull(builder3);
        org.junit.Assert.assertTrue("'" + state8 + "' != '" + org.apache.rat.analysis.IHeaderMatcher.State.f + "'", state8.equals(org.apache.rat.analysis.IHeaderMatcher.State.f));
        org.junit.Assert.assertNotNull(builder9);
        org.junit.Assert.assertNotNull(builder11);
        org.junit.Assert.assertNotNull(builder14);
        org.junit.Assert.assertNotNull(defaults15);
        org.junit.Assert.assertNull(filenameFilter18);
        org.junit.Assert.assertTrue("'" + licenseFilter19 + "' != '" + org.apache.rat.license.LicenseSetFactory.LicenseFilter.all + "'", licenseFilter19.equals(org.apache.rat.license.LicenseSetFactory.LicenseFilter.all));
        org.junit.Assert.assertNotNull(iLicenseSet20);
        org.junit.Assert.assertTrue("'" + addLicenseHeaders21 + "' != '" + org.apache.rat.config.AddLicenseHeaders.FALSE + "'", addLicenseHeaders21.equals(org.apache.rat.config.AddLicenseHeaders.FALSE));
        org.junit.Assert.assertNull(claimStatistic25);
        org.junit.Assert.assertTrue("'" + licenseFilter26 + "' != '" + org.apache.rat.license.LicenseSetFactory.LicenseFilter.all + "'", licenseFilter26.equals(org.apache.rat.license.LicenseSetFactory.LicenseFilter.all));
        org.junit.Assert.assertNull(filenameFilter31);
        org.junit.Assert.assertTrue("'" + licenseFilter32 + "' != '" + org.apache.rat.license.LicenseSetFactory.LicenseFilter.all + "'", licenseFilter32.equals(org.apache.rat.license.LicenseSetFactory.LicenseFilter.all));
        org.junit.Assert.assertNotNull(iLicenseSet33);
        org.junit.Assert.assertTrue("'" + addLicenseHeaders34 + "' != '" + org.apache.rat.config.AddLicenseHeaders.FALSE + "'", addLicenseHeaders34.equals(org.apache.rat.config.AddLicenseHeaders.FALSE));
        org.junit.Assert.assertNull(claimStatistic38);
        org.junit.Assert.assertTrue("'" + licenseFilter39 + "' != '" + org.apache.rat.license.LicenseSetFactory.LicenseFilter.all + "'", licenseFilter39.equals(org.apache.rat.license.LicenseSetFactory.LicenseFilter.all));
        org.junit.Assert.assertNotNull(iLicenseFamilySet42);
        org.junit.Assert.assertNotNull(iLicenseSet43);
        org.junit.Assert.assertNotNull(iDocumentAnalyser45);
        org.junit.Assert.assertNotNull(iDocumentAnalyserArray46);
        org.junit.Assert.assertNotNull(wildcardClass50);
    }

    @Test
    public void test13600() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest27.test13600");
        java.lang.String[] strArray5 = new java.lang.String[] { "http://org/apache/rat/meta-data#LicenseFamilyCategory", "Datum [ name ='http://org/apache/rat/meta-data#LicenseFamilyCategory',value ='GPL1  ']", "MANIFEST.MF", "AllBuilder:", "The MIT License" };
        org.apache.rat.utils.ReportingSet<java.lang.String> strSet6 = new org.apache.rat.utils.ReportingSet<java.lang.String>();
        boolean boolean7 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strSet6, strArray5);
        boolean boolean9 = strSet6.addIfNotPresent("http://org/apache/rat/meta-data#LicenseFamilyName");
        java.util.Iterator<java.lang.String> strItor10 = strSet6.iterator();
        java.util.Comparator<? super java.lang.String> wildcardComparator11 = strSet6.comparator();
        java.util.stream.Stream<java.lang.String> strStream12 = strSet6.stream();
        java.lang.Object[] objArray13 = strSet6.toArray();
        org.apache.rat.utils.ReportingSet<java.lang.String> strSet15 = strSet6.tailSet("");
        org.apache.rat.license.ILicenseFamily[] iLicenseFamilyArray16 = new org.apache.rat.license.ILicenseFamily[] {};
        java.util.ArrayList<org.apache.rat.license.ILicenseFamily> iLicenseFamilyList17 = new java.util.ArrayList<org.apache.rat.license.ILicenseFamily>();
        boolean boolean18 = java.util.Collections.addAll((java.util.Collection<org.apache.rat.license.ILicenseFamily>) iLicenseFamilyList17, iLicenseFamilyArray16);
        org.apache.rat.policy.DefaultPolicy defaultPolicy19 = new org.apache.rat.policy.DefaultPolicy((java.util.Collection<org.apache.rat.license.ILicenseFamily>) iLicenseFamilyList17);
        org.apache.rat.api.Document document20 = null;
        defaultPolicy19.analyse(document20);
        org.apache.rat.api.Document document22 = null;
        defaultPolicy19.analyse(document22);
        org.apache.rat.api.Document document24 = null;
        defaultPolicy19.analyse(document24);
        org.apache.rat.api.Document document26 = null;
        defaultPolicy19.analyse(document26);
        java.util.SortedSet<org.apache.rat.license.ILicenseFamily> iLicenseFamilySet28 = defaultPolicy19.getApprovedLicenseNames();
        boolean boolean29 = strSet6.retainAll((java.util.Collection<org.apache.rat.license.ILicenseFamily>) iLicenseFamilySet28);
        java.util.function.Function<java.lang.String, java.lang.String> strFunction30 = null;
        org.apache.rat.utils.ReportingSet<java.lang.String> strSet31 = strSet6.setMsgFormat(strFunction30);
        org.apache.rat.utils.ReportingSet<java.lang.String> strSet33 = strSet31.headSet("02f4d6d1-900a-4ff1-8f08-c218e73d02b3");
        org.junit.Assert.assertNotNull(strArray5);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + true + "'", boolean7 == true);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + true + "'", boolean9 == true);
        org.junit.Assert.assertNotNull(strItor10);
        org.junit.Assert.assertNull(wildcardComparator11);
        org.junit.Assert.assertNotNull(strStream12);
        org.junit.Assert.assertNotNull(objArray13);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray13), "[AllBuilder:, Datum [ name ='http://org/apache/rat/meta-data#LicenseFamilyCategory',value ='GPL1  '], MANIFEST.MF, The MIT License, http://org/apache/rat/meta-data#LicenseFamilyCategory, http://org/apache/rat/meta-data#LicenseFamilyName]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray13), "[AllBuilder:, Datum [ name ='http://org/apache/rat/meta-data#LicenseFamilyCategory',value ='GPL1  '], MANIFEST.MF, The MIT License, http://org/apache/rat/meta-data#LicenseFamilyCategory, http://org/apache/rat/meta-data#LicenseFamilyName]");
        org.junit.Assert.assertNotNull(strSet15);
        org.junit.Assert.assertNotNull(iLicenseFamilyArray16);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + false + "'", boolean18 == false);
        org.junit.Assert.assertNotNull(iLicenseFamilySet28);
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + true + "'", boolean29 == true);
        org.junit.Assert.assertNotNull(strSet31);
        org.junit.Assert.assertNotNull(strSet33);
    }

    @Test
    public void test13601() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest27.test13601");
        org.apache.rat.utils.ReportingSet<java.lang.String> strSet0 = new org.apache.rat.utils.ReportingSet<java.lang.String>();
        boolean boolean2 = strSet0.addIfNotPresent("OASIS Open License");
        java.util.function.Function<java.lang.String, java.lang.String> strFunction3 = null;
        org.apache.rat.utils.ReportingSet<java.lang.String> strSet4 = strSet0.setMsgFormat(strFunction3);
        java.util.Iterator<java.lang.String> strItor5 = strSet0.iterator();
        boolean boolean7 = strSet0.addIfNotPresent("c523095e-4421-4cc4-93e2-039f23b91f76");
        org.apache.rat.utils.DefaultLog defaultLog8 = org.apache.rat.utils.DefaultLog.INSTANCE;
        org.apache.rat.configuration.builders.AllBuilder allBuilder9 = new org.apache.rat.configuration.builders.AllBuilder();
        org.apache.rat.configuration.builders.MatcherRefBuilder matcherRefBuilder10 = org.apache.rat.analysis.IHeaderMatcher.Builder.matcherRef();
        boolean boolean11 = matcherRefBuilder10.hasId();
        java.lang.String str12 = matcherRefBuilder10.toString();
        org.apache.rat.configuration.builders.AnyBuilder anyBuilder13 = org.apache.rat.analysis.IHeaderMatcher.Builder.any();
        org.apache.rat.configuration.builders.NotBuilder notBuilder14 = new org.apache.rat.configuration.builders.NotBuilder();
        java.lang.String str15 = notBuilder14.toString();
        org.apache.rat.configuration.builders.MatcherRefBuilder matcherRefBuilder16 = org.apache.rat.analysis.IHeaderMatcher.Builder.matcherRef();
        boolean boolean17 = matcherRefBuilder16.hasId();
        java.util.Map<java.lang.String, org.apache.rat.analysis.IHeaderMatcher> strMap18 = null;
        org.apache.rat.configuration.builders.MatcherRefBuilder matcherRefBuilder19 = matcherRefBuilder16.setMatchers(strMap18);
        org.apache.rat.configuration.builders.AllBuilder allBuilder20 = new org.apache.rat.configuration.builders.AllBuilder();
        org.apache.rat.configuration.builders.CopyrightBuilder copyrightBuilder21 = org.apache.rat.analysis.IHeaderMatcher.Builder.copyright();
        org.apache.rat.configuration.builders.CopyrightBuilder copyrightBuilder23 = copyrightBuilder21.setStart("OASIS");
        java.lang.String str24 = copyrightBuilder21.toString();
        org.apache.rat.configuration.builders.CopyrightBuilder copyrightBuilder26 = copyrightBuilder21.setStart("223f0aba-15d4-49e9-901e-5740c137aebf");
        org.apache.rat.configuration.builders.MatcherRefBuilder matcherRefBuilder27 = org.apache.rat.analysis.IHeaderMatcher.Builder.matcherRef();
        boolean boolean28 = matcherRefBuilder27.hasId();
        org.apache.rat.configuration.builders.CopyrightBuilder copyrightBuilder29 = org.apache.rat.analysis.IHeaderMatcher.Builder.copyright();
        org.apache.rat.configuration.builders.CopyrightBuilder copyrightBuilder31 = copyrightBuilder29.setStart("OASIS");
        java.lang.String str32 = copyrightBuilder29.toString();
        org.apache.rat.configuration.builders.CopyrightBuilder copyrightBuilder34 = copyrightBuilder29.setStart("223f0aba-15d4-49e9-901e-5740c137aebf");
        org.apache.rat.configuration.builders.CopyrightBuilder copyrightBuilder35 = org.apache.rat.analysis.IHeaderMatcher.Builder.copyright();
        org.apache.rat.configuration.builders.CopyrightBuilder copyrightBuilder36 = org.apache.rat.analysis.IHeaderMatcher.Builder.copyright();
        java.lang.String str37 = copyrightBuilder36.toString();
        org.apache.rat.configuration.builders.CopyrightBuilder copyrightBuilder39 = copyrightBuilder36.setEnd(".cvsignore");
        boolean boolean40 = copyrightBuilder36.hasId();
        org.apache.rat.configuration.builders.CopyrightBuilder copyrightBuilder41 = org.apache.rat.analysis.IHeaderMatcher.Builder.copyright();
        java.lang.String str42 = copyrightBuilder41.toString();
        org.apache.rat.configuration.builders.CopyrightBuilder copyrightBuilder44 = copyrightBuilder41.setEnd(".cvsignore");
        boolean boolean45 = copyrightBuilder41.hasId();
        java.lang.String str46 = copyrightBuilder41.toString();
        org.apache.rat.configuration.builders.CopyrightBuilder copyrightBuilder47 = org.apache.rat.analysis.IHeaderMatcher.Builder.copyright();
        org.apache.rat.configuration.builders.CopyrightBuilder copyrightBuilder49 = copyrightBuilder47.setStart("OASIS");
        org.apache.rat.configuration.builders.AnyBuilder anyBuilder50 = org.apache.rat.analysis.IHeaderMatcher.Builder.any();
        org.apache.rat.configuration.builders.MatcherRefBuilder matcherRefBuilder51 = org.apache.rat.analysis.IHeaderMatcher.Builder.matcherRef();
        boolean boolean52 = matcherRefBuilder51.hasId();
        java.util.Map<java.lang.String, org.apache.rat.analysis.IHeaderMatcher> strMap53 = null;
        org.apache.rat.configuration.builders.MatcherRefBuilder matcherRefBuilder54 = matcherRefBuilder51.setMatchers(strMap53);
        org.apache.rat.configuration.builders.CopyrightBuilder copyrightBuilder55 = org.apache.rat.analysis.IHeaderMatcher.Builder.copyright();
        org.apache.rat.configuration.builders.MatcherRefBuilder matcherRefBuilder56 = org.apache.rat.analysis.IHeaderMatcher.Builder.matcherRef();
        boolean boolean57 = matcherRefBuilder56.hasId();
        java.lang.String str58 = matcherRefBuilder56.toString();
        java.util.Map<java.lang.String, org.apache.rat.analysis.IHeaderMatcher> strMap59 = null;
        org.apache.rat.configuration.builders.MatcherRefBuilder matcherRefBuilder60 = matcherRefBuilder56.setMatchers(strMap59);
        org.apache.rat.analysis.IHeaderMatcher.Builder[] builderArray61 = new org.apache.rat.analysis.IHeaderMatcher.Builder[] { matcherRefBuilder16, allBuilder20, copyrightBuilder26, matcherRefBuilder27, copyrightBuilder29, copyrightBuilder35, copyrightBuilder36, copyrightBuilder41, copyrightBuilder47, anyBuilder50, matcherRefBuilder51, copyrightBuilder55, matcherRefBuilder56 };
        java.util.ArrayList<org.apache.rat.analysis.IHeaderMatcher.Builder> builderList62 = new java.util.ArrayList<org.apache.rat.analysis.IHeaderMatcher.Builder>();
        boolean boolean63 = java.util.Collections.addAll((java.util.Collection<org.apache.rat.analysis.IHeaderMatcher.Builder>) builderList62, builderArray61);
        org.apache.rat.configuration.builders.AbstractBuilder abstractBuilder64 = notBuilder14.add((java.util.Collection<org.apache.rat.analysis.IHeaderMatcher.Builder>) builderList62);
        org.apache.rat.configuration.builders.MatcherRefBuilder matcherRefBuilder65 = new org.apache.rat.configuration.builders.MatcherRefBuilder();
        org.apache.rat.analysis.IHeaderMatcher.Builder[] builderArray66 = new org.apache.rat.analysis.IHeaderMatcher.Builder[] { matcherRefBuilder10, anyBuilder13, notBuilder14, matcherRefBuilder65 };
        java.util.ArrayList<org.apache.rat.analysis.IHeaderMatcher.Builder> builderList67 = new java.util.ArrayList<org.apache.rat.analysis.IHeaderMatcher.Builder>();
        boolean boolean68 = java.util.Collections.addAll((java.util.Collection<org.apache.rat.analysis.IHeaderMatcher.Builder>) builderList67, builderArray66);
        org.apache.rat.configuration.builders.AbstractBuilder abstractBuilder69 = allBuilder9.add((java.util.Collection<org.apache.rat.analysis.IHeaderMatcher.Builder>) builderList67);
        defaultLog8.info((java.lang.Object) allBuilder9);
        org.apache.rat.annotation.ApacheV2LicenseAppender apacheV2LicenseAppender72 = new org.apache.rat.annotation.ApacheV2LicenseAppender((org.apache.rat.utils.Log) defaultLog8, "true");
        org.apache.rat.annotation.ApacheV2LicenseAppender apacheV2LicenseAppender73 = new org.apache.rat.annotation.ApacheV2LicenseAppender((org.apache.rat.utils.Log) defaultLog8);
        org.apache.rat.annotation.ApacheV2LicenseAppender apacheV2LicenseAppender75 = new org.apache.rat.annotation.ApacheV2LicenseAppender((org.apache.rat.utils.Log) defaultLog8, "NotBuilder: null");
        org.apache.rat.utils.ReportingSet<java.lang.String> strSet76 = strSet0.setLog((org.apache.rat.utils.Log) defaultLog8);
        java.lang.Object obj77 = null;
        java.lang.Throwable throwable78 = null;
        // The following exception was thrown during execution in test generation
        try {
            defaultLog8.warn(obj77, throwable78);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + true + "'", boolean2 == true);
        org.junit.Assert.assertNotNull(strSet4);
        org.junit.Assert.assertNotNull(strItor5);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + true + "'", boolean7 == true);
        org.junit.Assert.assertNotNull(defaultLog8);
        org.junit.Assert.assertNotNull(matcherRefBuilder10);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
        org.junit.Assert.assertEquals("'" + str12 + "' != '" + "MathcerRefBuilder: null" + "'", str12, "MathcerRefBuilder: null");
        org.junit.Assert.assertNotNull(anyBuilder13);
        org.junit.Assert.assertEquals("'" + str15 + "' != '" + "NotBuilder: null" + "'", str15, "NotBuilder: null");
        org.junit.Assert.assertNotNull(matcherRefBuilder16);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + false + "'", boolean17 == false);
        org.junit.Assert.assertNotNull(matcherRefBuilder19);
        org.junit.Assert.assertNotNull(copyrightBuilder21);
        org.junit.Assert.assertNotNull(copyrightBuilder23);
        org.junit.Assert.assertEquals("'" + str24 + "' != '" + "Copyright Builder: s:OASIS e:null o:null" + "'", str24, "Copyright Builder: s:OASIS e:null o:null");
        org.junit.Assert.assertNotNull(copyrightBuilder26);
        org.junit.Assert.assertNotNull(matcherRefBuilder27);
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + false + "'", boolean28 == false);
        org.junit.Assert.assertNotNull(copyrightBuilder29);
        org.junit.Assert.assertNotNull(copyrightBuilder31);
        org.junit.Assert.assertEquals("'" + str32 + "' != '" + "Copyright Builder: s:OASIS e:null o:null" + "'", str32, "Copyright Builder: s:OASIS e:null o:null");
        org.junit.Assert.assertNotNull(copyrightBuilder34);
        org.junit.Assert.assertNotNull(copyrightBuilder35);
        org.junit.Assert.assertNotNull(copyrightBuilder36);
        org.junit.Assert.assertEquals("'" + str37 + "' != '" + "Copyright Builder: s:null e:null o:null" + "'", str37, "Copyright Builder: s:null e:null o:null");
        org.junit.Assert.assertNotNull(copyrightBuilder39);
        org.junit.Assert.assertTrue("'" + boolean40 + "' != '" + false + "'", boolean40 == false);
        org.junit.Assert.assertNotNull(copyrightBuilder41);
        org.junit.Assert.assertEquals("'" + str42 + "' != '" + "Copyright Builder: s:null e:null o:null" + "'", str42, "Copyright Builder: s:null e:null o:null");
        org.junit.Assert.assertNotNull(copyrightBuilder44);
        org.junit.Assert.assertTrue("'" + boolean45 + "' != '" + false + "'", boolean45 == false);
        org.junit.Assert.assertEquals("'" + str46 + "' != '" + "Copyright Builder: s:null e:.cvsignore o:null" + "'", str46, "Copyright Builder: s:null e:.cvsignore o:null");
        org.junit.Assert.assertNotNull(copyrightBuilder47);
        org.junit.Assert.assertNotNull(copyrightBuilder49);
        org.junit.Assert.assertNotNull(anyBuilder50);
        org.junit.Assert.assertNotNull(matcherRefBuilder51);
        org.junit.Assert.assertTrue("'" + boolean52 + "' != '" + false + "'", boolean52 == false);
        org.junit.Assert.assertNotNull(matcherRefBuilder54);
        org.junit.Assert.assertNotNull(copyrightBuilder55);
        org.junit.Assert.assertNotNull(matcherRefBuilder56);
        org.junit.Assert.assertTrue("'" + boolean57 + "' != '" + false + "'", boolean57 == false);
        org.junit.Assert.assertEquals("'" + str58 + "' != '" + "MathcerRefBuilder: null" + "'", str58, "MathcerRefBuilder: null");
        org.junit.Assert.assertNotNull(matcherRefBuilder60);
        org.junit.Assert.assertNotNull(builderArray61);
        org.junit.Assert.assertTrue("'" + boolean63 + "' != '" + true + "'", boolean63 == true);
        org.junit.Assert.assertNotNull(abstractBuilder64);
        org.junit.Assert.assertNotNull(builderArray66);
        org.junit.Assert.assertTrue("'" + boolean68 + "' != '" + true + "'", boolean68 == true);
        org.junit.Assert.assertNotNull(abstractBuilder69);
        org.junit.Assert.assertNotNull(strSet76);
    }

    @Test
    public void test13602() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest27.test13602");
        org.apache.rat.license.ILicenseFamilyBuilder iLicenseFamilyBuilder0 = new org.apache.rat.license.ILicenseFamilyBuilder();
        java.lang.String str1 = iLicenseFamilyBuilder0.getCategory();
        org.apache.rat.license.ILicenseFamily.Builder builder3 = iLicenseFamilyBuilder0.setLicenseFamilyCategory("AL   ");
        org.apache.rat.license.ILicenseFamily.Builder builder5 = iLicenseFamilyBuilder0.setLicenseFamilyName("binary");
        org.apache.rat.license.ILicenseFamily iLicenseFamily6 = iLicenseFamilyBuilder0.build();
        org.apache.rat.license.ILicenseFamily.Builder builder8 = iLicenseFamilyBuilder0.setLicenseFamilyName("");
        org.apache.rat.license.ILicenseFamily.Builder builder10 = iLicenseFamilyBuilder0.setLicenseFamilyName("TextBuilder: TextBuilder: 4fcae17...");
        org.junit.Assert.assertNull(str1);
        org.junit.Assert.assertNotNull(builder3);
        org.junit.Assert.assertNotNull(builder5);
        org.junit.Assert.assertNotNull(iLicenseFamily6);
        org.junit.Assert.assertNotNull(builder8);
        org.junit.Assert.assertNotNull(builder10);
    }

    @Test
    public void test13603() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest27.test13603");
        org.apache.rat.utils.DefaultLog defaultLog0 = org.apache.rat.utils.DefaultLog.INSTANCE;
        org.apache.rat.license.ILicense.Builder builder1 = org.apache.rat.license.ILicense.builder();
        org.apache.rat.license.ILicense.Builder builder3 = builder1.setLicenseFamilyCategory("");
        org.apache.rat.analysis.matchers.CopyrightMatcher copyrightMatcher7 = new org.apache.rat.analysis.matchers.CopyrightMatcher("", "GPL1 ", "hi!");
        org.apache.rat.analysis.IHeaderMatcher.State state8 = copyrightMatcher7.finalizeState();
        org.apache.rat.license.ILicense.Builder builder9 = builder3.setMatcher((org.apache.rat.analysis.IHeaderMatcher) copyrightMatcher7);
        org.apache.rat.license.ILicense.Builder builder11 = builder9.setLicenseFamilyCategory("");
        defaultLog0.error((java.lang.Object) builder11);
        org.apache.rat.utils.Log.Level level13 = defaultLog0.getLevel();
        org.apache.rat.utils.Log log14 = null;
        org.apache.rat.ReportConfiguration reportConfiguration15 = new org.apache.rat.ReportConfiguration(log14);
        reportConfiguration15.addApprovedLicenseCategory(".cvsignore");
        org.apache.rat.utils.Log.Level level18 = org.apache.rat.utils.Log.Level.ERROR;
        reportConfiguration15.logLicenseCollisions(level18);
        defaultLog0.log(level18, "AnyBuilder:");
        org.apache.rat.analysis.license.FullTextMatchingLicense fullTextMatchingLicense22 = new org.apache.rat.analysis.license.FullTextMatchingLicense();
        fullTextMatchingLicense22.setLicenseFamilyName("hi!");
        java.lang.String str25 = fullTextMatchingLicense22.getLicenseFamilyCategory();
        java.lang.String str26 = fullTextMatchingLicense22.getLicenseFamilyName();
        fullTextMatchingLicense22.setLicenseFamilyName("SpdxBuilder: null");
        fullTextMatchingLicense22.setLicenseFamilyCategory("TMF");
        fullTextMatchingLicense22.setFullText("W3C  ");
        java.lang.String str33 = fullTextMatchingLicense22.getLicenseFamilyCategory();
        org.apache.rat.license.ILicense.Builder builder34 = fullTextMatchingLicense22.getLicense();
        org.apache.rat.configuration.builders.AllBuilder allBuilder35 = new org.apache.rat.configuration.builders.AllBuilder();
        java.lang.String str36 = allBuilder35.toString();
        java.lang.String str37 = allBuilder35.toString();
        java.lang.String str38 = allBuilder35.toString();
        org.apache.rat.analysis.IHeaderMatcher iHeaderMatcher39 = allBuilder35.build();
        org.apache.rat.license.ILicense.Builder builder40 = builder34.setMatcher((org.apache.rat.analysis.IHeaderMatcher.Builder) allBuilder35);
        org.apache.rat.configuration.builders.AllBuilder allBuilder41 = new org.apache.rat.configuration.builders.AllBuilder();
        java.lang.String str42 = allBuilder41.toString();
        java.util.List<org.apache.rat.analysis.IHeaderMatcher> iHeaderMatcherList43 = allBuilder41.getChildren();
        org.apache.rat.configuration.builders.MatcherRefBuilder matcherRefBuilder44 = new org.apache.rat.configuration.builders.MatcherRefBuilder();
        org.apache.rat.configuration.builders.AbstractBuilder abstractBuilder45 = allBuilder41.add((org.apache.rat.analysis.IHeaderMatcher.Builder) matcherRefBuilder44);
        org.apache.rat.configuration.builders.MatcherRefBuilder matcherRefBuilder47 = matcherRefBuilder44.setRefId("http:");
        java.util.Map<java.lang.String, org.apache.rat.analysis.IHeaderMatcher> strMap48 = null;
        org.apache.rat.configuration.builders.MatcherRefBuilder matcherRefBuilder49 = matcherRefBuilder44.setMatchers(strMap48);
        org.apache.rat.configuration.builders.MatcherRefBuilder matcherRefBuilder51 = matcherRefBuilder44.setRefId("AllBuilder:");
        org.apache.rat.configuration.builders.AbstractBuilder abstractBuilder53 = matcherRefBuilder51.setId("MathcerRefBuilder: t true");
        java.lang.String str54 = matcherRefBuilder51.toString();
        org.apache.rat.license.ILicense.Builder builder55 = builder40.setMatcher((org.apache.rat.analysis.IHeaderMatcher.Builder) matcherRefBuilder51);
        defaultLog0.warn((java.lang.Object) builder40);
        org.apache.rat.annotation.ApacheV2LicenseAppender apacheV2LicenseAppender58 = new org.apache.rat.annotation.ApacheV2LicenseAppender((org.apache.rat.utils.Log) defaultLog0, "659c96ab5c6e4067997afa311a81a261");
        apacheV2LicenseAppender58.setForce(false);
        org.junit.Assert.assertNotNull(defaultLog0);
        org.junit.Assert.assertNotNull(builder1);
        org.junit.Assert.assertNotNull(builder3);
        org.junit.Assert.assertTrue("'" + state8 + "' != '" + org.apache.rat.analysis.IHeaderMatcher.State.f + "'", state8.equals(org.apache.rat.analysis.IHeaderMatcher.State.f));
        org.junit.Assert.assertNotNull(builder9);
        org.junit.Assert.assertNotNull(builder11);
        org.junit.Assert.assertTrue("'" + level13 + "' != '" + org.apache.rat.utils.Log.Level.ERROR + "'", level13.equals(org.apache.rat.utils.Log.Level.ERROR));
        org.junit.Assert.assertTrue("'" + level18 + "' != '" + org.apache.rat.utils.Log.Level.ERROR + "'", level18.equals(org.apache.rat.utils.Log.Level.ERROR));
        org.junit.Assert.assertNull(str25);
        org.junit.Assert.assertEquals("'" + str26 + "' != '" + "hi!" + "'", str26, "hi!");
        org.junit.Assert.assertEquals("'" + str33 + "' != '" + "TMF" + "'", str33, "TMF");
        org.junit.Assert.assertNotNull(builder34);
        org.junit.Assert.assertEquals("'" + str36 + "' != '" + "AllBuilder:" + "'", str36, "AllBuilder:");
        org.junit.Assert.assertEquals("'" + str37 + "' != '" + "AllBuilder:" + "'", str37, "AllBuilder:");
        org.junit.Assert.assertEquals("'" + str38 + "' != '" + "AllBuilder:" + "'", str38, "AllBuilder:");
        org.junit.Assert.assertNotNull(iHeaderMatcher39);
        org.junit.Assert.assertNotNull(builder40);
        org.junit.Assert.assertEquals("'" + str42 + "' != '" + "AllBuilder:" + "'", str42, "AllBuilder:");
        org.junit.Assert.assertNotNull(iHeaderMatcherList43);
        org.junit.Assert.assertNotNull(abstractBuilder45);
        org.junit.Assert.assertNotNull(matcherRefBuilder47);
        org.junit.Assert.assertNotNull(matcherRefBuilder49);
        org.junit.Assert.assertNotNull(matcherRefBuilder51);
        org.junit.Assert.assertNotNull(abstractBuilder53);
        org.junit.Assert.assertEquals("'" + str54 + "' != '" + "MathcerRefBuilder: AllBuilder:" + "'", str54, "MathcerRefBuilder: AllBuilder:");
        org.junit.Assert.assertNotNull(builder55);
    }

    @Test
    public void test13604() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest27.test13604");
        org.apache.rat.utils.Log log0 = null;
        org.apache.rat.ReportConfiguration reportConfiguration1 = new org.apache.rat.ReportConfiguration(log0);
        reportConfiguration1.addApprovedLicenseCategory(".cvsignore");
        org.apache.rat.utils.Log log4 = null;
        org.apache.rat.ReportConfiguration reportConfiguration5 = new org.apache.rat.ReportConfiguration(log4);
        java.io.FilenameFilter filenameFilter6 = reportConfiguration5.getInputFileFilter();
        org.apache.rat.license.LicenseSetFactory.LicenseFilter licenseFilter7 = org.apache.rat.license.LicenseSetFactory.LicenseFilter.all;
        java.util.SortedSet<org.apache.rat.license.ILicense> iLicenseSet8 = reportConfiguration5.getLicenses(licenseFilter7);
        reportConfiguration1.addLicensesIfNotPresent((java.util.Collection<org.apache.rat.license.ILicense>) iLicenseSet8);
        reportConfiguration1.setCopyrightMessage("MathcerRefBuilder: null");
        org.apache.commons.io.function.IOSupplier<java.io.InputStream> inputStreamIOSupplier12 = org.apache.rat.Defaults.getUnapprovedLicensesStyleSheet();
        reportConfiguration1.setStyleSheet(inputStreamIOSupplier12);
        reportConfiguration1.removeApprovedLicenseCategory(".hgignore");
        org.junit.Assert.assertNull(filenameFilter6);
        org.junit.Assert.assertTrue("'" + licenseFilter7 + "' != '" + org.apache.rat.license.LicenseSetFactory.LicenseFilter.all + "'", licenseFilter7.equals(org.apache.rat.license.LicenseSetFactory.LicenseFilter.all));
        org.junit.Assert.assertNotNull(iLicenseSet8);
        org.junit.Assert.assertNotNull(inputStreamIOSupplier12);
    }

    @Test
    public void test13605() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest27.test13605");
        org.apache.rat.configuration.builders.SpdxBuilder spdxBuilder0 = org.apache.rat.analysis.IHeaderMatcher.Builder.spdx();
        java.lang.String str1 = spdxBuilder0.toString();
        org.apache.rat.configuration.builders.SpdxBuilder spdxBuilder3 = spdxBuilder0.setName("ef7a8b13-64c3-4510-bb0c-dbf208e1e73f");
        org.apache.rat.analysis.IHeaderMatcher iHeaderMatcher4 = spdxBuilder3.build();
        org.apache.rat.configuration.builders.SpdxBuilder spdxBuilder6 = spdxBuilder3.setName("null http://org/apache/rat/meta-data#LicenseFamilyName");
        org.apache.rat.configuration.builders.SpdxBuilder spdxBuilder8 = spdxBuilder3.setName("5eaa3dc6-8098-4373-beda-c95f14be8b17");
        org.junit.Assert.assertNotNull(spdxBuilder0);
        org.junit.Assert.assertEquals("'" + str1 + "' != '" + "SpdxBuilder: null" + "'", str1, "SpdxBuilder: null");
        org.junit.Assert.assertNotNull(spdxBuilder3);
        org.junit.Assert.assertNotNull(iHeaderMatcher4);
        org.junit.Assert.assertNotNull(spdxBuilder6);
        org.junit.Assert.assertNotNull(spdxBuilder8);
    }

    @Test
    public void test13606() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest27.test13606");
        org.apache.rat.utils.Log log0 = null;
        org.apache.rat.ReportConfiguration reportConfiguration1 = new org.apache.rat.ReportConfiguration(log0);
        org.apache.rat.license.ILicenseFamily[] iLicenseFamilyArray2 = new org.apache.rat.license.ILicenseFamily[] {};
        java.util.ArrayList<org.apache.rat.license.ILicenseFamily> iLicenseFamilyList3 = new java.util.ArrayList<org.apache.rat.license.ILicenseFamily>();
        boolean boolean4 = java.util.Collections.addAll((java.util.Collection<org.apache.rat.license.ILicenseFamily>) iLicenseFamilyList3, iLicenseFamilyArray2);
        reportConfiguration1.addFamilies((java.util.Collection<org.apache.rat.license.ILicenseFamily>) iLicenseFamilyList3);
        org.apache.rat.policy.DefaultPolicy defaultPolicy6 = new org.apache.rat.policy.DefaultPolicy((java.util.Collection<org.apache.rat.license.ILicenseFamily>) iLicenseFamilyList3);
        org.apache.rat.api.Document document7 = null;
        defaultPolicy6.analyse(document7);
        org.apache.rat.license.ILicenseFamilyBuilder iLicenseFamilyBuilder9 = new org.apache.rat.license.ILicenseFamilyBuilder();
        java.lang.String str10 = iLicenseFamilyBuilder9.getCategory();
        org.apache.rat.license.ILicenseFamily.Builder builder12 = iLicenseFamilyBuilder9.setLicenseFamilyCategory("AL   ");
        org.apache.rat.license.ILicenseFamily.Builder builder14 = iLicenseFamilyBuilder9.setLicenseFamilyName("binary");
        org.apache.rat.license.ILicenseFamily.Builder builder16 = iLicenseFamilyBuilder9.setLicenseFamilyCategory("3c74a3ec-8235-4035-9db7-f9f475b48681");
        org.apache.rat.license.ILicenseFamily.Builder builder18 = builder16.setLicenseFamilyCategory("49ba0523-306f-4984-949f-9db17b9667d9");
        org.apache.rat.license.ILicenseFamily iLicenseFamily19 = builder16.build();
        defaultPolicy6.add(iLicenseFamily19);
        org.apache.rat.license.ILicenseFamilyBuilder iLicenseFamilyBuilder21 = new org.apache.rat.license.ILicenseFamilyBuilder();
        java.lang.String str22 = iLicenseFamilyBuilder21.getCategory();
        org.apache.rat.license.ILicenseFamily.Builder builder24 = iLicenseFamilyBuilder21.setLicenseFamilyCategory("AL   ");
        org.apache.rat.license.ILicenseFamily.Builder builder26 = iLicenseFamilyBuilder21.setLicenseFamilyName("binary");
        org.apache.rat.license.ILicenseFamily.Builder builder28 = iLicenseFamilyBuilder21.setLicenseFamilyCategory("3c74a3ec-8235-4035-9db7-f9f475b48681");
        java.lang.String str29 = iLicenseFamilyBuilder21.getCategory();
        org.apache.rat.license.ILicenseFamily.Builder builder31 = iLicenseFamilyBuilder21.setLicenseFamilyCategory("f02d0cdc36424583b71fdd84a120752c");
        org.apache.rat.license.ILicenseFamily.Builder builder33 = iLicenseFamilyBuilder21.setLicenseFamilyName("725f33f3-3304-4bfa-b1c1-c226b58a407e");
        org.apache.rat.license.ILicenseFamily.Builder builder35 = iLicenseFamilyBuilder21.setLicenseFamilyCategory("Copyright Builder: s:SpdxBuilder: Datum [ name ='http://org/apache/rat/meta-data#ApprovedLicense',value ='false '] e:W3C Software Copyright o:null");
        org.apache.rat.license.ILicenseFamily iLicenseFamily36 = builder35.build();
        defaultPolicy6.add(iLicenseFamily36);
        org.apache.rat.api.Document document38 = null;
        // The following exception was thrown during execution in test generation
        try {
            defaultPolicy6.reportLicenseApprovalClaim(document38, true);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(iLicenseFamilyArray2);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertNull(str10);
        org.junit.Assert.assertNotNull(builder12);
        org.junit.Assert.assertNotNull(builder14);
        org.junit.Assert.assertNotNull(builder16);
        org.junit.Assert.assertNotNull(builder18);
        org.junit.Assert.assertNotNull(iLicenseFamily19);
        org.junit.Assert.assertNull(str22);
        org.junit.Assert.assertNotNull(builder24);
        org.junit.Assert.assertNotNull(builder26);
        org.junit.Assert.assertNotNull(builder28);
        org.junit.Assert.assertEquals("'" + str29 + "' != '" + "3c74a3ec-8235-4035-9db7-f9f475b48681" + "'", str29, "3c74a3ec-8235-4035-9db7-f9f475b48681");
        org.junit.Assert.assertNotNull(builder31);
        org.junit.Assert.assertNotNull(builder33);
        org.junit.Assert.assertNotNull(builder35);
        org.junit.Assert.assertNotNull(iLicenseFamily36);
    }

    @Test
    public void test13607() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest27.test13607");
        org.apache.rat.utils.Log log0 = null;
        org.apache.rat.ReportConfiguration reportConfiguration1 = new org.apache.rat.ReportConfiguration(log0);
        org.apache.rat.report.claim.ClaimStatistic claimStatistic2 = org.apache.rat.Reporter.report(reportConfiguration1);
        org.apache.rat.utils.Log log3 = null;
        org.apache.rat.ReportConfiguration reportConfiguration4 = new org.apache.rat.ReportConfiguration(log3);
        java.io.FilenameFilter filenameFilter5 = reportConfiguration4.getInputFileFilter();
        org.apache.rat.config.AddLicenseHeaders addLicenseHeaders6 = org.apache.rat.config.AddLicenseHeaders.TRUE;
        reportConfiguration4.setAddLicenseHeaders(addLicenseHeaders6);
        reportConfiguration1.setAddLicenseHeaders(addLicenseHeaders6);
        org.apache.rat.license.ILicenseFamilyBuilder iLicenseFamilyBuilder9 = new org.apache.rat.license.ILicenseFamilyBuilder();
        org.apache.rat.license.ILicenseFamily.Builder builder11 = iLicenseFamilyBuilder9.setLicenseFamilyCategory("Modified BSD License");
        org.apache.rat.license.ILicenseFamily.Builder builder13 = iLicenseFamilyBuilder9.setLicenseFamilyName("AllBuilder:\nCopyright Builder: s:null e:.cvsignore o:3c840dc2-bef0-42b5-b26c-35a568d53a24");
        reportConfiguration1.addFamily((org.apache.rat.license.ILicenseFamily.Builder) iLicenseFamilyBuilder9);
        reportConfiguration1.removeApprovedLicenseCategory("Datum");
        java.lang.String str17 = reportConfiguration1.getCopyrightMessage();
        reportConfiguration1.setCopyrightMessage("ac588fb8-47ff-4c8a-b192-4b692ac6762c");
        org.apache.rat.utils.Log log20 = null;
        org.apache.rat.ReportConfiguration reportConfiguration21 = new org.apache.rat.ReportConfiguration(log20);
        java.io.FilenameFilter filenameFilter22 = reportConfiguration21.getInputFileFilter();
        org.apache.rat.license.LicenseSetFactory.LicenseFilter licenseFilter23 = org.apache.rat.license.LicenseSetFactory.LicenseFilter.all;
        java.util.SortedSet<org.apache.rat.license.ILicense> iLicenseSet24 = reportConfiguration21.getLicenses(licenseFilter23);
        org.apache.rat.license.ILicenseFamily iLicenseFamily25 = null;
        reportConfiguration21.addFamily(iLicenseFamily25);
        org.apache.commons.io.filefilter.IOFileFilter iOFileFilter27 = reportConfiguration21.getDirectoryFilter();
        org.apache.rat.utils.Log log28 = null;
        org.apache.rat.ReportConfiguration reportConfiguration29 = new org.apache.rat.ReportConfiguration(log28);
        java.io.FilenameFilter filenameFilter30 = reportConfiguration29.getInputFileFilter();
        org.apache.rat.license.LicenseSetFactory.LicenseFilter licenseFilter31 = org.apache.rat.license.LicenseSetFactory.LicenseFilter.all;
        java.util.SortedSet<org.apache.rat.license.ILicense> iLicenseSet32 = reportConfiguration29.getLicenses(licenseFilter31);
        org.apache.rat.config.AddLicenseHeaders addLicenseHeaders33 = org.apache.rat.config.AddLicenseHeaders.FALSE;
        reportConfiguration29.setAddLicenseHeaders(addLicenseHeaders33);
        org.apache.rat.utils.Log log35 = null;
        org.apache.rat.ReportConfiguration reportConfiguration36 = new org.apache.rat.ReportConfiguration(log35);
        org.apache.rat.report.claim.ClaimStatistic claimStatistic37 = org.apache.rat.Reporter.report(reportConfiguration36);
        org.apache.rat.license.LicenseSetFactory.LicenseFilter licenseFilter38 = org.apache.rat.license.LicenseSetFactory.LicenseFilter.all;
        org.apache.rat.Reporter.listLicenses(reportConfiguration36, licenseFilter38);
        org.apache.rat.Reporter.listLicenses(reportConfiguration29, licenseFilter38);
        org.apache.rat.utils.Log log41 = null;
        org.apache.rat.ReportConfiguration reportConfiguration42 = new org.apache.rat.ReportConfiguration(log41);
        java.io.FilenameFilter filenameFilter43 = reportConfiguration42.getInputFileFilter();
        org.apache.rat.license.LicenseSetFactory.LicenseFilter licenseFilter44 = org.apache.rat.license.LicenseSetFactory.LicenseFilter.all;
        java.util.SortedSet<org.apache.rat.license.ILicense> iLicenseSet45 = reportConfiguration42.getLicenses(licenseFilter44);
        org.apache.rat.config.AddLicenseHeaders addLicenseHeaders46 = org.apache.rat.config.AddLicenseHeaders.FALSE;
        reportConfiguration42.setAddLicenseHeaders(addLicenseHeaders46);
        org.apache.rat.utils.Log log48 = null;
        org.apache.rat.ReportConfiguration reportConfiguration49 = new org.apache.rat.ReportConfiguration(log48);
        org.apache.rat.report.claim.ClaimStatistic claimStatistic50 = org.apache.rat.Reporter.report(reportConfiguration49);
        org.apache.rat.license.LicenseSetFactory.LicenseFilter licenseFilter51 = org.apache.rat.license.LicenseSetFactory.LicenseFilter.all;
        org.apache.rat.Reporter.listLicenses(reportConfiguration49, licenseFilter51);
        org.apache.rat.Reporter.listLicenses(reportConfiguration42, licenseFilter51);
        org.apache.rat.Reporter.listLicenses(reportConfiguration29, licenseFilter51);
        org.apache.rat.utils.Log log55 = null;
        org.apache.rat.ReportConfiguration reportConfiguration56 = new org.apache.rat.ReportConfiguration(log55);
        org.apache.commons.io.function.IOSupplier<java.io.OutputStream> outputStreamIOSupplier57 = reportConfiguration56.getOutput();
        reportConfiguration29.setOut(outputStreamIOSupplier57);
        org.apache.rat.utils.Log.Level level59 = org.apache.rat.utils.Log.Level.WARN;
        reportConfiguration29.logLicenseCollisions(level59);
        org.apache.commons.io.filefilter.IOFileFilter iOFileFilter61 = reportConfiguration29.getDirectoryFilter();
        java.nio.file.Path path62 = null;
        boolean boolean63 = iOFileFilter61.matches(path62);
        java.nio.file.Path path64 = null;
        java.nio.file.attribute.BasicFileAttributes basicFileAttributes65 = null;
        java.nio.file.FileVisitResult fileVisitResult66 = iOFileFilter61.accept(path64, basicFileAttributes65);
        org.apache.commons.io.filefilter.IOFileFilter iOFileFilter67 = iOFileFilter27.or(iOFileFilter61);
        java.nio.file.Path path68 = null;
        java.nio.file.attribute.BasicFileAttributes basicFileAttributes69 = null;
        java.nio.file.FileVisitResult fileVisitResult70 = iOFileFilter67.accept(path68, basicFileAttributes69);
        org.apache.commons.io.filefilter.IOFileFilter iOFileFilter71 = iOFileFilter67.negate();
        reportConfiguration1.addDirectoryFilter(iOFileFilter71);
        java.nio.file.Path path73 = null;
        boolean boolean74 = iOFileFilter71.matches(path73);
        org.junit.Assert.assertNull(claimStatistic2);
        org.junit.Assert.assertNull(filenameFilter5);
        org.junit.Assert.assertTrue("'" + addLicenseHeaders6 + "' != '" + org.apache.rat.config.AddLicenseHeaders.TRUE + "'", addLicenseHeaders6.equals(org.apache.rat.config.AddLicenseHeaders.TRUE));
        org.junit.Assert.assertNotNull(builder11);
        org.junit.Assert.assertNotNull(builder13);
        org.junit.Assert.assertNull(str17);
        org.junit.Assert.assertNull(filenameFilter22);
        org.junit.Assert.assertTrue("'" + licenseFilter23 + "' != '" + org.apache.rat.license.LicenseSetFactory.LicenseFilter.all + "'", licenseFilter23.equals(org.apache.rat.license.LicenseSetFactory.LicenseFilter.all));
        org.junit.Assert.assertNotNull(iLicenseSet24);
        org.junit.Assert.assertNotNull(iOFileFilter27);
        org.junit.Assert.assertNull(filenameFilter30);
        org.junit.Assert.assertTrue("'" + licenseFilter31 + "' != '" + org.apache.rat.license.LicenseSetFactory.LicenseFilter.all + "'", licenseFilter31.equals(org.apache.rat.license.LicenseSetFactory.LicenseFilter.all));
        org.junit.Assert.assertNotNull(iLicenseSet32);
        org.junit.Assert.assertTrue("'" + addLicenseHeaders33 + "' != '" + org.apache.rat.config.AddLicenseHeaders.FALSE + "'", addLicenseHeaders33.equals(org.apache.rat.config.AddLicenseHeaders.FALSE));
        org.junit.Assert.assertNull(claimStatistic37);
        org.junit.Assert.assertTrue("'" + licenseFilter38 + "' != '" + org.apache.rat.license.LicenseSetFactory.LicenseFilter.all + "'", licenseFilter38.equals(org.apache.rat.license.LicenseSetFactory.LicenseFilter.all));
        org.junit.Assert.assertNull(filenameFilter43);
        org.junit.Assert.assertTrue("'" + licenseFilter44 + "' != '" + org.apache.rat.license.LicenseSetFactory.LicenseFilter.all + "'", licenseFilter44.equals(org.apache.rat.license.LicenseSetFactory.LicenseFilter.all));
        org.junit.Assert.assertNotNull(iLicenseSet45);
        org.junit.Assert.assertTrue("'" + addLicenseHeaders46 + "' != '" + org.apache.rat.config.AddLicenseHeaders.FALSE + "'", addLicenseHeaders46.equals(org.apache.rat.config.AddLicenseHeaders.FALSE));
        org.junit.Assert.assertNull(claimStatistic50);
        org.junit.Assert.assertTrue("'" + licenseFilter51 + "' != '" + org.apache.rat.license.LicenseSetFactory.LicenseFilter.all + "'", licenseFilter51.equals(org.apache.rat.license.LicenseSetFactory.LicenseFilter.all));
        org.junit.Assert.assertNotNull(outputStreamIOSupplier57);
        org.junit.Assert.assertTrue("'" + level59 + "' != '" + org.apache.rat.utils.Log.Level.WARN + "'", level59.equals(org.apache.rat.utils.Log.Level.WARN));
        org.junit.Assert.assertNotNull(iOFileFilter61);
        org.junit.Assert.assertTrue("'" + boolean63 + "' != '" + false + "'", boolean63 == false);
        org.junit.Assert.assertTrue("'" + fileVisitResult66 + "' != '" + java.nio.file.FileVisitResult.TERMINATE + "'", fileVisitResult66.equals(java.nio.file.FileVisitResult.TERMINATE));
        org.junit.Assert.assertNotNull(iOFileFilter67);
        org.junit.Assert.assertTrue("'" + fileVisitResult70 + "' != '" + java.nio.file.FileVisitResult.TERMINATE + "'", fileVisitResult70.equals(java.nio.file.FileVisitResult.TERMINATE));
        org.junit.Assert.assertNotNull(iOFileFilter71);
        org.junit.Assert.assertTrue("'" + boolean74 + "' != '" + true + "'", boolean74 == true);
    }

    @Test
    public void test13608() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest27.test13608");
        org.apache.rat.utils.Log log0 = null;
        org.apache.rat.ReportConfiguration reportConfiguration1 = new org.apache.rat.ReportConfiguration(log0);
        java.io.FilenameFilter filenameFilter2 = reportConfiguration1.getInputFileFilter();
        org.apache.rat.license.LicenseSetFactory.LicenseFilter licenseFilter3 = org.apache.rat.license.LicenseSetFactory.LicenseFilter.all;
        java.util.SortedSet<org.apache.rat.license.ILicense> iLicenseSet4 = reportConfiguration1.getLicenses(licenseFilter3);
        org.apache.rat.config.AddLicenseHeaders addLicenseHeaders5 = org.apache.rat.config.AddLicenseHeaders.FALSE;
        reportConfiguration1.setAddLicenseHeaders(addLicenseHeaders5);
        org.apache.rat.utils.Log log7 = null;
        org.apache.rat.ReportConfiguration reportConfiguration8 = new org.apache.rat.ReportConfiguration(log7);
        org.apache.rat.report.claim.ClaimStatistic claimStatistic9 = org.apache.rat.Reporter.report(reportConfiguration8);
        org.apache.rat.license.LicenseSetFactory.LicenseFilter licenseFilter10 = org.apache.rat.license.LicenseSetFactory.LicenseFilter.all;
        org.apache.rat.Reporter.listLicenses(reportConfiguration8, licenseFilter10);
        org.apache.rat.Reporter.listLicenses(reportConfiguration1, licenseFilter10);
        org.apache.rat.report.IReportable iReportable13 = null;
        reportConfiguration1.setReportable(iReportable13);
        java.io.FilenameFilter filenameFilter15 = reportConfiguration1.getInputFileFilter();
        org.apache.rat.report.IReportable iReportable16 = reportConfiguration1.getReportable();
        org.apache.rat.utils.Log log17 = null;
        org.apache.rat.ReportConfiguration reportConfiguration18 = new org.apache.rat.ReportConfiguration(log17);
        org.apache.rat.report.claim.ClaimStatistic claimStatistic19 = org.apache.rat.Reporter.report(reportConfiguration18);
        org.apache.commons.io.function.IOSupplier<java.io.OutputStream> outputStreamIOSupplier20 = reportConfiguration18.getOutput();
        org.apache.rat.license.ILicense iLicense21 = null;
        reportConfiguration18.addLicense(iLicense21);
        org.apache.rat.Defaults.Builder builder23 = org.apache.rat.Defaults.builder();
        org.apache.rat.Defaults defaults24 = builder23.build();
        reportConfiguration18.setFrom(defaults24);
        org.apache.rat.license.LicenseSetFactory.LicenseFilter licenseFilter26 = org.apache.rat.license.LicenseSetFactory.LicenseFilter.all;
        java.util.SortedSet<org.apache.rat.license.ILicense> iLicenseSet27 = defaults24.getLicenses(licenseFilter26);
        org.apache.rat.license.LicenseSetFactory.LicenseFilter licenseFilter28 = org.apache.rat.license.LicenseSetFactory.LicenseFilter.approved;
        java.util.SortedSet<org.apache.rat.license.ILicenseFamily> iLicenseFamilySet29 = defaults24.getLicenseFamilies(licenseFilter28);
        reportConfiguration1.setFrom(defaults24);
        org.apache.rat.utils.Log log31 = null;
        org.apache.rat.ReportConfiguration reportConfiguration32 = new org.apache.rat.ReportConfiguration(log31);
        java.lang.String[] strArray76 = new java.lang.String[] { "http://org/apache/rat/meta-data", "GNU General Public License, version 2", "Modified BSD License", "COMMON DEVELOPMENT AND DISTRIBUTION LICENSE Version 1.0", "The MIT License", "OASIS", "?????", "Datum [ name ='http://org/apache/rat/meta-data#LicenseFamilyCategory',value ='OASIS ']", "6486879f-fc81-4b57-aec7-c4c77d540c30", "MANIFEST.MF", "?????", "GEN  ", "GPL3 ", "http://org/apache/rat/meta-data#HeaderCategory", "DOJO ", "true", "GPL2 ", "?????", "Apache License Version 2.0", "OASIS", "W3CD ", "OASIS", "?????", "OASIS Open License", "", "standard", "GPL2 ", "GEN  ", "W3CD ", "TMF  ", ".cvsignore", "Copyright Builder: s:null e:null o:null", "ef7a8b13-64c3-4510-bb0c-dbf208e1e73f", "274c6a15-09f6-4bfd-ac53-1827770eb507", "GNU General Public License, version 2", "W3CD ", ".cvsignore", "Apache License Version 2.0", "GEN  ", "W3C Software Copyright", "Modified BSD License", "GPL2 ", "JAVA" };
        java.util.ArrayList<java.lang.String> strList77 = new java.util.ArrayList<java.lang.String>();
        boolean boolean78 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strList77, strArray76);
        reportConfiguration32.removeApprovedLicenseCategories((java.util.Collection<java.lang.String>) strList77);
        reportConfiguration32.removeApprovedLicenseCategory("META-DATA#LICENSEFAMILYNAME");
        org.apache.commons.io.filefilter.IOFileFilter iOFileFilter82 = reportConfiguration32.getDirectoryFilter();
        org.apache.rat.utils.Log log83 = reportConfiguration32.getLog();
        org.apache.rat.utils.DefaultLog defaultLog84 = org.apache.rat.utils.DefaultLog.INSTANCE;
        org.apache.rat.annotation.ApacheV2LicenseAppender apacheV2LicenseAppender85 = new org.apache.rat.annotation.ApacheV2LicenseAppender((org.apache.rat.utils.Log) defaultLog84);
        org.apache.rat.ReportConfiguration reportConfiguration86 = new org.apache.rat.ReportConfiguration((org.apache.rat.utils.Log) defaultLog84);
        org.apache.rat.license.LicenseSetFactory.LicenseFilter licenseFilter87 = org.apache.rat.license.LicenseSetFactory.LicenseFilter.approved;
        org.apache.rat.Reporter.listLicenses(reportConfiguration86, licenseFilter87);
        org.apache.rat.Reporter.listLicenses(reportConfiguration32, licenseFilter87);
        java.util.SortedSet<org.apache.rat.license.ILicenseFamily> iLicenseFamilySet90 = defaults24.getLicenseFamilies(licenseFilter87);
        org.apache.rat.policy.DefaultPolicy defaultPolicy91 = new org.apache.rat.policy.DefaultPolicy((java.util.Collection<org.apache.rat.license.ILicenseFamily>) iLicenseFamilySet90);
        org.junit.Assert.assertNull(filenameFilter2);
        org.junit.Assert.assertTrue("'" + licenseFilter3 + "' != '" + org.apache.rat.license.LicenseSetFactory.LicenseFilter.all + "'", licenseFilter3.equals(org.apache.rat.license.LicenseSetFactory.LicenseFilter.all));
        org.junit.Assert.assertNotNull(iLicenseSet4);
        org.junit.Assert.assertTrue("'" + addLicenseHeaders5 + "' != '" + org.apache.rat.config.AddLicenseHeaders.FALSE + "'", addLicenseHeaders5.equals(org.apache.rat.config.AddLicenseHeaders.FALSE));
        org.junit.Assert.assertNull(claimStatistic9);
        org.junit.Assert.assertTrue("'" + licenseFilter10 + "' != '" + org.apache.rat.license.LicenseSetFactory.LicenseFilter.all + "'", licenseFilter10.equals(org.apache.rat.license.LicenseSetFactory.LicenseFilter.all));
        org.junit.Assert.assertNull(filenameFilter15);
        org.junit.Assert.assertNull(iReportable16);
        org.junit.Assert.assertNull(claimStatistic19);
        org.junit.Assert.assertNotNull(outputStreamIOSupplier20);
        org.junit.Assert.assertNotNull(builder23);
        org.junit.Assert.assertNotNull(defaults24);
        org.junit.Assert.assertTrue("'" + licenseFilter26 + "' != '" + org.apache.rat.license.LicenseSetFactory.LicenseFilter.all + "'", licenseFilter26.equals(org.apache.rat.license.LicenseSetFactory.LicenseFilter.all));
        org.junit.Assert.assertNotNull(iLicenseSet27);
        org.junit.Assert.assertTrue("'" + licenseFilter28 + "' != '" + org.apache.rat.license.LicenseSetFactory.LicenseFilter.approved + "'", licenseFilter28.equals(org.apache.rat.license.LicenseSetFactory.LicenseFilter.approved));
        org.junit.Assert.assertNotNull(iLicenseFamilySet29);
        org.junit.Assert.assertNotNull(strArray76);
        org.junit.Assert.assertTrue("'" + boolean78 + "' != '" + true + "'", boolean78 == true);
        org.junit.Assert.assertNotNull(iOFileFilter82);
        org.junit.Assert.assertNull(log83);
        org.junit.Assert.assertNotNull(defaultLog84);
        org.junit.Assert.assertTrue("'" + licenseFilter87 + "' != '" + org.apache.rat.license.LicenseSetFactory.LicenseFilter.approved + "'", licenseFilter87.equals(org.apache.rat.license.LicenseSetFactory.LicenseFilter.approved));
        org.junit.Assert.assertNotNull(iLicenseFamilySet90);
    }

    @Test
    public void test13609() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest27.test13609");
        org.apache.rat.utils.DefaultLog defaultLog0 = org.apache.rat.utils.DefaultLog.INSTANCE;
        org.apache.rat.utils.Log log1 = null;
        org.apache.rat.ReportConfiguration reportConfiguration2 = new org.apache.rat.ReportConfiguration(log1);
        reportConfiguration2.addApprovedLicenseCategory(".cvsignore");
        org.apache.rat.utils.Log.Level level5 = org.apache.rat.utils.Log.Level.ERROR;
        reportConfiguration2.logFamilyCollisions(level5);
        defaultLog0.setLevel(level5);
        org.apache.rat.utils.Log log8 = null;
        org.apache.rat.ReportConfiguration reportConfiguration9 = new org.apache.rat.ReportConfiguration(log8);
        java.io.FilenameFilter filenameFilter10 = reportConfiguration9.getInputFileFilter();
        org.apache.rat.license.LicenseSetFactory.LicenseFilter licenseFilter11 = org.apache.rat.license.LicenseSetFactory.LicenseFilter.all;
        java.util.SortedSet<org.apache.rat.license.ILicense> iLicenseSet12 = reportConfiguration9.getLicenses(licenseFilter11);
        org.apache.rat.config.AddLicenseHeaders addLicenseHeaders13 = org.apache.rat.config.AddLicenseHeaders.FALSE;
        reportConfiguration9.setAddLicenseHeaders(addLicenseHeaders13);
        org.apache.rat.utils.Log log15 = null;
        org.apache.rat.ReportConfiguration reportConfiguration16 = new org.apache.rat.ReportConfiguration(log15);
        org.apache.rat.report.claim.ClaimStatistic claimStatistic17 = org.apache.rat.Reporter.report(reportConfiguration16);
        org.apache.rat.license.LicenseSetFactory.LicenseFilter licenseFilter18 = org.apache.rat.license.LicenseSetFactory.LicenseFilter.all;
        org.apache.rat.Reporter.listLicenses(reportConfiguration16, licenseFilter18);
        org.apache.rat.Reporter.listLicenses(reportConfiguration9, licenseFilter18);
        org.apache.rat.utils.Log log21 = null;
        org.apache.rat.ReportConfiguration reportConfiguration22 = new org.apache.rat.ReportConfiguration(log21);
        java.io.FilenameFilter filenameFilter23 = reportConfiguration22.getInputFileFilter();
        org.apache.rat.license.LicenseSetFactory.LicenseFilter licenseFilter24 = org.apache.rat.license.LicenseSetFactory.LicenseFilter.all;
        java.util.SortedSet<org.apache.rat.license.ILicense> iLicenseSet25 = reportConfiguration22.getLicenses(licenseFilter24);
        org.apache.rat.config.AddLicenseHeaders addLicenseHeaders26 = org.apache.rat.config.AddLicenseHeaders.FALSE;
        reportConfiguration22.setAddLicenseHeaders(addLicenseHeaders26);
        org.apache.rat.utils.Log log28 = null;
        org.apache.rat.ReportConfiguration reportConfiguration29 = new org.apache.rat.ReportConfiguration(log28);
        org.apache.rat.report.claim.ClaimStatistic claimStatistic30 = org.apache.rat.Reporter.report(reportConfiguration29);
        org.apache.rat.license.LicenseSetFactory.LicenseFilter licenseFilter31 = org.apache.rat.license.LicenseSetFactory.LicenseFilter.all;
        org.apache.rat.Reporter.listLicenses(reportConfiguration29, licenseFilter31);
        org.apache.rat.Reporter.listLicenses(reportConfiguration22, licenseFilter31);
        org.apache.rat.Reporter.listLicenses(reportConfiguration9, licenseFilter31);
        org.apache.rat.utils.Log log35 = null;
        org.apache.rat.ReportConfiguration reportConfiguration36 = new org.apache.rat.ReportConfiguration(log35);
        org.apache.commons.io.function.IOSupplier<java.io.OutputStream> outputStreamIOSupplier37 = reportConfiguration36.getOutput();
        reportConfiguration9.setOut(outputStreamIOSupplier37);
        org.apache.rat.utils.Log log39 = null;
        org.apache.rat.ReportConfiguration reportConfiguration40 = new org.apache.rat.ReportConfiguration(log39);
        org.apache.rat.report.claim.ClaimStatistic claimStatistic41 = org.apache.rat.Reporter.report(reportConfiguration40);
        org.apache.rat.utils.Log log42 = null;
        org.apache.rat.ReportConfiguration reportConfiguration43 = new org.apache.rat.ReportConfiguration(log42);
        org.apache.rat.report.claim.ClaimStatistic claimStatistic44 = org.apache.rat.Reporter.report(reportConfiguration43);
        org.apache.rat.utils.ReportingSet.Options options45 = org.apache.rat.utils.ReportingSet.Options.OVERWRITE;
        reportConfiguration43.licenseDuplicateOption(options45);
        reportConfiguration40.familyDuplicateOption(options45);
        reportConfiguration9.licenseDuplicateOption(options45);
        reportConfiguration9.addApprovedLicenseCategory("W3C Document Copyright");
        org.apache.rat.utils.Log log51 = null;
        org.apache.rat.ReportConfiguration reportConfiguration52 = new org.apache.rat.ReportConfiguration(log51);
        reportConfiguration52.addApprovedLicenseCategory(".cvsignore");
        org.apache.rat.utils.Log.Level level55 = org.apache.rat.utils.Log.Level.ERROR;
        reportConfiguration52.logLicenseCollisions(level55);
        reportConfiguration9.logLicenseCollisions(level55);
        defaultLog0.log(level55, "GNU General Public License, version 1");
        defaultLog0.debug((java.lang.Object) "archive");
        org.apache.rat.utils.Log.Level level62 = defaultLog0.getLevel();
        org.apache.rat.configuration.builders.CopyrightBuilder copyrightBuilder63 = org.apache.rat.analysis.IHeaderMatcher.Builder.copyright();
        java.lang.String str64 = copyrightBuilder63.toString();
        org.apache.rat.configuration.builders.CopyrightBuilder copyrightBuilder66 = copyrightBuilder63.setEnd("W3C Software Copyright");
        org.apache.rat.configuration.builders.CopyrightBuilder copyrightBuilder68 = copyrightBuilder63.setStart("RegexBuilder: 89662180-a89f-497b-9301-227d494d2bae");
        org.apache.rat.configuration.builders.CopyrightBuilder copyrightBuilder70 = copyrightBuilder68.setStart("TextBuilder: AL   ");
        defaultLog0.warn((java.lang.Object) copyrightBuilder70);
        org.apache.rat.annotation.ApacheV2LicenseAppender apacheV2LicenseAppender72 = new org.apache.rat.annotation.ApacheV2LicenseAppender((org.apache.rat.utils.Log) defaultLog0);
        org.apache.rat.analysis.matchers.FullTextMatcher fullTextMatcher75 = new org.apache.rat.analysis.matchers.FullTextMatcher("http://org/apache/rat/meta-data", "Apache License Version 2.0");
        org.apache.rat.analysis.IHeaderMatcher.State state76 = fullTextMatcher75.currentState();
        org.apache.rat.analysis.matchers.NotMatcher notMatcher77 = new org.apache.rat.analysis.matchers.NotMatcher((org.apache.rat.analysis.IHeaderMatcher) fullTextMatcher75);
        org.apache.rat.analysis.IHeaderMatcher.State state79 = notMatcher77.matches("2b7a7df2-0dac-406a-96b5-ea6b08e88337");
        org.apache.rat.analysis.IHeaderMatcher.State state80 = notMatcher77.currentState();
        org.apache.rat.analysis.IHeaderMatcher.State state81 = notMatcher77.finalizeState();
        org.apache.rat.analysis.IHeaderMatcher.State state82 = notMatcher77.currentState();
        defaultLog0.debug((java.lang.Object) notMatcher77);
        org.apache.rat.analysis.IHeaderMatcher.State state84 = notMatcher77.finalizeState();
        org.junit.Assert.assertNotNull(defaultLog0);
        org.junit.Assert.assertTrue("'" + level5 + "' != '" + org.apache.rat.utils.Log.Level.ERROR + "'", level5.equals(org.apache.rat.utils.Log.Level.ERROR));
        org.junit.Assert.assertNull(filenameFilter10);
        org.junit.Assert.assertTrue("'" + licenseFilter11 + "' != '" + org.apache.rat.license.LicenseSetFactory.LicenseFilter.all + "'", licenseFilter11.equals(org.apache.rat.license.LicenseSetFactory.LicenseFilter.all));
        org.junit.Assert.assertNotNull(iLicenseSet12);
        org.junit.Assert.assertTrue("'" + addLicenseHeaders13 + "' != '" + org.apache.rat.config.AddLicenseHeaders.FALSE + "'", addLicenseHeaders13.equals(org.apache.rat.config.AddLicenseHeaders.FALSE));
        org.junit.Assert.assertNull(claimStatistic17);
        org.junit.Assert.assertTrue("'" + licenseFilter18 + "' != '" + org.apache.rat.license.LicenseSetFactory.LicenseFilter.all + "'", licenseFilter18.equals(org.apache.rat.license.LicenseSetFactory.LicenseFilter.all));
        org.junit.Assert.assertNull(filenameFilter23);
        org.junit.Assert.assertTrue("'" + licenseFilter24 + "' != '" + org.apache.rat.license.LicenseSetFactory.LicenseFilter.all + "'", licenseFilter24.equals(org.apache.rat.license.LicenseSetFactory.LicenseFilter.all));
        org.junit.Assert.assertNotNull(iLicenseSet25);
        org.junit.Assert.assertTrue("'" + addLicenseHeaders26 + "' != '" + org.apache.rat.config.AddLicenseHeaders.FALSE + "'", addLicenseHeaders26.equals(org.apache.rat.config.AddLicenseHeaders.FALSE));
        org.junit.Assert.assertNull(claimStatistic30);
        org.junit.Assert.assertTrue("'" + licenseFilter31 + "' != '" + org.apache.rat.license.LicenseSetFactory.LicenseFilter.all + "'", licenseFilter31.equals(org.apache.rat.license.LicenseSetFactory.LicenseFilter.all));
        org.junit.Assert.assertNotNull(outputStreamIOSupplier37);
        org.junit.Assert.assertNull(claimStatistic41);
        org.junit.Assert.assertNull(claimStatistic44);
        org.junit.Assert.assertTrue("'" + options45 + "' != '" + org.apache.rat.utils.ReportingSet.Options.OVERWRITE + "'", options45.equals(org.apache.rat.utils.ReportingSet.Options.OVERWRITE));
        org.junit.Assert.assertTrue("'" + level55 + "' != '" + org.apache.rat.utils.Log.Level.ERROR + "'", level55.equals(org.apache.rat.utils.Log.Level.ERROR));
        org.junit.Assert.assertTrue("'" + level62 + "' != '" + org.apache.rat.utils.Log.Level.ERROR + "'", level62.equals(org.apache.rat.utils.Log.Level.ERROR));
        org.junit.Assert.assertNotNull(copyrightBuilder63);
        org.junit.Assert.assertEquals("'" + str64 + "' != '" + "Copyright Builder: s:null e:null o:null" + "'", str64, "Copyright Builder: s:null e:null o:null");
        org.junit.Assert.assertNotNull(copyrightBuilder66);
        org.junit.Assert.assertNotNull(copyrightBuilder68);
        org.junit.Assert.assertNotNull(copyrightBuilder70);
        org.junit.Assert.assertTrue("'" + state76 + "' != '" + org.apache.rat.analysis.IHeaderMatcher.State.i + "'", state76.equals(org.apache.rat.analysis.IHeaderMatcher.State.i));
        org.junit.Assert.assertTrue("'" + state79 + "' != '" + org.apache.rat.analysis.IHeaderMatcher.State.i + "'", state79.equals(org.apache.rat.analysis.IHeaderMatcher.State.i));
        org.junit.Assert.assertTrue("'" + state80 + "' != '" + org.apache.rat.analysis.IHeaderMatcher.State.i + "'", state80.equals(org.apache.rat.analysis.IHeaderMatcher.State.i));
        org.junit.Assert.assertTrue("'" + state81 + "' != '" + org.apache.rat.analysis.IHeaderMatcher.State.t + "'", state81.equals(org.apache.rat.analysis.IHeaderMatcher.State.t));
        org.junit.Assert.assertTrue("'" + state82 + "' != '" + org.apache.rat.analysis.IHeaderMatcher.State.t + "'", state82.equals(org.apache.rat.analysis.IHeaderMatcher.State.t));
        org.junit.Assert.assertTrue("'" + state84 + "' != '" + org.apache.rat.analysis.IHeaderMatcher.State.t + "'", state84.equals(org.apache.rat.analysis.IHeaderMatcher.State.t));
    }

    @Test
    public void test13610() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest27.test13610");
        org.apache.rat.license.ILicense[] iLicenseArray1 = new org.apache.rat.license.ILicense[] {};
        java.util.TreeSet<org.apache.rat.license.ILicense> iLicenseSet2 = new java.util.TreeSet<org.apache.rat.license.ILicense>();
        boolean boolean3 = java.util.Collections.addAll((java.util.Collection<org.apache.rat.license.ILicense>) iLicenseSet2, iLicenseArray1);
        java.lang.String[] strArray16 = new java.lang.String[] { "GPL2 ", "GPL1 ", "notice", "http://org/apache/rat/meta-data#LicenseFamilyName", "notice", "GPL2 ", "http://org/apache/rat/meta-data#LicenseFamilyName", "", "GPL2 ", "", "GPL1 ", "hi!" };
        java.util.ArrayList<java.lang.String> strList17 = new java.util.ArrayList<java.lang.String>();
        boolean boolean18 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strList17, strArray16);
        org.apache.rat.license.LicenseSetFactory licenseSetFactory19 = new org.apache.rat.license.LicenseSetFactory((java.util.SortedSet<org.apache.rat.license.ILicense>) iLicenseSet2, (java.util.Collection<java.lang.String>) strList17);
        org.apache.rat.license.ILicense iLicense20 = org.apache.rat.license.LicenseSetFactory.search("JAVA", (java.util.SortedSet<org.apache.rat.license.ILicense>) iLicenseSet2);
        org.apache.rat.utils.ReportingSet<org.apache.rat.license.ILicense> iLicenseSet21 = new org.apache.rat.utils.ReportingSet<org.apache.rat.license.ILicense>((java.util.SortedSet<org.apache.rat.license.ILicense>) iLicenseSet2);
        org.apache.rat.utils.Log log22 = null;
        org.apache.rat.ReportConfiguration reportConfiguration23 = new org.apache.rat.ReportConfiguration(log22);
        org.apache.rat.report.claim.ClaimStatistic claimStatistic24 = org.apache.rat.Reporter.report(reportConfiguration23);
        reportConfiguration23.addApprovedLicenseCategory("Copyright Builder: s:null e:null o:null");
        java.util.SortedSet<java.lang.String> strSet27 = reportConfiguration23.getApprovedLicenseCategories();
        java.io.FilenameFilter filenameFilter28 = reportConfiguration23.getInputFileFilter();
        org.apache.rat.utils.Log log29 = null;
        org.apache.rat.ReportConfiguration reportConfiguration30 = new org.apache.rat.ReportConfiguration(log29);
        org.apache.rat.report.claim.ClaimStatistic claimStatistic31 = org.apache.rat.Reporter.report(reportConfiguration30);
        org.apache.rat.utils.ReportingSet.Options options32 = org.apache.rat.utils.ReportingSet.Options.OVERWRITE;
        reportConfiguration30.licenseDuplicateOption(options32);
        java.util.SortedSet<org.apache.rat.license.ILicenseFamily> iLicenseFamilySet35 = org.apache.rat.license.LicenseFamilySetFactory.emptyLicenseFamilySet();
        org.apache.rat.license.ILicenseFamily iLicenseFamily36 = org.apache.rat.license.LicenseFamilySetFactory.search("http://org/apache/rat/meta-data", iLicenseFamilySet35);
        org.apache.rat.policy.DefaultPolicy defaultPolicy37 = new org.apache.rat.policy.DefaultPolicy((java.util.Collection<org.apache.rat.license.ILicenseFamily>) iLicenseFamilySet35);
        reportConfiguration30.addFamilies((java.util.Collection<org.apache.rat.license.ILicenseFamily>) iLicenseFamilySet35);
        org.apache.rat.utils.ReportingSet<java.lang.String> strSet39 = new org.apache.rat.utils.ReportingSet<java.lang.String>();
        java.lang.Object[] objArray40 = strSet39.toArray();
        org.apache.rat.license.LicenseFamilySetFactory licenseFamilySetFactory41 = new org.apache.rat.license.LicenseFamilySetFactory(iLicenseFamilySet35, (java.util.Collection<java.lang.String>) strSet39);
        reportConfiguration23.addApprovedLicenseCategories((java.util.Collection<java.lang.String>) strSet39);
        org.apache.rat.utils.ReportingSet<java.lang.String> strSet44 = strSet39.headSet("9ba7ce03-4231-4a3e-affd-70c4666a9329");
        org.apache.rat.license.LicenseSetFactory licenseSetFactory45 = new org.apache.rat.license.LicenseSetFactory((java.util.SortedSet<org.apache.rat.license.ILicense>) iLicenseSet2, (java.util.Collection<java.lang.String>) strSet39);
        org.junit.Assert.assertNotNull(iLicenseArray1);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertNotNull(strArray16);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + true + "'", boolean18 == true);
        org.junit.Assert.assertNull(iLicense20);
        org.junit.Assert.assertNull(claimStatistic24);
        org.junit.Assert.assertNotNull(strSet27);
        org.junit.Assert.assertNull(filenameFilter28);
        org.junit.Assert.assertNull(claimStatistic31);
        org.junit.Assert.assertTrue("'" + options32 + "' != '" + org.apache.rat.utils.ReportingSet.Options.OVERWRITE + "'", options32.equals(org.apache.rat.utils.ReportingSet.Options.OVERWRITE));
        org.junit.Assert.assertNotNull(iLicenseFamilySet35);
        org.junit.Assert.assertNull(iLicenseFamily36);
        org.junit.Assert.assertNotNull(objArray40);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray40), "[]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray40), "[]");
        org.junit.Assert.assertNotNull(strSet44);
    }

    @Test
    public void test13611() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest27.test13611");
        org.apache.rat.utils.Log log0 = null;
        org.apache.rat.ReportConfiguration reportConfiguration1 = new org.apache.rat.ReportConfiguration(log0);
        reportConfiguration1.addApprovedLicenseCategory(".cvsignore");
        org.apache.rat.utils.Log.Level level4 = org.apache.rat.utils.Log.Level.ERROR;
        reportConfiguration1.logFamilyCollisions(level4);
        org.apache.commons.io.function.IOSupplier<java.io.OutputStream> outputStreamIOSupplier6 = reportConfiguration1.getOutput();
        org.apache.rat.utils.Log log7 = null;
        org.apache.rat.ReportConfiguration reportConfiguration8 = new org.apache.rat.ReportConfiguration(log7);
        reportConfiguration8.addApprovedLicenseCategory(".cvsignore");
        org.apache.rat.utils.Log log11 = null;
        org.apache.rat.ReportConfiguration reportConfiguration12 = new org.apache.rat.ReportConfiguration(log11);
        java.io.FilenameFilter filenameFilter13 = reportConfiguration12.getInputFileFilter();
        org.apache.rat.license.LicenseSetFactory.LicenseFilter licenseFilter14 = org.apache.rat.license.LicenseSetFactory.LicenseFilter.all;
        java.util.SortedSet<org.apache.rat.license.ILicense> iLicenseSet15 = reportConfiguration12.getLicenses(licenseFilter14);
        reportConfiguration8.addLicensesIfNotPresent((java.util.Collection<org.apache.rat.license.ILicense>) iLicenseSet15);
        java.io.FilenameFilter filenameFilter17 = reportConfiguration8.getInputFileFilter();
        org.apache.rat.utils.Log log18 = null;
        org.apache.rat.ReportConfiguration reportConfiguration19 = new org.apache.rat.ReportConfiguration(log18);
        java.io.FilenameFilter filenameFilter20 = reportConfiguration19.getInputFileFilter();
        org.apache.rat.license.LicenseSetFactory.LicenseFilter licenseFilter21 = org.apache.rat.license.LicenseSetFactory.LicenseFilter.all;
        java.util.SortedSet<org.apache.rat.license.ILicense> iLicenseSet22 = reportConfiguration19.getLicenses(licenseFilter21);
        org.apache.rat.config.AddLicenseHeaders addLicenseHeaders23 = org.apache.rat.config.AddLicenseHeaders.FALSE;
        reportConfiguration19.setAddLicenseHeaders(addLicenseHeaders23);
        org.apache.rat.utils.Log log25 = null;
        org.apache.rat.ReportConfiguration reportConfiguration26 = new org.apache.rat.ReportConfiguration(log25);
        org.apache.rat.report.claim.ClaimStatistic claimStatistic27 = org.apache.rat.Reporter.report(reportConfiguration26);
        org.apache.rat.license.LicenseSetFactory.LicenseFilter licenseFilter28 = org.apache.rat.license.LicenseSetFactory.LicenseFilter.all;
        org.apache.rat.Reporter.listLicenses(reportConfiguration26, licenseFilter28);
        org.apache.rat.Reporter.listLicenses(reportConfiguration19, licenseFilter28);
        org.apache.rat.utils.Log log31 = null;
        org.apache.rat.ReportConfiguration reportConfiguration32 = new org.apache.rat.ReportConfiguration(log31);
        java.io.FilenameFilter filenameFilter33 = reportConfiguration32.getInputFileFilter();
        org.apache.rat.license.LicenseSetFactory.LicenseFilter licenseFilter34 = org.apache.rat.license.LicenseSetFactory.LicenseFilter.all;
        java.util.SortedSet<org.apache.rat.license.ILicense> iLicenseSet35 = reportConfiguration32.getLicenses(licenseFilter34);
        org.apache.rat.config.AddLicenseHeaders addLicenseHeaders36 = org.apache.rat.config.AddLicenseHeaders.FALSE;
        reportConfiguration32.setAddLicenseHeaders(addLicenseHeaders36);
        org.apache.rat.utils.Log log38 = null;
        org.apache.rat.ReportConfiguration reportConfiguration39 = new org.apache.rat.ReportConfiguration(log38);
        org.apache.rat.report.claim.ClaimStatistic claimStatistic40 = org.apache.rat.Reporter.report(reportConfiguration39);
        org.apache.rat.license.LicenseSetFactory.LicenseFilter licenseFilter41 = org.apache.rat.license.LicenseSetFactory.LicenseFilter.all;
        org.apache.rat.Reporter.listLicenses(reportConfiguration39, licenseFilter41);
        org.apache.rat.Reporter.listLicenses(reportConfiguration32, licenseFilter41);
        java.util.SortedSet<org.apache.rat.license.ILicenseFamily> iLicenseFamilySet44 = reportConfiguration19.getLicenseFamilies(licenseFilter41);
        org.apache.rat.Reporter.listLicenseFamilies(reportConfiguration8, licenseFilter41);
        java.util.SortedSet<org.apache.rat.license.ILicenseFamily> iLicenseFamilySet46 = reportConfiguration1.getLicenseFamilies(licenseFilter41);
        org.apache.commons.io.function.IOSupplier<java.io.InputStream> inputStreamIOSupplier47 = reportConfiguration1.getStyleSheet();
        org.apache.commons.io.filefilter.IOFileFilter iOFileFilter48 = reportConfiguration1.getDirectoryFilter();
        org.apache.rat.report.claim.ClaimStatistic claimStatistic49 = org.apache.rat.Reporter.report(reportConfiguration1);
        org.junit.Assert.assertTrue("'" + level4 + "' != '" + org.apache.rat.utils.Log.Level.ERROR + "'", level4.equals(org.apache.rat.utils.Log.Level.ERROR));
        org.junit.Assert.assertNotNull(outputStreamIOSupplier6);
        org.junit.Assert.assertNull(filenameFilter13);
        org.junit.Assert.assertTrue("'" + licenseFilter14 + "' != '" + org.apache.rat.license.LicenseSetFactory.LicenseFilter.all + "'", licenseFilter14.equals(org.apache.rat.license.LicenseSetFactory.LicenseFilter.all));
        org.junit.Assert.assertNotNull(iLicenseSet15);
        org.junit.Assert.assertNull(filenameFilter17);
        org.junit.Assert.assertNull(filenameFilter20);
        org.junit.Assert.assertTrue("'" + licenseFilter21 + "' != '" + org.apache.rat.license.LicenseSetFactory.LicenseFilter.all + "'", licenseFilter21.equals(org.apache.rat.license.LicenseSetFactory.LicenseFilter.all));
        org.junit.Assert.assertNotNull(iLicenseSet22);
        org.junit.Assert.assertTrue("'" + addLicenseHeaders23 + "' != '" + org.apache.rat.config.AddLicenseHeaders.FALSE + "'", addLicenseHeaders23.equals(org.apache.rat.config.AddLicenseHeaders.FALSE));
        org.junit.Assert.assertNull(claimStatistic27);
        org.junit.Assert.assertTrue("'" + licenseFilter28 + "' != '" + org.apache.rat.license.LicenseSetFactory.LicenseFilter.all + "'", licenseFilter28.equals(org.apache.rat.license.LicenseSetFactory.LicenseFilter.all));
        org.junit.Assert.assertNull(filenameFilter33);
        org.junit.Assert.assertTrue("'" + licenseFilter34 + "' != '" + org.apache.rat.license.LicenseSetFactory.LicenseFilter.all + "'", licenseFilter34.equals(org.apache.rat.license.LicenseSetFactory.LicenseFilter.all));
        org.junit.Assert.assertNotNull(iLicenseSet35);
        org.junit.Assert.assertTrue("'" + addLicenseHeaders36 + "' != '" + org.apache.rat.config.AddLicenseHeaders.FALSE + "'", addLicenseHeaders36.equals(org.apache.rat.config.AddLicenseHeaders.FALSE));
        org.junit.Assert.assertNull(claimStatistic40);
        org.junit.Assert.assertTrue("'" + licenseFilter41 + "' != '" + org.apache.rat.license.LicenseSetFactory.LicenseFilter.all + "'", licenseFilter41.equals(org.apache.rat.license.LicenseSetFactory.LicenseFilter.all));
        org.junit.Assert.assertNotNull(iLicenseFamilySet44);
        org.junit.Assert.assertNotNull(iLicenseFamilySet46);
        org.junit.Assert.assertNull(inputStreamIOSupplier47);
        org.junit.Assert.assertNotNull(iOFileFilter48);
        org.junit.Assert.assertNull(claimStatistic49);
    }

    @Test
    public void test13612() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest27.test13612");
        java.lang.String[] strArray5 = new java.lang.String[] { "http://org/apache/rat/meta-data#LicenseFamilyCategory", "Datum [ name ='http://org/apache/rat/meta-data#LicenseFamilyCategory',value ='GPL1  ']", "MANIFEST.MF", "AllBuilder:", "The MIT License" };
        org.apache.rat.utils.ReportingSet<java.lang.String> strSet6 = new org.apache.rat.utils.ReportingSet<java.lang.String>();
        boolean boolean7 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strSet6, strArray5);
        boolean boolean9 = strSet6.addIfNotPresent("http://org/apache/rat/meta-data#LicenseFamilyName");
        java.util.Iterator<java.lang.String> strItor10 = strSet6.iterator();
        strSet6.clear();
        strSet6.clear();
        java.lang.Object[] objArray13 = strSet6.toArray();
        java.util.stream.Stream<java.lang.String> strStream14 = strSet6.stream();
        java.util.Iterator<java.lang.String> strItor15 = strSet6.iterator();
        boolean boolean17 = strSet6.addIfNotPresent("9b58713f-df10-4eb5-a5e7-b2e82c48d768");
        org.apache.rat.utils.ReportingSet<java.lang.String> strSet19 = strSet6.headSet("736352AA-A974-4B58-B2F1-4CAA6178920B");
        org.apache.rat.utils.DefaultLog defaultLog20 = org.apache.rat.utils.DefaultLog.INSTANCE;
        org.apache.rat.license.ILicense.Builder builder21 = org.apache.rat.license.ILicense.builder();
        org.apache.rat.license.ILicense.Builder builder23 = builder21.setLicenseFamilyCategory("");
        org.apache.rat.analysis.matchers.CopyrightMatcher copyrightMatcher27 = new org.apache.rat.analysis.matchers.CopyrightMatcher("", "GPL1 ", "hi!");
        org.apache.rat.analysis.IHeaderMatcher.State state28 = copyrightMatcher27.finalizeState();
        org.apache.rat.license.ILicense.Builder builder29 = builder23.setMatcher((org.apache.rat.analysis.IHeaderMatcher) copyrightMatcher27);
        org.apache.rat.license.ILicense.Builder builder31 = builder29.setLicenseFamilyCategory("");
        defaultLog20.error((java.lang.Object) builder31);
        org.apache.rat.utils.Log log33 = null;
        org.apache.rat.ReportConfiguration reportConfiguration34 = new org.apache.rat.ReportConfiguration(log33);
        java.io.FilenameFilter filenameFilter35 = reportConfiguration34.getInputFileFilter();
        org.apache.rat.license.LicenseSetFactory.LicenseFilter licenseFilter36 = org.apache.rat.license.LicenseSetFactory.LicenseFilter.all;
        java.util.SortedSet<org.apache.rat.license.ILicense> iLicenseSet37 = reportConfiguration34.getLicenses(licenseFilter36);
        org.apache.rat.config.AddLicenseHeaders addLicenseHeaders38 = org.apache.rat.config.AddLicenseHeaders.FALSE;
        reportConfiguration34.setAddLicenseHeaders(addLicenseHeaders38);
        org.apache.rat.utils.Log log40 = null;
        org.apache.rat.ReportConfiguration reportConfiguration41 = new org.apache.rat.ReportConfiguration(log40);
        org.apache.rat.report.claim.ClaimStatistic claimStatistic42 = org.apache.rat.Reporter.report(reportConfiguration41);
        org.apache.rat.license.LicenseSetFactory.LicenseFilter licenseFilter43 = org.apache.rat.license.LicenseSetFactory.LicenseFilter.all;
        org.apache.rat.Reporter.listLicenses(reportConfiguration41, licenseFilter43);
        org.apache.rat.Reporter.listLicenses(reportConfiguration34, licenseFilter43);
        org.apache.rat.utils.Log log46 = null;
        org.apache.rat.ReportConfiguration reportConfiguration47 = new org.apache.rat.ReportConfiguration(log46);
        java.io.FilenameFilter filenameFilter48 = reportConfiguration47.getInputFileFilter();
        org.apache.rat.license.LicenseSetFactory.LicenseFilter licenseFilter49 = org.apache.rat.license.LicenseSetFactory.LicenseFilter.all;
        java.util.SortedSet<org.apache.rat.license.ILicense> iLicenseSet50 = reportConfiguration47.getLicenses(licenseFilter49);
        org.apache.rat.config.AddLicenseHeaders addLicenseHeaders51 = org.apache.rat.config.AddLicenseHeaders.FALSE;
        reportConfiguration47.setAddLicenseHeaders(addLicenseHeaders51);
        org.apache.rat.utils.Log log53 = null;
        org.apache.rat.ReportConfiguration reportConfiguration54 = new org.apache.rat.ReportConfiguration(log53);
        org.apache.rat.report.claim.ClaimStatistic claimStatistic55 = org.apache.rat.Reporter.report(reportConfiguration54);
        org.apache.rat.license.LicenseSetFactory.LicenseFilter licenseFilter56 = org.apache.rat.license.LicenseSetFactory.LicenseFilter.all;
        org.apache.rat.Reporter.listLicenses(reportConfiguration54, licenseFilter56);
        org.apache.rat.Reporter.listLicenses(reportConfiguration47, licenseFilter56);
        org.apache.rat.Reporter.listLicenses(reportConfiguration34, licenseFilter56);
        org.apache.rat.utils.Log log60 = null;
        org.apache.rat.ReportConfiguration reportConfiguration61 = new org.apache.rat.ReportConfiguration(log60);
        org.apache.commons.io.function.IOSupplier<java.io.OutputStream> outputStreamIOSupplier62 = reportConfiguration61.getOutput();
        reportConfiguration34.setOut(outputStreamIOSupplier62);
        org.apache.rat.utils.Log.Level level64 = org.apache.rat.utils.Log.Level.WARN;
        reportConfiguration34.logLicenseCollisions(level64);
        defaultLog20.warn((java.lang.Object) level64);
        defaultLog20.info((java.lang.Object) "TextBuilder: Datum [ name ='http:...");
        org.apache.rat.utils.Log log69 = null;
        org.apache.rat.ReportConfiguration reportConfiguration70 = new org.apache.rat.ReportConfiguration(log69);
        java.io.FilenameFilter filenameFilter71 = reportConfiguration70.getInputFileFilter();
        org.apache.rat.license.LicenseSetFactory.LicenseFilter licenseFilter72 = org.apache.rat.license.LicenseSetFactory.LicenseFilter.all;
        java.util.SortedSet<org.apache.rat.license.ILicense> iLicenseSet73 = reportConfiguration70.getLicenses(licenseFilter72);
        org.apache.rat.license.ILicenseFamily iLicenseFamily74 = null;
        reportConfiguration70.addFamily(iLicenseFamily74);
        reportConfiguration70.setCopyrightMessage("hi!");
        defaultLog20.error((java.lang.Object) reportConfiguration70);
        org.apache.rat.annotation.ApacheV2LicenseAppender apacheV2LicenseAppender80 = new org.apache.rat.annotation.ApacheV2LicenseAppender((org.apache.rat.utils.Log) defaultLog20, "03f7b314-6887-4617-9c7e-bf1600b331cd");
        org.apache.rat.annotation.ApacheV2LicenseAppender apacheV2LicenseAppender82 = new org.apache.rat.annotation.ApacheV2LicenseAppender((org.apache.rat.utils.Log) defaultLog20, "7480723c65a64470aa58975de51fe7c5");
        org.apache.rat.utils.ReportingSet<java.lang.String> strSet83 = strSet19.setLog((org.apache.rat.utils.Log) defaultLog20);
        java.lang.Object obj84 = null;
        boolean boolean85 = strSet83.equals(obj84);
        boolean boolean86 = strSet83.isEmpty();
        org.junit.Assert.assertNotNull(strArray5);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + true + "'", boolean7 == true);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + true + "'", boolean9 == true);
        org.junit.Assert.assertNotNull(strItor10);
        org.junit.Assert.assertNotNull(objArray13);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray13), "[]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray13), "[]");
        org.junit.Assert.assertNotNull(strStream14);
        org.junit.Assert.assertNotNull(strItor15);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + true + "'", boolean17 == true);
        org.junit.Assert.assertNotNull(strSet19);
        org.junit.Assert.assertNotNull(defaultLog20);
        org.junit.Assert.assertNotNull(builder21);
        org.junit.Assert.assertNotNull(builder23);
        org.junit.Assert.assertTrue("'" + state28 + "' != '" + org.apache.rat.analysis.IHeaderMatcher.State.f + "'", state28.equals(org.apache.rat.analysis.IHeaderMatcher.State.f));
        org.junit.Assert.assertNotNull(builder29);
        org.junit.Assert.assertNotNull(builder31);
        org.junit.Assert.assertNull(filenameFilter35);
        org.junit.Assert.assertTrue("'" + licenseFilter36 + "' != '" + org.apache.rat.license.LicenseSetFactory.LicenseFilter.all + "'", licenseFilter36.equals(org.apache.rat.license.LicenseSetFactory.LicenseFilter.all));
        org.junit.Assert.assertNotNull(iLicenseSet37);
        org.junit.Assert.assertTrue("'" + addLicenseHeaders38 + "' != '" + org.apache.rat.config.AddLicenseHeaders.FALSE + "'", addLicenseHeaders38.equals(org.apache.rat.config.AddLicenseHeaders.FALSE));
        org.junit.Assert.assertNull(claimStatistic42);
        org.junit.Assert.assertTrue("'" + licenseFilter43 + "' != '" + org.apache.rat.license.LicenseSetFactory.LicenseFilter.all + "'", licenseFilter43.equals(org.apache.rat.license.LicenseSetFactory.LicenseFilter.all));
        org.junit.Assert.assertNull(filenameFilter48);
        org.junit.Assert.assertTrue("'" + licenseFilter49 + "' != '" + org.apache.rat.license.LicenseSetFactory.LicenseFilter.all + "'", licenseFilter49.equals(org.apache.rat.license.LicenseSetFactory.LicenseFilter.all));
        org.junit.Assert.assertNotNull(iLicenseSet50);
        org.junit.Assert.assertTrue("'" + addLicenseHeaders51 + "' != '" + org.apache.rat.config.AddLicenseHeaders.FALSE + "'", addLicenseHeaders51.equals(org.apache.rat.config.AddLicenseHeaders.FALSE));
        org.junit.Assert.assertNull(claimStatistic55);
        org.junit.Assert.assertTrue("'" + licenseFilter56 + "' != '" + org.apache.rat.license.LicenseSetFactory.LicenseFilter.all + "'", licenseFilter56.equals(org.apache.rat.license.LicenseSetFactory.LicenseFilter.all));
        org.junit.Assert.assertNotNull(outputStreamIOSupplier62);
        org.junit.Assert.assertTrue("'" + level64 + "' != '" + org.apache.rat.utils.Log.Level.WARN + "'", level64.equals(org.apache.rat.utils.Log.Level.WARN));
        org.junit.Assert.assertNull(filenameFilter71);
        org.junit.Assert.assertTrue("'" + licenseFilter72 + "' != '" + org.apache.rat.license.LicenseSetFactory.LicenseFilter.all + "'", licenseFilter72.equals(org.apache.rat.license.LicenseSetFactory.LicenseFilter.all));
        org.junit.Assert.assertNotNull(iLicenseSet73);
        org.junit.Assert.assertNotNull(strSet83);
        org.junit.Assert.assertTrue("'" + boolean85 + "' != '" + false + "'", boolean85 == false);
        org.junit.Assert.assertTrue("'" + boolean86 + "' != '" + true + "'", boolean86 == true);
    }

    @Test
    public void test13613() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest27.test13613");
        org.apache.rat.analysis.license.FullTextMatchingLicense fullTextMatchingLicense0 = new org.apache.rat.analysis.license.FullTextMatchingLicense();
        fullTextMatchingLicense0.setLicenseFamilyName("hi!");
        java.lang.String str3 = fullTextMatchingLicense0.getLicenseFamilyCategory();
        java.lang.String str4 = fullTextMatchingLicense0.getLicenseFamilyName();
        fullTextMatchingLicense0.setLicenseFamilyName("SpdxBuilder: null");
        fullTextMatchingLicense0.setLicenseFamilyCategory("TMF");
        org.apache.rat.license.ILicenseFamily iLicenseFamily9 = fullTextMatchingLicense0.getLicenseFamily();
        java.util.SortedSet<org.apache.rat.license.ILicenseFamily> iLicenseFamilySet10 = org.apache.rat.license.LicenseFamilySetFactory.emptyLicenseFamilySet();
        org.apache.rat.license.ILicenseFamily iLicenseFamily11 = org.apache.rat.license.LicenseFamilySetFactory.search(iLicenseFamily9, iLicenseFamilySet10);
        java.lang.String str12 = iLicenseFamily9.getFamilyName();
        java.lang.String str13 = iLicenseFamily9.getFamilyCategory();
        org.junit.Assert.assertNull(str3);
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "hi!" + "'", str4, "hi!");
        org.junit.Assert.assertNotNull(iLicenseFamily9);
        org.junit.Assert.assertNotNull(iLicenseFamilySet10);
        org.junit.Assert.assertNull(iLicenseFamily11);
        org.junit.Assert.assertEquals("'" + str12 + "' != '" + "SpdxBuilder: null" + "'", str12, "SpdxBuilder: null");
        org.junit.Assert.assertEquals("'" + str13 + "' != '" + "TMF  " + "'", str13, "TMF  ");
    }

    @Test
    public void test13614() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest27.test13614");
        org.apache.rat.report.claim.ClaimStatistic claimStatistic0 = new org.apache.rat.report.claim.ClaimStatistic();
        claimStatistic0.setNumUnApproved((-1));
        java.util.Map<java.lang.String, java.lang.Integer> strMap3 = claimStatistic0.getDocumentCategoryMap();
        claimStatistic0.setNumUnApproved((int) '#');
        claimStatistic0.setNumApproved((int) (byte) -1);
        claimStatistic0.setNumApproved((int) (byte) 100);
        java.util.Map<java.lang.String, java.lang.Integer> strMap10 = null;
        claimStatistic0.setLicenseFileCodeMap(strMap10);
        int int12 = claimStatistic0.getNumUnApproved();
        int int13 = claimStatistic0.getNumGenerated();
        int int14 = claimStatistic0.getNumUnApproved();
        org.junit.Assert.assertNull(strMap3);
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + 35 + "'", int12 == 35);
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + 0 + "'", int13 == 0);
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + 35 + "'", int14 == 35);
    }

    @Test
    public void test13615() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest27.test13615");
        java.lang.String[] strArray5 = new java.lang.String[] { "http://org/apache/rat/meta-data#LicenseFamilyCategory", "Datum [ name ='http://org/apache/rat/meta-data#LicenseFamilyCategory',value ='GPL1  ']", "MANIFEST.MF", "AllBuilder:", "The MIT License" };
        org.apache.rat.utils.ReportingSet<java.lang.String> strSet6 = new org.apache.rat.utils.ReportingSet<java.lang.String>();
        boolean boolean7 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strSet6, strArray5);
        boolean boolean9 = strSet6.addIfNotPresent("http://org/apache/rat/meta-data#LicenseFamilyName");
        boolean boolean11 = strSet6.addIfNotPresent("ef7a8b13-64c3-4510-bb0c-dbf208e1e73f");
        java.util.function.Function<java.lang.String, java.lang.String> strFunction12 = null;
        org.apache.rat.utils.ReportingSet<java.lang.String> strSet13 = strSet6.setMsgFormat(strFunction12);
        java.lang.String str14 = strSet6.last();
        org.apache.rat.utils.ReportingSet<java.lang.String> strSet16 = strSet6.tailSet("SpdxBuilder: null");
        org.apache.rat.utils.DefaultLog defaultLog17 = org.apache.rat.utils.DefaultLog.INSTANCE;
        org.apache.rat.configuration.builders.AllBuilder allBuilder18 = new org.apache.rat.configuration.builders.AllBuilder();
        org.apache.rat.configuration.builders.MatcherRefBuilder matcherRefBuilder19 = org.apache.rat.analysis.IHeaderMatcher.Builder.matcherRef();
        boolean boolean20 = matcherRefBuilder19.hasId();
        java.lang.String str21 = matcherRefBuilder19.toString();
        org.apache.rat.configuration.builders.AnyBuilder anyBuilder22 = org.apache.rat.analysis.IHeaderMatcher.Builder.any();
        org.apache.rat.configuration.builders.NotBuilder notBuilder23 = new org.apache.rat.configuration.builders.NotBuilder();
        java.lang.String str24 = notBuilder23.toString();
        org.apache.rat.configuration.builders.MatcherRefBuilder matcherRefBuilder25 = org.apache.rat.analysis.IHeaderMatcher.Builder.matcherRef();
        boolean boolean26 = matcherRefBuilder25.hasId();
        java.util.Map<java.lang.String, org.apache.rat.analysis.IHeaderMatcher> strMap27 = null;
        org.apache.rat.configuration.builders.MatcherRefBuilder matcherRefBuilder28 = matcherRefBuilder25.setMatchers(strMap27);
        org.apache.rat.configuration.builders.AllBuilder allBuilder29 = new org.apache.rat.configuration.builders.AllBuilder();
        org.apache.rat.configuration.builders.CopyrightBuilder copyrightBuilder30 = org.apache.rat.analysis.IHeaderMatcher.Builder.copyright();
        org.apache.rat.configuration.builders.CopyrightBuilder copyrightBuilder32 = copyrightBuilder30.setStart("OASIS");
        java.lang.String str33 = copyrightBuilder30.toString();
        org.apache.rat.configuration.builders.CopyrightBuilder copyrightBuilder35 = copyrightBuilder30.setStart("223f0aba-15d4-49e9-901e-5740c137aebf");
        org.apache.rat.configuration.builders.MatcherRefBuilder matcherRefBuilder36 = org.apache.rat.analysis.IHeaderMatcher.Builder.matcherRef();
        boolean boolean37 = matcherRefBuilder36.hasId();
        org.apache.rat.configuration.builders.CopyrightBuilder copyrightBuilder38 = org.apache.rat.analysis.IHeaderMatcher.Builder.copyright();
        org.apache.rat.configuration.builders.CopyrightBuilder copyrightBuilder40 = copyrightBuilder38.setStart("OASIS");
        java.lang.String str41 = copyrightBuilder38.toString();
        org.apache.rat.configuration.builders.CopyrightBuilder copyrightBuilder43 = copyrightBuilder38.setStart("223f0aba-15d4-49e9-901e-5740c137aebf");
        org.apache.rat.configuration.builders.CopyrightBuilder copyrightBuilder44 = org.apache.rat.analysis.IHeaderMatcher.Builder.copyright();
        org.apache.rat.configuration.builders.CopyrightBuilder copyrightBuilder45 = org.apache.rat.analysis.IHeaderMatcher.Builder.copyright();
        java.lang.String str46 = copyrightBuilder45.toString();
        org.apache.rat.configuration.builders.CopyrightBuilder copyrightBuilder48 = copyrightBuilder45.setEnd(".cvsignore");
        boolean boolean49 = copyrightBuilder45.hasId();
        org.apache.rat.configuration.builders.CopyrightBuilder copyrightBuilder50 = org.apache.rat.analysis.IHeaderMatcher.Builder.copyright();
        java.lang.String str51 = copyrightBuilder50.toString();
        org.apache.rat.configuration.builders.CopyrightBuilder copyrightBuilder53 = copyrightBuilder50.setEnd(".cvsignore");
        boolean boolean54 = copyrightBuilder50.hasId();
        java.lang.String str55 = copyrightBuilder50.toString();
        org.apache.rat.configuration.builders.CopyrightBuilder copyrightBuilder56 = org.apache.rat.analysis.IHeaderMatcher.Builder.copyright();
        org.apache.rat.configuration.builders.CopyrightBuilder copyrightBuilder58 = copyrightBuilder56.setStart("OASIS");
        org.apache.rat.configuration.builders.AnyBuilder anyBuilder59 = org.apache.rat.analysis.IHeaderMatcher.Builder.any();
        org.apache.rat.configuration.builders.MatcherRefBuilder matcherRefBuilder60 = org.apache.rat.analysis.IHeaderMatcher.Builder.matcherRef();
        boolean boolean61 = matcherRefBuilder60.hasId();
        java.util.Map<java.lang.String, org.apache.rat.analysis.IHeaderMatcher> strMap62 = null;
        org.apache.rat.configuration.builders.MatcherRefBuilder matcherRefBuilder63 = matcherRefBuilder60.setMatchers(strMap62);
        org.apache.rat.configuration.builders.CopyrightBuilder copyrightBuilder64 = org.apache.rat.analysis.IHeaderMatcher.Builder.copyright();
        org.apache.rat.configuration.builders.MatcherRefBuilder matcherRefBuilder65 = org.apache.rat.analysis.IHeaderMatcher.Builder.matcherRef();
        boolean boolean66 = matcherRefBuilder65.hasId();
        java.lang.String str67 = matcherRefBuilder65.toString();
        java.util.Map<java.lang.String, org.apache.rat.analysis.IHeaderMatcher> strMap68 = null;
        org.apache.rat.configuration.builders.MatcherRefBuilder matcherRefBuilder69 = matcherRefBuilder65.setMatchers(strMap68);
        org.apache.rat.analysis.IHeaderMatcher.Builder[] builderArray70 = new org.apache.rat.analysis.IHeaderMatcher.Builder[] { matcherRefBuilder25, allBuilder29, copyrightBuilder35, matcherRefBuilder36, copyrightBuilder38, copyrightBuilder44, copyrightBuilder45, copyrightBuilder50, copyrightBuilder56, anyBuilder59, matcherRefBuilder60, copyrightBuilder64, matcherRefBuilder65 };
        java.util.ArrayList<org.apache.rat.analysis.IHeaderMatcher.Builder> builderList71 = new java.util.ArrayList<org.apache.rat.analysis.IHeaderMatcher.Builder>();
        boolean boolean72 = java.util.Collections.addAll((java.util.Collection<org.apache.rat.analysis.IHeaderMatcher.Builder>) builderList71, builderArray70);
        org.apache.rat.configuration.builders.AbstractBuilder abstractBuilder73 = notBuilder23.add((java.util.Collection<org.apache.rat.analysis.IHeaderMatcher.Builder>) builderList71);
        org.apache.rat.configuration.builders.MatcherRefBuilder matcherRefBuilder74 = new org.apache.rat.configuration.builders.MatcherRefBuilder();
        org.apache.rat.analysis.IHeaderMatcher.Builder[] builderArray75 = new org.apache.rat.analysis.IHeaderMatcher.Builder[] { matcherRefBuilder19, anyBuilder22, notBuilder23, matcherRefBuilder74 };
        java.util.ArrayList<org.apache.rat.analysis.IHeaderMatcher.Builder> builderList76 = new java.util.ArrayList<org.apache.rat.analysis.IHeaderMatcher.Builder>();
        boolean boolean77 = java.util.Collections.addAll((java.util.Collection<org.apache.rat.analysis.IHeaderMatcher.Builder>) builderList76, builderArray75);
        org.apache.rat.configuration.builders.AbstractBuilder abstractBuilder78 = allBuilder18.add((java.util.Collection<org.apache.rat.analysis.IHeaderMatcher.Builder>) builderList76);
        defaultLog17.info((java.lang.Object) allBuilder18);
        org.apache.rat.ReportConfiguration reportConfiguration80 = new org.apache.rat.ReportConfiguration((org.apache.rat.utils.Log) defaultLog17);
        org.apache.rat.utils.Log log81 = null;
        org.apache.rat.ReportConfiguration reportConfiguration82 = new org.apache.rat.ReportConfiguration(log81);
        reportConfiguration82.addApprovedLicenseCategory(".cvsignore");
        org.apache.rat.utils.Log.Level level85 = org.apache.rat.utils.Log.Level.ERROR;
        reportConfiguration82.logFamilyCollisions(level85);
        defaultLog17.setLevel(level85);
        org.apache.rat.annotation.ApacheV2LicenseAppender apacheV2LicenseAppender89 = new org.apache.rat.annotation.ApacheV2LicenseAppender((org.apache.rat.utils.Log) defaultLog17, "true");
        org.apache.rat.ReportConfiguration reportConfiguration90 = new org.apache.rat.ReportConfiguration((org.apache.rat.utils.Log) defaultLog17);
        org.apache.rat.ReportConfiguration reportConfiguration91 = new org.apache.rat.ReportConfiguration((org.apache.rat.utils.Log) defaultLog17);
        org.apache.rat.utils.ReportingSet<java.lang.String> strSet92 = strSet6.setLog((org.apache.rat.utils.Log) defaultLog17);
        java.lang.Throwable throwable94 = null;
        // The following exception was thrown during execution in test generation
        try {
            defaultLog17.debug((java.lang.Object) "SpdxBuilder: null f1fc8dc8-990d-4a2d-9540-4e9ece3bd92c", throwable94);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(strArray5);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + true + "'", boolean7 == true);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + true + "'", boolean9 == true);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + true + "'", boolean11 == true);
        org.junit.Assert.assertNotNull(strSet13);
        org.junit.Assert.assertEquals("'" + str14 + "' != '" + "http://org/apache/rat/meta-data#LicenseFamilyName" + "'", str14, "http://org/apache/rat/meta-data#LicenseFamilyName");
        org.junit.Assert.assertNotNull(strSet16);
        org.junit.Assert.assertNotNull(defaultLog17);
        org.junit.Assert.assertNotNull(matcherRefBuilder19);
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + false + "'", boolean20 == false);
        org.junit.Assert.assertEquals("'" + str21 + "' != '" + "MathcerRefBuilder: null" + "'", str21, "MathcerRefBuilder: null");
        org.junit.Assert.assertNotNull(anyBuilder22);
        org.junit.Assert.assertEquals("'" + str24 + "' != '" + "NotBuilder: null" + "'", str24, "NotBuilder: null");
        org.junit.Assert.assertNotNull(matcherRefBuilder25);
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + false + "'", boolean26 == false);
        org.junit.Assert.assertNotNull(matcherRefBuilder28);
        org.junit.Assert.assertNotNull(copyrightBuilder30);
        org.junit.Assert.assertNotNull(copyrightBuilder32);
        org.junit.Assert.assertEquals("'" + str33 + "' != '" + "Copyright Builder: s:OASIS e:null o:null" + "'", str33, "Copyright Builder: s:OASIS e:null o:null");
        org.junit.Assert.assertNotNull(copyrightBuilder35);
        org.junit.Assert.assertNotNull(matcherRefBuilder36);
        org.junit.Assert.assertTrue("'" + boolean37 + "' != '" + false + "'", boolean37 == false);
        org.junit.Assert.assertNotNull(copyrightBuilder38);
        org.junit.Assert.assertNotNull(copyrightBuilder40);
        org.junit.Assert.assertEquals("'" + str41 + "' != '" + "Copyright Builder: s:OASIS e:null o:null" + "'", str41, "Copyright Builder: s:OASIS e:null o:null");
        org.junit.Assert.assertNotNull(copyrightBuilder43);
        org.junit.Assert.assertNotNull(copyrightBuilder44);
        org.junit.Assert.assertNotNull(copyrightBuilder45);
        org.junit.Assert.assertEquals("'" + str46 + "' != '" + "Copyright Builder: s:null e:null o:null" + "'", str46, "Copyright Builder: s:null e:null o:null");
        org.junit.Assert.assertNotNull(copyrightBuilder48);
        org.junit.Assert.assertTrue("'" + boolean49 + "' != '" + false + "'", boolean49 == false);
        org.junit.Assert.assertNotNull(copyrightBuilder50);
        org.junit.Assert.assertEquals("'" + str51 + "' != '" + "Copyright Builder: s:null e:null o:null" + "'", str51, "Copyright Builder: s:null e:null o:null");
        org.junit.Assert.assertNotNull(copyrightBuilder53);
        org.junit.Assert.assertTrue("'" + boolean54 + "' != '" + false + "'", boolean54 == false);
        org.junit.Assert.assertEquals("'" + str55 + "' != '" + "Copyright Builder: s:null e:.cvsignore o:null" + "'", str55, "Copyright Builder: s:null e:.cvsignore o:null");
        org.junit.Assert.assertNotNull(copyrightBuilder56);
        org.junit.Assert.assertNotNull(copyrightBuilder58);
        org.junit.Assert.assertNotNull(anyBuilder59);
        org.junit.Assert.assertNotNull(matcherRefBuilder60);
        org.junit.Assert.assertTrue("'" + boolean61 + "' != '" + false + "'", boolean61 == false);
        org.junit.Assert.assertNotNull(matcherRefBuilder63);
        org.junit.Assert.assertNotNull(copyrightBuilder64);
        org.junit.Assert.assertNotNull(matcherRefBuilder65);
        org.junit.Assert.assertTrue("'" + boolean66 + "' != '" + false + "'", boolean66 == false);
        org.junit.Assert.assertEquals("'" + str67 + "' != '" + "MathcerRefBuilder: null" + "'", str67, "MathcerRefBuilder: null");
        org.junit.Assert.assertNotNull(matcherRefBuilder69);
        org.junit.Assert.assertNotNull(builderArray70);
        org.junit.Assert.assertTrue("'" + boolean72 + "' != '" + true + "'", boolean72 == true);
        org.junit.Assert.assertNotNull(abstractBuilder73);
        org.junit.Assert.assertNotNull(builderArray75);
        org.junit.Assert.assertTrue("'" + boolean77 + "' != '" + true + "'", boolean77 == true);
        org.junit.Assert.assertNotNull(abstractBuilder78);
        org.junit.Assert.assertTrue("'" + level85 + "' != '" + org.apache.rat.utils.Log.Level.ERROR + "'", level85.equals(org.apache.rat.utils.Log.Level.ERROR));
        org.junit.Assert.assertNotNull(strSet92);
    }

    @Test
    public void test13616() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest27.test13616");
        org.apache.rat.configuration.Format format0 = org.apache.rat.configuration.Format.XML;
        org.apache.rat.configuration.LicenseReader licenseReader1 = format0.licenseReader();
        java.util.SortedSet<org.apache.rat.license.ILicense> iLicenseSet2 = licenseReader1.readLicenses();
        java.lang.String[] strArray8 = new java.lang.String[] { "http://org/apache/rat/meta-data#LicenseFamilyCategory", "Datum [ name ='http://org/apache/rat/meta-data#LicenseFamilyCategory',value ='GPL1  ']", "MANIFEST.MF", "AllBuilder:", "The MIT License" };
        org.apache.rat.utils.ReportingSet<java.lang.String> strSet9 = new org.apache.rat.utils.ReportingSet<java.lang.String>();
        boolean boolean10 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strSet9, strArray8);
        boolean boolean12 = strSet9.addIfNotPresent("http://org/apache/rat/meta-data#LicenseFamilyName");
        boolean boolean14 = strSet9.addIfNotPresent("ef7a8b13-64c3-4510-bb0c-dbf208e1e73f");
        java.util.function.Function<java.lang.String, java.lang.String> strFunction15 = null;
        org.apache.rat.utils.ReportingSet<java.lang.String> strSet16 = strSet9.setMsgFormat(strFunction15);
        boolean boolean17 = strSet9.isEmpty();
        org.apache.rat.license.LicenseSetFactory licenseSetFactory18 = new org.apache.rat.license.LicenseSetFactory(iLicenseSet2, (java.util.Collection<java.lang.String>) strSet9);
        org.apache.rat.license.ILicenseFamily[] iLicenseFamilyArray19 = new org.apache.rat.license.ILicenseFamily[] {};
        java.util.ArrayList<org.apache.rat.license.ILicenseFamily> iLicenseFamilyList20 = new java.util.ArrayList<org.apache.rat.license.ILicenseFamily>();
        boolean boolean21 = java.util.Collections.addAll((java.util.Collection<org.apache.rat.license.ILicenseFamily>) iLicenseFamilyList20, iLicenseFamilyArray19);
        org.apache.rat.policy.DefaultPolicy defaultPolicy22 = new org.apache.rat.policy.DefaultPolicy((java.util.Collection<org.apache.rat.license.ILicenseFamily>) iLicenseFamilyList20);
        boolean boolean23 = strSet9.removeAll((java.util.Collection<org.apache.rat.license.ILicenseFamily>) iLicenseFamilyList20);
        org.apache.rat.policy.DefaultPolicy defaultPolicy24 = new org.apache.rat.policy.DefaultPolicy((java.util.Collection<org.apache.rat.license.ILicenseFamily>) iLicenseFamilyList20);
        org.apache.rat.license.ILicenseFamily[] iLicenseFamilyArray25 = new org.apache.rat.license.ILicenseFamily[] {};
        java.util.ArrayList<org.apache.rat.license.ILicenseFamily> iLicenseFamilyList26 = new java.util.ArrayList<org.apache.rat.license.ILicenseFamily>();
        boolean boolean27 = java.util.Collections.addAll((java.util.Collection<org.apache.rat.license.ILicenseFamily>) iLicenseFamilyList26, iLicenseFamilyArray25);
        org.apache.rat.policy.DefaultPolicy defaultPolicy28 = new org.apache.rat.policy.DefaultPolicy((java.util.Collection<org.apache.rat.license.ILicenseFamily>) iLicenseFamilyList26);
        org.apache.rat.api.Document document29 = null;
        defaultPolicy28.analyse(document29);
        org.apache.rat.api.Document document31 = null;
        defaultPolicy28.analyse(document31);
        org.apache.rat.Defaults.Builder builder33 = org.apache.rat.Defaults.builder();
        org.apache.rat.Defaults defaults34 = builder33.build();
        org.apache.rat.utils.Log log35 = null;
        org.apache.rat.ReportConfiguration reportConfiguration36 = new org.apache.rat.ReportConfiguration(log35);
        org.apache.rat.report.claim.ClaimStatistic claimStatistic37 = org.apache.rat.Reporter.report(reportConfiguration36);
        org.apache.rat.license.LicenseSetFactory.LicenseFilter licenseFilter38 = org.apache.rat.license.LicenseSetFactory.LicenseFilter.all;
        org.apache.rat.Reporter.listLicenses(reportConfiguration36, licenseFilter38);
        java.util.SortedSet<org.apache.rat.license.ILicenseFamily> iLicenseFamilySet40 = defaults34.getLicenseFamilies(licenseFilter38);
        org.apache.rat.policy.DefaultPolicy defaultPolicy41 = new org.apache.rat.policy.DefaultPolicy((java.util.Collection<org.apache.rat.license.ILicenseFamily>) iLicenseFamilySet40);
        java.util.SortedSet<org.apache.rat.license.ILicenseFamily> iLicenseFamilySet42 = defaultPolicy41.getApprovedLicenseNames();
        org.apache.rat.document.IDocumentAnalyser[] iDocumentAnalyserArray43 = new org.apache.rat.document.IDocumentAnalyser[] { defaultPolicy24, defaultPolicy28, defaultPolicy41 };
        org.apache.rat.document.impl.util.DocumentAnalyserMultiplexer documentAnalyserMultiplexer44 = new org.apache.rat.document.impl.util.DocumentAnalyserMultiplexer(iDocumentAnalyserArray43);
        org.apache.rat.document.impl.util.DocumentAnalyserMultiplexer documentAnalyserMultiplexer45 = new org.apache.rat.document.impl.util.DocumentAnalyserMultiplexer(iDocumentAnalyserArray43);
        org.apache.rat.document.impl.util.DocumentAnalyserMultiplexer documentAnalyserMultiplexer46 = new org.apache.rat.document.impl.util.DocumentAnalyserMultiplexer(iDocumentAnalyserArray43);
        org.apache.rat.document.impl.util.DocumentAnalyserMultiplexer documentAnalyserMultiplexer47 = new org.apache.rat.document.impl.util.DocumentAnalyserMultiplexer(iDocumentAnalyserArray43);
        org.apache.rat.document.impl.util.DocumentAnalyserMultiplexer documentAnalyserMultiplexer48 = new org.apache.rat.document.impl.util.DocumentAnalyserMultiplexer(iDocumentAnalyserArray43);
        org.junit.Assert.assertTrue("'" + format0 + "' != '" + org.apache.rat.configuration.Format.XML + "'", format0.equals(org.apache.rat.configuration.Format.XML));
        org.junit.Assert.assertNotNull(licenseReader1);
        org.junit.Assert.assertNotNull(iLicenseSet2);
        org.junit.Assert.assertNotNull(strArray8);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + true + "'", boolean10 == true);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + true + "'", boolean12 == true);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + true + "'", boolean14 == true);
        org.junit.Assert.assertNotNull(strSet16);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + false + "'", boolean17 == false);
        org.junit.Assert.assertNotNull(iLicenseFamilyArray19);
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + false + "'", boolean21 == false);
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + false + "'", boolean23 == false);
        org.junit.Assert.assertNotNull(iLicenseFamilyArray25);
        org.junit.Assert.assertTrue("'" + boolean27 + "' != '" + false + "'", boolean27 == false);
        org.junit.Assert.assertNotNull(builder33);
        org.junit.Assert.assertNotNull(defaults34);
        org.junit.Assert.assertNull(claimStatistic37);
        org.junit.Assert.assertTrue("'" + licenseFilter38 + "' != '" + org.apache.rat.license.LicenseSetFactory.LicenseFilter.all + "'", licenseFilter38.equals(org.apache.rat.license.LicenseSetFactory.LicenseFilter.all));
        org.junit.Assert.assertNotNull(iLicenseFamilySet40);
        org.junit.Assert.assertNotNull(iLicenseFamilySet42);
        org.junit.Assert.assertNotNull(iDocumentAnalyserArray43);
    }

    @Test
    public void test13617() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest27.test13617");
        org.apache.rat.utils.DefaultLog defaultLog0 = org.apache.rat.utils.DefaultLog.INSTANCE;
        org.apache.rat.license.ILicense.Builder builder1 = org.apache.rat.license.ILicense.builder();
        org.apache.rat.license.ILicense.Builder builder3 = builder1.setLicenseFamilyCategory("");
        org.apache.rat.analysis.matchers.CopyrightMatcher copyrightMatcher7 = new org.apache.rat.analysis.matchers.CopyrightMatcher("", "GPL1 ", "hi!");
        org.apache.rat.analysis.IHeaderMatcher.State state8 = copyrightMatcher7.finalizeState();
        org.apache.rat.license.ILicense.Builder builder9 = builder3.setMatcher((org.apache.rat.analysis.IHeaderMatcher) copyrightMatcher7);
        org.apache.rat.license.ILicense.Builder builder11 = builder9.setLicenseFamilyCategory("");
        defaultLog0.error((java.lang.Object) builder11);
        org.apache.rat.utils.Log.Level level13 = org.apache.rat.utils.Log.Level.DEBUG;
        defaultLog0.setLevel(level13);
        org.apache.rat.license.SimpleLicenseFamily simpleLicenseFamily15 = new org.apache.rat.license.SimpleLicenseFamily();
        java.lang.String str16 = simpleLicenseFamily15.getFamilyName();
        java.lang.String str17 = simpleLicenseFamily15.getFamilyCategory();
        simpleLicenseFamily15.setFamilyCategory("W3C  ");
        simpleLicenseFamily15.setFamilyCategory("AllBuilder:");
        defaultLog0.info((java.lang.Object) simpleLicenseFamily15);
        org.apache.rat.license.ILicenseFamilyBuilder iLicenseFamilyBuilder23 = new org.apache.rat.license.ILicenseFamilyBuilder();
        java.lang.String str24 = iLicenseFamilyBuilder23.getCategory();
        org.apache.rat.license.ILicenseFamily.Builder builder26 = iLicenseFamilyBuilder23.setLicenseFamilyCategory("AL   ");
        org.apache.rat.license.ILicenseFamily.Builder builder28 = iLicenseFamilyBuilder23.setLicenseFamilyCategory("MIT  ");
        org.apache.rat.license.ILicenseFamily.Builder builder30 = iLicenseFamilyBuilder23.setLicenseFamilyName("4a00cf7d-fe76-423e-917e-b03bbae6b8a5");
        java.lang.String str31 = iLicenseFamilyBuilder23.getCategory();
        org.apache.rat.license.ILicenseFamily.Builder builder33 = iLicenseFamilyBuilder23.setLicenseFamilyName("8ecb8cce-06e4-400f-84d9-ad1cf6289fda");
        org.apache.rat.license.ILicenseFamily.Builder builder35 = iLicenseFamilyBuilder23.setLicenseFamilyCategory("8f82a952-5bfd-446b-ac79-15beef5b3f17");
        defaultLog0.warn((java.lang.Object) iLicenseFamilyBuilder23);
        java.lang.String str37 = iLicenseFamilyBuilder23.getCategory();
        org.apache.rat.license.ILicenseFamily.Builder builder39 = iLicenseFamilyBuilder23.setLicenseFamilyName("90663eff7ed841bd85a8e8f189198bc6");
        org.junit.Assert.assertNotNull(defaultLog0);
        org.junit.Assert.assertNotNull(builder1);
        org.junit.Assert.assertNotNull(builder3);
        org.junit.Assert.assertTrue("'" + state8 + "' != '" + org.apache.rat.analysis.IHeaderMatcher.State.f + "'", state8.equals(org.apache.rat.analysis.IHeaderMatcher.State.f));
        org.junit.Assert.assertNotNull(builder9);
        org.junit.Assert.assertNotNull(builder11);
        org.junit.Assert.assertTrue("'" + level13 + "' != '" + org.apache.rat.utils.Log.Level.DEBUG + "'", level13.equals(org.apache.rat.utils.Log.Level.DEBUG));
        org.junit.Assert.assertNull(str16);
        org.junit.Assert.assertNull(str17);
        org.junit.Assert.assertNull(str24);
        org.junit.Assert.assertNotNull(builder26);
        org.junit.Assert.assertNotNull(builder28);
        org.junit.Assert.assertNotNull(builder30);
        org.junit.Assert.assertEquals("'" + str31 + "' != '" + "MIT  " + "'", str31, "MIT  ");
        org.junit.Assert.assertNotNull(builder33);
        org.junit.Assert.assertNotNull(builder35);
        org.junit.Assert.assertEquals("'" + str37 + "' != '" + "8f82a952-5bfd-446b-ac79-15beef5b3f17" + "'", str37, "8f82a952-5bfd-446b-ac79-15beef5b3f17");
        org.junit.Assert.assertNotNull(builder39);
    }

    @Test
    public void test13618() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest27.test13618");
        org.apache.rat.analysis.matchers.SimpleTextMatcher simpleTextMatcher2 = new org.apache.rat.analysis.matchers.SimpleTextMatcher("641dafc1-13c3-45d4-8272-f36f10392c53", "8f82a952-5bfd-446b-ac79-15beef5b3f17");
        org.apache.rat.analysis.IHeaderMatcher.State state4 = simpleTextMatcher2.matches("i indeterminent");
        boolean boolean6 = simpleTextMatcher2.doMatch("008d1eb8-d72a-4776-ad45-49906b2cc4cb");
        boolean boolean8 = simpleTextMatcher2.doMatch("357bf79d-4123-4d3b-a061-96986cdaedaa");
        org.junit.Assert.assertTrue("'" + state4 + "' != '" + org.apache.rat.analysis.IHeaderMatcher.State.i + "'", state4.equals(org.apache.rat.analysis.IHeaderMatcher.State.i));
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
    }

    @Test
    public void test13619() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest27.test13619");
        // The following exception was thrown during execution in test generation
        try {
            org.apache.rat.configuration.MatcherBuilderTracker.addBuilder("", "b354cbc5-3979-47a3-bd55-7cac24b47d97");
            org.junit.Assert.fail("Expected exception of type org.apache.rat.ConfigurationException; message: java.lang.ClassNotFoundException: ");
        } catch (org.apache.rat.ConfigurationException e) {
            // Expected exception.
        }
    }

    @Test
    public void test13620() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest27.test13620");
        boolean boolean1 = org.apache.rat.document.impl.guesser.BinaryGuesser.isBytecode("978817c0-e5ba-4e91-b014-bbf924d650a4");
        org.junit.Assert.assertTrue("'" + boolean1 + "' != '" + false + "'", boolean1 == false);
    }

    @Test
    public void test13621() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest27.test13621");
        org.apache.rat.utils.Log log0 = null;
        org.apache.rat.ReportConfiguration reportConfiguration1 = new org.apache.rat.ReportConfiguration(log0);
        java.io.FilenameFilter filenameFilter2 = reportConfiguration1.getInputFileFilter();
        org.apache.rat.license.LicenseSetFactory.LicenseFilter licenseFilter3 = org.apache.rat.license.LicenseSetFactory.LicenseFilter.all;
        java.util.SortedSet<org.apache.rat.license.ILicense> iLicenseSet4 = reportConfiguration1.getLicenses(licenseFilter3);
        org.apache.rat.license.ILicenseFamily iLicenseFamily5 = null;
        reportConfiguration1.addFamily(iLicenseFamily5);
        org.apache.rat.license.ILicense iLicense7 = null;
        reportConfiguration1.addLicense(iLicense7);
        org.apache.rat.license.ILicenseFamily.Builder builder9 = org.apache.rat.license.ILicenseFamily.builder();
        java.lang.String str10 = builder9.getCategory();
        org.apache.rat.license.ILicenseFamily.Builder builder12 = builder9.setLicenseFamilyCategory("Copyright Builder: s:null e:null o:null");
        org.apache.rat.license.ILicenseFamily.Builder builder14 = builder12.setLicenseFamilyName("6486879f-fc81-4b57-aec7-c4c77d540c30");
        org.apache.rat.license.ILicenseFamily.Builder builder16 = builder12.setLicenseFamilyCategory("Datum [ name ='http://org/apache/rat/meta-data#LicenseFamilyCategory',value ='OASIS ']");
        org.apache.rat.license.ILicenseFamily.Builder builder18 = builder16.setLicenseFamilyName("standard");
        org.apache.rat.license.ILicenseFamily iLicenseFamily19 = builder18.build();
        reportConfiguration1.addFamily(iLicenseFamily19);
        org.apache.rat.report.claim.ClaimStatistic claimStatistic21 = org.apache.rat.Reporter.report(reportConfiguration1);
        java.util.SortedSet<org.apache.rat.license.ILicenseFamily> iLicenseFamilySet23 = org.apache.rat.license.LicenseFamilySetFactory.emptyLicenseFamilySet();
        org.apache.rat.license.ILicenseFamily iLicenseFamily24 = org.apache.rat.license.LicenseFamilySetFactory.search("http://org/apache/rat/meta-data", iLicenseFamilySet23);
        org.apache.rat.policy.DefaultPolicy defaultPolicy25 = new org.apache.rat.policy.DefaultPolicy((java.util.Collection<org.apache.rat.license.ILicenseFamily>) iLicenseFamilySet23);
        org.apache.rat.api.Document document26 = null;
        defaultPolicy25.analyse(document26);
        org.apache.rat.analysis.license.FullTextMatchingLicense fullTextMatchingLicense28 = new org.apache.rat.analysis.license.FullTextMatchingLicense();
        fullTextMatchingLicense28.setLicenseFamilyName("hi!");
        java.lang.String str31 = fullTextMatchingLicense28.getLicenseFamilyCategory();
        java.lang.String str32 = fullTextMatchingLicense28.getLicenseFamilyName();
        fullTextMatchingLicense28.setLicenseFamilyName("SpdxBuilder: null");
        fullTextMatchingLicense28.setLicenseFamilyCategory("TMF");
        org.apache.rat.license.ILicenseFamily iLicenseFamily37 = fullTextMatchingLicense28.getLicenseFamily();
        java.lang.String str38 = iLicenseFamily37.getFamilyName();
        java.lang.String str39 = iLicenseFamily37.getFamilyName();
        org.apache.rat.license.ILicenseFamilyBuilder iLicenseFamilyBuilder40 = new org.apache.rat.license.ILicenseFamilyBuilder();
        java.lang.String str41 = iLicenseFamilyBuilder40.getCategory();
        org.apache.rat.license.ILicenseFamily.Builder builder43 = iLicenseFamilyBuilder40.setLicenseFamilyCategory("AL   ");
        org.apache.rat.license.ILicenseFamily.Builder builder45 = iLicenseFamilyBuilder40.setLicenseFamilyCategory("MIT  ");
        org.apache.rat.license.ILicenseFamily.Builder builder47 = iLicenseFamilyBuilder40.setLicenseFamilyName("4a00cf7d-fe76-423e-917e-b03bbae6b8a5");
        java.lang.String str48 = iLicenseFamilyBuilder40.getCategory();
        org.apache.rat.license.ILicenseFamily.Builder builder50 = iLicenseFamilyBuilder40.setLicenseFamilyName("8ecb8cce-06e4-400f-84d9-ad1cf6289fda");
        org.apache.rat.license.ILicenseFamily iLicenseFamily51 = iLicenseFamilyBuilder40.build();
        int int52 = iLicenseFamily37.compareTo(iLicenseFamily51);
        defaultPolicy25.add(iLicenseFamily51);
        reportConfiguration1.addApprovedLicenseCategory(iLicenseFamily51);
        org.junit.Assert.assertNull(filenameFilter2);
        org.junit.Assert.assertTrue("'" + licenseFilter3 + "' != '" + org.apache.rat.license.LicenseSetFactory.LicenseFilter.all + "'", licenseFilter3.equals(org.apache.rat.license.LicenseSetFactory.LicenseFilter.all));
        org.junit.Assert.assertNotNull(iLicenseSet4);
        org.junit.Assert.assertNotNull(builder9);
        org.junit.Assert.assertNull(str10);
        org.junit.Assert.assertNotNull(builder12);
        org.junit.Assert.assertNotNull(builder14);
        org.junit.Assert.assertNotNull(builder16);
        org.junit.Assert.assertNotNull(builder18);
        org.junit.Assert.assertNotNull(iLicenseFamily19);
        org.junit.Assert.assertNull(claimStatistic21);
        org.junit.Assert.assertNotNull(iLicenseFamilySet23);
        org.junit.Assert.assertNull(iLicenseFamily24);
        org.junit.Assert.assertNull(str31);
        org.junit.Assert.assertEquals("'" + str32 + "' != '" + "hi!" + "'", str32, "hi!");
        org.junit.Assert.assertNotNull(iLicenseFamily37);
        org.junit.Assert.assertEquals("'" + str38 + "' != '" + "SpdxBuilder: null" + "'", str38, "SpdxBuilder: null");
        org.junit.Assert.assertEquals("'" + str39 + "' != '" + "SpdxBuilder: null" + "'", str39, "SpdxBuilder: null");
        org.junit.Assert.assertNull(str41);
        org.junit.Assert.assertNotNull(builder43);
        org.junit.Assert.assertNotNull(builder45);
        org.junit.Assert.assertNotNull(builder47);
        org.junit.Assert.assertEquals("'" + str48 + "' != '" + "MIT  " + "'", str48, "MIT  ");
        org.junit.Assert.assertNotNull(builder50);
        org.junit.Assert.assertNotNull(iLicenseFamily51);
        org.junit.Assert.assertTrue("'" + int52 + "' != '" + 7 + "'", int52 == 7);
    }

    @Test
    public void test13622() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest27.test13622");
        org.apache.rat.utils.Log log0 = null;
        org.apache.rat.ReportConfiguration reportConfiguration1 = new org.apache.rat.ReportConfiguration(log0);
        java.io.FilenameFilter filenameFilter2 = reportConfiguration1.getInputFileFilter();
        org.apache.rat.license.LicenseSetFactory.LicenseFilter licenseFilter3 = org.apache.rat.license.LicenseSetFactory.LicenseFilter.all;
        java.util.SortedSet<org.apache.rat.license.ILicense> iLicenseSet4 = reportConfiguration1.getLicenses(licenseFilter3);
        org.apache.rat.configuration.Format format6 = org.apache.rat.configuration.Format.XML;
        org.apache.rat.configuration.LicenseReader licenseReader7 = format6.licenseReader();
        org.apache.rat.configuration.MatcherReader matcherReader8 = format6.matcherReader();
        org.apache.rat.configuration.LicenseReader licenseReader9 = format6.licenseReader();
        java.util.SortedSet<org.apache.rat.license.ILicense> iLicenseSet10 = licenseReader9.readLicenses();
        org.apache.rat.license.ILicense iLicense11 = org.apache.rat.license.LicenseSetFactory.search("Datum [ name ='http://org/apache/rat/meta-data#LicenseFamilyCategory',value ='GPL1  ']", iLicenseSet10);
        java.lang.String[] strArray17 = new java.lang.String[] { "http://org/apache/rat/meta-data#LicenseFamilyCategory", "Datum [ name ='http://org/apache/rat/meta-data#LicenseFamilyCategory',value ='GPL1  ']", "MANIFEST.MF", "AllBuilder:", "The MIT License" };
        org.apache.rat.utils.ReportingSet<java.lang.String> strSet18 = new org.apache.rat.utils.ReportingSet<java.lang.String>();
        boolean boolean19 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strSet18, strArray17);
        boolean boolean21 = strSet18.addIfNotPresent("http://org/apache/rat/meta-data#LicenseFamilyName");
        boolean boolean23 = strSet18.addIfNotPresent("ef7a8b13-64c3-4510-bb0c-dbf208e1e73f");
        java.util.function.Function<java.lang.String, java.lang.String> strFunction24 = null;
        org.apache.rat.utils.ReportingSet<java.lang.String> strSet25 = strSet18.setMsgFormat(strFunction24);
        org.apache.rat.utils.DefaultLog defaultLog26 = org.apache.rat.utils.DefaultLog.INSTANCE;
        org.apache.rat.utils.Log log27 = null;
        org.apache.rat.ReportConfiguration reportConfiguration28 = new org.apache.rat.ReportConfiguration(log27);
        java.io.FilenameFilter filenameFilter29 = reportConfiguration28.getInputFileFilter();
        org.apache.rat.license.LicenseSetFactory.LicenseFilter licenseFilter30 = org.apache.rat.license.LicenseSetFactory.LicenseFilter.all;
        java.util.SortedSet<org.apache.rat.license.ILicense> iLicenseSet31 = reportConfiguration28.getLicenses(licenseFilter30);
        org.apache.rat.config.AddLicenseHeaders addLicenseHeaders32 = org.apache.rat.config.AddLicenseHeaders.FALSE;
        reportConfiguration28.setAddLicenseHeaders(addLicenseHeaders32);
        org.apache.rat.utils.Log log34 = null;
        org.apache.rat.ReportConfiguration reportConfiguration35 = new org.apache.rat.ReportConfiguration(log34);
        org.apache.rat.report.claim.ClaimStatistic claimStatistic36 = org.apache.rat.Reporter.report(reportConfiguration35);
        org.apache.rat.license.LicenseSetFactory.LicenseFilter licenseFilter37 = org.apache.rat.license.LicenseSetFactory.LicenseFilter.all;
        org.apache.rat.Reporter.listLicenses(reportConfiguration35, licenseFilter37);
        org.apache.rat.Reporter.listLicenses(reportConfiguration28, licenseFilter37);
        org.apache.rat.utils.Log log40 = null;
        org.apache.rat.ReportConfiguration reportConfiguration41 = new org.apache.rat.ReportConfiguration(log40);
        java.io.FilenameFilter filenameFilter42 = reportConfiguration41.getInputFileFilter();
        org.apache.rat.license.LicenseSetFactory.LicenseFilter licenseFilter43 = org.apache.rat.license.LicenseSetFactory.LicenseFilter.all;
        java.util.SortedSet<org.apache.rat.license.ILicense> iLicenseSet44 = reportConfiguration41.getLicenses(licenseFilter43);
        org.apache.rat.config.AddLicenseHeaders addLicenseHeaders45 = org.apache.rat.config.AddLicenseHeaders.FALSE;
        reportConfiguration41.setAddLicenseHeaders(addLicenseHeaders45);
        org.apache.rat.utils.Log log47 = null;
        org.apache.rat.ReportConfiguration reportConfiguration48 = new org.apache.rat.ReportConfiguration(log47);
        org.apache.rat.report.claim.ClaimStatistic claimStatistic49 = org.apache.rat.Reporter.report(reportConfiguration48);
        org.apache.rat.license.LicenseSetFactory.LicenseFilter licenseFilter50 = org.apache.rat.license.LicenseSetFactory.LicenseFilter.all;
        org.apache.rat.Reporter.listLicenses(reportConfiguration48, licenseFilter50);
        org.apache.rat.Reporter.listLicenses(reportConfiguration41, licenseFilter50);
        org.apache.rat.Reporter.listLicenses(reportConfiguration28, licenseFilter50);
        org.apache.rat.utils.Log log54 = null;
        org.apache.rat.ReportConfiguration reportConfiguration55 = new org.apache.rat.ReportConfiguration(log54);
        org.apache.commons.io.function.IOSupplier<java.io.OutputStream> outputStreamIOSupplier56 = reportConfiguration55.getOutput();
        reportConfiguration28.setOut(outputStreamIOSupplier56);
        org.apache.rat.utils.Log log58 = null;
        org.apache.rat.ReportConfiguration reportConfiguration59 = new org.apache.rat.ReportConfiguration(log58);
        org.apache.rat.report.claim.ClaimStatistic claimStatistic60 = org.apache.rat.Reporter.report(reportConfiguration59);
        org.apache.rat.utils.Log log61 = null;
        org.apache.rat.ReportConfiguration reportConfiguration62 = new org.apache.rat.ReportConfiguration(log61);
        org.apache.rat.report.claim.ClaimStatistic claimStatistic63 = org.apache.rat.Reporter.report(reportConfiguration62);
        org.apache.rat.utils.ReportingSet.Options options64 = org.apache.rat.utils.ReportingSet.Options.OVERWRITE;
        reportConfiguration62.licenseDuplicateOption(options64);
        reportConfiguration59.familyDuplicateOption(options64);
        reportConfiguration28.licenseDuplicateOption(options64);
        reportConfiguration28.addApprovedLicenseCategory("W3C Document Copyright");
        org.apache.rat.utils.Log log70 = null;
        org.apache.rat.ReportConfiguration reportConfiguration71 = new org.apache.rat.ReportConfiguration(log70);
        reportConfiguration71.addApprovedLicenseCategory(".cvsignore");
        org.apache.rat.utils.Log.Level level74 = org.apache.rat.utils.Log.Level.ERROR;
        reportConfiguration71.logLicenseCollisions(level74);
        reportConfiguration28.logLicenseCollisions(level74);
        defaultLog26.setLevel(level74);
        defaultLog26.warn((java.lang.Object) "GNU General Public License, version 3");
        org.apache.rat.ReportConfiguration reportConfiguration80 = new org.apache.rat.ReportConfiguration((org.apache.rat.utils.Log) defaultLog26);
        org.apache.rat.utils.DefaultLog defaultLog81 = org.apache.rat.utils.DefaultLog.INSTANCE;
        org.apache.rat.utils.Log log82 = null;
        org.apache.rat.ReportConfiguration reportConfiguration83 = new org.apache.rat.ReportConfiguration(log82);
        reportConfiguration83.addApprovedLicenseCategory(".cvsignore");
        org.apache.rat.utils.Log.Level level86 = org.apache.rat.utils.Log.Level.ERROR;
        reportConfiguration83.logFamilyCollisions(level86);
        defaultLog81.setLevel(level86);
        defaultLog26.debug((java.lang.Object) level86);
        org.apache.rat.utils.ReportingSet<java.lang.String> strSet90 = strSet25.setLogLevel(level86);
        org.apache.rat.license.LicenseSetFactory licenseSetFactory91 = new org.apache.rat.license.LicenseSetFactory(iLicenseSet10, (java.util.Collection<java.lang.String>) strSet90);
        org.apache.rat.license.LicenseSetFactory licenseSetFactory92 = new org.apache.rat.license.LicenseSetFactory(iLicenseSet4, (java.util.Collection<java.lang.String>) strSet90);
        org.apache.rat.utils.Log.Level level93 = null;
        org.apache.rat.utils.ReportingSet<java.lang.String> strSet94 = strSet90.setLogLevel(level93);
        java.lang.Object[] objArray95 = strSet94.toArray();
        java.util.Comparator<? super java.lang.String> wildcardComparator96 = strSet94.comparator();
        org.junit.Assert.assertNull(filenameFilter2);
        org.junit.Assert.assertTrue("'" + licenseFilter3 + "' != '" + org.apache.rat.license.LicenseSetFactory.LicenseFilter.all + "'", licenseFilter3.equals(org.apache.rat.license.LicenseSetFactory.LicenseFilter.all));
        org.junit.Assert.assertNotNull(iLicenseSet4);
        org.junit.Assert.assertTrue("'" + format6 + "' != '" + org.apache.rat.configuration.Format.XML + "'", format6.equals(org.apache.rat.configuration.Format.XML));
        org.junit.Assert.assertNotNull(licenseReader7);
        org.junit.Assert.assertNotNull(matcherReader8);
        org.junit.Assert.assertNotNull(licenseReader9);
        org.junit.Assert.assertNotNull(iLicenseSet10);
        org.junit.Assert.assertNull(iLicense11);
        org.junit.Assert.assertNotNull(strArray17);
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + true + "'", boolean19 == true);
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + true + "'", boolean21 == true);
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + true + "'", boolean23 == true);
        org.junit.Assert.assertNotNull(strSet25);
        org.junit.Assert.assertNotNull(defaultLog26);
        org.junit.Assert.assertNull(filenameFilter29);
        org.junit.Assert.assertTrue("'" + licenseFilter30 + "' != '" + org.apache.rat.license.LicenseSetFactory.LicenseFilter.all + "'", licenseFilter30.equals(org.apache.rat.license.LicenseSetFactory.LicenseFilter.all));
        org.junit.Assert.assertNotNull(iLicenseSet31);
        org.junit.Assert.assertTrue("'" + addLicenseHeaders32 + "' != '" + org.apache.rat.config.AddLicenseHeaders.FALSE + "'", addLicenseHeaders32.equals(org.apache.rat.config.AddLicenseHeaders.FALSE));
        org.junit.Assert.assertNull(claimStatistic36);
        org.junit.Assert.assertTrue("'" + licenseFilter37 + "' != '" + org.apache.rat.license.LicenseSetFactory.LicenseFilter.all + "'", licenseFilter37.equals(org.apache.rat.license.LicenseSetFactory.LicenseFilter.all));
        org.junit.Assert.assertNull(filenameFilter42);
        org.junit.Assert.assertTrue("'" + licenseFilter43 + "' != '" + org.apache.rat.license.LicenseSetFactory.LicenseFilter.all + "'", licenseFilter43.equals(org.apache.rat.license.LicenseSetFactory.LicenseFilter.all));
        org.junit.Assert.assertNotNull(iLicenseSet44);
        org.junit.Assert.assertTrue("'" + addLicenseHeaders45 + "' != '" + org.apache.rat.config.AddLicenseHeaders.FALSE + "'", addLicenseHeaders45.equals(org.apache.rat.config.AddLicenseHeaders.FALSE));
        org.junit.Assert.assertNull(claimStatistic49);
        org.junit.Assert.assertTrue("'" + licenseFilter50 + "' != '" + org.apache.rat.license.LicenseSetFactory.LicenseFilter.all + "'", licenseFilter50.equals(org.apache.rat.license.LicenseSetFactory.LicenseFilter.all));
        org.junit.Assert.assertNotNull(outputStreamIOSupplier56);
        org.junit.Assert.assertNull(claimStatistic60);
        org.junit.Assert.assertNull(claimStatistic63);
        org.junit.Assert.assertTrue("'" + options64 + "' != '" + org.apache.rat.utils.ReportingSet.Options.OVERWRITE + "'", options64.equals(org.apache.rat.utils.ReportingSet.Options.OVERWRITE));
        org.junit.Assert.assertTrue("'" + level74 + "' != '" + org.apache.rat.utils.Log.Level.ERROR + "'", level74.equals(org.apache.rat.utils.Log.Level.ERROR));
        org.junit.Assert.assertNotNull(defaultLog81);
        org.junit.Assert.assertTrue("'" + level86 + "' != '" + org.apache.rat.utils.Log.Level.ERROR + "'", level86.equals(org.apache.rat.utils.Log.Level.ERROR));
        org.junit.Assert.assertNotNull(strSet90);
        org.junit.Assert.assertNotNull(strSet94);
        org.junit.Assert.assertNotNull(objArray95);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray95), "[AllBuilder:, Datum [ name ='http://org/apache/rat/meta-data#LicenseFamilyCategory',value ='GPL1  '], MANIFEST.MF, The MIT License, ef7a8b13-64c3-4510-bb0c-dbf208e1e73f, http://org/apache/rat/meta-data#LicenseFamilyCategory, http://org/apache/rat/meta-data#LicenseFamilyName]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray95), "[AllBuilder:, Datum [ name ='http://org/apache/rat/meta-data#LicenseFamilyCategory',value ='GPL1  '], MANIFEST.MF, The MIT License, ef7a8b13-64c3-4510-bb0c-dbf208e1e73f, http://org/apache/rat/meta-data#LicenseFamilyCategory, http://org/apache/rat/meta-data#LicenseFamilyName]");
        org.junit.Assert.assertNull(wildcardComparator96);
    }

    @Test
    public void test13623() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest27.test13623");
        org.apache.rat.analysis.matchers.FullTextMatcher fullTextMatcher2 = new org.apache.rat.analysis.matchers.FullTextMatcher("ccda37f8-8aec-461c-a257-84923fc7818c", "RegexBuilder: a8ad4");
        org.apache.rat.analysis.IHeaderMatcher.State state4 = fullTextMatcher2.matches("e484573a-f5dc-41c9-94d2-04bf4d4fa217");
        org.apache.rat.analysis.IHeaderMatcher.State state5 = fullTextMatcher2.finalizeState();
        fullTextMatcher2.reset();
        org.junit.Assert.assertTrue("'" + state4 + "' != '" + org.apache.rat.analysis.IHeaderMatcher.State.i + "'", state4.equals(org.apache.rat.analysis.IHeaderMatcher.State.i));
        org.junit.Assert.assertTrue("'" + state5 + "' != '" + org.apache.rat.analysis.IHeaderMatcher.State.f + "'", state5.equals(org.apache.rat.analysis.IHeaderMatcher.State.f));
    }

    @Test
    public void test13624() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest27.test13624");
        org.apache.rat.utils.DefaultLog defaultLog0 = org.apache.rat.utils.DefaultLog.INSTANCE;
        org.apache.rat.configuration.builders.AllBuilder allBuilder1 = new org.apache.rat.configuration.builders.AllBuilder();
        org.apache.rat.configuration.builders.MatcherRefBuilder matcherRefBuilder2 = org.apache.rat.analysis.IHeaderMatcher.Builder.matcherRef();
        boolean boolean3 = matcherRefBuilder2.hasId();
        java.lang.String str4 = matcherRefBuilder2.toString();
        org.apache.rat.configuration.builders.AnyBuilder anyBuilder5 = org.apache.rat.analysis.IHeaderMatcher.Builder.any();
        org.apache.rat.configuration.builders.NotBuilder notBuilder6 = new org.apache.rat.configuration.builders.NotBuilder();
        java.lang.String str7 = notBuilder6.toString();
        org.apache.rat.configuration.builders.MatcherRefBuilder matcherRefBuilder8 = org.apache.rat.analysis.IHeaderMatcher.Builder.matcherRef();
        boolean boolean9 = matcherRefBuilder8.hasId();
        java.util.Map<java.lang.String, org.apache.rat.analysis.IHeaderMatcher> strMap10 = null;
        org.apache.rat.configuration.builders.MatcherRefBuilder matcherRefBuilder11 = matcherRefBuilder8.setMatchers(strMap10);
        org.apache.rat.configuration.builders.AllBuilder allBuilder12 = new org.apache.rat.configuration.builders.AllBuilder();
        org.apache.rat.configuration.builders.CopyrightBuilder copyrightBuilder13 = org.apache.rat.analysis.IHeaderMatcher.Builder.copyright();
        org.apache.rat.configuration.builders.CopyrightBuilder copyrightBuilder15 = copyrightBuilder13.setStart("OASIS");
        java.lang.String str16 = copyrightBuilder13.toString();
        org.apache.rat.configuration.builders.CopyrightBuilder copyrightBuilder18 = copyrightBuilder13.setStart("223f0aba-15d4-49e9-901e-5740c137aebf");
        org.apache.rat.configuration.builders.MatcherRefBuilder matcherRefBuilder19 = org.apache.rat.analysis.IHeaderMatcher.Builder.matcherRef();
        boolean boolean20 = matcherRefBuilder19.hasId();
        org.apache.rat.configuration.builders.CopyrightBuilder copyrightBuilder21 = org.apache.rat.analysis.IHeaderMatcher.Builder.copyright();
        org.apache.rat.configuration.builders.CopyrightBuilder copyrightBuilder23 = copyrightBuilder21.setStart("OASIS");
        java.lang.String str24 = copyrightBuilder21.toString();
        org.apache.rat.configuration.builders.CopyrightBuilder copyrightBuilder26 = copyrightBuilder21.setStart("223f0aba-15d4-49e9-901e-5740c137aebf");
        org.apache.rat.configuration.builders.CopyrightBuilder copyrightBuilder27 = org.apache.rat.analysis.IHeaderMatcher.Builder.copyright();
        org.apache.rat.configuration.builders.CopyrightBuilder copyrightBuilder28 = org.apache.rat.analysis.IHeaderMatcher.Builder.copyright();
        java.lang.String str29 = copyrightBuilder28.toString();
        org.apache.rat.configuration.builders.CopyrightBuilder copyrightBuilder31 = copyrightBuilder28.setEnd(".cvsignore");
        boolean boolean32 = copyrightBuilder28.hasId();
        org.apache.rat.configuration.builders.CopyrightBuilder copyrightBuilder33 = org.apache.rat.analysis.IHeaderMatcher.Builder.copyright();
        java.lang.String str34 = copyrightBuilder33.toString();
        org.apache.rat.configuration.builders.CopyrightBuilder copyrightBuilder36 = copyrightBuilder33.setEnd(".cvsignore");
        boolean boolean37 = copyrightBuilder33.hasId();
        java.lang.String str38 = copyrightBuilder33.toString();
        org.apache.rat.configuration.builders.CopyrightBuilder copyrightBuilder39 = org.apache.rat.analysis.IHeaderMatcher.Builder.copyright();
        org.apache.rat.configuration.builders.CopyrightBuilder copyrightBuilder41 = copyrightBuilder39.setStart("OASIS");
        org.apache.rat.configuration.builders.AnyBuilder anyBuilder42 = org.apache.rat.analysis.IHeaderMatcher.Builder.any();
        org.apache.rat.configuration.builders.MatcherRefBuilder matcherRefBuilder43 = org.apache.rat.analysis.IHeaderMatcher.Builder.matcherRef();
        boolean boolean44 = matcherRefBuilder43.hasId();
        java.util.Map<java.lang.String, org.apache.rat.analysis.IHeaderMatcher> strMap45 = null;
        org.apache.rat.configuration.builders.MatcherRefBuilder matcherRefBuilder46 = matcherRefBuilder43.setMatchers(strMap45);
        org.apache.rat.configuration.builders.CopyrightBuilder copyrightBuilder47 = org.apache.rat.analysis.IHeaderMatcher.Builder.copyright();
        org.apache.rat.configuration.builders.MatcherRefBuilder matcherRefBuilder48 = org.apache.rat.analysis.IHeaderMatcher.Builder.matcherRef();
        boolean boolean49 = matcherRefBuilder48.hasId();
        java.lang.String str50 = matcherRefBuilder48.toString();
        java.util.Map<java.lang.String, org.apache.rat.analysis.IHeaderMatcher> strMap51 = null;
        org.apache.rat.configuration.builders.MatcherRefBuilder matcherRefBuilder52 = matcherRefBuilder48.setMatchers(strMap51);
        org.apache.rat.analysis.IHeaderMatcher.Builder[] builderArray53 = new org.apache.rat.analysis.IHeaderMatcher.Builder[] { matcherRefBuilder8, allBuilder12, copyrightBuilder18, matcherRefBuilder19, copyrightBuilder21, copyrightBuilder27, copyrightBuilder28, copyrightBuilder33, copyrightBuilder39, anyBuilder42, matcherRefBuilder43, copyrightBuilder47, matcherRefBuilder48 };
        java.util.ArrayList<org.apache.rat.analysis.IHeaderMatcher.Builder> builderList54 = new java.util.ArrayList<org.apache.rat.analysis.IHeaderMatcher.Builder>();
        boolean boolean55 = java.util.Collections.addAll((java.util.Collection<org.apache.rat.analysis.IHeaderMatcher.Builder>) builderList54, builderArray53);
        org.apache.rat.configuration.builders.AbstractBuilder abstractBuilder56 = notBuilder6.add((java.util.Collection<org.apache.rat.analysis.IHeaderMatcher.Builder>) builderList54);
        org.apache.rat.configuration.builders.MatcherRefBuilder matcherRefBuilder57 = new org.apache.rat.configuration.builders.MatcherRefBuilder();
        org.apache.rat.analysis.IHeaderMatcher.Builder[] builderArray58 = new org.apache.rat.analysis.IHeaderMatcher.Builder[] { matcherRefBuilder2, anyBuilder5, notBuilder6, matcherRefBuilder57 };
        java.util.ArrayList<org.apache.rat.analysis.IHeaderMatcher.Builder> builderList59 = new java.util.ArrayList<org.apache.rat.analysis.IHeaderMatcher.Builder>();
        boolean boolean60 = java.util.Collections.addAll((java.util.Collection<org.apache.rat.analysis.IHeaderMatcher.Builder>) builderList59, builderArray58);
        org.apache.rat.configuration.builders.AbstractBuilder abstractBuilder61 = allBuilder1.add((java.util.Collection<org.apache.rat.analysis.IHeaderMatcher.Builder>) builderList59);
        defaultLog0.info((java.lang.Object) allBuilder1);
        org.apache.rat.annotation.ApacheV2LicenseAppender apacheV2LicenseAppender64 = new org.apache.rat.annotation.ApacheV2LicenseAppender((org.apache.rat.utils.Log) defaultLog0, "true");
        org.apache.rat.annotation.ApacheV2LicenseAppender apacheV2LicenseAppender66 = new org.apache.rat.annotation.ApacheV2LicenseAppender((org.apache.rat.utils.Log) defaultLog0, "COMMON DEVELOPMENT AND DISTRIBUTION LICENSE Version 1.0");
        org.apache.rat.Defaults.Builder builder67 = org.apache.rat.Defaults.builder();
        org.apache.rat.Defaults.Builder builder69 = builder67.add("META-DATA#LICENSEFAMILYNAME");
        org.apache.rat.Defaults.Builder builder71 = builder67.add("TextBuilder: Datum [ name ='http:...");
        org.apache.rat.Defaults.Builder builder73 = builder67.add("The MIT License");
        defaultLog0.debug((java.lang.Object) builder73);
        org.apache.rat.license.ILicense[] iLicenseArray76 = new org.apache.rat.license.ILicense[] {};
        java.util.TreeSet<org.apache.rat.license.ILicense> iLicenseSet77 = new java.util.TreeSet<org.apache.rat.license.ILicense>();
        boolean boolean78 = java.util.Collections.addAll((java.util.Collection<org.apache.rat.license.ILicense>) iLicenseSet77, iLicenseArray76);
        java.lang.String[] strArray91 = new java.lang.String[] { "GPL2 ", "GPL1 ", "notice", "http://org/apache/rat/meta-data#LicenseFamilyName", "notice", "GPL2 ", "http://org/apache/rat/meta-data#LicenseFamilyName", "", "GPL2 ", "", "GPL1 ", "hi!" };
        java.util.ArrayList<java.lang.String> strList92 = new java.util.ArrayList<java.lang.String>();
        boolean boolean93 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strList92, strArray91);
        org.apache.rat.license.LicenseSetFactory licenseSetFactory94 = new org.apache.rat.license.LicenseSetFactory((java.util.SortedSet<org.apache.rat.license.ILicense>) iLicenseSet77, (java.util.Collection<java.lang.String>) strList92);
        org.apache.rat.utils.ReportingSet<org.apache.rat.license.ILicense> iLicenseSet95 = new org.apache.rat.utils.ReportingSet<org.apache.rat.license.ILicense>((java.util.SortedSet<org.apache.rat.license.ILicense>) iLicenseSet77);
        org.apache.rat.license.ILicense iLicense96 = org.apache.rat.license.LicenseSetFactory.search("fa18f31b-9be2-44d6-b5f4-146ebd73ca12", (java.util.SortedSet<org.apache.rat.license.ILicense>) iLicenseSet77);
        // The following exception was thrown during execution in test generation
        try {
            org.apache.rat.document.IDocumentAnalyser iDocumentAnalyser97 = org.apache.rat.analysis.DefaultAnalyserFactory.createDefaultAnalyser((org.apache.rat.utils.Log) defaultLog0, (java.util.Collection<org.apache.rat.license.ILicense>) iLicenseSet77);
            org.junit.Assert.fail("Expected exception of type org.apache.rat.ConfigurationException; message: At least one license must be defined");
        } catch (org.apache.rat.ConfigurationException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(defaultLog0);
        org.junit.Assert.assertNotNull(matcherRefBuilder2);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "MathcerRefBuilder: null" + "'", str4, "MathcerRefBuilder: null");
        org.junit.Assert.assertNotNull(anyBuilder5);
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "NotBuilder: null" + "'", str7, "NotBuilder: null");
        org.junit.Assert.assertNotNull(matcherRefBuilder8);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertNotNull(matcherRefBuilder11);
        org.junit.Assert.assertNotNull(copyrightBuilder13);
        org.junit.Assert.assertNotNull(copyrightBuilder15);
        org.junit.Assert.assertEquals("'" + str16 + "' != '" + "Copyright Builder: s:OASIS e:null o:null" + "'", str16, "Copyright Builder: s:OASIS e:null o:null");
        org.junit.Assert.assertNotNull(copyrightBuilder18);
        org.junit.Assert.assertNotNull(matcherRefBuilder19);
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + false + "'", boolean20 == false);
        org.junit.Assert.assertNotNull(copyrightBuilder21);
        org.junit.Assert.assertNotNull(copyrightBuilder23);
        org.junit.Assert.assertEquals("'" + str24 + "' != '" + "Copyright Builder: s:OASIS e:null o:null" + "'", str24, "Copyright Builder: s:OASIS e:null o:null");
        org.junit.Assert.assertNotNull(copyrightBuilder26);
        org.junit.Assert.assertNotNull(copyrightBuilder27);
        org.junit.Assert.assertNotNull(copyrightBuilder28);
        org.junit.Assert.assertEquals("'" + str29 + "' != '" + "Copyright Builder: s:null e:null o:null" + "'", str29, "Copyright Builder: s:null e:null o:null");
        org.junit.Assert.assertNotNull(copyrightBuilder31);
        org.junit.Assert.assertTrue("'" + boolean32 + "' != '" + false + "'", boolean32 == false);
        org.junit.Assert.assertNotNull(copyrightBuilder33);
        org.junit.Assert.assertEquals("'" + str34 + "' != '" + "Copyright Builder: s:null e:null o:null" + "'", str34, "Copyright Builder: s:null e:null o:null");
        org.junit.Assert.assertNotNull(copyrightBuilder36);
        org.junit.Assert.assertTrue("'" + boolean37 + "' != '" + false + "'", boolean37 == false);
        org.junit.Assert.assertEquals("'" + str38 + "' != '" + "Copyright Builder: s:null e:.cvsignore o:null" + "'", str38, "Copyright Builder: s:null e:.cvsignore o:null");
        org.junit.Assert.assertNotNull(copyrightBuilder39);
        org.junit.Assert.assertNotNull(copyrightBuilder41);
        org.junit.Assert.assertNotNull(anyBuilder42);
        org.junit.Assert.assertNotNull(matcherRefBuilder43);
        org.junit.Assert.assertTrue("'" + boolean44 + "' != '" + false + "'", boolean44 == false);
        org.junit.Assert.assertNotNull(matcherRefBuilder46);
        org.junit.Assert.assertNotNull(copyrightBuilder47);
        org.junit.Assert.assertNotNull(matcherRefBuilder48);
        org.junit.Assert.assertTrue("'" + boolean49 + "' != '" + false + "'", boolean49 == false);
        org.junit.Assert.assertEquals("'" + str50 + "' != '" + "MathcerRefBuilder: null" + "'", str50, "MathcerRefBuilder: null");
        org.junit.Assert.assertNotNull(matcherRefBuilder52);
        org.junit.Assert.assertNotNull(builderArray53);
        org.junit.Assert.assertTrue("'" + boolean55 + "' != '" + true + "'", boolean55 == true);
        org.junit.Assert.assertNotNull(abstractBuilder56);
        org.junit.Assert.assertNotNull(builderArray58);
        org.junit.Assert.assertTrue("'" + boolean60 + "' != '" + true + "'", boolean60 == true);
        org.junit.Assert.assertNotNull(abstractBuilder61);
        org.junit.Assert.assertNotNull(builder67);
        org.junit.Assert.assertNotNull(builder69);
        org.junit.Assert.assertNotNull(builder71);
        org.junit.Assert.assertNotNull(builder73);
        org.junit.Assert.assertNotNull(iLicenseArray76);
        org.junit.Assert.assertTrue("'" + boolean78 + "' != '" + false + "'", boolean78 == false);
        org.junit.Assert.assertNotNull(strArray91);
        org.junit.Assert.assertTrue("'" + boolean93 + "' != '" + true + "'", boolean93 == true);
        org.junit.Assert.assertNull(iLicense96);
    }

    @Test
    public void test13625() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest27.test13625");
        org.apache.rat.config.ReportFormat reportFormat0 = org.apache.rat.config.ReportFormat.XML;
        boolean boolean2 = reportFormat0.is("RegexBuilder: 89662180-a89f-497b-9301-227d494d2bae");
        boolean boolean4 = reportFormat0.is("http://org/apache/rat/meta-data#LicenseFamilyCategory");
        boolean boolean6 = reportFormat0.is("RegexBuilder: 22d821a7-325b-4a40-8f38-f9cfc616d71a");
        boolean boolean8 = reportFormat0.is("ba9961f9-a0de-4a54-bd1f-a2e9df26a188");
        boolean boolean10 = reportFormat0.is(".hgignore");
        org.junit.Assert.assertTrue("'" + reportFormat0 + "' != '" + org.apache.rat.config.ReportFormat.XML + "'", reportFormat0.equals(org.apache.rat.config.ReportFormat.XML));
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + false + "'", boolean2 == false);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
    }

    @Test
    public void test13626() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest27.test13626");
        org.apache.rat.header.HeaderBean headerBean0 = new org.apache.rat.header.HeaderBean();
        java.util.regex.Pattern pattern1 = headerBean0.getHeaderPattern();
        java.util.regex.Pattern pattern2 = headerBean0.getHeaderPattern();
        headerBean0.setMatch(true);
        java.util.regex.Pattern pattern5 = headerBean0.getHeaderPattern();
        java.util.regex.Pattern pattern6 = null;
        headerBean0.setHeaderPattern(pattern6);
        org.junit.Assert.assertNull(pattern1);
        org.junit.Assert.assertNull(pattern2);
        org.junit.Assert.assertNull(pattern5);
    }

    @Test
    public void test13627() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest27.test13627");
        org.apache.rat.utils.DefaultLog defaultLog0 = org.apache.rat.utils.DefaultLog.INSTANCE;
        org.apache.rat.utils.Log log1 = null;
        org.apache.rat.ReportConfiguration reportConfiguration2 = new org.apache.rat.ReportConfiguration(log1);
        reportConfiguration2.addApprovedLicenseCategory(".cvsignore");
        org.apache.rat.utils.Log.Level level5 = org.apache.rat.utils.Log.Level.ERROR;
        reportConfiguration2.logFamilyCollisions(level5);
        defaultLog0.setLevel(level5);
        org.apache.rat.utils.Log log8 = null;
        org.apache.rat.ReportConfiguration reportConfiguration9 = new org.apache.rat.ReportConfiguration(log8);
        java.io.FilenameFilter filenameFilter10 = reportConfiguration9.getInputFileFilter();
        org.apache.rat.license.LicenseSetFactory.LicenseFilter licenseFilter11 = org.apache.rat.license.LicenseSetFactory.LicenseFilter.all;
        java.util.SortedSet<org.apache.rat.license.ILicense> iLicenseSet12 = reportConfiguration9.getLicenses(licenseFilter11);
        org.apache.rat.config.AddLicenseHeaders addLicenseHeaders13 = org.apache.rat.config.AddLicenseHeaders.FALSE;
        reportConfiguration9.setAddLicenseHeaders(addLicenseHeaders13);
        org.apache.rat.utils.Log log15 = null;
        org.apache.rat.ReportConfiguration reportConfiguration16 = new org.apache.rat.ReportConfiguration(log15);
        org.apache.rat.report.claim.ClaimStatistic claimStatistic17 = org.apache.rat.Reporter.report(reportConfiguration16);
        org.apache.rat.license.LicenseSetFactory.LicenseFilter licenseFilter18 = org.apache.rat.license.LicenseSetFactory.LicenseFilter.all;
        org.apache.rat.Reporter.listLicenses(reportConfiguration16, licenseFilter18);
        org.apache.rat.Reporter.listLicenses(reportConfiguration9, licenseFilter18);
        org.apache.rat.utils.Log log21 = null;
        org.apache.rat.ReportConfiguration reportConfiguration22 = new org.apache.rat.ReportConfiguration(log21);
        java.io.FilenameFilter filenameFilter23 = reportConfiguration22.getInputFileFilter();
        org.apache.rat.license.LicenseSetFactory.LicenseFilter licenseFilter24 = org.apache.rat.license.LicenseSetFactory.LicenseFilter.all;
        java.util.SortedSet<org.apache.rat.license.ILicense> iLicenseSet25 = reportConfiguration22.getLicenses(licenseFilter24);
        org.apache.rat.config.AddLicenseHeaders addLicenseHeaders26 = org.apache.rat.config.AddLicenseHeaders.FALSE;
        reportConfiguration22.setAddLicenseHeaders(addLicenseHeaders26);
        org.apache.rat.utils.Log log28 = null;
        org.apache.rat.ReportConfiguration reportConfiguration29 = new org.apache.rat.ReportConfiguration(log28);
        org.apache.rat.report.claim.ClaimStatistic claimStatistic30 = org.apache.rat.Reporter.report(reportConfiguration29);
        org.apache.rat.license.LicenseSetFactory.LicenseFilter licenseFilter31 = org.apache.rat.license.LicenseSetFactory.LicenseFilter.all;
        org.apache.rat.Reporter.listLicenses(reportConfiguration29, licenseFilter31);
        org.apache.rat.Reporter.listLicenses(reportConfiguration22, licenseFilter31);
        org.apache.rat.Reporter.listLicenses(reportConfiguration9, licenseFilter31);
        org.apache.rat.utils.Log log35 = null;
        org.apache.rat.ReportConfiguration reportConfiguration36 = new org.apache.rat.ReportConfiguration(log35);
        org.apache.commons.io.function.IOSupplier<java.io.OutputStream> outputStreamIOSupplier37 = reportConfiguration36.getOutput();
        reportConfiguration9.setOut(outputStreamIOSupplier37);
        org.apache.rat.utils.Log log39 = null;
        org.apache.rat.ReportConfiguration reportConfiguration40 = new org.apache.rat.ReportConfiguration(log39);
        org.apache.rat.report.claim.ClaimStatistic claimStatistic41 = org.apache.rat.Reporter.report(reportConfiguration40);
        org.apache.rat.utils.Log log42 = null;
        org.apache.rat.ReportConfiguration reportConfiguration43 = new org.apache.rat.ReportConfiguration(log42);
        org.apache.rat.report.claim.ClaimStatistic claimStatistic44 = org.apache.rat.Reporter.report(reportConfiguration43);
        org.apache.rat.utils.ReportingSet.Options options45 = org.apache.rat.utils.ReportingSet.Options.OVERWRITE;
        reportConfiguration43.licenseDuplicateOption(options45);
        reportConfiguration40.familyDuplicateOption(options45);
        reportConfiguration9.licenseDuplicateOption(options45);
        reportConfiguration9.addApprovedLicenseCategory("W3C Document Copyright");
        org.apache.rat.utils.Log log51 = null;
        org.apache.rat.ReportConfiguration reportConfiguration52 = new org.apache.rat.ReportConfiguration(log51);
        reportConfiguration52.addApprovedLicenseCategory(".cvsignore");
        org.apache.rat.utils.Log.Level level55 = org.apache.rat.utils.Log.Level.ERROR;
        reportConfiguration52.logLicenseCollisions(level55);
        reportConfiguration9.logLicenseCollisions(level55);
        defaultLog0.log(level55, "GNU General Public License, version 1");
        org.apache.rat.annotation.ApacheV2LicenseAppender apacheV2LicenseAppender61 = new org.apache.rat.annotation.ApacheV2LicenseAppender((org.apache.rat.utils.Log) defaultLog0, "W3C  ");
        org.apache.rat.utils.Log.Level level62 = defaultLog0.getLevel();
        org.apache.rat.annotation.ApacheV2LicenseAppender apacheV2LicenseAppender63 = new org.apache.rat.annotation.ApacheV2LicenseAppender((org.apache.rat.utils.Log) defaultLog0);
        org.apache.rat.document.ToNameTransformer toNameTransformer64 = new org.apache.rat.document.ToNameTransformer();
        org.apache.rat.utils.DefaultLog defaultLog65 = org.apache.rat.utils.DefaultLog.INSTANCE;
        org.apache.rat.license.ILicense.Builder builder66 = org.apache.rat.license.ILicense.builder();
        org.apache.rat.license.ILicense.Builder builder68 = builder66.setLicenseFamilyCategory("");
        org.apache.rat.analysis.matchers.CopyrightMatcher copyrightMatcher72 = new org.apache.rat.analysis.matchers.CopyrightMatcher("", "GPL1 ", "hi!");
        org.apache.rat.analysis.IHeaderMatcher.State state73 = copyrightMatcher72.finalizeState();
        org.apache.rat.license.ILicense.Builder builder74 = builder68.setMatcher((org.apache.rat.analysis.IHeaderMatcher) copyrightMatcher72);
        org.apache.rat.license.ILicense.Builder builder76 = builder74.setLicenseFamilyCategory("");
        defaultLog65.error((java.lang.Object) builder76);
        java.lang.Object obj78 = toNameTransformer64.transform((java.lang.Object) defaultLog65);
        org.apache.rat.ReportConfiguration reportConfiguration79 = new org.apache.rat.ReportConfiguration((org.apache.rat.utils.Log) defaultLog65);
        org.apache.rat.configuration.Format format80 = org.apache.rat.configuration.Format.XML;
        org.apache.rat.configuration.LicenseReader licenseReader81 = format80.licenseReader();
        org.apache.rat.configuration.MatcherReader matcherReader82 = format80.matcherReader();
        org.apache.rat.configuration.LicenseReader licenseReader83 = format80.licenseReader();
        org.apache.rat.configuration.LicenseReader licenseReader84 = format80.licenseReader();
        java.util.SortedSet<org.apache.rat.license.ILicense> iLicenseSet85 = licenseReader84.readLicenses();
        reportConfiguration79.addLicensesIfNotPresent((java.util.Collection<org.apache.rat.license.ILicense>) iLicenseSet85);
        org.apache.rat.utils.ReportingSet<org.apache.rat.license.ILicense> iLicenseSet87 = new org.apache.rat.utils.ReportingSet<org.apache.rat.license.ILicense>(iLicenseSet85);
        // The following exception was thrown during execution in test generation
        try {
            org.apache.rat.document.IDocumentAnalyser iDocumentAnalyser88 = org.apache.rat.analysis.DefaultAnalyserFactory.createDefaultAnalyser((org.apache.rat.utils.Log) defaultLog0, (java.util.Collection<org.apache.rat.license.ILicense>) iLicenseSet87);
            org.junit.Assert.fail("Expected exception of type org.apache.rat.ConfigurationException; message: At least one license must be defined");
        } catch (org.apache.rat.ConfigurationException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(defaultLog0);
        org.junit.Assert.assertTrue("'" + level5 + "' != '" + org.apache.rat.utils.Log.Level.ERROR + "'", level5.equals(org.apache.rat.utils.Log.Level.ERROR));
        org.junit.Assert.assertNull(filenameFilter10);
        org.junit.Assert.assertTrue("'" + licenseFilter11 + "' != '" + org.apache.rat.license.LicenseSetFactory.LicenseFilter.all + "'", licenseFilter11.equals(org.apache.rat.license.LicenseSetFactory.LicenseFilter.all));
        org.junit.Assert.assertNotNull(iLicenseSet12);
        org.junit.Assert.assertTrue("'" + addLicenseHeaders13 + "' != '" + org.apache.rat.config.AddLicenseHeaders.FALSE + "'", addLicenseHeaders13.equals(org.apache.rat.config.AddLicenseHeaders.FALSE));
        org.junit.Assert.assertNull(claimStatistic17);
        org.junit.Assert.assertTrue("'" + licenseFilter18 + "' != '" + org.apache.rat.license.LicenseSetFactory.LicenseFilter.all + "'", licenseFilter18.equals(org.apache.rat.license.LicenseSetFactory.LicenseFilter.all));
        org.junit.Assert.assertNull(filenameFilter23);
        org.junit.Assert.assertTrue("'" + licenseFilter24 + "' != '" + org.apache.rat.license.LicenseSetFactory.LicenseFilter.all + "'", licenseFilter24.equals(org.apache.rat.license.LicenseSetFactory.LicenseFilter.all));
        org.junit.Assert.assertNotNull(iLicenseSet25);
        org.junit.Assert.assertTrue("'" + addLicenseHeaders26 + "' != '" + org.apache.rat.config.AddLicenseHeaders.FALSE + "'", addLicenseHeaders26.equals(org.apache.rat.config.AddLicenseHeaders.FALSE));
        org.junit.Assert.assertNull(claimStatistic30);
        org.junit.Assert.assertTrue("'" + licenseFilter31 + "' != '" + org.apache.rat.license.LicenseSetFactory.LicenseFilter.all + "'", licenseFilter31.equals(org.apache.rat.license.LicenseSetFactory.LicenseFilter.all));
        org.junit.Assert.assertNotNull(outputStreamIOSupplier37);
        org.junit.Assert.assertNull(claimStatistic41);
        org.junit.Assert.assertNull(claimStatistic44);
        org.junit.Assert.assertTrue("'" + options45 + "' != '" + org.apache.rat.utils.ReportingSet.Options.OVERWRITE + "'", options45.equals(org.apache.rat.utils.ReportingSet.Options.OVERWRITE));
        org.junit.Assert.assertTrue("'" + level55 + "' != '" + org.apache.rat.utils.Log.Level.ERROR + "'", level55.equals(org.apache.rat.utils.Log.Level.ERROR));
        org.junit.Assert.assertTrue("'" + level62 + "' != '" + org.apache.rat.utils.Log.Level.ERROR + "'", level62.equals(org.apache.rat.utils.Log.Level.ERROR));
        org.junit.Assert.assertNotNull(defaultLog65);
        org.junit.Assert.assertNotNull(builder66);
        org.junit.Assert.assertNotNull(builder68);
        org.junit.Assert.assertTrue("'" + state73 + "' != '" + org.apache.rat.analysis.IHeaderMatcher.State.f + "'", state73.equals(org.apache.rat.analysis.IHeaderMatcher.State.f));
        org.junit.Assert.assertNotNull(builder74);
        org.junit.Assert.assertNotNull(builder76);
        org.junit.Assert.assertNull(obj78);
        org.junit.Assert.assertTrue("'" + format80 + "' != '" + org.apache.rat.configuration.Format.XML + "'", format80.equals(org.apache.rat.configuration.Format.XML));
        org.junit.Assert.assertNotNull(licenseReader81);
        org.junit.Assert.assertNotNull(matcherReader82);
        org.junit.Assert.assertNotNull(licenseReader83);
        org.junit.Assert.assertNotNull(licenseReader84);
        org.junit.Assert.assertNotNull(iLicenseSet85);
    }

    @Test
    public void test13628() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest27.test13628");
        org.apache.rat.license.SimpleLicenseFamily simpleLicenseFamily0 = new org.apache.rat.license.SimpleLicenseFamily();
        java.lang.String str1 = simpleLicenseFamily0.getFamilyName();
        java.lang.String str2 = simpleLicenseFamily0.getFamilyCategory();
        simpleLicenseFamily0.setFamilyCategory("W3C  ");
        simpleLicenseFamily0.setFamilyName("GEN  ");
        simpleLicenseFamily0.setFamilyCategory("b5cb0999-b639-4e9c-ab9c-268137bc8846");
        simpleLicenseFamily0.setFamilyCategory("bd015714-405b-4304-9faa-36efad80e6e6");
        java.lang.String str11 = simpleLicenseFamily0.toString();
        simpleLicenseFamily0.setFamilyName("");
        java.lang.String str14 = simpleLicenseFamily0.getFamilyName();
        simpleLicenseFamily0.setFamilyCategory("Copyright Builder: s:f9686227-2048-447b-8a8f-3164382365d2 e:null o:TextBuilder: Datum [ name ='http:...");
        java.lang.String str17 = simpleLicenseFamily0.getFamilyName();
        java.lang.String str18 = simpleLicenseFamily0.toString();
        org.junit.Assert.assertNull(str1);
        org.junit.Assert.assertNull(str2);
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "bd015714-405b-4304-9faa-36efad80e6e6 GEN  " + "'", str11, "bd015714-405b-4304-9faa-36efad80e6e6 GEN  ");
        org.junit.Assert.assertEquals("'" + str14 + "' != '" + "" + "'", str14, "");
        org.junit.Assert.assertEquals("'" + str17 + "' != '" + "" + "'", str17, "");
        org.junit.Assert.assertEquals("'" + str18 + "' != '" + "Copyright Builder: s:f9686227-2048-447b-8a8f-3164382365d2 e:null o:TextBuilder: Datum [ name ='http:... " + "'", str18, "Copyright Builder: s:f9686227-2048-447b-8a8f-3164382365d2 e:null o:TextBuilder: Datum [ name ='http:... ");
    }

    @Test
    public void test13629() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest27.test13629");
        org.apache.rat.analysis.license.FullTextMatchingLicense fullTextMatchingLicense0 = new org.apache.rat.analysis.license.FullTextMatchingLicense();
        fullTextMatchingLicense0.setLicenseFamilyName("hi!");
        java.lang.String str3 = fullTextMatchingLicense0.getLicenseFamilyCategory();
        java.lang.String str4 = fullTextMatchingLicense0.getLicenseFamilyName();
        fullTextMatchingLicense0.setFullText("AnyBuilder:\nAllBuilder:");
        fullTextMatchingLicense0.setFullText("TMF  ");
        java.lang.String str9 = fullTextMatchingLicense0.getLicenseFamilyName();
        org.junit.Assert.assertNull(str3);
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "hi!" + "'", str4, "hi!");
        org.junit.Assert.assertEquals("'" + str9 + "' != '" + "hi!" + "'", str9, "hi!");
    }

    @Test
    public void test13630() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest27.test13630");
        // The following exception was thrown during execution in test generation
        try {
            org.apache.rat.configuration.Format format1 = org.apache.rat.configuration.Format.fromName("562518e9-8175-4846-96f5-d17fb0514676");
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: No such suffix: 562518e9-8175-4846-96f5-d17fb0514676");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
    }

    @Test
    public void test13631() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest27.test13631");
        org.apache.rat.analysis.matchers.FullTextMatcher fullTextMatcher2 = new org.apache.rat.analysis.matchers.FullTextMatcher("Apache License Version 2.0", "");
        org.apache.rat.analysis.IHeaderMatcher.State state3 = fullTextMatcher2.finalizeState();
        org.junit.Assert.assertTrue("'" + state3 + "' != '" + org.apache.rat.analysis.IHeaderMatcher.State.f + "'", state3.equals(org.apache.rat.analysis.IHeaderMatcher.State.f));
    }

    @Test
    public void test13632() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest27.test13632");
        org.apache.rat.utils.Log log0 = null;
        org.apache.rat.ReportConfiguration reportConfiguration1 = new org.apache.rat.ReportConfiguration(log0);
        reportConfiguration1.addApprovedLicenseCategory(".cvsignore");
        org.apache.rat.utils.Log log4 = null;
        org.apache.rat.ReportConfiguration reportConfiguration5 = new org.apache.rat.ReportConfiguration(log4);
        java.io.FilenameFilter filenameFilter6 = reportConfiguration5.getInputFileFilter();
        org.apache.rat.license.LicenseSetFactory.LicenseFilter licenseFilter7 = org.apache.rat.license.LicenseSetFactory.LicenseFilter.all;
        java.util.SortedSet<org.apache.rat.license.ILicense> iLicenseSet8 = reportConfiguration5.getLicenses(licenseFilter7);
        reportConfiguration1.addLicensesIfNotPresent((java.util.Collection<org.apache.rat.license.ILicense>) iLicenseSet8);
        reportConfiguration1.setCopyrightMessage("MathcerRefBuilder: null");
        org.apache.commons.io.function.IOSupplier<java.io.InputStream> inputStreamIOSupplier12 = org.apache.rat.Defaults.getUnapprovedLicensesStyleSheet();
        reportConfiguration1.setStyleSheet(inputStreamIOSupplier12);
        org.apache.rat.report.IReportable iReportable14 = reportConfiguration1.getReportable();
        org.junit.Assert.assertNull(filenameFilter6);
        org.junit.Assert.assertTrue("'" + licenseFilter7 + "' != '" + org.apache.rat.license.LicenseSetFactory.LicenseFilter.all + "'", licenseFilter7.equals(org.apache.rat.license.LicenseSetFactory.LicenseFilter.all));
        org.junit.Assert.assertNotNull(iLicenseSet8);
        org.junit.Assert.assertNotNull(inputStreamIOSupplier12);
        org.junit.Assert.assertNull(iReportable14);
    }

    @Test
    public void test13633() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest27.test13633");
        org.apache.rat.Defaults.Builder builder0 = org.apache.rat.Defaults.builder();
        org.apache.rat.Defaults.Builder builder1 = builder0.noDefault();
        org.apache.rat.Defaults.Builder builder3 = builder0.remove("1aed385f-a23b-478e-be6b-efdc53693766");
        org.apache.rat.Defaults.Builder builder4 = builder0.noDefault();
        org.apache.rat.Defaults.Builder builder6 = builder4.remove("");
        org.apache.rat.Defaults.Builder builder8 = builder4.add("RegexBuilder: a8ad4");
        org.junit.Assert.assertNotNull(builder0);
        org.junit.Assert.assertNotNull(builder1);
        org.junit.Assert.assertNotNull(builder3);
        org.junit.Assert.assertNotNull(builder4);
        org.junit.Assert.assertNotNull(builder6);
        org.junit.Assert.assertNotNull(builder8);
    }

    @Test
    public void test13634() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest27.test13634");
        org.apache.rat.header.HeaderBean headerBean0 = new org.apache.rat.header.HeaderBean();
        boolean boolean1 = headerBean0.isMatch();
        java.util.regex.Pattern pattern2 = null;
        headerBean0.setHeaderPattern(pattern2);
        headerBean0.setMatch(false);
        headerBean0.setMatch(true);
        java.util.regex.Pattern pattern8 = headerBean0.getHeaderPattern();
        java.util.regex.Pattern pattern9 = null;
        headerBean0.setHeaderPattern(pattern9);
        headerBean0.setMatch(false);
        org.junit.Assert.assertTrue("'" + boolean1 + "' != '" + false + "'", boolean1 == false);
        org.junit.Assert.assertNull(pattern8);
    }

    @Test
    public void test13635() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest27.test13635");
        boolean boolean1 = org.apache.rat.document.impl.guesser.NoteGuesser.isNote("434bbff1-1eb3-451c-a81c-37046b72d9f3");
        org.junit.Assert.assertTrue("'" + boolean1 + "' != '" + false + "'", boolean1 == false);
    }

    @Test
    public void test13636() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest27.test13636");
        org.apache.rat.api.MetaData metaData0 = new org.apache.rat.api.MetaData();
        java.lang.String str2 = metaData0.value("COMMON DEVELOPMENT AND DISTRIBUTION LICENSE Version 1.0");
        org.apache.rat.api.MetaData.Datum datum4 = metaData0.get("Copyright Builder: s:null e:.cvsignore o:null");
        java.lang.String str6 = metaData0.value("W3C Software Copyright");
        java.lang.String str8 = metaData0.value("null http://org/apache/rat/meta-data#LicenseFamilyName");
        org.apache.rat.api.MetaData.Datum datum9 = org.apache.rat.api.MetaData.RAT_APPROVED_LICENSE_DATUM_FALSE;
        metaData0.add(datum9);
        org.apache.rat.api.MetaData.Datum datum11 = org.apache.rat.api.MetaData.RAT_LICENSE_FAMILY_NAME_DATUM_ACADEMIC_FREE_LICENSE_VERSION_2_1;
        java.lang.String str12 = datum11.toString();
        metaData0.add(datum11);
        java.lang.String str14 = datum11.getValue();
        org.junit.Assert.assertNull(str2);
        org.junit.Assert.assertNull(datum4);
        org.junit.Assert.assertNull(str6);
        org.junit.Assert.assertNull(str8);
        org.junit.Assert.assertNotNull(datum9);
        org.junit.Assert.assertNotNull(datum11);
        org.junit.Assert.assertEquals("'" + str12 + "' != '" + "Datum [ name ='http://org/apache/rat/meta-data#LicenseFamilyName',value ='Academic Free License, Version 2.1 ']" + "'", str12, "Datum [ name ='http://org/apache/rat/meta-data#LicenseFamilyName',value ='Academic Free License, Version 2.1 ']");
        org.junit.Assert.assertEquals("'" + str14 + "' != '" + "Academic Free License, Version 2.1" + "'", str14, "Academic Free License, Version 2.1");
    }

    @Test
    public void test13637() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest27.test13637");
        org.apache.rat.license.ILicense.Builder builder0 = org.apache.rat.license.ILicense.builder();
        org.apache.rat.license.ILicense.Builder builder2 = builder0.setLicenseFamilyCategory("");
        org.apache.rat.analysis.matchers.CopyrightMatcher copyrightMatcher6 = new org.apache.rat.analysis.matchers.CopyrightMatcher("", "GPL1 ", "hi!");
        org.apache.rat.analysis.IHeaderMatcher.State state7 = copyrightMatcher6.finalizeState();
        org.apache.rat.license.ILicense.Builder builder8 = builder2.setMatcher((org.apache.rat.analysis.IHeaderMatcher) copyrightMatcher6);
        org.apache.rat.license.ILicense.Builder builder10 = builder8.setNotes("8f0ee536-38ae-476a-a728-de95e24c13c3");
        org.apache.rat.license.ILicense.Builder builder12 = builder8.setDerivedFrom("274c6a15-09f6-4bfd-ac53-1827770eb507");
        java.util.regex.Pattern pattern14 = null;
        org.apache.rat.analysis.matchers.SimpleRegexMatcher simpleRegexMatcher15 = new org.apache.rat.analysis.matchers.SimpleRegexMatcher("", pattern14);
        java.lang.String str16 = simpleRegexMatcher15.toString();
        org.apache.rat.analysis.IHeaderMatcher.State state17 = simpleRegexMatcher15.currentState();
        org.apache.rat.license.ILicense.Builder builder18 = builder12.setMatcher((org.apache.rat.analysis.IHeaderMatcher) simpleRegexMatcher15);
        org.apache.rat.license.ILicense.Builder builder20 = builder18.setName("c062e6a4-c034-4c7d-9098-7087757d749d");
        org.junit.Assert.assertNotNull(builder0);
        org.junit.Assert.assertNotNull(builder2);
        org.junit.Assert.assertTrue("'" + state7 + "' != '" + org.apache.rat.analysis.IHeaderMatcher.State.f + "'", state7.equals(org.apache.rat.analysis.IHeaderMatcher.State.f));
        org.junit.Assert.assertNotNull(builder8);
        org.junit.Assert.assertNotNull(builder10);
        org.junit.Assert.assertNotNull(builder12);
// flaky:         org.junit.Assert.assertEquals("'" + str16 + "' != '" + "fc2bc344-3c5c-4a57-bf00-985dddf093b5" + "'", str16, "fc2bc344-3c5c-4a57-bf00-985dddf093b5");
        org.junit.Assert.assertTrue("'" + state17 + "' != '" + org.apache.rat.analysis.IHeaderMatcher.State.i + "'", state17.equals(org.apache.rat.analysis.IHeaderMatcher.State.i));
        org.junit.Assert.assertNotNull(builder18);
        org.junit.Assert.assertNotNull(builder20);
    }

    @Test
    public void test13638() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest27.test13638");
        org.apache.rat.utils.Log log0 = null;
        org.apache.rat.ReportConfiguration reportConfiguration1 = new org.apache.rat.ReportConfiguration(log0);
        reportConfiguration1.addApprovedLicenseCategory(".cvsignore");
        org.apache.rat.utils.Log log4 = null;
        org.apache.rat.ReportConfiguration reportConfiguration5 = new org.apache.rat.ReportConfiguration(log4);
        java.io.FilenameFilter filenameFilter6 = reportConfiguration5.getInputFileFilter();
        org.apache.rat.license.LicenseSetFactory.LicenseFilter licenseFilter7 = org.apache.rat.license.LicenseSetFactory.LicenseFilter.all;
        java.util.SortedSet<org.apache.rat.license.ILicense> iLicenseSet8 = reportConfiguration5.getLicenses(licenseFilter7);
        reportConfiguration1.addLicensesIfNotPresent((java.util.Collection<org.apache.rat.license.ILicense>) iLicenseSet8);
        org.apache.rat.license.ILicenseFamily iLicenseFamily10 = null;
        reportConfiguration1.addFamily(iLicenseFamily10);
        org.apache.rat.utils.DefaultLog defaultLog12 = org.apache.rat.utils.DefaultLog.INSTANCE;
        org.apache.rat.license.ILicense.Builder builder13 = org.apache.rat.license.ILicense.builder();
        org.apache.rat.license.ILicense.Builder builder15 = builder13.setLicenseFamilyCategory("");
        org.apache.rat.analysis.matchers.CopyrightMatcher copyrightMatcher19 = new org.apache.rat.analysis.matchers.CopyrightMatcher("", "GPL1 ", "hi!");
        org.apache.rat.analysis.IHeaderMatcher.State state20 = copyrightMatcher19.finalizeState();
        org.apache.rat.license.ILicense.Builder builder21 = builder15.setMatcher((org.apache.rat.analysis.IHeaderMatcher) copyrightMatcher19);
        org.apache.rat.license.ILicense.Builder builder23 = builder21.setLicenseFamilyCategory("");
        defaultLog12.error((java.lang.Object) builder23);
        org.apache.rat.utils.Log.Level level25 = org.apache.rat.utils.Log.Level.DEBUG;
        defaultLog12.setLevel(level25);
        reportConfiguration1.logFamilyCollisions(level25);
        org.apache.rat.report.IReportable iReportable28 = null;
        reportConfiguration1.setReportable(iReportable28);
        java.net.URL uRL30 = null;
        // The following exception was thrown during execution in test generation
        try {
            reportConfiguration1.setStyleSheet(uRL30);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: styleSheet file should not be null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNull(filenameFilter6);
        org.junit.Assert.assertTrue("'" + licenseFilter7 + "' != '" + org.apache.rat.license.LicenseSetFactory.LicenseFilter.all + "'", licenseFilter7.equals(org.apache.rat.license.LicenseSetFactory.LicenseFilter.all));
        org.junit.Assert.assertNotNull(iLicenseSet8);
        org.junit.Assert.assertNotNull(defaultLog12);
        org.junit.Assert.assertNotNull(builder13);
        org.junit.Assert.assertNotNull(builder15);
        org.junit.Assert.assertTrue("'" + state20 + "' != '" + org.apache.rat.analysis.IHeaderMatcher.State.f + "'", state20.equals(org.apache.rat.analysis.IHeaderMatcher.State.f));
        org.junit.Assert.assertNotNull(builder21);
        org.junit.Assert.assertNotNull(builder23);
        org.junit.Assert.assertTrue("'" + level25 + "' != '" + org.apache.rat.utils.Log.Level.DEBUG + "'", level25.equals(org.apache.rat.utils.Log.Level.DEBUG));
    }

    @Test
    public void test13639() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest27.test13639");
        org.apache.rat.analysis.matchers.FullTextMatcher fullTextMatcher1 = new org.apache.rat.analysis.matchers.FullTextMatcher("Copyright Builder: s:null e:null o:null");
        org.apache.rat.analysis.IHeaderMatcher.State state3 = fullTextMatcher1.matches("f false");
        fullTextMatcher1.reset();
        java.lang.String str5 = fullTextMatcher1.toString();
        boolean boolean7 = fullTextMatcher1.doMatch("Datum [ name ='http://org/apache/rat/meta-data#LicenseFamilyName',value ='W3C Software Copyright ']");
        java.lang.String str8 = fullTextMatcher1.toString();
        org.junit.Assert.assertTrue("'" + state3 + "' != '" + org.apache.rat.analysis.IHeaderMatcher.State.i + "'", state3.equals(org.apache.rat.analysis.IHeaderMatcher.State.i));
// flaky:         org.junit.Assert.assertEquals("'" + str5 + "' != '" + "d77527f8-cd81-4439-9a83-45ec8ba991e7" + "'", str5, "d77527f8-cd81-4439-9a83-45ec8ba991e7");
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
// flaky:         org.junit.Assert.assertEquals("'" + str8 + "' != '" + "d77527f8-cd81-4439-9a83-45ec8ba991e7" + "'", str8, "d77527f8-cd81-4439-9a83-45ec8ba991e7");
    }

    @Test
    public void test13640() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest27.test13640");
        org.apache.rat.utils.DefaultLog defaultLog0 = org.apache.rat.utils.DefaultLog.INSTANCE;
        defaultLog0.info((java.lang.Object) "Modified BSD License");
        org.apache.rat.utils.Log log3 = null;
        org.apache.rat.ReportConfiguration reportConfiguration4 = new org.apache.rat.ReportConfiguration(log3);
        java.io.FilenameFilter filenameFilter5 = reportConfiguration4.getInputFileFilter();
        java.io.FilenameFilter filenameFilter6 = reportConfiguration4.getInputFileFilter();
        java.lang.String[] strArray12 = new java.lang.String[] { "http://org/apache/rat/meta-data#LicenseFamilyCategory", "Datum [ name ='http://org/apache/rat/meta-data#LicenseFamilyCategory',value ='GPL1  ']", "MANIFEST.MF", "AllBuilder:", "The MIT License" };
        org.apache.rat.utils.ReportingSet<java.lang.String> strSet13 = new org.apache.rat.utils.ReportingSet<java.lang.String>();
        boolean boolean14 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strSet13, strArray12);
        boolean boolean16 = strSet13.addIfNotPresent("http://org/apache/rat/meta-data#LicenseFamilyName");
        boolean boolean18 = strSet13.addIfNotPresent("ef7a8b13-64c3-4510-bb0c-dbf208e1e73f");
        java.util.function.Function<java.lang.String, java.lang.String> strFunction19 = null;
        org.apache.rat.utils.ReportingSet<java.lang.String> strSet20 = strSet13.setMsgFormat(strFunction19);
        org.apache.rat.utils.DefaultLog defaultLog21 = org.apache.rat.utils.DefaultLog.INSTANCE;
        org.apache.rat.utils.Log log22 = null;
        org.apache.rat.ReportConfiguration reportConfiguration23 = new org.apache.rat.ReportConfiguration(log22);
        java.io.FilenameFilter filenameFilter24 = reportConfiguration23.getInputFileFilter();
        org.apache.rat.license.LicenseSetFactory.LicenseFilter licenseFilter25 = org.apache.rat.license.LicenseSetFactory.LicenseFilter.all;
        java.util.SortedSet<org.apache.rat.license.ILicense> iLicenseSet26 = reportConfiguration23.getLicenses(licenseFilter25);
        org.apache.rat.config.AddLicenseHeaders addLicenseHeaders27 = org.apache.rat.config.AddLicenseHeaders.FALSE;
        reportConfiguration23.setAddLicenseHeaders(addLicenseHeaders27);
        org.apache.rat.utils.Log log29 = null;
        org.apache.rat.ReportConfiguration reportConfiguration30 = new org.apache.rat.ReportConfiguration(log29);
        org.apache.rat.report.claim.ClaimStatistic claimStatistic31 = org.apache.rat.Reporter.report(reportConfiguration30);
        org.apache.rat.license.LicenseSetFactory.LicenseFilter licenseFilter32 = org.apache.rat.license.LicenseSetFactory.LicenseFilter.all;
        org.apache.rat.Reporter.listLicenses(reportConfiguration30, licenseFilter32);
        org.apache.rat.Reporter.listLicenses(reportConfiguration23, licenseFilter32);
        org.apache.rat.utils.Log log35 = null;
        org.apache.rat.ReportConfiguration reportConfiguration36 = new org.apache.rat.ReportConfiguration(log35);
        java.io.FilenameFilter filenameFilter37 = reportConfiguration36.getInputFileFilter();
        org.apache.rat.license.LicenseSetFactory.LicenseFilter licenseFilter38 = org.apache.rat.license.LicenseSetFactory.LicenseFilter.all;
        java.util.SortedSet<org.apache.rat.license.ILicense> iLicenseSet39 = reportConfiguration36.getLicenses(licenseFilter38);
        org.apache.rat.config.AddLicenseHeaders addLicenseHeaders40 = org.apache.rat.config.AddLicenseHeaders.FALSE;
        reportConfiguration36.setAddLicenseHeaders(addLicenseHeaders40);
        org.apache.rat.utils.Log log42 = null;
        org.apache.rat.ReportConfiguration reportConfiguration43 = new org.apache.rat.ReportConfiguration(log42);
        org.apache.rat.report.claim.ClaimStatistic claimStatistic44 = org.apache.rat.Reporter.report(reportConfiguration43);
        org.apache.rat.license.LicenseSetFactory.LicenseFilter licenseFilter45 = org.apache.rat.license.LicenseSetFactory.LicenseFilter.all;
        org.apache.rat.Reporter.listLicenses(reportConfiguration43, licenseFilter45);
        org.apache.rat.Reporter.listLicenses(reportConfiguration36, licenseFilter45);
        org.apache.rat.Reporter.listLicenses(reportConfiguration23, licenseFilter45);
        org.apache.rat.utils.Log log49 = null;
        org.apache.rat.ReportConfiguration reportConfiguration50 = new org.apache.rat.ReportConfiguration(log49);
        org.apache.commons.io.function.IOSupplier<java.io.OutputStream> outputStreamIOSupplier51 = reportConfiguration50.getOutput();
        reportConfiguration23.setOut(outputStreamIOSupplier51);
        org.apache.rat.utils.Log log53 = null;
        org.apache.rat.ReportConfiguration reportConfiguration54 = new org.apache.rat.ReportConfiguration(log53);
        org.apache.rat.report.claim.ClaimStatistic claimStatistic55 = org.apache.rat.Reporter.report(reportConfiguration54);
        org.apache.rat.utils.Log log56 = null;
        org.apache.rat.ReportConfiguration reportConfiguration57 = new org.apache.rat.ReportConfiguration(log56);
        org.apache.rat.report.claim.ClaimStatistic claimStatistic58 = org.apache.rat.Reporter.report(reportConfiguration57);
        org.apache.rat.utils.ReportingSet.Options options59 = org.apache.rat.utils.ReportingSet.Options.OVERWRITE;
        reportConfiguration57.licenseDuplicateOption(options59);
        reportConfiguration54.familyDuplicateOption(options59);
        reportConfiguration23.licenseDuplicateOption(options59);
        reportConfiguration23.addApprovedLicenseCategory("W3C Document Copyright");
        org.apache.rat.utils.Log log65 = null;
        org.apache.rat.ReportConfiguration reportConfiguration66 = new org.apache.rat.ReportConfiguration(log65);
        reportConfiguration66.addApprovedLicenseCategory(".cvsignore");
        org.apache.rat.utils.Log.Level level69 = org.apache.rat.utils.Log.Level.ERROR;
        reportConfiguration66.logLicenseCollisions(level69);
        reportConfiguration23.logLicenseCollisions(level69);
        defaultLog21.setLevel(level69);
        defaultLog21.warn((java.lang.Object) "GNU General Public License, version 3");
        org.apache.rat.ReportConfiguration reportConfiguration75 = new org.apache.rat.ReportConfiguration((org.apache.rat.utils.Log) defaultLog21);
        org.apache.rat.utils.DefaultLog defaultLog76 = org.apache.rat.utils.DefaultLog.INSTANCE;
        org.apache.rat.utils.Log log77 = null;
        org.apache.rat.ReportConfiguration reportConfiguration78 = new org.apache.rat.ReportConfiguration(log77);
        reportConfiguration78.addApprovedLicenseCategory(".cvsignore");
        org.apache.rat.utils.Log.Level level81 = org.apache.rat.utils.Log.Level.ERROR;
        reportConfiguration78.logFamilyCollisions(level81);
        defaultLog76.setLevel(level81);
        defaultLog21.debug((java.lang.Object) level81);
        org.apache.rat.utils.ReportingSet<java.lang.String> strSet85 = strSet20.setLogLevel(level81);
        reportConfiguration4.logLicenseCollisions(level81);
        defaultLog0.log(level81, "");
        org.apache.rat.Defaults.Builder builder89 = org.apache.rat.Defaults.builder();
        org.apache.rat.Defaults.Builder builder91 = builder89.add("META-DATA#LICENSEFAMILYNAME");
        org.apache.rat.Defaults.Builder builder93 = builder89.remove("Copyright Builder: s:null e:null o:null");
        org.apache.rat.Defaults.Builder builder95 = builder89.add("COMMON DEVELOPMENT AND DISTRIBUTION LICENSE Version 1.0");
        org.apache.rat.Defaults.Builder builder96 = builder89.noDefault();
        defaultLog0.warn((java.lang.Object) builder89);
        java.net.URL uRL98 = null;
        // The following exception was thrown during execution in test generation
        try {
            org.apache.rat.Defaults.Builder builder99 = builder89.add(uRL98);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(defaultLog0);
        org.junit.Assert.assertNull(filenameFilter5);
        org.junit.Assert.assertNull(filenameFilter6);
        org.junit.Assert.assertNotNull(strArray12);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + true + "'", boolean14 == true);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + true + "'", boolean16 == true);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + true + "'", boolean18 == true);
        org.junit.Assert.assertNotNull(strSet20);
        org.junit.Assert.assertNotNull(defaultLog21);
        org.junit.Assert.assertNull(filenameFilter24);
        org.junit.Assert.assertTrue("'" + licenseFilter25 + "' != '" + org.apache.rat.license.LicenseSetFactory.LicenseFilter.all + "'", licenseFilter25.equals(org.apache.rat.license.LicenseSetFactory.LicenseFilter.all));
        org.junit.Assert.assertNotNull(iLicenseSet26);
        org.junit.Assert.assertTrue("'" + addLicenseHeaders27 + "' != '" + org.apache.rat.config.AddLicenseHeaders.FALSE + "'", addLicenseHeaders27.equals(org.apache.rat.config.AddLicenseHeaders.FALSE));
        org.junit.Assert.assertNull(claimStatistic31);
        org.junit.Assert.assertTrue("'" + licenseFilter32 + "' != '" + org.apache.rat.license.LicenseSetFactory.LicenseFilter.all + "'", licenseFilter32.equals(org.apache.rat.license.LicenseSetFactory.LicenseFilter.all));
        org.junit.Assert.assertNull(filenameFilter37);
        org.junit.Assert.assertTrue("'" + licenseFilter38 + "' != '" + org.apache.rat.license.LicenseSetFactory.LicenseFilter.all + "'", licenseFilter38.equals(org.apache.rat.license.LicenseSetFactory.LicenseFilter.all));
        org.junit.Assert.assertNotNull(iLicenseSet39);
        org.junit.Assert.assertTrue("'" + addLicenseHeaders40 + "' != '" + org.apache.rat.config.AddLicenseHeaders.FALSE + "'", addLicenseHeaders40.equals(org.apache.rat.config.AddLicenseHeaders.FALSE));
        org.junit.Assert.assertNull(claimStatistic44);
        org.junit.Assert.assertTrue("'" + licenseFilter45 + "' != '" + org.apache.rat.license.LicenseSetFactory.LicenseFilter.all + "'", licenseFilter45.equals(org.apache.rat.license.LicenseSetFactory.LicenseFilter.all));
        org.junit.Assert.assertNotNull(outputStreamIOSupplier51);
        org.junit.Assert.assertNull(claimStatistic55);
        org.junit.Assert.assertNull(claimStatistic58);
        org.junit.Assert.assertTrue("'" + options59 + "' != '" + org.apache.rat.utils.ReportingSet.Options.OVERWRITE + "'", options59.equals(org.apache.rat.utils.ReportingSet.Options.OVERWRITE));
        org.junit.Assert.assertTrue("'" + level69 + "' != '" + org.apache.rat.utils.Log.Level.ERROR + "'", level69.equals(org.apache.rat.utils.Log.Level.ERROR));
        org.junit.Assert.assertNotNull(defaultLog76);
        org.junit.Assert.assertTrue("'" + level81 + "' != '" + org.apache.rat.utils.Log.Level.ERROR + "'", level81.equals(org.apache.rat.utils.Log.Level.ERROR));
        org.junit.Assert.assertNotNull(strSet85);
        org.junit.Assert.assertNotNull(builder89);
        org.junit.Assert.assertNotNull(builder91);
        org.junit.Assert.assertNotNull(builder93);
        org.junit.Assert.assertNotNull(builder95);
        org.junit.Assert.assertNotNull(builder96);
    }

    @Test
    public void test13641() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest27.test13641");
        org.apache.rat.license.ILicense.Builder builder0 = org.apache.rat.license.ILicense.builder();
        org.apache.rat.license.ILicense.Builder builder2 = builder0.setLicenseFamilyCategory("W3CD ");
        org.apache.rat.license.ILicense.Builder builder4 = builder2.setDerivedFrom("http://org/apache/rat/meta-data#LicenseFamilyCategory");
        org.apache.rat.license.ILicense.Builder builder6 = builder2.setLicenseFamilyCategory("OASIS");
        org.apache.rat.license.ILicense.Builder builder8 = builder2.setName("659c96ab-5c6e-4067-997a-fa311a81a261");
        org.apache.rat.license.ILicense.Builder builder10 = builder8.setLicenseFamilyCategory("00186AD8-9B49-4E79-B8F0-40326F09C054 null");
        org.junit.Assert.assertNotNull(builder0);
        org.junit.Assert.assertNotNull(builder2);
        org.junit.Assert.assertNotNull(builder4);
        org.junit.Assert.assertNotNull(builder6);
        org.junit.Assert.assertNotNull(builder8);
        org.junit.Assert.assertNotNull(builder10);
    }

    @Test
    public void test13642() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest27.test13642");
        org.apache.rat.license.ILicense.Builder builder0 = org.apache.rat.license.ILicense.builder();
        org.apache.rat.license.ILicense.Builder builder2 = builder0.setLicenseFamilyCategory("");
        org.apache.rat.analysis.matchers.CopyrightMatcher copyrightMatcher6 = new org.apache.rat.analysis.matchers.CopyrightMatcher("", "GPL1 ", "hi!");
        org.apache.rat.analysis.IHeaderMatcher.State state7 = copyrightMatcher6.finalizeState();
        org.apache.rat.license.ILicense.Builder builder8 = builder2.setMatcher((org.apache.rat.analysis.IHeaderMatcher) copyrightMatcher6);
        org.apache.rat.license.ILicense.Builder builder10 = builder2.setName("hi!");
        org.apache.rat.analysis.matchers.CopyrightMatcher copyrightMatcher14 = new org.apache.rat.analysis.matchers.CopyrightMatcher("", "GPL1 ", "hi!");
        copyrightMatcher14.reset();
        org.apache.rat.analysis.IHeaderMatcher.State state16 = copyrightMatcher14.finalizeState();
        copyrightMatcher14.reset();
        org.apache.rat.license.ILicense.Builder builder18 = builder2.setMatcher((org.apache.rat.analysis.IHeaderMatcher) copyrightMatcher14);
        org.apache.rat.license.ILicense.Builder builder20 = builder18.setLicenseFamilyCategory("MIT  ");
        org.apache.rat.license.ILicense.Builder builder22 = builder18.setNotes("e39d7");
        org.apache.rat.license.ILicense.Builder builder24 = builder18.setDerivedFrom("RegexBuilder89662180a89f497b9301227d494d2bae");
        org.junit.Assert.assertNotNull(builder0);
        org.junit.Assert.assertNotNull(builder2);
        org.junit.Assert.assertTrue("'" + state7 + "' != '" + org.apache.rat.analysis.IHeaderMatcher.State.f + "'", state7.equals(org.apache.rat.analysis.IHeaderMatcher.State.f));
        org.junit.Assert.assertNotNull(builder8);
        org.junit.Assert.assertNotNull(builder10);
        org.junit.Assert.assertTrue("'" + state16 + "' != '" + org.apache.rat.analysis.IHeaderMatcher.State.f + "'", state16.equals(org.apache.rat.analysis.IHeaderMatcher.State.f));
        org.junit.Assert.assertNotNull(builder18);
        org.junit.Assert.assertNotNull(builder20);
        org.junit.Assert.assertNotNull(builder22);
        org.junit.Assert.assertNotNull(builder24);
    }

    @Test
    public void test13643() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest27.test13643");
        org.apache.rat.configuration.builders.SpdxBuilder spdxBuilder0 = org.apache.rat.analysis.IHeaderMatcher.Builder.spdx();
        java.lang.String str1 = spdxBuilder0.toString();
        org.apache.rat.configuration.builders.SpdxBuilder spdxBuilder3 = spdxBuilder0.setName("ef7a8b13-64c3-4510-bb0c-dbf208e1e73f");
        org.apache.rat.analysis.IHeaderMatcher iHeaderMatcher4 = spdxBuilder0.build();
        java.lang.String str5 = spdxBuilder0.toString();
        java.lang.String str6 = spdxBuilder0.toString();
        java.lang.String str7 = spdxBuilder0.toString();
        org.apache.rat.analysis.IHeaderMatcher iHeaderMatcher8 = spdxBuilder0.build();
        org.junit.Assert.assertNotNull(spdxBuilder0);
        org.junit.Assert.assertEquals("'" + str1 + "' != '" + "SpdxBuilder: null" + "'", str1, "SpdxBuilder: null");
        org.junit.Assert.assertNotNull(spdxBuilder3);
        org.junit.Assert.assertNotNull(iHeaderMatcher4);
        org.junit.Assert.assertEquals("'" + str5 + "' != '" + "SpdxBuilder: ef7a8b13-64c3-4510-bb0c-dbf208e1e73f" + "'", str5, "SpdxBuilder: ef7a8b13-64c3-4510-bb0c-dbf208e1e73f");
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "SpdxBuilder: ef7a8b13-64c3-4510-bb0c-dbf208e1e73f" + "'", str6, "SpdxBuilder: ef7a8b13-64c3-4510-bb0c-dbf208e1e73f");
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "SpdxBuilder: ef7a8b13-64c3-4510-bb0c-dbf208e1e73f" + "'", str7, "SpdxBuilder: ef7a8b13-64c3-4510-bb0c-dbf208e1e73f");
        org.junit.Assert.assertNotNull(iHeaderMatcher8);
    }

    @Test
    public void test13644() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest27.test13644");
        org.apache.rat.analysis.license.FullTextMatchingLicense fullTextMatchingLicense0 = new org.apache.rat.analysis.license.FullTextMatchingLicense();
        fullTextMatchingLicense0.setLicenseFamilyName("hi!");
        fullTextMatchingLicense0.setFullText("MANIFEST.MF");
        fullTextMatchingLicense0.setFullText("http:");
        org.apache.rat.license.ILicense.Builder builder7 = fullTextMatchingLicense0.getLicense();
        fullTextMatchingLicense0.setLicenseFamilyName("MathcerRefBuilder: MathcerRefBuilder: 38e4211d-0f24-4ec0-aa5c-260c68412f39");
        org.junit.Assert.assertNotNull(builder7);
    }

    @Test
    public void test13645() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest27.test13645");
        org.apache.rat.utils.Log log0 = null;
        org.apache.rat.ReportConfiguration reportConfiguration1 = new org.apache.rat.ReportConfiguration(log0);
        org.apache.rat.report.claim.ClaimStatistic claimStatistic2 = org.apache.rat.Reporter.report(reportConfiguration1);
        org.apache.commons.io.function.IOSupplier<java.io.OutputStream> outputStreamIOSupplier3 = reportConfiguration1.getOutput();
        org.apache.rat.license.ILicense iLicense4 = null;
        reportConfiguration1.addLicense(iLicense4);
        org.apache.rat.Defaults.Builder builder6 = org.apache.rat.Defaults.builder();
        org.apache.rat.Defaults defaults7 = builder6.build();
        reportConfiguration1.setFrom(defaults7);
        org.apache.rat.license.LicenseSetFactory.LicenseFilter licenseFilter9 = org.apache.rat.license.LicenseSetFactory.LicenseFilter.all;
        java.util.SortedSet<org.apache.rat.license.ILicense> iLicenseSet10 = defaults7.getLicenses(licenseFilter9);
        java.lang.String[] strArray16 = new java.lang.String[] { "http://org/apache/rat/meta-data#LicenseFamilyCategory", "Datum [ name ='http://org/apache/rat/meta-data#LicenseFamilyCategory',value ='GPL1  ']", "MANIFEST.MF", "AllBuilder:", "The MIT License" };
        org.apache.rat.utils.ReportingSet<java.lang.String> strSet17 = new org.apache.rat.utils.ReportingSet<java.lang.String>();
        boolean boolean18 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strSet17, strArray16);
        boolean boolean20 = strSet17.addIfNotPresent("http://org/apache/rat/meta-data#LicenseFamilyName");
        boolean boolean22 = strSet17.addIfNotPresent("ef7a8b13-64c3-4510-bb0c-dbf208e1e73f");
        java.util.function.Function<java.lang.String, java.lang.String> strFunction23 = null;
        org.apache.rat.utils.ReportingSet<java.lang.String> strSet24 = strSet17.setMsgFormat(strFunction23);
        java.util.Spliterator<java.lang.String> strSpliterator25 = strSet17.spliterator();
        org.apache.rat.license.LicenseSetFactory licenseSetFactory26 = new org.apache.rat.license.LicenseSetFactory(iLicenseSet10, (java.util.Collection<java.lang.String>) strSet17);
        java.lang.Object[] objArray27 = strSet17.toArray();
        java.util.Iterator<java.lang.String> strItor28 = strSet17.iterator();
        java.lang.String str29 = strSet17.first();
        org.junit.Assert.assertNull(claimStatistic2);
        org.junit.Assert.assertNotNull(outputStreamIOSupplier3);
        org.junit.Assert.assertNotNull(builder6);
        org.junit.Assert.assertNotNull(defaults7);
        org.junit.Assert.assertTrue("'" + licenseFilter9 + "' != '" + org.apache.rat.license.LicenseSetFactory.LicenseFilter.all + "'", licenseFilter9.equals(org.apache.rat.license.LicenseSetFactory.LicenseFilter.all));
        org.junit.Assert.assertNotNull(iLicenseSet10);
        org.junit.Assert.assertNotNull(strArray16);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + true + "'", boolean18 == true);
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + true + "'", boolean20 == true);
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + true + "'", boolean22 == true);
        org.junit.Assert.assertNotNull(strSet24);
        org.junit.Assert.assertNotNull(strSpliterator25);
        org.junit.Assert.assertNotNull(objArray27);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray27), "[AllBuilder:, Datum [ name ='http://org/apache/rat/meta-data#LicenseFamilyCategory',value ='GPL1  '], MANIFEST.MF, The MIT License, ef7a8b13-64c3-4510-bb0c-dbf208e1e73f, http://org/apache/rat/meta-data#LicenseFamilyCategory, http://org/apache/rat/meta-data#LicenseFamilyName]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray27), "[AllBuilder:, Datum [ name ='http://org/apache/rat/meta-data#LicenseFamilyCategory',value ='GPL1  '], MANIFEST.MF, The MIT License, ef7a8b13-64c3-4510-bb0c-dbf208e1e73f, http://org/apache/rat/meta-data#LicenseFamilyCategory, http://org/apache/rat/meta-data#LicenseFamilyName]");
        org.junit.Assert.assertNotNull(strItor28);
        org.junit.Assert.assertEquals("'" + str29 + "' != '" + "AllBuilder:" + "'", str29, "AllBuilder:");
    }

    @Test
    public void test13646() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest27.test13646");
        org.apache.rat.utils.DefaultLog defaultLog0 = org.apache.rat.utils.DefaultLog.INSTANCE;
        org.apache.rat.license.ILicense.Builder builder1 = org.apache.rat.license.ILicense.builder();
        org.apache.rat.license.ILicense.Builder builder3 = builder1.setLicenseFamilyCategory("");
        org.apache.rat.analysis.matchers.CopyrightMatcher copyrightMatcher7 = new org.apache.rat.analysis.matchers.CopyrightMatcher("", "GPL1 ", "hi!");
        org.apache.rat.analysis.IHeaderMatcher.State state8 = copyrightMatcher7.finalizeState();
        org.apache.rat.license.ILicense.Builder builder9 = builder3.setMatcher((org.apache.rat.analysis.IHeaderMatcher) copyrightMatcher7);
        org.apache.rat.license.ILicense.Builder builder11 = builder9.setLicenseFamilyCategory("");
        defaultLog0.error((java.lang.Object) builder11);
        org.apache.rat.license.ILicense[] iLicenseArray13 = new org.apache.rat.license.ILicense[] {};
        java.util.TreeSet<org.apache.rat.license.ILicense> iLicenseSet14 = new java.util.TreeSet<org.apache.rat.license.ILicense>();
        boolean boolean15 = java.util.Collections.addAll((java.util.Collection<org.apache.rat.license.ILicense>) iLicenseSet14, iLicenseArray13);
        java.lang.String[] strArray28 = new java.lang.String[] { "GPL2 ", "GPL1 ", "notice", "http://org/apache/rat/meta-data#LicenseFamilyName", "notice", "GPL2 ", "http://org/apache/rat/meta-data#LicenseFamilyName", "", "GPL2 ", "", "GPL1 ", "hi!" };
        java.util.ArrayList<java.lang.String> strList29 = new java.util.ArrayList<java.lang.String>();
        boolean boolean30 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strList29, strArray28);
        org.apache.rat.license.LicenseSetFactory licenseSetFactory31 = new org.apache.rat.license.LicenseSetFactory((java.util.SortedSet<org.apache.rat.license.ILicense>) iLicenseSet14, (java.util.Collection<java.lang.String>) strList29);
        org.apache.rat.utils.Log log32 = null;
        org.apache.rat.ReportConfiguration reportConfiguration33 = new org.apache.rat.ReportConfiguration(log32);
        java.io.FilenameFilter filenameFilter34 = reportConfiguration33.getInputFileFilter();
        org.apache.rat.license.LicenseSetFactory.LicenseFilter licenseFilter35 = org.apache.rat.license.LicenseSetFactory.LicenseFilter.all;
        java.util.SortedSet<org.apache.rat.license.ILicense> iLicenseSet36 = reportConfiguration33.getLicenses(licenseFilter35);
        org.apache.rat.config.AddLicenseHeaders addLicenseHeaders37 = org.apache.rat.config.AddLicenseHeaders.FALSE;
        reportConfiguration33.setAddLicenseHeaders(addLicenseHeaders37);
        org.apache.rat.utils.Log log39 = null;
        org.apache.rat.ReportConfiguration reportConfiguration40 = new org.apache.rat.ReportConfiguration(log39);
        org.apache.rat.report.claim.ClaimStatistic claimStatistic41 = org.apache.rat.Reporter.report(reportConfiguration40);
        org.apache.rat.license.LicenseSetFactory.LicenseFilter licenseFilter42 = org.apache.rat.license.LicenseSetFactory.LicenseFilter.all;
        org.apache.rat.Reporter.listLicenses(reportConfiguration40, licenseFilter42);
        org.apache.rat.Reporter.listLicenses(reportConfiguration33, licenseFilter42);
        org.apache.rat.utils.Log log45 = null;
        org.apache.rat.ReportConfiguration reportConfiguration46 = new org.apache.rat.ReportConfiguration(log45);
        java.io.FilenameFilter filenameFilter47 = reportConfiguration46.getInputFileFilter();
        org.apache.rat.license.LicenseSetFactory.LicenseFilter licenseFilter48 = org.apache.rat.license.LicenseSetFactory.LicenseFilter.all;
        java.util.SortedSet<org.apache.rat.license.ILicense> iLicenseSet49 = reportConfiguration46.getLicenses(licenseFilter48);
        org.apache.rat.config.AddLicenseHeaders addLicenseHeaders50 = org.apache.rat.config.AddLicenseHeaders.FALSE;
        reportConfiguration46.setAddLicenseHeaders(addLicenseHeaders50);
        org.apache.rat.utils.Log log52 = null;
        org.apache.rat.ReportConfiguration reportConfiguration53 = new org.apache.rat.ReportConfiguration(log52);
        org.apache.rat.report.claim.ClaimStatistic claimStatistic54 = org.apache.rat.Reporter.report(reportConfiguration53);
        org.apache.rat.license.LicenseSetFactory.LicenseFilter licenseFilter55 = org.apache.rat.license.LicenseSetFactory.LicenseFilter.all;
        org.apache.rat.Reporter.listLicenses(reportConfiguration53, licenseFilter55);
        org.apache.rat.Reporter.listLicenses(reportConfiguration46, licenseFilter55);
        org.apache.rat.Reporter.listLicenses(reportConfiguration33, licenseFilter55);
        java.util.SortedSet<org.apache.rat.license.ILicense> iLicenseSet59 = licenseSetFactory31.getLicenses(licenseFilter55);
        defaultLog0.warn((java.lang.Object) licenseSetFactory31);
        org.apache.rat.analysis.matchers.FullTextMatcher fullTextMatcher63 = new org.apache.rat.analysis.matchers.FullTextMatcher("Datum [ name ='http://org/apache/rat/meta-data#LicenseFamilyCategory',value ='OASIS ']", "hi!");
        boolean boolean65 = fullTextMatcher63.doMatch("AnyBuilder:\nAllBuilder:");
        defaultLog0.error((java.lang.Object) "AnyBuilder:\nAllBuilder:");
        org.apache.rat.annotation.ApacheV2LicenseAppender apacheV2LicenseAppender68 = new org.apache.rat.annotation.ApacheV2LicenseAppender((org.apache.rat.utils.Log) defaultLog0, "a8ad40e5-63d4-4711-aeee-d32efcd029a3");
        java.io.File file69 = null;
        // The following exception was thrown during execution in test generation
        try {
            java.lang.String str70 = apacheV2LicenseAppender68.getLicenseHeader(file69);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(defaultLog0);
        org.junit.Assert.assertNotNull(builder1);
        org.junit.Assert.assertNotNull(builder3);
        org.junit.Assert.assertTrue("'" + state8 + "' != '" + org.apache.rat.analysis.IHeaderMatcher.State.f + "'", state8.equals(org.apache.rat.analysis.IHeaderMatcher.State.f));
        org.junit.Assert.assertNotNull(builder9);
        org.junit.Assert.assertNotNull(builder11);
        org.junit.Assert.assertNotNull(iLicenseArray13);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + false + "'", boolean15 == false);
        org.junit.Assert.assertNotNull(strArray28);
        org.junit.Assert.assertTrue("'" + boolean30 + "' != '" + true + "'", boolean30 == true);
        org.junit.Assert.assertNull(filenameFilter34);
        org.junit.Assert.assertTrue("'" + licenseFilter35 + "' != '" + org.apache.rat.license.LicenseSetFactory.LicenseFilter.all + "'", licenseFilter35.equals(org.apache.rat.license.LicenseSetFactory.LicenseFilter.all));
        org.junit.Assert.assertNotNull(iLicenseSet36);
        org.junit.Assert.assertTrue("'" + addLicenseHeaders37 + "' != '" + org.apache.rat.config.AddLicenseHeaders.FALSE + "'", addLicenseHeaders37.equals(org.apache.rat.config.AddLicenseHeaders.FALSE));
        org.junit.Assert.assertNull(claimStatistic41);
        org.junit.Assert.assertTrue("'" + licenseFilter42 + "' != '" + org.apache.rat.license.LicenseSetFactory.LicenseFilter.all + "'", licenseFilter42.equals(org.apache.rat.license.LicenseSetFactory.LicenseFilter.all));
        org.junit.Assert.assertNull(filenameFilter47);
        org.junit.Assert.assertTrue("'" + licenseFilter48 + "' != '" + org.apache.rat.license.LicenseSetFactory.LicenseFilter.all + "'", licenseFilter48.equals(org.apache.rat.license.LicenseSetFactory.LicenseFilter.all));
        org.junit.Assert.assertNotNull(iLicenseSet49);
        org.junit.Assert.assertTrue("'" + addLicenseHeaders50 + "' != '" + org.apache.rat.config.AddLicenseHeaders.FALSE + "'", addLicenseHeaders50.equals(org.apache.rat.config.AddLicenseHeaders.FALSE));
        org.junit.Assert.assertNull(claimStatistic54);
        org.junit.Assert.assertTrue("'" + licenseFilter55 + "' != '" + org.apache.rat.license.LicenseSetFactory.LicenseFilter.all + "'", licenseFilter55.equals(org.apache.rat.license.LicenseSetFactory.LicenseFilter.all));
        org.junit.Assert.assertNotNull(iLicenseSet59);
        org.junit.Assert.assertTrue("'" + boolean65 + "' != '" + false + "'", boolean65 == false);
    }

    @Test
    public void test13647() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest27.test13647");
        java.lang.String[] strArray5 = new java.lang.String[] { "http://org/apache/rat/meta-data#LicenseFamilyCategory", "Datum [ name ='http://org/apache/rat/meta-data#LicenseFamilyCategory',value ='GPL1  ']", "MANIFEST.MF", "AllBuilder:", "The MIT License" };
        org.apache.rat.utils.ReportingSet<java.lang.String> strSet6 = new org.apache.rat.utils.ReportingSet<java.lang.String>();
        boolean boolean7 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strSet6, strArray5);
        boolean boolean9 = strSet6.addIfNotPresent("http://org/apache/rat/meta-data#LicenseFamilyName");
        java.util.Iterator<java.lang.String> strItor10 = strSet6.iterator();
        strSet6.clear();
        int int12 = strSet6.size();
        java.util.function.Function<java.lang.String, java.lang.String> strFunction13 = null;
        org.apache.rat.utils.ReportingSet<java.lang.String> strSet14 = strSet6.setMsgFormat(strFunction13);
        org.apache.rat.utils.Log log15 = null;
        org.apache.rat.ReportConfiguration reportConfiguration16 = new org.apache.rat.ReportConfiguration(log15);
        java.io.FilenameFilter filenameFilter17 = reportConfiguration16.getInputFileFilter();
        org.apache.rat.license.LicenseSetFactory.LicenseFilter licenseFilter18 = org.apache.rat.license.LicenseSetFactory.LicenseFilter.all;
        java.util.SortedSet<org.apache.rat.license.ILicense> iLicenseSet19 = reportConfiguration16.getLicenses(licenseFilter18);
        org.apache.rat.config.AddLicenseHeaders addLicenseHeaders20 = org.apache.rat.config.AddLicenseHeaders.FALSE;
        reportConfiguration16.setAddLicenseHeaders(addLicenseHeaders20);
        org.apache.rat.utils.Log log22 = null;
        org.apache.rat.ReportConfiguration reportConfiguration23 = new org.apache.rat.ReportConfiguration(log22);
        org.apache.rat.report.claim.ClaimStatistic claimStatistic24 = org.apache.rat.Reporter.report(reportConfiguration23);
        org.apache.rat.license.LicenseSetFactory.LicenseFilter licenseFilter25 = org.apache.rat.license.LicenseSetFactory.LicenseFilter.all;
        org.apache.rat.Reporter.listLicenses(reportConfiguration23, licenseFilter25);
        org.apache.rat.Reporter.listLicenses(reportConfiguration16, licenseFilter25);
        org.apache.rat.utils.Log log28 = null;
        org.apache.rat.ReportConfiguration reportConfiguration29 = new org.apache.rat.ReportConfiguration(log28);
        java.io.FilenameFilter filenameFilter30 = reportConfiguration29.getInputFileFilter();
        org.apache.rat.license.LicenseSetFactory.LicenseFilter licenseFilter31 = org.apache.rat.license.LicenseSetFactory.LicenseFilter.all;
        java.util.SortedSet<org.apache.rat.license.ILicense> iLicenseSet32 = reportConfiguration29.getLicenses(licenseFilter31);
        org.apache.rat.config.AddLicenseHeaders addLicenseHeaders33 = org.apache.rat.config.AddLicenseHeaders.FALSE;
        reportConfiguration29.setAddLicenseHeaders(addLicenseHeaders33);
        org.apache.rat.utils.Log log35 = null;
        org.apache.rat.ReportConfiguration reportConfiguration36 = new org.apache.rat.ReportConfiguration(log35);
        org.apache.rat.report.claim.ClaimStatistic claimStatistic37 = org.apache.rat.Reporter.report(reportConfiguration36);
        org.apache.rat.license.LicenseSetFactory.LicenseFilter licenseFilter38 = org.apache.rat.license.LicenseSetFactory.LicenseFilter.all;
        org.apache.rat.Reporter.listLicenses(reportConfiguration36, licenseFilter38);
        org.apache.rat.Reporter.listLicenses(reportConfiguration29, licenseFilter38);
        org.apache.rat.Reporter.listLicenses(reportConfiguration16, licenseFilter38);
        org.apache.rat.utils.Log log42 = null;
        org.apache.rat.ReportConfiguration reportConfiguration43 = new org.apache.rat.ReportConfiguration(log42);
        org.apache.commons.io.function.IOSupplier<java.io.OutputStream> outputStreamIOSupplier44 = reportConfiguration43.getOutput();
        reportConfiguration16.setOut(outputStreamIOSupplier44);
        org.apache.rat.utils.Log log46 = null;
        org.apache.rat.ReportConfiguration reportConfiguration47 = new org.apache.rat.ReportConfiguration(log46);
        org.apache.commons.io.function.IOSupplier<java.io.OutputStream> outputStreamIOSupplier48 = reportConfiguration47.getOutput();
        reportConfiguration16.setOut(outputStreamIOSupplier48);
        org.apache.rat.utils.Log log50 = null;
        org.apache.rat.ReportConfiguration reportConfiguration51 = new org.apache.rat.ReportConfiguration(log50);
        org.apache.rat.report.claim.ClaimStatistic claimStatistic52 = org.apache.rat.Reporter.report(reportConfiguration51);
        org.apache.commons.io.function.IOSupplier<java.io.OutputStream> outputStreamIOSupplier53 = reportConfiguration51.getOutput();
        boolean boolean54 = reportConfiguration51.isAddingLicensesForced();
        java.lang.String str55 = reportConfiguration51.getCopyrightMessage();
        reportConfiguration51.removeApprovedLicenseCategory("AnyBuilder:\nAllBuilder:");
        org.apache.rat.utils.Log log58 = null;
        org.apache.rat.ReportConfiguration reportConfiguration59 = new org.apache.rat.ReportConfiguration(log58);
        org.apache.rat.report.claim.ClaimStatistic claimStatistic60 = org.apache.rat.Reporter.report(reportConfiguration59);
        org.apache.commons.io.function.IOSupplier<java.io.OutputStream> outputStreamIOSupplier61 = reportConfiguration59.getOutput();
        org.apache.rat.license.ILicense iLicense62 = null;
        reportConfiguration59.addLicense(iLicense62);
        org.apache.rat.Defaults.Builder builder64 = org.apache.rat.Defaults.builder();
        org.apache.rat.Defaults defaults65 = builder64.build();
        reportConfiguration59.setFrom(defaults65);
        org.apache.rat.license.ILicense[] iLicenseArray67 = new org.apache.rat.license.ILicense[] {};
        java.util.TreeSet<org.apache.rat.license.ILicense> iLicenseSet68 = new java.util.TreeSet<org.apache.rat.license.ILicense>();
        boolean boolean69 = java.util.Collections.addAll((java.util.Collection<org.apache.rat.license.ILicense>) iLicenseSet68, iLicenseArray67);
        java.lang.String[] strArray82 = new java.lang.String[] { "GPL2 ", "GPL1 ", "notice", "http://org/apache/rat/meta-data#LicenseFamilyName", "notice", "GPL2 ", "http://org/apache/rat/meta-data#LicenseFamilyName", "", "GPL2 ", "", "GPL1 ", "hi!" };
        java.util.ArrayList<java.lang.String> strList83 = new java.util.ArrayList<java.lang.String>();
        boolean boolean84 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strList83, strArray82);
        org.apache.rat.license.LicenseSetFactory licenseSetFactory85 = new org.apache.rat.license.LicenseSetFactory((java.util.SortedSet<org.apache.rat.license.ILicense>) iLicenseSet68, (java.util.Collection<java.lang.String>) strList83);
        org.apache.rat.license.LicenseSetFactory.LicenseFilter licenseFilter86 = org.apache.rat.license.LicenseSetFactory.LicenseFilter.all;
        java.util.SortedSet<org.apache.rat.license.ILicenseFamily> iLicenseFamilySet87 = licenseSetFactory85.getLicenseFamilies(licenseFilter86);
        java.util.SortedSet<org.apache.rat.license.ILicense> iLicenseSet88 = defaults65.getLicenses(licenseFilter86);
        org.apache.rat.Reporter.listLicenses(reportConfiguration51, licenseFilter86);
        java.util.SortedSet<org.apache.rat.license.ILicense> iLicenseSet90 = reportConfiguration16.getLicenses(licenseFilter86);
        org.apache.rat.Defaults.Builder builder91 = org.apache.rat.Defaults.builder();
        org.apache.rat.Defaults defaults92 = builder91.build();
        org.apache.rat.license.LicenseSetFactory.LicenseFilter licenseFilter93 = org.apache.rat.license.LicenseSetFactory.LicenseFilter.approved;
        java.util.SortedSet<org.apache.rat.license.ILicenseFamily> iLicenseFamilySet94 = defaults92.getLicenseFamilies(licenseFilter93);
        org.apache.rat.policy.DefaultPolicy defaultPolicy95 = new org.apache.rat.policy.DefaultPolicy((java.util.Collection<org.apache.rat.license.ILicenseFamily>) iLicenseFamilySet94);
        reportConfiguration16.addFamilies((java.util.Collection<org.apache.rat.license.ILicenseFamily>) iLicenseFamilySet94);
        boolean boolean97 = strSet14.retainAll((java.util.Collection<org.apache.rat.license.ILicenseFamily>) iLicenseFamilySet94);
        org.junit.Assert.assertNotNull(strArray5);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + true + "'", boolean7 == true);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + true + "'", boolean9 == true);
        org.junit.Assert.assertNotNull(strItor10);
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + 0 + "'", int12 == 0);
        org.junit.Assert.assertNotNull(strSet14);
        org.junit.Assert.assertNull(filenameFilter17);
        org.junit.Assert.assertTrue("'" + licenseFilter18 + "' != '" + org.apache.rat.license.LicenseSetFactory.LicenseFilter.all + "'", licenseFilter18.equals(org.apache.rat.license.LicenseSetFactory.LicenseFilter.all));
        org.junit.Assert.assertNotNull(iLicenseSet19);
        org.junit.Assert.assertTrue("'" + addLicenseHeaders20 + "' != '" + org.apache.rat.config.AddLicenseHeaders.FALSE + "'", addLicenseHeaders20.equals(org.apache.rat.config.AddLicenseHeaders.FALSE));
        org.junit.Assert.assertNull(claimStatistic24);
        org.junit.Assert.assertTrue("'" + licenseFilter25 + "' != '" + org.apache.rat.license.LicenseSetFactory.LicenseFilter.all + "'", licenseFilter25.equals(org.apache.rat.license.LicenseSetFactory.LicenseFilter.all));
        org.junit.Assert.assertNull(filenameFilter30);
        org.junit.Assert.assertTrue("'" + licenseFilter31 + "' != '" + org.apache.rat.license.LicenseSetFactory.LicenseFilter.all + "'", licenseFilter31.equals(org.apache.rat.license.LicenseSetFactory.LicenseFilter.all));
        org.junit.Assert.assertNotNull(iLicenseSet32);
        org.junit.Assert.assertTrue("'" + addLicenseHeaders33 + "' != '" + org.apache.rat.config.AddLicenseHeaders.FALSE + "'", addLicenseHeaders33.equals(org.apache.rat.config.AddLicenseHeaders.FALSE));
        org.junit.Assert.assertNull(claimStatistic37);
        org.junit.Assert.assertTrue("'" + licenseFilter38 + "' != '" + org.apache.rat.license.LicenseSetFactory.LicenseFilter.all + "'", licenseFilter38.equals(org.apache.rat.license.LicenseSetFactory.LicenseFilter.all));
        org.junit.Assert.assertNotNull(outputStreamIOSupplier44);
        org.junit.Assert.assertNotNull(outputStreamIOSupplier48);
        org.junit.Assert.assertNull(claimStatistic52);
        org.junit.Assert.assertNotNull(outputStreamIOSupplier53);
        org.junit.Assert.assertTrue("'" + boolean54 + "' != '" + false + "'", boolean54 == false);
        org.junit.Assert.assertNull(str55);
        org.junit.Assert.assertNull(claimStatistic60);
        org.junit.Assert.assertNotNull(outputStreamIOSupplier61);
        org.junit.Assert.assertNotNull(builder64);
        org.junit.Assert.assertNotNull(defaults65);
        org.junit.Assert.assertNotNull(iLicenseArray67);
        org.junit.Assert.assertTrue("'" + boolean69 + "' != '" + false + "'", boolean69 == false);
        org.junit.Assert.assertNotNull(strArray82);
        org.junit.Assert.assertTrue("'" + boolean84 + "' != '" + true + "'", boolean84 == true);
        org.junit.Assert.assertTrue("'" + licenseFilter86 + "' != '" + org.apache.rat.license.LicenseSetFactory.LicenseFilter.all + "'", licenseFilter86.equals(org.apache.rat.license.LicenseSetFactory.LicenseFilter.all));
        org.junit.Assert.assertNotNull(iLicenseFamilySet87);
        org.junit.Assert.assertNotNull(iLicenseSet88);
        org.junit.Assert.assertNotNull(iLicenseSet90);
        org.junit.Assert.assertNotNull(builder91);
        org.junit.Assert.assertNotNull(defaults92);
        org.junit.Assert.assertTrue("'" + licenseFilter93 + "' != '" + org.apache.rat.license.LicenseSetFactory.LicenseFilter.approved + "'", licenseFilter93.equals(org.apache.rat.license.LicenseSetFactory.LicenseFilter.approved));
        org.junit.Assert.assertNotNull(iLicenseFamilySet94);
        org.junit.Assert.assertTrue("'" + boolean97 + "' != '" + false + "'", boolean97 == false);
    }

    @Test
    public void test13648() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest27.test13648");
        org.apache.rat.analysis.matchers.FullTextMatcher fullTextMatcher1 = new org.apache.rat.analysis.matchers.FullTextMatcher("00186ad8-9b49-4e79-b8f0-40326f09c054");
        fullTextMatcher1.reset();
        boolean boolean4 = fullTextMatcher1.doMatch("AnyBuilder:");
        org.apache.rat.analysis.IHeaderMatcher.State state5 = fullTextMatcher1.finalizeState();
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertTrue("'" + state5 + "' != '" + org.apache.rat.analysis.IHeaderMatcher.State.f + "'", state5.equals(org.apache.rat.analysis.IHeaderMatcher.State.f));
    }

    @Test
    public void test13649() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest27.test13649");
        java.util.regex.Pattern pattern0 = null;
        org.apache.rat.header.HeaderBean headerBean2 = new org.apache.rat.header.HeaderBean(pattern0, true);
        java.util.regex.Pattern pattern3 = headerBean2.getHeaderPattern();
        java.util.regex.Pattern pattern4 = headerBean2.getHeaderPattern();
        headerBean2.setMatch(false);
        boolean boolean7 = headerBean2.isMatch();
        java.util.regex.Pattern pattern8 = null;
        headerBean2.setHeaderPattern(pattern8);
        org.junit.Assert.assertNull(pattern3);
        org.junit.Assert.assertNull(pattern4);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
    }

    @Test
    public void test13650() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest27.test13650");
        org.apache.rat.analysis.matchers.SPDXMatcherFactory sPDXMatcherFactory0 = org.apache.rat.analysis.matchers.SPDXMatcherFactory.INSTANCE;
        org.apache.rat.analysis.IHeaderMatcher iHeaderMatcher2 = sPDXMatcherFactory0.create("GPL3 ");
        org.apache.rat.analysis.IHeaderMatcher iHeaderMatcher4 = sPDXMatcherFactory0.create("6620e9ee-d651-4c18-8162-edad6d18368e");
        org.apache.rat.analysis.IHeaderMatcher iHeaderMatcher6 = sPDXMatcherFactory0.create("Copyright Builder: s:null e:null o:null");
        org.apache.rat.analysis.IHeaderMatcher iHeaderMatcher8 = sPDXMatcherFactory0.create("46eea23e-d320-45bc-aa7f-844d2e1597ce");
        org.apache.rat.analysis.IHeaderMatcher iHeaderMatcher10 = sPDXMatcherFactory0.create("MathcerRefBuilder: 90663eff7ed841bd85a8e8f189198bc6");
        org.apache.rat.analysis.IHeaderMatcher iHeaderMatcher12 = sPDXMatcherFactory0.create("AnyBu");
        org.junit.Assert.assertNotNull(sPDXMatcherFactory0);
        org.junit.Assert.assertNotNull(iHeaderMatcher2);
        org.junit.Assert.assertNotNull(iHeaderMatcher4);
        org.junit.Assert.assertNotNull(iHeaderMatcher6);
        org.junit.Assert.assertNotNull(iHeaderMatcher8);
        org.junit.Assert.assertNotNull(iHeaderMatcher10);
        org.junit.Assert.assertNotNull(iHeaderMatcher12);
    }

    @Test
    public void test13651() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest27.test13651");
        org.apache.rat.report.claim.ClaimStatistic claimStatistic0 = new org.apache.rat.report.claim.ClaimStatistic();
        claimStatistic0.setNumUnApproved((int) (short) 10);
        java.util.Map<java.lang.String, java.lang.Integer> strMap3 = null;
        claimStatistic0.setDocumentCategoryMap(strMap3);
        int int5 = claimStatistic0.getNumApproved();
        claimStatistic0.setNumUnApproved((int) (short) -1);
        java.util.Map<java.lang.String, java.lang.Integer> strMap8 = null;
        claimStatistic0.setLicenseFileCodeMap(strMap8);
        int int10 = claimStatistic0.getNumUnApproved();
        java.util.Map<java.lang.String, java.lang.Integer> strMap11 = null;
        claimStatistic0.setLicenseFileNameMap(strMap11);
        java.util.Map<java.lang.String, java.lang.Integer> strMap13 = claimStatistic0.getDocumentCategoryMap();
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 0 + "'", int5 == 0);
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + (-1) + "'", int10 == (-1));
        org.junit.Assert.assertNull(strMap13);
    }

    @Test
    public void test13652() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest27.test13652");
        org.apache.rat.configuration.builders.NotBuilder notBuilder0 = new org.apache.rat.configuration.builders.NotBuilder();
        org.apache.rat.configuration.builders.AnyBuilder anyBuilder1 = org.apache.rat.analysis.IHeaderMatcher.Builder.any();
        java.lang.String str2 = anyBuilder1.toString();
        java.util.List<org.apache.rat.analysis.IHeaderMatcher> iHeaderMatcherList3 = anyBuilder1.getChildren();
        org.apache.rat.analysis.IHeaderMatcher iHeaderMatcher4 = anyBuilder1.build();
        org.apache.rat.configuration.builders.AnyBuilder anyBuilder5 = org.apache.rat.analysis.IHeaderMatcher.Builder.any();
        java.lang.String str6 = anyBuilder5.toString();
        java.util.List<org.apache.rat.analysis.IHeaderMatcher> iHeaderMatcherList7 = anyBuilder5.getChildren();
        org.apache.rat.analysis.IHeaderMatcher iHeaderMatcher8 = anyBuilder5.build();
        org.apache.rat.analysis.IHeaderMatcher iHeaderMatcher9 = anyBuilder5.build();
        java.util.List<org.apache.rat.analysis.IHeaderMatcher> iHeaderMatcherList10 = anyBuilder5.getChildren();
        org.apache.rat.configuration.builders.NotBuilder notBuilder11 = new org.apache.rat.configuration.builders.NotBuilder();
        java.lang.String str12 = notBuilder11.toString();
        org.apache.rat.configuration.builders.MatcherRefBuilder matcherRefBuilder13 = org.apache.rat.analysis.IHeaderMatcher.Builder.matcherRef();
        boolean boolean14 = matcherRefBuilder13.hasId();
        java.util.Map<java.lang.String, org.apache.rat.analysis.IHeaderMatcher> strMap15 = null;
        org.apache.rat.configuration.builders.MatcherRefBuilder matcherRefBuilder16 = matcherRefBuilder13.setMatchers(strMap15);
        org.apache.rat.configuration.builders.AllBuilder allBuilder17 = new org.apache.rat.configuration.builders.AllBuilder();
        org.apache.rat.configuration.builders.CopyrightBuilder copyrightBuilder18 = org.apache.rat.analysis.IHeaderMatcher.Builder.copyright();
        org.apache.rat.configuration.builders.CopyrightBuilder copyrightBuilder20 = copyrightBuilder18.setStart("OASIS");
        java.lang.String str21 = copyrightBuilder18.toString();
        org.apache.rat.configuration.builders.CopyrightBuilder copyrightBuilder23 = copyrightBuilder18.setStart("223f0aba-15d4-49e9-901e-5740c137aebf");
        org.apache.rat.configuration.builders.MatcherRefBuilder matcherRefBuilder24 = org.apache.rat.analysis.IHeaderMatcher.Builder.matcherRef();
        boolean boolean25 = matcherRefBuilder24.hasId();
        org.apache.rat.configuration.builders.CopyrightBuilder copyrightBuilder26 = org.apache.rat.analysis.IHeaderMatcher.Builder.copyright();
        org.apache.rat.configuration.builders.CopyrightBuilder copyrightBuilder28 = copyrightBuilder26.setStart("OASIS");
        java.lang.String str29 = copyrightBuilder26.toString();
        org.apache.rat.configuration.builders.CopyrightBuilder copyrightBuilder31 = copyrightBuilder26.setStart("223f0aba-15d4-49e9-901e-5740c137aebf");
        org.apache.rat.configuration.builders.CopyrightBuilder copyrightBuilder32 = org.apache.rat.analysis.IHeaderMatcher.Builder.copyright();
        org.apache.rat.configuration.builders.CopyrightBuilder copyrightBuilder33 = org.apache.rat.analysis.IHeaderMatcher.Builder.copyright();
        java.lang.String str34 = copyrightBuilder33.toString();
        org.apache.rat.configuration.builders.CopyrightBuilder copyrightBuilder36 = copyrightBuilder33.setEnd(".cvsignore");
        boolean boolean37 = copyrightBuilder33.hasId();
        org.apache.rat.configuration.builders.CopyrightBuilder copyrightBuilder38 = org.apache.rat.analysis.IHeaderMatcher.Builder.copyright();
        java.lang.String str39 = copyrightBuilder38.toString();
        org.apache.rat.configuration.builders.CopyrightBuilder copyrightBuilder41 = copyrightBuilder38.setEnd(".cvsignore");
        boolean boolean42 = copyrightBuilder38.hasId();
        java.lang.String str43 = copyrightBuilder38.toString();
        org.apache.rat.configuration.builders.CopyrightBuilder copyrightBuilder44 = org.apache.rat.analysis.IHeaderMatcher.Builder.copyright();
        org.apache.rat.configuration.builders.CopyrightBuilder copyrightBuilder46 = copyrightBuilder44.setStart("OASIS");
        org.apache.rat.configuration.builders.AnyBuilder anyBuilder47 = org.apache.rat.analysis.IHeaderMatcher.Builder.any();
        org.apache.rat.configuration.builders.MatcherRefBuilder matcherRefBuilder48 = org.apache.rat.analysis.IHeaderMatcher.Builder.matcherRef();
        boolean boolean49 = matcherRefBuilder48.hasId();
        java.util.Map<java.lang.String, org.apache.rat.analysis.IHeaderMatcher> strMap50 = null;
        org.apache.rat.configuration.builders.MatcherRefBuilder matcherRefBuilder51 = matcherRefBuilder48.setMatchers(strMap50);
        org.apache.rat.configuration.builders.CopyrightBuilder copyrightBuilder52 = org.apache.rat.analysis.IHeaderMatcher.Builder.copyright();
        org.apache.rat.configuration.builders.MatcherRefBuilder matcherRefBuilder53 = org.apache.rat.analysis.IHeaderMatcher.Builder.matcherRef();
        boolean boolean54 = matcherRefBuilder53.hasId();
        java.lang.String str55 = matcherRefBuilder53.toString();
        java.util.Map<java.lang.String, org.apache.rat.analysis.IHeaderMatcher> strMap56 = null;
        org.apache.rat.configuration.builders.MatcherRefBuilder matcherRefBuilder57 = matcherRefBuilder53.setMatchers(strMap56);
        org.apache.rat.analysis.IHeaderMatcher.Builder[] builderArray58 = new org.apache.rat.analysis.IHeaderMatcher.Builder[] { matcherRefBuilder13, allBuilder17, copyrightBuilder23, matcherRefBuilder24, copyrightBuilder26, copyrightBuilder32, copyrightBuilder33, copyrightBuilder38, copyrightBuilder44, anyBuilder47, matcherRefBuilder48, copyrightBuilder52, matcherRefBuilder53 };
        java.util.ArrayList<org.apache.rat.analysis.IHeaderMatcher.Builder> builderList59 = new java.util.ArrayList<org.apache.rat.analysis.IHeaderMatcher.Builder>();
        boolean boolean60 = java.util.Collections.addAll((java.util.Collection<org.apache.rat.analysis.IHeaderMatcher.Builder>) builderList59, builderArray58);
        org.apache.rat.configuration.builders.AbstractBuilder abstractBuilder61 = notBuilder11.add((java.util.Collection<org.apache.rat.analysis.IHeaderMatcher.Builder>) builderList59);
        org.apache.rat.configuration.builders.AbstractBuilder abstractBuilder62 = anyBuilder5.add((java.util.Collection<org.apache.rat.analysis.IHeaderMatcher.Builder>) builderList59);
        org.apache.rat.configuration.builders.AbstractBuilder abstractBuilder63 = anyBuilder1.add((java.util.Collection<org.apache.rat.analysis.IHeaderMatcher.Builder>) builderList59);
        org.apache.rat.configuration.builders.AbstractBuilder abstractBuilder64 = notBuilder0.add((java.util.Collection<org.apache.rat.analysis.IHeaderMatcher.Builder>) builderList59);
        java.lang.String str65 = notBuilder0.toString();
        // The following exception was thrown during execution in test generation
        try {
            org.apache.rat.analysis.IHeaderMatcher iHeaderMatcher66 = notBuilder0.build();
            org.junit.Assert.fail("Expected exception of type org.apache.rat.ConfigurationException; message: 'not' type matcher requires one and only one enclosed matcher");
        } catch (org.apache.rat.ConfigurationException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(anyBuilder1);
        org.junit.Assert.assertEquals("'" + str2 + "' != '" + "AnyBuilder:" + "'", str2, "AnyBuilder:");
        org.junit.Assert.assertNotNull(iHeaderMatcherList3);
        org.junit.Assert.assertNotNull(iHeaderMatcher4);
        org.junit.Assert.assertNotNull(anyBuilder5);
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "AnyBuilder:" + "'", str6, "AnyBuilder:");
        org.junit.Assert.assertNotNull(iHeaderMatcherList7);
        org.junit.Assert.assertNotNull(iHeaderMatcher8);
        org.junit.Assert.assertNotNull(iHeaderMatcher9);
        org.junit.Assert.assertNotNull(iHeaderMatcherList10);
        org.junit.Assert.assertEquals("'" + str12 + "' != '" + "NotBuilder: null" + "'", str12, "NotBuilder: null");
        org.junit.Assert.assertNotNull(matcherRefBuilder13);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
        org.junit.Assert.assertNotNull(matcherRefBuilder16);
        org.junit.Assert.assertNotNull(copyrightBuilder18);
        org.junit.Assert.assertNotNull(copyrightBuilder20);
        org.junit.Assert.assertEquals("'" + str21 + "' != '" + "Copyright Builder: s:OASIS e:null o:null" + "'", str21, "Copyright Builder: s:OASIS e:null o:null");
        org.junit.Assert.assertNotNull(copyrightBuilder23);
        org.junit.Assert.assertNotNull(matcherRefBuilder24);
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + false + "'", boolean25 == false);
        org.junit.Assert.assertNotNull(copyrightBuilder26);
        org.junit.Assert.assertNotNull(copyrightBuilder28);
        org.junit.Assert.assertEquals("'" + str29 + "' != '" + "Copyright Builder: s:OASIS e:null o:null" + "'", str29, "Copyright Builder: s:OASIS e:null o:null");
        org.junit.Assert.assertNotNull(copyrightBuilder31);
        org.junit.Assert.assertNotNull(copyrightBuilder32);
        org.junit.Assert.assertNotNull(copyrightBuilder33);
        org.junit.Assert.assertEquals("'" + str34 + "' != '" + "Copyright Builder: s:null e:null o:null" + "'", str34, "Copyright Builder: s:null e:null o:null");
        org.junit.Assert.assertNotNull(copyrightBuilder36);
        org.junit.Assert.assertTrue("'" + boolean37 + "' != '" + false + "'", boolean37 == false);
        org.junit.Assert.assertNotNull(copyrightBuilder38);
        org.junit.Assert.assertEquals("'" + str39 + "' != '" + "Copyright Builder: s:null e:null o:null" + "'", str39, "Copyright Builder: s:null e:null o:null");
        org.junit.Assert.assertNotNull(copyrightBuilder41);
        org.junit.Assert.assertTrue("'" + boolean42 + "' != '" + false + "'", boolean42 == false);
        org.junit.Assert.assertEquals("'" + str43 + "' != '" + "Copyright Builder: s:null e:.cvsignore o:null" + "'", str43, "Copyright Builder: s:null e:.cvsignore o:null");
        org.junit.Assert.assertNotNull(copyrightBuilder44);
        org.junit.Assert.assertNotNull(copyrightBuilder46);
        org.junit.Assert.assertNotNull(anyBuilder47);
        org.junit.Assert.assertNotNull(matcherRefBuilder48);
        org.junit.Assert.assertTrue("'" + boolean49 + "' != '" + false + "'", boolean49 == false);
        org.junit.Assert.assertNotNull(matcherRefBuilder51);
        org.junit.Assert.assertNotNull(copyrightBuilder52);
        org.junit.Assert.assertNotNull(matcherRefBuilder53);
        org.junit.Assert.assertTrue("'" + boolean54 + "' != '" + false + "'", boolean54 == false);
        org.junit.Assert.assertEquals("'" + str55 + "' != '" + "MathcerRefBuilder: null" + "'", str55, "MathcerRefBuilder: null");
        org.junit.Assert.assertNotNull(matcherRefBuilder57);
        org.junit.Assert.assertNotNull(builderArray58);
        org.junit.Assert.assertTrue("'" + boolean60 + "' != '" + true + "'", boolean60 == true);
        org.junit.Assert.assertNotNull(abstractBuilder61);
        org.junit.Assert.assertNotNull(abstractBuilder62);
        org.junit.Assert.assertNotNull(abstractBuilder63);
        org.junit.Assert.assertNotNull(abstractBuilder64);
        org.junit.Assert.assertEquals("'" + str65 + "' != '" + "NotBuilder: MathcerRefBuilder: null" + "'", str65, "NotBuilder: MathcerRefBuilder: null");
    }

    @Test
    public void test13653() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest27.test13653");
        org.apache.rat.config.SourceCodeManagementSystems sourceCodeManagementSystems0 = org.apache.rat.config.SourceCodeManagementSystems.SUBVERSION;
        boolean boolean1 = sourceCodeManagementSystems0.hasIgnoreFile();
        java.util.List<java.lang.String> strList2 = sourceCodeManagementSystems0.getExclusions();
        boolean boolean3 = sourceCodeManagementSystems0.hasIgnoreFile();
        java.lang.String str4 = sourceCodeManagementSystems0.getIgnoreFile();
        org.junit.Assert.assertTrue("'" + sourceCodeManagementSystems0 + "' != '" + org.apache.rat.config.SourceCodeManagementSystems.SUBVERSION + "'", sourceCodeManagementSystems0.equals(org.apache.rat.config.SourceCodeManagementSystems.SUBVERSION));
        org.junit.Assert.assertTrue("'" + boolean1 + "' != '" + false + "'", boolean1 == false);
        org.junit.Assert.assertNotNull(strList2);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertNull(str4);
    }

    @Test
    public void test13654() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest27.test13654");
        boolean boolean1 = org.apache.rat.document.impl.guesser.BinaryGuesser.isKeystore("d2667b11-8ac3-4c97-9268-8bf71055a421");
        org.junit.Assert.assertTrue("'" + boolean1 + "' != '" + false + "'", boolean1 == false);
    }

    @Test
    public void test13655() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest27.test13655");
        org.apache.rat.utils.Log log0 = null;
        org.apache.rat.ReportConfiguration reportConfiguration1 = new org.apache.rat.ReportConfiguration(log0);
        java.io.FilenameFilter filenameFilter2 = reportConfiguration1.getInputFileFilter();
        org.apache.rat.license.LicenseSetFactory.LicenseFilter licenseFilter3 = org.apache.rat.license.LicenseSetFactory.LicenseFilter.all;
        java.util.SortedSet<org.apache.rat.license.ILicense> iLicenseSet4 = reportConfiguration1.getLicenses(licenseFilter3);
        org.apache.rat.config.AddLicenseHeaders addLicenseHeaders5 = org.apache.rat.config.AddLicenseHeaders.FALSE;
        reportConfiguration1.setAddLicenseHeaders(addLicenseHeaders5);
        org.apache.rat.utils.Log log7 = null;
        org.apache.rat.ReportConfiguration reportConfiguration8 = new org.apache.rat.ReportConfiguration(log7);
        org.apache.rat.report.claim.ClaimStatistic claimStatistic9 = org.apache.rat.Reporter.report(reportConfiguration8);
        org.apache.rat.license.LicenseSetFactory.LicenseFilter licenseFilter10 = org.apache.rat.license.LicenseSetFactory.LicenseFilter.all;
        org.apache.rat.Reporter.listLicenses(reportConfiguration8, licenseFilter10);
        org.apache.rat.Reporter.listLicenses(reportConfiguration1, licenseFilter10);
        org.apache.rat.report.IReportable iReportable13 = null;
        reportConfiguration1.setReportable(iReportable13);
        org.apache.rat.report.IReportable iReportable15 = reportConfiguration1.getReportable();
        org.apache.rat.license.ILicense[] iLicenseArray16 = new org.apache.rat.license.ILicense[] {};
        java.util.TreeSet<org.apache.rat.license.ILicense> iLicenseSet17 = new java.util.TreeSet<org.apache.rat.license.ILicense>();
        boolean boolean18 = java.util.Collections.addAll((java.util.Collection<org.apache.rat.license.ILicense>) iLicenseSet17, iLicenseArray16);
        java.lang.String[] strArray31 = new java.lang.String[] { "GPL2 ", "GPL1 ", "notice", "http://org/apache/rat/meta-data#LicenseFamilyName", "notice", "GPL2 ", "http://org/apache/rat/meta-data#LicenseFamilyName", "", "GPL2 ", "", "GPL1 ", "hi!" };
        java.util.ArrayList<java.lang.String> strList32 = new java.util.ArrayList<java.lang.String>();
        boolean boolean33 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strList32, strArray31);
        org.apache.rat.license.LicenseSetFactory licenseSetFactory34 = new org.apache.rat.license.LicenseSetFactory((java.util.SortedSet<org.apache.rat.license.ILicense>) iLicenseSet17, (java.util.Collection<java.lang.String>) strList32);
        org.apache.rat.license.LicenseSetFactory.LicenseFilter licenseFilter35 = org.apache.rat.license.LicenseSetFactory.LicenseFilter.all;
        java.util.SortedSet<org.apache.rat.license.ILicenseFamily> iLicenseFamilySet36 = licenseSetFactory34.getLicenseFamilies(licenseFilter35);
        org.apache.rat.license.ILicense[] iLicenseArray37 = new org.apache.rat.license.ILicense[] {};
        java.util.TreeSet<org.apache.rat.license.ILicense> iLicenseSet38 = new java.util.TreeSet<org.apache.rat.license.ILicense>();
        boolean boolean39 = java.util.Collections.addAll((java.util.Collection<org.apache.rat.license.ILicense>) iLicenseSet38, iLicenseArray37);
        java.lang.String[] strArray52 = new java.lang.String[] { "GPL2 ", "GPL1 ", "notice", "http://org/apache/rat/meta-data#LicenseFamilyName", "notice", "GPL2 ", "http://org/apache/rat/meta-data#LicenseFamilyName", "", "GPL2 ", "", "GPL1 ", "hi!" };
        java.util.ArrayList<java.lang.String> strList53 = new java.util.ArrayList<java.lang.String>();
        boolean boolean54 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strList53, strArray52);
        org.apache.rat.license.LicenseSetFactory licenseSetFactory55 = new org.apache.rat.license.LicenseSetFactory((java.util.SortedSet<org.apache.rat.license.ILicense>) iLicenseSet38, (java.util.Collection<java.lang.String>) strList53);
        org.apache.rat.utils.Log log56 = null;
        org.apache.rat.ReportConfiguration reportConfiguration57 = new org.apache.rat.ReportConfiguration(log56);
        java.io.FilenameFilter filenameFilter58 = reportConfiguration57.getInputFileFilter();
        org.apache.rat.license.LicenseSetFactory.LicenseFilter licenseFilter59 = org.apache.rat.license.LicenseSetFactory.LicenseFilter.all;
        java.util.SortedSet<org.apache.rat.license.ILicense> iLicenseSet60 = reportConfiguration57.getLicenses(licenseFilter59);
        org.apache.rat.config.AddLicenseHeaders addLicenseHeaders61 = org.apache.rat.config.AddLicenseHeaders.FALSE;
        reportConfiguration57.setAddLicenseHeaders(addLicenseHeaders61);
        org.apache.rat.utils.Log log63 = null;
        org.apache.rat.ReportConfiguration reportConfiguration64 = new org.apache.rat.ReportConfiguration(log63);
        org.apache.rat.report.claim.ClaimStatistic claimStatistic65 = org.apache.rat.Reporter.report(reportConfiguration64);
        org.apache.rat.license.LicenseSetFactory.LicenseFilter licenseFilter66 = org.apache.rat.license.LicenseSetFactory.LicenseFilter.all;
        org.apache.rat.Reporter.listLicenses(reportConfiguration64, licenseFilter66);
        org.apache.rat.Reporter.listLicenses(reportConfiguration57, licenseFilter66);
        org.apache.rat.utils.Log log69 = null;
        org.apache.rat.ReportConfiguration reportConfiguration70 = new org.apache.rat.ReportConfiguration(log69);
        java.io.FilenameFilter filenameFilter71 = reportConfiguration70.getInputFileFilter();
        org.apache.rat.license.LicenseSetFactory.LicenseFilter licenseFilter72 = org.apache.rat.license.LicenseSetFactory.LicenseFilter.all;
        java.util.SortedSet<org.apache.rat.license.ILicense> iLicenseSet73 = reportConfiguration70.getLicenses(licenseFilter72);
        org.apache.rat.config.AddLicenseHeaders addLicenseHeaders74 = org.apache.rat.config.AddLicenseHeaders.FALSE;
        reportConfiguration70.setAddLicenseHeaders(addLicenseHeaders74);
        org.apache.rat.utils.Log log76 = null;
        org.apache.rat.ReportConfiguration reportConfiguration77 = new org.apache.rat.ReportConfiguration(log76);
        org.apache.rat.report.claim.ClaimStatistic claimStatistic78 = org.apache.rat.Reporter.report(reportConfiguration77);
        org.apache.rat.license.LicenseSetFactory.LicenseFilter licenseFilter79 = org.apache.rat.license.LicenseSetFactory.LicenseFilter.all;
        org.apache.rat.Reporter.listLicenses(reportConfiguration77, licenseFilter79);
        org.apache.rat.Reporter.listLicenses(reportConfiguration70, licenseFilter79);
        org.apache.rat.Reporter.listLicenses(reportConfiguration57, licenseFilter79);
        java.util.SortedSet<org.apache.rat.license.ILicense> iLicenseSet83 = licenseSetFactory55.getLicenses(licenseFilter79);
        java.util.SortedSet<org.apache.rat.license.ILicenseFamily> iLicenseFamilySet84 = licenseSetFactory34.getLicenseFamilies(licenseFilter79);
        java.util.SortedSet<org.apache.rat.license.ILicenseFamily> iLicenseFamilySet85 = reportConfiguration1.getLicenseFamilies(licenseFilter79);
        org.apache.rat.utils.ReportingSet<java.lang.String> strSet86 = new org.apache.rat.utils.ReportingSet<java.lang.String>();
        boolean boolean88 = strSet86.addIfNotPresent("OASIS Open License");
        boolean boolean90 = strSet86.add("http://org/apache/rat/meta-data#HeaderCategory");
        boolean boolean92 = strSet86.add("");
        boolean boolean94 = strSet86.addIfNotPresent("f300711b-0269-45ff-a34e-20094c87f793");
        reportConfiguration1.addApprovedLicenseCategories((java.util.Collection<java.lang.String>) strSet86);
        java.util.stream.Stream<java.lang.String> strStream96 = strSet86.parallelStream();
        java.util.Comparator<? super java.lang.String> wildcardComparator97 = strSet86.comparator();
        org.junit.Assert.assertNull(filenameFilter2);
        org.junit.Assert.assertTrue("'" + licenseFilter3 + "' != '" + org.apache.rat.license.LicenseSetFactory.LicenseFilter.all + "'", licenseFilter3.equals(org.apache.rat.license.LicenseSetFactory.LicenseFilter.all));
        org.junit.Assert.assertNotNull(iLicenseSet4);
        org.junit.Assert.assertTrue("'" + addLicenseHeaders5 + "' != '" + org.apache.rat.config.AddLicenseHeaders.FALSE + "'", addLicenseHeaders5.equals(org.apache.rat.config.AddLicenseHeaders.FALSE));
        org.junit.Assert.assertNull(claimStatistic9);
        org.junit.Assert.assertTrue("'" + licenseFilter10 + "' != '" + org.apache.rat.license.LicenseSetFactory.LicenseFilter.all + "'", licenseFilter10.equals(org.apache.rat.license.LicenseSetFactory.LicenseFilter.all));
        org.junit.Assert.assertNull(iReportable15);
        org.junit.Assert.assertNotNull(iLicenseArray16);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + false + "'", boolean18 == false);
        org.junit.Assert.assertNotNull(strArray31);
        org.junit.Assert.assertTrue("'" + boolean33 + "' != '" + true + "'", boolean33 == true);
        org.junit.Assert.assertTrue("'" + licenseFilter35 + "' != '" + org.apache.rat.license.LicenseSetFactory.LicenseFilter.all + "'", licenseFilter35.equals(org.apache.rat.license.LicenseSetFactory.LicenseFilter.all));
        org.junit.Assert.assertNotNull(iLicenseFamilySet36);
        org.junit.Assert.assertNotNull(iLicenseArray37);
        org.junit.Assert.assertTrue("'" + boolean39 + "' != '" + false + "'", boolean39 == false);
        org.junit.Assert.assertNotNull(strArray52);
        org.junit.Assert.assertTrue("'" + boolean54 + "' != '" + true + "'", boolean54 == true);
        org.junit.Assert.assertNull(filenameFilter58);
        org.junit.Assert.assertTrue("'" + licenseFilter59 + "' != '" + org.apache.rat.license.LicenseSetFactory.LicenseFilter.all + "'", licenseFilter59.equals(org.apache.rat.license.LicenseSetFactory.LicenseFilter.all));
        org.junit.Assert.assertNotNull(iLicenseSet60);
        org.junit.Assert.assertTrue("'" + addLicenseHeaders61 + "' != '" + org.apache.rat.config.AddLicenseHeaders.FALSE + "'", addLicenseHeaders61.equals(org.apache.rat.config.AddLicenseHeaders.FALSE));
        org.junit.Assert.assertNull(claimStatistic65);
        org.junit.Assert.assertTrue("'" + licenseFilter66 + "' != '" + org.apache.rat.license.LicenseSetFactory.LicenseFilter.all + "'", licenseFilter66.equals(org.apache.rat.license.LicenseSetFactory.LicenseFilter.all));
        org.junit.Assert.assertNull(filenameFilter71);
        org.junit.Assert.assertTrue("'" + licenseFilter72 + "' != '" + org.apache.rat.license.LicenseSetFactory.LicenseFilter.all + "'", licenseFilter72.equals(org.apache.rat.license.LicenseSetFactory.LicenseFilter.all));
        org.junit.Assert.assertNotNull(iLicenseSet73);
        org.junit.Assert.assertTrue("'" + addLicenseHeaders74 + "' != '" + org.apache.rat.config.AddLicenseHeaders.FALSE + "'", addLicenseHeaders74.equals(org.apache.rat.config.AddLicenseHeaders.FALSE));
        org.junit.Assert.assertNull(claimStatistic78);
        org.junit.Assert.assertTrue("'" + licenseFilter79 + "' != '" + org.apache.rat.license.LicenseSetFactory.LicenseFilter.all + "'", licenseFilter79.equals(org.apache.rat.license.LicenseSetFactory.LicenseFilter.all));
        org.junit.Assert.assertNotNull(iLicenseSet83);
        org.junit.Assert.assertNotNull(iLicenseFamilySet84);
        org.junit.Assert.assertNotNull(iLicenseFamilySet85);
        org.junit.Assert.assertTrue("'" + boolean88 + "' != '" + true + "'", boolean88 == true);
        org.junit.Assert.assertTrue("'" + boolean90 + "' != '" + true + "'", boolean90 == true);
        org.junit.Assert.assertTrue("'" + boolean92 + "' != '" + true + "'", boolean92 == true);
        org.junit.Assert.assertTrue("'" + boolean94 + "' != '" + true + "'", boolean94 == true);
        org.junit.Assert.assertNotNull(strStream96);
        org.junit.Assert.assertNull(wildcardComparator97);
    }

    @Test
    public void test13656() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest27.test13656");
        java.lang.String[] strArray5 = new java.lang.String[] { "http://org/apache/rat/meta-data#LicenseFamilyCategory", "Datum [ name ='http://org/apache/rat/meta-data#LicenseFamilyCategory',value ='GPL1  ']", "MANIFEST.MF", "AllBuilder:", "The MIT License" };
        org.apache.rat.utils.ReportingSet<java.lang.String> strSet6 = new org.apache.rat.utils.ReportingSet<java.lang.String>();
        boolean boolean7 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strSet6, strArray5);
        boolean boolean9 = strSet6.addIfNotPresent("http://org/apache/rat/meta-data#LicenseFamilyName");
        java.util.Iterator<java.lang.String> strItor10 = strSet6.iterator();
        java.lang.Object[] objArray11 = strSet6.toArray();
        org.apache.rat.utils.ReportingSet<java.lang.String> strSet13 = strSet6.tailSet("659c96ab-5c6e-4067-997a-fa311a81a261");
        java.util.stream.Stream<java.lang.String> strStream14 = strSet6.stream();
        boolean boolean15 = strSet6.isEmpty();
        org.junit.Assert.assertNotNull(strArray5);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + true + "'", boolean7 == true);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + true + "'", boolean9 == true);
        org.junit.Assert.assertNotNull(strItor10);
        org.junit.Assert.assertNotNull(objArray11);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray11), "[AllBuilder:, Datum [ name ='http://org/apache/rat/meta-data#LicenseFamilyCategory',value ='GPL1  '], MANIFEST.MF, The MIT License, http://org/apache/rat/meta-data#LicenseFamilyCategory, http://org/apache/rat/meta-data#LicenseFamilyName]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray11), "[AllBuilder:, Datum [ name ='http://org/apache/rat/meta-data#LicenseFamilyCategory',value ='GPL1  '], MANIFEST.MF, The MIT License, http://org/apache/rat/meta-data#LicenseFamilyCategory, http://org/apache/rat/meta-data#LicenseFamilyName]");
        org.junit.Assert.assertNotNull(strSet13);
        org.junit.Assert.assertNotNull(strStream14);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + false + "'", boolean15 == false);
    }

    @Test
    public void test13657() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest27.test13657");
        org.apache.rat.configuration.builders.SpdxBuilder spdxBuilder0 = org.apache.rat.analysis.IHeaderMatcher.Builder.spdx();
        java.lang.String str1 = spdxBuilder0.toString();
        org.apache.rat.configuration.builders.SpdxBuilder spdxBuilder3 = spdxBuilder0.setName("ef7a8b13-64c3-4510-bb0c-dbf208e1e73f");
        org.apache.rat.analysis.IHeaderMatcher iHeaderMatcher4 = spdxBuilder0.build();
        org.apache.rat.configuration.builders.SpdxBuilder spdxBuilder6 = spdxBuilder0.setName("641dafc1-13c3-45d4-8272-f36f10392c53");
        org.apache.rat.analysis.IHeaderMatcher iHeaderMatcher7 = spdxBuilder6.build();
        org.apache.rat.configuration.builders.SpdxBuilder spdxBuilder9 = spdxBuilder6.setName("a1abad46-6a98-44f8-aa20-7839919a8270");
        org.apache.rat.configuration.builders.SpdxBuilder spdxBuilder11 = spdxBuilder9.setName("03F7B314-6887-4617-9C7E-BF1600B331CD");
        java.lang.String str12 = spdxBuilder11.toString();
        java.lang.String str13 = spdxBuilder11.toString();
        org.apache.rat.configuration.builders.SpdxBuilder spdxBuilder15 = spdxBuilder11.setName("NotBuilder: MathcerRefBuilder: null");
        org.apache.rat.analysis.IHeaderMatcher iHeaderMatcher16 = spdxBuilder11.build();
        org.junit.Assert.assertNotNull(spdxBuilder0);
        org.junit.Assert.assertEquals("'" + str1 + "' != '" + "SpdxBuilder: null" + "'", str1, "SpdxBuilder: null");
        org.junit.Assert.assertNotNull(spdxBuilder3);
        org.junit.Assert.assertNotNull(iHeaderMatcher4);
        org.junit.Assert.assertNotNull(spdxBuilder6);
        org.junit.Assert.assertNotNull(iHeaderMatcher7);
        org.junit.Assert.assertNotNull(spdxBuilder9);
        org.junit.Assert.assertNotNull(spdxBuilder11);
        org.junit.Assert.assertEquals("'" + str12 + "' != '" + "SpdxBuilder: 03F7B314-6887-4617-9C7E-BF1600B331CD" + "'", str12, "SpdxBuilder: 03F7B314-6887-4617-9C7E-BF1600B331CD");
        org.junit.Assert.assertEquals("'" + str13 + "' != '" + "SpdxBuilder: 03F7B314-6887-4617-9C7E-BF1600B331CD" + "'", str13, "SpdxBuilder: 03F7B314-6887-4617-9C7E-BF1600B331CD");
        org.junit.Assert.assertNotNull(spdxBuilder15);
        org.junit.Assert.assertNotNull(iHeaderMatcher16);
    }

    @Test
    public void test13658() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest27.test13658");
        org.apache.rat.license.ILicense.Builder builder0 = org.apache.rat.license.ILicense.builder();
        org.apache.rat.license.ILicense.Builder builder2 = builder0.setLicenseFamilyCategory("");
        org.apache.rat.analysis.matchers.FullTextMatcher fullTextMatcher4 = new org.apache.rat.analysis.matchers.FullTextMatcher("ef7a8b13-64c3-4510-bb0c-dbf208e1e73f");
        org.apache.rat.license.ILicense.Builder builder5 = builder0.setMatcher((org.apache.rat.analysis.IHeaderMatcher) fullTextMatcher4);
        org.apache.rat.license.ILicense.Builder builder7 = builder0.setDerivedFrom("http://org/apache/rat/meta-data#HeaderSample");
        org.apache.rat.configuration.builders.MatcherRefBuilder matcherRefBuilder8 = org.apache.rat.analysis.IHeaderMatcher.Builder.matcherRef();
        boolean boolean9 = matcherRefBuilder8.hasId();
        java.lang.String str10 = matcherRefBuilder8.toString();
        java.util.Map<java.lang.String, org.apache.rat.analysis.IHeaderMatcher> strMap11 = null;
        org.apache.rat.configuration.builders.MatcherRefBuilder matcherRefBuilder12 = matcherRefBuilder8.setMatchers(strMap11);
        org.apache.rat.configuration.builders.MatcherRefBuilder matcherRefBuilder14 = matcherRefBuilder8.setRefId("RegexBuilder: null");
        org.apache.rat.license.ILicense.Builder builder15 = builder0.setMatcher((org.apache.rat.analysis.IHeaderMatcher.Builder) matcherRefBuilder8);
        org.apache.rat.license.ILicense.Builder builder17 = builder0.setName("1179c4df-a201-41fe-a117-cdd63136e455");
        org.apache.rat.configuration.Format format18 = org.apache.rat.configuration.Format.XML;
        org.apache.rat.configuration.LicenseReader licenseReader19 = format18.licenseReader();
        java.util.SortedSet<org.apache.rat.license.ILicense> iLicenseSet20 = licenseReader19.readLicenses();
        java.lang.String[] strArray26 = new java.lang.String[] { "http://org/apache/rat/meta-data#LicenseFamilyCategory", "Datum [ name ='http://org/apache/rat/meta-data#LicenseFamilyCategory',value ='GPL1  ']", "MANIFEST.MF", "AllBuilder:", "The MIT License" };
        org.apache.rat.utils.ReportingSet<java.lang.String> strSet27 = new org.apache.rat.utils.ReportingSet<java.lang.String>();
        boolean boolean28 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strSet27, strArray26);
        boolean boolean30 = strSet27.addIfNotPresent("http://org/apache/rat/meta-data#LicenseFamilyName");
        boolean boolean32 = strSet27.addIfNotPresent("ef7a8b13-64c3-4510-bb0c-dbf208e1e73f");
        java.util.function.Function<java.lang.String, java.lang.String> strFunction33 = null;
        org.apache.rat.utils.ReportingSet<java.lang.String> strSet34 = strSet27.setMsgFormat(strFunction33);
        boolean boolean35 = strSet27.isEmpty();
        org.apache.rat.license.LicenseSetFactory licenseSetFactory36 = new org.apache.rat.license.LicenseSetFactory(iLicenseSet20, (java.util.Collection<java.lang.String>) strSet27);
        org.apache.rat.api.MetaData.Datum datum37 = org.apache.rat.api.MetaData.RAT_LICENSE_FAMILY_NAME_DATUM_GPL_VERSION_1;
        java.lang.String str38 = datum37.toString();
        boolean boolean39 = strSet27.equals((java.lang.Object) datum37);
        boolean boolean41 = strSet27.addIfNotPresent("46eea23e-d320-45bc-aa7f-844d2e1597ce");
        org.apache.rat.utils.ReportingSet<java.lang.String> strSet43 = strSet27.headSet("notice");
        org.apache.rat.configuration.Format format44 = org.apache.rat.configuration.Format.XML;
        org.apache.rat.configuration.LicenseReader licenseReader45 = format44.licenseReader();
        org.apache.rat.configuration.LicenseReader licenseReader46 = format44.licenseReader();
        java.util.SortedSet<org.apache.rat.license.ILicenseFamily> iLicenseFamilySet47 = licenseReader46.readFamilies();
        boolean boolean48 = strSet27.containsAll((java.util.Collection<org.apache.rat.license.ILicenseFamily>) iLicenseFamilySet47);
        // The following exception was thrown during execution in test generation
        try {
            org.apache.rat.license.ILicense iLicense49 = builder0.build(iLicenseFamilySet47);
            org.junit.Assert.fail("Expected exception of type org.apache.rat.ConfigurationException; message: LicenseFamily Category must be specified");
        } catch (org.apache.rat.ConfigurationException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(builder0);
        org.junit.Assert.assertNotNull(builder2);
        org.junit.Assert.assertNotNull(builder5);
        org.junit.Assert.assertNotNull(builder7);
        org.junit.Assert.assertNotNull(matcherRefBuilder8);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "MathcerRefBuilder: null" + "'", str10, "MathcerRefBuilder: null");
        org.junit.Assert.assertNotNull(matcherRefBuilder12);
        org.junit.Assert.assertNotNull(matcherRefBuilder14);
        org.junit.Assert.assertNotNull(builder15);
        org.junit.Assert.assertNotNull(builder17);
        org.junit.Assert.assertTrue("'" + format18 + "' != '" + org.apache.rat.configuration.Format.XML + "'", format18.equals(org.apache.rat.configuration.Format.XML));
        org.junit.Assert.assertNotNull(licenseReader19);
        org.junit.Assert.assertNotNull(iLicenseSet20);
        org.junit.Assert.assertNotNull(strArray26);
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + true + "'", boolean28 == true);
        org.junit.Assert.assertTrue("'" + boolean30 + "' != '" + true + "'", boolean30 == true);
        org.junit.Assert.assertTrue("'" + boolean32 + "' != '" + true + "'", boolean32 == true);
        org.junit.Assert.assertNotNull(strSet34);
        org.junit.Assert.assertTrue("'" + boolean35 + "' != '" + false + "'", boolean35 == false);
        org.junit.Assert.assertNotNull(datum37);
        org.junit.Assert.assertEquals("'" + str38 + "' != '" + "Datum [ name ='http://org/apache/rat/meta-data#LicenseFamilyName',value ='GNU General Public License, version 1 ']" + "'", str38, "Datum [ name ='http://org/apache/rat/meta-data#LicenseFamilyName',value ='GNU General Public License, version 1 ']");
        org.junit.Assert.assertTrue("'" + boolean39 + "' != '" + false + "'", boolean39 == false);
        org.junit.Assert.assertTrue("'" + boolean41 + "' != '" + true + "'", boolean41 == true);
        org.junit.Assert.assertNotNull(strSet43);
        org.junit.Assert.assertTrue("'" + format44 + "' != '" + org.apache.rat.configuration.Format.XML + "'", format44.equals(org.apache.rat.configuration.Format.XML));
        org.junit.Assert.assertNotNull(licenseReader45);
        org.junit.Assert.assertNotNull(licenseReader46);
        org.junit.Assert.assertNotNull(iLicenseFamilySet47);
        org.junit.Assert.assertTrue("'" + boolean48 + "' != '" + true + "'", boolean48 == true);
    }

    @Test
    public void test13659() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest27.test13659");
        org.apache.rat.utils.Log log0 = null;
        org.apache.rat.ReportConfiguration reportConfiguration1 = new org.apache.rat.ReportConfiguration(log0);
        java.lang.String[] strArray45 = new java.lang.String[] { "http://org/apache/rat/meta-data", "GNU General Public License, version 2", "Modified BSD License", "COMMON DEVELOPMENT AND DISTRIBUTION LICENSE Version 1.0", "The MIT License", "OASIS", "?????", "Datum [ name ='http://org/apache/rat/meta-data#LicenseFamilyCategory',value ='OASIS ']", "6486879f-fc81-4b57-aec7-c4c77d540c30", "MANIFEST.MF", "?????", "GEN  ", "GPL3 ", "http://org/apache/rat/meta-data#HeaderCategory", "DOJO ", "true", "GPL2 ", "?????", "Apache License Version 2.0", "OASIS", "W3CD ", "OASIS", "?????", "OASIS Open License", "", "standard", "GPL2 ", "GEN  ", "W3CD ", "TMF  ", ".cvsignore", "Copyright Builder: s:null e:null o:null", "ef7a8b13-64c3-4510-bb0c-dbf208e1e73f", "274c6a15-09f6-4bfd-ac53-1827770eb507", "GNU General Public License, version 2", "W3CD ", ".cvsignore", "Apache License Version 2.0", "GEN  ", "W3C Software Copyright", "Modified BSD License", "GPL2 ", "JAVA" };
        java.util.ArrayList<java.lang.String> strList46 = new java.util.ArrayList<java.lang.String>();
        boolean boolean47 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strList46, strArray45);
        reportConfiguration1.removeApprovedLicenseCategories((java.util.Collection<java.lang.String>) strList46);
        org.apache.rat.utils.Log log49 = null;
        org.apache.rat.ReportConfiguration reportConfiguration50 = new org.apache.rat.ReportConfiguration(log49);
        org.apache.commons.io.function.IOSupplier<java.io.OutputStream> outputStreamIOSupplier51 = reportConfiguration50.getOutput();
        reportConfiguration1.setOut(outputStreamIOSupplier51);
        reportConfiguration1.removeApprovedLicenseCategory("");
        org.apache.rat.utils.Log log55 = null;
        org.apache.rat.ReportConfiguration reportConfiguration56 = new org.apache.rat.ReportConfiguration(log55);
        java.io.FilenameFilter filenameFilter57 = reportConfiguration56.getInputFileFilter();
        org.apache.rat.utils.Log log58 = reportConfiguration56.getLog();
        reportConfiguration56.setCopyrightMessage("GNU General Public License, version 1");
        org.apache.rat.report.IReportable iReportable61 = reportConfiguration56.getReportable();
        org.apache.commons.io.filefilter.IOFileFilter iOFileFilter62 = reportConfiguration56.getDirectoryFilter();
        reportConfiguration1.addDirectoryFilter(iOFileFilter62);
        reportConfiguration1.setStyleReport(false);
        org.junit.Assert.assertNotNull(strArray45);
        org.junit.Assert.assertTrue("'" + boolean47 + "' != '" + true + "'", boolean47 == true);
        org.junit.Assert.assertNotNull(outputStreamIOSupplier51);
        org.junit.Assert.assertNull(filenameFilter57);
        org.junit.Assert.assertNull(log58);
        org.junit.Assert.assertNull(iReportable61);
        org.junit.Assert.assertNotNull(iOFileFilter62);
    }

    @Test
    public void test13660() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest27.test13660");
        java.lang.String[] strArray5 = new java.lang.String[] { "http://org/apache/rat/meta-data#LicenseFamilyCategory", "Datum [ name ='http://org/apache/rat/meta-data#LicenseFamilyCategory',value ='GPL1  ']", "MANIFEST.MF", "AllBuilder:", "The MIT License" };
        org.apache.rat.utils.ReportingSet<java.lang.String> strSet6 = new org.apache.rat.utils.ReportingSet<java.lang.String>();
        boolean boolean7 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strSet6, strArray5);
        boolean boolean9 = strSet6.addIfNotPresent("http://org/apache/rat/meta-data#LicenseFamilyName");
        boolean boolean11 = strSet6.addIfNotPresent("ef7a8b13-64c3-4510-bb0c-dbf208e1e73f");
        java.util.function.Function<java.lang.String, java.lang.String> strFunction12 = null;
        org.apache.rat.utils.ReportingSet<java.lang.String> strSet13 = strSet6.setMsgFormat(strFunction12);
        org.apache.rat.utils.DefaultLog defaultLog14 = org.apache.rat.utils.DefaultLog.INSTANCE;
        org.apache.rat.utils.Log log15 = null;
        org.apache.rat.ReportConfiguration reportConfiguration16 = new org.apache.rat.ReportConfiguration(log15);
        java.io.FilenameFilter filenameFilter17 = reportConfiguration16.getInputFileFilter();
        org.apache.rat.license.LicenseSetFactory.LicenseFilter licenseFilter18 = org.apache.rat.license.LicenseSetFactory.LicenseFilter.all;
        java.util.SortedSet<org.apache.rat.license.ILicense> iLicenseSet19 = reportConfiguration16.getLicenses(licenseFilter18);
        org.apache.rat.config.AddLicenseHeaders addLicenseHeaders20 = org.apache.rat.config.AddLicenseHeaders.FALSE;
        reportConfiguration16.setAddLicenseHeaders(addLicenseHeaders20);
        org.apache.rat.utils.Log log22 = null;
        org.apache.rat.ReportConfiguration reportConfiguration23 = new org.apache.rat.ReportConfiguration(log22);
        org.apache.rat.report.claim.ClaimStatistic claimStatistic24 = org.apache.rat.Reporter.report(reportConfiguration23);
        org.apache.rat.license.LicenseSetFactory.LicenseFilter licenseFilter25 = org.apache.rat.license.LicenseSetFactory.LicenseFilter.all;
        org.apache.rat.Reporter.listLicenses(reportConfiguration23, licenseFilter25);
        org.apache.rat.Reporter.listLicenses(reportConfiguration16, licenseFilter25);
        org.apache.rat.utils.Log log28 = null;
        org.apache.rat.ReportConfiguration reportConfiguration29 = new org.apache.rat.ReportConfiguration(log28);
        java.io.FilenameFilter filenameFilter30 = reportConfiguration29.getInputFileFilter();
        org.apache.rat.license.LicenseSetFactory.LicenseFilter licenseFilter31 = org.apache.rat.license.LicenseSetFactory.LicenseFilter.all;
        java.util.SortedSet<org.apache.rat.license.ILicense> iLicenseSet32 = reportConfiguration29.getLicenses(licenseFilter31);
        org.apache.rat.config.AddLicenseHeaders addLicenseHeaders33 = org.apache.rat.config.AddLicenseHeaders.FALSE;
        reportConfiguration29.setAddLicenseHeaders(addLicenseHeaders33);
        org.apache.rat.utils.Log log35 = null;
        org.apache.rat.ReportConfiguration reportConfiguration36 = new org.apache.rat.ReportConfiguration(log35);
        org.apache.rat.report.claim.ClaimStatistic claimStatistic37 = org.apache.rat.Reporter.report(reportConfiguration36);
        org.apache.rat.license.LicenseSetFactory.LicenseFilter licenseFilter38 = org.apache.rat.license.LicenseSetFactory.LicenseFilter.all;
        org.apache.rat.Reporter.listLicenses(reportConfiguration36, licenseFilter38);
        org.apache.rat.Reporter.listLicenses(reportConfiguration29, licenseFilter38);
        org.apache.rat.Reporter.listLicenses(reportConfiguration16, licenseFilter38);
        org.apache.rat.utils.Log log42 = null;
        org.apache.rat.ReportConfiguration reportConfiguration43 = new org.apache.rat.ReportConfiguration(log42);
        org.apache.commons.io.function.IOSupplier<java.io.OutputStream> outputStreamIOSupplier44 = reportConfiguration43.getOutput();
        reportConfiguration16.setOut(outputStreamIOSupplier44);
        org.apache.rat.utils.Log log46 = null;
        org.apache.rat.ReportConfiguration reportConfiguration47 = new org.apache.rat.ReportConfiguration(log46);
        org.apache.rat.report.claim.ClaimStatistic claimStatistic48 = org.apache.rat.Reporter.report(reportConfiguration47);
        org.apache.rat.utils.Log log49 = null;
        org.apache.rat.ReportConfiguration reportConfiguration50 = new org.apache.rat.ReportConfiguration(log49);
        org.apache.rat.report.claim.ClaimStatistic claimStatistic51 = org.apache.rat.Reporter.report(reportConfiguration50);
        org.apache.rat.utils.ReportingSet.Options options52 = org.apache.rat.utils.ReportingSet.Options.OVERWRITE;
        reportConfiguration50.licenseDuplicateOption(options52);
        reportConfiguration47.familyDuplicateOption(options52);
        reportConfiguration16.licenseDuplicateOption(options52);
        reportConfiguration16.addApprovedLicenseCategory("W3C Document Copyright");
        org.apache.rat.utils.Log log58 = null;
        org.apache.rat.ReportConfiguration reportConfiguration59 = new org.apache.rat.ReportConfiguration(log58);
        reportConfiguration59.addApprovedLicenseCategory(".cvsignore");
        org.apache.rat.utils.Log.Level level62 = org.apache.rat.utils.Log.Level.ERROR;
        reportConfiguration59.logLicenseCollisions(level62);
        reportConfiguration16.logLicenseCollisions(level62);
        defaultLog14.setLevel(level62);
        defaultLog14.warn((java.lang.Object) "GNU General Public License, version 3");
        org.apache.rat.ReportConfiguration reportConfiguration68 = new org.apache.rat.ReportConfiguration((org.apache.rat.utils.Log) defaultLog14);
        org.apache.rat.utils.DefaultLog defaultLog69 = org.apache.rat.utils.DefaultLog.INSTANCE;
        org.apache.rat.utils.Log log70 = null;
        org.apache.rat.ReportConfiguration reportConfiguration71 = new org.apache.rat.ReportConfiguration(log70);
        reportConfiguration71.addApprovedLicenseCategory(".cvsignore");
        org.apache.rat.utils.Log.Level level74 = org.apache.rat.utils.Log.Level.ERROR;
        reportConfiguration71.logFamilyCollisions(level74);
        defaultLog69.setLevel(level74);
        defaultLog14.debug((java.lang.Object) level74);
        org.apache.rat.utils.ReportingSet<java.lang.String> strSet78 = strSet13.setLogLevel(level74);
        int int79 = strSet13.size();
        java.util.SortedSet<org.apache.rat.license.ILicenseFamily> iLicenseFamilySet81 = org.apache.rat.license.LicenseFamilySetFactory.emptyLicenseFamilySet();
        org.apache.rat.policy.DefaultPolicy defaultPolicy82 = new org.apache.rat.policy.DefaultPolicy((java.util.Collection<org.apache.rat.license.ILicenseFamily>) iLicenseFamilySet81);
        org.apache.rat.license.ILicenseFamily iLicenseFamily83 = org.apache.rat.license.LicenseFamilySetFactory.search("MANIFEST.MF", iLicenseFamilySet81);
        boolean boolean84 = strSet13.retainAll((java.util.Collection<org.apache.rat.license.ILicenseFamily>) iLicenseFamilySet81);
        boolean boolean86 = strSet13.addIfNotPresent("4fcae176-e574-46ed-b9e4-dea2e2f3b458");
        org.apache.rat.report.claim.ClaimStatistic claimStatistic87 = new org.apache.rat.report.claim.ClaimStatistic();
        claimStatistic87.setNumApproved((int) (short) 10);
        java.util.Map<java.lang.String, java.lang.Integer> strMap90 = null;
        claimStatistic87.setDocumentCategoryMap(strMap90);
        java.util.Map<java.lang.String, java.lang.Integer> strMap92 = claimStatistic87.getLicenseFileNameMap();
        claimStatistic87.setNumUnknown((int) (byte) -1);
        claimStatistic87.setNumApproved((int) (short) 1);
        int int97 = claimStatistic87.getNumUnknown();
        // The following exception was thrown during execution in test generation
        try {
            boolean boolean98 = strSet13.remove((java.lang.Object) claimStatistic87);
            org.junit.Assert.fail("Expected exception of type java.lang.ClassCastException; message: null");
        } catch (java.lang.ClassCastException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(strArray5);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + true + "'", boolean7 == true);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + true + "'", boolean9 == true);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + true + "'", boolean11 == true);
        org.junit.Assert.assertNotNull(strSet13);
        org.junit.Assert.assertNotNull(defaultLog14);
        org.junit.Assert.assertNull(filenameFilter17);
        org.junit.Assert.assertTrue("'" + licenseFilter18 + "' != '" + org.apache.rat.license.LicenseSetFactory.LicenseFilter.all + "'", licenseFilter18.equals(org.apache.rat.license.LicenseSetFactory.LicenseFilter.all));
        org.junit.Assert.assertNotNull(iLicenseSet19);
        org.junit.Assert.assertTrue("'" + addLicenseHeaders20 + "' != '" + org.apache.rat.config.AddLicenseHeaders.FALSE + "'", addLicenseHeaders20.equals(org.apache.rat.config.AddLicenseHeaders.FALSE));
        org.junit.Assert.assertNull(claimStatistic24);
        org.junit.Assert.assertTrue("'" + licenseFilter25 + "' != '" + org.apache.rat.license.LicenseSetFactory.LicenseFilter.all + "'", licenseFilter25.equals(org.apache.rat.license.LicenseSetFactory.LicenseFilter.all));
        org.junit.Assert.assertNull(filenameFilter30);
        org.junit.Assert.assertTrue("'" + licenseFilter31 + "' != '" + org.apache.rat.license.LicenseSetFactory.LicenseFilter.all + "'", licenseFilter31.equals(org.apache.rat.license.LicenseSetFactory.LicenseFilter.all));
        org.junit.Assert.assertNotNull(iLicenseSet32);
        org.junit.Assert.assertTrue("'" + addLicenseHeaders33 + "' != '" + org.apache.rat.config.AddLicenseHeaders.FALSE + "'", addLicenseHeaders33.equals(org.apache.rat.config.AddLicenseHeaders.FALSE));
        org.junit.Assert.assertNull(claimStatistic37);
        org.junit.Assert.assertTrue("'" + licenseFilter38 + "' != '" + org.apache.rat.license.LicenseSetFactory.LicenseFilter.all + "'", licenseFilter38.equals(org.apache.rat.license.LicenseSetFactory.LicenseFilter.all));
        org.junit.Assert.assertNotNull(outputStreamIOSupplier44);
        org.junit.Assert.assertNull(claimStatistic48);
        org.junit.Assert.assertNull(claimStatistic51);
        org.junit.Assert.assertTrue("'" + options52 + "' != '" + org.apache.rat.utils.ReportingSet.Options.OVERWRITE + "'", options52.equals(org.apache.rat.utils.ReportingSet.Options.OVERWRITE));
        org.junit.Assert.assertTrue("'" + level62 + "' != '" + org.apache.rat.utils.Log.Level.ERROR + "'", level62.equals(org.apache.rat.utils.Log.Level.ERROR));
        org.junit.Assert.assertNotNull(defaultLog69);
        org.junit.Assert.assertTrue("'" + level74 + "' != '" + org.apache.rat.utils.Log.Level.ERROR + "'", level74.equals(org.apache.rat.utils.Log.Level.ERROR));
        org.junit.Assert.assertNotNull(strSet78);
        org.junit.Assert.assertTrue("'" + int79 + "' != '" + 7 + "'", int79 == 7);
        org.junit.Assert.assertNotNull(iLicenseFamilySet81);
        org.junit.Assert.assertNull(iLicenseFamily83);
        org.junit.Assert.assertTrue("'" + boolean84 + "' != '" + true + "'", boolean84 == true);
        org.junit.Assert.assertTrue("'" + boolean86 + "' != '" + true + "'", boolean86 == true);
        org.junit.Assert.assertNull(strMap92);
        org.junit.Assert.assertTrue("'" + int97 + "' != '" + (-1) + "'", int97 == (-1));
    }

    @Test
    public void test13661() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest27.test13661");
        java.lang.String str1 = org.apache.rat.document.impl.guesser.GuessUtils.normalise("90663eff-7ed8-41bd-85a8-e8f189198bc6");
        org.junit.Assert.assertEquals("'" + str1 + "' != '" + "90663EFF-7ED8-41BD-85A8-E8F189198BC6" + "'", str1, "90663EFF-7ED8-41BD-85A8-E8F189198BC6");
    }

    @Test
    public void test13662() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest27.test13662");
        org.apache.rat.utils.Log log0 = null;
        org.apache.rat.ReportConfiguration reportConfiguration1 = new org.apache.rat.ReportConfiguration(log0);
        java.io.FilenameFilter filenameFilter2 = reportConfiguration1.getInputFileFilter();
        org.apache.rat.license.LicenseSetFactory.LicenseFilter licenseFilter3 = org.apache.rat.license.LicenseSetFactory.LicenseFilter.all;
        java.util.SortedSet<org.apache.rat.license.ILicense> iLicenseSet4 = reportConfiguration1.getLicenses(licenseFilter3);
        org.apache.rat.config.AddLicenseHeaders addLicenseHeaders5 = org.apache.rat.config.AddLicenseHeaders.FALSE;
        reportConfiguration1.setAddLicenseHeaders(addLicenseHeaders5);
        org.apache.rat.utils.Log log7 = null;
        org.apache.rat.ReportConfiguration reportConfiguration8 = new org.apache.rat.ReportConfiguration(log7);
        org.apache.rat.report.claim.ClaimStatistic claimStatistic9 = org.apache.rat.Reporter.report(reportConfiguration8);
        org.apache.rat.license.LicenseSetFactory.LicenseFilter licenseFilter10 = org.apache.rat.license.LicenseSetFactory.LicenseFilter.all;
        org.apache.rat.Reporter.listLicenses(reportConfiguration8, licenseFilter10);
        org.apache.rat.Reporter.listLicenses(reportConfiguration1, licenseFilter10);
        org.apache.rat.utils.Log log13 = null;
        org.apache.rat.ReportConfiguration reportConfiguration14 = new org.apache.rat.ReportConfiguration(log13);
        java.io.FilenameFilter filenameFilter15 = reportConfiguration14.getInputFileFilter();
        org.apache.rat.license.LicenseSetFactory.LicenseFilter licenseFilter16 = org.apache.rat.license.LicenseSetFactory.LicenseFilter.all;
        java.util.SortedSet<org.apache.rat.license.ILicense> iLicenseSet17 = reportConfiguration14.getLicenses(licenseFilter16);
        org.apache.rat.config.AddLicenseHeaders addLicenseHeaders18 = org.apache.rat.config.AddLicenseHeaders.FALSE;
        reportConfiguration14.setAddLicenseHeaders(addLicenseHeaders18);
        org.apache.rat.utils.Log log20 = null;
        org.apache.rat.ReportConfiguration reportConfiguration21 = new org.apache.rat.ReportConfiguration(log20);
        org.apache.rat.report.claim.ClaimStatistic claimStatistic22 = org.apache.rat.Reporter.report(reportConfiguration21);
        org.apache.rat.license.LicenseSetFactory.LicenseFilter licenseFilter23 = org.apache.rat.license.LicenseSetFactory.LicenseFilter.all;
        org.apache.rat.Reporter.listLicenses(reportConfiguration21, licenseFilter23);
        org.apache.rat.Reporter.listLicenses(reportConfiguration14, licenseFilter23);
        org.apache.rat.Reporter.listLicenses(reportConfiguration1, licenseFilter23);
        java.io.FilenameFilter filenameFilter27 = reportConfiguration1.getInputFileFilter();
        reportConfiguration1.setStyleReport(false);
        org.apache.rat.report.IReportable iReportable30 = null;
        reportConfiguration1.setReportable(iReportable30);
        org.apache.rat.Defaults.Builder builder33 = org.apache.rat.Defaults.builder();
        org.apache.rat.Defaults defaults34 = builder33.build();
        org.apache.rat.utils.Log log35 = null;
        org.apache.rat.ReportConfiguration reportConfiguration36 = new org.apache.rat.ReportConfiguration(log35);
        java.io.FilenameFilter filenameFilter37 = reportConfiguration36.getInputFileFilter();
        org.apache.rat.license.LicenseSetFactory.LicenseFilter licenseFilter38 = org.apache.rat.license.LicenseSetFactory.LicenseFilter.all;
        java.util.SortedSet<org.apache.rat.license.ILicense> iLicenseSet39 = reportConfiguration36.getLicenses(licenseFilter38);
        org.apache.rat.config.AddLicenseHeaders addLicenseHeaders40 = org.apache.rat.config.AddLicenseHeaders.FALSE;
        reportConfiguration36.setAddLicenseHeaders(addLicenseHeaders40);
        org.apache.rat.utils.Log log42 = null;
        org.apache.rat.ReportConfiguration reportConfiguration43 = new org.apache.rat.ReportConfiguration(log42);
        org.apache.rat.report.claim.ClaimStatistic claimStatistic44 = org.apache.rat.Reporter.report(reportConfiguration43);
        org.apache.rat.license.LicenseSetFactory.LicenseFilter licenseFilter45 = org.apache.rat.license.LicenseSetFactory.LicenseFilter.all;
        org.apache.rat.Reporter.listLicenses(reportConfiguration43, licenseFilter45);
        org.apache.rat.Reporter.listLicenses(reportConfiguration36, licenseFilter45);
        org.apache.rat.utils.Log log48 = null;
        org.apache.rat.ReportConfiguration reportConfiguration49 = new org.apache.rat.ReportConfiguration(log48);
        java.io.FilenameFilter filenameFilter50 = reportConfiguration49.getInputFileFilter();
        org.apache.rat.license.LicenseSetFactory.LicenseFilter licenseFilter51 = org.apache.rat.license.LicenseSetFactory.LicenseFilter.all;
        java.util.SortedSet<org.apache.rat.license.ILicense> iLicenseSet52 = reportConfiguration49.getLicenses(licenseFilter51);
        org.apache.rat.config.AddLicenseHeaders addLicenseHeaders53 = org.apache.rat.config.AddLicenseHeaders.FALSE;
        reportConfiguration49.setAddLicenseHeaders(addLicenseHeaders53);
        org.apache.rat.utils.Log log55 = null;
        org.apache.rat.ReportConfiguration reportConfiguration56 = new org.apache.rat.ReportConfiguration(log55);
        org.apache.rat.report.claim.ClaimStatistic claimStatistic57 = org.apache.rat.Reporter.report(reportConfiguration56);
        org.apache.rat.license.LicenseSetFactory.LicenseFilter licenseFilter58 = org.apache.rat.license.LicenseSetFactory.LicenseFilter.all;
        org.apache.rat.Reporter.listLicenses(reportConfiguration56, licenseFilter58);
        org.apache.rat.Reporter.listLicenses(reportConfiguration49, licenseFilter58);
        java.util.SortedSet<org.apache.rat.license.ILicenseFamily> iLicenseFamilySet61 = reportConfiguration36.getLicenseFamilies(licenseFilter58);
        java.util.SortedSet<org.apache.rat.license.ILicense> iLicenseSet62 = defaults34.getLicenses(licenseFilter58);
        org.apache.rat.utils.ReportingSet<org.apache.rat.license.ILicense> iLicenseSet63 = new org.apache.rat.utils.ReportingSet<org.apache.rat.license.ILicense>(iLicenseSet62);
        org.apache.rat.license.ILicense iLicense64 = org.apache.rat.license.LicenseSetFactory.search("TMF", iLicenseSet62);
        reportConfiguration1.addLicense(iLicense64);
        org.apache.rat.license.ILicense[] iLicenseArray67 = new org.apache.rat.license.ILicense[] {};
        java.util.TreeSet<org.apache.rat.license.ILicense> iLicenseSet68 = new java.util.TreeSet<org.apache.rat.license.ILicense>();
        boolean boolean69 = java.util.Collections.addAll((java.util.Collection<org.apache.rat.license.ILicense>) iLicenseSet68, iLicenseArray67);
        java.lang.String[] strArray82 = new java.lang.String[] { "GPL2 ", "GPL1 ", "notice", "http://org/apache/rat/meta-data#LicenseFamilyName", "notice", "GPL2 ", "http://org/apache/rat/meta-data#LicenseFamilyName", "", "GPL2 ", "", "GPL1 ", "hi!" };
        java.util.ArrayList<java.lang.String> strList83 = new java.util.ArrayList<java.lang.String>();
        boolean boolean84 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strList83, strArray82);
        org.apache.rat.license.LicenseSetFactory licenseSetFactory85 = new org.apache.rat.license.LicenseSetFactory((java.util.SortedSet<org.apache.rat.license.ILicense>) iLicenseSet68, (java.util.Collection<java.lang.String>) strList83);
        org.apache.rat.license.ILicense iLicense86 = org.apache.rat.license.LicenseSetFactory.search("GNU General Public License, version 1", (java.util.SortedSet<org.apache.rat.license.ILicense>) iLicenseSet68);
        org.apache.rat.utils.ReportingSet<org.apache.rat.license.ILicense> iLicenseSet87 = new org.apache.rat.utils.ReportingSet<org.apache.rat.license.ILicense>((java.util.SortedSet<org.apache.rat.license.ILicense>) iLicenseSet68);
        org.apache.rat.license.ILicense iLicense88 = org.apache.rat.license.LicenseSetFactory.search(iLicense64, (java.util.SortedSet<org.apache.rat.license.ILicense>) iLicenseSet87);
        // The following exception was thrown during execution in test generation
        try {
            java.lang.String str89 = iLicense88.getNotes();
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNull(filenameFilter2);
        org.junit.Assert.assertTrue("'" + licenseFilter3 + "' != '" + org.apache.rat.license.LicenseSetFactory.LicenseFilter.all + "'", licenseFilter3.equals(org.apache.rat.license.LicenseSetFactory.LicenseFilter.all));
        org.junit.Assert.assertNotNull(iLicenseSet4);
        org.junit.Assert.assertTrue("'" + addLicenseHeaders5 + "' != '" + org.apache.rat.config.AddLicenseHeaders.FALSE + "'", addLicenseHeaders5.equals(org.apache.rat.config.AddLicenseHeaders.FALSE));
        org.junit.Assert.assertNull(claimStatistic9);
        org.junit.Assert.assertTrue("'" + licenseFilter10 + "' != '" + org.apache.rat.license.LicenseSetFactory.LicenseFilter.all + "'", licenseFilter10.equals(org.apache.rat.license.LicenseSetFactory.LicenseFilter.all));
        org.junit.Assert.assertNull(filenameFilter15);
        org.junit.Assert.assertTrue("'" + licenseFilter16 + "' != '" + org.apache.rat.license.LicenseSetFactory.LicenseFilter.all + "'", licenseFilter16.equals(org.apache.rat.license.LicenseSetFactory.LicenseFilter.all));
        org.junit.Assert.assertNotNull(iLicenseSet17);
        org.junit.Assert.assertTrue("'" + addLicenseHeaders18 + "' != '" + org.apache.rat.config.AddLicenseHeaders.FALSE + "'", addLicenseHeaders18.equals(org.apache.rat.config.AddLicenseHeaders.FALSE));
        org.junit.Assert.assertNull(claimStatistic22);
        org.junit.Assert.assertTrue("'" + licenseFilter23 + "' != '" + org.apache.rat.license.LicenseSetFactory.LicenseFilter.all + "'", licenseFilter23.equals(org.apache.rat.license.LicenseSetFactory.LicenseFilter.all));
        org.junit.Assert.assertNull(filenameFilter27);
        org.junit.Assert.assertNotNull(builder33);
        org.junit.Assert.assertNotNull(defaults34);
        org.junit.Assert.assertNull(filenameFilter37);
        org.junit.Assert.assertTrue("'" + licenseFilter38 + "' != '" + org.apache.rat.license.LicenseSetFactory.LicenseFilter.all + "'", licenseFilter38.equals(org.apache.rat.license.LicenseSetFactory.LicenseFilter.all));
        org.junit.Assert.assertNotNull(iLicenseSet39);
        org.junit.Assert.assertTrue("'" + addLicenseHeaders40 + "' != '" + org.apache.rat.config.AddLicenseHeaders.FALSE + "'", addLicenseHeaders40.equals(org.apache.rat.config.AddLicenseHeaders.FALSE));
        org.junit.Assert.assertNull(claimStatistic44);
        org.junit.Assert.assertTrue("'" + licenseFilter45 + "' != '" + org.apache.rat.license.LicenseSetFactory.LicenseFilter.all + "'", licenseFilter45.equals(org.apache.rat.license.LicenseSetFactory.LicenseFilter.all));
        org.junit.Assert.assertNull(filenameFilter50);
        org.junit.Assert.assertTrue("'" + licenseFilter51 + "' != '" + org.apache.rat.license.LicenseSetFactory.LicenseFilter.all + "'", licenseFilter51.equals(org.apache.rat.license.LicenseSetFactory.LicenseFilter.all));
        org.junit.Assert.assertNotNull(iLicenseSet52);
        org.junit.Assert.assertTrue("'" + addLicenseHeaders53 + "' != '" + org.apache.rat.config.AddLicenseHeaders.FALSE + "'", addLicenseHeaders53.equals(org.apache.rat.config.AddLicenseHeaders.FALSE));
        org.junit.Assert.assertNull(claimStatistic57);
        org.junit.Assert.assertTrue("'" + licenseFilter58 + "' != '" + org.apache.rat.license.LicenseSetFactory.LicenseFilter.all + "'", licenseFilter58.equals(org.apache.rat.license.LicenseSetFactory.LicenseFilter.all));
        org.junit.Assert.assertNotNull(iLicenseFamilySet61);
        org.junit.Assert.assertNotNull(iLicenseSet62);
        org.junit.Assert.assertNotNull(iLicense64);
        org.junit.Assert.assertNotNull(iLicenseArray67);
        org.junit.Assert.assertTrue("'" + boolean69 + "' != '" + false + "'", boolean69 == false);
        org.junit.Assert.assertNotNull(strArray82);
        org.junit.Assert.assertTrue("'" + boolean84 + "' != '" + true + "'", boolean84 == true);
        org.junit.Assert.assertNull(iLicense86);
        org.junit.Assert.assertNull(iLicense88);
    }

    @Test
    public void test13663() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest27.test13663");
        org.apache.rat.utils.DefaultLog defaultLog0 = org.apache.rat.utils.DefaultLog.INSTANCE;
        org.apache.rat.configuration.builders.AllBuilder allBuilder1 = new org.apache.rat.configuration.builders.AllBuilder();
        org.apache.rat.configuration.builders.MatcherRefBuilder matcherRefBuilder2 = org.apache.rat.analysis.IHeaderMatcher.Builder.matcherRef();
        boolean boolean3 = matcherRefBuilder2.hasId();
        java.lang.String str4 = matcherRefBuilder2.toString();
        org.apache.rat.configuration.builders.AnyBuilder anyBuilder5 = org.apache.rat.analysis.IHeaderMatcher.Builder.any();
        org.apache.rat.configuration.builders.NotBuilder notBuilder6 = new org.apache.rat.configuration.builders.NotBuilder();
        java.lang.String str7 = notBuilder6.toString();
        org.apache.rat.configuration.builders.MatcherRefBuilder matcherRefBuilder8 = org.apache.rat.analysis.IHeaderMatcher.Builder.matcherRef();
        boolean boolean9 = matcherRefBuilder8.hasId();
        java.util.Map<java.lang.String, org.apache.rat.analysis.IHeaderMatcher> strMap10 = null;
        org.apache.rat.configuration.builders.MatcherRefBuilder matcherRefBuilder11 = matcherRefBuilder8.setMatchers(strMap10);
        org.apache.rat.configuration.builders.AllBuilder allBuilder12 = new org.apache.rat.configuration.builders.AllBuilder();
        org.apache.rat.configuration.builders.CopyrightBuilder copyrightBuilder13 = org.apache.rat.analysis.IHeaderMatcher.Builder.copyright();
        org.apache.rat.configuration.builders.CopyrightBuilder copyrightBuilder15 = copyrightBuilder13.setStart("OASIS");
        java.lang.String str16 = copyrightBuilder13.toString();
        org.apache.rat.configuration.builders.CopyrightBuilder copyrightBuilder18 = copyrightBuilder13.setStart("223f0aba-15d4-49e9-901e-5740c137aebf");
        org.apache.rat.configuration.builders.MatcherRefBuilder matcherRefBuilder19 = org.apache.rat.analysis.IHeaderMatcher.Builder.matcherRef();
        boolean boolean20 = matcherRefBuilder19.hasId();
        org.apache.rat.configuration.builders.CopyrightBuilder copyrightBuilder21 = org.apache.rat.analysis.IHeaderMatcher.Builder.copyright();
        org.apache.rat.configuration.builders.CopyrightBuilder copyrightBuilder23 = copyrightBuilder21.setStart("OASIS");
        java.lang.String str24 = copyrightBuilder21.toString();
        org.apache.rat.configuration.builders.CopyrightBuilder copyrightBuilder26 = copyrightBuilder21.setStart("223f0aba-15d4-49e9-901e-5740c137aebf");
        org.apache.rat.configuration.builders.CopyrightBuilder copyrightBuilder27 = org.apache.rat.analysis.IHeaderMatcher.Builder.copyright();
        org.apache.rat.configuration.builders.CopyrightBuilder copyrightBuilder28 = org.apache.rat.analysis.IHeaderMatcher.Builder.copyright();
        java.lang.String str29 = copyrightBuilder28.toString();
        org.apache.rat.configuration.builders.CopyrightBuilder copyrightBuilder31 = copyrightBuilder28.setEnd(".cvsignore");
        boolean boolean32 = copyrightBuilder28.hasId();
        org.apache.rat.configuration.builders.CopyrightBuilder copyrightBuilder33 = org.apache.rat.analysis.IHeaderMatcher.Builder.copyright();
        java.lang.String str34 = copyrightBuilder33.toString();
        org.apache.rat.configuration.builders.CopyrightBuilder copyrightBuilder36 = copyrightBuilder33.setEnd(".cvsignore");
        boolean boolean37 = copyrightBuilder33.hasId();
        java.lang.String str38 = copyrightBuilder33.toString();
        org.apache.rat.configuration.builders.CopyrightBuilder copyrightBuilder39 = org.apache.rat.analysis.IHeaderMatcher.Builder.copyright();
        org.apache.rat.configuration.builders.CopyrightBuilder copyrightBuilder41 = copyrightBuilder39.setStart("OASIS");
        org.apache.rat.configuration.builders.AnyBuilder anyBuilder42 = org.apache.rat.analysis.IHeaderMatcher.Builder.any();
        org.apache.rat.configuration.builders.MatcherRefBuilder matcherRefBuilder43 = org.apache.rat.analysis.IHeaderMatcher.Builder.matcherRef();
        boolean boolean44 = matcherRefBuilder43.hasId();
        java.util.Map<java.lang.String, org.apache.rat.analysis.IHeaderMatcher> strMap45 = null;
        org.apache.rat.configuration.builders.MatcherRefBuilder matcherRefBuilder46 = matcherRefBuilder43.setMatchers(strMap45);
        org.apache.rat.configuration.builders.CopyrightBuilder copyrightBuilder47 = org.apache.rat.analysis.IHeaderMatcher.Builder.copyright();
        org.apache.rat.configuration.builders.MatcherRefBuilder matcherRefBuilder48 = org.apache.rat.analysis.IHeaderMatcher.Builder.matcherRef();
        boolean boolean49 = matcherRefBuilder48.hasId();
        java.lang.String str50 = matcherRefBuilder48.toString();
        java.util.Map<java.lang.String, org.apache.rat.analysis.IHeaderMatcher> strMap51 = null;
        org.apache.rat.configuration.builders.MatcherRefBuilder matcherRefBuilder52 = matcherRefBuilder48.setMatchers(strMap51);
        org.apache.rat.analysis.IHeaderMatcher.Builder[] builderArray53 = new org.apache.rat.analysis.IHeaderMatcher.Builder[] { matcherRefBuilder8, allBuilder12, copyrightBuilder18, matcherRefBuilder19, copyrightBuilder21, copyrightBuilder27, copyrightBuilder28, copyrightBuilder33, copyrightBuilder39, anyBuilder42, matcherRefBuilder43, copyrightBuilder47, matcherRefBuilder48 };
        java.util.ArrayList<org.apache.rat.analysis.IHeaderMatcher.Builder> builderList54 = new java.util.ArrayList<org.apache.rat.analysis.IHeaderMatcher.Builder>();
        boolean boolean55 = java.util.Collections.addAll((java.util.Collection<org.apache.rat.analysis.IHeaderMatcher.Builder>) builderList54, builderArray53);
        org.apache.rat.configuration.builders.AbstractBuilder abstractBuilder56 = notBuilder6.add((java.util.Collection<org.apache.rat.analysis.IHeaderMatcher.Builder>) builderList54);
        org.apache.rat.configuration.builders.MatcherRefBuilder matcherRefBuilder57 = new org.apache.rat.configuration.builders.MatcherRefBuilder();
        org.apache.rat.analysis.IHeaderMatcher.Builder[] builderArray58 = new org.apache.rat.analysis.IHeaderMatcher.Builder[] { matcherRefBuilder2, anyBuilder5, notBuilder6, matcherRefBuilder57 };
        java.util.ArrayList<org.apache.rat.analysis.IHeaderMatcher.Builder> builderList59 = new java.util.ArrayList<org.apache.rat.analysis.IHeaderMatcher.Builder>();
        boolean boolean60 = java.util.Collections.addAll((java.util.Collection<org.apache.rat.analysis.IHeaderMatcher.Builder>) builderList59, builderArray58);
        org.apache.rat.configuration.builders.AbstractBuilder abstractBuilder61 = allBuilder1.add((java.util.Collection<org.apache.rat.analysis.IHeaderMatcher.Builder>) builderList59);
        defaultLog0.info((java.lang.Object) allBuilder1);
        org.apache.rat.ReportConfiguration reportConfiguration63 = new org.apache.rat.ReportConfiguration((org.apache.rat.utils.Log) defaultLog0);
        org.apache.rat.license.ILicense[] iLicenseArray65 = new org.apache.rat.license.ILicense[] {};
        java.util.TreeSet<org.apache.rat.license.ILicense> iLicenseSet66 = new java.util.TreeSet<org.apache.rat.license.ILicense>();
        boolean boolean67 = java.util.Collections.addAll((java.util.Collection<org.apache.rat.license.ILicense>) iLicenseSet66, iLicenseArray65);
        java.lang.String[] strArray80 = new java.lang.String[] { "GPL2 ", "GPL1 ", "notice", "http://org/apache/rat/meta-data#LicenseFamilyName", "notice", "GPL2 ", "http://org/apache/rat/meta-data#LicenseFamilyName", "", "GPL2 ", "", "GPL1 ", "hi!" };
        java.util.ArrayList<java.lang.String> strList81 = new java.util.ArrayList<java.lang.String>();
        boolean boolean82 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strList81, strArray80);
        org.apache.rat.license.LicenseSetFactory licenseSetFactory83 = new org.apache.rat.license.LicenseSetFactory((java.util.SortedSet<org.apache.rat.license.ILicense>) iLicenseSet66, (java.util.Collection<java.lang.String>) strList81);
        org.apache.rat.license.ILicense iLicense84 = org.apache.rat.license.LicenseSetFactory.search("JAVA", (java.util.SortedSet<org.apache.rat.license.ILicense>) iLicenseSet66);
        org.apache.rat.utils.ReportingSet<org.apache.rat.license.ILicense> iLicenseSet85 = new org.apache.rat.utils.ReportingSet<org.apache.rat.license.ILicense>((java.util.SortedSet<org.apache.rat.license.ILicense>) iLicenseSet66);
        reportConfiguration63.addLicenses((java.util.Collection<org.apache.rat.license.ILicense>) iLicenseSet66);
        reportConfiguration63.addApprovedLicenseCategory("binary");
        java.lang.String str89 = reportConfiguration63.getCopyrightMessage();
        reportConfiguration63.setCopyrightMessage("NotBuilder: MathcerRefBuilder: Datum [ name ='http://org/apache/rat/meta-data#LicenseFamilyName',value ='Academic Free License, Version 2.1 ']");
        org.junit.Assert.assertNotNull(defaultLog0);
        org.junit.Assert.assertNotNull(matcherRefBuilder2);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "MathcerRefBuilder: null" + "'", str4, "MathcerRefBuilder: null");
        org.junit.Assert.assertNotNull(anyBuilder5);
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "NotBuilder: null" + "'", str7, "NotBuilder: null");
        org.junit.Assert.assertNotNull(matcherRefBuilder8);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertNotNull(matcherRefBuilder11);
        org.junit.Assert.assertNotNull(copyrightBuilder13);
        org.junit.Assert.assertNotNull(copyrightBuilder15);
        org.junit.Assert.assertEquals("'" + str16 + "' != '" + "Copyright Builder: s:OASIS e:null o:null" + "'", str16, "Copyright Builder: s:OASIS e:null o:null");
        org.junit.Assert.assertNotNull(copyrightBuilder18);
        org.junit.Assert.assertNotNull(matcherRefBuilder19);
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + false + "'", boolean20 == false);
        org.junit.Assert.assertNotNull(copyrightBuilder21);
        org.junit.Assert.assertNotNull(copyrightBuilder23);
        org.junit.Assert.assertEquals("'" + str24 + "' != '" + "Copyright Builder: s:OASIS e:null o:null" + "'", str24, "Copyright Builder: s:OASIS e:null o:null");
        org.junit.Assert.assertNotNull(copyrightBuilder26);
        org.junit.Assert.assertNotNull(copyrightBuilder27);
        org.junit.Assert.assertNotNull(copyrightBuilder28);
        org.junit.Assert.assertEquals("'" + str29 + "' != '" + "Copyright Builder: s:null e:null o:null" + "'", str29, "Copyright Builder: s:null e:null o:null");
        org.junit.Assert.assertNotNull(copyrightBuilder31);
        org.junit.Assert.assertTrue("'" + boolean32 + "' != '" + false + "'", boolean32 == false);
        org.junit.Assert.assertNotNull(copyrightBuilder33);
        org.junit.Assert.assertEquals("'" + str34 + "' != '" + "Copyright Builder: s:null e:null o:null" + "'", str34, "Copyright Builder: s:null e:null o:null");
        org.junit.Assert.assertNotNull(copyrightBuilder36);
        org.junit.Assert.assertTrue("'" + boolean37 + "' != '" + false + "'", boolean37 == false);
        org.junit.Assert.assertEquals("'" + str38 + "' != '" + "Copyright Builder: s:null e:.cvsignore o:null" + "'", str38, "Copyright Builder: s:null e:.cvsignore o:null");
        org.junit.Assert.assertNotNull(copyrightBuilder39);
        org.junit.Assert.assertNotNull(copyrightBuilder41);
        org.junit.Assert.assertNotNull(anyBuilder42);
        org.junit.Assert.assertNotNull(matcherRefBuilder43);
        org.junit.Assert.assertTrue("'" + boolean44 + "' != '" + false + "'", boolean44 == false);
        org.junit.Assert.assertNotNull(matcherRefBuilder46);
        org.junit.Assert.assertNotNull(copyrightBuilder47);
        org.junit.Assert.assertNotNull(matcherRefBuilder48);
        org.junit.Assert.assertTrue("'" + boolean49 + "' != '" + false + "'", boolean49 == false);
        org.junit.Assert.assertEquals("'" + str50 + "' != '" + "MathcerRefBuilder: null" + "'", str50, "MathcerRefBuilder: null");
        org.junit.Assert.assertNotNull(matcherRefBuilder52);
        org.junit.Assert.assertNotNull(builderArray53);
        org.junit.Assert.assertTrue("'" + boolean55 + "' != '" + true + "'", boolean55 == true);
        org.junit.Assert.assertNotNull(abstractBuilder56);
        org.junit.Assert.assertNotNull(builderArray58);
        org.junit.Assert.assertTrue("'" + boolean60 + "' != '" + true + "'", boolean60 == true);
        org.junit.Assert.assertNotNull(abstractBuilder61);
        org.junit.Assert.assertNotNull(iLicenseArray65);
        org.junit.Assert.assertTrue("'" + boolean67 + "' != '" + false + "'", boolean67 == false);
        org.junit.Assert.assertNotNull(strArray80);
        org.junit.Assert.assertTrue("'" + boolean82 + "' != '" + true + "'", boolean82 == true);
        org.junit.Assert.assertNull(iLicense84);
        org.junit.Assert.assertNull(str89);
    }

    @Test
    public void test13664() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest27.test13664");
        org.apache.rat.license.ILicense.Builder builder0 = org.apache.rat.license.ILicense.builder();
        org.apache.rat.license.ILicense.Builder builder2 = builder0.setLicenseFamilyCategory("");
        org.apache.rat.license.ILicense.Builder builder4 = builder0.setId("GPL2 ");
        org.apache.rat.license.ILicense.Builder builder6 = builder4.setDerivedFrom("3e2b228d-d5ff-4444-8d8c-d614494b2426");
        org.apache.rat.license.ILicense.Builder builder8 = builder4.setId("SpdxBuilder: null http://org/apache/rat/meta-data#LicenseFamilyName");
        org.apache.rat.configuration.builders.SpdxBuilder spdxBuilder9 = org.apache.rat.analysis.IHeaderMatcher.Builder.spdx();
        java.lang.String str10 = spdxBuilder9.toString();
        org.apache.rat.configuration.builders.SpdxBuilder spdxBuilder12 = spdxBuilder9.setName("ef7a8b13-64c3-4510-bb0c-dbf208e1e73f");
        java.lang.String str13 = spdxBuilder12.toString();
        org.apache.rat.configuration.builders.SpdxBuilder spdxBuilder15 = spdxBuilder12.setName("9d334763-6150-4fa3-86d4-32f09aebbaad");
        java.lang.String str16 = spdxBuilder12.toString();
        org.apache.rat.license.ILicense.Builder builder17 = builder8.setMatcher((org.apache.rat.analysis.IHeaderMatcher.Builder) spdxBuilder12);
        org.apache.rat.utils.Log log18 = null;
        org.apache.rat.ReportConfiguration reportConfiguration19 = new org.apache.rat.ReportConfiguration(log18);
        reportConfiguration19.addApprovedLicenseCategory(".cvsignore");
        org.apache.rat.utils.Log log22 = null;
        org.apache.rat.ReportConfiguration reportConfiguration23 = new org.apache.rat.ReportConfiguration(log22);
        java.io.FilenameFilter filenameFilter24 = reportConfiguration23.getInputFileFilter();
        org.apache.rat.license.LicenseSetFactory.LicenseFilter licenseFilter25 = org.apache.rat.license.LicenseSetFactory.LicenseFilter.all;
        java.util.SortedSet<org.apache.rat.license.ILicense> iLicenseSet26 = reportConfiguration23.getLicenses(licenseFilter25);
        reportConfiguration19.addLicensesIfNotPresent((java.util.Collection<org.apache.rat.license.ILicense>) iLicenseSet26);
        reportConfiguration19.setCopyrightMessage("MathcerRefBuilder: null");
        org.apache.rat.utils.Log log30 = null;
        org.apache.rat.ReportConfiguration reportConfiguration31 = new org.apache.rat.ReportConfiguration(log30);
        reportConfiguration31.addApprovedLicenseCategory(".cvsignore");
        boolean boolean34 = reportConfiguration31.isStyleReport();
        org.apache.rat.utils.Log log35 = null;
        org.apache.rat.ReportConfiguration reportConfiguration36 = new org.apache.rat.ReportConfiguration(log35);
        org.apache.rat.report.claim.ClaimStatistic claimStatistic37 = org.apache.rat.Reporter.report(reportConfiguration36);
        org.apache.commons.io.function.IOSupplier<java.io.OutputStream> outputStreamIOSupplier38 = reportConfiguration36.getOutput();
        org.apache.rat.license.ILicense iLicense39 = null;
        reportConfiguration36.addLicense(iLicense39);
        org.apache.rat.Defaults.Builder builder41 = org.apache.rat.Defaults.builder();
        org.apache.rat.Defaults defaults42 = builder41.build();
        reportConfiguration36.setFrom(defaults42);
        org.apache.rat.utils.Log log44 = null;
        org.apache.rat.ReportConfiguration reportConfiguration45 = new org.apache.rat.ReportConfiguration(log44);
        org.apache.rat.license.ILicenseFamily[] iLicenseFamilyArray46 = new org.apache.rat.license.ILicenseFamily[] {};
        java.util.ArrayList<org.apache.rat.license.ILicenseFamily> iLicenseFamilyList47 = new java.util.ArrayList<org.apache.rat.license.ILicenseFamily>();
        boolean boolean48 = java.util.Collections.addAll((java.util.Collection<org.apache.rat.license.ILicenseFamily>) iLicenseFamilyList47, iLicenseFamilyArray46);
        reportConfiguration45.addFamilies((java.util.Collection<org.apache.rat.license.ILicenseFamily>) iLicenseFamilyList47);
        org.apache.rat.analysis.license.FullTextMatchingLicense fullTextMatchingLicense50 = new org.apache.rat.analysis.license.FullTextMatchingLicense();
        fullTextMatchingLicense50.setLicenseFamilyName("hi!");
        java.lang.String str53 = fullTextMatchingLicense50.getLicenseFamilyCategory();
        java.lang.String str54 = fullTextMatchingLicense50.getLicenseFamilyName();
        fullTextMatchingLicense50.setLicenseFamilyName("SpdxBuilder: null");
        fullTextMatchingLicense50.setLicenseFamilyCategory("TMF");
        org.apache.rat.license.ILicenseFamily iLicenseFamily59 = fullTextMatchingLicense50.getLicenseFamily();
        reportConfiguration45.addFamily(iLicenseFamily59);
        java.lang.String str61 = iLicenseFamily59.getFamilyName();
        java.lang.String str62 = iLicenseFamily59.getFamilyName();
        reportConfiguration36.addApprovedLicenseCategory(iLicenseFamily59);
        reportConfiguration31.addApprovedLicenseCategory(iLicenseFamily59);
        java.lang.String str65 = iLicenseFamily59.getFamilyCategory();
        java.lang.String str66 = iLicenseFamily59.getFamilyName();
        java.lang.String str67 = iLicenseFamily59.getFamilyName();
        reportConfiguration19.addFamily(iLicenseFamily59);
        org.apache.rat.license.ILicenseFamily[] iLicenseFamilyArray69 = new org.apache.rat.license.ILicenseFamily[] {};
        java.util.ArrayList<org.apache.rat.license.ILicenseFamily> iLicenseFamilyList70 = new java.util.ArrayList<org.apache.rat.license.ILicenseFamily>();
        boolean boolean71 = java.util.Collections.addAll((java.util.Collection<org.apache.rat.license.ILicenseFamily>) iLicenseFamilyList70, iLicenseFamilyArray69);
        org.apache.rat.policy.DefaultPolicy defaultPolicy72 = new org.apache.rat.policy.DefaultPolicy((java.util.Collection<org.apache.rat.license.ILicenseFamily>) iLicenseFamilyList70);
        java.util.SortedSet<org.apache.rat.license.ILicenseFamily> iLicenseFamilySet73 = defaultPolicy72.getApprovedLicenseNames();
        org.apache.rat.api.Document document74 = null;
        defaultPolicy72.analyse(document74);
        java.util.SortedSet<org.apache.rat.license.ILicenseFamily> iLicenseFamilySet76 = defaultPolicy72.getApprovedLicenseNames();
        org.apache.rat.policy.DefaultPolicy defaultPolicy77 = new org.apache.rat.policy.DefaultPolicy((java.util.Collection<org.apache.rat.license.ILicenseFamily>) iLicenseFamilySet76);
        reportConfiguration19.addFamilies((java.util.Collection<org.apache.rat.license.ILicenseFamily>) iLicenseFamilySet76);
        // The following exception was thrown during execution in test generation
        try {
            org.apache.rat.license.ILicense iLicense79 = builder17.build(iLicenseFamilySet76);
            org.junit.Assert.fail("Expected exception of type org.apache.rat.ConfigurationException; message: LicenseFamily Category must be specified");
        } catch (org.apache.rat.ConfigurationException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(builder0);
        org.junit.Assert.assertNotNull(builder2);
        org.junit.Assert.assertNotNull(builder4);
        org.junit.Assert.assertNotNull(builder6);
        org.junit.Assert.assertNotNull(builder8);
        org.junit.Assert.assertNotNull(spdxBuilder9);
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "SpdxBuilder: null" + "'", str10, "SpdxBuilder: null");
        org.junit.Assert.assertNotNull(spdxBuilder12);
        org.junit.Assert.assertEquals("'" + str13 + "' != '" + "SpdxBuilder: ef7a8b13-64c3-4510-bb0c-dbf208e1e73f" + "'", str13, "SpdxBuilder: ef7a8b13-64c3-4510-bb0c-dbf208e1e73f");
        org.junit.Assert.assertNotNull(spdxBuilder15);
        org.junit.Assert.assertEquals("'" + str16 + "' != '" + "SpdxBuilder: 9d334763-6150-4fa3-86d4-32f09aebbaad" + "'", str16, "SpdxBuilder: 9d334763-6150-4fa3-86d4-32f09aebbaad");
        org.junit.Assert.assertNotNull(builder17);
        org.junit.Assert.assertNull(filenameFilter24);
        org.junit.Assert.assertTrue("'" + licenseFilter25 + "' != '" + org.apache.rat.license.LicenseSetFactory.LicenseFilter.all + "'", licenseFilter25.equals(org.apache.rat.license.LicenseSetFactory.LicenseFilter.all));
        org.junit.Assert.assertNotNull(iLicenseSet26);
        org.junit.Assert.assertTrue("'" + boolean34 + "' != '" + true + "'", boolean34 == true);
        org.junit.Assert.assertNull(claimStatistic37);
        org.junit.Assert.assertNotNull(outputStreamIOSupplier38);
        org.junit.Assert.assertNotNull(builder41);
        org.junit.Assert.assertNotNull(defaults42);
        org.junit.Assert.assertNotNull(iLicenseFamilyArray46);
        org.junit.Assert.assertTrue("'" + boolean48 + "' != '" + false + "'", boolean48 == false);
        org.junit.Assert.assertNull(str53);
        org.junit.Assert.assertEquals("'" + str54 + "' != '" + "hi!" + "'", str54, "hi!");
        org.junit.Assert.assertNotNull(iLicenseFamily59);
        org.junit.Assert.assertEquals("'" + str61 + "' != '" + "SpdxBuilder: null" + "'", str61, "SpdxBuilder: null");
        org.junit.Assert.assertEquals("'" + str62 + "' != '" + "SpdxBuilder: null" + "'", str62, "SpdxBuilder: null");
        org.junit.Assert.assertEquals("'" + str65 + "' != '" + "TMF  " + "'", str65, "TMF  ");
        org.junit.Assert.assertEquals("'" + str66 + "' != '" + "SpdxBuilder: null" + "'", str66, "SpdxBuilder: null");
        org.junit.Assert.assertEquals("'" + str67 + "' != '" + "SpdxBuilder: null" + "'", str67, "SpdxBuilder: null");
        org.junit.Assert.assertNotNull(iLicenseFamilyArray69);
        org.junit.Assert.assertTrue("'" + boolean71 + "' != '" + false + "'", boolean71 == false);
        org.junit.Assert.assertNotNull(iLicenseFamilySet73);
        org.junit.Assert.assertNotNull(iLicenseFamilySet76);
    }

    @Test
    public void test13665() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest27.test13665");
        java.util.Map<java.lang.String, java.lang.String> strMap2 = null;
        // The following exception was thrown during execution in test generation
        try {
            org.apache.rat.api.ContentType contentType3 = new org.apache.rat.api.ContentType("DOJO ", "ccda37f88aec461ca25784923fc7818c", strMap2);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
    }

    @Test
    public void test13666() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest27.test13666");
        org.apache.rat.analysis.matchers.SimpleTextMatcher simpleTextMatcher1 = new org.apache.rat.analysis.matchers.SimpleTextMatcher("GNU General Public License, version 3");
        org.apache.rat.analysis.matchers.NotMatcher notMatcher2 = new org.apache.rat.analysis.matchers.NotMatcher((org.apache.rat.analysis.IHeaderMatcher) simpleTextMatcher1);
        boolean boolean4 = simpleTextMatcher1.doMatch("");
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
    }

    @Test
    public void test13667() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest27.test13667");
        org.apache.rat.analysis.matchers.CopyrightMatcher copyrightMatcher3 = new org.apache.rat.analysis.matchers.CopyrightMatcher("106ab050-2110-44f8-a9e7-726c4af443ea", "TextBuilder: http://org/apache/ra...", "httporgapacheratmetadataApprovedLicense");
        org.apache.rat.analysis.IHeaderMatcher.State state5 = copyrightMatcher3.matches("64ae0b82-4b80-4d92-9c12-7c39421cb10a");
        org.junit.Assert.assertTrue("'" + state5 + "' != '" + org.apache.rat.analysis.IHeaderMatcher.State.i + "'", state5.equals(org.apache.rat.analysis.IHeaderMatcher.State.i));
    }

    @Test
    public void test13668() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest27.test13668");
        boolean boolean1 = org.apache.rat.document.impl.guesser.ArchiveGuesser.isArchive("null ?????");
        org.junit.Assert.assertTrue("'" + boolean1 + "' != '" + false + "'", boolean1 == false);
    }

    @Test
    public void test13669() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest27.test13669");
        java.io.Writer writer0 = null;
        org.apache.rat.report.xml.writer.impl.base.XmlWriter xmlWriter1 = new org.apache.rat.report.xml.writer.impl.base.XmlWriter(writer0);
        org.apache.rat.report.claim.impl.xml.SimpleXmlClaimReporter simpleXmlClaimReporter2 = new org.apache.rat.report.claim.impl.xml.SimpleXmlClaimReporter((org.apache.rat.report.xml.writer.IXmlWriter) xmlWriter1);
        // The following exception was thrown during execution in test generation
        try {
            org.apache.rat.report.xml.writer.IXmlWriter iXmlWriter4 = xmlWriter1.content((java.lang.CharSequence) "fbe39c3a-b594-4272-9489-8ecb62fbd6bb");
            org.junit.Assert.fail("Expected exception of type org.apache.rat.report.xml.writer.OperationNotAllowedException; message: An element must be opened before content can be written.");
        } catch (org.apache.rat.report.xml.writer.OperationNotAllowedException e) {
            // Expected exception.
        }
    }

    @Test
    public void test13670() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest27.test13670");
        org.apache.rat.utils.Log log0 = null;
        org.apache.rat.ReportConfiguration reportConfiguration1 = new org.apache.rat.ReportConfiguration(log0);
        org.apache.rat.license.ILicenseFamily[] iLicenseFamilyArray2 = new org.apache.rat.license.ILicenseFamily[] {};
        java.util.ArrayList<org.apache.rat.license.ILicenseFamily> iLicenseFamilyList3 = new java.util.ArrayList<org.apache.rat.license.ILicenseFamily>();
        boolean boolean4 = java.util.Collections.addAll((java.util.Collection<org.apache.rat.license.ILicenseFamily>) iLicenseFamilyList3, iLicenseFamilyArray2);
        reportConfiguration1.addFamilies((java.util.Collection<org.apache.rat.license.ILicenseFamily>) iLicenseFamilyList3);
        org.apache.rat.report.IReportable iReportable6 = null;
        reportConfiguration1.setReportable(iReportable6);
        org.apache.rat.utils.ReportingSet<java.lang.String> strSet8 = new org.apache.rat.utils.ReportingSet<java.lang.String>();
        java.lang.Object[] objArray9 = strSet8.toArray();
        org.apache.rat.utils.Log log10 = null;
        org.apache.rat.ReportConfiguration reportConfiguration11 = new org.apache.rat.ReportConfiguration(log10);
        org.apache.rat.report.claim.ClaimStatistic claimStatistic12 = org.apache.rat.Reporter.report(reportConfiguration11);
        org.apache.rat.utils.Log log13 = null;
        org.apache.rat.ReportConfiguration reportConfiguration14 = new org.apache.rat.ReportConfiguration(log13);
        org.apache.rat.report.claim.ClaimStatistic claimStatistic15 = org.apache.rat.Reporter.report(reportConfiguration14);
        org.apache.rat.utils.ReportingSet.Options options16 = org.apache.rat.utils.ReportingSet.Options.OVERWRITE;
        reportConfiguration14.licenseDuplicateOption(options16);
        reportConfiguration11.familyDuplicateOption(options16);
        org.apache.commons.io.function.IOSupplier<java.io.PrintWriter> printWriterIOSupplier19 = reportConfiguration11.getWriter();
        boolean boolean20 = reportConfiguration11.isAddingLicensesForced();
        org.apache.rat.utils.Log log21 = null;
        org.apache.rat.ReportConfiguration reportConfiguration22 = new org.apache.rat.ReportConfiguration(log21);
        reportConfiguration22.addApprovedLicenseCategory(".cvsignore");
        org.apache.rat.utils.Log.Level level25 = org.apache.rat.utils.Log.Level.ERROR;
        reportConfiguration22.logFamilyCollisions(level25);
        reportConfiguration11.logLicenseCollisions(level25);
        org.apache.rat.utils.ReportingSet<java.lang.String> strSet28 = strSet8.setLogLevel(level25);
        java.util.stream.Stream<java.lang.String> strStream29 = strSet28.stream();
        reportConfiguration1.addApprovedLicenseCategories((java.util.Collection<java.lang.String>) strSet28);
        org.apache.rat.utils.ReportingSet.Options options31 = org.apache.rat.utils.ReportingSet.Options.OVERWRITE;
        org.apache.rat.utils.ReportingSet<java.lang.String> strSet32 = strSet28.setDuplicateOption(options31);
        org.apache.rat.license.ILicenseFamily[] iLicenseFamilyArray33 = new org.apache.rat.license.ILicenseFamily[] {};
        java.util.ArrayList<org.apache.rat.license.ILicenseFamily> iLicenseFamilyList34 = new java.util.ArrayList<org.apache.rat.license.ILicenseFamily>();
        boolean boolean35 = java.util.Collections.addAll((java.util.Collection<org.apache.rat.license.ILicenseFamily>) iLicenseFamilyList34, iLicenseFamilyArray33);
        org.apache.rat.policy.DefaultPolicy defaultPolicy36 = new org.apache.rat.policy.DefaultPolicy((java.util.Collection<org.apache.rat.license.ILicenseFamily>) iLicenseFamilyList34);
        java.util.SortedSet<org.apache.rat.license.ILicenseFamily> iLicenseFamilySet37 = defaultPolicy36.getApprovedLicenseNames();
        org.apache.rat.api.Document document38 = null;
        defaultPolicy36.analyse(document38);
        org.apache.rat.analysis.license.FullTextMatchingLicense fullTextMatchingLicense40 = new org.apache.rat.analysis.license.FullTextMatchingLicense();
        fullTextMatchingLicense40.setLicenseFamilyName("hi!");
        java.lang.String str43 = fullTextMatchingLicense40.getLicenseFamilyCategory();
        java.lang.String str44 = fullTextMatchingLicense40.getLicenseFamilyName();
        fullTextMatchingLicense40.setLicenseFamilyName("SpdxBuilder: null");
        fullTextMatchingLicense40.setLicenseFamilyCategory("TMF");
        org.apache.rat.license.ILicenseFamily iLicenseFamily49 = fullTextMatchingLicense40.getLicenseFamily();
        defaultPolicy36.add(iLicenseFamily49);
        org.apache.rat.license.ILicense[] iLicenseArray51 = new org.apache.rat.license.ILicense[] {};
        java.util.TreeSet<org.apache.rat.license.ILicense> iLicenseSet52 = new java.util.TreeSet<org.apache.rat.license.ILicense>();
        boolean boolean53 = java.util.Collections.addAll((java.util.Collection<org.apache.rat.license.ILicense>) iLicenseSet52, iLicenseArray51);
        java.lang.String[] strArray66 = new java.lang.String[] { "GPL2 ", "GPL1 ", "notice", "http://org/apache/rat/meta-data#LicenseFamilyName", "notice", "GPL2 ", "http://org/apache/rat/meta-data#LicenseFamilyName", "", "GPL2 ", "", "GPL1 ", "hi!" };
        java.util.ArrayList<java.lang.String> strList67 = new java.util.ArrayList<java.lang.String>();
        boolean boolean68 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strList67, strArray66);
        org.apache.rat.license.LicenseSetFactory licenseSetFactory69 = new org.apache.rat.license.LicenseSetFactory((java.util.SortedSet<org.apache.rat.license.ILicense>) iLicenseSet52, (java.util.Collection<java.lang.String>) strList67);
        org.apache.rat.license.LicenseSetFactory.LicenseFilter licenseFilter70 = org.apache.rat.license.LicenseSetFactory.LicenseFilter.all;
        java.util.SortedSet<org.apache.rat.license.ILicenseFamily> iLicenseFamilySet71 = licenseSetFactory69.getLicenseFamilies(licenseFilter70);
        org.apache.rat.policy.DefaultPolicy defaultPolicy72 = new org.apache.rat.policy.DefaultPolicy((java.util.Collection<org.apache.rat.license.ILicenseFamily>) iLicenseFamilySet71);
        org.apache.rat.license.ILicenseFamily iLicenseFamily73 = org.apache.rat.license.LicenseFamilySetFactory.search(iLicenseFamily49, iLicenseFamilySet71);
        boolean boolean74 = strSet32.removeAll((java.util.Collection<org.apache.rat.license.ILicenseFamily>) iLicenseFamilySet71);
        org.junit.Assert.assertNotNull(iLicenseFamilyArray2);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertNotNull(objArray9);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray9), "[]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray9), "[]");
        org.junit.Assert.assertNull(claimStatistic12);
        org.junit.Assert.assertNull(claimStatistic15);
        org.junit.Assert.assertTrue("'" + options16 + "' != '" + org.apache.rat.utils.ReportingSet.Options.OVERWRITE + "'", options16.equals(org.apache.rat.utils.ReportingSet.Options.OVERWRITE));
        org.junit.Assert.assertNotNull(printWriterIOSupplier19);
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + false + "'", boolean20 == false);
        org.junit.Assert.assertTrue("'" + level25 + "' != '" + org.apache.rat.utils.Log.Level.ERROR + "'", level25.equals(org.apache.rat.utils.Log.Level.ERROR));
        org.junit.Assert.assertNotNull(strSet28);
        org.junit.Assert.assertNotNull(strStream29);
        org.junit.Assert.assertTrue("'" + options31 + "' != '" + org.apache.rat.utils.ReportingSet.Options.OVERWRITE + "'", options31.equals(org.apache.rat.utils.ReportingSet.Options.OVERWRITE));
        org.junit.Assert.assertNotNull(strSet32);
        org.junit.Assert.assertNotNull(iLicenseFamilyArray33);
        org.junit.Assert.assertTrue("'" + boolean35 + "' != '" + false + "'", boolean35 == false);
        org.junit.Assert.assertNotNull(iLicenseFamilySet37);
        org.junit.Assert.assertNull(str43);
        org.junit.Assert.assertEquals("'" + str44 + "' != '" + "hi!" + "'", str44, "hi!");
        org.junit.Assert.assertNotNull(iLicenseFamily49);
        org.junit.Assert.assertNotNull(iLicenseArray51);
        org.junit.Assert.assertTrue("'" + boolean53 + "' != '" + false + "'", boolean53 == false);
        org.junit.Assert.assertNotNull(strArray66);
        org.junit.Assert.assertTrue("'" + boolean68 + "' != '" + true + "'", boolean68 == true);
        org.junit.Assert.assertTrue("'" + licenseFilter70 + "' != '" + org.apache.rat.license.LicenseSetFactory.LicenseFilter.all + "'", licenseFilter70.equals(org.apache.rat.license.LicenseSetFactory.LicenseFilter.all));
        org.junit.Assert.assertNotNull(iLicenseFamilySet71);
        org.junit.Assert.assertNull(iLicenseFamily73);
        org.junit.Assert.assertTrue("'" + boolean74 + "' != '" + false + "'", boolean74 == false);
    }

    @Test
    public void test13671() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest27.test13671");
        java.io.File file0 = null;
        org.apache.rat.utils.Log log1 = null;
        org.apache.rat.ReportConfiguration reportConfiguration2 = new org.apache.rat.ReportConfiguration(log1);
        java.io.FilenameFilter filenameFilter3 = reportConfiguration2.getInputFileFilter();
        org.apache.rat.license.LicenseSetFactory.LicenseFilter licenseFilter4 = org.apache.rat.license.LicenseSetFactory.LicenseFilter.all;
        java.util.SortedSet<org.apache.rat.license.ILicense> iLicenseSet5 = reportConfiguration2.getLicenses(licenseFilter4);
        org.apache.rat.config.AddLicenseHeaders addLicenseHeaders6 = org.apache.rat.config.AddLicenseHeaders.FALSE;
        reportConfiguration2.setAddLicenseHeaders(addLicenseHeaders6);
        org.apache.rat.utils.Log log8 = null;
        org.apache.rat.ReportConfiguration reportConfiguration9 = new org.apache.rat.ReportConfiguration(log8);
        org.apache.rat.report.claim.ClaimStatistic claimStatistic10 = org.apache.rat.Reporter.report(reportConfiguration9);
        org.apache.rat.license.LicenseSetFactory.LicenseFilter licenseFilter11 = org.apache.rat.license.LicenseSetFactory.LicenseFilter.all;
        org.apache.rat.Reporter.listLicenses(reportConfiguration9, licenseFilter11);
        org.apache.rat.Reporter.listLicenses(reportConfiguration2, licenseFilter11);
        org.apache.rat.utils.Log log14 = null;
        org.apache.rat.ReportConfiguration reportConfiguration15 = new org.apache.rat.ReportConfiguration(log14);
        java.io.FilenameFilter filenameFilter16 = reportConfiguration15.getInputFileFilter();
        org.apache.rat.license.LicenseSetFactory.LicenseFilter licenseFilter17 = org.apache.rat.license.LicenseSetFactory.LicenseFilter.all;
        java.util.SortedSet<org.apache.rat.license.ILicense> iLicenseSet18 = reportConfiguration15.getLicenses(licenseFilter17);
        org.apache.rat.config.AddLicenseHeaders addLicenseHeaders19 = org.apache.rat.config.AddLicenseHeaders.FALSE;
        reportConfiguration15.setAddLicenseHeaders(addLicenseHeaders19);
        org.apache.rat.utils.Log log21 = null;
        org.apache.rat.ReportConfiguration reportConfiguration22 = new org.apache.rat.ReportConfiguration(log21);
        org.apache.rat.report.claim.ClaimStatistic claimStatistic23 = org.apache.rat.Reporter.report(reportConfiguration22);
        org.apache.rat.license.LicenseSetFactory.LicenseFilter licenseFilter24 = org.apache.rat.license.LicenseSetFactory.LicenseFilter.all;
        org.apache.rat.Reporter.listLicenses(reportConfiguration22, licenseFilter24);
        org.apache.rat.Reporter.listLicenses(reportConfiguration15, licenseFilter24);
        java.util.SortedSet<org.apache.rat.license.ILicenseFamily> iLicenseFamilySet27 = reportConfiguration2.getLicenseFamilies(licenseFilter24);
        org.apache.rat.license.ILicense[] iLicenseArray29 = new org.apache.rat.license.ILicense[] {};
        java.util.TreeSet<org.apache.rat.license.ILicense> iLicenseSet30 = new java.util.TreeSet<org.apache.rat.license.ILicense>();
        boolean boolean31 = java.util.Collections.addAll((java.util.Collection<org.apache.rat.license.ILicense>) iLicenseSet30, iLicenseArray29);
        java.lang.String[] strArray44 = new java.lang.String[] { "GPL2 ", "GPL1 ", "notice", "http://org/apache/rat/meta-data#LicenseFamilyName", "notice", "GPL2 ", "http://org/apache/rat/meta-data#LicenseFamilyName", "", "GPL2 ", "", "GPL1 ", "hi!" };
        java.util.ArrayList<java.lang.String> strList45 = new java.util.ArrayList<java.lang.String>();
        boolean boolean46 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strList45, strArray44);
        org.apache.rat.license.LicenseSetFactory licenseSetFactory47 = new org.apache.rat.license.LicenseSetFactory((java.util.SortedSet<org.apache.rat.license.ILicense>) iLicenseSet30, (java.util.Collection<java.lang.String>) strList45);
        org.apache.rat.license.ILicense iLicense48 = org.apache.rat.license.LicenseSetFactory.search("JAVA", (java.util.SortedSet<org.apache.rat.license.ILicense>) iLicenseSet30);
        reportConfiguration2.addLicensesIfNotPresent((java.util.Collection<org.apache.rat.license.ILicense>) iLicenseSet30);
        reportConfiguration2.addApprovedLicenseCategory("EF7A8B13-64C3-4510-BB0C-DBF208E1E73F");
        org.apache.commons.io.filefilter.IOFileFilter iOFileFilter52 = reportConfiguration2.getDirectoryFilter();
        // The following exception was thrown during execution in test generation
        try {
            org.apache.rat.walker.DirectoryWalker directoryWalker53 = new org.apache.rat.walker.DirectoryWalker(file0, iOFileFilter52);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNull(filenameFilter3);
        org.junit.Assert.assertTrue("'" + licenseFilter4 + "' != '" + org.apache.rat.license.LicenseSetFactory.LicenseFilter.all + "'", licenseFilter4.equals(org.apache.rat.license.LicenseSetFactory.LicenseFilter.all));
        org.junit.Assert.assertNotNull(iLicenseSet5);
        org.junit.Assert.assertTrue("'" + addLicenseHeaders6 + "' != '" + org.apache.rat.config.AddLicenseHeaders.FALSE + "'", addLicenseHeaders6.equals(org.apache.rat.config.AddLicenseHeaders.FALSE));
        org.junit.Assert.assertNull(claimStatistic10);
        org.junit.Assert.assertTrue("'" + licenseFilter11 + "' != '" + org.apache.rat.license.LicenseSetFactory.LicenseFilter.all + "'", licenseFilter11.equals(org.apache.rat.license.LicenseSetFactory.LicenseFilter.all));
        org.junit.Assert.assertNull(filenameFilter16);
        org.junit.Assert.assertTrue("'" + licenseFilter17 + "' != '" + org.apache.rat.license.LicenseSetFactory.LicenseFilter.all + "'", licenseFilter17.equals(org.apache.rat.license.LicenseSetFactory.LicenseFilter.all));
        org.junit.Assert.assertNotNull(iLicenseSet18);
        org.junit.Assert.assertTrue("'" + addLicenseHeaders19 + "' != '" + org.apache.rat.config.AddLicenseHeaders.FALSE + "'", addLicenseHeaders19.equals(org.apache.rat.config.AddLicenseHeaders.FALSE));
        org.junit.Assert.assertNull(claimStatistic23);
        org.junit.Assert.assertTrue("'" + licenseFilter24 + "' != '" + org.apache.rat.license.LicenseSetFactory.LicenseFilter.all + "'", licenseFilter24.equals(org.apache.rat.license.LicenseSetFactory.LicenseFilter.all));
        org.junit.Assert.assertNotNull(iLicenseFamilySet27);
        org.junit.Assert.assertNotNull(iLicenseArray29);
        org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + false + "'", boolean31 == false);
        org.junit.Assert.assertNotNull(strArray44);
        org.junit.Assert.assertTrue("'" + boolean46 + "' != '" + true + "'", boolean46 == true);
        org.junit.Assert.assertNull(iLicense48);
        org.junit.Assert.assertNotNull(iOFileFilter52);
    }

    @Test
    public void test13672() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest27.test13672");
        org.apache.rat.api.MetaData metaData0 = new org.apache.rat.api.MetaData();
        java.lang.String str2 = metaData0.value("COMMON DEVELOPMENT AND DISTRIBUTION LICENSE Version 1.0");
        java.lang.String str4 = metaData0.value("W3C Document Copyright");
        boolean boolean6 = metaData0.clear("hi!");
        metaData0.clear();
        java.util.Collection<org.apache.rat.api.MetaData.Datum> datumCollection8 = metaData0.getData();
        org.apache.rat.api.MetaData.Datum datum9 = org.apache.rat.api.MetaData.RAT_LICENSE_FAMILY_NAME_DATUM_ACADEMIC_FREE_LICENSE_VERSION_2_1;
        java.lang.String str10 = datum9.toString();
        metaData0.set(datum9);
        java.lang.String str13 = metaData0.value("4fcae176-e574-46ed-b9e4-dea2e2f3b458 http://org/apache/rat/meta-data#LicenseFamilyName");
        org.junit.Assert.assertNull(str2);
        org.junit.Assert.assertNull(str4);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertNotNull(datumCollection8);
        org.junit.Assert.assertNotNull(datum9);
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "Datum [ name ='http://org/apache/rat/meta-data#LicenseFamilyName',value ='Academic Free License, Version 2.1 ']" + "'", str10, "Datum [ name ='http://org/apache/rat/meta-data#LicenseFamilyName',value ='Academic Free License, Version 2.1 ']");
        org.junit.Assert.assertNull(str13);
    }

    @Test
    public void test13673() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest27.test13673");
        org.apache.rat.utils.DefaultLog defaultLog0 = org.apache.rat.utils.DefaultLog.INSTANCE;
        org.apache.rat.utils.Log log1 = null;
        org.apache.rat.ReportConfiguration reportConfiguration2 = new org.apache.rat.ReportConfiguration(log1);
        java.io.FilenameFilter filenameFilter3 = reportConfiguration2.getInputFileFilter();
        org.apache.rat.license.LicenseSetFactory.LicenseFilter licenseFilter4 = org.apache.rat.license.LicenseSetFactory.LicenseFilter.all;
        java.util.SortedSet<org.apache.rat.license.ILicense> iLicenseSet5 = reportConfiguration2.getLicenses(licenseFilter4);
        org.apache.rat.config.AddLicenseHeaders addLicenseHeaders6 = org.apache.rat.config.AddLicenseHeaders.FALSE;
        reportConfiguration2.setAddLicenseHeaders(addLicenseHeaders6);
        org.apache.rat.utils.Log log8 = null;
        org.apache.rat.ReportConfiguration reportConfiguration9 = new org.apache.rat.ReportConfiguration(log8);
        org.apache.rat.report.claim.ClaimStatistic claimStatistic10 = org.apache.rat.Reporter.report(reportConfiguration9);
        org.apache.rat.license.LicenseSetFactory.LicenseFilter licenseFilter11 = org.apache.rat.license.LicenseSetFactory.LicenseFilter.all;
        org.apache.rat.Reporter.listLicenses(reportConfiguration9, licenseFilter11);
        org.apache.rat.Reporter.listLicenses(reportConfiguration2, licenseFilter11);
        org.apache.rat.utils.Log log14 = null;
        org.apache.rat.ReportConfiguration reportConfiguration15 = new org.apache.rat.ReportConfiguration(log14);
        java.io.FilenameFilter filenameFilter16 = reportConfiguration15.getInputFileFilter();
        org.apache.rat.license.LicenseSetFactory.LicenseFilter licenseFilter17 = org.apache.rat.license.LicenseSetFactory.LicenseFilter.all;
        java.util.SortedSet<org.apache.rat.license.ILicense> iLicenseSet18 = reportConfiguration15.getLicenses(licenseFilter17);
        org.apache.rat.config.AddLicenseHeaders addLicenseHeaders19 = org.apache.rat.config.AddLicenseHeaders.FALSE;
        reportConfiguration15.setAddLicenseHeaders(addLicenseHeaders19);
        org.apache.rat.utils.Log log21 = null;
        org.apache.rat.ReportConfiguration reportConfiguration22 = new org.apache.rat.ReportConfiguration(log21);
        org.apache.rat.report.claim.ClaimStatistic claimStatistic23 = org.apache.rat.Reporter.report(reportConfiguration22);
        org.apache.rat.license.LicenseSetFactory.LicenseFilter licenseFilter24 = org.apache.rat.license.LicenseSetFactory.LicenseFilter.all;
        org.apache.rat.Reporter.listLicenses(reportConfiguration22, licenseFilter24);
        org.apache.rat.Reporter.listLicenses(reportConfiguration15, licenseFilter24);
        org.apache.rat.Reporter.listLicenses(reportConfiguration2, licenseFilter24);
        org.apache.rat.utils.Log log28 = null;
        org.apache.rat.ReportConfiguration reportConfiguration29 = new org.apache.rat.ReportConfiguration(log28);
        org.apache.commons.io.function.IOSupplier<java.io.OutputStream> outputStreamIOSupplier30 = reportConfiguration29.getOutput();
        reportConfiguration2.setOut(outputStreamIOSupplier30);
        org.apache.rat.utils.Log log32 = null;
        org.apache.rat.ReportConfiguration reportConfiguration33 = new org.apache.rat.ReportConfiguration(log32);
        org.apache.rat.report.claim.ClaimStatistic claimStatistic34 = org.apache.rat.Reporter.report(reportConfiguration33);
        org.apache.rat.utils.Log log35 = null;
        org.apache.rat.ReportConfiguration reportConfiguration36 = new org.apache.rat.ReportConfiguration(log35);
        org.apache.rat.report.claim.ClaimStatistic claimStatistic37 = org.apache.rat.Reporter.report(reportConfiguration36);
        org.apache.rat.utils.ReportingSet.Options options38 = org.apache.rat.utils.ReportingSet.Options.OVERWRITE;
        reportConfiguration36.licenseDuplicateOption(options38);
        reportConfiguration33.familyDuplicateOption(options38);
        reportConfiguration2.licenseDuplicateOption(options38);
        reportConfiguration2.addApprovedLicenseCategory("W3C Document Copyright");
        org.apache.rat.utils.Log log44 = null;
        org.apache.rat.ReportConfiguration reportConfiguration45 = new org.apache.rat.ReportConfiguration(log44);
        reportConfiguration45.addApprovedLicenseCategory(".cvsignore");
        org.apache.rat.utils.Log.Level level48 = org.apache.rat.utils.Log.Level.ERROR;
        reportConfiguration45.logLicenseCollisions(level48);
        reportConfiguration2.logLicenseCollisions(level48);
        defaultLog0.setLevel(level48);
        defaultLog0.warn((java.lang.Object) "GNU General Public License, version 3");
        defaultLog0.error((java.lang.Object) (-1.0d));
        org.apache.rat.annotation.ApacheV2LicenseAppender apacheV2LicenseAppender57 = new org.apache.rat.annotation.ApacheV2LicenseAppender((org.apache.rat.utils.Log) defaultLog0, "NotBuilder: null");
        java.io.File file58 = null;
        // The following exception was thrown during execution in test generation
        try {
            apacheV2LicenseAppender57.append(file58);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(defaultLog0);
        org.junit.Assert.assertNull(filenameFilter3);
        org.junit.Assert.assertTrue("'" + licenseFilter4 + "' != '" + org.apache.rat.license.LicenseSetFactory.LicenseFilter.all + "'", licenseFilter4.equals(org.apache.rat.license.LicenseSetFactory.LicenseFilter.all));
        org.junit.Assert.assertNotNull(iLicenseSet5);
        org.junit.Assert.assertTrue("'" + addLicenseHeaders6 + "' != '" + org.apache.rat.config.AddLicenseHeaders.FALSE + "'", addLicenseHeaders6.equals(org.apache.rat.config.AddLicenseHeaders.FALSE));
        org.junit.Assert.assertNull(claimStatistic10);
        org.junit.Assert.assertTrue("'" + licenseFilter11 + "' != '" + org.apache.rat.license.LicenseSetFactory.LicenseFilter.all + "'", licenseFilter11.equals(org.apache.rat.license.LicenseSetFactory.LicenseFilter.all));
        org.junit.Assert.assertNull(filenameFilter16);
        org.junit.Assert.assertTrue("'" + licenseFilter17 + "' != '" + org.apache.rat.license.LicenseSetFactory.LicenseFilter.all + "'", licenseFilter17.equals(org.apache.rat.license.LicenseSetFactory.LicenseFilter.all));
        org.junit.Assert.assertNotNull(iLicenseSet18);
        org.junit.Assert.assertTrue("'" + addLicenseHeaders19 + "' != '" + org.apache.rat.config.AddLicenseHeaders.FALSE + "'", addLicenseHeaders19.equals(org.apache.rat.config.AddLicenseHeaders.FALSE));
        org.junit.Assert.assertNull(claimStatistic23);
        org.junit.Assert.assertTrue("'" + licenseFilter24 + "' != '" + org.apache.rat.license.LicenseSetFactory.LicenseFilter.all + "'", licenseFilter24.equals(org.apache.rat.license.LicenseSetFactory.LicenseFilter.all));
        org.junit.Assert.assertNotNull(outputStreamIOSupplier30);
        org.junit.Assert.assertNull(claimStatistic34);
        org.junit.Assert.assertNull(claimStatistic37);
        org.junit.Assert.assertTrue("'" + options38 + "' != '" + org.apache.rat.utils.ReportingSet.Options.OVERWRITE + "'", options38.equals(org.apache.rat.utils.ReportingSet.Options.OVERWRITE));
        org.junit.Assert.assertTrue("'" + level48 + "' != '" + org.apache.rat.utils.Log.Level.ERROR + "'", level48.equals(org.apache.rat.utils.Log.Level.ERROR));
    }

    @Test
    public void test13674() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest27.test13674");
        org.apache.rat.license.SimpleLicenseFamily simpleLicenseFamily0 = new org.apache.rat.license.SimpleLicenseFamily();
        simpleLicenseFamily0.setFamilyName("http://org/apache/rat/meta-data#LicenseFamilyName");
        simpleLicenseFamily0.setFamilyCategory("TMF");
        java.lang.String str5 = simpleLicenseFamily0.getFamilyCategory();
        simpleLicenseFamily0.setFamilyCategory("org/apache/rat/unapproved-licenses.xsl");
        org.junit.Assert.assertEquals("'" + str5 + "' != '" + "TMF" + "'", str5, "TMF");
    }

    @Test
    public void test13675() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest27.test13675");
        org.apache.rat.utils.Log log0 = null;
        org.apache.rat.ReportConfiguration reportConfiguration1 = new org.apache.rat.ReportConfiguration(log0);
        org.apache.rat.report.claim.ClaimStatistic claimStatistic2 = org.apache.rat.Reporter.report(reportConfiguration1);
        org.apache.rat.utils.Log log3 = null;
        org.apache.rat.ReportConfiguration reportConfiguration4 = new org.apache.rat.ReportConfiguration(log3);
        org.apache.rat.report.claim.ClaimStatistic claimStatistic5 = org.apache.rat.Reporter.report(reportConfiguration4);
        org.apache.rat.utils.ReportingSet.Options options6 = org.apache.rat.utils.ReportingSet.Options.OVERWRITE;
        reportConfiguration4.licenseDuplicateOption(options6);
        reportConfiguration1.familyDuplicateOption(options6);
        org.apache.commons.io.function.IOSupplier<java.io.PrintWriter> printWriterIOSupplier9 = reportConfiguration1.getWriter();
        boolean boolean10 = reportConfiguration1.isAddingLicensesForced();
        java.io.FilenameFilter filenameFilter11 = reportConfiguration1.getInputFileFilter();
        org.apache.rat.utils.Log log12 = null;
        org.apache.rat.ReportConfiguration reportConfiguration13 = new org.apache.rat.ReportConfiguration(log12);
        org.apache.rat.utils.ReportingSet.Options options14 = org.apache.rat.utils.ReportingSet.Options.OVERWRITE;
        reportConfiguration13.licenseDuplicateOption(options14);
        org.apache.rat.utils.Log log16 = null;
        org.apache.rat.ReportConfiguration reportConfiguration17 = new org.apache.rat.ReportConfiguration(log16);
        java.io.FilenameFilter filenameFilter18 = reportConfiguration17.getInputFileFilter();
        org.apache.rat.license.LicenseSetFactory.LicenseFilter licenseFilter19 = org.apache.rat.license.LicenseSetFactory.LicenseFilter.all;
        java.util.SortedSet<org.apache.rat.license.ILicense> iLicenseSet20 = reportConfiguration17.getLicenses(licenseFilter19);
        org.apache.rat.config.AddLicenseHeaders addLicenseHeaders21 = org.apache.rat.config.AddLicenseHeaders.FALSE;
        reportConfiguration17.setAddLicenseHeaders(addLicenseHeaders21);
        org.apache.rat.utils.Log log23 = null;
        org.apache.rat.ReportConfiguration reportConfiguration24 = new org.apache.rat.ReportConfiguration(log23);
        org.apache.rat.report.claim.ClaimStatistic claimStatistic25 = org.apache.rat.Reporter.report(reportConfiguration24);
        org.apache.rat.license.LicenseSetFactory.LicenseFilter licenseFilter26 = org.apache.rat.license.LicenseSetFactory.LicenseFilter.all;
        org.apache.rat.Reporter.listLicenses(reportConfiguration24, licenseFilter26);
        org.apache.rat.Reporter.listLicenses(reportConfiguration17, licenseFilter26);
        org.apache.rat.utils.Log log29 = null;
        org.apache.rat.ReportConfiguration reportConfiguration30 = new org.apache.rat.ReportConfiguration(log29);
        java.io.FilenameFilter filenameFilter31 = reportConfiguration30.getInputFileFilter();
        org.apache.rat.license.LicenseSetFactory.LicenseFilter licenseFilter32 = org.apache.rat.license.LicenseSetFactory.LicenseFilter.all;
        java.util.SortedSet<org.apache.rat.license.ILicense> iLicenseSet33 = reportConfiguration30.getLicenses(licenseFilter32);
        org.apache.rat.config.AddLicenseHeaders addLicenseHeaders34 = org.apache.rat.config.AddLicenseHeaders.FALSE;
        reportConfiguration30.setAddLicenseHeaders(addLicenseHeaders34);
        org.apache.rat.utils.Log log36 = null;
        org.apache.rat.ReportConfiguration reportConfiguration37 = new org.apache.rat.ReportConfiguration(log36);
        org.apache.rat.report.claim.ClaimStatistic claimStatistic38 = org.apache.rat.Reporter.report(reportConfiguration37);
        org.apache.rat.license.LicenseSetFactory.LicenseFilter licenseFilter39 = org.apache.rat.license.LicenseSetFactory.LicenseFilter.all;
        org.apache.rat.Reporter.listLicenses(reportConfiguration37, licenseFilter39);
        org.apache.rat.Reporter.listLicenses(reportConfiguration30, licenseFilter39);
        org.apache.rat.Reporter.listLicenses(reportConfiguration17, licenseFilter39);
        org.apache.rat.utils.Log log43 = null;
        org.apache.rat.ReportConfiguration reportConfiguration44 = new org.apache.rat.ReportConfiguration(log43);
        org.apache.commons.io.function.IOSupplier<java.io.OutputStream> outputStreamIOSupplier45 = reportConfiguration44.getOutput();
        reportConfiguration17.setOut(outputStreamIOSupplier45);
        org.apache.rat.utils.Log.Level level47 = org.apache.rat.utils.Log.Level.WARN;
        reportConfiguration17.logLicenseCollisions(level47);
        org.apache.commons.io.filefilter.IOFileFilter iOFileFilter49 = reportConfiguration17.getDirectoryFilter();
        reportConfiguration13.setInputFileFilter((java.io.FilenameFilter) iOFileFilter49);
        reportConfiguration1.setInputFileFilter((java.io.FilenameFilter) iOFileFilter49);
        org.apache.commons.io.filefilter.IOFileFilter iOFileFilter52 = reportConfiguration1.getDirectoryFilter();
        org.apache.rat.utils.Log log53 = null;
        org.apache.rat.ReportConfiguration reportConfiguration54 = new org.apache.rat.ReportConfiguration(log53);
        java.io.FilenameFilter filenameFilter55 = reportConfiguration54.getInputFileFilter();
        org.apache.rat.license.ILicense iLicense56 = null;
        reportConfiguration54.addLicense(iLicense56);
        org.apache.rat.license.ILicenseFamily iLicenseFamily58 = null;
        reportConfiguration54.addFamily(iLicenseFamily58);
        org.apache.commons.io.function.IOSupplier<java.io.InputStream> inputStreamIOSupplier60 = org.apache.rat.Defaults.getPlainStyleSheet();
        reportConfiguration54.setStyleSheet(inputStreamIOSupplier60);
        reportConfiguration1.setStyleSheet(inputStreamIOSupplier60);
        org.junit.Assert.assertNull(claimStatistic2);
        org.junit.Assert.assertNull(claimStatistic5);
        org.junit.Assert.assertTrue("'" + options6 + "' != '" + org.apache.rat.utils.ReportingSet.Options.OVERWRITE + "'", options6.equals(org.apache.rat.utils.ReportingSet.Options.OVERWRITE));
        org.junit.Assert.assertNotNull(printWriterIOSupplier9);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertNull(filenameFilter11);
        org.junit.Assert.assertTrue("'" + options14 + "' != '" + org.apache.rat.utils.ReportingSet.Options.OVERWRITE + "'", options14.equals(org.apache.rat.utils.ReportingSet.Options.OVERWRITE));
        org.junit.Assert.assertNull(filenameFilter18);
        org.junit.Assert.assertTrue("'" + licenseFilter19 + "' != '" + org.apache.rat.license.LicenseSetFactory.LicenseFilter.all + "'", licenseFilter19.equals(org.apache.rat.license.LicenseSetFactory.LicenseFilter.all));
        org.junit.Assert.assertNotNull(iLicenseSet20);
        org.junit.Assert.assertTrue("'" + addLicenseHeaders21 + "' != '" + org.apache.rat.config.AddLicenseHeaders.FALSE + "'", addLicenseHeaders21.equals(org.apache.rat.config.AddLicenseHeaders.FALSE));
        org.junit.Assert.assertNull(claimStatistic25);
        org.junit.Assert.assertTrue("'" + licenseFilter26 + "' != '" + org.apache.rat.license.LicenseSetFactory.LicenseFilter.all + "'", licenseFilter26.equals(org.apache.rat.license.LicenseSetFactory.LicenseFilter.all));
        org.junit.Assert.assertNull(filenameFilter31);
        org.junit.Assert.assertTrue("'" + licenseFilter32 + "' != '" + org.apache.rat.license.LicenseSetFactory.LicenseFilter.all + "'", licenseFilter32.equals(org.apache.rat.license.LicenseSetFactory.LicenseFilter.all));
        org.junit.Assert.assertNotNull(iLicenseSet33);
        org.junit.Assert.assertTrue("'" + addLicenseHeaders34 + "' != '" + org.apache.rat.config.AddLicenseHeaders.FALSE + "'", addLicenseHeaders34.equals(org.apache.rat.config.AddLicenseHeaders.FALSE));
        org.junit.Assert.assertNull(claimStatistic38);
        org.junit.Assert.assertTrue("'" + licenseFilter39 + "' != '" + org.apache.rat.license.LicenseSetFactory.LicenseFilter.all + "'", licenseFilter39.equals(org.apache.rat.license.LicenseSetFactory.LicenseFilter.all));
        org.junit.Assert.assertNotNull(outputStreamIOSupplier45);
        org.junit.Assert.assertTrue("'" + level47 + "' != '" + org.apache.rat.utils.Log.Level.WARN + "'", level47.equals(org.apache.rat.utils.Log.Level.WARN));
        org.junit.Assert.assertNotNull(iOFileFilter49);
        org.junit.Assert.assertNotNull(iOFileFilter52);
        org.junit.Assert.assertNull(filenameFilter55);
        org.junit.Assert.assertNotNull(inputStreamIOSupplier60);
    }

    @Test
    public void test13676() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest27.test13676");
        org.apache.rat.license.SimpleLicenseFamily simpleLicenseFamily0 = new org.apache.rat.license.SimpleLicenseFamily();
        java.lang.String str1 = simpleLicenseFamily0.getFamilyName();
        java.lang.String str2 = simpleLicenseFamily0.getFamilyCategory();
        java.lang.String str3 = simpleLicenseFamily0.getFamilyName();
        simpleLicenseFamily0.setFamilyCategory("3e2b228d-d5ff-4444-8d8c-d614494b2426");
        java.lang.String str6 = simpleLicenseFamily0.getFamilyCategory();
        simpleLicenseFamily0.setFamilyCategory("1ecfe123-9c39-420b-9cd6-8448dafb79f3");
        simpleLicenseFamily0.setFamilyName("MIT  ");
        simpleLicenseFamily0.setFamilyCategory("641dafc1-13c3-45d4-8272-f36f10392c53");
        simpleLicenseFamily0.setFamilyName("a82bfc9b-89da-4114-9842-62c2fb7a2ee4");
        org.junit.Assert.assertNull(str1);
        org.junit.Assert.assertNull(str2);
        org.junit.Assert.assertNull(str3);
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "3e2b228d-d5ff-4444-8d8c-d614494b2426" + "'", str6, "3e2b228d-d5ff-4444-8d8c-d614494b2426");
    }

    @Test
    public void test13677() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest27.test13677");
        org.apache.rat.utils.Log log0 = null;
        org.apache.rat.ReportConfiguration reportConfiguration1 = new org.apache.rat.ReportConfiguration(log0);
        org.apache.rat.report.claim.ClaimStatistic claimStatistic2 = org.apache.rat.Reporter.report(reportConfiguration1);
        org.apache.rat.report.IReportable iReportable3 = null;
        reportConfiguration1.setReportable(iReportable3);
        boolean boolean5 = reportConfiguration1.isAddingLicensesForced();
        org.apache.commons.io.filefilter.IOFileFilter iOFileFilter6 = reportConfiguration1.getDirectoryFilter();
        org.apache.commons.io.filefilter.IOFileFilter iOFileFilter7 = iOFileFilter6.negate();
        java.nio.file.Path path8 = null;
        java.nio.file.attribute.BasicFileAttributes basicFileAttributes9 = null;
        java.nio.file.FileVisitResult fileVisitResult10 = iOFileFilter6.accept(path8, basicFileAttributes9);
        org.junit.Assert.assertNull(claimStatistic2);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertNotNull(iOFileFilter6);
        org.junit.Assert.assertNotNull(iOFileFilter7);
        org.junit.Assert.assertTrue("'" + fileVisitResult10 + "' != '" + java.nio.file.FileVisitResult.TERMINATE + "'", fileVisitResult10.equals(java.nio.file.FileVisitResult.TERMINATE));
    }

    @Test
    public void test13678() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest27.test13678");
        org.apache.rat.configuration.Format format0 = org.apache.rat.configuration.Format.XML;
        org.apache.rat.configuration.LicenseReader licenseReader1 = format0.licenseReader();
        java.util.SortedSet<org.apache.rat.license.ILicense> iLicenseSet2 = licenseReader1.readLicenses();
        java.lang.String[] strArray8 = new java.lang.String[] { "http://org/apache/rat/meta-data#LicenseFamilyCategory", "Datum [ name ='http://org/apache/rat/meta-data#LicenseFamilyCategory',value ='GPL1  ']", "MANIFEST.MF", "AllBuilder:", "The MIT License" };
        org.apache.rat.utils.ReportingSet<java.lang.String> strSet9 = new org.apache.rat.utils.ReportingSet<java.lang.String>();
        boolean boolean10 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strSet9, strArray8);
        boolean boolean12 = strSet9.addIfNotPresent("http://org/apache/rat/meta-data#LicenseFamilyName");
        boolean boolean14 = strSet9.addIfNotPresent("ef7a8b13-64c3-4510-bb0c-dbf208e1e73f");
        java.util.function.Function<java.lang.String, java.lang.String> strFunction15 = null;
        org.apache.rat.utils.ReportingSet<java.lang.String> strSet16 = strSet9.setMsgFormat(strFunction15);
        boolean boolean17 = strSet9.isEmpty();
        org.apache.rat.license.LicenseSetFactory licenseSetFactory18 = new org.apache.rat.license.LicenseSetFactory(iLicenseSet2, (java.util.Collection<java.lang.String>) strSet9);
        org.apache.rat.utils.ReportingSet<java.lang.String> strSet19 = new org.apache.rat.utils.ReportingSet<java.lang.String>();
        java.lang.Object[] objArray20 = strSet19.toArray();
        org.apache.rat.utils.Log log21 = null;
        org.apache.rat.ReportConfiguration reportConfiguration22 = new org.apache.rat.ReportConfiguration(log21);
        reportConfiguration22.addApprovedLicenseCategory(".cvsignore");
        org.apache.rat.utils.Log.Level level25 = org.apache.rat.utils.Log.Level.ERROR;
        reportConfiguration22.logFamilyCollisions(level25);
        org.apache.commons.io.function.IOSupplier<java.io.OutputStream> outputStreamIOSupplier27 = reportConfiguration22.getOutput();
        org.apache.rat.utils.Log log28 = null;
        org.apache.rat.ReportConfiguration reportConfiguration29 = new org.apache.rat.ReportConfiguration(log28);
        reportConfiguration29.addApprovedLicenseCategory(".cvsignore");
        org.apache.rat.utils.Log log32 = null;
        org.apache.rat.ReportConfiguration reportConfiguration33 = new org.apache.rat.ReportConfiguration(log32);
        java.io.FilenameFilter filenameFilter34 = reportConfiguration33.getInputFileFilter();
        org.apache.rat.license.LicenseSetFactory.LicenseFilter licenseFilter35 = org.apache.rat.license.LicenseSetFactory.LicenseFilter.all;
        java.util.SortedSet<org.apache.rat.license.ILicense> iLicenseSet36 = reportConfiguration33.getLicenses(licenseFilter35);
        reportConfiguration29.addLicensesIfNotPresent((java.util.Collection<org.apache.rat.license.ILicense>) iLicenseSet36);
        java.io.FilenameFilter filenameFilter38 = reportConfiguration29.getInputFileFilter();
        org.apache.rat.utils.Log log39 = null;
        org.apache.rat.ReportConfiguration reportConfiguration40 = new org.apache.rat.ReportConfiguration(log39);
        java.io.FilenameFilter filenameFilter41 = reportConfiguration40.getInputFileFilter();
        org.apache.rat.license.LicenseSetFactory.LicenseFilter licenseFilter42 = org.apache.rat.license.LicenseSetFactory.LicenseFilter.all;
        java.util.SortedSet<org.apache.rat.license.ILicense> iLicenseSet43 = reportConfiguration40.getLicenses(licenseFilter42);
        org.apache.rat.config.AddLicenseHeaders addLicenseHeaders44 = org.apache.rat.config.AddLicenseHeaders.FALSE;
        reportConfiguration40.setAddLicenseHeaders(addLicenseHeaders44);
        org.apache.rat.utils.Log log46 = null;
        org.apache.rat.ReportConfiguration reportConfiguration47 = new org.apache.rat.ReportConfiguration(log46);
        org.apache.rat.report.claim.ClaimStatistic claimStatistic48 = org.apache.rat.Reporter.report(reportConfiguration47);
        org.apache.rat.license.LicenseSetFactory.LicenseFilter licenseFilter49 = org.apache.rat.license.LicenseSetFactory.LicenseFilter.all;
        org.apache.rat.Reporter.listLicenses(reportConfiguration47, licenseFilter49);
        org.apache.rat.Reporter.listLicenses(reportConfiguration40, licenseFilter49);
        org.apache.rat.utils.Log log52 = null;
        org.apache.rat.ReportConfiguration reportConfiguration53 = new org.apache.rat.ReportConfiguration(log52);
        java.io.FilenameFilter filenameFilter54 = reportConfiguration53.getInputFileFilter();
        org.apache.rat.license.LicenseSetFactory.LicenseFilter licenseFilter55 = org.apache.rat.license.LicenseSetFactory.LicenseFilter.all;
        java.util.SortedSet<org.apache.rat.license.ILicense> iLicenseSet56 = reportConfiguration53.getLicenses(licenseFilter55);
        org.apache.rat.config.AddLicenseHeaders addLicenseHeaders57 = org.apache.rat.config.AddLicenseHeaders.FALSE;
        reportConfiguration53.setAddLicenseHeaders(addLicenseHeaders57);
        org.apache.rat.utils.Log log59 = null;
        org.apache.rat.ReportConfiguration reportConfiguration60 = new org.apache.rat.ReportConfiguration(log59);
        org.apache.rat.report.claim.ClaimStatistic claimStatistic61 = org.apache.rat.Reporter.report(reportConfiguration60);
        org.apache.rat.license.LicenseSetFactory.LicenseFilter licenseFilter62 = org.apache.rat.license.LicenseSetFactory.LicenseFilter.all;
        org.apache.rat.Reporter.listLicenses(reportConfiguration60, licenseFilter62);
        org.apache.rat.Reporter.listLicenses(reportConfiguration53, licenseFilter62);
        java.util.SortedSet<org.apache.rat.license.ILicenseFamily> iLicenseFamilySet65 = reportConfiguration40.getLicenseFamilies(licenseFilter62);
        org.apache.rat.Reporter.listLicenseFamilies(reportConfiguration29, licenseFilter62);
        java.util.SortedSet<org.apache.rat.license.ILicenseFamily> iLicenseFamilySet67 = reportConfiguration22.getLicenseFamilies(licenseFilter62);
        java.util.Collection<java.lang.String> strCollection68 = null;
        org.apache.rat.license.LicenseFamilySetFactory licenseFamilySetFactory69 = new org.apache.rat.license.LicenseFamilySetFactory(iLicenseFamilySet67, strCollection68);
        boolean boolean70 = strSet19.removeAll((java.util.Collection<org.apache.rat.license.ILicenseFamily>) iLicenseFamilySet67);
        java.util.Spliterator<java.lang.String> strSpliterator71 = strSet19.spliterator();
        org.apache.rat.utils.Log log72 = null;
        org.apache.rat.utils.ReportingSet<java.lang.String> strSet73 = strSet19.setLog(log72);
        org.apache.rat.analysis.matchers.CopyrightMatcher copyrightMatcher78 = new org.apache.rat.analysis.matchers.CopyrightMatcher("W3C Software Copyright null", "767ac5d6-2041-4f1d-ab96-e1ebb601e73c", "98b1fda9-334d-4fbe-9bbd-79d3fc2755c5", "90663eff7ed841bd85a8e8f189198bc6");
        org.apache.rat.analysis.IHeaderMatcher.State state79 = copyrightMatcher78.finalizeState();
        boolean boolean80 = strSet19.equals((java.lang.Object) copyrightMatcher78);
        org.apache.rat.license.LicenseSetFactory licenseSetFactory81 = new org.apache.rat.license.LicenseSetFactory(iLicenseSet2, (java.util.Collection<java.lang.String>) strSet19);
        org.junit.Assert.assertTrue("'" + format0 + "' != '" + org.apache.rat.configuration.Format.XML + "'", format0.equals(org.apache.rat.configuration.Format.XML));
        org.junit.Assert.assertNotNull(licenseReader1);
        org.junit.Assert.assertNotNull(iLicenseSet2);
        org.junit.Assert.assertNotNull(strArray8);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + true + "'", boolean10 == true);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + true + "'", boolean12 == true);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + true + "'", boolean14 == true);
        org.junit.Assert.assertNotNull(strSet16);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + false + "'", boolean17 == false);
        org.junit.Assert.assertNotNull(objArray20);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray20), "[]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray20), "[]");
        org.junit.Assert.assertTrue("'" + level25 + "' != '" + org.apache.rat.utils.Log.Level.ERROR + "'", level25.equals(org.apache.rat.utils.Log.Level.ERROR));
        org.junit.Assert.assertNotNull(outputStreamIOSupplier27);
        org.junit.Assert.assertNull(filenameFilter34);
        org.junit.Assert.assertTrue("'" + licenseFilter35 + "' != '" + org.apache.rat.license.LicenseSetFactory.LicenseFilter.all + "'", licenseFilter35.equals(org.apache.rat.license.LicenseSetFactory.LicenseFilter.all));
        org.junit.Assert.assertNotNull(iLicenseSet36);
        org.junit.Assert.assertNull(filenameFilter38);
        org.junit.Assert.assertNull(filenameFilter41);
        org.junit.Assert.assertTrue("'" + licenseFilter42 + "' != '" + org.apache.rat.license.LicenseSetFactory.LicenseFilter.all + "'", licenseFilter42.equals(org.apache.rat.license.LicenseSetFactory.LicenseFilter.all));
        org.junit.Assert.assertNotNull(iLicenseSet43);
        org.junit.Assert.assertTrue("'" + addLicenseHeaders44 + "' != '" + org.apache.rat.config.AddLicenseHeaders.FALSE + "'", addLicenseHeaders44.equals(org.apache.rat.config.AddLicenseHeaders.FALSE));
        org.junit.Assert.assertNull(claimStatistic48);
        org.junit.Assert.assertTrue("'" + licenseFilter49 + "' != '" + org.apache.rat.license.LicenseSetFactory.LicenseFilter.all + "'", licenseFilter49.equals(org.apache.rat.license.LicenseSetFactory.LicenseFilter.all));
        org.junit.Assert.assertNull(filenameFilter54);
        org.junit.Assert.assertTrue("'" + licenseFilter55 + "' != '" + org.apache.rat.license.LicenseSetFactory.LicenseFilter.all + "'", licenseFilter55.equals(org.apache.rat.license.LicenseSetFactory.LicenseFilter.all));
        org.junit.Assert.assertNotNull(iLicenseSet56);
        org.junit.Assert.assertTrue("'" + addLicenseHeaders57 + "' != '" + org.apache.rat.config.AddLicenseHeaders.FALSE + "'", addLicenseHeaders57.equals(org.apache.rat.config.AddLicenseHeaders.FALSE));
        org.junit.Assert.assertNull(claimStatistic61);
        org.junit.Assert.assertTrue("'" + licenseFilter62 + "' != '" + org.apache.rat.license.LicenseSetFactory.LicenseFilter.all + "'", licenseFilter62.equals(org.apache.rat.license.LicenseSetFactory.LicenseFilter.all));
        org.junit.Assert.assertNotNull(iLicenseFamilySet65);
        org.junit.Assert.assertNotNull(iLicenseFamilySet67);
        org.junit.Assert.assertTrue("'" + boolean70 + "' != '" + false + "'", boolean70 == false);
        org.junit.Assert.assertNotNull(strSpliterator71);
        org.junit.Assert.assertNotNull(strSet73);
        org.junit.Assert.assertTrue("'" + state79 + "' != '" + org.apache.rat.analysis.IHeaderMatcher.State.f + "'", state79.equals(org.apache.rat.analysis.IHeaderMatcher.State.f));
        org.junit.Assert.assertTrue("'" + boolean80 + "' != '" + false + "'", boolean80 == false);
    }

    @Test
    public void test13679() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest27.test13679");
        org.apache.rat.utils.Log log0 = null;
        org.apache.rat.ReportConfiguration reportConfiguration1 = new org.apache.rat.ReportConfiguration(log0);
        org.apache.rat.report.claim.ClaimStatistic claimStatistic2 = org.apache.rat.Reporter.report(reportConfiguration1);
        org.apache.commons.io.function.IOSupplier<java.io.OutputStream> outputStreamIOSupplier3 = reportConfiguration1.getOutput();
        org.apache.rat.license.ILicense iLicense4 = null;
        reportConfiguration1.addLicense(iLicense4);
        reportConfiguration1.setCopyrightMessage("Copyright Builder: s:null e:null o:null");
        org.apache.rat.utils.Log log8 = reportConfiguration1.getLog();
        org.apache.rat.license.ILicense[] iLicenseArray9 = new org.apache.rat.license.ILicense[] {};
        java.util.TreeSet<org.apache.rat.license.ILicense> iLicenseSet10 = new java.util.TreeSet<org.apache.rat.license.ILicense>();
        boolean boolean11 = java.util.Collections.addAll((java.util.Collection<org.apache.rat.license.ILicense>) iLicenseSet10, iLicenseArray9);
        java.lang.String[] strArray24 = new java.lang.String[] { "GPL2 ", "GPL1 ", "notice", "http://org/apache/rat/meta-data#LicenseFamilyName", "notice", "GPL2 ", "http://org/apache/rat/meta-data#LicenseFamilyName", "", "GPL2 ", "", "GPL1 ", "hi!" };
        java.util.ArrayList<java.lang.String> strList25 = new java.util.ArrayList<java.lang.String>();
        boolean boolean26 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strList25, strArray24);
        org.apache.rat.license.LicenseSetFactory licenseSetFactory27 = new org.apache.rat.license.LicenseSetFactory((java.util.SortedSet<org.apache.rat.license.ILicense>) iLicenseSet10, (java.util.Collection<java.lang.String>) strList25);
        org.apache.rat.utils.ReportingSet<org.apache.rat.license.ILicense> iLicenseSet28 = new org.apache.rat.utils.ReportingSet<org.apache.rat.license.ILicense>((java.util.SortedSet<org.apache.rat.license.ILicense>) iLicenseSet10);
        java.util.Collection<java.lang.String> strCollection29 = null;
        org.apache.rat.license.LicenseSetFactory licenseSetFactory30 = new org.apache.rat.license.LicenseSetFactory((java.util.SortedSet<org.apache.rat.license.ILicense>) iLicenseSet10, strCollection29);
        org.apache.rat.utils.DefaultLog defaultLog31 = org.apache.rat.utils.DefaultLog.INSTANCE;
        org.apache.rat.license.ILicense.Builder builder32 = org.apache.rat.license.ILicense.builder();
        org.apache.rat.license.ILicense.Builder builder34 = builder32.setLicenseFamilyCategory("");
        org.apache.rat.analysis.matchers.CopyrightMatcher copyrightMatcher38 = new org.apache.rat.analysis.matchers.CopyrightMatcher("", "GPL1 ", "hi!");
        org.apache.rat.analysis.IHeaderMatcher.State state39 = copyrightMatcher38.finalizeState();
        org.apache.rat.license.ILicense.Builder builder40 = builder34.setMatcher((org.apache.rat.analysis.IHeaderMatcher) copyrightMatcher38);
        org.apache.rat.license.ILicense.Builder builder42 = builder40.setLicenseFamilyCategory("");
        defaultLog31.error((java.lang.Object) builder42);
        org.apache.rat.utils.Log.Level level44 = org.apache.rat.utils.Log.Level.INFO;
        defaultLog31.log(level44, "JAVA");
        org.apache.rat.license.LicenseSetFactory.LicenseFilter licenseFilter47 = org.apache.rat.license.LicenseSetFactory.LicenseFilter.approved;
        defaultLog31.info((java.lang.Object) licenseFilter47);
        java.util.SortedSet<org.apache.rat.license.ILicenseFamily> iLicenseFamilySet49 = licenseSetFactory30.getLicenseFamilies(licenseFilter47);
        java.util.SortedSet<org.apache.rat.license.ILicenseFamily> iLicenseFamilySet50 = reportConfiguration1.getLicenseFamilies(licenseFilter47);
        org.junit.Assert.assertNull(claimStatistic2);
        org.junit.Assert.assertNotNull(outputStreamIOSupplier3);
        org.junit.Assert.assertNull(log8);
        org.junit.Assert.assertNotNull(iLicenseArray9);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
        org.junit.Assert.assertNotNull(strArray24);
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + true + "'", boolean26 == true);
        org.junit.Assert.assertNotNull(defaultLog31);
        org.junit.Assert.assertNotNull(builder32);
        org.junit.Assert.assertNotNull(builder34);
        org.junit.Assert.assertTrue("'" + state39 + "' != '" + org.apache.rat.analysis.IHeaderMatcher.State.f + "'", state39.equals(org.apache.rat.analysis.IHeaderMatcher.State.f));
        org.junit.Assert.assertNotNull(builder40);
        org.junit.Assert.assertNotNull(builder42);
        org.junit.Assert.assertTrue("'" + level44 + "' != '" + org.apache.rat.utils.Log.Level.INFO + "'", level44.equals(org.apache.rat.utils.Log.Level.INFO));
        org.junit.Assert.assertTrue("'" + licenseFilter47 + "' != '" + org.apache.rat.license.LicenseSetFactory.LicenseFilter.approved + "'", licenseFilter47.equals(org.apache.rat.license.LicenseSetFactory.LicenseFilter.approved));
        org.junit.Assert.assertNotNull(iLicenseFamilySet49);
        org.junit.Assert.assertNotNull(iLicenseFamilySet50);
    }

    @Test
    public void test13680() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest27.test13680");
        org.apache.rat.header.HeaderBean headerBean0 = new org.apache.rat.header.HeaderBean();
        boolean boolean1 = headerBean0.isMatch();
        headerBean0.setMatch(false);
        headerBean0.setMatch(false);
        java.util.regex.Pattern pattern6 = null;
        headerBean0.setHeaderPattern(pattern6);
        java.util.regex.Pattern pattern8 = null;
        headerBean0.setHeaderPattern(pattern8);
        headerBean0.setMatch(true);
        boolean boolean12 = headerBean0.isMatch();
        org.junit.Assert.assertTrue("'" + boolean1 + "' != '" + false + "'", boolean1 == false);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + true + "'", boolean12 == true);
    }

    @Test
    public void test13681() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest27.test13681");
        org.apache.rat.configuration.builders.SpdxBuilder spdxBuilder0 = org.apache.rat.analysis.IHeaderMatcher.Builder.spdx();
        java.lang.String str1 = spdxBuilder0.toString();
        org.apache.rat.configuration.builders.SpdxBuilder spdxBuilder3 = spdxBuilder0.setName("ef7a8b13-64c3-4510-bb0c-dbf208e1e73f");
        org.apache.rat.analysis.IHeaderMatcher iHeaderMatcher4 = spdxBuilder0.build();
        org.apache.rat.analysis.IHeaderMatcher iHeaderMatcher5 = spdxBuilder0.build();
        org.apache.rat.analysis.IHeaderMatcher iHeaderMatcher6 = spdxBuilder0.build();
        org.apache.rat.analysis.IHeaderMatcher iHeaderMatcher7 = spdxBuilder0.build();
        org.apache.rat.configuration.builders.SpdxBuilder spdxBuilder9 = spdxBuilder0.setName("7d01b1b3-e7b9-4f85-b3dd-e0334dea8844");
        org.apache.rat.configuration.builders.SpdxBuilder spdxBuilder11 = spdxBuilder0.setName("Datum [ name ='http://org/apache/rat/meta-data#ApprovedLicense',value ='false ']");
        org.apache.rat.configuration.builders.SpdxBuilder spdxBuilder13 = spdxBuilder0.setName("f489c72e-9df8-4339-86cc-35c229864db7");
        java.lang.String str14 = spdxBuilder13.toString();
        org.junit.Assert.assertNotNull(spdxBuilder0);
        org.junit.Assert.assertEquals("'" + str1 + "' != '" + "SpdxBuilder: null" + "'", str1, "SpdxBuilder: null");
        org.junit.Assert.assertNotNull(spdxBuilder3);
        org.junit.Assert.assertNotNull(iHeaderMatcher4);
        org.junit.Assert.assertNotNull(iHeaderMatcher5);
        org.junit.Assert.assertNotNull(iHeaderMatcher6);
        org.junit.Assert.assertNotNull(iHeaderMatcher7);
        org.junit.Assert.assertNotNull(spdxBuilder9);
        org.junit.Assert.assertNotNull(spdxBuilder11);
        org.junit.Assert.assertNotNull(spdxBuilder13);
        org.junit.Assert.assertEquals("'" + str14 + "' != '" + "SpdxBuilder: f489c72e-9df8-4339-86cc-35c229864db7" + "'", str14, "SpdxBuilder: f489c72e-9df8-4339-86cc-35c229864db7");
    }

    @Test
    public void test13682() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest27.test13682");
        org.apache.rat.utils.Log log0 = null;
        org.apache.rat.ReportConfiguration reportConfiguration1 = new org.apache.rat.ReportConfiguration(log0);
        org.apache.rat.report.claim.ClaimStatistic claimStatistic2 = org.apache.rat.Reporter.report(reportConfiguration1);
        org.apache.rat.utils.Log log3 = null;
        org.apache.rat.ReportConfiguration reportConfiguration4 = new org.apache.rat.ReportConfiguration(log3);
        org.apache.rat.report.claim.ClaimStatistic claimStatistic5 = org.apache.rat.Reporter.report(reportConfiguration4);
        org.apache.rat.utils.ReportingSet.Options options6 = org.apache.rat.utils.ReportingSet.Options.OVERWRITE;
        reportConfiguration4.licenseDuplicateOption(options6);
        reportConfiguration1.familyDuplicateOption(options6);
        org.apache.commons.io.function.IOSupplier<java.io.PrintWriter> printWriterIOSupplier9 = reportConfiguration1.getWriter();
        org.apache.rat.utils.Log log10 = null;
        org.apache.rat.ReportConfiguration reportConfiguration11 = new org.apache.rat.ReportConfiguration(log10);
        reportConfiguration11.addApprovedLicenseCategory(".cvsignore");
        org.apache.rat.utils.Log.Level level14 = org.apache.rat.utils.Log.Level.ERROR;
        reportConfiguration11.logFamilyCollisions(level14);
        reportConfiguration1.logFamilyCollisions(level14);
        org.apache.commons.io.filefilter.IOFileFilter iOFileFilter17 = reportConfiguration1.getDirectoryFilter();
        org.apache.rat.utils.Log log18 = null;
        org.apache.rat.ReportConfiguration reportConfiguration19 = new org.apache.rat.ReportConfiguration(log18);
        reportConfiguration19.addApprovedLicenseCategory(".cvsignore");
        org.apache.rat.utils.Log.Level level22 = org.apache.rat.utils.Log.Level.ERROR;
        reportConfiguration19.logFamilyCollisions(level22);
        org.apache.commons.io.filefilter.IOFileFilter iOFileFilter24 = reportConfiguration19.getDirectoryFilter();
        org.apache.commons.io.filefilter.IOFileFilter iOFileFilter25 = iOFileFilter17.or(iOFileFilter24);
        org.apache.commons.io.filefilter.IOFileFilter iOFileFilter26 = iOFileFilter17.negate();
        java.nio.file.Path path27 = null;
        boolean boolean28 = iOFileFilter26.matches(path27);
        org.junit.Assert.assertNull(claimStatistic2);
        org.junit.Assert.assertNull(claimStatistic5);
        org.junit.Assert.assertTrue("'" + options6 + "' != '" + org.apache.rat.utils.ReportingSet.Options.OVERWRITE + "'", options6.equals(org.apache.rat.utils.ReportingSet.Options.OVERWRITE));
        org.junit.Assert.assertNotNull(printWriterIOSupplier9);
        org.junit.Assert.assertTrue("'" + level14 + "' != '" + org.apache.rat.utils.Log.Level.ERROR + "'", level14.equals(org.apache.rat.utils.Log.Level.ERROR));
        org.junit.Assert.assertNotNull(iOFileFilter17);
        org.junit.Assert.assertTrue("'" + level22 + "' != '" + org.apache.rat.utils.Log.Level.ERROR + "'", level22.equals(org.apache.rat.utils.Log.Level.ERROR));
        org.junit.Assert.assertNotNull(iOFileFilter24);
        org.junit.Assert.assertNotNull(iOFileFilter25);
        org.junit.Assert.assertNotNull(iOFileFilter26);
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + true + "'", boolean28 == true);
    }

    @Test
    public void test13683() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest27.test13683");
        org.apache.rat.configuration.builders.NotBuilder notBuilder0 = new org.apache.rat.configuration.builders.NotBuilder();
        java.lang.String str1 = notBuilder0.toString();
        org.apache.rat.configuration.builders.MatcherRefBuilder matcherRefBuilder2 = org.apache.rat.analysis.IHeaderMatcher.Builder.matcherRef();
        boolean boolean3 = matcherRefBuilder2.hasId();
        java.util.Map<java.lang.String, org.apache.rat.analysis.IHeaderMatcher> strMap4 = null;
        org.apache.rat.configuration.builders.MatcherRefBuilder matcherRefBuilder5 = matcherRefBuilder2.setMatchers(strMap4);
        org.apache.rat.configuration.builders.AllBuilder allBuilder6 = new org.apache.rat.configuration.builders.AllBuilder();
        org.apache.rat.configuration.builders.CopyrightBuilder copyrightBuilder7 = org.apache.rat.analysis.IHeaderMatcher.Builder.copyright();
        org.apache.rat.configuration.builders.CopyrightBuilder copyrightBuilder9 = copyrightBuilder7.setStart("OASIS");
        java.lang.String str10 = copyrightBuilder7.toString();
        org.apache.rat.configuration.builders.CopyrightBuilder copyrightBuilder12 = copyrightBuilder7.setStart("223f0aba-15d4-49e9-901e-5740c137aebf");
        org.apache.rat.configuration.builders.MatcherRefBuilder matcherRefBuilder13 = org.apache.rat.analysis.IHeaderMatcher.Builder.matcherRef();
        boolean boolean14 = matcherRefBuilder13.hasId();
        org.apache.rat.configuration.builders.CopyrightBuilder copyrightBuilder15 = org.apache.rat.analysis.IHeaderMatcher.Builder.copyright();
        org.apache.rat.configuration.builders.CopyrightBuilder copyrightBuilder17 = copyrightBuilder15.setStart("OASIS");
        java.lang.String str18 = copyrightBuilder15.toString();
        org.apache.rat.configuration.builders.CopyrightBuilder copyrightBuilder20 = copyrightBuilder15.setStart("223f0aba-15d4-49e9-901e-5740c137aebf");
        org.apache.rat.configuration.builders.CopyrightBuilder copyrightBuilder21 = org.apache.rat.analysis.IHeaderMatcher.Builder.copyright();
        org.apache.rat.configuration.builders.CopyrightBuilder copyrightBuilder22 = org.apache.rat.analysis.IHeaderMatcher.Builder.copyright();
        java.lang.String str23 = copyrightBuilder22.toString();
        org.apache.rat.configuration.builders.CopyrightBuilder copyrightBuilder25 = copyrightBuilder22.setEnd(".cvsignore");
        boolean boolean26 = copyrightBuilder22.hasId();
        org.apache.rat.configuration.builders.CopyrightBuilder copyrightBuilder27 = org.apache.rat.analysis.IHeaderMatcher.Builder.copyright();
        java.lang.String str28 = copyrightBuilder27.toString();
        org.apache.rat.configuration.builders.CopyrightBuilder copyrightBuilder30 = copyrightBuilder27.setEnd(".cvsignore");
        boolean boolean31 = copyrightBuilder27.hasId();
        java.lang.String str32 = copyrightBuilder27.toString();
        org.apache.rat.configuration.builders.CopyrightBuilder copyrightBuilder33 = org.apache.rat.analysis.IHeaderMatcher.Builder.copyright();
        org.apache.rat.configuration.builders.CopyrightBuilder copyrightBuilder35 = copyrightBuilder33.setStart("OASIS");
        org.apache.rat.configuration.builders.AnyBuilder anyBuilder36 = org.apache.rat.analysis.IHeaderMatcher.Builder.any();
        org.apache.rat.configuration.builders.MatcherRefBuilder matcherRefBuilder37 = org.apache.rat.analysis.IHeaderMatcher.Builder.matcherRef();
        boolean boolean38 = matcherRefBuilder37.hasId();
        java.util.Map<java.lang.String, org.apache.rat.analysis.IHeaderMatcher> strMap39 = null;
        org.apache.rat.configuration.builders.MatcherRefBuilder matcherRefBuilder40 = matcherRefBuilder37.setMatchers(strMap39);
        org.apache.rat.configuration.builders.CopyrightBuilder copyrightBuilder41 = org.apache.rat.analysis.IHeaderMatcher.Builder.copyright();
        org.apache.rat.configuration.builders.MatcherRefBuilder matcherRefBuilder42 = org.apache.rat.analysis.IHeaderMatcher.Builder.matcherRef();
        boolean boolean43 = matcherRefBuilder42.hasId();
        java.lang.String str44 = matcherRefBuilder42.toString();
        java.util.Map<java.lang.String, org.apache.rat.analysis.IHeaderMatcher> strMap45 = null;
        org.apache.rat.configuration.builders.MatcherRefBuilder matcherRefBuilder46 = matcherRefBuilder42.setMatchers(strMap45);
        org.apache.rat.analysis.IHeaderMatcher.Builder[] builderArray47 = new org.apache.rat.analysis.IHeaderMatcher.Builder[] { matcherRefBuilder2, allBuilder6, copyrightBuilder12, matcherRefBuilder13, copyrightBuilder15, copyrightBuilder21, copyrightBuilder22, copyrightBuilder27, copyrightBuilder33, anyBuilder36, matcherRefBuilder37, copyrightBuilder41, matcherRefBuilder42 };
        java.util.ArrayList<org.apache.rat.analysis.IHeaderMatcher.Builder> builderList48 = new java.util.ArrayList<org.apache.rat.analysis.IHeaderMatcher.Builder>();
        boolean boolean49 = java.util.Collections.addAll((java.util.Collection<org.apache.rat.analysis.IHeaderMatcher.Builder>) builderList48, builderArray47);
        org.apache.rat.configuration.builders.AbstractBuilder abstractBuilder50 = notBuilder0.add((java.util.Collection<org.apache.rat.analysis.IHeaderMatcher.Builder>) builderList48);
        java.lang.String str51 = notBuilder0.toString();
        java.lang.String str52 = notBuilder0.toString();
        java.lang.String str53 = notBuilder0.toString();
        java.lang.String str54 = notBuilder0.toString();
        java.lang.String str55 = notBuilder0.toString();
        org.apache.rat.configuration.builders.AnyBuilder anyBuilder56 = org.apache.rat.analysis.IHeaderMatcher.Builder.any();
        java.lang.String str57 = anyBuilder56.toString();
        org.apache.rat.analysis.IHeaderMatcher iHeaderMatcher58 = anyBuilder56.build();
        java.util.List<org.apache.rat.analysis.IHeaderMatcher> iHeaderMatcherList59 = anyBuilder56.getChildren();
        java.lang.String str60 = anyBuilder56.toString();
        java.lang.String str61 = anyBuilder56.toString();
        org.apache.rat.analysis.IHeaderMatcher iHeaderMatcher62 = anyBuilder56.build();
        org.apache.rat.configuration.builders.AbstractBuilder abstractBuilder63 = notBuilder0.add((org.apache.rat.analysis.IHeaderMatcher.Builder) anyBuilder56);
        // The following exception was thrown during execution in test generation
        try {
            java.util.List<org.apache.rat.analysis.IHeaderMatcher> iHeaderMatcherList64 = notBuilder0.getChildren();
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertEquals("'" + str1 + "' != '" + "NotBuilder: null" + "'", str1, "NotBuilder: null");
        org.junit.Assert.assertNotNull(matcherRefBuilder2);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertNotNull(matcherRefBuilder5);
        org.junit.Assert.assertNotNull(copyrightBuilder7);
        org.junit.Assert.assertNotNull(copyrightBuilder9);
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "Copyright Builder: s:OASIS e:null o:null" + "'", str10, "Copyright Builder: s:OASIS e:null o:null");
        org.junit.Assert.assertNotNull(copyrightBuilder12);
        org.junit.Assert.assertNotNull(matcherRefBuilder13);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
        org.junit.Assert.assertNotNull(copyrightBuilder15);
        org.junit.Assert.assertNotNull(copyrightBuilder17);
        org.junit.Assert.assertEquals("'" + str18 + "' != '" + "Copyright Builder: s:OASIS e:null o:null" + "'", str18, "Copyright Builder: s:OASIS e:null o:null");
        org.junit.Assert.assertNotNull(copyrightBuilder20);
        org.junit.Assert.assertNotNull(copyrightBuilder21);
        org.junit.Assert.assertNotNull(copyrightBuilder22);
        org.junit.Assert.assertEquals("'" + str23 + "' != '" + "Copyright Builder: s:null e:null o:null" + "'", str23, "Copyright Builder: s:null e:null o:null");
        org.junit.Assert.assertNotNull(copyrightBuilder25);
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + false + "'", boolean26 == false);
        org.junit.Assert.assertNotNull(copyrightBuilder27);
        org.junit.Assert.assertEquals("'" + str28 + "' != '" + "Copyright Builder: s:null e:null o:null" + "'", str28, "Copyright Builder: s:null e:null o:null");
        org.junit.Assert.assertNotNull(copyrightBuilder30);
        org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + false + "'", boolean31 == false);
        org.junit.Assert.assertEquals("'" + str32 + "' != '" + "Copyright Builder: s:null e:.cvsignore o:null" + "'", str32, "Copyright Builder: s:null e:.cvsignore o:null");
        org.junit.Assert.assertNotNull(copyrightBuilder33);
        org.junit.Assert.assertNotNull(copyrightBuilder35);
        org.junit.Assert.assertNotNull(anyBuilder36);
        org.junit.Assert.assertNotNull(matcherRefBuilder37);
        org.junit.Assert.assertTrue("'" + boolean38 + "' != '" + false + "'", boolean38 == false);
        org.junit.Assert.assertNotNull(matcherRefBuilder40);
        org.junit.Assert.assertNotNull(copyrightBuilder41);
        org.junit.Assert.assertNotNull(matcherRefBuilder42);
        org.junit.Assert.assertTrue("'" + boolean43 + "' != '" + false + "'", boolean43 == false);
        org.junit.Assert.assertEquals("'" + str44 + "' != '" + "MathcerRefBuilder: null" + "'", str44, "MathcerRefBuilder: null");
        org.junit.Assert.assertNotNull(matcherRefBuilder46);
        org.junit.Assert.assertNotNull(builderArray47);
        org.junit.Assert.assertTrue("'" + boolean49 + "' != '" + true + "'", boolean49 == true);
        org.junit.Assert.assertNotNull(abstractBuilder50);
        org.junit.Assert.assertEquals("'" + str51 + "' != '" + "NotBuilder: MathcerRefBuilder: null" + "'", str51, "NotBuilder: MathcerRefBuilder: null");
        org.junit.Assert.assertEquals("'" + str52 + "' != '" + "NotBuilder: MathcerRefBuilder: null" + "'", str52, "NotBuilder: MathcerRefBuilder: null");
        org.junit.Assert.assertEquals("'" + str53 + "' != '" + "NotBuilder: MathcerRefBuilder: null" + "'", str53, "NotBuilder: MathcerRefBuilder: null");
        org.junit.Assert.assertEquals("'" + str54 + "' != '" + "NotBuilder: MathcerRefBuilder: null" + "'", str54, "NotBuilder: MathcerRefBuilder: null");
        org.junit.Assert.assertEquals("'" + str55 + "' != '" + "NotBuilder: MathcerRefBuilder: null" + "'", str55, "NotBuilder: MathcerRefBuilder: null");
        org.junit.Assert.assertNotNull(anyBuilder56);
        org.junit.Assert.assertEquals("'" + str57 + "' != '" + "AnyBuilder:" + "'", str57, "AnyBuilder:");
        org.junit.Assert.assertNotNull(iHeaderMatcher58);
        org.junit.Assert.assertNotNull(iHeaderMatcherList59);
        org.junit.Assert.assertEquals("'" + str60 + "' != '" + "AnyBuilder:" + "'", str60, "AnyBuilder:");
        org.junit.Assert.assertEquals("'" + str61 + "' != '" + "AnyBuilder:" + "'", str61, "AnyBuilder:");
        org.junit.Assert.assertNotNull(iHeaderMatcher62);
        org.junit.Assert.assertNotNull(abstractBuilder63);
    }

    @Test
    public void test13684() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest27.test13684");
        org.apache.rat.configuration.Format format2 = org.apache.rat.configuration.Format.XML;
        org.apache.rat.configuration.LicenseReader licenseReader3 = format2.licenseReader();
        org.apache.rat.configuration.MatcherReader matcherReader4 = format2.matcherReader();
        org.apache.rat.configuration.LicenseReader licenseReader5 = format2.licenseReader();
        java.util.SortedSet<org.apache.rat.license.ILicense> iLicenseSet6 = licenseReader5.readLicenses();
        org.apache.rat.license.ILicense iLicense7 = org.apache.rat.license.LicenseSetFactory.search("Datum [ name ='http://org/apache/rat/meta-data#LicenseFamilyCategory',value ='GPL1  ']", iLicenseSet6);
        java.lang.String[] strArray13 = new java.lang.String[] { "http://org/apache/rat/meta-data#LicenseFamilyCategory", "Datum [ name ='http://org/apache/rat/meta-data#LicenseFamilyCategory',value ='GPL1  ']", "MANIFEST.MF", "AllBuilder:", "The MIT License" };
        org.apache.rat.utils.ReportingSet<java.lang.String> strSet14 = new org.apache.rat.utils.ReportingSet<java.lang.String>();
        boolean boolean15 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strSet14, strArray13);
        boolean boolean17 = strSet14.addIfNotPresent("http://org/apache/rat/meta-data#LicenseFamilyName");
        boolean boolean19 = strSet14.addIfNotPresent("ef7a8b13-64c3-4510-bb0c-dbf208e1e73f");
        java.util.function.Function<java.lang.String, java.lang.String> strFunction20 = null;
        org.apache.rat.utils.ReportingSet<java.lang.String> strSet21 = strSet14.setMsgFormat(strFunction20);
        org.apache.rat.utils.DefaultLog defaultLog22 = org.apache.rat.utils.DefaultLog.INSTANCE;
        org.apache.rat.utils.Log log23 = null;
        org.apache.rat.ReportConfiguration reportConfiguration24 = new org.apache.rat.ReportConfiguration(log23);
        java.io.FilenameFilter filenameFilter25 = reportConfiguration24.getInputFileFilter();
        org.apache.rat.license.LicenseSetFactory.LicenseFilter licenseFilter26 = org.apache.rat.license.LicenseSetFactory.LicenseFilter.all;
        java.util.SortedSet<org.apache.rat.license.ILicense> iLicenseSet27 = reportConfiguration24.getLicenses(licenseFilter26);
        org.apache.rat.config.AddLicenseHeaders addLicenseHeaders28 = org.apache.rat.config.AddLicenseHeaders.FALSE;
        reportConfiguration24.setAddLicenseHeaders(addLicenseHeaders28);
        org.apache.rat.utils.Log log30 = null;
        org.apache.rat.ReportConfiguration reportConfiguration31 = new org.apache.rat.ReportConfiguration(log30);
        org.apache.rat.report.claim.ClaimStatistic claimStatistic32 = org.apache.rat.Reporter.report(reportConfiguration31);
        org.apache.rat.license.LicenseSetFactory.LicenseFilter licenseFilter33 = org.apache.rat.license.LicenseSetFactory.LicenseFilter.all;
        org.apache.rat.Reporter.listLicenses(reportConfiguration31, licenseFilter33);
        org.apache.rat.Reporter.listLicenses(reportConfiguration24, licenseFilter33);
        org.apache.rat.utils.Log log36 = null;
        org.apache.rat.ReportConfiguration reportConfiguration37 = new org.apache.rat.ReportConfiguration(log36);
        java.io.FilenameFilter filenameFilter38 = reportConfiguration37.getInputFileFilter();
        org.apache.rat.license.LicenseSetFactory.LicenseFilter licenseFilter39 = org.apache.rat.license.LicenseSetFactory.LicenseFilter.all;
        java.util.SortedSet<org.apache.rat.license.ILicense> iLicenseSet40 = reportConfiguration37.getLicenses(licenseFilter39);
        org.apache.rat.config.AddLicenseHeaders addLicenseHeaders41 = org.apache.rat.config.AddLicenseHeaders.FALSE;
        reportConfiguration37.setAddLicenseHeaders(addLicenseHeaders41);
        org.apache.rat.utils.Log log43 = null;
        org.apache.rat.ReportConfiguration reportConfiguration44 = new org.apache.rat.ReportConfiguration(log43);
        org.apache.rat.report.claim.ClaimStatistic claimStatistic45 = org.apache.rat.Reporter.report(reportConfiguration44);
        org.apache.rat.license.LicenseSetFactory.LicenseFilter licenseFilter46 = org.apache.rat.license.LicenseSetFactory.LicenseFilter.all;
        org.apache.rat.Reporter.listLicenses(reportConfiguration44, licenseFilter46);
        org.apache.rat.Reporter.listLicenses(reportConfiguration37, licenseFilter46);
        org.apache.rat.Reporter.listLicenses(reportConfiguration24, licenseFilter46);
        org.apache.rat.utils.Log log50 = null;
        org.apache.rat.ReportConfiguration reportConfiguration51 = new org.apache.rat.ReportConfiguration(log50);
        org.apache.commons.io.function.IOSupplier<java.io.OutputStream> outputStreamIOSupplier52 = reportConfiguration51.getOutput();
        reportConfiguration24.setOut(outputStreamIOSupplier52);
        org.apache.rat.utils.Log log54 = null;
        org.apache.rat.ReportConfiguration reportConfiguration55 = new org.apache.rat.ReportConfiguration(log54);
        org.apache.rat.report.claim.ClaimStatistic claimStatistic56 = org.apache.rat.Reporter.report(reportConfiguration55);
        org.apache.rat.utils.Log log57 = null;
        org.apache.rat.ReportConfiguration reportConfiguration58 = new org.apache.rat.ReportConfiguration(log57);
        org.apache.rat.report.claim.ClaimStatistic claimStatistic59 = org.apache.rat.Reporter.report(reportConfiguration58);
        org.apache.rat.utils.ReportingSet.Options options60 = org.apache.rat.utils.ReportingSet.Options.OVERWRITE;
        reportConfiguration58.licenseDuplicateOption(options60);
        reportConfiguration55.familyDuplicateOption(options60);
        reportConfiguration24.licenseDuplicateOption(options60);
        reportConfiguration24.addApprovedLicenseCategory("W3C Document Copyright");
        org.apache.rat.utils.Log log66 = null;
        org.apache.rat.ReportConfiguration reportConfiguration67 = new org.apache.rat.ReportConfiguration(log66);
        reportConfiguration67.addApprovedLicenseCategory(".cvsignore");
        org.apache.rat.utils.Log.Level level70 = org.apache.rat.utils.Log.Level.ERROR;
        reportConfiguration67.logLicenseCollisions(level70);
        reportConfiguration24.logLicenseCollisions(level70);
        defaultLog22.setLevel(level70);
        defaultLog22.warn((java.lang.Object) "GNU General Public License, version 3");
        org.apache.rat.ReportConfiguration reportConfiguration76 = new org.apache.rat.ReportConfiguration((org.apache.rat.utils.Log) defaultLog22);
        org.apache.rat.utils.DefaultLog defaultLog77 = org.apache.rat.utils.DefaultLog.INSTANCE;
        org.apache.rat.utils.Log log78 = null;
        org.apache.rat.ReportConfiguration reportConfiguration79 = new org.apache.rat.ReportConfiguration(log78);
        reportConfiguration79.addApprovedLicenseCategory(".cvsignore");
        org.apache.rat.utils.Log.Level level82 = org.apache.rat.utils.Log.Level.ERROR;
        reportConfiguration79.logFamilyCollisions(level82);
        defaultLog77.setLevel(level82);
        defaultLog22.debug((java.lang.Object) level82);
        org.apache.rat.utils.ReportingSet<java.lang.String> strSet86 = strSet21.setLogLevel(level82);
        org.apache.rat.license.LicenseSetFactory licenseSetFactory87 = new org.apache.rat.license.LicenseSetFactory(iLicenseSet6, (java.util.Collection<java.lang.String>) strSet86);
        org.apache.rat.utils.ReportingSet<org.apache.rat.license.ILicense> iLicenseSet88 = new org.apache.rat.utils.ReportingSet<org.apache.rat.license.ILicense>(iLicenseSet6);
        org.apache.rat.license.ILicense iLicense89 = org.apache.rat.license.LicenseSetFactory.search("008d1eb8-d72a-4776-ad45-49906b2cc4cb", (java.util.SortedSet<org.apache.rat.license.ILicense>) iLicenseSet88);
        org.junit.Assert.assertTrue("'" + format2 + "' != '" + org.apache.rat.configuration.Format.XML + "'", format2.equals(org.apache.rat.configuration.Format.XML));
        org.junit.Assert.assertNotNull(licenseReader3);
        org.junit.Assert.assertNotNull(matcherReader4);
        org.junit.Assert.assertNotNull(licenseReader5);
        org.junit.Assert.assertNotNull(iLicenseSet6);
        org.junit.Assert.assertNull(iLicense7);
        org.junit.Assert.assertNotNull(strArray13);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + true + "'", boolean15 == true);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + true + "'", boolean17 == true);
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + true + "'", boolean19 == true);
        org.junit.Assert.assertNotNull(strSet21);
        org.junit.Assert.assertNotNull(defaultLog22);
        org.junit.Assert.assertNull(filenameFilter25);
        org.junit.Assert.assertTrue("'" + licenseFilter26 + "' != '" + org.apache.rat.license.LicenseSetFactory.LicenseFilter.all + "'", licenseFilter26.equals(org.apache.rat.license.LicenseSetFactory.LicenseFilter.all));
        org.junit.Assert.assertNotNull(iLicenseSet27);
        org.junit.Assert.assertTrue("'" + addLicenseHeaders28 + "' != '" + org.apache.rat.config.AddLicenseHeaders.FALSE + "'", addLicenseHeaders28.equals(org.apache.rat.config.AddLicenseHeaders.FALSE));
        org.junit.Assert.assertNull(claimStatistic32);
        org.junit.Assert.assertTrue("'" + licenseFilter33 + "' != '" + org.apache.rat.license.LicenseSetFactory.LicenseFilter.all + "'", licenseFilter33.equals(org.apache.rat.license.LicenseSetFactory.LicenseFilter.all));
        org.junit.Assert.assertNull(filenameFilter38);
        org.junit.Assert.assertTrue("'" + licenseFilter39 + "' != '" + org.apache.rat.license.LicenseSetFactory.LicenseFilter.all + "'", licenseFilter39.equals(org.apache.rat.license.LicenseSetFactory.LicenseFilter.all));
        org.junit.Assert.assertNotNull(iLicenseSet40);
        org.junit.Assert.assertTrue("'" + addLicenseHeaders41 + "' != '" + org.apache.rat.config.AddLicenseHeaders.FALSE + "'", addLicenseHeaders41.equals(org.apache.rat.config.AddLicenseHeaders.FALSE));
        org.junit.Assert.assertNull(claimStatistic45);
        org.junit.Assert.assertTrue("'" + licenseFilter46 + "' != '" + org.apache.rat.license.LicenseSetFactory.LicenseFilter.all + "'", licenseFilter46.equals(org.apache.rat.license.LicenseSetFactory.LicenseFilter.all));
        org.junit.Assert.assertNotNull(outputStreamIOSupplier52);
        org.junit.Assert.assertNull(claimStatistic56);
        org.junit.Assert.assertNull(claimStatistic59);
        org.junit.Assert.assertTrue("'" + options60 + "' != '" + org.apache.rat.utils.ReportingSet.Options.OVERWRITE + "'", options60.equals(org.apache.rat.utils.ReportingSet.Options.OVERWRITE));
        org.junit.Assert.assertTrue("'" + level70 + "' != '" + org.apache.rat.utils.Log.Level.ERROR + "'", level70.equals(org.apache.rat.utils.Log.Level.ERROR));
        org.junit.Assert.assertNotNull(defaultLog77);
        org.junit.Assert.assertTrue("'" + level82 + "' != '" + org.apache.rat.utils.Log.Level.ERROR + "'", level82.equals(org.apache.rat.utils.Log.Level.ERROR));
        org.junit.Assert.assertNotNull(strSet86);
        org.junit.Assert.assertNull(iLicense89);
    }

    @Test
    public void test13685() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest27.test13685");
        boolean boolean1 = org.apache.rat.document.impl.guesser.BinaryGuesser.isAudio("TMF http://org/apache/rat/meta-data#LicenseFamilyName");
        org.junit.Assert.assertTrue("'" + boolean1 + "' != '" + false + "'", boolean1 == false);
    }

    @Test
    public void test13686() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest27.test13686");
        org.apache.rat.utils.Log log0 = null;
        org.apache.rat.ReportConfiguration reportConfiguration1 = new org.apache.rat.ReportConfiguration(log0);
        org.apache.commons.io.function.IOSupplier<java.io.OutputStream> outputStreamIOSupplier2 = reportConfiguration1.getOutput();
        reportConfiguration1.removeApprovedLicenseCategory("EF7A8B13-64C3-4510-BB0C-DBF208E1E73F");
        java.util.SortedSet<java.lang.String> strSet5 = reportConfiguration1.getApprovedLicenseCategories();
        org.apache.rat.utils.DefaultLog defaultLog6 = org.apache.rat.utils.DefaultLog.INSTANCE;
        org.apache.rat.configuration.builders.AllBuilder allBuilder7 = new org.apache.rat.configuration.builders.AllBuilder();
        org.apache.rat.configuration.builders.MatcherRefBuilder matcherRefBuilder8 = org.apache.rat.analysis.IHeaderMatcher.Builder.matcherRef();
        boolean boolean9 = matcherRefBuilder8.hasId();
        java.lang.String str10 = matcherRefBuilder8.toString();
        org.apache.rat.configuration.builders.AnyBuilder anyBuilder11 = org.apache.rat.analysis.IHeaderMatcher.Builder.any();
        org.apache.rat.configuration.builders.NotBuilder notBuilder12 = new org.apache.rat.configuration.builders.NotBuilder();
        java.lang.String str13 = notBuilder12.toString();
        org.apache.rat.configuration.builders.MatcherRefBuilder matcherRefBuilder14 = org.apache.rat.analysis.IHeaderMatcher.Builder.matcherRef();
        boolean boolean15 = matcherRefBuilder14.hasId();
        java.util.Map<java.lang.String, org.apache.rat.analysis.IHeaderMatcher> strMap16 = null;
        org.apache.rat.configuration.builders.MatcherRefBuilder matcherRefBuilder17 = matcherRefBuilder14.setMatchers(strMap16);
        org.apache.rat.configuration.builders.AllBuilder allBuilder18 = new org.apache.rat.configuration.builders.AllBuilder();
        org.apache.rat.configuration.builders.CopyrightBuilder copyrightBuilder19 = org.apache.rat.analysis.IHeaderMatcher.Builder.copyright();
        org.apache.rat.configuration.builders.CopyrightBuilder copyrightBuilder21 = copyrightBuilder19.setStart("OASIS");
        java.lang.String str22 = copyrightBuilder19.toString();
        org.apache.rat.configuration.builders.CopyrightBuilder copyrightBuilder24 = copyrightBuilder19.setStart("223f0aba-15d4-49e9-901e-5740c137aebf");
        org.apache.rat.configuration.builders.MatcherRefBuilder matcherRefBuilder25 = org.apache.rat.analysis.IHeaderMatcher.Builder.matcherRef();
        boolean boolean26 = matcherRefBuilder25.hasId();
        org.apache.rat.configuration.builders.CopyrightBuilder copyrightBuilder27 = org.apache.rat.analysis.IHeaderMatcher.Builder.copyright();
        org.apache.rat.configuration.builders.CopyrightBuilder copyrightBuilder29 = copyrightBuilder27.setStart("OASIS");
        java.lang.String str30 = copyrightBuilder27.toString();
        org.apache.rat.configuration.builders.CopyrightBuilder copyrightBuilder32 = copyrightBuilder27.setStart("223f0aba-15d4-49e9-901e-5740c137aebf");
        org.apache.rat.configuration.builders.CopyrightBuilder copyrightBuilder33 = org.apache.rat.analysis.IHeaderMatcher.Builder.copyright();
        org.apache.rat.configuration.builders.CopyrightBuilder copyrightBuilder34 = org.apache.rat.analysis.IHeaderMatcher.Builder.copyright();
        java.lang.String str35 = copyrightBuilder34.toString();
        org.apache.rat.configuration.builders.CopyrightBuilder copyrightBuilder37 = copyrightBuilder34.setEnd(".cvsignore");
        boolean boolean38 = copyrightBuilder34.hasId();
        org.apache.rat.configuration.builders.CopyrightBuilder copyrightBuilder39 = org.apache.rat.analysis.IHeaderMatcher.Builder.copyright();
        java.lang.String str40 = copyrightBuilder39.toString();
        org.apache.rat.configuration.builders.CopyrightBuilder copyrightBuilder42 = copyrightBuilder39.setEnd(".cvsignore");
        boolean boolean43 = copyrightBuilder39.hasId();
        java.lang.String str44 = copyrightBuilder39.toString();
        org.apache.rat.configuration.builders.CopyrightBuilder copyrightBuilder45 = org.apache.rat.analysis.IHeaderMatcher.Builder.copyright();
        org.apache.rat.configuration.builders.CopyrightBuilder copyrightBuilder47 = copyrightBuilder45.setStart("OASIS");
        org.apache.rat.configuration.builders.AnyBuilder anyBuilder48 = org.apache.rat.analysis.IHeaderMatcher.Builder.any();
        org.apache.rat.configuration.builders.MatcherRefBuilder matcherRefBuilder49 = org.apache.rat.analysis.IHeaderMatcher.Builder.matcherRef();
        boolean boolean50 = matcherRefBuilder49.hasId();
        java.util.Map<java.lang.String, org.apache.rat.analysis.IHeaderMatcher> strMap51 = null;
        org.apache.rat.configuration.builders.MatcherRefBuilder matcherRefBuilder52 = matcherRefBuilder49.setMatchers(strMap51);
        org.apache.rat.configuration.builders.CopyrightBuilder copyrightBuilder53 = org.apache.rat.analysis.IHeaderMatcher.Builder.copyright();
        org.apache.rat.configuration.builders.MatcherRefBuilder matcherRefBuilder54 = org.apache.rat.analysis.IHeaderMatcher.Builder.matcherRef();
        boolean boolean55 = matcherRefBuilder54.hasId();
        java.lang.String str56 = matcherRefBuilder54.toString();
        java.util.Map<java.lang.String, org.apache.rat.analysis.IHeaderMatcher> strMap57 = null;
        org.apache.rat.configuration.builders.MatcherRefBuilder matcherRefBuilder58 = matcherRefBuilder54.setMatchers(strMap57);
        org.apache.rat.analysis.IHeaderMatcher.Builder[] builderArray59 = new org.apache.rat.analysis.IHeaderMatcher.Builder[] { matcherRefBuilder14, allBuilder18, copyrightBuilder24, matcherRefBuilder25, copyrightBuilder27, copyrightBuilder33, copyrightBuilder34, copyrightBuilder39, copyrightBuilder45, anyBuilder48, matcherRefBuilder49, copyrightBuilder53, matcherRefBuilder54 };
        java.util.ArrayList<org.apache.rat.analysis.IHeaderMatcher.Builder> builderList60 = new java.util.ArrayList<org.apache.rat.analysis.IHeaderMatcher.Builder>();
        boolean boolean61 = java.util.Collections.addAll((java.util.Collection<org.apache.rat.analysis.IHeaderMatcher.Builder>) builderList60, builderArray59);
        org.apache.rat.configuration.builders.AbstractBuilder abstractBuilder62 = notBuilder12.add((java.util.Collection<org.apache.rat.analysis.IHeaderMatcher.Builder>) builderList60);
        org.apache.rat.configuration.builders.MatcherRefBuilder matcherRefBuilder63 = new org.apache.rat.configuration.builders.MatcherRefBuilder();
        org.apache.rat.analysis.IHeaderMatcher.Builder[] builderArray64 = new org.apache.rat.analysis.IHeaderMatcher.Builder[] { matcherRefBuilder8, anyBuilder11, notBuilder12, matcherRefBuilder63 };
        java.util.ArrayList<org.apache.rat.analysis.IHeaderMatcher.Builder> builderList65 = new java.util.ArrayList<org.apache.rat.analysis.IHeaderMatcher.Builder>();
        boolean boolean66 = java.util.Collections.addAll((java.util.Collection<org.apache.rat.analysis.IHeaderMatcher.Builder>) builderList65, builderArray64);
        org.apache.rat.configuration.builders.AbstractBuilder abstractBuilder67 = allBuilder7.add((java.util.Collection<org.apache.rat.analysis.IHeaderMatcher.Builder>) builderList65);
        defaultLog6.info((java.lang.Object) allBuilder7);
        org.apache.rat.annotation.ApacheV2LicenseAppender apacheV2LicenseAppender70 = new org.apache.rat.annotation.ApacheV2LicenseAppender((org.apache.rat.utils.Log) defaultLog6, "true");
        org.apache.rat.configuration.builders.CopyrightBuilder copyrightBuilder71 = org.apache.rat.analysis.IHeaderMatcher.Builder.copyright();
        java.lang.String str72 = copyrightBuilder71.toString();
        org.apache.rat.configuration.builders.CopyrightBuilder copyrightBuilder74 = copyrightBuilder71.setEnd(".cvsignore");
        boolean boolean75 = copyrightBuilder71.hasId();
        org.apache.rat.configuration.builders.CopyrightBuilder copyrightBuilder77 = copyrightBuilder71.setEnd("notice");
        defaultLog6.debug((java.lang.Object) "notice");
        org.apache.rat.utils.Log log79 = null;
        org.apache.rat.ReportConfiguration reportConfiguration80 = new org.apache.rat.ReportConfiguration(log79);
        org.apache.commons.io.function.IOSupplier<java.io.OutputStream> outputStreamIOSupplier81 = reportConfiguration80.getOutput();
        reportConfiguration80.setCopyrightMessage("MANIFEST.MF");
        org.apache.rat.utils.Log log84 = reportConfiguration80.getLog();
        org.apache.rat.utils.Log.Level level85 = org.apache.rat.utils.Log.Level.INFO;
        reportConfiguration80.logFamilyCollisions(level85);
        defaultLog6.setLevel(level85);
        org.apache.rat.utils.DefaultLog defaultLog88 = org.apache.rat.utils.DefaultLog.INSTANCE;
        org.apache.rat.annotation.ApacheV2LicenseAppender apacheV2LicenseAppender89 = new org.apache.rat.annotation.ApacheV2LicenseAppender((org.apache.rat.utils.Log) defaultLog88);
        org.apache.rat.ReportConfiguration reportConfiguration90 = new org.apache.rat.ReportConfiguration((org.apache.rat.utils.Log) defaultLog88);
        org.apache.rat.license.LicenseSetFactory.LicenseFilter licenseFilter91 = org.apache.rat.license.LicenseSetFactory.LicenseFilter.approved;
        org.apache.rat.Reporter.listLicenses(reportConfiguration90, licenseFilter91);
        defaultLog6.info((java.lang.Object) licenseFilter91);
        org.apache.rat.Reporter.listLicenseFamilies(reportConfiguration1, licenseFilter91);
        java.io.FilenameFilter filenameFilter95 = reportConfiguration1.getInputFileFilter();
        org.junit.Assert.assertNotNull(outputStreamIOSupplier2);
        org.junit.Assert.assertNotNull(strSet5);
        org.junit.Assert.assertNotNull(defaultLog6);
        org.junit.Assert.assertNotNull(matcherRefBuilder8);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "MathcerRefBuilder: null" + "'", str10, "MathcerRefBuilder: null");
        org.junit.Assert.assertNotNull(anyBuilder11);
        org.junit.Assert.assertEquals("'" + str13 + "' != '" + "NotBuilder: null" + "'", str13, "NotBuilder: null");
        org.junit.Assert.assertNotNull(matcherRefBuilder14);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + false + "'", boolean15 == false);
        org.junit.Assert.assertNotNull(matcherRefBuilder17);
        org.junit.Assert.assertNotNull(copyrightBuilder19);
        org.junit.Assert.assertNotNull(copyrightBuilder21);
        org.junit.Assert.assertEquals("'" + str22 + "' != '" + "Copyright Builder: s:OASIS e:null o:null" + "'", str22, "Copyright Builder: s:OASIS e:null o:null");
        org.junit.Assert.assertNotNull(copyrightBuilder24);
        org.junit.Assert.assertNotNull(matcherRefBuilder25);
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + false + "'", boolean26 == false);
        org.junit.Assert.assertNotNull(copyrightBuilder27);
        org.junit.Assert.assertNotNull(copyrightBuilder29);
        org.junit.Assert.assertEquals("'" + str30 + "' != '" + "Copyright Builder: s:OASIS e:null o:null" + "'", str30, "Copyright Builder: s:OASIS e:null o:null");
        org.junit.Assert.assertNotNull(copyrightBuilder32);
        org.junit.Assert.assertNotNull(copyrightBuilder33);
        org.junit.Assert.assertNotNull(copyrightBuilder34);
        org.junit.Assert.assertEquals("'" + str35 + "' != '" + "Copyright Builder: s:null e:null o:null" + "'", str35, "Copyright Builder: s:null e:null o:null");
        org.junit.Assert.assertNotNull(copyrightBuilder37);
        org.junit.Assert.assertTrue("'" + boolean38 + "' != '" + false + "'", boolean38 == false);
        org.junit.Assert.assertNotNull(copyrightBuilder39);
        org.junit.Assert.assertEquals("'" + str40 + "' != '" + "Copyright Builder: s:null e:null o:null" + "'", str40, "Copyright Builder: s:null e:null o:null");
        org.junit.Assert.assertNotNull(copyrightBuilder42);
        org.junit.Assert.assertTrue("'" + boolean43 + "' != '" + false + "'", boolean43 == false);
        org.junit.Assert.assertEquals("'" + str44 + "' != '" + "Copyright Builder: s:null e:.cvsignore o:null" + "'", str44, "Copyright Builder: s:null e:.cvsignore o:null");
        org.junit.Assert.assertNotNull(copyrightBuilder45);
        org.junit.Assert.assertNotNull(copyrightBuilder47);
        org.junit.Assert.assertNotNull(anyBuilder48);
        org.junit.Assert.assertNotNull(matcherRefBuilder49);
        org.junit.Assert.assertTrue("'" + boolean50 + "' != '" + false + "'", boolean50 == false);
        org.junit.Assert.assertNotNull(matcherRefBuilder52);
        org.junit.Assert.assertNotNull(copyrightBuilder53);
        org.junit.Assert.assertNotNull(matcherRefBuilder54);
        org.junit.Assert.assertTrue("'" + boolean55 + "' != '" + false + "'", boolean55 == false);
        org.junit.Assert.assertEquals("'" + str56 + "' != '" + "MathcerRefBuilder: null" + "'", str56, "MathcerRefBuilder: null");
        org.junit.Assert.assertNotNull(matcherRefBuilder58);
        org.junit.Assert.assertNotNull(builderArray59);
        org.junit.Assert.assertTrue("'" + boolean61 + "' != '" + true + "'", boolean61 == true);
        org.junit.Assert.assertNotNull(abstractBuilder62);
        org.junit.Assert.assertNotNull(builderArray64);
        org.junit.Assert.assertTrue("'" + boolean66 + "' != '" + true + "'", boolean66 == true);
        org.junit.Assert.assertNotNull(abstractBuilder67);
        org.junit.Assert.assertNotNull(copyrightBuilder71);
        org.junit.Assert.assertEquals("'" + str72 + "' != '" + "Copyright Builder: s:null e:null o:null" + "'", str72, "Copyright Builder: s:null e:null o:null");
        org.junit.Assert.assertNotNull(copyrightBuilder74);
        org.junit.Assert.assertTrue("'" + boolean75 + "' != '" + false + "'", boolean75 == false);
        org.junit.Assert.assertNotNull(copyrightBuilder77);
        org.junit.Assert.assertNotNull(outputStreamIOSupplier81);
        org.junit.Assert.assertNull(log84);
        org.junit.Assert.assertTrue("'" + level85 + "' != '" + org.apache.rat.utils.Log.Level.INFO + "'", level85.equals(org.apache.rat.utils.Log.Level.INFO));
        org.junit.Assert.assertNotNull(defaultLog88);
        org.junit.Assert.assertTrue("'" + licenseFilter91 + "' != '" + org.apache.rat.license.LicenseSetFactory.LicenseFilter.approved + "'", licenseFilter91.equals(org.apache.rat.license.LicenseSetFactory.LicenseFilter.approved));
        org.junit.Assert.assertNull(filenameFilter95);
    }

    @Test
    public void test13687() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest27.test13687");
        org.apache.rat.analysis.matchers.SimpleTextMatcher simpleTextMatcher1 = new org.apache.rat.analysis.matchers.SimpleTextMatcher("021187d7-27c2-4fd9-bc74-8cc00413ee52");
        org.apache.rat.analysis.IHeaderMatcher.State state2 = simpleTextMatcher1.currentState();
        java.lang.String str3 = simpleTextMatcher1.toString();
        boolean boolean5 = simpleTextMatcher1.doMatch("fc0640a9-0c0c-4acd-9007-70024fefe678");
        boolean boolean7 = simpleTextMatcher1.doMatch("8925ba14-6c7c-466e-9335-5528e02df2c5");
        java.lang.String str8 = simpleTextMatcher1.getId();
        org.junit.Assert.assertTrue("'" + state2 + "' != '" + org.apache.rat.analysis.IHeaderMatcher.State.i + "'", state2.equals(org.apache.rat.analysis.IHeaderMatcher.State.i));
// flaky:         org.junit.Assert.assertEquals("'" + str3 + "' != '" + "0ae9523e-feb4-4beb-bf9e-464d0f0bde60" + "'", str3, "0ae9523e-feb4-4beb-bf9e-464d0f0bde60");
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
// flaky:         org.junit.Assert.assertEquals("'" + str8 + "' != '" + "0ae9523e-feb4-4beb-bf9e-464d0f0bde60" + "'", str8, "0ae9523e-feb4-4beb-bf9e-464d0f0bde60");
    }

    @Test
    public void test13688() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest27.test13688");
        java.util.regex.Pattern pattern2 = null;
        org.apache.rat.analysis.matchers.SimpleRegexMatcher simpleRegexMatcher3 = new org.apache.rat.analysis.matchers.SimpleRegexMatcher("", pattern2);
        simpleRegexMatcher3.reset();
        java.lang.String str5 = simpleRegexMatcher3.getId();
        org.apache.rat.analysis.matchers.NotMatcher notMatcher6 = new org.apache.rat.analysis.matchers.NotMatcher("GNU General Public License, version 1", (org.apache.rat.analysis.IHeaderMatcher) simpleRegexMatcher3);
        org.apache.rat.analysis.IHeaderMatcher.State state7 = notMatcher6.finalizeState();
// flaky:         org.junit.Assert.assertEquals("'" + str5 + "' != '" + "1f1806aa-3f54-49b2-b116-b05e8ae09106" + "'", str5, "1f1806aa-3f54-49b2-b116-b05e8ae09106");
        org.junit.Assert.assertTrue("'" + state7 + "' != '" + org.apache.rat.analysis.IHeaderMatcher.State.t + "'", state7.equals(org.apache.rat.analysis.IHeaderMatcher.State.t));
    }

    @Test
    public void test13689() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest27.test13689");
        org.apache.rat.analysis.license.FullTextMatchingLicense fullTextMatchingLicense0 = new org.apache.rat.analysis.license.FullTextMatchingLicense();
        fullTextMatchingLicense0.setLicenseFamilyName("hi!");
        java.lang.String str3 = fullTextMatchingLicense0.getLicenseFamilyCategory();
        java.lang.String str4 = fullTextMatchingLicense0.getLicenseFamilyCategory();
        fullTextMatchingLicense0.setLicenseFamilyCategory("DOJO ");
        java.lang.String str7 = fullTextMatchingLicense0.getNotes();
        java.lang.String str8 = fullTextMatchingLicense0.getLicenseFamilyCategory();
        org.apache.rat.license.ILicenseFamily iLicenseFamily9 = fullTextMatchingLicense0.getLicenseFamily();
        fullTextMatchingLicense0.setFullText("B5CB0999-B639-4E9C-AB9C-268137BC8846");
        fullTextMatchingLicense0.setNotes("Copyright Builder: s:10ceccc6-9da0-47a6-810c-684cf0a59f88 e:null o:824f4e11-66e9-46be-a4d6-3a2b761d6238");
        org.junit.Assert.assertNull(str3);
        org.junit.Assert.assertNull(str4);
        org.junit.Assert.assertNull(str7);
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "DOJO " + "'", str8, "DOJO ");
        org.junit.Assert.assertNotNull(iLicenseFamily9);
    }

    @Test
    public void test13690() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest27.test13690");
        java.util.SortedSet<org.apache.rat.license.ILicenseFamily> iLicenseFamilySet1 = org.apache.rat.license.LicenseFamilySetFactory.emptyLicenseFamilySet();
        org.apache.rat.license.ILicenseFamily iLicenseFamily2 = org.apache.rat.license.LicenseFamilySetFactory.search("http://org/apache/rat/meta-data", iLicenseFamilySet1);
        org.apache.rat.policy.DefaultPolicy defaultPolicy3 = new org.apache.rat.policy.DefaultPolicy((java.util.Collection<org.apache.rat.license.ILicenseFamily>) iLicenseFamilySet1);
        org.apache.rat.api.Document document4 = null;
        defaultPolicy3.analyse(document4);
        org.apache.rat.api.Document document6 = null;
        defaultPolicy3.analyse(document6);
        org.apache.rat.api.Document document8 = null;
        // The following exception was thrown during execution in test generation
        try {
            defaultPolicy3.reportLicenseApprovalClaim(document8, false);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(iLicenseFamilySet1);
        org.junit.Assert.assertNull(iLicenseFamily2);
    }

    @Test
    public void test13691() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest27.test13691");
        java.util.SortedSet<org.apache.rat.license.ILicense> iLicenseSet0 = null;
        org.apache.rat.utils.Log log1 = null;
        org.apache.rat.ReportConfiguration reportConfiguration2 = new org.apache.rat.ReportConfiguration(log1);
        java.io.FilenameFilter filenameFilter3 = reportConfiguration2.getInputFileFilter();
        org.apache.rat.license.LicenseSetFactory.LicenseFilter licenseFilter4 = org.apache.rat.license.LicenseSetFactory.LicenseFilter.all;
        java.util.SortedSet<org.apache.rat.license.ILicense> iLicenseSet5 = reportConfiguration2.getLicenses(licenseFilter4);
        org.apache.rat.config.AddLicenseHeaders addLicenseHeaders6 = org.apache.rat.config.AddLicenseHeaders.FALSE;
        reportConfiguration2.setAddLicenseHeaders(addLicenseHeaders6);
        org.apache.rat.utils.Log log8 = null;
        org.apache.rat.ReportConfiguration reportConfiguration9 = new org.apache.rat.ReportConfiguration(log8);
        org.apache.rat.report.claim.ClaimStatistic claimStatistic10 = org.apache.rat.Reporter.report(reportConfiguration9);
        org.apache.rat.license.LicenseSetFactory.LicenseFilter licenseFilter11 = org.apache.rat.license.LicenseSetFactory.LicenseFilter.all;
        org.apache.rat.Reporter.listLicenses(reportConfiguration9, licenseFilter11);
        org.apache.rat.Reporter.listLicenses(reportConfiguration2, licenseFilter11);
        org.apache.rat.utils.Log log14 = null;
        org.apache.rat.ReportConfiguration reportConfiguration15 = new org.apache.rat.ReportConfiguration(log14);
        java.io.FilenameFilter filenameFilter16 = reportConfiguration15.getInputFileFilter();
        org.apache.rat.license.LicenseSetFactory.LicenseFilter licenseFilter17 = org.apache.rat.license.LicenseSetFactory.LicenseFilter.all;
        java.util.SortedSet<org.apache.rat.license.ILicense> iLicenseSet18 = reportConfiguration15.getLicenses(licenseFilter17);
        org.apache.rat.config.AddLicenseHeaders addLicenseHeaders19 = org.apache.rat.config.AddLicenseHeaders.FALSE;
        reportConfiguration15.setAddLicenseHeaders(addLicenseHeaders19);
        org.apache.rat.utils.Log log21 = null;
        org.apache.rat.ReportConfiguration reportConfiguration22 = new org.apache.rat.ReportConfiguration(log21);
        org.apache.rat.report.claim.ClaimStatistic claimStatistic23 = org.apache.rat.Reporter.report(reportConfiguration22);
        org.apache.rat.license.LicenseSetFactory.LicenseFilter licenseFilter24 = org.apache.rat.license.LicenseSetFactory.LicenseFilter.all;
        org.apache.rat.Reporter.listLicenses(reportConfiguration22, licenseFilter24);
        org.apache.rat.Reporter.listLicenses(reportConfiguration15, licenseFilter24);
        org.apache.rat.Reporter.listLicenses(reportConfiguration2, licenseFilter24);
        java.io.FilenameFilter filenameFilter28 = reportConfiguration2.getInputFileFilter();
        org.apache.rat.utils.Log log29 = null;
        org.apache.rat.ReportConfiguration reportConfiguration30 = new org.apache.rat.ReportConfiguration(log29);
        java.io.FilenameFilter filenameFilter31 = reportConfiguration30.getInputFileFilter();
        org.apache.rat.license.LicenseSetFactory.LicenseFilter licenseFilter32 = org.apache.rat.license.LicenseSetFactory.LicenseFilter.all;
        java.util.SortedSet<org.apache.rat.license.ILicense> iLicenseSet33 = reportConfiguration30.getLicenses(licenseFilter32);
        org.apache.rat.config.AddLicenseHeaders addLicenseHeaders34 = org.apache.rat.config.AddLicenseHeaders.FALSE;
        reportConfiguration30.setAddLicenseHeaders(addLicenseHeaders34);
        org.apache.rat.utils.Log log36 = null;
        org.apache.rat.ReportConfiguration reportConfiguration37 = new org.apache.rat.ReportConfiguration(log36);
        org.apache.rat.report.claim.ClaimStatistic claimStatistic38 = org.apache.rat.Reporter.report(reportConfiguration37);
        org.apache.rat.license.LicenseSetFactory.LicenseFilter licenseFilter39 = org.apache.rat.license.LicenseSetFactory.LicenseFilter.all;
        org.apache.rat.Reporter.listLicenses(reportConfiguration37, licenseFilter39);
        org.apache.rat.Reporter.listLicenses(reportConfiguration30, licenseFilter39);
        org.apache.rat.utils.Log log42 = null;
        org.apache.rat.ReportConfiguration reportConfiguration43 = new org.apache.rat.ReportConfiguration(log42);
        java.io.FilenameFilter filenameFilter44 = reportConfiguration43.getInputFileFilter();
        org.apache.rat.license.LicenseSetFactory.LicenseFilter licenseFilter45 = org.apache.rat.license.LicenseSetFactory.LicenseFilter.all;
        java.util.SortedSet<org.apache.rat.license.ILicense> iLicenseSet46 = reportConfiguration43.getLicenses(licenseFilter45);
        org.apache.rat.config.AddLicenseHeaders addLicenseHeaders47 = org.apache.rat.config.AddLicenseHeaders.FALSE;
        reportConfiguration43.setAddLicenseHeaders(addLicenseHeaders47);
        org.apache.rat.utils.Log log49 = null;
        org.apache.rat.ReportConfiguration reportConfiguration50 = new org.apache.rat.ReportConfiguration(log49);
        org.apache.rat.report.claim.ClaimStatistic claimStatistic51 = org.apache.rat.Reporter.report(reportConfiguration50);
        org.apache.rat.license.LicenseSetFactory.LicenseFilter licenseFilter52 = org.apache.rat.license.LicenseSetFactory.LicenseFilter.all;
        org.apache.rat.Reporter.listLicenses(reportConfiguration50, licenseFilter52);
        org.apache.rat.Reporter.listLicenses(reportConfiguration43, licenseFilter52);
        org.apache.rat.Reporter.listLicenses(reportConfiguration30, licenseFilter52);
        java.util.SortedSet<org.apache.rat.license.ILicense> iLicenseSet56 = reportConfiguration2.getLicenses(licenseFilter52);
        boolean boolean57 = reportConfiguration2.isAddingLicensesForced();
        org.apache.rat.utils.Log log58 = null;
        org.apache.rat.ReportConfiguration reportConfiguration59 = new org.apache.rat.ReportConfiguration(log58);
        org.apache.rat.report.claim.ClaimStatistic claimStatistic60 = org.apache.rat.Reporter.report(reportConfiguration59);
        org.apache.rat.utils.Log log61 = null;
        org.apache.rat.ReportConfiguration reportConfiguration62 = new org.apache.rat.ReportConfiguration(log61);
        org.apache.rat.report.claim.ClaimStatistic claimStatistic63 = org.apache.rat.Reporter.report(reportConfiguration62);
        org.apache.rat.utils.ReportingSet.Options options64 = org.apache.rat.utils.ReportingSet.Options.OVERWRITE;
        reportConfiguration62.licenseDuplicateOption(options64);
        reportConfiguration59.familyDuplicateOption(options64);
        reportConfiguration2.familyDuplicateOption(options64);
        java.util.SortedSet<java.lang.String> strSet68 = reportConfiguration2.getApprovedLicenseCategories();
        java.lang.String[] strArray74 = new java.lang.String[] { "http://org/apache/rat/meta-data#LicenseFamilyCategory", "Datum [ name ='http://org/apache/rat/meta-data#LicenseFamilyCategory',value ='GPL1  ']", "MANIFEST.MF", "AllBuilder:", "The MIT License" };
        org.apache.rat.utils.ReportingSet<java.lang.String> strSet75 = new org.apache.rat.utils.ReportingSet<java.lang.String>();
        boolean boolean76 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strSet75, strArray74);
        boolean boolean78 = strSet75.addIfNotPresent("http://org/apache/rat/meta-data#LicenseFamilyName");
        boolean boolean80 = strSet75.addIfNotPresent("ef7a8b13-64c3-4510-bb0c-dbf208e1e73f");
        java.util.function.Function<java.lang.String, java.lang.String> strFunction81 = null;
        org.apache.rat.utils.ReportingSet<java.lang.String> strSet82 = strSet75.setMsgFormat(strFunction81);
        java.lang.String str83 = strSet75.last();
        reportConfiguration2.removeApprovedLicenseCategories((java.util.Collection<java.lang.String>) strSet75);
        java.util.Comparator<? super java.lang.String> wildcardComparator85 = strSet75.comparator();
        org.apache.rat.license.LicenseSetFactory licenseSetFactory86 = new org.apache.rat.license.LicenseSetFactory(iLicenseSet0, (java.util.Collection<java.lang.String>) strSet75);
        java.util.Iterator<java.lang.String> strItor87 = strSet75.iterator();
        org.junit.Assert.assertNull(filenameFilter3);
        org.junit.Assert.assertTrue("'" + licenseFilter4 + "' != '" + org.apache.rat.license.LicenseSetFactory.LicenseFilter.all + "'", licenseFilter4.equals(org.apache.rat.license.LicenseSetFactory.LicenseFilter.all));
        org.junit.Assert.assertNotNull(iLicenseSet5);
        org.junit.Assert.assertTrue("'" + addLicenseHeaders6 + "' != '" + org.apache.rat.config.AddLicenseHeaders.FALSE + "'", addLicenseHeaders6.equals(org.apache.rat.config.AddLicenseHeaders.FALSE));
        org.junit.Assert.assertNull(claimStatistic10);
        org.junit.Assert.assertTrue("'" + licenseFilter11 + "' != '" + org.apache.rat.license.LicenseSetFactory.LicenseFilter.all + "'", licenseFilter11.equals(org.apache.rat.license.LicenseSetFactory.LicenseFilter.all));
        org.junit.Assert.assertNull(filenameFilter16);
        org.junit.Assert.assertTrue("'" + licenseFilter17 + "' != '" + org.apache.rat.license.LicenseSetFactory.LicenseFilter.all + "'", licenseFilter17.equals(org.apache.rat.license.LicenseSetFactory.LicenseFilter.all));
        org.junit.Assert.assertNotNull(iLicenseSet18);
        org.junit.Assert.assertTrue("'" + addLicenseHeaders19 + "' != '" + org.apache.rat.config.AddLicenseHeaders.FALSE + "'", addLicenseHeaders19.equals(org.apache.rat.config.AddLicenseHeaders.FALSE));
        org.junit.Assert.assertNull(claimStatistic23);
        org.junit.Assert.assertTrue("'" + licenseFilter24 + "' != '" + org.apache.rat.license.LicenseSetFactory.LicenseFilter.all + "'", licenseFilter24.equals(org.apache.rat.license.LicenseSetFactory.LicenseFilter.all));
        org.junit.Assert.assertNull(filenameFilter28);
        org.junit.Assert.assertNull(filenameFilter31);
        org.junit.Assert.assertTrue("'" + licenseFilter32 + "' != '" + org.apache.rat.license.LicenseSetFactory.LicenseFilter.all + "'", licenseFilter32.equals(org.apache.rat.license.LicenseSetFactory.LicenseFilter.all));
        org.junit.Assert.assertNotNull(iLicenseSet33);
        org.junit.Assert.assertTrue("'" + addLicenseHeaders34 + "' != '" + org.apache.rat.config.AddLicenseHeaders.FALSE + "'", addLicenseHeaders34.equals(org.apache.rat.config.AddLicenseHeaders.FALSE));
        org.junit.Assert.assertNull(claimStatistic38);
        org.junit.Assert.assertTrue("'" + licenseFilter39 + "' != '" + org.apache.rat.license.LicenseSetFactory.LicenseFilter.all + "'", licenseFilter39.equals(org.apache.rat.license.LicenseSetFactory.LicenseFilter.all));
        org.junit.Assert.assertNull(filenameFilter44);
        org.junit.Assert.assertTrue("'" + licenseFilter45 + "' != '" + org.apache.rat.license.LicenseSetFactory.LicenseFilter.all + "'", licenseFilter45.equals(org.apache.rat.license.LicenseSetFactory.LicenseFilter.all));
        org.junit.Assert.assertNotNull(iLicenseSet46);
        org.junit.Assert.assertTrue("'" + addLicenseHeaders47 + "' != '" + org.apache.rat.config.AddLicenseHeaders.FALSE + "'", addLicenseHeaders47.equals(org.apache.rat.config.AddLicenseHeaders.FALSE));
        org.junit.Assert.assertNull(claimStatistic51);
        org.junit.Assert.assertTrue("'" + licenseFilter52 + "' != '" + org.apache.rat.license.LicenseSetFactory.LicenseFilter.all + "'", licenseFilter52.equals(org.apache.rat.license.LicenseSetFactory.LicenseFilter.all));
        org.junit.Assert.assertNotNull(iLicenseSet56);
        org.junit.Assert.assertTrue("'" + boolean57 + "' != '" + false + "'", boolean57 == false);
        org.junit.Assert.assertNull(claimStatistic60);
        org.junit.Assert.assertNull(claimStatistic63);
        org.junit.Assert.assertTrue("'" + options64 + "' != '" + org.apache.rat.utils.ReportingSet.Options.OVERWRITE + "'", options64.equals(org.apache.rat.utils.ReportingSet.Options.OVERWRITE));
        org.junit.Assert.assertNotNull(strSet68);
        org.junit.Assert.assertNotNull(strArray74);
        org.junit.Assert.assertTrue("'" + boolean76 + "' != '" + true + "'", boolean76 == true);
        org.junit.Assert.assertTrue("'" + boolean78 + "' != '" + true + "'", boolean78 == true);
        org.junit.Assert.assertTrue("'" + boolean80 + "' != '" + true + "'", boolean80 == true);
        org.junit.Assert.assertNotNull(strSet82);
        org.junit.Assert.assertEquals("'" + str83 + "' != '" + "http://org/apache/rat/meta-data#LicenseFamilyName" + "'", str83, "http://org/apache/rat/meta-data#LicenseFamilyName");
        org.junit.Assert.assertNull(wildcardComparator85);
        org.junit.Assert.assertNotNull(strItor87);
    }

    @Test
    public void test13692() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest27.test13692");
        org.apache.rat.utils.DefaultLog defaultLog0 = org.apache.rat.utils.DefaultLog.INSTANCE;
        org.apache.rat.configuration.builders.AllBuilder allBuilder1 = new org.apache.rat.configuration.builders.AllBuilder();
        org.apache.rat.configuration.builders.MatcherRefBuilder matcherRefBuilder2 = org.apache.rat.analysis.IHeaderMatcher.Builder.matcherRef();
        boolean boolean3 = matcherRefBuilder2.hasId();
        java.lang.String str4 = matcherRefBuilder2.toString();
        org.apache.rat.configuration.builders.AnyBuilder anyBuilder5 = org.apache.rat.analysis.IHeaderMatcher.Builder.any();
        org.apache.rat.configuration.builders.NotBuilder notBuilder6 = new org.apache.rat.configuration.builders.NotBuilder();
        java.lang.String str7 = notBuilder6.toString();
        org.apache.rat.configuration.builders.MatcherRefBuilder matcherRefBuilder8 = org.apache.rat.analysis.IHeaderMatcher.Builder.matcherRef();
        boolean boolean9 = matcherRefBuilder8.hasId();
        java.util.Map<java.lang.String, org.apache.rat.analysis.IHeaderMatcher> strMap10 = null;
        org.apache.rat.configuration.builders.MatcherRefBuilder matcherRefBuilder11 = matcherRefBuilder8.setMatchers(strMap10);
        org.apache.rat.configuration.builders.AllBuilder allBuilder12 = new org.apache.rat.configuration.builders.AllBuilder();
        org.apache.rat.configuration.builders.CopyrightBuilder copyrightBuilder13 = org.apache.rat.analysis.IHeaderMatcher.Builder.copyright();
        org.apache.rat.configuration.builders.CopyrightBuilder copyrightBuilder15 = copyrightBuilder13.setStart("OASIS");
        java.lang.String str16 = copyrightBuilder13.toString();
        org.apache.rat.configuration.builders.CopyrightBuilder copyrightBuilder18 = copyrightBuilder13.setStart("223f0aba-15d4-49e9-901e-5740c137aebf");
        org.apache.rat.configuration.builders.MatcherRefBuilder matcherRefBuilder19 = org.apache.rat.analysis.IHeaderMatcher.Builder.matcherRef();
        boolean boolean20 = matcherRefBuilder19.hasId();
        org.apache.rat.configuration.builders.CopyrightBuilder copyrightBuilder21 = org.apache.rat.analysis.IHeaderMatcher.Builder.copyright();
        org.apache.rat.configuration.builders.CopyrightBuilder copyrightBuilder23 = copyrightBuilder21.setStart("OASIS");
        java.lang.String str24 = copyrightBuilder21.toString();
        org.apache.rat.configuration.builders.CopyrightBuilder copyrightBuilder26 = copyrightBuilder21.setStart("223f0aba-15d4-49e9-901e-5740c137aebf");
        org.apache.rat.configuration.builders.CopyrightBuilder copyrightBuilder27 = org.apache.rat.analysis.IHeaderMatcher.Builder.copyright();
        org.apache.rat.configuration.builders.CopyrightBuilder copyrightBuilder28 = org.apache.rat.analysis.IHeaderMatcher.Builder.copyright();
        java.lang.String str29 = copyrightBuilder28.toString();
        org.apache.rat.configuration.builders.CopyrightBuilder copyrightBuilder31 = copyrightBuilder28.setEnd(".cvsignore");
        boolean boolean32 = copyrightBuilder28.hasId();
        org.apache.rat.configuration.builders.CopyrightBuilder copyrightBuilder33 = org.apache.rat.analysis.IHeaderMatcher.Builder.copyright();
        java.lang.String str34 = copyrightBuilder33.toString();
        org.apache.rat.configuration.builders.CopyrightBuilder copyrightBuilder36 = copyrightBuilder33.setEnd(".cvsignore");
        boolean boolean37 = copyrightBuilder33.hasId();
        java.lang.String str38 = copyrightBuilder33.toString();
        org.apache.rat.configuration.builders.CopyrightBuilder copyrightBuilder39 = org.apache.rat.analysis.IHeaderMatcher.Builder.copyright();
        org.apache.rat.configuration.builders.CopyrightBuilder copyrightBuilder41 = copyrightBuilder39.setStart("OASIS");
        org.apache.rat.configuration.builders.AnyBuilder anyBuilder42 = org.apache.rat.analysis.IHeaderMatcher.Builder.any();
        org.apache.rat.configuration.builders.MatcherRefBuilder matcherRefBuilder43 = org.apache.rat.analysis.IHeaderMatcher.Builder.matcherRef();
        boolean boolean44 = matcherRefBuilder43.hasId();
        java.util.Map<java.lang.String, org.apache.rat.analysis.IHeaderMatcher> strMap45 = null;
        org.apache.rat.configuration.builders.MatcherRefBuilder matcherRefBuilder46 = matcherRefBuilder43.setMatchers(strMap45);
        org.apache.rat.configuration.builders.CopyrightBuilder copyrightBuilder47 = org.apache.rat.analysis.IHeaderMatcher.Builder.copyright();
        org.apache.rat.configuration.builders.MatcherRefBuilder matcherRefBuilder48 = org.apache.rat.analysis.IHeaderMatcher.Builder.matcherRef();
        boolean boolean49 = matcherRefBuilder48.hasId();
        java.lang.String str50 = matcherRefBuilder48.toString();
        java.util.Map<java.lang.String, org.apache.rat.analysis.IHeaderMatcher> strMap51 = null;
        org.apache.rat.configuration.builders.MatcherRefBuilder matcherRefBuilder52 = matcherRefBuilder48.setMatchers(strMap51);
        org.apache.rat.analysis.IHeaderMatcher.Builder[] builderArray53 = new org.apache.rat.analysis.IHeaderMatcher.Builder[] { matcherRefBuilder8, allBuilder12, copyrightBuilder18, matcherRefBuilder19, copyrightBuilder21, copyrightBuilder27, copyrightBuilder28, copyrightBuilder33, copyrightBuilder39, anyBuilder42, matcherRefBuilder43, copyrightBuilder47, matcherRefBuilder48 };
        java.util.ArrayList<org.apache.rat.analysis.IHeaderMatcher.Builder> builderList54 = new java.util.ArrayList<org.apache.rat.analysis.IHeaderMatcher.Builder>();
        boolean boolean55 = java.util.Collections.addAll((java.util.Collection<org.apache.rat.analysis.IHeaderMatcher.Builder>) builderList54, builderArray53);
        org.apache.rat.configuration.builders.AbstractBuilder abstractBuilder56 = notBuilder6.add((java.util.Collection<org.apache.rat.analysis.IHeaderMatcher.Builder>) builderList54);
        org.apache.rat.configuration.builders.MatcherRefBuilder matcherRefBuilder57 = new org.apache.rat.configuration.builders.MatcherRefBuilder();
        org.apache.rat.analysis.IHeaderMatcher.Builder[] builderArray58 = new org.apache.rat.analysis.IHeaderMatcher.Builder[] { matcherRefBuilder2, anyBuilder5, notBuilder6, matcherRefBuilder57 };
        java.util.ArrayList<org.apache.rat.analysis.IHeaderMatcher.Builder> builderList59 = new java.util.ArrayList<org.apache.rat.analysis.IHeaderMatcher.Builder>();
        boolean boolean60 = java.util.Collections.addAll((java.util.Collection<org.apache.rat.analysis.IHeaderMatcher.Builder>) builderList59, builderArray58);
        org.apache.rat.configuration.builders.AbstractBuilder abstractBuilder61 = allBuilder1.add((java.util.Collection<org.apache.rat.analysis.IHeaderMatcher.Builder>) builderList59);
        defaultLog0.info((java.lang.Object) allBuilder1);
        org.apache.rat.annotation.ApacheV2LicenseAppender apacheV2LicenseAppender64 = new org.apache.rat.annotation.ApacheV2LicenseAppender((org.apache.rat.utils.Log) defaultLog0, "true");
        org.apache.rat.annotation.ApacheV2LicenseAppender apacheV2LicenseAppender65 = new org.apache.rat.annotation.ApacheV2LicenseAppender((org.apache.rat.utils.Log) defaultLog0);
        apacheV2LicenseAppender65.setForce(true);
        java.io.File file68 = null;
        // The following exception was thrown during execution in test generation
        try {
            java.lang.String str69 = apacheV2LicenseAppender65.getLicenseHeader(file68);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(defaultLog0);
        org.junit.Assert.assertNotNull(matcherRefBuilder2);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "MathcerRefBuilder: null" + "'", str4, "MathcerRefBuilder: null");
        org.junit.Assert.assertNotNull(anyBuilder5);
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "NotBuilder: null" + "'", str7, "NotBuilder: null");
        org.junit.Assert.assertNotNull(matcherRefBuilder8);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertNotNull(matcherRefBuilder11);
        org.junit.Assert.assertNotNull(copyrightBuilder13);
        org.junit.Assert.assertNotNull(copyrightBuilder15);
        org.junit.Assert.assertEquals("'" + str16 + "' != '" + "Copyright Builder: s:OASIS e:null o:null" + "'", str16, "Copyright Builder: s:OASIS e:null o:null");
        org.junit.Assert.assertNotNull(copyrightBuilder18);
        org.junit.Assert.assertNotNull(matcherRefBuilder19);
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + false + "'", boolean20 == false);
        org.junit.Assert.assertNotNull(copyrightBuilder21);
        org.junit.Assert.assertNotNull(copyrightBuilder23);
        org.junit.Assert.assertEquals("'" + str24 + "' != '" + "Copyright Builder: s:OASIS e:null o:null" + "'", str24, "Copyright Builder: s:OASIS e:null o:null");
        org.junit.Assert.assertNotNull(copyrightBuilder26);
        org.junit.Assert.assertNotNull(copyrightBuilder27);
        org.junit.Assert.assertNotNull(copyrightBuilder28);
        org.junit.Assert.assertEquals("'" + str29 + "' != '" + "Copyright Builder: s:null e:null o:null" + "'", str29, "Copyright Builder: s:null e:null o:null");
        org.junit.Assert.assertNotNull(copyrightBuilder31);
        org.junit.Assert.assertTrue("'" + boolean32 + "' != '" + false + "'", boolean32 == false);
        org.junit.Assert.assertNotNull(copyrightBuilder33);
        org.junit.Assert.assertEquals("'" + str34 + "' != '" + "Copyright Builder: s:null e:null o:null" + "'", str34, "Copyright Builder: s:null e:null o:null");
        org.junit.Assert.assertNotNull(copyrightBuilder36);
        org.junit.Assert.assertTrue("'" + boolean37 + "' != '" + false + "'", boolean37 == false);
        org.junit.Assert.assertEquals("'" + str38 + "' != '" + "Copyright Builder: s:null e:.cvsignore o:null" + "'", str38, "Copyright Builder: s:null e:.cvsignore o:null");
        org.junit.Assert.assertNotNull(copyrightBuilder39);
        org.junit.Assert.assertNotNull(copyrightBuilder41);
        org.junit.Assert.assertNotNull(anyBuilder42);
        org.junit.Assert.assertNotNull(matcherRefBuilder43);
        org.junit.Assert.assertTrue("'" + boolean44 + "' != '" + false + "'", boolean44 == false);
        org.junit.Assert.assertNotNull(matcherRefBuilder46);
        org.junit.Assert.assertNotNull(copyrightBuilder47);
        org.junit.Assert.assertNotNull(matcherRefBuilder48);
        org.junit.Assert.assertTrue("'" + boolean49 + "' != '" + false + "'", boolean49 == false);
        org.junit.Assert.assertEquals("'" + str50 + "' != '" + "MathcerRefBuilder: null" + "'", str50, "MathcerRefBuilder: null");
        org.junit.Assert.assertNotNull(matcherRefBuilder52);
        org.junit.Assert.assertNotNull(builderArray53);
        org.junit.Assert.assertTrue("'" + boolean55 + "' != '" + true + "'", boolean55 == true);
        org.junit.Assert.assertNotNull(abstractBuilder56);
        org.junit.Assert.assertNotNull(builderArray58);
        org.junit.Assert.assertTrue("'" + boolean60 + "' != '" + true + "'", boolean60 == true);
        org.junit.Assert.assertNotNull(abstractBuilder61);
    }

    @Test
    public void test13693() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest27.test13693");
        org.apache.rat.Defaults.Builder builder0 = org.apache.rat.Defaults.builder();
        org.apache.rat.Defaults.Builder builder2 = builder0.add("META-DATA#LICENSEFAMILYNAME");
        org.apache.rat.Defaults.Builder builder4 = builder0.remove("Copyright Builder: s:null e:null o:null");
        org.apache.rat.Defaults.Builder builder5 = builder4.noDefault();
        org.apache.rat.Defaults.Builder builder6 = builder5.noDefault();
        org.apache.rat.Defaults.Builder builder8 = builder5.remove("8db879cc-ee3e-4155-b6f2-7a5caecabc30");
        java.net.URL uRL9 = null;
        // The following exception was thrown during execution in test generation
        try {
            org.apache.rat.Defaults.Builder builder10 = builder5.remove(uRL9);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(builder0);
        org.junit.Assert.assertNotNull(builder2);
        org.junit.Assert.assertNotNull(builder4);
        org.junit.Assert.assertNotNull(builder5);
        org.junit.Assert.assertNotNull(builder6);
        org.junit.Assert.assertNotNull(builder8);
    }

    @Test
    public void test13694() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest27.test13694");
        java.io.File file0 = null;
        java.util.regex.Pattern pattern1 = null;
        org.apache.rat.utils.Log log2 = null;
        org.apache.rat.ReportConfiguration reportConfiguration3 = new org.apache.rat.ReportConfiguration(log2);
        org.apache.rat.report.claim.ClaimStatistic claimStatistic4 = org.apache.rat.Reporter.report(reportConfiguration3);
        org.apache.rat.utils.Log log5 = null;
        org.apache.rat.ReportConfiguration reportConfiguration6 = new org.apache.rat.ReportConfiguration(log5);
        org.apache.rat.report.claim.ClaimStatistic claimStatistic7 = org.apache.rat.Reporter.report(reportConfiguration6);
        org.apache.rat.utils.ReportingSet.Options options8 = org.apache.rat.utils.ReportingSet.Options.OVERWRITE;
        reportConfiguration6.licenseDuplicateOption(options8);
        reportConfiguration3.familyDuplicateOption(options8);
        org.apache.commons.io.function.IOSupplier<java.io.PrintWriter> printWriterIOSupplier11 = reportConfiguration3.getWriter();
        boolean boolean12 = reportConfiguration3.isAddingLicensesForced();
        java.io.FilenameFilter filenameFilter13 = reportConfiguration3.getInputFileFilter();
        java.io.FilenameFilter filenameFilter14 = reportConfiguration3.getInputFileFilter();
        boolean boolean15 = reportConfiguration3.isStyleReport();
        org.apache.rat.utils.Log log16 = reportConfiguration3.getLog();
        org.apache.commons.io.filefilter.IOFileFilter iOFileFilter17 = reportConfiguration3.getDirectoryFilter();
        org.apache.commons.io.filefilter.IOFileFilter iOFileFilter18 = iOFileFilter17.negate();
        org.apache.rat.utils.Log log19 = null;
        org.apache.rat.ReportConfiguration reportConfiguration20 = new org.apache.rat.ReportConfiguration(log19);
        java.io.FilenameFilter filenameFilter21 = reportConfiguration20.getInputFileFilter();
        org.apache.rat.license.LicenseSetFactory.LicenseFilter licenseFilter22 = org.apache.rat.license.LicenseSetFactory.LicenseFilter.all;
        java.util.SortedSet<org.apache.rat.license.ILicense> iLicenseSet23 = reportConfiguration20.getLicenses(licenseFilter22);
        org.apache.rat.license.ILicenseFamily iLicenseFamily24 = null;
        reportConfiguration20.addFamily(iLicenseFamily24);
        org.apache.commons.io.filefilter.IOFileFilter iOFileFilter26 = reportConfiguration20.getDirectoryFilter();
        org.apache.rat.utils.Log log27 = null;
        org.apache.rat.ReportConfiguration reportConfiguration28 = new org.apache.rat.ReportConfiguration(log27);
        java.io.FilenameFilter filenameFilter29 = reportConfiguration28.getInputFileFilter();
        org.apache.rat.license.LicenseSetFactory.LicenseFilter licenseFilter30 = org.apache.rat.license.LicenseSetFactory.LicenseFilter.all;
        java.util.SortedSet<org.apache.rat.license.ILicense> iLicenseSet31 = reportConfiguration28.getLicenses(licenseFilter30);
        org.apache.rat.config.AddLicenseHeaders addLicenseHeaders32 = org.apache.rat.config.AddLicenseHeaders.FALSE;
        reportConfiguration28.setAddLicenseHeaders(addLicenseHeaders32);
        org.apache.rat.utils.Log log34 = null;
        org.apache.rat.ReportConfiguration reportConfiguration35 = new org.apache.rat.ReportConfiguration(log34);
        org.apache.rat.report.claim.ClaimStatistic claimStatistic36 = org.apache.rat.Reporter.report(reportConfiguration35);
        org.apache.rat.license.LicenseSetFactory.LicenseFilter licenseFilter37 = org.apache.rat.license.LicenseSetFactory.LicenseFilter.all;
        org.apache.rat.Reporter.listLicenses(reportConfiguration35, licenseFilter37);
        org.apache.rat.Reporter.listLicenses(reportConfiguration28, licenseFilter37);
        org.apache.rat.utils.Log log40 = null;
        org.apache.rat.ReportConfiguration reportConfiguration41 = new org.apache.rat.ReportConfiguration(log40);
        java.io.FilenameFilter filenameFilter42 = reportConfiguration41.getInputFileFilter();
        org.apache.rat.license.LicenseSetFactory.LicenseFilter licenseFilter43 = org.apache.rat.license.LicenseSetFactory.LicenseFilter.all;
        java.util.SortedSet<org.apache.rat.license.ILicense> iLicenseSet44 = reportConfiguration41.getLicenses(licenseFilter43);
        org.apache.rat.config.AddLicenseHeaders addLicenseHeaders45 = org.apache.rat.config.AddLicenseHeaders.FALSE;
        reportConfiguration41.setAddLicenseHeaders(addLicenseHeaders45);
        org.apache.rat.utils.Log log47 = null;
        org.apache.rat.ReportConfiguration reportConfiguration48 = new org.apache.rat.ReportConfiguration(log47);
        org.apache.rat.report.claim.ClaimStatistic claimStatistic49 = org.apache.rat.Reporter.report(reportConfiguration48);
        org.apache.rat.license.LicenseSetFactory.LicenseFilter licenseFilter50 = org.apache.rat.license.LicenseSetFactory.LicenseFilter.all;
        org.apache.rat.Reporter.listLicenses(reportConfiguration48, licenseFilter50);
        org.apache.rat.Reporter.listLicenses(reportConfiguration41, licenseFilter50);
        org.apache.rat.Reporter.listLicenses(reportConfiguration28, licenseFilter50);
        org.apache.rat.utils.Log log54 = null;
        org.apache.rat.ReportConfiguration reportConfiguration55 = new org.apache.rat.ReportConfiguration(log54);
        org.apache.commons.io.function.IOSupplier<java.io.OutputStream> outputStreamIOSupplier56 = reportConfiguration55.getOutput();
        reportConfiguration28.setOut(outputStreamIOSupplier56);
        org.apache.rat.utils.Log.Level level58 = org.apache.rat.utils.Log.Level.WARN;
        reportConfiguration28.logLicenseCollisions(level58);
        org.apache.commons.io.filefilter.IOFileFilter iOFileFilter60 = reportConfiguration28.getDirectoryFilter();
        java.nio.file.Path path61 = null;
        boolean boolean62 = iOFileFilter60.matches(path61);
        java.nio.file.Path path63 = null;
        java.nio.file.attribute.BasicFileAttributes basicFileAttributes64 = null;
        java.nio.file.FileVisitResult fileVisitResult65 = iOFileFilter60.accept(path63, basicFileAttributes64);
        org.apache.commons.io.filefilter.IOFileFilter iOFileFilter66 = iOFileFilter26.or(iOFileFilter60);
        org.apache.commons.io.filefilter.IOFileFilter iOFileFilter67 = iOFileFilter60.negate();
        java.nio.file.Path path68 = null;
        boolean boolean69 = iOFileFilter67.matches(path68);
        java.nio.file.Path path70 = null;
        java.nio.file.attribute.BasicFileAttributes basicFileAttributes71 = null;
        java.nio.file.FileVisitResult fileVisitResult72 = iOFileFilter67.accept(path70, basicFileAttributes71);
        org.apache.commons.io.filefilter.IOFileFilter iOFileFilter73 = iOFileFilter17.or(iOFileFilter67);
        java.nio.file.Path path74 = null;
        boolean boolean75 = iOFileFilter73.matches(path74);
        // The following exception was thrown during execution in test generation
        try {
            org.apache.rat.walker.DirectoryWalker directoryWalker76 = new org.apache.rat.walker.DirectoryWalker(file0, pattern1, iOFileFilter73);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNull(claimStatistic4);
        org.junit.Assert.assertNull(claimStatistic7);
        org.junit.Assert.assertTrue("'" + options8 + "' != '" + org.apache.rat.utils.ReportingSet.Options.OVERWRITE + "'", options8.equals(org.apache.rat.utils.ReportingSet.Options.OVERWRITE));
        org.junit.Assert.assertNotNull(printWriterIOSupplier11);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertNull(filenameFilter13);
        org.junit.Assert.assertNull(filenameFilter14);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + true + "'", boolean15 == true);
        org.junit.Assert.assertNull(log16);
        org.junit.Assert.assertNotNull(iOFileFilter17);
        org.junit.Assert.assertNotNull(iOFileFilter18);
        org.junit.Assert.assertNull(filenameFilter21);
        org.junit.Assert.assertTrue("'" + licenseFilter22 + "' != '" + org.apache.rat.license.LicenseSetFactory.LicenseFilter.all + "'", licenseFilter22.equals(org.apache.rat.license.LicenseSetFactory.LicenseFilter.all));
        org.junit.Assert.assertNotNull(iLicenseSet23);
        org.junit.Assert.assertNotNull(iOFileFilter26);
        org.junit.Assert.assertNull(filenameFilter29);
        org.junit.Assert.assertTrue("'" + licenseFilter30 + "' != '" + org.apache.rat.license.LicenseSetFactory.LicenseFilter.all + "'", licenseFilter30.equals(org.apache.rat.license.LicenseSetFactory.LicenseFilter.all));
        org.junit.Assert.assertNotNull(iLicenseSet31);
        org.junit.Assert.assertTrue("'" + addLicenseHeaders32 + "' != '" + org.apache.rat.config.AddLicenseHeaders.FALSE + "'", addLicenseHeaders32.equals(org.apache.rat.config.AddLicenseHeaders.FALSE));
        org.junit.Assert.assertNull(claimStatistic36);
        org.junit.Assert.assertTrue("'" + licenseFilter37 + "' != '" + org.apache.rat.license.LicenseSetFactory.LicenseFilter.all + "'", licenseFilter37.equals(org.apache.rat.license.LicenseSetFactory.LicenseFilter.all));
        org.junit.Assert.assertNull(filenameFilter42);
        org.junit.Assert.assertTrue("'" + licenseFilter43 + "' != '" + org.apache.rat.license.LicenseSetFactory.LicenseFilter.all + "'", licenseFilter43.equals(org.apache.rat.license.LicenseSetFactory.LicenseFilter.all));
        org.junit.Assert.assertNotNull(iLicenseSet44);
        org.junit.Assert.assertTrue("'" + addLicenseHeaders45 + "' != '" + org.apache.rat.config.AddLicenseHeaders.FALSE + "'", addLicenseHeaders45.equals(org.apache.rat.config.AddLicenseHeaders.FALSE));
        org.junit.Assert.assertNull(claimStatistic49);
        org.junit.Assert.assertTrue("'" + licenseFilter50 + "' != '" + org.apache.rat.license.LicenseSetFactory.LicenseFilter.all + "'", licenseFilter50.equals(org.apache.rat.license.LicenseSetFactory.LicenseFilter.all));
        org.junit.Assert.assertNotNull(outputStreamIOSupplier56);
        org.junit.Assert.assertTrue("'" + level58 + "' != '" + org.apache.rat.utils.Log.Level.WARN + "'", level58.equals(org.apache.rat.utils.Log.Level.WARN));
        org.junit.Assert.assertNotNull(iOFileFilter60);
        org.junit.Assert.assertTrue("'" + boolean62 + "' != '" + false + "'", boolean62 == false);
        org.junit.Assert.assertTrue("'" + fileVisitResult65 + "' != '" + java.nio.file.FileVisitResult.TERMINATE + "'", fileVisitResult65.equals(java.nio.file.FileVisitResult.TERMINATE));
        org.junit.Assert.assertNotNull(iOFileFilter66);
        org.junit.Assert.assertNotNull(iOFileFilter67);
        org.junit.Assert.assertTrue("'" + boolean69 + "' != '" + true + "'", boolean69 == true);
        org.junit.Assert.assertTrue("'" + fileVisitResult72 + "' != '" + java.nio.file.FileVisitResult.CONTINUE + "'", fileVisitResult72.equals(java.nio.file.FileVisitResult.CONTINUE));
        org.junit.Assert.assertNotNull(iOFileFilter73);
        org.junit.Assert.assertTrue("'" + boolean75 + "' != '" + true + "'", boolean75 == true);
    }

    @Test
    public void test13695() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest27.test13695");
        org.apache.rat.Defaults.Builder builder0 = org.apache.rat.Defaults.builder();
        org.apache.rat.Defaults.Builder builder2 = builder0.add("META-DATA#LICENSEFAMILYNAME");
        org.apache.rat.Defaults.Builder builder4 = builder0.add("TextBuilder: Datum [ name ='http:...");
        org.apache.rat.Defaults.Builder builder6 = builder0.add("The MIT License");
        org.apache.rat.Defaults.Builder builder8 = builder6.remove("TextBuilder: 223f0aba-15d4-49e9-9...");
        org.apache.rat.Defaults.Builder builder10 = builder6.remove("24b2bc0b-f6f1-4bb9-ae41-2a282b3cbafd");
        org.junit.Assert.assertNotNull(builder0);
        org.junit.Assert.assertNotNull(builder2);
        org.junit.Assert.assertNotNull(builder4);
        org.junit.Assert.assertNotNull(builder6);
        org.junit.Assert.assertNotNull(builder8);
        org.junit.Assert.assertNotNull(builder10);
    }

    @Test
    public void test13696() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest27.test13696");
        org.apache.rat.utils.Log log0 = null;
        org.apache.rat.ReportConfiguration reportConfiguration1 = new org.apache.rat.ReportConfiguration(log0);
        org.apache.rat.license.ILicenseFamily[] iLicenseFamilyArray2 = new org.apache.rat.license.ILicenseFamily[] {};
        java.util.ArrayList<org.apache.rat.license.ILicenseFamily> iLicenseFamilyList3 = new java.util.ArrayList<org.apache.rat.license.ILicenseFamily>();
        boolean boolean4 = java.util.Collections.addAll((java.util.Collection<org.apache.rat.license.ILicenseFamily>) iLicenseFamilyList3, iLicenseFamilyArray2);
        reportConfiguration1.addFamilies((java.util.Collection<org.apache.rat.license.ILicenseFamily>) iLicenseFamilyList3);
        org.apache.rat.utils.Log.Level level6 = org.apache.rat.utils.Log.Level.ERROR;
        reportConfiguration1.logLicenseCollisions(level6);
        org.apache.rat.report.IReportable iReportable8 = reportConfiguration1.getReportable();
        org.apache.rat.utils.Log log9 = null;
        org.apache.rat.ReportConfiguration reportConfiguration10 = new org.apache.rat.ReportConfiguration(log9);
        reportConfiguration10.addApprovedLicenseCategory(".cvsignore");
        org.apache.rat.utils.Log.Level level13 = org.apache.rat.utils.Log.Level.ERROR;
        reportConfiguration10.logLicenseCollisions(level13);
        reportConfiguration10.addApprovedLicenseCategory("73fbee1b-7ed9-442a-968e-b2b525ca688f");
        org.apache.rat.utils.Log log17 = null;
        org.apache.rat.ReportConfiguration reportConfiguration18 = new org.apache.rat.ReportConfiguration(log17);
        java.io.FilenameFilter filenameFilter19 = reportConfiguration18.getInputFileFilter();
        org.apache.rat.license.LicenseSetFactory.LicenseFilter licenseFilter20 = org.apache.rat.license.LicenseSetFactory.LicenseFilter.all;
        java.util.SortedSet<org.apache.rat.license.ILicense> iLicenseSet21 = reportConfiguration18.getLicenses(licenseFilter20);
        org.apache.rat.config.AddLicenseHeaders addLicenseHeaders22 = org.apache.rat.config.AddLicenseHeaders.FALSE;
        reportConfiguration18.setAddLicenseHeaders(addLicenseHeaders22);
        org.apache.rat.utils.Log log24 = null;
        org.apache.rat.ReportConfiguration reportConfiguration25 = new org.apache.rat.ReportConfiguration(log24);
        org.apache.rat.report.claim.ClaimStatistic claimStatistic26 = org.apache.rat.Reporter.report(reportConfiguration25);
        org.apache.rat.license.LicenseSetFactory.LicenseFilter licenseFilter27 = org.apache.rat.license.LicenseSetFactory.LicenseFilter.all;
        org.apache.rat.Reporter.listLicenses(reportConfiguration25, licenseFilter27);
        org.apache.rat.Reporter.listLicenses(reportConfiguration18, licenseFilter27);
        org.apache.rat.utils.Log log30 = null;
        org.apache.rat.ReportConfiguration reportConfiguration31 = new org.apache.rat.ReportConfiguration(log30);
        java.io.FilenameFilter filenameFilter32 = reportConfiguration31.getInputFileFilter();
        org.apache.rat.license.LicenseSetFactory.LicenseFilter licenseFilter33 = org.apache.rat.license.LicenseSetFactory.LicenseFilter.all;
        java.util.SortedSet<org.apache.rat.license.ILicense> iLicenseSet34 = reportConfiguration31.getLicenses(licenseFilter33);
        org.apache.rat.config.AddLicenseHeaders addLicenseHeaders35 = org.apache.rat.config.AddLicenseHeaders.FALSE;
        reportConfiguration31.setAddLicenseHeaders(addLicenseHeaders35);
        org.apache.rat.utils.Log log37 = null;
        org.apache.rat.ReportConfiguration reportConfiguration38 = new org.apache.rat.ReportConfiguration(log37);
        org.apache.rat.report.claim.ClaimStatistic claimStatistic39 = org.apache.rat.Reporter.report(reportConfiguration38);
        org.apache.rat.license.LicenseSetFactory.LicenseFilter licenseFilter40 = org.apache.rat.license.LicenseSetFactory.LicenseFilter.all;
        org.apache.rat.Reporter.listLicenses(reportConfiguration38, licenseFilter40);
        org.apache.rat.Reporter.listLicenses(reportConfiguration31, licenseFilter40);
        org.apache.rat.Reporter.listLicenses(reportConfiguration18, licenseFilter40);
        java.io.FilenameFilter filenameFilter44 = reportConfiguration18.getInputFileFilter();
        reportConfiguration18.setStyleReport(false);
        org.apache.rat.report.IReportable iReportable47 = null;
        reportConfiguration18.setReportable(iReportable47);
        org.apache.rat.Defaults.Builder builder50 = org.apache.rat.Defaults.builder();
        org.apache.rat.Defaults defaults51 = builder50.build();
        org.apache.rat.utils.Log log52 = null;
        org.apache.rat.ReportConfiguration reportConfiguration53 = new org.apache.rat.ReportConfiguration(log52);
        java.io.FilenameFilter filenameFilter54 = reportConfiguration53.getInputFileFilter();
        org.apache.rat.license.LicenseSetFactory.LicenseFilter licenseFilter55 = org.apache.rat.license.LicenseSetFactory.LicenseFilter.all;
        java.util.SortedSet<org.apache.rat.license.ILicense> iLicenseSet56 = reportConfiguration53.getLicenses(licenseFilter55);
        org.apache.rat.config.AddLicenseHeaders addLicenseHeaders57 = org.apache.rat.config.AddLicenseHeaders.FALSE;
        reportConfiguration53.setAddLicenseHeaders(addLicenseHeaders57);
        org.apache.rat.utils.Log log59 = null;
        org.apache.rat.ReportConfiguration reportConfiguration60 = new org.apache.rat.ReportConfiguration(log59);
        org.apache.rat.report.claim.ClaimStatistic claimStatistic61 = org.apache.rat.Reporter.report(reportConfiguration60);
        org.apache.rat.license.LicenseSetFactory.LicenseFilter licenseFilter62 = org.apache.rat.license.LicenseSetFactory.LicenseFilter.all;
        org.apache.rat.Reporter.listLicenses(reportConfiguration60, licenseFilter62);
        org.apache.rat.Reporter.listLicenses(reportConfiguration53, licenseFilter62);
        org.apache.rat.utils.Log log65 = null;
        org.apache.rat.ReportConfiguration reportConfiguration66 = new org.apache.rat.ReportConfiguration(log65);
        java.io.FilenameFilter filenameFilter67 = reportConfiguration66.getInputFileFilter();
        org.apache.rat.license.LicenseSetFactory.LicenseFilter licenseFilter68 = org.apache.rat.license.LicenseSetFactory.LicenseFilter.all;
        java.util.SortedSet<org.apache.rat.license.ILicense> iLicenseSet69 = reportConfiguration66.getLicenses(licenseFilter68);
        org.apache.rat.config.AddLicenseHeaders addLicenseHeaders70 = org.apache.rat.config.AddLicenseHeaders.FALSE;
        reportConfiguration66.setAddLicenseHeaders(addLicenseHeaders70);
        org.apache.rat.utils.Log log72 = null;
        org.apache.rat.ReportConfiguration reportConfiguration73 = new org.apache.rat.ReportConfiguration(log72);
        org.apache.rat.report.claim.ClaimStatistic claimStatistic74 = org.apache.rat.Reporter.report(reportConfiguration73);
        org.apache.rat.license.LicenseSetFactory.LicenseFilter licenseFilter75 = org.apache.rat.license.LicenseSetFactory.LicenseFilter.all;
        org.apache.rat.Reporter.listLicenses(reportConfiguration73, licenseFilter75);
        org.apache.rat.Reporter.listLicenses(reportConfiguration66, licenseFilter75);
        java.util.SortedSet<org.apache.rat.license.ILicenseFamily> iLicenseFamilySet78 = reportConfiguration53.getLicenseFamilies(licenseFilter75);
        java.util.SortedSet<org.apache.rat.license.ILicense> iLicenseSet79 = defaults51.getLicenses(licenseFilter75);
        org.apache.rat.utils.ReportingSet<org.apache.rat.license.ILicense> iLicenseSet80 = new org.apache.rat.utils.ReportingSet<org.apache.rat.license.ILicense>(iLicenseSet79);
        org.apache.rat.license.ILicense iLicense81 = org.apache.rat.license.LicenseSetFactory.search("TMF", iLicenseSet79);
        reportConfiguration18.addLicense(iLicense81);
        java.lang.String str83 = iLicense81.derivedFrom();
        reportConfiguration10.addLicense(iLicense81);
        reportConfiguration1.addLicense(iLicense81);
        java.lang.String str86 = iLicense81.derivedFrom();
        java.lang.String str87 = iLicense81.derivedFrom();
        org.junit.Assert.assertNotNull(iLicenseFamilyArray2);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertTrue("'" + level6 + "' != '" + org.apache.rat.utils.Log.Level.ERROR + "'", level6.equals(org.apache.rat.utils.Log.Level.ERROR));
        org.junit.Assert.assertNull(iReportable8);
        org.junit.Assert.assertTrue("'" + level13 + "' != '" + org.apache.rat.utils.Log.Level.ERROR + "'", level13.equals(org.apache.rat.utils.Log.Level.ERROR));
        org.junit.Assert.assertNull(filenameFilter19);
        org.junit.Assert.assertTrue("'" + licenseFilter20 + "' != '" + org.apache.rat.license.LicenseSetFactory.LicenseFilter.all + "'", licenseFilter20.equals(org.apache.rat.license.LicenseSetFactory.LicenseFilter.all));
        org.junit.Assert.assertNotNull(iLicenseSet21);
        org.junit.Assert.assertTrue("'" + addLicenseHeaders22 + "' != '" + org.apache.rat.config.AddLicenseHeaders.FALSE + "'", addLicenseHeaders22.equals(org.apache.rat.config.AddLicenseHeaders.FALSE));
        org.junit.Assert.assertNull(claimStatistic26);
        org.junit.Assert.assertTrue("'" + licenseFilter27 + "' != '" + org.apache.rat.license.LicenseSetFactory.LicenseFilter.all + "'", licenseFilter27.equals(org.apache.rat.license.LicenseSetFactory.LicenseFilter.all));
        org.junit.Assert.assertNull(filenameFilter32);
        org.junit.Assert.assertTrue("'" + licenseFilter33 + "' != '" + org.apache.rat.license.LicenseSetFactory.LicenseFilter.all + "'", licenseFilter33.equals(org.apache.rat.license.LicenseSetFactory.LicenseFilter.all));
        org.junit.Assert.assertNotNull(iLicenseSet34);
        org.junit.Assert.assertTrue("'" + addLicenseHeaders35 + "' != '" + org.apache.rat.config.AddLicenseHeaders.FALSE + "'", addLicenseHeaders35.equals(org.apache.rat.config.AddLicenseHeaders.FALSE));
        org.junit.Assert.assertNull(claimStatistic39);
        org.junit.Assert.assertTrue("'" + licenseFilter40 + "' != '" + org.apache.rat.license.LicenseSetFactory.LicenseFilter.all + "'", licenseFilter40.equals(org.apache.rat.license.LicenseSetFactory.LicenseFilter.all));
        org.junit.Assert.assertNull(filenameFilter44);
        org.junit.Assert.assertNotNull(builder50);
        org.junit.Assert.assertNotNull(defaults51);
        org.junit.Assert.assertNull(filenameFilter54);
        org.junit.Assert.assertTrue("'" + licenseFilter55 + "' != '" + org.apache.rat.license.LicenseSetFactory.LicenseFilter.all + "'", licenseFilter55.equals(org.apache.rat.license.LicenseSetFactory.LicenseFilter.all));
        org.junit.Assert.assertNotNull(iLicenseSet56);
        org.junit.Assert.assertTrue("'" + addLicenseHeaders57 + "' != '" + org.apache.rat.config.AddLicenseHeaders.FALSE + "'", addLicenseHeaders57.equals(org.apache.rat.config.AddLicenseHeaders.FALSE));
        org.junit.Assert.assertNull(claimStatistic61);
        org.junit.Assert.assertTrue("'" + licenseFilter62 + "' != '" + org.apache.rat.license.LicenseSetFactory.LicenseFilter.all + "'", licenseFilter62.equals(org.apache.rat.license.LicenseSetFactory.LicenseFilter.all));
        org.junit.Assert.assertNull(filenameFilter67);
        org.junit.Assert.assertTrue("'" + licenseFilter68 + "' != '" + org.apache.rat.license.LicenseSetFactory.LicenseFilter.all + "'", licenseFilter68.equals(org.apache.rat.license.LicenseSetFactory.LicenseFilter.all));
        org.junit.Assert.assertNotNull(iLicenseSet69);
        org.junit.Assert.assertTrue("'" + addLicenseHeaders70 + "' != '" + org.apache.rat.config.AddLicenseHeaders.FALSE + "'", addLicenseHeaders70.equals(org.apache.rat.config.AddLicenseHeaders.FALSE));
        org.junit.Assert.assertNull(claimStatistic74);
        org.junit.Assert.assertTrue("'" + licenseFilter75 + "' != '" + org.apache.rat.license.LicenseSetFactory.LicenseFilter.all + "'", licenseFilter75.equals(org.apache.rat.license.LicenseSetFactory.LicenseFilter.all));
        org.junit.Assert.assertNotNull(iLicenseFamilySet78);
        org.junit.Assert.assertNotNull(iLicenseSet79);
        org.junit.Assert.assertNotNull(iLicense81);
        org.junit.Assert.assertEquals("'" + str83 + "' != '" + "BSD-3" + "'", str83, "BSD-3");
        org.junit.Assert.assertEquals("'" + str86 + "' != '" + "BSD-3" + "'", str86, "BSD-3");
        org.junit.Assert.assertEquals("'" + str87 + "' != '" + "BSD-3" + "'", str87, "BSD-3");
    }

    @Test
    public void test13697() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest27.test13697");
        java.io.Writer writer0 = null;
        org.apache.rat.report.xml.writer.impl.base.XmlWriter xmlWriter1 = new org.apache.rat.report.xml.writer.impl.base.XmlWriter(writer0);
        org.apache.rat.report.claim.impl.xml.SimpleXmlClaimReporter simpleXmlClaimReporter2 = new org.apache.rat.report.claim.impl.xml.SimpleXmlClaimReporter((org.apache.rat.report.xml.writer.IXmlWriter) xmlWriter1);
        org.apache.rat.report.claim.impl.xml.SimpleXmlClaimReporter simpleXmlClaimReporter3 = new org.apache.rat.report.claim.impl.xml.SimpleXmlClaimReporter((org.apache.rat.report.xml.writer.IXmlWriter) xmlWriter1);
        org.apache.rat.report.claim.impl.xml.SimpleXmlClaimReporter simpleXmlClaimReporter4 = new org.apache.rat.report.claim.impl.xml.SimpleXmlClaimReporter((org.apache.rat.report.xml.writer.IXmlWriter) xmlWriter1);
        org.apache.rat.report.claim.impl.xml.SimpleXmlClaimReporter simpleXmlClaimReporter5 = new org.apache.rat.report.claim.impl.xml.SimpleXmlClaimReporter((org.apache.rat.report.xml.writer.IXmlWriter) xmlWriter1);
        org.apache.rat.report.claim.impl.xml.SimpleXmlClaimReporter simpleXmlClaimReporter6 = new org.apache.rat.report.claim.impl.xml.SimpleXmlClaimReporter((org.apache.rat.report.xml.writer.IXmlWriter) xmlWriter1);
        org.apache.rat.report.claim.impl.xml.SimpleXmlClaimReporter simpleXmlClaimReporter7 = new org.apache.rat.report.claim.impl.xml.SimpleXmlClaimReporter((org.apache.rat.report.xml.writer.IXmlWriter) xmlWriter1);
        org.apache.rat.report.claim.impl.xml.SimpleXmlClaimReporter simpleXmlClaimReporter8 = new org.apache.rat.report.claim.impl.xml.SimpleXmlClaimReporter((org.apache.rat.report.xml.writer.IXmlWriter) xmlWriter1);
        org.apache.rat.report.claim.impl.xml.SimpleXmlClaimReporter simpleXmlClaimReporter9 = new org.apache.rat.report.claim.impl.xml.SimpleXmlClaimReporter((org.apache.rat.report.xml.writer.IXmlWriter) xmlWriter1);
        org.apache.rat.report.claim.impl.xml.SimpleXmlClaimReporter simpleXmlClaimReporter10 = new org.apache.rat.report.claim.impl.xml.SimpleXmlClaimReporter((org.apache.rat.report.xml.writer.IXmlWriter) xmlWriter1);
        org.apache.rat.report.claim.impl.xml.SimpleXmlClaimReporter simpleXmlClaimReporter11 = new org.apache.rat.report.claim.impl.xml.SimpleXmlClaimReporter((org.apache.rat.report.xml.writer.IXmlWriter) xmlWriter1);
        org.apache.rat.report.claim.impl.xml.SimpleXmlClaimReporter simpleXmlClaimReporter12 = new org.apache.rat.report.claim.impl.xml.SimpleXmlClaimReporter((org.apache.rat.report.xml.writer.IXmlWriter) xmlWriter1);
        org.apache.rat.report.claim.impl.xml.SimpleXmlClaimReporter simpleXmlClaimReporter13 = new org.apache.rat.report.claim.impl.xml.SimpleXmlClaimReporter((org.apache.rat.report.xml.writer.IXmlWriter) xmlWriter1);
        org.apache.rat.report.claim.impl.xml.SimpleXmlClaimReporter simpleXmlClaimReporter14 = new org.apache.rat.report.claim.impl.xml.SimpleXmlClaimReporter((org.apache.rat.report.xml.writer.IXmlWriter) xmlWriter1);
        org.apache.rat.report.claim.impl.xml.SimpleXmlClaimReporter simpleXmlClaimReporter15 = new org.apache.rat.report.claim.impl.xml.SimpleXmlClaimReporter((org.apache.rat.report.xml.writer.IXmlWriter) xmlWriter1);
        org.apache.rat.report.claim.impl.xml.SimpleXmlClaimReporter simpleXmlClaimReporter16 = new org.apache.rat.report.claim.impl.xml.SimpleXmlClaimReporter((org.apache.rat.report.xml.writer.IXmlWriter) xmlWriter1);
        org.apache.rat.report.claim.impl.xml.SimpleXmlClaimReporter simpleXmlClaimReporter17 = new org.apache.rat.report.claim.impl.xml.SimpleXmlClaimReporter((org.apache.rat.report.xml.writer.IXmlWriter) xmlWriter1);
        org.apache.rat.report.claim.impl.xml.SimpleXmlClaimReporter simpleXmlClaimReporter18 = new org.apache.rat.report.claim.impl.xml.SimpleXmlClaimReporter((org.apache.rat.report.xml.writer.IXmlWriter) xmlWriter1);
        // The following exception was thrown during execution in test generation
        try {
            simpleXmlClaimReporter18.endReport();
            org.junit.Assert.fail("Expected exception of type org.apache.rat.api.RatException; message: Cannot close last element");
        } catch (org.apache.rat.api.RatException e) {
            // Expected exception.
        }
    }

    @Test
    public void test13698() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest27.test13698");
        org.apache.rat.license.ILicense.Builder builder0 = org.apache.rat.license.ILicense.builder();
        org.apache.rat.license.ILicense.Builder builder2 = builder0.setLicenseFamilyCategory("");
        org.apache.rat.license.ILicense.Builder builder4 = builder2.setDerivedFrom("GEN  ");
        org.apache.rat.license.ILicense.Builder builder6 = builder4.setId("DOJO ");
        org.apache.rat.configuration.builders.CopyrightBuilder copyrightBuilder7 = org.apache.rat.analysis.IHeaderMatcher.Builder.copyright();
        java.lang.String str8 = copyrightBuilder7.toString();
        org.apache.rat.license.ILicense.Builder builder9 = builder4.setMatcher((org.apache.rat.analysis.IHeaderMatcher.Builder) copyrightBuilder7);
        org.apache.rat.analysis.IHeaderMatcher iHeaderMatcher10 = copyrightBuilder7.build();
        org.apache.rat.configuration.builders.CopyrightBuilder copyrightBuilder12 = copyrightBuilder7.setOwner("TextBuilder: Datum [ name ='http:...");
        org.apache.rat.configuration.builders.CopyrightBuilder copyrightBuilder14 = copyrightBuilder7.setOwner("PLAIN-RAT.XSL");
        org.apache.rat.configuration.builders.AbstractBuilder abstractBuilder16 = copyrightBuilder14.setId("7480723c-65a6-4470-aa58-975de51fe7c5");
        org.junit.Assert.assertNotNull(builder0);
        org.junit.Assert.assertNotNull(builder2);
        org.junit.Assert.assertNotNull(builder4);
        org.junit.Assert.assertNotNull(builder6);
        org.junit.Assert.assertNotNull(copyrightBuilder7);
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "Copyright Builder: s:null e:null o:null" + "'", str8, "Copyright Builder: s:null e:null o:null");
        org.junit.Assert.assertNotNull(builder9);
        org.junit.Assert.assertNotNull(iHeaderMatcher10);
        org.junit.Assert.assertNotNull(copyrightBuilder12);
        org.junit.Assert.assertNotNull(copyrightBuilder14);
        org.junit.Assert.assertNotNull(abstractBuilder16);
    }

    @Test
    public void test13699() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest27.test13699");
        java.lang.String[] strArray5 = new java.lang.String[] { "http://org/apache/rat/meta-data#LicenseFamilyCategory", "Datum [ name ='http://org/apache/rat/meta-data#LicenseFamilyCategory',value ='GPL1  ']", "MANIFEST.MF", "AllBuilder:", "The MIT License" };
        org.apache.rat.utils.ReportingSet<java.lang.String> strSet6 = new org.apache.rat.utils.ReportingSet<java.lang.String>();
        boolean boolean7 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strSet6, strArray5);
        boolean boolean9 = strSet6.addIfNotPresent("http://org/apache/rat/meta-data#LicenseFamilyName");
        boolean boolean11 = strSet6.addIfNotPresent("ef7a8b13-64c3-4510-bb0c-dbf208e1e73f");
        java.util.function.Function<java.lang.String, java.lang.String> strFunction12 = null;
        org.apache.rat.utils.ReportingSet<java.lang.String> strSet13 = strSet6.setMsgFormat(strFunction12);
        java.lang.String str14 = strSet13.first();
        java.util.Spliterator<java.lang.String> strSpliterator15 = strSet13.spliterator();
        java.lang.String str16 = strSet13.first();
        java.lang.String str17 = strSet13.first();
        org.apache.rat.utils.ReportingSet<java.lang.String> strSet19 = strSet13.tailSet("MathcerRefBuildernull");
        org.apache.rat.utils.Log.Level level20 = org.apache.rat.utils.Log.Level.ERROR;
        org.apache.rat.utils.ReportingSet<java.lang.String> strSet21 = strSet19.setLogLevel(level20);
        org.apache.rat.utils.Log log22 = null;
        org.apache.rat.utils.ReportingSet<java.lang.String> strSet23 = strSet21.setLog(log22);
        int int24 = strSet23.size();
        org.junit.Assert.assertNotNull(strArray5);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + true + "'", boolean7 == true);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + true + "'", boolean9 == true);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + true + "'", boolean11 == true);
        org.junit.Assert.assertNotNull(strSet13);
        org.junit.Assert.assertEquals("'" + str14 + "' != '" + "AllBuilder:" + "'", str14, "AllBuilder:");
        org.junit.Assert.assertNotNull(strSpliterator15);
        org.junit.Assert.assertEquals("'" + str16 + "' != '" + "AllBuilder:" + "'", str16, "AllBuilder:");
        org.junit.Assert.assertEquals("'" + str17 + "' != '" + "AllBuilder:" + "'", str17, "AllBuilder:");
        org.junit.Assert.assertNotNull(strSet19);
        org.junit.Assert.assertTrue("'" + level20 + "' != '" + org.apache.rat.utils.Log.Level.ERROR + "'", level20.equals(org.apache.rat.utils.Log.Level.ERROR));
        org.junit.Assert.assertNotNull(strSet21);
        org.junit.Assert.assertNotNull(strSet23);
        org.junit.Assert.assertTrue("'" + int24 + "' != '" + 4 + "'", int24 == 4);
    }

    @Test
    public void test13700() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest27.test13700");
        java.lang.String[] strArray4 = org.apache.commons.io.filefilter.IOFileFilter.EMPTY_STRING_ARRAY;
        boolean boolean5 = org.apache.rat.document.impl.guesser.BinaryGuesser.containsExtension("ef7a8b13-64c3-4510-bb0c-dbf208e1e73f", strArray4);
        boolean boolean6 = org.apache.rat.document.impl.guesser.BinaryGuesser.containsExtension("http://org/apache/rat/meta-data#LicenseFamilyCategory", strArray4);
        boolean boolean7 = org.apache.rat.document.impl.guesser.BinaryGuesser.extensionMatches("f1fc8dc8-990d-4a2d-9540-4e9ece3bd92c", strArray4);
        boolean boolean8 = org.apache.rat.document.impl.guesser.BinaryGuesser.containsExtension("Datum [ name ='http://org/apache/rat/meta-data#LicenseFamilyName',value ='????? ']", strArray4);
        org.junit.Assert.assertNotNull(strArray4);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
    }

    @Test
    public void test13701() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest27.test13701");
        org.apache.rat.api.MetaData metaData0 = new org.apache.rat.api.MetaData();
        java.lang.String str2 = metaData0.value("COMMON DEVELOPMENT AND DISTRIBUTION LICENSE Version 1.0");
        java.util.Collection<org.apache.rat.api.MetaData.Datum> datumCollection3 = metaData0.getData();
        java.lang.String str5 = metaData0.value("hi!");
        boolean boolean7 = metaData0.clear("6481fb19-38f0-43f5-ab95-caf84a069ee1");
        org.apache.rat.api.MetaData metaData8 = new org.apache.rat.api.MetaData();
        java.lang.String str10 = metaData8.value("COMMON DEVELOPMENT AND DISTRIBUTION LICENSE Version 1.0");
        java.lang.String str12 = metaData8.value("W3C Document Copyright");
        boolean boolean14 = metaData8.clear("hi!");
        java.lang.String str16 = metaData8.value("true");
        org.apache.rat.api.MetaData.Datum datum18 = metaData8.get("GNU General Public License, version 1");
        org.apache.rat.api.MetaData.Datum datum20 = metaData8.get("http:");
        org.apache.rat.api.MetaData.Datum datum21 = org.apache.rat.api.MetaData.RAT_APPROVED_LICENSE_DATIM_TRUE;
        metaData8.add(datum21);
        metaData0.set(datum21);
        metaData0.clear();
        java.util.Collection<org.apache.rat.api.MetaData.Datum> datumCollection25 = metaData0.getData();
        org.junit.Assert.assertNull(str2);
        org.junit.Assert.assertNotNull(datumCollection3);
        org.junit.Assert.assertNull(str5);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertNull(str10);
        org.junit.Assert.assertNull(str12);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
        org.junit.Assert.assertNull(str16);
        org.junit.Assert.assertNull(datum18);
        org.junit.Assert.assertNull(datum20);
        org.junit.Assert.assertNotNull(datum21);
        org.junit.Assert.assertNotNull(datumCollection25);
    }

    @Test
    public void test13702() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest27.test13702");
        java.util.regex.Pattern pattern1 = null;
        org.apache.rat.analysis.matchers.SimpleRegexMatcher simpleRegexMatcher2 = new org.apache.rat.analysis.matchers.SimpleRegexMatcher("d4148d3a-edbc-4672-b347-0fa619553f91", pattern1);
        // The following exception was thrown during execution in test generation
        try {
            boolean boolean4 = simpleRegexMatcher2.doMatch("");
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
    }

    @Test
    public void test13703() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest27.test13703");
        org.apache.rat.configuration.builders.RegexBuilder regexBuilder0 = new org.apache.rat.configuration.builders.RegexBuilder();
        java.lang.String str1 = regexBuilder0.toString();
        org.apache.rat.configuration.builders.RegexBuilder regexBuilder3 = regexBuilder0.setExpr("GNU General Public License, version 1");
        org.apache.rat.analysis.IHeaderMatcher iHeaderMatcher4 = regexBuilder3.build();
        org.apache.rat.analysis.IHeaderMatcher iHeaderMatcher5 = regexBuilder3.build();
        org.apache.rat.configuration.builders.RegexBuilder regexBuilder7 = regexBuilder3.setExpr("CopyrightBuildersarchiveenullonull");
        java.lang.String str8 = regexBuilder7.toString();
        org.apache.rat.analysis.IHeaderMatcher iHeaderMatcher9 = regexBuilder7.build();
        org.junit.Assert.assertEquals("'" + str1 + "' != '" + "RegexBuilder: null" + "'", str1, "RegexBuilder: null");
        org.junit.Assert.assertNotNull(regexBuilder3);
        org.junit.Assert.assertNotNull(iHeaderMatcher4);
        org.junit.Assert.assertNotNull(iHeaderMatcher5);
        org.junit.Assert.assertNotNull(regexBuilder7);
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "RegexBuilder: CopyrightBuildersarchiveenullonull" + "'", str8, "RegexBuilder: CopyrightBuildersarchiveenullonull");
        org.junit.Assert.assertNotNull(iHeaderMatcher9);
    }

    @Test
    public void test13704() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest27.test13704");
        org.apache.rat.utils.Log log0 = null;
        org.apache.rat.ReportConfiguration reportConfiguration1 = new org.apache.rat.ReportConfiguration(log0);
        java.io.FilenameFilter filenameFilter2 = reportConfiguration1.getInputFileFilter();
        org.apache.rat.license.LicenseSetFactory.LicenseFilter licenseFilter3 = org.apache.rat.license.LicenseSetFactory.LicenseFilter.all;
        java.util.SortedSet<org.apache.rat.license.ILicense> iLicenseSet4 = reportConfiguration1.getLicenses(licenseFilter3);
        org.apache.rat.config.AddLicenseHeaders addLicenseHeaders5 = org.apache.rat.config.AddLicenseHeaders.FALSE;
        reportConfiguration1.setAddLicenseHeaders(addLicenseHeaders5);
        org.apache.rat.utils.Log log7 = null;
        org.apache.rat.ReportConfiguration reportConfiguration8 = new org.apache.rat.ReportConfiguration(log7);
        org.apache.rat.report.claim.ClaimStatistic claimStatistic9 = org.apache.rat.Reporter.report(reportConfiguration8);
        org.apache.rat.license.LicenseSetFactory.LicenseFilter licenseFilter10 = org.apache.rat.license.LicenseSetFactory.LicenseFilter.all;
        org.apache.rat.Reporter.listLicenses(reportConfiguration8, licenseFilter10);
        org.apache.rat.Reporter.listLicenses(reportConfiguration1, licenseFilter10);
        org.apache.rat.report.IReportable iReportable13 = null;
        reportConfiguration1.setReportable(iReportable13);
        org.apache.rat.report.IReportable iReportable15 = reportConfiguration1.getReportable();
        boolean boolean16 = reportConfiguration1.isAddingLicenses();
        org.apache.rat.utils.ReportingSet<java.lang.String> strSet17 = new org.apache.rat.utils.ReportingSet<java.lang.String>();
        java.lang.Object[] objArray18 = strSet17.toArray();
        org.apache.rat.utils.Log log19 = null;
        org.apache.rat.ReportConfiguration reportConfiguration20 = new org.apache.rat.ReportConfiguration(log19);
        reportConfiguration20.addApprovedLicenseCategory(".cvsignore");
        org.apache.rat.utils.Log.Level level23 = org.apache.rat.utils.Log.Level.ERROR;
        reportConfiguration20.logFamilyCollisions(level23);
        org.apache.commons.io.function.IOSupplier<java.io.OutputStream> outputStreamIOSupplier25 = reportConfiguration20.getOutput();
        org.apache.rat.utils.Log log26 = null;
        org.apache.rat.ReportConfiguration reportConfiguration27 = new org.apache.rat.ReportConfiguration(log26);
        reportConfiguration27.addApprovedLicenseCategory(".cvsignore");
        org.apache.rat.utils.Log log30 = null;
        org.apache.rat.ReportConfiguration reportConfiguration31 = new org.apache.rat.ReportConfiguration(log30);
        java.io.FilenameFilter filenameFilter32 = reportConfiguration31.getInputFileFilter();
        org.apache.rat.license.LicenseSetFactory.LicenseFilter licenseFilter33 = org.apache.rat.license.LicenseSetFactory.LicenseFilter.all;
        java.util.SortedSet<org.apache.rat.license.ILicense> iLicenseSet34 = reportConfiguration31.getLicenses(licenseFilter33);
        reportConfiguration27.addLicensesIfNotPresent((java.util.Collection<org.apache.rat.license.ILicense>) iLicenseSet34);
        java.io.FilenameFilter filenameFilter36 = reportConfiguration27.getInputFileFilter();
        org.apache.rat.utils.Log log37 = null;
        org.apache.rat.ReportConfiguration reportConfiguration38 = new org.apache.rat.ReportConfiguration(log37);
        java.io.FilenameFilter filenameFilter39 = reportConfiguration38.getInputFileFilter();
        org.apache.rat.license.LicenseSetFactory.LicenseFilter licenseFilter40 = org.apache.rat.license.LicenseSetFactory.LicenseFilter.all;
        java.util.SortedSet<org.apache.rat.license.ILicense> iLicenseSet41 = reportConfiguration38.getLicenses(licenseFilter40);
        org.apache.rat.config.AddLicenseHeaders addLicenseHeaders42 = org.apache.rat.config.AddLicenseHeaders.FALSE;
        reportConfiguration38.setAddLicenseHeaders(addLicenseHeaders42);
        org.apache.rat.utils.Log log44 = null;
        org.apache.rat.ReportConfiguration reportConfiguration45 = new org.apache.rat.ReportConfiguration(log44);
        org.apache.rat.report.claim.ClaimStatistic claimStatistic46 = org.apache.rat.Reporter.report(reportConfiguration45);
        org.apache.rat.license.LicenseSetFactory.LicenseFilter licenseFilter47 = org.apache.rat.license.LicenseSetFactory.LicenseFilter.all;
        org.apache.rat.Reporter.listLicenses(reportConfiguration45, licenseFilter47);
        org.apache.rat.Reporter.listLicenses(reportConfiguration38, licenseFilter47);
        org.apache.rat.utils.Log log50 = null;
        org.apache.rat.ReportConfiguration reportConfiguration51 = new org.apache.rat.ReportConfiguration(log50);
        java.io.FilenameFilter filenameFilter52 = reportConfiguration51.getInputFileFilter();
        org.apache.rat.license.LicenseSetFactory.LicenseFilter licenseFilter53 = org.apache.rat.license.LicenseSetFactory.LicenseFilter.all;
        java.util.SortedSet<org.apache.rat.license.ILicense> iLicenseSet54 = reportConfiguration51.getLicenses(licenseFilter53);
        org.apache.rat.config.AddLicenseHeaders addLicenseHeaders55 = org.apache.rat.config.AddLicenseHeaders.FALSE;
        reportConfiguration51.setAddLicenseHeaders(addLicenseHeaders55);
        org.apache.rat.utils.Log log57 = null;
        org.apache.rat.ReportConfiguration reportConfiguration58 = new org.apache.rat.ReportConfiguration(log57);
        org.apache.rat.report.claim.ClaimStatistic claimStatistic59 = org.apache.rat.Reporter.report(reportConfiguration58);
        org.apache.rat.license.LicenseSetFactory.LicenseFilter licenseFilter60 = org.apache.rat.license.LicenseSetFactory.LicenseFilter.all;
        org.apache.rat.Reporter.listLicenses(reportConfiguration58, licenseFilter60);
        org.apache.rat.Reporter.listLicenses(reportConfiguration51, licenseFilter60);
        java.util.SortedSet<org.apache.rat.license.ILicenseFamily> iLicenseFamilySet63 = reportConfiguration38.getLicenseFamilies(licenseFilter60);
        org.apache.rat.Reporter.listLicenseFamilies(reportConfiguration27, licenseFilter60);
        java.util.SortedSet<org.apache.rat.license.ILicenseFamily> iLicenseFamilySet65 = reportConfiguration20.getLicenseFamilies(licenseFilter60);
        java.util.Collection<java.lang.String> strCollection66 = null;
        org.apache.rat.license.LicenseFamilySetFactory licenseFamilySetFactory67 = new org.apache.rat.license.LicenseFamilySetFactory(iLicenseFamilySet65, strCollection66);
        boolean boolean68 = strSet17.removeAll((java.util.Collection<org.apache.rat.license.ILicenseFamily>) iLicenseFamilySet65);
        boolean boolean70 = strSet17.addIfNotPresent("22d821a7-325b-4a40-8f38-f9cfc616d71a");
        java.lang.String[] strArray76 = new java.lang.String[] { "http://org/apache/rat/meta-data#LicenseFamilyCategory", "Datum [ name ='http://org/apache/rat/meta-data#LicenseFamilyCategory',value ='GPL1  ']", "MANIFEST.MF", "AllBuilder:", "The MIT License" };
        org.apache.rat.utils.ReportingSet<java.lang.String> strSet77 = new org.apache.rat.utils.ReportingSet<java.lang.String>();
        boolean boolean78 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strSet77, strArray76);
        boolean boolean80 = strSet77.addIfNotPresent("http://org/apache/rat/meta-data#LicenseFamilyName");
        boolean boolean82 = strSet77.addIfNotPresent("ef7a8b13-64c3-4510-bb0c-dbf208e1e73f");
        java.util.function.Function<java.lang.String, java.lang.String> strFunction83 = null;
        org.apache.rat.utils.ReportingSet<java.lang.String> strSet84 = strSet77.setMsgFormat(strFunction83);
        java.util.SortedSet<org.apache.rat.license.ILicenseFamily> iLicenseFamilySet86 = org.apache.rat.license.LicenseFamilySetFactory.emptyLicenseFamilySet();
        org.apache.rat.license.ILicenseFamily iLicenseFamily87 = org.apache.rat.license.LicenseFamilySetFactory.search("http://org/apache/rat/meta-data", iLicenseFamilySet86);
        boolean boolean88 = strSet77.containsAll((java.util.Collection<org.apache.rat.license.ILicenseFamily>) iLicenseFamilySet86);
        org.apache.rat.utils.ReportingSet<java.lang.String> strSet90 = strSet77.tailSet("http://org/apache/rat/meta-data#HeaderCategory");
        org.apache.rat.utils.Log log91 = null;
        org.apache.rat.ReportConfiguration reportConfiguration92 = new org.apache.rat.ReportConfiguration(log91);
        org.apache.rat.utils.ReportingSet.Options options93 = org.apache.rat.utils.ReportingSet.Options.OVERWRITE;
        reportConfiguration92.licenseDuplicateOption(options93);
        org.apache.rat.utils.ReportingSet<java.lang.String> strSet95 = strSet90.setDuplicateOption(options93);
        org.apache.rat.utils.ReportingSet<java.lang.String> strSet96 = strSet17.setDuplicateOption(options93);
        reportConfiguration1.licenseDuplicateOption(options93);
        org.junit.Assert.assertNull(filenameFilter2);
        org.junit.Assert.assertTrue("'" + licenseFilter3 + "' != '" + org.apache.rat.license.LicenseSetFactory.LicenseFilter.all + "'", licenseFilter3.equals(org.apache.rat.license.LicenseSetFactory.LicenseFilter.all));
        org.junit.Assert.assertNotNull(iLicenseSet4);
        org.junit.Assert.assertTrue("'" + addLicenseHeaders5 + "' != '" + org.apache.rat.config.AddLicenseHeaders.FALSE + "'", addLicenseHeaders5.equals(org.apache.rat.config.AddLicenseHeaders.FALSE));
        org.junit.Assert.assertNull(claimStatistic9);
        org.junit.Assert.assertTrue("'" + licenseFilter10 + "' != '" + org.apache.rat.license.LicenseSetFactory.LicenseFilter.all + "'", licenseFilter10.equals(org.apache.rat.license.LicenseSetFactory.LicenseFilter.all));
        org.junit.Assert.assertNull(iReportable15);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
        org.junit.Assert.assertNotNull(objArray18);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray18), "[]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray18), "[]");
        org.junit.Assert.assertTrue("'" + level23 + "' != '" + org.apache.rat.utils.Log.Level.ERROR + "'", level23.equals(org.apache.rat.utils.Log.Level.ERROR));
        org.junit.Assert.assertNotNull(outputStreamIOSupplier25);
        org.junit.Assert.assertNull(filenameFilter32);
        org.junit.Assert.assertTrue("'" + licenseFilter33 + "' != '" + org.apache.rat.license.LicenseSetFactory.LicenseFilter.all + "'", licenseFilter33.equals(org.apache.rat.license.LicenseSetFactory.LicenseFilter.all));
        org.junit.Assert.assertNotNull(iLicenseSet34);
        org.junit.Assert.assertNull(filenameFilter36);
        org.junit.Assert.assertNull(filenameFilter39);
        org.junit.Assert.assertTrue("'" + licenseFilter40 + "' != '" + org.apache.rat.license.LicenseSetFactory.LicenseFilter.all + "'", licenseFilter40.equals(org.apache.rat.license.LicenseSetFactory.LicenseFilter.all));
        org.junit.Assert.assertNotNull(iLicenseSet41);
        org.junit.Assert.assertTrue("'" + addLicenseHeaders42 + "' != '" + org.apache.rat.config.AddLicenseHeaders.FALSE + "'", addLicenseHeaders42.equals(org.apache.rat.config.AddLicenseHeaders.FALSE));
        org.junit.Assert.assertNull(claimStatistic46);
        org.junit.Assert.assertTrue("'" + licenseFilter47 + "' != '" + org.apache.rat.license.LicenseSetFactory.LicenseFilter.all + "'", licenseFilter47.equals(org.apache.rat.license.LicenseSetFactory.LicenseFilter.all));
        org.junit.Assert.assertNull(filenameFilter52);
        org.junit.Assert.assertTrue("'" + licenseFilter53 + "' != '" + org.apache.rat.license.LicenseSetFactory.LicenseFilter.all + "'", licenseFilter53.equals(org.apache.rat.license.LicenseSetFactory.LicenseFilter.all));
        org.junit.Assert.assertNotNull(iLicenseSet54);
        org.junit.Assert.assertTrue("'" + addLicenseHeaders55 + "' != '" + org.apache.rat.config.AddLicenseHeaders.FALSE + "'", addLicenseHeaders55.equals(org.apache.rat.config.AddLicenseHeaders.FALSE));
        org.junit.Assert.assertNull(claimStatistic59);
        org.junit.Assert.assertTrue("'" + licenseFilter60 + "' != '" + org.apache.rat.license.LicenseSetFactory.LicenseFilter.all + "'", licenseFilter60.equals(org.apache.rat.license.LicenseSetFactory.LicenseFilter.all));
        org.junit.Assert.assertNotNull(iLicenseFamilySet63);
        org.junit.Assert.assertNotNull(iLicenseFamilySet65);
        org.junit.Assert.assertTrue("'" + boolean68 + "' != '" + false + "'", boolean68 == false);
        org.junit.Assert.assertTrue("'" + boolean70 + "' != '" + true + "'", boolean70 == true);
        org.junit.Assert.assertNotNull(strArray76);
        org.junit.Assert.assertTrue("'" + boolean78 + "' != '" + true + "'", boolean78 == true);
        org.junit.Assert.assertTrue("'" + boolean80 + "' != '" + true + "'", boolean80 == true);
        org.junit.Assert.assertTrue("'" + boolean82 + "' != '" + true + "'", boolean82 == true);
        org.junit.Assert.assertNotNull(strSet84);
        org.junit.Assert.assertNotNull(iLicenseFamilySet86);
        org.junit.Assert.assertNull(iLicenseFamily87);
        org.junit.Assert.assertTrue("'" + boolean88 + "' != '" + true + "'", boolean88 == true);
        org.junit.Assert.assertNotNull(strSet90);
        org.junit.Assert.assertTrue("'" + options93 + "' != '" + org.apache.rat.utils.ReportingSet.Options.OVERWRITE + "'", options93.equals(org.apache.rat.utils.ReportingSet.Options.OVERWRITE));
        org.junit.Assert.assertNotNull(strSet95);
        org.junit.Assert.assertNotNull(strSet96);
    }

    @Test
    public void test13705() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest27.test13705");
        org.apache.rat.api.MetaData metaData0 = new org.apache.rat.api.MetaData();
        java.lang.String str2 = metaData0.value("COMMON DEVELOPMENT AND DISTRIBUTION LICENSE Version 1.0");
        java.lang.String str4 = metaData0.value("W3C Document Copyright");
        boolean boolean6 = metaData0.clear("hi!");
        java.lang.String str8 = metaData0.value("true");
        java.util.Collection<org.apache.rat.api.MetaData.Datum> datumCollection9 = metaData0.getData();
        metaData0.clear();
        java.lang.String str12 = metaData0.value("f0e63aab-6bbb-429b-a543-8d03caca5b69");
        org.junit.Assert.assertNull(str2);
        org.junit.Assert.assertNull(str4);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertNull(str8);
        org.junit.Assert.assertNotNull(datumCollection9);
        org.junit.Assert.assertNull(str12);
    }

    @Test
    public void test13706() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest27.test13706");
        org.apache.rat.config.ReportFormat reportFormat0 = org.apache.rat.config.ReportFormat.XML;
        boolean boolean2 = reportFormat0.is("RegexBuilder: 89662180-a89f-497b-9301-227d494d2bae");
        boolean boolean4 = reportFormat0.is("e7c19d7a-c4f3-4d8e-9fbf-2ce0d89d61d0");
        org.junit.Assert.assertTrue("'" + reportFormat0 + "' != '" + org.apache.rat.config.ReportFormat.XML + "'", reportFormat0.equals(org.apache.rat.config.ReportFormat.XML));
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + false + "'", boolean2 == false);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
    }

    @Test
    public void test13707() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest27.test13707");
        org.apache.rat.Defaults.Builder builder0 = org.apache.rat.Defaults.builder();
        org.apache.rat.Defaults defaults1 = builder0.build();
        org.apache.rat.Defaults defaults2 = builder0.build();
        org.apache.rat.Defaults.Builder builder3 = builder0.noDefault();
        org.apache.rat.Defaults.Builder builder5 = builder3.remove("274c6a15-09f6-4bfd-ac53-1827770eb507");
        org.apache.rat.Defaults.Builder builder7 = builder3.remove("3e2b228d-d5ff-4444-8d8c-d614494b2426 null");
        java.net.URL uRL8 = null;
        // The following exception was thrown during execution in test generation
        try {
            org.apache.rat.Defaults.Builder builder9 = builder3.add(uRL8);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(builder0);
        org.junit.Assert.assertNotNull(defaults1);
        org.junit.Assert.assertNotNull(defaults2);
        org.junit.Assert.assertNotNull(builder3);
        org.junit.Assert.assertNotNull(builder5);
        org.junit.Assert.assertNotNull(builder7);
    }

    @Test
    public void test13708() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest27.test13708");
        org.apache.rat.utils.Log log0 = null;
        org.apache.rat.ReportConfiguration reportConfiguration1 = new org.apache.rat.ReportConfiguration(log0);
        org.apache.rat.license.ILicenseFamily[] iLicenseFamilyArray2 = new org.apache.rat.license.ILicenseFamily[] {};
        java.util.ArrayList<org.apache.rat.license.ILicenseFamily> iLicenseFamilyList3 = new java.util.ArrayList<org.apache.rat.license.ILicenseFamily>();
        boolean boolean4 = java.util.Collections.addAll((java.util.Collection<org.apache.rat.license.ILicenseFamily>) iLicenseFamilyList3, iLicenseFamilyArray2);
        reportConfiguration1.addFamilies((java.util.Collection<org.apache.rat.license.ILicenseFamily>) iLicenseFamilyList3);
        reportConfiguration1.addApprovedLicenseCategory("http://org/apache/rat/meta-data");
        org.apache.rat.report.IReportable iReportable8 = reportConfiguration1.getReportable();
        org.apache.commons.io.filefilter.IOFileFilter iOFileFilter9 = reportConfiguration1.getDirectoryFilter();
        reportConfiguration1.removeApprovedLicenseCategory("3e2b228d-d5ff-4444-8d8c-d614494b2426");
        org.apache.commons.io.function.IOSupplier<java.io.InputStream> inputStreamIOSupplier12 = reportConfiguration1.getStyleSheet();
        java.util.SortedSet<java.lang.String> strSet13 = reportConfiguration1.getApprovedLicenseCategories();
        org.junit.Assert.assertNotNull(iLicenseFamilyArray2);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertNull(iReportable8);
        org.junit.Assert.assertNotNull(iOFileFilter9);
        org.junit.Assert.assertNull(inputStreamIOSupplier12);
        org.junit.Assert.assertNotNull(strSet13);
    }

    @Test
    public void test13709() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest27.test13709");
        org.apache.rat.utils.Log log0 = null;
        org.apache.rat.annotation.ApacheV2LicenseAppender apacheV2LicenseAppender2 = new org.apache.rat.annotation.ApacheV2LicenseAppender(log0, "ba161dc5-d7db-46fd-8c6a-96c390170cb8");
        java.io.File file3 = null;
        // The following exception was thrown during execution in test generation
        try {
            apacheV2LicenseAppender2.append(file3);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
    }

    @Test
    public void test13710() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest27.test13710");
        java.lang.String str1 = org.apache.rat.license.ILicenseFamily.makeCategory("TextBuilder926d91f2b79649739");
        org.junit.Assert.assertEquals("'" + str1 + "' != '" + "TextB" + "'", str1, "TextB");
    }

    @Test
    public void test13711() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest27.test13711");
        org.apache.rat.license.ILicense[] iLicenseArray0 = new org.apache.rat.license.ILicense[] {};
        java.util.TreeSet<org.apache.rat.license.ILicense> iLicenseSet1 = new java.util.TreeSet<org.apache.rat.license.ILicense>();
        boolean boolean2 = java.util.Collections.addAll((java.util.Collection<org.apache.rat.license.ILicense>) iLicenseSet1, iLicenseArray0);
        java.lang.String[] strArray15 = new java.lang.String[] { "GPL2 ", "GPL1 ", "notice", "http://org/apache/rat/meta-data#LicenseFamilyName", "notice", "GPL2 ", "http://org/apache/rat/meta-data#LicenseFamilyName", "", "GPL2 ", "", "GPL1 ", "hi!" };
        java.util.ArrayList<java.lang.String> strList16 = new java.util.ArrayList<java.lang.String>();
        boolean boolean17 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strList16, strArray15);
        org.apache.rat.license.LicenseSetFactory licenseSetFactory18 = new org.apache.rat.license.LicenseSetFactory((java.util.SortedSet<org.apache.rat.license.ILicense>) iLicenseSet1, (java.util.Collection<java.lang.String>) strList16);
        org.apache.rat.license.LicenseSetFactory.LicenseFilter licenseFilter19 = org.apache.rat.license.LicenseSetFactory.LicenseFilter.all;
        java.util.SortedSet<org.apache.rat.license.ILicenseFamily> iLicenseFamilySet20 = licenseSetFactory18.getLicenseFamilies(licenseFilter19);
        org.apache.rat.policy.DefaultPolicy defaultPolicy21 = new org.apache.rat.policy.DefaultPolicy((java.util.Collection<org.apache.rat.license.ILicenseFamily>) iLicenseFamilySet20);
        org.apache.rat.utils.ReportingSet<java.lang.String> strSet22 = new org.apache.rat.utils.ReportingSet<java.lang.String>();
        org.apache.rat.utils.ReportingSet<java.lang.String> strSet24 = strSet22.tailSet("hi!");
        org.apache.rat.configuration.LicenseReader[] licenseReaderArray25 = new org.apache.rat.configuration.LicenseReader[] {};
        org.apache.rat.configuration.LicenseReader[] licenseReaderArray26 = strSet24.toArray(licenseReaderArray25);
        org.apache.rat.license.LicenseFamilySetFactory licenseFamilySetFactory27 = new org.apache.rat.license.LicenseFamilySetFactory(iLicenseFamilySet20, (java.util.Collection<java.lang.String>) strSet24);
        java.util.Spliterator<java.lang.String> strSpliterator28 = strSet24.spliterator();
        org.apache.rat.utils.Log log29 = null;
        org.apache.rat.ReportConfiguration reportConfiguration30 = new org.apache.rat.ReportConfiguration(log29);
        org.apache.rat.utils.ReportingSet.Options options31 = org.apache.rat.utils.ReportingSet.Options.OVERWRITE;
        reportConfiguration30.licenseDuplicateOption(options31);
        org.apache.rat.license.ILicense iLicense33 = null;
        reportConfiguration30.addLicense(iLicense33);
        org.apache.rat.utils.DefaultLog defaultLog35 = org.apache.rat.utils.DefaultLog.INSTANCE;
        org.apache.rat.license.ILicense.Builder builder36 = org.apache.rat.license.ILicense.builder();
        org.apache.rat.license.ILicense.Builder builder38 = builder36.setLicenseFamilyCategory("");
        org.apache.rat.analysis.matchers.CopyrightMatcher copyrightMatcher42 = new org.apache.rat.analysis.matchers.CopyrightMatcher("", "GPL1 ", "hi!");
        org.apache.rat.analysis.IHeaderMatcher.State state43 = copyrightMatcher42.finalizeState();
        org.apache.rat.license.ILicense.Builder builder44 = builder38.setMatcher((org.apache.rat.analysis.IHeaderMatcher) copyrightMatcher42);
        org.apache.rat.license.ILicense.Builder builder46 = builder44.setLicenseFamilyCategory("");
        defaultLog35.error((java.lang.Object) builder46);
        org.apache.rat.ReportConfiguration reportConfiguration48 = new org.apache.rat.ReportConfiguration((org.apache.rat.utils.Log) defaultLog35);
        org.apache.rat.utils.Log.Level level49 = defaultLog35.getLevel();
        reportConfiguration30.logLicenseCollisions(level49);
        org.apache.rat.utils.ReportingSet<java.lang.String> strSet51 = strSet24.setLogLevel(level49);
        // The following exception was thrown during execution in test generation
        try {
            org.apache.rat.utils.ReportingSet<java.lang.String> strSet53 = strSet24.headSet("535b5d01-f553-45e5-bb29-a646e4b8b66f");
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: toKey out of range");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(iLicenseArray0);
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + false + "'", boolean2 == false);
        org.junit.Assert.assertNotNull(strArray15);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + true + "'", boolean17 == true);
        org.junit.Assert.assertTrue("'" + licenseFilter19 + "' != '" + org.apache.rat.license.LicenseSetFactory.LicenseFilter.all + "'", licenseFilter19.equals(org.apache.rat.license.LicenseSetFactory.LicenseFilter.all));
        org.junit.Assert.assertNotNull(iLicenseFamilySet20);
        org.junit.Assert.assertNotNull(strSet24);
        org.junit.Assert.assertNotNull(licenseReaderArray25);
        org.junit.Assert.assertNotNull(licenseReaderArray26);
        org.junit.Assert.assertNotNull(strSpliterator28);
        org.junit.Assert.assertTrue("'" + options31 + "' != '" + org.apache.rat.utils.ReportingSet.Options.OVERWRITE + "'", options31.equals(org.apache.rat.utils.ReportingSet.Options.OVERWRITE));
        org.junit.Assert.assertNotNull(defaultLog35);
        org.junit.Assert.assertNotNull(builder36);
        org.junit.Assert.assertNotNull(builder38);
        org.junit.Assert.assertTrue("'" + state43 + "' != '" + org.apache.rat.analysis.IHeaderMatcher.State.f + "'", state43.equals(org.apache.rat.analysis.IHeaderMatcher.State.f));
        org.junit.Assert.assertNotNull(builder44);
        org.junit.Assert.assertNotNull(builder46);
        org.junit.Assert.assertTrue("'" + level49 + "' != '" + org.apache.rat.utils.Log.Level.INFO + "'", level49.equals(org.apache.rat.utils.Log.Level.INFO));
        org.junit.Assert.assertNotNull(strSet51);
    }

    @Test
    public void test13712() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest27.test13712");
        org.apache.rat.configuration.builders.RegexBuilder regexBuilder0 = new org.apache.rat.configuration.builders.RegexBuilder();
        java.lang.String str1 = regexBuilder0.toString();
        java.lang.String str2 = regexBuilder0.toString();
        org.apache.rat.configuration.builders.RegexBuilder regexBuilder4 = regexBuilder0.setExpr("89662180-a89f-497b-9301-227d494d2bae");
        org.apache.rat.configuration.builders.RegexBuilder regexBuilder6 = regexBuilder4.setExpr("http://org/apache/rat/meta-data#LicenseFamilyName");
        org.apache.rat.configuration.builders.RegexBuilder regexBuilder8 = regexBuilder4.setExpr("ef75a6e8-7197-4e9e-83bf-f8b367e6b3c5");
        org.apache.rat.configuration.builders.RegexBuilder regexBuilder10 = regexBuilder4.setExpr("a3b9f6f5-22c8-487e-8289-73eb5482e732");
        org.apache.rat.configuration.builders.RegexBuilder regexBuilder12 = regexBuilder4.setExpr("null TextBuilder: ae1d3f1b-6a63-45e7-a...");
        java.lang.String str13 = regexBuilder12.toString();
        org.junit.Assert.assertEquals("'" + str1 + "' != '" + "RegexBuilder: null" + "'", str1, "RegexBuilder: null");
        org.junit.Assert.assertEquals("'" + str2 + "' != '" + "RegexBuilder: null" + "'", str2, "RegexBuilder: null");
        org.junit.Assert.assertNotNull(regexBuilder4);
        org.junit.Assert.assertNotNull(regexBuilder6);
        org.junit.Assert.assertNotNull(regexBuilder8);
        org.junit.Assert.assertNotNull(regexBuilder10);
        org.junit.Assert.assertNotNull(regexBuilder12);
        org.junit.Assert.assertEquals("'" + str13 + "' != '" + "RegexBuilder: null TextBuilder: ae1d3f1b-6a63-45e7-a..." + "'", str13, "RegexBuilder: null TextBuilder: ae1d3f1b-6a63-45e7-a...");
    }

    @Test
    public void test13713() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest27.test13713");
        org.apache.rat.api.MetaData metaData0 = new org.apache.rat.api.MetaData();
        java.lang.String str2 = metaData0.value("COMMON DEVELOPMENT AND DISTRIBUTION LICENSE Version 1.0");
        java.util.Collection<org.apache.rat.api.MetaData.Datum> datumCollection3 = metaData0.getData();
        java.lang.String str5 = metaData0.value("hi!");
        metaData0.clear();
        metaData0.clear();
        metaData0.clear();
        java.lang.String str10 = metaData0.value("d3983b6b-7325-418c-bb14-7ad2406080c1");
        boolean boolean12 = metaData0.clear("DOJO ");
        org.apache.rat.api.MetaData metaData13 = new org.apache.rat.api.MetaData();
        java.lang.String str15 = metaData13.value("COMMON DEVELOPMENT AND DISTRIBUTION LICENSE Version 1.0");
        java.lang.String str17 = metaData13.value("W3C Document Copyright");
        boolean boolean19 = metaData13.clear("hi!");
        metaData13.clear();
        org.apache.rat.api.MetaData.Datum datum21 = org.apache.rat.api.MetaData.RAT_LICENSE_FAMILY_NAME_DATUM_GPL_VERSION_1;
        metaData13.set(datum21);
        metaData13.clear();
        org.apache.rat.api.MetaData.Datum datum24 = org.apache.rat.api.MetaData.RAT_LICENSE_FAMILY_CATEGORY_DATUM_CDLL1;
        java.lang.String str25 = datum24.getName();
        metaData13.add(datum24);
        metaData0.set(datum24);
        org.junit.Assert.assertNull(str2);
        org.junit.Assert.assertNotNull(datumCollection3);
        org.junit.Assert.assertNull(str5);
        org.junit.Assert.assertNull(str10);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertNull(str15);
        org.junit.Assert.assertNull(str17);
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + false + "'", boolean19 == false);
        org.junit.Assert.assertNotNull(datum21);
        org.junit.Assert.assertNotNull(datum24);
        org.junit.Assert.assertEquals("'" + str25 + "' != '" + "http://org/apache/rat/meta-data#LicenseFamilyCategory" + "'", str25, "http://org/apache/rat/meta-data#LicenseFamilyCategory");
    }

    @Test
    public void test13714() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest27.test13714");
        org.apache.rat.utils.DefaultLog defaultLog0 = org.apache.rat.utils.DefaultLog.INSTANCE;
        org.apache.rat.configuration.builders.AllBuilder allBuilder1 = new org.apache.rat.configuration.builders.AllBuilder();
        org.apache.rat.configuration.builders.MatcherRefBuilder matcherRefBuilder2 = org.apache.rat.analysis.IHeaderMatcher.Builder.matcherRef();
        boolean boolean3 = matcherRefBuilder2.hasId();
        java.lang.String str4 = matcherRefBuilder2.toString();
        org.apache.rat.configuration.builders.AnyBuilder anyBuilder5 = org.apache.rat.analysis.IHeaderMatcher.Builder.any();
        org.apache.rat.configuration.builders.NotBuilder notBuilder6 = new org.apache.rat.configuration.builders.NotBuilder();
        java.lang.String str7 = notBuilder6.toString();
        org.apache.rat.configuration.builders.MatcherRefBuilder matcherRefBuilder8 = org.apache.rat.analysis.IHeaderMatcher.Builder.matcherRef();
        boolean boolean9 = matcherRefBuilder8.hasId();
        java.util.Map<java.lang.String, org.apache.rat.analysis.IHeaderMatcher> strMap10 = null;
        org.apache.rat.configuration.builders.MatcherRefBuilder matcherRefBuilder11 = matcherRefBuilder8.setMatchers(strMap10);
        org.apache.rat.configuration.builders.AllBuilder allBuilder12 = new org.apache.rat.configuration.builders.AllBuilder();
        org.apache.rat.configuration.builders.CopyrightBuilder copyrightBuilder13 = org.apache.rat.analysis.IHeaderMatcher.Builder.copyright();
        org.apache.rat.configuration.builders.CopyrightBuilder copyrightBuilder15 = copyrightBuilder13.setStart("OASIS");
        java.lang.String str16 = copyrightBuilder13.toString();
        org.apache.rat.configuration.builders.CopyrightBuilder copyrightBuilder18 = copyrightBuilder13.setStart("223f0aba-15d4-49e9-901e-5740c137aebf");
        org.apache.rat.configuration.builders.MatcherRefBuilder matcherRefBuilder19 = org.apache.rat.analysis.IHeaderMatcher.Builder.matcherRef();
        boolean boolean20 = matcherRefBuilder19.hasId();
        org.apache.rat.configuration.builders.CopyrightBuilder copyrightBuilder21 = org.apache.rat.analysis.IHeaderMatcher.Builder.copyright();
        org.apache.rat.configuration.builders.CopyrightBuilder copyrightBuilder23 = copyrightBuilder21.setStart("OASIS");
        java.lang.String str24 = copyrightBuilder21.toString();
        org.apache.rat.configuration.builders.CopyrightBuilder copyrightBuilder26 = copyrightBuilder21.setStart("223f0aba-15d4-49e9-901e-5740c137aebf");
        org.apache.rat.configuration.builders.CopyrightBuilder copyrightBuilder27 = org.apache.rat.analysis.IHeaderMatcher.Builder.copyright();
        org.apache.rat.configuration.builders.CopyrightBuilder copyrightBuilder28 = org.apache.rat.analysis.IHeaderMatcher.Builder.copyright();
        java.lang.String str29 = copyrightBuilder28.toString();
        org.apache.rat.configuration.builders.CopyrightBuilder copyrightBuilder31 = copyrightBuilder28.setEnd(".cvsignore");
        boolean boolean32 = copyrightBuilder28.hasId();
        org.apache.rat.configuration.builders.CopyrightBuilder copyrightBuilder33 = org.apache.rat.analysis.IHeaderMatcher.Builder.copyright();
        java.lang.String str34 = copyrightBuilder33.toString();
        org.apache.rat.configuration.builders.CopyrightBuilder copyrightBuilder36 = copyrightBuilder33.setEnd(".cvsignore");
        boolean boolean37 = copyrightBuilder33.hasId();
        java.lang.String str38 = copyrightBuilder33.toString();
        org.apache.rat.configuration.builders.CopyrightBuilder copyrightBuilder39 = org.apache.rat.analysis.IHeaderMatcher.Builder.copyright();
        org.apache.rat.configuration.builders.CopyrightBuilder copyrightBuilder41 = copyrightBuilder39.setStart("OASIS");
        org.apache.rat.configuration.builders.AnyBuilder anyBuilder42 = org.apache.rat.analysis.IHeaderMatcher.Builder.any();
        org.apache.rat.configuration.builders.MatcherRefBuilder matcherRefBuilder43 = org.apache.rat.analysis.IHeaderMatcher.Builder.matcherRef();
        boolean boolean44 = matcherRefBuilder43.hasId();
        java.util.Map<java.lang.String, org.apache.rat.analysis.IHeaderMatcher> strMap45 = null;
        org.apache.rat.configuration.builders.MatcherRefBuilder matcherRefBuilder46 = matcherRefBuilder43.setMatchers(strMap45);
        org.apache.rat.configuration.builders.CopyrightBuilder copyrightBuilder47 = org.apache.rat.analysis.IHeaderMatcher.Builder.copyright();
        org.apache.rat.configuration.builders.MatcherRefBuilder matcherRefBuilder48 = org.apache.rat.analysis.IHeaderMatcher.Builder.matcherRef();
        boolean boolean49 = matcherRefBuilder48.hasId();
        java.lang.String str50 = matcherRefBuilder48.toString();
        java.util.Map<java.lang.String, org.apache.rat.analysis.IHeaderMatcher> strMap51 = null;
        org.apache.rat.configuration.builders.MatcherRefBuilder matcherRefBuilder52 = matcherRefBuilder48.setMatchers(strMap51);
        org.apache.rat.analysis.IHeaderMatcher.Builder[] builderArray53 = new org.apache.rat.analysis.IHeaderMatcher.Builder[] { matcherRefBuilder8, allBuilder12, copyrightBuilder18, matcherRefBuilder19, copyrightBuilder21, copyrightBuilder27, copyrightBuilder28, copyrightBuilder33, copyrightBuilder39, anyBuilder42, matcherRefBuilder43, copyrightBuilder47, matcherRefBuilder48 };
        java.util.ArrayList<org.apache.rat.analysis.IHeaderMatcher.Builder> builderList54 = new java.util.ArrayList<org.apache.rat.analysis.IHeaderMatcher.Builder>();
        boolean boolean55 = java.util.Collections.addAll((java.util.Collection<org.apache.rat.analysis.IHeaderMatcher.Builder>) builderList54, builderArray53);
        org.apache.rat.configuration.builders.AbstractBuilder abstractBuilder56 = notBuilder6.add((java.util.Collection<org.apache.rat.analysis.IHeaderMatcher.Builder>) builderList54);
        org.apache.rat.configuration.builders.MatcherRefBuilder matcherRefBuilder57 = new org.apache.rat.configuration.builders.MatcherRefBuilder();
        org.apache.rat.analysis.IHeaderMatcher.Builder[] builderArray58 = new org.apache.rat.analysis.IHeaderMatcher.Builder[] { matcherRefBuilder2, anyBuilder5, notBuilder6, matcherRefBuilder57 };
        java.util.ArrayList<org.apache.rat.analysis.IHeaderMatcher.Builder> builderList59 = new java.util.ArrayList<org.apache.rat.analysis.IHeaderMatcher.Builder>();
        boolean boolean60 = java.util.Collections.addAll((java.util.Collection<org.apache.rat.analysis.IHeaderMatcher.Builder>) builderList59, builderArray58);
        org.apache.rat.configuration.builders.AbstractBuilder abstractBuilder61 = allBuilder1.add((java.util.Collection<org.apache.rat.analysis.IHeaderMatcher.Builder>) builderList59);
        defaultLog0.info((java.lang.Object) allBuilder1);
        org.apache.rat.annotation.ApacheV2LicenseAppender apacheV2LicenseAppender64 = new org.apache.rat.annotation.ApacheV2LicenseAppender((org.apache.rat.utils.Log) defaultLog0, "true");
        org.apache.rat.configuration.builders.CopyrightBuilder copyrightBuilder65 = org.apache.rat.analysis.IHeaderMatcher.Builder.copyright();
        java.lang.String str66 = copyrightBuilder65.toString();
        org.apache.rat.configuration.builders.CopyrightBuilder copyrightBuilder68 = copyrightBuilder65.setEnd(".cvsignore");
        boolean boolean69 = copyrightBuilder65.hasId();
        org.apache.rat.configuration.builders.CopyrightBuilder copyrightBuilder71 = copyrightBuilder65.setEnd("notice");
        defaultLog0.debug((java.lang.Object) "notice");
        org.apache.rat.annotation.ApacheV2LicenseAppender apacheV2LicenseAppender73 = new org.apache.rat.annotation.ApacheV2LicenseAppender((org.apache.rat.utils.Log) defaultLog0);
        org.apache.rat.annotation.ApacheV2LicenseAppender apacheV2LicenseAppender75 = new org.apache.rat.annotation.ApacheV2LicenseAppender((org.apache.rat.utils.Log) defaultLog0, "2953e6cb-20a5-4dcf-a9f5-85c51cc8c635");
        org.apache.rat.annotation.ApacheV2LicenseAppender apacheV2LicenseAppender76 = new org.apache.rat.annotation.ApacheV2LicenseAppender((org.apache.rat.utils.Log) defaultLog0);
        org.junit.Assert.assertNotNull(defaultLog0);
        org.junit.Assert.assertNotNull(matcherRefBuilder2);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "MathcerRefBuilder: null" + "'", str4, "MathcerRefBuilder: null");
        org.junit.Assert.assertNotNull(anyBuilder5);
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "NotBuilder: null" + "'", str7, "NotBuilder: null");
        org.junit.Assert.assertNotNull(matcherRefBuilder8);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertNotNull(matcherRefBuilder11);
        org.junit.Assert.assertNotNull(copyrightBuilder13);
        org.junit.Assert.assertNotNull(copyrightBuilder15);
        org.junit.Assert.assertEquals("'" + str16 + "' != '" + "Copyright Builder: s:OASIS e:null o:null" + "'", str16, "Copyright Builder: s:OASIS e:null o:null");
        org.junit.Assert.assertNotNull(copyrightBuilder18);
        org.junit.Assert.assertNotNull(matcherRefBuilder19);
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + false + "'", boolean20 == false);
        org.junit.Assert.assertNotNull(copyrightBuilder21);
        org.junit.Assert.assertNotNull(copyrightBuilder23);
        org.junit.Assert.assertEquals("'" + str24 + "' != '" + "Copyright Builder: s:OASIS e:null o:null" + "'", str24, "Copyright Builder: s:OASIS e:null o:null");
        org.junit.Assert.assertNotNull(copyrightBuilder26);
        org.junit.Assert.assertNotNull(copyrightBuilder27);
        org.junit.Assert.assertNotNull(copyrightBuilder28);
        org.junit.Assert.assertEquals("'" + str29 + "' != '" + "Copyright Builder: s:null e:null o:null" + "'", str29, "Copyright Builder: s:null e:null o:null");
        org.junit.Assert.assertNotNull(copyrightBuilder31);
        org.junit.Assert.assertTrue("'" + boolean32 + "' != '" + false + "'", boolean32 == false);
        org.junit.Assert.assertNotNull(copyrightBuilder33);
        org.junit.Assert.assertEquals("'" + str34 + "' != '" + "Copyright Builder: s:null e:null o:null" + "'", str34, "Copyright Builder: s:null e:null o:null");
        org.junit.Assert.assertNotNull(copyrightBuilder36);
        org.junit.Assert.assertTrue("'" + boolean37 + "' != '" + false + "'", boolean37 == false);
        org.junit.Assert.assertEquals("'" + str38 + "' != '" + "Copyright Builder: s:null e:.cvsignore o:null" + "'", str38, "Copyright Builder: s:null e:.cvsignore o:null");
        org.junit.Assert.assertNotNull(copyrightBuilder39);
        org.junit.Assert.assertNotNull(copyrightBuilder41);
        org.junit.Assert.assertNotNull(anyBuilder42);
        org.junit.Assert.assertNotNull(matcherRefBuilder43);
        org.junit.Assert.assertTrue("'" + boolean44 + "' != '" + false + "'", boolean44 == false);
        org.junit.Assert.assertNotNull(matcherRefBuilder46);
        org.junit.Assert.assertNotNull(copyrightBuilder47);
        org.junit.Assert.assertNotNull(matcherRefBuilder48);
        org.junit.Assert.assertTrue("'" + boolean49 + "' != '" + false + "'", boolean49 == false);
        org.junit.Assert.assertEquals("'" + str50 + "' != '" + "MathcerRefBuilder: null" + "'", str50, "MathcerRefBuilder: null");
        org.junit.Assert.assertNotNull(matcherRefBuilder52);
        org.junit.Assert.assertNotNull(builderArray53);
        org.junit.Assert.assertTrue("'" + boolean55 + "' != '" + true + "'", boolean55 == true);
        org.junit.Assert.assertNotNull(abstractBuilder56);
        org.junit.Assert.assertNotNull(builderArray58);
        org.junit.Assert.assertTrue("'" + boolean60 + "' != '" + true + "'", boolean60 == true);
        org.junit.Assert.assertNotNull(abstractBuilder61);
        org.junit.Assert.assertNotNull(copyrightBuilder65);
        org.junit.Assert.assertEquals("'" + str66 + "' != '" + "Copyright Builder: s:null e:null o:null" + "'", str66, "Copyright Builder: s:null e:null o:null");
        org.junit.Assert.assertNotNull(copyrightBuilder68);
        org.junit.Assert.assertTrue("'" + boolean69 + "' != '" + false + "'", boolean69 == false);
        org.junit.Assert.assertNotNull(copyrightBuilder71);
    }

    @Test
    public void test13715() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest27.test13715");
        org.apache.rat.license.ILicenseFamily[] iLicenseFamilyArray0 = new org.apache.rat.license.ILicenseFamily[] {};
        java.util.ArrayList<org.apache.rat.license.ILicenseFamily> iLicenseFamilyList1 = new java.util.ArrayList<org.apache.rat.license.ILicenseFamily>();
        boolean boolean2 = java.util.Collections.addAll((java.util.Collection<org.apache.rat.license.ILicenseFamily>) iLicenseFamilyList1, iLicenseFamilyArray0);
        org.apache.rat.policy.DefaultPolicy defaultPolicy3 = new org.apache.rat.policy.DefaultPolicy((java.util.Collection<org.apache.rat.license.ILicenseFamily>) iLicenseFamilyList1);
        org.apache.rat.api.Document document4 = null;
        defaultPolicy3.analyse(document4);
        java.util.SortedSet<org.apache.rat.license.ILicenseFamily> iLicenseFamilySet6 = defaultPolicy3.getApprovedLicenseNames();
        org.apache.rat.api.Document document7 = null;
        defaultPolicy3.analyse(document7);
        org.apache.rat.api.Document document9 = null;
        defaultPolicy3.analyse(document9);
        org.apache.rat.api.Document document11 = null;
        defaultPolicy3.analyse(document11);
        org.apache.rat.api.Document document13 = null;
        defaultPolicy3.analyse(document13);
        org.junit.Assert.assertNotNull(iLicenseFamilyArray0);
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + false + "'", boolean2 == false);
        org.junit.Assert.assertNotNull(iLicenseFamilySet6);
    }

    @Test
    public void test13716() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest27.test13716");
        org.apache.rat.license.ILicenseFamilyBuilder iLicenseFamilyBuilder0 = new org.apache.rat.license.ILicenseFamilyBuilder();
        org.apache.rat.license.ILicenseFamily.Builder builder2 = iLicenseFamilyBuilder0.setLicenseFamilyCategory("Modified BSD License");
        org.apache.rat.license.ILicenseFamily.Builder builder4 = iLicenseFamilyBuilder0.setLicenseFamilyCategory("6486879f-fc81-4b57-aec7-c4c77d540c30");
        org.apache.rat.license.ILicenseFamily.Builder builder6 = iLicenseFamilyBuilder0.setLicenseFamilyName("MathcerRefBuilder: ");
        org.apache.rat.license.ILicenseFamily.Builder builder8 = builder6.setLicenseFamilyName("659c96ab-5c6e-4067-997a-fa311a81a261");
        org.apache.rat.license.ILicenseFamily.Builder builder10 = builder6.setLicenseFamilyCategory("36f60d10-a0bd-4355-a2a6-3635adf29872");
        org.apache.rat.license.ILicenseFamily iLicenseFamily11 = builder10.build();
        org.junit.Assert.assertNotNull(builder2);
        org.junit.Assert.assertNotNull(builder4);
        org.junit.Assert.assertNotNull(builder6);
        org.junit.Assert.assertNotNull(builder8);
        org.junit.Assert.assertNotNull(builder10);
        org.junit.Assert.assertNotNull(iLicenseFamily11);
    }

    @Test
    public void test13717() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest27.test13717");
        org.apache.rat.utils.Log log0 = null;
        org.apache.rat.ReportConfiguration reportConfiguration1 = new org.apache.rat.ReportConfiguration(log0);
        org.apache.rat.report.claim.ClaimStatistic claimStatistic2 = org.apache.rat.Reporter.report(reportConfiguration1);
        org.apache.rat.utils.ReportingSet.Options options3 = org.apache.rat.utils.ReportingSet.Options.OVERWRITE;
        reportConfiguration1.licenseDuplicateOption(options3);
        org.apache.rat.license.ILicenseFamily iLicenseFamily5 = null;
        reportConfiguration1.addFamily(iLicenseFamily5);
        org.apache.rat.utils.Log log7 = null;
        org.apache.rat.ReportConfiguration reportConfiguration8 = new org.apache.rat.ReportConfiguration(log7);
        java.io.FilenameFilter filenameFilter9 = reportConfiguration8.getInputFileFilter();
        org.apache.rat.license.LicenseSetFactory.LicenseFilter licenseFilter10 = org.apache.rat.license.LicenseSetFactory.LicenseFilter.all;
        java.util.SortedSet<org.apache.rat.license.ILicense> iLicenseSet11 = reportConfiguration8.getLicenses(licenseFilter10);
        org.apache.rat.config.AddLicenseHeaders addLicenseHeaders12 = org.apache.rat.config.AddLicenseHeaders.FALSE;
        reportConfiguration8.setAddLicenseHeaders(addLicenseHeaders12);
        org.apache.rat.utils.Log log14 = null;
        org.apache.rat.ReportConfiguration reportConfiguration15 = new org.apache.rat.ReportConfiguration(log14);
        org.apache.rat.report.claim.ClaimStatistic claimStatistic16 = org.apache.rat.Reporter.report(reportConfiguration15);
        org.apache.rat.license.LicenseSetFactory.LicenseFilter licenseFilter17 = org.apache.rat.license.LicenseSetFactory.LicenseFilter.all;
        org.apache.rat.Reporter.listLicenses(reportConfiguration15, licenseFilter17);
        org.apache.rat.Reporter.listLicenses(reportConfiguration8, licenseFilter17);
        org.apache.rat.utils.Log log20 = null;
        org.apache.rat.ReportConfiguration reportConfiguration21 = new org.apache.rat.ReportConfiguration(log20);
        java.io.FilenameFilter filenameFilter22 = reportConfiguration21.getInputFileFilter();
        org.apache.rat.license.LicenseSetFactory.LicenseFilter licenseFilter23 = org.apache.rat.license.LicenseSetFactory.LicenseFilter.all;
        java.util.SortedSet<org.apache.rat.license.ILicense> iLicenseSet24 = reportConfiguration21.getLicenses(licenseFilter23);
        org.apache.rat.config.AddLicenseHeaders addLicenseHeaders25 = org.apache.rat.config.AddLicenseHeaders.FALSE;
        reportConfiguration21.setAddLicenseHeaders(addLicenseHeaders25);
        org.apache.rat.utils.Log log27 = null;
        org.apache.rat.ReportConfiguration reportConfiguration28 = new org.apache.rat.ReportConfiguration(log27);
        org.apache.rat.report.claim.ClaimStatistic claimStatistic29 = org.apache.rat.Reporter.report(reportConfiguration28);
        org.apache.rat.license.LicenseSetFactory.LicenseFilter licenseFilter30 = org.apache.rat.license.LicenseSetFactory.LicenseFilter.all;
        org.apache.rat.Reporter.listLicenses(reportConfiguration28, licenseFilter30);
        org.apache.rat.Reporter.listLicenses(reportConfiguration21, licenseFilter30);
        org.apache.rat.Reporter.listLicenses(reportConfiguration8, licenseFilter30);
        java.io.FilenameFilter filenameFilter34 = reportConfiguration8.getInputFileFilter();
        org.apache.rat.utils.Log log35 = null;
        org.apache.rat.ReportConfiguration reportConfiguration36 = new org.apache.rat.ReportConfiguration(log35);
        java.io.FilenameFilter filenameFilter37 = reportConfiguration36.getInputFileFilter();
        org.apache.rat.license.LicenseSetFactory.LicenseFilter licenseFilter38 = org.apache.rat.license.LicenseSetFactory.LicenseFilter.all;
        java.util.SortedSet<org.apache.rat.license.ILicense> iLicenseSet39 = reportConfiguration36.getLicenses(licenseFilter38);
        org.apache.rat.config.AddLicenseHeaders addLicenseHeaders40 = org.apache.rat.config.AddLicenseHeaders.FALSE;
        reportConfiguration36.setAddLicenseHeaders(addLicenseHeaders40);
        org.apache.rat.utils.Log log42 = null;
        org.apache.rat.ReportConfiguration reportConfiguration43 = new org.apache.rat.ReportConfiguration(log42);
        org.apache.rat.report.claim.ClaimStatistic claimStatistic44 = org.apache.rat.Reporter.report(reportConfiguration43);
        org.apache.rat.license.LicenseSetFactory.LicenseFilter licenseFilter45 = org.apache.rat.license.LicenseSetFactory.LicenseFilter.all;
        org.apache.rat.Reporter.listLicenses(reportConfiguration43, licenseFilter45);
        org.apache.rat.Reporter.listLicenses(reportConfiguration36, licenseFilter45);
        org.apache.rat.utils.Log log48 = null;
        org.apache.rat.ReportConfiguration reportConfiguration49 = new org.apache.rat.ReportConfiguration(log48);
        java.io.FilenameFilter filenameFilter50 = reportConfiguration49.getInputFileFilter();
        org.apache.rat.license.LicenseSetFactory.LicenseFilter licenseFilter51 = org.apache.rat.license.LicenseSetFactory.LicenseFilter.all;
        java.util.SortedSet<org.apache.rat.license.ILicense> iLicenseSet52 = reportConfiguration49.getLicenses(licenseFilter51);
        org.apache.rat.config.AddLicenseHeaders addLicenseHeaders53 = org.apache.rat.config.AddLicenseHeaders.FALSE;
        reportConfiguration49.setAddLicenseHeaders(addLicenseHeaders53);
        org.apache.rat.utils.Log log55 = null;
        org.apache.rat.ReportConfiguration reportConfiguration56 = new org.apache.rat.ReportConfiguration(log55);
        org.apache.rat.report.claim.ClaimStatistic claimStatistic57 = org.apache.rat.Reporter.report(reportConfiguration56);
        org.apache.rat.license.LicenseSetFactory.LicenseFilter licenseFilter58 = org.apache.rat.license.LicenseSetFactory.LicenseFilter.all;
        org.apache.rat.Reporter.listLicenses(reportConfiguration56, licenseFilter58);
        org.apache.rat.Reporter.listLicenses(reportConfiguration49, licenseFilter58);
        org.apache.rat.Reporter.listLicenses(reportConfiguration36, licenseFilter58);
        java.util.SortedSet<org.apache.rat.license.ILicense> iLicenseSet62 = reportConfiguration8.getLicenses(licenseFilter58);
        boolean boolean63 = reportConfiguration8.isAddingLicensesForced();
        org.apache.rat.utils.Log log64 = null;
        org.apache.rat.ReportConfiguration reportConfiguration65 = new org.apache.rat.ReportConfiguration(log64);
        org.apache.rat.report.claim.ClaimStatistic claimStatistic66 = org.apache.rat.Reporter.report(reportConfiguration65);
        org.apache.rat.utils.Log log67 = null;
        org.apache.rat.ReportConfiguration reportConfiguration68 = new org.apache.rat.ReportConfiguration(log67);
        org.apache.rat.report.claim.ClaimStatistic claimStatistic69 = org.apache.rat.Reporter.report(reportConfiguration68);
        org.apache.rat.utils.ReportingSet.Options options70 = org.apache.rat.utils.ReportingSet.Options.OVERWRITE;
        reportConfiguration68.licenseDuplicateOption(options70);
        reportConfiguration65.familyDuplicateOption(options70);
        reportConfiguration8.familyDuplicateOption(options70);
        reportConfiguration1.licenseDuplicateOption(options70);
        org.apache.rat.license.ILicense iLicense75 = null;
        reportConfiguration1.addLicense(iLicense75);
        boolean boolean77 = reportConfiguration1.isStyleReport();
        org.apache.rat.utils.Log log78 = null;
        org.apache.rat.ReportConfiguration reportConfiguration79 = new org.apache.rat.ReportConfiguration(log78);
        org.apache.commons.io.function.IOSupplier<java.io.OutputStream> outputStreamIOSupplier80 = reportConfiguration79.getOutput();
        reportConfiguration79.setCopyrightMessage("MANIFEST.MF");
        org.apache.commons.io.function.IOSupplier<java.io.OutputStream> outputStreamIOSupplier83 = reportConfiguration79.getOutput();
        reportConfiguration1.setOut(outputStreamIOSupplier83);
        org.junit.Assert.assertNull(claimStatistic2);
        org.junit.Assert.assertTrue("'" + options3 + "' != '" + org.apache.rat.utils.ReportingSet.Options.OVERWRITE + "'", options3.equals(org.apache.rat.utils.ReportingSet.Options.OVERWRITE));
        org.junit.Assert.assertNull(filenameFilter9);
        org.junit.Assert.assertTrue("'" + licenseFilter10 + "' != '" + org.apache.rat.license.LicenseSetFactory.LicenseFilter.all + "'", licenseFilter10.equals(org.apache.rat.license.LicenseSetFactory.LicenseFilter.all));
        org.junit.Assert.assertNotNull(iLicenseSet11);
        org.junit.Assert.assertTrue("'" + addLicenseHeaders12 + "' != '" + org.apache.rat.config.AddLicenseHeaders.FALSE + "'", addLicenseHeaders12.equals(org.apache.rat.config.AddLicenseHeaders.FALSE));
        org.junit.Assert.assertNull(claimStatistic16);
        org.junit.Assert.assertTrue("'" + licenseFilter17 + "' != '" + org.apache.rat.license.LicenseSetFactory.LicenseFilter.all + "'", licenseFilter17.equals(org.apache.rat.license.LicenseSetFactory.LicenseFilter.all));
        org.junit.Assert.assertNull(filenameFilter22);
        org.junit.Assert.assertTrue("'" + licenseFilter23 + "' != '" + org.apache.rat.license.LicenseSetFactory.LicenseFilter.all + "'", licenseFilter23.equals(org.apache.rat.license.LicenseSetFactory.LicenseFilter.all));
        org.junit.Assert.assertNotNull(iLicenseSet24);
        org.junit.Assert.assertTrue("'" + addLicenseHeaders25 + "' != '" + org.apache.rat.config.AddLicenseHeaders.FALSE + "'", addLicenseHeaders25.equals(org.apache.rat.config.AddLicenseHeaders.FALSE));
        org.junit.Assert.assertNull(claimStatistic29);
        org.junit.Assert.assertTrue("'" + licenseFilter30 + "' != '" + org.apache.rat.license.LicenseSetFactory.LicenseFilter.all + "'", licenseFilter30.equals(org.apache.rat.license.LicenseSetFactory.LicenseFilter.all));
        org.junit.Assert.assertNull(filenameFilter34);
        org.junit.Assert.assertNull(filenameFilter37);
        org.junit.Assert.assertTrue("'" + licenseFilter38 + "' != '" + org.apache.rat.license.LicenseSetFactory.LicenseFilter.all + "'", licenseFilter38.equals(org.apache.rat.license.LicenseSetFactory.LicenseFilter.all));
        org.junit.Assert.assertNotNull(iLicenseSet39);
        org.junit.Assert.assertTrue("'" + addLicenseHeaders40 + "' != '" + org.apache.rat.config.AddLicenseHeaders.FALSE + "'", addLicenseHeaders40.equals(org.apache.rat.config.AddLicenseHeaders.FALSE));
        org.junit.Assert.assertNull(claimStatistic44);
        org.junit.Assert.assertTrue("'" + licenseFilter45 + "' != '" + org.apache.rat.license.LicenseSetFactory.LicenseFilter.all + "'", licenseFilter45.equals(org.apache.rat.license.LicenseSetFactory.LicenseFilter.all));
        org.junit.Assert.assertNull(filenameFilter50);
        org.junit.Assert.assertTrue("'" + licenseFilter51 + "' != '" + org.apache.rat.license.LicenseSetFactory.LicenseFilter.all + "'", licenseFilter51.equals(org.apache.rat.license.LicenseSetFactory.LicenseFilter.all));
        org.junit.Assert.assertNotNull(iLicenseSet52);
        org.junit.Assert.assertTrue("'" + addLicenseHeaders53 + "' != '" + org.apache.rat.config.AddLicenseHeaders.FALSE + "'", addLicenseHeaders53.equals(org.apache.rat.config.AddLicenseHeaders.FALSE));
        org.junit.Assert.assertNull(claimStatistic57);
        org.junit.Assert.assertTrue("'" + licenseFilter58 + "' != '" + org.apache.rat.license.LicenseSetFactory.LicenseFilter.all + "'", licenseFilter58.equals(org.apache.rat.license.LicenseSetFactory.LicenseFilter.all));
        org.junit.Assert.assertNotNull(iLicenseSet62);
        org.junit.Assert.assertTrue("'" + boolean63 + "' != '" + false + "'", boolean63 == false);
        org.junit.Assert.assertNull(claimStatistic66);
        org.junit.Assert.assertNull(claimStatistic69);
        org.junit.Assert.assertTrue("'" + options70 + "' != '" + org.apache.rat.utils.ReportingSet.Options.OVERWRITE + "'", options70.equals(org.apache.rat.utils.ReportingSet.Options.OVERWRITE));
        org.junit.Assert.assertTrue("'" + boolean77 + "' != '" + true + "'", boolean77 == true);
        org.junit.Assert.assertNotNull(outputStreamIOSupplier80);
        org.junit.Assert.assertNotNull(outputStreamIOSupplier83);
    }

    @Test
    public void test13718() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest27.test13718");
        org.apache.rat.utils.Log log0 = null;
        org.apache.rat.ReportConfiguration reportConfiguration1 = new org.apache.rat.ReportConfiguration(log0);
        org.apache.rat.report.claim.ClaimStatistic claimStatistic2 = org.apache.rat.Reporter.report(reportConfiguration1);
        org.apache.rat.utils.Log log3 = null;
        org.apache.rat.ReportConfiguration reportConfiguration4 = new org.apache.rat.ReportConfiguration(log3);
        org.apache.rat.report.claim.ClaimStatistic claimStatistic5 = org.apache.rat.Reporter.report(reportConfiguration4);
        org.apache.rat.utils.ReportingSet.Options options6 = org.apache.rat.utils.ReportingSet.Options.OVERWRITE;
        reportConfiguration4.licenseDuplicateOption(options6);
        reportConfiguration1.familyDuplicateOption(options6);
        org.apache.commons.io.function.IOSupplier<java.io.PrintWriter> printWriterIOSupplier9 = reportConfiguration1.getWriter();
        reportConfiguration1.setCopyrightMessage("d4148d3a-edbc-4672-b347-0fa619553f91");
        org.apache.rat.utils.Log log12 = null;
        org.apache.rat.ReportConfiguration reportConfiguration13 = new org.apache.rat.ReportConfiguration(log12);
        reportConfiguration13.addApprovedLicenseCategory(".cvsignore");
        org.apache.rat.utils.Log log16 = null;
        org.apache.rat.ReportConfiguration reportConfiguration17 = new org.apache.rat.ReportConfiguration(log16);
        java.io.FilenameFilter filenameFilter18 = reportConfiguration17.getInputFileFilter();
        org.apache.rat.license.LicenseSetFactory.LicenseFilter licenseFilter19 = org.apache.rat.license.LicenseSetFactory.LicenseFilter.all;
        java.util.SortedSet<org.apache.rat.license.ILicense> iLicenseSet20 = reportConfiguration17.getLicenses(licenseFilter19);
        reportConfiguration13.addLicensesIfNotPresent((java.util.Collection<org.apache.rat.license.ILicense>) iLicenseSet20);
        reportConfiguration13.setCopyrightMessage("MathcerRefBuilder: null");
        org.apache.rat.utils.Log log24 = null;
        org.apache.rat.ReportConfiguration reportConfiguration25 = new org.apache.rat.ReportConfiguration(log24);
        reportConfiguration25.addApprovedLicenseCategory(".cvsignore");
        boolean boolean28 = reportConfiguration25.isStyleReport();
        org.apache.rat.utils.Log log29 = null;
        org.apache.rat.ReportConfiguration reportConfiguration30 = new org.apache.rat.ReportConfiguration(log29);
        org.apache.rat.report.claim.ClaimStatistic claimStatistic31 = org.apache.rat.Reporter.report(reportConfiguration30);
        org.apache.commons.io.function.IOSupplier<java.io.OutputStream> outputStreamIOSupplier32 = reportConfiguration30.getOutput();
        org.apache.rat.license.ILicense iLicense33 = null;
        reportConfiguration30.addLicense(iLicense33);
        org.apache.rat.Defaults.Builder builder35 = org.apache.rat.Defaults.builder();
        org.apache.rat.Defaults defaults36 = builder35.build();
        reportConfiguration30.setFrom(defaults36);
        org.apache.rat.utils.Log log38 = null;
        org.apache.rat.ReportConfiguration reportConfiguration39 = new org.apache.rat.ReportConfiguration(log38);
        org.apache.rat.license.ILicenseFamily[] iLicenseFamilyArray40 = new org.apache.rat.license.ILicenseFamily[] {};
        java.util.ArrayList<org.apache.rat.license.ILicenseFamily> iLicenseFamilyList41 = new java.util.ArrayList<org.apache.rat.license.ILicenseFamily>();
        boolean boolean42 = java.util.Collections.addAll((java.util.Collection<org.apache.rat.license.ILicenseFamily>) iLicenseFamilyList41, iLicenseFamilyArray40);
        reportConfiguration39.addFamilies((java.util.Collection<org.apache.rat.license.ILicenseFamily>) iLicenseFamilyList41);
        org.apache.rat.analysis.license.FullTextMatchingLicense fullTextMatchingLicense44 = new org.apache.rat.analysis.license.FullTextMatchingLicense();
        fullTextMatchingLicense44.setLicenseFamilyName("hi!");
        java.lang.String str47 = fullTextMatchingLicense44.getLicenseFamilyCategory();
        java.lang.String str48 = fullTextMatchingLicense44.getLicenseFamilyName();
        fullTextMatchingLicense44.setLicenseFamilyName("SpdxBuilder: null");
        fullTextMatchingLicense44.setLicenseFamilyCategory("TMF");
        org.apache.rat.license.ILicenseFamily iLicenseFamily53 = fullTextMatchingLicense44.getLicenseFamily();
        reportConfiguration39.addFamily(iLicenseFamily53);
        java.lang.String str55 = iLicenseFamily53.getFamilyName();
        java.lang.String str56 = iLicenseFamily53.getFamilyName();
        reportConfiguration30.addApprovedLicenseCategory(iLicenseFamily53);
        reportConfiguration25.addApprovedLicenseCategory(iLicenseFamily53);
        java.lang.String str59 = iLicenseFamily53.getFamilyCategory();
        java.lang.String str60 = iLicenseFamily53.getFamilyName();
        java.lang.String str61 = iLicenseFamily53.getFamilyName();
        reportConfiguration13.addFamily(iLicenseFamily53);
        reportConfiguration1.addApprovedLicenseCategory(iLicenseFamily53);
        java.lang.String str64 = iLicenseFamily53.getFamilyCategory();
        org.junit.Assert.assertNull(claimStatistic2);
        org.junit.Assert.assertNull(claimStatistic5);
        org.junit.Assert.assertTrue("'" + options6 + "' != '" + org.apache.rat.utils.ReportingSet.Options.OVERWRITE + "'", options6.equals(org.apache.rat.utils.ReportingSet.Options.OVERWRITE));
        org.junit.Assert.assertNotNull(printWriterIOSupplier9);
        org.junit.Assert.assertNull(filenameFilter18);
        org.junit.Assert.assertTrue("'" + licenseFilter19 + "' != '" + org.apache.rat.license.LicenseSetFactory.LicenseFilter.all + "'", licenseFilter19.equals(org.apache.rat.license.LicenseSetFactory.LicenseFilter.all));
        org.junit.Assert.assertNotNull(iLicenseSet20);
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + true + "'", boolean28 == true);
        org.junit.Assert.assertNull(claimStatistic31);
        org.junit.Assert.assertNotNull(outputStreamIOSupplier32);
        org.junit.Assert.assertNotNull(builder35);
        org.junit.Assert.assertNotNull(defaults36);
        org.junit.Assert.assertNotNull(iLicenseFamilyArray40);
        org.junit.Assert.assertTrue("'" + boolean42 + "' != '" + false + "'", boolean42 == false);
        org.junit.Assert.assertNull(str47);
        org.junit.Assert.assertEquals("'" + str48 + "' != '" + "hi!" + "'", str48, "hi!");
        org.junit.Assert.assertNotNull(iLicenseFamily53);
        org.junit.Assert.assertEquals("'" + str55 + "' != '" + "SpdxBuilder: null" + "'", str55, "SpdxBuilder: null");
        org.junit.Assert.assertEquals("'" + str56 + "' != '" + "SpdxBuilder: null" + "'", str56, "SpdxBuilder: null");
        org.junit.Assert.assertEquals("'" + str59 + "' != '" + "TMF  " + "'", str59, "TMF  ");
        org.junit.Assert.assertEquals("'" + str60 + "' != '" + "SpdxBuilder: null" + "'", str60, "SpdxBuilder: null");
        org.junit.Assert.assertEquals("'" + str61 + "' != '" + "SpdxBuilder: null" + "'", str61, "SpdxBuilder: null");
        org.junit.Assert.assertEquals("'" + str64 + "' != '" + "TMF  " + "'", str64, "TMF  ");
    }

    @Test
    public void test13719() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest27.test13719");
        org.apache.rat.configuration.builders.NotBuilder notBuilder0 = new org.apache.rat.configuration.builders.NotBuilder();
        java.lang.String str1 = notBuilder0.toString();
        org.apache.rat.configuration.builders.MatcherRefBuilder matcherRefBuilder2 = org.apache.rat.analysis.IHeaderMatcher.Builder.matcherRef();
        boolean boolean3 = matcherRefBuilder2.hasId();
        java.util.Map<java.lang.String, org.apache.rat.analysis.IHeaderMatcher> strMap4 = null;
        org.apache.rat.configuration.builders.MatcherRefBuilder matcherRefBuilder5 = matcherRefBuilder2.setMatchers(strMap4);
        org.apache.rat.configuration.builders.AllBuilder allBuilder6 = new org.apache.rat.configuration.builders.AllBuilder();
        org.apache.rat.configuration.builders.CopyrightBuilder copyrightBuilder7 = org.apache.rat.analysis.IHeaderMatcher.Builder.copyright();
        org.apache.rat.configuration.builders.CopyrightBuilder copyrightBuilder9 = copyrightBuilder7.setStart("OASIS");
        java.lang.String str10 = copyrightBuilder7.toString();
        org.apache.rat.configuration.builders.CopyrightBuilder copyrightBuilder12 = copyrightBuilder7.setStart("223f0aba-15d4-49e9-901e-5740c137aebf");
        org.apache.rat.configuration.builders.MatcherRefBuilder matcherRefBuilder13 = org.apache.rat.analysis.IHeaderMatcher.Builder.matcherRef();
        boolean boolean14 = matcherRefBuilder13.hasId();
        org.apache.rat.configuration.builders.CopyrightBuilder copyrightBuilder15 = org.apache.rat.analysis.IHeaderMatcher.Builder.copyright();
        org.apache.rat.configuration.builders.CopyrightBuilder copyrightBuilder17 = copyrightBuilder15.setStart("OASIS");
        java.lang.String str18 = copyrightBuilder15.toString();
        org.apache.rat.configuration.builders.CopyrightBuilder copyrightBuilder20 = copyrightBuilder15.setStart("223f0aba-15d4-49e9-901e-5740c137aebf");
        org.apache.rat.configuration.builders.CopyrightBuilder copyrightBuilder21 = org.apache.rat.analysis.IHeaderMatcher.Builder.copyright();
        org.apache.rat.configuration.builders.CopyrightBuilder copyrightBuilder22 = org.apache.rat.analysis.IHeaderMatcher.Builder.copyright();
        java.lang.String str23 = copyrightBuilder22.toString();
        org.apache.rat.configuration.builders.CopyrightBuilder copyrightBuilder25 = copyrightBuilder22.setEnd(".cvsignore");
        boolean boolean26 = copyrightBuilder22.hasId();
        org.apache.rat.configuration.builders.CopyrightBuilder copyrightBuilder27 = org.apache.rat.analysis.IHeaderMatcher.Builder.copyright();
        java.lang.String str28 = copyrightBuilder27.toString();
        org.apache.rat.configuration.builders.CopyrightBuilder copyrightBuilder30 = copyrightBuilder27.setEnd(".cvsignore");
        boolean boolean31 = copyrightBuilder27.hasId();
        java.lang.String str32 = copyrightBuilder27.toString();
        org.apache.rat.configuration.builders.CopyrightBuilder copyrightBuilder33 = org.apache.rat.analysis.IHeaderMatcher.Builder.copyright();
        org.apache.rat.configuration.builders.CopyrightBuilder copyrightBuilder35 = copyrightBuilder33.setStart("OASIS");
        org.apache.rat.configuration.builders.AnyBuilder anyBuilder36 = org.apache.rat.analysis.IHeaderMatcher.Builder.any();
        org.apache.rat.configuration.builders.MatcherRefBuilder matcherRefBuilder37 = org.apache.rat.analysis.IHeaderMatcher.Builder.matcherRef();
        boolean boolean38 = matcherRefBuilder37.hasId();
        java.util.Map<java.lang.String, org.apache.rat.analysis.IHeaderMatcher> strMap39 = null;
        org.apache.rat.configuration.builders.MatcherRefBuilder matcherRefBuilder40 = matcherRefBuilder37.setMatchers(strMap39);
        org.apache.rat.configuration.builders.CopyrightBuilder copyrightBuilder41 = org.apache.rat.analysis.IHeaderMatcher.Builder.copyright();
        org.apache.rat.configuration.builders.MatcherRefBuilder matcherRefBuilder42 = org.apache.rat.analysis.IHeaderMatcher.Builder.matcherRef();
        boolean boolean43 = matcherRefBuilder42.hasId();
        java.lang.String str44 = matcherRefBuilder42.toString();
        java.util.Map<java.lang.String, org.apache.rat.analysis.IHeaderMatcher> strMap45 = null;
        org.apache.rat.configuration.builders.MatcherRefBuilder matcherRefBuilder46 = matcherRefBuilder42.setMatchers(strMap45);
        org.apache.rat.analysis.IHeaderMatcher.Builder[] builderArray47 = new org.apache.rat.analysis.IHeaderMatcher.Builder[] { matcherRefBuilder2, allBuilder6, copyrightBuilder12, matcherRefBuilder13, copyrightBuilder15, copyrightBuilder21, copyrightBuilder22, copyrightBuilder27, copyrightBuilder33, anyBuilder36, matcherRefBuilder37, copyrightBuilder41, matcherRefBuilder42 };
        java.util.ArrayList<org.apache.rat.analysis.IHeaderMatcher.Builder> builderList48 = new java.util.ArrayList<org.apache.rat.analysis.IHeaderMatcher.Builder>();
        boolean boolean49 = java.util.Collections.addAll((java.util.Collection<org.apache.rat.analysis.IHeaderMatcher.Builder>) builderList48, builderArray47);
        org.apache.rat.configuration.builders.AbstractBuilder abstractBuilder50 = notBuilder0.add((java.util.Collection<org.apache.rat.analysis.IHeaderMatcher.Builder>) builderList48);
        java.lang.String str51 = notBuilder0.toString();
        java.lang.String str52 = notBuilder0.toString();
        java.lang.String str53 = notBuilder0.toString();
        java.lang.String str54 = notBuilder0.toString();
        java.lang.String str55 = notBuilder0.toString();
        java.lang.String str56 = notBuilder0.toString();
        org.apache.rat.configuration.builders.RegexBuilder regexBuilder57 = new org.apache.rat.configuration.builders.RegexBuilder();
        java.lang.String str58 = regexBuilder57.toString();
        java.lang.String str59 = regexBuilder57.toString();
        org.apache.rat.configuration.builders.RegexBuilder regexBuilder61 = regexBuilder57.setExpr("89662180-a89f-497b-9301-227d494d2bae");
        java.lang.String str62 = regexBuilder61.toString();
        org.apache.rat.analysis.IHeaderMatcher iHeaderMatcher63 = regexBuilder61.build();
        java.lang.String str64 = regexBuilder61.toString();
        org.apache.rat.configuration.builders.AbstractBuilder abstractBuilder65 = notBuilder0.add((org.apache.rat.analysis.IHeaderMatcher.Builder) regexBuilder61);
        // The following exception was thrown during execution in test generation
        try {
            org.apache.rat.analysis.IHeaderMatcher iHeaderMatcher66 = notBuilder0.build();
            org.junit.Assert.fail("Expected exception of type org.apache.rat.ConfigurationException; message: 'not' type matcher requires one and only one enclosed matcher");
        } catch (org.apache.rat.ConfigurationException e) {
            // Expected exception.
        }
        org.junit.Assert.assertEquals("'" + str1 + "' != '" + "NotBuilder: null" + "'", str1, "NotBuilder: null");
        org.junit.Assert.assertNotNull(matcherRefBuilder2);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertNotNull(matcherRefBuilder5);
        org.junit.Assert.assertNotNull(copyrightBuilder7);
        org.junit.Assert.assertNotNull(copyrightBuilder9);
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "Copyright Builder: s:OASIS e:null o:null" + "'", str10, "Copyright Builder: s:OASIS e:null o:null");
        org.junit.Assert.assertNotNull(copyrightBuilder12);
        org.junit.Assert.assertNotNull(matcherRefBuilder13);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
        org.junit.Assert.assertNotNull(copyrightBuilder15);
        org.junit.Assert.assertNotNull(copyrightBuilder17);
        org.junit.Assert.assertEquals("'" + str18 + "' != '" + "Copyright Builder: s:OASIS e:null o:null" + "'", str18, "Copyright Builder: s:OASIS e:null o:null");
        org.junit.Assert.assertNotNull(copyrightBuilder20);
        org.junit.Assert.assertNotNull(copyrightBuilder21);
        org.junit.Assert.assertNotNull(copyrightBuilder22);
        org.junit.Assert.assertEquals("'" + str23 + "' != '" + "Copyright Builder: s:null e:null o:null" + "'", str23, "Copyright Builder: s:null e:null o:null");
        org.junit.Assert.assertNotNull(copyrightBuilder25);
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + false + "'", boolean26 == false);
        org.junit.Assert.assertNotNull(copyrightBuilder27);
        org.junit.Assert.assertEquals("'" + str28 + "' != '" + "Copyright Builder: s:null e:null o:null" + "'", str28, "Copyright Builder: s:null e:null o:null");
        org.junit.Assert.assertNotNull(copyrightBuilder30);
        org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + false + "'", boolean31 == false);
        org.junit.Assert.assertEquals("'" + str32 + "' != '" + "Copyright Builder: s:null e:.cvsignore o:null" + "'", str32, "Copyright Builder: s:null e:.cvsignore o:null");
        org.junit.Assert.assertNotNull(copyrightBuilder33);
        org.junit.Assert.assertNotNull(copyrightBuilder35);
        org.junit.Assert.assertNotNull(anyBuilder36);
        org.junit.Assert.assertNotNull(matcherRefBuilder37);
        org.junit.Assert.assertTrue("'" + boolean38 + "' != '" + false + "'", boolean38 == false);
        org.junit.Assert.assertNotNull(matcherRefBuilder40);
        org.junit.Assert.assertNotNull(copyrightBuilder41);
        org.junit.Assert.assertNotNull(matcherRefBuilder42);
        org.junit.Assert.assertTrue("'" + boolean43 + "' != '" + false + "'", boolean43 == false);
        org.junit.Assert.assertEquals("'" + str44 + "' != '" + "MathcerRefBuilder: null" + "'", str44, "MathcerRefBuilder: null");
        org.junit.Assert.assertNotNull(matcherRefBuilder46);
        org.junit.Assert.assertNotNull(builderArray47);
        org.junit.Assert.assertTrue("'" + boolean49 + "' != '" + true + "'", boolean49 == true);
        org.junit.Assert.assertNotNull(abstractBuilder50);
        org.junit.Assert.assertEquals("'" + str51 + "' != '" + "NotBuilder: MathcerRefBuilder: null" + "'", str51, "NotBuilder: MathcerRefBuilder: null");
        org.junit.Assert.assertEquals("'" + str52 + "' != '" + "NotBuilder: MathcerRefBuilder: null" + "'", str52, "NotBuilder: MathcerRefBuilder: null");
        org.junit.Assert.assertEquals("'" + str53 + "' != '" + "NotBuilder: MathcerRefBuilder: null" + "'", str53, "NotBuilder: MathcerRefBuilder: null");
        org.junit.Assert.assertEquals("'" + str54 + "' != '" + "NotBuilder: MathcerRefBuilder: null" + "'", str54, "NotBuilder: MathcerRefBuilder: null");
        org.junit.Assert.assertEquals("'" + str55 + "' != '" + "NotBuilder: MathcerRefBuilder: null" + "'", str55, "NotBuilder: MathcerRefBuilder: null");
        org.junit.Assert.assertEquals("'" + str56 + "' != '" + "NotBuilder: MathcerRefBuilder: null" + "'", str56, "NotBuilder: MathcerRefBuilder: null");
        org.junit.Assert.assertEquals("'" + str58 + "' != '" + "RegexBuilder: null" + "'", str58, "RegexBuilder: null");
        org.junit.Assert.assertEquals("'" + str59 + "' != '" + "RegexBuilder: null" + "'", str59, "RegexBuilder: null");
        org.junit.Assert.assertNotNull(regexBuilder61);
        org.junit.Assert.assertEquals("'" + str62 + "' != '" + "RegexBuilder: 89662180-a89f-497b-9301-227d494d2bae" + "'", str62, "RegexBuilder: 89662180-a89f-497b-9301-227d494d2bae");
        org.junit.Assert.assertNotNull(iHeaderMatcher63);
        org.junit.Assert.assertEquals("'" + str64 + "' != '" + "RegexBuilder: 89662180-a89f-497b-9301-227d494d2bae" + "'", str64, "RegexBuilder: 89662180-a89f-497b-9301-227d494d2bae");
        org.junit.Assert.assertNotNull(abstractBuilder65);
    }

    @Test
    public void test13720() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest27.test13720");
        org.apache.rat.utils.Log log0 = null;
        org.apache.rat.ReportConfiguration reportConfiguration1 = new org.apache.rat.ReportConfiguration(log0);
        java.io.FilenameFilter filenameFilter2 = reportConfiguration1.getInputFileFilter();
        org.apache.rat.license.LicenseSetFactory.LicenseFilter licenseFilter3 = org.apache.rat.license.LicenseSetFactory.LicenseFilter.all;
        java.util.SortedSet<org.apache.rat.license.ILicense> iLicenseSet4 = reportConfiguration1.getLicenses(licenseFilter3);
        org.apache.rat.license.ILicenseFamily iLicenseFamily5 = null;
        reportConfiguration1.addFamily(iLicenseFamily5);
        org.apache.commons.io.filefilter.IOFileFilter iOFileFilter7 = reportConfiguration1.getDirectoryFilter();
        org.apache.rat.utils.Log log8 = null;
        org.apache.rat.ReportConfiguration reportConfiguration9 = new org.apache.rat.ReportConfiguration(log8);
        java.io.FilenameFilter filenameFilter10 = reportConfiguration9.getInputFileFilter();
        org.apache.rat.license.LicenseSetFactory.LicenseFilter licenseFilter11 = org.apache.rat.license.LicenseSetFactory.LicenseFilter.all;
        java.util.SortedSet<org.apache.rat.license.ILicense> iLicenseSet12 = reportConfiguration9.getLicenses(licenseFilter11);
        org.apache.rat.config.AddLicenseHeaders addLicenseHeaders13 = org.apache.rat.config.AddLicenseHeaders.FALSE;
        reportConfiguration9.setAddLicenseHeaders(addLicenseHeaders13);
        org.apache.rat.utils.Log log15 = null;
        org.apache.rat.ReportConfiguration reportConfiguration16 = new org.apache.rat.ReportConfiguration(log15);
        org.apache.rat.report.claim.ClaimStatistic claimStatistic17 = org.apache.rat.Reporter.report(reportConfiguration16);
        org.apache.rat.license.LicenseSetFactory.LicenseFilter licenseFilter18 = org.apache.rat.license.LicenseSetFactory.LicenseFilter.all;
        org.apache.rat.Reporter.listLicenses(reportConfiguration16, licenseFilter18);
        org.apache.rat.Reporter.listLicenses(reportConfiguration9, licenseFilter18);
        org.apache.rat.utils.Log log21 = null;
        org.apache.rat.ReportConfiguration reportConfiguration22 = new org.apache.rat.ReportConfiguration(log21);
        java.io.FilenameFilter filenameFilter23 = reportConfiguration22.getInputFileFilter();
        org.apache.rat.license.LicenseSetFactory.LicenseFilter licenseFilter24 = org.apache.rat.license.LicenseSetFactory.LicenseFilter.all;
        java.util.SortedSet<org.apache.rat.license.ILicense> iLicenseSet25 = reportConfiguration22.getLicenses(licenseFilter24);
        org.apache.rat.config.AddLicenseHeaders addLicenseHeaders26 = org.apache.rat.config.AddLicenseHeaders.FALSE;
        reportConfiguration22.setAddLicenseHeaders(addLicenseHeaders26);
        org.apache.rat.utils.Log log28 = null;
        org.apache.rat.ReportConfiguration reportConfiguration29 = new org.apache.rat.ReportConfiguration(log28);
        org.apache.rat.report.claim.ClaimStatistic claimStatistic30 = org.apache.rat.Reporter.report(reportConfiguration29);
        org.apache.rat.license.LicenseSetFactory.LicenseFilter licenseFilter31 = org.apache.rat.license.LicenseSetFactory.LicenseFilter.all;
        org.apache.rat.Reporter.listLicenses(reportConfiguration29, licenseFilter31);
        org.apache.rat.Reporter.listLicenses(reportConfiguration22, licenseFilter31);
        org.apache.rat.Reporter.listLicenses(reportConfiguration9, licenseFilter31);
        org.apache.rat.utils.Log log35 = null;
        org.apache.rat.ReportConfiguration reportConfiguration36 = new org.apache.rat.ReportConfiguration(log35);
        org.apache.commons.io.function.IOSupplier<java.io.OutputStream> outputStreamIOSupplier37 = reportConfiguration36.getOutput();
        reportConfiguration9.setOut(outputStreamIOSupplier37);
        org.apache.rat.utils.Log.Level level39 = org.apache.rat.utils.Log.Level.WARN;
        reportConfiguration9.logLicenseCollisions(level39);
        org.apache.commons.io.filefilter.IOFileFilter iOFileFilter41 = reportConfiguration9.getDirectoryFilter();
        java.nio.file.Path path42 = null;
        boolean boolean43 = iOFileFilter41.matches(path42);
        org.apache.rat.utils.Log log44 = null;
        org.apache.rat.ReportConfiguration reportConfiguration45 = new org.apache.rat.ReportConfiguration(log44);
        java.io.FilenameFilter filenameFilter46 = reportConfiguration45.getInputFileFilter();
        org.apache.rat.license.LicenseSetFactory.LicenseFilter licenseFilter47 = org.apache.rat.license.LicenseSetFactory.LicenseFilter.all;
        java.util.SortedSet<org.apache.rat.license.ILicense> iLicenseSet48 = reportConfiguration45.getLicenses(licenseFilter47);
        org.apache.rat.config.AddLicenseHeaders addLicenseHeaders49 = org.apache.rat.config.AddLicenseHeaders.FALSE;
        reportConfiguration45.setAddLicenseHeaders(addLicenseHeaders49);
        org.apache.rat.utils.Log log51 = null;
        org.apache.rat.ReportConfiguration reportConfiguration52 = new org.apache.rat.ReportConfiguration(log51);
        org.apache.rat.report.claim.ClaimStatistic claimStatistic53 = org.apache.rat.Reporter.report(reportConfiguration52);
        org.apache.rat.license.LicenseSetFactory.LicenseFilter licenseFilter54 = org.apache.rat.license.LicenseSetFactory.LicenseFilter.all;
        org.apache.rat.Reporter.listLicenses(reportConfiguration52, licenseFilter54);
        org.apache.rat.Reporter.listLicenses(reportConfiguration45, licenseFilter54);
        org.apache.rat.utils.Log log57 = null;
        org.apache.rat.ReportConfiguration reportConfiguration58 = new org.apache.rat.ReportConfiguration(log57);
        java.io.FilenameFilter filenameFilter59 = reportConfiguration58.getInputFileFilter();
        org.apache.rat.license.LicenseSetFactory.LicenseFilter licenseFilter60 = org.apache.rat.license.LicenseSetFactory.LicenseFilter.all;
        java.util.SortedSet<org.apache.rat.license.ILicense> iLicenseSet61 = reportConfiguration58.getLicenses(licenseFilter60);
        org.apache.rat.config.AddLicenseHeaders addLicenseHeaders62 = org.apache.rat.config.AddLicenseHeaders.FALSE;
        reportConfiguration58.setAddLicenseHeaders(addLicenseHeaders62);
        org.apache.rat.utils.Log log64 = null;
        org.apache.rat.ReportConfiguration reportConfiguration65 = new org.apache.rat.ReportConfiguration(log64);
        org.apache.rat.report.claim.ClaimStatistic claimStatistic66 = org.apache.rat.Reporter.report(reportConfiguration65);
        org.apache.rat.license.LicenseSetFactory.LicenseFilter licenseFilter67 = org.apache.rat.license.LicenseSetFactory.LicenseFilter.all;
        org.apache.rat.Reporter.listLicenses(reportConfiguration65, licenseFilter67);
        org.apache.rat.Reporter.listLicenses(reportConfiguration58, licenseFilter67);
        org.apache.rat.Reporter.listLicenses(reportConfiguration45, licenseFilter67);
        org.apache.rat.utils.Log log71 = null;
        org.apache.rat.ReportConfiguration reportConfiguration72 = new org.apache.rat.ReportConfiguration(log71);
        org.apache.commons.io.function.IOSupplier<java.io.OutputStream> outputStreamIOSupplier73 = reportConfiguration72.getOutput();
        reportConfiguration45.setOut(outputStreamIOSupplier73);
        org.apache.rat.utils.Log.Level level75 = org.apache.rat.utils.Log.Level.WARN;
        reportConfiguration45.logLicenseCollisions(level75);
        org.apache.commons.io.filefilter.IOFileFilter iOFileFilter77 = reportConfiguration45.getDirectoryFilter();
        java.nio.file.Path path78 = null;
        boolean boolean79 = iOFileFilter77.matches(path78);
        java.nio.file.Path path80 = null;
        java.nio.file.attribute.BasicFileAttributes basicFileAttributes81 = null;
        java.nio.file.FileVisitResult fileVisitResult82 = iOFileFilter77.accept(path80, basicFileAttributes81);
        org.apache.commons.io.filefilter.IOFileFilter iOFileFilter83 = iOFileFilter41.or(iOFileFilter77);
        reportConfiguration1.addDirectoryFilter(iOFileFilter83);
        org.apache.rat.utils.Log.Level level85 = null;
        reportConfiguration1.logFamilyCollisions(level85);
        org.junit.Assert.assertNull(filenameFilter2);
        org.junit.Assert.assertTrue("'" + licenseFilter3 + "' != '" + org.apache.rat.license.LicenseSetFactory.LicenseFilter.all + "'", licenseFilter3.equals(org.apache.rat.license.LicenseSetFactory.LicenseFilter.all));
        org.junit.Assert.assertNotNull(iLicenseSet4);
        org.junit.Assert.assertNotNull(iOFileFilter7);
        org.junit.Assert.assertNull(filenameFilter10);
        org.junit.Assert.assertTrue("'" + licenseFilter11 + "' != '" + org.apache.rat.license.LicenseSetFactory.LicenseFilter.all + "'", licenseFilter11.equals(org.apache.rat.license.LicenseSetFactory.LicenseFilter.all));
        org.junit.Assert.assertNotNull(iLicenseSet12);
        org.junit.Assert.assertTrue("'" + addLicenseHeaders13 + "' != '" + org.apache.rat.config.AddLicenseHeaders.FALSE + "'", addLicenseHeaders13.equals(org.apache.rat.config.AddLicenseHeaders.FALSE));
        org.junit.Assert.assertNull(claimStatistic17);
        org.junit.Assert.assertTrue("'" + licenseFilter18 + "' != '" + org.apache.rat.license.LicenseSetFactory.LicenseFilter.all + "'", licenseFilter18.equals(org.apache.rat.license.LicenseSetFactory.LicenseFilter.all));
        org.junit.Assert.assertNull(filenameFilter23);
        org.junit.Assert.assertTrue("'" + licenseFilter24 + "' != '" + org.apache.rat.license.LicenseSetFactory.LicenseFilter.all + "'", licenseFilter24.equals(org.apache.rat.license.LicenseSetFactory.LicenseFilter.all));
        org.junit.Assert.assertNotNull(iLicenseSet25);
        org.junit.Assert.assertTrue("'" + addLicenseHeaders26 + "' != '" + org.apache.rat.config.AddLicenseHeaders.FALSE + "'", addLicenseHeaders26.equals(org.apache.rat.config.AddLicenseHeaders.FALSE));
        org.junit.Assert.assertNull(claimStatistic30);
        org.junit.Assert.assertTrue("'" + licenseFilter31 + "' != '" + org.apache.rat.license.LicenseSetFactory.LicenseFilter.all + "'", licenseFilter31.equals(org.apache.rat.license.LicenseSetFactory.LicenseFilter.all));
        org.junit.Assert.assertNotNull(outputStreamIOSupplier37);
        org.junit.Assert.assertTrue("'" + level39 + "' != '" + org.apache.rat.utils.Log.Level.WARN + "'", level39.equals(org.apache.rat.utils.Log.Level.WARN));
        org.junit.Assert.assertNotNull(iOFileFilter41);
        org.junit.Assert.assertTrue("'" + boolean43 + "' != '" + false + "'", boolean43 == false);
        org.junit.Assert.assertNull(filenameFilter46);
        org.junit.Assert.assertTrue("'" + licenseFilter47 + "' != '" + org.apache.rat.license.LicenseSetFactory.LicenseFilter.all + "'", licenseFilter47.equals(org.apache.rat.license.LicenseSetFactory.LicenseFilter.all));
        org.junit.Assert.assertNotNull(iLicenseSet48);
        org.junit.Assert.assertTrue("'" + addLicenseHeaders49 + "' != '" + org.apache.rat.config.AddLicenseHeaders.FALSE + "'", addLicenseHeaders49.equals(org.apache.rat.config.AddLicenseHeaders.FALSE));
        org.junit.Assert.assertNull(claimStatistic53);
        org.junit.Assert.assertTrue("'" + licenseFilter54 + "' != '" + org.apache.rat.license.LicenseSetFactory.LicenseFilter.all + "'", licenseFilter54.equals(org.apache.rat.license.LicenseSetFactory.LicenseFilter.all));
        org.junit.Assert.assertNull(filenameFilter59);
        org.junit.Assert.assertTrue("'" + licenseFilter60 + "' != '" + org.apache.rat.license.LicenseSetFactory.LicenseFilter.all + "'", licenseFilter60.equals(org.apache.rat.license.LicenseSetFactory.LicenseFilter.all));
        org.junit.Assert.assertNotNull(iLicenseSet61);
        org.junit.Assert.assertTrue("'" + addLicenseHeaders62 + "' != '" + org.apache.rat.config.AddLicenseHeaders.FALSE + "'", addLicenseHeaders62.equals(org.apache.rat.config.AddLicenseHeaders.FALSE));
        org.junit.Assert.assertNull(claimStatistic66);
        org.junit.Assert.assertTrue("'" + licenseFilter67 + "' != '" + org.apache.rat.license.LicenseSetFactory.LicenseFilter.all + "'", licenseFilter67.equals(org.apache.rat.license.LicenseSetFactory.LicenseFilter.all));
        org.junit.Assert.assertNotNull(outputStreamIOSupplier73);
        org.junit.Assert.assertTrue("'" + level75 + "' != '" + org.apache.rat.utils.Log.Level.WARN + "'", level75.equals(org.apache.rat.utils.Log.Level.WARN));
        org.junit.Assert.assertNotNull(iOFileFilter77);
        org.junit.Assert.assertTrue("'" + boolean79 + "' != '" + false + "'", boolean79 == false);
        org.junit.Assert.assertTrue("'" + fileVisitResult82 + "' != '" + java.nio.file.FileVisitResult.TERMINATE + "'", fileVisitResult82.equals(java.nio.file.FileVisitResult.TERMINATE));
        org.junit.Assert.assertNotNull(iOFileFilter83);
    }

    @Test
    public void test13721() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest27.test13721");
        java.io.File file0 = null;
        org.apache.rat.utils.Log log1 = null;
        org.apache.rat.ReportConfiguration reportConfiguration2 = new org.apache.rat.ReportConfiguration(log1);
        org.apache.rat.report.claim.ClaimStatistic claimStatistic3 = org.apache.rat.Reporter.report(reportConfiguration2);
        org.apache.rat.utils.Log log4 = null;
        org.apache.rat.ReportConfiguration reportConfiguration5 = new org.apache.rat.ReportConfiguration(log4);
        org.apache.rat.report.claim.ClaimStatistic claimStatistic6 = org.apache.rat.Reporter.report(reportConfiguration5);
        org.apache.rat.utils.ReportingSet.Options options7 = org.apache.rat.utils.ReportingSet.Options.OVERWRITE;
        reportConfiguration5.licenseDuplicateOption(options7);
        reportConfiguration2.familyDuplicateOption(options7);
        org.apache.commons.io.function.IOSupplier<java.io.PrintWriter> printWriterIOSupplier10 = reportConfiguration2.getWriter();
        boolean boolean11 = reportConfiguration2.isAddingLicensesForced();
        java.io.FilenameFilter filenameFilter12 = reportConfiguration2.getInputFileFilter();
        java.io.FilenameFilter filenameFilter13 = reportConfiguration2.getInputFileFilter();
        boolean boolean14 = reportConfiguration2.isStyleReport();
        org.apache.rat.utils.Log log15 = reportConfiguration2.getLog();
        org.apache.commons.io.filefilter.IOFileFilter iOFileFilter16 = reportConfiguration2.getDirectoryFilter();
        org.apache.commons.io.filefilter.IOFileFilter iOFileFilter17 = iOFileFilter16.negate();
        org.apache.rat.utils.Log log18 = null;
        org.apache.rat.ReportConfiguration reportConfiguration19 = new org.apache.rat.ReportConfiguration(log18);
        java.io.FilenameFilter filenameFilter20 = reportConfiguration19.getInputFileFilter();
        org.apache.rat.license.LicenseSetFactory.LicenseFilter licenseFilter21 = org.apache.rat.license.LicenseSetFactory.LicenseFilter.all;
        java.util.SortedSet<org.apache.rat.license.ILicense> iLicenseSet22 = reportConfiguration19.getLicenses(licenseFilter21);
        org.apache.rat.config.AddLicenseHeaders addLicenseHeaders23 = org.apache.rat.config.AddLicenseHeaders.FALSE;
        reportConfiguration19.setAddLicenseHeaders(addLicenseHeaders23);
        org.apache.rat.utils.Log log25 = null;
        org.apache.rat.ReportConfiguration reportConfiguration26 = new org.apache.rat.ReportConfiguration(log25);
        org.apache.rat.report.claim.ClaimStatistic claimStatistic27 = org.apache.rat.Reporter.report(reportConfiguration26);
        org.apache.rat.license.LicenseSetFactory.LicenseFilter licenseFilter28 = org.apache.rat.license.LicenseSetFactory.LicenseFilter.all;
        org.apache.rat.Reporter.listLicenses(reportConfiguration26, licenseFilter28);
        org.apache.rat.Reporter.listLicenses(reportConfiguration19, licenseFilter28);
        org.apache.rat.utils.Log log31 = null;
        org.apache.rat.ReportConfiguration reportConfiguration32 = new org.apache.rat.ReportConfiguration(log31);
        java.io.FilenameFilter filenameFilter33 = reportConfiguration32.getInputFileFilter();
        org.apache.rat.license.LicenseSetFactory.LicenseFilter licenseFilter34 = org.apache.rat.license.LicenseSetFactory.LicenseFilter.all;
        java.util.SortedSet<org.apache.rat.license.ILicense> iLicenseSet35 = reportConfiguration32.getLicenses(licenseFilter34);
        org.apache.rat.config.AddLicenseHeaders addLicenseHeaders36 = org.apache.rat.config.AddLicenseHeaders.FALSE;
        reportConfiguration32.setAddLicenseHeaders(addLicenseHeaders36);
        org.apache.rat.utils.Log log38 = null;
        org.apache.rat.ReportConfiguration reportConfiguration39 = new org.apache.rat.ReportConfiguration(log38);
        org.apache.rat.report.claim.ClaimStatistic claimStatistic40 = org.apache.rat.Reporter.report(reportConfiguration39);
        org.apache.rat.license.LicenseSetFactory.LicenseFilter licenseFilter41 = org.apache.rat.license.LicenseSetFactory.LicenseFilter.all;
        org.apache.rat.Reporter.listLicenses(reportConfiguration39, licenseFilter41);
        org.apache.rat.Reporter.listLicenses(reportConfiguration32, licenseFilter41);
        org.apache.rat.Reporter.listLicenses(reportConfiguration19, licenseFilter41);
        org.apache.rat.utils.Log log45 = null;
        org.apache.rat.ReportConfiguration reportConfiguration46 = new org.apache.rat.ReportConfiguration(log45);
        org.apache.commons.io.function.IOSupplier<java.io.OutputStream> outputStreamIOSupplier47 = reportConfiguration46.getOutput();
        reportConfiguration19.setOut(outputStreamIOSupplier47);
        org.apache.rat.utils.Log.Level level49 = org.apache.rat.utils.Log.Level.WARN;
        reportConfiguration19.logLicenseCollisions(level49);
        org.apache.commons.io.filefilter.IOFileFilter iOFileFilter51 = reportConfiguration19.getDirectoryFilter();
        java.nio.file.Path path52 = null;
        boolean boolean53 = iOFileFilter51.matches(path52);
        org.apache.rat.utils.Log log54 = null;
        org.apache.rat.ReportConfiguration reportConfiguration55 = new org.apache.rat.ReportConfiguration(log54);
        java.io.FilenameFilter filenameFilter56 = reportConfiguration55.getInputFileFilter();
        org.apache.rat.license.LicenseSetFactory.LicenseFilter licenseFilter57 = org.apache.rat.license.LicenseSetFactory.LicenseFilter.all;
        java.util.SortedSet<org.apache.rat.license.ILicense> iLicenseSet58 = reportConfiguration55.getLicenses(licenseFilter57);
        org.apache.rat.config.AddLicenseHeaders addLicenseHeaders59 = org.apache.rat.config.AddLicenseHeaders.FALSE;
        reportConfiguration55.setAddLicenseHeaders(addLicenseHeaders59);
        org.apache.rat.utils.Log log61 = null;
        org.apache.rat.ReportConfiguration reportConfiguration62 = new org.apache.rat.ReportConfiguration(log61);
        org.apache.rat.report.claim.ClaimStatistic claimStatistic63 = org.apache.rat.Reporter.report(reportConfiguration62);
        org.apache.rat.license.LicenseSetFactory.LicenseFilter licenseFilter64 = org.apache.rat.license.LicenseSetFactory.LicenseFilter.all;
        org.apache.rat.Reporter.listLicenses(reportConfiguration62, licenseFilter64);
        org.apache.rat.Reporter.listLicenses(reportConfiguration55, licenseFilter64);
        org.apache.rat.utils.Log log67 = null;
        org.apache.rat.ReportConfiguration reportConfiguration68 = new org.apache.rat.ReportConfiguration(log67);
        java.io.FilenameFilter filenameFilter69 = reportConfiguration68.getInputFileFilter();
        org.apache.rat.license.LicenseSetFactory.LicenseFilter licenseFilter70 = org.apache.rat.license.LicenseSetFactory.LicenseFilter.all;
        java.util.SortedSet<org.apache.rat.license.ILicense> iLicenseSet71 = reportConfiguration68.getLicenses(licenseFilter70);
        org.apache.rat.config.AddLicenseHeaders addLicenseHeaders72 = org.apache.rat.config.AddLicenseHeaders.FALSE;
        reportConfiguration68.setAddLicenseHeaders(addLicenseHeaders72);
        org.apache.rat.utils.Log log74 = null;
        org.apache.rat.ReportConfiguration reportConfiguration75 = new org.apache.rat.ReportConfiguration(log74);
        org.apache.rat.report.claim.ClaimStatistic claimStatistic76 = org.apache.rat.Reporter.report(reportConfiguration75);
        org.apache.rat.license.LicenseSetFactory.LicenseFilter licenseFilter77 = org.apache.rat.license.LicenseSetFactory.LicenseFilter.all;
        org.apache.rat.Reporter.listLicenses(reportConfiguration75, licenseFilter77);
        org.apache.rat.Reporter.listLicenses(reportConfiguration68, licenseFilter77);
        org.apache.rat.Reporter.listLicenses(reportConfiguration55, licenseFilter77);
        org.apache.rat.utils.Log log81 = null;
        org.apache.rat.ReportConfiguration reportConfiguration82 = new org.apache.rat.ReportConfiguration(log81);
        org.apache.commons.io.function.IOSupplier<java.io.OutputStream> outputStreamIOSupplier83 = reportConfiguration82.getOutput();
        reportConfiguration55.setOut(outputStreamIOSupplier83);
        org.apache.rat.utils.Log.Level level85 = org.apache.rat.utils.Log.Level.WARN;
        reportConfiguration55.logLicenseCollisions(level85);
        org.apache.commons.io.filefilter.IOFileFilter iOFileFilter87 = reportConfiguration55.getDirectoryFilter();
        java.nio.file.Path path88 = null;
        boolean boolean89 = iOFileFilter87.matches(path88);
        java.nio.file.Path path90 = null;
        java.nio.file.attribute.BasicFileAttributes basicFileAttributes91 = null;
        java.nio.file.FileVisitResult fileVisitResult92 = iOFileFilter87.accept(path90, basicFileAttributes91);
        org.apache.commons.io.filefilter.IOFileFilter iOFileFilter93 = iOFileFilter51.or(iOFileFilter87);
        org.apache.commons.io.filefilter.IOFileFilter iOFileFilter94 = iOFileFilter93.negate();
        org.apache.commons.io.filefilter.IOFileFilter iOFileFilter95 = iOFileFilter16.or(iOFileFilter94);
        // The following exception was thrown during execution in test generation
        try {
            org.apache.rat.walker.ArchiveWalker archiveWalker96 = new org.apache.rat.walker.ArchiveWalker(file0, (java.io.FilenameFilter) iOFileFilter95);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNull(claimStatistic3);
        org.junit.Assert.assertNull(claimStatistic6);
        org.junit.Assert.assertTrue("'" + options7 + "' != '" + org.apache.rat.utils.ReportingSet.Options.OVERWRITE + "'", options7.equals(org.apache.rat.utils.ReportingSet.Options.OVERWRITE));
        org.junit.Assert.assertNotNull(printWriterIOSupplier10);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
        org.junit.Assert.assertNull(filenameFilter12);
        org.junit.Assert.assertNull(filenameFilter13);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + true + "'", boolean14 == true);
        org.junit.Assert.assertNull(log15);
        org.junit.Assert.assertNotNull(iOFileFilter16);
        org.junit.Assert.assertNotNull(iOFileFilter17);
        org.junit.Assert.assertNull(filenameFilter20);
        org.junit.Assert.assertTrue("'" + licenseFilter21 + "' != '" + org.apache.rat.license.LicenseSetFactory.LicenseFilter.all + "'", licenseFilter21.equals(org.apache.rat.license.LicenseSetFactory.LicenseFilter.all));
        org.junit.Assert.assertNotNull(iLicenseSet22);
        org.junit.Assert.assertTrue("'" + addLicenseHeaders23 + "' != '" + org.apache.rat.config.AddLicenseHeaders.FALSE + "'", addLicenseHeaders23.equals(org.apache.rat.config.AddLicenseHeaders.FALSE));
        org.junit.Assert.assertNull(claimStatistic27);
        org.junit.Assert.assertTrue("'" + licenseFilter28 + "' != '" + org.apache.rat.license.LicenseSetFactory.LicenseFilter.all + "'", licenseFilter28.equals(org.apache.rat.license.LicenseSetFactory.LicenseFilter.all));
        org.junit.Assert.assertNull(filenameFilter33);
        org.junit.Assert.assertTrue("'" + licenseFilter34 + "' != '" + org.apache.rat.license.LicenseSetFactory.LicenseFilter.all + "'", licenseFilter34.equals(org.apache.rat.license.LicenseSetFactory.LicenseFilter.all));
        org.junit.Assert.assertNotNull(iLicenseSet35);
        org.junit.Assert.assertTrue("'" + addLicenseHeaders36 + "' != '" + org.apache.rat.config.AddLicenseHeaders.FALSE + "'", addLicenseHeaders36.equals(org.apache.rat.config.AddLicenseHeaders.FALSE));
        org.junit.Assert.assertNull(claimStatistic40);
        org.junit.Assert.assertTrue("'" + licenseFilter41 + "' != '" + org.apache.rat.license.LicenseSetFactory.LicenseFilter.all + "'", licenseFilter41.equals(org.apache.rat.license.LicenseSetFactory.LicenseFilter.all));
        org.junit.Assert.assertNotNull(outputStreamIOSupplier47);
        org.junit.Assert.assertTrue("'" + level49 + "' != '" + org.apache.rat.utils.Log.Level.WARN + "'", level49.equals(org.apache.rat.utils.Log.Level.WARN));
        org.junit.Assert.assertNotNull(iOFileFilter51);
        org.junit.Assert.assertTrue("'" + boolean53 + "' != '" + false + "'", boolean53 == false);
        org.junit.Assert.assertNull(filenameFilter56);
        org.junit.Assert.assertTrue("'" + licenseFilter57 + "' != '" + org.apache.rat.license.LicenseSetFactory.LicenseFilter.all + "'", licenseFilter57.equals(org.apache.rat.license.LicenseSetFactory.LicenseFilter.all));
        org.junit.Assert.assertNotNull(iLicenseSet58);
        org.junit.Assert.assertTrue("'" + addLicenseHeaders59 + "' != '" + org.apache.rat.config.AddLicenseHeaders.FALSE + "'", addLicenseHeaders59.equals(org.apache.rat.config.AddLicenseHeaders.FALSE));
        org.junit.Assert.assertNull(claimStatistic63);
        org.junit.Assert.assertTrue("'" + licenseFilter64 + "' != '" + org.apache.rat.license.LicenseSetFactory.LicenseFilter.all + "'", licenseFilter64.equals(org.apache.rat.license.LicenseSetFactory.LicenseFilter.all));
        org.junit.Assert.assertNull(filenameFilter69);
        org.junit.Assert.assertTrue("'" + licenseFilter70 + "' != '" + org.apache.rat.license.LicenseSetFactory.LicenseFilter.all + "'", licenseFilter70.equals(org.apache.rat.license.LicenseSetFactory.LicenseFilter.all));
        org.junit.Assert.assertNotNull(iLicenseSet71);
        org.junit.Assert.assertTrue("'" + addLicenseHeaders72 + "' != '" + org.apache.rat.config.AddLicenseHeaders.FALSE + "'", addLicenseHeaders72.equals(org.apache.rat.config.AddLicenseHeaders.FALSE));
        org.junit.Assert.assertNull(claimStatistic76);
        org.junit.Assert.assertTrue("'" + licenseFilter77 + "' != '" + org.apache.rat.license.LicenseSetFactory.LicenseFilter.all + "'", licenseFilter77.equals(org.apache.rat.license.LicenseSetFactory.LicenseFilter.all));
        org.junit.Assert.assertNotNull(outputStreamIOSupplier83);
        org.junit.Assert.assertTrue("'" + level85 + "' != '" + org.apache.rat.utils.Log.Level.WARN + "'", level85.equals(org.apache.rat.utils.Log.Level.WARN));
        org.junit.Assert.assertNotNull(iOFileFilter87);
        org.junit.Assert.assertTrue("'" + boolean89 + "' != '" + false + "'", boolean89 == false);
        org.junit.Assert.assertTrue("'" + fileVisitResult92 + "' != '" + java.nio.file.FileVisitResult.TERMINATE + "'", fileVisitResult92.equals(java.nio.file.FileVisitResult.TERMINATE));
        org.junit.Assert.assertNotNull(iOFileFilter93);
        org.junit.Assert.assertNotNull(iOFileFilter94);
        org.junit.Assert.assertNotNull(iOFileFilter95);
    }

    @Test
    public void test13722() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest27.test13722");
        org.apache.rat.utils.Log log0 = null;
        org.apache.rat.ReportConfiguration reportConfiguration1 = new org.apache.rat.ReportConfiguration(log0);
        org.apache.rat.license.ILicenseFamily[] iLicenseFamilyArray2 = new org.apache.rat.license.ILicenseFamily[] {};
        java.util.ArrayList<org.apache.rat.license.ILicenseFamily> iLicenseFamilyList3 = new java.util.ArrayList<org.apache.rat.license.ILicenseFamily>();
        boolean boolean4 = java.util.Collections.addAll((java.util.Collection<org.apache.rat.license.ILicenseFamily>) iLicenseFamilyList3, iLicenseFamilyArray2);
        reportConfiguration1.addFamilies((java.util.Collection<org.apache.rat.license.ILicenseFamily>) iLicenseFamilyList3);
        org.apache.rat.report.IReportable iReportable6 = null;
        reportConfiguration1.setReportable(iReportable6);
        org.apache.rat.utils.ReportingSet<java.lang.String> strSet8 = new org.apache.rat.utils.ReportingSet<java.lang.String>();
        java.lang.Object[] objArray9 = strSet8.toArray();
        org.apache.rat.utils.Log log10 = null;
        org.apache.rat.ReportConfiguration reportConfiguration11 = new org.apache.rat.ReportConfiguration(log10);
        org.apache.rat.report.claim.ClaimStatistic claimStatistic12 = org.apache.rat.Reporter.report(reportConfiguration11);
        org.apache.rat.utils.Log log13 = null;
        org.apache.rat.ReportConfiguration reportConfiguration14 = new org.apache.rat.ReportConfiguration(log13);
        org.apache.rat.report.claim.ClaimStatistic claimStatistic15 = org.apache.rat.Reporter.report(reportConfiguration14);
        org.apache.rat.utils.ReportingSet.Options options16 = org.apache.rat.utils.ReportingSet.Options.OVERWRITE;
        reportConfiguration14.licenseDuplicateOption(options16);
        reportConfiguration11.familyDuplicateOption(options16);
        org.apache.commons.io.function.IOSupplier<java.io.PrintWriter> printWriterIOSupplier19 = reportConfiguration11.getWriter();
        boolean boolean20 = reportConfiguration11.isAddingLicensesForced();
        org.apache.rat.utils.Log log21 = null;
        org.apache.rat.ReportConfiguration reportConfiguration22 = new org.apache.rat.ReportConfiguration(log21);
        reportConfiguration22.addApprovedLicenseCategory(".cvsignore");
        org.apache.rat.utils.Log.Level level25 = org.apache.rat.utils.Log.Level.ERROR;
        reportConfiguration22.logFamilyCollisions(level25);
        reportConfiguration11.logLicenseCollisions(level25);
        org.apache.rat.utils.ReportingSet<java.lang.String> strSet28 = strSet8.setLogLevel(level25);
        java.util.stream.Stream<java.lang.String> strStream29 = strSet28.stream();
        reportConfiguration1.addApprovedLicenseCategories((java.util.Collection<java.lang.String>) strSet28);
        org.apache.rat.utils.ReportingSet.Options options31 = org.apache.rat.utils.ReportingSet.Options.OVERWRITE;
        org.apache.rat.utils.ReportingSet<java.lang.String> strSet32 = strSet28.setDuplicateOption(options31);
        strSet32.clear();
        java.util.Spliterator<java.lang.String> strSpliterator34 = strSet32.spliterator();
        org.apache.rat.utils.Log log35 = null;
        org.apache.rat.ReportConfiguration reportConfiguration36 = new org.apache.rat.ReportConfiguration(log35);
        java.io.FilenameFilter filenameFilter37 = reportConfiguration36.getInputFileFilter();
        org.apache.rat.license.LicenseSetFactory.LicenseFilter licenseFilter38 = org.apache.rat.license.LicenseSetFactory.LicenseFilter.all;
        java.util.SortedSet<org.apache.rat.license.ILicense> iLicenseSet39 = reportConfiguration36.getLicenses(licenseFilter38);
        org.apache.rat.license.ILicenseFamily iLicenseFamily40 = null;
        reportConfiguration36.addFamily(iLicenseFamily40);
        org.apache.commons.io.filefilter.IOFileFilter iOFileFilter42 = reportConfiguration36.getDirectoryFilter();
        reportConfiguration36.addApprovedLicenseCategory("GPL1 ");
        java.io.FilenameFilter filenameFilter45 = reportConfiguration36.getInputFileFilter();
        org.apache.commons.io.function.IOSupplier<java.io.OutputStream> outputStreamIOSupplier46 = reportConfiguration36.getOutput();
        org.apache.rat.utils.Log log47 = null;
        org.apache.rat.ReportConfiguration reportConfiguration48 = new org.apache.rat.ReportConfiguration(log47);
        org.apache.rat.report.claim.ClaimStatistic claimStatistic49 = org.apache.rat.Reporter.report(reportConfiguration48);
        org.apache.rat.utils.Log log50 = null;
        org.apache.rat.ReportConfiguration reportConfiguration51 = new org.apache.rat.ReportConfiguration(log50);
        org.apache.rat.report.claim.ClaimStatistic claimStatistic52 = org.apache.rat.Reporter.report(reportConfiguration51);
        org.apache.rat.utils.ReportingSet.Options options53 = org.apache.rat.utils.ReportingSet.Options.OVERWRITE;
        reportConfiguration51.licenseDuplicateOption(options53);
        reportConfiguration48.familyDuplicateOption(options53);
        org.apache.commons.io.function.IOSupplier<java.io.PrintWriter> printWriterIOSupplier56 = reportConfiguration48.getWriter();
        boolean boolean57 = reportConfiguration48.isAddingLicensesForced();
        org.apache.rat.report.IReportable iReportable58 = null;
        reportConfiguration48.setReportable(iReportable58);
        java.lang.String[] strArray65 = new java.lang.String[] { "http://org/apache/rat/meta-data#LicenseFamilyCategory", "Datum [ name ='http://org/apache/rat/meta-data#LicenseFamilyCategory',value ='GPL1  ']", "MANIFEST.MF", "AllBuilder:", "The MIT License" };
        org.apache.rat.utils.ReportingSet<java.lang.String> strSet66 = new org.apache.rat.utils.ReportingSet<java.lang.String>();
        boolean boolean67 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strSet66, strArray65);
        boolean boolean69 = strSet66.addIfNotPresent("http://org/apache/rat/meta-data#LicenseFamilyName");
        boolean boolean71 = strSet66.addIfNotPresent("ef7a8b13-64c3-4510-bb0c-dbf208e1e73f");
        java.util.function.Function<java.lang.String, java.lang.String> strFunction72 = null;
        org.apache.rat.utils.ReportingSet<java.lang.String> strSet73 = strSet66.setMsgFormat(strFunction72);
        boolean boolean74 = strSet66.isEmpty();
        boolean boolean76 = strSet66.addIfNotPresent("OASIS Open License");
        org.apache.rat.utils.Log log77 = null;
        org.apache.rat.ReportConfiguration reportConfiguration78 = new org.apache.rat.ReportConfiguration(log77);
        org.apache.rat.report.claim.ClaimStatistic claimStatistic79 = org.apache.rat.Reporter.report(reportConfiguration78);
        org.apache.rat.utils.Log log80 = null;
        org.apache.rat.ReportConfiguration reportConfiguration81 = new org.apache.rat.ReportConfiguration(log80);
        org.apache.rat.report.claim.ClaimStatistic claimStatistic82 = org.apache.rat.Reporter.report(reportConfiguration81);
        org.apache.rat.utils.ReportingSet.Options options83 = org.apache.rat.utils.ReportingSet.Options.OVERWRITE;
        reportConfiguration81.licenseDuplicateOption(options83);
        reportConfiguration78.familyDuplicateOption(options83);
        org.apache.commons.io.function.IOSupplier<java.io.PrintWriter> printWriterIOSupplier86 = reportConfiguration78.getWriter();
        org.apache.rat.utils.Log log87 = null;
        org.apache.rat.ReportConfiguration reportConfiguration88 = new org.apache.rat.ReportConfiguration(log87);
        reportConfiguration88.addApprovedLicenseCategory(".cvsignore");
        org.apache.rat.utils.Log.Level level91 = org.apache.rat.utils.Log.Level.ERROR;
        reportConfiguration88.logFamilyCollisions(level91);
        reportConfiguration78.logFamilyCollisions(level91);
        org.apache.rat.utils.ReportingSet<java.lang.String> strSet94 = strSet66.setLogLevel(level91);
        reportConfiguration48.logFamilyCollisions(level91);
        reportConfiguration36.logFamilyCollisions(level91);
        org.apache.rat.utils.ReportingSet<java.lang.String> strSet97 = strSet32.setLogLevel(level91);
        org.junit.Assert.assertNotNull(iLicenseFamilyArray2);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertNotNull(objArray9);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray9), "[]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray9), "[]");
        org.junit.Assert.assertNull(claimStatistic12);
        org.junit.Assert.assertNull(claimStatistic15);
        org.junit.Assert.assertTrue("'" + options16 + "' != '" + org.apache.rat.utils.ReportingSet.Options.OVERWRITE + "'", options16.equals(org.apache.rat.utils.ReportingSet.Options.OVERWRITE));
        org.junit.Assert.assertNotNull(printWriterIOSupplier19);
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + false + "'", boolean20 == false);
        org.junit.Assert.assertTrue("'" + level25 + "' != '" + org.apache.rat.utils.Log.Level.ERROR + "'", level25.equals(org.apache.rat.utils.Log.Level.ERROR));
        org.junit.Assert.assertNotNull(strSet28);
        org.junit.Assert.assertNotNull(strStream29);
        org.junit.Assert.assertTrue("'" + options31 + "' != '" + org.apache.rat.utils.ReportingSet.Options.OVERWRITE + "'", options31.equals(org.apache.rat.utils.ReportingSet.Options.OVERWRITE));
        org.junit.Assert.assertNotNull(strSet32);
        org.junit.Assert.assertNotNull(strSpliterator34);
        org.junit.Assert.assertNull(filenameFilter37);
        org.junit.Assert.assertTrue("'" + licenseFilter38 + "' != '" + org.apache.rat.license.LicenseSetFactory.LicenseFilter.all + "'", licenseFilter38.equals(org.apache.rat.license.LicenseSetFactory.LicenseFilter.all));
        org.junit.Assert.assertNotNull(iLicenseSet39);
        org.junit.Assert.assertNotNull(iOFileFilter42);
        org.junit.Assert.assertNull(filenameFilter45);
        org.junit.Assert.assertNotNull(outputStreamIOSupplier46);
        org.junit.Assert.assertNull(claimStatistic49);
        org.junit.Assert.assertNull(claimStatistic52);
        org.junit.Assert.assertTrue("'" + options53 + "' != '" + org.apache.rat.utils.ReportingSet.Options.OVERWRITE + "'", options53.equals(org.apache.rat.utils.ReportingSet.Options.OVERWRITE));
        org.junit.Assert.assertNotNull(printWriterIOSupplier56);
        org.junit.Assert.assertTrue("'" + boolean57 + "' != '" + false + "'", boolean57 == false);
        org.junit.Assert.assertNotNull(strArray65);
        org.junit.Assert.assertTrue("'" + boolean67 + "' != '" + true + "'", boolean67 == true);
        org.junit.Assert.assertTrue("'" + boolean69 + "' != '" + true + "'", boolean69 == true);
        org.junit.Assert.assertTrue("'" + boolean71 + "' != '" + true + "'", boolean71 == true);
        org.junit.Assert.assertNotNull(strSet73);
        org.junit.Assert.assertTrue("'" + boolean74 + "' != '" + false + "'", boolean74 == false);
        org.junit.Assert.assertTrue("'" + boolean76 + "' != '" + true + "'", boolean76 == true);
        org.junit.Assert.assertNull(claimStatistic79);
        org.junit.Assert.assertNull(claimStatistic82);
        org.junit.Assert.assertTrue("'" + options83 + "' != '" + org.apache.rat.utils.ReportingSet.Options.OVERWRITE + "'", options83.equals(org.apache.rat.utils.ReportingSet.Options.OVERWRITE));
        org.junit.Assert.assertNotNull(printWriterIOSupplier86);
        org.junit.Assert.assertTrue("'" + level91 + "' != '" + org.apache.rat.utils.Log.Level.ERROR + "'", level91.equals(org.apache.rat.utils.Log.Level.ERROR));
        org.junit.Assert.assertNotNull(strSet94);
        org.junit.Assert.assertNotNull(strSet97);
    }

    @Test
    public void test13723() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest27.test13723");
        org.apache.rat.configuration.builders.TextBuilder textBuilder0 = new org.apache.rat.configuration.builders.TextBuilder();
        org.apache.rat.configuration.builders.TextBuilder textBuilder2 = textBuilder0.setText("true");
        boolean boolean3 = textBuilder2.hasId();
        java.lang.String str4 = textBuilder2.toString();
        java.lang.String str5 = textBuilder2.toString();
        org.junit.Assert.assertNotNull(textBuilder2);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "TextBuilder: true" + "'", str4, "TextBuilder: true");
        org.junit.Assert.assertEquals("'" + str5 + "' != '" + "TextBuilder: true" + "'", str5, "TextBuilder: true");
    }

    @Test
    public void test13724() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest27.test13724");
        org.apache.rat.analysis.license.FullTextMatchingLicense fullTextMatchingLicense0 = new org.apache.rat.analysis.license.FullTextMatchingLicense();
        fullTextMatchingLicense0.setLicenseFamilyName("hi!");
        java.lang.String str3 = fullTextMatchingLicense0.getLicenseFamilyCategory();
        java.lang.String str4 = fullTextMatchingLicense0.getLicenseFamilyName();
        fullTextMatchingLicense0.setLicenseFamilyName("http://org/apache/rat/meta-data#LicenseFamilyName");
        fullTextMatchingLicense0.setFullText("2376a0e1-496c-4c88-9c9f-b046171bfce7");
        org.apache.rat.license.ILicense.Builder builder9 = fullTextMatchingLicense0.getLicense();
        org.junit.Assert.assertNull(str3);
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "hi!" + "'", str4, "hi!");
        org.junit.Assert.assertNotNull(builder9);
    }

    @Test
    public void test13725() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest27.test13725");
        org.apache.rat.report.claim.ClaimStatistic claimStatistic0 = new org.apache.rat.report.claim.ClaimStatistic();
        claimStatistic0.setNumApproved((int) (short) 10);
        java.util.Map<java.lang.String, java.lang.Integer> strMap3 = null;
        claimStatistic0.setDocumentCategoryMap(strMap3);
        java.util.Map<java.lang.String, java.lang.Integer> strMap5 = claimStatistic0.getLicenseFileNameMap();
        claimStatistic0.setNumUnknown((int) (byte) -1);
        java.util.Map<java.lang.String, java.lang.Integer> strMap8 = claimStatistic0.getLicenseFileCodeMap();
        java.util.Map<java.lang.String, java.lang.Integer> strMap9 = claimStatistic0.getDocumentCategoryMap();
        java.util.Map<java.lang.String, java.lang.Integer> strMap10 = claimStatistic0.getDocumentCategoryMap();
        java.util.Map<java.lang.String, java.lang.Integer> strMap11 = null;
        claimStatistic0.setDocumentCategoryMap(strMap11);
        java.util.Map<java.lang.String, java.lang.Integer> strMap13 = null;
        claimStatistic0.setLicenseFileNameMap(strMap13);
        int int15 = claimStatistic0.getNumGenerated();
        org.junit.Assert.assertNull(strMap5);
        org.junit.Assert.assertNull(strMap8);
        org.junit.Assert.assertNull(strMap9);
        org.junit.Assert.assertNull(strMap10);
        org.junit.Assert.assertTrue("'" + int15 + "' != '" + 0 + "'", int15 == 0);
    }

    @Test
    public void test13726() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest27.test13726");
        org.apache.rat.configuration.Format format1 = org.apache.rat.configuration.Format.XML;
        org.apache.rat.configuration.LicenseReader licenseReader2 = format1.licenseReader();
        org.apache.rat.configuration.LicenseReader licenseReader3 = format1.licenseReader();
        org.apache.rat.configuration.LicenseReader licenseReader4 = format1.licenseReader();
        org.apache.rat.configuration.LicenseReader licenseReader5 = format1.licenseReader();
        java.util.SortedSet<org.apache.rat.license.ILicenseFamily> iLicenseFamilySet6 = licenseReader5.readFamilies();
        java.util.SortedSet<org.apache.rat.license.ILicenseFamily> iLicenseFamilySet7 = licenseReader5.readFamilies();
        // The following exception was thrown during execution in test generation
        try {
            org.apache.rat.license.ILicenseFamily iLicenseFamily8 = org.apache.rat.license.LicenseFamilySetFactory.search("", iLicenseFamilySet7);
            org.junit.Assert.fail("Expected exception of type org.apache.rat.ConfigurationException; message: LicenseFamily Category must be specified");
        } catch (org.apache.rat.ConfigurationException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + format1 + "' != '" + org.apache.rat.configuration.Format.XML + "'", format1.equals(org.apache.rat.configuration.Format.XML));
        org.junit.Assert.assertNotNull(licenseReader2);
        org.junit.Assert.assertNotNull(licenseReader3);
        org.junit.Assert.assertNotNull(licenseReader4);
        org.junit.Assert.assertNotNull(licenseReader5);
        org.junit.Assert.assertNotNull(iLicenseFamilySet6);
        org.junit.Assert.assertNotNull(iLicenseFamilySet7);
    }

    @Test
    public void test13727() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest27.test13727");
        org.apache.rat.utils.Log log0 = null;
        org.apache.rat.ReportConfiguration reportConfiguration1 = new org.apache.rat.ReportConfiguration(log0);
        org.apache.rat.license.ILicenseFamily[] iLicenseFamilyArray2 = new org.apache.rat.license.ILicenseFamily[] {};
        java.util.ArrayList<org.apache.rat.license.ILicenseFamily> iLicenseFamilyList3 = new java.util.ArrayList<org.apache.rat.license.ILicenseFamily>();
        boolean boolean4 = java.util.Collections.addAll((java.util.Collection<org.apache.rat.license.ILicenseFamily>) iLicenseFamilyList3, iLicenseFamilyArray2);
        reportConfiguration1.addFamilies((java.util.Collection<org.apache.rat.license.ILicenseFamily>) iLicenseFamilyList3);
        org.apache.rat.report.IReportable iReportable6 = null;
        reportConfiguration1.setReportable(iReportable6);
        reportConfiguration1.addApprovedLicenseCategory("http://org/apache/rat/meta-data#LicenseFamilyCategory");
        org.apache.rat.utils.Log log10 = null;
        org.apache.rat.ReportConfiguration reportConfiguration11 = new org.apache.rat.ReportConfiguration(log10);
        java.io.FilenameFilter filenameFilter12 = reportConfiguration11.getInputFileFilter();
        org.apache.rat.license.LicenseSetFactory.LicenseFilter licenseFilter13 = org.apache.rat.license.LicenseSetFactory.LicenseFilter.all;
        java.util.SortedSet<org.apache.rat.license.ILicense> iLicenseSet14 = reportConfiguration11.getLicenses(licenseFilter13);
        org.apache.rat.license.ILicenseFamily iLicenseFamily15 = null;
        reportConfiguration11.addFamily(iLicenseFamily15);
        org.apache.commons.io.filefilter.IOFileFilter iOFileFilter17 = reportConfiguration11.getDirectoryFilter();
        org.apache.rat.document.ToNameTransformer toNameTransformer18 = new org.apache.rat.document.ToNameTransformer();
        org.apache.rat.utils.DefaultLog defaultLog19 = org.apache.rat.utils.DefaultLog.INSTANCE;
        org.apache.rat.license.ILicense.Builder builder20 = org.apache.rat.license.ILicense.builder();
        org.apache.rat.license.ILicense.Builder builder22 = builder20.setLicenseFamilyCategory("");
        org.apache.rat.analysis.matchers.CopyrightMatcher copyrightMatcher26 = new org.apache.rat.analysis.matchers.CopyrightMatcher("", "GPL1 ", "hi!");
        org.apache.rat.analysis.IHeaderMatcher.State state27 = copyrightMatcher26.finalizeState();
        org.apache.rat.license.ILicense.Builder builder28 = builder22.setMatcher((org.apache.rat.analysis.IHeaderMatcher) copyrightMatcher26);
        org.apache.rat.license.ILicense.Builder builder30 = builder28.setLicenseFamilyCategory("");
        defaultLog19.error((java.lang.Object) builder30);
        java.lang.Object obj32 = toNameTransformer18.transform((java.lang.Object) defaultLog19);
        org.apache.rat.utils.Log log33 = null;
        org.apache.rat.ReportConfiguration reportConfiguration34 = new org.apache.rat.ReportConfiguration(log33);
        java.io.FilenameFilter filenameFilter35 = reportConfiguration34.getInputFileFilter();
        org.apache.rat.license.ILicense iLicense36 = null;
        reportConfiguration34.addLicense(iLicense36);
        org.apache.rat.license.ILicenseFamily iLicenseFamily38 = null;
        reportConfiguration34.addFamily(iLicenseFamily38);
        org.apache.commons.io.function.IOSupplier<java.io.InputStream> inputStreamIOSupplier40 = org.apache.rat.Defaults.getPlainStyleSheet();
        reportConfiguration34.setStyleSheet(inputStreamIOSupplier40);
        java.lang.Object obj42 = toNameTransformer18.transform((java.lang.Object) inputStreamIOSupplier40);
        reportConfiguration11.setStyleSheet(inputStreamIOSupplier40);
        reportConfiguration1.setStyleSheet(inputStreamIOSupplier40);
        org.apache.rat.report.claim.ClaimStatistic claimStatistic45 = org.apache.rat.Reporter.report(reportConfiguration1);
        java.net.URL uRL46 = null;
        // The following exception was thrown during execution in test generation
        try {
            reportConfiguration1.setStyleSheet(uRL46);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: styleSheet file should not be null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(iLicenseFamilyArray2);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertNull(filenameFilter12);
        org.junit.Assert.assertTrue("'" + licenseFilter13 + "' != '" + org.apache.rat.license.LicenseSetFactory.LicenseFilter.all + "'", licenseFilter13.equals(org.apache.rat.license.LicenseSetFactory.LicenseFilter.all));
        org.junit.Assert.assertNotNull(iLicenseSet14);
        org.junit.Assert.assertNotNull(iOFileFilter17);
        org.junit.Assert.assertNotNull(defaultLog19);
        org.junit.Assert.assertNotNull(builder20);
        org.junit.Assert.assertNotNull(builder22);
        org.junit.Assert.assertTrue("'" + state27 + "' != '" + org.apache.rat.analysis.IHeaderMatcher.State.f + "'", state27.equals(org.apache.rat.analysis.IHeaderMatcher.State.f));
        org.junit.Assert.assertNotNull(builder28);
        org.junit.Assert.assertNotNull(builder30);
        org.junit.Assert.assertNull(obj32);
        org.junit.Assert.assertNull(filenameFilter35);
        org.junit.Assert.assertNotNull(inputStreamIOSupplier40);
        org.junit.Assert.assertNull(obj42);
        org.junit.Assert.assertNull(claimStatistic45);
    }

    @Test
    public void test13728() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest27.test13728");
        org.apache.rat.analysis.matchers.CopyrightMatcher copyrightMatcher3 = new org.apache.rat.analysis.matchers.CopyrightMatcher("535b5d01-f553-45e5-bb29-a646e4b8b66f", "TextBuilder: standard", "7d01b1b3-e7b9-4f85-b3dd-e0334dea8844");
        org.apache.rat.analysis.IHeaderMatcher.State state5 = copyrightMatcher3.matches("TextBuilder: TextBuilder: 4fcae17...");
        org.junit.Assert.assertTrue("'" + state5 + "' != '" + org.apache.rat.analysis.IHeaderMatcher.State.i + "'", state5.equals(org.apache.rat.analysis.IHeaderMatcher.State.i));
    }

    @Test
    public void test13729() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest27.test13729");
        org.apache.rat.report.claim.ClaimStatistic claimStatistic0 = new org.apache.rat.report.claim.ClaimStatistic();
        claimStatistic0.setNumApproved((int) (short) 10);
        java.util.Map<java.lang.String, java.lang.Integer> strMap3 = null;
        claimStatistic0.setDocumentCategoryMap(strMap3);
        claimStatistic0.setNumUnknown((int) '4');
        java.util.Map<java.lang.String, java.lang.Integer> strMap7 = null;
        claimStatistic0.setLicenseFileNameMap(strMap7);
        java.util.Map<java.lang.String, java.lang.Integer> strMap9 = null;
        claimStatistic0.setDocumentCategoryMap(strMap9);
        claimStatistic0.setNumUnApproved((-1));
        claimStatistic0.setNumApproved((int) (short) 100);
        java.util.Map<java.lang.String, java.lang.Integer> strMap15 = claimStatistic0.getLicenseFileCodeMap();
        claimStatistic0.setNumUnknown(14);
        int int18 = claimStatistic0.getNumApproved();
        org.junit.Assert.assertNull(strMap15);
        org.junit.Assert.assertTrue("'" + int18 + "' != '" + 100 + "'", int18 == 100);
    }

    @Test
    public void test13730() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest27.test13730");
        org.apache.rat.configuration.builders.AllBuilder allBuilder0 = new org.apache.rat.configuration.builders.AllBuilder();
        java.lang.String str1 = allBuilder0.toString();
        java.lang.String str2 = allBuilder0.toString();
        java.lang.String str3 = allBuilder0.toString();
        java.lang.String str4 = allBuilder0.toString();
        org.apache.rat.configuration.builders.CopyrightBuilder copyrightBuilder5 = org.apache.rat.analysis.IHeaderMatcher.Builder.copyright();
        org.apache.rat.configuration.builders.CopyrightBuilder copyrightBuilder7 = copyrightBuilder5.setStart("OASIS");
        org.apache.rat.analysis.IHeaderMatcher iHeaderMatcher8 = copyrightBuilder5.build();
        org.apache.rat.configuration.builders.CopyrightBuilder copyrightBuilder10 = copyrightBuilder5.setStart(".cvsignore");
        org.apache.rat.configuration.builders.CopyrightBuilder copyrightBuilder12 = copyrightBuilder10.setEnd(".gitignore");
        org.apache.rat.configuration.builders.AbstractBuilder abstractBuilder13 = allBuilder0.add((org.apache.rat.analysis.IHeaderMatcher.Builder) copyrightBuilder12);
        org.apache.rat.analysis.IHeaderMatcher iHeaderMatcher14 = abstractBuilder13.build();
        org.apache.rat.analysis.IHeaderMatcher.State state16 = iHeaderMatcher14.matches("4fcf38e7-b3b4-49bf-bb24-7e7253fb6df3");
        org.junit.Assert.assertEquals("'" + str1 + "' != '" + "AllBuilder:" + "'", str1, "AllBuilder:");
        org.junit.Assert.assertEquals("'" + str2 + "' != '" + "AllBuilder:" + "'", str2, "AllBuilder:");
        org.junit.Assert.assertEquals("'" + str3 + "' != '" + "AllBuilder:" + "'", str3, "AllBuilder:");
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "AllBuilder:" + "'", str4, "AllBuilder:");
        org.junit.Assert.assertNotNull(copyrightBuilder5);
        org.junit.Assert.assertNotNull(copyrightBuilder7);
        org.junit.Assert.assertNotNull(iHeaderMatcher8);
        org.junit.Assert.assertNotNull(copyrightBuilder10);
        org.junit.Assert.assertNotNull(copyrightBuilder12);
        org.junit.Assert.assertNotNull(abstractBuilder13);
        org.junit.Assert.assertNotNull(iHeaderMatcher14);
        org.junit.Assert.assertTrue("'" + state16 + "' != '" + org.apache.rat.analysis.IHeaderMatcher.State.i + "'", state16.equals(org.apache.rat.analysis.IHeaderMatcher.State.i));
    }

    @Test
    public void test13731() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest27.test13731");
        org.apache.rat.report.claim.ClaimStatistic claimStatistic0 = new org.apache.rat.report.claim.ClaimStatistic();
        claimStatistic0.setNumApproved((int) (short) 10);
        java.util.Map<java.lang.String, java.lang.Integer> strMap3 = claimStatistic0.getLicenseFileNameMap();
        java.util.Map<java.lang.String, java.lang.Integer> strMap4 = null;
        claimStatistic0.setLicenseFileCodeMap(strMap4);
        claimStatistic0.setNumGenerated(1);
        org.junit.Assert.assertNull(strMap3);
    }

    @Test
    public void test13732() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest27.test13732");
        // The following exception was thrown during execution in test generation
        try {
            org.apache.rat.configuration.builders.AbstractBuilder abstractBuilder1 = org.apache.rat.configuration.MatcherBuilderTracker.getMatcherBuilder("fbe39c3a-b594-4272-9489-8ecb62fbd6bb");
            org.junit.Assert.fail("Expected exception of type org.apache.rat.ConfigurationException; message: ?Valid builders?all?matcherRef?copyright?not?regex?spdx?text?any?ERROR MSG?No matcher builder named fbe39c3a-b594-4272-9489-8ecb62fbd6bb");
        } catch (org.apache.rat.ConfigurationException e) {
            // Expected exception.
        }
    }

    @Test
    public void test13733() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest27.test13733");
        java.io.Writer writer0 = null;
        org.apache.rat.report.xml.writer.impl.base.XmlWriter xmlWriter1 = new org.apache.rat.report.xml.writer.impl.base.XmlWriter(writer0);
        // The following exception was thrown during execution in test generation
        try {
            org.apache.rat.report.xml.writer.IXmlWriter iXmlWriter4 = xmlWriter1.attribute((java.lang.CharSequence) "Copyright Builder: s:8ecb8cce-06e4-400f-84d9-ad1cf6289fda e:Datum [ name ='GNU General Public License, version 2',value ='021187d7-27c2-4fd9-bc74-8cc00413ee52 '] o:null", (java.lang.CharSequence) "0220269ffc2a4386ad2d6c8cb9ef0d91");
            org.junit.Assert.fail("Expected exception of type org.apache.rat.report.xml.writer.OperationNotAllowedException; message: Close called before an element has been opened.");
        } catch (org.apache.rat.report.xml.writer.OperationNotAllowedException e) {
            // Expected exception.
        }
    }

    @Test
    public void test13734() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest27.test13734");
        org.apache.rat.utils.Log log0 = null;
        org.apache.rat.ReportConfiguration reportConfiguration1 = new org.apache.rat.ReportConfiguration(log0);
        org.apache.rat.license.ILicenseFamily[] iLicenseFamilyArray2 = new org.apache.rat.license.ILicenseFamily[] {};
        java.util.ArrayList<org.apache.rat.license.ILicenseFamily> iLicenseFamilyList3 = new java.util.ArrayList<org.apache.rat.license.ILicenseFamily>();
        boolean boolean4 = java.util.Collections.addAll((java.util.Collection<org.apache.rat.license.ILicenseFamily>) iLicenseFamilyList3, iLicenseFamilyArray2);
        reportConfiguration1.addFamilies((java.util.Collection<org.apache.rat.license.ILicenseFamily>) iLicenseFamilyList3);
        org.apache.rat.report.IReportable iReportable6 = null;
        reportConfiguration1.setReportable(iReportable6);
        org.apache.rat.utils.ReportingSet<java.lang.String> strSet8 = new org.apache.rat.utils.ReportingSet<java.lang.String>();
        java.lang.Object[] objArray9 = strSet8.toArray();
        org.apache.rat.utils.Log log10 = null;
        org.apache.rat.ReportConfiguration reportConfiguration11 = new org.apache.rat.ReportConfiguration(log10);
        org.apache.rat.report.claim.ClaimStatistic claimStatistic12 = org.apache.rat.Reporter.report(reportConfiguration11);
        org.apache.rat.utils.Log log13 = null;
        org.apache.rat.ReportConfiguration reportConfiguration14 = new org.apache.rat.ReportConfiguration(log13);
        org.apache.rat.report.claim.ClaimStatistic claimStatistic15 = org.apache.rat.Reporter.report(reportConfiguration14);
        org.apache.rat.utils.ReportingSet.Options options16 = org.apache.rat.utils.ReportingSet.Options.OVERWRITE;
        reportConfiguration14.licenseDuplicateOption(options16);
        reportConfiguration11.familyDuplicateOption(options16);
        org.apache.commons.io.function.IOSupplier<java.io.PrintWriter> printWriterIOSupplier19 = reportConfiguration11.getWriter();
        boolean boolean20 = reportConfiguration11.isAddingLicensesForced();
        org.apache.rat.utils.Log log21 = null;
        org.apache.rat.ReportConfiguration reportConfiguration22 = new org.apache.rat.ReportConfiguration(log21);
        reportConfiguration22.addApprovedLicenseCategory(".cvsignore");
        org.apache.rat.utils.Log.Level level25 = org.apache.rat.utils.Log.Level.ERROR;
        reportConfiguration22.logFamilyCollisions(level25);
        reportConfiguration11.logLicenseCollisions(level25);
        org.apache.rat.utils.ReportingSet<java.lang.String> strSet28 = strSet8.setLogLevel(level25);
        java.util.stream.Stream<java.lang.String> strStream29 = strSet28.stream();
        reportConfiguration1.addApprovedLicenseCategories((java.util.Collection<java.lang.String>) strSet28);
        org.apache.rat.utils.Log log31 = null;
        org.apache.rat.ReportConfiguration reportConfiguration32 = new org.apache.rat.ReportConfiguration(log31);
        org.apache.rat.report.claim.ClaimStatistic claimStatistic33 = org.apache.rat.Reporter.report(reportConfiguration32);
        org.apache.rat.report.IReportable iReportable34 = null;
        reportConfiguration32.setReportable(iReportable34);
        org.apache.rat.license.ILicense iLicense36 = null;
        reportConfiguration32.addLicense(iLicense36);
        org.apache.rat.utils.Log log38 = null;
        org.apache.rat.ReportConfiguration reportConfiguration39 = new org.apache.rat.ReportConfiguration(log38);
        org.apache.rat.utils.ReportingSet.Options options40 = org.apache.rat.utils.ReportingSet.Options.OVERWRITE;
        reportConfiguration39.licenseDuplicateOption(options40);
        reportConfiguration32.familyDuplicateOption(options40);
        reportConfiguration1.familyDuplicateOption(options40);
        org.apache.commons.io.function.IOSupplier<java.io.InputStream> inputStreamIOSupplier44 = org.apache.rat.Defaults.getUnapprovedLicensesStyleSheet();
        reportConfiguration1.setStyleSheet(inputStreamIOSupplier44);
        java.lang.String[] strArray51 = new java.lang.String[] { "http://org/apache/rat/meta-data#LicenseFamilyCategory", "Datum [ name ='http://org/apache/rat/meta-data#LicenseFamilyCategory',value ='GPL1  ']", "MANIFEST.MF", "AllBuilder:", "The MIT License" };
        org.apache.rat.utils.ReportingSet<java.lang.String> strSet52 = new org.apache.rat.utils.ReportingSet<java.lang.String>();
        boolean boolean53 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strSet52, strArray51);
        boolean boolean55 = strSet52.addIfNotPresent("http://org/apache/rat/meta-data#LicenseFamilyName");
        boolean boolean57 = strSet52.addIfNotPresent("ef7a8b13-64c3-4510-bb0c-dbf208e1e73f");
        java.util.stream.Stream<java.lang.String> strStream58 = strSet52.stream();
        org.apache.rat.utils.DefaultLog defaultLog59 = org.apache.rat.utils.DefaultLog.INSTANCE;
        org.apache.rat.utils.Log log60 = null;
        org.apache.rat.ReportConfiguration reportConfiguration61 = new org.apache.rat.ReportConfiguration(log60);
        reportConfiguration61.addApprovedLicenseCategory(".cvsignore");
        org.apache.rat.utils.Log.Level level64 = org.apache.rat.utils.Log.Level.ERROR;
        reportConfiguration61.logFamilyCollisions(level64);
        defaultLog59.setLevel(level64);
        org.apache.rat.utils.ReportingSet<java.lang.String> strSet67 = strSet52.setLogLevel(level64);
        boolean boolean68 = strSet67.isEmpty();
        reportConfiguration1.addApprovedLicenseCategories((java.util.Collection<java.lang.String>) strSet67);
        org.apache.rat.utils.Log log70 = null;
        org.apache.rat.ReportConfiguration reportConfiguration71 = new org.apache.rat.ReportConfiguration(log70);
        org.apache.rat.report.claim.ClaimStatistic claimStatistic72 = org.apache.rat.Reporter.report(reportConfiguration71);
        org.apache.rat.utils.Log log73 = null;
        org.apache.rat.ReportConfiguration reportConfiguration74 = new org.apache.rat.ReportConfiguration(log73);
        org.apache.rat.report.claim.ClaimStatistic claimStatistic75 = org.apache.rat.Reporter.report(reportConfiguration74);
        org.apache.rat.utils.ReportingSet.Options options76 = org.apache.rat.utils.ReportingSet.Options.OVERWRITE;
        reportConfiguration74.licenseDuplicateOption(options76);
        reportConfiguration71.familyDuplicateOption(options76);
        org.apache.commons.io.function.IOSupplier<java.io.PrintWriter> printWriterIOSupplier79 = reportConfiguration71.getWriter();
        org.apache.rat.utils.Log log80 = null;
        org.apache.rat.ReportConfiguration reportConfiguration81 = new org.apache.rat.ReportConfiguration(log80);
        reportConfiguration81.addApprovedLicenseCategory(".cvsignore");
        org.apache.rat.utils.Log.Level level84 = org.apache.rat.utils.Log.Level.ERROR;
        reportConfiguration81.logFamilyCollisions(level84);
        reportConfiguration71.logFamilyCollisions(level84);
        org.apache.rat.report.IReportable iReportable87 = reportConfiguration71.getReportable();
        org.apache.rat.license.ILicense iLicense88 = null;
        reportConfiguration71.addLicense(iLicense88);
        boolean boolean90 = strSet67.equals((java.lang.Object) reportConfiguration71);
        org.apache.rat.report.claim.ClaimStatistic claimStatistic91 = org.apache.rat.Reporter.report(reportConfiguration71);
        org.junit.Assert.assertNotNull(iLicenseFamilyArray2);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertNotNull(objArray9);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray9), "[]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray9), "[]");
        org.junit.Assert.assertNull(claimStatistic12);
        org.junit.Assert.assertNull(claimStatistic15);
        org.junit.Assert.assertTrue("'" + options16 + "' != '" + org.apache.rat.utils.ReportingSet.Options.OVERWRITE + "'", options16.equals(org.apache.rat.utils.ReportingSet.Options.OVERWRITE));
        org.junit.Assert.assertNotNull(printWriterIOSupplier19);
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + false + "'", boolean20 == false);
        org.junit.Assert.assertTrue("'" + level25 + "' != '" + org.apache.rat.utils.Log.Level.ERROR + "'", level25.equals(org.apache.rat.utils.Log.Level.ERROR));
        org.junit.Assert.assertNotNull(strSet28);
        org.junit.Assert.assertNotNull(strStream29);
        org.junit.Assert.assertNull(claimStatistic33);
        org.junit.Assert.assertTrue("'" + options40 + "' != '" + org.apache.rat.utils.ReportingSet.Options.OVERWRITE + "'", options40.equals(org.apache.rat.utils.ReportingSet.Options.OVERWRITE));
        org.junit.Assert.assertNotNull(inputStreamIOSupplier44);
        org.junit.Assert.assertNotNull(strArray51);
        org.junit.Assert.assertTrue("'" + boolean53 + "' != '" + true + "'", boolean53 == true);
        org.junit.Assert.assertTrue("'" + boolean55 + "' != '" + true + "'", boolean55 == true);
        org.junit.Assert.assertTrue("'" + boolean57 + "' != '" + true + "'", boolean57 == true);
        org.junit.Assert.assertNotNull(strStream58);
        org.junit.Assert.assertNotNull(defaultLog59);
        org.junit.Assert.assertTrue("'" + level64 + "' != '" + org.apache.rat.utils.Log.Level.ERROR + "'", level64.equals(org.apache.rat.utils.Log.Level.ERROR));
        org.junit.Assert.assertNotNull(strSet67);
        org.junit.Assert.assertTrue("'" + boolean68 + "' != '" + false + "'", boolean68 == false);
        org.junit.Assert.assertNull(claimStatistic72);
        org.junit.Assert.assertNull(claimStatistic75);
        org.junit.Assert.assertTrue("'" + options76 + "' != '" + org.apache.rat.utils.ReportingSet.Options.OVERWRITE + "'", options76.equals(org.apache.rat.utils.ReportingSet.Options.OVERWRITE));
        org.junit.Assert.assertNotNull(printWriterIOSupplier79);
        org.junit.Assert.assertTrue("'" + level84 + "' != '" + org.apache.rat.utils.Log.Level.ERROR + "'", level84.equals(org.apache.rat.utils.Log.Level.ERROR));
        org.junit.Assert.assertNull(iReportable87);
        org.junit.Assert.assertTrue("'" + boolean90 + "' != '" + false + "'", boolean90 == false);
        org.junit.Assert.assertNull(claimStatistic91);
    }

    @Test
    public void test13735() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest27.test13735");
        org.apache.rat.utils.Log log0 = null;
        org.apache.rat.ReportConfiguration reportConfiguration1 = new org.apache.rat.ReportConfiguration(log0);
        org.apache.rat.report.claim.ClaimStatistic claimStatistic2 = org.apache.rat.Reporter.report(reportConfiguration1);
        org.apache.rat.report.IReportable iReportable3 = null;
        reportConfiguration1.setReportable(iReportable3);
        org.apache.rat.license.ILicense iLicense5 = null;
        reportConfiguration1.addLicense(iLicense5);
        org.apache.rat.utils.Log.Level level7 = null;
        reportConfiguration1.logFamilyCollisions(level7);
        java.lang.String[] strArray14 = new java.lang.String[] { "http://org/apache/rat/meta-data#LicenseFamilyCategory", "Datum [ name ='http://org/apache/rat/meta-data#LicenseFamilyCategory',value ='GPL1  ']", "MANIFEST.MF", "AllBuilder:", "The MIT License" };
        org.apache.rat.utils.ReportingSet<java.lang.String> strSet15 = new org.apache.rat.utils.ReportingSet<java.lang.String>();
        boolean boolean16 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strSet15, strArray14);
        boolean boolean18 = strSet15.addIfNotPresent("http://org/apache/rat/meta-data#LicenseFamilyName");
        java.util.Iterator<java.lang.String> strItor19 = strSet15.iterator();
        java.lang.Object[] objArray20 = strSet15.toArray();
        java.lang.String[] strArray26 = new java.lang.String[] { "http://org/apache/rat/meta-data#LicenseFamilyCategory", "Datum [ name ='http://org/apache/rat/meta-data#LicenseFamilyCategory',value ='GPL1  ']", "MANIFEST.MF", "AllBuilder:", "The MIT License" };
        org.apache.rat.utils.ReportingSet<java.lang.String> strSet27 = new org.apache.rat.utils.ReportingSet<java.lang.String>();
        boolean boolean28 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strSet27, strArray26);
        boolean boolean30 = strSet27.addIfNotPresent("http://org/apache/rat/meta-data#LicenseFamilyName");
        java.util.SortedSet<org.apache.rat.license.ILicenseFamily> iLicenseFamilySet31 = org.apache.rat.license.LicenseFamilySetFactory.emptyLicenseFamilySet();
        boolean boolean32 = strSet27.removeAll((java.util.Collection<org.apache.rat.license.ILicenseFamily>) iLicenseFamilySet31);
        boolean boolean33 = strSet15.containsAll((java.util.Collection<org.apache.rat.license.ILicenseFamily>) iLicenseFamilySet31);
        java.util.Iterator<java.lang.String> strItor34 = strSet15.iterator();
        org.apache.rat.analysis.license.FullTextMatchingLicense fullTextMatchingLicense35 = new org.apache.rat.analysis.license.FullTextMatchingLicense();
        fullTextMatchingLicense35.setLicenseFamilyName("hi!");
        java.lang.String str38 = fullTextMatchingLicense35.getLicenseFamilyCategory();
        java.lang.String str39 = fullTextMatchingLicense35.getLicenseFamilyName();
        fullTextMatchingLicense35.setLicenseFamilyName("SpdxBuilder: null");
        fullTextMatchingLicense35.setLicenseFamilyCategory("TMF");
        org.apache.rat.license.ILicenseFamily iLicenseFamily44 = fullTextMatchingLicense35.getLicenseFamily();
        java.util.SortedSet<org.apache.rat.license.ILicenseFamily> iLicenseFamilySet45 = org.apache.rat.license.LicenseFamilySetFactory.emptyLicenseFamilySet();
        org.apache.rat.license.ILicenseFamily iLicenseFamily46 = org.apache.rat.license.LicenseFamilySetFactory.search(iLicenseFamily44, iLicenseFamilySet45);
        java.lang.String[] strArray52 = new java.lang.String[] { "http://org/apache/rat/meta-data#LicenseFamilyCategory", "Datum [ name ='http://org/apache/rat/meta-data#LicenseFamilyCategory',value ='GPL1  ']", "MANIFEST.MF", "AllBuilder:", "The MIT License" };
        org.apache.rat.utils.ReportingSet<java.lang.String> strSet53 = new org.apache.rat.utils.ReportingSet<java.lang.String>();
        boolean boolean54 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strSet53, strArray52);
        boolean boolean56 = strSet53.addIfNotPresent("http://org/apache/rat/meta-data#LicenseFamilyName");
        java.util.Iterator<java.lang.String> strItor57 = strSet53.iterator();
        java.lang.Object[] objArray58 = strSet53.toArray();
        java.lang.String[] strArray64 = new java.lang.String[] { "http://org/apache/rat/meta-data#LicenseFamilyCategory", "Datum [ name ='http://org/apache/rat/meta-data#LicenseFamilyCategory',value ='GPL1  ']", "MANIFEST.MF", "AllBuilder:", "The MIT License" };
        org.apache.rat.utils.ReportingSet<java.lang.String> strSet65 = new org.apache.rat.utils.ReportingSet<java.lang.String>();
        boolean boolean66 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strSet65, strArray64);
        boolean boolean68 = strSet65.addIfNotPresent("http://org/apache/rat/meta-data#LicenseFamilyName");
        java.util.SortedSet<org.apache.rat.license.ILicenseFamily> iLicenseFamilySet69 = org.apache.rat.license.LicenseFamilySetFactory.emptyLicenseFamilySet();
        boolean boolean70 = strSet65.removeAll((java.util.Collection<org.apache.rat.license.ILicenseFamily>) iLicenseFamilySet69);
        boolean boolean71 = strSet53.containsAll((java.util.Collection<org.apache.rat.license.ILicenseFamily>) iLicenseFamilySet69);
        org.apache.rat.license.ILicenseFamily iLicenseFamily72 = org.apache.rat.license.LicenseFamilySetFactory.search(iLicenseFamily44, iLicenseFamilySet69);
        org.apache.rat.policy.DefaultPolicy defaultPolicy73 = new org.apache.rat.policy.DefaultPolicy((java.util.Collection<org.apache.rat.license.ILicenseFamily>) iLicenseFamilySet69);
        boolean boolean74 = strSet15.removeAll((java.util.Collection<org.apache.rat.license.ILicenseFamily>) iLicenseFamilySet69);
        org.apache.rat.utils.ReportingSet<java.lang.String> strSet76 = strSet15.headSet("9DF69CA9-2229-47B6-966B-221652FD7D08");
        org.apache.rat.configuration.builders.CopyrightBuilder copyrightBuilder77 = org.apache.rat.analysis.IHeaderMatcher.Builder.copyright();
        org.apache.rat.configuration.builders.CopyrightBuilder copyrightBuilder79 = copyrightBuilder77.setStart("OASIS");
        org.apache.rat.configuration.builders.CopyrightBuilder copyrightBuilder81 = copyrightBuilder77.setOwner("Copyright Builder: s:null e:274c6a15-09f6-4bfd-ac53-1827770eb507 o:null");
        org.apache.rat.configuration.builders.CopyrightBuilder copyrightBuilder83 = copyrightBuilder77.setStart("W3CD ");
        boolean boolean84 = strSet15.equals((java.lang.Object) copyrightBuilder77);
        reportConfiguration1.addApprovedLicenseCategories((java.util.Collection<java.lang.String>) strSet15);
        org.junit.Assert.assertNull(claimStatistic2);
        org.junit.Assert.assertNotNull(strArray14);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + true + "'", boolean16 == true);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + true + "'", boolean18 == true);
        org.junit.Assert.assertNotNull(strItor19);
        org.junit.Assert.assertNotNull(objArray20);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray20), "[AllBuilder:, Datum [ name ='http://org/apache/rat/meta-data#LicenseFamilyCategory',value ='GPL1  '], MANIFEST.MF, The MIT License, http://org/apache/rat/meta-data#LicenseFamilyCategory, http://org/apache/rat/meta-data#LicenseFamilyName]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray20), "[AllBuilder:, Datum [ name ='http://org/apache/rat/meta-data#LicenseFamilyCategory',value ='GPL1  '], MANIFEST.MF, The MIT License, http://org/apache/rat/meta-data#LicenseFamilyCategory, http://org/apache/rat/meta-data#LicenseFamilyName]");
        org.junit.Assert.assertNotNull(strArray26);
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + true + "'", boolean28 == true);
        org.junit.Assert.assertTrue("'" + boolean30 + "' != '" + true + "'", boolean30 == true);
        org.junit.Assert.assertNotNull(iLicenseFamilySet31);
        org.junit.Assert.assertTrue("'" + boolean32 + "' != '" + false + "'", boolean32 == false);
        org.junit.Assert.assertTrue("'" + boolean33 + "' != '" + true + "'", boolean33 == true);
        org.junit.Assert.assertNotNull(strItor34);
        org.junit.Assert.assertNull(str38);
        org.junit.Assert.assertEquals("'" + str39 + "' != '" + "hi!" + "'", str39, "hi!");
        org.junit.Assert.assertNotNull(iLicenseFamily44);
        org.junit.Assert.assertNotNull(iLicenseFamilySet45);
        org.junit.Assert.assertNull(iLicenseFamily46);
        org.junit.Assert.assertNotNull(strArray52);
        org.junit.Assert.assertTrue("'" + boolean54 + "' != '" + true + "'", boolean54 == true);
        org.junit.Assert.assertTrue("'" + boolean56 + "' != '" + true + "'", boolean56 == true);
        org.junit.Assert.assertNotNull(strItor57);
        org.junit.Assert.assertNotNull(objArray58);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray58), "[AllBuilder:, Datum [ name ='http://org/apache/rat/meta-data#LicenseFamilyCategory',value ='GPL1  '], MANIFEST.MF, The MIT License, http://org/apache/rat/meta-data#LicenseFamilyCategory, http://org/apache/rat/meta-data#LicenseFamilyName]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray58), "[AllBuilder:, Datum [ name ='http://org/apache/rat/meta-data#LicenseFamilyCategory',value ='GPL1  '], MANIFEST.MF, The MIT License, http://org/apache/rat/meta-data#LicenseFamilyCategory, http://org/apache/rat/meta-data#LicenseFamilyName]");
        org.junit.Assert.assertNotNull(strArray64);
        org.junit.Assert.assertTrue("'" + boolean66 + "' != '" + true + "'", boolean66 == true);
        org.junit.Assert.assertTrue("'" + boolean68 + "' != '" + true + "'", boolean68 == true);
        org.junit.Assert.assertNotNull(iLicenseFamilySet69);
        org.junit.Assert.assertTrue("'" + boolean70 + "' != '" + false + "'", boolean70 == false);
        org.junit.Assert.assertTrue("'" + boolean71 + "' != '" + true + "'", boolean71 == true);
        org.junit.Assert.assertNull(iLicenseFamily72);
        org.junit.Assert.assertTrue("'" + boolean74 + "' != '" + false + "'", boolean74 == false);
        org.junit.Assert.assertNotNull(strSet76);
        org.junit.Assert.assertNotNull(copyrightBuilder77);
        org.junit.Assert.assertNotNull(copyrightBuilder79);
        org.junit.Assert.assertNotNull(copyrightBuilder81);
        org.junit.Assert.assertNotNull(copyrightBuilder83);
        org.junit.Assert.assertTrue("'" + boolean84 + "' != '" + false + "'", boolean84 == false);
    }

    @Test
    public void test13736() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest27.test13736");
        org.apache.rat.utils.Log log0 = null;
        org.apache.rat.ReportConfiguration reportConfiguration1 = new org.apache.rat.ReportConfiguration(log0);
        reportConfiguration1.addApprovedLicenseCategory(".cvsignore");
        org.apache.rat.utils.Log.Level level4 = org.apache.rat.utils.Log.Level.ERROR;
        reportConfiguration1.logFamilyCollisions(level4);
        java.lang.String str6 = reportConfiguration1.getCopyrightMessage();
        java.lang.String str7 = reportConfiguration1.getCopyrightMessage();
        org.apache.rat.utils.Log log8 = null;
        org.apache.rat.ReportConfiguration reportConfiguration9 = new org.apache.rat.ReportConfiguration(log8);
        java.io.FilenameFilter filenameFilter10 = reportConfiguration9.getInputFileFilter();
        org.apache.rat.license.LicenseSetFactory.LicenseFilter licenseFilter11 = org.apache.rat.license.LicenseSetFactory.LicenseFilter.all;
        java.util.SortedSet<org.apache.rat.license.ILicense> iLicenseSet12 = reportConfiguration9.getLicenses(licenseFilter11);
        org.apache.rat.config.AddLicenseHeaders addLicenseHeaders13 = org.apache.rat.config.AddLicenseHeaders.FALSE;
        reportConfiguration9.setAddLicenseHeaders(addLicenseHeaders13);
        org.apache.rat.utils.Log log15 = null;
        org.apache.rat.ReportConfiguration reportConfiguration16 = new org.apache.rat.ReportConfiguration(log15);
        org.apache.rat.report.claim.ClaimStatistic claimStatistic17 = org.apache.rat.Reporter.report(reportConfiguration16);
        org.apache.rat.license.LicenseSetFactory.LicenseFilter licenseFilter18 = org.apache.rat.license.LicenseSetFactory.LicenseFilter.all;
        org.apache.rat.Reporter.listLicenses(reportConfiguration16, licenseFilter18);
        org.apache.rat.Reporter.listLicenses(reportConfiguration9, licenseFilter18);
        reportConfiguration9.addApprovedLicenseCategory("W3C Software Copyright");
        org.apache.rat.report.IReportable iReportable23 = null;
        reportConfiguration9.setReportable(iReportable23);
        org.apache.rat.utils.Log log25 = null;
        org.apache.rat.ReportConfiguration reportConfiguration26 = new org.apache.rat.ReportConfiguration(log25);
        org.apache.rat.license.ILicenseFamily[] iLicenseFamilyArray27 = new org.apache.rat.license.ILicenseFamily[] {};
        java.util.ArrayList<org.apache.rat.license.ILicenseFamily> iLicenseFamilyList28 = new java.util.ArrayList<org.apache.rat.license.ILicenseFamily>();
        boolean boolean29 = java.util.Collections.addAll((java.util.Collection<org.apache.rat.license.ILicenseFamily>) iLicenseFamilyList28, iLicenseFamilyArray27);
        reportConfiguration26.addFamilies((java.util.Collection<org.apache.rat.license.ILicenseFamily>) iLicenseFamilyList28);
        org.apache.rat.analysis.license.FullTextMatchingLicense fullTextMatchingLicense31 = new org.apache.rat.analysis.license.FullTextMatchingLicense();
        fullTextMatchingLicense31.setLicenseFamilyName("hi!");
        java.lang.String str34 = fullTextMatchingLicense31.getLicenseFamilyCategory();
        java.lang.String str35 = fullTextMatchingLicense31.getLicenseFamilyName();
        fullTextMatchingLicense31.setLicenseFamilyName("SpdxBuilder: null");
        fullTextMatchingLicense31.setLicenseFamilyCategory("TMF");
        org.apache.rat.license.ILicenseFamily iLicenseFamily40 = fullTextMatchingLicense31.getLicenseFamily();
        reportConfiguration26.addFamily(iLicenseFamily40);
        reportConfiguration9.addApprovedLicenseCategory(iLicenseFamily40);
        org.apache.rat.license.ILicenseFamily[] iLicenseFamilyArray43 = new org.apache.rat.license.ILicenseFamily[] {};
        java.util.ArrayList<org.apache.rat.license.ILicenseFamily> iLicenseFamilyList44 = new java.util.ArrayList<org.apache.rat.license.ILicenseFamily>();
        boolean boolean45 = java.util.Collections.addAll((java.util.Collection<org.apache.rat.license.ILicenseFamily>) iLicenseFamilyList44, iLicenseFamilyArray43);
        org.apache.rat.policy.DefaultPolicy defaultPolicy46 = new org.apache.rat.policy.DefaultPolicy((java.util.Collection<org.apache.rat.license.ILicenseFamily>) iLicenseFamilyList44);
        org.apache.rat.api.Document document47 = null;
        defaultPolicy46.analyse(document47);
        java.util.SortedSet<org.apache.rat.license.ILicenseFamily> iLicenseFamilySet49 = defaultPolicy46.getApprovedLicenseNames();
        org.apache.rat.license.ILicenseFamily iLicenseFamily50 = org.apache.rat.license.LicenseFamilySetFactory.search(iLicenseFamily40, iLicenseFamilySet49);
        java.lang.String str51 = iLicenseFamily40.getFamilyCategory();
        reportConfiguration1.addFamily(iLicenseFamily40);
        org.junit.Assert.assertTrue("'" + level4 + "' != '" + org.apache.rat.utils.Log.Level.ERROR + "'", level4.equals(org.apache.rat.utils.Log.Level.ERROR));
        org.junit.Assert.assertNull(str6);
        org.junit.Assert.assertNull(str7);
        org.junit.Assert.assertNull(filenameFilter10);
        org.junit.Assert.assertTrue("'" + licenseFilter11 + "' != '" + org.apache.rat.license.LicenseSetFactory.LicenseFilter.all + "'", licenseFilter11.equals(org.apache.rat.license.LicenseSetFactory.LicenseFilter.all));
        org.junit.Assert.assertNotNull(iLicenseSet12);
        org.junit.Assert.assertTrue("'" + addLicenseHeaders13 + "' != '" + org.apache.rat.config.AddLicenseHeaders.FALSE + "'", addLicenseHeaders13.equals(org.apache.rat.config.AddLicenseHeaders.FALSE));
        org.junit.Assert.assertNull(claimStatistic17);
        org.junit.Assert.assertTrue("'" + licenseFilter18 + "' != '" + org.apache.rat.license.LicenseSetFactory.LicenseFilter.all + "'", licenseFilter18.equals(org.apache.rat.license.LicenseSetFactory.LicenseFilter.all));
        org.junit.Assert.assertNotNull(iLicenseFamilyArray27);
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + false + "'", boolean29 == false);
        org.junit.Assert.assertNull(str34);
        org.junit.Assert.assertEquals("'" + str35 + "' != '" + "hi!" + "'", str35, "hi!");
        org.junit.Assert.assertNotNull(iLicenseFamily40);
        org.junit.Assert.assertNotNull(iLicenseFamilyArray43);
        org.junit.Assert.assertTrue("'" + boolean45 + "' != '" + false + "'", boolean45 == false);
        org.junit.Assert.assertNotNull(iLicenseFamilySet49);
        org.junit.Assert.assertNull(iLicenseFamily50);
        org.junit.Assert.assertEquals("'" + str51 + "' != '" + "TMF  " + "'", str51, "TMF  ");
    }

    @Test
    public void test13737() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest27.test13737");
        org.apache.rat.utils.ReportingSet<java.lang.String> strSet0 = new org.apache.rat.utils.ReportingSet<java.lang.String>();
        strSet0.clear();
        boolean boolean2 = strSet0.isEmpty();
        org.apache.rat.document.IDocumentAnalyser[] iDocumentAnalyserArray3 = new org.apache.rat.document.IDocumentAnalyser[] {};
        org.apache.rat.document.impl.util.DocumentAnalyserMultiplexer documentAnalyserMultiplexer4 = new org.apache.rat.document.impl.util.DocumentAnalyserMultiplexer(iDocumentAnalyserArray3);
        org.apache.rat.document.impl.util.DocumentAnalyserMultiplexer documentAnalyserMultiplexer5 = new org.apache.rat.document.impl.util.DocumentAnalyserMultiplexer(iDocumentAnalyserArray3);
        org.apache.rat.document.IDocumentAnalyser[] iDocumentAnalyserArray6 = strSet0.toArray(iDocumentAnalyserArray3);
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + true + "'", boolean2 == true);
        org.junit.Assert.assertNotNull(iDocumentAnalyserArray3);
        org.junit.Assert.assertNotNull(iDocumentAnalyserArray6);
    }

    @Test
    public void test13738() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest27.test13738");
        java.lang.String[] strArray5 = new java.lang.String[] { "http://org/apache/rat/meta-data#LicenseFamilyCategory", "Datum [ name ='http://org/apache/rat/meta-data#LicenseFamilyCategory',value ='GPL1  ']", "MANIFEST.MF", "AllBuilder:", "The MIT License" };
        org.apache.rat.utils.ReportingSet<java.lang.String> strSet6 = new org.apache.rat.utils.ReportingSet<java.lang.String>();
        boolean boolean7 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strSet6, strArray5);
        boolean boolean9 = strSet6.addIfNotPresent("http://org/apache/rat/meta-data#LicenseFamilyName");
        boolean boolean11 = strSet6.addIfNotPresent("ef7a8b13-64c3-4510-bb0c-dbf208e1e73f");
        java.util.stream.Stream<java.lang.String> strStream12 = strSet6.stream();
        org.apache.rat.utils.DefaultLog defaultLog13 = org.apache.rat.utils.DefaultLog.INSTANCE;
        org.apache.rat.utils.Log log14 = null;
        org.apache.rat.ReportConfiguration reportConfiguration15 = new org.apache.rat.ReportConfiguration(log14);
        reportConfiguration15.addApprovedLicenseCategory(".cvsignore");
        org.apache.rat.utils.Log.Level level18 = org.apache.rat.utils.Log.Level.ERROR;
        reportConfiguration15.logFamilyCollisions(level18);
        defaultLog13.setLevel(level18);
        org.apache.rat.utils.ReportingSet<java.lang.String> strSet21 = strSet6.setLogLevel(level18);
        org.apache.rat.utils.ReportingSet<java.lang.String> strSet23 = strSet6.headSet("d4148d3a-edbc-4672-b347-0fa619553f91");
        strSet23.clear();
        java.util.function.Function<java.lang.String, java.lang.String> strFunction25 = null;
        org.apache.rat.utils.ReportingSet<java.lang.String> strSet26 = strSet23.setMsgFormat(strFunction25);
        org.junit.Assert.assertNotNull(strArray5);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + true + "'", boolean7 == true);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + true + "'", boolean9 == true);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + true + "'", boolean11 == true);
        org.junit.Assert.assertNotNull(strStream12);
        org.junit.Assert.assertNotNull(defaultLog13);
        org.junit.Assert.assertTrue("'" + level18 + "' != '" + org.apache.rat.utils.Log.Level.ERROR + "'", level18.equals(org.apache.rat.utils.Log.Level.ERROR));
        org.junit.Assert.assertNotNull(strSet21);
        org.junit.Assert.assertNotNull(strSet23);
        org.junit.Assert.assertNotNull(strSet26);
    }

    @Test
    public void test13739() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest27.test13739");
        org.apache.rat.utils.Log log0 = null;
        org.apache.rat.ReportConfiguration reportConfiguration1 = new org.apache.rat.ReportConfiguration(log0);
        org.apache.rat.report.claim.ClaimStatistic claimStatistic2 = org.apache.rat.Reporter.report(reportConfiguration1);
        org.apache.rat.utils.Log log3 = null;
        org.apache.rat.ReportConfiguration reportConfiguration4 = new org.apache.rat.ReportConfiguration(log3);
        org.apache.rat.report.claim.ClaimStatistic claimStatistic5 = org.apache.rat.Reporter.report(reportConfiguration4);
        org.apache.rat.utils.ReportingSet.Options options6 = org.apache.rat.utils.ReportingSet.Options.OVERWRITE;
        reportConfiguration4.licenseDuplicateOption(options6);
        reportConfiguration1.familyDuplicateOption(options6);
        boolean boolean9 = reportConfiguration1.isStyleReport();
        org.apache.rat.license.ILicense[] iLicenseArray10 = new org.apache.rat.license.ILicense[] {};
        java.util.TreeSet<org.apache.rat.license.ILicense> iLicenseSet11 = new java.util.TreeSet<org.apache.rat.license.ILicense>();
        boolean boolean12 = java.util.Collections.addAll((java.util.Collection<org.apache.rat.license.ILicense>) iLicenseSet11, iLicenseArray10);
        java.lang.String[] strArray25 = new java.lang.String[] { "GPL2 ", "GPL1 ", "notice", "http://org/apache/rat/meta-data#LicenseFamilyName", "notice", "GPL2 ", "http://org/apache/rat/meta-data#LicenseFamilyName", "", "GPL2 ", "", "GPL1 ", "hi!" };
        java.util.ArrayList<java.lang.String> strList26 = new java.util.ArrayList<java.lang.String>();
        boolean boolean27 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strList26, strArray25);
        org.apache.rat.license.LicenseSetFactory licenseSetFactory28 = new org.apache.rat.license.LicenseSetFactory((java.util.SortedSet<org.apache.rat.license.ILicense>) iLicenseSet11, (java.util.Collection<java.lang.String>) strList26);
        java.io.FilenameFilter filenameFilter29 = org.apache.rat.Report.parseExclusions((java.util.List<java.lang.String>) strList26);
        java.io.FilenameFilter filenameFilter30 = org.apache.rat.Report.parseExclusions((java.util.List<java.lang.String>) strList26);
        reportConfiguration1.addApprovedLicenseCategories((java.util.Collection<java.lang.String>) strList26);
        reportConfiguration1.setCopyrightMessage("9ec38a8d-0e0f-4c31-8d12-d6138412a101");
        org.apache.rat.utils.Log log34 = null;
        org.apache.rat.ReportConfiguration reportConfiguration35 = new org.apache.rat.ReportConfiguration(log34);
        org.apache.rat.report.claim.ClaimStatistic claimStatistic36 = org.apache.rat.Reporter.report(reportConfiguration35);
        reportConfiguration35.addApprovedLicenseCategory("Copyright Builder: s:null e:null o:null");
        java.util.SortedSet<java.lang.String> strSet39 = reportConfiguration35.getApprovedLicenseCategories();
        boolean boolean40 = reportConfiguration35.isAddingLicensesForced();
        org.apache.rat.utils.Log log41 = null;
        org.apache.rat.ReportConfiguration reportConfiguration42 = new org.apache.rat.ReportConfiguration(log41);
        java.io.FilenameFilter filenameFilter43 = reportConfiguration42.getInputFileFilter();
        org.apache.rat.license.LicenseSetFactory.LicenseFilter licenseFilter44 = org.apache.rat.license.LicenseSetFactory.LicenseFilter.all;
        java.util.SortedSet<org.apache.rat.license.ILicense> iLicenseSet45 = reportConfiguration42.getLicenses(licenseFilter44);
        org.apache.rat.config.AddLicenseHeaders addLicenseHeaders46 = org.apache.rat.config.AddLicenseHeaders.FALSE;
        reportConfiguration42.setAddLicenseHeaders(addLicenseHeaders46);
        org.apache.rat.utils.Log log48 = null;
        org.apache.rat.ReportConfiguration reportConfiguration49 = new org.apache.rat.ReportConfiguration(log48);
        org.apache.rat.report.claim.ClaimStatistic claimStatistic50 = org.apache.rat.Reporter.report(reportConfiguration49);
        org.apache.rat.license.LicenseSetFactory.LicenseFilter licenseFilter51 = org.apache.rat.license.LicenseSetFactory.LicenseFilter.all;
        org.apache.rat.Reporter.listLicenses(reportConfiguration49, licenseFilter51);
        org.apache.rat.Reporter.listLicenses(reportConfiguration42, licenseFilter51);
        org.apache.rat.config.AddLicenseHeaders addLicenseHeaders54 = org.apache.rat.config.AddLicenseHeaders.FORCED;
        reportConfiguration42.setAddLicenseHeaders(addLicenseHeaders54);
        reportConfiguration35.setAddLicenseHeaders(addLicenseHeaders54);
        reportConfiguration1.setAddLicenseHeaders(addLicenseHeaders54);
        org.apache.rat.configuration.Format format60 = org.apache.rat.configuration.Format.XML;
        org.apache.rat.configuration.LicenseReader licenseReader61 = format60.licenseReader();
        java.util.SortedSet<org.apache.rat.license.ILicense> iLicenseSet62 = licenseReader61.readLicenses();
        java.lang.String[] strArray68 = new java.lang.String[] { "http://org/apache/rat/meta-data#LicenseFamilyCategory", "Datum [ name ='http://org/apache/rat/meta-data#LicenseFamilyCategory',value ='GPL1  ']", "MANIFEST.MF", "AllBuilder:", "The MIT License" };
        org.apache.rat.utils.ReportingSet<java.lang.String> strSet69 = new org.apache.rat.utils.ReportingSet<java.lang.String>();
        boolean boolean70 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strSet69, strArray68);
        boolean boolean72 = strSet69.addIfNotPresent("http://org/apache/rat/meta-data#LicenseFamilyName");
        boolean boolean74 = strSet69.addIfNotPresent("ef7a8b13-64c3-4510-bb0c-dbf208e1e73f");
        java.util.function.Function<java.lang.String, java.lang.String> strFunction75 = null;
        org.apache.rat.utils.ReportingSet<java.lang.String> strSet76 = strSet69.setMsgFormat(strFunction75);
        boolean boolean77 = strSet69.isEmpty();
        org.apache.rat.license.LicenseSetFactory licenseSetFactory78 = new org.apache.rat.license.LicenseSetFactory(iLicenseSet62, (java.util.Collection<java.lang.String>) strSet69);
        org.apache.rat.utils.ReportingSet<org.apache.rat.license.ILicense> iLicenseSet79 = new org.apache.rat.utils.ReportingSet<org.apache.rat.license.ILicense>(iLicenseSet62);
        org.apache.rat.license.ILicense iLicense80 = org.apache.rat.license.LicenseSetFactory.search("6fbe8280-d578-4ea3-a1a8-34d68e85abc2", iLicenseSet62);
        org.apache.rat.license.ILicense iLicense81 = org.apache.rat.license.LicenseSetFactory.search("c6108888-bbb8-4ac0-8e5f-6bc60ab81eda", iLicenseSet62);
        reportConfiguration1.addLicensesIfNotPresent((java.util.Collection<org.apache.rat.license.ILicense>) iLicenseSet62);
        org.apache.rat.license.ILicenseFamilyBuilder iLicenseFamilyBuilder83 = new org.apache.rat.license.ILicenseFamilyBuilder();
        java.lang.String str84 = iLicenseFamilyBuilder83.getCategory();
        org.apache.rat.license.ILicenseFamily.Builder builder86 = iLicenseFamilyBuilder83.setLicenseFamilyCategory("AL   ");
        org.apache.rat.license.ILicenseFamily.Builder builder88 = iLicenseFamilyBuilder83.setLicenseFamilyCategory("MIT  ");
        org.apache.rat.license.ILicenseFamily.Builder builder90 = iLicenseFamilyBuilder83.setLicenseFamilyName("4a00cf7d-fe76-423e-917e-b03bbae6b8a5");
        org.apache.rat.license.ILicenseFamily.Builder builder92 = builder90.setLicenseFamilyName("stand");
        org.apache.rat.license.ILicenseFamily.Builder builder94 = builder92.setLicenseFamilyCategory("7ede9310-4e14-4f7b-bfcb-c0ed2643694c");
        reportConfiguration1.addFamily(builder94);
        reportConfiguration1.setCopyrightMessage("6d0dc81b-a121-4b6e-985f-5f9a42eb3c51");
        org.apache.commons.io.function.IOSupplier<java.io.InputStream> inputStreamIOSupplier98 = reportConfiguration1.getStyleSheet();
        org.junit.Assert.assertNull(claimStatistic2);
        org.junit.Assert.assertNull(claimStatistic5);
        org.junit.Assert.assertTrue("'" + options6 + "' != '" + org.apache.rat.utils.ReportingSet.Options.OVERWRITE + "'", options6.equals(org.apache.rat.utils.ReportingSet.Options.OVERWRITE));
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + true + "'", boolean9 == true);
        org.junit.Assert.assertNotNull(iLicenseArray10);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertNotNull(strArray25);
        org.junit.Assert.assertTrue("'" + boolean27 + "' != '" + true + "'", boolean27 == true);
        org.junit.Assert.assertNotNull(filenameFilter29);
        org.junit.Assert.assertNotNull(filenameFilter30);
        org.junit.Assert.assertNull(claimStatistic36);
        org.junit.Assert.assertNotNull(strSet39);
        org.junit.Assert.assertTrue("'" + boolean40 + "' != '" + false + "'", boolean40 == false);
        org.junit.Assert.assertNull(filenameFilter43);
        org.junit.Assert.assertTrue("'" + licenseFilter44 + "' != '" + org.apache.rat.license.LicenseSetFactory.LicenseFilter.all + "'", licenseFilter44.equals(org.apache.rat.license.LicenseSetFactory.LicenseFilter.all));
        org.junit.Assert.assertNotNull(iLicenseSet45);
        org.junit.Assert.assertTrue("'" + addLicenseHeaders46 + "' != '" + org.apache.rat.config.AddLicenseHeaders.FALSE + "'", addLicenseHeaders46.equals(org.apache.rat.config.AddLicenseHeaders.FALSE));
        org.junit.Assert.assertNull(claimStatistic50);
        org.junit.Assert.assertTrue("'" + licenseFilter51 + "' != '" + org.apache.rat.license.LicenseSetFactory.LicenseFilter.all + "'", licenseFilter51.equals(org.apache.rat.license.LicenseSetFactory.LicenseFilter.all));
        org.junit.Assert.assertTrue("'" + addLicenseHeaders54 + "' != '" + org.apache.rat.config.AddLicenseHeaders.FORCED + "'", addLicenseHeaders54.equals(org.apache.rat.config.AddLicenseHeaders.FORCED));
        org.junit.Assert.assertTrue("'" + format60 + "' != '" + org.apache.rat.configuration.Format.XML + "'", format60.equals(org.apache.rat.configuration.Format.XML));
        org.junit.Assert.assertNotNull(licenseReader61);
        org.junit.Assert.assertNotNull(iLicenseSet62);
        org.junit.Assert.assertNotNull(strArray68);
        org.junit.Assert.assertTrue("'" + boolean70 + "' != '" + true + "'", boolean70 == true);
        org.junit.Assert.assertTrue("'" + boolean72 + "' != '" + true + "'", boolean72 == true);
        org.junit.Assert.assertTrue("'" + boolean74 + "' != '" + true + "'", boolean74 == true);
        org.junit.Assert.assertNotNull(strSet76);
        org.junit.Assert.assertTrue("'" + boolean77 + "' != '" + false + "'", boolean77 == false);
        org.junit.Assert.assertNull(iLicense80);
        org.junit.Assert.assertNull(iLicense81);
        org.junit.Assert.assertNull(str84);
        org.junit.Assert.assertNotNull(builder86);
        org.junit.Assert.assertNotNull(builder88);
        org.junit.Assert.assertNotNull(builder90);
        org.junit.Assert.assertNotNull(builder92);
        org.junit.Assert.assertNotNull(builder94);
        org.junit.Assert.assertNull(inputStreamIOSupplier98);
    }

    @Test
    public void test13740() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest27.test13740");
        org.apache.rat.utils.Log log0 = null;
        org.apache.rat.ReportConfiguration reportConfiguration1 = new org.apache.rat.ReportConfiguration(log0);
        org.apache.rat.report.claim.ClaimStatistic claimStatistic2 = org.apache.rat.Reporter.report(reportConfiguration1);
        org.apache.rat.utils.Log log3 = null;
        org.apache.rat.ReportConfiguration reportConfiguration4 = new org.apache.rat.ReportConfiguration(log3);
        java.io.FilenameFilter filenameFilter5 = reportConfiguration4.getInputFileFilter();
        org.apache.rat.config.AddLicenseHeaders addLicenseHeaders6 = org.apache.rat.config.AddLicenseHeaders.TRUE;
        reportConfiguration4.setAddLicenseHeaders(addLicenseHeaders6);
        reportConfiguration1.setAddLicenseHeaders(addLicenseHeaders6);
        org.apache.rat.license.ILicenseFamilyBuilder iLicenseFamilyBuilder9 = new org.apache.rat.license.ILicenseFamilyBuilder();
        org.apache.rat.license.ILicenseFamily.Builder builder11 = iLicenseFamilyBuilder9.setLicenseFamilyCategory("Modified BSD License");
        org.apache.rat.license.ILicenseFamily.Builder builder13 = iLicenseFamilyBuilder9.setLicenseFamilyName("AllBuilder:\nCopyright Builder: s:null e:.cvsignore o:3c840dc2-bef0-42b5-b26c-35a568d53a24");
        reportConfiguration1.addFamily((org.apache.rat.license.ILicenseFamily.Builder) iLicenseFamilyBuilder9);
        reportConfiguration1.removeApprovedLicenseCategory("Datum");
        java.lang.String str17 = reportConfiguration1.getCopyrightMessage();
        reportConfiguration1.setCopyrightMessage("ac588fb8-47ff-4c8a-b192-4b692ac6762c");
        reportConfiguration1.setCopyrightMessage("a7913c10-8476-4fa4-ad98-2c9ab822f086");
        org.junit.Assert.assertNull(claimStatistic2);
        org.junit.Assert.assertNull(filenameFilter5);
        org.junit.Assert.assertTrue("'" + addLicenseHeaders6 + "' != '" + org.apache.rat.config.AddLicenseHeaders.TRUE + "'", addLicenseHeaders6.equals(org.apache.rat.config.AddLicenseHeaders.TRUE));
        org.junit.Assert.assertNotNull(builder11);
        org.junit.Assert.assertNotNull(builder13);
        org.junit.Assert.assertNull(str17);
    }

    @Test
    public void test13741() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest27.test13741");
        org.apache.rat.utils.DefaultLog defaultLog1 = org.apache.rat.utils.DefaultLog.INSTANCE;
        org.apache.rat.license.ILicense.Builder builder2 = org.apache.rat.license.ILicense.builder();
        org.apache.rat.license.ILicense.Builder builder4 = builder2.setLicenseFamilyCategory("");
        org.apache.rat.analysis.matchers.CopyrightMatcher copyrightMatcher8 = new org.apache.rat.analysis.matchers.CopyrightMatcher("", "GPL1 ", "hi!");
        org.apache.rat.analysis.IHeaderMatcher.State state9 = copyrightMatcher8.finalizeState();
        org.apache.rat.license.ILicense.Builder builder10 = builder4.setMatcher((org.apache.rat.analysis.IHeaderMatcher) copyrightMatcher8);
        org.apache.rat.license.ILicense.Builder builder12 = builder10.setLicenseFamilyCategory("");
        defaultLog1.error((java.lang.Object) builder12);
        org.apache.rat.analysis.matchers.CopyrightMatcher copyrightMatcher17 = new org.apache.rat.analysis.matchers.CopyrightMatcher("", "GPL1 ", "hi!");
        copyrightMatcher17.reset();
        org.apache.rat.license.ILicense.Builder builder19 = builder12.setMatcher((org.apache.rat.analysis.IHeaderMatcher) copyrightMatcher17);
        org.apache.rat.analysis.matchers.NotMatcher notMatcher20 = new org.apache.rat.analysis.matchers.NotMatcher("AnyBuilder:\nAllBuilder:", (org.apache.rat.analysis.IHeaderMatcher) copyrightMatcher17);
        org.apache.rat.analysis.IHeaderMatcher.State state22 = notMatcher20.matches("TextBuilder: true");
        org.apache.rat.analysis.IHeaderMatcher.State state23 = notMatcher20.finalizeState();
        notMatcher20.reset();
        org.junit.Assert.assertNotNull(defaultLog1);
        org.junit.Assert.assertNotNull(builder2);
        org.junit.Assert.assertNotNull(builder4);
        org.junit.Assert.assertTrue("'" + state9 + "' != '" + org.apache.rat.analysis.IHeaderMatcher.State.f + "'", state9.equals(org.apache.rat.analysis.IHeaderMatcher.State.f));
        org.junit.Assert.assertNotNull(builder10);
        org.junit.Assert.assertNotNull(builder12);
        org.junit.Assert.assertNotNull(builder19);
        org.junit.Assert.assertTrue("'" + state22 + "' != '" + org.apache.rat.analysis.IHeaderMatcher.State.i + "'", state22.equals(org.apache.rat.analysis.IHeaderMatcher.State.i));
        org.junit.Assert.assertTrue("'" + state23 + "' != '" + org.apache.rat.analysis.IHeaderMatcher.State.t + "'", state23.equals(org.apache.rat.analysis.IHeaderMatcher.State.t));
    }

    @Test
    public void test13742() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest27.test13742");
        org.apache.rat.configuration.builders.RegexBuilder regexBuilder0 = new org.apache.rat.configuration.builders.RegexBuilder();
        java.lang.String str1 = regexBuilder0.toString();
        java.lang.String str2 = regexBuilder0.toString();
        org.apache.rat.configuration.builders.RegexBuilder regexBuilder4 = regexBuilder0.setExpr("89662180-a89f-497b-9301-227d494d2bae");
        org.apache.rat.configuration.builders.RegexBuilder regexBuilder6 = regexBuilder4.setExpr("AL   ");
        org.apache.rat.analysis.IHeaderMatcher iHeaderMatcher7 = regexBuilder4.build();
        org.apache.rat.configuration.builders.RegexBuilder regexBuilder9 = regexBuilder4.setExpr("af506abb-6673-42e6-9700-cec7e4b28eba");
        org.junit.Assert.assertEquals("'" + str1 + "' != '" + "RegexBuilder: null" + "'", str1, "RegexBuilder: null");
        org.junit.Assert.assertEquals("'" + str2 + "' != '" + "RegexBuilder: null" + "'", str2, "RegexBuilder: null");
        org.junit.Assert.assertNotNull(regexBuilder4);
        org.junit.Assert.assertNotNull(regexBuilder6);
        org.junit.Assert.assertNotNull(iHeaderMatcher7);
        org.junit.Assert.assertNotNull(regexBuilder9);
    }

    @Test
    public void test13743() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest27.test13743");
        org.apache.rat.configuration.Format format0 = org.apache.rat.configuration.Format.XML;
        org.apache.rat.configuration.LicenseReader licenseReader1 = format0.licenseReader();
        java.util.SortedSet<org.apache.rat.license.ILicense> iLicenseSet2 = licenseReader1.readLicenses();
        java.lang.String[] strArray8 = new java.lang.String[] { "http://org/apache/rat/meta-data#LicenseFamilyCategory", "Datum [ name ='http://org/apache/rat/meta-data#LicenseFamilyCategory',value ='GPL1  ']", "MANIFEST.MF", "AllBuilder:", "The MIT License" };
        org.apache.rat.utils.ReportingSet<java.lang.String> strSet9 = new org.apache.rat.utils.ReportingSet<java.lang.String>();
        boolean boolean10 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strSet9, strArray8);
        boolean boolean12 = strSet9.addIfNotPresent("http://org/apache/rat/meta-data#LicenseFamilyName");
        boolean boolean14 = strSet9.addIfNotPresent("ef7a8b13-64c3-4510-bb0c-dbf208e1e73f");
        java.util.function.Function<java.lang.String, java.lang.String> strFunction15 = null;
        org.apache.rat.utils.ReportingSet<java.lang.String> strSet16 = strSet9.setMsgFormat(strFunction15);
        boolean boolean17 = strSet9.isEmpty();
        org.apache.rat.license.LicenseSetFactory licenseSetFactory18 = new org.apache.rat.license.LicenseSetFactory(iLicenseSet2, (java.util.Collection<java.lang.String>) strSet9);
        org.apache.rat.api.MetaData.Datum datum19 = org.apache.rat.api.MetaData.RAT_LICENSE_FAMILY_NAME_DATUM_GPL_VERSION_1;
        java.lang.String str20 = datum19.toString();
        boolean boolean21 = strSet9.equals((java.lang.Object) datum19);
        boolean boolean23 = strSet9.addIfNotPresent("46eea23e-d320-45bc-aa7f-844d2e1597ce");
        org.apache.rat.utils.ReportingSet<java.lang.String> strSet25 = strSet9.headSet("notice");
        java.util.Spliterator<java.lang.String> strSpliterator26 = strSet25.spliterator();
        java.util.Comparator<? super java.lang.String> wildcardComparator27 = strSet25.comparator();
        strSet25.clear();
        org.junit.Assert.assertTrue("'" + format0 + "' != '" + org.apache.rat.configuration.Format.XML + "'", format0.equals(org.apache.rat.configuration.Format.XML));
        org.junit.Assert.assertNotNull(licenseReader1);
        org.junit.Assert.assertNotNull(iLicenseSet2);
        org.junit.Assert.assertNotNull(strArray8);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + true + "'", boolean10 == true);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + true + "'", boolean12 == true);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + true + "'", boolean14 == true);
        org.junit.Assert.assertNotNull(strSet16);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + false + "'", boolean17 == false);
        org.junit.Assert.assertNotNull(datum19);
        org.junit.Assert.assertEquals("'" + str20 + "' != '" + "Datum [ name ='http://org/apache/rat/meta-data#LicenseFamilyName',value ='GNU General Public License, version 1 ']" + "'", str20, "Datum [ name ='http://org/apache/rat/meta-data#LicenseFamilyName',value ='GNU General Public License, version 1 ']");
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + false + "'", boolean21 == false);
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + true + "'", boolean23 == true);
        org.junit.Assert.assertNotNull(strSet25);
        org.junit.Assert.assertNotNull(strSpliterator26);
        org.junit.Assert.assertNull(wildcardComparator27);
    }

    @Test
    public void test13744() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest27.test13744");
        org.apache.rat.configuration.builders.TextBuilder textBuilder0 = org.apache.rat.analysis.IHeaderMatcher.Builder.text();
        org.apache.rat.configuration.builders.TextBuilder textBuilder2 = textBuilder0.setText("");
        java.lang.String str3 = textBuilder2.toString();
        java.lang.String str4 = textBuilder2.toString();
        org.apache.rat.configuration.builders.TextBuilder textBuilder6 = textBuilder2.setText("8f0ee536-38ae-476a-a728-de95e24c13c3");
        boolean boolean7 = textBuilder6.hasId();
        boolean boolean8 = textBuilder6.hasId();
        org.apache.rat.configuration.builders.TextCaptureBuilder textCaptureBuilder10 = textBuilder6.setText("");
        org.apache.rat.configuration.builders.TextBuilder textBuilder12 = textBuilder6.setText("8ECB8CCE-06E4-400F-84D9-AD1CF6289FDA");
        org.junit.Assert.assertNotNull(textBuilder0);
        org.junit.Assert.assertNotNull(textBuilder2);
        org.junit.Assert.assertEquals("'" + str3 + "' != '" + "TextBuilder: " + "'", str3, "TextBuilder: ");
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "TextBuilder: " + "'", str4, "TextBuilder: ");
        org.junit.Assert.assertNotNull(textBuilder6);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertNotNull(textCaptureBuilder10);
        org.junit.Assert.assertNotNull(textBuilder12);
    }

    @Test
    public void test13745() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest27.test13745");
        org.apache.rat.api.MetaData metaData0 = new org.apache.rat.api.MetaData();
        java.lang.String str2 = metaData0.value("COMMON DEVELOPMENT AND DISTRIBUTION LICENSE Version 1.0");
        java.lang.String str4 = metaData0.value("W3C Document Copyright");
        boolean boolean6 = metaData0.clear("hi!");
        java.lang.String str8 = metaData0.value("true");
        org.apache.rat.api.MetaData.Datum datum10 = metaData0.get("GNU General Public License, version 1");
        org.apache.rat.api.MetaData.Datum datum11 = org.apache.rat.api.MetaData.RAT_LICENSE_FAMILY_CATEGORY_DATUM_MIT;
        java.lang.String str12 = datum11.getName();
        metaData0.set(datum11);
        org.apache.rat.api.MetaData.Datum datum15 = metaData0.get("8f0ee536-38ae-476a-a728-de95e24c13c3");
        boolean boolean17 = metaData0.clear("A80AAD6C-340E-4343-88DF-EFE4FDBF9C47");
        org.junit.Assert.assertNull(str2);
        org.junit.Assert.assertNull(str4);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertNull(str8);
        org.junit.Assert.assertNull(datum10);
        org.junit.Assert.assertNotNull(datum11);
        org.junit.Assert.assertEquals("'" + str12 + "' != '" + "http://org/apache/rat/meta-data#LicenseFamilyCategory" + "'", str12, "http://org/apache/rat/meta-data#LicenseFamilyCategory");
        org.junit.Assert.assertNull(datum15);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + false + "'", boolean17 == false);
    }

    @Test
    public void test13746() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest27.test13746");
        org.apache.rat.configuration.builders.NotBuilder notBuilder0 = new org.apache.rat.configuration.builders.NotBuilder();
        java.lang.String str1 = notBuilder0.toString();
        org.apache.rat.configuration.builders.SpdxBuilder spdxBuilder2 = org.apache.rat.analysis.IHeaderMatcher.Builder.spdx();
        java.lang.String str3 = spdxBuilder2.toString();
        org.apache.rat.configuration.builders.SpdxBuilder spdxBuilder5 = spdxBuilder2.setName("ef7a8b13-64c3-4510-bb0c-dbf208e1e73f");
        org.apache.rat.analysis.IHeaderMatcher iHeaderMatcher6 = spdxBuilder2.build();
        org.apache.rat.analysis.IHeaderMatcher iHeaderMatcher7 = spdxBuilder2.build();
        org.apache.rat.analysis.IHeaderMatcher iHeaderMatcher8 = spdxBuilder2.build();
        org.apache.rat.analysis.IHeaderMatcher iHeaderMatcher9 = spdxBuilder2.build();
        org.apache.rat.analysis.IHeaderMatcher iHeaderMatcher10 = spdxBuilder2.build();
        org.apache.rat.configuration.builders.AbstractBuilder abstractBuilder11 = notBuilder0.add((org.apache.rat.analysis.IHeaderMatcher.Builder) spdxBuilder2);
        org.apache.rat.configuration.builders.AnyBuilder anyBuilder12 = org.apache.rat.analysis.IHeaderMatcher.Builder.any();
        java.lang.String str13 = anyBuilder12.toString();
        java.util.List<org.apache.rat.analysis.IHeaderMatcher> iHeaderMatcherList14 = anyBuilder12.getChildren();
        org.apache.rat.analysis.IHeaderMatcher iHeaderMatcher15 = anyBuilder12.build();
        org.apache.rat.analysis.IHeaderMatcher iHeaderMatcher16 = anyBuilder12.build();
        java.util.List<org.apache.rat.analysis.IHeaderMatcher> iHeaderMatcherList17 = anyBuilder12.getChildren();
        org.apache.rat.configuration.builders.NotBuilder notBuilder18 = new org.apache.rat.configuration.builders.NotBuilder();
        java.lang.String str19 = notBuilder18.toString();
        org.apache.rat.configuration.builders.MatcherRefBuilder matcherRefBuilder20 = org.apache.rat.analysis.IHeaderMatcher.Builder.matcherRef();
        boolean boolean21 = matcherRefBuilder20.hasId();
        java.util.Map<java.lang.String, org.apache.rat.analysis.IHeaderMatcher> strMap22 = null;
        org.apache.rat.configuration.builders.MatcherRefBuilder matcherRefBuilder23 = matcherRefBuilder20.setMatchers(strMap22);
        org.apache.rat.configuration.builders.AllBuilder allBuilder24 = new org.apache.rat.configuration.builders.AllBuilder();
        org.apache.rat.configuration.builders.CopyrightBuilder copyrightBuilder25 = org.apache.rat.analysis.IHeaderMatcher.Builder.copyright();
        org.apache.rat.configuration.builders.CopyrightBuilder copyrightBuilder27 = copyrightBuilder25.setStart("OASIS");
        java.lang.String str28 = copyrightBuilder25.toString();
        org.apache.rat.configuration.builders.CopyrightBuilder copyrightBuilder30 = copyrightBuilder25.setStart("223f0aba-15d4-49e9-901e-5740c137aebf");
        org.apache.rat.configuration.builders.MatcherRefBuilder matcherRefBuilder31 = org.apache.rat.analysis.IHeaderMatcher.Builder.matcherRef();
        boolean boolean32 = matcherRefBuilder31.hasId();
        org.apache.rat.configuration.builders.CopyrightBuilder copyrightBuilder33 = org.apache.rat.analysis.IHeaderMatcher.Builder.copyright();
        org.apache.rat.configuration.builders.CopyrightBuilder copyrightBuilder35 = copyrightBuilder33.setStart("OASIS");
        java.lang.String str36 = copyrightBuilder33.toString();
        org.apache.rat.configuration.builders.CopyrightBuilder copyrightBuilder38 = copyrightBuilder33.setStart("223f0aba-15d4-49e9-901e-5740c137aebf");
        org.apache.rat.configuration.builders.CopyrightBuilder copyrightBuilder39 = org.apache.rat.analysis.IHeaderMatcher.Builder.copyright();
        org.apache.rat.configuration.builders.CopyrightBuilder copyrightBuilder40 = org.apache.rat.analysis.IHeaderMatcher.Builder.copyright();
        java.lang.String str41 = copyrightBuilder40.toString();
        org.apache.rat.configuration.builders.CopyrightBuilder copyrightBuilder43 = copyrightBuilder40.setEnd(".cvsignore");
        boolean boolean44 = copyrightBuilder40.hasId();
        org.apache.rat.configuration.builders.CopyrightBuilder copyrightBuilder45 = org.apache.rat.analysis.IHeaderMatcher.Builder.copyright();
        java.lang.String str46 = copyrightBuilder45.toString();
        org.apache.rat.configuration.builders.CopyrightBuilder copyrightBuilder48 = copyrightBuilder45.setEnd(".cvsignore");
        boolean boolean49 = copyrightBuilder45.hasId();
        java.lang.String str50 = copyrightBuilder45.toString();
        org.apache.rat.configuration.builders.CopyrightBuilder copyrightBuilder51 = org.apache.rat.analysis.IHeaderMatcher.Builder.copyright();
        org.apache.rat.configuration.builders.CopyrightBuilder copyrightBuilder53 = copyrightBuilder51.setStart("OASIS");
        org.apache.rat.configuration.builders.AnyBuilder anyBuilder54 = org.apache.rat.analysis.IHeaderMatcher.Builder.any();
        org.apache.rat.configuration.builders.MatcherRefBuilder matcherRefBuilder55 = org.apache.rat.analysis.IHeaderMatcher.Builder.matcherRef();
        boolean boolean56 = matcherRefBuilder55.hasId();
        java.util.Map<java.lang.String, org.apache.rat.analysis.IHeaderMatcher> strMap57 = null;
        org.apache.rat.configuration.builders.MatcherRefBuilder matcherRefBuilder58 = matcherRefBuilder55.setMatchers(strMap57);
        org.apache.rat.configuration.builders.CopyrightBuilder copyrightBuilder59 = org.apache.rat.analysis.IHeaderMatcher.Builder.copyright();
        org.apache.rat.configuration.builders.MatcherRefBuilder matcherRefBuilder60 = org.apache.rat.analysis.IHeaderMatcher.Builder.matcherRef();
        boolean boolean61 = matcherRefBuilder60.hasId();
        java.lang.String str62 = matcherRefBuilder60.toString();
        java.util.Map<java.lang.String, org.apache.rat.analysis.IHeaderMatcher> strMap63 = null;
        org.apache.rat.configuration.builders.MatcherRefBuilder matcherRefBuilder64 = matcherRefBuilder60.setMatchers(strMap63);
        org.apache.rat.analysis.IHeaderMatcher.Builder[] builderArray65 = new org.apache.rat.analysis.IHeaderMatcher.Builder[] { matcherRefBuilder20, allBuilder24, copyrightBuilder30, matcherRefBuilder31, copyrightBuilder33, copyrightBuilder39, copyrightBuilder40, copyrightBuilder45, copyrightBuilder51, anyBuilder54, matcherRefBuilder55, copyrightBuilder59, matcherRefBuilder60 };
        java.util.ArrayList<org.apache.rat.analysis.IHeaderMatcher.Builder> builderList66 = new java.util.ArrayList<org.apache.rat.analysis.IHeaderMatcher.Builder>();
        boolean boolean67 = java.util.Collections.addAll((java.util.Collection<org.apache.rat.analysis.IHeaderMatcher.Builder>) builderList66, builderArray65);
        org.apache.rat.configuration.builders.AbstractBuilder abstractBuilder68 = notBuilder18.add((java.util.Collection<org.apache.rat.analysis.IHeaderMatcher.Builder>) builderList66);
        org.apache.rat.configuration.builders.AbstractBuilder abstractBuilder69 = anyBuilder12.add((java.util.Collection<org.apache.rat.analysis.IHeaderMatcher.Builder>) builderList66);
        org.apache.rat.configuration.builders.AbstractBuilder abstractBuilder70 = notBuilder0.add((java.util.Collection<org.apache.rat.analysis.IHeaderMatcher.Builder>) builderList66);
        org.apache.rat.configuration.builders.AllBuilder allBuilder71 = new org.apache.rat.configuration.builders.AllBuilder();
        org.apache.rat.analysis.IHeaderMatcher iHeaderMatcher72 = allBuilder71.build();
        org.apache.rat.configuration.builders.AllBuilder allBuilder73 = new org.apache.rat.configuration.builders.AllBuilder();
        org.apache.rat.analysis.IHeaderMatcher iHeaderMatcher74 = allBuilder73.build();
        org.apache.rat.analysis.IHeaderMatcher iHeaderMatcher75 = allBuilder73.build();
        org.apache.rat.analysis.IHeaderMatcher iHeaderMatcher76 = allBuilder73.build();
        org.apache.rat.configuration.builders.CopyrightBuilder copyrightBuilder77 = org.apache.rat.analysis.IHeaderMatcher.Builder.copyright();
        java.lang.String str78 = copyrightBuilder77.toString();
        org.apache.rat.configuration.builders.CopyrightBuilder copyrightBuilder80 = copyrightBuilder77.setEnd(".cvsignore");
        boolean boolean81 = copyrightBuilder77.hasId();
        org.apache.rat.configuration.builders.CopyrightBuilder copyrightBuilder83 = copyrightBuilder77.setOwner("3c840dc2-bef0-42b5-b26c-35a568d53a24");
        org.apache.rat.configuration.builders.AbstractBuilder abstractBuilder84 = allBuilder73.add((org.apache.rat.analysis.IHeaderMatcher.Builder) copyrightBuilder77);
        org.apache.rat.configuration.builders.CopyrightBuilder copyrightBuilder86 = copyrightBuilder77.setEnd("Copyright Builder: s:021187d7-27c2-4fd9-bc74-8cc00413ee52 e:null o:null");
        org.apache.rat.configuration.builders.AbstractBuilder abstractBuilder87 = allBuilder71.add((org.apache.rat.analysis.IHeaderMatcher.Builder) copyrightBuilder86);
        org.apache.rat.configuration.builders.AbstractBuilder abstractBuilder88 = notBuilder0.add((org.apache.rat.analysis.IHeaderMatcher.Builder) copyrightBuilder86);
        org.apache.rat.configuration.builders.CopyrightBuilder copyrightBuilder90 = copyrightBuilder86.setStart("W3C Document Copyright");
        org.apache.rat.configuration.builders.CopyrightBuilder copyrightBuilder92 = copyrightBuilder86.setOwner("c046dcbf-d265-4196-9792-8807750c62fb");
        org.apache.rat.configuration.builders.CopyrightBuilder copyrightBuilder94 = copyrightBuilder86.setStart("SpdxBuilder: 4fcae176-e574-46ed-b9e4-dea2e2f3b458");
        org.junit.Assert.assertEquals("'" + str1 + "' != '" + "NotBuilder: null" + "'", str1, "NotBuilder: null");
        org.junit.Assert.assertNotNull(spdxBuilder2);
        org.junit.Assert.assertEquals("'" + str3 + "' != '" + "SpdxBuilder: null" + "'", str3, "SpdxBuilder: null");
        org.junit.Assert.assertNotNull(spdxBuilder5);
        org.junit.Assert.assertNotNull(iHeaderMatcher6);
        org.junit.Assert.assertNotNull(iHeaderMatcher7);
        org.junit.Assert.assertNotNull(iHeaderMatcher8);
        org.junit.Assert.assertNotNull(iHeaderMatcher9);
        org.junit.Assert.assertNotNull(iHeaderMatcher10);
        org.junit.Assert.assertNotNull(abstractBuilder11);
        org.junit.Assert.assertNotNull(anyBuilder12);
        org.junit.Assert.assertEquals("'" + str13 + "' != '" + "AnyBuilder:" + "'", str13, "AnyBuilder:");
        org.junit.Assert.assertNotNull(iHeaderMatcherList14);
        org.junit.Assert.assertNotNull(iHeaderMatcher15);
        org.junit.Assert.assertNotNull(iHeaderMatcher16);
        org.junit.Assert.assertNotNull(iHeaderMatcherList17);
        org.junit.Assert.assertEquals("'" + str19 + "' != '" + "NotBuilder: null" + "'", str19, "NotBuilder: null");
        org.junit.Assert.assertNotNull(matcherRefBuilder20);
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + false + "'", boolean21 == false);
        org.junit.Assert.assertNotNull(matcherRefBuilder23);
        org.junit.Assert.assertNotNull(copyrightBuilder25);
        org.junit.Assert.assertNotNull(copyrightBuilder27);
        org.junit.Assert.assertEquals("'" + str28 + "' != '" + "Copyright Builder: s:OASIS e:null o:null" + "'", str28, "Copyright Builder: s:OASIS e:null o:null");
        org.junit.Assert.assertNotNull(copyrightBuilder30);
        org.junit.Assert.assertNotNull(matcherRefBuilder31);
        org.junit.Assert.assertTrue("'" + boolean32 + "' != '" + false + "'", boolean32 == false);
        org.junit.Assert.assertNotNull(copyrightBuilder33);
        org.junit.Assert.assertNotNull(copyrightBuilder35);
        org.junit.Assert.assertEquals("'" + str36 + "' != '" + "Copyright Builder: s:OASIS e:null o:null" + "'", str36, "Copyright Builder: s:OASIS e:null o:null");
        org.junit.Assert.assertNotNull(copyrightBuilder38);
        org.junit.Assert.assertNotNull(copyrightBuilder39);
        org.junit.Assert.assertNotNull(copyrightBuilder40);
        org.junit.Assert.assertEquals("'" + str41 + "' != '" + "Copyright Builder: s:null e:null o:null" + "'", str41, "Copyright Builder: s:null e:null o:null");
        org.junit.Assert.assertNotNull(copyrightBuilder43);
        org.junit.Assert.assertTrue("'" + boolean44 + "' != '" + false + "'", boolean44 == false);
        org.junit.Assert.assertNotNull(copyrightBuilder45);
        org.junit.Assert.assertEquals("'" + str46 + "' != '" + "Copyright Builder: s:null e:null o:null" + "'", str46, "Copyright Builder: s:null e:null o:null");
        org.junit.Assert.assertNotNull(copyrightBuilder48);
        org.junit.Assert.assertTrue("'" + boolean49 + "' != '" + false + "'", boolean49 == false);
        org.junit.Assert.assertEquals("'" + str50 + "' != '" + "Copyright Builder: s:null e:.cvsignore o:null" + "'", str50, "Copyright Builder: s:null e:.cvsignore o:null");
        org.junit.Assert.assertNotNull(copyrightBuilder51);
        org.junit.Assert.assertNotNull(copyrightBuilder53);
        org.junit.Assert.assertNotNull(anyBuilder54);
        org.junit.Assert.assertNotNull(matcherRefBuilder55);
        org.junit.Assert.assertTrue("'" + boolean56 + "' != '" + false + "'", boolean56 == false);
        org.junit.Assert.assertNotNull(matcherRefBuilder58);
        org.junit.Assert.assertNotNull(copyrightBuilder59);
        org.junit.Assert.assertNotNull(matcherRefBuilder60);
        org.junit.Assert.assertTrue("'" + boolean61 + "' != '" + false + "'", boolean61 == false);
        org.junit.Assert.assertEquals("'" + str62 + "' != '" + "MathcerRefBuilder: null" + "'", str62, "MathcerRefBuilder: null");
        org.junit.Assert.assertNotNull(matcherRefBuilder64);
        org.junit.Assert.assertNotNull(builderArray65);
        org.junit.Assert.assertTrue("'" + boolean67 + "' != '" + true + "'", boolean67 == true);
        org.junit.Assert.assertNotNull(abstractBuilder68);
        org.junit.Assert.assertNotNull(abstractBuilder69);
        org.junit.Assert.assertNotNull(abstractBuilder70);
        org.junit.Assert.assertNotNull(iHeaderMatcher72);
        org.junit.Assert.assertNotNull(iHeaderMatcher74);
        org.junit.Assert.assertNotNull(iHeaderMatcher75);
        org.junit.Assert.assertNotNull(iHeaderMatcher76);
        org.junit.Assert.assertNotNull(copyrightBuilder77);
        org.junit.Assert.assertEquals("'" + str78 + "' != '" + "Copyright Builder: s:null e:null o:null" + "'", str78, "Copyright Builder: s:null e:null o:null");
        org.junit.Assert.assertNotNull(copyrightBuilder80);
        org.junit.Assert.assertTrue("'" + boolean81 + "' != '" + false + "'", boolean81 == false);
        org.junit.Assert.assertNotNull(copyrightBuilder83);
        org.junit.Assert.assertNotNull(abstractBuilder84);
        org.junit.Assert.assertNotNull(copyrightBuilder86);
        org.junit.Assert.assertNotNull(abstractBuilder87);
        org.junit.Assert.assertNotNull(abstractBuilder88);
        org.junit.Assert.assertNotNull(copyrightBuilder90);
        org.junit.Assert.assertNotNull(copyrightBuilder92);
        org.junit.Assert.assertNotNull(copyrightBuilder94);
    }

    @Test
    public void test13747() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest27.test13747");
        org.apache.rat.utils.Log log0 = null;
        org.apache.rat.ReportConfiguration reportConfiguration1 = new org.apache.rat.ReportConfiguration(log0);
        org.apache.rat.report.claim.ClaimStatistic claimStatistic2 = org.apache.rat.Reporter.report(reportConfiguration1);
        org.apache.commons.io.function.IOSupplier<java.io.InputStream> inputStreamIOSupplier3 = reportConfiguration1.getStyleSheet();
        org.apache.rat.report.claim.ClaimStatistic claimStatistic4 = org.apache.rat.Reporter.report(reportConfiguration1);
        org.apache.rat.config.SourceCodeManagementSystems sourceCodeManagementSystems5 = org.apache.rat.config.SourceCodeManagementSystems.CVS;
        java.lang.String str6 = sourceCodeManagementSystems5.getIgnoreFile();
        boolean boolean7 = sourceCodeManagementSystems5.hasIgnoreFile();
        java.util.List<java.lang.String> strList8 = sourceCodeManagementSystems5.getExclusions();
        java.io.FilenameFilter filenameFilter9 = org.apache.rat.Report.parseExclusions(strList8);
        reportConfiguration1.addApprovedLicenseCategories((java.util.Collection<java.lang.String>) strList8);
        org.apache.rat.utils.Log log11 = null;
        org.apache.rat.ReportConfiguration reportConfiguration12 = new org.apache.rat.ReportConfiguration(log11);
        reportConfiguration12.addApprovedLicenseCategory(".cvsignore");
        org.apache.rat.utils.Log.Level level15 = org.apache.rat.utils.Log.Level.ERROR;
        reportConfiguration12.logLicenseCollisions(level15);
        reportConfiguration12.addApprovedLicenseCategory("73fbee1b-7ed9-442a-968e-b2b525ca688f");
        org.apache.rat.utils.Log log19 = null;
        org.apache.rat.ReportConfiguration reportConfiguration20 = new org.apache.rat.ReportConfiguration(log19);
        java.io.FilenameFilter filenameFilter21 = reportConfiguration20.getInputFileFilter();
        org.apache.rat.license.LicenseSetFactory.LicenseFilter licenseFilter22 = org.apache.rat.license.LicenseSetFactory.LicenseFilter.all;
        java.util.SortedSet<org.apache.rat.license.ILicense> iLicenseSet23 = reportConfiguration20.getLicenses(licenseFilter22);
        org.apache.rat.config.AddLicenseHeaders addLicenseHeaders24 = org.apache.rat.config.AddLicenseHeaders.FALSE;
        reportConfiguration20.setAddLicenseHeaders(addLicenseHeaders24);
        org.apache.rat.utils.Log log26 = null;
        org.apache.rat.ReportConfiguration reportConfiguration27 = new org.apache.rat.ReportConfiguration(log26);
        org.apache.rat.report.claim.ClaimStatistic claimStatistic28 = org.apache.rat.Reporter.report(reportConfiguration27);
        org.apache.rat.license.LicenseSetFactory.LicenseFilter licenseFilter29 = org.apache.rat.license.LicenseSetFactory.LicenseFilter.all;
        org.apache.rat.Reporter.listLicenses(reportConfiguration27, licenseFilter29);
        org.apache.rat.Reporter.listLicenses(reportConfiguration20, licenseFilter29);
        org.apache.rat.utils.Log log32 = null;
        org.apache.rat.ReportConfiguration reportConfiguration33 = new org.apache.rat.ReportConfiguration(log32);
        java.io.FilenameFilter filenameFilter34 = reportConfiguration33.getInputFileFilter();
        org.apache.rat.license.LicenseSetFactory.LicenseFilter licenseFilter35 = org.apache.rat.license.LicenseSetFactory.LicenseFilter.all;
        java.util.SortedSet<org.apache.rat.license.ILicense> iLicenseSet36 = reportConfiguration33.getLicenses(licenseFilter35);
        org.apache.rat.config.AddLicenseHeaders addLicenseHeaders37 = org.apache.rat.config.AddLicenseHeaders.FALSE;
        reportConfiguration33.setAddLicenseHeaders(addLicenseHeaders37);
        org.apache.rat.utils.Log log39 = null;
        org.apache.rat.ReportConfiguration reportConfiguration40 = new org.apache.rat.ReportConfiguration(log39);
        org.apache.rat.report.claim.ClaimStatistic claimStatistic41 = org.apache.rat.Reporter.report(reportConfiguration40);
        org.apache.rat.license.LicenseSetFactory.LicenseFilter licenseFilter42 = org.apache.rat.license.LicenseSetFactory.LicenseFilter.all;
        org.apache.rat.Reporter.listLicenses(reportConfiguration40, licenseFilter42);
        org.apache.rat.Reporter.listLicenses(reportConfiguration33, licenseFilter42);
        org.apache.rat.Reporter.listLicenses(reportConfiguration20, licenseFilter42);
        java.io.FilenameFilter filenameFilter46 = reportConfiguration20.getInputFileFilter();
        reportConfiguration20.setStyleReport(false);
        org.apache.rat.report.IReportable iReportable49 = null;
        reportConfiguration20.setReportable(iReportable49);
        org.apache.rat.Defaults.Builder builder52 = org.apache.rat.Defaults.builder();
        org.apache.rat.Defaults defaults53 = builder52.build();
        org.apache.rat.utils.Log log54 = null;
        org.apache.rat.ReportConfiguration reportConfiguration55 = new org.apache.rat.ReportConfiguration(log54);
        java.io.FilenameFilter filenameFilter56 = reportConfiguration55.getInputFileFilter();
        org.apache.rat.license.LicenseSetFactory.LicenseFilter licenseFilter57 = org.apache.rat.license.LicenseSetFactory.LicenseFilter.all;
        java.util.SortedSet<org.apache.rat.license.ILicense> iLicenseSet58 = reportConfiguration55.getLicenses(licenseFilter57);
        org.apache.rat.config.AddLicenseHeaders addLicenseHeaders59 = org.apache.rat.config.AddLicenseHeaders.FALSE;
        reportConfiguration55.setAddLicenseHeaders(addLicenseHeaders59);
        org.apache.rat.utils.Log log61 = null;
        org.apache.rat.ReportConfiguration reportConfiguration62 = new org.apache.rat.ReportConfiguration(log61);
        org.apache.rat.report.claim.ClaimStatistic claimStatistic63 = org.apache.rat.Reporter.report(reportConfiguration62);
        org.apache.rat.license.LicenseSetFactory.LicenseFilter licenseFilter64 = org.apache.rat.license.LicenseSetFactory.LicenseFilter.all;
        org.apache.rat.Reporter.listLicenses(reportConfiguration62, licenseFilter64);
        org.apache.rat.Reporter.listLicenses(reportConfiguration55, licenseFilter64);
        org.apache.rat.utils.Log log67 = null;
        org.apache.rat.ReportConfiguration reportConfiguration68 = new org.apache.rat.ReportConfiguration(log67);
        java.io.FilenameFilter filenameFilter69 = reportConfiguration68.getInputFileFilter();
        org.apache.rat.license.LicenseSetFactory.LicenseFilter licenseFilter70 = org.apache.rat.license.LicenseSetFactory.LicenseFilter.all;
        java.util.SortedSet<org.apache.rat.license.ILicense> iLicenseSet71 = reportConfiguration68.getLicenses(licenseFilter70);
        org.apache.rat.config.AddLicenseHeaders addLicenseHeaders72 = org.apache.rat.config.AddLicenseHeaders.FALSE;
        reportConfiguration68.setAddLicenseHeaders(addLicenseHeaders72);
        org.apache.rat.utils.Log log74 = null;
        org.apache.rat.ReportConfiguration reportConfiguration75 = new org.apache.rat.ReportConfiguration(log74);
        org.apache.rat.report.claim.ClaimStatistic claimStatistic76 = org.apache.rat.Reporter.report(reportConfiguration75);
        org.apache.rat.license.LicenseSetFactory.LicenseFilter licenseFilter77 = org.apache.rat.license.LicenseSetFactory.LicenseFilter.all;
        org.apache.rat.Reporter.listLicenses(reportConfiguration75, licenseFilter77);
        org.apache.rat.Reporter.listLicenses(reportConfiguration68, licenseFilter77);
        java.util.SortedSet<org.apache.rat.license.ILicenseFamily> iLicenseFamilySet80 = reportConfiguration55.getLicenseFamilies(licenseFilter77);
        java.util.SortedSet<org.apache.rat.license.ILicense> iLicenseSet81 = defaults53.getLicenses(licenseFilter77);
        org.apache.rat.utils.ReportingSet<org.apache.rat.license.ILicense> iLicenseSet82 = new org.apache.rat.utils.ReportingSet<org.apache.rat.license.ILicense>(iLicenseSet81);
        org.apache.rat.license.ILicense iLicense83 = org.apache.rat.license.LicenseSetFactory.search("TMF", iLicenseSet81);
        reportConfiguration20.addLicense(iLicense83);
        java.lang.String str85 = iLicense83.derivedFrom();
        reportConfiguration12.addLicense(iLicense83);
        reportConfiguration1.addLicense(iLicense83);
        org.apache.commons.io.function.IOSupplier<java.io.PrintWriter> printWriterIOSupplier88 = reportConfiguration1.getWriter();
        org.junit.Assert.assertNull(claimStatistic2);
        org.junit.Assert.assertNull(inputStreamIOSupplier3);
        org.junit.Assert.assertNull(claimStatistic4);
        org.junit.Assert.assertTrue("'" + sourceCodeManagementSystems5 + "' != '" + org.apache.rat.config.SourceCodeManagementSystems.CVS + "'", sourceCodeManagementSystems5.equals(org.apache.rat.config.SourceCodeManagementSystems.CVS));
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + ".cvsignore" + "'", str6, ".cvsignore");
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + true + "'", boolean7 == true);
        org.junit.Assert.assertNotNull(strList8);
        org.junit.Assert.assertNotNull(filenameFilter9);
        org.junit.Assert.assertTrue("'" + level15 + "' != '" + org.apache.rat.utils.Log.Level.ERROR + "'", level15.equals(org.apache.rat.utils.Log.Level.ERROR));
        org.junit.Assert.assertNull(filenameFilter21);
        org.junit.Assert.assertTrue("'" + licenseFilter22 + "' != '" + org.apache.rat.license.LicenseSetFactory.LicenseFilter.all + "'", licenseFilter22.equals(org.apache.rat.license.LicenseSetFactory.LicenseFilter.all));
        org.junit.Assert.assertNotNull(iLicenseSet23);
        org.junit.Assert.assertTrue("'" + addLicenseHeaders24 + "' != '" + org.apache.rat.config.AddLicenseHeaders.FALSE + "'", addLicenseHeaders24.equals(org.apache.rat.config.AddLicenseHeaders.FALSE));
        org.junit.Assert.assertNull(claimStatistic28);
        org.junit.Assert.assertTrue("'" + licenseFilter29 + "' != '" + org.apache.rat.license.LicenseSetFactory.LicenseFilter.all + "'", licenseFilter29.equals(org.apache.rat.license.LicenseSetFactory.LicenseFilter.all));
        org.junit.Assert.assertNull(filenameFilter34);
        org.junit.Assert.assertTrue("'" + licenseFilter35 + "' != '" + org.apache.rat.license.LicenseSetFactory.LicenseFilter.all + "'", licenseFilter35.equals(org.apache.rat.license.LicenseSetFactory.LicenseFilter.all));
        org.junit.Assert.assertNotNull(iLicenseSet36);
        org.junit.Assert.assertTrue("'" + addLicenseHeaders37 + "' != '" + org.apache.rat.config.AddLicenseHeaders.FALSE + "'", addLicenseHeaders37.equals(org.apache.rat.config.AddLicenseHeaders.FALSE));
        org.junit.Assert.assertNull(claimStatistic41);
        org.junit.Assert.assertTrue("'" + licenseFilter42 + "' != '" + org.apache.rat.license.LicenseSetFactory.LicenseFilter.all + "'", licenseFilter42.equals(org.apache.rat.license.LicenseSetFactory.LicenseFilter.all));
        org.junit.Assert.assertNull(filenameFilter46);
        org.junit.Assert.assertNotNull(builder52);
        org.junit.Assert.assertNotNull(defaults53);
        org.junit.Assert.assertNull(filenameFilter56);
        org.junit.Assert.assertTrue("'" + licenseFilter57 + "' != '" + org.apache.rat.license.LicenseSetFactory.LicenseFilter.all + "'", licenseFilter57.equals(org.apache.rat.license.LicenseSetFactory.LicenseFilter.all));
        org.junit.Assert.assertNotNull(iLicenseSet58);
        org.junit.Assert.assertTrue("'" + addLicenseHeaders59 + "' != '" + org.apache.rat.config.AddLicenseHeaders.FALSE + "'", addLicenseHeaders59.equals(org.apache.rat.config.AddLicenseHeaders.FALSE));
        org.junit.Assert.assertNull(claimStatistic63);
        org.junit.Assert.assertTrue("'" + licenseFilter64 + "' != '" + org.apache.rat.license.LicenseSetFactory.LicenseFilter.all + "'", licenseFilter64.equals(org.apache.rat.license.LicenseSetFactory.LicenseFilter.all));
        org.junit.Assert.assertNull(filenameFilter69);
        org.junit.Assert.assertTrue("'" + licenseFilter70 + "' != '" + org.apache.rat.license.LicenseSetFactory.LicenseFilter.all + "'", licenseFilter70.equals(org.apache.rat.license.LicenseSetFactory.LicenseFilter.all));
        org.junit.Assert.assertNotNull(iLicenseSet71);
        org.junit.Assert.assertTrue("'" + addLicenseHeaders72 + "' != '" + org.apache.rat.config.AddLicenseHeaders.FALSE + "'", addLicenseHeaders72.equals(org.apache.rat.config.AddLicenseHeaders.FALSE));
        org.junit.Assert.assertNull(claimStatistic76);
        org.junit.Assert.assertTrue("'" + licenseFilter77 + "' != '" + org.apache.rat.license.LicenseSetFactory.LicenseFilter.all + "'", licenseFilter77.equals(org.apache.rat.license.LicenseSetFactory.LicenseFilter.all));
        org.junit.Assert.assertNotNull(iLicenseFamilySet80);
        org.junit.Assert.assertNotNull(iLicenseSet81);
        org.junit.Assert.assertNotNull(iLicense83);
        org.junit.Assert.assertEquals("'" + str85 + "' != '" + "BSD-3" + "'", str85, "BSD-3");
        org.junit.Assert.assertNotNull(printWriterIOSupplier88);
    }

    @Test
    public void test13748() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest27.test13748");
        org.apache.rat.utils.Log log0 = null;
        org.apache.rat.ReportConfiguration reportConfiguration1 = new org.apache.rat.ReportConfiguration(log0);
        reportConfiguration1.addApprovedLicenseCategory(".cvsignore");
        boolean boolean4 = reportConfiguration1.isStyleReport();
        org.apache.commons.io.function.IOSupplier<java.io.InputStream> inputStreamIOSupplier5 = org.apache.rat.Defaults.getPlainStyleSheet();
        reportConfiguration1.setStyleSheet(inputStreamIOSupplier5);
        org.apache.rat.utils.Log log7 = null;
        org.apache.rat.ReportConfiguration reportConfiguration8 = new org.apache.rat.ReportConfiguration(log7);
        org.apache.rat.report.claim.ClaimStatistic claimStatistic9 = org.apache.rat.Reporter.report(reportConfiguration8);
        org.apache.rat.utils.Log log10 = null;
        org.apache.rat.ReportConfiguration reportConfiguration11 = new org.apache.rat.ReportConfiguration(log10);
        java.io.FilenameFilter filenameFilter12 = reportConfiguration11.getInputFileFilter();
        org.apache.rat.license.LicenseSetFactory.LicenseFilter licenseFilter13 = org.apache.rat.license.LicenseSetFactory.LicenseFilter.all;
        java.util.SortedSet<org.apache.rat.license.ILicense> iLicenseSet14 = reportConfiguration11.getLicenses(licenseFilter13);
        org.apache.rat.config.AddLicenseHeaders addLicenseHeaders15 = org.apache.rat.config.AddLicenseHeaders.FALSE;
        reportConfiguration11.setAddLicenseHeaders(addLicenseHeaders15);
        org.apache.rat.utils.Log log17 = null;
        org.apache.rat.ReportConfiguration reportConfiguration18 = new org.apache.rat.ReportConfiguration(log17);
        org.apache.rat.report.claim.ClaimStatistic claimStatistic19 = org.apache.rat.Reporter.report(reportConfiguration18);
        org.apache.rat.license.LicenseSetFactory.LicenseFilter licenseFilter20 = org.apache.rat.license.LicenseSetFactory.LicenseFilter.all;
        org.apache.rat.Reporter.listLicenses(reportConfiguration18, licenseFilter20);
        org.apache.rat.Reporter.listLicenses(reportConfiguration11, licenseFilter20);
        org.apache.rat.utils.Log log23 = null;
        org.apache.rat.ReportConfiguration reportConfiguration24 = new org.apache.rat.ReportConfiguration(log23);
        java.io.FilenameFilter filenameFilter25 = reportConfiguration24.getInputFileFilter();
        org.apache.rat.license.LicenseSetFactory.LicenseFilter licenseFilter26 = org.apache.rat.license.LicenseSetFactory.LicenseFilter.all;
        java.util.SortedSet<org.apache.rat.license.ILicense> iLicenseSet27 = reportConfiguration24.getLicenses(licenseFilter26);
        org.apache.rat.config.AddLicenseHeaders addLicenseHeaders28 = org.apache.rat.config.AddLicenseHeaders.FALSE;
        reportConfiguration24.setAddLicenseHeaders(addLicenseHeaders28);
        org.apache.rat.utils.Log log30 = null;
        org.apache.rat.ReportConfiguration reportConfiguration31 = new org.apache.rat.ReportConfiguration(log30);
        org.apache.rat.report.claim.ClaimStatistic claimStatistic32 = org.apache.rat.Reporter.report(reportConfiguration31);
        org.apache.rat.license.LicenseSetFactory.LicenseFilter licenseFilter33 = org.apache.rat.license.LicenseSetFactory.LicenseFilter.all;
        org.apache.rat.Reporter.listLicenses(reportConfiguration31, licenseFilter33);
        org.apache.rat.Reporter.listLicenses(reportConfiguration24, licenseFilter33);
        org.apache.rat.Reporter.listLicenses(reportConfiguration11, licenseFilter33);
        org.apache.rat.utils.Log log37 = null;
        org.apache.rat.ReportConfiguration reportConfiguration38 = new org.apache.rat.ReportConfiguration(log37);
        org.apache.commons.io.function.IOSupplier<java.io.OutputStream> outputStreamIOSupplier39 = reportConfiguration38.getOutput();
        reportConfiguration11.setOut(outputStreamIOSupplier39);
        org.apache.rat.utils.Log log41 = null;
        org.apache.rat.ReportConfiguration reportConfiguration42 = new org.apache.rat.ReportConfiguration(log41);
        org.apache.rat.report.claim.ClaimStatistic claimStatistic43 = org.apache.rat.Reporter.report(reportConfiguration42);
        org.apache.rat.utils.Log log44 = null;
        org.apache.rat.ReportConfiguration reportConfiguration45 = new org.apache.rat.ReportConfiguration(log44);
        org.apache.rat.report.claim.ClaimStatistic claimStatistic46 = org.apache.rat.Reporter.report(reportConfiguration45);
        org.apache.rat.utils.ReportingSet.Options options47 = org.apache.rat.utils.ReportingSet.Options.OVERWRITE;
        reportConfiguration45.licenseDuplicateOption(options47);
        reportConfiguration42.familyDuplicateOption(options47);
        reportConfiguration11.licenseDuplicateOption(options47);
        reportConfiguration8.licenseDuplicateOption(options47);
        reportConfiguration1.licenseDuplicateOption(options47);
        org.apache.commons.io.function.IOSupplier<java.io.OutputStream> outputStreamIOSupplier53 = reportConfiguration1.getOutput();
        reportConfiguration1.setStyleReport(false);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + true + "'", boolean4 == true);
        org.junit.Assert.assertNotNull(inputStreamIOSupplier5);
        org.junit.Assert.assertNull(claimStatistic9);
        org.junit.Assert.assertNull(filenameFilter12);
        org.junit.Assert.assertTrue("'" + licenseFilter13 + "' != '" + org.apache.rat.license.LicenseSetFactory.LicenseFilter.all + "'", licenseFilter13.equals(org.apache.rat.license.LicenseSetFactory.LicenseFilter.all));
        org.junit.Assert.assertNotNull(iLicenseSet14);
        org.junit.Assert.assertTrue("'" + addLicenseHeaders15 + "' != '" + org.apache.rat.config.AddLicenseHeaders.FALSE + "'", addLicenseHeaders15.equals(org.apache.rat.config.AddLicenseHeaders.FALSE));
        org.junit.Assert.assertNull(claimStatistic19);
        org.junit.Assert.assertTrue("'" + licenseFilter20 + "' != '" + org.apache.rat.license.LicenseSetFactory.LicenseFilter.all + "'", licenseFilter20.equals(org.apache.rat.license.LicenseSetFactory.LicenseFilter.all));
        org.junit.Assert.assertNull(filenameFilter25);
        org.junit.Assert.assertTrue("'" + licenseFilter26 + "' != '" + org.apache.rat.license.LicenseSetFactory.LicenseFilter.all + "'", licenseFilter26.equals(org.apache.rat.license.LicenseSetFactory.LicenseFilter.all));
        org.junit.Assert.assertNotNull(iLicenseSet27);
        org.junit.Assert.assertTrue("'" + addLicenseHeaders28 + "' != '" + org.apache.rat.config.AddLicenseHeaders.FALSE + "'", addLicenseHeaders28.equals(org.apache.rat.config.AddLicenseHeaders.FALSE));
        org.junit.Assert.assertNull(claimStatistic32);
        org.junit.Assert.assertTrue("'" + licenseFilter33 + "' != '" + org.apache.rat.license.LicenseSetFactory.LicenseFilter.all + "'", licenseFilter33.equals(org.apache.rat.license.LicenseSetFactory.LicenseFilter.all));
        org.junit.Assert.assertNotNull(outputStreamIOSupplier39);
        org.junit.Assert.assertNull(claimStatistic43);
        org.junit.Assert.assertNull(claimStatistic46);
        org.junit.Assert.assertTrue("'" + options47 + "' != '" + org.apache.rat.utils.ReportingSet.Options.OVERWRITE + "'", options47.equals(org.apache.rat.utils.ReportingSet.Options.OVERWRITE));
        org.junit.Assert.assertNotNull(outputStreamIOSupplier53);
    }

    @Test
    public void test13749() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest27.test13749");
        org.apache.rat.configuration.builders.TextBuilder textBuilder0 = new org.apache.rat.configuration.builders.TextBuilder();
        org.apache.rat.configuration.builders.TextBuilder textBuilder2 = textBuilder0.setText("true");
        org.apache.rat.configuration.builders.TextBuilder textBuilder4 = textBuilder0.setText("stand");
        java.lang.String str5 = textBuilder0.toString();
        java.lang.String str6 = textBuilder0.toString();
        org.junit.Assert.assertNotNull(textBuilder2);
        org.junit.Assert.assertNotNull(textBuilder4);
        org.junit.Assert.assertEquals("'" + str5 + "' != '" + "TextBuilder: stand" + "'", str5, "TextBuilder: stand");
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "TextBuilder: stand" + "'", str6, "TextBuilder: stand");
    }

    @Test
    public void test13750() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest27.test13750");
        org.apache.rat.analysis.license.FullTextMatchingLicense fullTextMatchingLicense0 = new org.apache.rat.analysis.license.FullTextMatchingLicense();
        fullTextMatchingLicense0.setLicenseFamilyName("hi!");
        java.lang.String str3 = fullTextMatchingLicense0.getLicenseFamilyCategory();
        java.lang.String str4 = fullTextMatchingLicense0.getLicenseFamilyName();
        fullTextMatchingLicense0.setLicenseFamilyName("SpdxBuilder: null");
        fullTextMatchingLicense0.setLicenseFamilyCategory("TMF");
        fullTextMatchingLicense0.setFullText("W3C  ");
        java.lang.String str11 = fullTextMatchingLicense0.getNotes();
        fullTextMatchingLicense0.setNotes("7e27cd62-4403-40ab-a9f5-16e7c59ab2f1");
        java.lang.String str14 = fullTextMatchingLicense0.getLicenseFamilyName();
        fullTextMatchingLicense0.setLicenseFamilyName("d3983b6b-7325-418c-bb14-7ad2406080c1");
        org.junit.Assert.assertNull(str3);
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "hi!" + "'", str4, "hi!");
        org.junit.Assert.assertNull(str11);
        org.junit.Assert.assertEquals("'" + str14 + "' != '" + "SpdxBuilder: null" + "'", str14, "SpdxBuilder: null");
    }

    @Test
    public void test13751() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest27.test13751");
        org.apache.rat.analysis.matchers.FullTextMatcher fullTextMatcher1 = new org.apache.rat.analysis.matchers.FullTextMatcher("standard");
        boolean boolean3 = fullTextMatcher1.doMatch("a3b53609-8989-4241-8aa6-1cc947f0d382");
        org.apache.rat.analysis.IHeaderMatcher.State state4 = fullTextMatcher1.finalizeState();
        fullTextMatcher1.reset();
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertTrue("'" + state4 + "' != '" + org.apache.rat.analysis.IHeaderMatcher.State.f + "'", state4.equals(org.apache.rat.analysis.IHeaderMatcher.State.f));
    }

    @Test
    public void test13752() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest27.test13752");
        java.lang.String[] strArray5 = new java.lang.String[] { "http://org/apache/rat/meta-data#LicenseFamilyCategory", "Datum [ name ='http://org/apache/rat/meta-data#LicenseFamilyCategory',value ='GPL1  ']", "MANIFEST.MF", "AllBuilder:", "The MIT License" };
        org.apache.rat.utils.ReportingSet<java.lang.String> strSet6 = new org.apache.rat.utils.ReportingSet<java.lang.String>();
        boolean boolean7 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strSet6, strArray5);
        boolean boolean9 = strSet6.addIfNotPresent("http://org/apache/rat/meta-data#LicenseFamilyName");
        java.util.Iterator<java.lang.String> strItor10 = strSet6.iterator();
        java.util.Comparator<? super java.lang.String> wildcardComparator11 = strSet6.comparator();
        java.util.function.Function<java.lang.String, java.lang.String> strFunction12 = null;
        org.apache.rat.utils.ReportingSet<java.lang.String> strSet13 = strSet6.setMsgFormat(strFunction12);
        org.apache.rat.api.MetaData metaData14 = new org.apache.rat.api.MetaData();
        java.lang.String str16 = metaData14.value("COMMON DEVELOPMENT AND DISTRIBUTION LICENSE Version 1.0");
        java.util.Collection<org.apache.rat.api.MetaData.Datum> datumCollection17 = metaData14.getData();
        java.lang.String str19 = metaData14.value("hi!");
        boolean boolean20 = strSet6.equals((java.lang.Object) metaData14);
        org.apache.rat.api.MetaData.Datum datum23 = new org.apache.rat.api.MetaData.Datum("binary", "");
        java.lang.String str24 = datum23.toString();
        metaData14.set(datum23);
        java.util.Collection<org.apache.rat.api.MetaData.Datum> datumCollection26 = metaData14.getData();
        org.apache.rat.api.MetaData.Datum datum27 = org.apache.rat.api.MetaData.RAT_LICENSE_FAMILY_CATEGORY_DATUM_GEN;
        metaData14.set(datum27);
        org.junit.Assert.assertNotNull(strArray5);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + true + "'", boolean7 == true);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + true + "'", boolean9 == true);
        org.junit.Assert.assertNotNull(strItor10);
        org.junit.Assert.assertNull(wildcardComparator11);
        org.junit.Assert.assertNotNull(strSet13);
        org.junit.Assert.assertNull(str16);
        org.junit.Assert.assertNotNull(datumCollection17);
        org.junit.Assert.assertNull(str19);
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + false + "'", boolean20 == false);
        org.junit.Assert.assertEquals("'" + str24 + "' != '" + "Datum [ name ='binary',value =' ']" + "'", str24, "Datum [ name ='binary',value =' ']");
        org.junit.Assert.assertNotNull(datumCollection26);
        org.junit.Assert.assertNotNull(datum27);
    }

    @Test
    public void test13753() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest27.test13753");
        org.apache.rat.utils.DefaultLog defaultLog0 = org.apache.rat.utils.DefaultLog.INSTANCE;
        defaultLog0.info((java.lang.Object) "Modified BSD License");
        org.apache.rat.annotation.ApacheV2LicenseAppender apacheV2LicenseAppender4 = new org.apache.rat.annotation.ApacheV2LicenseAppender((org.apache.rat.utils.Log) defaultLog0, "8ecb8cce-06e4-400f-84d9-ad1cf6289fda");
        org.apache.rat.license.ILicenseFamilyBuilder iLicenseFamilyBuilder5 = new org.apache.rat.license.ILicenseFamilyBuilder();
        java.lang.String str6 = iLicenseFamilyBuilder5.getCategory();
        org.apache.rat.license.ILicenseFamily.Builder builder8 = iLicenseFamilyBuilder5.setLicenseFamilyCategory("false");
        java.lang.String str9 = iLicenseFamilyBuilder5.getCategory();
        org.apache.rat.license.ILicenseFamily.Builder builder11 = iLicenseFamilyBuilder5.setLicenseFamilyCategory("GPL3 ");
        org.apache.rat.license.ILicenseFamily.Builder builder13 = builder11.setLicenseFamilyCategory("33ac78df-d24f-43c9-beeb-83abf1fa7aa0");
        defaultLog0.warn((java.lang.Object) builder13);
        org.apache.rat.annotation.ApacheV2LicenseAppender apacheV2LicenseAppender16 = new org.apache.rat.annotation.ApacheV2LicenseAppender((org.apache.rat.utils.Log) defaultLog0, "9ff12955a2a343ec88c88b4c159ccbfa");
        org.apache.rat.ReportConfiguration reportConfiguration17 = new org.apache.rat.ReportConfiguration((org.apache.rat.utils.Log) defaultLog0);
        org.junit.Assert.assertNotNull(defaultLog0);
        org.junit.Assert.assertNull(str6);
        org.junit.Assert.assertNotNull(builder8);
        org.junit.Assert.assertEquals("'" + str9 + "' != '" + "false" + "'", str9, "false");
        org.junit.Assert.assertNotNull(builder11);
        org.junit.Assert.assertNotNull(builder13);
    }

    @Test
    public void test13754() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest27.test13754");
        org.apache.rat.utils.Log log1 = null;
        org.apache.rat.ReportConfiguration reportConfiguration2 = new org.apache.rat.ReportConfiguration(log1);
        org.apache.rat.report.claim.ClaimStatistic claimStatistic3 = org.apache.rat.Reporter.report(reportConfiguration2);
        org.apache.rat.utils.Log log4 = null;
        org.apache.rat.ReportConfiguration reportConfiguration5 = new org.apache.rat.ReportConfiguration(log4);
        org.apache.rat.report.claim.ClaimStatistic claimStatistic6 = org.apache.rat.Reporter.report(reportConfiguration5);
        org.apache.rat.utils.ReportingSet.Options options7 = org.apache.rat.utils.ReportingSet.Options.OVERWRITE;
        reportConfiguration5.licenseDuplicateOption(options7);
        reportConfiguration2.familyDuplicateOption(options7);
        org.apache.commons.io.function.IOSupplier<java.io.PrintWriter> printWriterIOSupplier10 = reportConfiguration2.getWriter();
        org.apache.rat.utils.Log log11 = null;
        org.apache.rat.ReportConfiguration reportConfiguration12 = new org.apache.rat.ReportConfiguration(log11);
        reportConfiguration12.addApprovedLicenseCategory(".cvsignore");
        org.apache.rat.utils.Log.Level level15 = org.apache.rat.utils.Log.Level.ERROR;
        reportConfiguration12.logFamilyCollisions(level15);
        reportConfiguration2.logFamilyCollisions(level15);
        org.apache.rat.license.ILicenseFamily iLicenseFamily18 = null;
        reportConfiguration2.addFamily(iLicenseFamily18);
        org.apache.rat.Defaults.Builder builder21 = org.apache.rat.Defaults.builder();
        org.apache.rat.Defaults defaults22 = builder21.build();
        org.apache.rat.Defaults.Builder builder23 = builder21.noDefault();
        org.apache.rat.Defaults.Builder builder25 = builder21.remove("AllBuilder:");
        org.apache.rat.Defaults.Builder builder27 = builder21.remove("GNU General Public License, version 2");
        org.apache.rat.Defaults defaults28 = builder27.build();
        org.apache.rat.license.ILicense[] iLicenseArray29 = new org.apache.rat.license.ILicense[] {};
        java.util.TreeSet<org.apache.rat.license.ILicense> iLicenseSet30 = new java.util.TreeSet<org.apache.rat.license.ILicense>();
        boolean boolean31 = java.util.Collections.addAll((java.util.Collection<org.apache.rat.license.ILicense>) iLicenseSet30, iLicenseArray29);
        java.lang.String[] strArray44 = new java.lang.String[] { "GPL2 ", "GPL1 ", "notice", "http://org/apache/rat/meta-data#LicenseFamilyName", "notice", "GPL2 ", "http://org/apache/rat/meta-data#LicenseFamilyName", "", "GPL2 ", "", "GPL1 ", "hi!" };
        java.util.ArrayList<java.lang.String> strList45 = new java.util.ArrayList<java.lang.String>();
        boolean boolean46 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strList45, strArray44);
        org.apache.rat.license.LicenseSetFactory licenseSetFactory47 = new org.apache.rat.license.LicenseSetFactory((java.util.SortedSet<org.apache.rat.license.ILicense>) iLicenseSet30, (java.util.Collection<java.lang.String>) strList45);
        org.apache.rat.license.LicenseSetFactory.LicenseFilter licenseFilter48 = org.apache.rat.license.LicenseSetFactory.LicenseFilter.none;
        java.util.SortedSet<java.lang.String> strSet49 = licenseSetFactory47.getLicenseFamilyIds(licenseFilter48);
        java.util.SortedSet<org.apache.rat.license.ILicenseFamily> iLicenseFamilySet50 = defaults28.getLicenseFamilies(licenseFilter48);
        org.apache.rat.utils.Log log51 = null;
        org.apache.rat.ReportConfiguration reportConfiguration52 = new org.apache.rat.ReportConfiguration(log51);
        reportConfiguration52.addApprovedLicenseCategory(".cvsignore");
        reportConfiguration52.removeApprovedLicenseCategory("COMMON DEVELOPMENT AND DISTRIBUTION LICENSE Version 1.0");
        org.apache.commons.io.function.IOSupplier<java.io.OutputStream> outputStreamIOSupplier57 = reportConfiguration52.getOutput();
        org.apache.commons.io.function.IOSupplier<java.io.OutputStream> outputStreamIOSupplier58 = reportConfiguration52.getOutput();
        org.apache.rat.license.ILicense[] iLicenseArray59 = new org.apache.rat.license.ILicense[] {};
        java.util.TreeSet<org.apache.rat.license.ILicense> iLicenseSet60 = new java.util.TreeSet<org.apache.rat.license.ILicense>();
        boolean boolean61 = java.util.Collections.addAll((java.util.Collection<org.apache.rat.license.ILicense>) iLicenseSet60, iLicenseArray59);
        java.lang.String[] strArray74 = new java.lang.String[] { "GPL2 ", "GPL1 ", "notice", "http://org/apache/rat/meta-data#LicenseFamilyName", "notice", "GPL2 ", "http://org/apache/rat/meta-data#LicenseFamilyName", "", "GPL2 ", "", "GPL1 ", "hi!" };
        java.util.ArrayList<java.lang.String> strList75 = new java.util.ArrayList<java.lang.String>();
        boolean boolean76 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strList75, strArray74);
        org.apache.rat.license.LicenseSetFactory licenseSetFactory77 = new org.apache.rat.license.LicenseSetFactory((java.util.SortedSet<org.apache.rat.license.ILicense>) iLicenseSet60, (java.util.Collection<java.lang.String>) strList75);
        org.apache.rat.license.LicenseSetFactory.LicenseFilter licenseFilter78 = org.apache.rat.license.LicenseSetFactory.LicenseFilter.none;
        java.util.SortedSet<java.lang.String> strSet79 = licenseSetFactory77.getLicenseFamilyIds(licenseFilter78);
        org.apache.rat.Reporter.listLicenses(reportConfiguration52, licenseFilter78);
        java.util.SortedSet<org.apache.rat.license.ILicense> iLicenseSet81 = defaults28.getLicenses(licenseFilter78);
        org.apache.rat.license.ILicense iLicense82 = org.apache.rat.license.LicenseSetFactory.search("f1fc8dc8-990d-4a2d-9540-4e9ece3bd92c", iLicenseSet81);
        reportConfiguration2.addLicensesIfNotPresent((java.util.Collection<org.apache.rat.license.ILicense>) iLicenseSet81);
        org.apache.rat.license.ILicense iLicense84 = org.apache.rat.license.LicenseSetFactory.search("8200bc17-9b9b-4381-a04f-ddf2e7a1c072", iLicenseSet81);
        org.junit.Assert.assertNull(claimStatistic3);
        org.junit.Assert.assertNull(claimStatistic6);
        org.junit.Assert.assertTrue("'" + options7 + "' != '" + org.apache.rat.utils.ReportingSet.Options.OVERWRITE + "'", options7.equals(org.apache.rat.utils.ReportingSet.Options.OVERWRITE));
        org.junit.Assert.assertNotNull(printWriterIOSupplier10);
        org.junit.Assert.assertTrue("'" + level15 + "' != '" + org.apache.rat.utils.Log.Level.ERROR + "'", level15.equals(org.apache.rat.utils.Log.Level.ERROR));
        org.junit.Assert.assertNotNull(builder21);
        org.junit.Assert.assertNotNull(defaults22);
        org.junit.Assert.assertNotNull(builder23);
        org.junit.Assert.assertNotNull(builder25);
        org.junit.Assert.assertNotNull(builder27);
        org.junit.Assert.assertNotNull(defaults28);
        org.junit.Assert.assertNotNull(iLicenseArray29);
        org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + false + "'", boolean31 == false);
        org.junit.Assert.assertNotNull(strArray44);
        org.junit.Assert.assertTrue("'" + boolean46 + "' != '" + true + "'", boolean46 == true);
        org.junit.Assert.assertTrue("'" + licenseFilter48 + "' != '" + org.apache.rat.license.LicenseSetFactory.LicenseFilter.none + "'", licenseFilter48.equals(org.apache.rat.license.LicenseSetFactory.LicenseFilter.none));
        org.junit.Assert.assertNotNull(strSet49);
        org.junit.Assert.assertNotNull(iLicenseFamilySet50);
        org.junit.Assert.assertNotNull(outputStreamIOSupplier57);
        org.junit.Assert.assertNotNull(outputStreamIOSupplier58);
        org.junit.Assert.assertNotNull(iLicenseArray59);
        org.junit.Assert.assertTrue("'" + boolean61 + "' != '" + false + "'", boolean61 == false);
        org.junit.Assert.assertNotNull(strArray74);
        org.junit.Assert.assertTrue("'" + boolean76 + "' != '" + true + "'", boolean76 == true);
        org.junit.Assert.assertTrue("'" + licenseFilter78 + "' != '" + org.apache.rat.license.LicenseSetFactory.LicenseFilter.none + "'", licenseFilter78.equals(org.apache.rat.license.LicenseSetFactory.LicenseFilter.none));
        org.junit.Assert.assertNotNull(strSet79);
        org.junit.Assert.assertNotNull(iLicenseSet81);
        org.junit.Assert.assertNull(iLicense82);
        org.junit.Assert.assertNull(iLicense84);
    }

    @Test
    public void test13755() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest27.test13755");
        org.apache.rat.api.MetaData metaData0 = new org.apache.rat.api.MetaData();
        java.lang.String str2 = metaData0.value("COMMON DEVELOPMENT AND DISTRIBUTION LICENSE Version 1.0");
        org.apache.rat.api.MetaData.Datum datum4 = metaData0.get("Copyright Builder: s:null e:.cvsignore o:null");
        java.lang.String str6 = metaData0.value("W3C Software Copyright");
        org.apache.rat.api.MetaData.Datum datum8 = metaData0.get("255ef7d8-e270-4908-9de7-bebc7df6eb88");
        org.apache.rat.api.MetaData.Datum datum10 = metaData0.get(".bzrignore");
        org.apache.rat.api.MetaData.Datum datum11 = org.apache.rat.api.MetaData.RAT_DOCUMENT_CATEGORY_DATUM_STANDARD;
        metaData0.add(datum11);
        org.apache.rat.api.MetaData.Datum datum14 = metaData0.get("PLAIN");
        java.util.Collection<org.apache.rat.api.MetaData.Datum> datumCollection15 = metaData0.getData();
        org.apache.rat.utils.Log log16 = null;
        org.apache.rat.ReportConfiguration reportConfiguration17 = new org.apache.rat.ReportConfiguration(log16);
        reportConfiguration17.addApprovedLicenseCategory(".cvsignore");
        org.apache.rat.utils.Log.Level level20 = org.apache.rat.utils.Log.Level.ERROR;
        reportConfiguration17.logLicenseCollisions(level20);
        reportConfiguration17.addApprovedLicenseCategory("73fbee1b-7ed9-442a-968e-b2b525ca688f");
        org.apache.rat.utils.Log log24 = null;
        org.apache.rat.ReportConfiguration reportConfiguration25 = new org.apache.rat.ReportConfiguration(log24);
        java.io.FilenameFilter filenameFilter26 = reportConfiguration25.getInputFileFilter();
        org.apache.rat.license.LicenseSetFactory.LicenseFilter licenseFilter27 = org.apache.rat.license.LicenseSetFactory.LicenseFilter.all;
        java.util.SortedSet<org.apache.rat.license.ILicense> iLicenseSet28 = reportConfiguration25.getLicenses(licenseFilter27);
        org.apache.rat.config.AddLicenseHeaders addLicenseHeaders29 = org.apache.rat.config.AddLicenseHeaders.FALSE;
        reportConfiguration25.setAddLicenseHeaders(addLicenseHeaders29);
        org.apache.rat.utils.Log log31 = null;
        org.apache.rat.ReportConfiguration reportConfiguration32 = new org.apache.rat.ReportConfiguration(log31);
        org.apache.rat.report.claim.ClaimStatistic claimStatistic33 = org.apache.rat.Reporter.report(reportConfiguration32);
        org.apache.rat.license.LicenseSetFactory.LicenseFilter licenseFilter34 = org.apache.rat.license.LicenseSetFactory.LicenseFilter.all;
        org.apache.rat.Reporter.listLicenses(reportConfiguration32, licenseFilter34);
        org.apache.rat.Reporter.listLicenses(reportConfiguration25, licenseFilter34);
        org.apache.rat.utils.Log log37 = null;
        org.apache.rat.ReportConfiguration reportConfiguration38 = new org.apache.rat.ReportConfiguration(log37);
        java.io.FilenameFilter filenameFilter39 = reportConfiguration38.getInputFileFilter();
        org.apache.rat.license.LicenseSetFactory.LicenseFilter licenseFilter40 = org.apache.rat.license.LicenseSetFactory.LicenseFilter.all;
        java.util.SortedSet<org.apache.rat.license.ILicense> iLicenseSet41 = reportConfiguration38.getLicenses(licenseFilter40);
        org.apache.rat.config.AddLicenseHeaders addLicenseHeaders42 = org.apache.rat.config.AddLicenseHeaders.FALSE;
        reportConfiguration38.setAddLicenseHeaders(addLicenseHeaders42);
        org.apache.rat.utils.Log log44 = null;
        org.apache.rat.ReportConfiguration reportConfiguration45 = new org.apache.rat.ReportConfiguration(log44);
        org.apache.rat.report.claim.ClaimStatistic claimStatistic46 = org.apache.rat.Reporter.report(reportConfiguration45);
        org.apache.rat.license.LicenseSetFactory.LicenseFilter licenseFilter47 = org.apache.rat.license.LicenseSetFactory.LicenseFilter.all;
        org.apache.rat.Reporter.listLicenses(reportConfiguration45, licenseFilter47);
        org.apache.rat.Reporter.listLicenses(reportConfiguration38, licenseFilter47);
        org.apache.rat.Reporter.listLicenses(reportConfiguration25, licenseFilter47);
        java.io.FilenameFilter filenameFilter51 = reportConfiguration25.getInputFileFilter();
        reportConfiguration25.setStyleReport(false);
        org.apache.rat.report.IReportable iReportable54 = null;
        reportConfiguration25.setReportable(iReportable54);
        org.apache.rat.Defaults.Builder builder57 = org.apache.rat.Defaults.builder();
        org.apache.rat.Defaults defaults58 = builder57.build();
        org.apache.rat.utils.Log log59 = null;
        org.apache.rat.ReportConfiguration reportConfiguration60 = new org.apache.rat.ReportConfiguration(log59);
        java.io.FilenameFilter filenameFilter61 = reportConfiguration60.getInputFileFilter();
        org.apache.rat.license.LicenseSetFactory.LicenseFilter licenseFilter62 = org.apache.rat.license.LicenseSetFactory.LicenseFilter.all;
        java.util.SortedSet<org.apache.rat.license.ILicense> iLicenseSet63 = reportConfiguration60.getLicenses(licenseFilter62);
        org.apache.rat.config.AddLicenseHeaders addLicenseHeaders64 = org.apache.rat.config.AddLicenseHeaders.FALSE;
        reportConfiguration60.setAddLicenseHeaders(addLicenseHeaders64);
        org.apache.rat.utils.Log log66 = null;
        org.apache.rat.ReportConfiguration reportConfiguration67 = new org.apache.rat.ReportConfiguration(log66);
        org.apache.rat.report.claim.ClaimStatistic claimStatistic68 = org.apache.rat.Reporter.report(reportConfiguration67);
        org.apache.rat.license.LicenseSetFactory.LicenseFilter licenseFilter69 = org.apache.rat.license.LicenseSetFactory.LicenseFilter.all;
        org.apache.rat.Reporter.listLicenses(reportConfiguration67, licenseFilter69);
        org.apache.rat.Reporter.listLicenses(reportConfiguration60, licenseFilter69);
        org.apache.rat.utils.Log log72 = null;
        org.apache.rat.ReportConfiguration reportConfiguration73 = new org.apache.rat.ReportConfiguration(log72);
        java.io.FilenameFilter filenameFilter74 = reportConfiguration73.getInputFileFilter();
        org.apache.rat.license.LicenseSetFactory.LicenseFilter licenseFilter75 = org.apache.rat.license.LicenseSetFactory.LicenseFilter.all;
        java.util.SortedSet<org.apache.rat.license.ILicense> iLicenseSet76 = reportConfiguration73.getLicenses(licenseFilter75);
        org.apache.rat.config.AddLicenseHeaders addLicenseHeaders77 = org.apache.rat.config.AddLicenseHeaders.FALSE;
        reportConfiguration73.setAddLicenseHeaders(addLicenseHeaders77);
        org.apache.rat.utils.Log log79 = null;
        org.apache.rat.ReportConfiguration reportConfiguration80 = new org.apache.rat.ReportConfiguration(log79);
        org.apache.rat.report.claim.ClaimStatistic claimStatistic81 = org.apache.rat.Reporter.report(reportConfiguration80);
        org.apache.rat.license.LicenseSetFactory.LicenseFilter licenseFilter82 = org.apache.rat.license.LicenseSetFactory.LicenseFilter.all;
        org.apache.rat.Reporter.listLicenses(reportConfiguration80, licenseFilter82);
        org.apache.rat.Reporter.listLicenses(reportConfiguration73, licenseFilter82);
        java.util.SortedSet<org.apache.rat.license.ILicenseFamily> iLicenseFamilySet85 = reportConfiguration60.getLicenseFamilies(licenseFilter82);
        java.util.SortedSet<org.apache.rat.license.ILicense> iLicenseSet86 = defaults58.getLicenses(licenseFilter82);
        org.apache.rat.utils.ReportingSet<org.apache.rat.license.ILicense> iLicenseSet87 = new org.apache.rat.utils.ReportingSet<org.apache.rat.license.ILicense>(iLicenseSet86);
        org.apache.rat.license.ILicense iLicense88 = org.apache.rat.license.LicenseSetFactory.search("TMF", iLicenseSet86);
        reportConfiguration25.addLicense(iLicense88);
        java.lang.String str90 = iLicense88.derivedFrom();
        reportConfiguration17.addLicense(iLicense88);
        java.lang.String str92 = iLicense88.getNotes();
        org.apache.rat.license.ILicenseFamily iLicenseFamily93 = iLicense88.getLicenseFamily();
        java.lang.String str94 = iLicense88.derivedFrom();
        org.apache.rat.license.ILicenseFamily iLicenseFamily95 = iLicense88.getLicenseFamily();
        java.lang.String str96 = iLicense88.getNotes();
        metaData0.reportOnLicense(iLicense88);
        java.lang.String str98 = iLicense88.getNotes();
        org.junit.Assert.assertNull(str2);
        org.junit.Assert.assertNull(datum4);
        org.junit.Assert.assertNull(str6);
        org.junit.Assert.assertNull(datum8);
        org.junit.Assert.assertNull(datum10);
        org.junit.Assert.assertNotNull(datum11);
        org.junit.Assert.assertNull(datum14);
        org.junit.Assert.assertNotNull(datumCollection15);
        org.junit.Assert.assertTrue("'" + level20 + "' != '" + org.apache.rat.utils.Log.Level.ERROR + "'", level20.equals(org.apache.rat.utils.Log.Level.ERROR));
        org.junit.Assert.assertNull(filenameFilter26);
        org.junit.Assert.assertTrue("'" + licenseFilter27 + "' != '" + org.apache.rat.license.LicenseSetFactory.LicenseFilter.all + "'", licenseFilter27.equals(org.apache.rat.license.LicenseSetFactory.LicenseFilter.all));
        org.junit.Assert.assertNotNull(iLicenseSet28);
        org.junit.Assert.assertTrue("'" + addLicenseHeaders29 + "' != '" + org.apache.rat.config.AddLicenseHeaders.FALSE + "'", addLicenseHeaders29.equals(org.apache.rat.config.AddLicenseHeaders.FALSE));
        org.junit.Assert.assertNull(claimStatistic33);
        org.junit.Assert.assertTrue("'" + licenseFilter34 + "' != '" + org.apache.rat.license.LicenseSetFactory.LicenseFilter.all + "'", licenseFilter34.equals(org.apache.rat.license.LicenseSetFactory.LicenseFilter.all));
        org.junit.Assert.assertNull(filenameFilter39);
        org.junit.Assert.assertTrue("'" + licenseFilter40 + "' != '" + org.apache.rat.license.LicenseSetFactory.LicenseFilter.all + "'", licenseFilter40.equals(org.apache.rat.license.LicenseSetFactory.LicenseFilter.all));
        org.junit.Assert.assertNotNull(iLicenseSet41);
        org.junit.Assert.assertTrue("'" + addLicenseHeaders42 + "' != '" + org.apache.rat.config.AddLicenseHeaders.FALSE + "'", addLicenseHeaders42.equals(org.apache.rat.config.AddLicenseHeaders.FALSE));
        org.junit.Assert.assertNull(claimStatistic46);
        org.junit.Assert.assertTrue("'" + licenseFilter47 + "' != '" + org.apache.rat.license.LicenseSetFactory.LicenseFilter.all + "'", licenseFilter47.equals(org.apache.rat.license.LicenseSetFactory.LicenseFilter.all));
        org.junit.Assert.assertNull(filenameFilter51);
        org.junit.Assert.assertNotNull(builder57);
        org.junit.Assert.assertNotNull(defaults58);
        org.junit.Assert.assertNull(filenameFilter61);
        org.junit.Assert.assertTrue("'" + licenseFilter62 + "' != '" + org.apache.rat.license.LicenseSetFactory.LicenseFilter.all + "'", licenseFilter62.equals(org.apache.rat.license.LicenseSetFactory.LicenseFilter.all));
        org.junit.Assert.assertNotNull(iLicenseSet63);
        org.junit.Assert.assertTrue("'" + addLicenseHeaders64 + "' != '" + org.apache.rat.config.AddLicenseHeaders.FALSE + "'", addLicenseHeaders64.equals(org.apache.rat.config.AddLicenseHeaders.FALSE));
        org.junit.Assert.assertNull(claimStatistic68);
        org.junit.Assert.assertTrue("'" + licenseFilter69 + "' != '" + org.apache.rat.license.LicenseSetFactory.LicenseFilter.all + "'", licenseFilter69.equals(org.apache.rat.license.LicenseSetFactory.LicenseFilter.all));
        org.junit.Assert.assertNull(filenameFilter74);
        org.junit.Assert.assertTrue("'" + licenseFilter75 + "' != '" + org.apache.rat.license.LicenseSetFactory.LicenseFilter.all + "'", licenseFilter75.equals(org.apache.rat.license.LicenseSetFactory.LicenseFilter.all));
        org.junit.Assert.assertNotNull(iLicenseSet76);
        org.junit.Assert.assertTrue("'" + addLicenseHeaders77 + "' != '" + org.apache.rat.config.AddLicenseHeaders.FALSE + "'", addLicenseHeaders77.equals(org.apache.rat.config.AddLicenseHeaders.FALSE));
        org.junit.Assert.assertNull(claimStatistic81);
        org.junit.Assert.assertTrue("'" + licenseFilter82 + "' != '" + org.apache.rat.license.LicenseSetFactory.LicenseFilter.all + "'", licenseFilter82.equals(org.apache.rat.license.LicenseSetFactory.LicenseFilter.all));
        org.junit.Assert.assertNotNull(iLicenseFamilySet85);
        org.junit.Assert.assertNotNull(iLicenseSet86);
        org.junit.Assert.assertNotNull(iLicense88);
        org.junit.Assert.assertEquals("'" + str90 + "' != '" + "BSD-3" + "'", str90, "BSD-3");
        org.junit.Assert.assertNull(str92);
        org.junit.Assert.assertNotNull(iLicenseFamily93);
        org.junit.Assert.assertEquals("'" + str94 + "' != '" + "BSD-3" + "'", str94, "BSD-3");
        org.junit.Assert.assertNotNull(iLicenseFamily95);
        org.junit.Assert.assertNull(str96);
        org.junit.Assert.assertNull(str98);
    }

    @Test
    public void test13756() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest27.test13756");
        org.apache.rat.report.claim.ClaimStatistic claimStatistic0 = new org.apache.rat.report.claim.ClaimStatistic();
        claimStatistic0.setNumApproved((int) (short) 10);
        java.util.Map<java.lang.String, java.lang.Integer> strMap3 = null;
        claimStatistic0.setDocumentCategoryMap(strMap3);
        java.util.Map<java.lang.String, java.lang.Integer> strMap5 = claimStatistic0.getLicenseFileNameMap();
        claimStatistic0.setNumUnknown((int) (byte) -1);
        claimStatistic0.setNumUnknown(30);
        java.util.Map<java.lang.String, java.lang.Integer> strMap10 = null;
        claimStatistic0.setDocumentCategoryMap(strMap10);
        int int12 = claimStatistic0.getNumGenerated();
        int int13 = claimStatistic0.getNumApproved();
        claimStatistic0.setNumUnknown((int) 'a');
        java.util.Map<java.lang.String, java.lang.Integer> strMap16 = null;
        claimStatistic0.setLicenseFileCodeMap(strMap16);
        org.junit.Assert.assertNull(strMap5);
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + 0 + "'", int12 == 0);
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + 10 + "'", int13 == 10);
    }

    @Test
    public void test13757() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest27.test13757");
        java.lang.String[] strArray5 = new java.lang.String[] { "http://org/apache/rat/meta-data#LicenseFamilyCategory", "Datum [ name ='http://org/apache/rat/meta-data#LicenseFamilyCategory',value ='GPL1  ']", "MANIFEST.MF", "AllBuilder:", "The MIT License" };
        org.apache.rat.utils.ReportingSet<java.lang.String> strSet6 = new org.apache.rat.utils.ReportingSet<java.lang.String>();
        boolean boolean7 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strSet6, strArray5);
        boolean boolean9 = strSet6.addIfNotPresent("http://org/apache/rat/meta-data#LicenseFamilyName");
        boolean boolean11 = strSet6.addIfNotPresent("ef7a8b13-64c3-4510-bb0c-dbf208e1e73f");
        java.util.function.Function<java.lang.String, java.lang.String> strFunction12 = null;
        org.apache.rat.utils.ReportingSet<java.lang.String> strSet13 = strSet6.setMsgFormat(strFunction12);
        java.util.Spliterator<java.lang.String> strSpliterator14 = strSet6.spliterator();
        boolean boolean16 = strSet6.addIfNotPresent("");
        strSet6.clear();
        org.apache.rat.utils.ReportingSet<java.lang.String> strSet19 = strSet6.headSet("a80aad6c-340e-4343-88df-efe4fdbf9c47");
        org.apache.rat.utils.DefaultLog defaultLog20 = org.apache.rat.utils.DefaultLog.INSTANCE;
        defaultLog20.info((java.lang.Object) "Modified BSD License");
        org.apache.rat.annotation.ApacheV2LicenseAppender apacheV2LicenseAppender24 = new org.apache.rat.annotation.ApacheV2LicenseAppender((org.apache.rat.utils.Log) defaultLog20, "W3CD ");
        org.apache.rat.utils.DefaultLog defaultLog25 = org.apache.rat.utils.DefaultLog.INSTANCE;
        org.apache.rat.license.ILicense.Builder builder26 = org.apache.rat.license.ILicense.builder();
        org.apache.rat.license.ILicense.Builder builder28 = builder26.setLicenseFamilyCategory("");
        org.apache.rat.analysis.matchers.CopyrightMatcher copyrightMatcher32 = new org.apache.rat.analysis.matchers.CopyrightMatcher("", "GPL1 ", "hi!");
        org.apache.rat.analysis.IHeaderMatcher.State state33 = copyrightMatcher32.finalizeState();
        org.apache.rat.license.ILicense.Builder builder34 = builder28.setMatcher((org.apache.rat.analysis.IHeaderMatcher) copyrightMatcher32);
        org.apache.rat.license.ILicense.Builder builder36 = builder34.setLicenseFamilyCategory("");
        defaultLog25.error((java.lang.Object) builder36);
        org.apache.rat.utils.Log.Level level38 = org.apache.rat.utils.Log.Level.INFO;
        defaultLog25.log(level38, "JAVA");
        org.apache.rat.utils.Log log41 = null;
        org.apache.rat.ReportConfiguration reportConfiguration42 = new org.apache.rat.ReportConfiguration(log41);
        org.apache.commons.io.function.IOSupplier<java.io.OutputStream> outputStreamIOSupplier43 = reportConfiguration42.getOutput();
        reportConfiguration42.setCopyrightMessage("MANIFEST.MF");
        org.apache.rat.utils.Log log46 = reportConfiguration42.getLog();
        org.apache.rat.utils.Log.Level level47 = org.apache.rat.utils.Log.Level.INFO;
        reportConfiguration42.logFamilyCollisions(level47);
        defaultLog25.setLevel(level47);
        defaultLog20.setLevel(level47);
        org.apache.rat.utils.Log log51 = null;
        org.apache.rat.ReportConfiguration reportConfiguration52 = new org.apache.rat.ReportConfiguration(log51);
        reportConfiguration52.addApprovedLicenseCategory(".cvsignore");
        org.apache.rat.utils.Log log55 = null;
        org.apache.rat.ReportConfiguration reportConfiguration56 = new org.apache.rat.ReportConfiguration(log55);
        java.io.FilenameFilter filenameFilter57 = reportConfiguration56.getInputFileFilter();
        org.apache.rat.license.LicenseSetFactory.LicenseFilter licenseFilter58 = org.apache.rat.license.LicenseSetFactory.LicenseFilter.all;
        java.util.SortedSet<org.apache.rat.license.ILicense> iLicenseSet59 = reportConfiguration56.getLicenses(licenseFilter58);
        reportConfiguration52.addLicensesIfNotPresent((java.util.Collection<org.apache.rat.license.ILicense>) iLicenseSet59);
        org.apache.rat.license.ILicenseFamily iLicenseFamily61 = null;
        reportConfiguration52.addFamily(iLicenseFamily61);
        org.apache.rat.utils.DefaultLog defaultLog63 = org.apache.rat.utils.DefaultLog.INSTANCE;
        org.apache.rat.license.ILicense.Builder builder64 = org.apache.rat.license.ILicense.builder();
        org.apache.rat.license.ILicense.Builder builder66 = builder64.setLicenseFamilyCategory("");
        org.apache.rat.analysis.matchers.CopyrightMatcher copyrightMatcher70 = new org.apache.rat.analysis.matchers.CopyrightMatcher("", "GPL1 ", "hi!");
        org.apache.rat.analysis.IHeaderMatcher.State state71 = copyrightMatcher70.finalizeState();
        org.apache.rat.license.ILicense.Builder builder72 = builder66.setMatcher((org.apache.rat.analysis.IHeaderMatcher) copyrightMatcher70);
        org.apache.rat.license.ILicense.Builder builder74 = builder72.setLicenseFamilyCategory("");
        defaultLog63.error((java.lang.Object) builder74);
        org.apache.rat.utils.Log.Level level76 = org.apache.rat.utils.Log.Level.DEBUG;
        defaultLog63.setLevel(level76);
        reportConfiguration52.logFamilyCollisions(level76);
        defaultLog20.setLevel(level76);
        org.apache.rat.utils.ReportingSet<java.lang.String> strSet80 = strSet6.setLogLevel(level76);
        org.junit.Assert.assertNotNull(strArray5);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + true + "'", boolean7 == true);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + true + "'", boolean9 == true);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + true + "'", boolean11 == true);
        org.junit.Assert.assertNotNull(strSet13);
        org.junit.Assert.assertNotNull(strSpliterator14);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + true + "'", boolean16 == true);
        org.junit.Assert.assertNotNull(strSet19);
        org.junit.Assert.assertNotNull(defaultLog20);
        org.junit.Assert.assertNotNull(defaultLog25);
        org.junit.Assert.assertNotNull(builder26);
        org.junit.Assert.assertNotNull(builder28);
        org.junit.Assert.assertTrue("'" + state33 + "' != '" + org.apache.rat.analysis.IHeaderMatcher.State.f + "'", state33.equals(org.apache.rat.analysis.IHeaderMatcher.State.f));
        org.junit.Assert.assertNotNull(builder34);
        org.junit.Assert.assertNotNull(builder36);
        org.junit.Assert.assertTrue("'" + level38 + "' != '" + org.apache.rat.utils.Log.Level.INFO + "'", level38.equals(org.apache.rat.utils.Log.Level.INFO));
        org.junit.Assert.assertNotNull(outputStreamIOSupplier43);
        org.junit.Assert.assertNull(log46);
        org.junit.Assert.assertTrue("'" + level47 + "' != '" + org.apache.rat.utils.Log.Level.INFO + "'", level47.equals(org.apache.rat.utils.Log.Level.INFO));
        org.junit.Assert.assertNull(filenameFilter57);
        org.junit.Assert.assertTrue("'" + licenseFilter58 + "' != '" + org.apache.rat.license.LicenseSetFactory.LicenseFilter.all + "'", licenseFilter58.equals(org.apache.rat.license.LicenseSetFactory.LicenseFilter.all));
        org.junit.Assert.assertNotNull(iLicenseSet59);
        org.junit.Assert.assertNotNull(defaultLog63);
        org.junit.Assert.assertNotNull(builder64);
        org.junit.Assert.assertNotNull(builder66);
        org.junit.Assert.assertTrue("'" + state71 + "' != '" + org.apache.rat.analysis.IHeaderMatcher.State.f + "'", state71.equals(org.apache.rat.analysis.IHeaderMatcher.State.f));
        org.junit.Assert.assertNotNull(builder72);
        org.junit.Assert.assertNotNull(builder74);
        org.junit.Assert.assertTrue("'" + level76 + "' != '" + org.apache.rat.utils.Log.Level.DEBUG + "'", level76.equals(org.apache.rat.utils.Log.Level.DEBUG));
        org.junit.Assert.assertNotNull(strSet80);
    }

    @Test
    public void test13758() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest27.test13758");
        org.apache.rat.Defaults.Builder builder0 = org.apache.rat.Defaults.builder();
        org.apache.rat.Defaults defaults1 = builder0.build();
        org.apache.rat.Defaults.Builder builder2 = builder0.noDefault();
        org.apache.rat.Defaults.Builder builder4 = builder0.remove("AllBuilder:");
        org.apache.rat.Defaults.Builder builder6 = builder4.add("?????");
        org.apache.rat.Defaults.Builder builder8 = builder4.remove("FFALSE");
        java.io.File file9 = null;
        // The following exception was thrown during execution in test generation
        try {
            org.apache.rat.Defaults.Builder builder10 = builder8.remove(file9);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(builder0);
        org.junit.Assert.assertNotNull(defaults1);
        org.junit.Assert.assertNotNull(builder2);
        org.junit.Assert.assertNotNull(builder4);
        org.junit.Assert.assertNotNull(builder6);
        org.junit.Assert.assertNotNull(builder8);
    }

    @Test
    public void test13759() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest27.test13759");
        org.apache.rat.api.MetaData metaData0 = new org.apache.rat.api.MetaData();
        java.lang.String str2 = metaData0.value("COMMON DEVELOPMENT AND DISTRIBUTION LICENSE Version 1.0");
        java.lang.String str4 = metaData0.value("W3C Document Copyright");
        boolean boolean6 = metaData0.clear("hi!");
        java.lang.String str8 = metaData0.value("true");
        org.apache.rat.api.MetaData.Datum datum10 = metaData0.get("GNU General Public License, version 1");
        org.apache.rat.api.MetaData.Datum datum12 = metaData0.get("http:");
        java.lang.String str14 = metaData0.value("http://org/apache/rat/meta-data#LicenseFamilyCategory");
        org.apache.rat.api.MetaData.Datum datum16 = metaData0.get("TextBuilder: ");
        org.apache.rat.api.MetaData.Datum datum17 = org.apache.rat.api.MetaData.RAT_LICENSE_FAMILY_NAME_DATUM_ACADEMIC_FREE_LICENSE_VERSION_2_1;
        metaData0.add(datum17);
        java.util.Collection<org.apache.rat.api.MetaData.Datum> datumCollection19 = metaData0.getData();
        boolean boolean21 = metaData0.clear("c95c8cb9-e020-4881-8b38-9a9be1df8175");
        org.junit.Assert.assertNull(str2);
        org.junit.Assert.assertNull(str4);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertNull(str8);
        org.junit.Assert.assertNull(datum10);
        org.junit.Assert.assertNull(datum12);
        org.junit.Assert.assertNull(str14);
        org.junit.Assert.assertNull(datum16);
        org.junit.Assert.assertNotNull(datum17);
        org.junit.Assert.assertNotNull(datumCollection19);
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + false + "'", boolean21 == false);
    }

    @Test
    public void test13760() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest27.test13760");
        java.lang.String[] strArray5 = new java.lang.String[] { "http://org/apache/rat/meta-data#LicenseFamilyCategory", "Datum [ name ='http://org/apache/rat/meta-data#LicenseFamilyCategory',value ='GPL1  ']", "MANIFEST.MF", "AllBuilder:", "The MIT License" };
        org.apache.rat.utils.ReportingSet<java.lang.String> strSet6 = new org.apache.rat.utils.ReportingSet<java.lang.String>();
        boolean boolean7 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strSet6, strArray5);
        boolean boolean9 = strSet6.addIfNotPresent("http://org/apache/rat/meta-data#LicenseFamilyName");
        java.util.Iterator<java.lang.String> strItor10 = strSet6.iterator();
        strSet6.clear();
        int int12 = strSet6.size();
        java.util.Comparator<? super java.lang.String> wildcardComparator13 = strSet6.comparator();
        org.apache.rat.config.SourceCodeManagementSystems sourceCodeManagementSystems14 = org.apache.rat.config.SourceCodeManagementSystems.GIT;
        java.lang.String str15 = sourceCodeManagementSystems14.getIgnoreFile();
        boolean boolean16 = strSet6.remove((java.lang.Object) sourceCodeManagementSystems14);
        org.junit.Assert.assertNotNull(strArray5);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + true + "'", boolean7 == true);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + true + "'", boolean9 == true);
        org.junit.Assert.assertNotNull(strItor10);
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + 0 + "'", int12 == 0);
        org.junit.Assert.assertNull(wildcardComparator13);
        org.junit.Assert.assertTrue("'" + sourceCodeManagementSystems14 + "' != '" + org.apache.rat.config.SourceCodeManagementSystems.GIT + "'", sourceCodeManagementSystems14.equals(org.apache.rat.config.SourceCodeManagementSystems.GIT));
        org.junit.Assert.assertEquals("'" + str15 + "' != '" + ".gitignore" + "'", str15, ".gitignore");
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
    }

    @Test
    public void test13761() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest27.test13761");
        org.apache.rat.utils.Log log0 = null;
        org.apache.rat.ReportConfiguration reportConfiguration1 = new org.apache.rat.ReportConfiguration(log0);
        org.apache.rat.report.claim.ClaimStatistic claimStatistic2 = org.apache.rat.Reporter.report(reportConfiguration1);
        org.apache.commons.io.function.IOSupplier<java.io.InputStream> inputStreamIOSupplier3 = reportConfiguration1.getStyleSheet();
        boolean boolean4 = reportConfiguration1.isStyleReport();
        java.io.File file5 = null;
        // The following exception was thrown during execution in test generation
        try {
            reportConfiguration1.setStyleSheet(file5);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: styleSheet file should not be null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNull(claimStatistic2);
        org.junit.Assert.assertNull(inputStreamIOSupplier3);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + true + "'", boolean4 == true);
    }

    @Test
    public void test13762() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest27.test13762");
        org.apache.rat.api.MetaData metaData0 = new org.apache.rat.api.MetaData();
        java.lang.String str2 = metaData0.value("COMMON DEVELOPMENT AND DISTRIBUTION LICENSE Version 1.0");
        org.apache.rat.api.MetaData.Datum datum4 = metaData0.get("Copyright Builder: s:null e:.cvsignore o:null");
        java.lang.String str6 = metaData0.value("W3C Software Copyright");
        org.apache.rat.api.MetaData.Datum datum8 = metaData0.get("255ef7d8-e270-4908-9de7-bebc7df6eb88");
        java.util.Collection<org.apache.rat.api.MetaData.Datum> datumCollection9 = metaData0.getData();
        org.apache.rat.api.MetaData.Datum datum10 = org.apache.rat.api.MetaData.RAT_LICENSE_FAMILY_CATEGORY_DATUM_UNKNOWN;
        metaData0.set(datum10);
        org.apache.rat.api.MetaData.Datum datum12 = org.apache.rat.api.MetaData.RAT_APPROVED_LICENSE_DATUM_TRUE;
        metaData0.set(datum12);
        java.util.Collection<org.apache.rat.api.MetaData.Datum> datumCollection14 = metaData0.getData();
        org.apache.rat.utils.Log log15 = null;
        org.apache.rat.ReportConfiguration reportConfiguration16 = new org.apache.rat.ReportConfiguration(log15);
        java.io.FilenameFilter filenameFilter17 = reportConfiguration16.getInputFileFilter();
        org.apache.rat.license.LicenseSetFactory.LicenseFilter licenseFilter18 = org.apache.rat.license.LicenseSetFactory.LicenseFilter.all;
        java.util.SortedSet<org.apache.rat.license.ILicense> iLicenseSet19 = reportConfiguration16.getLicenses(licenseFilter18);
        org.apache.rat.config.AddLicenseHeaders addLicenseHeaders20 = org.apache.rat.config.AddLicenseHeaders.FALSE;
        reportConfiguration16.setAddLicenseHeaders(addLicenseHeaders20);
        org.apache.rat.utils.Log log22 = null;
        org.apache.rat.ReportConfiguration reportConfiguration23 = new org.apache.rat.ReportConfiguration(log22);
        org.apache.rat.report.claim.ClaimStatistic claimStatistic24 = org.apache.rat.Reporter.report(reportConfiguration23);
        org.apache.rat.license.LicenseSetFactory.LicenseFilter licenseFilter25 = org.apache.rat.license.LicenseSetFactory.LicenseFilter.all;
        org.apache.rat.Reporter.listLicenses(reportConfiguration23, licenseFilter25);
        org.apache.rat.Reporter.listLicenses(reportConfiguration16, licenseFilter25);
        org.apache.rat.utils.Log log28 = null;
        org.apache.rat.ReportConfiguration reportConfiguration29 = new org.apache.rat.ReportConfiguration(log28);
        java.io.FilenameFilter filenameFilter30 = reportConfiguration29.getInputFileFilter();
        org.apache.rat.license.LicenseSetFactory.LicenseFilter licenseFilter31 = org.apache.rat.license.LicenseSetFactory.LicenseFilter.all;
        java.util.SortedSet<org.apache.rat.license.ILicense> iLicenseSet32 = reportConfiguration29.getLicenses(licenseFilter31);
        org.apache.rat.config.AddLicenseHeaders addLicenseHeaders33 = org.apache.rat.config.AddLicenseHeaders.FALSE;
        reportConfiguration29.setAddLicenseHeaders(addLicenseHeaders33);
        org.apache.rat.utils.Log log35 = null;
        org.apache.rat.ReportConfiguration reportConfiguration36 = new org.apache.rat.ReportConfiguration(log35);
        org.apache.rat.report.claim.ClaimStatistic claimStatistic37 = org.apache.rat.Reporter.report(reportConfiguration36);
        org.apache.rat.license.LicenseSetFactory.LicenseFilter licenseFilter38 = org.apache.rat.license.LicenseSetFactory.LicenseFilter.all;
        org.apache.rat.Reporter.listLicenses(reportConfiguration36, licenseFilter38);
        org.apache.rat.Reporter.listLicenses(reportConfiguration29, licenseFilter38);
        org.apache.rat.Reporter.listLicenses(reportConfiguration16, licenseFilter38);
        java.io.FilenameFilter filenameFilter42 = reportConfiguration16.getInputFileFilter();
        reportConfiguration16.setStyleReport(false);
        org.apache.rat.report.IReportable iReportable45 = null;
        reportConfiguration16.setReportable(iReportable45);
        org.apache.rat.Defaults.Builder builder48 = org.apache.rat.Defaults.builder();
        org.apache.rat.Defaults defaults49 = builder48.build();
        org.apache.rat.utils.Log log50 = null;
        org.apache.rat.ReportConfiguration reportConfiguration51 = new org.apache.rat.ReportConfiguration(log50);
        java.io.FilenameFilter filenameFilter52 = reportConfiguration51.getInputFileFilter();
        org.apache.rat.license.LicenseSetFactory.LicenseFilter licenseFilter53 = org.apache.rat.license.LicenseSetFactory.LicenseFilter.all;
        java.util.SortedSet<org.apache.rat.license.ILicense> iLicenseSet54 = reportConfiguration51.getLicenses(licenseFilter53);
        org.apache.rat.config.AddLicenseHeaders addLicenseHeaders55 = org.apache.rat.config.AddLicenseHeaders.FALSE;
        reportConfiguration51.setAddLicenseHeaders(addLicenseHeaders55);
        org.apache.rat.utils.Log log57 = null;
        org.apache.rat.ReportConfiguration reportConfiguration58 = new org.apache.rat.ReportConfiguration(log57);
        org.apache.rat.report.claim.ClaimStatistic claimStatistic59 = org.apache.rat.Reporter.report(reportConfiguration58);
        org.apache.rat.license.LicenseSetFactory.LicenseFilter licenseFilter60 = org.apache.rat.license.LicenseSetFactory.LicenseFilter.all;
        org.apache.rat.Reporter.listLicenses(reportConfiguration58, licenseFilter60);
        org.apache.rat.Reporter.listLicenses(reportConfiguration51, licenseFilter60);
        org.apache.rat.utils.Log log63 = null;
        org.apache.rat.ReportConfiguration reportConfiguration64 = new org.apache.rat.ReportConfiguration(log63);
        java.io.FilenameFilter filenameFilter65 = reportConfiguration64.getInputFileFilter();
        org.apache.rat.license.LicenseSetFactory.LicenseFilter licenseFilter66 = org.apache.rat.license.LicenseSetFactory.LicenseFilter.all;
        java.util.SortedSet<org.apache.rat.license.ILicense> iLicenseSet67 = reportConfiguration64.getLicenses(licenseFilter66);
        org.apache.rat.config.AddLicenseHeaders addLicenseHeaders68 = org.apache.rat.config.AddLicenseHeaders.FALSE;
        reportConfiguration64.setAddLicenseHeaders(addLicenseHeaders68);
        org.apache.rat.utils.Log log70 = null;
        org.apache.rat.ReportConfiguration reportConfiguration71 = new org.apache.rat.ReportConfiguration(log70);
        org.apache.rat.report.claim.ClaimStatistic claimStatistic72 = org.apache.rat.Reporter.report(reportConfiguration71);
        org.apache.rat.license.LicenseSetFactory.LicenseFilter licenseFilter73 = org.apache.rat.license.LicenseSetFactory.LicenseFilter.all;
        org.apache.rat.Reporter.listLicenses(reportConfiguration71, licenseFilter73);
        org.apache.rat.Reporter.listLicenses(reportConfiguration64, licenseFilter73);
        java.util.SortedSet<org.apache.rat.license.ILicenseFamily> iLicenseFamilySet76 = reportConfiguration51.getLicenseFamilies(licenseFilter73);
        java.util.SortedSet<org.apache.rat.license.ILicense> iLicenseSet77 = defaults49.getLicenses(licenseFilter73);
        org.apache.rat.utils.ReportingSet<org.apache.rat.license.ILicense> iLicenseSet78 = new org.apache.rat.utils.ReportingSet<org.apache.rat.license.ILicense>(iLicenseSet77);
        org.apache.rat.license.ILicense iLicense79 = org.apache.rat.license.LicenseSetFactory.search("TMF", iLicenseSet77);
        reportConfiguration16.addLicense(iLicense79);
        java.lang.String str81 = iLicense79.derivedFrom();
        java.lang.String str82 = iLicense79.getName();
        org.apache.rat.license.ILicenseFamily iLicenseFamily83 = iLicense79.getLicenseFamily();
        iLicense79.reset();
        metaData0.reportOnLicense(iLicense79);
        org.junit.Assert.assertNull(str2);
        org.junit.Assert.assertNull(datum4);
        org.junit.Assert.assertNull(str6);
        org.junit.Assert.assertNull(datum8);
        org.junit.Assert.assertNotNull(datumCollection9);
        org.junit.Assert.assertNotNull(datum10);
        org.junit.Assert.assertNotNull(datum12);
        org.junit.Assert.assertNotNull(datumCollection14);
        org.junit.Assert.assertNull(filenameFilter17);
        org.junit.Assert.assertTrue("'" + licenseFilter18 + "' != '" + org.apache.rat.license.LicenseSetFactory.LicenseFilter.all + "'", licenseFilter18.equals(org.apache.rat.license.LicenseSetFactory.LicenseFilter.all));
        org.junit.Assert.assertNotNull(iLicenseSet19);
        org.junit.Assert.assertTrue("'" + addLicenseHeaders20 + "' != '" + org.apache.rat.config.AddLicenseHeaders.FALSE + "'", addLicenseHeaders20.equals(org.apache.rat.config.AddLicenseHeaders.FALSE));
        org.junit.Assert.assertNull(claimStatistic24);
        org.junit.Assert.assertTrue("'" + licenseFilter25 + "' != '" + org.apache.rat.license.LicenseSetFactory.LicenseFilter.all + "'", licenseFilter25.equals(org.apache.rat.license.LicenseSetFactory.LicenseFilter.all));
        org.junit.Assert.assertNull(filenameFilter30);
        org.junit.Assert.assertTrue("'" + licenseFilter31 + "' != '" + org.apache.rat.license.LicenseSetFactory.LicenseFilter.all + "'", licenseFilter31.equals(org.apache.rat.license.LicenseSetFactory.LicenseFilter.all));
        org.junit.Assert.assertNotNull(iLicenseSet32);
        org.junit.Assert.assertTrue("'" + addLicenseHeaders33 + "' != '" + org.apache.rat.config.AddLicenseHeaders.FALSE + "'", addLicenseHeaders33.equals(org.apache.rat.config.AddLicenseHeaders.FALSE));
        org.junit.Assert.assertNull(claimStatistic37);
        org.junit.Assert.assertTrue("'" + licenseFilter38 + "' != '" + org.apache.rat.license.LicenseSetFactory.LicenseFilter.all + "'", licenseFilter38.equals(org.apache.rat.license.LicenseSetFactory.LicenseFilter.all));
        org.junit.Assert.assertNull(filenameFilter42);
        org.junit.Assert.assertNotNull(builder48);
        org.junit.Assert.assertNotNull(defaults49);
        org.junit.Assert.assertNull(filenameFilter52);
        org.junit.Assert.assertTrue("'" + licenseFilter53 + "' != '" + org.apache.rat.license.LicenseSetFactory.LicenseFilter.all + "'", licenseFilter53.equals(org.apache.rat.license.LicenseSetFactory.LicenseFilter.all));
        org.junit.Assert.assertNotNull(iLicenseSet54);
        org.junit.Assert.assertTrue("'" + addLicenseHeaders55 + "' != '" + org.apache.rat.config.AddLicenseHeaders.FALSE + "'", addLicenseHeaders55.equals(org.apache.rat.config.AddLicenseHeaders.FALSE));
        org.junit.Assert.assertNull(claimStatistic59);
        org.junit.Assert.assertTrue("'" + licenseFilter60 + "' != '" + org.apache.rat.license.LicenseSetFactory.LicenseFilter.all + "'", licenseFilter60.equals(org.apache.rat.license.LicenseSetFactory.LicenseFilter.all));
        org.junit.Assert.assertNull(filenameFilter65);
        org.junit.Assert.assertTrue("'" + licenseFilter66 + "' != '" + org.apache.rat.license.LicenseSetFactory.LicenseFilter.all + "'", licenseFilter66.equals(org.apache.rat.license.LicenseSetFactory.LicenseFilter.all));
        org.junit.Assert.assertNotNull(iLicenseSet67);
        org.junit.Assert.assertTrue("'" + addLicenseHeaders68 + "' != '" + org.apache.rat.config.AddLicenseHeaders.FALSE + "'", addLicenseHeaders68.equals(org.apache.rat.config.AddLicenseHeaders.FALSE));
        org.junit.Assert.assertNull(claimStatistic72);
        org.junit.Assert.assertTrue("'" + licenseFilter73 + "' != '" + org.apache.rat.license.LicenseSetFactory.LicenseFilter.all + "'", licenseFilter73.equals(org.apache.rat.license.LicenseSetFactory.LicenseFilter.all));
        org.junit.Assert.assertNotNull(iLicenseFamilySet76);
        org.junit.Assert.assertNotNull(iLicenseSet77);
        org.junit.Assert.assertNotNull(iLicense79);
        org.junit.Assert.assertEquals("'" + str81 + "' != '" + "BSD-3" + "'", str81, "BSD-3");
        org.junit.Assert.assertEquals("'" + str82 + "' != '" + "The Telemanagement Forum License" + "'", str82, "The Telemanagement Forum License");
        org.junit.Assert.assertNotNull(iLicenseFamily83);
    }

    @Test
    public void test13763() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest27.test13763");
        org.apache.rat.analysis.matchers.SimpleTextMatcher simpleTextMatcher2 = new org.apache.rat.analysis.matchers.SimpleTextMatcher("AnyBuilder:\nMathcerRefBuilder: null\nAllBuilder:\nCopyright Builder: s:223f0aba-15d4-49e9-901e-5740c137aebf e:null o:null\nMathcerRefBuilder: null\nCopyright Builder: s:223f0aba-15d4-49e9-901e-5740c137aebf e:null o:null\nCopyright Builder: s:null e:null o:null\nCopyright Builder: s:null e:.cvsignore o:null\nCopyright Builder: s:null e:.cvsignore o:null\nCopyright Builder: s:OASIS e:null o:null\nAnyBuilder:\nMathcerRefBuilder: null\nCopyright Builder: s:null e:null o:null\nMathcerRefBuilder: null\nRegexBuilder: ef75a6e8-7197-4e9e-83bf-f8b367e6b3c5", "Copyright Builder: s:RegexBuilder: 89662180-a89f-497b-9301-227d494d2bae e:RegexBuilder67eb96c283b2456dbfb023ff916bf212 o:RegexBuilder: JAVA");
    }

    @Test
    public void test13764() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest27.test13764");
        org.apache.rat.license.ILicense[] iLicenseArray0 = new org.apache.rat.license.ILicense[] {};
        java.util.TreeSet<org.apache.rat.license.ILicense> iLicenseSet1 = new java.util.TreeSet<org.apache.rat.license.ILicense>();
        boolean boolean2 = java.util.Collections.addAll((java.util.Collection<org.apache.rat.license.ILicense>) iLicenseSet1, iLicenseArray0);
        java.lang.String[] strArray15 = new java.lang.String[] { "GPL2 ", "GPL1 ", "notice", "http://org/apache/rat/meta-data#LicenseFamilyName", "notice", "GPL2 ", "http://org/apache/rat/meta-data#LicenseFamilyName", "", "GPL2 ", "", "GPL1 ", "hi!" };
        java.util.ArrayList<java.lang.String> strList16 = new java.util.ArrayList<java.lang.String>();
        boolean boolean17 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strList16, strArray15);
        org.apache.rat.license.LicenseSetFactory licenseSetFactory18 = new org.apache.rat.license.LicenseSetFactory((java.util.SortedSet<org.apache.rat.license.ILicense>) iLicenseSet1, (java.util.Collection<java.lang.String>) strList16);
        org.apache.rat.utils.ReportingSet<org.apache.rat.license.ILicense> iLicenseSet19 = new org.apache.rat.utils.ReportingSet<org.apache.rat.license.ILicense>((java.util.SortedSet<org.apache.rat.license.ILicense>) iLicenseSet1);
        java.util.Collection<java.lang.String> strCollection20 = null;
        org.apache.rat.license.LicenseSetFactory licenseSetFactory21 = new org.apache.rat.license.LicenseSetFactory((java.util.SortedSet<org.apache.rat.license.ILicense>) iLicenseSet1, strCollection20);
        org.apache.rat.utils.Log log22 = null;
        org.apache.rat.ReportConfiguration reportConfiguration23 = new org.apache.rat.ReportConfiguration(log22);
        org.apache.rat.report.claim.ClaimStatistic claimStatistic24 = org.apache.rat.Reporter.report(reportConfiguration23);
        org.apache.commons.io.function.IOSupplier<java.io.OutputStream> outputStreamIOSupplier25 = reportConfiguration23.getOutput();
        org.apache.rat.license.ILicense iLicense26 = null;
        reportConfiguration23.addLicense(iLicense26);
        org.apache.rat.Defaults.Builder builder28 = org.apache.rat.Defaults.builder();
        org.apache.rat.Defaults defaults29 = builder28.build();
        reportConfiguration23.setFrom(defaults29);
        org.apache.rat.license.ILicense[] iLicenseArray31 = new org.apache.rat.license.ILicense[] {};
        java.util.TreeSet<org.apache.rat.license.ILicense> iLicenseSet32 = new java.util.TreeSet<org.apache.rat.license.ILicense>();
        boolean boolean33 = java.util.Collections.addAll((java.util.Collection<org.apache.rat.license.ILicense>) iLicenseSet32, iLicenseArray31);
        java.lang.String[] strArray46 = new java.lang.String[] { "GPL2 ", "GPL1 ", "notice", "http://org/apache/rat/meta-data#LicenseFamilyName", "notice", "GPL2 ", "http://org/apache/rat/meta-data#LicenseFamilyName", "", "GPL2 ", "", "GPL1 ", "hi!" };
        java.util.ArrayList<java.lang.String> strList47 = new java.util.ArrayList<java.lang.String>();
        boolean boolean48 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strList47, strArray46);
        org.apache.rat.license.LicenseSetFactory licenseSetFactory49 = new org.apache.rat.license.LicenseSetFactory((java.util.SortedSet<org.apache.rat.license.ILicense>) iLicenseSet32, (java.util.Collection<java.lang.String>) strList47);
        org.apache.rat.license.LicenseSetFactory.LicenseFilter licenseFilter50 = org.apache.rat.license.LicenseSetFactory.LicenseFilter.all;
        java.util.SortedSet<org.apache.rat.license.ILicenseFamily> iLicenseFamilySet51 = licenseSetFactory49.getLicenseFamilies(licenseFilter50);
        java.util.SortedSet<org.apache.rat.license.ILicense> iLicenseSet52 = defaults29.getLicenses(licenseFilter50);
        java.util.SortedSet<org.apache.rat.license.ILicense> iLicenseSet53 = licenseSetFactory21.getLicenses(licenseFilter50);
        org.apache.rat.utils.ReportingSet<java.lang.String> strSet54 = new org.apache.rat.utils.ReportingSet<java.lang.String>();
        org.apache.rat.utils.ReportingSet<java.lang.String> strSet56 = strSet54.tailSet("hi!");
        org.apache.rat.configuration.LicenseReader[] licenseReaderArray57 = new org.apache.rat.configuration.LicenseReader[] {};
        org.apache.rat.configuration.LicenseReader[] licenseReaderArray58 = strSet56.toArray(licenseReaderArray57);
        org.apache.rat.utils.Log log59 = null;
        org.apache.rat.ReportConfiguration reportConfiguration60 = new org.apache.rat.ReportConfiguration(log59);
        org.apache.rat.report.claim.ClaimStatistic claimStatistic61 = org.apache.rat.Reporter.report(reportConfiguration60);
        org.apache.rat.utils.Log log62 = null;
        org.apache.rat.ReportConfiguration reportConfiguration63 = new org.apache.rat.ReportConfiguration(log62);
        org.apache.rat.report.claim.ClaimStatistic claimStatistic64 = org.apache.rat.Reporter.report(reportConfiguration63);
        org.apache.rat.utils.ReportingSet.Options options65 = org.apache.rat.utils.ReportingSet.Options.OVERWRITE;
        reportConfiguration63.licenseDuplicateOption(options65);
        reportConfiguration60.familyDuplicateOption(options65);
        org.apache.rat.utils.ReportingSet<java.lang.String> strSet68 = strSet56.setDuplicateOption(options65);
        org.apache.rat.license.LicenseSetFactory licenseSetFactory69 = new org.apache.rat.license.LicenseSetFactory(iLicenseSet53, (java.util.Collection<java.lang.String>) strSet68);
        org.apache.rat.license.LicenseSetFactory.LicenseFilter licenseFilter70 = null;
        // The following exception was thrown during execution in test generation
        try {
            java.util.SortedSet<org.apache.rat.license.ILicense> iLicenseSet71 = licenseSetFactory69.getLicenses(licenseFilter70);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(iLicenseArray0);
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + false + "'", boolean2 == false);
        org.junit.Assert.assertNotNull(strArray15);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + true + "'", boolean17 == true);
        org.junit.Assert.assertNull(claimStatistic24);
        org.junit.Assert.assertNotNull(outputStreamIOSupplier25);
        org.junit.Assert.assertNotNull(builder28);
        org.junit.Assert.assertNotNull(defaults29);
        org.junit.Assert.assertNotNull(iLicenseArray31);
        org.junit.Assert.assertTrue("'" + boolean33 + "' != '" + false + "'", boolean33 == false);
        org.junit.Assert.assertNotNull(strArray46);
        org.junit.Assert.assertTrue("'" + boolean48 + "' != '" + true + "'", boolean48 == true);
        org.junit.Assert.assertTrue("'" + licenseFilter50 + "' != '" + org.apache.rat.license.LicenseSetFactory.LicenseFilter.all + "'", licenseFilter50.equals(org.apache.rat.license.LicenseSetFactory.LicenseFilter.all));
        org.junit.Assert.assertNotNull(iLicenseFamilySet51);
        org.junit.Assert.assertNotNull(iLicenseSet52);
        org.junit.Assert.assertNotNull(iLicenseSet53);
        org.junit.Assert.assertNotNull(strSet56);
        org.junit.Assert.assertNotNull(licenseReaderArray57);
        org.junit.Assert.assertNotNull(licenseReaderArray58);
        org.junit.Assert.assertNull(claimStatistic61);
        org.junit.Assert.assertNull(claimStatistic64);
        org.junit.Assert.assertTrue("'" + options65 + "' != '" + org.apache.rat.utils.ReportingSet.Options.OVERWRITE + "'", options65.equals(org.apache.rat.utils.ReportingSet.Options.OVERWRITE));
        org.junit.Assert.assertNotNull(strSet68);
    }

    @Test
    public void test13765() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest27.test13765");
        org.apache.rat.utils.Log log0 = null;
        org.apache.rat.ReportConfiguration reportConfiguration1 = new org.apache.rat.ReportConfiguration(log0);
        java.io.FilenameFilter filenameFilter2 = reportConfiguration1.getInputFileFilter();
        org.apache.rat.license.LicenseSetFactory.LicenseFilter licenseFilter3 = org.apache.rat.license.LicenseSetFactory.LicenseFilter.all;
        java.util.SortedSet<org.apache.rat.license.ILicense> iLicenseSet4 = reportConfiguration1.getLicenses(licenseFilter3);
        org.apache.rat.config.AddLicenseHeaders addLicenseHeaders5 = org.apache.rat.config.AddLicenseHeaders.FALSE;
        reportConfiguration1.setAddLicenseHeaders(addLicenseHeaders5);
        org.apache.rat.utils.Log log7 = null;
        org.apache.rat.ReportConfiguration reportConfiguration8 = new org.apache.rat.ReportConfiguration(log7);
        org.apache.rat.report.claim.ClaimStatistic claimStatistic9 = org.apache.rat.Reporter.report(reportConfiguration8);
        org.apache.rat.license.LicenseSetFactory.LicenseFilter licenseFilter10 = org.apache.rat.license.LicenseSetFactory.LicenseFilter.all;
        org.apache.rat.Reporter.listLicenses(reportConfiguration8, licenseFilter10);
        org.apache.rat.Reporter.listLicenses(reportConfiguration1, licenseFilter10);
        org.apache.rat.utils.Log log13 = null;
        org.apache.rat.ReportConfiguration reportConfiguration14 = new org.apache.rat.ReportConfiguration(log13);
        java.io.FilenameFilter filenameFilter15 = reportConfiguration14.getInputFileFilter();
        org.apache.rat.license.LicenseSetFactory.LicenseFilter licenseFilter16 = org.apache.rat.license.LicenseSetFactory.LicenseFilter.all;
        java.util.SortedSet<org.apache.rat.license.ILicense> iLicenseSet17 = reportConfiguration14.getLicenses(licenseFilter16);
        org.apache.rat.config.AddLicenseHeaders addLicenseHeaders18 = org.apache.rat.config.AddLicenseHeaders.FALSE;
        reportConfiguration14.setAddLicenseHeaders(addLicenseHeaders18);
        org.apache.rat.utils.Log log20 = null;
        org.apache.rat.ReportConfiguration reportConfiguration21 = new org.apache.rat.ReportConfiguration(log20);
        org.apache.rat.report.claim.ClaimStatistic claimStatistic22 = org.apache.rat.Reporter.report(reportConfiguration21);
        org.apache.rat.license.LicenseSetFactory.LicenseFilter licenseFilter23 = org.apache.rat.license.LicenseSetFactory.LicenseFilter.all;
        org.apache.rat.Reporter.listLicenses(reportConfiguration21, licenseFilter23);
        org.apache.rat.Reporter.listLicenses(reportConfiguration14, licenseFilter23);
        org.apache.rat.Reporter.listLicenses(reportConfiguration1, licenseFilter23);
        org.apache.rat.utils.Log log27 = null;
        org.apache.rat.ReportConfiguration reportConfiguration28 = new org.apache.rat.ReportConfiguration(log27);
        org.apache.commons.io.function.IOSupplier<java.io.OutputStream> outputStreamIOSupplier29 = reportConfiguration28.getOutput();
        reportConfiguration1.setOut(outputStreamIOSupplier29);
        org.apache.rat.utils.Log.Level level31 = org.apache.rat.utils.Log.Level.WARN;
        reportConfiguration1.logLicenseCollisions(level31);
        org.apache.commons.io.filefilter.IOFileFilter iOFileFilter33 = reportConfiguration1.getDirectoryFilter();
        reportConfiguration1.setStyleReport(false);
        org.apache.rat.license.ILicense.Builder builder36 = org.apache.rat.license.ILicense.builder();
        org.apache.rat.license.ILicense.Builder builder38 = builder36.setLicenseFamilyCategory("");
        org.apache.rat.analysis.matchers.FullTextMatcher fullTextMatcher40 = new org.apache.rat.analysis.matchers.FullTextMatcher("ef7a8b13-64c3-4510-bb0c-dbf208e1e73f");
        org.apache.rat.license.ILicense.Builder builder41 = builder36.setMatcher((org.apache.rat.analysis.IHeaderMatcher) fullTextMatcher40);
        org.apache.rat.license.ILicense.Builder builder43 = builder36.setId("CDDL1");
        org.apache.rat.configuration.builders.MatcherRefBuilder matcherRefBuilder44 = org.apache.rat.analysis.IHeaderMatcher.Builder.matcherRef();
        boolean boolean45 = matcherRefBuilder44.hasId();
        java.lang.String str46 = matcherRefBuilder44.toString();
        java.util.Map<java.lang.String, org.apache.rat.analysis.IHeaderMatcher> strMap47 = null;
        org.apache.rat.configuration.builders.MatcherRefBuilder matcherRefBuilder48 = matcherRefBuilder44.setMatchers(strMap47);
        java.util.Map<java.lang.String, org.apache.rat.analysis.IHeaderMatcher> strMap49 = null;
        org.apache.rat.configuration.builders.MatcherRefBuilder matcherRefBuilder50 = matcherRefBuilder44.setMatchers(strMap49);
        java.util.Map<java.lang.String, org.apache.rat.analysis.IHeaderMatcher> strMap51 = null;
        org.apache.rat.configuration.builders.MatcherRefBuilder matcherRefBuilder52 = matcherRefBuilder44.setMatchers(strMap51);
        java.util.Map<java.lang.String, org.apache.rat.analysis.IHeaderMatcher> strMap53 = null;
        org.apache.rat.configuration.builders.MatcherRefBuilder matcherRefBuilder54 = matcherRefBuilder52.setMatchers(strMap53);
        org.apache.rat.configuration.builders.MatcherRefBuilder matcherRefBuilder56 = matcherRefBuilder54.setRefId("Copyright Builder: s:.cvsignore e:standard o:W3C  ");
        org.apache.rat.license.ILicense.Builder builder57 = builder43.setMatcher((org.apache.rat.analysis.IHeaderMatcher.Builder) matcherRefBuilder54);
        org.apache.rat.configuration.builders.AllBuilder allBuilder58 = new org.apache.rat.configuration.builders.AllBuilder();
        java.lang.String str59 = allBuilder58.toString();
        java.util.List<org.apache.rat.analysis.IHeaderMatcher> iHeaderMatcherList60 = allBuilder58.getChildren();
        org.apache.rat.configuration.builders.MatcherRefBuilder matcherRefBuilder61 = new org.apache.rat.configuration.builders.MatcherRefBuilder();
        org.apache.rat.configuration.builders.AbstractBuilder abstractBuilder62 = allBuilder58.add((org.apache.rat.analysis.IHeaderMatcher.Builder) matcherRefBuilder61);
        org.apache.rat.configuration.builders.MatcherRefBuilder matcherRefBuilder64 = matcherRefBuilder61.setRefId("http:");
        java.util.Map<java.lang.String, org.apache.rat.analysis.IHeaderMatcher> strMap65 = null;
        org.apache.rat.configuration.builders.MatcherRefBuilder matcherRefBuilder66 = matcherRefBuilder61.setMatchers(strMap65);
        java.lang.String str67 = matcherRefBuilder61.toString();
        org.apache.rat.configuration.builders.MatcherRefBuilder matcherRefBuilder69 = matcherRefBuilder61.setRefId("dae945c0-00a3-4e9e-b53b-5fffbbb3412b");
        org.apache.rat.configuration.builders.MatcherRefBuilder matcherRefBuilder71 = matcherRefBuilder61.setRefId("RegexBuilder: 8925ba14-6c7c-466e-9335-5528e02df2c5");
        org.apache.rat.license.ILicense.Builder builder72 = builder43.setMatcher((org.apache.rat.analysis.IHeaderMatcher.Builder) matcherRefBuilder71);
        // The following exception was thrown during execution in test generation
        try {
            org.apache.rat.license.ILicense iLicense73 = reportConfiguration1.addLicense(builder72);
            org.junit.Assert.fail("Expected exception of type org.apache.rat.ConfigurationException; message: LicenseFamily Category must be specified");
        } catch (org.apache.rat.ConfigurationException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNull(filenameFilter2);
        org.junit.Assert.assertTrue("'" + licenseFilter3 + "' != '" + org.apache.rat.license.LicenseSetFactory.LicenseFilter.all + "'", licenseFilter3.equals(org.apache.rat.license.LicenseSetFactory.LicenseFilter.all));
        org.junit.Assert.assertNotNull(iLicenseSet4);
        org.junit.Assert.assertTrue("'" + addLicenseHeaders5 + "' != '" + org.apache.rat.config.AddLicenseHeaders.FALSE + "'", addLicenseHeaders5.equals(org.apache.rat.config.AddLicenseHeaders.FALSE));
        org.junit.Assert.assertNull(claimStatistic9);
        org.junit.Assert.assertTrue("'" + licenseFilter10 + "' != '" + org.apache.rat.license.LicenseSetFactory.LicenseFilter.all + "'", licenseFilter10.equals(org.apache.rat.license.LicenseSetFactory.LicenseFilter.all));
        org.junit.Assert.assertNull(filenameFilter15);
        org.junit.Assert.assertTrue("'" + licenseFilter16 + "' != '" + org.apache.rat.license.LicenseSetFactory.LicenseFilter.all + "'", licenseFilter16.equals(org.apache.rat.license.LicenseSetFactory.LicenseFilter.all));
        org.junit.Assert.assertNotNull(iLicenseSet17);
        org.junit.Assert.assertTrue("'" + addLicenseHeaders18 + "' != '" + org.apache.rat.config.AddLicenseHeaders.FALSE + "'", addLicenseHeaders18.equals(org.apache.rat.config.AddLicenseHeaders.FALSE));
        org.junit.Assert.assertNull(claimStatistic22);
        org.junit.Assert.assertTrue("'" + licenseFilter23 + "' != '" + org.apache.rat.license.LicenseSetFactory.LicenseFilter.all + "'", licenseFilter23.equals(org.apache.rat.license.LicenseSetFactory.LicenseFilter.all));
        org.junit.Assert.assertNotNull(outputStreamIOSupplier29);
        org.junit.Assert.assertTrue("'" + level31 + "' != '" + org.apache.rat.utils.Log.Level.WARN + "'", level31.equals(org.apache.rat.utils.Log.Level.WARN));
        org.junit.Assert.assertNotNull(iOFileFilter33);
        org.junit.Assert.assertNotNull(builder36);
        org.junit.Assert.assertNotNull(builder38);
        org.junit.Assert.assertNotNull(builder41);
        org.junit.Assert.assertNotNull(builder43);
        org.junit.Assert.assertNotNull(matcherRefBuilder44);
        org.junit.Assert.assertTrue("'" + boolean45 + "' != '" + false + "'", boolean45 == false);
        org.junit.Assert.assertEquals("'" + str46 + "' != '" + "MathcerRefBuilder: null" + "'", str46, "MathcerRefBuilder: null");
        org.junit.Assert.assertNotNull(matcherRefBuilder48);
        org.junit.Assert.assertNotNull(matcherRefBuilder50);
        org.junit.Assert.assertNotNull(matcherRefBuilder52);
        org.junit.Assert.assertNotNull(matcherRefBuilder54);
        org.junit.Assert.assertNotNull(matcherRefBuilder56);
        org.junit.Assert.assertNotNull(builder57);
        org.junit.Assert.assertEquals("'" + str59 + "' != '" + "AllBuilder:" + "'", str59, "AllBuilder:");
        org.junit.Assert.assertNotNull(iHeaderMatcherList60);
        org.junit.Assert.assertNotNull(abstractBuilder62);
        org.junit.Assert.assertNotNull(matcherRefBuilder64);
        org.junit.Assert.assertNotNull(matcherRefBuilder66);
        org.junit.Assert.assertEquals("'" + str67 + "' != '" + "MathcerRefBuilder: http:" + "'", str67, "MathcerRefBuilder: http:");
        org.junit.Assert.assertNotNull(matcherRefBuilder69);
        org.junit.Assert.assertNotNull(matcherRefBuilder71);
        org.junit.Assert.assertNotNull(builder72);
    }

    @Test
    public void test13766() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest27.test13766");
        boolean boolean1 = org.apache.rat.document.impl.guesser.BinaryGuesser.isNonBinary("90663EFF-7ED8-41BD-85A8-E8F189198BC6");
        org.junit.Assert.assertTrue("'" + boolean1 + "' != '" + false + "'", boolean1 == false);
    }

    @Test
    public void test13767() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest27.test13767");
        org.apache.rat.configuration.builders.TextBuilder textBuilder0 = new org.apache.rat.configuration.builders.TextBuilder();
        org.apache.rat.configuration.builders.TextBuilder textBuilder2 = textBuilder0.setText("t true");
        org.apache.rat.analysis.IHeaderMatcher iHeaderMatcher3 = textBuilder0.build();
        org.apache.rat.analysis.IHeaderMatcher iHeaderMatcher4 = textBuilder0.build();
        org.apache.rat.configuration.builders.TextBuilder textBuilder6 = textBuilder0.setText("null http://org/apache/rat/meta-data#LicenseFamilyName");
        org.apache.rat.configuration.builders.TextBuilder textBuilder8 = textBuilder6.setText("8925ba14-6c7c-466e-9335-5528e02df2c5");
        org.apache.rat.analysis.IHeaderMatcher iHeaderMatcher9 = textBuilder6.build();
        org.junit.Assert.assertNotNull(textBuilder2);
        org.junit.Assert.assertNotNull(iHeaderMatcher3);
        org.junit.Assert.assertNotNull(iHeaderMatcher4);
        org.junit.Assert.assertNotNull(textBuilder6);
        org.junit.Assert.assertNotNull(textBuilder8);
        org.junit.Assert.assertNotNull(iHeaderMatcher9);
    }

    @Test
    public void test13768() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest27.test13768");
        org.apache.rat.license.ILicenseFamilyBuilder iLicenseFamilyBuilder0 = new org.apache.rat.license.ILicenseFamilyBuilder();
        java.lang.String str1 = iLicenseFamilyBuilder0.getCategory();
        org.apache.rat.license.ILicenseFamily.Builder builder3 = iLicenseFamilyBuilder0.setLicenseFamilyCategory("AL   ");
        org.apache.rat.license.ILicenseFamily.Builder builder5 = iLicenseFamilyBuilder0.setLicenseFamilyCategory("JAVA");
        java.lang.String str6 = iLicenseFamilyBuilder0.getCategory();
        org.junit.Assert.assertNull(str1);
        org.junit.Assert.assertNotNull(builder3);
        org.junit.Assert.assertNotNull(builder5);
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "JAVA" + "'", str6, "JAVA");
    }

    @Test
    public void test13769() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest27.test13769");
        org.apache.rat.license.SimpleLicenseFamily simpleLicenseFamily0 = new org.apache.rat.license.SimpleLicenseFamily();
        java.lang.String str1 = simpleLicenseFamily0.getFamilyName();
        java.lang.String str2 = simpleLicenseFamily0.getFamilyCategory();
        simpleLicenseFamily0.setFamilyCategory("W3C  ");
        simpleLicenseFamily0.setFamilyName("GEN  ");
        simpleLicenseFamily0.setFamilyCategory("b5cb0999-b639-4e9c-ab9c-268137bc8846");
        simpleLicenseFamily0.setFamilyCategory("bd015714-405b-4304-9faa-36efad80e6e6");
        java.lang.String str11 = simpleLicenseFamily0.toString();
        simpleLicenseFamily0.setFamilyCategory("1ecfe123-9c39-420b-9cd6-8448dafb79f3");
        simpleLicenseFamily0.setFamilyCategory("Copyright Builder: s:null e:null o:PLAIN-RAT.XSL");
        simpleLicenseFamily0.setFamilyName("904bc88b-928c-4c8f-95f7-0cc95faab098");
        org.junit.Assert.assertNull(str1);
        org.junit.Assert.assertNull(str2);
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "bd015714-405b-4304-9faa-36efad80e6e6 GEN  " + "'", str11, "bd015714-405b-4304-9faa-36efad80e6e6 GEN  ");
    }

    @Test
    public void test13770() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest27.test13770");
        org.apache.rat.analysis.matchers.CopyrightMatcher copyrightMatcher4 = new org.apache.rat.analysis.matchers.CopyrightMatcher("3e58153a-ea8f-4517-97b0-38e5f764f653", "ED0FAF32-F32C-46F1-A629-4FE87704CB0E", "276901ae-dc23-48d7-86f1-6abbe32a92ea", "4a00c");
    }

    @Test
    public void test13771() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest27.test13771");
        org.apache.rat.utils.Log log0 = null;
        org.apache.rat.ReportConfiguration reportConfiguration1 = new org.apache.rat.ReportConfiguration(log0);
        java.io.FilenameFilter filenameFilter2 = reportConfiguration1.getInputFileFilter();
        org.apache.rat.license.ILicense iLicense3 = null;
        reportConfiguration1.addLicense(iLicense3);
        org.apache.rat.utils.Log log5 = null;
        org.apache.rat.ReportConfiguration reportConfiguration6 = new org.apache.rat.ReportConfiguration(log5);
        java.io.FilenameFilter filenameFilter7 = reportConfiguration6.getInputFileFilter();
        boolean boolean8 = reportConfiguration6.isStyleReport();
        org.apache.commons.io.function.IOSupplier<java.io.OutputStream> outputStreamIOSupplier9 = reportConfiguration6.getOutput();
        reportConfiguration1.setOut(outputStreamIOSupplier9);
        org.apache.commons.io.function.IOSupplier<java.io.InputStream> inputStreamIOSupplier11 = reportConfiguration1.getStyleSheet();
        org.apache.commons.io.function.IOSupplier<java.io.OutputStream> outputStreamIOSupplier12 = reportConfiguration1.getOutput();
        org.junit.Assert.assertNull(filenameFilter2);
        org.junit.Assert.assertNull(filenameFilter7);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + true + "'", boolean8 == true);
        org.junit.Assert.assertNotNull(outputStreamIOSupplier9);
        org.junit.Assert.assertNull(inputStreamIOSupplier11);
        org.junit.Assert.assertNotNull(outputStreamIOSupplier12);
    }

    @Test
    public void test13772() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest27.test13772");
        org.apache.rat.Defaults.Builder builder1 = org.apache.rat.Defaults.builder();
        org.apache.rat.Defaults defaults2 = builder1.build();
        org.apache.rat.utils.Log log3 = null;
        org.apache.rat.ReportConfiguration reportConfiguration4 = new org.apache.rat.ReportConfiguration(log3);
        java.io.FilenameFilter filenameFilter5 = reportConfiguration4.getInputFileFilter();
        org.apache.rat.license.LicenseSetFactory.LicenseFilter licenseFilter6 = org.apache.rat.license.LicenseSetFactory.LicenseFilter.all;
        java.util.SortedSet<org.apache.rat.license.ILicense> iLicenseSet7 = reportConfiguration4.getLicenses(licenseFilter6);
        org.apache.rat.config.AddLicenseHeaders addLicenseHeaders8 = org.apache.rat.config.AddLicenseHeaders.FALSE;
        reportConfiguration4.setAddLicenseHeaders(addLicenseHeaders8);
        org.apache.rat.utils.Log log10 = null;
        org.apache.rat.ReportConfiguration reportConfiguration11 = new org.apache.rat.ReportConfiguration(log10);
        org.apache.rat.report.claim.ClaimStatistic claimStatistic12 = org.apache.rat.Reporter.report(reportConfiguration11);
        org.apache.rat.license.LicenseSetFactory.LicenseFilter licenseFilter13 = org.apache.rat.license.LicenseSetFactory.LicenseFilter.all;
        org.apache.rat.Reporter.listLicenses(reportConfiguration11, licenseFilter13);
        org.apache.rat.Reporter.listLicenses(reportConfiguration4, licenseFilter13);
        org.apache.rat.utils.Log log16 = null;
        org.apache.rat.ReportConfiguration reportConfiguration17 = new org.apache.rat.ReportConfiguration(log16);
        java.io.FilenameFilter filenameFilter18 = reportConfiguration17.getInputFileFilter();
        org.apache.rat.license.LicenseSetFactory.LicenseFilter licenseFilter19 = org.apache.rat.license.LicenseSetFactory.LicenseFilter.all;
        java.util.SortedSet<org.apache.rat.license.ILicense> iLicenseSet20 = reportConfiguration17.getLicenses(licenseFilter19);
        org.apache.rat.config.AddLicenseHeaders addLicenseHeaders21 = org.apache.rat.config.AddLicenseHeaders.FALSE;
        reportConfiguration17.setAddLicenseHeaders(addLicenseHeaders21);
        org.apache.rat.utils.Log log23 = null;
        org.apache.rat.ReportConfiguration reportConfiguration24 = new org.apache.rat.ReportConfiguration(log23);
        org.apache.rat.report.claim.ClaimStatistic claimStatistic25 = org.apache.rat.Reporter.report(reportConfiguration24);
        org.apache.rat.license.LicenseSetFactory.LicenseFilter licenseFilter26 = org.apache.rat.license.LicenseSetFactory.LicenseFilter.all;
        org.apache.rat.Reporter.listLicenses(reportConfiguration24, licenseFilter26);
        org.apache.rat.Reporter.listLicenses(reportConfiguration17, licenseFilter26);
        java.util.SortedSet<org.apache.rat.license.ILicenseFamily> iLicenseFamilySet29 = reportConfiguration4.getLicenseFamilies(licenseFilter26);
        java.util.SortedSet<org.apache.rat.license.ILicense> iLicenseSet30 = defaults2.getLicenses(licenseFilter26);
        org.apache.rat.utils.Log log31 = null;
        org.apache.rat.ReportConfiguration reportConfiguration32 = new org.apache.rat.ReportConfiguration(log31);
        org.apache.commons.io.function.IOSupplier<java.io.OutputStream> outputStreamIOSupplier33 = reportConfiguration32.getOutput();
        reportConfiguration32.removeApprovedLicenseCategory("EF7A8B13-64C3-4510-BB0C-DBF208E1E73F");
        org.apache.rat.utils.Log log36 = null;
        org.apache.rat.ReportConfiguration reportConfiguration37 = new org.apache.rat.ReportConfiguration(log36);
        org.apache.rat.report.claim.ClaimStatistic claimStatistic38 = org.apache.rat.Reporter.report(reportConfiguration37);
        org.apache.rat.utils.Log log39 = null;
        org.apache.rat.ReportConfiguration reportConfiguration40 = new org.apache.rat.ReportConfiguration(log39);
        org.apache.rat.report.claim.ClaimStatistic claimStatistic41 = org.apache.rat.Reporter.report(reportConfiguration40);
        org.apache.rat.utils.ReportingSet.Options options42 = org.apache.rat.utils.ReportingSet.Options.OVERWRITE;
        reportConfiguration40.licenseDuplicateOption(options42);
        reportConfiguration37.familyDuplicateOption(options42);
        org.apache.commons.io.function.IOSupplier<java.io.PrintWriter> printWriterIOSupplier45 = reportConfiguration37.getWriter();
        org.apache.rat.report.IReportable iReportable46 = null;
        reportConfiguration37.setReportable(iReportable46);
        org.apache.rat.license.ILicenseFamily[] iLicenseFamilyArray48 = new org.apache.rat.license.ILicenseFamily[] {};
        java.util.ArrayList<org.apache.rat.license.ILicenseFamily> iLicenseFamilyList49 = new java.util.ArrayList<org.apache.rat.license.ILicenseFamily>();
        boolean boolean50 = java.util.Collections.addAll((java.util.Collection<org.apache.rat.license.ILicenseFamily>) iLicenseFamilyList49, iLicenseFamilyArray48);
        org.apache.rat.policy.DefaultPolicy defaultPolicy51 = new org.apache.rat.policy.DefaultPolicy((java.util.Collection<org.apache.rat.license.ILicenseFamily>) iLicenseFamilyList49);
        reportConfiguration37.addFamilies((java.util.Collection<org.apache.rat.license.ILicenseFamily>) iLicenseFamilyList49);
        org.apache.rat.utils.Log log53 = null;
        org.apache.rat.ReportConfiguration reportConfiguration54 = new org.apache.rat.ReportConfiguration(log53);
        java.io.FilenameFilter filenameFilter55 = reportConfiguration54.getInputFileFilter();
        org.apache.rat.license.LicenseSetFactory.LicenseFilter licenseFilter56 = org.apache.rat.license.LicenseSetFactory.LicenseFilter.all;
        java.util.SortedSet<org.apache.rat.license.ILicense> iLicenseSet57 = reportConfiguration54.getLicenses(licenseFilter56);
        org.apache.rat.config.AddLicenseHeaders addLicenseHeaders58 = org.apache.rat.config.AddLicenseHeaders.FALSE;
        reportConfiguration54.setAddLicenseHeaders(addLicenseHeaders58);
        org.apache.rat.utils.Log log60 = null;
        org.apache.rat.ReportConfiguration reportConfiguration61 = new org.apache.rat.ReportConfiguration(log60);
        org.apache.rat.report.claim.ClaimStatistic claimStatistic62 = org.apache.rat.Reporter.report(reportConfiguration61);
        org.apache.rat.license.LicenseSetFactory.LicenseFilter licenseFilter63 = org.apache.rat.license.LicenseSetFactory.LicenseFilter.all;
        org.apache.rat.Reporter.listLicenses(reportConfiguration61, licenseFilter63);
        org.apache.rat.Reporter.listLicenses(reportConfiguration54, licenseFilter63);
        org.apache.rat.utils.Log log66 = null;
        org.apache.rat.ReportConfiguration reportConfiguration67 = new org.apache.rat.ReportConfiguration(log66);
        java.io.FilenameFilter filenameFilter68 = reportConfiguration67.getInputFileFilter();
        org.apache.rat.license.LicenseSetFactory.LicenseFilter licenseFilter69 = org.apache.rat.license.LicenseSetFactory.LicenseFilter.all;
        java.util.SortedSet<org.apache.rat.license.ILicense> iLicenseSet70 = reportConfiguration67.getLicenses(licenseFilter69);
        org.apache.rat.config.AddLicenseHeaders addLicenseHeaders71 = org.apache.rat.config.AddLicenseHeaders.FALSE;
        reportConfiguration67.setAddLicenseHeaders(addLicenseHeaders71);
        org.apache.rat.utils.Log log73 = null;
        org.apache.rat.ReportConfiguration reportConfiguration74 = new org.apache.rat.ReportConfiguration(log73);
        org.apache.rat.report.claim.ClaimStatistic claimStatistic75 = org.apache.rat.Reporter.report(reportConfiguration74);
        org.apache.rat.license.LicenseSetFactory.LicenseFilter licenseFilter76 = org.apache.rat.license.LicenseSetFactory.LicenseFilter.all;
        org.apache.rat.Reporter.listLicenses(reportConfiguration74, licenseFilter76);
        org.apache.rat.Reporter.listLicenses(reportConfiguration67, licenseFilter76);
        java.util.SortedSet<org.apache.rat.license.ILicenseFamily> iLicenseFamilySet79 = reportConfiguration54.getLicenseFamilies(licenseFilter76);
        java.util.SortedSet<org.apache.rat.license.ILicense> iLicenseSet80 = reportConfiguration37.getLicenses(licenseFilter76);
        org.apache.rat.Reporter.listLicenseFamilies(reportConfiguration32, licenseFilter76);
        java.util.SortedSet<org.apache.rat.license.ILicense> iLicenseSet82 = defaults2.getLicenses(licenseFilter76);
        org.apache.rat.utils.ReportingSet<org.apache.rat.license.ILicense> iLicenseSet83 = new org.apache.rat.utils.ReportingSet<org.apache.rat.license.ILicense>(iLicenseSet82);
        org.apache.rat.license.ILicense iLicense84 = org.apache.rat.license.LicenseSetFactory.search("SpdxBuilder: ef7a8b13-64c3-4510-bb0c-dbf208e1e73f", iLicenseSet82);
        org.junit.Assert.assertNotNull(builder1);
        org.junit.Assert.assertNotNull(defaults2);
        org.junit.Assert.assertNull(filenameFilter5);
        org.junit.Assert.assertTrue("'" + licenseFilter6 + "' != '" + org.apache.rat.license.LicenseSetFactory.LicenseFilter.all + "'", licenseFilter6.equals(org.apache.rat.license.LicenseSetFactory.LicenseFilter.all));
        org.junit.Assert.assertNotNull(iLicenseSet7);
        org.junit.Assert.assertTrue("'" + addLicenseHeaders8 + "' != '" + org.apache.rat.config.AddLicenseHeaders.FALSE + "'", addLicenseHeaders8.equals(org.apache.rat.config.AddLicenseHeaders.FALSE));
        org.junit.Assert.assertNull(claimStatistic12);
        org.junit.Assert.assertTrue("'" + licenseFilter13 + "' != '" + org.apache.rat.license.LicenseSetFactory.LicenseFilter.all + "'", licenseFilter13.equals(org.apache.rat.license.LicenseSetFactory.LicenseFilter.all));
        org.junit.Assert.assertNull(filenameFilter18);
        org.junit.Assert.assertTrue("'" + licenseFilter19 + "' != '" + org.apache.rat.license.LicenseSetFactory.LicenseFilter.all + "'", licenseFilter19.equals(org.apache.rat.license.LicenseSetFactory.LicenseFilter.all));
        org.junit.Assert.assertNotNull(iLicenseSet20);
        org.junit.Assert.assertTrue("'" + addLicenseHeaders21 + "' != '" + org.apache.rat.config.AddLicenseHeaders.FALSE + "'", addLicenseHeaders21.equals(org.apache.rat.config.AddLicenseHeaders.FALSE));
        org.junit.Assert.assertNull(claimStatistic25);
        org.junit.Assert.assertTrue("'" + licenseFilter26 + "' != '" + org.apache.rat.license.LicenseSetFactory.LicenseFilter.all + "'", licenseFilter26.equals(org.apache.rat.license.LicenseSetFactory.LicenseFilter.all));
        org.junit.Assert.assertNotNull(iLicenseFamilySet29);
        org.junit.Assert.assertNotNull(iLicenseSet30);
        org.junit.Assert.assertNotNull(outputStreamIOSupplier33);
        org.junit.Assert.assertNull(claimStatistic38);
        org.junit.Assert.assertNull(claimStatistic41);
        org.junit.Assert.assertTrue("'" + options42 + "' != '" + org.apache.rat.utils.ReportingSet.Options.OVERWRITE + "'", options42.equals(org.apache.rat.utils.ReportingSet.Options.OVERWRITE));
        org.junit.Assert.assertNotNull(printWriterIOSupplier45);
        org.junit.Assert.assertNotNull(iLicenseFamilyArray48);
        org.junit.Assert.assertTrue("'" + boolean50 + "' != '" + false + "'", boolean50 == false);
        org.junit.Assert.assertNull(filenameFilter55);
        org.junit.Assert.assertTrue("'" + licenseFilter56 + "' != '" + org.apache.rat.license.LicenseSetFactory.LicenseFilter.all + "'", licenseFilter56.equals(org.apache.rat.license.LicenseSetFactory.LicenseFilter.all));
        org.junit.Assert.assertNotNull(iLicenseSet57);
        org.junit.Assert.assertTrue("'" + addLicenseHeaders58 + "' != '" + org.apache.rat.config.AddLicenseHeaders.FALSE + "'", addLicenseHeaders58.equals(org.apache.rat.config.AddLicenseHeaders.FALSE));
        org.junit.Assert.assertNull(claimStatistic62);
        org.junit.Assert.assertTrue("'" + licenseFilter63 + "' != '" + org.apache.rat.license.LicenseSetFactory.LicenseFilter.all + "'", licenseFilter63.equals(org.apache.rat.license.LicenseSetFactory.LicenseFilter.all));
        org.junit.Assert.assertNull(filenameFilter68);
        org.junit.Assert.assertTrue("'" + licenseFilter69 + "' != '" + org.apache.rat.license.LicenseSetFactory.LicenseFilter.all + "'", licenseFilter69.equals(org.apache.rat.license.LicenseSetFactory.LicenseFilter.all));
        org.junit.Assert.assertNotNull(iLicenseSet70);
        org.junit.Assert.assertTrue("'" + addLicenseHeaders71 + "' != '" + org.apache.rat.config.AddLicenseHeaders.FALSE + "'", addLicenseHeaders71.equals(org.apache.rat.config.AddLicenseHeaders.FALSE));
        org.junit.Assert.assertNull(claimStatistic75);
        org.junit.Assert.assertTrue("'" + licenseFilter76 + "' != '" + org.apache.rat.license.LicenseSetFactory.LicenseFilter.all + "'", licenseFilter76.equals(org.apache.rat.license.LicenseSetFactory.LicenseFilter.all));
        org.junit.Assert.assertNotNull(iLicenseFamilySet79);
        org.junit.Assert.assertNotNull(iLicenseSet80);
        org.junit.Assert.assertNotNull(iLicenseSet82);
        org.junit.Assert.assertNull(iLicense84);
    }

    @Test
    public void test13773() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest27.test13773");
        org.apache.rat.license.ILicenseFamilyBuilder iLicenseFamilyBuilder0 = new org.apache.rat.license.ILicenseFamilyBuilder();
        org.apache.rat.license.ILicenseFamily.Builder builder2 = iLicenseFamilyBuilder0.setLicenseFamilyCategory("Modified BSD License");
        java.lang.String str3 = iLicenseFamilyBuilder0.getCategory();
        org.apache.rat.license.ILicenseFamily.Builder builder5 = iLicenseFamilyBuilder0.setLicenseFamilyName("SpdxBuilder: 7d01b1b3-e7b9-4f85-b3dd-e0334dea8844");
        org.apache.rat.license.ILicenseFamily iLicenseFamily6 = iLicenseFamilyBuilder0.build();
        org.apache.rat.license.ILicenseFamily iLicenseFamily7 = iLicenseFamilyBuilder0.build();
        org.junit.Assert.assertNotNull(builder2);
        org.junit.Assert.assertEquals("'" + str3 + "' != '" + "Modified BSD License" + "'", str3, "Modified BSD License");
        org.junit.Assert.assertNotNull(builder5);
        org.junit.Assert.assertNotNull(iLicenseFamily6);
        org.junit.Assert.assertNotNull(iLicenseFamily7);
    }

    @Test
    public void test13774() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest27.test13774");
        org.apache.rat.report.claim.ClaimStatistic claimStatistic0 = new org.apache.rat.report.claim.ClaimStatistic();
        claimStatistic0.setNumApproved((int) (short) 10);
        java.util.Map<java.lang.String, java.lang.Integer> strMap3 = null;
        claimStatistic0.setDocumentCategoryMap(strMap3);
        claimStatistic0.setNumUnknown((int) '4');
        java.util.Map<java.lang.String, java.lang.Integer> strMap7 = null;
        claimStatistic0.setLicenseFileNameMap(strMap7);
        java.util.Map<java.lang.String, java.lang.Integer> strMap9 = claimStatistic0.getDocumentCategoryMap();
        java.util.Map<java.lang.String, java.lang.Integer> strMap10 = null;
        claimStatistic0.setLicenseFileCodeMap(strMap10);
        claimStatistic0.setNumGenerated(10);
        java.util.Map<java.lang.String, java.lang.Integer> strMap14 = claimStatistic0.getLicenseFileNameMap();
        org.junit.Assert.assertNull(strMap9);
        org.junit.Assert.assertNull(strMap14);
    }

    @Test
    public void test13775() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest27.test13775");
        org.apache.rat.configuration.builders.AllBuilder allBuilder0 = new org.apache.rat.configuration.builders.AllBuilder();
        java.lang.String str1 = allBuilder0.toString();
        java.util.List<org.apache.rat.analysis.IHeaderMatcher> iHeaderMatcherList2 = allBuilder0.getChildren();
        org.apache.rat.analysis.IHeaderMatcher iHeaderMatcher3 = allBuilder0.build();
        java.lang.String str4 = allBuilder0.toString();
        org.apache.rat.analysis.IHeaderMatcher iHeaderMatcher5 = allBuilder0.build();
        org.junit.Assert.assertEquals("'" + str1 + "' != '" + "AllBuilder:" + "'", str1, "AllBuilder:");
        org.junit.Assert.assertNotNull(iHeaderMatcherList2);
        org.junit.Assert.assertNotNull(iHeaderMatcher3);
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "AllBuilder:" + "'", str4, "AllBuilder:");
        org.junit.Assert.assertNotNull(iHeaderMatcher5);
    }

    @Test
    public void test13776() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest27.test13776");
        org.apache.rat.utils.DefaultLog defaultLog0 = org.apache.rat.utils.DefaultLog.INSTANCE;
        org.apache.rat.utils.Log log1 = null;
        org.apache.rat.ReportConfiguration reportConfiguration2 = new org.apache.rat.ReportConfiguration(log1);
        reportConfiguration2.addApprovedLicenseCategory(".cvsignore");
        org.apache.rat.utils.Log.Level level5 = org.apache.rat.utils.Log.Level.ERROR;
        reportConfiguration2.logFamilyCollisions(level5);
        defaultLog0.setLevel(level5);
        org.apache.rat.utils.Log log8 = null;
        org.apache.rat.ReportConfiguration reportConfiguration9 = new org.apache.rat.ReportConfiguration(log8);
        java.io.FilenameFilter filenameFilter10 = reportConfiguration9.getInputFileFilter();
        org.apache.rat.license.LicenseSetFactory.LicenseFilter licenseFilter11 = org.apache.rat.license.LicenseSetFactory.LicenseFilter.all;
        java.util.SortedSet<org.apache.rat.license.ILicense> iLicenseSet12 = reportConfiguration9.getLicenses(licenseFilter11);
        org.apache.rat.config.AddLicenseHeaders addLicenseHeaders13 = org.apache.rat.config.AddLicenseHeaders.FALSE;
        reportConfiguration9.setAddLicenseHeaders(addLicenseHeaders13);
        org.apache.rat.utils.Log log15 = null;
        org.apache.rat.ReportConfiguration reportConfiguration16 = new org.apache.rat.ReportConfiguration(log15);
        org.apache.rat.report.claim.ClaimStatistic claimStatistic17 = org.apache.rat.Reporter.report(reportConfiguration16);
        org.apache.rat.license.LicenseSetFactory.LicenseFilter licenseFilter18 = org.apache.rat.license.LicenseSetFactory.LicenseFilter.all;
        org.apache.rat.Reporter.listLicenses(reportConfiguration16, licenseFilter18);
        org.apache.rat.Reporter.listLicenses(reportConfiguration9, licenseFilter18);
        org.apache.rat.utils.Log log21 = null;
        org.apache.rat.ReportConfiguration reportConfiguration22 = new org.apache.rat.ReportConfiguration(log21);
        java.io.FilenameFilter filenameFilter23 = reportConfiguration22.getInputFileFilter();
        org.apache.rat.license.LicenseSetFactory.LicenseFilter licenseFilter24 = org.apache.rat.license.LicenseSetFactory.LicenseFilter.all;
        java.util.SortedSet<org.apache.rat.license.ILicense> iLicenseSet25 = reportConfiguration22.getLicenses(licenseFilter24);
        org.apache.rat.config.AddLicenseHeaders addLicenseHeaders26 = org.apache.rat.config.AddLicenseHeaders.FALSE;
        reportConfiguration22.setAddLicenseHeaders(addLicenseHeaders26);
        org.apache.rat.utils.Log log28 = null;
        org.apache.rat.ReportConfiguration reportConfiguration29 = new org.apache.rat.ReportConfiguration(log28);
        org.apache.rat.report.claim.ClaimStatistic claimStatistic30 = org.apache.rat.Reporter.report(reportConfiguration29);
        org.apache.rat.license.LicenseSetFactory.LicenseFilter licenseFilter31 = org.apache.rat.license.LicenseSetFactory.LicenseFilter.all;
        org.apache.rat.Reporter.listLicenses(reportConfiguration29, licenseFilter31);
        org.apache.rat.Reporter.listLicenses(reportConfiguration22, licenseFilter31);
        org.apache.rat.Reporter.listLicenses(reportConfiguration9, licenseFilter31);
        org.apache.rat.utils.Log log35 = null;
        org.apache.rat.ReportConfiguration reportConfiguration36 = new org.apache.rat.ReportConfiguration(log35);
        org.apache.commons.io.function.IOSupplier<java.io.OutputStream> outputStreamIOSupplier37 = reportConfiguration36.getOutput();
        reportConfiguration9.setOut(outputStreamIOSupplier37);
        org.apache.rat.utils.Log log39 = null;
        org.apache.rat.ReportConfiguration reportConfiguration40 = new org.apache.rat.ReportConfiguration(log39);
        org.apache.rat.report.claim.ClaimStatistic claimStatistic41 = org.apache.rat.Reporter.report(reportConfiguration40);
        org.apache.rat.utils.Log log42 = null;
        org.apache.rat.ReportConfiguration reportConfiguration43 = new org.apache.rat.ReportConfiguration(log42);
        org.apache.rat.report.claim.ClaimStatistic claimStatistic44 = org.apache.rat.Reporter.report(reportConfiguration43);
        org.apache.rat.utils.ReportingSet.Options options45 = org.apache.rat.utils.ReportingSet.Options.OVERWRITE;
        reportConfiguration43.licenseDuplicateOption(options45);
        reportConfiguration40.familyDuplicateOption(options45);
        reportConfiguration9.licenseDuplicateOption(options45);
        reportConfiguration9.addApprovedLicenseCategory("W3C Document Copyright");
        org.apache.rat.utils.Log log51 = null;
        org.apache.rat.ReportConfiguration reportConfiguration52 = new org.apache.rat.ReportConfiguration(log51);
        reportConfiguration52.addApprovedLicenseCategory(".cvsignore");
        org.apache.rat.utils.Log.Level level55 = org.apache.rat.utils.Log.Level.ERROR;
        reportConfiguration52.logLicenseCollisions(level55);
        reportConfiguration9.logLicenseCollisions(level55);
        defaultLog0.log(level55, "GNU General Public License, version 1");
        org.apache.rat.annotation.ApacheV2LicenseAppender apacheV2LicenseAppender61 = new org.apache.rat.annotation.ApacheV2LicenseAppender((org.apache.rat.utils.Log) defaultLog0, "W3C  ");
        org.apache.rat.annotation.ApacheV2LicenseAppender apacheV2LicenseAppender62 = new org.apache.rat.annotation.ApacheV2LicenseAppender((org.apache.rat.utils.Log) defaultLog0);
        org.apache.rat.annotation.ApacheV2LicenseAppender apacheV2LicenseAppender63 = new org.apache.rat.annotation.ApacheV2LicenseAppender((org.apache.rat.utils.Log) defaultLog0);
        org.apache.rat.annotation.ApacheV2LicenseAppender apacheV2LicenseAppender64 = new org.apache.rat.annotation.ApacheV2LicenseAppender((org.apache.rat.utils.Log) defaultLog0);
        org.apache.rat.ReportConfiguration reportConfiguration65 = new org.apache.rat.ReportConfiguration((org.apache.rat.utils.Log) defaultLog0);
        org.junit.Assert.assertNotNull(defaultLog0);
        org.junit.Assert.assertTrue("'" + level5 + "' != '" + org.apache.rat.utils.Log.Level.ERROR + "'", level5.equals(org.apache.rat.utils.Log.Level.ERROR));
        org.junit.Assert.assertNull(filenameFilter10);
        org.junit.Assert.assertTrue("'" + licenseFilter11 + "' != '" + org.apache.rat.license.LicenseSetFactory.LicenseFilter.all + "'", licenseFilter11.equals(org.apache.rat.license.LicenseSetFactory.LicenseFilter.all));
        org.junit.Assert.assertNotNull(iLicenseSet12);
        org.junit.Assert.assertTrue("'" + addLicenseHeaders13 + "' != '" + org.apache.rat.config.AddLicenseHeaders.FALSE + "'", addLicenseHeaders13.equals(org.apache.rat.config.AddLicenseHeaders.FALSE));
        org.junit.Assert.assertNull(claimStatistic17);
        org.junit.Assert.assertTrue("'" + licenseFilter18 + "' != '" + org.apache.rat.license.LicenseSetFactory.LicenseFilter.all + "'", licenseFilter18.equals(org.apache.rat.license.LicenseSetFactory.LicenseFilter.all));
        org.junit.Assert.assertNull(filenameFilter23);
        org.junit.Assert.assertTrue("'" + licenseFilter24 + "' != '" + org.apache.rat.license.LicenseSetFactory.LicenseFilter.all + "'", licenseFilter24.equals(org.apache.rat.license.LicenseSetFactory.LicenseFilter.all));
        org.junit.Assert.assertNotNull(iLicenseSet25);
        org.junit.Assert.assertTrue("'" + addLicenseHeaders26 + "' != '" + org.apache.rat.config.AddLicenseHeaders.FALSE + "'", addLicenseHeaders26.equals(org.apache.rat.config.AddLicenseHeaders.FALSE));
        org.junit.Assert.assertNull(claimStatistic30);
        org.junit.Assert.assertTrue("'" + licenseFilter31 + "' != '" + org.apache.rat.license.LicenseSetFactory.LicenseFilter.all + "'", licenseFilter31.equals(org.apache.rat.license.LicenseSetFactory.LicenseFilter.all));
        org.junit.Assert.assertNotNull(outputStreamIOSupplier37);
        org.junit.Assert.assertNull(claimStatistic41);
        org.junit.Assert.assertNull(claimStatistic44);
        org.junit.Assert.assertTrue("'" + options45 + "' != '" + org.apache.rat.utils.ReportingSet.Options.OVERWRITE + "'", options45.equals(org.apache.rat.utils.ReportingSet.Options.OVERWRITE));
        org.junit.Assert.assertTrue("'" + level55 + "' != '" + org.apache.rat.utils.Log.Level.ERROR + "'", level55.equals(org.apache.rat.utils.Log.Level.ERROR));
    }

    @Test
    public void test13777() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest27.test13777");
        org.apache.rat.analysis.matchers.CopyrightMatcher copyrightMatcher3 = new org.apache.rat.analysis.matchers.CopyrightMatcher("MathcerRefBuilder: TMF", "http://org/apache/rat/meta-data#LicenseFamilyName", "http://org/apache/rat/meta-data#HeaderSample null");
        org.apache.rat.analysis.IHeaderMatcher.State state4 = copyrightMatcher3.finalizeState();
        boolean boolean5 = state4.asBoolean();
        boolean boolean6 = state4.asBoolean();
        org.junit.Assert.assertTrue("'" + state4 + "' != '" + org.apache.rat.analysis.IHeaderMatcher.State.f + "'", state4.equals(org.apache.rat.analysis.IHeaderMatcher.State.f));
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
    }

    @Test
    public void test13778() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest27.test13778");
        org.apache.rat.utils.DefaultLog defaultLog0 = org.apache.rat.utils.DefaultLog.INSTANCE;
        org.apache.rat.license.ILicense.Builder builder1 = org.apache.rat.license.ILicense.builder();
        org.apache.rat.license.ILicense.Builder builder3 = builder1.setLicenseFamilyCategory("");
        org.apache.rat.analysis.matchers.CopyrightMatcher copyrightMatcher7 = new org.apache.rat.analysis.matchers.CopyrightMatcher("", "GPL1 ", "hi!");
        org.apache.rat.analysis.IHeaderMatcher.State state8 = copyrightMatcher7.finalizeState();
        org.apache.rat.license.ILicense.Builder builder9 = builder3.setMatcher((org.apache.rat.analysis.IHeaderMatcher) copyrightMatcher7);
        org.apache.rat.license.ILicense.Builder builder11 = builder9.setLicenseFamilyCategory("");
        defaultLog0.error((java.lang.Object) builder11);
        org.apache.rat.analysis.matchers.CopyrightMatcher copyrightMatcher16 = new org.apache.rat.analysis.matchers.CopyrightMatcher("", "GPL1 ", "hi!");
        copyrightMatcher16.reset();
        org.apache.rat.license.ILicense.Builder builder18 = builder11.setMatcher((org.apache.rat.analysis.IHeaderMatcher) copyrightMatcher16);
        org.apache.rat.configuration.builders.SpdxBuilder spdxBuilder19 = org.apache.rat.analysis.IHeaderMatcher.Builder.spdx();
        java.lang.String str20 = spdxBuilder19.toString();
        org.apache.rat.configuration.builders.SpdxBuilder spdxBuilder22 = spdxBuilder19.setName("ef7a8b13-64c3-4510-bb0c-dbf208e1e73f");
        org.apache.rat.license.ILicense.Builder builder23 = builder18.setMatcher((org.apache.rat.analysis.IHeaderMatcher.Builder) spdxBuilder19);
        org.apache.rat.license.ILicense.Builder builder25 = builder23.setName("DOJO ");
        org.apache.rat.license.ILicense.Builder builder27 = builder25.setLicenseFamilyCategory("RegexBuilder: http://org/apache/rat/meta-data#LicenseFamilyName");
        org.apache.rat.configuration.builders.MatcherRefBuilder matcherRefBuilder28 = org.apache.rat.analysis.IHeaderMatcher.Builder.matcherRef();
        boolean boolean29 = matcherRefBuilder28.hasId();
        java.util.Map<java.lang.String, org.apache.rat.analysis.IHeaderMatcher> strMap30 = null;
        org.apache.rat.configuration.builders.MatcherRefBuilder matcherRefBuilder31 = matcherRefBuilder28.setMatchers(strMap30);
        java.util.Map<java.lang.String, org.apache.rat.analysis.IHeaderMatcher> strMap32 = null;
        org.apache.rat.configuration.builders.MatcherRefBuilder matcherRefBuilder33 = matcherRefBuilder31.setMatchers(strMap32);
        org.apache.rat.license.ILicense.Builder builder34 = builder27.setMatcher((org.apache.rat.analysis.IHeaderMatcher.Builder) matcherRefBuilder31);
        org.apache.rat.license.ILicense.Builder builder36 = builder34.setName("c6c331d9-a8b3-43d2-9e3e-30eea558f9c7");
        org.apache.rat.license.ILicense.Builder builder38 = builder36.setId("AllBuilder:\nMathcerRefBuilder: null\nCopyright Builder: s:021187d7-27c2-4fd9-bc74-8cc00413ee52 e:null o:null\nMathcerRefBuilder: null\nAllBuilder:\nCopyright Builder: s:223f0aba-15d4-49e9-901e-5740c137aebf e:null o:null\nMathcerRefBuilder: null\nCopyright Builder: s:223f0aba-15d4-49e9-901e-5740c137aebf e:null o:null\nCopyright Builder: s:null e:null o:null\nCopyright Builder: s:null e:.cvsignore o:null\nCopyright Builder: s:null e:.cvsignore o:null\nCopyright Builder: s:OASIS e:null o:null\nAnyBuilder:\nMathcerRefBuilder: null\nCopyright Builder: s:null e:null o:null\nMathcerRefBuilder: null");
        org.junit.Assert.assertNotNull(defaultLog0);
        org.junit.Assert.assertNotNull(builder1);
        org.junit.Assert.assertNotNull(builder3);
        org.junit.Assert.assertTrue("'" + state8 + "' != '" + org.apache.rat.analysis.IHeaderMatcher.State.f + "'", state8.equals(org.apache.rat.analysis.IHeaderMatcher.State.f));
        org.junit.Assert.assertNotNull(builder9);
        org.junit.Assert.assertNotNull(builder11);
        org.junit.Assert.assertNotNull(builder18);
        org.junit.Assert.assertNotNull(spdxBuilder19);
        org.junit.Assert.assertEquals("'" + str20 + "' != '" + "SpdxBuilder: null" + "'", str20, "SpdxBuilder: null");
        org.junit.Assert.assertNotNull(spdxBuilder22);
        org.junit.Assert.assertNotNull(builder23);
        org.junit.Assert.assertNotNull(builder25);
        org.junit.Assert.assertNotNull(builder27);
        org.junit.Assert.assertNotNull(matcherRefBuilder28);
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + false + "'", boolean29 == false);
        org.junit.Assert.assertNotNull(matcherRefBuilder31);
        org.junit.Assert.assertNotNull(matcherRefBuilder33);
        org.junit.Assert.assertNotNull(builder34);
        org.junit.Assert.assertNotNull(builder36);
        org.junit.Assert.assertNotNull(builder38);
    }

    @Test
    public void test13779() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest27.test13779");
        java.io.File file0 = null;
        org.apache.rat.utils.Log log1 = null;
        org.apache.rat.ReportConfiguration reportConfiguration2 = new org.apache.rat.ReportConfiguration(log1);
        java.io.FilenameFilter filenameFilter3 = reportConfiguration2.getInputFileFilter();
        org.apache.rat.license.LicenseSetFactory.LicenseFilter licenseFilter4 = org.apache.rat.license.LicenseSetFactory.LicenseFilter.all;
        java.util.SortedSet<org.apache.rat.license.ILicense> iLicenseSet5 = reportConfiguration2.getLicenses(licenseFilter4);
        org.apache.rat.config.AddLicenseHeaders addLicenseHeaders6 = org.apache.rat.config.AddLicenseHeaders.FALSE;
        reportConfiguration2.setAddLicenseHeaders(addLicenseHeaders6);
        org.apache.rat.utils.Log log8 = null;
        org.apache.rat.ReportConfiguration reportConfiguration9 = new org.apache.rat.ReportConfiguration(log8);
        org.apache.rat.report.claim.ClaimStatistic claimStatistic10 = org.apache.rat.Reporter.report(reportConfiguration9);
        org.apache.rat.license.LicenseSetFactory.LicenseFilter licenseFilter11 = org.apache.rat.license.LicenseSetFactory.LicenseFilter.all;
        org.apache.rat.Reporter.listLicenses(reportConfiguration9, licenseFilter11);
        org.apache.rat.Reporter.listLicenses(reportConfiguration2, licenseFilter11);
        org.apache.rat.utils.Log log14 = null;
        org.apache.rat.ReportConfiguration reportConfiguration15 = new org.apache.rat.ReportConfiguration(log14);
        java.io.FilenameFilter filenameFilter16 = reportConfiguration15.getInputFileFilter();
        org.apache.rat.license.LicenseSetFactory.LicenseFilter licenseFilter17 = org.apache.rat.license.LicenseSetFactory.LicenseFilter.all;
        java.util.SortedSet<org.apache.rat.license.ILicense> iLicenseSet18 = reportConfiguration15.getLicenses(licenseFilter17);
        org.apache.rat.config.AddLicenseHeaders addLicenseHeaders19 = org.apache.rat.config.AddLicenseHeaders.FALSE;
        reportConfiguration15.setAddLicenseHeaders(addLicenseHeaders19);
        org.apache.rat.utils.Log log21 = null;
        org.apache.rat.ReportConfiguration reportConfiguration22 = new org.apache.rat.ReportConfiguration(log21);
        org.apache.rat.report.claim.ClaimStatistic claimStatistic23 = org.apache.rat.Reporter.report(reportConfiguration22);
        org.apache.rat.license.LicenseSetFactory.LicenseFilter licenseFilter24 = org.apache.rat.license.LicenseSetFactory.LicenseFilter.all;
        org.apache.rat.Reporter.listLicenses(reportConfiguration22, licenseFilter24);
        org.apache.rat.Reporter.listLicenses(reportConfiguration15, licenseFilter24);
        org.apache.rat.Reporter.listLicenses(reportConfiguration2, licenseFilter24);
        org.apache.rat.utils.Log log28 = null;
        org.apache.rat.ReportConfiguration reportConfiguration29 = new org.apache.rat.ReportConfiguration(log28);
        org.apache.commons.io.function.IOSupplier<java.io.OutputStream> outputStreamIOSupplier30 = reportConfiguration29.getOutput();
        reportConfiguration2.setOut(outputStreamIOSupplier30);
        org.apache.rat.utils.Log.Level level32 = org.apache.rat.utils.Log.Level.WARN;
        reportConfiguration2.logLicenseCollisions(level32);
        org.apache.commons.io.filefilter.IOFileFilter iOFileFilter34 = reportConfiguration2.getDirectoryFilter();
        java.nio.file.Path path35 = null;
        boolean boolean36 = iOFileFilter34.matches(path35);
        org.apache.rat.utils.Log log37 = null;
        org.apache.rat.ReportConfiguration reportConfiguration38 = new org.apache.rat.ReportConfiguration(log37);
        java.io.FilenameFilter filenameFilter39 = reportConfiguration38.getInputFileFilter();
        org.apache.rat.license.LicenseSetFactory.LicenseFilter licenseFilter40 = org.apache.rat.license.LicenseSetFactory.LicenseFilter.all;
        java.util.SortedSet<org.apache.rat.license.ILicense> iLicenseSet41 = reportConfiguration38.getLicenses(licenseFilter40);
        org.apache.rat.config.AddLicenseHeaders addLicenseHeaders42 = org.apache.rat.config.AddLicenseHeaders.FALSE;
        reportConfiguration38.setAddLicenseHeaders(addLicenseHeaders42);
        org.apache.rat.utils.Log log44 = null;
        org.apache.rat.ReportConfiguration reportConfiguration45 = new org.apache.rat.ReportConfiguration(log44);
        org.apache.rat.report.claim.ClaimStatistic claimStatistic46 = org.apache.rat.Reporter.report(reportConfiguration45);
        org.apache.rat.license.LicenseSetFactory.LicenseFilter licenseFilter47 = org.apache.rat.license.LicenseSetFactory.LicenseFilter.all;
        org.apache.rat.Reporter.listLicenses(reportConfiguration45, licenseFilter47);
        org.apache.rat.Reporter.listLicenses(reportConfiguration38, licenseFilter47);
        org.apache.rat.utils.Log log50 = null;
        org.apache.rat.ReportConfiguration reportConfiguration51 = new org.apache.rat.ReportConfiguration(log50);
        java.io.FilenameFilter filenameFilter52 = reportConfiguration51.getInputFileFilter();
        org.apache.rat.license.LicenseSetFactory.LicenseFilter licenseFilter53 = org.apache.rat.license.LicenseSetFactory.LicenseFilter.all;
        java.util.SortedSet<org.apache.rat.license.ILicense> iLicenseSet54 = reportConfiguration51.getLicenses(licenseFilter53);
        org.apache.rat.config.AddLicenseHeaders addLicenseHeaders55 = org.apache.rat.config.AddLicenseHeaders.FALSE;
        reportConfiguration51.setAddLicenseHeaders(addLicenseHeaders55);
        org.apache.rat.utils.Log log57 = null;
        org.apache.rat.ReportConfiguration reportConfiguration58 = new org.apache.rat.ReportConfiguration(log57);
        org.apache.rat.report.claim.ClaimStatistic claimStatistic59 = org.apache.rat.Reporter.report(reportConfiguration58);
        org.apache.rat.license.LicenseSetFactory.LicenseFilter licenseFilter60 = org.apache.rat.license.LicenseSetFactory.LicenseFilter.all;
        org.apache.rat.Reporter.listLicenses(reportConfiguration58, licenseFilter60);
        org.apache.rat.Reporter.listLicenses(reportConfiguration51, licenseFilter60);
        org.apache.rat.Reporter.listLicenses(reportConfiguration38, licenseFilter60);
        org.apache.rat.utils.Log log64 = null;
        org.apache.rat.ReportConfiguration reportConfiguration65 = new org.apache.rat.ReportConfiguration(log64);
        org.apache.commons.io.function.IOSupplier<java.io.OutputStream> outputStreamIOSupplier66 = reportConfiguration65.getOutput();
        reportConfiguration38.setOut(outputStreamIOSupplier66);
        org.apache.rat.utils.Log.Level level68 = org.apache.rat.utils.Log.Level.WARN;
        reportConfiguration38.logLicenseCollisions(level68);
        org.apache.commons.io.filefilter.IOFileFilter iOFileFilter70 = reportConfiguration38.getDirectoryFilter();
        java.nio.file.Path path71 = null;
        boolean boolean72 = iOFileFilter70.matches(path71);
        java.nio.file.Path path73 = null;
        java.nio.file.attribute.BasicFileAttributes basicFileAttributes74 = null;
        java.nio.file.FileVisitResult fileVisitResult75 = iOFileFilter70.accept(path73, basicFileAttributes74);
        org.apache.commons.io.filefilter.IOFileFilter iOFileFilter76 = iOFileFilter34.or(iOFileFilter70);
        java.nio.file.Path path77 = null;
        boolean boolean78 = iOFileFilter34.matches(path77);
        org.apache.commons.io.filefilter.IOFileFilter iOFileFilter79 = iOFileFilter34.negate();
        java.nio.file.Path path80 = null;
        boolean boolean81 = iOFileFilter79.matches(path80);
        // The following exception was thrown during execution in test generation
        try {
            org.apache.rat.walker.ArchiveWalker archiveWalker82 = new org.apache.rat.walker.ArchiveWalker(file0, (java.io.FilenameFilter) iOFileFilter79);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNull(filenameFilter3);
        org.junit.Assert.assertTrue("'" + licenseFilter4 + "' != '" + org.apache.rat.license.LicenseSetFactory.LicenseFilter.all + "'", licenseFilter4.equals(org.apache.rat.license.LicenseSetFactory.LicenseFilter.all));
        org.junit.Assert.assertNotNull(iLicenseSet5);
        org.junit.Assert.assertTrue("'" + addLicenseHeaders6 + "' != '" + org.apache.rat.config.AddLicenseHeaders.FALSE + "'", addLicenseHeaders6.equals(org.apache.rat.config.AddLicenseHeaders.FALSE));
        org.junit.Assert.assertNull(claimStatistic10);
        org.junit.Assert.assertTrue("'" + licenseFilter11 + "' != '" + org.apache.rat.license.LicenseSetFactory.LicenseFilter.all + "'", licenseFilter11.equals(org.apache.rat.license.LicenseSetFactory.LicenseFilter.all));
        org.junit.Assert.assertNull(filenameFilter16);
        org.junit.Assert.assertTrue("'" + licenseFilter17 + "' != '" + org.apache.rat.license.LicenseSetFactory.LicenseFilter.all + "'", licenseFilter17.equals(org.apache.rat.license.LicenseSetFactory.LicenseFilter.all));
        org.junit.Assert.assertNotNull(iLicenseSet18);
        org.junit.Assert.assertTrue("'" + addLicenseHeaders19 + "' != '" + org.apache.rat.config.AddLicenseHeaders.FALSE + "'", addLicenseHeaders19.equals(org.apache.rat.config.AddLicenseHeaders.FALSE));
        org.junit.Assert.assertNull(claimStatistic23);
        org.junit.Assert.assertTrue("'" + licenseFilter24 + "' != '" + org.apache.rat.license.LicenseSetFactory.LicenseFilter.all + "'", licenseFilter24.equals(org.apache.rat.license.LicenseSetFactory.LicenseFilter.all));
        org.junit.Assert.assertNotNull(outputStreamIOSupplier30);
        org.junit.Assert.assertTrue("'" + level32 + "' != '" + org.apache.rat.utils.Log.Level.WARN + "'", level32.equals(org.apache.rat.utils.Log.Level.WARN));
        org.junit.Assert.assertNotNull(iOFileFilter34);
        org.junit.Assert.assertTrue("'" + boolean36 + "' != '" + false + "'", boolean36 == false);
        org.junit.Assert.assertNull(filenameFilter39);
        org.junit.Assert.assertTrue("'" + licenseFilter40 + "' != '" + org.apache.rat.license.LicenseSetFactory.LicenseFilter.all + "'", licenseFilter40.equals(org.apache.rat.license.LicenseSetFactory.LicenseFilter.all));
        org.junit.Assert.assertNotNull(iLicenseSet41);
        org.junit.Assert.assertTrue("'" + addLicenseHeaders42 + "' != '" + org.apache.rat.config.AddLicenseHeaders.FALSE + "'", addLicenseHeaders42.equals(org.apache.rat.config.AddLicenseHeaders.FALSE));
        org.junit.Assert.assertNull(claimStatistic46);
        org.junit.Assert.assertTrue("'" + licenseFilter47 + "' != '" + org.apache.rat.license.LicenseSetFactory.LicenseFilter.all + "'", licenseFilter47.equals(org.apache.rat.license.LicenseSetFactory.LicenseFilter.all));
        org.junit.Assert.assertNull(filenameFilter52);
        org.junit.Assert.assertTrue("'" + licenseFilter53 + "' != '" + org.apache.rat.license.LicenseSetFactory.LicenseFilter.all + "'", licenseFilter53.equals(org.apache.rat.license.LicenseSetFactory.LicenseFilter.all));
        org.junit.Assert.assertNotNull(iLicenseSet54);
        org.junit.Assert.assertTrue("'" + addLicenseHeaders55 + "' != '" + org.apache.rat.config.AddLicenseHeaders.FALSE + "'", addLicenseHeaders55.equals(org.apache.rat.config.AddLicenseHeaders.FALSE));
        org.junit.Assert.assertNull(claimStatistic59);
        org.junit.Assert.assertTrue("'" + licenseFilter60 + "' != '" + org.apache.rat.license.LicenseSetFactory.LicenseFilter.all + "'", licenseFilter60.equals(org.apache.rat.license.LicenseSetFactory.LicenseFilter.all));
        org.junit.Assert.assertNotNull(outputStreamIOSupplier66);
        org.junit.Assert.assertTrue("'" + level68 + "' != '" + org.apache.rat.utils.Log.Level.WARN + "'", level68.equals(org.apache.rat.utils.Log.Level.WARN));
        org.junit.Assert.assertNotNull(iOFileFilter70);
        org.junit.Assert.assertTrue("'" + boolean72 + "' != '" + false + "'", boolean72 == false);
        org.junit.Assert.assertTrue("'" + fileVisitResult75 + "' != '" + java.nio.file.FileVisitResult.TERMINATE + "'", fileVisitResult75.equals(java.nio.file.FileVisitResult.TERMINATE));
        org.junit.Assert.assertNotNull(iOFileFilter76);
        org.junit.Assert.assertTrue("'" + boolean78 + "' != '" + false + "'", boolean78 == false);
        org.junit.Assert.assertNotNull(iOFileFilter79);
        org.junit.Assert.assertTrue("'" + boolean81 + "' != '" + true + "'", boolean81 == true);
    }

    @Test
    public void test13780() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest27.test13780");
        org.apache.rat.Defaults.Builder builder0 = org.apache.rat.Defaults.builder();
        org.apache.rat.Defaults defaults1 = builder0.build();
        org.apache.rat.Defaults.Builder builder2 = builder0.noDefault();
        org.apache.rat.Defaults.Builder builder4 = builder0.remove("AllBuilder:");
        org.apache.rat.Defaults.Builder builder6 = builder4.add("?????");
        org.apache.rat.Defaults.Builder builder8 = builder6.remove("");
        java.net.URL uRL9 = null;
        // The following exception was thrown during execution in test generation
        try {
            org.apache.rat.Defaults.Builder builder10 = builder8.remove(uRL9);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(builder0);
        org.junit.Assert.assertNotNull(defaults1);
        org.junit.Assert.assertNotNull(builder2);
        org.junit.Assert.assertNotNull(builder4);
        org.junit.Assert.assertNotNull(builder6);
        org.junit.Assert.assertNotNull(builder8);
    }

    @Test
    public void test13781() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest27.test13781");
        org.apache.rat.utils.Log log0 = null;
        org.apache.rat.ReportConfiguration reportConfiguration1 = new org.apache.rat.ReportConfiguration(log0);
        org.apache.commons.io.function.IOSupplier<java.io.OutputStream> outputStreamIOSupplier2 = reportConfiguration1.getOutput();
        reportConfiguration1.removeApprovedLicenseCategory("EF7A8B13-64C3-4510-BB0C-DBF208E1E73F");
        org.apache.rat.configuration.Format format6 = org.apache.rat.configuration.Format.XML;
        org.apache.rat.configuration.LicenseReader licenseReader7 = format6.licenseReader();
        org.apache.rat.configuration.MatcherReader matcherReader8 = format6.matcherReader();
        org.apache.rat.configuration.LicenseReader licenseReader9 = format6.licenseReader();
        java.util.SortedSet<org.apache.rat.license.ILicense> iLicenseSet10 = licenseReader9.readLicenses();
        org.apache.rat.license.ILicense iLicense11 = org.apache.rat.license.LicenseSetFactory.search("Datum [ name ='http://org/apache/rat/meta-data#LicenseFamilyCategory',value ='GPL1  ']", iLicenseSet10);
        org.apache.rat.utils.ReportingSet<org.apache.rat.license.ILicense> iLicenseSet12 = new org.apache.rat.utils.ReportingSet<org.apache.rat.license.ILicense>(iLicenseSet10);
        reportConfiguration1.addLicensesIfNotPresent((java.util.Collection<org.apache.rat.license.ILicense>) iLicenseSet10);
        org.apache.commons.io.filefilter.IOFileFilter iOFileFilter14 = reportConfiguration1.getDirectoryFilter();
        org.apache.rat.utils.Log log15 = null;
        org.apache.rat.ReportConfiguration reportConfiguration16 = new org.apache.rat.ReportConfiguration(log15);
        java.io.FilenameFilter filenameFilter17 = reportConfiguration16.getInputFileFilter();
        org.apache.rat.license.LicenseSetFactory.LicenseFilter licenseFilter18 = org.apache.rat.license.LicenseSetFactory.LicenseFilter.all;
        java.util.SortedSet<org.apache.rat.license.ILicense> iLicenseSet19 = reportConfiguration16.getLicenses(licenseFilter18);
        org.apache.rat.license.ILicenseFamily iLicenseFamily20 = null;
        reportConfiguration16.addFamily(iLicenseFamily20);
        reportConfiguration16.setCopyrightMessage("hi!");
        org.apache.rat.utils.Log log24 = null;
        org.apache.rat.ReportConfiguration reportConfiguration25 = new org.apache.rat.ReportConfiguration(log24);
        reportConfiguration25.addApprovedLicenseCategory(".cvsignore");
        org.apache.rat.utils.Log log28 = null;
        org.apache.rat.ReportConfiguration reportConfiguration29 = new org.apache.rat.ReportConfiguration(log28);
        java.io.FilenameFilter filenameFilter30 = reportConfiguration29.getInputFileFilter();
        org.apache.rat.license.LicenseSetFactory.LicenseFilter licenseFilter31 = org.apache.rat.license.LicenseSetFactory.LicenseFilter.all;
        java.util.SortedSet<org.apache.rat.license.ILicense> iLicenseSet32 = reportConfiguration29.getLicenses(licenseFilter31);
        reportConfiguration25.addLicensesIfNotPresent((java.util.Collection<org.apache.rat.license.ILicense>) iLicenseSet32);
        reportConfiguration25.setCopyrightMessage("MathcerRefBuilder: null");
        org.apache.commons.io.function.IOSupplier<java.io.InputStream> inputStreamIOSupplier36 = org.apache.rat.Defaults.getUnapprovedLicensesStyleSheet();
        reportConfiguration25.setStyleSheet(inputStreamIOSupplier36);
        reportConfiguration16.setStyleSheet(inputStreamIOSupplier36);
        reportConfiguration1.setStyleSheet(inputStreamIOSupplier36);
        reportConfiguration1.setStyleReport(false);
        reportConfiguration1.setCopyrightMessage("4a00cf7d-fe76-423e-917e-b03bbae6b8a5");
        org.junit.Assert.assertNotNull(outputStreamIOSupplier2);
        org.junit.Assert.assertTrue("'" + format6 + "' != '" + org.apache.rat.configuration.Format.XML + "'", format6.equals(org.apache.rat.configuration.Format.XML));
        org.junit.Assert.assertNotNull(licenseReader7);
        org.junit.Assert.assertNotNull(matcherReader8);
        org.junit.Assert.assertNotNull(licenseReader9);
        org.junit.Assert.assertNotNull(iLicenseSet10);
        org.junit.Assert.assertNull(iLicense11);
        org.junit.Assert.assertNotNull(iOFileFilter14);
        org.junit.Assert.assertNull(filenameFilter17);
        org.junit.Assert.assertTrue("'" + licenseFilter18 + "' != '" + org.apache.rat.license.LicenseSetFactory.LicenseFilter.all + "'", licenseFilter18.equals(org.apache.rat.license.LicenseSetFactory.LicenseFilter.all));
        org.junit.Assert.assertNotNull(iLicenseSet19);
        org.junit.Assert.assertNull(filenameFilter30);
        org.junit.Assert.assertTrue("'" + licenseFilter31 + "' != '" + org.apache.rat.license.LicenseSetFactory.LicenseFilter.all + "'", licenseFilter31.equals(org.apache.rat.license.LicenseSetFactory.LicenseFilter.all));
        org.junit.Assert.assertNotNull(iLicenseSet32);
        org.junit.Assert.assertNotNull(inputStreamIOSupplier36);
    }

    @Test
    public void test13782() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest27.test13782");
        org.apache.rat.license.ILicenseFamilyBuilder iLicenseFamilyBuilder0 = new org.apache.rat.license.ILicenseFamilyBuilder();
        java.lang.String str1 = iLicenseFamilyBuilder0.getCategory();
        org.apache.rat.license.ILicenseFamily.Builder builder3 = iLicenseFamilyBuilder0.setLicenseFamilyCategory("AL   ");
        org.apache.rat.license.ILicenseFamily.Builder builder5 = iLicenseFamilyBuilder0.setLicenseFamilyCategory("MIT  ");
        org.apache.rat.license.ILicenseFamily.Builder builder7 = iLicenseFamilyBuilder0.setLicenseFamilyName("4a00cf7d-fe76-423e-917e-b03bbae6b8a5");
        java.lang.String str8 = iLicenseFamilyBuilder0.getCategory();
        java.lang.String str9 = iLicenseFamilyBuilder0.getCategory();
        java.lang.String str10 = iLicenseFamilyBuilder0.getCategory();
        org.apache.rat.license.ILicenseFamily.Builder builder12 = iLicenseFamilyBuilder0.setLicenseFamilyCategory("336987e8-9ddb-46d8-8c1c-67ab8c91d714");
        org.junit.Assert.assertNull(str1);
        org.junit.Assert.assertNotNull(builder3);
        org.junit.Assert.assertNotNull(builder5);
        org.junit.Assert.assertNotNull(builder7);
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "MIT  " + "'", str8, "MIT  ");
        org.junit.Assert.assertEquals("'" + str9 + "' != '" + "MIT  " + "'", str9, "MIT  ");
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "MIT  " + "'", str10, "MIT  ");
        org.junit.Assert.assertNotNull(builder12);
    }

    @Test
    public void test13783() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest27.test13783");
        java.lang.String[] strArray5 = new java.lang.String[] { "http://org/apache/rat/meta-data#LicenseFamilyCategory", "Datum [ name ='http://org/apache/rat/meta-data#LicenseFamilyCategory',value ='GPL1  ']", "MANIFEST.MF", "AllBuilder:", "The MIT License" };
        org.apache.rat.utils.ReportingSet<java.lang.String> strSet6 = new org.apache.rat.utils.ReportingSet<java.lang.String>();
        boolean boolean7 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strSet6, strArray5);
        boolean boolean9 = strSet6.addIfNotPresent("http://org/apache/rat/meta-data#LicenseFamilyName");
        java.util.Iterator<java.lang.String> strItor10 = strSet6.iterator();
        java.lang.Object[] objArray11 = strSet6.toArray();
        org.apache.rat.utils.ReportingSet.Options options12 = null;
        org.apache.rat.utils.ReportingSet<java.lang.String> strSet13 = strSet6.setDuplicateOption(options12);
        boolean boolean15 = strSet13.add("bd015714-405b-4304-9faa-36efad80e6e6 GEN  ");
        java.lang.String str16 = strSet13.last();
        boolean boolean18 = strSet13.addIfNotPresent("TextBuilder: binary");
        org.junit.Assert.assertNotNull(strArray5);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + true + "'", boolean7 == true);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + true + "'", boolean9 == true);
        org.junit.Assert.assertNotNull(strItor10);
        org.junit.Assert.assertNotNull(objArray11);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray11), "[AllBuilder:, Datum [ name ='http://org/apache/rat/meta-data#LicenseFamilyCategory',value ='GPL1  '], MANIFEST.MF, The MIT License, http://org/apache/rat/meta-data#LicenseFamilyCategory, http://org/apache/rat/meta-data#LicenseFamilyName]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray11), "[AllBuilder:, Datum [ name ='http://org/apache/rat/meta-data#LicenseFamilyCategory',value ='GPL1  '], MANIFEST.MF, The MIT License, http://org/apache/rat/meta-data#LicenseFamilyCategory, http://org/apache/rat/meta-data#LicenseFamilyName]");
        org.junit.Assert.assertNotNull(strSet13);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + true + "'", boolean15 == true);
        org.junit.Assert.assertEquals("'" + str16 + "' != '" + "http://org/apache/rat/meta-data#LicenseFamilyName" + "'", str16, "http://org/apache/rat/meta-data#LicenseFamilyName");
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + true + "'", boolean18 == true);
    }

    @Test
    public void test13784() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest27.test13784");
        org.apache.rat.analysis.matchers.SimpleTextMatcher simpleTextMatcher3 = new org.apache.rat.analysis.matchers.SimpleTextMatcher("GPL3 ", "58515fd1-71f9-42a1-b033-b509624129a7");
        org.apache.rat.analysis.matchers.NotMatcher notMatcher4 = new org.apache.rat.analysis.matchers.NotMatcher("ebc30eb7-b3ea-4f39-baea-5fea4fa0278b", (org.apache.rat.analysis.IHeaderMatcher) simpleTextMatcher3);
        notMatcher4.reset();
    }

    @Test
    public void test13785() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest27.test13785");
        java.util.regex.Pattern pattern1 = null;
        org.apache.rat.analysis.matchers.SimpleRegexMatcher simpleRegexMatcher2 = new org.apache.rat.analysis.matchers.SimpleRegexMatcher("67cdaeae-343d-464a-9d9f-0986d3bc6047", pattern1);
    }

    @Test
    public void test13786() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest27.test13786");
        org.apache.commons.cli.CommandLine commandLine1 = null;
        // The following exception was thrown during execution in test generation
        try {
            org.apache.rat.ReportConfiguration reportConfiguration2 = org.apache.rat.Report.createConfiguration("TextBuilder: .giti", commandLine1);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
    }

    @Test
    public void test13787() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest27.test13787");
        org.apache.rat.license.ILicenseFamilyBuilder iLicenseFamilyBuilder0 = new org.apache.rat.license.ILicenseFamilyBuilder();
        java.lang.String str1 = iLicenseFamilyBuilder0.getCategory();
        org.apache.rat.license.ILicenseFamily.Builder builder3 = iLicenseFamilyBuilder0.setLicenseFamilyCategory("AL   ");
        org.apache.rat.license.ILicenseFamily.Builder builder5 = iLicenseFamilyBuilder0.setLicenseFamilyCategory("MIT  ");
        org.apache.rat.license.ILicenseFamily.Builder builder7 = iLicenseFamilyBuilder0.setLicenseFamilyName("4a00cf7d-fe76-423e-917e-b03bbae6b8a5");
        java.lang.String str8 = iLicenseFamilyBuilder0.getCategory();
        org.apache.rat.license.ILicenseFamily.Builder builder10 = iLicenseFamilyBuilder0.setLicenseFamilyName("8ecb8cce-06e4-400f-84d9-ad1cf6289fda");
        org.apache.rat.license.ILicenseFamily iLicenseFamily11 = iLicenseFamilyBuilder0.build();
        java.lang.String str12 = iLicenseFamilyBuilder0.getCategory();
        org.apache.rat.license.ILicenseFamily.Builder builder14 = iLicenseFamilyBuilder0.setLicenseFamilyName("641dafc1-13c3-45d4-8272-f36f10392c53");
        org.apache.rat.license.ILicenseFamily.Builder builder16 = iLicenseFamilyBuilder0.setLicenseFamilyCategory("d399d24a-dace-44c7-aa43-3a1c7a4eee3d");
        org.apache.rat.license.ILicenseFamily.Builder builder18 = iLicenseFamilyBuilder0.setLicenseFamilyCategory("");
        org.junit.Assert.assertNull(str1);
        org.junit.Assert.assertNotNull(builder3);
        org.junit.Assert.assertNotNull(builder5);
        org.junit.Assert.assertNotNull(builder7);
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "MIT  " + "'", str8, "MIT  ");
        org.junit.Assert.assertNotNull(builder10);
        org.junit.Assert.assertNotNull(iLicenseFamily11);
        org.junit.Assert.assertEquals("'" + str12 + "' != '" + "MIT  " + "'", str12, "MIT  ");
        org.junit.Assert.assertNotNull(builder14);
        org.junit.Assert.assertNotNull(builder16);
        org.junit.Assert.assertNotNull(builder18);
    }

    @Test
    public void test13788() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest27.test13788");
        org.apache.rat.ReportConfiguration reportConfiguration0 = null;
        org.apache.rat.utils.Log log1 = null;
        org.apache.rat.ReportConfiguration reportConfiguration2 = new org.apache.rat.ReportConfiguration(log1);
        org.apache.rat.license.ILicenseFamily[] iLicenseFamilyArray3 = new org.apache.rat.license.ILicenseFamily[] {};
        java.util.ArrayList<org.apache.rat.license.ILicenseFamily> iLicenseFamilyList4 = new java.util.ArrayList<org.apache.rat.license.ILicenseFamily>();
        boolean boolean5 = java.util.Collections.addAll((java.util.Collection<org.apache.rat.license.ILicenseFamily>) iLicenseFamilyList4, iLicenseFamilyArray3);
        reportConfiguration2.addFamilies((java.util.Collection<org.apache.rat.license.ILicenseFamily>) iLicenseFamilyList4);
        org.apache.rat.report.IReportable iReportable7 = null;
        reportConfiguration2.setReportable(iReportable7);
        reportConfiguration2.addApprovedLicenseCategory("http://org/apache/rat/meta-data#LicenseFamilyCategory");
        boolean boolean11 = reportConfiguration2.isAddingLicenses();
        org.apache.rat.Defaults.Builder builder12 = org.apache.rat.Defaults.builder();
        org.apache.rat.Defaults defaults13 = builder12.build();
        org.apache.rat.Defaults.Builder builder14 = builder12.noDefault();
        org.apache.rat.Defaults.Builder builder16 = builder12.remove("AllBuilder:");
        org.apache.rat.Defaults.Builder builder18 = builder12.remove("GNU General Public License, version 2");
        org.apache.rat.Defaults defaults19 = builder18.build();
        org.apache.rat.license.ILicense[] iLicenseArray20 = new org.apache.rat.license.ILicense[] {};
        java.util.TreeSet<org.apache.rat.license.ILicense> iLicenseSet21 = new java.util.TreeSet<org.apache.rat.license.ILicense>();
        boolean boolean22 = java.util.Collections.addAll((java.util.Collection<org.apache.rat.license.ILicense>) iLicenseSet21, iLicenseArray20);
        java.lang.String[] strArray35 = new java.lang.String[] { "GPL2 ", "GPL1 ", "notice", "http://org/apache/rat/meta-data#LicenseFamilyName", "notice", "GPL2 ", "http://org/apache/rat/meta-data#LicenseFamilyName", "", "GPL2 ", "", "GPL1 ", "hi!" };
        java.util.ArrayList<java.lang.String> strList36 = new java.util.ArrayList<java.lang.String>();
        boolean boolean37 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strList36, strArray35);
        org.apache.rat.license.LicenseSetFactory licenseSetFactory38 = new org.apache.rat.license.LicenseSetFactory((java.util.SortedSet<org.apache.rat.license.ILicense>) iLicenseSet21, (java.util.Collection<java.lang.String>) strList36);
        org.apache.rat.license.LicenseSetFactory.LicenseFilter licenseFilter39 = org.apache.rat.license.LicenseSetFactory.LicenseFilter.none;
        java.util.SortedSet<java.lang.String> strSet40 = licenseSetFactory38.getLicenseFamilyIds(licenseFilter39);
        java.util.SortedSet<org.apache.rat.license.ILicenseFamily> iLicenseFamilySet41 = defaults19.getLicenseFamilies(licenseFilter39);
        org.apache.rat.utils.Log log42 = null;
        org.apache.rat.ReportConfiguration reportConfiguration43 = new org.apache.rat.ReportConfiguration(log42);
        reportConfiguration43.addApprovedLicenseCategory(".cvsignore");
        org.apache.rat.utils.Log log46 = null;
        org.apache.rat.ReportConfiguration reportConfiguration47 = new org.apache.rat.ReportConfiguration(log46);
        java.io.FilenameFilter filenameFilter48 = reportConfiguration47.getInputFileFilter();
        org.apache.rat.license.LicenseSetFactory.LicenseFilter licenseFilter49 = org.apache.rat.license.LicenseSetFactory.LicenseFilter.all;
        java.util.SortedSet<org.apache.rat.license.ILicense> iLicenseSet50 = reportConfiguration47.getLicenses(licenseFilter49);
        reportConfiguration43.addLicensesIfNotPresent((java.util.Collection<org.apache.rat.license.ILicense>) iLicenseSet50);
        java.io.FilenameFilter filenameFilter52 = reportConfiguration43.getInputFileFilter();
        org.apache.rat.utils.Log log53 = null;
        org.apache.rat.ReportConfiguration reportConfiguration54 = new org.apache.rat.ReportConfiguration(log53);
        java.io.FilenameFilter filenameFilter55 = reportConfiguration54.getInputFileFilter();
        org.apache.rat.license.LicenseSetFactory.LicenseFilter licenseFilter56 = org.apache.rat.license.LicenseSetFactory.LicenseFilter.all;
        java.util.SortedSet<org.apache.rat.license.ILicense> iLicenseSet57 = reportConfiguration54.getLicenses(licenseFilter56);
        org.apache.rat.config.AddLicenseHeaders addLicenseHeaders58 = org.apache.rat.config.AddLicenseHeaders.FALSE;
        reportConfiguration54.setAddLicenseHeaders(addLicenseHeaders58);
        org.apache.rat.utils.Log log60 = null;
        org.apache.rat.ReportConfiguration reportConfiguration61 = new org.apache.rat.ReportConfiguration(log60);
        org.apache.rat.report.claim.ClaimStatistic claimStatistic62 = org.apache.rat.Reporter.report(reportConfiguration61);
        org.apache.rat.license.LicenseSetFactory.LicenseFilter licenseFilter63 = org.apache.rat.license.LicenseSetFactory.LicenseFilter.all;
        org.apache.rat.Reporter.listLicenses(reportConfiguration61, licenseFilter63);
        org.apache.rat.Reporter.listLicenses(reportConfiguration54, licenseFilter63);
        org.apache.rat.utils.Log log66 = null;
        org.apache.rat.ReportConfiguration reportConfiguration67 = new org.apache.rat.ReportConfiguration(log66);
        java.io.FilenameFilter filenameFilter68 = reportConfiguration67.getInputFileFilter();
        org.apache.rat.license.LicenseSetFactory.LicenseFilter licenseFilter69 = org.apache.rat.license.LicenseSetFactory.LicenseFilter.all;
        java.util.SortedSet<org.apache.rat.license.ILicense> iLicenseSet70 = reportConfiguration67.getLicenses(licenseFilter69);
        org.apache.rat.config.AddLicenseHeaders addLicenseHeaders71 = org.apache.rat.config.AddLicenseHeaders.FALSE;
        reportConfiguration67.setAddLicenseHeaders(addLicenseHeaders71);
        org.apache.rat.utils.Log log73 = null;
        org.apache.rat.ReportConfiguration reportConfiguration74 = new org.apache.rat.ReportConfiguration(log73);
        org.apache.rat.report.claim.ClaimStatistic claimStatistic75 = org.apache.rat.Reporter.report(reportConfiguration74);
        org.apache.rat.license.LicenseSetFactory.LicenseFilter licenseFilter76 = org.apache.rat.license.LicenseSetFactory.LicenseFilter.all;
        org.apache.rat.Reporter.listLicenses(reportConfiguration74, licenseFilter76);
        org.apache.rat.Reporter.listLicenses(reportConfiguration67, licenseFilter76);
        java.util.SortedSet<org.apache.rat.license.ILicenseFamily> iLicenseFamilySet79 = reportConfiguration54.getLicenseFamilies(licenseFilter76);
        org.apache.rat.Reporter.listLicenseFamilies(reportConfiguration43, licenseFilter76);
        java.util.SortedSet<org.apache.rat.license.ILicenseFamily> iLicenseFamilySet81 = defaults19.getLicenseFamilies(licenseFilter76);
        java.util.SortedSet<org.apache.rat.license.ILicense> iLicenseSet82 = reportConfiguration2.getLicenses(licenseFilter76);
        // The following exception was thrown during execution in test generation
        try {
            org.apache.rat.Reporter.listLicenses(reportConfiguration0, licenseFilter76);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(iLicenseFamilyArray3);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
        org.junit.Assert.assertNotNull(builder12);
        org.junit.Assert.assertNotNull(defaults13);
        org.junit.Assert.assertNotNull(builder14);
        org.junit.Assert.assertNotNull(builder16);
        org.junit.Assert.assertNotNull(builder18);
        org.junit.Assert.assertNotNull(defaults19);
        org.junit.Assert.assertNotNull(iLicenseArray20);
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + false + "'", boolean22 == false);
        org.junit.Assert.assertNotNull(strArray35);
        org.junit.Assert.assertTrue("'" + boolean37 + "' != '" + true + "'", boolean37 == true);
        org.junit.Assert.assertTrue("'" + licenseFilter39 + "' != '" + org.apache.rat.license.LicenseSetFactory.LicenseFilter.none + "'", licenseFilter39.equals(org.apache.rat.license.LicenseSetFactory.LicenseFilter.none));
        org.junit.Assert.assertNotNull(strSet40);
        org.junit.Assert.assertNotNull(iLicenseFamilySet41);
        org.junit.Assert.assertNull(filenameFilter48);
        org.junit.Assert.assertTrue("'" + licenseFilter49 + "' != '" + org.apache.rat.license.LicenseSetFactory.LicenseFilter.all + "'", licenseFilter49.equals(org.apache.rat.license.LicenseSetFactory.LicenseFilter.all));
        org.junit.Assert.assertNotNull(iLicenseSet50);
        org.junit.Assert.assertNull(filenameFilter52);
        org.junit.Assert.assertNull(filenameFilter55);
        org.junit.Assert.assertTrue("'" + licenseFilter56 + "' != '" + org.apache.rat.license.LicenseSetFactory.LicenseFilter.all + "'", licenseFilter56.equals(org.apache.rat.license.LicenseSetFactory.LicenseFilter.all));
        org.junit.Assert.assertNotNull(iLicenseSet57);
        org.junit.Assert.assertTrue("'" + addLicenseHeaders58 + "' != '" + org.apache.rat.config.AddLicenseHeaders.FALSE + "'", addLicenseHeaders58.equals(org.apache.rat.config.AddLicenseHeaders.FALSE));
        org.junit.Assert.assertNull(claimStatistic62);
        org.junit.Assert.assertTrue("'" + licenseFilter63 + "' != '" + org.apache.rat.license.LicenseSetFactory.LicenseFilter.all + "'", licenseFilter63.equals(org.apache.rat.license.LicenseSetFactory.LicenseFilter.all));
        org.junit.Assert.assertNull(filenameFilter68);
        org.junit.Assert.assertTrue("'" + licenseFilter69 + "' != '" + org.apache.rat.license.LicenseSetFactory.LicenseFilter.all + "'", licenseFilter69.equals(org.apache.rat.license.LicenseSetFactory.LicenseFilter.all));
        org.junit.Assert.assertNotNull(iLicenseSet70);
        org.junit.Assert.assertTrue("'" + addLicenseHeaders71 + "' != '" + org.apache.rat.config.AddLicenseHeaders.FALSE + "'", addLicenseHeaders71.equals(org.apache.rat.config.AddLicenseHeaders.FALSE));
        org.junit.Assert.assertNull(claimStatistic75);
        org.junit.Assert.assertTrue("'" + licenseFilter76 + "' != '" + org.apache.rat.license.LicenseSetFactory.LicenseFilter.all + "'", licenseFilter76.equals(org.apache.rat.license.LicenseSetFactory.LicenseFilter.all));
        org.junit.Assert.assertNotNull(iLicenseFamilySet79);
        org.junit.Assert.assertNotNull(iLicenseFamilySet81);
        org.junit.Assert.assertNotNull(iLicenseSet82);
    }

    @Test
    public void test13789() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest27.test13789");
        boolean boolean1 = org.apache.rat.document.impl.guesser.BinaryGuesser.isBinary("GPL3 ");
        org.junit.Assert.assertTrue("'" + boolean1 + "' != '" + false + "'", boolean1 == false);
    }

    @Test
    public void test13790() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest27.test13790");
        org.apache.rat.utils.DefaultLog defaultLog0 = org.apache.rat.utils.DefaultLog.INSTANCE;
        org.apache.rat.license.ILicense.Builder builder1 = org.apache.rat.license.ILicense.builder();
        org.apache.rat.license.ILicense.Builder builder3 = builder1.setLicenseFamilyCategory("");
        org.apache.rat.analysis.matchers.CopyrightMatcher copyrightMatcher7 = new org.apache.rat.analysis.matchers.CopyrightMatcher("", "GPL1 ", "hi!");
        org.apache.rat.analysis.IHeaderMatcher.State state8 = copyrightMatcher7.finalizeState();
        org.apache.rat.license.ILicense.Builder builder9 = builder3.setMatcher((org.apache.rat.analysis.IHeaderMatcher) copyrightMatcher7);
        org.apache.rat.license.ILicense.Builder builder11 = builder9.setLicenseFamilyCategory("");
        defaultLog0.error((java.lang.Object) builder11);
        org.apache.rat.analysis.matchers.CopyrightMatcher copyrightMatcher16 = new org.apache.rat.analysis.matchers.CopyrightMatcher("", "GPL1 ", "hi!");
        copyrightMatcher16.reset();
        org.apache.rat.license.ILicense.Builder builder18 = builder11.setMatcher((org.apache.rat.analysis.IHeaderMatcher) copyrightMatcher16);
        org.apache.rat.configuration.builders.SpdxBuilder spdxBuilder19 = org.apache.rat.analysis.IHeaderMatcher.Builder.spdx();
        java.lang.String str20 = spdxBuilder19.toString();
        org.apache.rat.configuration.builders.SpdxBuilder spdxBuilder22 = spdxBuilder19.setName("ef7a8b13-64c3-4510-bb0c-dbf208e1e73f");
        org.apache.rat.license.ILicense.Builder builder23 = builder18.setMatcher((org.apache.rat.analysis.IHeaderMatcher.Builder) spdxBuilder19);
        org.apache.rat.license.ILicense.Builder builder25 = builder23.setName("DOJO ");
        org.apache.rat.license.ILicense.Builder builder27 = builder25.setLicenseFamilyCategory("RegexBuilder: http://org/apache/rat/meta-data#LicenseFamilyName");
        org.apache.rat.configuration.builders.MatcherRefBuilder matcherRefBuilder28 = org.apache.rat.analysis.IHeaderMatcher.Builder.matcherRef();
        boolean boolean29 = matcherRefBuilder28.hasId();
        java.util.Map<java.lang.String, org.apache.rat.analysis.IHeaderMatcher> strMap30 = null;
        org.apache.rat.configuration.builders.MatcherRefBuilder matcherRefBuilder31 = matcherRefBuilder28.setMatchers(strMap30);
        java.util.Map<java.lang.String, org.apache.rat.analysis.IHeaderMatcher> strMap32 = null;
        org.apache.rat.configuration.builders.MatcherRefBuilder matcherRefBuilder33 = matcherRefBuilder31.setMatchers(strMap32);
        org.apache.rat.license.ILicense.Builder builder34 = builder27.setMatcher((org.apache.rat.analysis.IHeaderMatcher.Builder) matcherRefBuilder31);
        org.apache.rat.license.ILicense.Builder builder36 = builder34.setLicenseFamilyCategory("Datum");
        org.apache.rat.configuration.builders.CopyrightBuilder copyrightBuilder37 = org.apache.rat.analysis.IHeaderMatcher.Builder.copyright();
        java.lang.String str38 = copyrightBuilder37.toString();
        boolean boolean39 = copyrightBuilder37.hasId();
        org.apache.rat.configuration.builders.CopyrightBuilder copyrightBuilder41 = copyrightBuilder37.setEnd("6486879ffc814b57aec7c4c77d540c30");
        org.apache.rat.license.ILicense.Builder builder42 = builder34.setMatcher((org.apache.rat.analysis.IHeaderMatcher.Builder) copyrightBuilder37);
        java.lang.String str43 = copyrightBuilder37.toString();
        org.junit.Assert.assertNotNull(defaultLog0);
        org.junit.Assert.assertNotNull(builder1);
        org.junit.Assert.assertNotNull(builder3);
        org.junit.Assert.assertTrue("'" + state8 + "' != '" + org.apache.rat.analysis.IHeaderMatcher.State.f + "'", state8.equals(org.apache.rat.analysis.IHeaderMatcher.State.f));
        org.junit.Assert.assertNotNull(builder9);
        org.junit.Assert.assertNotNull(builder11);
        org.junit.Assert.assertNotNull(builder18);
        org.junit.Assert.assertNotNull(spdxBuilder19);
        org.junit.Assert.assertEquals("'" + str20 + "' != '" + "SpdxBuilder: null" + "'", str20, "SpdxBuilder: null");
        org.junit.Assert.assertNotNull(spdxBuilder22);
        org.junit.Assert.assertNotNull(builder23);
        org.junit.Assert.assertNotNull(builder25);
        org.junit.Assert.assertNotNull(builder27);
        org.junit.Assert.assertNotNull(matcherRefBuilder28);
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + false + "'", boolean29 == false);
        org.junit.Assert.assertNotNull(matcherRefBuilder31);
        org.junit.Assert.assertNotNull(matcherRefBuilder33);
        org.junit.Assert.assertNotNull(builder34);
        org.junit.Assert.assertNotNull(builder36);
        org.junit.Assert.assertNotNull(copyrightBuilder37);
        org.junit.Assert.assertEquals("'" + str38 + "' != '" + "Copyright Builder: s:null e:null o:null" + "'", str38, "Copyright Builder: s:null e:null o:null");
        org.junit.Assert.assertTrue("'" + boolean39 + "' != '" + false + "'", boolean39 == false);
        org.junit.Assert.assertNotNull(copyrightBuilder41);
        org.junit.Assert.assertNotNull(builder42);
        org.junit.Assert.assertEquals("'" + str43 + "' != '" + "Copyright Builder: s:null e:6486879ffc814b57aec7c4c77d540c30 o:null" + "'", str43, "Copyright Builder: s:null e:6486879ffc814b57aec7c4c77d540c30 o:null");
    }

    @Test
    public void test13791() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest27.test13791");
        boolean boolean1 = org.apache.rat.document.impl.guesser.BinaryGuesser.isImage("d0774232-cdef-4507-a8b6-ac22a273dde3");
        org.junit.Assert.assertTrue("'" + boolean1 + "' != '" + false + "'", boolean1 == false);
    }

    @Test
    public void test13792() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest27.test13792");
        org.apache.rat.utils.Log log0 = null;
        org.apache.rat.ReportConfiguration reportConfiguration1 = new org.apache.rat.ReportConfiguration(log0);
        org.apache.rat.report.claim.ClaimStatistic claimStatistic2 = org.apache.rat.Reporter.report(reportConfiguration1);
        reportConfiguration1.addApprovedLicenseCategory("Copyright Builder: s:null e:null o:null");
        java.util.SortedSet<java.lang.String> strSet5 = reportConfiguration1.getApprovedLicenseCategories();
        boolean boolean6 = reportConfiguration1.isAddingLicensesForced();
        reportConfiguration1.removeApprovedLicenseCategory("SpdxBuilder: null f1fc8dc8-990d-4a2d-9540-4e9ece3bd92c");
        reportConfiguration1.addApprovedLicenseCategory("org/apache/rat/plain-rat.xsl");
        org.junit.Assert.assertNull(claimStatistic2);
        org.junit.Assert.assertNotNull(strSet5);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
    }

    @Test
    public void test13793() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest27.test13793");
        java.lang.String[] strArray5 = new java.lang.String[] { "http://org/apache/rat/meta-data#LicenseFamilyCategory", "Datum [ name ='http://org/apache/rat/meta-data#LicenseFamilyCategory',value ='GPL1  ']", "MANIFEST.MF", "AllBuilder:", "The MIT License" };
        org.apache.rat.utils.ReportingSet<java.lang.String> strSet6 = new org.apache.rat.utils.ReportingSet<java.lang.String>();
        boolean boolean7 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strSet6, strArray5);
        boolean boolean9 = strSet6.addIfNotPresent("http://org/apache/rat/meta-data#LicenseFamilyName");
        java.util.Iterator<java.lang.String> strItor10 = strSet6.iterator();
        java.lang.Object[] objArray11 = strSet6.toArray();
        java.lang.String[] strArray17 = new java.lang.String[] { "http://org/apache/rat/meta-data#LicenseFamilyCategory", "Datum [ name ='http://org/apache/rat/meta-data#LicenseFamilyCategory',value ='GPL1  ']", "MANIFEST.MF", "AllBuilder:", "The MIT License" };
        org.apache.rat.utils.ReportingSet<java.lang.String> strSet18 = new org.apache.rat.utils.ReportingSet<java.lang.String>();
        boolean boolean19 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strSet18, strArray17);
        boolean boolean21 = strSet18.addIfNotPresent("http://org/apache/rat/meta-data#LicenseFamilyName");
        java.util.SortedSet<org.apache.rat.license.ILicenseFamily> iLicenseFamilySet22 = org.apache.rat.license.LicenseFamilySetFactory.emptyLicenseFamilySet();
        boolean boolean23 = strSet18.removeAll((java.util.Collection<org.apache.rat.license.ILicenseFamily>) iLicenseFamilySet22);
        boolean boolean24 = strSet6.containsAll((java.util.Collection<org.apache.rat.license.ILicenseFamily>) iLicenseFamilySet22);
        java.util.Spliterator<java.lang.String> strSpliterator25 = strSet6.spliterator();
        org.apache.rat.utils.DefaultLog defaultLog26 = org.apache.rat.utils.DefaultLog.INSTANCE;
        org.apache.rat.utils.Log log27 = null;
        org.apache.rat.ReportConfiguration reportConfiguration28 = new org.apache.rat.ReportConfiguration(log27);
        reportConfiguration28.addApprovedLicenseCategory(".cvsignore");
        org.apache.rat.utils.Log.Level level31 = org.apache.rat.utils.Log.Level.ERROR;
        reportConfiguration28.logFamilyCollisions(level31);
        defaultLog26.setLevel(level31);
        org.apache.rat.utils.Log log34 = null;
        org.apache.rat.ReportConfiguration reportConfiguration35 = new org.apache.rat.ReportConfiguration(log34);
        java.io.FilenameFilter filenameFilter36 = reportConfiguration35.getInputFileFilter();
        org.apache.rat.license.LicenseSetFactory.LicenseFilter licenseFilter37 = org.apache.rat.license.LicenseSetFactory.LicenseFilter.all;
        java.util.SortedSet<org.apache.rat.license.ILicense> iLicenseSet38 = reportConfiguration35.getLicenses(licenseFilter37);
        org.apache.rat.config.AddLicenseHeaders addLicenseHeaders39 = org.apache.rat.config.AddLicenseHeaders.FALSE;
        reportConfiguration35.setAddLicenseHeaders(addLicenseHeaders39);
        org.apache.rat.utils.Log log41 = null;
        org.apache.rat.ReportConfiguration reportConfiguration42 = new org.apache.rat.ReportConfiguration(log41);
        org.apache.rat.report.claim.ClaimStatistic claimStatistic43 = org.apache.rat.Reporter.report(reportConfiguration42);
        org.apache.rat.license.LicenseSetFactory.LicenseFilter licenseFilter44 = org.apache.rat.license.LicenseSetFactory.LicenseFilter.all;
        org.apache.rat.Reporter.listLicenses(reportConfiguration42, licenseFilter44);
        org.apache.rat.Reporter.listLicenses(reportConfiguration35, licenseFilter44);
        org.apache.rat.utils.Log log47 = null;
        org.apache.rat.ReportConfiguration reportConfiguration48 = new org.apache.rat.ReportConfiguration(log47);
        java.io.FilenameFilter filenameFilter49 = reportConfiguration48.getInputFileFilter();
        org.apache.rat.license.LicenseSetFactory.LicenseFilter licenseFilter50 = org.apache.rat.license.LicenseSetFactory.LicenseFilter.all;
        java.util.SortedSet<org.apache.rat.license.ILicense> iLicenseSet51 = reportConfiguration48.getLicenses(licenseFilter50);
        org.apache.rat.config.AddLicenseHeaders addLicenseHeaders52 = org.apache.rat.config.AddLicenseHeaders.FALSE;
        reportConfiguration48.setAddLicenseHeaders(addLicenseHeaders52);
        org.apache.rat.utils.Log log54 = null;
        org.apache.rat.ReportConfiguration reportConfiguration55 = new org.apache.rat.ReportConfiguration(log54);
        org.apache.rat.report.claim.ClaimStatistic claimStatistic56 = org.apache.rat.Reporter.report(reportConfiguration55);
        org.apache.rat.license.LicenseSetFactory.LicenseFilter licenseFilter57 = org.apache.rat.license.LicenseSetFactory.LicenseFilter.all;
        org.apache.rat.Reporter.listLicenses(reportConfiguration55, licenseFilter57);
        org.apache.rat.Reporter.listLicenses(reportConfiguration48, licenseFilter57);
        org.apache.rat.Reporter.listLicenses(reportConfiguration35, licenseFilter57);
        org.apache.rat.utils.Log log61 = null;
        org.apache.rat.ReportConfiguration reportConfiguration62 = new org.apache.rat.ReportConfiguration(log61);
        org.apache.commons.io.function.IOSupplier<java.io.OutputStream> outputStreamIOSupplier63 = reportConfiguration62.getOutput();
        reportConfiguration35.setOut(outputStreamIOSupplier63);
        org.apache.rat.utils.Log log65 = null;
        org.apache.rat.ReportConfiguration reportConfiguration66 = new org.apache.rat.ReportConfiguration(log65);
        org.apache.rat.report.claim.ClaimStatistic claimStatistic67 = org.apache.rat.Reporter.report(reportConfiguration66);
        org.apache.rat.utils.Log log68 = null;
        org.apache.rat.ReportConfiguration reportConfiguration69 = new org.apache.rat.ReportConfiguration(log68);
        org.apache.rat.report.claim.ClaimStatistic claimStatistic70 = org.apache.rat.Reporter.report(reportConfiguration69);
        org.apache.rat.utils.ReportingSet.Options options71 = org.apache.rat.utils.ReportingSet.Options.OVERWRITE;
        reportConfiguration69.licenseDuplicateOption(options71);
        reportConfiguration66.familyDuplicateOption(options71);
        reportConfiguration35.licenseDuplicateOption(options71);
        reportConfiguration35.addApprovedLicenseCategory("W3C Document Copyright");
        org.apache.rat.utils.Log log77 = null;
        org.apache.rat.ReportConfiguration reportConfiguration78 = new org.apache.rat.ReportConfiguration(log77);
        reportConfiguration78.addApprovedLicenseCategory(".cvsignore");
        org.apache.rat.utils.Log.Level level81 = org.apache.rat.utils.Log.Level.ERROR;
        reportConfiguration78.logLicenseCollisions(level81);
        reportConfiguration35.logLicenseCollisions(level81);
        defaultLog26.log(level81, "GNU General Public License, version 1");
        org.apache.rat.utils.ReportingSet<java.lang.String> strSet86 = strSet6.setLog((org.apache.rat.utils.Log) defaultLog26);
        int int87 = strSet6.size();
        org.apache.rat.utils.ReportingSet<java.lang.String> strSet90 = strSet6.subSet("7d01b1b3-e7b9-4f85-b3dd-e0334dea8844", "MathcerRefBuilder: null");
        // The following exception was thrown during execution in test generation
        try {
            org.apache.rat.utils.ReportingSet<java.lang.String> strSet93 = strSet6.subSet("TextBuilder: Copyright Builder: s...", "7480723c65a64470aa58975de51fe7c5");
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: fromKey > toKey");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(strArray5);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + true + "'", boolean7 == true);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + true + "'", boolean9 == true);
        org.junit.Assert.assertNotNull(strItor10);
        org.junit.Assert.assertNotNull(objArray11);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray11), "[AllBuilder:, Datum [ name ='http://org/apache/rat/meta-data#LicenseFamilyCategory',value ='GPL1  '], MANIFEST.MF, The MIT License, http://org/apache/rat/meta-data#LicenseFamilyCategory, http://org/apache/rat/meta-data#LicenseFamilyName]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray11), "[AllBuilder:, Datum [ name ='http://org/apache/rat/meta-data#LicenseFamilyCategory',value ='GPL1  '], MANIFEST.MF, The MIT License, http://org/apache/rat/meta-data#LicenseFamilyCategory, http://org/apache/rat/meta-data#LicenseFamilyName]");
        org.junit.Assert.assertNotNull(strArray17);
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + true + "'", boolean19 == true);
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + true + "'", boolean21 == true);
        org.junit.Assert.assertNotNull(iLicenseFamilySet22);
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + false + "'", boolean23 == false);
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + true + "'", boolean24 == true);
        org.junit.Assert.assertNotNull(strSpliterator25);
        org.junit.Assert.assertNotNull(defaultLog26);
        org.junit.Assert.assertTrue("'" + level31 + "' != '" + org.apache.rat.utils.Log.Level.ERROR + "'", level31.equals(org.apache.rat.utils.Log.Level.ERROR));
        org.junit.Assert.assertNull(filenameFilter36);
        org.junit.Assert.assertTrue("'" + licenseFilter37 + "' != '" + org.apache.rat.license.LicenseSetFactory.LicenseFilter.all + "'", licenseFilter37.equals(org.apache.rat.license.LicenseSetFactory.LicenseFilter.all));
        org.junit.Assert.assertNotNull(iLicenseSet38);
        org.junit.Assert.assertTrue("'" + addLicenseHeaders39 + "' != '" + org.apache.rat.config.AddLicenseHeaders.FALSE + "'", addLicenseHeaders39.equals(org.apache.rat.config.AddLicenseHeaders.FALSE));
        org.junit.Assert.assertNull(claimStatistic43);
        org.junit.Assert.assertTrue("'" + licenseFilter44 + "' != '" + org.apache.rat.license.LicenseSetFactory.LicenseFilter.all + "'", licenseFilter44.equals(org.apache.rat.license.LicenseSetFactory.LicenseFilter.all));
        org.junit.Assert.assertNull(filenameFilter49);
        org.junit.Assert.assertTrue("'" + licenseFilter50 + "' != '" + org.apache.rat.license.LicenseSetFactory.LicenseFilter.all + "'", licenseFilter50.equals(org.apache.rat.license.LicenseSetFactory.LicenseFilter.all));
        org.junit.Assert.assertNotNull(iLicenseSet51);
        org.junit.Assert.assertTrue("'" + addLicenseHeaders52 + "' != '" + org.apache.rat.config.AddLicenseHeaders.FALSE + "'", addLicenseHeaders52.equals(org.apache.rat.config.AddLicenseHeaders.FALSE));
        org.junit.Assert.assertNull(claimStatistic56);
        org.junit.Assert.assertTrue("'" + licenseFilter57 + "' != '" + org.apache.rat.license.LicenseSetFactory.LicenseFilter.all + "'", licenseFilter57.equals(org.apache.rat.license.LicenseSetFactory.LicenseFilter.all));
        org.junit.Assert.assertNotNull(outputStreamIOSupplier63);
        org.junit.Assert.assertNull(claimStatistic67);
        org.junit.Assert.assertNull(claimStatistic70);
        org.junit.Assert.assertTrue("'" + options71 + "' != '" + org.apache.rat.utils.ReportingSet.Options.OVERWRITE + "'", options71.equals(org.apache.rat.utils.ReportingSet.Options.OVERWRITE));
        org.junit.Assert.assertTrue("'" + level81 + "' != '" + org.apache.rat.utils.Log.Level.ERROR + "'", level81.equals(org.apache.rat.utils.Log.Level.ERROR));
        org.junit.Assert.assertNotNull(strSet86);
        org.junit.Assert.assertTrue("'" + int87 + "' != '" + 6 + "'", int87 == 6);
        org.junit.Assert.assertNotNull(strSet90);
    }

    @Test
    public void test13794() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest27.test13794");
        org.apache.rat.analysis.license.FullTextMatchingLicense fullTextMatchingLicense0 = new org.apache.rat.analysis.license.FullTextMatchingLicense();
        fullTextMatchingLicense0.setLicenseFamilyName("hi!");
        java.lang.String str3 = fullTextMatchingLicense0.getLicenseFamilyCategory();
        java.lang.String str4 = fullTextMatchingLicense0.getLicenseFamilyName();
        fullTextMatchingLicense0.setLicenseFamilyName("http://org/apache/rat/meta-data#LicenseFamilyName");
        java.lang.String str7 = fullTextMatchingLicense0.getLicenseFamilyCategory();
        fullTextMatchingLicense0.setLicenseFamilyCategory("9ba7ce03-4231-4a3e-affd-70c4666a9329");
        java.lang.String str10 = fullTextMatchingLicense0.getNotes();
        java.lang.String str11 = fullTextMatchingLicense0.getLicenseFamilyName();
        org.junit.Assert.assertNull(str3);
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "hi!" + "'", str4, "hi!");
        org.junit.Assert.assertNull(str7);
        org.junit.Assert.assertNull(str10);
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "http://org/apache/rat/meta-data#LicenseFamilyName" + "'", str11, "http://org/apache/rat/meta-data#LicenseFamilyName");
    }

    @Test
    public void test13795() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest27.test13795");
        java.lang.String[] strArray5 = new java.lang.String[] { "http://org/apache/rat/meta-data#LicenseFamilyCategory", "Datum [ name ='http://org/apache/rat/meta-data#LicenseFamilyCategory',value ='GPL1  ']", "MANIFEST.MF", "AllBuilder:", "The MIT License" };
        org.apache.rat.utils.ReportingSet<java.lang.String> strSet6 = new org.apache.rat.utils.ReportingSet<java.lang.String>();
        boolean boolean7 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strSet6, strArray5);
        boolean boolean9 = strSet6.addIfNotPresent("http://org/apache/rat/meta-data#LicenseFamilyName");
        java.util.Iterator<java.lang.String> strItor10 = strSet6.iterator();
        strSet6.clear();
        strSet6.clear();
        java.util.function.Function<java.lang.String, java.lang.String> strFunction13 = null;
        org.apache.rat.utils.ReportingSet<java.lang.String> strSet14 = strSet6.setMsgFormat(strFunction13);
        java.util.Comparator<? super java.lang.String> wildcardComparator15 = strSet14.comparator();
        org.junit.Assert.assertNotNull(strArray5);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + true + "'", boolean7 == true);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + true + "'", boolean9 == true);
        org.junit.Assert.assertNotNull(strItor10);
        org.junit.Assert.assertNotNull(strSet14);
        org.junit.Assert.assertNull(wildcardComparator15);
    }

    @Test
    public void test13796() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest27.test13796");
        org.apache.rat.configuration.builders.RegexBuilder regexBuilder0 = new org.apache.rat.configuration.builders.RegexBuilder();
        java.lang.String str1 = regexBuilder0.toString();
        java.lang.String str2 = regexBuilder0.toString();
        org.apache.rat.configuration.builders.RegexBuilder regexBuilder4 = regexBuilder0.setExpr("0356753d-7389-48e7-8d63-056fd4c4548c");
        org.junit.Assert.assertEquals("'" + str1 + "' != '" + "RegexBuilder: null" + "'", str1, "RegexBuilder: null");
        org.junit.Assert.assertEquals("'" + str2 + "' != '" + "RegexBuilder: null" + "'", str2, "RegexBuilder: null");
        org.junit.Assert.assertNotNull(regexBuilder4);
    }

    @Test
    public void test13797() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest27.test13797");
        org.apache.rat.report.claim.ClaimStatistic claimStatistic0 = new org.apache.rat.report.claim.ClaimStatistic();
        claimStatistic0.setNumUnApproved((-1));
        java.util.Map<java.lang.String, java.lang.Integer> strMap3 = claimStatistic0.getDocumentCategoryMap();
        claimStatistic0.setNumUnApproved((int) '#');
        claimStatistic0.setNumApproved((int) (byte) -1);
        java.util.Map<java.lang.String, java.lang.Integer> strMap8 = null;
        claimStatistic0.setDocumentCategoryMap(strMap8);
        int int10 = claimStatistic0.getNumUnknown();
        int int11 = claimStatistic0.getNumUnknown();
        claimStatistic0.setNumUnknown(256);
        claimStatistic0.setNumUnApproved((-38));
        claimStatistic0.setNumGenerated(30);
        java.util.Map<java.lang.String, java.lang.Integer> strMap18 = null;
        claimStatistic0.setDocumentCategoryMap(strMap18);
        org.junit.Assert.assertNull(strMap3);
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + 0 + "'", int10 == 0);
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 0 + "'", int11 == 0);
    }

    @Test
    public void test13798() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest27.test13798");
        boolean boolean1 = org.apache.rat.document.impl.guesser.BinaryGuesser.isBytecode("ba161dc5-d7db-46fd-8c6a-96c390170cb8");
        org.junit.Assert.assertTrue("'" + boolean1 + "' != '" + false + "'", boolean1 == false);
    }

    @Test
    public void test13799() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest27.test13799");
        org.apache.rat.utils.Log log0 = null;
        org.apache.rat.ReportConfiguration reportConfiguration1 = new org.apache.rat.ReportConfiguration(log0);
        org.apache.rat.report.claim.ClaimStatistic claimStatistic2 = org.apache.rat.Reporter.report(reportConfiguration1);
        org.apache.rat.utils.Log log3 = null;
        org.apache.rat.ReportConfiguration reportConfiguration4 = new org.apache.rat.ReportConfiguration(log3);
        org.apache.rat.report.claim.ClaimStatistic claimStatistic5 = org.apache.rat.Reporter.report(reportConfiguration4);
        org.apache.rat.utils.ReportingSet.Options options6 = org.apache.rat.utils.ReportingSet.Options.OVERWRITE;
        reportConfiguration4.licenseDuplicateOption(options6);
        reportConfiguration1.familyDuplicateOption(options6);
        org.apache.commons.io.function.IOSupplier<java.io.PrintWriter> printWriterIOSupplier9 = reportConfiguration1.getWriter();
        org.apache.rat.report.IReportable iReportable10 = reportConfiguration1.getReportable();
        org.apache.rat.report.IReportable iReportable11 = null;
        reportConfiguration1.setReportable(iReportable11);
        org.apache.rat.utils.Log log13 = null;
        org.apache.rat.ReportConfiguration reportConfiguration14 = new org.apache.rat.ReportConfiguration(log13);
        java.io.FilenameFilter filenameFilter15 = reportConfiguration14.getInputFileFilter();
        org.apache.rat.license.LicenseSetFactory.LicenseFilter licenseFilter16 = org.apache.rat.license.LicenseSetFactory.LicenseFilter.all;
        java.util.SortedSet<org.apache.rat.license.ILicense> iLicenseSet17 = reportConfiguration14.getLicenses(licenseFilter16);
        org.apache.rat.config.AddLicenseHeaders addLicenseHeaders18 = org.apache.rat.config.AddLicenseHeaders.FALSE;
        reportConfiguration14.setAddLicenseHeaders(addLicenseHeaders18);
        org.apache.rat.utils.Log log20 = null;
        org.apache.rat.ReportConfiguration reportConfiguration21 = new org.apache.rat.ReportConfiguration(log20);
        org.apache.rat.report.claim.ClaimStatistic claimStatistic22 = org.apache.rat.Reporter.report(reportConfiguration21);
        org.apache.rat.license.LicenseSetFactory.LicenseFilter licenseFilter23 = org.apache.rat.license.LicenseSetFactory.LicenseFilter.all;
        org.apache.rat.Reporter.listLicenses(reportConfiguration21, licenseFilter23);
        org.apache.rat.Reporter.listLicenses(reportConfiguration14, licenseFilter23);
        org.apache.rat.utils.Log log26 = null;
        org.apache.rat.ReportConfiguration reportConfiguration27 = new org.apache.rat.ReportConfiguration(log26);
        java.io.FilenameFilter filenameFilter28 = reportConfiguration27.getInputFileFilter();
        org.apache.rat.license.LicenseSetFactory.LicenseFilter licenseFilter29 = org.apache.rat.license.LicenseSetFactory.LicenseFilter.all;
        java.util.SortedSet<org.apache.rat.license.ILicense> iLicenseSet30 = reportConfiguration27.getLicenses(licenseFilter29);
        org.apache.rat.config.AddLicenseHeaders addLicenseHeaders31 = org.apache.rat.config.AddLicenseHeaders.FALSE;
        reportConfiguration27.setAddLicenseHeaders(addLicenseHeaders31);
        org.apache.rat.utils.Log log33 = null;
        org.apache.rat.ReportConfiguration reportConfiguration34 = new org.apache.rat.ReportConfiguration(log33);
        org.apache.rat.report.claim.ClaimStatistic claimStatistic35 = org.apache.rat.Reporter.report(reportConfiguration34);
        org.apache.rat.license.LicenseSetFactory.LicenseFilter licenseFilter36 = org.apache.rat.license.LicenseSetFactory.LicenseFilter.all;
        org.apache.rat.Reporter.listLicenses(reportConfiguration34, licenseFilter36);
        org.apache.rat.Reporter.listLicenses(reportConfiguration27, licenseFilter36);
        org.apache.rat.Reporter.listLicenses(reportConfiguration14, licenseFilter36);
        java.io.FilenameFilter filenameFilter40 = reportConfiguration14.getInputFileFilter();
        org.apache.rat.utils.Log log41 = null;
        org.apache.rat.ReportConfiguration reportConfiguration42 = new org.apache.rat.ReportConfiguration(log41);
        java.io.FilenameFilter filenameFilter43 = reportConfiguration42.getInputFileFilter();
        org.apache.rat.license.LicenseSetFactory.LicenseFilter licenseFilter44 = org.apache.rat.license.LicenseSetFactory.LicenseFilter.all;
        java.util.SortedSet<org.apache.rat.license.ILicense> iLicenseSet45 = reportConfiguration42.getLicenses(licenseFilter44);
        org.apache.rat.config.AddLicenseHeaders addLicenseHeaders46 = org.apache.rat.config.AddLicenseHeaders.FALSE;
        reportConfiguration42.setAddLicenseHeaders(addLicenseHeaders46);
        org.apache.rat.utils.Log log48 = null;
        org.apache.rat.ReportConfiguration reportConfiguration49 = new org.apache.rat.ReportConfiguration(log48);
        org.apache.rat.report.claim.ClaimStatistic claimStatistic50 = org.apache.rat.Reporter.report(reportConfiguration49);
        org.apache.rat.license.LicenseSetFactory.LicenseFilter licenseFilter51 = org.apache.rat.license.LicenseSetFactory.LicenseFilter.all;
        org.apache.rat.Reporter.listLicenses(reportConfiguration49, licenseFilter51);
        org.apache.rat.Reporter.listLicenses(reportConfiguration42, licenseFilter51);
        org.apache.rat.utils.Log log54 = null;
        org.apache.rat.ReportConfiguration reportConfiguration55 = new org.apache.rat.ReportConfiguration(log54);
        java.io.FilenameFilter filenameFilter56 = reportConfiguration55.getInputFileFilter();
        org.apache.rat.license.LicenseSetFactory.LicenseFilter licenseFilter57 = org.apache.rat.license.LicenseSetFactory.LicenseFilter.all;
        java.util.SortedSet<org.apache.rat.license.ILicense> iLicenseSet58 = reportConfiguration55.getLicenses(licenseFilter57);
        org.apache.rat.config.AddLicenseHeaders addLicenseHeaders59 = org.apache.rat.config.AddLicenseHeaders.FALSE;
        reportConfiguration55.setAddLicenseHeaders(addLicenseHeaders59);
        org.apache.rat.utils.Log log61 = null;
        org.apache.rat.ReportConfiguration reportConfiguration62 = new org.apache.rat.ReportConfiguration(log61);
        org.apache.rat.report.claim.ClaimStatistic claimStatistic63 = org.apache.rat.Reporter.report(reportConfiguration62);
        org.apache.rat.license.LicenseSetFactory.LicenseFilter licenseFilter64 = org.apache.rat.license.LicenseSetFactory.LicenseFilter.all;
        org.apache.rat.Reporter.listLicenses(reportConfiguration62, licenseFilter64);
        org.apache.rat.Reporter.listLicenses(reportConfiguration55, licenseFilter64);
        org.apache.rat.Reporter.listLicenses(reportConfiguration42, licenseFilter64);
        java.util.SortedSet<org.apache.rat.license.ILicense> iLicenseSet68 = reportConfiguration14.getLicenses(licenseFilter64);
        boolean boolean69 = reportConfiguration14.isAddingLicensesForced();
        org.apache.rat.utils.Log log70 = null;
        org.apache.rat.ReportConfiguration reportConfiguration71 = new org.apache.rat.ReportConfiguration(log70);
        org.apache.rat.report.claim.ClaimStatistic claimStatistic72 = org.apache.rat.Reporter.report(reportConfiguration71);
        org.apache.rat.utils.Log log73 = null;
        org.apache.rat.ReportConfiguration reportConfiguration74 = new org.apache.rat.ReportConfiguration(log73);
        org.apache.rat.report.claim.ClaimStatistic claimStatistic75 = org.apache.rat.Reporter.report(reportConfiguration74);
        org.apache.rat.utils.ReportingSet.Options options76 = org.apache.rat.utils.ReportingSet.Options.OVERWRITE;
        reportConfiguration74.licenseDuplicateOption(options76);
        reportConfiguration71.familyDuplicateOption(options76);
        reportConfiguration14.familyDuplicateOption(options76);
        reportConfiguration1.licenseDuplicateOption(options76);
        reportConfiguration1.setStyleReport(true);
        org.junit.Assert.assertNull(claimStatistic2);
        org.junit.Assert.assertNull(claimStatistic5);
        org.junit.Assert.assertTrue("'" + options6 + "' != '" + org.apache.rat.utils.ReportingSet.Options.OVERWRITE + "'", options6.equals(org.apache.rat.utils.ReportingSet.Options.OVERWRITE));
        org.junit.Assert.assertNotNull(printWriterIOSupplier9);
        org.junit.Assert.assertNull(iReportable10);
        org.junit.Assert.assertNull(filenameFilter15);
        org.junit.Assert.assertTrue("'" + licenseFilter16 + "' != '" + org.apache.rat.license.LicenseSetFactory.LicenseFilter.all + "'", licenseFilter16.equals(org.apache.rat.license.LicenseSetFactory.LicenseFilter.all));
        org.junit.Assert.assertNotNull(iLicenseSet17);
        org.junit.Assert.assertTrue("'" + addLicenseHeaders18 + "' != '" + org.apache.rat.config.AddLicenseHeaders.FALSE + "'", addLicenseHeaders18.equals(org.apache.rat.config.AddLicenseHeaders.FALSE));
        org.junit.Assert.assertNull(claimStatistic22);
        org.junit.Assert.assertTrue("'" + licenseFilter23 + "' != '" + org.apache.rat.license.LicenseSetFactory.LicenseFilter.all + "'", licenseFilter23.equals(org.apache.rat.license.LicenseSetFactory.LicenseFilter.all));
        org.junit.Assert.assertNull(filenameFilter28);
        org.junit.Assert.assertTrue("'" + licenseFilter29 + "' != '" + org.apache.rat.license.LicenseSetFactory.LicenseFilter.all + "'", licenseFilter29.equals(org.apache.rat.license.LicenseSetFactory.LicenseFilter.all));
        org.junit.Assert.assertNotNull(iLicenseSet30);
        org.junit.Assert.assertTrue("'" + addLicenseHeaders31 + "' != '" + org.apache.rat.config.AddLicenseHeaders.FALSE + "'", addLicenseHeaders31.equals(org.apache.rat.config.AddLicenseHeaders.FALSE));
        org.junit.Assert.assertNull(claimStatistic35);
        org.junit.Assert.assertTrue("'" + licenseFilter36 + "' != '" + org.apache.rat.license.LicenseSetFactory.LicenseFilter.all + "'", licenseFilter36.equals(org.apache.rat.license.LicenseSetFactory.LicenseFilter.all));
        org.junit.Assert.assertNull(filenameFilter40);
        org.junit.Assert.assertNull(filenameFilter43);
        org.junit.Assert.assertTrue("'" + licenseFilter44 + "' != '" + org.apache.rat.license.LicenseSetFactory.LicenseFilter.all + "'", licenseFilter44.equals(org.apache.rat.license.LicenseSetFactory.LicenseFilter.all));
        org.junit.Assert.assertNotNull(iLicenseSet45);
        org.junit.Assert.assertTrue("'" + addLicenseHeaders46 + "' != '" + org.apache.rat.config.AddLicenseHeaders.FALSE + "'", addLicenseHeaders46.equals(org.apache.rat.config.AddLicenseHeaders.FALSE));
        org.junit.Assert.assertNull(claimStatistic50);
        org.junit.Assert.assertTrue("'" + licenseFilter51 + "' != '" + org.apache.rat.license.LicenseSetFactory.LicenseFilter.all + "'", licenseFilter51.equals(org.apache.rat.license.LicenseSetFactory.LicenseFilter.all));
        org.junit.Assert.assertNull(filenameFilter56);
        org.junit.Assert.assertTrue("'" + licenseFilter57 + "' != '" + org.apache.rat.license.LicenseSetFactory.LicenseFilter.all + "'", licenseFilter57.equals(org.apache.rat.license.LicenseSetFactory.LicenseFilter.all));
        org.junit.Assert.assertNotNull(iLicenseSet58);
        org.junit.Assert.assertTrue("'" + addLicenseHeaders59 + "' != '" + org.apache.rat.config.AddLicenseHeaders.FALSE + "'", addLicenseHeaders59.equals(org.apache.rat.config.AddLicenseHeaders.FALSE));
        org.junit.Assert.assertNull(claimStatistic63);
        org.junit.Assert.assertTrue("'" + licenseFilter64 + "' != '" + org.apache.rat.license.LicenseSetFactory.LicenseFilter.all + "'", licenseFilter64.equals(org.apache.rat.license.LicenseSetFactory.LicenseFilter.all));
        org.junit.Assert.assertNotNull(iLicenseSet68);
        org.junit.Assert.assertTrue("'" + boolean69 + "' != '" + false + "'", boolean69 == false);
        org.junit.Assert.assertNull(claimStatistic72);
        org.junit.Assert.assertNull(claimStatistic75);
        org.junit.Assert.assertTrue("'" + options76 + "' != '" + org.apache.rat.utils.ReportingSet.Options.OVERWRITE + "'", options76.equals(org.apache.rat.utils.ReportingSet.Options.OVERWRITE));
    }

    @Test
    public void test13800() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest27.test13800");
        org.apache.rat.configuration.builders.CopyrightBuilder copyrightBuilder0 = org.apache.rat.analysis.IHeaderMatcher.Builder.copyright();
        java.lang.String str1 = copyrightBuilder0.toString();
        org.apache.rat.configuration.builders.CopyrightBuilder copyrightBuilder3 = copyrightBuilder0.setEnd(".cvsignore");
        boolean boolean4 = copyrightBuilder0.hasId();
        java.lang.String str5 = copyrightBuilder0.toString();
        java.lang.String str6 = copyrightBuilder0.toString();
        org.apache.rat.configuration.builders.AbstractBuilder abstractBuilder8 = copyrightBuilder0.setId("ece24682-3459-4761-bb85-7fc8538fa181");
        boolean boolean9 = copyrightBuilder0.hasId();
        org.apache.rat.configuration.builders.CopyrightBuilder copyrightBuilder11 = copyrightBuilder0.setStart("0078d252-2dcb-414c-a1a2-5c57c904b2ec");
        org.apache.rat.configuration.builders.CopyrightBuilder copyrightBuilder13 = copyrightBuilder11.setOwner("b184faac-41d0-4187-8ddd-57112bfcf25e");
        org.junit.Assert.assertNotNull(copyrightBuilder0);
        org.junit.Assert.assertEquals("'" + str1 + "' != '" + "Copyright Builder: s:null e:null o:null" + "'", str1, "Copyright Builder: s:null e:null o:null");
        org.junit.Assert.assertNotNull(copyrightBuilder3);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertEquals("'" + str5 + "' != '" + "Copyright Builder: s:null e:.cvsignore o:null" + "'", str5, "Copyright Builder: s:null e:.cvsignore o:null");
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "Copyright Builder: s:null e:.cvsignore o:null" + "'", str6, "Copyright Builder: s:null e:.cvsignore o:null");
        org.junit.Assert.assertNotNull(abstractBuilder8);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + true + "'", boolean9 == true);
        org.junit.Assert.assertNotNull(copyrightBuilder11);
        org.junit.Assert.assertNotNull(copyrightBuilder13);
    }

    @Test
    public void test13801() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest27.test13801");
        org.apache.rat.report.claim.ClaimStatistic claimStatistic0 = new org.apache.rat.report.claim.ClaimStatistic();
        claimStatistic0.setNumUnApproved((int) (short) 10);
        java.util.Map<java.lang.String, java.lang.Integer> strMap3 = null;
        claimStatistic0.setDocumentCategoryMap(strMap3);
        claimStatistic0.setNumUnknown((int) ' ');
        java.util.Map<java.lang.String, java.lang.Integer> strMap7 = null;
        claimStatistic0.setLicenseFileNameMap(strMap7);
    }

    @Test
    public void test13802() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest27.test13802");
        boolean boolean1 = org.apache.rat.document.impl.guesser.BinaryGuesser.isBytecode("e872967c-4794-47ea-963d-b65c1e8a3488");
        org.junit.Assert.assertTrue("'" + boolean1 + "' != '" + false + "'", boolean1 == false);
    }

    @Test
    public void test13803() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest27.test13803");
        org.apache.rat.utils.Log log0 = null;
        org.apache.rat.ReportConfiguration reportConfiguration1 = new org.apache.rat.ReportConfiguration(log0);
        org.apache.rat.report.claim.ClaimStatistic claimStatistic2 = org.apache.rat.Reporter.report(reportConfiguration1);
        org.apache.rat.utils.ReportingSet.Options options3 = org.apache.rat.utils.ReportingSet.Options.OVERWRITE;
        reportConfiguration1.licenseDuplicateOption(options3);
        org.apache.rat.license.ILicenseFamily iLicenseFamily5 = null;
        reportConfiguration1.addFamily(iLicenseFamily5);
        org.apache.rat.utils.Log log7 = null;
        org.apache.rat.ReportConfiguration reportConfiguration8 = new org.apache.rat.ReportConfiguration(log7);
        java.io.FilenameFilter filenameFilter9 = reportConfiguration8.getInputFileFilter();
        org.apache.rat.license.LicenseSetFactory.LicenseFilter licenseFilter10 = org.apache.rat.license.LicenseSetFactory.LicenseFilter.all;
        java.util.SortedSet<org.apache.rat.license.ILicense> iLicenseSet11 = reportConfiguration8.getLicenses(licenseFilter10);
        org.apache.rat.config.AddLicenseHeaders addLicenseHeaders12 = org.apache.rat.config.AddLicenseHeaders.FALSE;
        reportConfiguration8.setAddLicenseHeaders(addLicenseHeaders12);
        org.apache.rat.utils.Log log14 = null;
        org.apache.rat.ReportConfiguration reportConfiguration15 = new org.apache.rat.ReportConfiguration(log14);
        org.apache.rat.report.claim.ClaimStatistic claimStatistic16 = org.apache.rat.Reporter.report(reportConfiguration15);
        org.apache.rat.license.LicenseSetFactory.LicenseFilter licenseFilter17 = org.apache.rat.license.LicenseSetFactory.LicenseFilter.all;
        org.apache.rat.Reporter.listLicenses(reportConfiguration15, licenseFilter17);
        org.apache.rat.Reporter.listLicenses(reportConfiguration8, licenseFilter17);
        org.apache.rat.utils.Log log20 = null;
        org.apache.rat.ReportConfiguration reportConfiguration21 = new org.apache.rat.ReportConfiguration(log20);
        java.io.FilenameFilter filenameFilter22 = reportConfiguration21.getInputFileFilter();
        org.apache.rat.license.LicenseSetFactory.LicenseFilter licenseFilter23 = org.apache.rat.license.LicenseSetFactory.LicenseFilter.all;
        java.util.SortedSet<org.apache.rat.license.ILicense> iLicenseSet24 = reportConfiguration21.getLicenses(licenseFilter23);
        org.apache.rat.config.AddLicenseHeaders addLicenseHeaders25 = org.apache.rat.config.AddLicenseHeaders.FALSE;
        reportConfiguration21.setAddLicenseHeaders(addLicenseHeaders25);
        org.apache.rat.utils.Log log27 = null;
        org.apache.rat.ReportConfiguration reportConfiguration28 = new org.apache.rat.ReportConfiguration(log27);
        org.apache.rat.report.claim.ClaimStatistic claimStatistic29 = org.apache.rat.Reporter.report(reportConfiguration28);
        org.apache.rat.license.LicenseSetFactory.LicenseFilter licenseFilter30 = org.apache.rat.license.LicenseSetFactory.LicenseFilter.all;
        org.apache.rat.Reporter.listLicenses(reportConfiguration28, licenseFilter30);
        org.apache.rat.Reporter.listLicenses(reportConfiguration21, licenseFilter30);
        org.apache.rat.Reporter.listLicenses(reportConfiguration8, licenseFilter30);
        java.io.FilenameFilter filenameFilter34 = reportConfiguration8.getInputFileFilter();
        org.apache.rat.utils.Log log35 = null;
        org.apache.rat.ReportConfiguration reportConfiguration36 = new org.apache.rat.ReportConfiguration(log35);
        java.io.FilenameFilter filenameFilter37 = reportConfiguration36.getInputFileFilter();
        org.apache.rat.license.LicenseSetFactory.LicenseFilter licenseFilter38 = org.apache.rat.license.LicenseSetFactory.LicenseFilter.all;
        java.util.SortedSet<org.apache.rat.license.ILicense> iLicenseSet39 = reportConfiguration36.getLicenses(licenseFilter38);
        org.apache.rat.config.AddLicenseHeaders addLicenseHeaders40 = org.apache.rat.config.AddLicenseHeaders.FALSE;
        reportConfiguration36.setAddLicenseHeaders(addLicenseHeaders40);
        org.apache.rat.utils.Log log42 = null;
        org.apache.rat.ReportConfiguration reportConfiguration43 = new org.apache.rat.ReportConfiguration(log42);
        org.apache.rat.report.claim.ClaimStatistic claimStatistic44 = org.apache.rat.Reporter.report(reportConfiguration43);
        org.apache.rat.license.LicenseSetFactory.LicenseFilter licenseFilter45 = org.apache.rat.license.LicenseSetFactory.LicenseFilter.all;
        org.apache.rat.Reporter.listLicenses(reportConfiguration43, licenseFilter45);
        org.apache.rat.Reporter.listLicenses(reportConfiguration36, licenseFilter45);
        org.apache.rat.utils.Log log48 = null;
        org.apache.rat.ReportConfiguration reportConfiguration49 = new org.apache.rat.ReportConfiguration(log48);
        java.io.FilenameFilter filenameFilter50 = reportConfiguration49.getInputFileFilter();
        org.apache.rat.license.LicenseSetFactory.LicenseFilter licenseFilter51 = org.apache.rat.license.LicenseSetFactory.LicenseFilter.all;
        java.util.SortedSet<org.apache.rat.license.ILicense> iLicenseSet52 = reportConfiguration49.getLicenses(licenseFilter51);
        org.apache.rat.config.AddLicenseHeaders addLicenseHeaders53 = org.apache.rat.config.AddLicenseHeaders.FALSE;
        reportConfiguration49.setAddLicenseHeaders(addLicenseHeaders53);
        org.apache.rat.utils.Log log55 = null;
        org.apache.rat.ReportConfiguration reportConfiguration56 = new org.apache.rat.ReportConfiguration(log55);
        org.apache.rat.report.claim.ClaimStatistic claimStatistic57 = org.apache.rat.Reporter.report(reportConfiguration56);
        org.apache.rat.license.LicenseSetFactory.LicenseFilter licenseFilter58 = org.apache.rat.license.LicenseSetFactory.LicenseFilter.all;
        org.apache.rat.Reporter.listLicenses(reportConfiguration56, licenseFilter58);
        org.apache.rat.Reporter.listLicenses(reportConfiguration49, licenseFilter58);
        org.apache.rat.Reporter.listLicenses(reportConfiguration36, licenseFilter58);
        java.util.SortedSet<org.apache.rat.license.ILicense> iLicenseSet62 = reportConfiguration8.getLicenses(licenseFilter58);
        boolean boolean63 = reportConfiguration8.isAddingLicensesForced();
        org.apache.rat.utils.Log log64 = null;
        org.apache.rat.ReportConfiguration reportConfiguration65 = new org.apache.rat.ReportConfiguration(log64);
        org.apache.rat.report.claim.ClaimStatistic claimStatistic66 = org.apache.rat.Reporter.report(reportConfiguration65);
        org.apache.rat.utils.Log log67 = null;
        org.apache.rat.ReportConfiguration reportConfiguration68 = new org.apache.rat.ReportConfiguration(log67);
        org.apache.rat.report.claim.ClaimStatistic claimStatistic69 = org.apache.rat.Reporter.report(reportConfiguration68);
        org.apache.rat.utils.ReportingSet.Options options70 = org.apache.rat.utils.ReportingSet.Options.OVERWRITE;
        reportConfiguration68.licenseDuplicateOption(options70);
        reportConfiguration65.familyDuplicateOption(options70);
        reportConfiguration8.familyDuplicateOption(options70);
        reportConfiguration1.licenseDuplicateOption(options70);
        org.apache.rat.license.ILicense iLicense75 = null;
        reportConfiguration1.addLicense(iLicense75);
        java.util.SortedSet<java.lang.String> strSet77 = reportConfiguration1.getApprovedLicenseCategories();
        org.apache.rat.utils.Log log78 = null;
        org.apache.rat.ReportConfiguration reportConfiguration79 = new org.apache.rat.ReportConfiguration(log78);
        org.apache.rat.report.claim.ClaimStatistic claimStatistic80 = org.apache.rat.Reporter.report(reportConfiguration79);
        org.apache.rat.utils.Log log81 = null;
        org.apache.rat.ReportConfiguration reportConfiguration82 = new org.apache.rat.ReportConfiguration(log81);
        org.apache.rat.report.claim.ClaimStatistic claimStatistic83 = org.apache.rat.Reporter.report(reportConfiguration82);
        org.apache.rat.utils.ReportingSet.Options options84 = org.apache.rat.utils.ReportingSet.Options.OVERWRITE;
        reportConfiguration82.licenseDuplicateOption(options84);
        reportConfiguration79.familyDuplicateOption(options84);
        org.apache.commons.io.function.IOSupplier<java.io.PrintWriter> printWriterIOSupplier87 = reportConfiguration79.getWriter();
        boolean boolean88 = reportConfiguration79.isAddingLicensesForced();
        java.io.FilenameFilter filenameFilter89 = reportConfiguration79.getInputFileFilter();
        java.io.FilenameFilter filenameFilter90 = reportConfiguration79.getInputFileFilter();
        boolean boolean91 = reportConfiguration79.isStyleReport();
        org.apache.commons.io.function.IOSupplier<java.io.OutputStream> outputStreamIOSupplier92 = reportConfiguration79.getOutput();
        reportConfiguration1.setOut(outputStreamIOSupplier92);
        reportConfiguration1.setCopyrightMessage("106ab050-2110-44f8-a9e7-726c4af443ea");
        org.junit.Assert.assertNull(claimStatistic2);
        org.junit.Assert.assertTrue("'" + options3 + "' != '" + org.apache.rat.utils.ReportingSet.Options.OVERWRITE + "'", options3.equals(org.apache.rat.utils.ReportingSet.Options.OVERWRITE));
        org.junit.Assert.assertNull(filenameFilter9);
        org.junit.Assert.assertTrue("'" + licenseFilter10 + "' != '" + org.apache.rat.license.LicenseSetFactory.LicenseFilter.all + "'", licenseFilter10.equals(org.apache.rat.license.LicenseSetFactory.LicenseFilter.all));
        org.junit.Assert.assertNotNull(iLicenseSet11);
        org.junit.Assert.assertTrue("'" + addLicenseHeaders12 + "' != '" + org.apache.rat.config.AddLicenseHeaders.FALSE + "'", addLicenseHeaders12.equals(org.apache.rat.config.AddLicenseHeaders.FALSE));
        org.junit.Assert.assertNull(claimStatistic16);
        org.junit.Assert.assertTrue("'" + licenseFilter17 + "' != '" + org.apache.rat.license.LicenseSetFactory.LicenseFilter.all + "'", licenseFilter17.equals(org.apache.rat.license.LicenseSetFactory.LicenseFilter.all));
        org.junit.Assert.assertNull(filenameFilter22);
        org.junit.Assert.assertTrue("'" + licenseFilter23 + "' != '" + org.apache.rat.license.LicenseSetFactory.LicenseFilter.all + "'", licenseFilter23.equals(org.apache.rat.license.LicenseSetFactory.LicenseFilter.all));
        org.junit.Assert.assertNotNull(iLicenseSet24);
        org.junit.Assert.assertTrue("'" + addLicenseHeaders25 + "' != '" + org.apache.rat.config.AddLicenseHeaders.FALSE + "'", addLicenseHeaders25.equals(org.apache.rat.config.AddLicenseHeaders.FALSE));
        org.junit.Assert.assertNull(claimStatistic29);
        org.junit.Assert.assertTrue("'" + licenseFilter30 + "' != '" + org.apache.rat.license.LicenseSetFactory.LicenseFilter.all + "'", licenseFilter30.equals(org.apache.rat.license.LicenseSetFactory.LicenseFilter.all));
        org.junit.Assert.assertNull(filenameFilter34);
        org.junit.Assert.assertNull(filenameFilter37);
        org.junit.Assert.assertTrue("'" + licenseFilter38 + "' != '" + org.apache.rat.license.LicenseSetFactory.LicenseFilter.all + "'", licenseFilter38.equals(org.apache.rat.license.LicenseSetFactory.LicenseFilter.all));
        org.junit.Assert.assertNotNull(iLicenseSet39);
        org.junit.Assert.assertTrue("'" + addLicenseHeaders40 + "' != '" + org.apache.rat.config.AddLicenseHeaders.FALSE + "'", addLicenseHeaders40.equals(org.apache.rat.config.AddLicenseHeaders.FALSE));
        org.junit.Assert.assertNull(claimStatistic44);
        org.junit.Assert.assertTrue("'" + licenseFilter45 + "' != '" + org.apache.rat.license.LicenseSetFactory.LicenseFilter.all + "'", licenseFilter45.equals(org.apache.rat.license.LicenseSetFactory.LicenseFilter.all));
        org.junit.Assert.assertNull(filenameFilter50);
        org.junit.Assert.assertTrue("'" + licenseFilter51 + "' != '" + org.apache.rat.license.LicenseSetFactory.LicenseFilter.all + "'", licenseFilter51.equals(org.apache.rat.license.LicenseSetFactory.LicenseFilter.all));
        org.junit.Assert.assertNotNull(iLicenseSet52);
        org.junit.Assert.assertTrue("'" + addLicenseHeaders53 + "' != '" + org.apache.rat.config.AddLicenseHeaders.FALSE + "'", addLicenseHeaders53.equals(org.apache.rat.config.AddLicenseHeaders.FALSE));
        org.junit.Assert.assertNull(claimStatistic57);
        org.junit.Assert.assertTrue("'" + licenseFilter58 + "' != '" + org.apache.rat.license.LicenseSetFactory.LicenseFilter.all + "'", licenseFilter58.equals(org.apache.rat.license.LicenseSetFactory.LicenseFilter.all));
        org.junit.Assert.assertNotNull(iLicenseSet62);
        org.junit.Assert.assertTrue("'" + boolean63 + "' != '" + false + "'", boolean63 == false);
        org.junit.Assert.assertNull(claimStatistic66);
        org.junit.Assert.assertNull(claimStatistic69);
        org.junit.Assert.assertTrue("'" + options70 + "' != '" + org.apache.rat.utils.ReportingSet.Options.OVERWRITE + "'", options70.equals(org.apache.rat.utils.ReportingSet.Options.OVERWRITE));
        org.junit.Assert.assertNotNull(strSet77);
        org.junit.Assert.assertNull(claimStatistic80);
        org.junit.Assert.assertNull(claimStatistic83);
        org.junit.Assert.assertTrue("'" + options84 + "' != '" + org.apache.rat.utils.ReportingSet.Options.OVERWRITE + "'", options84.equals(org.apache.rat.utils.ReportingSet.Options.OVERWRITE));
        org.junit.Assert.assertNotNull(printWriterIOSupplier87);
        org.junit.Assert.assertTrue("'" + boolean88 + "' != '" + false + "'", boolean88 == false);
        org.junit.Assert.assertNull(filenameFilter89);
        org.junit.Assert.assertNull(filenameFilter90);
        org.junit.Assert.assertTrue("'" + boolean91 + "' != '" + true + "'", boolean91 == true);
        org.junit.Assert.assertNotNull(outputStreamIOSupplier92);
    }

    @Test
    public void test13804() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest27.test13804");
        org.apache.rat.configuration.builders.NotBuilder notBuilder0 = org.apache.rat.analysis.IHeaderMatcher.Builder.not();
        boolean boolean1 = notBuilder0.hasId();
        org.apache.rat.configuration.builders.CopyrightBuilder copyrightBuilder2 = org.apache.rat.analysis.IHeaderMatcher.Builder.copyright();
        org.apache.rat.configuration.builders.CopyrightBuilder copyrightBuilder4 = copyrightBuilder2.setStart("OASIS");
        org.apache.rat.analysis.IHeaderMatcher iHeaderMatcher5 = copyrightBuilder2.build();
        org.apache.rat.configuration.builders.CopyrightBuilder copyrightBuilder7 = copyrightBuilder2.setStart(".cvsignore");
        java.lang.String str8 = copyrightBuilder7.toString();
        org.apache.rat.configuration.builders.AbstractBuilder abstractBuilder9 = notBuilder0.add((org.apache.rat.analysis.IHeaderMatcher.Builder) copyrightBuilder7);
        org.apache.rat.analysis.IHeaderMatcher iHeaderMatcher10 = notBuilder0.build();
        org.apache.rat.configuration.builders.AllBuilder allBuilder11 = new org.apache.rat.configuration.builders.AllBuilder();
        org.apache.rat.analysis.IHeaderMatcher iHeaderMatcher12 = allBuilder11.build();
        org.apache.rat.analysis.IHeaderMatcher iHeaderMatcher13 = allBuilder11.build();
        org.apache.rat.configuration.builders.AllBuilder allBuilder14 = new org.apache.rat.configuration.builders.AllBuilder();
        org.apache.rat.analysis.IHeaderMatcher iHeaderMatcher15 = allBuilder14.build();
        org.apache.rat.analysis.IHeaderMatcher iHeaderMatcher16 = allBuilder14.build();
        org.apache.rat.analysis.IHeaderMatcher iHeaderMatcher17 = allBuilder14.build();
        org.apache.rat.configuration.builders.CopyrightBuilder copyrightBuilder18 = org.apache.rat.analysis.IHeaderMatcher.Builder.copyright();
        java.lang.String str19 = copyrightBuilder18.toString();
        org.apache.rat.configuration.builders.CopyrightBuilder copyrightBuilder21 = copyrightBuilder18.setEnd(".cvsignore");
        boolean boolean22 = copyrightBuilder18.hasId();
        org.apache.rat.configuration.builders.CopyrightBuilder copyrightBuilder24 = copyrightBuilder18.setOwner("3c840dc2-bef0-42b5-b26c-35a568d53a24");
        org.apache.rat.configuration.builders.AbstractBuilder abstractBuilder25 = allBuilder14.add((org.apache.rat.analysis.IHeaderMatcher.Builder) copyrightBuilder18);
        org.apache.rat.configuration.builders.AbstractBuilder abstractBuilder26 = allBuilder11.add((org.apache.rat.analysis.IHeaderMatcher.Builder) copyrightBuilder18);
        org.apache.rat.configuration.builders.TextBuilder textBuilder27 = new org.apache.rat.configuration.builders.TextBuilder();
        org.apache.rat.configuration.builders.TextBuilder textBuilder29 = textBuilder27.setText("t true");
        org.apache.rat.analysis.IHeaderMatcher iHeaderMatcher30 = textBuilder27.build();
        java.lang.String str31 = textBuilder27.toString();
        org.apache.rat.configuration.builders.AbstractBuilder abstractBuilder32 = allBuilder11.add((org.apache.rat.analysis.IHeaderMatcher.Builder) textBuilder27);
        java.util.List<org.apache.rat.analysis.IHeaderMatcher> iHeaderMatcherList33 = allBuilder11.getChildren();
        org.apache.rat.configuration.builders.AnyBuilder anyBuilder34 = new org.apache.rat.configuration.builders.AnyBuilder();
        java.lang.String str35 = anyBuilder34.toString();
        org.apache.rat.analysis.IHeaderMatcher iHeaderMatcher36 = anyBuilder34.build();
        org.apache.rat.configuration.builders.AnyBuilder anyBuilder37 = org.apache.rat.analysis.IHeaderMatcher.Builder.any();
        java.lang.String str38 = anyBuilder37.toString();
        java.util.List<org.apache.rat.analysis.IHeaderMatcher> iHeaderMatcherList39 = anyBuilder37.getChildren();
        org.apache.rat.analysis.IHeaderMatcher iHeaderMatcher40 = anyBuilder37.build();
        org.apache.rat.analysis.IHeaderMatcher iHeaderMatcher41 = anyBuilder37.build();
        java.util.List<org.apache.rat.analysis.IHeaderMatcher> iHeaderMatcherList42 = anyBuilder37.getChildren();
        org.apache.rat.configuration.builders.NotBuilder notBuilder43 = new org.apache.rat.configuration.builders.NotBuilder();
        java.lang.String str44 = notBuilder43.toString();
        org.apache.rat.configuration.builders.MatcherRefBuilder matcherRefBuilder45 = org.apache.rat.analysis.IHeaderMatcher.Builder.matcherRef();
        boolean boolean46 = matcherRefBuilder45.hasId();
        java.util.Map<java.lang.String, org.apache.rat.analysis.IHeaderMatcher> strMap47 = null;
        org.apache.rat.configuration.builders.MatcherRefBuilder matcherRefBuilder48 = matcherRefBuilder45.setMatchers(strMap47);
        org.apache.rat.configuration.builders.AllBuilder allBuilder49 = new org.apache.rat.configuration.builders.AllBuilder();
        org.apache.rat.configuration.builders.CopyrightBuilder copyrightBuilder50 = org.apache.rat.analysis.IHeaderMatcher.Builder.copyright();
        org.apache.rat.configuration.builders.CopyrightBuilder copyrightBuilder52 = copyrightBuilder50.setStart("OASIS");
        java.lang.String str53 = copyrightBuilder50.toString();
        org.apache.rat.configuration.builders.CopyrightBuilder copyrightBuilder55 = copyrightBuilder50.setStart("223f0aba-15d4-49e9-901e-5740c137aebf");
        org.apache.rat.configuration.builders.MatcherRefBuilder matcherRefBuilder56 = org.apache.rat.analysis.IHeaderMatcher.Builder.matcherRef();
        boolean boolean57 = matcherRefBuilder56.hasId();
        org.apache.rat.configuration.builders.CopyrightBuilder copyrightBuilder58 = org.apache.rat.analysis.IHeaderMatcher.Builder.copyright();
        org.apache.rat.configuration.builders.CopyrightBuilder copyrightBuilder60 = copyrightBuilder58.setStart("OASIS");
        java.lang.String str61 = copyrightBuilder58.toString();
        org.apache.rat.configuration.builders.CopyrightBuilder copyrightBuilder63 = copyrightBuilder58.setStart("223f0aba-15d4-49e9-901e-5740c137aebf");
        org.apache.rat.configuration.builders.CopyrightBuilder copyrightBuilder64 = org.apache.rat.analysis.IHeaderMatcher.Builder.copyright();
        org.apache.rat.configuration.builders.CopyrightBuilder copyrightBuilder65 = org.apache.rat.analysis.IHeaderMatcher.Builder.copyright();
        java.lang.String str66 = copyrightBuilder65.toString();
        org.apache.rat.configuration.builders.CopyrightBuilder copyrightBuilder68 = copyrightBuilder65.setEnd(".cvsignore");
        boolean boolean69 = copyrightBuilder65.hasId();
        org.apache.rat.configuration.builders.CopyrightBuilder copyrightBuilder70 = org.apache.rat.analysis.IHeaderMatcher.Builder.copyright();
        java.lang.String str71 = copyrightBuilder70.toString();
        org.apache.rat.configuration.builders.CopyrightBuilder copyrightBuilder73 = copyrightBuilder70.setEnd(".cvsignore");
        boolean boolean74 = copyrightBuilder70.hasId();
        java.lang.String str75 = copyrightBuilder70.toString();
        org.apache.rat.configuration.builders.CopyrightBuilder copyrightBuilder76 = org.apache.rat.analysis.IHeaderMatcher.Builder.copyright();
        org.apache.rat.configuration.builders.CopyrightBuilder copyrightBuilder78 = copyrightBuilder76.setStart("OASIS");
        org.apache.rat.configuration.builders.AnyBuilder anyBuilder79 = org.apache.rat.analysis.IHeaderMatcher.Builder.any();
        org.apache.rat.configuration.builders.MatcherRefBuilder matcherRefBuilder80 = org.apache.rat.analysis.IHeaderMatcher.Builder.matcherRef();
        boolean boolean81 = matcherRefBuilder80.hasId();
        java.util.Map<java.lang.String, org.apache.rat.analysis.IHeaderMatcher> strMap82 = null;
        org.apache.rat.configuration.builders.MatcherRefBuilder matcherRefBuilder83 = matcherRefBuilder80.setMatchers(strMap82);
        org.apache.rat.configuration.builders.CopyrightBuilder copyrightBuilder84 = org.apache.rat.analysis.IHeaderMatcher.Builder.copyright();
        org.apache.rat.configuration.builders.MatcherRefBuilder matcherRefBuilder85 = org.apache.rat.analysis.IHeaderMatcher.Builder.matcherRef();
        boolean boolean86 = matcherRefBuilder85.hasId();
        java.lang.String str87 = matcherRefBuilder85.toString();
        java.util.Map<java.lang.String, org.apache.rat.analysis.IHeaderMatcher> strMap88 = null;
        org.apache.rat.configuration.builders.MatcherRefBuilder matcherRefBuilder89 = matcherRefBuilder85.setMatchers(strMap88);
        org.apache.rat.analysis.IHeaderMatcher.Builder[] builderArray90 = new org.apache.rat.analysis.IHeaderMatcher.Builder[] { matcherRefBuilder45, allBuilder49, copyrightBuilder55, matcherRefBuilder56, copyrightBuilder58, copyrightBuilder64, copyrightBuilder65, copyrightBuilder70, copyrightBuilder76, anyBuilder79, matcherRefBuilder80, copyrightBuilder84, matcherRefBuilder85 };
        java.util.ArrayList<org.apache.rat.analysis.IHeaderMatcher.Builder> builderList91 = new java.util.ArrayList<org.apache.rat.analysis.IHeaderMatcher.Builder>();
        boolean boolean92 = java.util.Collections.addAll((java.util.Collection<org.apache.rat.analysis.IHeaderMatcher.Builder>) builderList91, builderArray90);
        org.apache.rat.configuration.builders.AbstractBuilder abstractBuilder93 = notBuilder43.add((java.util.Collection<org.apache.rat.analysis.IHeaderMatcher.Builder>) builderList91);
        org.apache.rat.configuration.builders.AbstractBuilder abstractBuilder94 = anyBuilder37.add((java.util.Collection<org.apache.rat.analysis.IHeaderMatcher.Builder>) builderList91);
        org.apache.rat.configuration.builders.AbstractBuilder abstractBuilder95 = anyBuilder34.add((java.util.Collection<org.apache.rat.analysis.IHeaderMatcher.Builder>) builderList91);
        org.apache.rat.configuration.builders.AbstractBuilder abstractBuilder96 = allBuilder11.add((java.util.Collection<org.apache.rat.analysis.IHeaderMatcher.Builder>) builderList91);
        org.apache.rat.configuration.builders.AbstractBuilder abstractBuilder97 = notBuilder0.add((java.util.Collection<org.apache.rat.analysis.IHeaderMatcher.Builder>) builderList91);
        java.lang.String str98 = notBuilder0.toString();
        boolean boolean99 = notBuilder0.hasId();
        org.junit.Assert.assertNotNull(notBuilder0);
        org.junit.Assert.assertTrue("'" + boolean1 + "' != '" + false + "'", boolean1 == false);
        org.junit.Assert.assertNotNull(copyrightBuilder2);
        org.junit.Assert.assertNotNull(copyrightBuilder4);
        org.junit.Assert.assertNotNull(iHeaderMatcher5);
        org.junit.Assert.assertNotNull(copyrightBuilder7);
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "Copyright Builder: s:.cvsignore e:null o:null" + "'", str8, "Copyright Builder: s:.cvsignore e:null o:null");
        org.junit.Assert.assertNotNull(abstractBuilder9);
        org.junit.Assert.assertNotNull(iHeaderMatcher10);
        org.junit.Assert.assertNotNull(iHeaderMatcher12);
        org.junit.Assert.assertNotNull(iHeaderMatcher13);
        org.junit.Assert.assertNotNull(iHeaderMatcher15);
        org.junit.Assert.assertNotNull(iHeaderMatcher16);
        org.junit.Assert.assertNotNull(iHeaderMatcher17);
        org.junit.Assert.assertNotNull(copyrightBuilder18);
        org.junit.Assert.assertEquals("'" + str19 + "' != '" + "Copyright Builder: s:null e:null o:null" + "'", str19, "Copyright Builder: s:null e:null o:null");
        org.junit.Assert.assertNotNull(copyrightBuilder21);
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + false + "'", boolean22 == false);
        org.junit.Assert.assertNotNull(copyrightBuilder24);
        org.junit.Assert.assertNotNull(abstractBuilder25);
        org.junit.Assert.assertNotNull(abstractBuilder26);
        org.junit.Assert.assertNotNull(textBuilder29);
        org.junit.Assert.assertNotNull(iHeaderMatcher30);
        org.junit.Assert.assertEquals("'" + str31 + "' != '" + "TextBuilder: t true" + "'", str31, "TextBuilder: t true");
        org.junit.Assert.assertNotNull(abstractBuilder32);
        org.junit.Assert.assertNotNull(iHeaderMatcherList33);
        org.junit.Assert.assertEquals("'" + str35 + "' != '" + "AnyBuilder:" + "'", str35, "AnyBuilder:");
        org.junit.Assert.assertNotNull(iHeaderMatcher36);
        org.junit.Assert.assertNotNull(anyBuilder37);
        org.junit.Assert.assertEquals("'" + str38 + "' != '" + "AnyBuilder:" + "'", str38, "AnyBuilder:");
        org.junit.Assert.assertNotNull(iHeaderMatcherList39);
        org.junit.Assert.assertNotNull(iHeaderMatcher40);
        org.junit.Assert.assertNotNull(iHeaderMatcher41);
        org.junit.Assert.assertNotNull(iHeaderMatcherList42);
        org.junit.Assert.assertEquals("'" + str44 + "' != '" + "NotBuilder: null" + "'", str44, "NotBuilder: null");
        org.junit.Assert.assertNotNull(matcherRefBuilder45);
        org.junit.Assert.assertTrue("'" + boolean46 + "' != '" + false + "'", boolean46 == false);
        org.junit.Assert.assertNotNull(matcherRefBuilder48);
        org.junit.Assert.assertNotNull(copyrightBuilder50);
        org.junit.Assert.assertNotNull(copyrightBuilder52);
        org.junit.Assert.assertEquals("'" + str53 + "' != '" + "Copyright Builder: s:OASIS e:null o:null" + "'", str53, "Copyright Builder: s:OASIS e:null o:null");
        org.junit.Assert.assertNotNull(copyrightBuilder55);
        org.junit.Assert.assertNotNull(matcherRefBuilder56);
        org.junit.Assert.assertTrue("'" + boolean57 + "' != '" + false + "'", boolean57 == false);
        org.junit.Assert.assertNotNull(copyrightBuilder58);
        org.junit.Assert.assertNotNull(copyrightBuilder60);
        org.junit.Assert.assertEquals("'" + str61 + "' != '" + "Copyright Builder: s:OASIS e:null o:null" + "'", str61, "Copyright Builder: s:OASIS e:null o:null");
        org.junit.Assert.assertNotNull(copyrightBuilder63);
        org.junit.Assert.assertNotNull(copyrightBuilder64);
        org.junit.Assert.assertNotNull(copyrightBuilder65);
        org.junit.Assert.assertEquals("'" + str66 + "' != '" + "Copyright Builder: s:null e:null o:null" + "'", str66, "Copyright Builder: s:null e:null o:null");
        org.junit.Assert.assertNotNull(copyrightBuilder68);
        org.junit.Assert.assertTrue("'" + boolean69 + "' != '" + false + "'", boolean69 == false);
        org.junit.Assert.assertNotNull(copyrightBuilder70);
        org.junit.Assert.assertEquals("'" + str71 + "' != '" + "Copyright Builder: s:null e:null o:null" + "'", str71, "Copyright Builder: s:null e:null o:null");
        org.junit.Assert.assertNotNull(copyrightBuilder73);
        org.junit.Assert.assertTrue("'" + boolean74 + "' != '" + false + "'", boolean74 == false);
        org.junit.Assert.assertEquals("'" + str75 + "' != '" + "Copyright Builder: s:null e:.cvsignore o:null" + "'", str75, "Copyright Builder: s:null e:.cvsignore o:null");
        org.junit.Assert.assertNotNull(copyrightBuilder76);
        org.junit.Assert.assertNotNull(copyrightBuilder78);
        org.junit.Assert.assertNotNull(anyBuilder79);
        org.junit.Assert.assertNotNull(matcherRefBuilder80);
        org.junit.Assert.assertTrue("'" + boolean81 + "' != '" + false + "'", boolean81 == false);
        org.junit.Assert.assertNotNull(matcherRefBuilder83);
        org.junit.Assert.assertNotNull(copyrightBuilder84);
        org.junit.Assert.assertNotNull(matcherRefBuilder85);
        org.junit.Assert.assertTrue("'" + boolean86 + "' != '" + false + "'", boolean86 == false);
        org.junit.Assert.assertEquals("'" + str87 + "' != '" + "MathcerRefBuilder: null" + "'", str87, "MathcerRefBuilder: null");
        org.junit.Assert.assertNotNull(matcherRefBuilder89);
        org.junit.Assert.assertNotNull(builderArray90);
        org.junit.Assert.assertTrue("'" + boolean92 + "' != '" + true + "'", boolean92 == true);
        org.junit.Assert.assertNotNull(abstractBuilder93);
        org.junit.Assert.assertNotNull(abstractBuilder94);
        org.junit.Assert.assertNotNull(abstractBuilder95);
        org.junit.Assert.assertNotNull(abstractBuilder96);
        org.junit.Assert.assertNotNull(abstractBuilder97);
        org.junit.Assert.assertEquals("'" + str98 + "' != '" + "NotBuilder: Copyright Builder: s:.cvsignore e:null o:null" + "'", str98, "NotBuilder: Copyright Builder: s:.cvsignore e:null o:null");
        org.junit.Assert.assertTrue("'" + boolean99 + "' != '" + false + "'", boolean99 == false);
    }

    @Test
    public void test13805() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest27.test13805");
        boolean boolean1 = org.apache.rat.document.impl.guesser.BinaryGuesser.isBinaryData("bb96bcf3-e99a-41ef-ba89-412c44f16176");
        org.junit.Assert.assertTrue("'" + boolean1 + "' != '" + false + "'", boolean1 == false);
    }

    @Test
    public void test13806() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest27.test13806");
        org.apache.rat.analysis.matchers.FullTextMatcher fullTextMatcher1 = new org.apache.rat.analysis.matchers.FullTextMatcher("58515");
    }

    @Test
    public void test13807() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest27.test13807");
        org.apache.rat.analysis.matchers.FullTextMatcher fullTextMatcher2 = new org.apache.rat.analysis.matchers.FullTextMatcher("http://org/apache/rat/meta-data", "Apache License Version 2.0");
        org.apache.rat.analysis.IHeaderMatcher.State state3 = fullTextMatcher2.currentState();
        org.apache.rat.analysis.matchers.NotMatcher notMatcher4 = new org.apache.rat.analysis.matchers.NotMatcher((org.apache.rat.analysis.IHeaderMatcher) fullTextMatcher2);
        boolean boolean6 = fullTextMatcher2.doMatch("JAVA");
        org.apache.rat.analysis.matchers.NotMatcher notMatcher7 = new org.apache.rat.analysis.matchers.NotMatcher((org.apache.rat.analysis.IHeaderMatcher) fullTextMatcher2);
        org.apache.rat.analysis.IHeaderMatcher.State state8 = fullTextMatcher2.currentState();
        // The following exception was thrown during execution in test generation
        try {
            boolean boolean9 = state8.asBoolean();
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalStateException; message: 'asBoolean' should never be called on an indeterminate state");
        } catch (java.lang.IllegalStateException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + state3 + "' != '" + org.apache.rat.analysis.IHeaderMatcher.State.i + "'", state3.equals(org.apache.rat.analysis.IHeaderMatcher.State.i));
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertTrue("'" + state8 + "' != '" + org.apache.rat.analysis.IHeaderMatcher.State.i + "'", state8.equals(org.apache.rat.analysis.IHeaderMatcher.State.i));
    }

    @Test
    public void test13808() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest27.test13808");
        org.apache.rat.configuration.Format format1 = org.apache.rat.configuration.Format.XML;
        org.apache.rat.configuration.LicenseReader licenseReader2 = format1.licenseReader();
        org.apache.rat.configuration.MatcherReader matcherReader3 = format1.matcherReader();
        org.apache.rat.configuration.LicenseReader licenseReader4 = format1.licenseReader();
        java.util.SortedSet<org.apache.rat.license.ILicense> iLicenseSet5 = licenseReader4.readLicenses();
        org.apache.rat.license.ILicense iLicense6 = org.apache.rat.license.LicenseSetFactory.search("Datum [ name ='http://org/apache/rat/meta-data#LicenseFamilyCategory',value ='GPL1  ']", iLicenseSet5);
        org.apache.rat.utils.ReportingSet<java.lang.String> strSet7 = new org.apache.rat.utils.ReportingSet<java.lang.String>();
        int int8 = strSet7.size();
        org.apache.rat.license.LicenseSetFactory licenseSetFactory9 = new org.apache.rat.license.LicenseSetFactory(iLicenseSet5, (java.util.Collection<java.lang.String>) strSet7);
        org.apache.rat.license.ILicenseFamily[] iLicenseFamilyArray10 = new org.apache.rat.license.ILicenseFamily[] {};
        java.util.ArrayList<org.apache.rat.license.ILicenseFamily> iLicenseFamilyList11 = new java.util.ArrayList<org.apache.rat.license.ILicenseFamily>();
        boolean boolean12 = java.util.Collections.addAll((java.util.Collection<org.apache.rat.license.ILicenseFamily>) iLicenseFamilyList11, iLicenseFamilyArray10);
        org.apache.rat.policy.DefaultPolicy defaultPolicy13 = new org.apache.rat.policy.DefaultPolicy((java.util.Collection<org.apache.rat.license.ILicenseFamily>) iLicenseFamilyList11);
        java.util.SortedSet<org.apache.rat.license.ILicenseFamily> iLicenseFamilySet14 = defaultPolicy13.getApprovedLicenseNames();
        java.util.SortedSet<org.apache.rat.license.ILicenseFamily> iLicenseFamilySet15 = defaultPolicy13.getApprovedLicenseNames();
        boolean boolean16 = strSet7.retainAll((java.util.Collection<org.apache.rat.license.ILicenseFamily>) iLicenseFamilySet15);
        org.apache.rat.policy.DefaultPolicy defaultPolicy17 = new org.apache.rat.policy.DefaultPolicy((java.util.Collection<org.apache.rat.license.ILicenseFamily>) iLicenseFamilySet15);
        org.junit.Assert.assertTrue("'" + format1 + "' != '" + org.apache.rat.configuration.Format.XML + "'", format1.equals(org.apache.rat.configuration.Format.XML));
        org.junit.Assert.assertNotNull(licenseReader2);
        org.junit.Assert.assertNotNull(matcherReader3);
        org.junit.Assert.assertNotNull(licenseReader4);
        org.junit.Assert.assertNotNull(iLicenseSet5);
        org.junit.Assert.assertNull(iLicense6);
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + 0 + "'", int8 == 0);
        org.junit.Assert.assertNotNull(iLicenseFamilyArray10);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertNotNull(iLicenseFamilySet14);
        org.junit.Assert.assertNotNull(iLicenseFamilySet15);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
    }

    @Test
    public void test13809() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest27.test13809");
        org.apache.rat.utils.DefaultLog defaultLog0 = org.apache.rat.utils.DefaultLog.INSTANCE;
        org.apache.rat.utils.Log log1 = null;
        org.apache.rat.ReportConfiguration reportConfiguration2 = new org.apache.rat.ReportConfiguration(log1);
        java.io.FilenameFilter filenameFilter3 = reportConfiguration2.getInputFileFilter();
        org.apache.rat.license.LicenseSetFactory.LicenseFilter licenseFilter4 = org.apache.rat.license.LicenseSetFactory.LicenseFilter.all;
        java.util.SortedSet<org.apache.rat.license.ILicense> iLicenseSet5 = reportConfiguration2.getLicenses(licenseFilter4);
        org.apache.rat.config.AddLicenseHeaders addLicenseHeaders6 = org.apache.rat.config.AddLicenseHeaders.FALSE;
        reportConfiguration2.setAddLicenseHeaders(addLicenseHeaders6);
        org.apache.rat.utils.Log log8 = null;
        org.apache.rat.ReportConfiguration reportConfiguration9 = new org.apache.rat.ReportConfiguration(log8);
        org.apache.rat.report.claim.ClaimStatistic claimStatistic10 = org.apache.rat.Reporter.report(reportConfiguration9);
        org.apache.rat.license.LicenseSetFactory.LicenseFilter licenseFilter11 = org.apache.rat.license.LicenseSetFactory.LicenseFilter.all;
        org.apache.rat.Reporter.listLicenses(reportConfiguration9, licenseFilter11);
        org.apache.rat.Reporter.listLicenses(reportConfiguration2, licenseFilter11);
        org.apache.rat.utils.Log log14 = null;
        org.apache.rat.ReportConfiguration reportConfiguration15 = new org.apache.rat.ReportConfiguration(log14);
        java.io.FilenameFilter filenameFilter16 = reportConfiguration15.getInputFileFilter();
        org.apache.rat.license.LicenseSetFactory.LicenseFilter licenseFilter17 = org.apache.rat.license.LicenseSetFactory.LicenseFilter.all;
        java.util.SortedSet<org.apache.rat.license.ILicense> iLicenseSet18 = reportConfiguration15.getLicenses(licenseFilter17);
        org.apache.rat.config.AddLicenseHeaders addLicenseHeaders19 = org.apache.rat.config.AddLicenseHeaders.FALSE;
        reportConfiguration15.setAddLicenseHeaders(addLicenseHeaders19);
        org.apache.rat.utils.Log log21 = null;
        org.apache.rat.ReportConfiguration reportConfiguration22 = new org.apache.rat.ReportConfiguration(log21);
        org.apache.rat.report.claim.ClaimStatistic claimStatistic23 = org.apache.rat.Reporter.report(reportConfiguration22);
        org.apache.rat.license.LicenseSetFactory.LicenseFilter licenseFilter24 = org.apache.rat.license.LicenseSetFactory.LicenseFilter.all;
        org.apache.rat.Reporter.listLicenses(reportConfiguration22, licenseFilter24);
        org.apache.rat.Reporter.listLicenses(reportConfiguration15, licenseFilter24);
        org.apache.rat.Reporter.listLicenses(reportConfiguration2, licenseFilter24);
        org.apache.rat.utils.Log log28 = null;
        org.apache.rat.ReportConfiguration reportConfiguration29 = new org.apache.rat.ReportConfiguration(log28);
        org.apache.commons.io.function.IOSupplier<java.io.OutputStream> outputStreamIOSupplier30 = reportConfiguration29.getOutput();
        reportConfiguration2.setOut(outputStreamIOSupplier30);
        org.apache.rat.utils.Log log32 = null;
        org.apache.rat.ReportConfiguration reportConfiguration33 = new org.apache.rat.ReportConfiguration(log32);
        org.apache.rat.report.claim.ClaimStatistic claimStatistic34 = org.apache.rat.Reporter.report(reportConfiguration33);
        org.apache.rat.utils.Log log35 = null;
        org.apache.rat.ReportConfiguration reportConfiguration36 = new org.apache.rat.ReportConfiguration(log35);
        org.apache.rat.report.claim.ClaimStatistic claimStatistic37 = org.apache.rat.Reporter.report(reportConfiguration36);
        org.apache.rat.utils.ReportingSet.Options options38 = org.apache.rat.utils.ReportingSet.Options.OVERWRITE;
        reportConfiguration36.licenseDuplicateOption(options38);
        reportConfiguration33.familyDuplicateOption(options38);
        reportConfiguration2.licenseDuplicateOption(options38);
        reportConfiguration2.addApprovedLicenseCategory("W3C Document Copyright");
        org.apache.rat.utils.Log log44 = null;
        org.apache.rat.ReportConfiguration reportConfiguration45 = new org.apache.rat.ReportConfiguration(log44);
        reportConfiguration45.addApprovedLicenseCategory(".cvsignore");
        org.apache.rat.utils.Log.Level level48 = org.apache.rat.utils.Log.Level.ERROR;
        reportConfiguration45.logLicenseCollisions(level48);
        reportConfiguration2.logLicenseCollisions(level48);
        defaultLog0.setLevel(level48);
        org.apache.rat.ReportConfiguration reportConfiguration52 = new org.apache.rat.ReportConfiguration((org.apache.rat.utils.Log) defaultLog0);
        org.apache.rat.annotation.ApacheV2LicenseAppender apacheV2LicenseAppender53 = new org.apache.rat.annotation.ApacheV2LicenseAppender((org.apache.rat.utils.Log) defaultLog0);
        org.apache.rat.report.claim.ClaimStatistic claimStatistic54 = new org.apache.rat.report.claim.ClaimStatistic();
        claimStatistic54.setNumApproved((int) (short) 10);
        java.util.Map<java.lang.String, java.lang.Integer> strMap57 = null;
        claimStatistic54.setDocumentCategoryMap(strMap57);
        java.util.Map<java.lang.String, java.lang.Integer> strMap59 = claimStatistic54.getLicenseFileNameMap();
        claimStatistic54.setNumUnknown((int) (byte) -1);
        defaultLog0.warn((java.lang.Object) claimStatistic54);
        java.util.Map<java.lang.String, java.lang.Integer> strMap63 = claimStatistic54.getLicenseFileCodeMap();
        org.junit.Assert.assertNotNull(defaultLog0);
        org.junit.Assert.assertNull(filenameFilter3);
        org.junit.Assert.assertTrue("'" + licenseFilter4 + "' != '" + org.apache.rat.license.LicenseSetFactory.LicenseFilter.all + "'", licenseFilter4.equals(org.apache.rat.license.LicenseSetFactory.LicenseFilter.all));
        org.junit.Assert.assertNotNull(iLicenseSet5);
        org.junit.Assert.assertTrue("'" + addLicenseHeaders6 + "' != '" + org.apache.rat.config.AddLicenseHeaders.FALSE + "'", addLicenseHeaders6.equals(org.apache.rat.config.AddLicenseHeaders.FALSE));
        org.junit.Assert.assertNull(claimStatistic10);
        org.junit.Assert.assertTrue("'" + licenseFilter11 + "' != '" + org.apache.rat.license.LicenseSetFactory.LicenseFilter.all + "'", licenseFilter11.equals(org.apache.rat.license.LicenseSetFactory.LicenseFilter.all));
        org.junit.Assert.assertNull(filenameFilter16);
        org.junit.Assert.assertTrue("'" + licenseFilter17 + "' != '" + org.apache.rat.license.LicenseSetFactory.LicenseFilter.all + "'", licenseFilter17.equals(org.apache.rat.license.LicenseSetFactory.LicenseFilter.all));
        org.junit.Assert.assertNotNull(iLicenseSet18);
        org.junit.Assert.assertTrue("'" + addLicenseHeaders19 + "' != '" + org.apache.rat.config.AddLicenseHeaders.FALSE + "'", addLicenseHeaders19.equals(org.apache.rat.config.AddLicenseHeaders.FALSE));
        org.junit.Assert.assertNull(claimStatistic23);
        org.junit.Assert.assertTrue("'" + licenseFilter24 + "' != '" + org.apache.rat.license.LicenseSetFactory.LicenseFilter.all + "'", licenseFilter24.equals(org.apache.rat.license.LicenseSetFactory.LicenseFilter.all));
        org.junit.Assert.assertNotNull(outputStreamIOSupplier30);
        org.junit.Assert.assertNull(claimStatistic34);
        org.junit.Assert.assertNull(claimStatistic37);
        org.junit.Assert.assertTrue("'" + options38 + "' != '" + org.apache.rat.utils.ReportingSet.Options.OVERWRITE + "'", options38.equals(org.apache.rat.utils.ReportingSet.Options.OVERWRITE));
        org.junit.Assert.assertTrue("'" + level48 + "' != '" + org.apache.rat.utils.Log.Level.ERROR + "'", level48.equals(org.apache.rat.utils.Log.Level.ERROR));
        org.junit.Assert.assertNull(strMap59);
        org.junit.Assert.assertNull(strMap63);
    }

    @Test
    public void test13810() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest27.test13810");
        org.apache.rat.utils.ReportingSet<java.lang.String> strSet0 = new org.apache.rat.utils.ReportingSet<java.lang.String>();
        org.apache.rat.utils.ReportingSet<java.lang.String> strSet2 = strSet0.tailSet("hi!");
        org.apache.rat.configuration.LicenseReader[] licenseReaderArray3 = new org.apache.rat.configuration.LicenseReader[] {};
        org.apache.rat.configuration.LicenseReader[] licenseReaderArray4 = strSet2.toArray(licenseReaderArray3);
        java.util.function.Function<java.lang.String, java.lang.String> strFunction5 = null;
        org.apache.rat.utils.ReportingSet<java.lang.String> strSet6 = strSet2.setMsgFormat(strFunction5);
        org.apache.rat.utils.Log log7 = null;
        org.apache.rat.ReportConfiguration reportConfiguration8 = new org.apache.rat.ReportConfiguration(log7);
        org.apache.rat.report.claim.ClaimStatistic claimStatistic9 = org.apache.rat.Reporter.report(reportConfiguration8);
        org.apache.commons.io.function.IOSupplier<java.io.OutputStream> outputStreamIOSupplier10 = reportConfiguration8.getOutput();
        org.apache.rat.license.ILicense iLicense11 = null;
        reportConfiguration8.addLicense(iLicense11);
        org.apache.rat.Defaults.Builder builder13 = org.apache.rat.Defaults.builder();
        org.apache.rat.Defaults defaults14 = builder13.build();
        reportConfiguration8.setFrom(defaults14);
        org.apache.rat.license.LicenseSetFactory.LicenseFilter licenseFilter16 = org.apache.rat.license.LicenseSetFactory.LicenseFilter.all;
        java.util.SortedSet<org.apache.rat.license.ILicense> iLicenseSet17 = defaults14.getLicenses(licenseFilter16);
        org.apache.rat.utils.Log log18 = null;
        org.apache.rat.ReportConfiguration reportConfiguration19 = new org.apache.rat.ReportConfiguration(log18);
        java.io.FilenameFilter filenameFilter20 = reportConfiguration19.getInputFileFilter();
        org.apache.rat.license.LicenseSetFactory.LicenseFilter licenseFilter21 = org.apache.rat.license.LicenseSetFactory.LicenseFilter.all;
        java.util.SortedSet<org.apache.rat.license.ILicense> iLicenseSet22 = reportConfiguration19.getLicenses(licenseFilter21);
        org.apache.rat.config.AddLicenseHeaders addLicenseHeaders23 = org.apache.rat.config.AddLicenseHeaders.FALSE;
        reportConfiguration19.setAddLicenseHeaders(addLicenseHeaders23);
        org.apache.rat.utils.Log log25 = null;
        org.apache.rat.ReportConfiguration reportConfiguration26 = new org.apache.rat.ReportConfiguration(log25);
        org.apache.rat.report.claim.ClaimStatistic claimStatistic27 = org.apache.rat.Reporter.report(reportConfiguration26);
        org.apache.rat.license.LicenseSetFactory.LicenseFilter licenseFilter28 = org.apache.rat.license.LicenseSetFactory.LicenseFilter.all;
        org.apache.rat.Reporter.listLicenses(reportConfiguration26, licenseFilter28);
        org.apache.rat.Reporter.listLicenses(reportConfiguration19, licenseFilter28);
        org.apache.rat.utils.Log log31 = null;
        org.apache.rat.ReportConfiguration reportConfiguration32 = new org.apache.rat.ReportConfiguration(log31);
        java.io.FilenameFilter filenameFilter33 = reportConfiguration32.getInputFileFilter();
        org.apache.rat.license.LicenseSetFactory.LicenseFilter licenseFilter34 = org.apache.rat.license.LicenseSetFactory.LicenseFilter.all;
        java.util.SortedSet<org.apache.rat.license.ILicense> iLicenseSet35 = reportConfiguration32.getLicenses(licenseFilter34);
        org.apache.rat.config.AddLicenseHeaders addLicenseHeaders36 = org.apache.rat.config.AddLicenseHeaders.FALSE;
        reportConfiguration32.setAddLicenseHeaders(addLicenseHeaders36);
        org.apache.rat.utils.Log log38 = null;
        org.apache.rat.ReportConfiguration reportConfiguration39 = new org.apache.rat.ReportConfiguration(log38);
        org.apache.rat.report.claim.ClaimStatistic claimStatistic40 = org.apache.rat.Reporter.report(reportConfiguration39);
        org.apache.rat.license.LicenseSetFactory.LicenseFilter licenseFilter41 = org.apache.rat.license.LicenseSetFactory.LicenseFilter.all;
        org.apache.rat.Reporter.listLicenses(reportConfiguration39, licenseFilter41);
        org.apache.rat.Reporter.listLicenses(reportConfiguration32, licenseFilter41);
        org.apache.rat.Reporter.listLicenses(reportConfiguration19, licenseFilter41);
        java.io.FilenameFilter filenameFilter45 = reportConfiguration19.getInputFileFilter();
        reportConfiguration19.setStyleReport(false);
        org.apache.rat.report.IReportable iReportable48 = null;
        reportConfiguration19.setReportable(iReportable48);
        org.apache.rat.license.LicenseSetFactory.LicenseFilter licenseFilter50 = org.apache.rat.license.LicenseSetFactory.LicenseFilter.approved;
        java.util.SortedSet<org.apache.rat.license.ILicense> iLicenseSet51 = reportConfiguration19.getLicenses(licenseFilter50);
        java.util.SortedSet<org.apache.rat.license.ILicenseFamily> iLicenseFamilySet52 = defaults14.getLicenseFamilies(licenseFilter50);
        boolean boolean53 = strSet2.removeAll((java.util.Collection<org.apache.rat.license.ILicenseFamily>) iLicenseFamilySet52);
        java.util.Iterator<java.lang.String> strItor54 = strSet2.iterator();
        org.junit.Assert.assertNotNull(strSet2);
        org.junit.Assert.assertNotNull(licenseReaderArray3);
        org.junit.Assert.assertNotNull(licenseReaderArray4);
        org.junit.Assert.assertNotNull(strSet6);
        org.junit.Assert.assertNull(claimStatistic9);
        org.junit.Assert.assertNotNull(outputStreamIOSupplier10);
        org.junit.Assert.assertNotNull(builder13);
        org.junit.Assert.assertNotNull(defaults14);
        org.junit.Assert.assertTrue("'" + licenseFilter16 + "' != '" + org.apache.rat.license.LicenseSetFactory.LicenseFilter.all + "'", licenseFilter16.equals(org.apache.rat.license.LicenseSetFactory.LicenseFilter.all));
        org.junit.Assert.assertNotNull(iLicenseSet17);
        org.junit.Assert.assertNull(filenameFilter20);
        org.junit.Assert.assertTrue("'" + licenseFilter21 + "' != '" + org.apache.rat.license.LicenseSetFactory.LicenseFilter.all + "'", licenseFilter21.equals(org.apache.rat.license.LicenseSetFactory.LicenseFilter.all));
        org.junit.Assert.assertNotNull(iLicenseSet22);
        org.junit.Assert.assertTrue("'" + addLicenseHeaders23 + "' != '" + org.apache.rat.config.AddLicenseHeaders.FALSE + "'", addLicenseHeaders23.equals(org.apache.rat.config.AddLicenseHeaders.FALSE));
        org.junit.Assert.assertNull(claimStatistic27);
        org.junit.Assert.assertTrue("'" + licenseFilter28 + "' != '" + org.apache.rat.license.LicenseSetFactory.LicenseFilter.all + "'", licenseFilter28.equals(org.apache.rat.license.LicenseSetFactory.LicenseFilter.all));
        org.junit.Assert.assertNull(filenameFilter33);
        org.junit.Assert.assertTrue("'" + licenseFilter34 + "' != '" + org.apache.rat.license.LicenseSetFactory.LicenseFilter.all + "'", licenseFilter34.equals(org.apache.rat.license.LicenseSetFactory.LicenseFilter.all));
        org.junit.Assert.assertNotNull(iLicenseSet35);
        org.junit.Assert.assertTrue("'" + addLicenseHeaders36 + "' != '" + org.apache.rat.config.AddLicenseHeaders.FALSE + "'", addLicenseHeaders36.equals(org.apache.rat.config.AddLicenseHeaders.FALSE));
        org.junit.Assert.assertNull(claimStatistic40);
        org.junit.Assert.assertTrue("'" + licenseFilter41 + "' != '" + org.apache.rat.license.LicenseSetFactory.LicenseFilter.all + "'", licenseFilter41.equals(org.apache.rat.license.LicenseSetFactory.LicenseFilter.all));
        org.junit.Assert.assertNull(filenameFilter45);
        org.junit.Assert.assertTrue("'" + licenseFilter50 + "' != '" + org.apache.rat.license.LicenseSetFactory.LicenseFilter.approved + "'", licenseFilter50.equals(org.apache.rat.license.LicenseSetFactory.LicenseFilter.approved));
        org.junit.Assert.assertNotNull(iLicenseSet51);
        org.junit.Assert.assertNotNull(iLicenseFamilySet52);
        org.junit.Assert.assertTrue("'" + boolean53 + "' != '" + false + "'", boolean53 == false);
        org.junit.Assert.assertNotNull(strItor54);
    }

    @Test
    public void test13811() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest27.test13811");
        org.apache.rat.license.ILicense[] iLicenseArray2 = new org.apache.rat.license.ILicense[] {};
        java.util.TreeSet<org.apache.rat.license.ILicense> iLicenseSet3 = new java.util.TreeSet<org.apache.rat.license.ILicense>();
        boolean boolean4 = java.util.Collections.addAll((java.util.Collection<org.apache.rat.license.ILicense>) iLicenseSet3, iLicenseArray2);
        java.lang.String[] strArray17 = new java.lang.String[] { "GPL2 ", "GPL1 ", "notice", "http://org/apache/rat/meta-data#LicenseFamilyName", "notice", "GPL2 ", "http://org/apache/rat/meta-data#LicenseFamilyName", "", "GPL2 ", "", "GPL1 ", "hi!" };
        java.util.ArrayList<java.lang.String> strList18 = new java.util.ArrayList<java.lang.String>();
        boolean boolean19 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strList18, strArray17);
        org.apache.rat.license.LicenseSetFactory licenseSetFactory20 = new org.apache.rat.license.LicenseSetFactory((java.util.SortedSet<org.apache.rat.license.ILicense>) iLicenseSet3, (java.util.Collection<java.lang.String>) strList18);
        org.apache.rat.utils.Log log21 = null;
        org.apache.rat.ReportConfiguration reportConfiguration22 = new org.apache.rat.ReportConfiguration(log21);
        java.io.FilenameFilter filenameFilter23 = reportConfiguration22.getInputFileFilter();
        org.apache.rat.license.LicenseSetFactory.LicenseFilter licenseFilter24 = org.apache.rat.license.LicenseSetFactory.LicenseFilter.all;
        java.util.SortedSet<org.apache.rat.license.ILicense> iLicenseSet25 = reportConfiguration22.getLicenses(licenseFilter24);
        org.apache.rat.config.AddLicenseHeaders addLicenseHeaders26 = org.apache.rat.config.AddLicenseHeaders.FALSE;
        reportConfiguration22.setAddLicenseHeaders(addLicenseHeaders26);
        org.apache.rat.utils.Log log28 = null;
        org.apache.rat.ReportConfiguration reportConfiguration29 = new org.apache.rat.ReportConfiguration(log28);
        org.apache.rat.report.claim.ClaimStatistic claimStatistic30 = org.apache.rat.Reporter.report(reportConfiguration29);
        org.apache.rat.license.LicenseSetFactory.LicenseFilter licenseFilter31 = org.apache.rat.license.LicenseSetFactory.LicenseFilter.all;
        org.apache.rat.Reporter.listLicenses(reportConfiguration29, licenseFilter31);
        org.apache.rat.Reporter.listLicenses(reportConfiguration22, licenseFilter31);
        org.apache.rat.utils.Log log34 = null;
        org.apache.rat.ReportConfiguration reportConfiguration35 = new org.apache.rat.ReportConfiguration(log34);
        java.io.FilenameFilter filenameFilter36 = reportConfiguration35.getInputFileFilter();
        org.apache.rat.license.LicenseSetFactory.LicenseFilter licenseFilter37 = org.apache.rat.license.LicenseSetFactory.LicenseFilter.all;
        java.util.SortedSet<org.apache.rat.license.ILicense> iLicenseSet38 = reportConfiguration35.getLicenses(licenseFilter37);
        org.apache.rat.config.AddLicenseHeaders addLicenseHeaders39 = org.apache.rat.config.AddLicenseHeaders.FALSE;
        reportConfiguration35.setAddLicenseHeaders(addLicenseHeaders39);
        org.apache.rat.utils.Log log41 = null;
        org.apache.rat.ReportConfiguration reportConfiguration42 = new org.apache.rat.ReportConfiguration(log41);
        org.apache.rat.report.claim.ClaimStatistic claimStatistic43 = org.apache.rat.Reporter.report(reportConfiguration42);
        org.apache.rat.license.LicenseSetFactory.LicenseFilter licenseFilter44 = org.apache.rat.license.LicenseSetFactory.LicenseFilter.all;
        org.apache.rat.Reporter.listLicenses(reportConfiguration42, licenseFilter44);
        org.apache.rat.Reporter.listLicenses(reportConfiguration35, licenseFilter44);
        org.apache.rat.Reporter.listLicenses(reportConfiguration22, licenseFilter44);
        java.util.SortedSet<org.apache.rat.license.ILicense> iLicenseSet48 = licenseSetFactory20.getLicenses(licenseFilter44);
        org.apache.rat.license.ILicense iLicense49 = org.apache.rat.license.LicenseSetFactory.search("RegexBuilder: 255ef7d8-e270-4908-9de7-bebc7df6eb88", iLicenseSet48);
        org.apache.rat.license.ILicense iLicense50 = org.apache.rat.license.LicenseSetFactory.search("REGEXBUILDER: NULL", iLicenseSet48);
        org.junit.Assert.assertNotNull(iLicenseArray2);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertNotNull(strArray17);
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + true + "'", boolean19 == true);
        org.junit.Assert.assertNull(filenameFilter23);
        org.junit.Assert.assertTrue("'" + licenseFilter24 + "' != '" + org.apache.rat.license.LicenseSetFactory.LicenseFilter.all + "'", licenseFilter24.equals(org.apache.rat.license.LicenseSetFactory.LicenseFilter.all));
        org.junit.Assert.assertNotNull(iLicenseSet25);
        org.junit.Assert.assertTrue("'" + addLicenseHeaders26 + "' != '" + org.apache.rat.config.AddLicenseHeaders.FALSE + "'", addLicenseHeaders26.equals(org.apache.rat.config.AddLicenseHeaders.FALSE));
        org.junit.Assert.assertNull(claimStatistic30);
        org.junit.Assert.assertTrue("'" + licenseFilter31 + "' != '" + org.apache.rat.license.LicenseSetFactory.LicenseFilter.all + "'", licenseFilter31.equals(org.apache.rat.license.LicenseSetFactory.LicenseFilter.all));
        org.junit.Assert.assertNull(filenameFilter36);
        org.junit.Assert.assertTrue("'" + licenseFilter37 + "' != '" + org.apache.rat.license.LicenseSetFactory.LicenseFilter.all + "'", licenseFilter37.equals(org.apache.rat.license.LicenseSetFactory.LicenseFilter.all));
        org.junit.Assert.assertNotNull(iLicenseSet38);
        org.junit.Assert.assertTrue("'" + addLicenseHeaders39 + "' != '" + org.apache.rat.config.AddLicenseHeaders.FALSE + "'", addLicenseHeaders39.equals(org.apache.rat.config.AddLicenseHeaders.FALSE));
        org.junit.Assert.assertNull(claimStatistic43);
        org.junit.Assert.assertTrue("'" + licenseFilter44 + "' != '" + org.apache.rat.license.LicenseSetFactory.LicenseFilter.all + "'", licenseFilter44.equals(org.apache.rat.license.LicenseSetFactory.LicenseFilter.all));
        org.junit.Assert.assertNotNull(iLicenseSet48);
        org.junit.Assert.assertNull(iLicense49);
        org.junit.Assert.assertNull(iLicense50);
    }

    @Test
    public void test13812() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest27.test13812");
        java.io.File file0 = null;
        java.util.regex.Pattern pattern1 = null;
        org.apache.rat.utils.Log log2 = null;
        org.apache.rat.ReportConfiguration reportConfiguration3 = new org.apache.rat.ReportConfiguration(log2);
        org.apache.commons.io.function.IOSupplier<java.io.OutputStream> outputStreamIOSupplier4 = reportConfiguration3.getOutput();
        reportConfiguration3.setCopyrightMessage("MANIFEST.MF");
        org.apache.rat.utils.Log log7 = reportConfiguration3.getLog();
        org.apache.commons.io.function.IOSupplier<java.io.InputStream> inputStreamIOSupplier8 = org.apache.rat.Defaults.getPlainStyleSheet();
        reportConfiguration3.setStyleSheet(inputStreamIOSupplier8);
        java.lang.String str10 = reportConfiguration3.getCopyrightMessage();
        org.apache.commons.io.filefilter.IOFileFilter iOFileFilter11 = reportConfiguration3.getDirectoryFilter();
        org.apache.rat.utils.Log log12 = null;
        org.apache.rat.ReportConfiguration reportConfiguration13 = new org.apache.rat.ReportConfiguration(log12);
        org.apache.commons.io.function.IOSupplier<java.io.OutputStream> outputStreamIOSupplier14 = reportConfiguration13.getOutput();
        reportConfiguration13.setCopyrightMessage("MANIFEST.MF");
        org.apache.rat.utils.Log log17 = reportConfiguration13.getLog();
        org.apache.commons.io.function.IOSupplier<java.io.InputStream> inputStreamIOSupplier18 = org.apache.rat.Defaults.getPlainStyleSheet();
        reportConfiguration13.setStyleSheet(inputStreamIOSupplier18);
        java.lang.String str20 = reportConfiguration13.getCopyrightMessage();
        org.apache.commons.io.filefilter.IOFileFilter iOFileFilter21 = reportConfiguration13.getDirectoryFilter();
        org.apache.rat.utils.Log log22 = null;
        org.apache.rat.ReportConfiguration reportConfiguration23 = new org.apache.rat.ReportConfiguration(log22);
        java.io.FilenameFilter filenameFilter24 = reportConfiguration23.getInputFileFilter();
        org.apache.rat.license.LicenseSetFactory.LicenseFilter licenseFilter25 = org.apache.rat.license.LicenseSetFactory.LicenseFilter.all;
        java.util.SortedSet<org.apache.rat.license.ILicense> iLicenseSet26 = reportConfiguration23.getLicenses(licenseFilter25);
        org.apache.rat.license.ILicenseFamily iLicenseFamily27 = null;
        reportConfiguration23.addFamily(iLicenseFamily27);
        org.apache.commons.io.filefilter.IOFileFilter iOFileFilter29 = reportConfiguration23.getDirectoryFilter();
        org.apache.rat.utils.Log log30 = null;
        org.apache.rat.ReportConfiguration reportConfiguration31 = new org.apache.rat.ReportConfiguration(log30);
        java.io.FilenameFilter filenameFilter32 = reportConfiguration31.getInputFileFilter();
        org.apache.rat.license.LicenseSetFactory.LicenseFilter licenseFilter33 = org.apache.rat.license.LicenseSetFactory.LicenseFilter.all;
        java.util.SortedSet<org.apache.rat.license.ILicense> iLicenseSet34 = reportConfiguration31.getLicenses(licenseFilter33);
        org.apache.rat.config.AddLicenseHeaders addLicenseHeaders35 = org.apache.rat.config.AddLicenseHeaders.FALSE;
        reportConfiguration31.setAddLicenseHeaders(addLicenseHeaders35);
        org.apache.rat.utils.Log log37 = null;
        org.apache.rat.ReportConfiguration reportConfiguration38 = new org.apache.rat.ReportConfiguration(log37);
        org.apache.rat.report.claim.ClaimStatistic claimStatistic39 = org.apache.rat.Reporter.report(reportConfiguration38);
        org.apache.rat.license.LicenseSetFactory.LicenseFilter licenseFilter40 = org.apache.rat.license.LicenseSetFactory.LicenseFilter.all;
        org.apache.rat.Reporter.listLicenses(reportConfiguration38, licenseFilter40);
        org.apache.rat.Reporter.listLicenses(reportConfiguration31, licenseFilter40);
        org.apache.rat.utils.Log log43 = null;
        org.apache.rat.ReportConfiguration reportConfiguration44 = new org.apache.rat.ReportConfiguration(log43);
        java.io.FilenameFilter filenameFilter45 = reportConfiguration44.getInputFileFilter();
        org.apache.rat.license.LicenseSetFactory.LicenseFilter licenseFilter46 = org.apache.rat.license.LicenseSetFactory.LicenseFilter.all;
        java.util.SortedSet<org.apache.rat.license.ILicense> iLicenseSet47 = reportConfiguration44.getLicenses(licenseFilter46);
        org.apache.rat.config.AddLicenseHeaders addLicenseHeaders48 = org.apache.rat.config.AddLicenseHeaders.FALSE;
        reportConfiguration44.setAddLicenseHeaders(addLicenseHeaders48);
        org.apache.rat.utils.Log log50 = null;
        org.apache.rat.ReportConfiguration reportConfiguration51 = new org.apache.rat.ReportConfiguration(log50);
        org.apache.rat.report.claim.ClaimStatistic claimStatistic52 = org.apache.rat.Reporter.report(reportConfiguration51);
        org.apache.rat.license.LicenseSetFactory.LicenseFilter licenseFilter53 = org.apache.rat.license.LicenseSetFactory.LicenseFilter.all;
        org.apache.rat.Reporter.listLicenses(reportConfiguration51, licenseFilter53);
        org.apache.rat.Reporter.listLicenses(reportConfiguration44, licenseFilter53);
        org.apache.rat.Reporter.listLicenses(reportConfiguration31, licenseFilter53);
        org.apache.rat.utils.Log log57 = null;
        org.apache.rat.ReportConfiguration reportConfiguration58 = new org.apache.rat.ReportConfiguration(log57);
        org.apache.commons.io.function.IOSupplier<java.io.OutputStream> outputStreamIOSupplier59 = reportConfiguration58.getOutput();
        reportConfiguration31.setOut(outputStreamIOSupplier59);
        org.apache.rat.utils.Log.Level level61 = org.apache.rat.utils.Log.Level.WARN;
        reportConfiguration31.logLicenseCollisions(level61);
        org.apache.commons.io.filefilter.IOFileFilter iOFileFilter63 = reportConfiguration31.getDirectoryFilter();
        java.nio.file.Path path64 = null;
        boolean boolean65 = iOFileFilter63.matches(path64);
        java.nio.file.Path path66 = null;
        java.nio.file.attribute.BasicFileAttributes basicFileAttributes67 = null;
        java.nio.file.FileVisitResult fileVisitResult68 = iOFileFilter63.accept(path66, basicFileAttributes67);
        org.apache.commons.io.filefilter.IOFileFilter iOFileFilter69 = iOFileFilter29.or(iOFileFilter63);
        java.nio.file.Path path70 = null;
        java.nio.file.attribute.BasicFileAttributes basicFileAttributes71 = null;
        java.nio.file.FileVisitResult fileVisitResult72 = iOFileFilter69.accept(path70, basicFileAttributes71);
        org.apache.commons.io.filefilter.IOFileFilter iOFileFilter73 = iOFileFilter69.negate();
        org.apache.commons.io.filefilter.IOFileFilter iOFileFilter74 = iOFileFilter21.or(iOFileFilter73);
        org.apache.commons.io.filefilter.IOFileFilter iOFileFilter75 = iOFileFilter11.or(iOFileFilter74);
        org.apache.rat.utils.Log log76 = null;
        org.apache.rat.ReportConfiguration reportConfiguration77 = new org.apache.rat.ReportConfiguration(log76);
        java.io.FilenameFilter filenameFilter78 = reportConfiguration77.getInputFileFilter();
        org.apache.rat.license.LicenseSetFactory.LicenseFilter licenseFilter79 = org.apache.rat.license.LicenseSetFactory.LicenseFilter.all;
        java.util.SortedSet<org.apache.rat.license.ILicense> iLicenseSet80 = reportConfiguration77.getLicenses(licenseFilter79);
        org.apache.rat.config.AddLicenseHeaders addLicenseHeaders81 = org.apache.rat.config.AddLicenseHeaders.FALSE;
        reportConfiguration77.setAddLicenseHeaders(addLicenseHeaders81);
        org.apache.rat.utils.Log log83 = null;
        org.apache.rat.ReportConfiguration reportConfiguration84 = new org.apache.rat.ReportConfiguration(log83);
        org.apache.rat.report.claim.ClaimStatistic claimStatistic85 = org.apache.rat.Reporter.report(reportConfiguration84);
        org.apache.rat.license.LicenseSetFactory.LicenseFilter licenseFilter86 = org.apache.rat.license.LicenseSetFactory.LicenseFilter.all;
        org.apache.rat.Reporter.listLicenses(reportConfiguration84, licenseFilter86);
        org.apache.rat.Reporter.listLicenses(reportConfiguration77, licenseFilter86);
        org.apache.rat.report.IReportable iReportable89 = null;
        reportConfiguration77.setReportable(iReportable89);
        org.apache.commons.io.filefilter.IOFileFilter iOFileFilter91 = reportConfiguration77.getDirectoryFilter();
        java.nio.file.Path path92 = null;
        java.nio.file.attribute.BasicFileAttributes basicFileAttributes93 = null;
        java.nio.file.FileVisitResult fileVisitResult94 = iOFileFilter91.accept(path92, basicFileAttributes93);
        org.apache.commons.io.filefilter.IOFileFilter iOFileFilter95 = iOFileFilter91.negate();
        org.apache.commons.io.filefilter.IOFileFilter iOFileFilter96 = iOFileFilter74.or(iOFileFilter95);
        // The following exception was thrown during execution in test generation
        try {
            org.apache.rat.walker.DirectoryWalker directoryWalker97 = new org.apache.rat.walker.DirectoryWalker(file0, pattern1, iOFileFilter96);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(outputStreamIOSupplier4);
        org.junit.Assert.assertNull(log7);
        org.junit.Assert.assertNotNull(inputStreamIOSupplier8);
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "MANIFEST.MF" + "'", str10, "MANIFEST.MF");
        org.junit.Assert.assertNotNull(iOFileFilter11);
        org.junit.Assert.assertNotNull(outputStreamIOSupplier14);
        org.junit.Assert.assertNull(log17);
        org.junit.Assert.assertNotNull(inputStreamIOSupplier18);
        org.junit.Assert.assertEquals("'" + str20 + "' != '" + "MANIFEST.MF" + "'", str20, "MANIFEST.MF");
        org.junit.Assert.assertNotNull(iOFileFilter21);
        org.junit.Assert.assertNull(filenameFilter24);
        org.junit.Assert.assertTrue("'" + licenseFilter25 + "' != '" + org.apache.rat.license.LicenseSetFactory.LicenseFilter.all + "'", licenseFilter25.equals(org.apache.rat.license.LicenseSetFactory.LicenseFilter.all));
        org.junit.Assert.assertNotNull(iLicenseSet26);
        org.junit.Assert.assertNotNull(iOFileFilter29);
        org.junit.Assert.assertNull(filenameFilter32);
        org.junit.Assert.assertTrue("'" + licenseFilter33 + "' != '" + org.apache.rat.license.LicenseSetFactory.LicenseFilter.all + "'", licenseFilter33.equals(org.apache.rat.license.LicenseSetFactory.LicenseFilter.all));
        org.junit.Assert.assertNotNull(iLicenseSet34);
        org.junit.Assert.assertTrue("'" + addLicenseHeaders35 + "' != '" + org.apache.rat.config.AddLicenseHeaders.FALSE + "'", addLicenseHeaders35.equals(org.apache.rat.config.AddLicenseHeaders.FALSE));
        org.junit.Assert.assertNull(claimStatistic39);
        org.junit.Assert.assertTrue("'" + licenseFilter40 + "' != '" + org.apache.rat.license.LicenseSetFactory.LicenseFilter.all + "'", licenseFilter40.equals(org.apache.rat.license.LicenseSetFactory.LicenseFilter.all));
        org.junit.Assert.assertNull(filenameFilter45);
        org.junit.Assert.assertTrue("'" + licenseFilter46 + "' != '" + org.apache.rat.license.LicenseSetFactory.LicenseFilter.all + "'", licenseFilter46.equals(org.apache.rat.license.LicenseSetFactory.LicenseFilter.all));
        org.junit.Assert.assertNotNull(iLicenseSet47);
        org.junit.Assert.assertTrue("'" + addLicenseHeaders48 + "' != '" + org.apache.rat.config.AddLicenseHeaders.FALSE + "'", addLicenseHeaders48.equals(org.apache.rat.config.AddLicenseHeaders.FALSE));
        org.junit.Assert.assertNull(claimStatistic52);
        org.junit.Assert.assertTrue("'" + licenseFilter53 + "' != '" + org.apache.rat.license.LicenseSetFactory.LicenseFilter.all + "'", licenseFilter53.equals(org.apache.rat.license.LicenseSetFactory.LicenseFilter.all));
        org.junit.Assert.assertNotNull(outputStreamIOSupplier59);
        org.junit.Assert.assertTrue("'" + level61 + "' != '" + org.apache.rat.utils.Log.Level.WARN + "'", level61.equals(org.apache.rat.utils.Log.Level.WARN));
        org.junit.Assert.assertNotNull(iOFileFilter63);
        org.junit.Assert.assertTrue("'" + boolean65 + "' != '" + false + "'", boolean65 == false);
        org.junit.Assert.assertTrue("'" + fileVisitResult68 + "' != '" + java.nio.file.FileVisitResult.TERMINATE + "'", fileVisitResult68.equals(java.nio.file.FileVisitResult.TERMINATE));
        org.junit.Assert.assertNotNull(iOFileFilter69);
        org.junit.Assert.assertTrue("'" + fileVisitResult72 + "' != '" + java.nio.file.FileVisitResult.TERMINATE + "'", fileVisitResult72.equals(java.nio.file.FileVisitResult.TERMINATE));
        org.junit.Assert.assertNotNull(iOFileFilter73);
        org.junit.Assert.assertNotNull(iOFileFilter74);
        org.junit.Assert.assertNotNull(iOFileFilter75);
        org.junit.Assert.assertNull(filenameFilter78);
        org.junit.Assert.assertTrue("'" + licenseFilter79 + "' != '" + org.apache.rat.license.LicenseSetFactory.LicenseFilter.all + "'", licenseFilter79.equals(org.apache.rat.license.LicenseSetFactory.LicenseFilter.all));
        org.junit.Assert.assertNotNull(iLicenseSet80);
        org.junit.Assert.assertTrue("'" + addLicenseHeaders81 + "' != '" + org.apache.rat.config.AddLicenseHeaders.FALSE + "'", addLicenseHeaders81.equals(org.apache.rat.config.AddLicenseHeaders.FALSE));
        org.junit.Assert.assertNull(claimStatistic85);
        org.junit.Assert.assertTrue("'" + licenseFilter86 + "' != '" + org.apache.rat.license.LicenseSetFactory.LicenseFilter.all + "'", licenseFilter86.equals(org.apache.rat.license.LicenseSetFactory.LicenseFilter.all));
        org.junit.Assert.assertNotNull(iOFileFilter91);
        org.junit.Assert.assertTrue("'" + fileVisitResult94 + "' != '" + java.nio.file.FileVisitResult.TERMINATE + "'", fileVisitResult94.equals(java.nio.file.FileVisitResult.TERMINATE));
        org.junit.Assert.assertNotNull(iOFileFilter95);
        org.junit.Assert.assertNotNull(iOFileFilter96);
    }

    @Test
    public void test13813() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest27.test13813");
        boolean boolean1 = org.apache.rat.document.impl.guesser.BinaryGuesser.isBytecode("Copyright Builder: s:10ceccc6-9da0-47a6-810c-684cf0a59f88 e:null o:824f4e11-66e9-46be-a4d6-3a2b761d6238");
        org.junit.Assert.assertTrue("'" + boolean1 + "' != '" + false + "'", boolean1 == false);
    }

    @Test
    public void test13814() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest27.test13814");
        java.lang.String[] strArray5 = new java.lang.String[] { "http://org/apache/rat/meta-data#LicenseFamilyCategory", "Datum [ name ='http://org/apache/rat/meta-data#LicenseFamilyCategory',value ='GPL1  ']", "MANIFEST.MF", "AllBuilder:", "The MIT License" };
        org.apache.rat.utils.ReportingSet<java.lang.String> strSet6 = new org.apache.rat.utils.ReportingSet<java.lang.String>();
        boolean boolean7 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strSet6, strArray5);
        boolean boolean9 = strSet6.addIfNotPresent("http://org/apache/rat/meta-data#LicenseFamilyName");
        boolean boolean11 = strSet6.addIfNotPresent("ef7a8b13-64c3-4510-bb0c-dbf208e1e73f");
        java.util.function.Function<java.lang.String, java.lang.String> strFunction12 = null;
        org.apache.rat.utils.ReportingSet<java.lang.String> strSet13 = strSet6.setMsgFormat(strFunction12);
        java.util.Spliterator<java.lang.String> strSpliterator14 = strSet6.spliterator();
        org.apache.rat.utils.Log log15 = null;
        org.apache.rat.ReportConfiguration reportConfiguration16 = new org.apache.rat.ReportConfiguration(log15);
        org.apache.rat.license.ILicenseFamily[] iLicenseFamilyArray17 = new org.apache.rat.license.ILicenseFamily[] {};
        java.util.ArrayList<org.apache.rat.license.ILicenseFamily> iLicenseFamilyList18 = new java.util.ArrayList<org.apache.rat.license.ILicenseFamily>();
        boolean boolean19 = java.util.Collections.addAll((java.util.Collection<org.apache.rat.license.ILicenseFamily>) iLicenseFamilyList18, iLicenseFamilyArray17);
        reportConfiguration16.addFamilies((java.util.Collection<org.apache.rat.license.ILicenseFamily>) iLicenseFamilyList18);
        boolean boolean21 = strSet6.containsAll((java.util.Collection<org.apache.rat.license.ILicenseFamily>) iLicenseFamilyList18);
        org.apache.rat.policy.DefaultPolicy defaultPolicy22 = new org.apache.rat.policy.DefaultPolicy((java.util.Collection<org.apache.rat.license.ILicenseFamily>) iLicenseFamilyList18);
        org.apache.rat.api.Document document23 = null;
        defaultPolicy22.analyse(document23);
        java.util.SortedSet<org.apache.rat.license.ILicenseFamily> iLicenseFamilySet25 = defaultPolicy22.getApprovedLicenseNames();
        org.apache.rat.api.Document document26 = null;
        defaultPolicy22.analyse(document26);
        org.apache.rat.api.Document document28 = null;
        defaultPolicy22.analyse(document28);
        org.junit.Assert.assertNotNull(strArray5);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + true + "'", boolean7 == true);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + true + "'", boolean9 == true);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + true + "'", boolean11 == true);
        org.junit.Assert.assertNotNull(strSet13);
        org.junit.Assert.assertNotNull(strSpliterator14);
        org.junit.Assert.assertNotNull(iLicenseFamilyArray17);
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + false + "'", boolean19 == false);
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + true + "'", boolean21 == true);
        org.junit.Assert.assertNotNull(iLicenseFamilySet25);
    }

    @Test
    public void test13815() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest27.test13815");
        org.apache.rat.report.claim.ClaimStatistic claimStatistic0 = new org.apache.rat.report.claim.ClaimStatistic();
        claimStatistic0.setNumApproved((int) (short) 10);
        java.util.Map<java.lang.String, java.lang.Integer> strMap3 = null;
        claimStatistic0.setDocumentCategoryMap(strMap3);
        claimStatistic0.setNumUnknown((int) '4');
        claimStatistic0.setNumUnknown((int) (byte) 0);
        claimStatistic0.setNumUnknown((int) (byte) 10);
        int int11 = claimStatistic0.getNumUnknown();
        int int12 = claimStatistic0.getNumGenerated();
        java.util.Map<java.lang.String, java.lang.Integer> strMap13 = null;
        claimStatistic0.setLicenseFileCodeMap(strMap13);
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 10 + "'", int11 == 10);
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + 0 + "'", int12 == 0);
    }

    @Test
    public void test13816() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest27.test13816");
        java.lang.String[] strArray5 = new java.lang.String[] { "http://org/apache/rat/meta-data#LicenseFamilyCategory", "Datum [ name ='http://org/apache/rat/meta-data#LicenseFamilyCategory',value ='GPL1  ']", "MANIFEST.MF", "AllBuilder:", "The MIT License" };
        org.apache.rat.utils.ReportingSet<java.lang.String> strSet6 = new org.apache.rat.utils.ReportingSet<java.lang.String>();
        boolean boolean7 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strSet6, strArray5);
        boolean boolean9 = strSet6.addIfNotPresent("http://org/apache/rat/meta-data#LicenseFamilyName");
        java.util.Iterator<java.lang.String> strItor10 = strSet6.iterator();
        strSet6.clear();
        int int12 = strSet6.size();
        java.util.function.Function<java.lang.String, java.lang.String> strFunction13 = null;
        org.apache.rat.utils.ReportingSet<java.lang.String> strSet14 = strSet6.setMsgFormat(strFunction13);
        java.util.Comparator<? super java.lang.String> wildcardComparator15 = strSet14.comparator();
        org.apache.rat.utils.Log log16 = null;
        org.apache.rat.utils.ReportingSet<java.lang.String> strSet17 = strSet14.setLog(log16);
        java.util.function.Function<java.lang.String, java.lang.String> strFunction18 = null;
        org.apache.rat.utils.ReportingSet<java.lang.String> strSet19 = strSet14.setMsgFormat(strFunction18);
        java.util.stream.Stream<java.lang.String> strStream20 = strSet19.stream();
        org.junit.Assert.assertNotNull(strArray5);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + true + "'", boolean7 == true);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + true + "'", boolean9 == true);
        org.junit.Assert.assertNotNull(strItor10);
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + 0 + "'", int12 == 0);
        org.junit.Assert.assertNotNull(strSet14);
        org.junit.Assert.assertNull(wildcardComparator15);
        org.junit.Assert.assertNotNull(strSet17);
        org.junit.Assert.assertNotNull(strSet19);
        org.junit.Assert.assertNotNull(strStream20);
    }

    @Test
    public void test13817() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest27.test13817");
        java.util.SortedSet<org.apache.rat.license.ILicenseFamily> iLicenseFamilySet1 = org.apache.rat.license.LicenseFamilySetFactory.emptyLicenseFamilySet();
        org.apache.rat.policy.DefaultPolicy defaultPolicy2 = new org.apache.rat.policy.DefaultPolicy((java.util.Collection<org.apache.rat.license.ILicenseFamily>) iLicenseFamilySet1);
        java.util.SortedSet<org.apache.rat.license.ILicenseFamily> iLicenseFamilySet3 = defaultPolicy2.getApprovedLicenseNames();
        java.util.SortedSet<org.apache.rat.license.ILicenseFamily> iLicenseFamilySet4 = defaultPolicy2.getApprovedLicenseNames();
        org.apache.rat.license.ILicenseFamily iLicenseFamily5 = org.apache.rat.license.LicenseFamilySetFactory.search("Datum [ name ='http://org/apache/rat/meta-data#LicenseFamilyName',value ='W3C Document Copyright ']", iLicenseFamilySet4);
        org.junit.Assert.assertNotNull(iLicenseFamilySet1);
        org.junit.Assert.assertNotNull(iLicenseFamilySet3);
        org.junit.Assert.assertNotNull(iLicenseFamilySet4);
        org.junit.Assert.assertNull(iLicenseFamily5);
    }

    @Test
    public void test13818() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest27.test13818");
        org.apache.rat.api.MetaData.Datum datum2 = new org.apache.rat.api.MetaData.Datum("3c840dc2-bef0-42b5-b26c-35a568d53a24", "TextBuilder: fe6be119-8817-4567-8...");
        java.lang.String str3 = datum2.getValue();
        java.lang.String str4 = datum2.getName();
        org.junit.Assert.assertEquals("'" + str3 + "' != '" + "TextBuilder: fe6be119-8817-4567-8..." + "'", str3, "TextBuilder: fe6be119-8817-4567-8...");
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "3c840dc2-bef0-42b5-b26c-35a568d53a24" + "'", str4, "3c840dc2-bef0-42b5-b26c-35a568d53a24");
    }

    @Test
    public void test13819() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest27.test13819");
        org.apache.rat.api.MetaData metaData0 = new org.apache.rat.api.MetaData();
        java.lang.String str2 = metaData0.value("COMMON DEVELOPMENT AND DISTRIBUTION LICENSE Version 1.0");
        org.apache.rat.api.MetaData.Datum datum4 = metaData0.get("Copyright Builder: s:null e:.cvsignore o:null");
        java.lang.String str6 = metaData0.value("W3C Software Copyright");
        org.apache.rat.api.MetaData.Datum datum8 = metaData0.get("255ef7d8-e270-4908-9de7-bebc7df6eb88");
        java.util.Collection<org.apache.rat.api.MetaData.Datum> datumCollection9 = metaData0.getData();
        org.apache.rat.api.MetaData.Datum datum10 = org.apache.rat.api.MetaData.RAT_LICENSE_FAMILY_CATEGORY_DATUM_UNKNOWN;
        metaData0.set(datum10);
        org.apache.rat.api.MetaData.Datum datum12 = org.apache.rat.api.MetaData.RAT_APPROVED_LICENSE_DATUM_TRUE;
        metaData0.set(datum12);
        java.util.Collection<org.apache.rat.api.MetaData.Datum> datumCollection14 = metaData0.getData();
        boolean boolean16 = metaData0.clear("SpdxBuilder: ece24682-3459-4761-bb85-7fc8538fa181");
        org.junit.Assert.assertNull(str2);
        org.junit.Assert.assertNull(datum4);
        org.junit.Assert.assertNull(str6);
        org.junit.Assert.assertNull(datum8);
        org.junit.Assert.assertNotNull(datumCollection9);
        org.junit.Assert.assertNotNull(datum10);
        org.junit.Assert.assertNotNull(datum12);
        org.junit.Assert.assertNotNull(datumCollection14);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
    }

    @Test
    public void test13820() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest27.test13820");
        org.apache.rat.analysis.license.FullTextMatchingLicense fullTextMatchingLicense0 = new org.apache.rat.analysis.license.FullTextMatchingLicense();
        fullTextMatchingLicense0.setLicenseFamilyName("hi!");
        java.lang.String str3 = fullTextMatchingLicense0.getLicenseFamilyCategory();
        java.lang.String str4 = fullTextMatchingLicense0.getLicenseFamilyCategory();
        java.lang.String str5 = fullTextMatchingLicense0.getLicenseFamilyName();
        fullTextMatchingLicense0.setLicenseFamilyName("TextBuilder: stand");
        fullTextMatchingLicense0.setLicenseFamilyName("META-DATA#LICENSEFAMILYNAME");
        fullTextMatchingLicense0.setLicenseFamilyName("03F7B314-6887-4617-9C7E-BF1600B331CD");
        org.junit.Assert.assertNull(str3);
        org.junit.Assert.assertNull(str4);
        org.junit.Assert.assertEquals("'" + str5 + "' != '" + "hi!" + "'", str5, "hi!");
    }

    @Test
    public void test13821() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest27.test13821");
        java.lang.String str1 = org.apache.rat.license.ILicenseFamily.makeCategory("Copyright Builder: s:.cvsignore e:null o:4af66b98-9684-4b39-a5b5-a1147c648113");
        org.junit.Assert.assertEquals("'" + str1 + "' != '" + "Copyr" + "'", str1, "Copyr");
    }

    @Test
    public void test13822() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest27.test13822");
        org.apache.rat.report.claim.ClaimStatistic claimStatistic0 = new org.apache.rat.report.claim.ClaimStatistic();
        claimStatistic0.setNumApproved((int) (short) 10);
        java.util.Map<java.lang.String, java.lang.Integer> strMap3 = null;
        claimStatistic0.setDocumentCategoryMap(strMap3);
        java.util.Map<java.lang.String, java.lang.Integer> strMap5 = claimStatistic0.getLicenseFileNameMap();
        claimStatistic0.setNumUnknown((int) (byte) -1);
        claimStatistic0.setNumUnknown(30);
        claimStatistic0.setNumGenerated(2);
        org.junit.Assert.assertNull(strMap5);
    }

    @Test
    public void test13823() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest27.test13823");
        org.apache.rat.utils.Log log0 = null;
        org.apache.rat.ReportConfiguration reportConfiguration1 = new org.apache.rat.ReportConfiguration(log0);
        org.apache.rat.license.ILicenseFamily[] iLicenseFamilyArray2 = new org.apache.rat.license.ILicenseFamily[] {};
        java.util.ArrayList<org.apache.rat.license.ILicenseFamily> iLicenseFamilyList3 = new java.util.ArrayList<org.apache.rat.license.ILicenseFamily>();
        boolean boolean4 = java.util.Collections.addAll((java.util.Collection<org.apache.rat.license.ILicenseFamily>) iLicenseFamilyList3, iLicenseFamilyArray2);
        reportConfiguration1.addFamilies((java.util.Collection<org.apache.rat.license.ILicenseFamily>) iLicenseFamilyList3);
        org.apache.rat.report.IReportable iReportable6 = null;
        reportConfiguration1.setReportable(iReportable6);
        reportConfiguration1.addApprovedLicenseCategory("http://org/apache/rat/meta-data#LicenseFamilyCategory");
        boolean boolean10 = reportConfiguration1.isAddingLicenses();
        org.apache.rat.Defaults.Builder builder11 = org.apache.rat.Defaults.builder();
        org.apache.rat.Defaults defaults12 = builder11.build();
        org.apache.rat.Defaults.Builder builder13 = builder11.noDefault();
        org.apache.rat.Defaults.Builder builder15 = builder11.remove("AllBuilder:");
        org.apache.rat.Defaults.Builder builder17 = builder11.remove("GNU General Public License, version 2");
        org.apache.rat.Defaults defaults18 = builder17.build();
        org.apache.rat.license.ILicense[] iLicenseArray19 = new org.apache.rat.license.ILicense[] {};
        java.util.TreeSet<org.apache.rat.license.ILicense> iLicenseSet20 = new java.util.TreeSet<org.apache.rat.license.ILicense>();
        boolean boolean21 = java.util.Collections.addAll((java.util.Collection<org.apache.rat.license.ILicense>) iLicenseSet20, iLicenseArray19);
        java.lang.String[] strArray34 = new java.lang.String[] { "GPL2 ", "GPL1 ", "notice", "http://org/apache/rat/meta-data#LicenseFamilyName", "notice", "GPL2 ", "http://org/apache/rat/meta-data#LicenseFamilyName", "", "GPL2 ", "", "GPL1 ", "hi!" };
        java.util.ArrayList<java.lang.String> strList35 = new java.util.ArrayList<java.lang.String>();
        boolean boolean36 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strList35, strArray34);
        org.apache.rat.license.LicenseSetFactory licenseSetFactory37 = new org.apache.rat.license.LicenseSetFactory((java.util.SortedSet<org.apache.rat.license.ILicense>) iLicenseSet20, (java.util.Collection<java.lang.String>) strList35);
        org.apache.rat.license.LicenseSetFactory.LicenseFilter licenseFilter38 = org.apache.rat.license.LicenseSetFactory.LicenseFilter.none;
        java.util.SortedSet<java.lang.String> strSet39 = licenseSetFactory37.getLicenseFamilyIds(licenseFilter38);
        java.util.SortedSet<org.apache.rat.license.ILicenseFamily> iLicenseFamilySet40 = defaults18.getLicenseFamilies(licenseFilter38);
        org.apache.rat.utils.Log log41 = null;
        org.apache.rat.ReportConfiguration reportConfiguration42 = new org.apache.rat.ReportConfiguration(log41);
        reportConfiguration42.addApprovedLicenseCategory(".cvsignore");
        org.apache.rat.utils.Log log45 = null;
        org.apache.rat.ReportConfiguration reportConfiguration46 = new org.apache.rat.ReportConfiguration(log45);
        java.io.FilenameFilter filenameFilter47 = reportConfiguration46.getInputFileFilter();
        org.apache.rat.license.LicenseSetFactory.LicenseFilter licenseFilter48 = org.apache.rat.license.LicenseSetFactory.LicenseFilter.all;
        java.util.SortedSet<org.apache.rat.license.ILicense> iLicenseSet49 = reportConfiguration46.getLicenses(licenseFilter48);
        reportConfiguration42.addLicensesIfNotPresent((java.util.Collection<org.apache.rat.license.ILicense>) iLicenseSet49);
        java.io.FilenameFilter filenameFilter51 = reportConfiguration42.getInputFileFilter();
        org.apache.rat.utils.Log log52 = null;
        org.apache.rat.ReportConfiguration reportConfiguration53 = new org.apache.rat.ReportConfiguration(log52);
        java.io.FilenameFilter filenameFilter54 = reportConfiguration53.getInputFileFilter();
        org.apache.rat.license.LicenseSetFactory.LicenseFilter licenseFilter55 = org.apache.rat.license.LicenseSetFactory.LicenseFilter.all;
        java.util.SortedSet<org.apache.rat.license.ILicense> iLicenseSet56 = reportConfiguration53.getLicenses(licenseFilter55);
        org.apache.rat.config.AddLicenseHeaders addLicenseHeaders57 = org.apache.rat.config.AddLicenseHeaders.FALSE;
        reportConfiguration53.setAddLicenseHeaders(addLicenseHeaders57);
        org.apache.rat.utils.Log log59 = null;
        org.apache.rat.ReportConfiguration reportConfiguration60 = new org.apache.rat.ReportConfiguration(log59);
        org.apache.rat.report.claim.ClaimStatistic claimStatistic61 = org.apache.rat.Reporter.report(reportConfiguration60);
        org.apache.rat.license.LicenseSetFactory.LicenseFilter licenseFilter62 = org.apache.rat.license.LicenseSetFactory.LicenseFilter.all;
        org.apache.rat.Reporter.listLicenses(reportConfiguration60, licenseFilter62);
        org.apache.rat.Reporter.listLicenses(reportConfiguration53, licenseFilter62);
        org.apache.rat.utils.Log log65 = null;
        org.apache.rat.ReportConfiguration reportConfiguration66 = new org.apache.rat.ReportConfiguration(log65);
        java.io.FilenameFilter filenameFilter67 = reportConfiguration66.getInputFileFilter();
        org.apache.rat.license.LicenseSetFactory.LicenseFilter licenseFilter68 = org.apache.rat.license.LicenseSetFactory.LicenseFilter.all;
        java.util.SortedSet<org.apache.rat.license.ILicense> iLicenseSet69 = reportConfiguration66.getLicenses(licenseFilter68);
        org.apache.rat.config.AddLicenseHeaders addLicenseHeaders70 = org.apache.rat.config.AddLicenseHeaders.FALSE;
        reportConfiguration66.setAddLicenseHeaders(addLicenseHeaders70);
        org.apache.rat.utils.Log log72 = null;
        org.apache.rat.ReportConfiguration reportConfiguration73 = new org.apache.rat.ReportConfiguration(log72);
        org.apache.rat.report.claim.ClaimStatistic claimStatistic74 = org.apache.rat.Reporter.report(reportConfiguration73);
        org.apache.rat.license.LicenseSetFactory.LicenseFilter licenseFilter75 = org.apache.rat.license.LicenseSetFactory.LicenseFilter.all;
        org.apache.rat.Reporter.listLicenses(reportConfiguration73, licenseFilter75);
        org.apache.rat.Reporter.listLicenses(reportConfiguration66, licenseFilter75);
        java.util.SortedSet<org.apache.rat.license.ILicenseFamily> iLicenseFamilySet78 = reportConfiguration53.getLicenseFamilies(licenseFilter75);
        org.apache.rat.Reporter.listLicenseFamilies(reportConfiguration42, licenseFilter75);
        java.util.SortedSet<org.apache.rat.license.ILicenseFamily> iLicenseFamilySet80 = defaults18.getLicenseFamilies(licenseFilter75);
        java.util.SortedSet<org.apache.rat.license.ILicense> iLicenseSet81 = reportConfiguration1.getLicenses(licenseFilter75);
        java.io.File file82 = null;
        // The following exception was thrown during execution in test generation
        try {
            reportConfiguration1.setStyleSheet(file82);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: styleSheet file should not be null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(iLicenseFamilyArray2);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertNotNull(builder11);
        org.junit.Assert.assertNotNull(defaults12);
        org.junit.Assert.assertNotNull(builder13);
        org.junit.Assert.assertNotNull(builder15);
        org.junit.Assert.assertNotNull(builder17);
        org.junit.Assert.assertNotNull(defaults18);
        org.junit.Assert.assertNotNull(iLicenseArray19);
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + false + "'", boolean21 == false);
        org.junit.Assert.assertNotNull(strArray34);
        org.junit.Assert.assertTrue("'" + boolean36 + "' != '" + true + "'", boolean36 == true);
        org.junit.Assert.assertTrue("'" + licenseFilter38 + "' != '" + org.apache.rat.license.LicenseSetFactory.LicenseFilter.none + "'", licenseFilter38.equals(org.apache.rat.license.LicenseSetFactory.LicenseFilter.none));
        org.junit.Assert.assertNotNull(strSet39);
        org.junit.Assert.assertNotNull(iLicenseFamilySet40);
        org.junit.Assert.assertNull(filenameFilter47);
        org.junit.Assert.assertTrue("'" + licenseFilter48 + "' != '" + org.apache.rat.license.LicenseSetFactory.LicenseFilter.all + "'", licenseFilter48.equals(org.apache.rat.license.LicenseSetFactory.LicenseFilter.all));
        org.junit.Assert.assertNotNull(iLicenseSet49);
        org.junit.Assert.assertNull(filenameFilter51);
        org.junit.Assert.assertNull(filenameFilter54);
        org.junit.Assert.assertTrue("'" + licenseFilter55 + "' != '" + org.apache.rat.license.LicenseSetFactory.LicenseFilter.all + "'", licenseFilter55.equals(org.apache.rat.license.LicenseSetFactory.LicenseFilter.all));
        org.junit.Assert.assertNotNull(iLicenseSet56);
        org.junit.Assert.assertTrue("'" + addLicenseHeaders57 + "' != '" + org.apache.rat.config.AddLicenseHeaders.FALSE + "'", addLicenseHeaders57.equals(org.apache.rat.config.AddLicenseHeaders.FALSE));
        org.junit.Assert.assertNull(claimStatistic61);
        org.junit.Assert.assertTrue("'" + licenseFilter62 + "' != '" + org.apache.rat.license.LicenseSetFactory.LicenseFilter.all + "'", licenseFilter62.equals(org.apache.rat.license.LicenseSetFactory.LicenseFilter.all));
        org.junit.Assert.assertNull(filenameFilter67);
        org.junit.Assert.assertTrue("'" + licenseFilter68 + "' != '" + org.apache.rat.license.LicenseSetFactory.LicenseFilter.all + "'", licenseFilter68.equals(org.apache.rat.license.LicenseSetFactory.LicenseFilter.all));
        org.junit.Assert.assertNotNull(iLicenseSet69);
        org.junit.Assert.assertTrue("'" + addLicenseHeaders70 + "' != '" + org.apache.rat.config.AddLicenseHeaders.FALSE + "'", addLicenseHeaders70.equals(org.apache.rat.config.AddLicenseHeaders.FALSE));
        org.junit.Assert.assertNull(claimStatistic74);
        org.junit.Assert.assertTrue("'" + licenseFilter75 + "' != '" + org.apache.rat.license.LicenseSetFactory.LicenseFilter.all + "'", licenseFilter75.equals(org.apache.rat.license.LicenseSetFactory.LicenseFilter.all));
        org.junit.Assert.assertNotNull(iLicenseFamilySet78);
        org.junit.Assert.assertNotNull(iLicenseFamilySet80);
        org.junit.Assert.assertNotNull(iLicenseSet81);
    }

    @Test
    public void test13824() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest27.test13824");
        org.apache.rat.license.ILicense.Builder builder0 = org.apache.rat.license.ILicense.builder();
        org.apache.rat.license.ILicense.Builder builder2 = builder0.setLicenseFamilyCategory("");
        org.apache.rat.analysis.matchers.CopyrightMatcher copyrightMatcher6 = new org.apache.rat.analysis.matchers.CopyrightMatcher("", "GPL1 ", "hi!");
        org.apache.rat.analysis.IHeaderMatcher.State state7 = copyrightMatcher6.finalizeState();
        org.apache.rat.license.ILicense.Builder builder8 = builder2.setMatcher((org.apache.rat.analysis.IHeaderMatcher) copyrightMatcher6);
        org.apache.rat.license.ILicense.Builder builder10 = builder8.setNotes("8f0ee536-38ae-476a-a728-de95e24c13c3");
        org.apache.rat.configuration.builders.TextBuilder textBuilder11 = new org.apache.rat.configuration.builders.TextBuilder();
        org.apache.rat.configuration.builders.TextBuilder textBuilder13 = textBuilder11.setText("true");
        org.apache.rat.configuration.builders.TextBuilder textBuilder15 = textBuilder11.setText("stand");
        org.apache.rat.configuration.builders.TextBuilder textBuilder17 = textBuilder11.setText("ApacheLicenseVersion20");
        org.apache.rat.license.ILicense.Builder builder18 = builder8.setMatcher((org.apache.rat.analysis.IHeaderMatcher.Builder) textBuilder17);
        org.apache.rat.utils.DefaultLog defaultLog19 = org.apache.rat.utils.DefaultLog.INSTANCE;
        org.apache.rat.license.ILicense.Builder builder20 = org.apache.rat.license.ILicense.builder();
        org.apache.rat.license.ILicense.Builder builder22 = builder20.setLicenseFamilyCategory("");
        org.apache.rat.analysis.matchers.CopyrightMatcher copyrightMatcher26 = new org.apache.rat.analysis.matchers.CopyrightMatcher("", "GPL1 ", "hi!");
        org.apache.rat.analysis.IHeaderMatcher.State state27 = copyrightMatcher26.finalizeState();
        org.apache.rat.license.ILicense.Builder builder28 = builder22.setMatcher((org.apache.rat.analysis.IHeaderMatcher) copyrightMatcher26);
        org.apache.rat.license.ILicense.Builder builder30 = builder28.setLicenseFamilyCategory("");
        defaultLog19.error((java.lang.Object) builder30);
        org.apache.rat.analysis.matchers.CopyrightMatcher copyrightMatcher35 = new org.apache.rat.analysis.matchers.CopyrightMatcher("", "GPL1 ", "hi!");
        copyrightMatcher35.reset();
        org.apache.rat.license.ILicense.Builder builder37 = builder30.setMatcher((org.apache.rat.analysis.IHeaderMatcher) copyrightMatcher35);
        org.apache.rat.configuration.builders.SpdxBuilder spdxBuilder38 = org.apache.rat.analysis.IHeaderMatcher.Builder.spdx();
        java.lang.String str39 = spdxBuilder38.toString();
        org.apache.rat.configuration.builders.SpdxBuilder spdxBuilder41 = spdxBuilder38.setName("ef7a8b13-64c3-4510-bb0c-dbf208e1e73f");
        org.apache.rat.license.ILicense.Builder builder42 = builder37.setMatcher((org.apache.rat.analysis.IHeaderMatcher.Builder) spdxBuilder38);
        org.apache.rat.analysis.IHeaderMatcher iHeaderMatcher43 = spdxBuilder38.build();
        org.apache.rat.configuration.builders.AbstractBuilder abstractBuilder45 = spdxBuilder38.setId("ef75a6e8-7197-4e9e-83bf-f8b367e6b3c5");
        java.lang.String str46 = spdxBuilder38.toString();
        org.apache.rat.analysis.IHeaderMatcher iHeaderMatcher47 = spdxBuilder38.build();
        java.lang.String str48 = spdxBuilder38.toString();
        java.lang.String str49 = spdxBuilder38.toString();
        org.apache.rat.license.ILicense.Builder builder50 = builder18.setMatcher((org.apache.rat.analysis.IHeaderMatcher.Builder) spdxBuilder38);
        org.junit.Assert.assertNotNull(builder0);
        org.junit.Assert.assertNotNull(builder2);
        org.junit.Assert.assertTrue("'" + state7 + "' != '" + org.apache.rat.analysis.IHeaderMatcher.State.f + "'", state7.equals(org.apache.rat.analysis.IHeaderMatcher.State.f));
        org.junit.Assert.assertNotNull(builder8);
        org.junit.Assert.assertNotNull(builder10);
        org.junit.Assert.assertNotNull(textBuilder13);
        org.junit.Assert.assertNotNull(textBuilder15);
        org.junit.Assert.assertNotNull(textBuilder17);
        org.junit.Assert.assertNotNull(builder18);
        org.junit.Assert.assertNotNull(defaultLog19);
        org.junit.Assert.assertNotNull(builder20);
        org.junit.Assert.assertNotNull(builder22);
        org.junit.Assert.assertTrue("'" + state27 + "' != '" + org.apache.rat.analysis.IHeaderMatcher.State.f + "'", state27.equals(org.apache.rat.analysis.IHeaderMatcher.State.f));
        org.junit.Assert.assertNotNull(builder28);
        org.junit.Assert.assertNotNull(builder30);
        org.junit.Assert.assertNotNull(builder37);
        org.junit.Assert.assertNotNull(spdxBuilder38);
        org.junit.Assert.assertEquals("'" + str39 + "' != '" + "SpdxBuilder: null" + "'", str39, "SpdxBuilder: null");
        org.junit.Assert.assertNotNull(spdxBuilder41);
        org.junit.Assert.assertNotNull(builder42);
        org.junit.Assert.assertNotNull(iHeaderMatcher43);
        org.junit.Assert.assertNotNull(abstractBuilder45);
        org.junit.Assert.assertEquals("'" + str46 + "' != '" + "SpdxBuilder: ef7a8b13-64c3-4510-bb0c-dbf208e1e73f" + "'", str46, "SpdxBuilder: ef7a8b13-64c3-4510-bb0c-dbf208e1e73f");
        org.junit.Assert.assertNotNull(iHeaderMatcher47);
        org.junit.Assert.assertEquals("'" + str48 + "' != '" + "SpdxBuilder: ef7a8b13-64c3-4510-bb0c-dbf208e1e73f" + "'", str48, "SpdxBuilder: ef7a8b13-64c3-4510-bb0c-dbf208e1e73f");
        org.junit.Assert.assertEquals("'" + str49 + "' != '" + "SpdxBuilder: ef7a8b13-64c3-4510-bb0c-dbf208e1e73f" + "'", str49, "SpdxBuilder: ef7a8b13-64c3-4510-bb0c-dbf208e1e73f");
        org.junit.Assert.assertNotNull(builder50);
    }

    @Test
    public void test13825() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest27.test13825");
        org.apache.rat.utils.Log log0 = null;
        org.apache.rat.ReportConfiguration reportConfiguration1 = new org.apache.rat.ReportConfiguration(log0);
        java.io.FilenameFilter filenameFilter2 = reportConfiguration1.getInputFileFilter();
        org.apache.rat.license.LicenseSetFactory.LicenseFilter licenseFilter3 = org.apache.rat.license.LicenseSetFactory.LicenseFilter.all;
        java.util.SortedSet<org.apache.rat.license.ILicense> iLicenseSet4 = reportConfiguration1.getLicenses(licenseFilter3);
        org.apache.rat.config.AddLicenseHeaders addLicenseHeaders5 = org.apache.rat.config.AddLicenseHeaders.FALSE;
        reportConfiguration1.setAddLicenseHeaders(addLicenseHeaders5);
        org.apache.rat.utils.Log log7 = null;
        org.apache.rat.ReportConfiguration reportConfiguration8 = new org.apache.rat.ReportConfiguration(log7);
        org.apache.rat.report.claim.ClaimStatistic claimStatistic9 = org.apache.rat.Reporter.report(reportConfiguration8);
        org.apache.rat.license.LicenseSetFactory.LicenseFilter licenseFilter10 = org.apache.rat.license.LicenseSetFactory.LicenseFilter.all;
        org.apache.rat.Reporter.listLicenses(reportConfiguration8, licenseFilter10);
        org.apache.rat.Reporter.listLicenses(reportConfiguration1, licenseFilter10);
        org.apache.rat.utils.Log log13 = null;
        org.apache.rat.ReportConfiguration reportConfiguration14 = new org.apache.rat.ReportConfiguration(log13);
        java.io.FilenameFilter filenameFilter15 = reportConfiguration14.getInputFileFilter();
        org.apache.rat.license.LicenseSetFactory.LicenseFilter licenseFilter16 = org.apache.rat.license.LicenseSetFactory.LicenseFilter.all;
        java.util.SortedSet<org.apache.rat.license.ILicense> iLicenseSet17 = reportConfiguration14.getLicenses(licenseFilter16);
        org.apache.rat.config.AddLicenseHeaders addLicenseHeaders18 = org.apache.rat.config.AddLicenseHeaders.FALSE;
        reportConfiguration14.setAddLicenseHeaders(addLicenseHeaders18);
        org.apache.rat.utils.Log log20 = null;
        org.apache.rat.ReportConfiguration reportConfiguration21 = new org.apache.rat.ReportConfiguration(log20);
        org.apache.rat.report.claim.ClaimStatistic claimStatistic22 = org.apache.rat.Reporter.report(reportConfiguration21);
        org.apache.rat.license.LicenseSetFactory.LicenseFilter licenseFilter23 = org.apache.rat.license.LicenseSetFactory.LicenseFilter.all;
        org.apache.rat.Reporter.listLicenses(reportConfiguration21, licenseFilter23);
        org.apache.rat.Reporter.listLicenses(reportConfiguration14, licenseFilter23);
        org.apache.rat.Reporter.listLicenses(reportConfiguration1, licenseFilter23);
        org.apache.rat.utils.Log log27 = null;
        org.apache.rat.ReportConfiguration reportConfiguration28 = new org.apache.rat.ReportConfiguration(log27);
        org.apache.commons.io.function.IOSupplier<java.io.OutputStream> outputStreamIOSupplier29 = reportConfiguration28.getOutput();
        reportConfiguration1.setOut(outputStreamIOSupplier29);
        org.apache.rat.utils.Log log31 = null;
        org.apache.rat.ReportConfiguration reportConfiguration32 = new org.apache.rat.ReportConfiguration(log31);
        org.apache.rat.report.claim.ClaimStatistic claimStatistic33 = org.apache.rat.Reporter.report(reportConfiguration32);
        org.apache.rat.utils.Log log34 = null;
        org.apache.rat.ReportConfiguration reportConfiguration35 = new org.apache.rat.ReportConfiguration(log34);
        org.apache.rat.report.claim.ClaimStatistic claimStatistic36 = org.apache.rat.Reporter.report(reportConfiguration35);
        org.apache.rat.utils.ReportingSet.Options options37 = org.apache.rat.utils.ReportingSet.Options.OVERWRITE;
        reportConfiguration35.licenseDuplicateOption(options37);
        reportConfiguration32.familyDuplicateOption(options37);
        reportConfiguration1.licenseDuplicateOption(options37);
        reportConfiguration1.addApprovedLicenseCategory("W3C Document Copyright");
        org.apache.commons.io.filefilter.IOFileFilter iOFileFilter43 = reportConfiguration1.getDirectoryFilter();
        java.io.File file44 = null;
        // The following exception was thrown during execution in test generation
        try {
            reportConfiguration1.setOut(file44);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: output file should not be null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNull(filenameFilter2);
        org.junit.Assert.assertTrue("'" + licenseFilter3 + "' != '" + org.apache.rat.license.LicenseSetFactory.LicenseFilter.all + "'", licenseFilter3.equals(org.apache.rat.license.LicenseSetFactory.LicenseFilter.all));
        org.junit.Assert.assertNotNull(iLicenseSet4);
        org.junit.Assert.assertTrue("'" + addLicenseHeaders5 + "' != '" + org.apache.rat.config.AddLicenseHeaders.FALSE + "'", addLicenseHeaders5.equals(org.apache.rat.config.AddLicenseHeaders.FALSE));
        org.junit.Assert.assertNull(claimStatistic9);
        org.junit.Assert.assertTrue("'" + licenseFilter10 + "' != '" + org.apache.rat.license.LicenseSetFactory.LicenseFilter.all + "'", licenseFilter10.equals(org.apache.rat.license.LicenseSetFactory.LicenseFilter.all));
        org.junit.Assert.assertNull(filenameFilter15);
        org.junit.Assert.assertTrue("'" + licenseFilter16 + "' != '" + org.apache.rat.license.LicenseSetFactory.LicenseFilter.all + "'", licenseFilter16.equals(org.apache.rat.license.LicenseSetFactory.LicenseFilter.all));
        org.junit.Assert.assertNotNull(iLicenseSet17);
        org.junit.Assert.assertTrue("'" + addLicenseHeaders18 + "' != '" + org.apache.rat.config.AddLicenseHeaders.FALSE + "'", addLicenseHeaders18.equals(org.apache.rat.config.AddLicenseHeaders.FALSE));
        org.junit.Assert.assertNull(claimStatistic22);
        org.junit.Assert.assertTrue("'" + licenseFilter23 + "' != '" + org.apache.rat.license.LicenseSetFactory.LicenseFilter.all + "'", licenseFilter23.equals(org.apache.rat.license.LicenseSetFactory.LicenseFilter.all));
        org.junit.Assert.assertNotNull(outputStreamIOSupplier29);
        org.junit.Assert.assertNull(claimStatistic33);
        org.junit.Assert.assertNull(claimStatistic36);
        org.junit.Assert.assertTrue("'" + options37 + "' != '" + org.apache.rat.utils.ReportingSet.Options.OVERWRITE + "'", options37.equals(org.apache.rat.utils.ReportingSet.Options.OVERWRITE));
        org.junit.Assert.assertNotNull(iOFileFilter43);
    }

    @Test
    public void test13826() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest27.test13826");
        org.apache.rat.document.ToNameTransformer toNameTransformer0 = new org.apache.rat.document.ToNameTransformer();
        org.apache.rat.utils.DefaultLog defaultLog1 = org.apache.rat.utils.DefaultLog.INSTANCE;
        org.apache.rat.license.ILicense.Builder builder2 = org.apache.rat.license.ILicense.builder();
        org.apache.rat.license.ILicense.Builder builder4 = builder2.setLicenseFamilyCategory("");
        org.apache.rat.analysis.matchers.CopyrightMatcher copyrightMatcher8 = new org.apache.rat.analysis.matchers.CopyrightMatcher("", "GPL1 ", "hi!");
        org.apache.rat.analysis.IHeaderMatcher.State state9 = copyrightMatcher8.finalizeState();
        org.apache.rat.license.ILicense.Builder builder10 = builder4.setMatcher((org.apache.rat.analysis.IHeaderMatcher) copyrightMatcher8);
        org.apache.rat.license.ILicense.Builder builder12 = builder10.setLicenseFamilyCategory("");
        defaultLog1.error((java.lang.Object) builder12);
        java.lang.Object obj14 = toNameTransformer0.transform((java.lang.Object) defaultLog1);
        java.lang.Object obj15 = null;
        defaultLog1.warn(obj15);
        org.apache.rat.utils.DefaultLog defaultLog17 = org.apache.rat.utils.DefaultLog.INSTANCE;
        org.apache.rat.utils.Log log18 = null;
        org.apache.rat.ReportConfiguration reportConfiguration19 = new org.apache.rat.ReportConfiguration(log18);
        reportConfiguration19.addApprovedLicenseCategory(".cvsignore");
        org.apache.rat.utils.Log.Level level22 = org.apache.rat.utils.Log.Level.ERROR;
        reportConfiguration19.logFamilyCollisions(level22);
        defaultLog17.setLevel(level22);
        defaultLog1.log(level22, "AnyBuilder:");
        org.apache.rat.annotation.ApacheV2LicenseAppender apacheV2LicenseAppender28 = new org.apache.rat.annotation.ApacheV2LicenseAppender((org.apache.rat.utils.Log) defaultLog1, "ab5d9dd2-5529-4ca4-8c75-441ea7a5351b");
        org.apache.rat.annotation.ApacheV2LicenseAppender apacheV2LicenseAppender30 = new org.apache.rat.annotation.ApacheV2LicenseAppender((org.apache.rat.utils.Log) defaultLog1, "8db879cc-ee3e-4155-b6f2-7a5caecabc30");
        java.util.regex.Pattern pattern35 = null;
        org.apache.rat.analysis.matchers.SimpleRegexMatcher simpleRegexMatcher36 = new org.apache.rat.analysis.matchers.SimpleRegexMatcher("", pattern35);
        org.apache.rat.analysis.matchers.NotMatcher notMatcher37 = new org.apache.rat.analysis.matchers.NotMatcher("GNU General Public License, version 2", (org.apache.rat.analysis.IHeaderMatcher) simpleRegexMatcher36);
        org.apache.rat.analysis.IHeaderMatcher.State state38 = notMatcher37.finalizeState();
        org.apache.rat.analysis.matchers.NotMatcher notMatcher39 = new org.apache.rat.analysis.matchers.NotMatcher("binary", (org.apache.rat.analysis.IHeaderMatcher) notMatcher37);
        org.apache.rat.analysis.IHeaderMatcher.State state40 = notMatcher39.finalizeState();
        org.apache.rat.analysis.matchers.NotMatcher notMatcher41 = new org.apache.rat.analysis.matchers.NotMatcher("", (org.apache.rat.analysis.IHeaderMatcher) notMatcher39);
        org.apache.rat.analysis.IHeaderMatcher.State state42 = notMatcher39.finalizeState();
        org.apache.rat.analysis.IHeaderMatcher.State state43 = notMatcher39.finalizeState();
        java.lang.Throwable throwable44 = null;
        // The following exception was thrown during execution in test generation
        try {
            defaultLog1.error((java.lang.Object) state43, throwable44);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(defaultLog1);
        org.junit.Assert.assertNotNull(builder2);
        org.junit.Assert.assertNotNull(builder4);
        org.junit.Assert.assertTrue("'" + state9 + "' != '" + org.apache.rat.analysis.IHeaderMatcher.State.f + "'", state9.equals(org.apache.rat.analysis.IHeaderMatcher.State.f));
        org.junit.Assert.assertNotNull(builder10);
        org.junit.Assert.assertNotNull(builder12);
        org.junit.Assert.assertNull(obj14);
        org.junit.Assert.assertNotNull(defaultLog17);
        org.junit.Assert.assertTrue("'" + level22 + "' != '" + org.apache.rat.utils.Log.Level.ERROR + "'", level22.equals(org.apache.rat.utils.Log.Level.ERROR));
        org.junit.Assert.assertTrue("'" + state38 + "' != '" + org.apache.rat.analysis.IHeaderMatcher.State.t + "'", state38.equals(org.apache.rat.analysis.IHeaderMatcher.State.t));
        org.junit.Assert.assertTrue("'" + state40 + "' != '" + org.apache.rat.analysis.IHeaderMatcher.State.f + "'", state40.equals(org.apache.rat.analysis.IHeaderMatcher.State.f));
        org.junit.Assert.assertTrue("'" + state42 + "' != '" + org.apache.rat.analysis.IHeaderMatcher.State.f + "'", state42.equals(org.apache.rat.analysis.IHeaderMatcher.State.f));
        org.junit.Assert.assertTrue("'" + state43 + "' != '" + org.apache.rat.analysis.IHeaderMatcher.State.f + "'", state43.equals(org.apache.rat.analysis.IHeaderMatcher.State.f));
    }

    @Test
    public void test13827() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest27.test13827");
        org.apache.rat.configuration.Format format0 = org.apache.rat.configuration.Format.XML;
        org.apache.rat.configuration.LicenseReader licenseReader1 = format0.licenseReader();
        java.util.SortedSet<org.apache.rat.license.ILicense> iLicenseSet2 = licenseReader1.readLicenses();
        java.lang.String[] strArray8 = new java.lang.String[] { "http://org/apache/rat/meta-data#LicenseFamilyCategory", "Datum [ name ='http://org/apache/rat/meta-data#LicenseFamilyCategory',value ='GPL1  ']", "MANIFEST.MF", "AllBuilder:", "The MIT License" };
        org.apache.rat.utils.ReportingSet<java.lang.String> strSet9 = new org.apache.rat.utils.ReportingSet<java.lang.String>();
        boolean boolean10 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strSet9, strArray8);
        boolean boolean12 = strSet9.addIfNotPresent("http://org/apache/rat/meta-data#LicenseFamilyName");
        boolean boolean14 = strSet9.addIfNotPresent("ef7a8b13-64c3-4510-bb0c-dbf208e1e73f");
        java.util.function.Function<java.lang.String, java.lang.String> strFunction15 = null;
        org.apache.rat.utils.ReportingSet<java.lang.String> strSet16 = strSet9.setMsgFormat(strFunction15);
        boolean boolean17 = strSet9.isEmpty();
        org.apache.rat.license.LicenseSetFactory licenseSetFactory18 = new org.apache.rat.license.LicenseSetFactory(iLicenseSet2, (java.util.Collection<java.lang.String>) strSet9);
        boolean boolean19 = strSet9.isEmpty();
        org.apache.rat.utils.ReportingSet<java.lang.String> strSet21 = strSet9.tailSet("MANIFEST.MF");
        java.util.stream.Stream<java.lang.String> strStream22 = strSet21.stream();
        boolean boolean24 = strSet21.equals((java.lang.Object) "MathcerRefBuilder: 90663eff7ed841bd85a8e8f189198bc6");
        org.apache.rat.configuration.builders.RegexBuilder regexBuilder25 = new org.apache.rat.configuration.builders.RegexBuilder();
        java.lang.String str26 = regexBuilder25.toString();
        java.lang.String str27 = regexBuilder25.toString();
        org.apache.rat.configuration.builders.RegexBuilder regexBuilder29 = regexBuilder25.setExpr("d4148d3a-edbc-4672-b347-0fa619553f91");
        org.apache.rat.analysis.IHeaderMatcher iHeaderMatcher30 = regexBuilder25.build();
        org.apache.rat.configuration.builders.RegexBuilder regexBuilder32 = regexBuilder25.setExpr("e484573a-f5dc-41c9-94d2-04bf4d4fa217");
        org.apache.rat.analysis.IHeaderMatcher iHeaderMatcher33 = regexBuilder32.build();
        // The following exception was thrown during execution in test generation
        try {
            boolean boolean34 = strSet21.remove((java.lang.Object) iHeaderMatcher33);
            org.junit.Assert.fail("Expected exception of type java.lang.ClassCastException; message: null");
        } catch (java.lang.ClassCastException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + format0 + "' != '" + org.apache.rat.configuration.Format.XML + "'", format0.equals(org.apache.rat.configuration.Format.XML));
        org.junit.Assert.assertNotNull(licenseReader1);
        org.junit.Assert.assertNotNull(iLicenseSet2);
        org.junit.Assert.assertNotNull(strArray8);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + true + "'", boolean10 == true);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + true + "'", boolean12 == true);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + true + "'", boolean14 == true);
        org.junit.Assert.assertNotNull(strSet16);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + false + "'", boolean17 == false);
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + false + "'", boolean19 == false);
        org.junit.Assert.assertNotNull(strSet21);
        org.junit.Assert.assertNotNull(strStream22);
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + false + "'", boolean24 == false);
        org.junit.Assert.assertEquals("'" + str26 + "' != '" + "RegexBuilder: null" + "'", str26, "RegexBuilder: null");
        org.junit.Assert.assertEquals("'" + str27 + "' != '" + "RegexBuilder: null" + "'", str27, "RegexBuilder: null");
        org.junit.Assert.assertNotNull(regexBuilder29);
        org.junit.Assert.assertNotNull(iHeaderMatcher30);
        org.junit.Assert.assertNotNull(regexBuilder32);
        org.junit.Assert.assertNotNull(iHeaderMatcher33);
    }

    @Test
    public void test13828() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest27.test13828");
        org.apache.rat.utils.Log log0 = null;
        org.apache.rat.ReportConfiguration reportConfiguration1 = new org.apache.rat.ReportConfiguration(log0);
        org.apache.rat.report.claim.ClaimStatistic claimStatistic2 = org.apache.rat.Reporter.report(reportConfiguration1);
        org.apache.rat.utils.Log log3 = null;
        org.apache.rat.ReportConfiguration reportConfiguration4 = new org.apache.rat.ReportConfiguration(log3);
        org.apache.rat.report.claim.ClaimStatistic claimStatistic5 = org.apache.rat.Reporter.report(reportConfiguration4);
        org.apache.rat.utils.ReportingSet.Options options6 = org.apache.rat.utils.ReportingSet.Options.OVERWRITE;
        reportConfiguration4.licenseDuplicateOption(options6);
        reportConfiguration1.familyDuplicateOption(options6);
        boolean boolean9 = reportConfiguration1.isStyleReport();
        org.apache.rat.license.ILicense[] iLicenseArray10 = new org.apache.rat.license.ILicense[] {};
        java.util.TreeSet<org.apache.rat.license.ILicense> iLicenseSet11 = new java.util.TreeSet<org.apache.rat.license.ILicense>();
        boolean boolean12 = java.util.Collections.addAll((java.util.Collection<org.apache.rat.license.ILicense>) iLicenseSet11, iLicenseArray10);
        java.lang.String[] strArray25 = new java.lang.String[] { "GPL2 ", "GPL1 ", "notice", "http://org/apache/rat/meta-data#LicenseFamilyName", "notice", "GPL2 ", "http://org/apache/rat/meta-data#LicenseFamilyName", "", "GPL2 ", "", "GPL1 ", "hi!" };
        java.util.ArrayList<java.lang.String> strList26 = new java.util.ArrayList<java.lang.String>();
        boolean boolean27 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strList26, strArray25);
        org.apache.rat.license.LicenseSetFactory licenseSetFactory28 = new org.apache.rat.license.LicenseSetFactory((java.util.SortedSet<org.apache.rat.license.ILicense>) iLicenseSet11, (java.util.Collection<java.lang.String>) strList26);
        java.io.FilenameFilter filenameFilter29 = org.apache.rat.Report.parseExclusions((java.util.List<java.lang.String>) strList26);
        java.io.FilenameFilter filenameFilter30 = org.apache.rat.Report.parseExclusions((java.util.List<java.lang.String>) strList26);
        reportConfiguration1.addApprovedLicenseCategories((java.util.Collection<java.lang.String>) strList26);
        reportConfiguration1.setCopyrightMessage("9ec38a8d-0e0f-4c31-8d12-d6138412a101");
        org.apache.rat.utils.Log log34 = null;
        org.apache.rat.ReportConfiguration reportConfiguration35 = new org.apache.rat.ReportConfiguration(log34);
        org.apache.rat.report.claim.ClaimStatistic claimStatistic36 = org.apache.rat.Reporter.report(reportConfiguration35);
        reportConfiguration35.addApprovedLicenseCategory("Copyright Builder: s:null e:null o:null");
        java.util.SortedSet<java.lang.String> strSet39 = reportConfiguration35.getApprovedLicenseCategories();
        boolean boolean40 = reportConfiguration35.isAddingLicensesForced();
        org.apache.rat.utils.Log log41 = null;
        org.apache.rat.ReportConfiguration reportConfiguration42 = new org.apache.rat.ReportConfiguration(log41);
        java.io.FilenameFilter filenameFilter43 = reportConfiguration42.getInputFileFilter();
        org.apache.rat.license.LicenseSetFactory.LicenseFilter licenseFilter44 = org.apache.rat.license.LicenseSetFactory.LicenseFilter.all;
        java.util.SortedSet<org.apache.rat.license.ILicense> iLicenseSet45 = reportConfiguration42.getLicenses(licenseFilter44);
        org.apache.rat.config.AddLicenseHeaders addLicenseHeaders46 = org.apache.rat.config.AddLicenseHeaders.FALSE;
        reportConfiguration42.setAddLicenseHeaders(addLicenseHeaders46);
        org.apache.rat.utils.Log log48 = null;
        org.apache.rat.ReportConfiguration reportConfiguration49 = new org.apache.rat.ReportConfiguration(log48);
        org.apache.rat.report.claim.ClaimStatistic claimStatistic50 = org.apache.rat.Reporter.report(reportConfiguration49);
        org.apache.rat.license.LicenseSetFactory.LicenseFilter licenseFilter51 = org.apache.rat.license.LicenseSetFactory.LicenseFilter.all;
        org.apache.rat.Reporter.listLicenses(reportConfiguration49, licenseFilter51);
        org.apache.rat.Reporter.listLicenses(reportConfiguration42, licenseFilter51);
        org.apache.rat.config.AddLicenseHeaders addLicenseHeaders54 = org.apache.rat.config.AddLicenseHeaders.FORCED;
        reportConfiguration42.setAddLicenseHeaders(addLicenseHeaders54);
        reportConfiguration35.setAddLicenseHeaders(addLicenseHeaders54);
        reportConfiguration1.setAddLicenseHeaders(addLicenseHeaders54);
        org.apache.rat.configuration.Format format60 = org.apache.rat.configuration.Format.XML;
        org.apache.rat.configuration.LicenseReader licenseReader61 = format60.licenseReader();
        java.util.SortedSet<org.apache.rat.license.ILicense> iLicenseSet62 = licenseReader61.readLicenses();
        java.lang.String[] strArray68 = new java.lang.String[] { "http://org/apache/rat/meta-data#LicenseFamilyCategory", "Datum [ name ='http://org/apache/rat/meta-data#LicenseFamilyCategory',value ='GPL1  ']", "MANIFEST.MF", "AllBuilder:", "The MIT License" };
        org.apache.rat.utils.ReportingSet<java.lang.String> strSet69 = new org.apache.rat.utils.ReportingSet<java.lang.String>();
        boolean boolean70 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strSet69, strArray68);
        boolean boolean72 = strSet69.addIfNotPresent("http://org/apache/rat/meta-data#LicenseFamilyName");
        boolean boolean74 = strSet69.addIfNotPresent("ef7a8b13-64c3-4510-bb0c-dbf208e1e73f");
        java.util.function.Function<java.lang.String, java.lang.String> strFunction75 = null;
        org.apache.rat.utils.ReportingSet<java.lang.String> strSet76 = strSet69.setMsgFormat(strFunction75);
        boolean boolean77 = strSet69.isEmpty();
        org.apache.rat.license.LicenseSetFactory licenseSetFactory78 = new org.apache.rat.license.LicenseSetFactory(iLicenseSet62, (java.util.Collection<java.lang.String>) strSet69);
        org.apache.rat.utils.ReportingSet<org.apache.rat.license.ILicense> iLicenseSet79 = new org.apache.rat.utils.ReportingSet<org.apache.rat.license.ILicense>(iLicenseSet62);
        org.apache.rat.license.ILicense iLicense80 = org.apache.rat.license.LicenseSetFactory.search("6fbe8280-d578-4ea3-a1a8-34d68e85abc2", iLicenseSet62);
        org.apache.rat.license.ILicense iLicense81 = org.apache.rat.license.LicenseSetFactory.search("c6108888-bbb8-4ac0-8e5f-6bc60ab81eda", iLicenseSet62);
        reportConfiguration1.addLicensesIfNotPresent((java.util.Collection<org.apache.rat.license.ILicense>) iLicenseSet62);
        org.apache.rat.license.ILicenseFamilyBuilder iLicenseFamilyBuilder83 = new org.apache.rat.license.ILicenseFamilyBuilder();
        java.lang.String str84 = iLicenseFamilyBuilder83.getCategory();
        org.apache.rat.license.ILicenseFamily.Builder builder86 = iLicenseFamilyBuilder83.setLicenseFamilyCategory("AL   ");
        org.apache.rat.license.ILicenseFamily.Builder builder88 = iLicenseFamilyBuilder83.setLicenseFamilyCategory("MIT  ");
        org.apache.rat.license.ILicenseFamily.Builder builder90 = iLicenseFamilyBuilder83.setLicenseFamilyName("4a00cf7d-fe76-423e-917e-b03bbae6b8a5");
        org.apache.rat.license.ILicenseFamily.Builder builder92 = builder90.setLicenseFamilyName("stand");
        org.apache.rat.license.ILicenseFamily.Builder builder94 = builder92.setLicenseFamilyCategory("7ede9310-4e14-4f7b-bfcb-c0ed2643694c");
        reportConfiguration1.addFamily(builder94);
        reportConfiguration1.setCopyrightMessage("6d0dc81b-a121-4b6e-985f-5f9a42eb3c51");
        org.apache.commons.io.filefilter.IOFileFilter iOFileFilter98 = reportConfiguration1.getDirectoryFilter();
        org.junit.Assert.assertNull(claimStatistic2);
        org.junit.Assert.assertNull(claimStatistic5);
        org.junit.Assert.assertTrue("'" + options6 + "' != '" + org.apache.rat.utils.ReportingSet.Options.OVERWRITE + "'", options6.equals(org.apache.rat.utils.ReportingSet.Options.OVERWRITE));
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + true + "'", boolean9 == true);
        org.junit.Assert.assertNotNull(iLicenseArray10);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertNotNull(strArray25);
        org.junit.Assert.assertTrue("'" + boolean27 + "' != '" + true + "'", boolean27 == true);
        org.junit.Assert.assertNotNull(filenameFilter29);
        org.junit.Assert.assertNotNull(filenameFilter30);
        org.junit.Assert.assertNull(claimStatistic36);
        org.junit.Assert.assertNotNull(strSet39);
        org.junit.Assert.assertTrue("'" + boolean40 + "' != '" + false + "'", boolean40 == false);
        org.junit.Assert.assertNull(filenameFilter43);
        org.junit.Assert.assertTrue("'" + licenseFilter44 + "' != '" + org.apache.rat.license.LicenseSetFactory.LicenseFilter.all + "'", licenseFilter44.equals(org.apache.rat.license.LicenseSetFactory.LicenseFilter.all));
        org.junit.Assert.assertNotNull(iLicenseSet45);
        org.junit.Assert.assertTrue("'" + addLicenseHeaders46 + "' != '" + org.apache.rat.config.AddLicenseHeaders.FALSE + "'", addLicenseHeaders46.equals(org.apache.rat.config.AddLicenseHeaders.FALSE));
        org.junit.Assert.assertNull(claimStatistic50);
        org.junit.Assert.assertTrue("'" + licenseFilter51 + "' != '" + org.apache.rat.license.LicenseSetFactory.LicenseFilter.all + "'", licenseFilter51.equals(org.apache.rat.license.LicenseSetFactory.LicenseFilter.all));
        org.junit.Assert.assertTrue("'" + addLicenseHeaders54 + "' != '" + org.apache.rat.config.AddLicenseHeaders.FORCED + "'", addLicenseHeaders54.equals(org.apache.rat.config.AddLicenseHeaders.FORCED));
        org.junit.Assert.assertTrue("'" + format60 + "' != '" + org.apache.rat.configuration.Format.XML + "'", format60.equals(org.apache.rat.configuration.Format.XML));
        org.junit.Assert.assertNotNull(licenseReader61);
        org.junit.Assert.assertNotNull(iLicenseSet62);
        org.junit.Assert.assertNotNull(strArray68);
        org.junit.Assert.assertTrue("'" + boolean70 + "' != '" + true + "'", boolean70 == true);
        org.junit.Assert.assertTrue("'" + boolean72 + "' != '" + true + "'", boolean72 == true);
        org.junit.Assert.assertTrue("'" + boolean74 + "' != '" + true + "'", boolean74 == true);
        org.junit.Assert.assertNotNull(strSet76);
        org.junit.Assert.assertTrue("'" + boolean77 + "' != '" + false + "'", boolean77 == false);
        org.junit.Assert.assertNull(iLicense80);
        org.junit.Assert.assertNull(iLicense81);
        org.junit.Assert.assertNull(str84);
        org.junit.Assert.assertNotNull(builder86);
        org.junit.Assert.assertNotNull(builder88);
        org.junit.Assert.assertNotNull(builder90);
        org.junit.Assert.assertNotNull(builder92);
        org.junit.Assert.assertNotNull(builder94);
        org.junit.Assert.assertNotNull(iOFileFilter98);
    }

    @Test
    public void test13829() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest27.test13829");
        org.apache.rat.configuration.builders.RegexBuilder regexBuilder0 = new org.apache.rat.configuration.builders.RegexBuilder();
        java.lang.String str1 = regexBuilder0.toString();
        java.lang.String str2 = regexBuilder0.toString();
        org.apache.rat.configuration.builders.RegexBuilder regexBuilder4 = regexBuilder0.setExpr("89662180-a89f-497b-9301-227d494d2bae");
        org.apache.rat.configuration.builders.RegexBuilder regexBuilder6 = regexBuilder4.setExpr("http://org/apache/rat/meta-data#LicenseFamilyName");
        org.apache.rat.configuration.builders.RegexBuilder regexBuilder8 = regexBuilder4.setExpr("ef75a6e8-7197-4e9e-83bf-f8b367e6b3c5");
        org.apache.rat.analysis.IHeaderMatcher iHeaderMatcher9 = regexBuilder8.build();
        org.apache.rat.configuration.builders.RegexBuilder regexBuilder11 = regexBuilder8.setExpr("c8f389b8-5295-40d4-be8e-f0d0afde51c6");
        org.junit.Assert.assertEquals("'" + str1 + "' != '" + "RegexBuilder: null" + "'", str1, "RegexBuilder: null");
        org.junit.Assert.assertEquals("'" + str2 + "' != '" + "RegexBuilder: null" + "'", str2, "RegexBuilder: null");
        org.junit.Assert.assertNotNull(regexBuilder4);
        org.junit.Assert.assertNotNull(regexBuilder6);
        org.junit.Assert.assertNotNull(regexBuilder8);
        org.junit.Assert.assertNotNull(iHeaderMatcher9);
        org.junit.Assert.assertNotNull(regexBuilder11);
    }

    @Test
    public void test13830() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest27.test13830");
        java.lang.String[] strArray5 = new java.lang.String[] { "http://org/apache/rat/meta-data#LicenseFamilyCategory", "Datum [ name ='http://org/apache/rat/meta-data#LicenseFamilyCategory',value ='GPL1  ']", "MANIFEST.MF", "AllBuilder:", "The MIT License" };
        org.apache.rat.utils.ReportingSet<java.lang.String> strSet6 = new org.apache.rat.utils.ReportingSet<java.lang.String>();
        boolean boolean7 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strSet6, strArray5);
        boolean boolean9 = strSet6.addIfNotPresent("http://org/apache/rat/meta-data#LicenseFamilyName");
        boolean boolean11 = strSet6.addIfNotPresent("ef7a8b13-64c3-4510-bb0c-dbf208e1e73f");
        java.util.function.Function<java.lang.String, java.lang.String> strFunction12 = null;
        org.apache.rat.utils.ReportingSet<java.lang.String> strSet13 = strSet6.setMsgFormat(strFunction12);
        java.lang.String str14 = strSet13.first();
        strSet13.clear();
        java.lang.Object[] objArray16 = strSet13.toArray();
        org.apache.rat.utils.DefaultLog defaultLog17 = org.apache.rat.utils.DefaultLog.INSTANCE;
        org.apache.rat.license.ILicense.Builder builder18 = org.apache.rat.license.ILicense.builder();
        org.apache.rat.license.ILicense.Builder builder20 = builder18.setLicenseFamilyCategory("");
        org.apache.rat.analysis.matchers.CopyrightMatcher copyrightMatcher24 = new org.apache.rat.analysis.matchers.CopyrightMatcher("", "GPL1 ", "hi!");
        org.apache.rat.analysis.IHeaderMatcher.State state25 = copyrightMatcher24.finalizeState();
        org.apache.rat.license.ILicense.Builder builder26 = builder20.setMatcher((org.apache.rat.analysis.IHeaderMatcher) copyrightMatcher24);
        org.apache.rat.license.ILicense.Builder builder28 = builder26.setLicenseFamilyCategory("");
        defaultLog17.error((java.lang.Object) builder28);
        org.apache.rat.utils.Log log30 = null;
        org.apache.rat.ReportConfiguration reportConfiguration31 = new org.apache.rat.ReportConfiguration(log30);
        java.io.FilenameFilter filenameFilter32 = reportConfiguration31.getInputFileFilter();
        org.apache.rat.license.LicenseSetFactory.LicenseFilter licenseFilter33 = org.apache.rat.license.LicenseSetFactory.LicenseFilter.all;
        java.util.SortedSet<org.apache.rat.license.ILicense> iLicenseSet34 = reportConfiguration31.getLicenses(licenseFilter33);
        org.apache.rat.config.AddLicenseHeaders addLicenseHeaders35 = org.apache.rat.config.AddLicenseHeaders.FALSE;
        reportConfiguration31.setAddLicenseHeaders(addLicenseHeaders35);
        org.apache.rat.utils.Log log37 = null;
        org.apache.rat.ReportConfiguration reportConfiguration38 = new org.apache.rat.ReportConfiguration(log37);
        org.apache.rat.report.claim.ClaimStatistic claimStatistic39 = org.apache.rat.Reporter.report(reportConfiguration38);
        org.apache.rat.license.LicenseSetFactory.LicenseFilter licenseFilter40 = org.apache.rat.license.LicenseSetFactory.LicenseFilter.all;
        org.apache.rat.Reporter.listLicenses(reportConfiguration38, licenseFilter40);
        org.apache.rat.Reporter.listLicenses(reportConfiguration31, licenseFilter40);
        org.apache.rat.utils.Log log43 = null;
        org.apache.rat.ReportConfiguration reportConfiguration44 = new org.apache.rat.ReportConfiguration(log43);
        java.io.FilenameFilter filenameFilter45 = reportConfiguration44.getInputFileFilter();
        org.apache.rat.license.LicenseSetFactory.LicenseFilter licenseFilter46 = org.apache.rat.license.LicenseSetFactory.LicenseFilter.all;
        java.util.SortedSet<org.apache.rat.license.ILicense> iLicenseSet47 = reportConfiguration44.getLicenses(licenseFilter46);
        org.apache.rat.config.AddLicenseHeaders addLicenseHeaders48 = org.apache.rat.config.AddLicenseHeaders.FALSE;
        reportConfiguration44.setAddLicenseHeaders(addLicenseHeaders48);
        org.apache.rat.utils.Log log50 = null;
        org.apache.rat.ReportConfiguration reportConfiguration51 = new org.apache.rat.ReportConfiguration(log50);
        org.apache.rat.report.claim.ClaimStatistic claimStatistic52 = org.apache.rat.Reporter.report(reportConfiguration51);
        org.apache.rat.license.LicenseSetFactory.LicenseFilter licenseFilter53 = org.apache.rat.license.LicenseSetFactory.LicenseFilter.all;
        org.apache.rat.Reporter.listLicenses(reportConfiguration51, licenseFilter53);
        org.apache.rat.Reporter.listLicenses(reportConfiguration44, licenseFilter53);
        org.apache.rat.Reporter.listLicenses(reportConfiguration31, licenseFilter53);
        org.apache.rat.utils.Log log57 = null;
        org.apache.rat.ReportConfiguration reportConfiguration58 = new org.apache.rat.ReportConfiguration(log57);
        org.apache.commons.io.function.IOSupplier<java.io.OutputStream> outputStreamIOSupplier59 = reportConfiguration58.getOutput();
        reportConfiguration31.setOut(outputStreamIOSupplier59);
        org.apache.rat.utils.Log.Level level61 = org.apache.rat.utils.Log.Level.WARN;
        reportConfiguration31.logLicenseCollisions(level61);
        defaultLog17.warn((java.lang.Object) level61);
        org.apache.rat.utils.Log.Level level64 = defaultLog17.getLevel();
        defaultLog17.warn((java.lang.Object) 0);
        org.apache.rat.license.SimpleLicenseFamily simpleLicenseFamily67 = new org.apache.rat.license.SimpleLicenseFamily();
        simpleLicenseFamily67.setFamilyName("http://org/apache/rat/meta-data#LicenseFamilyName");
        java.lang.String str70 = simpleLicenseFamily67.toString();
        defaultLog17.warn((java.lang.Object) simpleLicenseFamily67);
        simpleLicenseFamily67.setFamilyCategory("SPDX:.cvsignore");
        java.lang.String str74 = simpleLicenseFamily67.getFamilyCategory();
        simpleLicenseFamily67.setFamilyName("W3CD ");
        boolean boolean77 = strSet13.equals((java.lang.Object) "W3CD ");
        java.lang.Object[] objArray78 = strSet13.toArray();
        org.junit.Assert.assertNotNull(strArray5);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + true + "'", boolean7 == true);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + true + "'", boolean9 == true);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + true + "'", boolean11 == true);
        org.junit.Assert.assertNotNull(strSet13);
        org.junit.Assert.assertEquals("'" + str14 + "' != '" + "AllBuilder:" + "'", str14, "AllBuilder:");
        org.junit.Assert.assertNotNull(objArray16);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray16), "[]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray16), "[]");
        org.junit.Assert.assertNotNull(defaultLog17);
        org.junit.Assert.assertNotNull(builder18);
        org.junit.Assert.assertNotNull(builder20);
        org.junit.Assert.assertTrue("'" + state25 + "' != '" + org.apache.rat.analysis.IHeaderMatcher.State.f + "'", state25.equals(org.apache.rat.analysis.IHeaderMatcher.State.f));
        org.junit.Assert.assertNotNull(builder26);
        org.junit.Assert.assertNotNull(builder28);
        org.junit.Assert.assertNull(filenameFilter32);
        org.junit.Assert.assertTrue("'" + licenseFilter33 + "' != '" + org.apache.rat.license.LicenseSetFactory.LicenseFilter.all + "'", licenseFilter33.equals(org.apache.rat.license.LicenseSetFactory.LicenseFilter.all));
        org.junit.Assert.assertNotNull(iLicenseSet34);
        org.junit.Assert.assertTrue("'" + addLicenseHeaders35 + "' != '" + org.apache.rat.config.AddLicenseHeaders.FALSE + "'", addLicenseHeaders35.equals(org.apache.rat.config.AddLicenseHeaders.FALSE));
        org.junit.Assert.assertNull(claimStatistic39);
        org.junit.Assert.assertTrue("'" + licenseFilter40 + "' != '" + org.apache.rat.license.LicenseSetFactory.LicenseFilter.all + "'", licenseFilter40.equals(org.apache.rat.license.LicenseSetFactory.LicenseFilter.all));
        org.junit.Assert.assertNull(filenameFilter45);
        org.junit.Assert.assertTrue("'" + licenseFilter46 + "' != '" + org.apache.rat.license.LicenseSetFactory.LicenseFilter.all + "'", licenseFilter46.equals(org.apache.rat.license.LicenseSetFactory.LicenseFilter.all));
        org.junit.Assert.assertNotNull(iLicenseSet47);
        org.junit.Assert.assertTrue("'" + addLicenseHeaders48 + "' != '" + org.apache.rat.config.AddLicenseHeaders.FALSE + "'", addLicenseHeaders48.equals(org.apache.rat.config.AddLicenseHeaders.FALSE));
        org.junit.Assert.assertNull(claimStatistic52);
        org.junit.Assert.assertTrue("'" + licenseFilter53 + "' != '" + org.apache.rat.license.LicenseSetFactory.LicenseFilter.all + "'", licenseFilter53.equals(org.apache.rat.license.LicenseSetFactory.LicenseFilter.all));
        org.junit.Assert.assertNotNull(outputStreamIOSupplier59);
        org.junit.Assert.assertTrue("'" + level61 + "' != '" + org.apache.rat.utils.Log.Level.WARN + "'", level61.equals(org.apache.rat.utils.Log.Level.WARN));
        org.junit.Assert.assertTrue("'" + level64 + "' != '" + org.apache.rat.utils.Log.Level.ERROR + "'", level64.equals(org.apache.rat.utils.Log.Level.ERROR));
        org.junit.Assert.assertEquals("'" + str70 + "' != '" + "null http://org/apache/rat/meta-data#LicenseFamilyName" + "'", str70, "null http://org/apache/rat/meta-data#LicenseFamilyName");
        org.junit.Assert.assertEquals("'" + str74 + "' != '" + "SPDX:.cvsignore" + "'", str74, "SPDX:.cvsignore");
        org.junit.Assert.assertTrue("'" + boolean77 + "' != '" + false + "'", boolean77 == false);
        org.junit.Assert.assertNotNull(objArray78);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray78), "[]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray78), "[]");
    }

    @Test
    public void test13831() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest27.test13831");
        org.apache.rat.utils.Log log0 = null;
        org.apache.rat.ReportConfiguration reportConfiguration1 = new org.apache.rat.ReportConfiguration(log0);
        java.io.FilenameFilter filenameFilter2 = reportConfiguration1.getInputFileFilter();
        org.apache.rat.license.LicenseSetFactory.LicenseFilter licenseFilter3 = org.apache.rat.license.LicenseSetFactory.LicenseFilter.all;
        java.util.SortedSet<org.apache.rat.license.ILicense> iLicenseSet4 = reportConfiguration1.getLicenses(licenseFilter3);
        org.apache.rat.config.AddLicenseHeaders addLicenseHeaders5 = org.apache.rat.config.AddLicenseHeaders.FALSE;
        reportConfiguration1.setAddLicenseHeaders(addLicenseHeaders5);
        org.apache.rat.utils.Log log7 = null;
        org.apache.rat.ReportConfiguration reportConfiguration8 = new org.apache.rat.ReportConfiguration(log7);
        org.apache.rat.report.claim.ClaimStatistic claimStatistic9 = org.apache.rat.Reporter.report(reportConfiguration8);
        org.apache.rat.license.LicenseSetFactory.LicenseFilter licenseFilter10 = org.apache.rat.license.LicenseSetFactory.LicenseFilter.all;
        org.apache.rat.Reporter.listLicenses(reportConfiguration8, licenseFilter10);
        org.apache.rat.Reporter.listLicenses(reportConfiguration1, licenseFilter10);
        org.apache.rat.utils.Log log13 = null;
        org.apache.rat.ReportConfiguration reportConfiguration14 = new org.apache.rat.ReportConfiguration(log13);
        java.io.FilenameFilter filenameFilter15 = reportConfiguration14.getInputFileFilter();
        org.apache.rat.license.LicenseSetFactory.LicenseFilter licenseFilter16 = org.apache.rat.license.LicenseSetFactory.LicenseFilter.all;
        java.util.SortedSet<org.apache.rat.license.ILicense> iLicenseSet17 = reportConfiguration14.getLicenses(licenseFilter16);
        org.apache.rat.config.AddLicenseHeaders addLicenseHeaders18 = org.apache.rat.config.AddLicenseHeaders.FALSE;
        reportConfiguration14.setAddLicenseHeaders(addLicenseHeaders18);
        org.apache.rat.utils.Log log20 = null;
        org.apache.rat.ReportConfiguration reportConfiguration21 = new org.apache.rat.ReportConfiguration(log20);
        org.apache.rat.report.claim.ClaimStatistic claimStatistic22 = org.apache.rat.Reporter.report(reportConfiguration21);
        org.apache.rat.license.LicenseSetFactory.LicenseFilter licenseFilter23 = org.apache.rat.license.LicenseSetFactory.LicenseFilter.all;
        org.apache.rat.Reporter.listLicenses(reportConfiguration21, licenseFilter23);
        org.apache.rat.Reporter.listLicenses(reportConfiguration14, licenseFilter23);
        org.apache.rat.Reporter.listLicenses(reportConfiguration1, licenseFilter23);
        org.apache.commons.io.function.IOSupplier<java.io.OutputStream> outputStreamIOSupplier27 = reportConfiguration1.getOutput();
        org.apache.rat.report.claim.ClaimStatistic claimStatistic28 = org.apache.rat.Reporter.report(reportConfiguration1);
        org.apache.rat.configuration.Format format30 = org.apache.rat.configuration.Format.XML;
        org.apache.rat.configuration.LicenseReader licenseReader31 = format30.licenseReader();
        java.util.SortedSet<org.apache.rat.license.ILicense> iLicenseSet32 = licenseReader31.readLicenses();
        java.lang.String[] strArray38 = new java.lang.String[] { "http://org/apache/rat/meta-data#LicenseFamilyCategory", "Datum [ name ='http://org/apache/rat/meta-data#LicenseFamilyCategory',value ='GPL1  ']", "MANIFEST.MF", "AllBuilder:", "The MIT License" };
        org.apache.rat.utils.ReportingSet<java.lang.String> strSet39 = new org.apache.rat.utils.ReportingSet<java.lang.String>();
        boolean boolean40 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strSet39, strArray38);
        boolean boolean42 = strSet39.addIfNotPresent("http://org/apache/rat/meta-data#LicenseFamilyName");
        boolean boolean44 = strSet39.addIfNotPresent("ef7a8b13-64c3-4510-bb0c-dbf208e1e73f");
        java.util.function.Function<java.lang.String, java.lang.String> strFunction45 = null;
        org.apache.rat.utils.ReportingSet<java.lang.String> strSet46 = strSet39.setMsgFormat(strFunction45);
        boolean boolean47 = strSet39.isEmpty();
        org.apache.rat.license.LicenseSetFactory licenseSetFactory48 = new org.apache.rat.license.LicenseSetFactory(iLicenseSet32, (java.util.Collection<java.lang.String>) strSet39);
        org.apache.rat.utils.ReportingSet<org.apache.rat.license.ILicense> iLicenseSet49 = new org.apache.rat.utils.ReportingSet<org.apache.rat.license.ILicense>(iLicenseSet32);
        org.apache.rat.license.ILicense iLicense50 = org.apache.rat.license.LicenseSetFactory.search("4fcae176-e574-46ed-b9e4-dea2e2f3b458", (java.util.SortedSet<org.apache.rat.license.ILicense>) iLicenseSet49);
        org.apache.rat.utils.ReportingSet<org.apache.rat.license.ILicense> iLicenseSet51 = new org.apache.rat.utils.ReportingSet<org.apache.rat.license.ILicense>((java.util.SortedSet<org.apache.rat.license.ILicense>) iLicenseSet49);
        reportConfiguration1.addLicensesIfNotPresent((java.util.Collection<org.apache.rat.license.ILicense>) iLicenseSet51);
        org.apache.rat.report.IReportable iReportable53 = null;
        reportConfiguration1.setReportable(iReportable53);
        reportConfiguration1.addApprovedLicenseCategory("201f7685-5238-48cf-be04-686b6f40018a");
        org.junit.Assert.assertNull(filenameFilter2);
        org.junit.Assert.assertTrue("'" + licenseFilter3 + "' != '" + org.apache.rat.license.LicenseSetFactory.LicenseFilter.all + "'", licenseFilter3.equals(org.apache.rat.license.LicenseSetFactory.LicenseFilter.all));
        org.junit.Assert.assertNotNull(iLicenseSet4);
        org.junit.Assert.assertTrue("'" + addLicenseHeaders5 + "' != '" + org.apache.rat.config.AddLicenseHeaders.FALSE + "'", addLicenseHeaders5.equals(org.apache.rat.config.AddLicenseHeaders.FALSE));
        org.junit.Assert.assertNull(claimStatistic9);
        org.junit.Assert.assertTrue("'" + licenseFilter10 + "' != '" + org.apache.rat.license.LicenseSetFactory.LicenseFilter.all + "'", licenseFilter10.equals(org.apache.rat.license.LicenseSetFactory.LicenseFilter.all));
        org.junit.Assert.assertNull(filenameFilter15);
        org.junit.Assert.assertTrue("'" + licenseFilter16 + "' != '" + org.apache.rat.license.LicenseSetFactory.LicenseFilter.all + "'", licenseFilter16.equals(org.apache.rat.license.LicenseSetFactory.LicenseFilter.all));
        org.junit.Assert.assertNotNull(iLicenseSet17);
        org.junit.Assert.assertTrue("'" + addLicenseHeaders18 + "' != '" + org.apache.rat.config.AddLicenseHeaders.FALSE + "'", addLicenseHeaders18.equals(org.apache.rat.config.AddLicenseHeaders.FALSE));
        org.junit.Assert.assertNull(claimStatistic22);
        org.junit.Assert.assertTrue("'" + licenseFilter23 + "' != '" + org.apache.rat.license.LicenseSetFactory.LicenseFilter.all + "'", licenseFilter23.equals(org.apache.rat.license.LicenseSetFactory.LicenseFilter.all));
        org.junit.Assert.assertNotNull(outputStreamIOSupplier27);
        org.junit.Assert.assertNull(claimStatistic28);
        org.junit.Assert.assertTrue("'" + format30 + "' != '" + org.apache.rat.configuration.Format.XML + "'", format30.equals(org.apache.rat.configuration.Format.XML));
        org.junit.Assert.assertNotNull(licenseReader31);
        org.junit.Assert.assertNotNull(iLicenseSet32);
        org.junit.Assert.assertNotNull(strArray38);
        org.junit.Assert.assertTrue("'" + boolean40 + "' != '" + true + "'", boolean40 == true);
        org.junit.Assert.assertTrue("'" + boolean42 + "' != '" + true + "'", boolean42 == true);
        org.junit.Assert.assertTrue("'" + boolean44 + "' != '" + true + "'", boolean44 == true);
        org.junit.Assert.assertNotNull(strSet46);
        org.junit.Assert.assertTrue("'" + boolean47 + "' != '" + false + "'", boolean47 == false);
        org.junit.Assert.assertNull(iLicense50);
    }

    @Test
    public void test13832() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest27.test13832");
        java.util.regex.Pattern pattern1 = null;
        org.apache.rat.analysis.matchers.SimpleRegexMatcher simpleRegexMatcher2 = new org.apache.rat.analysis.matchers.SimpleRegexMatcher("null http://org/apache/rat/meta-data", pattern1);
    }

    @Test
    public void test13833() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest27.test13833");
        boolean boolean1 = org.apache.rat.document.impl.guesser.ArchiveGuesser.isArchive("MathcerRefBuilder: null");
        org.junit.Assert.assertTrue("'" + boolean1 + "' != '" + false + "'", boolean1 == false);
    }

    @Test
    public void test13834() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest27.test13834");
        org.apache.rat.utils.DefaultLog defaultLog0 = org.apache.rat.utils.DefaultLog.INSTANCE;
        org.apache.rat.configuration.builders.AllBuilder allBuilder1 = new org.apache.rat.configuration.builders.AllBuilder();
        org.apache.rat.configuration.builders.MatcherRefBuilder matcherRefBuilder2 = org.apache.rat.analysis.IHeaderMatcher.Builder.matcherRef();
        boolean boolean3 = matcherRefBuilder2.hasId();
        java.lang.String str4 = matcherRefBuilder2.toString();
        org.apache.rat.configuration.builders.AnyBuilder anyBuilder5 = org.apache.rat.analysis.IHeaderMatcher.Builder.any();
        org.apache.rat.configuration.builders.NotBuilder notBuilder6 = new org.apache.rat.configuration.builders.NotBuilder();
        java.lang.String str7 = notBuilder6.toString();
        org.apache.rat.configuration.builders.MatcherRefBuilder matcherRefBuilder8 = org.apache.rat.analysis.IHeaderMatcher.Builder.matcherRef();
        boolean boolean9 = matcherRefBuilder8.hasId();
        java.util.Map<java.lang.String, org.apache.rat.analysis.IHeaderMatcher> strMap10 = null;
        org.apache.rat.configuration.builders.MatcherRefBuilder matcherRefBuilder11 = matcherRefBuilder8.setMatchers(strMap10);
        org.apache.rat.configuration.builders.AllBuilder allBuilder12 = new org.apache.rat.configuration.builders.AllBuilder();
        org.apache.rat.configuration.builders.CopyrightBuilder copyrightBuilder13 = org.apache.rat.analysis.IHeaderMatcher.Builder.copyright();
        org.apache.rat.configuration.builders.CopyrightBuilder copyrightBuilder15 = copyrightBuilder13.setStart("OASIS");
        java.lang.String str16 = copyrightBuilder13.toString();
        org.apache.rat.configuration.builders.CopyrightBuilder copyrightBuilder18 = copyrightBuilder13.setStart("223f0aba-15d4-49e9-901e-5740c137aebf");
        org.apache.rat.configuration.builders.MatcherRefBuilder matcherRefBuilder19 = org.apache.rat.analysis.IHeaderMatcher.Builder.matcherRef();
        boolean boolean20 = matcherRefBuilder19.hasId();
        org.apache.rat.configuration.builders.CopyrightBuilder copyrightBuilder21 = org.apache.rat.analysis.IHeaderMatcher.Builder.copyright();
        org.apache.rat.configuration.builders.CopyrightBuilder copyrightBuilder23 = copyrightBuilder21.setStart("OASIS");
        java.lang.String str24 = copyrightBuilder21.toString();
        org.apache.rat.configuration.builders.CopyrightBuilder copyrightBuilder26 = copyrightBuilder21.setStart("223f0aba-15d4-49e9-901e-5740c137aebf");
        org.apache.rat.configuration.builders.CopyrightBuilder copyrightBuilder27 = org.apache.rat.analysis.IHeaderMatcher.Builder.copyright();
        org.apache.rat.configuration.builders.CopyrightBuilder copyrightBuilder28 = org.apache.rat.analysis.IHeaderMatcher.Builder.copyright();
        java.lang.String str29 = copyrightBuilder28.toString();
        org.apache.rat.configuration.builders.CopyrightBuilder copyrightBuilder31 = copyrightBuilder28.setEnd(".cvsignore");
        boolean boolean32 = copyrightBuilder28.hasId();
        org.apache.rat.configuration.builders.CopyrightBuilder copyrightBuilder33 = org.apache.rat.analysis.IHeaderMatcher.Builder.copyright();
        java.lang.String str34 = copyrightBuilder33.toString();
        org.apache.rat.configuration.builders.CopyrightBuilder copyrightBuilder36 = copyrightBuilder33.setEnd(".cvsignore");
        boolean boolean37 = copyrightBuilder33.hasId();
        java.lang.String str38 = copyrightBuilder33.toString();
        org.apache.rat.configuration.builders.CopyrightBuilder copyrightBuilder39 = org.apache.rat.analysis.IHeaderMatcher.Builder.copyright();
        org.apache.rat.configuration.builders.CopyrightBuilder copyrightBuilder41 = copyrightBuilder39.setStart("OASIS");
        org.apache.rat.configuration.builders.AnyBuilder anyBuilder42 = org.apache.rat.analysis.IHeaderMatcher.Builder.any();
        org.apache.rat.configuration.builders.MatcherRefBuilder matcherRefBuilder43 = org.apache.rat.analysis.IHeaderMatcher.Builder.matcherRef();
        boolean boolean44 = matcherRefBuilder43.hasId();
        java.util.Map<java.lang.String, org.apache.rat.analysis.IHeaderMatcher> strMap45 = null;
        org.apache.rat.configuration.builders.MatcherRefBuilder matcherRefBuilder46 = matcherRefBuilder43.setMatchers(strMap45);
        org.apache.rat.configuration.builders.CopyrightBuilder copyrightBuilder47 = org.apache.rat.analysis.IHeaderMatcher.Builder.copyright();
        org.apache.rat.configuration.builders.MatcherRefBuilder matcherRefBuilder48 = org.apache.rat.analysis.IHeaderMatcher.Builder.matcherRef();
        boolean boolean49 = matcherRefBuilder48.hasId();
        java.lang.String str50 = matcherRefBuilder48.toString();
        java.util.Map<java.lang.String, org.apache.rat.analysis.IHeaderMatcher> strMap51 = null;
        org.apache.rat.configuration.builders.MatcherRefBuilder matcherRefBuilder52 = matcherRefBuilder48.setMatchers(strMap51);
        org.apache.rat.analysis.IHeaderMatcher.Builder[] builderArray53 = new org.apache.rat.analysis.IHeaderMatcher.Builder[] { matcherRefBuilder8, allBuilder12, copyrightBuilder18, matcherRefBuilder19, copyrightBuilder21, copyrightBuilder27, copyrightBuilder28, copyrightBuilder33, copyrightBuilder39, anyBuilder42, matcherRefBuilder43, copyrightBuilder47, matcherRefBuilder48 };
        java.util.ArrayList<org.apache.rat.analysis.IHeaderMatcher.Builder> builderList54 = new java.util.ArrayList<org.apache.rat.analysis.IHeaderMatcher.Builder>();
        boolean boolean55 = java.util.Collections.addAll((java.util.Collection<org.apache.rat.analysis.IHeaderMatcher.Builder>) builderList54, builderArray53);
        org.apache.rat.configuration.builders.AbstractBuilder abstractBuilder56 = notBuilder6.add((java.util.Collection<org.apache.rat.analysis.IHeaderMatcher.Builder>) builderList54);
        org.apache.rat.configuration.builders.MatcherRefBuilder matcherRefBuilder57 = new org.apache.rat.configuration.builders.MatcherRefBuilder();
        org.apache.rat.analysis.IHeaderMatcher.Builder[] builderArray58 = new org.apache.rat.analysis.IHeaderMatcher.Builder[] { matcherRefBuilder2, anyBuilder5, notBuilder6, matcherRefBuilder57 };
        java.util.ArrayList<org.apache.rat.analysis.IHeaderMatcher.Builder> builderList59 = new java.util.ArrayList<org.apache.rat.analysis.IHeaderMatcher.Builder>();
        boolean boolean60 = java.util.Collections.addAll((java.util.Collection<org.apache.rat.analysis.IHeaderMatcher.Builder>) builderList59, builderArray58);
        org.apache.rat.configuration.builders.AbstractBuilder abstractBuilder61 = allBuilder1.add((java.util.Collection<org.apache.rat.analysis.IHeaderMatcher.Builder>) builderList59);
        defaultLog0.info((java.lang.Object) allBuilder1);
        org.apache.rat.annotation.ApacheV2LicenseAppender apacheV2LicenseAppender64 = new org.apache.rat.annotation.ApacheV2LicenseAppender((org.apache.rat.utils.Log) defaultLog0, "true");
        org.apache.rat.configuration.builders.CopyrightBuilder copyrightBuilder65 = org.apache.rat.analysis.IHeaderMatcher.Builder.copyright();
        java.lang.String str66 = copyrightBuilder65.toString();
        org.apache.rat.configuration.builders.CopyrightBuilder copyrightBuilder68 = copyrightBuilder65.setEnd(".cvsignore");
        boolean boolean69 = copyrightBuilder65.hasId();
        org.apache.rat.configuration.builders.CopyrightBuilder copyrightBuilder71 = copyrightBuilder65.setEnd("notice");
        defaultLog0.debug((java.lang.Object) "notice");
        org.apache.rat.annotation.ApacheV2LicenseAppender apacheV2LicenseAppender73 = new org.apache.rat.annotation.ApacheV2LicenseAppender((org.apache.rat.utils.Log) defaultLog0);
        org.apache.rat.annotation.ApacheV2LicenseAppender apacheV2LicenseAppender75 = new org.apache.rat.annotation.ApacheV2LicenseAppender((org.apache.rat.utils.Log) defaultLog0, "TextBuilder: ");
        org.apache.rat.config.SourceCodeManagementSystems sourceCodeManagementSystems76 = org.apache.rat.config.SourceCodeManagementSystems.SUBVERSION;
        boolean boolean77 = sourceCodeManagementSystems76.hasIgnoreFile();
        java.util.List<java.lang.String> strList78 = sourceCodeManagementSystems76.getExclusions();
        java.util.List<java.lang.String> strList79 = sourceCodeManagementSystems76.getExclusions();
        boolean boolean80 = sourceCodeManagementSystems76.hasIgnoreFile();
        java.util.List<java.lang.String> strList81 = sourceCodeManagementSystems76.getExclusions();
        boolean boolean82 = sourceCodeManagementSystems76.hasIgnoreFile();
        java.util.List<java.lang.String> strList83 = sourceCodeManagementSystems76.getExclusions();
        java.io.FilenameFilter filenameFilter84 = org.apache.rat.Report.parseExclusions(strList83);
        defaultLog0.error((java.lang.Object) filenameFilter84);
        org.junit.Assert.assertNotNull(defaultLog0);
        org.junit.Assert.assertNotNull(matcherRefBuilder2);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "MathcerRefBuilder: null" + "'", str4, "MathcerRefBuilder: null");
        org.junit.Assert.assertNotNull(anyBuilder5);
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "NotBuilder: null" + "'", str7, "NotBuilder: null");
        org.junit.Assert.assertNotNull(matcherRefBuilder8);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertNotNull(matcherRefBuilder11);
        org.junit.Assert.assertNotNull(copyrightBuilder13);
        org.junit.Assert.assertNotNull(copyrightBuilder15);
        org.junit.Assert.assertEquals("'" + str16 + "' != '" + "Copyright Builder: s:OASIS e:null o:null" + "'", str16, "Copyright Builder: s:OASIS e:null o:null");
        org.junit.Assert.assertNotNull(copyrightBuilder18);
        org.junit.Assert.assertNotNull(matcherRefBuilder19);
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + false + "'", boolean20 == false);
        org.junit.Assert.assertNotNull(copyrightBuilder21);
        org.junit.Assert.assertNotNull(copyrightBuilder23);
        org.junit.Assert.assertEquals("'" + str24 + "' != '" + "Copyright Builder: s:OASIS e:null o:null" + "'", str24, "Copyright Builder: s:OASIS e:null o:null");
        org.junit.Assert.assertNotNull(copyrightBuilder26);
        org.junit.Assert.assertNotNull(copyrightBuilder27);
        org.junit.Assert.assertNotNull(copyrightBuilder28);
        org.junit.Assert.assertEquals("'" + str29 + "' != '" + "Copyright Builder: s:null e:null o:null" + "'", str29, "Copyright Builder: s:null e:null o:null");
        org.junit.Assert.assertNotNull(copyrightBuilder31);
        org.junit.Assert.assertTrue("'" + boolean32 + "' != '" + false + "'", boolean32 == false);
        org.junit.Assert.assertNotNull(copyrightBuilder33);
        org.junit.Assert.assertEquals("'" + str34 + "' != '" + "Copyright Builder: s:null e:null o:null" + "'", str34, "Copyright Builder: s:null e:null o:null");
        org.junit.Assert.assertNotNull(copyrightBuilder36);
        org.junit.Assert.assertTrue("'" + boolean37 + "' != '" + false + "'", boolean37 == false);
        org.junit.Assert.assertEquals("'" + str38 + "' != '" + "Copyright Builder: s:null e:.cvsignore o:null" + "'", str38, "Copyright Builder: s:null e:.cvsignore o:null");
        org.junit.Assert.assertNotNull(copyrightBuilder39);
        org.junit.Assert.assertNotNull(copyrightBuilder41);
        org.junit.Assert.assertNotNull(anyBuilder42);
        org.junit.Assert.assertNotNull(matcherRefBuilder43);
        org.junit.Assert.assertTrue("'" + boolean44 + "' != '" + false + "'", boolean44 == false);
        org.junit.Assert.assertNotNull(matcherRefBuilder46);
        org.junit.Assert.assertNotNull(copyrightBuilder47);
        org.junit.Assert.assertNotNull(matcherRefBuilder48);
        org.junit.Assert.assertTrue("'" + boolean49 + "' != '" + false + "'", boolean49 == false);
        org.junit.Assert.assertEquals("'" + str50 + "' != '" + "MathcerRefBuilder: null" + "'", str50, "MathcerRefBuilder: null");
        org.junit.Assert.assertNotNull(matcherRefBuilder52);
        org.junit.Assert.assertNotNull(builderArray53);
        org.junit.Assert.assertTrue("'" + boolean55 + "' != '" + true + "'", boolean55 == true);
        org.junit.Assert.assertNotNull(abstractBuilder56);
        org.junit.Assert.assertNotNull(builderArray58);
        org.junit.Assert.assertTrue("'" + boolean60 + "' != '" + true + "'", boolean60 == true);
        org.junit.Assert.assertNotNull(abstractBuilder61);
        org.junit.Assert.assertNotNull(copyrightBuilder65);
        org.junit.Assert.assertEquals("'" + str66 + "' != '" + "Copyright Builder: s:null e:null o:null" + "'", str66, "Copyright Builder: s:null e:null o:null");
        org.junit.Assert.assertNotNull(copyrightBuilder68);
        org.junit.Assert.assertTrue("'" + boolean69 + "' != '" + false + "'", boolean69 == false);
        org.junit.Assert.assertNotNull(copyrightBuilder71);
        org.junit.Assert.assertTrue("'" + sourceCodeManagementSystems76 + "' != '" + org.apache.rat.config.SourceCodeManagementSystems.SUBVERSION + "'", sourceCodeManagementSystems76.equals(org.apache.rat.config.SourceCodeManagementSystems.SUBVERSION));
        org.junit.Assert.assertTrue("'" + boolean77 + "' != '" + false + "'", boolean77 == false);
        org.junit.Assert.assertNotNull(strList78);
        org.junit.Assert.assertNotNull(strList79);
        org.junit.Assert.assertTrue("'" + boolean80 + "' != '" + false + "'", boolean80 == false);
        org.junit.Assert.assertNotNull(strList81);
        org.junit.Assert.assertTrue("'" + boolean82 + "' != '" + false + "'", boolean82 == false);
        org.junit.Assert.assertNotNull(strList83);
        org.junit.Assert.assertNotNull(filenameFilter84);
    }

    @Test
    public void test13835() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest27.test13835");
        boolean boolean1 = org.apache.rat.document.impl.guesser.BinaryGuesser.isImage("Copyright Builder: s:223f0 e:W3C Software Copyright o:3a01ef2a-65ad-4697-a3a7-bb504d3c1921");
        org.junit.Assert.assertTrue("'" + boolean1 + "' != '" + false + "'", boolean1 == false);
    }

    @Test
    public void test13836() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest27.test13836");
        org.apache.rat.utils.Log log0 = null;
        org.apache.rat.ReportConfiguration reportConfiguration1 = new org.apache.rat.ReportConfiguration(log0);
        org.apache.rat.report.claim.ClaimStatistic claimStatistic2 = org.apache.rat.Reporter.report(reportConfiguration1);
        org.apache.rat.utils.Log log3 = null;
        org.apache.rat.ReportConfiguration reportConfiguration4 = new org.apache.rat.ReportConfiguration(log3);
        org.apache.rat.report.claim.ClaimStatistic claimStatistic5 = org.apache.rat.Reporter.report(reportConfiguration4);
        org.apache.rat.utils.ReportingSet.Options options6 = org.apache.rat.utils.ReportingSet.Options.OVERWRITE;
        reportConfiguration4.licenseDuplicateOption(options6);
        reportConfiguration1.familyDuplicateOption(options6);
        org.apache.commons.io.function.IOSupplier<java.io.PrintWriter> printWriterIOSupplier9 = reportConfiguration1.getWriter();
        boolean boolean10 = reportConfiguration1.isAddingLicensesForced();
        org.apache.rat.utils.Log log11 = null;
        org.apache.rat.ReportConfiguration reportConfiguration12 = new org.apache.rat.ReportConfiguration(log11);
        org.apache.rat.report.claim.ClaimStatistic claimStatistic13 = org.apache.rat.Reporter.report(reportConfiguration12);
        org.apache.commons.io.function.IOSupplier<java.io.OutputStream> outputStreamIOSupplier14 = reportConfiguration12.getOutput();
        reportConfiguration1.setOut(outputStreamIOSupplier14);
        org.apache.rat.utils.Log log16 = null;
        org.apache.rat.ReportConfiguration reportConfiguration17 = new org.apache.rat.ReportConfiguration(log16);
        org.apache.commons.io.function.IOSupplier<java.io.OutputStream> outputStreamIOSupplier18 = reportConfiguration17.getOutput();
        reportConfiguration17.removeApprovedLicenseCategory("EF7A8B13-64C3-4510-BB0C-DBF208E1E73F");
        org.apache.rat.utils.Log log21 = null;
        org.apache.rat.ReportConfiguration reportConfiguration22 = new org.apache.rat.ReportConfiguration(log21);
        org.apache.rat.report.claim.ClaimStatistic claimStatistic23 = org.apache.rat.Reporter.report(reportConfiguration22);
        org.apache.rat.utils.Log log24 = null;
        org.apache.rat.ReportConfiguration reportConfiguration25 = new org.apache.rat.ReportConfiguration(log24);
        org.apache.rat.report.claim.ClaimStatistic claimStatistic26 = org.apache.rat.Reporter.report(reportConfiguration25);
        org.apache.rat.utils.ReportingSet.Options options27 = org.apache.rat.utils.ReportingSet.Options.OVERWRITE;
        reportConfiguration25.licenseDuplicateOption(options27);
        reportConfiguration22.familyDuplicateOption(options27);
        org.apache.commons.io.function.IOSupplier<java.io.PrintWriter> printWriterIOSupplier30 = reportConfiguration22.getWriter();
        org.apache.rat.report.IReportable iReportable31 = null;
        reportConfiguration22.setReportable(iReportable31);
        org.apache.rat.license.ILicenseFamily[] iLicenseFamilyArray33 = new org.apache.rat.license.ILicenseFamily[] {};
        java.util.ArrayList<org.apache.rat.license.ILicenseFamily> iLicenseFamilyList34 = new java.util.ArrayList<org.apache.rat.license.ILicenseFamily>();
        boolean boolean35 = java.util.Collections.addAll((java.util.Collection<org.apache.rat.license.ILicenseFamily>) iLicenseFamilyList34, iLicenseFamilyArray33);
        org.apache.rat.policy.DefaultPolicy defaultPolicy36 = new org.apache.rat.policy.DefaultPolicy((java.util.Collection<org.apache.rat.license.ILicenseFamily>) iLicenseFamilyList34);
        reportConfiguration22.addFamilies((java.util.Collection<org.apache.rat.license.ILicenseFamily>) iLicenseFamilyList34);
        org.apache.rat.utils.Log log38 = null;
        org.apache.rat.ReportConfiguration reportConfiguration39 = new org.apache.rat.ReportConfiguration(log38);
        java.io.FilenameFilter filenameFilter40 = reportConfiguration39.getInputFileFilter();
        org.apache.rat.license.LicenseSetFactory.LicenseFilter licenseFilter41 = org.apache.rat.license.LicenseSetFactory.LicenseFilter.all;
        java.util.SortedSet<org.apache.rat.license.ILicense> iLicenseSet42 = reportConfiguration39.getLicenses(licenseFilter41);
        org.apache.rat.config.AddLicenseHeaders addLicenseHeaders43 = org.apache.rat.config.AddLicenseHeaders.FALSE;
        reportConfiguration39.setAddLicenseHeaders(addLicenseHeaders43);
        org.apache.rat.utils.Log log45 = null;
        org.apache.rat.ReportConfiguration reportConfiguration46 = new org.apache.rat.ReportConfiguration(log45);
        org.apache.rat.report.claim.ClaimStatistic claimStatistic47 = org.apache.rat.Reporter.report(reportConfiguration46);
        org.apache.rat.license.LicenseSetFactory.LicenseFilter licenseFilter48 = org.apache.rat.license.LicenseSetFactory.LicenseFilter.all;
        org.apache.rat.Reporter.listLicenses(reportConfiguration46, licenseFilter48);
        org.apache.rat.Reporter.listLicenses(reportConfiguration39, licenseFilter48);
        org.apache.rat.utils.Log log51 = null;
        org.apache.rat.ReportConfiguration reportConfiguration52 = new org.apache.rat.ReportConfiguration(log51);
        java.io.FilenameFilter filenameFilter53 = reportConfiguration52.getInputFileFilter();
        org.apache.rat.license.LicenseSetFactory.LicenseFilter licenseFilter54 = org.apache.rat.license.LicenseSetFactory.LicenseFilter.all;
        java.util.SortedSet<org.apache.rat.license.ILicense> iLicenseSet55 = reportConfiguration52.getLicenses(licenseFilter54);
        org.apache.rat.config.AddLicenseHeaders addLicenseHeaders56 = org.apache.rat.config.AddLicenseHeaders.FALSE;
        reportConfiguration52.setAddLicenseHeaders(addLicenseHeaders56);
        org.apache.rat.utils.Log log58 = null;
        org.apache.rat.ReportConfiguration reportConfiguration59 = new org.apache.rat.ReportConfiguration(log58);
        org.apache.rat.report.claim.ClaimStatistic claimStatistic60 = org.apache.rat.Reporter.report(reportConfiguration59);
        org.apache.rat.license.LicenseSetFactory.LicenseFilter licenseFilter61 = org.apache.rat.license.LicenseSetFactory.LicenseFilter.all;
        org.apache.rat.Reporter.listLicenses(reportConfiguration59, licenseFilter61);
        org.apache.rat.Reporter.listLicenses(reportConfiguration52, licenseFilter61);
        java.util.SortedSet<org.apache.rat.license.ILicenseFamily> iLicenseFamilySet64 = reportConfiguration39.getLicenseFamilies(licenseFilter61);
        java.util.SortedSet<org.apache.rat.license.ILicense> iLicenseSet65 = reportConfiguration22.getLicenses(licenseFilter61);
        org.apache.rat.Reporter.listLicenseFamilies(reportConfiguration17, licenseFilter61);
        org.apache.rat.Reporter.listLicenses(reportConfiguration1, licenseFilter61);
        org.apache.rat.utils.Log log68 = null;
        org.apache.rat.ReportConfiguration reportConfiguration69 = new org.apache.rat.ReportConfiguration(log68);
        org.apache.rat.utils.ReportingSet.Options options70 = org.apache.rat.utils.ReportingSet.Options.OVERWRITE;
        reportConfiguration69.licenseDuplicateOption(options70);
        reportConfiguration1.familyDuplicateOption(options70);
        org.apache.commons.io.function.IOSupplier<java.io.PrintWriter> printWriterIOSupplier73 = reportConfiguration1.getWriter();
        boolean boolean74 = reportConfiguration1.isAddingLicenses();
        org.apache.commons.io.function.IOSupplier<java.io.InputStream> inputStreamIOSupplier75 = reportConfiguration1.getStyleSheet();
        org.apache.rat.license.ILicenseFamilyBuilder iLicenseFamilyBuilder76 = new org.apache.rat.license.ILicenseFamilyBuilder();
        java.lang.String str77 = iLicenseFamilyBuilder76.getCategory();
        org.apache.rat.license.ILicenseFamily.Builder builder79 = iLicenseFamilyBuilder76.setLicenseFamilyCategory("AL   ");
        java.lang.String str80 = iLicenseFamilyBuilder76.getCategory();
        org.apache.rat.license.ILicenseFamily.Builder builder82 = iLicenseFamilyBuilder76.setLicenseFamilyCategory("SpdxB");
        java.lang.String str83 = iLicenseFamilyBuilder76.getCategory();
        org.apache.rat.license.ILicenseFamily.Builder builder85 = iLicenseFamilyBuilder76.setLicenseFamilyName("MathcerRefBuilder: 3c74a3ec-8235-4035-9db7-f9f475b48681");
        org.apache.rat.license.ILicenseFamily iLicenseFamily86 = builder85.build();
        reportConfiguration1.addApprovedLicenseCategory(iLicenseFamily86);
        java.lang.String str88 = reportConfiguration1.getCopyrightMessage();
        org.junit.Assert.assertNull(claimStatistic2);
        org.junit.Assert.assertNull(claimStatistic5);
        org.junit.Assert.assertTrue("'" + options6 + "' != '" + org.apache.rat.utils.ReportingSet.Options.OVERWRITE + "'", options6.equals(org.apache.rat.utils.ReportingSet.Options.OVERWRITE));
        org.junit.Assert.assertNotNull(printWriterIOSupplier9);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertNull(claimStatistic13);
        org.junit.Assert.assertNotNull(outputStreamIOSupplier14);
        org.junit.Assert.assertNotNull(outputStreamIOSupplier18);
        org.junit.Assert.assertNull(claimStatistic23);
        org.junit.Assert.assertNull(claimStatistic26);
        org.junit.Assert.assertTrue("'" + options27 + "' != '" + org.apache.rat.utils.ReportingSet.Options.OVERWRITE + "'", options27.equals(org.apache.rat.utils.ReportingSet.Options.OVERWRITE));
        org.junit.Assert.assertNotNull(printWriterIOSupplier30);
        org.junit.Assert.assertNotNull(iLicenseFamilyArray33);
        org.junit.Assert.assertTrue("'" + boolean35 + "' != '" + false + "'", boolean35 == false);
        org.junit.Assert.assertNull(filenameFilter40);
        org.junit.Assert.assertTrue("'" + licenseFilter41 + "' != '" + org.apache.rat.license.LicenseSetFactory.LicenseFilter.all + "'", licenseFilter41.equals(org.apache.rat.license.LicenseSetFactory.LicenseFilter.all));
        org.junit.Assert.assertNotNull(iLicenseSet42);
        org.junit.Assert.assertTrue("'" + addLicenseHeaders43 + "' != '" + org.apache.rat.config.AddLicenseHeaders.FALSE + "'", addLicenseHeaders43.equals(org.apache.rat.config.AddLicenseHeaders.FALSE));
        org.junit.Assert.assertNull(claimStatistic47);
        org.junit.Assert.assertTrue("'" + licenseFilter48 + "' != '" + org.apache.rat.license.LicenseSetFactory.LicenseFilter.all + "'", licenseFilter48.equals(org.apache.rat.license.LicenseSetFactory.LicenseFilter.all));
        org.junit.Assert.assertNull(filenameFilter53);
        org.junit.Assert.assertTrue("'" + licenseFilter54 + "' != '" + org.apache.rat.license.LicenseSetFactory.LicenseFilter.all + "'", licenseFilter54.equals(org.apache.rat.license.LicenseSetFactory.LicenseFilter.all));
        org.junit.Assert.assertNotNull(iLicenseSet55);
        org.junit.Assert.assertTrue("'" + addLicenseHeaders56 + "' != '" + org.apache.rat.config.AddLicenseHeaders.FALSE + "'", addLicenseHeaders56.equals(org.apache.rat.config.AddLicenseHeaders.FALSE));
        org.junit.Assert.assertNull(claimStatistic60);
        org.junit.Assert.assertTrue("'" + licenseFilter61 + "' != '" + org.apache.rat.license.LicenseSetFactory.LicenseFilter.all + "'", licenseFilter61.equals(org.apache.rat.license.LicenseSetFactory.LicenseFilter.all));
        org.junit.Assert.assertNotNull(iLicenseFamilySet64);
        org.junit.Assert.assertNotNull(iLicenseSet65);
        org.junit.Assert.assertTrue("'" + options70 + "' != '" + org.apache.rat.utils.ReportingSet.Options.OVERWRITE + "'", options70.equals(org.apache.rat.utils.ReportingSet.Options.OVERWRITE));
        org.junit.Assert.assertNotNull(printWriterIOSupplier73);
        org.junit.Assert.assertTrue("'" + boolean74 + "' != '" + false + "'", boolean74 == false);
        org.junit.Assert.assertNull(inputStreamIOSupplier75);
        org.junit.Assert.assertNull(str77);
        org.junit.Assert.assertNotNull(builder79);
        org.junit.Assert.assertEquals("'" + str80 + "' != '" + "AL   " + "'", str80, "AL   ");
        org.junit.Assert.assertNotNull(builder82);
        org.junit.Assert.assertEquals("'" + str83 + "' != '" + "SpdxB" + "'", str83, "SpdxB");
        org.junit.Assert.assertNotNull(builder85);
        org.junit.Assert.assertNotNull(iLicenseFamily86);
        org.junit.Assert.assertNull(str88);
    }

    @Test
    public void test13837() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest27.test13837");
        org.apache.rat.analysis.IHeaderMatcher iHeaderMatcher1 = null;
        // The following exception was thrown during execution in test generation
        try {
            org.apache.rat.analysis.matchers.NotMatcher notMatcher2 = new org.apache.rat.analysis.matchers.NotMatcher("8925ba14-6c7c-466e-9335-5528e02df2c5", iHeaderMatcher1);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: enclosed matcher may not be null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
    }

    @Test
    public void test13838() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest27.test13838");
        org.apache.rat.analysis.matchers.SPDXMatcherFactory sPDXMatcherFactory0 = org.apache.rat.analysis.matchers.SPDXMatcherFactory.INSTANCE;
        org.apache.rat.analysis.IHeaderMatcher iHeaderMatcher2 = sPDXMatcherFactory0.create("http://org/apache/rat/meta-data");
        org.apache.rat.analysis.matchers.NotMatcher notMatcher3 = new org.apache.rat.analysis.matchers.NotMatcher(iHeaderMatcher2);
        org.apache.rat.analysis.matchers.NotMatcher notMatcher4 = new org.apache.rat.analysis.matchers.NotMatcher((org.apache.rat.analysis.IHeaderMatcher) notMatcher3);
        org.apache.rat.analysis.IHeaderMatcher.State state5 = notMatcher3.finalizeState();
        notMatcher3.reset();
        org.apache.rat.analysis.matchers.NotMatcher notMatcher7 = new org.apache.rat.analysis.matchers.NotMatcher((org.apache.rat.analysis.IHeaderMatcher) notMatcher3);
        org.apache.rat.analysis.IHeaderMatcher.State state8 = notMatcher3.currentState();
        org.junit.Assert.assertNotNull(sPDXMatcherFactory0);
        org.junit.Assert.assertNotNull(iHeaderMatcher2);
        org.junit.Assert.assertTrue("'" + state5 + "' != '" + org.apache.rat.analysis.IHeaderMatcher.State.t + "'", state5.equals(org.apache.rat.analysis.IHeaderMatcher.State.t));
        org.junit.Assert.assertTrue("'" + state8 + "' != '" + org.apache.rat.analysis.IHeaderMatcher.State.i + "'", state8.equals(org.apache.rat.analysis.IHeaderMatcher.State.i));
    }

    @Test
    public void test13839() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest27.test13839");
        org.apache.rat.Defaults.Builder builder0 = org.apache.rat.Defaults.builder();
        org.apache.rat.Defaults.Builder builder2 = builder0.add("META-DATA#LICENSEFAMILYNAME");
        org.apache.rat.Defaults.Builder builder4 = builder0.remove("Copyright Builder: s:null e:null o:null");
        org.apache.rat.Defaults.Builder builder6 = builder0.add("COMMON DEVELOPMENT AND DISTRIBUTION LICENSE Version 1.0");
        org.apache.rat.Defaults.Builder builder8 = builder6.add("Datum [ name ='http://org/apache/rat/meta-data#LicenseFamilyName',value ='????? ']");
        org.apache.rat.Defaults.Builder builder10 = builder8.remove("Datum [ name ='http://org/apache/rat/meta-data#LicenseFamilyCategory',value ='????? ']");
        org.apache.rat.Defaults.Builder builder11 = builder8.noDefault();
        org.junit.Assert.assertNotNull(builder0);
        org.junit.Assert.assertNotNull(builder2);
        org.junit.Assert.assertNotNull(builder4);
        org.junit.Assert.assertNotNull(builder6);
        org.junit.Assert.assertNotNull(builder8);
        org.junit.Assert.assertNotNull(builder10);
        org.junit.Assert.assertNotNull(builder11);
    }

    @Test
    public void test13840() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest27.test13840");
        java.util.Map<java.lang.String, java.lang.String> strMap2 = null;
        // The following exception was thrown during execution in test generation
        try {
            org.apache.rat.api.ContentType contentType3 = new org.apache.rat.api.ContentType("SpdxBuilder: 15ff671b-67b8-4791-9e1e-208f319fb7e2", "ba161dc5-d7db-46fd-8c6a-96c390170cb8", strMap2);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
    }

    @Test
    public void test13841() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest27.test13841");
        org.apache.rat.utils.DefaultLog defaultLog0 = org.apache.rat.utils.DefaultLog.INSTANCE;
        org.apache.rat.configuration.builders.AllBuilder allBuilder1 = new org.apache.rat.configuration.builders.AllBuilder();
        org.apache.rat.configuration.builders.MatcherRefBuilder matcherRefBuilder2 = org.apache.rat.analysis.IHeaderMatcher.Builder.matcherRef();
        boolean boolean3 = matcherRefBuilder2.hasId();
        java.lang.String str4 = matcherRefBuilder2.toString();
        org.apache.rat.configuration.builders.AnyBuilder anyBuilder5 = org.apache.rat.analysis.IHeaderMatcher.Builder.any();
        org.apache.rat.configuration.builders.NotBuilder notBuilder6 = new org.apache.rat.configuration.builders.NotBuilder();
        java.lang.String str7 = notBuilder6.toString();
        org.apache.rat.configuration.builders.MatcherRefBuilder matcherRefBuilder8 = org.apache.rat.analysis.IHeaderMatcher.Builder.matcherRef();
        boolean boolean9 = matcherRefBuilder8.hasId();
        java.util.Map<java.lang.String, org.apache.rat.analysis.IHeaderMatcher> strMap10 = null;
        org.apache.rat.configuration.builders.MatcherRefBuilder matcherRefBuilder11 = matcherRefBuilder8.setMatchers(strMap10);
        org.apache.rat.configuration.builders.AllBuilder allBuilder12 = new org.apache.rat.configuration.builders.AllBuilder();
        org.apache.rat.configuration.builders.CopyrightBuilder copyrightBuilder13 = org.apache.rat.analysis.IHeaderMatcher.Builder.copyright();
        org.apache.rat.configuration.builders.CopyrightBuilder copyrightBuilder15 = copyrightBuilder13.setStart("OASIS");
        java.lang.String str16 = copyrightBuilder13.toString();
        org.apache.rat.configuration.builders.CopyrightBuilder copyrightBuilder18 = copyrightBuilder13.setStart("223f0aba-15d4-49e9-901e-5740c137aebf");
        org.apache.rat.configuration.builders.MatcherRefBuilder matcherRefBuilder19 = org.apache.rat.analysis.IHeaderMatcher.Builder.matcherRef();
        boolean boolean20 = matcherRefBuilder19.hasId();
        org.apache.rat.configuration.builders.CopyrightBuilder copyrightBuilder21 = org.apache.rat.analysis.IHeaderMatcher.Builder.copyright();
        org.apache.rat.configuration.builders.CopyrightBuilder copyrightBuilder23 = copyrightBuilder21.setStart("OASIS");
        java.lang.String str24 = copyrightBuilder21.toString();
        org.apache.rat.configuration.builders.CopyrightBuilder copyrightBuilder26 = copyrightBuilder21.setStart("223f0aba-15d4-49e9-901e-5740c137aebf");
        org.apache.rat.configuration.builders.CopyrightBuilder copyrightBuilder27 = org.apache.rat.analysis.IHeaderMatcher.Builder.copyright();
        org.apache.rat.configuration.builders.CopyrightBuilder copyrightBuilder28 = org.apache.rat.analysis.IHeaderMatcher.Builder.copyright();
        java.lang.String str29 = copyrightBuilder28.toString();
        org.apache.rat.configuration.builders.CopyrightBuilder copyrightBuilder31 = copyrightBuilder28.setEnd(".cvsignore");
        boolean boolean32 = copyrightBuilder28.hasId();
        org.apache.rat.configuration.builders.CopyrightBuilder copyrightBuilder33 = org.apache.rat.analysis.IHeaderMatcher.Builder.copyright();
        java.lang.String str34 = copyrightBuilder33.toString();
        org.apache.rat.configuration.builders.CopyrightBuilder copyrightBuilder36 = copyrightBuilder33.setEnd(".cvsignore");
        boolean boolean37 = copyrightBuilder33.hasId();
        java.lang.String str38 = copyrightBuilder33.toString();
        org.apache.rat.configuration.builders.CopyrightBuilder copyrightBuilder39 = org.apache.rat.analysis.IHeaderMatcher.Builder.copyright();
        org.apache.rat.configuration.builders.CopyrightBuilder copyrightBuilder41 = copyrightBuilder39.setStart("OASIS");
        org.apache.rat.configuration.builders.AnyBuilder anyBuilder42 = org.apache.rat.analysis.IHeaderMatcher.Builder.any();
        org.apache.rat.configuration.builders.MatcherRefBuilder matcherRefBuilder43 = org.apache.rat.analysis.IHeaderMatcher.Builder.matcherRef();
        boolean boolean44 = matcherRefBuilder43.hasId();
        java.util.Map<java.lang.String, org.apache.rat.analysis.IHeaderMatcher> strMap45 = null;
        org.apache.rat.configuration.builders.MatcherRefBuilder matcherRefBuilder46 = matcherRefBuilder43.setMatchers(strMap45);
        org.apache.rat.configuration.builders.CopyrightBuilder copyrightBuilder47 = org.apache.rat.analysis.IHeaderMatcher.Builder.copyright();
        org.apache.rat.configuration.builders.MatcherRefBuilder matcherRefBuilder48 = org.apache.rat.analysis.IHeaderMatcher.Builder.matcherRef();
        boolean boolean49 = matcherRefBuilder48.hasId();
        java.lang.String str50 = matcherRefBuilder48.toString();
        java.util.Map<java.lang.String, org.apache.rat.analysis.IHeaderMatcher> strMap51 = null;
        org.apache.rat.configuration.builders.MatcherRefBuilder matcherRefBuilder52 = matcherRefBuilder48.setMatchers(strMap51);
        org.apache.rat.analysis.IHeaderMatcher.Builder[] builderArray53 = new org.apache.rat.analysis.IHeaderMatcher.Builder[] { matcherRefBuilder8, allBuilder12, copyrightBuilder18, matcherRefBuilder19, copyrightBuilder21, copyrightBuilder27, copyrightBuilder28, copyrightBuilder33, copyrightBuilder39, anyBuilder42, matcherRefBuilder43, copyrightBuilder47, matcherRefBuilder48 };
        java.util.ArrayList<org.apache.rat.analysis.IHeaderMatcher.Builder> builderList54 = new java.util.ArrayList<org.apache.rat.analysis.IHeaderMatcher.Builder>();
        boolean boolean55 = java.util.Collections.addAll((java.util.Collection<org.apache.rat.analysis.IHeaderMatcher.Builder>) builderList54, builderArray53);
        org.apache.rat.configuration.builders.AbstractBuilder abstractBuilder56 = notBuilder6.add((java.util.Collection<org.apache.rat.analysis.IHeaderMatcher.Builder>) builderList54);
        org.apache.rat.configuration.builders.MatcherRefBuilder matcherRefBuilder57 = new org.apache.rat.configuration.builders.MatcherRefBuilder();
        org.apache.rat.analysis.IHeaderMatcher.Builder[] builderArray58 = new org.apache.rat.analysis.IHeaderMatcher.Builder[] { matcherRefBuilder2, anyBuilder5, notBuilder6, matcherRefBuilder57 };
        java.util.ArrayList<org.apache.rat.analysis.IHeaderMatcher.Builder> builderList59 = new java.util.ArrayList<org.apache.rat.analysis.IHeaderMatcher.Builder>();
        boolean boolean60 = java.util.Collections.addAll((java.util.Collection<org.apache.rat.analysis.IHeaderMatcher.Builder>) builderList59, builderArray58);
        org.apache.rat.configuration.builders.AbstractBuilder abstractBuilder61 = allBuilder1.add((java.util.Collection<org.apache.rat.analysis.IHeaderMatcher.Builder>) builderList59);
        defaultLog0.info((java.lang.Object) allBuilder1);
        org.apache.rat.annotation.ApacheV2LicenseAppender apacheV2LicenseAppender64 = new org.apache.rat.annotation.ApacheV2LicenseAppender((org.apache.rat.utils.Log) defaultLog0, "true");
        org.apache.rat.configuration.builders.CopyrightBuilder copyrightBuilder65 = org.apache.rat.analysis.IHeaderMatcher.Builder.copyright();
        java.lang.String str66 = copyrightBuilder65.toString();
        org.apache.rat.configuration.builders.CopyrightBuilder copyrightBuilder68 = copyrightBuilder65.setEnd(".cvsignore");
        boolean boolean69 = copyrightBuilder65.hasId();
        org.apache.rat.configuration.builders.CopyrightBuilder copyrightBuilder71 = copyrightBuilder65.setEnd("notice");
        defaultLog0.debug((java.lang.Object) "notice");
        org.apache.rat.annotation.ApacheV2LicenseAppender apacheV2LicenseAppender73 = new org.apache.rat.annotation.ApacheV2LicenseAppender((org.apache.rat.utils.Log) defaultLog0);
        org.apache.rat.utils.Log.Level level74 = defaultLog0.getLevel();
        org.apache.rat.annotation.ApacheV2LicenseAppender apacheV2LicenseAppender76 = new org.apache.rat.annotation.ApacheV2LicenseAppender((org.apache.rat.utils.Log) defaultLog0, "50413ae6-037c-4fdd-a790-7c8514c95b09");
        org.apache.rat.ReportConfiguration reportConfiguration77 = new org.apache.rat.ReportConfiguration((org.apache.rat.utils.Log) defaultLog0);
        org.apache.rat.annotation.ApacheV2LicenseAppender apacheV2LicenseAppender78 = new org.apache.rat.annotation.ApacheV2LicenseAppender((org.apache.rat.utils.Log) defaultLog0);
        org.junit.Assert.assertNotNull(defaultLog0);
        org.junit.Assert.assertNotNull(matcherRefBuilder2);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "MathcerRefBuilder: null" + "'", str4, "MathcerRefBuilder: null");
        org.junit.Assert.assertNotNull(anyBuilder5);
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "NotBuilder: null" + "'", str7, "NotBuilder: null");
        org.junit.Assert.assertNotNull(matcherRefBuilder8);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertNotNull(matcherRefBuilder11);
        org.junit.Assert.assertNotNull(copyrightBuilder13);
        org.junit.Assert.assertNotNull(copyrightBuilder15);
        org.junit.Assert.assertEquals("'" + str16 + "' != '" + "Copyright Builder: s:OASIS e:null o:null" + "'", str16, "Copyright Builder: s:OASIS e:null o:null");
        org.junit.Assert.assertNotNull(copyrightBuilder18);
        org.junit.Assert.assertNotNull(matcherRefBuilder19);
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + false + "'", boolean20 == false);
        org.junit.Assert.assertNotNull(copyrightBuilder21);
        org.junit.Assert.assertNotNull(copyrightBuilder23);
        org.junit.Assert.assertEquals("'" + str24 + "' != '" + "Copyright Builder: s:OASIS e:null o:null" + "'", str24, "Copyright Builder: s:OASIS e:null o:null");
        org.junit.Assert.assertNotNull(copyrightBuilder26);
        org.junit.Assert.assertNotNull(copyrightBuilder27);
        org.junit.Assert.assertNotNull(copyrightBuilder28);
        org.junit.Assert.assertEquals("'" + str29 + "' != '" + "Copyright Builder: s:null e:null o:null" + "'", str29, "Copyright Builder: s:null e:null o:null");
        org.junit.Assert.assertNotNull(copyrightBuilder31);
        org.junit.Assert.assertTrue("'" + boolean32 + "' != '" + false + "'", boolean32 == false);
        org.junit.Assert.assertNotNull(copyrightBuilder33);
        org.junit.Assert.assertEquals("'" + str34 + "' != '" + "Copyright Builder: s:null e:null o:null" + "'", str34, "Copyright Builder: s:null e:null o:null");
        org.junit.Assert.assertNotNull(copyrightBuilder36);
        org.junit.Assert.assertTrue("'" + boolean37 + "' != '" + false + "'", boolean37 == false);
        org.junit.Assert.assertEquals("'" + str38 + "' != '" + "Copyright Builder: s:null e:.cvsignore o:null" + "'", str38, "Copyright Builder: s:null e:.cvsignore o:null");
        org.junit.Assert.assertNotNull(copyrightBuilder39);
        org.junit.Assert.assertNotNull(copyrightBuilder41);
        org.junit.Assert.assertNotNull(anyBuilder42);
        org.junit.Assert.assertNotNull(matcherRefBuilder43);
        org.junit.Assert.assertTrue("'" + boolean44 + "' != '" + false + "'", boolean44 == false);
        org.junit.Assert.assertNotNull(matcherRefBuilder46);
        org.junit.Assert.assertNotNull(copyrightBuilder47);
        org.junit.Assert.assertNotNull(matcherRefBuilder48);
        org.junit.Assert.assertTrue("'" + boolean49 + "' != '" + false + "'", boolean49 == false);
        org.junit.Assert.assertEquals("'" + str50 + "' != '" + "MathcerRefBuilder: null" + "'", str50, "MathcerRefBuilder: null");
        org.junit.Assert.assertNotNull(matcherRefBuilder52);
        org.junit.Assert.assertNotNull(builderArray53);
        org.junit.Assert.assertTrue("'" + boolean55 + "' != '" + true + "'", boolean55 == true);
        org.junit.Assert.assertNotNull(abstractBuilder56);
        org.junit.Assert.assertNotNull(builderArray58);
        org.junit.Assert.assertTrue("'" + boolean60 + "' != '" + true + "'", boolean60 == true);
        org.junit.Assert.assertNotNull(abstractBuilder61);
        org.junit.Assert.assertNotNull(copyrightBuilder65);
        org.junit.Assert.assertEquals("'" + str66 + "' != '" + "Copyright Builder: s:null e:null o:null" + "'", str66, "Copyright Builder: s:null e:null o:null");
        org.junit.Assert.assertNotNull(copyrightBuilder68);
        org.junit.Assert.assertTrue("'" + boolean69 + "' != '" + false + "'", boolean69 == false);
        org.junit.Assert.assertNotNull(copyrightBuilder71);
        org.junit.Assert.assertTrue("'" + level74 + "' != '" + org.apache.rat.utils.Log.Level.ERROR + "'", level74.equals(org.apache.rat.utils.Log.Level.ERROR));
    }

    @Test
    public void test13842() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest27.test13842");
        java.lang.String[] strArray5 = new java.lang.String[] { "http://org/apache/rat/meta-data#LicenseFamilyCategory", "Datum [ name ='http://org/apache/rat/meta-data#LicenseFamilyCategory',value ='GPL1  ']", "MANIFEST.MF", "AllBuilder:", "The MIT License" };
        org.apache.rat.utils.ReportingSet<java.lang.String> strSet6 = new org.apache.rat.utils.ReportingSet<java.lang.String>();
        boolean boolean7 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strSet6, strArray5);
        boolean boolean9 = strSet6.addIfNotPresent("http://org/apache/rat/meta-data#LicenseFamilyName");
        boolean boolean11 = strSet6.addIfNotPresent("ef7a8b13-64c3-4510-bb0c-dbf208e1e73f");
        org.apache.rat.analysis.matchers.FullTextMatcher fullTextMatcher14 = new org.apache.rat.analysis.matchers.FullTextMatcher("notice", "3c840dc2-bef0-42b5-b26c-35a568d53a24");
        org.apache.rat.analysis.IHeaderMatcher.State state16 = fullTextMatcher14.matches("The MIT License");
        boolean boolean17 = strSet6.equals((java.lang.Object) state16);
        java.util.stream.Stream<java.lang.String> strStream18 = strSet6.parallelStream();
        java.util.function.Function<java.lang.String, java.lang.String> strFunction19 = null;
        org.apache.rat.utils.ReportingSet<java.lang.String> strSet20 = strSet6.setMsgFormat(strFunction19);
        org.junit.Assert.assertNotNull(strArray5);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + true + "'", boolean7 == true);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + true + "'", boolean9 == true);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + true + "'", boolean11 == true);
        org.junit.Assert.assertTrue("'" + state16 + "' != '" + org.apache.rat.analysis.IHeaderMatcher.State.i + "'", state16.equals(org.apache.rat.analysis.IHeaderMatcher.State.i));
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + false + "'", boolean17 == false);
        org.junit.Assert.assertNotNull(strStream18);
        org.junit.Assert.assertNotNull(strSet20);
    }

    @Test
    public void test13843() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest27.test13843");
        org.apache.rat.report.claim.ClaimStatistic claimStatistic0 = new org.apache.rat.report.claim.ClaimStatistic();
        claimStatistic0.setNumApproved((int) (short) 10);
        claimStatistic0.setNumUnknown((int) '#');
        int int5 = claimStatistic0.getNumUnApproved();
        int int6 = claimStatistic0.getNumUnknown();
        claimStatistic0.setNumGenerated(14);
        claimStatistic0.setNumUnApproved((int) '#');
        java.util.Map<java.lang.String, java.lang.Integer> strMap11 = claimStatistic0.getLicenseFileNameMap();
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 0 + "'", int5 == 0);
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 35 + "'", int6 == 35);
        org.junit.Assert.assertNull(strMap11);
    }

    @Test
    public void test13844() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest27.test13844");
        org.apache.rat.utils.Log log0 = null;
        org.apache.rat.ReportConfiguration reportConfiguration1 = new org.apache.rat.ReportConfiguration(log0);
        java.io.FilenameFilter filenameFilter2 = reportConfiguration1.getInputFileFilter();
        org.apache.rat.license.LicenseSetFactory.LicenseFilter licenseFilter3 = org.apache.rat.license.LicenseSetFactory.LicenseFilter.all;
        java.util.SortedSet<org.apache.rat.license.ILicense> iLicenseSet4 = reportConfiguration1.getLicenses(licenseFilter3);
        java.io.FilenameFilter filenameFilter5 = reportConfiguration1.getInputFileFilter();
        org.apache.rat.utils.Log log6 = null;
        org.apache.rat.ReportConfiguration reportConfiguration7 = new org.apache.rat.ReportConfiguration(log6);
        org.apache.rat.report.claim.ClaimStatistic claimStatistic8 = org.apache.rat.Reporter.report(reportConfiguration7);
        org.apache.rat.report.IReportable iReportable9 = null;
        reportConfiguration7.setReportable(iReportable9);
        org.apache.rat.utils.Log log11 = null;
        org.apache.rat.ReportConfiguration reportConfiguration12 = new org.apache.rat.ReportConfiguration(log11);
        java.io.FilenameFilter filenameFilter13 = reportConfiguration12.getInputFileFilter();
        org.apache.rat.license.LicenseSetFactory.LicenseFilter licenseFilter14 = org.apache.rat.license.LicenseSetFactory.LicenseFilter.all;
        java.util.SortedSet<org.apache.rat.license.ILicense> iLicenseSet15 = reportConfiguration12.getLicenses(licenseFilter14);
        org.apache.rat.config.AddLicenseHeaders addLicenseHeaders16 = org.apache.rat.config.AddLicenseHeaders.FALSE;
        reportConfiguration12.setAddLicenseHeaders(addLicenseHeaders16);
        org.apache.rat.utils.Log log18 = null;
        org.apache.rat.ReportConfiguration reportConfiguration19 = new org.apache.rat.ReportConfiguration(log18);
        org.apache.rat.report.claim.ClaimStatistic claimStatistic20 = org.apache.rat.Reporter.report(reportConfiguration19);
        org.apache.rat.license.LicenseSetFactory.LicenseFilter licenseFilter21 = org.apache.rat.license.LicenseSetFactory.LicenseFilter.all;
        org.apache.rat.Reporter.listLicenses(reportConfiguration19, licenseFilter21);
        org.apache.rat.Reporter.listLicenses(reportConfiguration12, licenseFilter21);
        org.apache.rat.utils.Log log24 = null;
        org.apache.rat.ReportConfiguration reportConfiguration25 = new org.apache.rat.ReportConfiguration(log24);
        java.io.FilenameFilter filenameFilter26 = reportConfiguration25.getInputFileFilter();
        org.apache.rat.license.LicenseSetFactory.LicenseFilter licenseFilter27 = org.apache.rat.license.LicenseSetFactory.LicenseFilter.all;
        java.util.SortedSet<org.apache.rat.license.ILicense> iLicenseSet28 = reportConfiguration25.getLicenses(licenseFilter27);
        org.apache.rat.config.AddLicenseHeaders addLicenseHeaders29 = org.apache.rat.config.AddLicenseHeaders.FALSE;
        reportConfiguration25.setAddLicenseHeaders(addLicenseHeaders29);
        org.apache.rat.utils.Log log31 = null;
        org.apache.rat.ReportConfiguration reportConfiguration32 = new org.apache.rat.ReportConfiguration(log31);
        org.apache.rat.report.claim.ClaimStatistic claimStatistic33 = org.apache.rat.Reporter.report(reportConfiguration32);
        org.apache.rat.license.LicenseSetFactory.LicenseFilter licenseFilter34 = org.apache.rat.license.LicenseSetFactory.LicenseFilter.all;
        org.apache.rat.Reporter.listLicenses(reportConfiguration32, licenseFilter34);
        org.apache.rat.Reporter.listLicenses(reportConfiguration25, licenseFilter34);
        org.apache.rat.Reporter.listLicenses(reportConfiguration12, licenseFilter34);
        org.apache.rat.utils.Log log38 = null;
        org.apache.rat.ReportConfiguration reportConfiguration39 = new org.apache.rat.ReportConfiguration(log38);
        org.apache.commons.io.function.IOSupplier<java.io.OutputStream> outputStreamIOSupplier40 = reportConfiguration39.getOutput();
        reportConfiguration12.setOut(outputStreamIOSupplier40);
        org.apache.rat.utils.Log log42 = null;
        org.apache.rat.ReportConfiguration reportConfiguration43 = new org.apache.rat.ReportConfiguration(log42);
        org.apache.rat.report.claim.ClaimStatistic claimStatistic44 = org.apache.rat.Reporter.report(reportConfiguration43);
        org.apache.rat.utils.Log log45 = null;
        org.apache.rat.ReportConfiguration reportConfiguration46 = new org.apache.rat.ReportConfiguration(log45);
        org.apache.rat.report.claim.ClaimStatistic claimStatistic47 = org.apache.rat.Reporter.report(reportConfiguration46);
        org.apache.rat.utils.ReportingSet.Options options48 = org.apache.rat.utils.ReportingSet.Options.OVERWRITE;
        reportConfiguration46.licenseDuplicateOption(options48);
        reportConfiguration43.familyDuplicateOption(options48);
        reportConfiguration12.licenseDuplicateOption(options48);
        reportConfiguration7.familyDuplicateOption(options48);
        org.apache.rat.config.AddLicenseHeaders addLicenseHeaders53 = org.apache.rat.config.AddLicenseHeaders.FORCED;
        reportConfiguration7.setAddLicenseHeaders(addLicenseHeaders53);
        boolean boolean55 = reportConfiguration7.isAddingLicensesForced();
        org.apache.commons.io.filefilter.IOFileFilter iOFileFilter56 = reportConfiguration7.getDirectoryFilter();
        java.nio.file.Path path57 = null;
        java.nio.file.attribute.BasicFileAttributes basicFileAttributes58 = null;
        java.nio.file.FileVisitResult fileVisitResult59 = iOFileFilter56.accept(path57, basicFileAttributes58);
        reportConfiguration1.setDirectoryFilter(iOFileFilter56);
        org.apache.commons.io.filefilter.IOFileFilter iOFileFilter61 = reportConfiguration1.getDirectoryFilter();
        org.apache.commons.io.filefilter.IOFileFilter iOFileFilter62 = reportConfiguration1.getDirectoryFilter();
        boolean boolean63 = reportConfiguration1.isAddingLicensesForced();
        org.junit.Assert.assertNull(filenameFilter2);
        org.junit.Assert.assertTrue("'" + licenseFilter3 + "' != '" + org.apache.rat.license.LicenseSetFactory.LicenseFilter.all + "'", licenseFilter3.equals(org.apache.rat.license.LicenseSetFactory.LicenseFilter.all));
        org.junit.Assert.assertNotNull(iLicenseSet4);
        org.junit.Assert.assertNull(filenameFilter5);
        org.junit.Assert.assertNull(claimStatistic8);
        org.junit.Assert.assertNull(filenameFilter13);
        org.junit.Assert.assertTrue("'" + licenseFilter14 + "' != '" + org.apache.rat.license.LicenseSetFactory.LicenseFilter.all + "'", licenseFilter14.equals(org.apache.rat.license.LicenseSetFactory.LicenseFilter.all));
        org.junit.Assert.assertNotNull(iLicenseSet15);
        org.junit.Assert.assertTrue("'" + addLicenseHeaders16 + "' != '" + org.apache.rat.config.AddLicenseHeaders.FALSE + "'", addLicenseHeaders16.equals(org.apache.rat.config.AddLicenseHeaders.FALSE));
        org.junit.Assert.assertNull(claimStatistic20);
        org.junit.Assert.assertTrue("'" + licenseFilter21 + "' != '" + org.apache.rat.license.LicenseSetFactory.LicenseFilter.all + "'", licenseFilter21.equals(org.apache.rat.license.LicenseSetFactory.LicenseFilter.all));
        org.junit.Assert.assertNull(filenameFilter26);
        org.junit.Assert.assertTrue("'" + licenseFilter27 + "' != '" + org.apache.rat.license.LicenseSetFactory.LicenseFilter.all + "'", licenseFilter27.equals(org.apache.rat.license.LicenseSetFactory.LicenseFilter.all));
        org.junit.Assert.assertNotNull(iLicenseSet28);
        org.junit.Assert.assertTrue("'" + addLicenseHeaders29 + "' != '" + org.apache.rat.config.AddLicenseHeaders.FALSE + "'", addLicenseHeaders29.equals(org.apache.rat.config.AddLicenseHeaders.FALSE));
        org.junit.Assert.assertNull(claimStatistic33);
        org.junit.Assert.assertTrue("'" + licenseFilter34 + "' != '" + org.apache.rat.license.LicenseSetFactory.LicenseFilter.all + "'", licenseFilter34.equals(org.apache.rat.license.LicenseSetFactory.LicenseFilter.all));
        org.junit.Assert.assertNotNull(outputStreamIOSupplier40);
        org.junit.Assert.assertNull(claimStatistic44);
        org.junit.Assert.assertNull(claimStatistic47);
        org.junit.Assert.assertTrue("'" + options48 + "' != '" + org.apache.rat.utils.ReportingSet.Options.OVERWRITE + "'", options48.equals(org.apache.rat.utils.ReportingSet.Options.OVERWRITE));
        org.junit.Assert.assertTrue("'" + addLicenseHeaders53 + "' != '" + org.apache.rat.config.AddLicenseHeaders.FORCED + "'", addLicenseHeaders53.equals(org.apache.rat.config.AddLicenseHeaders.FORCED));
        org.junit.Assert.assertTrue("'" + boolean55 + "' != '" + true + "'", boolean55 == true);
        org.junit.Assert.assertNotNull(iOFileFilter56);
        org.junit.Assert.assertTrue("'" + fileVisitResult59 + "' != '" + java.nio.file.FileVisitResult.TERMINATE + "'", fileVisitResult59.equals(java.nio.file.FileVisitResult.TERMINATE));
        org.junit.Assert.assertNotNull(iOFileFilter61);
        org.junit.Assert.assertNotNull(iOFileFilter62);
        org.junit.Assert.assertTrue("'" + boolean63 + "' != '" + false + "'", boolean63 == false);
    }

    @Test
    public void test13845() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest27.test13845");
        org.apache.rat.configuration.builders.TextBuilder textBuilder0 = org.apache.rat.analysis.IHeaderMatcher.Builder.text();
        org.apache.rat.configuration.builders.TextBuilder textBuilder2 = textBuilder0.setText("");
        java.lang.String str3 = textBuilder2.toString();
        org.apache.rat.configuration.builders.TextBuilder textBuilder5 = textBuilder2.setText("d4148d3a-edbc-4672-b347-0fa619553f91");
        org.apache.rat.configuration.builders.TextCaptureBuilder textCaptureBuilder7 = textBuilder2.setText("ba9961f9-a0de-4a54-bd1f-a2e9df26a188");
        org.apache.rat.configuration.builders.TextCaptureBuilder textCaptureBuilder9 = textCaptureBuilder7.setText("B2EAFDEF-0477-406A-8B6D-8D332A86679E");
        org.junit.Assert.assertNotNull(textBuilder0);
        org.junit.Assert.assertNotNull(textBuilder2);
        org.junit.Assert.assertEquals("'" + str3 + "' != '" + "TextBuilder: " + "'", str3, "TextBuilder: ");
        org.junit.Assert.assertNotNull(textBuilder5);
        org.junit.Assert.assertNotNull(textCaptureBuilder7);
        org.junit.Assert.assertNotNull(textCaptureBuilder9);
    }

    @Test
    public void test13846() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest27.test13846");
        org.apache.rat.configuration.builders.TextBuilder textBuilder0 = new org.apache.rat.configuration.builders.TextBuilder();
        org.apache.rat.configuration.builders.TextBuilder textBuilder2 = textBuilder0.setText("true");
        org.apache.rat.configuration.builders.TextBuilder textBuilder4 = textBuilder2.setText("http://org/apache/rat/meta-data#HeaderSample");
        org.apache.rat.analysis.IHeaderMatcher iHeaderMatcher5 = textBuilder4.build();
        org.apache.rat.configuration.builders.TextCaptureBuilder textCaptureBuilder7 = textBuilder4.setText("W3C  ");
        org.apache.rat.configuration.builders.TextBuilder textBuilder9 = textBuilder4.setText("4fcae176-e574-46ed-b9e4-dea2e2f3b458");
        boolean boolean10 = textBuilder4.hasId();
        org.apache.rat.configuration.builders.TextBuilder textBuilder12 = textBuilder4.setText("fe6be119-8817-4567-8d33-352365bfa7c8");
        org.apache.rat.analysis.IHeaderMatcher iHeaderMatcher13 = textBuilder4.build();
        org.apache.rat.configuration.builders.TextBuilder textBuilder15 = textBuilder4.setText("");
        org.apache.rat.configuration.builders.TextBuilder textBuilder17 = textBuilder4.setText("RegexBuilder: a8ad4");
        org.junit.Assert.assertNotNull(textBuilder2);
        org.junit.Assert.assertNotNull(textBuilder4);
        org.junit.Assert.assertNotNull(iHeaderMatcher5);
        org.junit.Assert.assertNotNull(textCaptureBuilder7);
        org.junit.Assert.assertNotNull(textBuilder9);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertNotNull(textBuilder12);
        org.junit.Assert.assertNotNull(iHeaderMatcher13);
        org.junit.Assert.assertNotNull(textBuilder15);
        org.junit.Assert.assertNotNull(textBuilder17);
    }

    @Test
    public void test13847() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest27.test13847");
        org.apache.rat.utils.Log log0 = null;
        org.apache.rat.ReportConfiguration reportConfiguration1 = new org.apache.rat.ReportConfiguration(log0);
        java.io.FilenameFilter filenameFilter2 = reportConfiguration1.getInputFileFilter();
        org.apache.rat.license.LicenseSetFactory.LicenseFilter licenseFilter3 = org.apache.rat.license.LicenseSetFactory.LicenseFilter.all;
        java.util.SortedSet<org.apache.rat.license.ILicense> iLicenseSet4 = reportConfiguration1.getLicenses(licenseFilter3);
        org.apache.rat.config.AddLicenseHeaders addLicenseHeaders5 = org.apache.rat.config.AddLicenseHeaders.FALSE;
        reportConfiguration1.setAddLicenseHeaders(addLicenseHeaders5);
        org.apache.rat.utils.Log log7 = null;
        org.apache.rat.ReportConfiguration reportConfiguration8 = new org.apache.rat.ReportConfiguration(log7);
        org.apache.rat.report.claim.ClaimStatistic claimStatistic9 = org.apache.rat.Reporter.report(reportConfiguration8);
        org.apache.rat.license.LicenseSetFactory.LicenseFilter licenseFilter10 = org.apache.rat.license.LicenseSetFactory.LicenseFilter.all;
        org.apache.rat.Reporter.listLicenses(reportConfiguration8, licenseFilter10);
        org.apache.rat.Reporter.listLicenses(reportConfiguration1, licenseFilter10);
        org.apache.rat.utils.Log log13 = null;
        org.apache.rat.ReportConfiguration reportConfiguration14 = new org.apache.rat.ReportConfiguration(log13);
        java.io.FilenameFilter filenameFilter15 = reportConfiguration14.getInputFileFilter();
        org.apache.rat.license.LicenseSetFactory.LicenseFilter licenseFilter16 = org.apache.rat.license.LicenseSetFactory.LicenseFilter.all;
        java.util.SortedSet<org.apache.rat.license.ILicense> iLicenseSet17 = reportConfiguration14.getLicenses(licenseFilter16);
        org.apache.rat.config.AddLicenseHeaders addLicenseHeaders18 = org.apache.rat.config.AddLicenseHeaders.FALSE;
        reportConfiguration14.setAddLicenseHeaders(addLicenseHeaders18);
        org.apache.rat.utils.Log log20 = null;
        org.apache.rat.ReportConfiguration reportConfiguration21 = new org.apache.rat.ReportConfiguration(log20);
        org.apache.rat.report.claim.ClaimStatistic claimStatistic22 = org.apache.rat.Reporter.report(reportConfiguration21);
        org.apache.rat.license.LicenseSetFactory.LicenseFilter licenseFilter23 = org.apache.rat.license.LicenseSetFactory.LicenseFilter.all;
        org.apache.rat.Reporter.listLicenses(reportConfiguration21, licenseFilter23);
        org.apache.rat.Reporter.listLicenses(reportConfiguration14, licenseFilter23);
        org.apache.rat.Reporter.listLicenses(reportConfiguration1, licenseFilter23);
        java.io.FilenameFilter filenameFilter27 = reportConfiguration1.getInputFileFilter();
        org.apache.rat.utils.Log log28 = null;
        org.apache.rat.ReportConfiguration reportConfiguration29 = new org.apache.rat.ReportConfiguration(log28);
        java.io.FilenameFilter filenameFilter30 = reportConfiguration29.getInputFileFilter();
        org.apache.rat.license.LicenseSetFactory.LicenseFilter licenseFilter31 = org.apache.rat.license.LicenseSetFactory.LicenseFilter.all;
        java.util.SortedSet<org.apache.rat.license.ILicense> iLicenseSet32 = reportConfiguration29.getLicenses(licenseFilter31);
        org.apache.rat.config.AddLicenseHeaders addLicenseHeaders33 = org.apache.rat.config.AddLicenseHeaders.FALSE;
        reportConfiguration29.setAddLicenseHeaders(addLicenseHeaders33);
        org.apache.rat.utils.Log log35 = null;
        org.apache.rat.ReportConfiguration reportConfiguration36 = new org.apache.rat.ReportConfiguration(log35);
        org.apache.rat.report.claim.ClaimStatistic claimStatistic37 = org.apache.rat.Reporter.report(reportConfiguration36);
        org.apache.rat.license.LicenseSetFactory.LicenseFilter licenseFilter38 = org.apache.rat.license.LicenseSetFactory.LicenseFilter.all;
        org.apache.rat.Reporter.listLicenses(reportConfiguration36, licenseFilter38);
        org.apache.rat.Reporter.listLicenses(reportConfiguration29, licenseFilter38);
        org.apache.rat.utils.Log log41 = null;
        org.apache.rat.ReportConfiguration reportConfiguration42 = new org.apache.rat.ReportConfiguration(log41);
        java.io.FilenameFilter filenameFilter43 = reportConfiguration42.getInputFileFilter();
        org.apache.rat.license.LicenseSetFactory.LicenseFilter licenseFilter44 = org.apache.rat.license.LicenseSetFactory.LicenseFilter.all;
        java.util.SortedSet<org.apache.rat.license.ILicense> iLicenseSet45 = reportConfiguration42.getLicenses(licenseFilter44);
        org.apache.rat.config.AddLicenseHeaders addLicenseHeaders46 = org.apache.rat.config.AddLicenseHeaders.FALSE;
        reportConfiguration42.setAddLicenseHeaders(addLicenseHeaders46);
        org.apache.rat.utils.Log log48 = null;
        org.apache.rat.ReportConfiguration reportConfiguration49 = new org.apache.rat.ReportConfiguration(log48);
        org.apache.rat.report.claim.ClaimStatistic claimStatistic50 = org.apache.rat.Reporter.report(reportConfiguration49);
        org.apache.rat.license.LicenseSetFactory.LicenseFilter licenseFilter51 = org.apache.rat.license.LicenseSetFactory.LicenseFilter.all;
        org.apache.rat.Reporter.listLicenses(reportConfiguration49, licenseFilter51);
        org.apache.rat.Reporter.listLicenses(reportConfiguration42, licenseFilter51);
        org.apache.rat.Reporter.listLicenses(reportConfiguration29, licenseFilter51);
        java.util.SortedSet<org.apache.rat.license.ILicense> iLicenseSet55 = reportConfiguration1.getLicenses(licenseFilter51);
        org.apache.rat.license.ILicense iLicense56 = null;
        reportConfiguration1.addLicense(iLicense56);
        reportConfiguration1.setStyleReport(false);
        reportConfiguration1.addApprovedLicenseCategory("d4148d3a-edbc-4672-b347-0fa619553f91");
        org.apache.rat.license.ILicenseFamilyBuilder iLicenseFamilyBuilder62 = new org.apache.rat.license.ILicenseFamilyBuilder();
        java.lang.String str63 = iLicenseFamilyBuilder62.getCategory();
        org.apache.rat.license.ILicenseFamily.Builder builder65 = iLicenseFamilyBuilder62.setLicenseFamilyCategory("AL   ");
        org.apache.rat.license.ILicenseFamily.Builder builder67 = iLicenseFamilyBuilder62.setLicenseFamilyCategory("MIT  ");
        org.apache.rat.license.ILicenseFamily.Builder builder69 = iLicenseFamilyBuilder62.setLicenseFamilyName("4a00cf7d-fe76-423e-917e-b03bbae6b8a5");
        java.lang.String str70 = iLicenseFamilyBuilder62.getCategory();
        org.apache.rat.license.ILicenseFamily.Builder builder72 = iLicenseFamilyBuilder62.setLicenseFamilyName("8ecb8cce-06e4-400f-84d9-ad1cf6289fda");
        java.lang.String str73 = iLicenseFamilyBuilder62.getCategory();
        org.apache.rat.license.ILicenseFamily iLicenseFamily74 = iLicenseFamilyBuilder62.build();
        reportConfiguration1.addApprovedLicenseCategory(iLicenseFamily74);
        java.lang.String str76 = iLicenseFamily74.getFamilyCategory();
        org.junit.Assert.assertNull(filenameFilter2);
        org.junit.Assert.assertTrue("'" + licenseFilter3 + "' != '" + org.apache.rat.license.LicenseSetFactory.LicenseFilter.all + "'", licenseFilter3.equals(org.apache.rat.license.LicenseSetFactory.LicenseFilter.all));
        org.junit.Assert.assertNotNull(iLicenseSet4);
        org.junit.Assert.assertTrue("'" + addLicenseHeaders5 + "' != '" + org.apache.rat.config.AddLicenseHeaders.FALSE + "'", addLicenseHeaders5.equals(org.apache.rat.config.AddLicenseHeaders.FALSE));
        org.junit.Assert.assertNull(claimStatistic9);
        org.junit.Assert.assertTrue("'" + licenseFilter10 + "' != '" + org.apache.rat.license.LicenseSetFactory.LicenseFilter.all + "'", licenseFilter10.equals(org.apache.rat.license.LicenseSetFactory.LicenseFilter.all));
        org.junit.Assert.assertNull(filenameFilter15);
        org.junit.Assert.assertTrue("'" + licenseFilter16 + "' != '" + org.apache.rat.license.LicenseSetFactory.LicenseFilter.all + "'", licenseFilter16.equals(org.apache.rat.license.LicenseSetFactory.LicenseFilter.all));
        org.junit.Assert.assertNotNull(iLicenseSet17);
        org.junit.Assert.assertTrue("'" + addLicenseHeaders18 + "' != '" + org.apache.rat.config.AddLicenseHeaders.FALSE + "'", addLicenseHeaders18.equals(org.apache.rat.config.AddLicenseHeaders.FALSE));
        org.junit.Assert.assertNull(claimStatistic22);
        org.junit.Assert.assertTrue("'" + licenseFilter23 + "' != '" + org.apache.rat.license.LicenseSetFactory.LicenseFilter.all + "'", licenseFilter23.equals(org.apache.rat.license.LicenseSetFactory.LicenseFilter.all));
        org.junit.Assert.assertNull(filenameFilter27);
        org.junit.Assert.assertNull(filenameFilter30);
        org.junit.Assert.assertTrue("'" + licenseFilter31 + "' != '" + org.apache.rat.license.LicenseSetFactory.LicenseFilter.all + "'", licenseFilter31.equals(org.apache.rat.license.LicenseSetFactory.LicenseFilter.all));
        org.junit.Assert.assertNotNull(iLicenseSet32);
        org.junit.Assert.assertTrue("'" + addLicenseHeaders33 + "' != '" + org.apache.rat.config.AddLicenseHeaders.FALSE + "'", addLicenseHeaders33.equals(org.apache.rat.config.AddLicenseHeaders.FALSE));
        org.junit.Assert.assertNull(claimStatistic37);
        org.junit.Assert.assertTrue("'" + licenseFilter38 + "' != '" + org.apache.rat.license.LicenseSetFactory.LicenseFilter.all + "'", licenseFilter38.equals(org.apache.rat.license.LicenseSetFactory.LicenseFilter.all));
        org.junit.Assert.assertNull(filenameFilter43);
        org.junit.Assert.assertTrue("'" + licenseFilter44 + "' != '" + org.apache.rat.license.LicenseSetFactory.LicenseFilter.all + "'", licenseFilter44.equals(org.apache.rat.license.LicenseSetFactory.LicenseFilter.all));
        org.junit.Assert.assertNotNull(iLicenseSet45);
        org.junit.Assert.assertTrue("'" + addLicenseHeaders46 + "' != '" + org.apache.rat.config.AddLicenseHeaders.FALSE + "'", addLicenseHeaders46.equals(org.apache.rat.config.AddLicenseHeaders.FALSE));
        org.junit.Assert.assertNull(claimStatistic50);
        org.junit.Assert.assertTrue("'" + licenseFilter51 + "' != '" + org.apache.rat.license.LicenseSetFactory.LicenseFilter.all + "'", licenseFilter51.equals(org.apache.rat.license.LicenseSetFactory.LicenseFilter.all));
        org.junit.Assert.assertNotNull(iLicenseSet55);
        org.junit.Assert.assertNull(str63);
        org.junit.Assert.assertNotNull(builder65);
        org.junit.Assert.assertNotNull(builder67);
        org.junit.Assert.assertNotNull(builder69);
        org.junit.Assert.assertEquals("'" + str70 + "' != '" + "MIT  " + "'", str70, "MIT  ");
        org.junit.Assert.assertNotNull(builder72);
        org.junit.Assert.assertEquals("'" + str73 + "' != '" + "MIT  " + "'", str73, "MIT  ");
        org.junit.Assert.assertNotNull(iLicenseFamily74);
        org.junit.Assert.assertEquals("'" + str76 + "' != '" + "MIT  " + "'", str76, "MIT  ");
    }

    @Test
    public void test13848() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest27.test13848");
        org.apache.rat.configuration.builders.MatcherRefBuilder matcherRefBuilder0 = org.apache.rat.analysis.IHeaderMatcher.Builder.matcherRef();
        boolean boolean1 = matcherRefBuilder0.hasId();
        java.lang.String str2 = matcherRefBuilder0.toString();
        java.util.Map<java.lang.String, org.apache.rat.analysis.IHeaderMatcher> strMap3 = null;
        org.apache.rat.configuration.builders.MatcherRefBuilder matcherRefBuilder4 = matcherRefBuilder0.setMatchers(strMap3);
        java.util.Map<java.lang.String, org.apache.rat.analysis.IHeaderMatcher> strMap5 = null;
        org.apache.rat.configuration.builders.MatcherRefBuilder matcherRefBuilder6 = matcherRefBuilder0.setMatchers(strMap5);
        java.util.Map<java.lang.String, org.apache.rat.analysis.IHeaderMatcher> strMap7 = null;
        org.apache.rat.configuration.builders.MatcherRefBuilder matcherRefBuilder8 = matcherRefBuilder0.setMatchers(strMap7);
        java.lang.String str9 = matcherRefBuilder8.toString();
        java.util.Map<java.lang.String, org.apache.rat.analysis.IHeaderMatcher> strMap10 = null;
        org.apache.rat.configuration.builders.MatcherRefBuilder matcherRefBuilder11 = matcherRefBuilder8.setMatchers(strMap10);
        boolean boolean12 = matcherRefBuilder8.hasId();
        org.junit.Assert.assertNotNull(matcherRefBuilder0);
        org.junit.Assert.assertTrue("'" + boolean1 + "' != '" + false + "'", boolean1 == false);
        org.junit.Assert.assertEquals("'" + str2 + "' != '" + "MathcerRefBuilder: null" + "'", str2, "MathcerRefBuilder: null");
        org.junit.Assert.assertNotNull(matcherRefBuilder4);
        org.junit.Assert.assertNotNull(matcherRefBuilder6);
        org.junit.Assert.assertNotNull(matcherRefBuilder8);
        org.junit.Assert.assertEquals("'" + str9 + "' != '" + "MathcerRefBuilder: null" + "'", str9, "MathcerRefBuilder: null");
        org.junit.Assert.assertNotNull(matcherRefBuilder11);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
    }

    @Test
    public void test13849() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest27.test13849");
        org.apache.rat.config.SourceCodeManagementSystems sourceCodeManagementSystems0 = org.apache.rat.config.SourceCodeManagementSystems.SUBVERSION;
        boolean boolean1 = sourceCodeManagementSystems0.hasIgnoreFile();
        java.util.List<java.lang.String> strList2 = sourceCodeManagementSystems0.getExclusions();
        java.util.List<java.lang.String> strList3 = sourceCodeManagementSystems0.getExclusions();
        java.util.List<java.lang.String> strList4 = sourceCodeManagementSystems0.getExclusions();
        java.util.List<java.lang.String> strList5 = sourceCodeManagementSystems0.getExclusions();
        boolean boolean6 = sourceCodeManagementSystems0.hasIgnoreFile();
        java.util.List<java.lang.String> strList7 = sourceCodeManagementSystems0.getExclusions();
        boolean boolean8 = sourceCodeManagementSystems0.hasIgnoreFile();
        org.junit.Assert.assertTrue("'" + sourceCodeManagementSystems0 + "' != '" + org.apache.rat.config.SourceCodeManagementSystems.SUBVERSION + "'", sourceCodeManagementSystems0.equals(org.apache.rat.config.SourceCodeManagementSystems.SUBVERSION));
        org.junit.Assert.assertTrue("'" + boolean1 + "' != '" + false + "'", boolean1 == false);
        org.junit.Assert.assertNotNull(strList2);
        org.junit.Assert.assertNotNull(strList3);
        org.junit.Assert.assertNotNull(strList4);
        org.junit.Assert.assertNotNull(strList5);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertNotNull(strList7);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
    }

    @Test
    public void test13850() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest27.test13850");
        org.apache.rat.Defaults.Builder builder0 = org.apache.rat.Defaults.builder();
        org.apache.rat.Defaults defaults1 = builder0.build();
        org.apache.rat.utils.Log log2 = null;
        org.apache.rat.ReportConfiguration reportConfiguration3 = new org.apache.rat.ReportConfiguration(log2);
        reportConfiguration3.addApprovedLicenseCategory(".cvsignore");
        org.apache.rat.utils.Log log6 = null;
        org.apache.rat.ReportConfiguration reportConfiguration7 = new org.apache.rat.ReportConfiguration(log6);
        java.io.FilenameFilter filenameFilter8 = reportConfiguration7.getInputFileFilter();
        org.apache.rat.license.LicenseSetFactory.LicenseFilter licenseFilter9 = org.apache.rat.license.LicenseSetFactory.LicenseFilter.all;
        java.util.SortedSet<org.apache.rat.license.ILicense> iLicenseSet10 = reportConfiguration7.getLicenses(licenseFilter9);
        reportConfiguration3.addLicensesIfNotPresent((java.util.Collection<org.apache.rat.license.ILicense>) iLicenseSet10);
        java.io.FilenameFilter filenameFilter12 = reportConfiguration3.getInputFileFilter();
        org.apache.rat.utils.Log log13 = null;
        org.apache.rat.ReportConfiguration reportConfiguration14 = new org.apache.rat.ReportConfiguration(log13);
        java.io.FilenameFilter filenameFilter15 = reportConfiguration14.getInputFileFilter();
        org.apache.rat.license.LicenseSetFactory.LicenseFilter licenseFilter16 = org.apache.rat.license.LicenseSetFactory.LicenseFilter.all;
        java.util.SortedSet<org.apache.rat.license.ILicense> iLicenseSet17 = reportConfiguration14.getLicenses(licenseFilter16);
        org.apache.rat.config.AddLicenseHeaders addLicenseHeaders18 = org.apache.rat.config.AddLicenseHeaders.FALSE;
        reportConfiguration14.setAddLicenseHeaders(addLicenseHeaders18);
        org.apache.rat.utils.Log log20 = null;
        org.apache.rat.ReportConfiguration reportConfiguration21 = new org.apache.rat.ReportConfiguration(log20);
        org.apache.rat.report.claim.ClaimStatistic claimStatistic22 = org.apache.rat.Reporter.report(reportConfiguration21);
        org.apache.rat.license.LicenseSetFactory.LicenseFilter licenseFilter23 = org.apache.rat.license.LicenseSetFactory.LicenseFilter.all;
        org.apache.rat.Reporter.listLicenses(reportConfiguration21, licenseFilter23);
        org.apache.rat.Reporter.listLicenses(reportConfiguration14, licenseFilter23);
        org.apache.rat.utils.Log log26 = null;
        org.apache.rat.ReportConfiguration reportConfiguration27 = new org.apache.rat.ReportConfiguration(log26);
        java.io.FilenameFilter filenameFilter28 = reportConfiguration27.getInputFileFilter();
        org.apache.rat.license.LicenseSetFactory.LicenseFilter licenseFilter29 = org.apache.rat.license.LicenseSetFactory.LicenseFilter.all;
        java.util.SortedSet<org.apache.rat.license.ILicense> iLicenseSet30 = reportConfiguration27.getLicenses(licenseFilter29);
        org.apache.rat.config.AddLicenseHeaders addLicenseHeaders31 = org.apache.rat.config.AddLicenseHeaders.FALSE;
        reportConfiguration27.setAddLicenseHeaders(addLicenseHeaders31);
        org.apache.rat.utils.Log log33 = null;
        org.apache.rat.ReportConfiguration reportConfiguration34 = new org.apache.rat.ReportConfiguration(log33);
        org.apache.rat.report.claim.ClaimStatistic claimStatistic35 = org.apache.rat.Reporter.report(reportConfiguration34);
        org.apache.rat.license.LicenseSetFactory.LicenseFilter licenseFilter36 = org.apache.rat.license.LicenseSetFactory.LicenseFilter.all;
        org.apache.rat.Reporter.listLicenses(reportConfiguration34, licenseFilter36);
        org.apache.rat.Reporter.listLicenses(reportConfiguration27, licenseFilter36);
        java.util.SortedSet<org.apache.rat.license.ILicenseFamily> iLicenseFamilySet39 = reportConfiguration14.getLicenseFamilies(licenseFilter36);
        org.apache.rat.Reporter.listLicenseFamilies(reportConfiguration3, licenseFilter36);
        java.util.SortedSet<java.lang.String> strSet41 = defaults1.getLicenseIds(licenseFilter36);
        org.apache.rat.license.ILicense[] iLicenseArray42 = new org.apache.rat.license.ILicense[] {};
        java.util.TreeSet<org.apache.rat.license.ILicense> iLicenseSet43 = new java.util.TreeSet<org.apache.rat.license.ILicense>();
        boolean boolean44 = java.util.Collections.addAll((java.util.Collection<org.apache.rat.license.ILicense>) iLicenseSet43, iLicenseArray42);
        java.lang.String[] strArray57 = new java.lang.String[] { "GPL2 ", "GPL1 ", "notice", "http://org/apache/rat/meta-data#LicenseFamilyName", "notice", "GPL2 ", "http://org/apache/rat/meta-data#LicenseFamilyName", "", "GPL2 ", "", "GPL1 ", "hi!" };
        java.util.ArrayList<java.lang.String> strList58 = new java.util.ArrayList<java.lang.String>();
        boolean boolean59 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strList58, strArray57);
        org.apache.rat.license.LicenseSetFactory licenseSetFactory60 = new org.apache.rat.license.LicenseSetFactory((java.util.SortedSet<org.apache.rat.license.ILicense>) iLicenseSet43, (java.util.Collection<java.lang.String>) strList58);
        org.apache.rat.utils.Log log61 = null;
        org.apache.rat.ReportConfiguration reportConfiguration62 = new org.apache.rat.ReportConfiguration(log61);
        java.io.FilenameFilter filenameFilter63 = reportConfiguration62.getInputFileFilter();
        org.apache.rat.license.LicenseSetFactory.LicenseFilter licenseFilter64 = org.apache.rat.license.LicenseSetFactory.LicenseFilter.all;
        java.util.SortedSet<org.apache.rat.license.ILicense> iLicenseSet65 = reportConfiguration62.getLicenses(licenseFilter64);
        org.apache.rat.config.AddLicenseHeaders addLicenseHeaders66 = org.apache.rat.config.AddLicenseHeaders.FALSE;
        reportConfiguration62.setAddLicenseHeaders(addLicenseHeaders66);
        org.apache.rat.utils.Log log68 = null;
        org.apache.rat.ReportConfiguration reportConfiguration69 = new org.apache.rat.ReportConfiguration(log68);
        org.apache.rat.report.claim.ClaimStatistic claimStatistic70 = org.apache.rat.Reporter.report(reportConfiguration69);
        org.apache.rat.license.LicenseSetFactory.LicenseFilter licenseFilter71 = org.apache.rat.license.LicenseSetFactory.LicenseFilter.all;
        org.apache.rat.Reporter.listLicenses(reportConfiguration69, licenseFilter71);
        org.apache.rat.Reporter.listLicenses(reportConfiguration62, licenseFilter71);
        org.apache.rat.utils.Log log74 = null;
        org.apache.rat.ReportConfiguration reportConfiguration75 = new org.apache.rat.ReportConfiguration(log74);
        java.io.FilenameFilter filenameFilter76 = reportConfiguration75.getInputFileFilter();
        org.apache.rat.license.LicenseSetFactory.LicenseFilter licenseFilter77 = org.apache.rat.license.LicenseSetFactory.LicenseFilter.all;
        java.util.SortedSet<org.apache.rat.license.ILicense> iLicenseSet78 = reportConfiguration75.getLicenses(licenseFilter77);
        org.apache.rat.config.AddLicenseHeaders addLicenseHeaders79 = org.apache.rat.config.AddLicenseHeaders.FALSE;
        reportConfiguration75.setAddLicenseHeaders(addLicenseHeaders79);
        org.apache.rat.utils.Log log81 = null;
        org.apache.rat.ReportConfiguration reportConfiguration82 = new org.apache.rat.ReportConfiguration(log81);
        org.apache.rat.report.claim.ClaimStatistic claimStatistic83 = org.apache.rat.Reporter.report(reportConfiguration82);
        org.apache.rat.license.LicenseSetFactory.LicenseFilter licenseFilter84 = org.apache.rat.license.LicenseSetFactory.LicenseFilter.all;
        org.apache.rat.Reporter.listLicenses(reportConfiguration82, licenseFilter84);
        org.apache.rat.Reporter.listLicenses(reportConfiguration75, licenseFilter84);
        org.apache.rat.Reporter.listLicenses(reportConfiguration62, licenseFilter84);
        java.util.SortedSet<org.apache.rat.license.ILicense> iLicenseSet88 = licenseSetFactory60.getLicenses(licenseFilter84);
        java.util.SortedSet<org.apache.rat.license.ILicenseFamily> iLicenseFamilySet89 = defaults1.getLicenseFamilies(licenseFilter84);
        org.apache.rat.utils.ReportingSet<java.lang.String> strSet90 = new org.apache.rat.utils.ReportingSet<java.lang.String>();
        boolean boolean92 = strSet90.addIfNotPresent("OASIS Open License");
        org.apache.rat.utils.ReportingSet<java.lang.String> strSet94 = strSet90.tailSet("ef7a8b13-64c3-4510-bb0c-dbf208e1e73f");
        int int95 = strSet90.size();
        java.lang.String str96 = strSet90.last();
        org.apache.rat.license.LicenseFamilySetFactory licenseFamilySetFactory97 = new org.apache.rat.license.LicenseFamilySetFactory(iLicenseFamilySet89, (java.util.Collection<java.lang.String>) strSet90);
        org.junit.Assert.assertNotNull(builder0);
        org.junit.Assert.assertNotNull(defaults1);
        org.junit.Assert.assertNull(filenameFilter8);
        org.junit.Assert.assertTrue("'" + licenseFilter9 + "' != '" + org.apache.rat.license.LicenseSetFactory.LicenseFilter.all + "'", licenseFilter9.equals(org.apache.rat.license.LicenseSetFactory.LicenseFilter.all));
        org.junit.Assert.assertNotNull(iLicenseSet10);
        org.junit.Assert.assertNull(filenameFilter12);
        org.junit.Assert.assertNull(filenameFilter15);
        org.junit.Assert.assertTrue("'" + licenseFilter16 + "' != '" + org.apache.rat.license.LicenseSetFactory.LicenseFilter.all + "'", licenseFilter16.equals(org.apache.rat.license.LicenseSetFactory.LicenseFilter.all));
        org.junit.Assert.assertNotNull(iLicenseSet17);
        org.junit.Assert.assertTrue("'" + addLicenseHeaders18 + "' != '" + org.apache.rat.config.AddLicenseHeaders.FALSE + "'", addLicenseHeaders18.equals(org.apache.rat.config.AddLicenseHeaders.FALSE));
        org.junit.Assert.assertNull(claimStatistic22);
        org.junit.Assert.assertTrue("'" + licenseFilter23 + "' != '" + org.apache.rat.license.LicenseSetFactory.LicenseFilter.all + "'", licenseFilter23.equals(org.apache.rat.license.LicenseSetFactory.LicenseFilter.all));
        org.junit.Assert.assertNull(filenameFilter28);
        org.junit.Assert.assertTrue("'" + licenseFilter29 + "' != '" + org.apache.rat.license.LicenseSetFactory.LicenseFilter.all + "'", licenseFilter29.equals(org.apache.rat.license.LicenseSetFactory.LicenseFilter.all));
        org.junit.Assert.assertNotNull(iLicenseSet30);
        org.junit.Assert.assertTrue("'" + addLicenseHeaders31 + "' != '" + org.apache.rat.config.AddLicenseHeaders.FALSE + "'", addLicenseHeaders31.equals(org.apache.rat.config.AddLicenseHeaders.FALSE));
        org.junit.Assert.assertNull(claimStatistic35);
        org.junit.Assert.assertTrue("'" + licenseFilter36 + "' != '" + org.apache.rat.license.LicenseSetFactory.LicenseFilter.all + "'", licenseFilter36.equals(org.apache.rat.license.LicenseSetFactory.LicenseFilter.all));
        org.junit.Assert.assertNotNull(iLicenseFamilySet39);
        org.junit.Assert.assertNotNull(strSet41);
        org.junit.Assert.assertNotNull(iLicenseArray42);
        org.junit.Assert.assertTrue("'" + boolean44 + "' != '" + false + "'", boolean44 == false);
        org.junit.Assert.assertNotNull(strArray57);
        org.junit.Assert.assertTrue("'" + boolean59 + "' != '" + true + "'", boolean59 == true);
        org.junit.Assert.assertNull(filenameFilter63);
        org.junit.Assert.assertTrue("'" + licenseFilter64 + "' != '" + org.apache.rat.license.LicenseSetFactory.LicenseFilter.all + "'", licenseFilter64.equals(org.apache.rat.license.LicenseSetFactory.LicenseFilter.all));
        org.junit.Assert.assertNotNull(iLicenseSet65);
        org.junit.Assert.assertTrue("'" + addLicenseHeaders66 + "' != '" + org.apache.rat.config.AddLicenseHeaders.FALSE + "'", addLicenseHeaders66.equals(org.apache.rat.config.AddLicenseHeaders.FALSE));
        org.junit.Assert.assertNull(claimStatistic70);
        org.junit.Assert.assertTrue("'" + licenseFilter71 + "' != '" + org.apache.rat.license.LicenseSetFactory.LicenseFilter.all + "'", licenseFilter71.equals(org.apache.rat.license.LicenseSetFactory.LicenseFilter.all));
        org.junit.Assert.assertNull(filenameFilter76);
        org.junit.Assert.assertTrue("'" + licenseFilter77 + "' != '" + org.apache.rat.license.LicenseSetFactory.LicenseFilter.all + "'", licenseFilter77.equals(org.apache.rat.license.LicenseSetFactory.LicenseFilter.all));
        org.junit.Assert.assertNotNull(iLicenseSet78);
        org.junit.Assert.assertTrue("'" + addLicenseHeaders79 + "' != '" + org.apache.rat.config.AddLicenseHeaders.FALSE + "'", addLicenseHeaders79.equals(org.apache.rat.config.AddLicenseHeaders.FALSE));
        org.junit.Assert.assertNull(claimStatistic83);
        org.junit.Assert.assertTrue("'" + licenseFilter84 + "' != '" + org.apache.rat.license.LicenseSetFactory.LicenseFilter.all + "'", licenseFilter84.equals(org.apache.rat.license.LicenseSetFactory.LicenseFilter.all));
        org.junit.Assert.assertNotNull(iLicenseSet88);
        org.junit.Assert.assertNotNull(iLicenseFamilySet89);
        org.junit.Assert.assertTrue("'" + boolean92 + "' != '" + true + "'", boolean92 == true);
        org.junit.Assert.assertNotNull(strSet94);
        org.junit.Assert.assertTrue("'" + int95 + "' != '" + 1 + "'", int95 == 1);
        org.junit.Assert.assertEquals("'" + str96 + "' != '" + "OASIS Open License" + "'", str96, "OASIS Open License");
    }

    @Test
    public void test13851() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest27.test13851");
        org.apache.rat.analysis.matchers.SimpleTextMatcher simpleTextMatcher2 = new org.apache.rat.analysis.matchers.SimpleTextMatcher("2953E6CB-20A5-4DCF-A9F5-85C51CC8C635", "9340895e-47fd-411d-8917-58c71f9a32c4");
        org.apache.rat.analysis.IHeaderMatcher.State state3 = simpleTextMatcher2.currentState();
        org.apache.rat.analysis.IHeaderMatcher.State state5 = simpleTextMatcher2.matches("archive W3CD ");
        boolean boolean7 = simpleTextMatcher2.doMatch("0c87b0ee-d1db-4238-b07c-dc3004d8f399");
        org.junit.Assert.assertTrue("'" + state3 + "' != '" + org.apache.rat.analysis.IHeaderMatcher.State.i + "'", state3.equals(org.apache.rat.analysis.IHeaderMatcher.State.i));
        org.junit.Assert.assertTrue("'" + state5 + "' != '" + org.apache.rat.analysis.IHeaderMatcher.State.i + "'", state5.equals(org.apache.rat.analysis.IHeaderMatcher.State.i));
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
    }

    @Test
    public void test13852() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest27.test13852");
        org.apache.rat.report.claim.ClaimStatistic claimStatistic0 = new org.apache.rat.report.claim.ClaimStatistic();
        claimStatistic0.setNumApproved((int) (short) 10);
        claimStatistic0.setNumUnknown((int) '#');
        int int5 = claimStatistic0.getNumUnApproved();
        java.util.Map<java.lang.String, java.lang.Integer> strMap6 = claimStatistic0.getLicenseFileCodeMap();
        java.util.Map<java.lang.String, java.lang.Integer> strMap7 = claimStatistic0.getDocumentCategoryMap();
        int int8 = claimStatistic0.getNumUnApproved();
        java.util.Map<java.lang.String, java.lang.Integer> strMap9 = claimStatistic0.getLicenseFileCodeMap();
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 0 + "'", int5 == 0);
        org.junit.Assert.assertNull(strMap6);
        org.junit.Assert.assertNull(strMap7);
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + 0 + "'", int8 == 0);
        org.junit.Assert.assertNull(strMap9);
    }

    @Test
    public void test13853() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest27.test13853");
        org.apache.rat.document.ToNameTransformer toNameTransformer0 = new org.apache.rat.document.ToNameTransformer();
        org.apache.rat.utils.DefaultLog defaultLog1 = org.apache.rat.utils.DefaultLog.INSTANCE;
        org.apache.rat.license.ILicense.Builder builder2 = org.apache.rat.license.ILicense.builder();
        org.apache.rat.license.ILicense.Builder builder4 = builder2.setLicenseFamilyCategory("");
        org.apache.rat.analysis.matchers.CopyrightMatcher copyrightMatcher8 = new org.apache.rat.analysis.matchers.CopyrightMatcher("", "GPL1 ", "hi!");
        org.apache.rat.analysis.IHeaderMatcher.State state9 = copyrightMatcher8.finalizeState();
        org.apache.rat.license.ILicense.Builder builder10 = builder4.setMatcher((org.apache.rat.analysis.IHeaderMatcher) copyrightMatcher8);
        org.apache.rat.license.ILicense.Builder builder12 = builder10.setLicenseFamilyCategory("");
        defaultLog1.error((java.lang.Object) builder12);
        java.lang.Object obj14 = toNameTransformer0.transform((java.lang.Object) defaultLog1);
        org.apache.rat.configuration.builders.AllBuilder allBuilder15 = new org.apache.rat.configuration.builders.AllBuilder();
        java.lang.String str16 = allBuilder15.toString();
        java.util.List<org.apache.rat.analysis.IHeaderMatcher> iHeaderMatcherList17 = allBuilder15.getChildren();
        java.lang.Object obj18 = toNameTransformer0.transform((java.lang.Object) allBuilder15);
        org.apache.rat.configuration.builders.AllBuilder allBuilder19 = org.apache.rat.analysis.IHeaderMatcher.Builder.all();
        org.apache.rat.configuration.builders.AbstractBuilder abstractBuilder20 = allBuilder15.add((org.apache.rat.analysis.IHeaderMatcher.Builder) allBuilder19);
        boolean boolean21 = allBuilder15.hasId();
        org.apache.rat.analysis.IHeaderMatcher iHeaderMatcher22 = allBuilder15.build();
        org.junit.Assert.assertNotNull(defaultLog1);
        org.junit.Assert.assertNotNull(builder2);
        org.junit.Assert.assertNotNull(builder4);
        org.junit.Assert.assertTrue("'" + state9 + "' != '" + org.apache.rat.analysis.IHeaderMatcher.State.f + "'", state9.equals(org.apache.rat.analysis.IHeaderMatcher.State.f));
        org.junit.Assert.assertNotNull(builder10);
        org.junit.Assert.assertNotNull(builder12);
        org.junit.Assert.assertNull(obj14);
        org.junit.Assert.assertEquals("'" + str16 + "' != '" + "AllBuilder:" + "'", str16, "AllBuilder:");
        org.junit.Assert.assertNotNull(iHeaderMatcherList17);
        org.junit.Assert.assertNull(obj18);
        org.junit.Assert.assertNotNull(allBuilder19);
        org.junit.Assert.assertNotNull(abstractBuilder20);
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + false + "'", boolean21 == false);
        org.junit.Assert.assertNotNull(iHeaderMatcher22);
    }

    @Test
    public void test13854() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest27.test13854");
        java.io.File file0 = null;
        org.apache.rat.utils.Log log1 = null;
        org.apache.rat.ReportConfiguration reportConfiguration2 = new org.apache.rat.ReportConfiguration(log1);
        org.apache.rat.report.claim.ClaimStatistic claimStatistic3 = org.apache.rat.Reporter.report(reportConfiguration2);
        org.apache.rat.utils.ReportingSet.Options options4 = org.apache.rat.utils.ReportingSet.Options.OVERWRITE;
        reportConfiguration2.licenseDuplicateOption(options4);
        org.apache.commons.io.filefilter.IOFileFilter iOFileFilter6 = reportConfiguration2.getDirectoryFilter();
        java.nio.file.Path path7 = null;
        boolean boolean8 = iOFileFilter6.matches(path7);
        org.apache.commons.io.filefilter.IOFileFilter iOFileFilter9 = iOFileFilter6.negate();
        org.apache.rat.utils.Log log10 = null;
        org.apache.rat.ReportConfiguration reportConfiguration11 = new org.apache.rat.ReportConfiguration(log10);
        java.io.FilenameFilter filenameFilter12 = reportConfiguration11.getInputFileFilter();
        org.apache.rat.license.LicenseSetFactory.LicenseFilter licenseFilter13 = org.apache.rat.license.LicenseSetFactory.LicenseFilter.all;
        java.util.SortedSet<org.apache.rat.license.ILicense> iLicenseSet14 = reportConfiguration11.getLicenses(licenseFilter13);
        org.apache.rat.license.ILicenseFamily iLicenseFamily15 = null;
        reportConfiguration11.addFamily(iLicenseFamily15);
        org.apache.commons.io.filefilter.IOFileFilter iOFileFilter17 = reportConfiguration11.getDirectoryFilter();
        java.nio.file.Path path18 = null;
        boolean boolean19 = iOFileFilter17.matches(path18);
        // The following exception was thrown during execution in test generation
        try {
            org.apache.rat.walker.DirectoryWalker directoryWalker20 = new org.apache.rat.walker.DirectoryWalker(file0, (java.io.FilenameFilter) iOFileFilter6, iOFileFilter17);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNull(claimStatistic3);
        org.junit.Assert.assertTrue("'" + options4 + "' != '" + org.apache.rat.utils.ReportingSet.Options.OVERWRITE + "'", options4.equals(org.apache.rat.utils.ReportingSet.Options.OVERWRITE));
        org.junit.Assert.assertNotNull(iOFileFilter6);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertNotNull(iOFileFilter9);
        org.junit.Assert.assertNull(filenameFilter12);
        org.junit.Assert.assertTrue("'" + licenseFilter13 + "' != '" + org.apache.rat.license.LicenseSetFactory.LicenseFilter.all + "'", licenseFilter13.equals(org.apache.rat.license.LicenseSetFactory.LicenseFilter.all));
        org.junit.Assert.assertNotNull(iLicenseSet14);
        org.junit.Assert.assertNotNull(iOFileFilter17);
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + false + "'", boolean19 == false);
    }

    @Test
    public void test13855() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest27.test13855");
        org.apache.rat.analysis.matchers.FullTextMatcher fullTextMatcher1 = new org.apache.rat.analysis.matchers.FullTextMatcher("ef7a8b13-64c3-4510-bb0c-dbf208e1e73f");
        java.lang.String str2 = fullTextMatcher1.getId();
        fullTextMatcher1.reset();
        boolean boolean5 = fullTextMatcher1.doMatch("a3b9f6f5-22c8-487e-8289-73eb5482e732");
        org.apache.rat.analysis.IHeaderMatcher.State state6 = fullTextMatcher1.currentState();
        org.apache.rat.analysis.IHeaderMatcher.State state7 = fullTextMatcher1.currentState();
// flaky:         org.junit.Assert.assertEquals("'" + str2 + "' != '" + "3071290e-8ec8-434d-81f1-0499f1d6a43e" + "'", str2, "3071290e-8ec8-434d-81f1-0499f1d6a43e");
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertTrue("'" + state6 + "' != '" + org.apache.rat.analysis.IHeaderMatcher.State.i + "'", state6.equals(org.apache.rat.analysis.IHeaderMatcher.State.i));
        org.junit.Assert.assertTrue("'" + state7 + "' != '" + org.apache.rat.analysis.IHeaderMatcher.State.i + "'", state7.equals(org.apache.rat.analysis.IHeaderMatcher.State.i));
    }

    @Test
    public void test13856() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest27.test13856");
        boolean boolean1 = org.apache.rat.document.impl.guesser.BinaryGuesser.isBytecode("d4f6416e-0a4d-499c-a651-afd7d5197091");
        org.junit.Assert.assertTrue("'" + boolean1 + "' != '" + false + "'", boolean1 == false);
    }

    @Test
    public void test13857() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest27.test13857");
        boolean boolean1 = org.apache.rat.document.impl.guesser.BinaryGuesser.isNonBinary("4fcae");
        org.junit.Assert.assertTrue("'" + boolean1 + "' != '" + false + "'", boolean1 == false);
    }

    @Test
    public void test13858() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest27.test13858");
        java.lang.String[] strArray5 = new java.lang.String[] { "http://org/apache/rat/meta-data#LicenseFamilyCategory", "Datum [ name ='http://org/apache/rat/meta-data#LicenseFamilyCategory',value ='GPL1  ']", "MANIFEST.MF", "AllBuilder:", "The MIT License" };
        org.apache.rat.utils.ReportingSet<java.lang.String> strSet6 = new org.apache.rat.utils.ReportingSet<java.lang.String>();
        boolean boolean7 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strSet6, strArray5);
        boolean boolean9 = strSet6.addIfNotPresent("http://org/apache/rat/meta-data#LicenseFamilyName");
        boolean boolean11 = strSet6.addIfNotPresent("ef7a8b13-64c3-4510-bb0c-dbf208e1e73f");
        java.util.function.Function<java.lang.String, java.lang.String> strFunction12 = null;
        org.apache.rat.utils.ReportingSet<java.lang.String> strSet13 = strSet6.setMsgFormat(strFunction12);
        org.apache.rat.utils.DefaultLog defaultLog14 = org.apache.rat.utils.DefaultLog.INSTANCE;
        org.apache.rat.utils.Log log15 = null;
        org.apache.rat.ReportConfiguration reportConfiguration16 = new org.apache.rat.ReportConfiguration(log15);
        java.io.FilenameFilter filenameFilter17 = reportConfiguration16.getInputFileFilter();
        org.apache.rat.license.LicenseSetFactory.LicenseFilter licenseFilter18 = org.apache.rat.license.LicenseSetFactory.LicenseFilter.all;
        java.util.SortedSet<org.apache.rat.license.ILicense> iLicenseSet19 = reportConfiguration16.getLicenses(licenseFilter18);
        org.apache.rat.config.AddLicenseHeaders addLicenseHeaders20 = org.apache.rat.config.AddLicenseHeaders.FALSE;
        reportConfiguration16.setAddLicenseHeaders(addLicenseHeaders20);
        org.apache.rat.utils.Log log22 = null;
        org.apache.rat.ReportConfiguration reportConfiguration23 = new org.apache.rat.ReportConfiguration(log22);
        org.apache.rat.report.claim.ClaimStatistic claimStatistic24 = org.apache.rat.Reporter.report(reportConfiguration23);
        org.apache.rat.license.LicenseSetFactory.LicenseFilter licenseFilter25 = org.apache.rat.license.LicenseSetFactory.LicenseFilter.all;
        org.apache.rat.Reporter.listLicenses(reportConfiguration23, licenseFilter25);
        org.apache.rat.Reporter.listLicenses(reportConfiguration16, licenseFilter25);
        org.apache.rat.utils.Log log28 = null;
        org.apache.rat.ReportConfiguration reportConfiguration29 = new org.apache.rat.ReportConfiguration(log28);
        java.io.FilenameFilter filenameFilter30 = reportConfiguration29.getInputFileFilter();
        org.apache.rat.license.LicenseSetFactory.LicenseFilter licenseFilter31 = org.apache.rat.license.LicenseSetFactory.LicenseFilter.all;
        java.util.SortedSet<org.apache.rat.license.ILicense> iLicenseSet32 = reportConfiguration29.getLicenses(licenseFilter31);
        org.apache.rat.config.AddLicenseHeaders addLicenseHeaders33 = org.apache.rat.config.AddLicenseHeaders.FALSE;
        reportConfiguration29.setAddLicenseHeaders(addLicenseHeaders33);
        org.apache.rat.utils.Log log35 = null;
        org.apache.rat.ReportConfiguration reportConfiguration36 = new org.apache.rat.ReportConfiguration(log35);
        org.apache.rat.report.claim.ClaimStatistic claimStatistic37 = org.apache.rat.Reporter.report(reportConfiguration36);
        org.apache.rat.license.LicenseSetFactory.LicenseFilter licenseFilter38 = org.apache.rat.license.LicenseSetFactory.LicenseFilter.all;
        org.apache.rat.Reporter.listLicenses(reportConfiguration36, licenseFilter38);
        org.apache.rat.Reporter.listLicenses(reportConfiguration29, licenseFilter38);
        org.apache.rat.Reporter.listLicenses(reportConfiguration16, licenseFilter38);
        org.apache.rat.utils.Log log42 = null;
        org.apache.rat.ReportConfiguration reportConfiguration43 = new org.apache.rat.ReportConfiguration(log42);
        org.apache.commons.io.function.IOSupplier<java.io.OutputStream> outputStreamIOSupplier44 = reportConfiguration43.getOutput();
        reportConfiguration16.setOut(outputStreamIOSupplier44);
        org.apache.rat.utils.Log log46 = null;
        org.apache.rat.ReportConfiguration reportConfiguration47 = new org.apache.rat.ReportConfiguration(log46);
        org.apache.rat.report.claim.ClaimStatistic claimStatistic48 = org.apache.rat.Reporter.report(reportConfiguration47);
        org.apache.rat.utils.Log log49 = null;
        org.apache.rat.ReportConfiguration reportConfiguration50 = new org.apache.rat.ReportConfiguration(log49);
        org.apache.rat.report.claim.ClaimStatistic claimStatistic51 = org.apache.rat.Reporter.report(reportConfiguration50);
        org.apache.rat.utils.ReportingSet.Options options52 = org.apache.rat.utils.ReportingSet.Options.OVERWRITE;
        reportConfiguration50.licenseDuplicateOption(options52);
        reportConfiguration47.familyDuplicateOption(options52);
        reportConfiguration16.licenseDuplicateOption(options52);
        reportConfiguration16.addApprovedLicenseCategory("W3C Document Copyright");
        org.apache.rat.utils.Log log58 = null;
        org.apache.rat.ReportConfiguration reportConfiguration59 = new org.apache.rat.ReportConfiguration(log58);
        reportConfiguration59.addApprovedLicenseCategory(".cvsignore");
        org.apache.rat.utils.Log.Level level62 = org.apache.rat.utils.Log.Level.ERROR;
        reportConfiguration59.logLicenseCollisions(level62);
        reportConfiguration16.logLicenseCollisions(level62);
        defaultLog14.setLevel(level62);
        defaultLog14.warn((java.lang.Object) "GNU General Public License, version 3");
        org.apache.rat.ReportConfiguration reportConfiguration68 = new org.apache.rat.ReportConfiguration((org.apache.rat.utils.Log) defaultLog14);
        org.apache.rat.utils.DefaultLog defaultLog69 = org.apache.rat.utils.DefaultLog.INSTANCE;
        org.apache.rat.utils.Log log70 = null;
        org.apache.rat.ReportConfiguration reportConfiguration71 = new org.apache.rat.ReportConfiguration(log70);
        reportConfiguration71.addApprovedLicenseCategory(".cvsignore");
        org.apache.rat.utils.Log.Level level74 = org.apache.rat.utils.Log.Level.ERROR;
        reportConfiguration71.logFamilyCollisions(level74);
        defaultLog69.setLevel(level74);
        defaultLog14.debug((java.lang.Object) level74);
        org.apache.rat.utils.ReportingSet<java.lang.String> strSet78 = strSet13.setLogLevel(level74);
        int int79 = strSet13.size();
        org.apache.rat.utils.ReportingSet<java.lang.String> strSet82 = strSet13.subSet("725f33f3-3304-4bfa-b1c1-c226b58a407e", "true|false|forced");
        java.util.stream.Stream<java.lang.String> strStream83 = strSet82.stream();
        org.junit.Assert.assertNotNull(strArray5);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + true + "'", boolean7 == true);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + true + "'", boolean9 == true);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + true + "'", boolean11 == true);
        org.junit.Assert.assertNotNull(strSet13);
        org.junit.Assert.assertNotNull(defaultLog14);
        org.junit.Assert.assertNull(filenameFilter17);
        org.junit.Assert.assertTrue("'" + licenseFilter18 + "' != '" + org.apache.rat.license.LicenseSetFactory.LicenseFilter.all + "'", licenseFilter18.equals(org.apache.rat.license.LicenseSetFactory.LicenseFilter.all));
        org.junit.Assert.assertNotNull(iLicenseSet19);
        org.junit.Assert.assertTrue("'" + addLicenseHeaders20 + "' != '" + org.apache.rat.config.AddLicenseHeaders.FALSE + "'", addLicenseHeaders20.equals(org.apache.rat.config.AddLicenseHeaders.FALSE));
        org.junit.Assert.assertNull(claimStatistic24);
        org.junit.Assert.assertTrue("'" + licenseFilter25 + "' != '" + org.apache.rat.license.LicenseSetFactory.LicenseFilter.all + "'", licenseFilter25.equals(org.apache.rat.license.LicenseSetFactory.LicenseFilter.all));
        org.junit.Assert.assertNull(filenameFilter30);
        org.junit.Assert.assertTrue("'" + licenseFilter31 + "' != '" + org.apache.rat.license.LicenseSetFactory.LicenseFilter.all + "'", licenseFilter31.equals(org.apache.rat.license.LicenseSetFactory.LicenseFilter.all));
        org.junit.Assert.assertNotNull(iLicenseSet32);
        org.junit.Assert.assertTrue("'" + addLicenseHeaders33 + "' != '" + org.apache.rat.config.AddLicenseHeaders.FALSE + "'", addLicenseHeaders33.equals(org.apache.rat.config.AddLicenseHeaders.FALSE));
        org.junit.Assert.assertNull(claimStatistic37);
        org.junit.Assert.assertTrue("'" + licenseFilter38 + "' != '" + org.apache.rat.license.LicenseSetFactory.LicenseFilter.all + "'", licenseFilter38.equals(org.apache.rat.license.LicenseSetFactory.LicenseFilter.all));
        org.junit.Assert.assertNotNull(outputStreamIOSupplier44);
        org.junit.Assert.assertNull(claimStatistic48);
        org.junit.Assert.assertNull(claimStatistic51);
        org.junit.Assert.assertTrue("'" + options52 + "' != '" + org.apache.rat.utils.ReportingSet.Options.OVERWRITE + "'", options52.equals(org.apache.rat.utils.ReportingSet.Options.OVERWRITE));
        org.junit.Assert.assertTrue("'" + level62 + "' != '" + org.apache.rat.utils.Log.Level.ERROR + "'", level62.equals(org.apache.rat.utils.Log.Level.ERROR));
        org.junit.Assert.assertNotNull(defaultLog69);
        org.junit.Assert.assertTrue("'" + level74 + "' != '" + org.apache.rat.utils.Log.Level.ERROR + "'", level74.equals(org.apache.rat.utils.Log.Level.ERROR));
        org.junit.Assert.assertNotNull(strSet78);
        org.junit.Assert.assertTrue("'" + int79 + "' != '" + 7 + "'", int79 == 7);
        org.junit.Assert.assertNotNull(strSet82);
        org.junit.Assert.assertNotNull(strStream83);
    }

    @Test
    public void test13859() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest27.test13859");
        org.apache.rat.utils.Log log0 = null;
        org.apache.rat.ReportConfiguration reportConfiguration1 = new org.apache.rat.ReportConfiguration(log0);
        java.io.FilenameFilter filenameFilter2 = reportConfiguration1.getInputFileFilter();
        org.apache.rat.license.LicenseSetFactory.LicenseFilter licenseFilter3 = org.apache.rat.license.LicenseSetFactory.LicenseFilter.all;
        java.util.SortedSet<org.apache.rat.license.ILicense> iLicenseSet4 = reportConfiguration1.getLicenses(licenseFilter3);
        org.apache.rat.config.AddLicenseHeaders addLicenseHeaders5 = org.apache.rat.config.AddLicenseHeaders.FALSE;
        reportConfiguration1.setAddLicenseHeaders(addLicenseHeaders5);
        org.apache.rat.utils.Log log7 = null;
        org.apache.rat.ReportConfiguration reportConfiguration8 = new org.apache.rat.ReportConfiguration(log7);
        org.apache.rat.report.claim.ClaimStatistic claimStatistic9 = org.apache.rat.Reporter.report(reportConfiguration8);
        org.apache.rat.license.LicenseSetFactory.LicenseFilter licenseFilter10 = org.apache.rat.license.LicenseSetFactory.LicenseFilter.all;
        org.apache.rat.Reporter.listLicenses(reportConfiguration8, licenseFilter10);
        org.apache.rat.Reporter.listLicenses(reportConfiguration1, licenseFilter10);
        org.apache.rat.utils.Log log13 = null;
        org.apache.rat.ReportConfiguration reportConfiguration14 = new org.apache.rat.ReportConfiguration(log13);
        java.io.FilenameFilter filenameFilter15 = reportConfiguration14.getInputFileFilter();
        org.apache.rat.license.LicenseSetFactory.LicenseFilter licenseFilter16 = org.apache.rat.license.LicenseSetFactory.LicenseFilter.all;
        java.util.SortedSet<org.apache.rat.license.ILicense> iLicenseSet17 = reportConfiguration14.getLicenses(licenseFilter16);
        org.apache.rat.config.AddLicenseHeaders addLicenseHeaders18 = org.apache.rat.config.AddLicenseHeaders.FALSE;
        reportConfiguration14.setAddLicenseHeaders(addLicenseHeaders18);
        org.apache.rat.utils.Log log20 = null;
        org.apache.rat.ReportConfiguration reportConfiguration21 = new org.apache.rat.ReportConfiguration(log20);
        org.apache.rat.report.claim.ClaimStatistic claimStatistic22 = org.apache.rat.Reporter.report(reportConfiguration21);
        org.apache.rat.license.LicenseSetFactory.LicenseFilter licenseFilter23 = org.apache.rat.license.LicenseSetFactory.LicenseFilter.all;
        org.apache.rat.Reporter.listLicenses(reportConfiguration21, licenseFilter23);
        org.apache.rat.Reporter.listLicenses(reportConfiguration14, licenseFilter23);
        java.util.SortedSet<org.apache.rat.license.ILicenseFamily> iLicenseFamilySet26 = reportConfiguration1.getLicenseFamilies(licenseFilter23);
        org.apache.rat.license.ILicense[] iLicenseArray28 = new org.apache.rat.license.ILicense[] {};
        java.util.TreeSet<org.apache.rat.license.ILicense> iLicenseSet29 = new java.util.TreeSet<org.apache.rat.license.ILicense>();
        boolean boolean30 = java.util.Collections.addAll((java.util.Collection<org.apache.rat.license.ILicense>) iLicenseSet29, iLicenseArray28);
        java.lang.String[] strArray43 = new java.lang.String[] { "GPL2 ", "GPL1 ", "notice", "http://org/apache/rat/meta-data#LicenseFamilyName", "notice", "GPL2 ", "http://org/apache/rat/meta-data#LicenseFamilyName", "", "GPL2 ", "", "GPL1 ", "hi!" };
        java.util.ArrayList<java.lang.String> strList44 = new java.util.ArrayList<java.lang.String>();
        boolean boolean45 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strList44, strArray43);
        org.apache.rat.license.LicenseSetFactory licenseSetFactory46 = new org.apache.rat.license.LicenseSetFactory((java.util.SortedSet<org.apache.rat.license.ILicense>) iLicenseSet29, (java.util.Collection<java.lang.String>) strList44);
        org.apache.rat.license.ILicense iLicense47 = org.apache.rat.license.LicenseSetFactory.search("JAVA", (java.util.SortedSet<org.apache.rat.license.ILicense>) iLicenseSet29);
        reportConfiguration1.addLicensesIfNotPresent((java.util.Collection<org.apache.rat.license.ILicense>) iLicenseSet29);
        java.io.FilenameFilter filenameFilter49 = reportConfiguration1.getInputFileFilter();
        org.junit.Assert.assertNull(filenameFilter2);
        org.junit.Assert.assertTrue("'" + licenseFilter3 + "' != '" + org.apache.rat.license.LicenseSetFactory.LicenseFilter.all + "'", licenseFilter3.equals(org.apache.rat.license.LicenseSetFactory.LicenseFilter.all));
        org.junit.Assert.assertNotNull(iLicenseSet4);
        org.junit.Assert.assertTrue("'" + addLicenseHeaders5 + "' != '" + org.apache.rat.config.AddLicenseHeaders.FALSE + "'", addLicenseHeaders5.equals(org.apache.rat.config.AddLicenseHeaders.FALSE));
        org.junit.Assert.assertNull(claimStatistic9);
        org.junit.Assert.assertTrue("'" + licenseFilter10 + "' != '" + org.apache.rat.license.LicenseSetFactory.LicenseFilter.all + "'", licenseFilter10.equals(org.apache.rat.license.LicenseSetFactory.LicenseFilter.all));
        org.junit.Assert.assertNull(filenameFilter15);
        org.junit.Assert.assertTrue("'" + licenseFilter16 + "' != '" + org.apache.rat.license.LicenseSetFactory.LicenseFilter.all + "'", licenseFilter16.equals(org.apache.rat.license.LicenseSetFactory.LicenseFilter.all));
        org.junit.Assert.assertNotNull(iLicenseSet17);
        org.junit.Assert.assertTrue("'" + addLicenseHeaders18 + "' != '" + org.apache.rat.config.AddLicenseHeaders.FALSE + "'", addLicenseHeaders18.equals(org.apache.rat.config.AddLicenseHeaders.FALSE));
        org.junit.Assert.assertNull(claimStatistic22);
        org.junit.Assert.assertTrue("'" + licenseFilter23 + "' != '" + org.apache.rat.license.LicenseSetFactory.LicenseFilter.all + "'", licenseFilter23.equals(org.apache.rat.license.LicenseSetFactory.LicenseFilter.all));
        org.junit.Assert.assertNotNull(iLicenseFamilySet26);
        org.junit.Assert.assertNotNull(iLicenseArray28);
        org.junit.Assert.assertTrue("'" + boolean30 + "' != '" + false + "'", boolean30 == false);
        org.junit.Assert.assertNotNull(strArray43);
        org.junit.Assert.assertTrue("'" + boolean45 + "' != '" + true + "'", boolean45 == true);
        org.junit.Assert.assertNull(iLicense47);
        org.junit.Assert.assertNull(filenameFilter49);
    }

    @Test
    public void test13860() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest27.test13860");
        org.apache.rat.report.claim.ClaimStatistic claimStatistic0 = new org.apache.rat.report.claim.ClaimStatistic();
        claimStatistic0.setNumApproved((int) (short) 10);
        claimStatistic0.setNumUnknown((int) '#');
        java.util.Map<java.lang.String, java.lang.Integer> strMap5 = claimStatistic0.getLicenseFileNameMap();
        claimStatistic0.setNumApproved(256);
        int int8 = claimStatistic0.getNumUnApproved();
        claimStatistic0.setNumApproved((int) (byte) 10);
        org.junit.Assert.assertNull(strMap5);
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + 0 + "'", int8 == 0);
    }

    @Test
    public void test13861() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest27.test13861");
        org.apache.rat.utils.Log log0 = null;
        org.apache.rat.ReportConfiguration reportConfiguration1 = new org.apache.rat.ReportConfiguration(log0);
        org.apache.rat.license.ILicenseFamily[] iLicenseFamilyArray2 = new org.apache.rat.license.ILicenseFamily[] {};
        java.util.ArrayList<org.apache.rat.license.ILicenseFamily> iLicenseFamilyList3 = new java.util.ArrayList<org.apache.rat.license.ILicenseFamily>();
        boolean boolean4 = java.util.Collections.addAll((java.util.Collection<org.apache.rat.license.ILicenseFamily>) iLicenseFamilyList3, iLicenseFamilyArray2);
        reportConfiguration1.addFamilies((java.util.Collection<org.apache.rat.license.ILicenseFamily>) iLicenseFamilyList3);
        org.apache.rat.policy.DefaultPolicy defaultPolicy6 = new org.apache.rat.policy.DefaultPolicy((java.util.Collection<org.apache.rat.license.ILicenseFamily>) iLicenseFamilyList3);
        org.apache.rat.api.Document document7 = null;
        defaultPolicy6.analyse(document7);
        org.apache.rat.license.ILicenseFamilyBuilder iLicenseFamilyBuilder9 = new org.apache.rat.license.ILicenseFamilyBuilder();
        java.lang.String str10 = iLicenseFamilyBuilder9.getCategory();
        org.apache.rat.license.ILicenseFamily.Builder builder12 = iLicenseFamilyBuilder9.setLicenseFamilyCategory("AL   ");
        org.apache.rat.license.ILicenseFamily.Builder builder14 = iLicenseFamilyBuilder9.setLicenseFamilyName("binary");
        org.apache.rat.license.ILicenseFamily.Builder builder16 = iLicenseFamilyBuilder9.setLicenseFamilyCategory("3c74a3ec-8235-4035-9db7-f9f475b48681");
        org.apache.rat.license.ILicenseFamily.Builder builder18 = builder16.setLicenseFamilyCategory("49ba0523-306f-4984-949f-9db17b9667d9");
        org.apache.rat.license.ILicenseFamily iLicenseFamily19 = builder16.build();
        defaultPolicy6.add(iLicenseFamily19);
        org.apache.rat.license.ILicenseFamilyBuilder iLicenseFamilyBuilder21 = new org.apache.rat.license.ILicenseFamilyBuilder();
        java.lang.String str22 = iLicenseFamilyBuilder21.getCategory();
        org.apache.rat.license.ILicenseFamily.Builder builder24 = iLicenseFamilyBuilder21.setLicenseFamilyCategory("AL   ");
        org.apache.rat.license.ILicenseFamily.Builder builder26 = iLicenseFamilyBuilder21.setLicenseFamilyName("binary");
        org.apache.rat.license.ILicenseFamily.Builder builder28 = iLicenseFamilyBuilder21.setLicenseFamilyCategory("3c74a3ec-8235-4035-9db7-f9f475b48681");
        java.lang.String str29 = iLicenseFamilyBuilder21.getCategory();
        org.apache.rat.license.ILicenseFamily.Builder builder31 = iLicenseFamilyBuilder21.setLicenseFamilyCategory("f02d0cdc36424583b71fdd84a120752c");
        org.apache.rat.license.ILicenseFamily.Builder builder33 = iLicenseFamilyBuilder21.setLicenseFamilyName("725f33f3-3304-4bfa-b1c1-c226b58a407e");
        org.apache.rat.license.ILicenseFamily.Builder builder35 = iLicenseFamilyBuilder21.setLicenseFamilyCategory("Copyright Builder: s:SpdxBuilder: Datum [ name ='http://org/apache/rat/meta-data#ApprovedLicense',value ='false '] e:W3C Software Copyright o:null");
        org.apache.rat.license.ILicenseFamily iLicenseFamily36 = builder35.build();
        defaultPolicy6.add(iLicenseFamily36);
        org.apache.rat.utils.Log log38 = null;
        org.apache.rat.ReportConfiguration reportConfiguration39 = new org.apache.rat.ReportConfiguration(log38);
        java.io.FilenameFilter filenameFilter40 = reportConfiguration39.getInputFileFilter();
        org.apache.rat.license.ILicense iLicense41 = null;
        reportConfiguration39.addLicense(iLicense41);
        org.apache.rat.utils.DefaultLog defaultLog43 = org.apache.rat.utils.DefaultLog.INSTANCE;
        org.apache.rat.license.ILicense.Builder builder44 = org.apache.rat.license.ILicense.builder();
        org.apache.rat.license.ILicense.Builder builder46 = builder44.setLicenseFamilyCategory("");
        org.apache.rat.analysis.matchers.CopyrightMatcher copyrightMatcher50 = new org.apache.rat.analysis.matchers.CopyrightMatcher("", "GPL1 ", "hi!");
        org.apache.rat.analysis.IHeaderMatcher.State state51 = copyrightMatcher50.finalizeState();
        org.apache.rat.license.ILicense.Builder builder52 = builder46.setMatcher((org.apache.rat.analysis.IHeaderMatcher) copyrightMatcher50);
        org.apache.rat.license.ILicense.Builder builder54 = builder52.setLicenseFamilyCategory("");
        defaultLog43.error((java.lang.Object) builder54);
        org.apache.rat.ReportConfiguration reportConfiguration56 = new org.apache.rat.ReportConfiguration((org.apache.rat.utils.Log) defaultLog43);
        org.apache.rat.license.ILicenseFamily[] iLicenseFamilyArray57 = new org.apache.rat.license.ILicenseFamily[] {};
        java.util.ArrayList<org.apache.rat.license.ILicenseFamily> iLicenseFamilyList58 = new java.util.ArrayList<org.apache.rat.license.ILicenseFamily>();
        boolean boolean59 = java.util.Collections.addAll((java.util.Collection<org.apache.rat.license.ILicenseFamily>) iLicenseFamilyList58, iLicenseFamilyArray57);
        org.apache.rat.policy.DefaultPolicy defaultPolicy60 = new org.apache.rat.policy.DefaultPolicy((java.util.Collection<org.apache.rat.license.ILicenseFamily>) iLicenseFamilyList58);
        org.apache.rat.api.Document document61 = null;
        defaultPolicy60.analyse(document61);
        org.apache.rat.api.Document document63 = null;
        defaultPolicy60.analyse(document63);
        org.apache.rat.api.Document document65 = null;
        defaultPolicy60.analyse(document65);
        org.apache.rat.analysis.license.FullTextMatchingLicense fullTextMatchingLicense67 = new org.apache.rat.analysis.license.FullTextMatchingLicense();
        fullTextMatchingLicense67.setLicenseFamilyName("hi!");
        java.lang.String str70 = fullTextMatchingLicense67.getLicenseFamilyCategory();
        java.lang.String str71 = fullTextMatchingLicense67.getLicenseFamilyName();
        fullTextMatchingLicense67.setLicenseFamilyName("SpdxBuilder: null");
        fullTextMatchingLicense67.setLicenseFamilyCategory("TMF");
        org.apache.rat.license.ILicenseFamily iLicenseFamily76 = fullTextMatchingLicense67.getLicenseFamily();
        java.util.SortedSet<org.apache.rat.license.ILicenseFamily> iLicenseFamilySet77 = org.apache.rat.license.LicenseFamilySetFactory.emptyLicenseFamilySet();
        org.apache.rat.license.ILicenseFamily iLicenseFamily78 = org.apache.rat.license.LicenseFamilySetFactory.search(iLicenseFamily76, iLicenseFamilySet77);
        defaultPolicy60.add(iLicenseFamily76);
        reportConfiguration56.addFamily(iLicenseFamily76);
        java.lang.String str81 = iLicenseFamily76.getFamilyName();
        java.lang.String str82 = iLicenseFamily76.getFamilyName();
        reportConfiguration39.addFamily(iLicenseFamily76);
        defaultPolicy6.add(iLicenseFamily76);
        org.junit.Assert.assertNotNull(iLicenseFamilyArray2);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertNull(str10);
        org.junit.Assert.assertNotNull(builder12);
        org.junit.Assert.assertNotNull(builder14);
        org.junit.Assert.assertNotNull(builder16);
        org.junit.Assert.assertNotNull(builder18);
        org.junit.Assert.assertNotNull(iLicenseFamily19);
        org.junit.Assert.assertNull(str22);
        org.junit.Assert.assertNotNull(builder24);
        org.junit.Assert.assertNotNull(builder26);
        org.junit.Assert.assertNotNull(builder28);
        org.junit.Assert.assertEquals("'" + str29 + "' != '" + "3c74a3ec-8235-4035-9db7-f9f475b48681" + "'", str29, "3c74a3ec-8235-4035-9db7-f9f475b48681");
        org.junit.Assert.assertNotNull(builder31);
        org.junit.Assert.assertNotNull(builder33);
        org.junit.Assert.assertNotNull(builder35);
        org.junit.Assert.assertNotNull(iLicenseFamily36);
        org.junit.Assert.assertNull(filenameFilter40);
        org.junit.Assert.assertNotNull(defaultLog43);
        org.junit.Assert.assertNotNull(builder44);
        org.junit.Assert.assertNotNull(builder46);
        org.junit.Assert.assertTrue("'" + state51 + "' != '" + org.apache.rat.analysis.IHeaderMatcher.State.f + "'", state51.equals(org.apache.rat.analysis.IHeaderMatcher.State.f));
        org.junit.Assert.assertNotNull(builder52);
        org.junit.Assert.assertNotNull(builder54);
        org.junit.Assert.assertNotNull(iLicenseFamilyArray57);
        org.junit.Assert.assertTrue("'" + boolean59 + "' != '" + false + "'", boolean59 == false);
        org.junit.Assert.assertNull(str70);
        org.junit.Assert.assertEquals("'" + str71 + "' != '" + "hi!" + "'", str71, "hi!");
        org.junit.Assert.assertNotNull(iLicenseFamily76);
        org.junit.Assert.assertNotNull(iLicenseFamilySet77);
        org.junit.Assert.assertNull(iLicenseFamily78);
        org.junit.Assert.assertEquals("'" + str81 + "' != '" + "SpdxBuilder: null" + "'", str81, "SpdxBuilder: null");
        org.junit.Assert.assertEquals("'" + str82 + "' != '" + "SpdxBuilder: null" + "'", str82, "SpdxBuilder: null");
    }

    @Test
    public void test13862() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest27.test13862");
        org.apache.rat.api.MetaData metaData0 = new org.apache.rat.api.MetaData();
        java.lang.String str2 = metaData0.value("COMMON DEVELOPMENT AND DISTRIBUTION LICENSE Version 1.0");
        java.lang.String str4 = metaData0.value("W3C Document Copyright");
        boolean boolean6 = metaData0.clear("hi!");
        java.lang.String str8 = metaData0.value("true");
        org.apache.rat.api.MetaData.Datum datum10 = metaData0.get("GNU General Public License, version 1");
        org.apache.rat.api.MetaData.Datum datum11 = org.apache.rat.api.MetaData.RAT_LICENSE_FAMILY_CATEGORY_DATUM_MIT;
        java.lang.String str12 = datum11.getName();
        metaData0.set(datum11);
        java.util.Collection<org.apache.rat.api.MetaData.Datum> datumCollection14 = metaData0.getData();
        org.apache.rat.api.MetaData.Datum datum17 = new org.apache.rat.api.MetaData.Datum("", "2953e6cb-20a5-4dcf-a9f5-85c51cc8c635");
        metaData0.set(datum17);
        java.util.Collection<org.apache.rat.api.MetaData.Datum> datumCollection19 = metaData0.getData();
        org.junit.Assert.assertNull(str2);
        org.junit.Assert.assertNull(str4);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertNull(str8);
        org.junit.Assert.assertNull(datum10);
        org.junit.Assert.assertNotNull(datum11);
        org.junit.Assert.assertEquals("'" + str12 + "' != '" + "http://org/apache/rat/meta-data#LicenseFamilyCategory" + "'", str12, "http://org/apache/rat/meta-data#LicenseFamilyCategory");
        org.junit.Assert.assertNotNull(datumCollection14);
        org.junit.Assert.assertNotNull(datumCollection19);
    }

    @Test
    public void test13863() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest27.test13863");
        org.apache.rat.utils.Log log0 = null;
        org.apache.rat.ReportConfiguration reportConfiguration1 = new org.apache.rat.ReportConfiguration(log0);
        org.apache.rat.report.claim.ClaimStatistic claimStatistic2 = org.apache.rat.Reporter.report(reportConfiguration1);
        org.apache.commons.io.function.IOSupplier<java.io.OutputStream> outputStreamIOSupplier3 = reportConfiguration1.getOutput();
        org.apache.rat.license.ILicense iLicense4 = null;
        reportConfiguration1.addLicense(iLicense4);
        org.apache.rat.Defaults.Builder builder6 = org.apache.rat.Defaults.builder();
        org.apache.rat.Defaults defaults7 = builder6.build();
        org.apache.rat.utils.Log log8 = null;
        org.apache.rat.ReportConfiguration reportConfiguration9 = new org.apache.rat.ReportConfiguration(log8);
        reportConfiguration9.addApprovedLicenseCategory(".cvsignore");
        org.apache.rat.utils.Log log12 = null;
        org.apache.rat.ReportConfiguration reportConfiguration13 = new org.apache.rat.ReportConfiguration(log12);
        java.io.FilenameFilter filenameFilter14 = reportConfiguration13.getInputFileFilter();
        org.apache.rat.license.LicenseSetFactory.LicenseFilter licenseFilter15 = org.apache.rat.license.LicenseSetFactory.LicenseFilter.all;
        java.util.SortedSet<org.apache.rat.license.ILicense> iLicenseSet16 = reportConfiguration13.getLicenses(licenseFilter15);
        reportConfiguration9.addLicensesIfNotPresent((java.util.Collection<org.apache.rat.license.ILicense>) iLicenseSet16);
        java.io.FilenameFilter filenameFilter18 = reportConfiguration9.getInputFileFilter();
        org.apache.rat.utils.Log log19 = null;
        org.apache.rat.ReportConfiguration reportConfiguration20 = new org.apache.rat.ReportConfiguration(log19);
        java.io.FilenameFilter filenameFilter21 = reportConfiguration20.getInputFileFilter();
        org.apache.rat.license.LicenseSetFactory.LicenseFilter licenseFilter22 = org.apache.rat.license.LicenseSetFactory.LicenseFilter.all;
        java.util.SortedSet<org.apache.rat.license.ILicense> iLicenseSet23 = reportConfiguration20.getLicenses(licenseFilter22);
        org.apache.rat.config.AddLicenseHeaders addLicenseHeaders24 = org.apache.rat.config.AddLicenseHeaders.FALSE;
        reportConfiguration20.setAddLicenseHeaders(addLicenseHeaders24);
        org.apache.rat.utils.Log log26 = null;
        org.apache.rat.ReportConfiguration reportConfiguration27 = new org.apache.rat.ReportConfiguration(log26);
        org.apache.rat.report.claim.ClaimStatistic claimStatistic28 = org.apache.rat.Reporter.report(reportConfiguration27);
        org.apache.rat.license.LicenseSetFactory.LicenseFilter licenseFilter29 = org.apache.rat.license.LicenseSetFactory.LicenseFilter.all;
        org.apache.rat.Reporter.listLicenses(reportConfiguration27, licenseFilter29);
        org.apache.rat.Reporter.listLicenses(reportConfiguration20, licenseFilter29);
        org.apache.rat.utils.Log log32 = null;
        org.apache.rat.ReportConfiguration reportConfiguration33 = new org.apache.rat.ReportConfiguration(log32);
        java.io.FilenameFilter filenameFilter34 = reportConfiguration33.getInputFileFilter();
        org.apache.rat.license.LicenseSetFactory.LicenseFilter licenseFilter35 = org.apache.rat.license.LicenseSetFactory.LicenseFilter.all;
        java.util.SortedSet<org.apache.rat.license.ILicense> iLicenseSet36 = reportConfiguration33.getLicenses(licenseFilter35);
        org.apache.rat.config.AddLicenseHeaders addLicenseHeaders37 = org.apache.rat.config.AddLicenseHeaders.FALSE;
        reportConfiguration33.setAddLicenseHeaders(addLicenseHeaders37);
        org.apache.rat.utils.Log log39 = null;
        org.apache.rat.ReportConfiguration reportConfiguration40 = new org.apache.rat.ReportConfiguration(log39);
        org.apache.rat.report.claim.ClaimStatistic claimStatistic41 = org.apache.rat.Reporter.report(reportConfiguration40);
        org.apache.rat.license.LicenseSetFactory.LicenseFilter licenseFilter42 = org.apache.rat.license.LicenseSetFactory.LicenseFilter.all;
        org.apache.rat.Reporter.listLicenses(reportConfiguration40, licenseFilter42);
        org.apache.rat.Reporter.listLicenses(reportConfiguration33, licenseFilter42);
        java.util.SortedSet<org.apache.rat.license.ILicenseFamily> iLicenseFamilySet45 = reportConfiguration20.getLicenseFamilies(licenseFilter42);
        org.apache.rat.Reporter.listLicenseFamilies(reportConfiguration9, licenseFilter42);
        java.util.SortedSet<java.lang.String> strSet47 = defaults7.getLicenseIds(licenseFilter42);
        java.util.SortedSet<org.apache.rat.license.ILicense> iLicenseSet48 = reportConfiguration1.getLicenses(licenseFilter42);
        org.apache.rat.Defaults.Builder builder49 = org.apache.rat.Defaults.builder();
        org.apache.rat.Defaults.Builder builder50 = builder49.noDefault();
        org.apache.rat.Defaults defaults51 = builder50.build();
        org.apache.rat.Defaults.Builder builder52 = org.apache.rat.Defaults.builder();
        org.apache.rat.Defaults defaults53 = builder52.build();
        org.apache.rat.license.LicenseSetFactory.LicenseFilter licenseFilter54 = org.apache.rat.license.LicenseSetFactory.LicenseFilter.approved;
        java.util.SortedSet<org.apache.rat.license.ILicenseFamily> iLicenseFamilySet55 = defaults53.getLicenseFamilies(licenseFilter54);
        java.util.SortedSet<org.apache.rat.license.ILicenseFamily> iLicenseFamilySet56 = defaults51.getLicenseFamilies(licenseFilter54);
        java.util.SortedSet<org.apache.rat.license.ILicenseFamily> iLicenseFamilySet57 = reportConfiguration1.getLicenseFamilies(licenseFilter54);
        java.lang.String[] strArray63 = new java.lang.String[] { "http://org/apache/rat/meta-data#LicenseFamilyCategory", "Datum [ name ='http://org/apache/rat/meta-data#LicenseFamilyCategory',value ='GPL1  ']", "MANIFEST.MF", "AllBuilder:", "The MIT License" };
        org.apache.rat.utils.ReportingSet<java.lang.String> strSet64 = new org.apache.rat.utils.ReportingSet<java.lang.String>();
        boolean boolean65 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strSet64, strArray63);
        boolean boolean67 = strSet64.addIfNotPresent("http://org/apache/rat/meta-data#LicenseFamilyName");
        java.util.Iterator<java.lang.String> strItor68 = strSet64.iterator();
        strSet64.clear();
        int int70 = strSet64.size();
        java.util.function.Function<java.lang.String, java.lang.String> strFunction71 = null;
        org.apache.rat.utils.ReportingSet<java.lang.String> strSet72 = strSet64.setMsgFormat(strFunction71);
        boolean boolean73 = strSet72.isEmpty();
        org.apache.rat.utils.ReportingSet<java.lang.String> strSet75 = strSet72.tailSet("SpdxBuilder: Datum [ name ='http://org/apache/rat/meta-data#LicenseFamilyName',value ='????? ']");
        org.apache.rat.license.LicenseFamilySetFactory licenseFamilySetFactory76 = new org.apache.rat.license.LicenseFamilySetFactory(iLicenseFamilySet57, (java.util.Collection<java.lang.String>) strSet75);
        org.junit.Assert.assertNull(claimStatistic2);
        org.junit.Assert.assertNotNull(outputStreamIOSupplier3);
        org.junit.Assert.assertNotNull(builder6);
        org.junit.Assert.assertNotNull(defaults7);
        org.junit.Assert.assertNull(filenameFilter14);
        org.junit.Assert.assertTrue("'" + licenseFilter15 + "' != '" + org.apache.rat.license.LicenseSetFactory.LicenseFilter.all + "'", licenseFilter15.equals(org.apache.rat.license.LicenseSetFactory.LicenseFilter.all));
        org.junit.Assert.assertNotNull(iLicenseSet16);
        org.junit.Assert.assertNull(filenameFilter18);
        org.junit.Assert.assertNull(filenameFilter21);
        org.junit.Assert.assertTrue("'" + licenseFilter22 + "' != '" + org.apache.rat.license.LicenseSetFactory.LicenseFilter.all + "'", licenseFilter22.equals(org.apache.rat.license.LicenseSetFactory.LicenseFilter.all));
        org.junit.Assert.assertNotNull(iLicenseSet23);
        org.junit.Assert.assertTrue("'" + addLicenseHeaders24 + "' != '" + org.apache.rat.config.AddLicenseHeaders.FALSE + "'", addLicenseHeaders24.equals(org.apache.rat.config.AddLicenseHeaders.FALSE));
        org.junit.Assert.assertNull(claimStatistic28);
        org.junit.Assert.assertTrue("'" + licenseFilter29 + "' != '" + org.apache.rat.license.LicenseSetFactory.LicenseFilter.all + "'", licenseFilter29.equals(org.apache.rat.license.LicenseSetFactory.LicenseFilter.all));
        org.junit.Assert.assertNull(filenameFilter34);
        org.junit.Assert.assertTrue("'" + licenseFilter35 + "' != '" + org.apache.rat.license.LicenseSetFactory.LicenseFilter.all + "'", licenseFilter35.equals(org.apache.rat.license.LicenseSetFactory.LicenseFilter.all));
        org.junit.Assert.assertNotNull(iLicenseSet36);
        org.junit.Assert.assertTrue("'" + addLicenseHeaders37 + "' != '" + org.apache.rat.config.AddLicenseHeaders.FALSE + "'", addLicenseHeaders37.equals(org.apache.rat.config.AddLicenseHeaders.FALSE));
        org.junit.Assert.assertNull(claimStatistic41);
        org.junit.Assert.assertTrue("'" + licenseFilter42 + "' != '" + org.apache.rat.license.LicenseSetFactory.LicenseFilter.all + "'", licenseFilter42.equals(org.apache.rat.license.LicenseSetFactory.LicenseFilter.all));
        org.junit.Assert.assertNotNull(iLicenseFamilySet45);
        org.junit.Assert.assertNotNull(strSet47);
        org.junit.Assert.assertNotNull(iLicenseSet48);
        org.junit.Assert.assertNotNull(builder49);
        org.junit.Assert.assertNotNull(builder50);
        org.junit.Assert.assertNotNull(defaults51);
        org.junit.Assert.assertNotNull(builder52);
        org.junit.Assert.assertNotNull(defaults53);
        org.junit.Assert.assertTrue("'" + licenseFilter54 + "' != '" + org.apache.rat.license.LicenseSetFactory.LicenseFilter.approved + "'", licenseFilter54.equals(org.apache.rat.license.LicenseSetFactory.LicenseFilter.approved));
        org.junit.Assert.assertNotNull(iLicenseFamilySet55);
        org.junit.Assert.assertNotNull(iLicenseFamilySet56);
        org.junit.Assert.assertNotNull(iLicenseFamilySet57);
        org.junit.Assert.assertNotNull(strArray63);
        org.junit.Assert.assertTrue("'" + boolean65 + "' != '" + true + "'", boolean65 == true);
        org.junit.Assert.assertTrue("'" + boolean67 + "' != '" + true + "'", boolean67 == true);
        org.junit.Assert.assertNotNull(strItor68);
        org.junit.Assert.assertTrue("'" + int70 + "' != '" + 0 + "'", int70 == 0);
        org.junit.Assert.assertNotNull(strSet72);
        org.junit.Assert.assertTrue("'" + boolean73 + "' != '" + true + "'", boolean73 == true);
        org.junit.Assert.assertNotNull(strSet75);
    }

    @Test
    public void test13864() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest27.test13864");
        org.apache.rat.analysis.matchers.SimpleTextMatcher simpleTextMatcher1 = new org.apache.rat.analysis.matchers.SimpleTextMatcher("RegexBuilder: d4148d3a-edbc-4672-b347-0fa619553f91");
    }

    @Test
    public void test13865() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest27.test13865");
        org.apache.rat.utils.DefaultLog defaultLog0 = org.apache.rat.utils.DefaultLog.INSTANCE;
        org.apache.rat.license.ILicense.Builder builder1 = org.apache.rat.license.ILicense.builder();
        org.apache.rat.license.ILicense.Builder builder3 = builder1.setLicenseFamilyCategory("");
        org.apache.rat.analysis.matchers.CopyrightMatcher copyrightMatcher7 = new org.apache.rat.analysis.matchers.CopyrightMatcher("", "GPL1 ", "hi!");
        org.apache.rat.analysis.IHeaderMatcher.State state8 = copyrightMatcher7.finalizeState();
        org.apache.rat.license.ILicense.Builder builder9 = builder3.setMatcher((org.apache.rat.analysis.IHeaderMatcher) copyrightMatcher7);
        org.apache.rat.license.ILicense.Builder builder11 = builder9.setLicenseFamilyCategory("");
        defaultLog0.error((java.lang.Object) builder11);
        org.apache.rat.analysis.matchers.CopyrightMatcher copyrightMatcher16 = new org.apache.rat.analysis.matchers.CopyrightMatcher("", "GPL1 ", "hi!");
        copyrightMatcher16.reset();
        org.apache.rat.license.ILicense.Builder builder18 = builder11.setMatcher((org.apache.rat.analysis.IHeaderMatcher) copyrightMatcher16);
        org.apache.rat.configuration.builders.SpdxBuilder spdxBuilder19 = org.apache.rat.analysis.IHeaderMatcher.Builder.spdx();
        java.lang.String str20 = spdxBuilder19.toString();
        org.apache.rat.configuration.builders.SpdxBuilder spdxBuilder22 = spdxBuilder19.setName("ef7a8b13-64c3-4510-bb0c-dbf208e1e73f");
        org.apache.rat.license.ILicense.Builder builder23 = builder18.setMatcher((org.apache.rat.analysis.IHeaderMatcher.Builder) spdxBuilder19);
        org.apache.rat.license.ILicense.Builder builder25 = builder23.setName("DOJO ");
        org.apache.rat.analysis.IHeaderMatcher iHeaderMatcher26 = null;
        org.apache.rat.license.ILicense.Builder builder27 = builder23.setMatcher(iHeaderMatcher26);
        org.junit.Assert.assertNotNull(defaultLog0);
        org.junit.Assert.assertNotNull(builder1);
        org.junit.Assert.assertNotNull(builder3);
        org.junit.Assert.assertTrue("'" + state8 + "' != '" + org.apache.rat.analysis.IHeaderMatcher.State.f + "'", state8.equals(org.apache.rat.analysis.IHeaderMatcher.State.f));
        org.junit.Assert.assertNotNull(builder9);
        org.junit.Assert.assertNotNull(builder11);
        org.junit.Assert.assertNotNull(builder18);
        org.junit.Assert.assertNotNull(spdxBuilder19);
        org.junit.Assert.assertEquals("'" + str20 + "' != '" + "SpdxBuilder: null" + "'", str20, "SpdxBuilder: null");
        org.junit.Assert.assertNotNull(spdxBuilder22);
        org.junit.Assert.assertNotNull(builder23);
        org.junit.Assert.assertNotNull(builder25);
        org.junit.Assert.assertNotNull(builder27);
    }

    @Test
    public void test13866() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest27.test13866");
        org.apache.rat.utils.ReportingSet<java.lang.String> strSet0 = new org.apache.rat.utils.ReportingSet<java.lang.String>();
        org.apache.rat.utils.ReportingSet<java.lang.String> strSet2 = strSet0.tailSet("hi!");
        org.apache.rat.configuration.LicenseReader[] licenseReaderArray3 = new org.apache.rat.configuration.LicenseReader[] {};
        org.apache.rat.configuration.LicenseReader[] licenseReaderArray4 = strSet2.toArray(licenseReaderArray3);
        org.apache.rat.utils.Log log5 = null;
        org.apache.rat.ReportConfiguration reportConfiguration6 = new org.apache.rat.ReportConfiguration(log5);
        org.apache.rat.report.claim.ClaimStatistic claimStatistic7 = org.apache.rat.Reporter.report(reportConfiguration6);
        org.apache.rat.utils.Log log8 = null;
        org.apache.rat.ReportConfiguration reportConfiguration9 = new org.apache.rat.ReportConfiguration(log8);
        org.apache.rat.report.claim.ClaimStatistic claimStatistic10 = org.apache.rat.Reporter.report(reportConfiguration9);
        org.apache.rat.utils.ReportingSet.Options options11 = org.apache.rat.utils.ReportingSet.Options.OVERWRITE;
        reportConfiguration9.licenseDuplicateOption(options11);
        reportConfiguration6.familyDuplicateOption(options11);
        org.apache.rat.utils.ReportingSet<java.lang.String> strSet14 = strSet2.setDuplicateOption(options11);
        java.util.Comparator<? super java.lang.String> wildcardComparator15 = strSet2.comparator();
        strSet2.clear();
        java.lang.String[] strArray22 = new java.lang.String[] { "http://org/apache/rat/meta-data#LicenseFamilyCategory", "Datum [ name ='http://org/apache/rat/meta-data#LicenseFamilyCategory',value ='GPL1  ']", "MANIFEST.MF", "AllBuilder:", "The MIT License" };
        org.apache.rat.utils.ReportingSet<java.lang.String> strSet23 = new org.apache.rat.utils.ReportingSet<java.lang.String>();
        boolean boolean24 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strSet23, strArray22);
        boolean boolean26 = strSet23.addIfNotPresent("http://org/apache/rat/meta-data#LicenseFamilyName");
        java.util.Iterator<java.lang.String> strItor27 = strSet23.iterator();
        strSet23.clear();
        strSet23.clear();
        java.lang.Object[] objArray30 = strSet23.toArray();
        java.util.stream.Stream<java.lang.String> strStream31 = strSet23.stream();
        org.apache.rat.configuration.builders.CopyrightBuilder copyrightBuilder32 = org.apache.rat.analysis.IHeaderMatcher.Builder.copyright();
        java.lang.String str33 = copyrightBuilder32.toString();
        org.apache.rat.configuration.builders.CopyrightBuilder copyrightBuilder35 = copyrightBuilder32.setStart("archive");
        java.lang.String str36 = copyrightBuilder32.toString();
        org.apache.rat.configuration.builders.AllBuilder allBuilder37 = new org.apache.rat.configuration.builders.AllBuilder();
        org.apache.rat.analysis.IHeaderMatcher iHeaderMatcher38 = allBuilder37.build();
        org.apache.rat.analysis.IHeaderMatcher iHeaderMatcher39 = allBuilder37.build();
        org.apache.rat.configuration.builders.AllBuilder allBuilder40 = new org.apache.rat.configuration.builders.AllBuilder();
        org.apache.rat.analysis.IHeaderMatcher iHeaderMatcher41 = allBuilder40.build();
        org.apache.rat.analysis.IHeaderMatcher iHeaderMatcher42 = allBuilder40.build();
        org.apache.rat.analysis.IHeaderMatcher iHeaderMatcher43 = allBuilder40.build();
        org.apache.rat.configuration.builders.CopyrightBuilder copyrightBuilder44 = org.apache.rat.analysis.IHeaderMatcher.Builder.copyright();
        java.lang.String str45 = copyrightBuilder44.toString();
        org.apache.rat.configuration.builders.CopyrightBuilder copyrightBuilder47 = copyrightBuilder44.setEnd(".cvsignore");
        boolean boolean48 = copyrightBuilder44.hasId();
        org.apache.rat.configuration.builders.CopyrightBuilder copyrightBuilder50 = copyrightBuilder44.setOwner("3c840dc2-bef0-42b5-b26c-35a568d53a24");
        org.apache.rat.configuration.builders.AbstractBuilder abstractBuilder51 = allBuilder40.add((org.apache.rat.analysis.IHeaderMatcher.Builder) copyrightBuilder44);
        org.apache.rat.configuration.builders.AbstractBuilder abstractBuilder52 = allBuilder37.add((org.apache.rat.analysis.IHeaderMatcher.Builder) copyrightBuilder44);
        org.apache.rat.configuration.builders.AllBuilder allBuilder53 = new org.apache.rat.configuration.builders.AllBuilder();
        org.apache.rat.analysis.IHeaderMatcher iHeaderMatcher54 = allBuilder53.build();
        org.apache.rat.analysis.IHeaderMatcher iHeaderMatcher55 = allBuilder53.build();
        org.apache.rat.configuration.builders.AllBuilder allBuilder56 = new org.apache.rat.configuration.builders.AllBuilder();
        org.apache.rat.analysis.IHeaderMatcher iHeaderMatcher57 = allBuilder56.build();
        org.apache.rat.analysis.IHeaderMatcher iHeaderMatcher58 = allBuilder56.build();
        org.apache.rat.analysis.IHeaderMatcher iHeaderMatcher59 = allBuilder56.build();
        org.apache.rat.configuration.builders.CopyrightBuilder copyrightBuilder60 = org.apache.rat.analysis.IHeaderMatcher.Builder.copyright();
        java.lang.String str61 = copyrightBuilder60.toString();
        org.apache.rat.configuration.builders.CopyrightBuilder copyrightBuilder63 = copyrightBuilder60.setEnd(".cvsignore");
        boolean boolean64 = copyrightBuilder60.hasId();
        org.apache.rat.configuration.builders.CopyrightBuilder copyrightBuilder66 = copyrightBuilder60.setOwner("3c840dc2-bef0-42b5-b26c-35a568d53a24");
        org.apache.rat.configuration.builders.AbstractBuilder abstractBuilder67 = allBuilder56.add((org.apache.rat.analysis.IHeaderMatcher.Builder) copyrightBuilder60);
        org.apache.rat.configuration.builders.AbstractBuilder abstractBuilder68 = allBuilder53.add((org.apache.rat.analysis.IHeaderMatcher.Builder) copyrightBuilder60);
        org.apache.rat.configuration.builders.CopyrightBuilder[] copyrightBuilderArray69 = new org.apache.rat.configuration.builders.CopyrightBuilder[] { copyrightBuilder32, copyrightBuilder44, copyrightBuilder60 };
        org.apache.rat.configuration.builders.CopyrightBuilder[] copyrightBuilderArray70 = strSet23.toArray(copyrightBuilderArray69);
        org.apache.rat.analysis.matchers.FullTextMatcher fullTextMatcher73 = new org.apache.rat.analysis.matchers.FullTextMatcher("http://org/apache/rat/meta-data#FileCategory", "8f82a952-5bfd-446b-ac79-15beef5b3f17");
        fullTextMatcher73.reset();
        java.lang.String str75 = fullTextMatcher73.getId();
        org.apache.rat.analysis.matchers.FullTextMatcher fullTextMatcher78 = new org.apache.rat.analysis.matchers.FullTextMatcher("TMF  ", "Apache License Version 2.0");
        org.apache.rat.analysis.IHeaderMatcher.State state79 = fullTextMatcher78.finalizeState();
        fullTextMatcher78.reset();
        fullTextMatcher78.reset();
        org.apache.rat.analysis.IHeaderMatcher.State state82 = fullTextMatcher78.currentState();
        java.util.regex.Pattern pattern85 = null;
        org.apache.rat.analysis.matchers.SimpleRegexMatcher simpleRegexMatcher86 = new org.apache.rat.analysis.matchers.SimpleRegexMatcher("", pattern85);
        org.apache.rat.analysis.matchers.NotMatcher notMatcher87 = new org.apache.rat.analysis.matchers.NotMatcher("GNU General Public License, version 2", (org.apache.rat.analysis.IHeaderMatcher) simpleRegexMatcher86);
        org.apache.rat.analysis.IHeaderMatcher.State state88 = notMatcher87.finalizeState();
        java.lang.String str89 = notMatcher87.toString();
        org.apache.rat.analysis.IHeaderMatcher.State state90 = notMatcher87.currentState();
        org.apache.rat.analysis.IHeaderMatcher.State state91 = notMatcher87.currentState();
        org.apache.rat.analysis.matchers.AbstractHeaderMatcher[] abstractHeaderMatcherArray92 = new org.apache.rat.analysis.matchers.AbstractHeaderMatcher[] { fullTextMatcher73, fullTextMatcher78, notMatcher87 };
        org.apache.rat.analysis.matchers.AbstractHeaderMatcher[] abstractHeaderMatcherArray93 = strSet23.toArray(abstractHeaderMatcherArray92);
        org.apache.rat.analysis.IHeaderMatcher[] iHeaderMatcherArray94 = strSet2.toArray((org.apache.rat.analysis.IHeaderMatcher[]) abstractHeaderMatcherArray92);
        org.junit.Assert.assertNotNull(strSet2);
        org.junit.Assert.assertNotNull(licenseReaderArray3);
        org.junit.Assert.assertNotNull(licenseReaderArray4);
        org.junit.Assert.assertNull(claimStatistic7);
        org.junit.Assert.assertNull(claimStatistic10);
        org.junit.Assert.assertTrue("'" + options11 + "' != '" + org.apache.rat.utils.ReportingSet.Options.OVERWRITE + "'", options11.equals(org.apache.rat.utils.ReportingSet.Options.OVERWRITE));
        org.junit.Assert.assertNotNull(strSet14);
        org.junit.Assert.assertNull(wildcardComparator15);
        org.junit.Assert.assertNotNull(strArray22);
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + true + "'", boolean24 == true);
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + true + "'", boolean26 == true);
        org.junit.Assert.assertNotNull(strItor27);
        org.junit.Assert.assertNotNull(objArray30);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray30), "[]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray30), "[]");
        org.junit.Assert.assertNotNull(strStream31);
        org.junit.Assert.assertNotNull(copyrightBuilder32);
        org.junit.Assert.assertEquals("'" + str33 + "' != '" + "Copyright Builder: s:null e:null o:null" + "'", str33, "Copyright Builder: s:null e:null o:null");
        org.junit.Assert.assertNotNull(copyrightBuilder35);
        org.junit.Assert.assertEquals("'" + str36 + "' != '" + "Copyright Builder: s:archive e:null o:null" + "'", str36, "Copyright Builder: s:archive e:null o:null");
        org.junit.Assert.assertNotNull(iHeaderMatcher38);
        org.junit.Assert.assertNotNull(iHeaderMatcher39);
        org.junit.Assert.assertNotNull(iHeaderMatcher41);
        org.junit.Assert.assertNotNull(iHeaderMatcher42);
        org.junit.Assert.assertNotNull(iHeaderMatcher43);
        org.junit.Assert.assertNotNull(copyrightBuilder44);
        org.junit.Assert.assertEquals("'" + str45 + "' != '" + "Copyright Builder: s:null e:null o:null" + "'", str45, "Copyright Builder: s:null e:null o:null");
        org.junit.Assert.assertNotNull(copyrightBuilder47);
        org.junit.Assert.assertTrue("'" + boolean48 + "' != '" + false + "'", boolean48 == false);
        org.junit.Assert.assertNotNull(copyrightBuilder50);
        org.junit.Assert.assertNotNull(abstractBuilder51);
        org.junit.Assert.assertNotNull(abstractBuilder52);
        org.junit.Assert.assertNotNull(iHeaderMatcher54);
        org.junit.Assert.assertNotNull(iHeaderMatcher55);
        org.junit.Assert.assertNotNull(iHeaderMatcher57);
        org.junit.Assert.assertNotNull(iHeaderMatcher58);
        org.junit.Assert.assertNotNull(iHeaderMatcher59);
        org.junit.Assert.assertNotNull(copyrightBuilder60);
        org.junit.Assert.assertEquals("'" + str61 + "' != '" + "Copyright Builder: s:null e:null o:null" + "'", str61, "Copyright Builder: s:null e:null o:null");
        org.junit.Assert.assertNotNull(copyrightBuilder63);
        org.junit.Assert.assertTrue("'" + boolean64 + "' != '" + false + "'", boolean64 == false);
        org.junit.Assert.assertNotNull(copyrightBuilder66);
        org.junit.Assert.assertNotNull(abstractBuilder67);
        org.junit.Assert.assertNotNull(abstractBuilder68);
        org.junit.Assert.assertNotNull(copyrightBuilderArray69);
        org.junit.Assert.assertNotNull(copyrightBuilderArray70);
        org.junit.Assert.assertEquals("'" + str75 + "' != '" + "http://org/apache/rat/meta-data#FileCategory" + "'", str75, "http://org/apache/rat/meta-data#FileCategory");
        org.junit.Assert.assertTrue("'" + state79 + "' != '" + org.apache.rat.analysis.IHeaderMatcher.State.f + "'", state79.equals(org.apache.rat.analysis.IHeaderMatcher.State.f));
        org.junit.Assert.assertTrue("'" + state82 + "' != '" + org.apache.rat.analysis.IHeaderMatcher.State.i + "'", state82.equals(org.apache.rat.analysis.IHeaderMatcher.State.i));
        org.junit.Assert.assertTrue("'" + state88 + "' != '" + org.apache.rat.analysis.IHeaderMatcher.State.t + "'", state88.equals(org.apache.rat.analysis.IHeaderMatcher.State.t));
        org.junit.Assert.assertEquals("'" + str89 + "' != '" + "GNU General Public License, version 2" + "'", str89, "GNU General Public License, version 2");
        org.junit.Assert.assertTrue("'" + state90 + "' != '" + org.apache.rat.analysis.IHeaderMatcher.State.t + "'", state90.equals(org.apache.rat.analysis.IHeaderMatcher.State.t));
        org.junit.Assert.assertTrue("'" + state91 + "' != '" + org.apache.rat.analysis.IHeaderMatcher.State.t + "'", state91.equals(org.apache.rat.analysis.IHeaderMatcher.State.t));
        org.junit.Assert.assertNotNull(abstractHeaderMatcherArray92);
        org.junit.Assert.assertNotNull(abstractHeaderMatcherArray93);
        org.junit.Assert.assertNotNull(iHeaderMatcherArray94);
    }

    @Test
    public void test13867() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest27.test13867");
        java.io.Writer writer0 = null;
        org.apache.rat.report.xml.writer.impl.base.XmlWriter xmlWriter1 = new org.apache.rat.report.xml.writer.impl.base.XmlWriter(writer0);
        org.apache.rat.report.claim.impl.xml.SimpleXmlClaimReporter simpleXmlClaimReporter2 = new org.apache.rat.report.claim.impl.xml.SimpleXmlClaimReporter((org.apache.rat.report.xml.writer.IXmlWriter) xmlWriter1);
        org.apache.rat.report.claim.impl.xml.SimpleXmlClaimReporter simpleXmlClaimReporter3 = new org.apache.rat.report.claim.impl.xml.SimpleXmlClaimReporter((org.apache.rat.report.xml.writer.IXmlWriter) xmlWriter1);
        org.apache.rat.report.claim.impl.xml.SimpleXmlClaimReporter simpleXmlClaimReporter4 = new org.apache.rat.report.claim.impl.xml.SimpleXmlClaimReporter((org.apache.rat.report.xml.writer.IXmlWriter) xmlWriter1);
        org.apache.rat.report.claim.impl.xml.SimpleXmlClaimReporter simpleXmlClaimReporter5 = new org.apache.rat.report.claim.impl.xml.SimpleXmlClaimReporter((org.apache.rat.report.xml.writer.IXmlWriter) xmlWriter1);
        org.apache.rat.report.claim.impl.xml.SimpleXmlClaimReporter simpleXmlClaimReporter6 = new org.apache.rat.report.claim.impl.xml.SimpleXmlClaimReporter((org.apache.rat.report.xml.writer.IXmlWriter) xmlWriter1);
        org.apache.rat.report.claim.impl.xml.SimpleXmlClaimReporter simpleXmlClaimReporter7 = new org.apache.rat.report.claim.impl.xml.SimpleXmlClaimReporter((org.apache.rat.report.xml.writer.IXmlWriter) xmlWriter1);
        // The following exception was thrown during execution in test generation
        try {
            org.apache.rat.report.xml.writer.IXmlWriter iXmlWriter10 = xmlWriter1.attribute((java.lang.CharSequence) "66741", (java.lang.CharSequence) "07247");
            org.junit.Assert.fail("Expected exception of type org.apache.rat.report.xml.writer.OperationNotAllowedException; message: Close called before an element has been opened.");
        } catch (org.apache.rat.report.xml.writer.OperationNotAllowedException e) {
            // Expected exception.
        }
    }

    @Test
    public void test13868() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest27.test13868");
        org.apache.rat.configuration.builders.AllBuilder allBuilder1 = new org.apache.rat.configuration.builders.AllBuilder();
        java.lang.String str2 = allBuilder1.toString();
        java.lang.String str3 = allBuilder1.toString();
        java.lang.String str4 = allBuilder1.toString();
        org.apache.rat.analysis.IHeaderMatcher iHeaderMatcher5 = allBuilder1.build();
        org.apache.rat.analysis.matchers.NotMatcher notMatcher6 = new org.apache.rat.analysis.matchers.NotMatcher("38e4211d-0f24-4ec0-aa5c-260c68412f39", iHeaderMatcher5);
        org.apache.rat.analysis.IHeaderMatcher.State state8 = notMatcher6.matches("6385b116-d4dd-485c-836f-45703c366b71");
        notMatcher6.reset();
        org.junit.Assert.assertEquals("'" + str2 + "' != '" + "AllBuilder:" + "'", str2, "AllBuilder:");
        org.junit.Assert.assertEquals("'" + str3 + "' != '" + "AllBuilder:" + "'", str3, "AllBuilder:");
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "AllBuilder:" + "'", str4, "AllBuilder:");
        org.junit.Assert.assertNotNull(iHeaderMatcher5);
        org.junit.Assert.assertTrue("'" + state8 + "' != '" + org.apache.rat.analysis.IHeaderMatcher.State.f + "'", state8.equals(org.apache.rat.analysis.IHeaderMatcher.State.f));
    }

    @Test
    public void test13869() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest27.test13869");
        org.apache.rat.license.ILicenseFamilyBuilder iLicenseFamilyBuilder0 = new org.apache.rat.license.ILicenseFamilyBuilder();
        java.lang.String str1 = iLicenseFamilyBuilder0.getCategory();
        org.apache.rat.license.ILicenseFamily.Builder builder3 = iLicenseFamilyBuilder0.setLicenseFamilyCategory("3e2b228d-d5ff-4444-8d8c-d614494b2426");
        org.apache.rat.license.ILicenseFamily.Builder builder5 = iLicenseFamilyBuilder0.setLicenseFamilyCategory("f false");
        org.apache.rat.license.ILicenseFamily.Builder builder7 = iLicenseFamilyBuilder0.setLicenseFamilyCategory("Datum [ name ='http://org/apache/rat/meta-data#ApprovedLicense',value ='false ']");
        java.lang.String str8 = iLicenseFamilyBuilder0.getCategory();
        java.lang.String str9 = iLicenseFamilyBuilder0.getCategory();
        org.apache.rat.license.ILicenseFamily.Builder builder11 = iLicenseFamilyBuilder0.setLicenseFamilyName("50413ae6-037c-4fdd-a790-7c8514c95b09");
        org.junit.Assert.assertNull(str1);
        org.junit.Assert.assertNotNull(builder3);
        org.junit.Assert.assertNotNull(builder5);
        org.junit.Assert.assertNotNull(builder7);
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "Datum [ name ='http://org/apache/rat/meta-data#ApprovedLicense',value ='false ']" + "'", str8, "Datum [ name ='http://org/apache/rat/meta-data#ApprovedLicense',value ='false ']");
        org.junit.Assert.assertEquals("'" + str9 + "' != '" + "Datum [ name ='http://org/apache/rat/meta-data#ApprovedLicense',value ='false ']" + "'", str9, "Datum [ name ='http://org/apache/rat/meta-data#ApprovedLicense',value ='false ']");
        org.junit.Assert.assertNotNull(builder11);
    }

    @Test
    public void test13870() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest27.test13870");
        org.apache.rat.analysis.matchers.FullTextMatcher fullTextMatcher1 = new org.apache.rat.analysis.matchers.FullTextMatcher("Datum [ name ='http://org/apache/rat/meta-data#LicenseFamilyName',value ='Academic Free License, Version 2.1 ']");
        fullTextMatcher1.reset();
        fullTextMatcher1.reset();
        boolean boolean5 = fullTextMatcher1.doMatch("Regex");
        boolean boolean7 = fullTextMatcher1.doMatch("efbf7b27-f2c9-43b8-b1ed-b730815dabfe");
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
    }

    @Test
    public void test13871() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest27.test13871");
        org.apache.rat.config.SourceCodeManagementSystems sourceCodeManagementSystems0 = org.apache.rat.config.SourceCodeManagementSystems.SUBVERSION;
        boolean boolean1 = sourceCodeManagementSystems0.hasIgnoreFile();
        java.util.List<java.lang.String> strList2 = sourceCodeManagementSystems0.getExclusions();
        java.util.List<java.lang.String> strList3 = sourceCodeManagementSystems0.getExclusions();
        boolean boolean4 = sourceCodeManagementSystems0.hasIgnoreFile();
        java.util.List<java.lang.String> strList5 = sourceCodeManagementSystems0.getExclusions();
        boolean boolean6 = sourceCodeManagementSystems0.hasIgnoreFile();
        java.lang.String str7 = sourceCodeManagementSystems0.getIgnoreFile();
        boolean boolean8 = sourceCodeManagementSystems0.hasIgnoreFile();
        java.util.List<java.lang.String> strList9 = sourceCodeManagementSystems0.getExclusions();
        java.lang.String str10 = sourceCodeManagementSystems0.getIgnoreFile();
        java.util.List<java.lang.String> strList11 = sourceCodeManagementSystems0.getExclusions();
        org.junit.Assert.assertTrue("'" + sourceCodeManagementSystems0 + "' != '" + org.apache.rat.config.SourceCodeManagementSystems.SUBVERSION + "'", sourceCodeManagementSystems0.equals(org.apache.rat.config.SourceCodeManagementSystems.SUBVERSION));
        org.junit.Assert.assertTrue("'" + boolean1 + "' != '" + false + "'", boolean1 == false);
        org.junit.Assert.assertNotNull(strList2);
        org.junit.Assert.assertNotNull(strList3);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertNotNull(strList5);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertNull(str7);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertNotNull(strList9);
        org.junit.Assert.assertNull(str10);
        org.junit.Assert.assertNotNull(strList11);
    }

    @Test
    public void test13872() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest27.test13872");
        org.apache.rat.analysis.matchers.FullTextMatcher fullTextMatcher2 = new org.apache.rat.analysis.matchers.FullTextMatcher("TMF  ", "Apache License Version 2.0");
        org.apache.rat.analysis.IHeaderMatcher.State state4 = fullTextMatcher2.matches("http://org/apache/rat/meta-data#HeaderCategory");
        org.apache.rat.analysis.IHeaderMatcher.State state6 = fullTextMatcher2.matches("03f57a5c-be91-4df3-b5be-50bd5e31e571");
        java.lang.Class<?> wildcardClass7 = state6.getClass();
        org.junit.Assert.assertTrue("'" + state4 + "' != '" + org.apache.rat.analysis.IHeaderMatcher.State.i + "'", state4.equals(org.apache.rat.analysis.IHeaderMatcher.State.i));
        org.junit.Assert.assertTrue("'" + state6 + "' != '" + org.apache.rat.analysis.IHeaderMatcher.State.i + "'", state6.equals(org.apache.rat.analysis.IHeaderMatcher.State.i));
        org.junit.Assert.assertNotNull(wildcardClass7);
    }

    @Test
    public void test13873() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest27.test13873");
        java.io.Writer writer0 = null;
        org.apache.rat.report.xml.writer.impl.base.XmlWriter xmlWriter1 = new org.apache.rat.report.xml.writer.impl.base.XmlWriter(writer0);
        org.apache.rat.report.claim.impl.xml.SimpleXmlClaimReporter simpleXmlClaimReporter2 = new org.apache.rat.report.claim.impl.xml.SimpleXmlClaimReporter((org.apache.rat.report.xml.writer.IXmlWriter) xmlWriter1);
        org.apache.rat.report.claim.impl.xml.SimpleXmlClaimReporter simpleXmlClaimReporter3 = new org.apache.rat.report.claim.impl.xml.SimpleXmlClaimReporter((org.apache.rat.report.xml.writer.IXmlWriter) xmlWriter1);
        org.apache.rat.report.claim.impl.xml.SimpleXmlClaimReporter simpleXmlClaimReporter4 = new org.apache.rat.report.claim.impl.xml.SimpleXmlClaimReporter((org.apache.rat.report.xml.writer.IXmlWriter) xmlWriter1);
        org.apache.rat.report.claim.impl.xml.SimpleXmlClaimReporter simpleXmlClaimReporter5 = new org.apache.rat.report.claim.impl.xml.SimpleXmlClaimReporter((org.apache.rat.report.xml.writer.IXmlWriter) xmlWriter1);
        org.apache.rat.report.claim.impl.xml.SimpleXmlClaimReporter simpleXmlClaimReporter6 = new org.apache.rat.report.claim.impl.xml.SimpleXmlClaimReporter((org.apache.rat.report.xml.writer.IXmlWriter) xmlWriter1);
        org.apache.rat.report.claim.impl.xml.SimpleXmlClaimReporter simpleXmlClaimReporter7 = new org.apache.rat.report.claim.impl.xml.SimpleXmlClaimReporter((org.apache.rat.report.xml.writer.IXmlWriter) xmlWriter1);
        org.apache.rat.report.claim.impl.xml.SimpleXmlClaimReporter simpleXmlClaimReporter8 = new org.apache.rat.report.claim.impl.xml.SimpleXmlClaimReporter((org.apache.rat.report.xml.writer.IXmlWriter) xmlWriter1);
        org.apache.rat.report.claim.impl.xml.SimpleXmlClaimReporter simpleXmlClaimReporter9 = new org.apache.rat.report.claim.impl.xml.SimpleXmlClaimReporter((org.apache.rat.report.xml.writer.IXmlWriter) xmlWriter1);
        org.apache.rat.report.claim.impl.xml.SimpleXmlClaimReporter simpleXmlClaimReporter10 = new org.apache.rat.report.claim.impl.xml.SimpleXmlClaimReporter((org.apache.rat.report.xml.writer.IXmlWriter) xmlWriter1);
        org.apache.rat.report.claim.impl.xml.SimpleXmlClaimReporter simpleXmlClaimReporter11 = new org.apache.rat.report.claim.impl.xml.SimpleXmlClaimReporter((org.apache.rat.report.xml.writer.IXmlWriter) xmlWriter1);
        org.apache.rat.report.claim.impl.xml.SimpleXmlClaimReporter simpleXmlClaimReporter12 = new org.apache.rat.report.claim.impl.xml.SimpleXmlClaimReporter((org.apache.rat.report.xml.writer.IXmlWriter) xmlWriter1);
        org.apache.rat.report.claim.impl.xml.SimpleXmlClaimReporter simpleXmlClaimReporter13 = new org.apache.rat.report.claim.impl.xml.SimpleXmlClaimReporter((org.apache.rat.report.xml.writer.IXmlWriter) xmlWriter1);
        org.apache.rat.report.claim.impl.xml.SimpleXmlClaimReporter simpleXmlClaimReporter14 = new org.apache.rat.report.claim.impl.xml.SimpleXmlClaimReporter((org.apache.rat.report.xml.writer.IXmlWriter) xmlWriter1);
        org.apache.rat.report.claim.impl.xml.SimpleXmlClaimReporter simpleXmlClaimReporter15 = new org.apache.rat.report.claim.impl.xml.SimpleXmlClaimReporter((org.apache.rat.report.xml.writer.IXmlWriter) xmlWriter1);
        org.apache.rat.report.claim.impl.xml.SimpleXmlClaimReporter simpleXmlClaimReporter16 = new org.apache.rat.report.claim.impl.xml.SimpleXmlClaimReporter((org.apache.rat.report.xml.writer.IXmlWriter) xmlWriter1);
        org.apache.rat.report.claim.impl.xml.SimpleXmlClaimReporter simpleXmlClaimReporter17 = new org.apache.rat.report.claim.impl.xml.SimpleXmlClaimReporter((org.apache.rat.report.xml.writer.IXmlWriter) xmlWriter1);
        // The following exception was thrown during execution in test generation
        try {
            org.apache.rat.report.xml.writer.IXmlWriter iXmlWriter18 = xmlWriter1.closeDocument();
            org.junit.Assert.fail("Expected exception of type org.apache.rat.report.xml.writer.OperationNotAllowedException; message: Close called before an element has been opened.");
        } catch (org.apache.rat.report.xml.writer.OperationNotAllowedException e) {
            // Expected exception.
        }
    }

    @Test
    public void test13874() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest27.test13874");
        org.apache.rat.utils.Log log0 = null;
        org.apache.rat.ReportConfiguration reportConfiguration1 = new org.apache.rat.ReportConfiguration(log0);
        org.apache.rat.report.claim.ClaimStatistic claimStatistic2 = org.apache.rat.Reporter.report(reportConfiguration1);
        org.apache.commons.io.function.IOSupplier<java.io.OutputStream> outputStreamIOSupplier3 = reportConfiguration1.getOutput();
        org.apache.rat.license.ILicense iLicense4 = null;
        reportConfiguration1.addLicense(iLicense4);
        reportConfiguration1.addApprovedLicenseCategory("6481fb19-38f0-43f5-ab95-caf84a069ee1");
        org.apache.rat.utils.Log log8 = reportConfiguration1.getLog();
        org.apache.rat.utils.Log log9 = null;
        org.apache.rat.ReportConfiguration reportConfiguration10 = new org.apache.rat.ReportConfiguration(log9);
        java.io.FilenameFilter filenameFilter11 = reportConfiguration10.getInputFileFilter();
        org.apache.rat.license.LicenseSetFactory.LicenseFilter licenseFilter12 = org.apache.rat.license.LicenseSetFactory.LicenseFilter.all;
        java.util.SortedSet<org.apache.rat.license.ILicense> iLicenseSet13 = reportConfiguration10.getLicenses(licenseFilter12);
        org.apache.rat.license.ILicenseFamily iLicenseFamily14 = null;
        reportConfiguration10.addFamily(iLicenseFamily14);
        org.apache.commons.io.filefilter.IOFileFilter iOFileFilter16 = reportConfiguration10.getDirectoryFilter();
        org.apache.rat.utils.Log log17 = null;
        org.apache.rat.ReportConfiguration reportConfiguration18 = new org.apache.rat.ReportConfiguration(log17);
        java.io.FilenameFilter filenameFilter19 = reportConfiguration18.getInputFileFilter();
        org.apache.rat.license.LicenseSetFactory.LicenseFilter licenseFilter20 = org.apache.rat.license.LicenseSetFactory.LicenseFilter.all;
        java.util.SortedSet<org.apache.rat.license.ILicense> iLicenseSet21 = reportConfiguration18.getLicenses(licenseFilter20);
        org.apache.rat.config.AddLicenseHeaders addLicenseHeaders22 = org.apache.rat.config.AddLicenseHeaders.FALSE;
        reportConfiguration18.setAddLicenseHeaders(addLicenseHeaders22);
        org.apache.rat.utils.Log log24 = null;
        org.apache.rat.ReportConfiguration reportConfiguration25 = new org.apache.rat.ReportConfiguration(log24);
        org.apache.rat.report.claim.ClaimStatistic claimStatistic26 = org.apache.rat.Reporter.report(reportConfiguration25);
        org.apache.rat.license.LicenseSetFactory.LicenseFilter licenseFilter27 = org.apache.rat.license.LicenseSetFactory.LicenseFilter.all;
        org.apache.rat.Reporter.listLicenses(reportConfiguration25, licenseFilter27);
        org.apache.rat.Reporter.listLicenses(reportConfiguration18, licenseFilter27);
        org.apache.rat.utils.Log log30 = null;
        org.apache.rat.ReportConfiguration reportConfiguration31 = new org.apache.rat.ReportConfiguration(log30);
        java.io.FilenameFilter filenameFilter32 = reportConfiguration31.getInputFileFilter();
        org.apache.rat.license.LicenseSetFactory.LicenseFilter licenseFilter33 = org.apache.rat.license.LicenseSetFactory.LicenseFilter.all;
        java.util.SortedSet<org.apache.rat.license.ILicense> iLicenseSet34 = reportConfiguration31.getLicenses(licenseFilter33);
        org.apache.rat.config.AddLicenseHeaders addLicenseHeaders35 = org.apache.rat.config.AddLicenseHeaders.FALSE;
        reportConfiguration31.setAddLicenseHeaders(addLicenseHeaders35);
        org.apache.rat.utils.Log log37 = null;
        org.apache.rat.ReportConfiguration reportConfiguration38 = new org.apache.rat.ReportConfiguration(log37);
        org.apache.rat.report.claim.ClaimStatistic claimStatistic39 = org.apache.rat.Reporter.report(reportConfiguration38);
        org.apache.rat.license.LicenseSetFactory.LicenseFilter licenseFilter40 = org.apache.rat.license.LicenseSetFactory.LicenseFilter.all;
        org.apache.rat.Reporter.listLicenses(reportConfiguration38, licenseFilter40);
        org.apache.rat.Reporter.listLicenses(reportConfiguration31, licenseFilter40);
        org.apache.rat.Reporter.listLicenses(reportConfiguration18, licenseFilter40);
        org.apache.rat.utils.Log log44 = null;
        org.apache.rat.ReportConfiguration reportConfiguration45 = new org.apache.rat.ReportConfiguration(log44);
        org.apache.commons.io.function.IOSupplier<java.io.OutputStream> outputStreamIOSupplier46 = reportConfiguration45.getOutput();
        reportConfiguration18.setOut(outputStreamIOSupplier46);
        org.apache.rat.utils.Log.Level level48 = org.apache.rat.utils.Log.Level.WARN;
        reportConfiguration18.logLicenseCollisions(level48);
        org.apache.commons.io.filefilter.IOFileFilter iOFileFilter50 = reportConfiguration18.getDirectoryFilter();
        java.nio.file.Path path51 = null;
        boolean boolean52 = iOFileFilter50.matches(path51);
        java.nio.file.Path path53 = null;
        java.nio.file.attribute.BasicFileAttributes basicFileAttributes54 = null;
        java.nio.file.FileVisitResult fileVisitResult55 = iOFileFilter50.accept(path53, basicFileAttributes54);
        org.apache.commons.io.filefilter.IOFileFilter iOFileFilter56 = iOFileFilter16.or(iOFileFilter50);
        reportConfiguration1.addDirectoryFilter(iOFileFilter50);
        org.junit.Assert.assertNull(claimStatistic2);
        org.junit.Assert.assertNotNull(outputStreamIOSupplier3);
        org.junit.Assert.assertNull(log8);
        org.junit.Assert.assertNull(filenameFilter11);
        org.junit.Assert.assertTrue("'" + licenseFilter12 + "' != '" + org.apache.rat.license.LicenseSetFactory.LicenseFilter.all + "'", licenseFilter12.equals(org.apache.rat.license.LicenseSetFactory.LicenseFilter.all));
        org.junit.Assert.assertNotNull(iLicenseSet13);
        org.junit.Assert.assertNotNull(iOFileFilter16);
        org.junit.Assert.assertNull(filenameFilter19);
        org.junit.Assert.assertTrue("'" + licenseFilter20 + "' != '" + org.apache.rat.license.LicenseSetFactory.LicenseFilter.all + "'", licenseFilter20.equals(org.apache.rat.license.LicenseSetFactory.LicenseFilter.all));
        org.junit.Assert.assertNotNull(iLicenseSet21);
        org.junit.Assert.assertTrue("'" + addLicenseHeaders22 + "' != '" + org.apache.rat.config.AddLicenseHeaders.FALSE + "'", addLicenseHeaders22.equals(org.apache.rat.config.AddLicenseHeaders.FALSE));
        org.junit.Assert.assertNull(claimStatistic26);
        org.junit.Assert.assertTrue("'" + licenseFilter27 + "' != '" + org.apache.rat.license.LicenseSetFactory.LicenseFilter.all + "'", licenseFilter27.equals(org.apache.rat.license.LicenseSetFactory.LicenseFilter.all));
        org.junit.Assert.assertNull(filenameFilter32);
        org.junit.Assert.assertTrue("'" + licenseFilter33 + "' != '" + org.apache.rat.license.LicenseSetFactory.LicenseFilter.all + "'", licenseFilter33.equals(org.apache.rat.license.LicenseSetFactory.LicenseFilter.all));
        org.junit.Assert.assertNotNull(iLicenseSet34);
        org.junit.Assert.assertTrue("'" + addLicenseHeaders35 + "' != '" + org.apache.rat.config.AddLicenseHeaders.FALSE + "'", addLicenseHeaders35.equals(org.apache.rat.config.AddLicenseHeaders.FALSE));
        org.junit.Assert.assertNull(claimStatistic39);
        org.junit.Assert.assertTrue("'" + licenseFilter40 + "' != '" + org.apache.rat.license.LicenseSetFactory.LicenseFilter.all + "'", licenseFilter40.equals(org.apache.rat.license.LicenseSetFactory.LicenseFilter.all));
        org.junit.Assert.assertNotNull(outputStreamIOSupplier46);
        org.junit.Assert.assertTrue("'" + level48 + "' != '" + org.apache.rat.utils.Log.Level.WARN + "'", level48.equals(org.apache.rat.utils.Log.Level.WARN));
        org.junit.Assert.assertNotNull(iOFileFilter50);
        org.junit.Assert.assertTrue("'" + boolean52 + "' != '" + false + "'", boolean52 == false);
        org.junit.Assert.assertTrue("'" + fileVisitResult55 + "' != '" + java.nio.file.FileVisitResult.TERMINATE + "'", fileVisitResult55.equals(java.nio.file.FileVisitResult.TERMINATE));
        org.junit.Assert.assertNotNull(iOFileFilter56);
    }

    @Test
    public void test13875() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest27.test13875");
        java.lang.String str1 = org.apache.rat.analysis.matchers.FullTextMatcher.prune("Datum [ name ='d25f13bc-1910-4451-97b5-b72663551a5d',value ='a8ad40e5-63d4-4711-aeee-d32efcd029a3 ']");
        org.junit.Assert.assertEquals("'" + str1 + "' != '" + "Datumnamed25f13bc1910445197b5b72663551a5dvaluea8ad40e563d44711aeeed32efcd029a3" + "'", str1, "Datumnamed25f13bc1910445197b5b72663551a5dvaluea8ad40e563d44711aeeed32efcd029a3");
    }

    @Test
    public void test13876() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest27.test13876");
        org.apache.rat.report.claim.ClaimStatistic claimStatistic0 = new org.apache.rat.report.claim.ClaimStatistic();
        claimStatistic0.setNumApproved((int) (short) 10);
        java.util.Map<java.lang.String, java.lang.Integer> strMap3 = null;
        claimStatistic0.setLicenseFileCodeMap(strMap3);
        int int5 = claimStatistic0.getNumUnknown();
        claimStatistic0.setNumUnApproved((int) (byte) 100);
        java.util.Map<java.lang.String, java.lang.Integer> strMap8 = claimStatistic0.getDocumentCategoryMap();
        int int9 = claimStatistic0.getNumUnknown();
        java.util.Map<java.lang.String, java.lang.Integer> strMap10 = null;
        claimStatistic0.setLicenseFileNameMap(strMap10);
        java.util.Map<java.lang.String, java.lang.Integer> strMap12 = claimStatistic0.getDocumentCategoryMap();
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 0 + "'", int5 == 0);
        org.junit.Assert.assertNull(strMap8);
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + 0 + "'", int9 == 0);
        org.junit.Assert.assertNull(strMap12);
    }

    @Test
    public void test13877() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest27.test13877");
        org.apache.rat.report.claim.ClaimStatistic claimStatistic0 = new org.apache.rat.report.claim.ClaimStatistic();
        claimStatistic0.setNumApproved((int) (short) 10);
        java.util.Map<java.lang.String, java.lang.Integer> strMap3 = null;
        claimStatistic0.setLicenseFileCodeMap(strMap3);
        int int5 = claimStatistic0.getNumUnknown();
        java.util.Map<java.lang.String, java.lang.Integer> strMap6 = null;
        claimStatistic0.setLicenseFileNameMap(strMap6);
        java.util.Map<java.lang.String, java.lang.Integer> strMap8 = null;
        claimStatistic0.setLicenseFileNameMap(strMap8);
        int int10 = claimStatistic0.getNumUnApproved();
        java.util.Map<java.lang.String, java.lang.Integer> strMap11 = claimStatistic0.getLicenseFileNameMap();
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 0 + "'", int5 == 0);
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + 0 + "'", int10 == 0);
        org.junit.Assert.assertNull(strMap11);
    }

    @Test
    public void test13878() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest27.test13878");
        org.apache.rat.api.MetaData metaData0 = new org.apache.rat.api.MetaData();
        java.lang.String str2 = metaData0.value("COMMON DEVELOPMENT AND DISTRIBUTION LICENSE Version 1.0");
        org.apache.rat.api.MetaData.Datum datum4 = metaData0.get("Copyright Builder: s:null e:.cvsignore o:null");
        java.lang.String str6 = metaData0.value("W3C Software Copyright");
        org.apache.rat.api.MetaData.Datum datum8 = metaData0.get("255ef7d8-e270-4908-9de7-bebc7df6eb88");
        java.util.Collection<org.apache.rat.api.MetaData.Datum> datumCollection9 = metaData0.getData();
        org.apache.rat.api.MetaData.Datum datum10 = org.apache.rat.api.MetaData.RAT_LICENSE_FAMILY_CATEGORY_DATUM_UNKNOWN;
        metaData0.set(datum10);
        org.apache.rat.api.MetaData.Datum datum12 = org.apache.rat.api.MetaData.RAT_APPROVED_LICENSE_DATUM_TRUE;
        metaData0.set(datum12);
        boolean boolean15 = metaData0.clear("AllBuilder:\nSpdxBuilder: 7d01b1b3-e7b9-4f85-b3dd-e0334dea8844\nMathcerRefBuilder: null\nAllBuilder:\nCopyright Builder: s:223f0aba-15d4-49e9-901e-5740c137aebf e:null o:null\nMathcerRefBuilder: null\nCopyright Builder: s:223f0aba-15d4-49e9-901e-5740c137aebf e:null o:null\nCopyright Builder: s:null e:null o:null\nCopyright Builder: s:null e:.cvsignore o:null\nCopyright Builder: s:null e:.cvsignore o:null\nCopyright Builder: s:OASIS e:null o:null\nAnyBuilder:\nMathcerRefBuilder: null\nCopyright Builder: s:null e:null o:null\nMathcerRefBuilder: null");
        metaData0.clear();
        org.junit.Assert.assertNull(str2);
        org.junit.Assert.assertNull(datum4);
        org.junit.Assert.assertNull(str6);
        org.junit.Assert.assertNull(datum8);
        org.junit.Assert.assertNotNull(datumCollection9);
        org.junit.Assert.assertNotNull(datum10);
        org.junit.Assert.assertNotNull(datum12);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + false + "'", boolean15 == false);
    }

    @Test
    public void test13879() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest27.test13879");
        org.apache.rat.configuration.builders.TextBuilder textBuilder0 = new org.apache.rat.configuration.builders.TextBuilder();
        org.apache.rat.configuration.builders.TextBuilder textBuilder2 = textBuilder0.setText("true");
        java.lang.String str3 = textBuilder2.toString();
        org.apache.rat.analysis.IHeaderMatcher iHeaderMatcher4 = textBuilder2.build();
        java.lang.String str5 = textBuilder2.toString();
        org.apache.rat.configuration.builders.TextBuilder textBuilder7 = textBuilder2.setText("8736ad40-c271-4de3-8f95-70d14c435dc3");
        java.lang.String str8 = textBuilder2.toString();
        org.junit.Assert.assertNotNull(textBuilder2);
        org.junit.Assert.assertEquals("'" + str3 + "' != '" + "TextBuilder: true" + "'", str3, "TextBuilder: true");
        org.junit.Assert.assertNotNull(iHeaderMatcher4);
        org.junit.Assert.assertEquals("'" + str5 + "' != '" + "TextBuilder: true" + "'", str5, "TextBuilder: true");
        org.junit.Assert.assertNotNull(textBuilder7);
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "TextBuilder: 8736ad40-c271-4de3-8..." + "'", str8, "TextBuilder: 8736ad40-c271-4de3-8...");
    }

    @Test
    public void test13880() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest27.test13880");
        org.apache.rat.header.HeaderBean headerBean0 = new org.apache.rat.header.HeaderBean();
        headerBean0.setMatch(false);
        boolean boolean3 = headerBean0.isMatch();
        java.util.regex.Pattern pattern4 = null;
        headerBean0.setHeaderPattern(pattern4);
        java.util.regex.Pattern pattern6 = headerBean0.getHeaderPattern();
        java.util.regex.Pattern pattern7 = headerBean0.getHeaderPattern();
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertNull(pattern6);
        org.junit.Assert.assertNull(pattern7);
    }

    @Test
    public void test13881() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest27.test13881");
        org.apache.rat.analysis.license.FullTextMatchingLicense fullTextMatchingLicense0 = new org.apache.rat.analysis.license.FullTextMatchingLicense();
        fullTextMatchingLicense0.setLicenseFamilyName("hi!");
        java.lang.String str3 = fullTextMatchingLicense0.getLicenseFamilyCategory();
        java.lang.String str4 = fullTextMatchingLicense0.getLicenseFamilyName();
        fullTextMatchingLicense0.setLicenseFamilyName("http://org/apache/rat/meta-data#LicenseFamilyName");
        java.lang.String str7 = fullTextMatchingLicense0.getLicenseFamilyCategory();
        fullTextMatchingLicense0.setNotes("3c840dc2-bef0-42b5-b26c-35a568d53a24");
        java.lang.String str10 = fullTextMatchingLicense0.getLicenseFamilyName();
        fullTextMatchingLicense0.setLicenseFamilyName("Copyright Builder: s:021187d7-27c2-4fd9-bc74-8cc00413ee52 e:MathcerRefBuilder: 3c74a3ec-8235-4035-9db7-f9f475b48681 o:null");
        org.junit.Assert.assertNull(str3);
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "hi!" + "'", str4, "hi!");
        org.junit.Assert.assertNull(str7);
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "http://org/apache/rat/meta-data#LicenseFamilyName" + "'", str10, "http://org/apache/rat/meta-data#LicenseFamilyName");
    }

    @Test
    public void test13882() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest27.test13882");
        org.apache.rat.analysis.license.FullTextMatchingLicense fullTextMatchingLicense0 = new org.apache.rat.analysis.license.FullTextMatchingLicense();
        fullTextMatchingLicense0.setLicenseFamilyName("hi!");
        java.lang.String str3 = fullTextMatchingLicense0.getLicenseFamilyCategory();
        java.lang.String str4 = fullTextMatchingLicense0.getLicenseFamilyCategory();
        fullTextMatchingLicense0.setLicenseFamilyCategory("DOJO ");
        java.lang.String str7 = fullTextMatchingLicense0.getNotes();
        java.lang.String str8 = fullTextMatchingLicense0.getLicenseFamilyCategory();
        org.apache.rat.license.ILicenseFamily iLicenseFamily9 = fullTextMatchingLicense0.getLicenseFamily();
        fullTextMatchingLicense0.setFullText("B5CB0999-B639-4E9C-AB9C-268137BC8846");
        java.lang.String str12 = fullTextMatchingLicense0.getLicenseFamilyName();
        org.junit.Assert.assertNull(str3);
        org.junit.Assert.assertNull(str4);
        org.junit.Assert.assertNull(str7);
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "DOJO " + "'", str8, "DOJO ");
        org.junit.Assert.assertNotNull(iLicenseFamily9);
        org.junit.Assert.assertEquals("'" + str12 + "' != '" + "hi!" + "'", str12, "hi!");
    }

    @Test
    public void test13883() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest27.test13883");
        org.apache.rat.document.ToNameTransformer toNameTransformer0 = new org.apache.rat.document.ToNameTransformer();
        org.apache.rat.configuration.builders.AllBuilder allBuilder1 = org.apache.rat.analysis.IHeaderMatcher.Builder.all();
        java.util.List<org.apache.rat.analysis.IHeaderMatcher> iHeaderMatcherList2 = allBuilder1.getChildren();
        org.apache.rat.analysis.IHeaderMatcher iHeaderMatcher3 = allBuilder1.build();
        java.util.List<org.apache.rat.analysis.IHeaderMatcher> iHeaderMatcherList4 = allBuilder1.getChildren();
        java.lang.Object obj5 = toNameTransformer0.transform((java.lang.Object) allBuilder1);
        org.apache.rat.configuration.builders.SpdxBuilder spdxBuilder6 = org.apache.rat.analysis.IHeaderMatcher.Builder.spdx();
        java.lang.String str7 = spdxBuilder6.toString();
        org.apache.rat.configuration.builders.SpdxBuilder spdxBuilder9 = spdxBuilder6.setName("ef7a8b13-64c3-4510-bb0c-dbf208e1e73f");
        org.apache.rat.analysis.IHeaderMatcher iHeaderMatcher10 = spdxBuilder6.build();
        org.apache.rat.analysis.IHeaderMatcher iHeaderMatcher11 = spdxBuilder6.build();
        org.apache.rat.analysis.IHeaderMatcher iHeaderMatcher12 = spdxBuilder6.build();
        org.apache.rat.analysis.IHeaderMatcher iHeaderMatcher13 = spdxBuilder6.build();
        org.apache.rat.configuration.builders.SpdxBuilder spdxBuilder15 = spdxBuilder6.setName("7d01b1b3-e7b9-4f85-b3dd-e0334dea8844");
        org.apache.rat.configuration.builders.AbstractBuilder abstractBuilder16 = allBuilder1.add((org.apache.rat.analysis.IHeaderMatcher.Builder) spdxBuilder6);
        org.apache.rat.configuration.builders.SpdxBuilder spdxBuilder18 = spdxBuilder6.setName("ECAD20A4-0574-4E26-B870-392031A7983E");
        org.junit.Assert.assertNotNull(allBuilder1);
        org.junit.Assert.assertNotNull(iHeaderMatcherList2);
        org.junit.Assert.assertNotNull(iHeaderMatcher3);
        org.junit.Assert.assertNotNull(iHeaderMatcherList4);
        org.junit.Assert.assertNull(obj5);
        org.junit.Assert.assertNotNull(spdxBuilder6);
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "SpdxBuilder: null" + "'", str7, "SpdxBuilder: null");
        org.junit.Assert.assertNotNull(spdxBuilder9);
        org.junit.Assert.assertNotNull(iHeaderMatcher10);
        org.junit.Assert.assertNotNull(iHeaderMatcher11);
        org.junit.Assert.assertNotNull(iHeaderMatcher12);
        org.junit.Assert.assertNotNull(iHeaderMatcher13);
        org.junit.Assert.assertNotNull(spdxBuilder15);
        org.junit.Assert.assertNotNull(abstractBuilder16);
        org.junit.Assert.assertNotNull(spdxBuilder18);
    }

    @Test
    public void test13884() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest27.test13884");
        org.apache.rat.Defaults.Builder builder0 = org.apache.rat.Defaults.builder();
        org.apache.rat.Defaults defaults1 = builder0.build();
        org.apache.rat.Defaults.Builder builder2 = builder0.noDefault();
        org.apache.rat.Defaults.Builder builder3 = builder0.noDefault();
        org.apache.rat.Defaults.Builder builder5 = builder0.add("Datum [ name ='http://org/apache/rat/meta-data#LicenseFamilyName',value ='Academic Free License, Version 2.1 ']");
        org.apache.rat.Defaults.Builder builder7 = builder5.add("RegexBuilder: 89662180-a89f-497b-9301-227d494d2bae");
        org.apache.rat.Defaults.Builder builder9 = builder7.add("TextBuilder: SpdxBuilder: null");
        org.apache.rat.Defaults.Builder builder11 = builder7.add("8238519a-3051-4498-b182-9d8ca3d898a3");
        org.junit.Assert.assertNotNull(builder0);
        org.junit.Assert.assertNotNull(defaults1);
        org.junit.Assert.assertNotNull(builder2);
        org.junit.Assert.assertNotNull(builder3);
        org.junit.Assert.assertNotNull(builder5);
        org.junit.Assert.assertNotNull(builder7);
        org.junit.Assert.assertNotNull(builder9);
        org.junit.Assert.assertNotNull(builder11);
    }

    @Test
    public void test13885() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest27.test13885");
        org.apache.rat.report.claim.ClaimStatistic claimStatistic0 = new org.apache.rat.report.claim.ClaimStatistic();
        claimStatistic0.setNumUnApproved((-1));
        java.util.Map<java.lang.String, java.lang.Integer> strMap3 = claimStatistic0.getDocumentCategoryMap();
        claimStatistic0.setNumUnApproved((int) '#');
        claimStatistic0.setNumApproved((int) (byte) -1);
        java.util.Map<java.lang.String, java.lang.Integer> strMap8 = null;
        claimStatistic0.setDocumentCategoryMap(strMap8);
        int int10 = claimStatistic0.getNumUnknown();
        int int11 = claimStatistic0.getNumApproved();
        org.junit.Assert.assertNull(strMap3);
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + 0 + "'", int10 == 0);
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + (-1) + "'", int11 == (-1));
    }

    @Test
    public void test13886() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest27.test13886");
        org.apache.rat.utils.DefaultLog defaultLog0 = org.apache.rat.utils.DefaultLog.INSTANCE;
        org.apache.rat.annotation.ApacheV2LicenseAppender apacheV2LicenseAppender1 = new org.apache.rat.annotation.ApacheV2LicenseAppender((org.apache.rat.utils.Log) defaultLog0);
        org.apache.rat.utils.Log log2 = null;
        org.apache.rat.ReportConfiguration reportConfiguration3 = new org.apache.rat.ReportConfiguration(log2);
        org.apache.rat.report.claim.ClaimStatistic claimStatistic4 = org.apache.rat.Reporter.report(reportConfiguration3);
        org.apache.rat.utils.Log log5 = null;
        org.apache.rat.ReportConfiguration reportConfiguration6 = new org.apache.rat.ReportConfiguration(log5);
        org.apache.rat.report.claim.ClaimStatistic claimStatistic7 = org.apache.rat.Reporter.report(reportConfiguration6);
        org.apache.rat.utils.ReportingSet.Options options8 = org.apache.rat.utils.ReportingSet.Options.OVERWRITE;
        reportConfiguration6.licenseDuplicateOption(options8);
        reportConfiguration3.familyDuplicateOption(options8);
        org.apache.commons.io.function.IOSupplier<java.io.PrintWriter> printWriterIOSupplier11 = reportConfiguration3.getWriter();
        org.apache.rat.utils.Log log12 = null;
        org.apache.rat.ReportConfiguration reportConfiguration13 = new org.apache.rat.ReportConfiguration(log12);
        reportConfiguration13.addApprovedLicenseCategory(".cvsignore");
        org.apache.rat.utils.Log.Level level16 = org.apache.rat.utils.Log.Level.ERROR;
        reportConfiguration13.logFamilyCollisions(level16);
        reportConfiguration3.logFamilyCollisions(level16);
        org.apache.rat.Defaults.Builder builder19 = org.apache.rat.Defaults.builder();
        org.apache.rat.Defaults.Builder builder20 = builder19.noDefault();
        defaultLog0.log(level16, (java.lang.Object) builder19);
        java.net.URL uRL22 = null;
        org.apache.rat.Defaults.Builder builder23 = builder19.remove(uRL22);
        org.apache.rat.Defaults.Builder builder25 = builder23.remove("65e45");
        org.apache.rat.Defaults.Builder builder27 = builder25.add("46eea23e-d320-45bc-aa7f-844d2e1597ce");
        org.apache.rat.Defaults.Builder builder28 = builder27.noDefault();
        org.apache.rat.Defaults.Builder builder30 = builder27.remove("Datum [ name ='http://org/apache/rat/meta-data#LicenseFamilyName',value ='COMMON DEVELOPMENT AND DISTRIBUTION LICENSE Version 1.0 ']");
        java.io.File file31 = null;
        // The following exception was thrown during execution in test generation
        try {
            org.apache.rat.Defaults.Builder builder32 = builder30.add(file31);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(defaultLog0);
        org.junit.Assert.assertNull(claimStatistic4);
        org.junit.Assert.assertNull(claimStatistic7);
        org.junit.Assert.assertTrue("'" + options8 + "' != '" + org.apache.rat.utils.ReportingSet.Options.OVERWRITE + "'", options8.equals(org.apache.rat.utils.ReportingSet.Options.OVERWRITE));
        org.junit.Assert.assertNotNull(printWriterIOSupplier11);
        org.junit.Assert.assertTrue("'" + level16 + "' != '" + org.apache.rat.utils.Log.Level.ERROR + "'", level16.equals(org.apache.rat.utils.Log.Level.ERROR));
        org.junit.Assert.assertNotNull(builder19);
        org.junit.Assert.assertNotNull(builder20);
        org.junit.Assert.assertNotNull(builder23);
        org.junit.Assert.assertNotNull(builder25);
        org.junit.Assert.assertNotNull(builder27);
        org.junit.Assert.assertNotNull(builder28);
        org.junit.Assert.assertNotNull(builder30);
    }

    @Test
    public void test13887() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest27.test13887");
        java.util.regex.Pattern pattern2 = null;
        org.apache.rat.analysis.matchers.SimpleRegexMatcher simpleRegexMatcher3 = new org.apache.rat.analysis.matchers.SimpleRegexMatcher("", pattern2);
        simpleRegexMatcher3.reset();
        java.lang.String str5 = simpleRegexMatcher3.getId();
        org.apache.rat.analysis.matchers.NotMatcher notMatcher6 = new org.apache.rat.analysis.matchers.NotMatcher((org.apache.rat.analysis.IHeaderMatcher) simpleRegexMatcher3);
        org.apache.rat.analysis.matchers.NotMatcher notMatcher7 = new org.apache.rat.analysis.matchers.NotMatcher("GNU General Public License, version 1", (org.apache.rat.analysis.IHeaderMatcher) simpleRegexMatcher3);
        org.apache.rat.analysis.IHeaderMatcher.State state8 = notMatcher7.finalizeState();
        notMatcher7.reset();
        java.lang.String str10 = notMatcher7.toString();
// flaky:         org.junit.Assert.assertEquals("'" + str5 + "' != '" + "e37f482d-0e00-4faf-9823-0a21b99eca46" + "'", str5, "e37f482d-0e00-4faf-9823-0a21b99eca46");
        org.junit.Assert.assertTrue("'" + state8 + "' != '" + org.apache.rat.analysis.IHeaderMatcher.State.t + "'", state8.equals(org.apache.rat.analysis.IHeaderMatcher.State.t));
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "GNU General Public License, version 1" + "'", str10, "GNU General Public License, version 1");
    }

    @Test
    public void test13888() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest27.test13888");
        java.lang.String[] strArray5 = new java.lang.String[] { "http://org/apache/rat/meta-data#LicenseFamilyCategory", "Datum [ name ='http://org/apache/rat/meta-data#LicenseFamilyCategory',value ='GPL1  ']", "MANIFEST.MF", "AllBuilder:", "The MIT License" };
        org.apache.rat.utils.ReportingSet<java.lang.String> strSet6 = new org.apache.rat.utils.ReportingSet<java.lang.String>();
        boolean boolean7 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strSet6, strArray5);
        boolean boolean9 = strSet6.addIfNotPresent("http://org/apache/rat/meta-data#LicenseFamilyName");
        boolean boolean11 = strSet6.addIfNotPresent("ef7a8b13-64c3-4510-bb0c-dbf208e1e73f");
        java.util.function.Function<java.lang.String, java.lang.String> strFunction12 = null;
        org.apache.rat.utils.ReportingSet<java.lang.String> strSet13 = strSet6.setMsgFormat(strFunction12);
        java.lang.String str14 = strSet13.first();
        strSet13.clear();
        java.lang.Object[] objArray16 = strSet13.toArray();
        int int17 = strSet13.size();
        java.util.stream.Stream<java.lang.String> strStream18 = strSet13.stream();
        java.util.stream.Stream<java.lang.String> strStream19 = strSet13.stream();
        org.apache.rat.configuration.builders.CopyrightBuilder copyrightBuilder20 = org.apache.rat.analysis.IHeaderMatcher.Builder.copyright();
        java.lang.String str21 = copyrightBuilder20.toString();
        org.apache.rat.configuration.builders.CopyrightBuilder copyrightBuilder23 = copyrightBuilder20.setEnd(".cvsignore");
        boolean boolean24 = copyrightBuilder20.hasId();
        org.apache.rat.configuration.builders.CopyrightBuilder copyrightBuilder26 = copyrightBuilder20.setOwner("3c840dc2-bef0-42b5-b26c-35a568d53a24");
        java.lang.String str27 = copyrightBuilder20.toString();
        org.apache.rat.analysis.IHeaderMatcher iHeaderMatcher28 = copyrightBuilder20.build();
        // The following exception was thrown during execution in test generation
        try {
            boolean boolean29 = strSet13.remove((java.lang.Object) copyrightBuilder20);
            org.junit.Assert.fail("Expected exception of type java.lang.ClassCastException; message: null");
        } catch (java.lang.ClassCastException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(strArray5);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + true + "'", boolean7 == true);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + true + "'", boolean9 == true);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + true + "'", boolean11 == true);
        org.junit.Assert.assertNotNull(strSet13);
        org.junit.Assert.assertEquals("'" + str14 + "' != '" + "AllBuilder:" + "'", str14, "AllBuilder:");
        org.junit.Assert.assertNotNull(objArray16);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray16), "[]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray16), "[]");
        org.junit.Assert.assertTrue("'" + int17 + "' != '" + 0 + "'", int17 == 0);
        org.junit.Assert.assertNotNull(strStream18);
        org.junit.Assert.assertNotNull(strStream19);
        org.junit.Assert.assertNotNull(copyrightBuilder20);
        org.junit.Assert.assertEquals("'" + str21 + "' != '" + "Copyright Builder: s:null e:null o:null" + "'", str21, "Copyright Builder: s:null e:null o:null");
        org.junit.Assert.assertNotNull(copyrightBuilder23);
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + false + "'", boolean24 == false);
        org.junit.Assert.assertNotNull(copyrightBuilder26);
        org.junit.Assert.assertEquals("'" + str27 + "' != '" + "Copyright Builder: s:null e:.cvsignore o:3c840dc2-bef0-42b5-b26c-35a568d53a24" + "'", str27, "Copyright Builder: s:null e:.cvsignore o:3c840dc2-bef0-42b5-b26c-35a568d53a24");
        org.junit.Assert.assertNotNull(iHeaderMatcher28);
    }

    @Test
    public void test13889() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest27.test13889");
        org.apache.rat.configuration.builders.AllBuilder allBuilder0 = new org.apache.rat.configuration.builders.AllBuilder();
        org.apache.rat.analysis.IHeaderMatcher iHeaderMatcher1 = allBuilder0.build();
        org.apache.rat.analysis.IHeaderMatcher iHeaderMatcher2 = allBuilder0.build();
        org.apache.rat.configuration.builders.AllBuilder allBuilder3 = new org.apache.rat.configuration.builders.AllBuilder();
        org.apache.rat.analysis.IHeaderMatcher iHeaderMatcher4 = allBuilder3.build();
        org.apache.rat.analysis.IHeaderMatcher iHeaderMatcher5 = allBuilder3.build();
        org.apache.rat.analysis.IHeaderMatcher iHeaderMatcher6 = allBuilder3.build();
        org.apache.rat.configuration.builders.CopyrightBuilder copyrightBuilder7 = org.apache.rat.analysis.IHeaderMatcher.Builder.copyright();
        java.lang.String str8 = copyrightBuilder7.toString();
        org.apache.rat.configuration.builders.CopyrightBuilder copyrightBuilder10 = copyrightBuilder7.setEnd(".cvsignore");
        boolean boolean11 = copyrightBuilder7.hasId();
        org.apache.rat.configuration.builders.CopyrightBuilder copyrightBuilder13 = copyrightBuilder7.setOwner("3c840dc2-bef0-42b5-b26c-35a568d53a24");
        org.apache.rat.configuration.builders.AbstractBuilder abstractBuilder14 = allBuilder3.add((org.apache.rat.analysis.IHeaderMatcher.Builder) copyrightBuilder7);
        org.apache.rat.configuration.builders.AbstractBuilder abstractBuilder15 = allBuilder0.add((org.apache.rat.analysis.IHeaderMatcher.Builder) copyrightBuilder7);
        org.apache.rat.configuration.builders.TextBuilder textBuilder16 = new org.apache.rat.configuration.builders.TextBuilder();
        org.apache.rat.configuration.builders.TextBuilder textBuilder18 = textBuilder16.setText("t true");
        org.apache.rat.analysis.IHeaderMatcher iHeaderMatcher19 = textBuilder16.build();
        java.lang.String str20 = textBuilder16.toString();
        org.apache.rat.configuration.builders.AbstractBuilder abstractBuilder21 = allBuilder0.add((org.apache.rat.analysis.IHeaderMatcher.Builder) textBuilder16);
        org.apache.rat.analysis.IHeaderMatcher iHeaderMatcher22 = allBuilder0.build();
        java.lang.String str23 = allBuilder0.toString();
        org.apache.rat.analysis.IHeaderMatcher iHeaderMatcher24 = allBuilder0.build();
        org.apache.rat.analysis.IHeaderMatcher.State state25 = iHeaderMatcher24.currentState();
        org.apache.rat.analysis.IHeaderMatcher.State state26 = iHeaderMatcher24.currentState();
        org.junit.Assert.assertNotNull(iHeaderMatcher1);
        org.junit.Assert.assertNotNull(iHeaderMatcher2);
        org.junit.Assert.assertNotNull(iHeaderMatcher4);
        org.junit.Assert.assertNotNull(iHeaderMatcher5);
        org.junit.Assert.assertNotNull(iHeaderMatcher6);
        org.junit.Assert.assertNotNull(copyrightBuilder7);
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "Copyright Builder: s:null e:null o:null" + "'", str8, "Copyright Builder: s:null e:null o:null");
        org.junit.Assert.assertNotNull(copyrightBuilder10);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
        org.junit.Assert.assertNotNull(copyrightBuilder13);
        org.junit.Assert.assertNotNull(abstractBuilder14);
        org.junit.Assert.assertNotNull(abstractBuilder15);
        org.junit.Assert.assertNotNull(textBuilder18);
        org.junit.Assert.assertNotNull(iHeaderMatcher19);
        org.junit.Assert.assertEquals("'" + str20 + "' != '" + "TextBuilder: t true" + "'", str20, "TextBuilder: t true");
        org.junit.Assert.assertNotNull(abstractBuilder21);
        org.junit.Assert.assertNotNull(iHeaderMatcher22);
        org.junit.Assert.assertEquals("'" + str23 + "' != '" + "AllBuilder:\nCopyright Builder: s:null e:.cvsignore o:3c840dc2-bef0-42b5-b26c-35a568d53a24\nTextBuilder: t true" + "'", str23, "AllBuilder:\nCopyright Builder: s:null e:.cvsignore o:3c840dc2-bef0-42b5-b26c-35a568d53a24\nTextBuilder: t true");
        org.junit.Assert.assertNotNull(iHeaderMatcher24);
        org.junit.Assert.assertTrue("'" + state25 + "' != '" + org.apache.rat.analysis.IHeaderMatcher.State.i + "'", state25.equals(org.apache.rat.analysis.IHeaderMatcher.State.i));
        org.junit.Assert.assertTrue("'" + state26 + "' != '" + org.apache.rat.analysis.IHeaderMatcher.State.i + "'", state26.equals(org.apache.rat.analysis.IHeaderMatcher.State.i));
    }

    @Test
    public void test13890() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest27.test13890");
        java.lang.String[] strArray8 = org.apache.commons.io.filefilter.IOFileFilter.EMPTY_STRING_ARRAY;
        boolean boolean9 = org.apache.rat.document.impl.guesser.BinaryGuesser.extensionMatches("Copyright Builder: s:null e:.cvsignore o:null", strArray8);
        boolean boolean10 = org.apache.rat.document.impl.guesser.BinaryGuesser.containsExtension("http://org/apache/rat/meta-data#HeaderCategory", strArray8);
        boolean boolean11 = org.apache.rat.document.impl.guesser.BinaryGuesser.extensionMatches("NotBuilder: MathcerRefBuilder: null", strArray8);
        boolean boolean12 = org.apache.rat.document.impl.guesser.BinaryGuesser.extensionMatches("Datum [ name ='http://org/apache/rat/meta-data#LicenseFamilyCategory',value ='GPL1  ']", strArray8);
        boolean boolean13 = org.apache.rat.document.impl.guesser.BinaryGuesser.containsExtension("true", strArray8);
        boolean boolean14 = org.apache.rat.document.impl.guesser.BinaryGuesser.extensionMatches("3a9308bd-e9ee-4b6a-bbac-7bb1dfd181d8", strArray8);
        boolean boolean15 = org.apache.rat.document.impl.guesser.BinaryGuesser.extensionMatches("535b5d01-f553-45e5-bb29-a646e4b8b66f", strArray8);
        boolean boolean16 = org.apache.rat.document.impl.guesser.BinaryGuesser.extensionMatches("c86e0b23-c972-423e-842c-796516d47236", strArray8);
        org.junit.Assert.assertNotNull(strArray8);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + false + "'", boolean15 == false);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
    }

    @Test
    public void test13891() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest27.test13891");
        java.lang.String[] strArray5 = new java.lang.String[] { "http://org/apache/rat/meta-data#LicenseFamilyCategory", "Datum [ name ='http://org/apache/rat/meta-data#LicenseFamilyCategory',value ='GPL1  ']", "MANIFEST.MF", "AllBuilder:", "The MIT License" };
        org.apache.rat.utils.ReportingSet<java.lang.String> strSet6 = new org.apache.rat.utils.ReportingSet<java.lang.String>();
        boolean boolean7 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strSet6, strArray5);
        boolean boolean9 = strSet6.addIfNotPresent("http://org/apache/rat/meta-data#LicenseFamilyName");
        boolean boolean11 = strSet6.addIfNotPresent("ef7a8b13-64c3-4510-bb0c-dbf208e1e73f");
        java.util.function.Function<java.lang.String, java.lang.String> strFunction12 = null;
        org.apache.rat.utils.ReportingSet<java.lang.String> strSet13 = strSet6.setMsgFormat(strFunction12);
        java.util.Spliterator<java.lang.String> strSpliterator14 = strSet6.spliterator();
        org.apache.rat.utils.Log log15 = null;
        org.apache.rat.ReportConfiguration reportConfiguration16 = new org.apache.rat.ReportConfiguration(log15);
        org.apache.rat.license.ILicenseFamily[] iLicenseFamilyArray17 = new org.apache.rat.license.ILicenseFamily[] {};
        java.util.ArrayList<org.apache.rat.license.ILicenseFamily> iLicenseFamilyList18 = new java.util.ArrayList<org.apache.rat.license.ILicenseFamily>();
        boolean boolean19 = java.util.Collections.addAll((java.util.Collection<org.apache.rat.license.ILicenseFamily>) iLicenseFamilyList18, iLicenseFamilyArray17);
        reportConfiguration16.addFamilies((java.util.Collection<org.apache.rat.license.ILicenseFamily>) iLicenseFamilyList18);
        boolean boolean21 = strSet6.containsAll((java.util.Collection<org.apache.rat.license.ILicenseFamily>) iLicenseFamilyList18);
        org.apache.rat.policy.DefaultPolicy defaultPolicy22 = new org.apache.rat.policy.DefaultPolicy((java.util.Collection<org.apache.rat.license.ILicenseFamily>) iLicenseFamilyList18);
        org.apache.rat.api.Document document23 = null;
        defaultPolicy22.analyse(document23);
        org.apache.rat.api.Document document25 = null;
        defaultPolicy22.analyse(document25);
        org.junit.Assert.assertNotNull(strArray5);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + true + "'", boolean7 == true);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + true + "'", boolean9 == true);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + true + "'", boolean11 == true);
        org.junit.Assert.assertNotNull(strSet13);
        org.junit.Assert.assertNotNull(strSpliterator14);
        org.junit.Assert.assertNotNull(iLicenseFamilyArray17);
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + false + "'", boolean19 == false);
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + true + "'", boolean21 == true);
    }

    @Test
    public void test13892() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest27.test13892");
        org.apache.rat.utils.Log log0 = null;
        org.apache.rat.ReportConfiguration reportConfiguration1 = new org.apache.rat.ReportConfiguration(log0);
        org.apache.rat.report.claim.ClaimStatistic claimStatistic2 = org.apache.rat.Reporter.report(reportConfiguration1);
        reportConfiguration1.addApprovedLicenseCategory("Copyright Builder: s:null e:null o:null");
        java.util.SortedSet<java.lang.String> strSet5 = reportConfiguration1.getApprovedLicenseCategories();
        java.io.FilenameFilter filenameFilter6 = reportConfiguration1.getInputFileFilter();
        org.apache.rat.utils.Log log7 = null;
        org.apache.rat.ReportConfiguration reportConfiguration8 = new org.apache.rat.ReportConfiguration(log7);
        org.apache.rat.report.claim.ClaimStatistic claimStatistic9 = org.apache.rat.Reporter.report(reportConfiguration8);
        org.apache.rat.utils.ReportingSet.Options options10 = org.apache.rat.utils.ReportingSet.Options.OVERWRITE;
        reportConfiguration8.licenseDuplicateOption(options10);
        java.util.SortedSet<org.apache.rat.license.ILicenseFamily> iLicenseFamilySet13 = org.apache.rat.license.LicenseFamilySetFactory.emptyLicenseFamilySet();
        org.apache.rat.license.ILicenseFamily iLicenseFamily14 = org.apache.rat.license.LicenseFamilySetFactory.search("http://org/apache/rat/meta-data", iLicenseFamilySet13);
        org.apache.rat.policy.DefaultPolicy defaultPolicy15 = new org.apache.rat.policy.DefaultPolicy((java.util.Collection<org.apache.rat.license.ILicenseFamily>) iLicenseFamilySet13);
        reportConfiguration8.addFamilies((java.util.Collection<org.apache.rat.license.ILicenseFamily>) iLicenseFamilySet13);
        org.apache.rat.utils.ReportingSet<java.lang.String> strSet17 = new org.apache.rat.utils.ReportingSet<java.lang.String>();
        java.lang.Object[] objArray18 = strSet17.toArray();
        org.apache.rat.license.LicenseFamilySetFactory licenseFamilySetFactory19 = new org.apache.rat.license.LicenseFamilySetFactory(iLicenseFamilySet13, (java.util.Collection<java.lang.String>) strSet17);
        reportConfiguration1.addApprovedLicenseCategories((java.util.Collection<java.lang.String>) strSet17);
        org.apache.rat.utils.ReportingSet<java.lang.String> strSet22 = strSet17.headSet("9ba7ce03-4231-4a3e-affd-70c4666a9329");
        java.util.SortedSet<org.apache.rat.license.ILicenseFamily> iLicenseFamilySet24 = org.apache.rat.license.LicenseFamilySetFactory.emptyLicenseFamilySet();
        org.apache.rat.license.ILicenseFamily iLicenseFamily25 = org.apache.rat.license.LicenseFamilySetFactory.search("http://org/apache/rat/meta-data", iLicenseFamilySet24);
        org.apache.rat.policy.DefaultPolicy defaultPolicy26 = new org.apache.rat.policy.DefaultPolicy((java.util.Collection<org.apache.rat.license.ILicenseFamily>) iLicenseFamilySet24);
        org.apache.rat.api.Document document27 = null;
        defaultPolicy26.analyse(document27);
        org.apache.rat.analysis.license.FullTextMatchingLicense fullTextMatchingLicense29 = new org.apache.rat.analysis.license.FullTextMatchingLicense();
        fullTextMatchingLicense29.setLicenseFamilyName("hi!");
        java.lang.String str32 = fullTextMatchingLicense29.getLicenseFamilyCategory();
        java.lang.String str33 = fullTextMatchingLicense29.getLicenseFamilyName();
        fullTextMatchingLicense29.setLicenseFamilyName("SpdxBuilder: null");
        fullTextMatchingLicense29.setLicenseFamilyCategory("TMF");
        org.apache.rat.license.ILicenseFamily iLicenseFamily38 = fullTextMatchingLicense29.getLicenseFamily();
        java.lang.String str39 = iLicenseFamily38.getFamilyName();
        java.lang.String str40 = iLicenseFamily38.getFamilyName();
        org.apache.rat.license.ILicenseFamilyBuilder iLicenseFamilyBuilder41 = new org.apache.rat.license.ILicenseFamilyBuilder();
        java.lang.String str42 = iLicenseFamilyBuilder41.getCategory();
        org.apache.rat.license.ILicenseFamily.Builder builder44 = iLicenseFamilyBuilder41.setLicenseFamilyCategory("AL   ");
        org.apache.rat.license.ILicenseFamily.Builder builder46 = iLicenseFamilyBuilder41.setLicenseFamilyCategory("MIT  ");
        org.apache.rat.license.ILicenseFamily.Builder builder48 = iLicenseFamilyBuilder41.setLicenseFamilyName("4a00cf7d-fe76-423e-917e-b03bbae6b8a5");
        java.lang.String str49 = iLicenseFamilyBuilder41.getCategory();
        org.apache.rat.license.ILicenseFamily.Builder builder51 = iLicenseFamilyBuilder41.setLicenseFamilyName("8ecb8cce-06e4-400f-84d9-ad1cf6289fda");
        org.apache.rat.license.ILicenseFamily iLicenseFamily52 = iLicenseFamilyBuilder41.build();
        int int53 = iLicenseFamily38.compareTo(iLicenseFamily52);
        defaultPolicy26.add(iLicenseFamily52);
        org.apache.rat.api.Document document55 = null;
        defaultPolicy26.analyse(document55);
        java.util.SortedSet<org.apache.rat.license.ILicenseFamily> iLicenseFamilySet57 = defaultPolicy26.getApprovedLicenseNames();
        boolean boolean58 = strSet22.retainAll((java.util.Collection<org.apache.rat.license.ILicenseFamily>) iLicenseFamilySet57);
        java.util.stream.Stream<java.lang.String> strStream59 = strSet22.stream();
        strStream59.close();
        org.junit.Assert.assertNull(claimStatistic2);
        org.junit.Assert.assertNotNull(strSet5);
        org.junit.Assert.assertNull(filenameFilter6);
        org.junit.Assert.assertNull(claimStatistic9);
        org.junit.Assert.assertTrue("'" + options10 + "' != '" + org.apache.rat.utils.ReportingSet.Options.OVERWRITE + "'", options10.equals(org.apache.rat.utils.ReportingSet.Options.OVERWRITE));
        org.junit.Assert.assertNotNull(iLicenseFamilySet13);
        org.junit.Assert.assertNull(iLicenseFamily14);
        org.junit.Assert.assertNotNull(objArray18);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray18), "[]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray18), "[]");
        org.junit.Assert.assertNotNull(strSet22);
        org.junit.Assert.assertNotNull(iLicenseFamilySet24);
        org.junit.Assert.assertNull(iLicenseFamily25);
        org.junit.Assert.assertNull(str32);
        org.junit.Assert.assertEquals("'" + str33 + "' != '" + "hi!" + "'", str33, "hi!");
        org.junit.Assert.assertNotNull(iLicenseFamily38);
        org.junit.Assert.assertEquals("'" + str39 + "' != '" + "SpdxBuilder: null" + "'", str39, "SpdxBuilder: null");
        org.junit.Assert.assertEquals("'" + str40 + "' != '" + "SpdxBuilder: null" + "'", str40, "SpdxBuilder: null");
        org.junit.Assert.assertNull(str42);
        org.junit.Assert.assertNotNull(builder44);
        org.junit.Assert.assertNotNull(builder46);
        org.junit.Assert.assertNotNull(builder48);
        org.junit.Assert.assertEquals("'" + str49 + "' != '" + "MIT  " + "'", str49, "MIT  ");
        org.junit.Assert.assertNotNull(builder51);
        org.junit.Assert.assertNotNull(iLicenseFamily52);
        org.junit.Assert.assertTrue("'" + int53 + "' != '" + 7 + "'", int53 == 7);
        org.junit.Assert.assertNotNull(iLicenseFamilySet57);
        org.junit.Assert.assertTrue("'" + boolean58 + "' != '" + false + "'", boolean58 == false);
        org.junit.Assert.assertNotNull(strStream59);
    }

    @Test
    public void test13893() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest27.test13893");
        org.apache.rat.utils.DefaultLog defaultLog0 = org.apache.rat.utils.DefaultLog.INSTANCE;
        org.apache.rat.license.ILicense.Builder builder1 = org.apache.rat.license.ILicense.builder();
        org.apache.rat.license.ILicense.Builder builder3 = builder1.setLicenseFamilyCategory("");
        org.apache.rat.analysis.matchers.CopyrightMatcher copyrightMatcher7 = new org.apache.rat.analysis.matchers.CopyrightMatcher("", "GPL1 ", "hi!");
        org.apache.rat.analysis.IHeaderMatcher.State state8 = copyrightMatcher7.finalizeState();
        org.apache.rat.license.ILicense.Builder builder9 = builder3.setMatcher((org.apache.rat.analysis.IHeaderMatcher) copyrightMatcher7);
        org.apache.rat.license.ILicense.Builder builder11 = builder9.setLicenseFamilyCategory("");
        defaultLog0.error((java.lang.Object) builder11);
        org.apache.rat.utils.Log log13 = null;
        org.apache.rat.ReportConfiguration reportConfiguration14 = new org.apache.rat.ReportConfiguration(log13);
        java.io.FilenameFilter filenameFilter15 = reportConfiguration14.getInputFileFilter();
        org.apache.rat.license.LicenseSetFactory.LicenseFilter licenseFilter16 = org.apache.rat.license.LicenseSetFactory.LicenseFilter.all;
        java.util.SortedSet<org.apache.rat.license.ILicense> iLicenseSet17 = reportConfiguration14.getLicenses(licenseFilter16);
        org.apache.rat.config.AddLicenseHeaders addLicenseHeaders18 = org.apache.rat.config.AddLicenseHeaders.FALSE;
        reportConfiguration14.setAddLicenseHeaders(addLicenseHeaders18);
        org.apache.rat.utils.Log log20 = null;
        org.apache.rat.ReportConfiguration reportConfiguration21 = new org.apache.rat.ReportConfiguration(log20);
        org.apache.rat.report.claim.ClaimStatistic claimStatistic22 = org.apache.rat.Reporter.report(reportConfiguration21);
        org.apache.rat.license.LicenseSetFactory.LicenseFilter licenseFilter23 = org.apache.rat.license.LicenseSetFactory.LicenseFilter.all;
        org.apache.rat.Reporter.listLicenses(reportConfiguration21, licenseFilter23);
        org.apache.rat.Reporter.listLicenses(reportConfiguration14, licenseFilter23);
        org.apache.rat.utils.Log log26 = null;
        org.apache.rat.ReportConfiguration reportConfiguration27 = new org.apache.rat.ReportConfiguration(log26);
        java.io.FilenameFilter filenameFilter28 = reportConfiguration27.getInputFileFilter();
        org.apache.rat.license.LicenseSetFactory.LicenseFilter licenseFilter29 = org.apache.rat.license.LicenseSetFactory.LicenseFilter.all;
        java.util.SortedSet<org.apache.rat.license.ILicense> iLicenseSet30 = reportConfiguration27.getLicenses(licenseFilter29);
        org.apache.rat.config.AddLicenseHeaders addLicenseHeaders31 = org.apache.rat.config.AddLicenseHeaders.FALSE;
        reportConfiguration27.setAddLicenseHeaders(addLicenseHeaders31);
        org.apache.rat.utils.Log log33 = null;
        org.apache.rat.ReportConfiguration reportConfiguration34 = new org.apache.rat.ReportConfiguration(log33);
        org.apache.rat.report.claim.ClaimStatistic claimStatistic35 = org.apache.rat.Reporter.report(reportConfiguration34);
        org.apache.rat.license.LicenseSetFactory.LicenseFilter licenseFilter36 = org.apache.rat.license.LicenseSetFactory.LicenseFilter.all;
        org.apache.rat.Reporter.listLicenses(reportConfiguration34, licenseFilter36);
        org.apache.rat.Reporter.listLicenses(reportConfiguration27, licenseFilter36);
        org.apache.rat.Reporter.listLicenses(reportConfiguration14, licenseFilter36);
        org.apache.rat.utils.Log log40 = null;
        org.apache.rat.ReportConfiguration reportConfiguration41 = new org.apache.rat.ReportConfiguration(log40);
        org.apache.commons.io.function.IOSupplier<java.io.OutputStream> outputStreamIOSupplier42 = reportConfiguration41.getOutput();
        reportConfiguration14.setOut(outputStreamIOSupplier42);
        org.apache.rat.utils.Log.Level level44 = org.apache.rat.utils.Log.Level.WARN;
        reportConfiguration14.logLicenseCollisions(level44);
        defaultLog0.warn((java.lang.Object) level44);
        defaultLog0.info((java.lang.Object) "TextBuilder: Datum [ name ='http:...");
        org.apache.rat.utils.Log log49 = null;
        org.apache.rat.ReportConfiguration reportConfiguration50 = new org.apache.rat.ReportConfiguration(log49);
        java.io.FilenameFilter filenameFilter51 = reportConfiguration50.getInputFileFilter();
        org.apache.rat.license.LicenseSetFactory.LicenseFilter licenseFilter52 = org.apache.rat.license.LicenseSetFactory.LicenseFilter.all;
        java.util.SortedSet<org.apache.rat.license.ILicense> iLicenseSet53 = reportConfiguration50.getLicenses(licenseFilter52);
        org.apache.rat.license.ILicenseFamily iLicenseFamily54 = null;
        reportConfiguration50.addFamily(iLicenseFamily54);
        reportConfiguration50.setCopyrightMessage("hi!");
        defaultLog0.error((java.lang.Object) reportConfiguration50);
        org.apache.rat.annotation.ApacheV2LicenseAppender apacheV2LicenseAppender60 = new org.apache.rat.annotation.ApacheV2LicenseAppender((org.apache.rat.utils.Log) defaultLog0, "03f7b314-6887-4617-9c7e-bf1600b331cd");
        java.io.File file61 = null;
        // The following exception was thrown during execution in test generation
        try {
            apacheV2LicenseAppender60.append(file61);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(defaultLog0);
        org.junit.Assert.assertNotNull(builder1);
        org.junit.Assert.assertNotNull(builder3);
        org.junit.Assert.assertTrue("'" + state8 + "' != '" + org.apache.rat.analysis.IHeaderMatcher.State.f + "'", state8.equals(org.apache.rat.analysis.IHeaderMatcher.State.f));
        org.junit.Assert.assertNotNull(builder9);
        org.junit.Assert.assertNotNull(builder11);
        org.junit.Assert.assertNull(filenameFilter15);
        org.junit.Assert.assertTrue("'" + licenseFilter16 + "' != '" + org.apache.rat.license.LicenseSetFactory.LicenseFilter.all + "'", licenseFilter16.equals(org.apache.rat.license.LicenseSetFactory.LicenseFilter.all));
        org.junit.Assert.assertNotNull(iLicenseSet17);
        org.junit.Assert.assertTrue("'" + addLicenseHeaders18 + "' != '" + org.apache.rat.config.AddLicenseHeaders.FALSE + "'", addLicenseHeaders18.equals(org.apache.rat.config.AddLicenseHeaders.FALSE));
        org.junit.Assert.assertNull(claimStatistic22);
        org.junit.Assert.assertTrue("'" + licenseFilter23 + "' != '" + org.apache.rat.license.LicenseSetFactory.LicenseFilter.all + "'", licenseFilter23.equals(org.apache.rat.license.LicenseSetFactory.LicenseFilter.all));
        org.junit.Assert.assertNull(filenameFilter28);
        org.junit.Assert.assertTrue("'" + licenseFilter29 + "' != '" + org.apache.rat.license.LicenseSetFactory.LicenseFilter.all + "'", licenseFilter29.equals(org.apache.rat.license.LicenseSetFactory.LicenseFilter.all));
        org.junit.Assert.assertNotNull(iLicenseSet30);
        org.junit.Assert.assertTrue("'" + addLicenseHeaders31 + "' != '" + org.apache.rat.config.AddLicenseHeaders.FALSE + "'", addLicenseHeaders31.equals(org.apache.rat.config.AddLicenseHeaders.FALSE));
        org.junit.Assert.assertNull(claimStatistic35);
        org.junit.Assert.assertTrue("'" + licenseFilter36 + "' != '" + org.apache.rat.license.LicenseSetFactory.LicenseFilter.all + "'", licenseFilter36.equals(org.apache.rat.license.LicenseSetFactory.LicenseFilter.all));
        org.junit.Assert.assertNotNull(outputStreamIOSupplier42);
        org.junit.Assert.assertTrue("'" + level44 + "' != '" + org.apache.rat.utils.Log.Level.WARN + "'", level44.equals(org.apache.rat.utils.Log.Level.WARN));
        org.junit.Assert.assertNull(filenameFilter51);
        org.junit.Assert.assertTrue("'" + licenseFilter52 + "' != '" + org.apache.rat.license.LicenseSetFactory.LicenseFilter.all + "'", licenseFilter52.equals(org.apache.rat.license.LicenseSetFactory.LicenseFilter.all));
        org.junit.Assert.assertNotNull(iLicenseSet53);
    }

    @Test
    public void test13894() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest27.test13894");
        org.apache.rat.utils.Log log0 = null;
        org.apache.rat.ReportConfiguration reportConfiguration1 = new org.apache.rat.ReportConfiguration(log0);
        java.io.FilenameFilter filenameFilter2 = reportConfiguration1.getInputFileFilter();
        org.apache.rat.license.LicenseSetFactory.LicenseFilter licenseFilter3 = org.apache.rat.license.LicenseSetFactory.LicenseFilter.all;
        java.util.SortedSet<org.apache.rat.license.ILicense> iLicenseSet4 = reportConfiguration1.getLicenses(licenseFilter3);
        org.apache.rat.config.AddLicenseHeaders addLicenseHeaders5 = org.apache.rat.config.AddLicenseHeaders.FALSE;
        reportConfiguration1.setAddLicenseHeaders(addLicenseHeaders5);
        org.apache.rat.utils.Log log7 = null;
        org.apache.rat.ReportConfiguration reportConfiguration8 = new org.apache.rat.ReportConfiguration(log7);
        org.apache.rat.report.claim.ClaimStatistic claimStatistic9 = org.apache.rat.Reporter.report(reportConfiguration8);
        org.apache.rat.license.LicenseSetFactory.LicenseFilter licenseFilter10 = org.apache.rat.license.LicenseSetFactory.LicenseFilter.all;
        org.apache.rat.Reporter.listLicenses(reportConfiguration8, licenseFilter10);
        org.apache.rat.Reporter.listLicenses(reportConfiguration1, licenseFilter10);
        org.apache.rat.report.IReportable iReportable13 = null;
        reportConfiguration1.setReportable(iReportable13);
        java.lang.String str15 = reportConfiguration1.getCopyrightMessage();
        org.apache.rat.utils.ReportingSet<java.lang.String> strSet16 = new org.apache.rat.utils.ReportingSet<java.lang.String>();
        org.apache.rat.utils.ReportingSet<java.lang.String> strSet18 = strSet16.tailSet("hi!");
        org.apache.rat.utils.Log log19 = null;
        org.apache.rat.ReportConfiguration reportConfiguration20 = new org.apache.rat.ReportConfiguration(log19);
        java.io.FilenameFilter filenameFilter21 = reportConfiguration20.getInputFileFilter();
        org.apache.rat.license.LicenseSetFactory.LicenseFilter licenseFilter22 = org.apache.rat.license.LicenseSetFactory.LicenseFilter.all;
        java.util.SortedSet<org.apache.rat.license.ILicense> iLicenseSet23 = reportConfiguration20.getLicenses(licenseFilter22);
        org.apache.rat.config.AddLicenseHeaders addLicenseHeaders24 = org.apache.rat.config.AddLicenseHeaders.FALSE;
        reportConfiguration20.setAddLicenseHeaders(addLicenseHeaders24);
        org.apache.rat.utils.Log log26 = null;
        org.apache.rat.ReportConfiguration reportConfiguration27 = new org.apache.rat.ReportConfiguration(log26);
        org.apache.rat.report.claim.ClaimStatistic claimStatistic28 = org.apache.rat.Reporter.report(reportConfiguration27);
        org.apache.rat.license.LicenseSetFactory.LicenseFilter licenseFilter29 = org.apache.rat.license.LicenseSetFactory.LicenseFilter.all;
        org.apache.rat.Reporter.listLicenses(reportConfiguration27, licenseFilter29);
        org.apache.rat.Reporter.listLicenses(reportConfiguration20, licenseFilter29);
        org.apache.rat.utils.Log log32 = null;
        org.apache.rat.ReportConfiguration reportConfiguration33 = new org.apache.rat.ReportConfiguration(log32);
        java.io.FilenameFilter filenameFilter34 = reportConfiguration33.getInputFileFilter();
        org.apache.rat.license.LicenseSetFactory.LicenseFilter licenseFilter35 = org.apache.rat.license.LicenseSetFactory.LicenseFilter.all;
        java.util.SortedSet<org.apache.rat.license.ILicense> iLicenseSet36 = reportConfiguration33.getLicenses(licenseFilter35);
        org.apache.rat.config.AddLicenseHeaders addLicenseHeaders37 = org.apache.rat.config.AddLicenseHeaders.FALSE;
        reportConfiguration33.setAddLicenseHeaders(addLicenseHeaders37);
        org.apache.rat.utils.Log log39 = null;
        org.apache.rat.ReportConfiguration reportConfiguration40 = new org.apache.rat.ReportConfiguration(log39);
        org.apache.rat.report.claim.ClaimStatistic claimStatistic41 = org.apache.rat.Reporter.report(reportConfiguration40);
        org.apache.rat.license.LicenseSetFactory.LicenseFilter licenseFilter42 = org.apache.rat.license.LicenseSetFactory.LicenseFilter.all;
        org.apache.rat.Reporter.listLicenses(reportConfiguration40, licenseFilter42);
        org.apache.rat.Reporter.listLicenses(reportConfiguration33, licenseFilter42);
        org.apache.rat.Reporter.listLicenses(reportConfiguration20, licenseFilter42);
        org.apache.rat.utils.Log log46 = null;
        org.apache.rat.ReportConfiguration reportConfiguration47 = new org.apache.rat.ReportConfiguration(log46);
        org.apache.commons.io.function.IOSupplier<java.io.OutputStream> outputStreamIOSupplier48 = reportConfiguration47.getOutput();
        reportConfiguration20.setOut(outputStreamIOSupplier48);
        org.apache.rat.utils.Log log50 = null;
        org.apache.rat.ReportConfiguration reportConfiguration51 = new org.apache.rat.ReportConfiguration(log50);
        org.apache.commons.io.function.IOSupplier<java.io.OutputStream> outputStreamIOSupplier52 = reportConfiguration51.getOutput();
        reportConfiguration20.setOut(outputStreamIOSupplier52);
        boolean boolean54 = strSet16.equals((java.lang.Object) outputStreamIOSupplier52);
        reportConfiguration1.removeApprovedLicenseCategories((java.util.Collection<java.lang.String>) strSet16);
        boolean boolean56 = strSet16.isEmpty();
        java.util.stream.Stream<java.lang.String> strStream57 = strSet16.parallelStream();
        java.util.function.Function<java.lang.String, java.lang.String> strFunction58 = null;
        org.apache.rat.utils.ReportingSet<java.lang.String> strSet59 = strSet16.setMsgFormat(strFunction58);
        org.junit.Assert.assertNull(filenameFilter2);
        org.junit.Assert.assertTrue("'" + licenseFilter3 + "' != '" + org.apache.rat.license.LicenseSetFactory.LicenseFilter.all + "'", licenseFilter3.equals(org.apache.rat.license.LicenseSetFactory.LicenseFilter.all));
        org.junit.Assert.assertNotNull(iLicenseSet4);
        org.junit.Assert.assertTrue("'" + addLicenseHeaders5 + "' != '" + org.apache.rat.config.AddLicenseHeaders.FALSE + "'", addLicenseHeaders5.equals(org.apache.rat.config.AddLicenseHeaders.FALSE));
        org.junit.Assert.assertNull(claimStatistic9);
        org.junit.Assert.assertTrue("'" + licenseFilter10 + "' != '" + org.apache.rat.license.LicenseSetFactory.LicenseFilter.all + "'", licenseFilter10.equals(org.apache.rat.license.LicenseSetFactory.LicenseFilter.all));
        org.junit.Assert.assertNull(str15);
        org.junit.Assert.assertNotNull(strSet18);
        org.junit.Assert.assertNull(filenameFilter21);
        org.junit.Assert.assertTrue("'" + licenseFilter22 + "' != '" + org.apache.rat.license.LicenseSetFactory.LicenseFilter.all + "'", licenseFilter22.equals(org.apache.rat.license.LicenseSetFactory.LicenseFilter.all));
        org.junit.Assert.assertNotNull(iLicenseSet23);
        org.junit.Assert.assertTrue("'" + addLicenseHeaders24 + "' != '" + org.apache.rat.config.AddLicenseHeaders.FALSE + "'", addLicenseHeaders24.equals(org.apache.rat.config.AddLicenseHeaders.FALSE));
        org.junit.Assert.assertNull(claimStatistic28);
        org.junit.Assert.assertTrue("'" + licenseFilter29 + "' != '" + org.apache.rat.license.LicenseSetFactory.LicenseFilter.all + "'", licenseFilter29.equals(org.apache.rat.license.LicenseSetFactory.LicenseFilter.all));
        org.junit.Assert.assertNull(filenameFilter34);
        org.junit.Assert.assertTrue("'" + licenseFilter35 + "' != '" + org.apache.rat.license.LicenseSetFactory.LicenseFilter.all + "'", licenseFilter35.equals(org.apache.rat.license.LicenseSetFactory.LicenseFilter.all));
        org.junit.Assert.assertNotNull(iLicenseSet36);
        org.junit.Assert.assertTrue("'" + addLicenseHeaders37 + "' != '" + org.apache.rat.config.AddLicenseHeaders.FALSE + "'", addLicenseHeaders37.equals(org.apache.rat.config.AddLicenseHeaders.FALSE));
        org.junit.Assert.assertNull(claimStatistic41);
        org.junit.Assert.assertTrue("'" + licenseFilter42 + "' != '" + org.apache.rat.license.LicenseSetFactory.LicenseFilter.all + "'", licenseFilter42.equals(org.apache.rat.license.LicenseSetFactory.LicenseFilter.all));
        org.junit.Assert.assertNotNull(outputStreamIOSupplier48);
        org.junit.Assert.assertNotNull(outputStreamIOSupplier52);
        org.junit.Assert.assertTrue("'" + boolean54 + "' != '" + false + "'", boolean54 == false);
        org.junit.Assert.assertTrue("'" + boolean56 + "' != '" + true + "'", boolean56 == true);
        org.junit.Assert.assertNotNull(strStream57);
        org.junit.Assert.assertNotNull(strSet59);
    }

    @Test
    public void test13895() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest27.test13895");
        org.apache.rat.analysis.matchers.FullTextMatcher fullTextMatcher2 = new org.apache.rat.analysis.matchers.FullTextMatcher("http://org/apache/rat/meta-data", "Apache License Version 2.0");
        org.apache.rat.analysis.IHeaderMatcher.State state3 = fullTextMatcher2.currentState();
        org.apache.rat.analysis.matchers.NotMatcher notMatcher4 = new org.apache.rat.analysis.matchers.NotMatcher((org.apache.rat.analysis.IHeaderMatcher) fullTextMatcher2);
        notMatcher4.reset();
        notMatcher4.reset();
        org.apache.rat.analysis.IHeaderMatcher.State state8 = notMatcher4.matches("c8f389b8-5295-40d4-be8e-f0d0afde51c6");
        java.lang.String str9 = notMatcher4.toString();
        java.lang.String str10 = notMatcher4.toString();
        org.junit.Assert.assertTrue("'" + state3 + "' != '" + org.apache.rat.analysis.IHeaderMatcher.State.i + "'", state3.equals(org.apache.rat.analysis.IHeaderMatcher.State.i));
        org.junit.Assert.assertTrue("'" + state8 + "' != '" + org.apache.rat.analysis.IHeaderMatcher.State.i + "'", state8.equals(org.apache.rat.analysis.IHeaderMatcher.State.i));
// flaky:         org.junit.Assert.assertEquals("'" + str9 + "' != '" + "f008bd5f-7ef2-458c-94f1-625a6a4b62e0" + "'", str9, "f008bd5f-7ef2-458c-94f1-625a6a4b62e0");
// flaky:         org.junit.Assert.assertEquals("'" + str10 + "' != '" + "f008bd5f-7ef2-458c-94f1-625a6a4b62e0" + "'", str10, "f008bd5f-7ef2-458c-94f1-625a6a4b62e0");
    }

    @Test
    public void test13896() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest27.test13896");
        org.apache.rat.configuration.builders.AllBuilder allBuilder0 = new org.apache.rat.configuration.builders.AllBuilder();
        java.lang.String str1 = allBuilder0.toString();
        java.lang.String str2 = allBuilder0.toString();
        org.apache.rat.configuration.builders.CopyrightBuilder copyrightBuilder3 = org.apache.rat.analysis.IHeaderMatcher.Builder.copyright();
        java.lang.String str4 = copyrightBuilder3.toString();
        org.apache.rat.configuration.builders.CopyrightBuilder copyrightBuilder6 = copyrightBuilder3.setEnd(".cvsignore");
        boolean boolean7 = copyrightBuilder3.hasId();
        boolean boolean8 = copyrightBuilder3.hasId();
        org.apache.rat.analysis.IHeaderMatcher iHeaderMatcher9 = copyrightBuilder3.build();
        java.lang.String str10 = copyrightBuilder3.toString();
        org.apache.rat.configuration.builders.AbstractBuilder abstractBuilder11 = allBuilder0.add((org.apache.rat.analysis.IHeaderMatcher.Builder) copyrightBuilder3);
        org.apache.rat.configuration.builders.NotBuilder notBuilder12 = org.apache.rat.analysis.IHeaderMatcher.Builder.not();
        java.lang.String str13 = notBuilder12.toString();
        java.lang.String str14 = notBuilder12.toString();
        java.lang.String str15 = notBuilder12.toString();
        java.util.List<org.apache.rat.analysis.IHeaderMatcher> iHeaderMatcherList16 = notBuilder12.getChildren();
        java.lang.String str17 = notBuilder12.toString();
        org.apache.rat.configuration.builders.NotBuilder notBuilder18 = org.apache.rat.analysis.IHeaderMatcher.Builder.not();
        java.lang.String str19 = notBuilder18.toString();
        org.apache.rat.configuration.builders.MatcherRefBuilder matcherRefBuilder20 = org.apache.rat.analysis.IHeaderMatcher.Builder.matcherRef();
        boolean boolean21 = matcherRefBuilder20.hasId();
        java.lang.String str22 = matcherRefBuilder20.toString();
        java.util.Map<java.lang.String, org.apache.rat.analysis.IHeaderMatcher> strMap23 = null;
        org.apache.rat.configuration.builders.MatcherRefBuilder matcherRefBuilder24 = matcherRefBuilder20.setMatchers(strMap23);
        java.util.Map<java.lang.String, org.apache.rat.analysis.IHeaderMatcher> strMap25 = null;
        org.apache.rat.configuration.builders.MatcherRefBuilder matcherRefBuilder26 = matcherRefBuilder20.setMatchers(strMap25);
        java.util.Map<java.lang.String, org.apache.rat.analysis.IHeaderMatcher> strMap27 = null;
        org.apache.rat.configuration.builders.MatcherRefBuilder matcherRefBuilder28 = matcherRefBuilder20.setMatchers(strMap27);
        org.apache.rat.configuration.builders.MatcherRefBuilder matcherRefBuilder30 = matcherRefBuilder20.setRefId("Datum [ name ='http://org/apache/rat/meta-data#LicenseFamilyName',value ='Academic Free License, Version 2.1 ']");
        java.lang.String str31 = matcherRefBuilder20.toString();
        org.apache.rat.configuration.builders.AbstractBuilder abstractBuilder32 = notBuilder18.add((org.apache.rat.analysis.IHeaderMatcher.Builder) matcherRefBuilder20);
        java.lang.String str33 = notBuilder18.toString();
        org.apache.rat.configuration.builders.AnyBuilder anyBuilder34 = new org.apache.rat.configuration.builders.AnyBuilder();
        java.lang.String str35 = anyBuilder34.toString();
        org.apache.rat.analysis.IHeaderMatcher iHeaderMatcher36 = anyBuilder34.build();
        org.apache.rat.configuration.builders.AnyBuilder anyBuilder37 = org.apache.rat.analysis.IHeaderMatcher.Builder.any();
        java.lang.String str38 = anyBuilder37.toString();
        java.util.List<org.apache.rat.analysis.IHeaderMatcher> iHeaderMatcherList39 = anyBuilder37.getChildren();
        org.apache.rat.analysis.IHeaderMatcher iHeaderMatcher40 = anyBuilder37.build();
        org.apache.rat.analysis.IHeaderMatcher iHeaderMatcher41 = anyBuilder37.build();
        java.util.List<org.apache.rat.analysis.IHeaderMatcher> iHeaderMatcherList42 = anyBuilder37.getChildren();
        org.apache.rat.configuration.builders.NotBuilder notBuilder43 = new org.apache.rat.configuration.builders.NotBuilder();
        java.lang.String str44 = notBuilder43.toString();
        org.apache.rat.configuration.builders.MatcherRefBuilder matcherRefBuilder45 = org.apache.rat.analysis.IHeaderMatcher.Builder.matcherRef();
        boolean boolean46 = matcherRefBuilder45.hasId();
        java.util.Map<java.lang.String, org.apache.rat.analysis.IHeaderMatcher> strMap47 = null;
        org.apache.rat.configuration.builders.MatcherRefBuilder matcherRefBuilder48 = matcherRefBuilder45.setMatchers(strMap47);
        org.apache.rat.configuration.builders.AllBuilder allBuilder49 = new org.apache.rat.configuration.builders.AllBuilder();
        org.apache.rat.configuration.builders.CopyrightBuilder copyrightBuilder50 = org.apache.rat.analysis.IHeaderMatcher.Builder.copyright();
        org.apache.rat.configuration.builders.CopyrightBuilder copyrightBuilder52 = copyrightBuilder50.setStart("OASIS");
        java.lang.String str53 = copyrightBuilder50.toString();
        org.apache.rat.configuration.builders.CopyrightBuilder copyrightBuilder55 = copyrightBuilder50.setStart("223f0aba-15d4-49e9-901e-5740c137aebf");
        org.apache.rat.configuration.builders.MatcherRefBuilder matcherRefBuilder56 = org.apache.rat.analysis.IHeaderMatcher.Builder.matcherRef();
        boolean boolean57 = matcherRefBuilder56.hasId();
        org.apache.rat.configuration.builders.CopyrightBuilder copyrightBuilder58 = org.apache.rat.analysis.IHeaderMatcher.Builder.copyright();
        org.apache.rat.configuration.builders.CopyrightBuilder copyrightBuilder60 = copyrightBuilder58.setStart("OASIS");
        java.lang.String str61 = copyrightBuilder58.toString();
        org.apache.rat.configuration.builders.CopyrightBuilder copyrightBuilder63 = copyrightBuilder58.setStart("223f0aba-15d4-49e9-901e-5740c137aebf");
        org.apache.rat.configuration.builders.CopyrightBuilder copyrightBuilder64 = org.apache.rat.analysis.IHeaderMatcher.Builder.copyright();
        org.apache.rat.configuration.builders.CopyrightBuilder copyrightBuilder65 = org.apache.rat.analysis.IHeaderMatcher.Builder.copyright();
        java.lang.String str66 = copyrightBuilder65.toString();
        org.apache.rat.configuration.builders.CopyrightBuilder copyrightBuilder68 = copyrightBuilder65.setEnd(".cvsignore");
        boolean boolean69 = copyrightBuilder65.hasId();
        org.apache.rat.configuration.builders.CopyrightBuilder copyrightBuilder70 = org.apache.rat.analysis.IHeaderMatcher.Builder.copyright();
        java.lang.String str71 = copyrightBuilder70.toString();
        org.apache.rat.configuration.builders.CopyrightBuilder copyrightBuilder73 = copyrightBuilder70.setEnd(".cvsignore");
        boolean boolean74 = copyrightBuilder70.hasId();
        java.lang.String str75 = copyrightBuilder70.toString();
        org.apache.rat.configuration.builders.CopyrightBuilder copyrightBuilder76 = org.apache.rat.analysis.IHeaderMatcher.Builder.copyright();
        org.apache.rat.configuration.builders.CopyrightBuilder copyrightBuilder78 = copyrightBuilder76.setStart("OASIS");
        org.apache.rat.configuration.builders.AnyBuilder anyBuilder79 = org.apache.rat.analysis.IHeaderMatcher.Builder.any();
        org.apache.rat.configuration.builders.MatcherRefBuilder matcherRefBuilder80 = org.apache.rat.analysis.IHeaderMatcher.Builder.matcherRef();
        boolean boolean81 = matcherRefBuilder80.hasId();
        java.util.Map<java.lang.String, org.apache.rat.analysis.IHeaderMatcher> strMap82 = null;
        org.apache.rat.configuration.builders.MatcherRefBuilder matcherRefBuilder83 = matcherRefBuilder80.setMatchers(strMap82);
        org.apache.rat.configuration.builders.CopyrightBuilder copyrightBuilder84 = org.apache.rat.analysis.IHeaderMatcher.Builder.copyright();
        org.apache.rat.configuration.builders.MatcherRefBuilder matcherRefBuilder85 = org.apache.rat.analysis.IHeaderMatcher.Builder.matcherRef();
        boolean boolean86 = matcherRefBuilder85.hasId();
        java.lang.String str87 = matcherRefBuilder85.toString();
        java.util.Map<java.lang.String, org.apache.rat.analysis.IHeaderMatcher> strMap88 = null;
        org.apache.rat.configuration.builders.MatcherRefBuilder matcherRefBuilder89 = matcherRefBuilder85.setMatchers(strMap88);
        org.apache.rat.analysis.IHeaderMatcher.Builder[] builderArray90 = new org.apache.rat.analysis.IHeaderMatcher.Builder[] { matcherRefBuilder45, allBuilder49, copyrightBuilder55, matcherRefBuilder56, copyrightBuilder58, copyrightBuilder64, copyrightBuilder65, copyrightBuilder70, copyrightBuilder76, anyBuilder79, matcherRefBuilder80, copyrightBuilder84, matcherRefBuilder85 };
        java.util.ArrayList<org.apache.rat.analysis.IHeaderMatcher.Builder> builderList91 = new java.util.ArrayList<org.apache.rat.analysis.IHeaderMatcher.Builder>();
        boolean boolean92 = java.util.Collections.addAll((java.util.Collection<org.apache.rat.analysis.IHeaderMatcher.Builder>) builderList91, builderArray90);
        org.apache.rat.configuration.builders.AbstractBuilder abstractBuilder93 = notBuilder43.add((java.util.Collection<org.apache.rat.analysis.IHeaderMatcher.Builder>) builderList91);
        org.apache.rat.configuration.builders.AbstractBuilder abstractBuilder94 = anyBuilder37.add((java.util.Collection<org.apache.rat.analysis.IHeaderMatcher.Builder>) builderList91);
        org.apache.rat.configuration.builders.AbstractBuilder abstractBuilder95 = anyBuilder34.add((java.util.Collection<org.apache.rat.analysis.IHeaderMatcher.Builder>) builderList91);
        org.apache.rat.configuration.builders.AbstractBuilder abstractBuilder96 = notBuilder18.add((java.util.Collection<org.apache.rat.analysis.IHeaderMatcher.Builder>) builderList91);
        org.apache.rat.configuration.builders.AbstractBuilder abstractBuilder97 = notBuilder12.add((java.util.Collection<org.apache.rat.analysis.IHeaderMatcher.Builder>) builderList91);
        org.apache.rat.configuration.builders.AbstractBuilder abstractBuilder98 = allBuilder0.add((java.util.Collection<org.apache.rat.analysis.IHeaderMatcher.Builder>) builderList91);
        org.junit.Assert.assertEquals("'" + str1 + "' != '" + "AllBuilder:" + "'", str1, "AllBuilder:");
        org.junit.Assert.assertEquals("'" + str2 + "' != '" + "AllBuilder:" + "'", str2, "AllBuilder:");
        org.junit.Assert.assertNotNull(copyrightBuilder3);
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "Copyright Builder: s:null e:null o:null" + "'", str4, "Copyright Builder: s:null e:null o:null");
        org.junit.Assert.assertNotNull(copyrightBuilder6);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertNotNull(iHeaderMatcher9);
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "Copyright Builder: s:null e:.cvsignore o:null" + "'", str10, "Copyright Builder: s:null e:.cvsignore o:null");
        org.junit.Assert.assertNotNull(abstractBuilder11);
        org.junit.Assert.assertNotNull(notBuilder12);
        org.junit.Assert.assertEquals("'" + str13 + "' != '" + "NotBuilder: null" + "'", str13, "NotBuilder: null");
        org.junit.Assert.assertEquals("'" + str14 + "' != '" + "NotBuilder: null" + "'", str14, "NotBuilder: null");
        org.junit.Assert.assertEquals("'" + str15 + "' != '" + "NotBuilder: null" + "'", str15, "NotBuilder: null");
        org.junit.Assert.assertNotNull(iHeaderMatcherList16);
        org.junit.Assert.assertEquals("'" + str17 + "' != '" + "NotBuilder: null" + "'", str17, "NotBuilder: null");
        org.junit.Assert.assertNotNull(notBuilder18);
        org.junit.Assert.assertEquals("'" + str19 + "' != '" + "NotBuilder: null" + "'", str19, "NotBuilder: null");
        org.junit.Assert.assertNotNull(matcherRefBuilder20);
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + false + "'", boolean21 == false);
        org.junit.Assert.assertEquals("'" + str22 + "' != '" + "MathcerRefBuilder: null" + "'", str22, "MathcerRefBuilder: null");
        org.junit.Assert.assertNotNull(matcherRefBuilder24);
        org.junit.Assert.assertNotNull(matcherRefBuilder26);
        org.junit.Assert.assertNotNull(matcherRefBuilder28);
        org.junit.Assert.assertNotNull(matcherRefBuilder30);
        org.junit.Assert.assertEquals("'" + str31 + "' != '" + "MathcerRefBuilder: Datum [ name ='http://org/apache/rat/meta-data#LicenseFamilyName',value ='Academic Free License, Version 2.1 ']" + "'", str31, "MathcerRefBuilder: Datum [ name ='http://org/apache/rat/meta-data#LicenseFamilyName',value ='Academic Free License, Version 2.1 ']");
        org.junit.Assert.assertNotNull(abstractBuilder32);
        org.junit.Assert.assertEquals("'" + str33 + "' != '" + "NotBuilder: MathcerRefBuilder: Datum [ name ='http://org/apache/rat/meta-data#LicenseFamilyName',value ='Academic Free License, Version 2.1 ']" + "'", str33, "NotBuilder: MathcerRefBuilder: Datum [ name ='http://org/apache/rat/meta-data#LicenseFamilyName',value ='Academic Free License, Version 2.1 ']");
        org.junit.Assert.assertEquals("'" + str35 + "' != '" + "AnyBuilder:" + "'", str35, "AnyBuilder:");
        org.junit.Assert.assertNotNull(iHeaderMatcher36);
        org.junit.Assert.assertNotNull(anyBuilder37);
        org.junit.Assert.assertEquals("'" + str38 + "' != '" + "AnyBuilder:" + "'", str38, "AnyBuilder:");
        org.junit.Assert.assertNotNull(iHeaderMatcherList39);
        org.junit.Assert.assertNotNull(iHeaderMatcher40);
        org.junit.Assert.assertNotNull(iHeaderMatcher41);
        org.junit.Assert.assertNotNull(iHeaderMatcherList42);
        org.junit.Assert.assertEquals("'" + str44 + "' != '" + "NotBuilder: null" + "'", str44, "NotBuilder: null");
        org.junit.Assert.assertNotNull(matcherRefBuilder45);
        org.junit.Assert.assertTrue("'" + boolean46 + "' != '" + false + "'", boolean46 == false);
        org.junit.Assert.assertNotNull(matcherRefBuilder48);
        org.junit.Assert.assertNotNull(copyrightBuilder50);
        org.junit.Assert.assertNotNull(copyrightBuilder52);
        org.junit.Assert.assertEquals("'" + str53 + "' != '" + "Copyright Builder: s:OASIS e:null o:null" + "'", str53, "Copyright Builder: s:OASIS e:null o:null");
        org.junit.Assert.assertNotNull(copyrightBuilder55);
        org.junit.Assert.assertNotNull(matcherRefBuilder56);
        org.junit.Assert.assertTrue("'" + boolean57 + "' != '" + false + "'", boolean57 == false);
        org.junit.Assert.assertNotNull(copyrightBuilder58);
        org.junit.Assert.assertNotNull(copyrightBuilder60);
        org.junit.Assert.assertEquals("'" + str61 + "' != '" + "Copyright Builder: s:OASIS e:null o:null" + "'", str61, "Copyright Builder: s:OASIS e:null o:null");
        org.junit.Assert.assertNotNull(copyrightBuilder63);
        org.junit.Assert.assertNotNull(copyrightBuilder64);
        org.junit.Assert.assertNotNull(copyrightBuilder65);
        org.junit.Assert.assertEquals("'" + str66 + "' != '" + "Copyright Builder: s:null e:null o:null" + "'", str66, "Copyright Builder: s:null e:null o:null");
        org.junit.Assert.assertNotNull(copyrightBuilder68);
        org.junit.Assert.assertTrue("'" + boolean69 + "' != '" + false + "'", boolean69 == false);
        org.junit.Assert.assertNotNull(copyrightBuilder70);
        org.junit.Assert.assertEquals("'" + str71 + "' != '" + "Copyright Builder: s:null e:null o:null" + "'", str71, "Copyright Builder: s:null e:null o:null");
        org.junit.Assert.assertNotNull(copyrightBuilder73);
        org.junit.Assert.assertTrue("'" + boolean74 + "' != '" + false + "'", boolean74 == false);
        org.junit.Assert.assertEquals("'" + str75 + "' != '" + "Copyright Builder: s:null e:.cvsignore o:null" + "'", str75, "Copyright Builder: s:null e:.cvsignore o:null");
        org.junit.Assert.assertNotNull(copyrightBuilder76);
        org.junit.Assert.assertNotNull(copyrightBuilder78);
        org.junit.Assert.assertNotNull(anyBuilder79);
        org.junit.Assert.assertNotNull(matcherRefBuilder80);
        org.junit.Assert.assertTrue("'" + boolean81 + "' != '" + false + "'", boolean81 == false);
        org.junit.Assert.assertNotNull(matcherRefBuilder83);
        org.junit.Assert.assertNotNull(copyrightBuilder84);
        org.junit.Assert.assertNotNull(matcherRefBuilder85);
        org.junit.Assert.assertTrue("'" + boolean86 + "' != '" + false + "'", boolean86 == false);
        org.junit.Assert.assertEquals("'" + str87 + "' != '" + "MathcerRefBuilder: null" + "'", str87, "MathcerRefBuilder: null");
        org.junit.Assert.assertNotNull(matcherRefBuilder89);
        org.junit.Assert.assertNotNull(builderArray90);
        org.junit.Assert.assertTrue("'" + boolean92 + "' != '" + true + "'", boolean92 == true);
        org.junit.Assert.assertNotNull(abstractBuilder93);
        org.junit.Assert.assertNotNull(abstractBuilder94);
        org.junit.Assert.assertNotNull(abstractBuilder95);
        org.junit.Assert.assertNotNull(abstractBuilder96);
        org.junit.Assert.assertNotNull(abstractBuilder97);
        org.junit.Assert.assertNotNull(abstractBuilder98);
    }

    @Test
    public void test13897() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest27.test13897");
        org.apache.rat.report.claim.ClaimStatistic claimStatistic0 = new org.apache.rat.report.claim.ClaimStatistic();
        claimStatistic0.setNumApproved((int) (short) 10);
        claimStatistic0.setNumUnknown((int) '#');
        int int5 = claimStatistic0.getNumUnApproved();
        java.util.Map<java.lang.String, java.lang.Integer> strMap6 = claimStatistic0.getLicenseFileCodeMap();
        claimStatistic0.setNumGenerated((int) (short) 1);
        java.util.Map<java.lang.String, java.lang.Integer> strMap9 = claimStatistic0.getLicenseFileNameMap();
        claimStatistic0.setNumUnknown((int) (short) 100);
        claimStatistic0.setNumApproved(1);
        java.util.Map<java.lang.String, java.lang.Integer> strMap14 = claimStatistic0.getDocumentCategoryMap();
        claimStatistic0.setNumUnknown((int) 'a');
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 0 + "'", int5 == 0);
        org.junit.Assert.assertNull(strMap6);
        org.junit.Assert.assertNull(strMap9);
        org.junit.Assert.assertNull(strMap14);
    }

    @Test
    public void test13898() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest27.test13898");
        org.apache.rat.configuration.builders.CopyrightBuilder copyrightBuilder0 = org.apache.rat.analysis.IHeaderMatcher.Builder.copyright();
        org.apache.rat.configuration.builders.CopyrightBuilder copyrightBuilder2 = copyrightBuilder0.setStart("OASIS");
        org.apache.rat.configuration.builders.CopyrightBuilder copyrightBuilder4 = copyrightBuilder0.setOwner("Copyright Builder: s:null e:274c6a15-09f6-4bfd-ac53-1827770eb507 o:null");
        org.apache.rat.configuration.builders.CopyrightBuilder copyrightBuilder6 = copyrightBuilder4.setStart("7E27CD62-4403-40AB-A9F5-16E7C59AB2F1");
        org.apache.rat.configuration.builders.CopyrightBuilder copyrightBuilder8 = copyrightBuilder6.setStart("MathcerRefBuilder: archive");
        org.junit.Assert.assertNotNull(copyrightBuilder0);
        org.junit.Assert.assertNotNull(copyrightBuilder2);
        org.junit.Assert.assertNotNull(copyrightBuilder4);
        org.junit.Assert.assertNotNull(copyrightBuilder6);
        org.junit.Assert.assertNotNull(copyrightBuilder8);
    }

    @Test
    public void test13899() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest27.test13899");
        org.apache.commons.cli.CommandLine commandLine1 = null;
        // The following exception was thrown during execution in test generation
        try {
            org.apache.rat.ReportConfiguration reportConfiguration2 = org.apache.rat.Report.createConfiguration("e36751d0-cee9-45bc-972c-d0bd3bbd4bbe", commandLine1);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
    }

    @Test
    public void test13900() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest27.test13900");
        org.apache.rat.analysis.matchers.SimpleTextMatcher simpleTextMatcher3 = new org.apache.rat.analysis.matchers.SimpleTextMatcher("ffalse", "org/apache/rat/unapproved-licenses.xsl");
        org.apache.rat.analysis.matchers.NotMatcher notMatcher4 = new org.apache.rat.analysis.matchers.NotMatcher("89426113-1da8-4591-9c20-8025b6ece33d", (org.apache.rat.analysis.IHeaderMatcher) simpleTextMatcher3);
        org.apache.rat.analysis.IHeaderMatcher.State state5 = simpleTextMatcher3.finalizeState();
        java.lang.String str6 = state5.toString();
        org.junit.Assert.assertTrue("'" + state5 + "' != '" + org.apache.rat.analysis.IHeaderMatcher.State.f + "'", state5.equals(org.apache.rat.analysis.IHeaderMatcher.State.f));
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "f false" + "'", str6, "f false");
    }

    @Test
    public void test13901() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest27.test13901");
        java.io.Writer writer0 = null;
        org.apache.rat.report.xml.writer.impl.base.XmlWriter xmlWriter1 = new org.apache.rat.report.xml.writer.impl.base.XmlWriter(writer0);
        org.apache.rat.report.claim.impl.xml.SimpleXmlClaimReporter simpleXmlClaimReporter2 = new org.apache.rat.report.claim.impl.xml.SimpleXmlClaimReporter((org.apache.rat.report.xml.writer.IXmlWriter) xmlWriter1);
        org.apache.rat.report.claim.impl.xml.SimpleXmlClaimReporter simpleXmlClaimReporter3 = new org.apache.rat.report.claim.impl.xml.SimpleXmlClaimReporter((org.apache.rat.report.xml.writer.IXmlWriter) xmlWriter1);
        org.apache.rat.report.claim.impl.xml.SimpleXmlClaimReporter simpleXmlClaimReporter4 = new org.apache.rat.report.claim.impl.xml.SimpleXmlClaimReporter((org.apache.rat.report.xml.writer.IXmlWriter) xmlWriter1);
        org.apache.rat.report.claim.impl.xml.SimpleXmlClaimReporter simpleXmlClaimReporter5 = new org.apache.rat.report.claim.impl.xml.SimpleXmlClaimReporter((org.apache.rat.report.xml.writer.IXmlWriter) xmlWriter1);
        org.apache.rat.report.claim.impl.xml.SimpleXmlClaimReporter simpleXmlClaimReporter6 = new org.apache.rat.report.claim.impl.xml.SimpleXmlClaimReporter((org.apache.rat.report.xml.writer.IXmlWriter) xmlWriter1);
        org.apache.rat.report.claim.impl.xml.SimpleXmlClaimReporter simpleXmlClaimReporter7 = new org.apache.rat.report.claim.impl.xml.SimpleXmlClaimReporter((org.apache.rat.report.xml.writer.IXmlWriter) xmlWriter1);
        org.apache.rat.report.claim.impl.xml.SimpleXmlClaimReporter simpleXmlClaimReporter8 = new org.apache.rat.report.claim.impl.xml.SimpleXmlClaimReporter((org.apache.rat.report.xml.writer.IXmlWriter) xmlWriter1);
        org.apache.rat.report.claim.impl.xml.SimpleXmlClaimReporter simpleXmlClaimReporter9 = new org.apache.rat.report.claim.impl.xml.SimpleXmlClaimReporter((org.apache.rat.report.xml.writer.IXmlWriter) xmlWriter1);
        org.apache.rat.report.claim.impl.xml.SimpleXmlClaimReporter simpleXmlClaimReporter10 = new org.apache.rat.report.claim.impl.xml.SimpleXmlClaimReporter((org.apache.rat.report.xml.writer.IXmlWriter) xmlWriter1);
        org.apache.rat.report.claim.impl.xml.SimpleXmlClaimReporter simpleXmlClaimReporter11 = new org.apache.rat.report.claim.impl.xml.SimpleXmlClaimReporter((org.apache.rat.report.xml.writer.IXmlWriter) xmlWriter1);
        org.apache.rat.report.claim.impl.xml.SimpleXmlClaimReporter simpleXmlClaimReporter12 = new org.apache.rat.report.claim.impl.xml.SimpleXmlClaimReporter((org.apache.rat.report.xml.writer.IXmlWriter) xmlWriter1);
        org.apache.rat.report.claim.impl.xml.SimpleXmlClaimReporter simpleXmlClaimReporter13 = new org.apache.rat.report.claim.impl.xml.SimpleXmlClaimReporter((org.apache.rat.report.xml.writer.IXmlWriter) xmlWriter1);
        org.apache.rat.report.claim.impl.xml.SimpleXmlClaimReporter simpleXmlClaimReporter14 = new org.apache.rat.report.claim.impl.xml.SimpleXmlClaimReporter((org.apache.rat.report.xml.writer.IXmlWriter) xmlWriter1);
        org.apache.rat.report.claim.impl.xml.SimpleXmlClaimReporter simpleXmlClaimReporter15 = new org.apache.rat.report.claim.impl.xml.SimpleXmlClaimReporter((org.apache.rat.report.xml.writer.IXmlWriter) xmlWriter1);
        org.apache.rat.report.claim.impl.xml.SimpleXmlClaimReporter simpleXmlClaimReporter16 = new org.apache.rat.report.claim.impl.xml.SimpleXmlClaimReporter((org.apache.rat.report.xml.writer.IXmlWriter) xmlWriter1);
        org.apache.rat.report.claim.impl.xml.SimpleXmlClaimReporter simpleXmlClaimReporter17 = new org.apache.rat.report.claim.impl.xml.SimpleXmlClaimReporter((org.apache.rat.report.xml.writer.IXmlWriter) xmlWriter1);
        // The following exception was thrown during execution in test generation
        try {
            org.apache.rat.report.xml.writer.IXmlWriter iXmlWriter18 = xmlWriter1.startDocument();
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
    }

    @Test
    public void test13902() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest27.test13902");
        java.io.File file0 = null;
        java.util.regex.Pattern pattern1 = null;
        org.apache.rat.utils.Log log2 = null;
        org.apache.rat.ReportConfiguration reportConfiguration3 = new org.apache.rat.ReportConfiguration(log2);
        org.apache.rat.report.claim.ClaimStatistic claimStatistic4 = org.apache.rat.Reporter.report(reportConfiguration3);
        org.apache.rat.utils.Log log5 = null;
        org.apache.rat.ReportConfiguration reportConfiguration6 = new org.apache.rat.ReportConfiguration(log5);
        org.apache.rat.report.claim.ClaimStatistic claimStatistic7 = org.apache.rat.Reporter.report(reportConfiguration6);
        org.apache.rat.utils.ReportingSet.Options options8 = org.apache.rat.utils.ReportingSet.Options.OVERWRITE;
        reportConfiguration6.licenseDuplicateOption(options8);
        reportConfiguration3.familyDuplicateOption(options8);
        org.apache.rat.utils.Log log11 = reportConfiguration3.getLog();
        org.apache.rat.utils.Log log12 = null;
        org.apache.rat.ReportConfiguration reportConfiguration13 = new org.apache.rat.ReportConfiguration(log12);
        org.apache.rat.utils.ReportingSet.Options options14 = org.apache.rat.utils.ReportingSet.Options.OVERWRITE;
        reportConfiguration13.licenseDuplicateOption(options14);
        org.apache.rat.utils.Log log16 = null;
        org.apache.rat.ReportConfiguration reportConfiguration17 = new org.apache.rat.ReportConfiguration(log16);
        java.io.FilenameFilter filenameFilter18 = reportConfiguration17.getInputFileFilter();
        org.apache.rat.license.LicenseSetFactory.LicenseFilter licenseFilter19 = org.apache.rat.license.LicenseSetFactory.LicenseFilter.all;
        java.util.SortedSet<org.apache.rat.license.ILicense> iLicenseSet20 = reportConfiguration17.getLicenses(licenseFilter19);
        org.apache.rat.config.AddLicenseHeaders addLicenseHeaders21 = org.apache.rat.config.AddLicenseHeaders.FALSE;
        reportConfiguration17.setAddLicenseHeaders(addLicenseHeaders21);
        org.apache.rat.utils.Log log23 = null;
        org.apache.rat.ReportConfiguration reportConfiguration24 = new org.apache.rat.ReportConfiguration(log23);
        org.apache.rat.report.claim.ClaimStatistic claimStatistic25 = org.apache.rat.Reporter.report(reportConfiguration24);
        org.apache.rat.license.LicenseSetFactory.LicenseFilter licenseFilter26 = org.apache.rat.license.LicenseSetFactory.LicenseFilter.all;
        org.apache.rat.Reporter.listLicenses(reportConfiguration24, licenseFilter26);
        org.apache.rat.Reporter.listLicenses(reportConfiguration17, licenseFilter26);
        org.apache.rat.utils.Log log29 = null;
        org.apache.rat.ReportConfiguration reportConfiguration30 = new org.apache.rat.ReportConfiguration(log29);
        java.io.FilenameFilter filenameFilter31 = reportConfiguration30.getInputFileFilter();
        org.apache.rat.license.LicenseSetFactory.LicenseFilter licenseFilter32 = org.apache.rat.license.LicenseSetFactory.LicenseFilter.all;
        java.util.SortedSet<org.apache.rat.license.ILicense> iLicenseSet33 = reportConfiguration30.getLicenses(licenseFilter32);
        org.apache.rat.config.AddLicenseHeaders addLicenseHeaders34 = org.apache.rat.config.AddLicenseHeaders.FALSE;
        reportConfiguration30.setAddLicenseHeaders(addLicenseHeaders34);
        org.apache.rat.utils.Log log36 = null;
        org.apache.rat.ReportConfiguration reportConfiguration37 = new org.apache.rat.ReportConfiguration(log36);
        org.apache.rat.report.claim.ClaimStatistic claimStatistic38 = org.apache.rat.Reporter.report(reportConfiguration37);
        org.apache.rat.license.LicenseSetFactory.LicenseFilter licenseFilter39 = org.apache.rat.license.LicenseSetFactory.LicenseFilter.all;
        org.apache.rat.Reporter.listLicenses(reportConfiguration37, licenseFilter39);
        org.apache.rat.Reporter.listLicenses(reportConfiguration30, licenseFilter39);
        org.apache.rat.Reporter.listLicenses(reportConfiguration17, licenseFilter39);
        org.apache.rat.utils.Log log43 = null;
        org.apache.rat.ReportConfiguration reportConfiguration44 = new org.apache.rat.ReportConfiguration(log43);
        org.apache.commons.io.function.IOSupplier<java.io.OutputStream> outputStreamIOSupplier45 = reportConfiguration44.getOutput();
        reportConfiguration17.setOut(outputStreamIOSupplier45);
        org.apache.rat.utils.Log.Level level47 = org.apache.rat.utils.Log.Level.WARN;
        reportConfiguration17.logLicenseCollisions(level47);
        org.apache.commons.io.filefilter.IOFileFilter iOFileFilter49 = reportConfiguration17.getDirectoryFilter();
        reportConfiguration13.setInputFileFilter((java.io.FilenameFilter) iOFileFilter49);
        java.nio.file.Path path51 = null;
        boolean boolean52 = iOFileFilter49.matches(path51);
        org.apache.commons.io.filefilter.IOFileFilter iOFileFilter53 = iOFileFilter49.negate();
        org.apache.commons.io.filefilter.IOFileFilter iOFileFilter54 = iOFileFilter53.negate();
        reportConfiguration3.setDirectoryFilter(iOFileFilter53);
        // The following exception was thrown during execution in test generation
        try {
            org.apache.rat.walker.DirectoryWalker directoryWalker56 = new org.apache.rat.walker.DirectoryWalker(file0, pattern1, iOFileFilter53);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNull(claimStatistic4);
        org.junit.Assert.assertNull(claimStatistic7);
        org.junit.Assert.assertTrue("'" + options8 + "' != '" + org.apache.rat.utils.ReportingSet.Options.OVERWRITE + "'", options8.equals(org.apache.rat.utils.ReportingSet.Options.OVERWRITE));
        org.junit.Assert.assertNull(log11);
        org.junit.Assert.assertTrue("'" + options14 + "' != '" + org.apache.rat.utils.ReportingSet.Options.OVERWRITE + "'", options14.equals(org.apache.rat.utils.ReportingSet.Options.OVERWRITE));
        org.junit.Assert.assertNull(filenameFilter18);
        org.junit.Assert.assertTrue("'" + licenseFilter19 + "' != '" + org.apache.rat.license.LicenseSetFactory.LicenseFilter.all + "'", licenseFilter19.equals(org.apache.rat.license.LicenseSetFactory.LicenseFilter.all));
        org.junit.Assert.assertNotNull(iLicenseSet20);
        org.junit.Assert.assertTrue("'" + addLicenseHeaders21 + "' != '" + org.apache.rat.config.AddLicenseHeaders.FALSE + "'", addLicenseHeaders21.equals(org.apache.rat.config.AddLicenseHeaders.FALSE));
        org.junit.Assert.assertNull(claimStatistic25);
        org.junit.Assert.assertTrue("'" + licenseFilter26 + "' != '" + org.apache.rat.license.LicenseSetFactory.LicenseFilter.all + "'", licenseFilter26.equals(org.apache.rat.license.LicenseSetFactory.LicenseFilter.all));
        org.junit.Assert.assertNull(filenameFilter31);
        org.junit.Assert.assertTrue("'" + licenseFilter32 + "' != '" + org.apache.rat.license.LicenseSetFactory.LicenseFilter.all + "'", licenseFilter32.equals(org.apache.rat.license.LicenseSetFactory.LicenseFilter.all));
        org.junit.Assert.assertNotNull(iLicenseSet33);
        org.junit.Assert.assertTrue("'" + addLicenseHeaders34 + "' != '" + org.apache.rat.config.AddLicenseHeaders.FALSE + "'", addLicenseHeaders34.equals(org.apache.rat.config.AddLicenseHeaders.FALSE));
        org.junit.Assert.assertNull(claimStatistic38);
        org.junit.Assert.assertTrue("'" + licenseFilter39 + "' != '" + org.apache.rat.license.LicenseSetFactory.LicenseFilter.all + "'", licenseFilter39.equals(org.apache.rat.license.LicenseSetFactory.LicenseFilter.all));
        org.junit.Assert.assertNotNull(outputStreamIOSupplier45);
        org.junit.Assert.assertTrue("'" + level47 + "' != '" + org.apache.rat.utils.Log.Level.WARN + "'", level47.equals(org.apache.rat.utils.Log.Level.WARN));
        org.junit.Assert.assertNotNull(iOFileFilter49);
        org.junit.Assert.assertTrue("'" + boolean52 + "' != '" + false + "'", boolean52 == false);
        org.junit.Assert.assertNotNull(iOFileFilter53);
        org.junit.Assert.assertNotNull(iOFileFilter54);
    }

    @Test
    public void test13903() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest27.test13903");
        org.apache.rat.license.ILicenseFamilyBuilder iLicenseFamilyBuilder0 = new org.apache.rat.license.ILicenseFamilyBuilder();
        java.lang.String str1 = iLicenseFamilyBuilder0.getCategory();
        org.apache.rat.license.ILicenseFamily.Builder builder3 = iLicenseFamilyBuilder0.setLicenseFamilyCategory("AL   ");
        java.lang.String str4 = iLicenseFamilyBuilder0.getCategory();
        org.apache.rat.license.ILicenseFamily.Builder builder6 = iLicenseFamilyBuilder0.setLicenseFamilyName("535b5d01-f553-45e5-bb29-a646e4b8b66f");
        java.lang.String str7 = iLicenseFamilyBuilder0.getCategory();
        org.apache.rat.license.ILicenseFamily.Builder builder9 = iLicenseFamilyBuilder0.setLicenseFamilyName("9DF69CA9-2229-47B6-966B-221652FD7D08");
        org.apache.rat.license.ILicenseFamily.Builder builder11 = builder9.setLicenseFamilyName("RegexBuilder: null");
        org.junit.Assert.assertNull(str1);
        org.junit.Assert.assertNotNull(builder3);
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "AL   " + "'", str4, "AL   ");
        org.junit.Assert.assertNotNull(builder6);
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "AL   " + "'", str7, "AL   ");
        org.junit.Assert.assertNotNull(builder9);
        org.junit.Assert.assertNotNull(builder11);
    }

    @Test
    public void test13904() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest27.test13904");
        org.apache.rat.document.ToNameTransformer toNameTransformer0 = new org.apache.rat.document.ToNameTransformer();
        org.apache.rat.utils.DefaultLog defaultLog1 = org.apache.rat.utils.DefaultLog.INSTANCE;
        org.apache.rat.license.ILicense.Builder builder2 = org.apache.rat.license.ILicense.builder();
        org.apache.rat.license.ILicense.Builder builder4 = builder2.setLicenseFamilyCategory("");
        org.apache.rat.analysis.matchers.CopyrightMatcher copyrightMatcher8 = new org.apache.rat.analysis.matchers.CopyrightMatcher("", "GPL1 ", "hi!");
        org.apache.rat.analysis.IHeaderMatcher.State state9 = copyrightMatcher8.finalizeState();
        org.apache.rat.license.ILicense.Builder builder10 = builder4.setMatcher((org.apache.rat.analysis.IHeaderMatcher) copyrightMatcher8);
        org.apache.rat.license.ILicense.Builder builder12 = builder10.setLicenseFamilyCategory("");
        defaultLog1.error((java.lang.Object) builder12);
        java.lang.Object obj14 = toNameTransformer0.transform((java.lang.Object) defaultLog1);
        org.apache.rat.document.ToNameTransformer toNameTransformer15 = new org.apache.rat.document.ToNameTransformer();
        org.apache.rat.utils.DefaultLog defaultLog16 = org.apache.rat.utils.DefaultLog.INSTANCE;
        org.apache.rat.license.ILicense.Builder builder17 = org.apache.rat.license.ILicense.builder();
        org.apache.rat.license.ILicense.Builder builder19 = builder17.setLicenseFamilyCategory("");
        org.apache.rat.analysis.matchers.CopyrightMatcher copyrightMatcher23 = new org.apache.rat.analysis.matchers.CopyrightMatcher("", "GPL1 ", "hi!");
        org.apache.rat.analysis.IHeaderMatcher.State state24 = copyrightMatcher23.finalizeState();
        org.apache.rat.license.ILicense.Builder builder25 = builder19.setMatcher((org.apache.rat.analysis.IHeaderMatcher) copyrightMatcher23);
        org.apache.rat.license.ILicense.Builder builder27 = builder25.setLicenseFamilyCategory("");
        defaultLog16.error((java.lang.Object) builder27);
        java.lang.Object obj29 = toNameTransformer15.transform((java.lang.Object) defaultLog16);
        org.apache.rat.utils.Log log30 = null;
        org.apache.rat.ReportConfiguration reportConfiguration31 = new org.apache.rat.ReportConfiguration(log30);
        org.apache.rat.report.claim.ClaimStatistic claimStatistic32 = org.apache.rat.Reporter.report(reportConfiguration31);
        org.apache.rat.utils.Log log33 = null;
        org.apache.rat.ReportConfiguration reportConfiguration34 = new org.apache.rat.ReportConfiguration(log33);
        org.apache.rat.report.claim.ClaimStatistic claimStatistic35 = org.apache.rat.Reporter.report(reportConfiguration34);
        org.apache.rat.utils.ReportingSet.Options options36 = org.apache.rat.utils.ReportingSet.Options.OVERWRITE;
        reportConfiguration34.licenseDuplicateOption(options36);
        reportConfiguration31.familyDuplicateOption(options36);
        org.apache.commons.io.function.IOSupplier<java.io.PrintWriter> printWriterIOSupplier39 = reportConfiguration31.getWriter();
        boolean boolean40 = reportConfiguration31.isAddingLicensesForced();
        org.apache.rat.utils.Log log41 = null;
        org.apache.rat.ReportConfiguration reportConfiguration42 = new org.apache.rat.ReportConfiguration(log41);
        reportConfiguration42.addApprovedLicenseCategory(".cvsignore");
        org.apache.rat.utils.Log.Level level45 = org.apache.rat.utils.Log.Level.ERROR;
        reportConfiguration42.logFamilyCollisions(level45);
        reportConfiguration31.logLicenseCollisions(level45);
        defaultLog16.setLevel(level45);
        defaultLog1.setLevel(level45);
        org.apache.rat.utils.DefaultLog defaultLog50 = org.apache.rat.utils.DefaultLog.INSTANCE;
        org.apache.rat.license.ILicense.Builder builder51 = org.apache.rat.license.ILicense.builder();
        org.apache.rat.license.ILicense.Builder builder53 = builder51.setLicenseFamilyCategory("");
        org.apache.rat.analysis.matchers.CopyrightMatcher copyrightMatcher57 = new org.apache.rat.analysis.matchers.CopyrightMatcher("", "GPL1 ", "hi!");
        org.apache.rat.analysis.IHeaderMatcher.State state58 = copyrightMatcher57.finalizeState();
        org.apache.rat.license.ILicense.Builder builder59 = builder53.setMatcher((org.apache.rat.analysis.IHeaderMatcher) copyrightMatcher57);
        org.apache.rat.license.ILicense.Builder builder61 = builder59.setLicenseFamilyCategory("");
        defaultLog50.error((java.lang.Object) builder61);
        org.apache.rat.analysis.matchers.CopyrightMatcher copyrightMatcher66 = new org.apache.rat.analysis.matchers.CopyrightMatcher("", "GPL1 ", "hi!");
        copyrightMatcher66.reset();
        org.apache.rat.license.ILicense.Builder builder68 = builder61.setMatcher((org.apache.rat.analysis.IHeaderMatcher) copyrightMatcher66);
        org.apache.rat.configuration.builders.SpdxBuilder spdxBuilder69 = org.apache.rat.analysis.IHeaderMatcher.Builder.spdx();
        java.lang.String str70 = spdxBuilder69.toString();
        org.apache.rat.configuration.builders.SpdxBuilder spdxBuilder72 = spdxBuilder69.setName("ef7a8b13-64c3-4510-bb0c-dbf208e1e73f");
        org.apache.rat.license.ILicense.Builder builder73 = builder68.setMatcher((org.apache.rat.analysis.IHeaderMatcher.Builder) spdxBuilder69);
        org.apache.rat.license.ILicense.Builder builder75 = builder73.setName("DOJO ");
        org.apache.rat.license.ILicense.Builder builder77 = builder75.setLicenseFamilyCategory("RegexBuilder: http://org/apache/rat/meta-data#LicenseFamilyName");
        org.apache.rat.configuration.builders.MatcherRefBuilder matcherRefBuilder78 = org.apache.rat.analysis.IHeaderMatcher.Builder.matcherRef();
        boolean boolean79 = matcherRefBuilder78.hasId();
        java.util.Map<java.lang.String, org.apache.rat.analysis.IHeaderMatcher> strMap80 = null;
        org.apache.rat.configuration.builders.MatcherRefBuilder matcherRefBuilder81 = matcherRefBuilder78.setMatchers(strMap80);
        java.util.Map<java.lang.String, org.apache.rat.analysis.IHeaderMatcher> strMap82 = null;
        org.apache.rat.configuration.builders.MatcherRefBuilder matcherRefBuilder83 = matcherRefBuilder81.setMatchers(strMap82);
        org.apache.rat.license.ILicense.Builder builder84 = builder77.setMatcher((org.apache.rat.analysis.IHeaderMatcher.Builder) matcherRefBuilder81);
        defaultLog1.warn((java.lang.Object) builder84);
        org.apache.rat.configuration.builders.SpdxBuilder spdxBuilder86 = org.apache.rat.analysis.IHeaderMatcher.Builder.spdx();
        java.lang.String str87 = spdxBuilder86.toString();
        org.apache.rat.configuration.builders.SpdxBuilder spdxBuilder89 = spdxBuilder86.setName("ef7a8b13-64c3-4510-bb0c-dbf208e1e73f");
        org.apache.rat.analysis.IHeaderMatcher iHeaderMatcher90 = spdxBuilder86.build();
        org.apache.rat.configuration.builders.SpdxBuilder spdxBuilder92 = spdxBuilder86.setName("641dafc1-13c3-45d4-8272-f36f10392c53");
        org.apache.rat.configuration.builders.AbstractBuilder abstractBuilder94 = spdxBuilder92.setId("f02d0cdc36424583b71fdd84a120752c");
        org.apache.rat.analysis.IHeaderMatcher iHeaderMatcher95 = spdxBuilder92.build();
        org.apache.rat.configuration.builders.SpdxBuilder spdxBuilder97 = spdxBuilder92.setName("e15853fc-6f47-4f3f-a346-63fe009915e5");
        defaultLog1.error((java.lang.Object) spdxBuilder92);
        org.junit.Assert.assertNotNull(defaultLog1);
        org.junit.Assert.assertNotNull(builder2);
        org.junit.Assert.assertNotNull(builder4);
        org.junit.Assert.assertTrue("'" + state9 + "' != '" + org.apache.rat.analysis.IHeaderMatcher.State.f + "'", state9.equals(org.apache.rat.analysis.IHeaderMatcher.State.f));
        org.junit.Assert.assertNotNull(builder10);
        org.junit.Assert.assertNotNull(builder12);
        org.junit.Assert.assertNull(obj14);
        org.junit.Assert.assertNotNull(defaultLog16);
        org.junit.Assert.assertNotNull(builder17);
        org.junit.Assert.assertNotNull(builder19);
        org.junit.Assert.assertTrue("'" + state24 + "' != '" + org.apache.rat.analysis.IHeaderMatcher.State.f + "'", state24.equals(org.apache.rat.analysis.IHeaderMatcher.State.f));
        org.junit.Assert.assertNotNull(builder25);
        org.junit.Assert.assertNotNull(builder27);
        org.junit.Assert.assertNull(obj29);
        org.junit.Assert.assertNull(claimStatistic32);
        org.junit.Assert.assertNull(claimStatistic35);
        org.junit.Assert.assertTrue("'" + options36 + "' != '" + org.apache.rat.utils.ReportingSet.Options.OVERWRITE + "'", options36.equals(org.apache.rat.utils.ReportingSet.Options.OVERWRITE));
        org.junit.Assert.assertNotNull(printWriterIOSupplier39);
        org.junit.Assert.assertTrue("'" + boolean40 + "' != '" + false + "'", boolean40 == false);
        org.junit.Assert.assertTrue("'" + level45 + "' != '" + org.apache.rat.utils.Log.Level.ERROR + "'", level45.equals(org.apache.rat.utils.Log.Level.ERROR));
        org.junit.Assert.assertNotNull(defaultLog50);
        org.junit.Assert.assertNotNull(builder51);
        org.junit.Assert.assertNotNull(builder53);
        org.junit.Assert.assertTrue("'" + state58 + "' != '" + org.apache.rat.analysis.IHeaderMatcher.State.f + "'", state58.equals(org.apache.rat.analysis.IHeaderMatcher.State.f));
        org.junit.Assert.assertNotNull(builder59);
        org.junit.Assert.assertNotNull(builder61);
        org.junit.Assert.assertNotNull(builder68);
        org.junit.Assert.assertNotNull(spdxBuilder69);
        org.junit.Assert.assertEquals("'" + str70 + "' != '" + "SpdxBuilder: null" + "'", str70, "SpdxBuilder: null");
        org.junit.Assert.assertNotNull(spdxBuilder72);
        org.junit.Assert.assertNotNull(builder73);
        org.junit.Assert.assertNotNull(builder75);
        org.junit.Assert.assertNotNull(builder77);
        org.junit.Assert.assertNotNull(matcherRefBuilder78);
        org.junit.Assert.assertTrue("'" + boolean79 + "' != '" + false + "'", boolean79 == false);
        org.junit.Assert.assertNotNull(matcherRefBuilder81);
        org.junit.Assert.assertNotNull(matcherRefBuilder83);
        org.junit.Assert.assertNotNull(builder84);
        org.junit.Assert.assertNotNull(spdxBuilder86);
        org.junit.Assert.assertEquals("'" + str87 + "' != '" + "SpdxBuilder: null" + "'", str87, "SpdxBuilder: null");
        org.junit.Assert.assertNotNull(spdxBuilder89);
        org.junit.Assert.assertNotNull(iHeaderMatcher90);
        org.junit.Assert.assertNotNull(spdxBuilder92);
        org.junit.Assert.assertNotNull(abstractBuilder94);
        org.junit.Assert.assertNotNull(iHeaderMatcher95);
        org.junit.Assert.assertNotNull(spdxBuilder97);
    }

    @Test
    public void test13905() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest27.test13905");
        org.apache.rat.utils.DefaultLog defaultLog0 = org.apache.rat.utils.DefaultLog.INSTANCE;
        org.apache.rat.annotation.ApacheV2LicenseAppender apacheV2LicenseAppender1 = new org.apache.rat.annotation.ApacheV2LicenseAppender((org.apache.rat.utils.Log) defaultLog0);
        org.apache.rat.annotation.ApacheV2LicenseAppender apacheV2LicenseAppender2 = new org.apache.rat.annotation.ApacheV2LicenseAppender((org.apache.rat.utils.Log) defaultLog0);
        java.util.regex.Pattern pattern3 = null;
        org.apache.rat.header.HeaderBean headerBean5 = new org.apache.rat.header.HeaderBean(pattern3, true);
        defaultLog0.info((java.lang.Object) true);
        org.apache.rat.annotation.ApacheV2LicenseAppender apacheV2LicenseAppender7 = new org.apache.rat.annotation.ApacheV2LicenseAppender((org.apache.rat.utils.Log) defaultLog0);
        apacheV2LicenseAppender7.setForce(true);
        apacheV2LicenseAppender7.setForce(false);
        org.junit.Assert.assertNotNull(defaultLog0);
    }

    @Test
    public void test13906() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest27.test13906");
        org.apache.rat.utils.Log log0 = null;
        org.apache.rat.ReportConfiguration reportConfiguration1 = new org.apache.rat.ReportConfiguration(log0);
        org.apache.rat.report.claim.ClaimStatistic claimStatistic2 = org.apache.rat.Reporter.report(reportConfiguration1);
        org.apache.rat.report.IReportable iReportable3 = null;
        reportConfiguration1.setReportable(iReportable3);
        org.apache.rat.license.ILicense iLicense5 = null;
        reportConfiguration1.addLicense(iLicense5);
        org.apache.rat.utils.Log log7 = null;
        org.apache.rat.ReportConfiguration reportConfiguration8 = new org.apache.rat.ReportConfiguration(log7);
        org.apache.rat.utils.ReportingSet.Options options9 = org.apache.rat.utils.ReportingSet.Options.OVERWRITE;
        reportConfiguration8.licenseDuplicateOption(options9);
        reportConfiguration1.familyDuplicateOption(options9);
        org.apache.rat.utils.Log log12 = null;
        org.apache.rat.ReportConfiguration reportConfiguration13 = new org.apache.rat.ReportConfiguration(log12);
        java.io.FilenameFilter filenameFilter14 = reportConfiguration13.getInputFileFilter();
        org.apache.rat.license.LicenseSetFactory.LicenseFilter licenseFilter15 = org.apache.rat.license.LicenseSetFactory.LicenseFilter.all;
        java.util.SortedSet<org.apache.rat.license.ILicense> iLicenseSet16 = reportConfiguration13.getLicenses(licenseFilter15);
        org.apache.rat.config.AddLicenseHeaders addLicenseHeaders17 = org.apache.rat.config.AddLicenseHeaders.FALSE;
        reportConfiguration13.setAddLicenseHeaders(addLicenseHeaders17);
        org.apache.rat.utils.Log log19 = null;
        org.apache.rat.ReportConfiguration reportConfiguration20 = new org.apache.rat.ReportConfiguration(log19);
        org.apache.rat.report.claim.ClaimStatistic claimStatistic21 = org.apache.rat.Reporter.report(reportConfiguration20);
        org.apache.rat.license.LicenseSetFactory.LicenseFilter licenseFilter22 = org.apache.rat.license.LicenseSetFactory.LicenseFilter.all;
        org.apache.rat.Reporter.listLicenses(reportConfiguration20, licenseFilter22);
        org.apache.rat.Reporter.listLicenses(reportConfiguration13, licenseFilter22);
        org.apache.rat.utils.Log log25 = null;
        org.apache.rat.ReportConfiguration reportConfiguration26 = new org.apache.rat.ReportConfiguration(log25);
        java.io.FilenameFilter filenameFilter27 = reportConfiguration26.getInputFileFilter();
        org.apache.rat.license.LicenseSetFactory.LicenseFilter licenseFilter28 = org.apache.rat.license.LicenseSetFactory.LicenseFilter.all;
        java.util.SortedSet<org.apache.rat.license.ILicense> iLicenseSet29 = reportConfiguration26.getLicenses(licenseFilter28);
        org.apache.rat.config.AddLicenseHeaders addLicenseHeaders30 = org.apache.rat.config.AddLicenseHeaders.FALSE;
        reportConfiguration26.setAddLicenseHeaders(addLicenseHeaders30);
        org.apache.rat.utils.Log log32 = null;
        org.apache.rat.ReportConfiguration reportConfiguration33 = new org.apache.rat.ReportConfiguration(log32);
        org.apache.rat.report.claim.ClaimStatistic claimStatistic34 = org.apache.rat.Reporter.report(reportConfiguration33);
        org.apache.rat.license.LicenseSetFactory.LicenseFilter licenseFilter35 = org.apache.rat.license.LicenseSetFactory.LicenseFilter.all;
        org.apache.rat.Reporter.listLicenses(reportConfiguration33, licenseFilter35);
        org.apache.rat.Reporter.listLicenses(reportConfiguration26, licenseFilter35);
        org.apache.rat.Reporter.listLicenses(reportConfiguration13, licenseFilter35);
        org.apache.commons.io.function.IOSupplier<java.io.OutputStream> outputStreamIOSupplier39 = reportConfiguration13.getOutput();
        reportConfiguration1.setOut(outputStreamIOSupplier39);
        org.apache.rat.report.IReportable iReportable41 = null;
        reportConfiguration1.setReportable(iReportable41);
        org.apache.commons.io.function.IOSupplier<java.io.PrintWriter> printWriterIOSupplier43 = reportConfiguration1.getWriter();
        org.apache.rat.utils.Log log44 = null;
        org.apache.rat.ReportConfiguration reportConfiguration45 = new org.apache.rat.ReportConfiguration(log44);
        java.io.FilenameFilter filenameFilter46 = reportConfiguration45.getInputFileFilter();
        org.apache.rat.license.LicenseSetFactory.LicenseFilter licenseFilter47 = org.apache.rat.license.LicenseSetFactory.LicenseFilter.all;
        java.util.SortedSet<org.apache.rat.license.ILicense> iLicenseSet48 = reportConfiguration45.getLicenses(licenseFilter47);
        org.apache.rat.config.AddLicenseHeaders addLicenseHeaders49 = org.apache.rat.config.AddLicenseHeaders.FALSE;
        reportConfiguration45.setAddLicenseHeaders(addLicenseHeaders49);
        org.apache.rat.utils.Log log51 = null;
        org.apache.rat.ReportConfiguration reportConfiguration52 = new org.apache.rat.ReportConfiguration(log51);
        org.apache.rat.report.claim.ClaimStatistic claimStatistic53 = org.apache.rat.Reporter.report(reportConfiguration52);
        org.apache.rat.license.LicenseSetFactory.LicenseFilter licenseFilter54 = org.apache.rat.license.LicenseSetFactory.LicenseFilter.all;
        org.apache.rat.Reporter.listLicenses(reportConfiguration52, licenseFilter54);
        org.apache.rat.Reporter.listLicenses(reportConfiguration45, licenseFilter54);
        org.apache.rat.config.AddLicenseHeaders addLicenseHeaders57 = org.apache.rat.config.AddLicenseHeaders.FORCED;
        reportConfiguration45.setAddLicenseHeaders(addLicenseHeaders57);
        reportConfiguration1.setAddLicenseHeaders(addLicenseHeaders57);
        boolean boolean60 = reportConfiguration1.isStyleReport();
        org.apache.rat.configuration.Format format62 = org.apache.rat.configuration.Format.XML;
        org.apache.rat.configuration.LicenseReader licenseReader63 = format62.licenseReader();
        org.apache.rat.configuration.MatcherReader matcherReader64 = format62.matcherReader();
        org.apache.rat.configuration.LicenseReader licenseReader65 = format62.licenseReader();
        java.util.SortedSet<org.apache.rat.license.ILicense> iLicenseSet66 = licenseReader65.readLicenses();
        org.apache.rat.license.ILicense iLicense67 = org.apache.rat.license.LicenseSetFactory.search("Datum [ name ='http://org/apache/rat/meta-data#LicenseFamilyCategory',value ='GPL1  ']", iLicenseSet66);
        org.apache.rat.utils.ReportingSet<java.lang.String> strSet68 = new org.apache.rat.utils.ReportingSet<java.lang.String>();
        int int69 = strSet68.size();
        org.apache.rat.license.LicenseSetFactory licenseSetFactory70 = new org.apache.rat.license.LicenseSetFactory(iLicenseSet66, (java.util.Collection<java.lang.String>) strSet68);
        org.apache.rat.license.ILicenseFamily[] iLicenseFamilyArray71 = new org.apache.rat.license.ILicenseFamily[] {};
        java.util.ArrayList<org.apache.rat.license.ILicenseFamily> iLicenseFamilyList72 = new java.util.ArrayList<org.apache.rat.license.ILicenseFamily>();
        boolean boolean73 = java.util.Collections.addAll((java.util.Collection<org.apache.rat.license.ILicenseFamily>) iLicenseFamilyList72, iLicenseFamilyArray71);
        org.apache.rat.policy.DefaultPolicy defaultPolicy74 = new org.apache.rat.policy.DefaultPolicy((java.util.Collection<org.apache.rat.license.ILicenseFamily>) iLicenseFamilyList72);
        java.util.SortedSet<org.apache.rat.license.ILicenseFamily> iLicenseFamilySet75 = defaultPolicy74.getApprovedLicenseNames();
        java.util.SortedSet<org.apache.rat.license.ILicenseFamily> iLicenseFamilySet76 = defaultPolicy74.getApprovedLicenseNames();
        boolean boolean77 = strSet68.retainAll((java.util.Collection<org.apache.rat.license.ILicenseFamily>) iLicenseFamilySet76);
        reportConfiguration1.addFamilies((java.util.Collection<org.apache.rat.license.ILicenseFamily>) iLicenseFamilySet76);
        org.junit.Assert.assertNull(claimStatistic2);
        org.junit.Assert.assertTrue("'" + options9 + "' != '" + org.apache.rat.utils.ReportingSet.Options.OVERWRITE + "'", options9.equals(org.apache.rat.utils.ReportingSet.Options.OVERWRITE));
        org.junit.Assert.assertNull(filenameFilter14);
        org.junit.Assert.assertTrue("'" + licenseFilter15 + "' != '" + org.apache.rat.license.LicenseSetFactory.LicenseFilter.all + "'", licenseFilter15.equals(org.apache.rat.license.LicenseSetFactory.LicenseFilter.all));
        org.junit.Assert.assertNotNull(iLicenseSet16);
        org.junit.Assert.assertTrue("'" + addLicenseHeaders17 + "' != '" + org.apache.rat.config.AddLicenseHeaders.FALSE + "'", addLicenseHeaders17.equals(org.apache.rat.config.AddLicenseHeaders.FALSE));
        org.junit.Assert.assertNull(claimStatistic21);
        org.junit.Assert.assertTrue("'" + licenseFilter22 + "' != '" + org.apache.rat.license.LicenseSetFactory.LicenseFilter.all + "'", licenseFilter22.equals(org.apache.rat.license.LicenseSetFactory.LicenseFilter.all));
        org.junit.Assert.assertNull(filenameFilter27);
        org.junit.Assert.assertTrue("'" + licenseFilter28 + "' != '" + org.apache.rat.license.LicenseSetFactory.LicenseFilter.all + "'", licenseFilter28.equals(org.apache.rat.license.LicenseSetFactory.LicenseFilter.all));
        org.junit.Assert.assertNotNull(iLicenseSet29);
        org.junit.Assert.assertTrue("'" + addLicenseHeaders30 + "' != '" + org.apache.rat.config.AddLicenseHeaders.FALSE + "'", addLicenseHeaders30.equals(org.apache.rat.config.AddLicenseHeaders.FALSE));
        org.junit.Assert.assertNull(claimStatistic34);
        org.junit.Assert.assertTrue("'" + licenseFilter35 + "' != '" + org.apache.rat.license.LicenseSetFactory.LicenseFilter.all + "'", licenseFilter35.equals(org.apache.rat.license.LicenseSetFactory.LicenseFilter.all));
        org.junit.Assert.assertNotNull(outputStreamIOSupplier39);
        org.junit.Assert.assertNotNull(printWriterIOSupplier43);
        org.junit.Assert.assertNull(filenameFilter46);
        org.junit.Assert.assertTrue("'" + licenseFilter47 + "' != '" + org.apache.rat.license.LicenseSetFactory.LicenseFilter.all + "'", licenseFilter47.equals(org.apache.rat.license.LicenseSetFactory.LicenseFilter.all));
        org.junit.Assert.assertNotNull(iLicenseSet48);
        org.junit.Assert.assertTrue("'" + addLicenseHeaders49 + "' != '" + org.apache.rat.config.AddLicenseHeaders.FALSE + "'", addLicenseHeaders49.equals(org.apache.rat.config.AddLicenseHeaders.FALSE));
        org.junit.Assert.assertNull(claimStatistic53);
        org.junit.Assert.assertTrue("'" + licenseFilter54 + "' != '" + org.apache.rat.license.LicenseSetFactory.LicenseFilter.all + "'", licenseFilter54.equals(org.apache.rat.license.LicenseSetFactory.LicenseFilter.all));
        org.junit.Assert.assertTrue("'" + addLicenseHeaders57 + "' != '" + org.apache.rat.config.AddLicenseHeaders.FORCED + "'", addLicenseHeaders57.equals(org.apache.rat.config.AddLicenseHeaders.FORCED));
        org.junit.Assert.assertTrue("'" + boolean60 + "' != '" + true + "'", boolean60 == true);
        org.junit.Assert.assertTrue("'" + format62 + "' != '" + org.apache.rat.configuration.Format.XML + "'", format62.equals(org.apache.rat.configuration.Format.XML));
        org.junit.Assert.assertNotNull(licenseReader63);
        org.junit.Assert.assertNotNull(matcherReader64);
        org.junit.Assert.assertNotNull(licenseReader65);
        org.junit.Assert.assertNotNull(iLicenseSet66);
        org.junit.Assert.assertNull(iLicense67);
        org.junit.Assert.assertTrue("'" + int69 + "' != '" + 0 + "'", int69 == 0);
        org.junit.Assert.assertNotNull(iLicenseFamilyArray71);
        org.junit.Assert.assertTrue("'" + boolean73 + "' != '" + false + "'", boolean73 == false);
        org.junit.Assert.assertNotNull(iLicenseFamilySet75);
        org.junit.Assert.assertNotNull(iLicenseFamilySet76);
        org.junit.Assert.assertTrue("'" + boolean77 + "' != '" + false + "'", boolean77 == false);
    }

    @Test
    public void test13907() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest27.test13907");
        org.apache.rat.config.ReportFormat reportFormat0 = org.apache.rat.config.ReportFormat.PLAIN;
        boolean boolean2 = reportFormat0.is("http://org/apache/rat/meta-data#FileCategory");
        boolean boolean4 = reportFormat0.is("PLAIN");
        boolean boolean6 = reportFormat0.is("TextBuilder: c523095e-4421-4cc4-9...");
        boolean boolean8 = reportFormat0.is("");
        boolean boolean10 = reportFormat0.is("Datum [ name ='http://org/apache/rat/meta-data#LicenseFamilyCategory',value ='CDDL1 ']");
        org.junit.Assert.assertTrue("'" + reportFormat0 + "' != '" + org.apache.rat.config.ReportFormat.PLAIN + "'", reportFormat0.equals(org.apache.rat.config.ReportFormat.PLAIN));
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + false + "'", boolean2 == false);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + true + "'", boolean4 == true);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
    }

    @Test
    public void test13908() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest27.test13908");
        org.apache.rat.utils.Log log0 = null;
        org.apache.rat.ReportConfiguration reportConfiguration1 = new org.apache.rat.ReportConfiguration(log0);
        org.apache.rat.license.ILicenseFamily[] iLicenseFamilyArray2 = new org.apache.rat.license.ILicenseFamily[] {};
        java.util.ArrayList<org.apache.rat.license.ILicenseFamily> iLicenseFamilyList3 = new java.util.ArrayList<org.apache.rat.license.ILicenseFamily>();
        boolean boolean4 = java.util.Collections.addAll((java.util.Collection<org.apache.rat.license.ILicenseFamily>) iLicenseFamilyList3, iLicenseFamilyArray2);
        reportConfiguration1.addFamilies((java.util.Collection<org.apache.rat.license.ILicenseFamily>) iLicenseFamilyList3);
        org.apache.rat.report.IReportable iReportable6 = null;
        reportConfiguration1.setReportable(iReportable6);
        org.apache.rat.utils.ReportingSet<java.lang.String> strSet8 = new org.apache.rat.utils.ReportingSet<java.lang.String>();
        java.lang.Object[] objArray9 = strSet8.toArray();
        org.apache.rat.utils.Log log10 = null;
        org.apache.rat.ReportConfiguration reportConfiguration11 = new org.apache.rat.ReportConfiguration(log10);
        org.apache.rat.report.claim.ClaimStatistic claimStatistic12 = org.apache.rat.Reporter.report(reportConfiguration11);
        org.apache.rat.utils.Log log13 = null;
        org.apache.rat.ReportConfiguration reportConfiguration14 = new org.apache.rat.ReportConfiguration(log13);
        org.apache.rat.report.claim.ClaimStatistic claimStatistic15 = org.apache.rat.Reporter.report(reportConfiguration14);
        org.apache.rat.utils.ReportingSet.Options options16 = org.apache.rat.utils.ReportingSet.Options.OVERWRITE;
        reportConfiguration14.licenseDuplicateOption(options16);
        reportConfiguration11.familyDuplicateOption(options16);
        org.apache.commons.io.function.IOSupplier<java.io.PrintWriter> printWriterIOSupplier19 = reportConfiguration11.getWriter();
        boolean boolean20 = reportConfiguration11.isAddingLicensesForced();
        org.apache.rat.utils.Log log21 = null;
        org.apache.rat.ReportConfiguration reportConfiguration22 = new org.apache.rat.ReportConfiguration(log21);
        reportConfiguration22.addApprovedLicenseCategory(".cvsignore");
        org.apache.rat.utils.Log.Level level25 = org.apache.rat.utils.Log.Level.ERROR;
        reportConfiguration22.logFamilyCollisions(level25);
        reportConfiguration11.logLicenseCollisions(level25);
        org.apache.rat.utils.ReportingSet<java.lang.String> strSet28 = strSet8.setLogLevel(level25);
        java.util.stream.Stream<java.lang.String> strStream29 = strSet28.stream();
        reportConfiguration1.addApprovedLicenseCategories((java.util.Collection<java.lang.String>) strSet28);
        org.apache.rat.utils.ReportingSet<java.lang.String> strSet32 = strSet28.tailSet("1e96b21e-f913-4d52-87cc-09323c460281");
        java.util.Iterator<java.lang.String> strItor33 = strSet32.iterator();
        java.util.stream.Stream<java.lang.String> strStream34 = strSet32.stream();
        org.junit.Assert.assertNotNull(iLicenseFamilyArray2);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertNotNull(objArray9);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray9), "[]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray9), "[]");
        org.junit.Assert.assertNull(claimStatistic12);
        org.junit.Assert.assertNull(claimStatistic15);
        org.junit.Assert.assertTrue("'" + options16 + "' != '" + org.apache.rat.utils.ReportingSet.Options.OVERWRITE + "'", options16.equals(org.apache.rat.utils.ReportingSet.Options.OVERWRITE));
        org.junit.Assert.assertNotNull(printWriterIOSupplier19);
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + false + "'", boolean20 == false);
        org.junit.Assert.assertTrue("'" + level25 + "' != '" + org.apache.rat.utils.Log.Level.ERROR + "'", level25.equals(org.apache.rat.utils.Log.Level.ERROR));
        org.junit.Assert.assertNotNull(strSet28);
        org.junit.Assert.assertNotNull(strStream29);
        org.junit.Assert.assertNotNull(strSet32);
        org.junit.Assert.assertNotNull(strItor33);
        org.junit.Assert.assertNotNull(strStream34);
    }

    @Test
    public void test13909() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest27.test13909");
        boolean boolean1 = org.apache.rat.document.impl.guesser.BinaryGuesser.isBinary("f5f3fb9b-540a-43ef-a018-8ce5779e23f4");
        org.junit.Assert.assertTrue("'" + boolean1 + "' != '" + false + "'", boolean1 == false);
    }

    @Test
    public void test13910() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest27.test13910");
        org.apache.rat.analysis.license.FullTextMatchingLicense fullTextMatchingLicense0 = new org.apache.rat.analysis.license.FullTextMatchingLicense();
        fullTextMatchingLicense0.setLicenseFamilyName("hi!");
        java.lang.String str3 = fullTextMatchingLicense0.getLicenseFamilyCategory();
        java.lang.String str4 = fullTextMatchingLicense0.getLicenseFamilyName();
        fullTextMatchingLicense0.setLicenseFamilyName("http://org/apache/rat/meta-data#LicenseFamilyName");
        fullTextMatchingLicense0.setFullText("9c36f068-9920-4c66-98c2-ba24e3dffa9c");
        fullTextMatchingLicense0.setNotes("0925e382-79b7-417a-85be-aed683d949e2");
        fullTextMatchingLicense0.setLicenseFamilyCategory("");
        java.lang.String str13 = fullTextMatchingLicense0.getLicenseFamilyCategory();
        java.lang.String str14 = fullTextMatchingLicense0.getLicenseFamilyCategory();
        fullTextMatchingLicense0.setLicenseFamilyName("org/apache/rat/unapproved-licenses.xsl");
        org.junit.Assert.assertNull(str3);
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "hi!" + "'", str4, "hi!");
        org.junit.Assert.assertEquals("'" + str13 + "' != '" + "" + "'", str13, "");
        org.junit.Assert.assertEquals("'" + str14 + "' != '" + "" + "'", str14, "");
    }

    @Test
    public void test13911() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest27.test13911");
        org.apache.rat.analysis.license.FullTextMatchingLicense fullTextMatchingLicense0 = new org.apache.rat.analysis.license.FullTextMatchingLicense();
        fullTextMatchingLicense0.setLicenseFamilyName("hi!");
        java.lang.String str3 = fullTextMatchingLicense0.getLicenseFamilyCategory();
        fullTextMatchingLicense0.setNotes(".cvsignore");
        fullTextMatchingLicense0.setLicenseFamilyName("MATHCERREFBUILDER: TMF");
        java.lang.String str8 = fullTextMatchingLicense0.getLicenseFamilyCategory();
        fullTextMatchingLicense0.setNotes("1f5aa559-4feb-4541-97db-90be35893a11");
        org.junit.Assert.assertNull(str3);
        org.junit.Assert.assertNull(str8);
    }

    @Test
    public void test13912() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest27.test13912");
        org.apache.rat.document.ToNameTransformer toNameTransformer0 = new org.apache.rat.document.ToNameTransformer();
        org.apache.rat.utils.DefaultLog defaultLog1 = org.apache.rat.utils.DefaultLog.INSTANCE;
        org.apache.rat.license.ILicense.Builder builder2 = org.apache.rat.license.ILicense.builder();
        org.apache.rat.license.ILicense.Builder builder4 = builder2.setLicenseFamilyCategory("");
        org.apache.rat.analysis.matchers.CopyrightMatcher copyrightMatcher8 = new org.apache.rat.analysis.matchers.CopyrightMatcher("", "GPL1 ", "hi!");
        org.apache.rat.analysis.IHeaderMatcher.State state9 = copyrightMatcher8.finalizeState();
        org.apache.rat.license.ILicense.Builder builder10 = builder4.setMatcher((org.apache.rat.analysis.IHeaderMatcher) copyrightMatcher8);
        org.apache.rat.license.ILicense.Builder builder12 = builder10.setLicenseFamilyCategory("");
        defaultLog1.error((java.lang.Object) builder12);
        java.lang.Object obj14 = toNameTransformer0.transform((java.lang.Object) defaultLog1);
        java.lang.Object obj15 = null;
        defaultLog1.warn(obj15);
        org.apache.rat.utils.DefaultLog defaultLog17 = org.apache.rat.utils.DefaultLog.INSTANCE;
        org.apache.rat.utils.Log log18 = null;
        org.apache.rat.ReportConfiguration reportConfiguration19 = new org.apache.rat.ReportConfiguration(log18);
        reportConfiguration19.addApprovedLicenseCategory(".cvsignore");
        org.apache.rat.utils.Log.Level level22 = org.apache.rat.utils.Log.Level.ERROR;
        reportConfiguration19.logFamilyCollisions(level22);
        defaultLog17.setLevel(level22);
        defaultLog1.log(level22, "AnyBuilder:");
        org.apache.rat.annotation.ApacheV2LicenseAppender apacheV2LicenseAppender28 = new org.apache.rat.annotation.ApacheV2LicenseAppender((org.apache.rat.utils.Log) defaultLog1, "ab5d9dd2-5529-4ca4-8c75-441ea7a5351b");
        org.apache.rat.ReportConfiguration reportConfiguration29 = new org.apache.rat.ReportConfiguration((org.apache.rat.utils.Log) defaultLog1);
        org.junit.Assert.assertNotNull(defaultLog1);
        org.junit.Assert.assertNotNull(builder2);
        org.junit.Assert.assertNotNull(builder4);
        org.junit.Assert.assertTrue("'" + state9 + "' != '" + org.apache.rat.analysis.IHeaderMatcher.State.f + "'", state9.equals(org.apache.rat.analysis.IHeaderMatcher.State.f));
        org.junit.Assert.assertNotNull(builder10);
        org.junit.Assert.assertNotNull(builder12);
        org.junit.Assert.assertNull(obj14);
        org.junit.Assert.assertNotNull(defaultLog17);
        org.junit.Assert.assertTrue("'" + level22 + "' != '" + org.apache.rat.utils.Log.Level.ERROR + "'", level22.equals(org.apache.rat.utils.Log.Level.ERROR));
    }

    @Test
    public void test13913() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest27.test13913");
        org.apache.rat.analysis.matchers.FullTextMatcher fullTextMatcher2 = new org.apache.rat.analysis.matchers.FullTextMatcher("http://org/apache/rat/meta-data#FileCategory", "8f82a952-5bfd-446b-ac79-15beef5b3f17");
        fullTextMatcher2.reset();
        fullTextMatcher2.reset();
        fullTextMatcher2.reset();
        java.lang.String str6 = fullTextMatcher2.toString();
        fullTextMatcher2.reset();
        java.lang.String str8 = fullTextMatcher2.toString();
        org.apache.rat.analysis.IHeaderMatcher.State state9 = fullTextMatcher2.currentState();
        fullTextMatcher2.reset();
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "http://org/apache/rat/meta-data#FileCategory" + "'", str6, "http://org/apache/rat/meta-data#FileCategory");
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "http://org/apache/rat/meta-data#FileCategory" + "'", str8, "http://org/apache/rat/meta-data#FileCategory");
        org.junit.Assert.assertTrue("'" + state9 + "' != '" + org.apache.rat.analysis.IHeaderMatcher.State.i + "'", state9.equals(org.apache.rat.analysis.IHeaderMatcher.State.i));
    }

    @Test
    public void test13914() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest27.test13914");
        org.apache.rat.document.ToNameTransformer toNameTransformer0 = new org.apache.rat.document.ToNameTransformer();
        org.apache.rat.utils.DefaultLog defaultLog1 = org.apache.rat.utils.DefaultLog.INSTANCE;
        org.apache.rat.license.ILicense.Builder builder2 = org.apache.rat.license.ILicense.builder();
        org.apache.rat.license.ILicense.Builder builder4 = builder2.setLicenseFamilyCategory("");
        org.apache.rat.analysis.matchers.CopyrightMatcher copyrightMatcher8 = new org.apache.rat.analysis.matchers.CopyrightMatcher("", "GPL1 ", "hi!");
        org.apache.rat.analysis.IHeaderMatcher.State state9 = copyrightMatcher8.finalizeState();
        org.apache.rat.license.ILicense.Builder builder10 = builder4.setMatcher((org.apache.rat.analysis.IHeaderMatcher) copyrightMatcher8);
        org.apache.rat.license.ILicense.Builder builder12 = builder10.setLicenseFamilyCategory("");
        defaultLog1.error((java.lang.Object) builder12);
        java.lang.Object obj14 = toNameTransformer0.transform((java.lang.Object) defaultLog1);
        org.apache.rat.annotation.ApacheV2LicenseAppender apacheV2LicenseAppender16 = new org.apache.rat.annotation.ApacheV2LicenseAppender((org.apache.rat.utils.Log) defaultLog1, "");
        java.io.Writer writer17 = null;
        org.apache.rat.report.xml.writer.impl.base.XmlWriter xmlWriter18 = new org.apache.rat.report.xml.writer.impl.base.XmlWriter(writer17);
        org.apache.rat.report.claim.impl.xml.SimpleXmlClaimReporter simpleXmlClaimReporter19 = new org.apache.rat.report.claim.impl.xml.SimpleXmlClaimReporter((org.apache.rat.report.xml.writer.IXmlWriter) xmlWriter18);
        org.apache.rat.report.claim.impl.xml.SimpleXmlClaimReporter simpleXmlClaimReporter20 = new org.apache.rat.report.claim.impl.xml.SimpleXmlClaimReporter((org.apache.rat.report.xml.writer.IXmlWriter) xmlWriter18);
        org.apache.rat.report.claim.impl.xml.SimpleXmlClaimReporter simpleXmlClaimReporter21 = new org.apache.rat.report.claim.impl.xml.SimpleXmlClaimReporter((org.apache.rat.report.xml.writer.IXmlWriter) xmlWriter18);
        org.apache.rat.report.claim.impl.xml.SimpleXmlClaimReporter simpleXmlClaimReporter22 = new org.apache.rat.report.claim.impl.xml.SimpleXmlClaimReporter((org.apache.rat.report.xml.writer.IXmlWriter) xmlWriter18);
        org.apache.rat.report.claim.impl.xml.SimpleXmlClaimReporter simpleXmlClaimReporter23 = new org.apache.rat.report.claim.impl.xml.SimpleXmlClaimReporter((org.apache.rat.report.xml.writer.IXmlWriter) xmlWriter18);
        org.apache.rat.report.claim.impl.xml.SimpleXmlClaimReporter simpleXmlClaimReporter24 = new org.apache.rat.report.claim.impl.xml.SimpleXmlClaimReporter((org.apache.rat.report.xml.writer.IXmlWriter) xmlWriter18);
        org.apache.rat.report.claim.impl.xml.SimpleXmlClaimReporter simpleXmlClaimReporter25 = new org.apache.rat.report.claim.impl.xml.SimpleXmlClaimReporter((org.apache.rat.report.xml.writer.IXmlWriter) xmlWriter18);
        org.apache.rat.report.claim.impl.xml.SimpleXmlClaimReporter simpleXmlClaimReporter26 = new org.apache.rat.report.claim.impl.xml.SimpleXmlClaimReporter((org.apache.rat.report.xml.writer.IXmlWriter) xmlWriter18);
        org.apache.rat.report.claim.impl.xml.SimpleXmlClaimReporter simpleXmlClaimReporter27 = new org.apache.rat.report.claim.impl.xml.SimpleXmlClaimReporter((org.apache.rat.report.xml.writer.IXmlWriter) xmlWriter18);
        org.apache.rat.report.claim.impl.xml.SimpleXmlClaimReporter simpleXmlClaimReporter28 = new org.apache.rat.report.claim.impl.xml.SimpleXmlClaimReporter((org.apache.rat.report.xml.writer.IXmlWriter) xmlWriter18);
        org.apache.rat.report.claim.impl.xml.SimpleXmlClaimReporter simpleXmlClaimReporter29 = new org.apache.rat.report.claim.impl.xml.SimpleXmlClaimReporter((org.apache.rat.report.xml.writer.IXmlWriter) xmlWriter18);
        defaultLog1.error((java.lang.Object) xmlWriter18);
        java.lang.CharSequence charSequence31 = null;
        // The following exception was thrown during execution in test generation
        try {
            org.apache.rat.report.xml.writer.IXmlWriter iXmlWriter32 = xmlWriter18.openElement(charSequence31);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(defaultLog1);
        org.junit.Assert.assertNotNull(builder2);
        org.junit.Assert.assertNotNull(builder4);
        org.junit.Assert.assertTrue("'" + state9 + "' != '" + org.apache.rat.analysis.IHeaderMatcher.State.f + "'", state9.equals(org.apache.rat.analysis.IHeaderMatcher.State.f));
        org.junit.Assert.assertNotNull(builder10);
        org.junit.Assert.assertNotNull(builder12);
        org.junit.Assert.assertNull(obj14);
    }

    @Test
    public void test13915() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest27.test13915");
        org.apache.rat.utils.DefaultLog defaultLog0 = org.apache.rat.utils.DefaultLog.INSTANCE;
        org.apache.rat.annotation.ApacheV2LicenseAppender apacheV2LicenseAppender1 = new org.apache.rat.annotation.ApacheV2LicenseAppender((org.apache.rat.utils.Log) defaultLog0);
        org.apache.rat.utils.Log log2 = null;
        org.apache.rat.ReportConfiguration reportConfiguration3 = new org.apache.rat.ReportConfiguration(log2);
        org.apache.rat.report.claim.ClaimStatistic claimStatistic4 = org.apache.rat.Reporter.report(reportConfiguration3);
        org.apache.rat.utils.Log log5 = null;
        org.apache.rat.ReportConfiguration reportConfiguration6 = new org.apache.rat.ReportConfiguration(log5);
        org.apache.rat.report.claim.ClaimStatistic claimStatistic7 = org.apache.rat.Reporter.report(reportConfiguration6);
        org.apache.rat.utils.ReportingSet.Options options8 = org.apache.rat.utils.ReportingSet.Options.OVERWRITE;
        reportConfiguration6.licenseDuplicateOption(options8);
        reportConfiguration3.familyDuplicateOption(options8);
        org.apache.commons.io.function.IOSupplier<java.io.PrintWriter> printWriterIOSupplier11 = reportConfiguration3.getWriter();
        org.apache.rat.utils.Log log12 = null;
        org.apache.rat.ReportConfiguration reportConfiguration13 = new org.apache.rat.ReportConfiguration(log12);
        reportConfiguration13.addApprovedLicenseCategory(".cvsignore");
        org.apache.rat.utils.Log.Level level16 = org.apache.rat.utils.Log.Level.ERROR;
        reportConfiguration13.logFamilyCollisions(level16);
        reportConfiguration3.logFamilyCollisions(level16);
        org.apache.rat.Defaults.Builder builder19 = org.apache.rat.Defaults.builder();
        org.apache.rat.Defaults.Builder builder20 = builder19.noDefault();
        defaultLog0.log(level16, (java.lang.Object) builder19);
        java.net.URL uRL22 = null;
        org.apache.rat.Defaults.Builder builder23 = builder19.remove(uRL22);
        java.net.URL uRL24 = null;
        // The following exception was thrown during execution in test generation
        try {
            org.apache.rat.Defaults.Builder builder25 = builder19.add(uRL24);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(defaultLog0);
        org.junit.Assert.assertNull(claimStatistic4);
        org.junit.Assert.assertNull(claimStatistic7);
        org.junit.Assert.assertTrue("'" + options8 + "' != '" + org.apache.rat.utils.ReportingSet.Options.OVERWRITE + "'", options8.equals(org.apache.rat.utils.ReportingSet.Options.OVERWRITE));
        org.junit.Assert.assertNotNull(printWriterIOSupplier11);
        org.junit.Assert.assertTrue("'" + level16 + "' != '" + org.apache.rat.utils.Log.Level.ERROR + "'", level16.equals(org.apache.rat.utils.Log.Level.ERROR));
        org.junit.Assert.assertNotNull(builder19);
        org.junit.Assert.assertNotNull(builder20);
        org.junit.Assert.assertNotNull(builder23);
    }

    @Test
    public void test13916() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest27.test13916");
        org.apache.rat.utils.DefaultLog defaultLog0 = org.apache.rat.utils.DefaultLog.INSTANCE;
        org.apache.rat.license.ILicense.Builder builder1 = org.apache.rat.license.ILicense.builder();
        org.apache.rat.license.ILicense.Builder builder3 = builder1.setLicenseFamilyCategory("");
        org.apache.rat.analysis.matchers.CopyrightMatcher copyrightMatcher7 = new org.apache.rat.analysis.matchers.CopyrightMatcher("", "GPL1 ", "hi!");
        org.apache.rat.analysis.IHeaderMatcher.State state8 = copyrightMatcher7.finalizeState();
        org.apache.rat.license.ILicense.Builder builder9 = builder3.setMatcher((org.apache.rat.analysis.IHeaderMatcher) copyrightMatcher7);
        org.apache.rat.license.ILicense.Builder builder11 = builder9.setLicenseFamilyCategory("");
        defaultLog0.error((java.lang.Object) builder11);
        org.apache.rat.utils.Log.Level level13 = org.apache.rat.utils.Log.Level.INFO;
        defaultLog0.log(level13, "JAVA");
        org.apache.rat.utils.Log log16 = null;
        org.apache.rat.ReportConfiguration reportConfiguration17 = new org.apache.rat.ReportConfiguration(log16);
        org.apache.rat.report.claim.ClaimStatistic claimStatistic18 = org.apache.rat.Reporter.report(reportConfiguration17);
        org.apache.rat.utils.Log log19 = null;
        org.apache.rat.ReportConfiguration reportConfiguration20 = new org.apache.rat.ReportConfiguration(log19);
        org.apache.rat.report.claim.ClaimStatistic claimStatistic21 = org.apache.rat.Reporter.report(reportConfiguration20);
        org.apache.rat.utils.ReportingSet.Options options22 = org.apache.rat.utils.ReportingSet.Options.OVERWRITE;
        reportConfiguration20.licenseDuplicateOption(options22);
        reportConfiguration17.familyDuplicateOption(options22);
        org.apache.commons.io.function.IOSupplier<java.io.PrintWriter> printWriterIOSupplier25 = reportConfiguration17.getWriter();
        boolean boolean26 = reportConfiguration17.isAddingLicensesForced();
        org.apache.rat.utils.Log log27 = null;
        org.apache.rat.ReportConfiguration reportConfiguration28 = new org.apache.rat.ReportConfiguration(log27);
        reportConfiguration28.addApprovedLicenseCategory(".cvsignore");
        org.apache.rat.utils.Log.Level level31 = org.apache.rat.utils.Log.Level.ERROR;
        reportConfiguration28.logFamilyCollisions(level31);
        reportConfiguration17.logLicenseCollisions(level31);
        defaultLog0.log(level31, "http://org/apache/rat/meta-data#HeaderSample");
        org.apache.rat.utils.Log.Level level36 = defaultLog0.getLevel();
        org.apache.rat.analysis.matchers.SimpleTextMatcher simpleTextMatcher38 = new org.apache.rat.analysis.matchers.SimpleTextMatcher("AL   ");
        org.apache.rat.analysis.IHeaderMatcher.State state39 = simpleTextMatcher38.finalizeState();
        defaultLog0.info((java.lang.Object) simpleTextMatcher38);
        org.apache.rat.utils.DefaultLog defaultLog41 = org.apache.rat.utils.DefaultLog.INSTANCE;
        org.apache.rat.license.ILicense.Builder builder42 = org.apache.rat.license.ILicense.builder();
        org.apache.rat.license.ILicense.Builder builder44 = builder42.setLicenseFamilyCategory("");
        org.apache.rat.analysis.matchers.CopyrightMatcher copyrightMatcher48 = new org.apache.rat.analysis.matchers.CopyrightMatcher("", "GPL1 ", "hi!");
        org.apache.rat.analysis.IHeaderMatcher.State state49 = copyrightMatcher48.finalizeState();
        org.apache.rat.license.ILicense.Builder builder50 = builder44.setMatcher((org.apache.rat.analysis.IHeaderMatcher) copyrightMatcher48);
        org.apache.rat.license.ILicense.Builder builder52 = builder50.setLicenseFamilyCategory("");
        defaultLog41.error((java.lang.Object) builder52);
        org.apache.rat.utils.Log.Level level54 = org.apache.rat.utils.Log.Level.INFO;
        defaultLog41.log(level54, "JAVA");
        org.apache.rat.utils.Log log57 = null;
        org.apache.rat.ReportConfiguration reportConfiguration58 = new org.apache.rat.ReportConfiguration(log57);
        org.apache.commons.io.function.IOSupplier<java.io.OutputStream> outputStreamIOSupplier59 = reportConfiguration58.getOutput();
        reportConfiguration58.setCopyrightMessage("MANIFEST.MF");
        org.apache.rat.utils.Log log62 = reportConfiguration58.getLog();
        org.apache.rat.utils.Log.Level level63 = org.apache.rat.utils.Log.Level.INFO;
        reportConfiguration58.logFamilyCollisions(level63);
        defaultLog41.setLevel(level63);
        org.apache.rat.utils.Log.Level level66 = defaultLog41.getLevel();
        defaultLog0.setLevel(level66);
        org.junit.Assert.assertNotNull(defaultLog0);
        org.junit.Assert.assertNotNull(builder1);
        org.junit.Assert.assertNotNull(builder3);
        org.junit.Assert.assertTrue("'" + state8 + "' != '" + org.apache.rat.analysis.IHeaderMatcher.State.f + "'", state8.equals(org.apache.rat.analysis.IHeaderMatcher.State.f));
        org.junit.Assert.assertNotNull(builder9);
        org.junit.Assert.assertNotNull(builder11);
        org.junit.Assert.assertTrue("'" + level13 + "' != '" + org.apache.rat.utils.Log.Level.INFO + "'", level13.equals(org.apache.rat.utils.Log.Level.INFO));
        org.junit.Assert.assertNull(claimStatistic18);
        org.junit.Assert.assertNull(claimStatistic21);
        org.junit.Assert.assertTrue("'" + options22 + "' != '" + org.apache.rat.utils.ReportingSet.Options.OVERWRITE + "'", options22.equals(org.apache.rat.utils.ReportingSet.Options.OVERWRITE));
        org.junit.Assert.assertNotNull(printWriterIOSupplier25);
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + false + "'", boolean26 == false);
        org.junit.Assert.assertTrue("'" + level31 + "' != '" + org.apache.rat.utils.Log.Level.ERROR + "'", level31.equals(org.apache.rat.utils.Log.Level.ERROR));
        org.junit.Assert.assertTrue("'" + level36 + "' != '" + org.apache.rat.utils.Log.Level.ERROR + "'", level36.equals(org.apache.rat.utils.Log.Level.ERROR));
        org.junit.Assert.assertTrue("'" + state39 + "' != '" + org.apache.rat.analysis.IHeaderMatcher.State.f + "'", state39.equals(org.apache.rat.analysis.IHeaderMatcher.State.f));
        org.junit.Assert.assertNotNull(defaultLog41);
        org.junit.Assert.assertNotNull(builder42);
        org.junit.Assert.assertNotNull(builder44);
        org.junit.Assert.assertTrue("'" + state49 + "' != '" + org.apache.rat.analysis.IHeaderMatcher.State.f + "'", state49.equals(org.apache.rat.analysis.IHeaderMatcher.State.f));
        org.junit.Assert.assertNotNull(builder50);
        org.junit.Assert.assertNotNull(builder52);
        org.junit.Assert.assertTrue("'" + level54 + "' != '" + org.apache.rat.utils.Log.Level.INFO + "'", level54.equals(org.apache.rat.utils.Log.Level.INFO));
        org.junit.Assert.assertNotNull(outputStreamIOSupplier59);
        org.junit.Assert.assertNull(log62);
        org.junit.Assert.assertTrue("'" + level63 + "' != '" + org.apache.rat.utils.Log.Level.INFO + "'", level63.equals(org.apache.rat.utils.Log.Level.INFO));
        org.junit.Assert.assertTrue("'" + level66 + "' != '" + org.apache.rat.utils.Log.Level.INFO + "'", level66.equals(org.apache.rat.utils.Log.Level.INFO));
    }

    @Test
    public void test13917() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest27.test13917");
        org.apache.rat.configuration.builders.AnyBuilder anyBuilder0 = org.apache.rat.analysis.IHeaderMatcher.Builder.any();
        org.apache.rat.analysis.IHeaderMatcher iHeaderMatcher1 = anyBuilder0.build();
        org.apache.rat.analysis.IHeaderMatcher iHeaderMatcher2 = anyBuilder0.build();
        org.apache.rat.analysis.IHeaderMatcher iHeaderMatcher3 = anyBuilder0.build();
        org.apache.rat.analysis.IHeaderMatcher iHeaderMatcher4 = anyBuilder0.build();
        java.util.List<org.apache.rat.analysis.IHeaderMatcher> iHeaderMatcherList5 = anyBuilder0.getChildren();
        org.apache.rat.analysis.IHeaderMatcher iHeaderMatcher6 = anyBuilder0.build();
        org.junit.Assert.assertNotNull(anyBuilder0);
        org.junit.Assert.assertNotNull(iHeaderMatcher1);
        org.junit.Assert.assertNotNull(iHeaderMatcher2);
        org.junit.Assert.assertNotNull(iHeaderMatcher3);
        org.junit.Assert.assertNotNull(iHeaderMatcher4);
        org.junit.Assert.assertNotNull(iHeaderMatcherList5);
        org.junit.Assert.assertNotNull(iHeaderMatcher6);
    }

    @Test
    public void test13918() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest27.test13918");
        org.apache.rat.utils.Log log0 = null;
        org.apache.rat.ReportConfiguration reportConfiguration1 = new org.apache.rat.ReportConfiguration(log0);
        org.apache.rat.report.claim.ClaimStatistic claimStatistic2 = org.apache.rat.Reporter.report(reportConfiguration1);
        org.apache.commons.io.function.IOSupplier<java.io.OutputStream> outputStreamIOSupplier3 = reportConfiguration1.getOutput();
        org.apache.rat.license.ILicense iLicense4 = null;
        reportConfiguration1.addLicense(iLicense4);
        reportConfiguration1.addApprovedLicenseCategory("6481fb19-38f0-43f5-ab95-caf84a069ee1");
        boolean boolean8 = reportConfiguration1.isStyleReport();
        org.apache.commons.io.filefilter.IOFileFilter iOFileFilter9 = reportConfiguration1.getDirectoryFilter();
        org.apache.rat.license.ILicenseFamilyBuilder iLicenseFamilyBuilder10 = new org.apache.rat.license.ILicenseFamilyBuilder();
        org.apache.rat.license.ILicenseFamily.Builder builder12 = iLicenseFamilyBuilder10.setLicenseFamilyCategory("Modified BSD License");
        org.apache.rat.license.ILicenseFamily.Builder builder14 = iLicenseFamilyBuilder10.setLicenseFamilyCategory("6486879f-fc81-4b57-aec7-c4c77d540c30");
        org.apache.rat.license.ILicenseFamily.Builder builder16 = iLicenseFamilyBuilder10.setLicenseFamilyName("MathcerRefBuilder: ");
        org.apache.rat.license.ILicenseFamily iLicenseFamily17 = iLicenseFamilyBuilder10.build();
        java.lang.String str18 = iLicenseFamily17.getFamilyName();
        reportConfiguration1.addFamily(iLicenseFamily17);
        org.junit.Assert.assertNull(claimStatistic2);
        org.junit.Assert.assertNotNull(outputStreamIOSupplier3);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + true + "'", boolean8 == true);
        org.junit.Assert.assertNotNull(iOFileFilter9);
        org.junit.Assert.assertNotNull(builder12);
        org.junit.Assert.assertNotNull(builder14);
        org.junit.Assert.assertNotNull(builder16);
        org.junit.Assert.assertNotNull(iLicenseFamily17);
        org.junit.Assert.assertEquals("'" + str18 + "' != '" + "MathcerRefBuilder: " + "'", str18, "MathcerRefBuilder: ");
    }

    @Test
    public void test13919() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest27.test13919");
        org.apache.rat.api.MetaData metaData0 = new org.apache.rat.api.MetaData();
        java.lang.String str2 = metaData0.value("COMMON DEVELOPMENT AND DISTRIBUTION LICENSE Version 1.0");
        java.lang.String str4 = metaData0.value("W3C Document Copyright");
        boolean boolean6 = metaData0.clear("hi!");
        java.lang.String str8 = metaData0.value("true");
        org.apache.rat.api.MetaData.Datum datum10 = metaData0.get("GNU General Public License, version 1");
        org.apache.rat.api.MetaData.Datum datum12 = metaData0.get("http:");
        org.apache.rat.api.MetaData.Datum datum13 = org.apache.rat.api.MetaData.RAT_APPROVED_LICENSE_DATIM_TRUE;
        metaData0.add(datum13);
        boolean boolean16 = metaData0.clear("CDDL1");
        java.util.Collection<org.apache.rat.api.MetaData.Datum> datumCollection17 = metaData0.getData();
        org.apache.rat.Defaults.Builder builder19 = org.apache.rat.Defaults.builder();
        org.apache.rat.Defaults defaults20 = builder19.build();
        org.apache.rat.utils.Log log21 = null;
        org.apache.rat.ReportConfiguration reportConfiguration22 = new org.apache.rat.ReportConfiguration(log21);
        java.io.FilenameFilter filenameFilter23 = reportConfiguration22.getInputFileFilter();
        org.apache.rat.license.LicenseSetFactory.LicenseFilter licenseFilter24 = org.apache.rat.license.LicenseSetFactory.LicenseFilter.all;
        java.util.SortedSet<org.apache.rat.license.ILicense> iLicenseSet25 = reportConfiguration22.getLicenses(licenseFilter24);
        org.apache.rat.config.AddLicenseHeaders addLicenseHeaders26 = org.apache.rat.config.AddLicenseHeaders.FALSE;
        reportConfiguration22.setAddLicenseHeaders(addLicenseHeaders26);
        org.apache.rat.utils.Log log28 = null;
        org.apache.rat.ReportConfiguration reportConfiguration29 = new org.apache.rat.ReportConfiguration(log28);
        org.apache.rat.report.claim.ClaimStatistic claimStatistic30 = org.apache.rat.Reporter.report(reportConfiguration29);
        org.apache.rat.license.LicenseSetFactory.LicenseFilter licenseFilter31 = org.apache.rat.license.LicenseSetFactory.LicenseFilter.all;
        org.apache.rat.Reporter.listLicenses(reportConfiguration29, licenseFilter31);
        org.apache.rat.Reporter.listLicenses(reportConfiguration22, licenseFilter31);
        org.apache.rat.utils.Log log34 = null;
        org.apache.rat.ReportConfiguration reportConfiguration35 = new org.apache.rat.ReportConfiguration(log34);
        java.io.FilenameFilter filenameFilter36 = reportConfiguration35.getInputFileFilter();
        org.apache.rat.license.LicenseSetFactory.LicenseFilter licenseFilter37 = org.apache.rat.license.LicenseSetFactory.LicenseFilter.all;
        java.util.SortedSet<org.apache.rat.license.ILicense> iLicenseSet38 = reportConfiguration35.getLicenses(licenseFilter37);
        org.apache.rat.config.AddLicenseHeaders addLicenseHeaders39 = org.apache.rat.config.AddLicenseHeaders.FALSE;
        reportConfiguration35.setAddLicenseHeaders(addLicenseHeaders39);
        org.apache.rat.utils.Log log41 = null;
        org.apache.rat.ReportConfiguration reportConfiguration42 = new org.apache.rat.ReportConfiguration(log41);
        org.apache.rat.report.claim.ClaimStatistic claimStatistic43 = org.apache.rat.Reporter.report(reportConfiguration42);
        org.apache.rat.license.LicenseSetFactory.LicenseFilter licenseFilter44 = org.apache.rat.license.LicenseSetFactory.LicenseFilter.all;
        org.apache.rat.Reporter.listLicenses(reportConfiguration42, licenseFilter44);
        org.apache.rat.Reporter.listLicenses(reportConfiguration35, licenseFilter44);
        java.util.SortedSet<org.apache.rat.license.ILicenseFamily> iLicenseFamilySet47 = reportConfiguration22.getLicenseFamilies(licenseFilter44);
        java.util.SortedSet<org.apache.rat.license.ILicense> iLicenseSet48 = defaults20.getLicenses(licenseFilter44);
        org.apache.rat.utils.ReportingSet<org.apache.rat.license.ILicense> iLicenseSet49 = new org.apache.rat.utils.ReportingSet<org.apache.rat.license.ILicense>(iLicenseSet48);
        org.apache.rat.license.ILicense iLicense50 = org.apache.rat.license.LicenseSetFactory.search("TMF", iLicenseSet48);
        java.lang.String str51 = iLicense50.derivedFrom();
        java.lang.String str52 = iLicense50.getNotes();
        org.apache.rat.license.ILicenseFamily iLicenseFamily53 = iLicense50.getLicenseFamily();
        metaData0.reportOnLicense(iLicense50);
        java.lang.String str55 = iLicense50.getNotes();
        java.lang.String str56 = iLicense50.getName();
        org.junit.Assert.assertNull(str2);
        org.junit.Assert.assertNull(str4);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertNull(str8);
        org.junit.Assert.assertNull(datum10);
        org.junit.Assert.assertNull(datum12);
        org.junit.Assert.assertNotNull(datum13);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
        org.junit.Assert.assertNotNull(datumCollection17);
        org.junit.Assert.assertNotNull(builder19);
        org.junit.Assert.assertNotNull(defaults20);
        org.junit.Assert.assertNull(filenameFilter23);
        org.junit.Assert.assertTrue("'" + licenseFilter24 + "' != '" + org.apache.rat.license.LicenseSetFactory.LicenseFilter.all + "'", licenseFilter24.equals(org.apache.rat.license.LicenseSetFactory.LicenseFilter.all));
        org.junit.Assert.assertNotNull(iLicenseSet25);
        org.junit.Assert.assertTrue("'" + addLicenseHeaders26 + "' != '" + org.apache.rat.config.AddLicenseHeaders.FALSE + "'", addLicenseHeaders26.equals(org.apache.rat.config.AddLicenseHeaders.FALSE));
        org.junit.Assert.assertNull(claimStatistic30);
        org.junit.Assert.assertTrue("'" + licenseFilter31 + "' != '" + org.apache.rat.license.LicenseSetFactory.LicenseFilter.all + "'", licenseFilter31.equals(org.apache.rat.license.LicenseSetFactory.LicenseFilter.all));
        org.junit.Assert.assertNull(filenameFilter36);
        org.junit.Assert.assertTrue("'" + licenseFilter37 + "' != '" + org.apache.rat.license.LicenseSetFactory.LicenseFilter.all + "'", licenseFilter37.equals(org.apache.rat.license.LicenseSetFactory.LicenseFilter.all));
        org.junit.Assert.assertNotNull(iLicenseSet38);
        org.junit.Assert.assertTrue("'" + addLicenseHeaders39 + "' != '" + org.apache.rat.config.AddLicenseHeaders.FALSE + "'", addLicenseHeaders39.equals(org.apache.rat.config.AddLicenseHeaders.FALSE));
        org.junit.Assert.assertNull(claimStatistic43);
        org.junit.Assert.assertTrue("'" + licenseFilter44 + "' != '" + org.apache.rat.license.LicenseSetFactory.LicenseFilter.all + "'", licenseFilter44.equals(org.apache.rat.license.LicenseSetFactory.LicenseFilter.all));
        org.junit.Assert.assertNotNull(iLicenseFamilySet47);
        org.junit.Assert.assertNotNull(iLicenseSet48);
        org.junit.Assert.assertNotNull(iLicense50);
        org.junit.Assert.assertEquals("'" + str51 + "' != '" + "BSD-3" + "'", str51, "BSD-3");
        org.junit.Assert.assertNull(str52);
        org.junit.Assert.assertNotNull(iLicenseFamily53);
        org.junit.Assert.assertNull(str55);
        org.junit.Assert.assertEquals("'" + str56 + "' != '" + "The Telemanagement Forum License" + "'", str56, "The Telemanagement Forum License");
    }

    @Test
    public void test13920() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest27.test13920");
        org.apache.rat.config.SourceCodeManagementSystems sourceCodeManagementSystems0 = org.apache.rat.config.SourceCodeManagementSystems.CVS;
        java.util.List<java.lang.String> strList1 = sourceCodeManagementSystems0.getExclusions();
        boolean boolean2 = sourceCodeManagementSystems0.hasIgnoreFile();
        java.lang.String str3 = sourceCodeManagementSystems0.getIgnoreFile();
        java.lang.String str4 = sourceCodeManagementSystems0.getIgnoreFile();
        java.lang.String str5 = sourceCodeManagementSystems0.getIgnoreFile();
        boolean boolean6 = sourceCodeManagementSystems0.hasIgnoreFile();
        java.util.List<java.lang.String> strList7 = sourceCodeManagementSystems0.getExclusions();
        org.junit.Assert.assertTrue("'" + sourceCodeManagementSystems0 + "' != '" + org.apache.rat.config.SourceCodeManagementSystems.CVS + "'", sourceCodeManagementSystems0.equals(org.apache.rat.config.SourceCodeManagementSystems.CVS));
        org.junit.Assert.assertNotNull(strList1);
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + true + "'", boolean2 == true);
        org.junit.Assert.assertEquals("'" + str3 + "' != '" + ".cvsignore" + "'", str3, ".cvsignore");
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + ".cvsignore" + "'", str4, ".cvsignore");
        org.junit.Assert.assertEquals("'" + str5 + "' != '" + ".cvsignore" + "'", str5, ".cvsignore");
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + true + "'", boolean6 == true);
        org.junit.Assert.assertNotNull(strList7);
    }

    @Test
    public void test13921() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest27.test13921");
        org.apache.rat.configuration.builders.NotBuilder notBuilder0 = org.apache.rat.analysis.IHeaderMatcher.Builder.not();
        boolean boolean1 = notBuilder0.hasId();
        java.lang.String str2 = notBuilder0.toString();
        org.apache.rat.configuration.builders.NotBuilder notBuilder3 = new org.apache.rat.configuration.builders.NotBuilder();
        java.lang.String str4 = notBuilder3.toString();
        org.apache.rat.configuration.builders.MatcherRefBuilder matcherRefBuilder5 = org.apache.rat.analysis.IHeaderMatcher.Builder.matcherRef();
        boolean boolean6 = matcherRefBuilder5.hasId();
        java.util.Map<java.lang.String, org.apache.rat.analysis.IHeaderMatcher> strMap7 = null;
        org.apache.rat.configuration.builders.MatcherRefBuilder matcherRefBuilder8 = matcherRefBuilder5.setMatchers(strMap7);
        org.apache.rat.configuration.builders.AllBuilder allBuilder9 = new org.apache.rat.configuration.builders.AllBuilder();
        org.apache.rat.configuration.builders.CopyrightBuilder copyrightBuilder10 = org.apache.rat.analysis.IHeaderMatcher.Builder.copyright();
        org.apache.rat.configuration.builders.CopyrightBuilder copyrightBuilder12 = copyrightBuilder10.setStart("OASIS");
        java.lang.String str13 = copyrightBuilder10.toString();
        org.apache.rat.configuration.builders.CopyrightBuilder copyrightBuilder15 = copyrightBuilder10.setStart("223f0aba-15d4-49e9-901e-5740c137aebf");
        org.apache.rat.configuration.builders.MatcherRefBuilder matcherRefBuilder16 = org.apache.rat.analysis.IHeaderMatcher.Builder.matcherRef();
        boolean boolean17 = matcherRefBuilder16.hasId();
        org.apache.rat.configuration.builders.CopyrightBuilder copyrightBuilder18 = org.apache.rat.analysis.IHeaderMatcher.Builder.copyright();
        org.apache.rat.configuration.builders.CopyrightBuilder copyrightBuilder20 = copyrightBuilder18.setStart("OASIS");
        java.lang.String str21 = copyrightBuilder18.toString();
        org.apache.rat.configuration.builders.CopyrightBuilder copyrightBuilder23 = copyrightBuilder18.setStart("223f0aba-15d4-49e9-901e-5740c137aebf");
        org.apache.rat.configuration.builders.CopyrightBuilder copyrightBuilder24 = org.apache.rat.analysis.IHeaderMatcher.Builder.copyright();
        org.apache.rat.configuration.builders.CopyrightBuilder copyrightBuilder25 = org.apache.rat.analysis.IHeaderMatcher.Builder.copyright();
        java.lang.String str26 = copyrightBuilder25.toString();
        org.apache.rat.configuration.builders.CopyrightBuilder copyrightBuilder28 = copyrightBuilder25.setEnd(".cvsignore");
        boolean boolean29 = copyrightBuilder25.hasId();
        org.apache.rat.configuration.builders.CopyrightBuilder copyrightBuilder30 = org.apache.rat.analysis.IHeaderMatcher.Builder.copyright();
        java.lang.String str31 = copyrightBuilder30.toString();
        org.apache.rat.configuration.builders.CopyrightBuilder copyrightBuilder33 = copyrightBuilder30.setEnd(".cvsignore");
        boolean boolean34 = copyrightBuilder30.hasId();
        java.lang.String str35 = copyrightBuilder30.toString();
        org.apache.rat.configuration.builders.CopyrightBuilder copyrightBuilder36 = org.apache.rat.analysis.IHeaderMatcher.Builder.copyright();
        org.apache.rat.configuration.builders.CopyrightBuilder copyrightBuilder38 = copyrightBuilder36.setStart("OASIS");
        org.apache.rat.configuration.builders.AnyBuilder anyBuilder39 = org.apache.rat.analysis.IHeaderMatcher.Builder.any();
        org.apache.rat.configuration.builders.MatcherRefBuilder matcherRefBuilder40 = org.apache.rat.analysis.IHeaderMatcher.Builder.matcherRef();
        boolean boolean41 = matcherRefBuilder40.hasId();
        java.util.Map<java.lang.String, org.apache.rat.analysis.IHeaderMatcher> strMap42 = null;
        org.apache.rat.configuration.builders.MatcherRefBuilder matcherRefBuilder43 = matcherRefBuilder40.setMatchers(strMap42);
        org.apache.rat.configuration.builders.CopyrightBuilder copyrightBuilder44 = org.apache.rat.analysis.IHeaderMatcher.Builder.copyright();
        org.apache.rat.configuration.builders.MatcherRefBuilder matcherRefBuilder45 = org.apache.rat.analysis.IHeaderMatcher.Builder.matcherRef();
        boolean boolean46 = matcherRefBuilder45.hasId();
        java.lang.String str47 = matcherRefBuilder45.toString();
        java.util.Map<java.lang.String, org.apache.rat.analysis.IHeaderMatcher> strMap48 = null;
        org.apache.rat.configuration.builders.MatcherRefBuilder matcherRefBuilder49 = matcherRefBuilder45.setMatchers(strMap48);
        org.apache.rat.analysis.IHeaderMatcher.Builder[] builderArray50 = new org.apache.rat.analysis.IHeaderMatcher.Builder[] { matcherRefBuilder5, allBuilder9, copyrightBuilder15, matcherRefBuilder16, copyrightBuilder18, copyrightBuilder24, copyrightBuilder25, copyrightBuilder30, copyrightBuilder36, anyBuilder39, matcherRefBuilder40, copyrightBuilder44, matcherRefBuilder45 };
        java.util.ArrayList<org.apache.rat.analysis.IHeaderMatcher.Builder> builderList51 = new java.util.ArrayList<org.apache.rat.analysis.IHeaderMatcher.Builder>();
        boolean boolean52 = java.util.Collections.addAll((java.util.Collection<org.apache.rat.analysis.IHeaderMatcher.Builder>) builderList51, builderArray50);
        org.apache.rat.configuration.builders.AbstractBuilder abstractBuilder53 = notBuilder3.add((java.util.Collection<org.apache.rat.analysis.IHeaderMatcher.Builder>) builderList51);
        org.apache.rat.configuration.builders.AbstractBuilder abstractBuilder54 = notBuilder0.add((java.util.Collection<org.apache.rat.analysis.IHeaderMatcher.Builder>) builderList51);
        org.junit.Assert.assertNotNull(notBuilder0);
        org.junit.Assert.assertTrue("'" + boolean1 + "' != '" + false + "'", boolean1 == false);
        org.junit.Assert.assertEquals("'" + str2 + "' != '" + "NotBuilder: null" + "'", str2, "NotBuilder: null");
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "NotBuilder: null" + "'", str4, "NotBuilder: null");
        org.junit.Assert.assertNotNull(matcherRefBuilder5);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertNotNull(matcherRefBuilder8);
        org.junit.Assert.assertNotNull(copyrightBuilder10);
        org.junit.Assert.assertNotNull(copyrightBuilder12);
        org.junit.Assert.assertEquals("'" + str13 + "' != '" + "Copyright Builder: s:OASIS e:null o:null" + "'", str13, "Copyright Builder: s:OASIS e:null o:null");
        org.junit.Assert.assertNotNull(copyrightBuilder15);
        org.junit.Assert.assertNotNull(matcherRefBuilder16);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + false + "'", boolean17 == false);
        org.junit.Assert.assertNotNull(copyrightBuilder18);
        org.junit.Assert.assertNotNull(copyrightBuilder20);
        org.junit.Assert.assertEquals("'" + str21 + "' != '" + "Copyright Builder: s:OASIS e:null o:null" + "'", str21, "Copyright Builder: s:OASIS e:null o:null");
        org.junit.Assert.assertNotNull(copyrightBuilder23);
        org.junit.Assert.assertNotNull(copyrightBuilder24);
        org.junit.Assert.assertNotNull(copyrightBuilder25);
        org.junit.Assert.assertEquals("'" + str26 + "' != '" + "Copyright Builder: s:null e:null o:null" + "'", str26, "Copyright Builder: s:null e:null o:null");
        org.junit.Assert.assertNotNull(copyrightBuilder28);
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + false + "'", boolean29 == false);
        org.junit.Assert.assertNotNull(copyrightBuilder30);
        org.junit.Assert.assertEquals("'" + str31 + "' != '" + "Copyright Builder: s:null e:null o:null" + "'", str31, "Copyright Builder: s:null e:null o:null");
        org.junit.Assert.assertNotNull(copyrightBuilder33);
        org.junit.Assert.assertTrue("'" + boolean34 + "' != '" + false + "'", boolean34 == false);
        org.junit.Assert.assertEquals("'" + str35 + "' != '" + "Copyright Builder: s:null e:.cvsignore o:null" + "'", str35, "Copyright Builder: s:null e:.cvsignore o:null");
        org.junit.Assert.assertNotNull(copyrightBuilder36);
        org.junit.Assert.assertNotNull(copyrightBuilder38);
        org.junit.Assert.assertNotNull(anyBuilder39);
        org.junit.Assert.assertNotNull(matcherRefBuilder40);
        org.junit.Assert.assertTrue("'" + boolean41 + "' != '" + false + "'", boolean41 == false);
        org.junit.Assert.assertNotNull(matcherRefBuilder43);
        org.junit.Assert.assertNotNull(copyrightBuilder44);
        org.junit.Assert.assertNotNull(matcherRefBuilder45);
        org.junit.Assert.assertTrue("'" + boolean46 + "' != '" + false + "'", boolean46 == false);
        org.junit.Assert.assertEquals("'" + str47 + "' != '" + "MathcerRefBuilder: null" + "'", str47, "MathcerRefBuilder: null");
        org.junit.Assert.assertNotNull(matcherRefBuilder49);
        org.junit.Assert.assertNotNull(builderArray50);
        org.junit.Assert.assertTrue("'" + boolean52 + "' != '" + true + "'", boolean52 == true);
        org.junit.Assert.assertNotNull(abstractBuilder53);
        org.junit.Assert.assertNotNull(abstractBuilder54);
    }

    @Test
    public void test13922() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest27.test13922");
        org.apache.rat.analysis.matchers.SimpleTextMatcher simpleTextMatcher2 = new org.apache.rat.analysis.matchers.SimpleTextMatcher("AL   ");
        org.apache.rat.analysis.IHeaderMatcher.State state4 = simpleTextMatcher2.matches("33ac78df-d24f-43c9-beeb-83abf1fa7aa0");
        org.apache.rat.analysis.matchers.NotMatcher notMatcher5 = new org.apache.rat.analysis.matchers.NotMatcher("f04d752a-120e-425d-a417-7027fca36057", (org.apache.rat.analysis.IHeaderMatcher) simpleTextMatcher2);
        notMatcher5.reset();
        org.apache.rat.analysis.IHeaderMatcher.State state7 = notMatcher5.currentState();
        org.junit.Assert.assertTrue("'" + state4 + "' != '" + org.apache.rat.analysis.IHeaderMatcher.State.i + "'", state4.equals(org.apache.rat.analysis.IHeaderMatcher.State.i));
        org.junit.Assert.assertTrue("'" + state7 + "' != '" + org.apache.rat.analysis.IHeaderMatcher.State.i + "'", state7.equals(org.apache.rat.analysis.IHeaderMatcher.State.i));
    }

    @Test
    public void test13923() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest27.test13923");
        org.apache.rat.configuration.builders.SpdxBuilder spdxBuilder0 = org.apache.rat.analysis.IHeaderMatcher.Builder.spdx();
        java.lang.String str1 = spdxBuilder0.toString();
        org.apache.rat.configuration.builders.SpdxBuilder spdxBuilder3 = spdxBuilder0.setName("ef7a8b13-64c3-4510-bb0c-dbf208e1e73f");
        org.apache.rat.analysis.IHeaderMatcher iHeaderMatcher4 = spdxBuilder0.build();
        org.apache.rat.configuration.builders.SpdxBuilder spdxBuilder6 = spdxBuilder0.setName("641dafc1-13c3-45d4-8272-f36f10392c53");
        org.apache.rat.analysis.IHeaderMatcher iHeaderMatcher7 = spdxBuilder6.build();
        java.lang.String str8 = spdxBuilder6.toString();
        org.apache.rat.configuration.builders.SpdxBuilder spdxBuilder10 = spdxBuilder6.setName("TextBuilder: c523095e-4421-4cc4-9...");
        org.apache.rat.analysis.IHeaderMatcher iHeaderMatcher11 = spdxBuilder10.build();
        org.junit.Assert.assertNotNull(spdxBuilder0);
        org.junit.Assert.assertEquals("'" + str1 + "' != '" + "SpdxBuilder: null" + "'", str1, "SpdxBuilder: null");
        org.junit.Assert.assertNotNull(spdxBuilder3);
        org.junit.Assert.assertNotNull(iHeaderMatcher4);
        org.junit.Assert.assertNotNull(spdxBuilder6);
        org.junit.Assert.assertNotNull(iHeaderMatcher7);
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "SpdxBuilder: 641dafc1-13c3-45d4-8272-f36f10392c53" + "'", str8, "SpdxBuilder: 641dafc1-13c3-45d4-8272-f36f10392c53");
        org.junit.Assert.assertNotNull(spdxBuilder10);
        org.junit.Assert.assertNotNull(iHeaderMatcher11);
    }

    @Test
    public void test13924() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest27.test13924");
        org.apache.rat.utils.Log log2 = null;
        org.apache.rat.ReportConfiguration reportConfiguration3 = new org.apache.rat.ReportConfiguration(log2);
        reportConfiguration3.addApprovedLicenseCategory(".cvsignore");
        org.apache.rat.utils.Log.Level level6 = org.apache.rat.utils.Log.Level.ERROR;
        reportConfiguration3.logFamilyCollisions(level6);
        org.apache.commons.io.function.IOSupplier<java.io.OutputStream> outputStreamIOSupplier8 = reportConfiguration3.getOutput();
        org.apache.rat.utils.Log log9 = null;
        org.apache.rat.ReportConfiguration reportConfiguration10 = new org.apache.rat.ReportConfiguration(log9);
        reportConfiguration10.addApprovedLicenseCategory(".cvsignore");
        org.apache.rat.utils.Log log13 = null;
        org.apache.rat.ReportConfiguration reportConfiguration14 = new org.apache.rat.ReportConfiguration(log13);
        java.io.FilenameFilter filenameFilter15 = reportConfiguration14.getInputFileFilter();
        org.apache.rat.license.LicenseSetFactory.LicenseFilter licenseFilter16 = org.apache.rat.license.LicenseSetFactory.LicenseFilter.all;
        java.util.SortedSet<org.apache.rat.license.ILicense> iLicenseSet17 = reportConfiguration14.getLicenses(licenseFilter16);
        reportConfiguration10.addLicensesIfNotPresent((java.util.Collection<org.apache.rat.license.ILicense>) iLicenseSet17);
        java.io.FilenameFilter filenameFilter19 = reportConfiguration10.getInputFileFilter();
        org.apache.rat.utils.Log log20 = null;
        org.apache.rat.ReportConfiguration reportConfiguration21 = new org.apache.rat.ReportConfiguration(log20);
        java.io.FilenameFilter filenameFilter22 = reportConfiguration21.getInputFileFilter();
        org.apache.rat.license.LicenseSetFactory.LicenseFilter licenseFilter23 = org.apache.rat.license.LicenseSetFactory.LicenseFilter.all;
        java.util.SortedSet<org.apache.rat.license.ILicense> iLicenseSet24 = reportConfiguration21.getLicenses(licenseFilter23);
        org.apache.rat.config.AddLicenseHeaders addLicenseHeaders25 = org.apache.rat.config.AddLicenseHeaders.FALSE;
        reportConfiguration21.setAddLicenseHeaders(addLicenseHeaders25);
        org.apache.rat.utils.Log log27 = null;
        org.apache.rat.ReportConfiguration reportConfiguration28 = new org.apache.rat.ReportConfiguration(log27);
        org.apache.rat.report.claim.ClaimStatistic claimStatistic29 = org.apache.rat.Reporter.report(reportConfiguration28);
        org.apache.rat.license.LicenseSetFactory.LicenseFilter licenseFilter30 = org.apache.rat.license.LicenseSetFactory.LicenseFilter.all;
        org.apache.rat.Reporter.listLicenses(reportConfiguration28, licenseFilter30);
        org.apache.rat.Reporter.listLicenses(reportConfiguration21, licenseFilter30);
        org.apache.rat.utils.Log log33 = null;
        org.apache.rat.ReportConfiguration reportConfiguration34 = new org.apache.rat.ReportConfiguration(log33);
        java.io.FilenameFilter filenameFilter35 = reportConfiguration34.getInputFileFilter();
        org.apache.rat.license.LicenseSetFactory.LicenseFilter licenseFilter36 = org.apache.rat.license.LicenseSetFactory.LicenseFilter.all;
        java.util.SortedSet<org.apache.rat.license.ILicense> iLicenseSet37 = reportConfiguration34.getLicenses(licenseFilter36);
        org.apache.rat.config.AddLicenseHeaders addLicenseHeaders38 = org.apache.rat.config.AddLicenseHeaders.FALSE;
        reportConfiguration34.setAddLicenseHeaders(addLicenseHeaders38);
        org.apache.rat.utils.Log log40 = null;
        org.apache.rat.ReportConfiguration reportConfiguration41 = new org.apache.rat.ReportConfiguration(log40);
        org.apache.rat.report.claim.ClaimStatistic claimStatistic42 = org.apache.rat.Reporter.report(reportConfiguration41);
        org.apache.rat.license.LicenseSetFactory.LicenseFilter licenseFilter43 = org.apache.rat.license.LicenseSetFactory.LicenseFilter.all;
        org.apache.rat.Reporter.listLicenses(reportConfiguration41, licenseFilter43);
        org.apache.rat.Reporter.listLicenses(reportConfiguration34, licenseFilter43);
        java.util.SortedSet<org.apache.rat.license.ILicenseFamily> iLicenseFamilySet46 = reportConfiguration21.getLicenseFamilies(licenseFilter43);
        org.apache.rat.Reporter.listLicenseFamilies(reportConfiguration10, licenseFilter43);
        java.util.SortedSet<org.apache.rat.license.ILicenseFamily> iLicenseFamilySet48 = reportConfiguration3.getLicenseFamilies(licenseFilter43);
        java.util.Collection<java.lang.String> strCollection49 = null;
        org.apache.rat.license.LicenseFamilySetFactory licenseFamilySetFactory50 = new org.apache.rat.license.LicenseFamilySetFactory(iLicenseFamilySet48, strCollection49);
        java.lang.String[] strArray56 = new java.lang.String[] { "http://org/apache/rat/meta-data#LicenseFamilyCategory", "Datum [ name ='http://org/apache/rat/meta-data#LicenseFamilyCategory',value ='GPL1  ']", "MANIFEST.MF", "AllBuilder:", "The MIT License" };
        org.apache.rat.utils.ReportingSet<java.lang.String> strSet57 = new org.apache.rat.utils.ReportingSet<java.lang.String>();
        boolean boolean58 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strSet57, strArray56);
        boolean boolean60 = strSet57.addIfNotPresent("http://org/apache/rat/meta-data#LicenseFamilyName");
        boolean boolean62 = strSet57.addIfNotPresent("ef7a8b13-64c3-4510-bb0c-dbf208e1e73f");
        java.util.function.Function<java.lang.String, java.lang.String> strFunction63 = null;
        org.apache.rat.utils.ReportingSet<java.lang.String> strSet64 = strSet57.setMsgFormat(strFunction63);
        java.util.SortedSet<org.apache.rat.license.ILicenseFamily> iLicenseFamilySet66 = org.apache.rat.license.LicenseFamilySetFactory.emptyLicenseFamilySet();
        org.apache.rat.license.ILicenseFamily iLicenseFamily67 = org.apache.rat.license.LicenseFamilySetFactory.search("http://org/apache/rat/meta-data", iLicenseFamilySet66);
        boolean boolean68 = strSet57.containsAll((java.util.Collection<org.apache.rat.license.ILicenseFamily>) iLicenseFamilySet66);
        org.apache.rat.utils.ReportingSet<java.lang.String> strSet70 = strSet57.tailSet("http://org/apache/rat/meta-data#HeaderCategory");
        org.apache.rat.utils.Log log71 = null;
        org.apache.rat.ReportConfiguration reportConfiguration72 = new org.apache.rat.ReportConfiguration(log71);
        java.io.FilenameFilter filenameFilter73 = reportConfiguration72.getInputFileFilter();
        org.apache.rat.license.LicenseSetFactory.LicenseFilter licenseFilter74 = org.apache.rat.license.LicenseSetFactory.LicenseFilter.all;
        java.util.SortedSet<org.apache.rat.license.ILicense> iLicenseSet75 = reportConfiguration72.getLicenses(licenseFilter74);
        org.apache.rat.config.AddLicenseHeaders addLicenseHeaders76 = org.apache.rat.config.AddLicenseHeaders.FALSE;
        reportConfiguration72.setAddLicenseHeaders(addLicenseHeaders76);
        org.apache.rat.utils.Log log78 = null;
        org.apache.rat.ReportConfiguration reportConfiguration79 = new org.apache.rat.ReportConfiguration(log78);
        reportConfiguration79.addApprovedLicenseCategory(".cvsignore");
        org.apache.rat.utils.Log.Level level82 = org.apache.rat.utils.Log.Level.ERROR;
        reportConfiguration79.logLicenseCollisions(level82);
        reportConfiguration72.logFamilyCollisions(level82);
        org.apache.rat.utils.ReportingSet<java.lang.String> strSet85 = strSet57.setLogLevel(level82);
        java.util.SortedSet<org.apache.rat.license.ILicenseFamily> iLicenseFamilySet86 = org.apache.rat.license.LicenseFamilySetFactory.emptyLicenseFamilySet();
        org.apache.rat.policy.DefaultPolicy defaultPolicy87 = new org.apache.rat.policy.DefaultPolicy((java.util.Collection<org.apache.rat.license.ILicenseFamily>) iLicenseFamilySet86);
        boolean boolean88 = strSet85.retainAll((java.util.Collection<org.apache.rat.license.ILicenseFamily>) iLicenseFamilySet86);
        java.util.stream.Stream<java.lang.String> strStream89 = strSet85.stream();
        org.apache.rat.utils.ReportingSet<java.lang.String> strSet91 = strSet85.headSet("535b5d01-f553-45e5-bb29-a646e4b8b66f");
        org.apache.rat.license.LicenseFamilySetFactory licenseFamilySetFactory92 = new org.apache.rat.license.LicenseFamilySetFactory(iLicenseFamilySet48, (java.util.Collection<java.lang.String>) strSet91);
        org.apache.rat.license.ILicenseFamily iLicenseFamily93 = org.apache.rat.license.LicenseFamilySetFactory.search("TextBuilder: EBC30EB7B3EA4F39BAEA...", iLicenseFamilySet48);
        org.apache.rat.license.ILicenseFamily iLicenseFamily94 = org.apache.rat.license.LicenseFamilySetFactory.search("f8ffb5f5-053b-4c2d-b24f-60f90a9ced52", iLicenseFamilySet48);
        org.junit.Assert.assertTrue("'" + level6 + "' != '" + org.apache.rat.utils.Log.Level.ERROR + "'", level6.equals(org.apache.rat.utils.Log.Level.ERROR));
        org.junit.Assert.assertNotNull(outputStreamIOSupplier8);
        org.junit.Assert.assertNull(filenameFilter15);
        org.junit.Assert.assertTrue("'" + licenseFilter16 + "' != '" + org.apache.rat.license.LicenseSetFactory.LicenseFilter.all + "'", licenseFilter16.equals(org.apache.rat.license.LicenseSetFactory.LicenseFilter.all));
        org.junit.Assert.assertNotNull(iLicenseSet17);
        org.junit.Assert.assertNull(filenameFilter19);
        org.junit.Assert.assertNull(filenameFilter22);
        org.junit.Assert.assertTrue("'" + licenseFilter23 + "' != '" + org.apache.rat.license.LicenseSetFactory.LicenseFilter.all + "'", licenseFilter23.equals(org.apache.rat.license.LicenseSetFactory.LicenseFilter.all));
        org.junit.Assert.assertNotNull(iLicenseSet24);
        org.junit.Assert.assertTrue("'" + addLicenseHeaders25 + "' != '" + org.apache.rat.config.AddLicenseHeaders.FALSE + "'", addLicenseHeaders25.equals(org.apache.rat.config.AddLicenseHeaders.FALSE));
        org.junit.Assert.assertNull(claimStatistic29);
        org.junit.Assert.assertTrue("'" + licenseFilter30 + "' != '" + org.apache.rat.license.LicenseSetFactory.LicenseFilter.all + "'", licenseFilter30.equals(org.apache.rat.license.LicenseSetFactory.LicenseFilter.all));
        org.junit.Assert.assertNull(filenameFilter35);
        org.junit.Assert.assertTrue("'" + licenseFilter36 + "' != '" + org.apache.rat.license.LicenseSetFactory.LicenseFilter.all + "'", licenseFilter36.equals(org.apache.rat.license.LicenseSetFactory.LicenseFilter.all));
        org.junit.Assert.assertNotNull(iLicenseSet37);
        org.junit.Assert.assertTrue("'" + addLicenseHeaders38 + "' != '" + org.apache.rat.config.AddLicenseHeaders.FALSE + "'", addLicenseHeaders38.equals(org.apache.rat.config.AddLicenseHeaders.FALSE));
        org.junit.Assert.assertNull(claimStatistic42);
        org.junit.Assert.assertTrue("'" + licenseFilter43 + "' != '" + org.apache.rat.license.LicenseSetFactory.LicenseFilter.all + "'", licenseFilter43.equals(org.apache.rat.license.LicenseSetFactory.LicenseFilter.all));
        org.junit.Assert.assertNotNull(iLicenseFamilySet46);
        org.junit.Assert.assertNotNull(iLicenseFamilySet48);
        org.junit.Assert.assertNotNull(strArray56);
        org.junit.Assert.assertTrue("'" + boolean58 + "' != '" + true + "'", boolean58 == true);
        org.junit.Assert.assertTrue("'" + boolean60 + "' != '" + true + "'", boolean60 == true);
        org.junit.Assert.assertTrue("'" + boolean62 + "' != '" + true + "'", boolean62 == true);
        org.junit.Assert.assertNotNull(strSet64);
        org.junit.Assert.assertNotNull(iLicenseFamilySet66);
        org.junit.Assert.assertNull(iLicenseFamily67);
        org.junit.Assert.assertTrue("'" + boolean68 + "' != '" + true + "'", boolean68 == true);
        org.junit.Assert.assertNotNull(strSet70);
        org.junit.Assert.assertNull(filenameFilter73);
        org.junit.Assert.assertTrue("'" + licenseFilter74 + "' != '" + org.apache.rat.license.LicenseSetFactory.LicenseFilter.all + "'", licenseFilter74.equals(org.apache.rat.license.LicenseSetFactory.LicenseFilter.all));
        org.junit.Assert.assertNotNull(iLicenseSet75);
        org.junit.Assert.assertTrue("'" + addLicenseHeaders76 + "' != '" + org.apache.rat.config.AddLicenseHeaders.FALSE + "'", addLicenseHeaders76.equals(org.apache.rat.config.AddLicenseHeaders.FALSE));
        org.junit.Assert.assertTrue("'" + level82 + "' != '" + org.apache.rat.utils.Log.Level.ERROR + "'", level82.equals(org.apache.rat.utils.Log.Level.ERROR));
        org.junit.Assert.assertNotNull(strSet85);
        org.junit.Assert.assertNotNull(iLicenseFamilySet86);
        org.junit.Assert.assertTrue("'" + boolean88 + "' != '" + true + "'", boolean88 == true);
        org.junit.Assert.assertNotNull(strStream89);
        org.junit.Assert.assertNotNull(strSet91);
        org.junit.Assert.assertNull(iLicenseFamily93);
        org.junit.Assert.assertNull(iLicenseFamily94);
    }

    @Test
    public void test13925() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest27.test13925");
        org.apache.rat.analysis.matchers.FullTextMatcher fullTextMatcher3 = new org.apache.rat.analysis.matchers.FullTextMatcher("f06626c1-35ed-4c9c-a3c4-db199c6e7bfb", "");
        org.apache.rat.analysis.matchers.NotMatcher notMatcher4 = new org.apache.rat.analysis.matchers.NotMatcher("192e4c47-958b-400b-8306-1fae145a0161", (org.apache.rat.analysis.IHeaderMatcher) fullTextMatcher3);
        boolean boolean6 = fullTextMatcher3.doMatch("Copyright Builder: s:f9686227-2048-447b-8a8f-3164382365d2 e:null o:TextBuilder: Datum [ name ='http:...");
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + true + "'", boolean6 == true);
    }

    @Test
    public void test13926() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest27.test13926");
        org.apache.rat.document.ToNameTransformer toNameTransformer0 = new org.apache.rat.document.ToNameTransformer();
        org.apache.rat.utils.DefaultLog defaultLog1 = org.apache.rat.utils.DefaultLog.INSTANCE;
        org.apache.rat.license.ILicense.Builder builder2 = org.apache.rat.license.ILicense.builder();
        org.apache.rat.license.ILicense.Builder builder4 = builder2.setLicenseFamilyCategory("");
        org.apache.rat.analysis.matchers.CopyrightMatcher copyrightMatcher8 = new org.apache.rat.analysis.matchers.CopyrightMatcher("", "GPL1 ", "hi!");
        org.apache.rat.analysis.IHeaderMatcher.State state9 = copyrightMatcher8.finalizeState();
        org.apache.rat.license.ILicense.Builder builder10 = builder4.setMatcher((org.apache.rat.analysis.IHeaderMatcher) copyrightMatcher8);
        org.apache.rat.license.ILicense.Builder builder12 = builder10.setLicenseFamilyCategory("");
        defaultLog1.error((java.lang.Object) builder12);
        java.lang.Object obj14 = toNameTransformer0.transform((java.lang.Object) defaultLog1);
        org.apache.rat.utils.Log log15 = null;
        org.apache.rat.ReportConfiguration reportConfiguration16 = new org.apache.rat.ReportConfiguration(log15);
        java.io.FilenameFilter filenameFilter17 = reportConfiguration16.getInputFileFilter();
        org.apache.rat.license.ILicense iLicense18 = null;
        reportConfiguration16.addLicense(iLicense18);
        org.apache.rat.license.ILicenseFamily iLicenseFamily20 = null;
        reportConfiguration16.addFamily(iLicenseFamily20);
        org.apache.commons.io.function.IOSupplier<java.io.InputStream> inputStreamIOSupplier22 = org.apache.rat.Defaults.getPlainStyleSheet();
        reportConfiguration16.setStyleSheet(inputStreamIOSupplier22);
        java.lang.Object obj24 = toNameTransformer0.transform((java.lang.Object) inputStreamIOSupplier22);
        org.apache.rat.license.ILicense[] iLicenseArray25 = new org.apache.rat.license.ILicense[] {};
        java.util.TreeSet<org.apache.rat.license.ILicense> iLicenseSet26 = new java.util.TreeSet<org.apache.rat.license.ILicense>();
        boolean boolean27 = java.util.Collections.addAll((java.util.Collection<org.apache.rat.license.ILicense>) iLicenseSet26, iLicenseArray25);
        java.lang.String[] strArray40 = new java.lang.String[] { "GPL2 ", "GPL1 ", "notice", "http://org/apache/rat/meta-data#LicenseFamilyName", "notice", "GPL2 ", "http://org/apache/rat/meta-data#LicenseFamilyName", "", "GPL2 ", "", "GPL1 ", "hi!" };
        java.util.ArrayList<java.lang.String> strList41 = new java.util.ArrayList<java.lang.String>();
        boolean boolean42 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strList41, strArray40);
        org.apache.rat.license.LicenseSetFactory licenseSetFactory43 = new org.apache.rat.license.LicenseSetFactory((java.util.SortedSet<org.apache.rat.license.ILicense>) iLicenseSet26, (java.util.Collection<java.lang.String>) strList41);
        java.io.FilenameFilter filenameFilter44 = org.apache.rat.Report.parseExclusions((java.util.List<java.lang.String>) strList41);
        java.io.FilenameFilter filenameFilter45 = org.apache.rat.Report.parseExclusions((java.util.List<java.lang.String>) strList41);
        java.io.FilenameFilter filenameFilter46 = org.apache.rat.Report.parseExclusions((java.util.List<java.lang.String>) strList41);
        java.lang.Object obj47 = toNameTransformer0.transform((java.lang.Object) strList41);
        org.apache.rat.analysis.matchers.CopyrightMatcher copyrightMatcher51 = new org.apache.rat.analysis.matchers.CopyrightMatcher("255ef7d8-e270-4908-9de7-bebc7df6eb88", "1e96b21e-f913-4d52-87cc-09323c460281", "2953E6CB-20A5-4DCF-A9F5-85C51CC8C635");
        org.apache.rat.analysis.matchers.NotMatcher notMatcher52 = new org.apache.rat.analysis.matchers.NotMatcher((org.apache.rat.analysis.IHeaderMatcher) copyrightMatcher51);
        java.lang.Object obj53 = toNameTransformer0.transform((java.lang.Object) copyrightMatcher51);
        org.apache.rat.utils.Log log54 = null;
        org.apache.rat.ReportConfiguration reportConfiguration55 = new org.apache.rat.ReportConfiguration(log54);
        reportConfiguration55.addApprovedLicenseCategory(".cvsignore");
        java.lang.String str58 = reportConfiguration55.getCopyrightMessage();
        java.lang.Object obj59 = toNameTransformer0.transform((java.lang.Object) str58);
        org.junit.Assert.assertNotNull(defaultLog1);
        org.junit.Assert.assertNotNull(builder2);
        org.junit.Assert.assertNotNull(builder4);
        org.junit.Assert.assertTrue("'" + state9 + "' != '" + org.apache.rat.analysis.IHeaderMatcher.State.f + "'", state9.equals(org.apache.rat.analysis.IHeaderMatcher.State.f));
        org.junit.Assert.assertNotNull(builder10);
        org.junit.Assert.assertNotNull(builder12);
        org.junit.Assert.assertNull(obj14);
        org.junit.Assert.assertNull(filenameFilter17);
        org.junit.Assert.assertNotNull(inputStreamIOSupplier22);
        org.junit.Assert.assertNull(obj24);
        org.junit.Assert.assertNotNull(iLicenseArray25);
        org.junit.Assert.assertTrue("'" + boolean27 + "' != '" + false + "'", boolean27 == false);
        org.junit.Assert.assertNotNull(strArray40);
        org.junit.Assert.assertTrue("'" + boolean42 + "' != '" + true + "'", boolean42 == true);
        org.junit.Assert.assertNotNull(filenameFilter44);
        org.junit.Assert.assertNotNull(filenameFilter45);
        org.junit.Assert.assertNotNull(filenameFilter46);
        org.junit.Assert.assertNull(obj47);
        org.junit.Assert.assertNull(obj53);
        org.junit.Assert.assertNull(str58);
        org.junit.Assert.assertNull(obj59);
    }

    @Test
    public void test13927() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest27.test13927");
        org.apache.rat.utils.DefaultLog defaultLog0 = org.apache.rat.utils.DefaultLog.INSTANCE;
        org.apache.rat.license.ILicense.Builder builder1 = org.apache.rat.license.ILicense.builder();
        org.apache.rat.license.ILicense.Builder builder3 = builder1.setLicenseFamilyCategory("");
        org.apache.rat.analysis.matchers.CopyrightMatcher copyrightMatcher7 = new org.apache.rat.analysis.matchers.CopyrightMatcher("", "GPL1 ", "hi!");
        org.apache.rat.analysis.IHeaderMatcher.State state8 = copyrightMatcher7.finalizeState();
        org.apache.rat.license.ILicense.Builder builder9 = builder3.setMatcher((org.apache.rat.analysis.IHeaderMatcher) copyrightMatcher7);
        org.apache.rat.license.ILicense.Builder builder11 = builder9.setLicenseFamilyCategory("");
        defaultLog0.error((java.lang.Object) builder11);
        org.apache.rat.utils.Log log13 = null;
        org.apache.rat.ReportConfiguration reportConfiguration14 = new org.apache.rat.ReportConfiguration(log13);
        java.io.FilenameFilter filenameFilter15 = reportConfiguration14.getInputFileFilter();
        org.apache.rat.license.LicenseSetFactory.LicenseFilter licenseFilter16 = org.apache.rat.license.LicenseSetFactory.LicenseFilter.all;
        java.util.SortedSet<org.apache.rat.license.ILicense> iLicenseSet17 = reportConfiguration14.getLicenses(licenseFilter16);
        org.apache.rat.config.AddLicenseHeaders addLicenseHeaders18 = org.apache.rat.config.AddLicenseHeaders.FALSE;
        reportConfiguration14.setAddLicenseHeaders(addLicenseHeaders18);
        org.apache.rat.utils.Log log20 = null;
        org.apache.rat.ReportConfiguration reportConfiguration21 = new org.apache.rat.ReportConfiguration(log20);
        org.apache.rat.report.claim.ClaimStatistic claimStatistic22 = org.apache.rat.Reporter.report(reportConfiguration21);
        org.apache.rat.license.LicenseSetFactory.LicenseFilter licenseFilter23 = org.apache.rat.license.LicenseSetFactory.LicenseFilter.all;
        org.apache.rat.Reporter.listLicenses(reportConfiguration21, licenseFilter23);
        org.apache.rat.Reporter.listLicenses(reportConfiguration14, licenseFilter23);
        org.apache.rat.utils.Log log26 = null;
        org.apache.rat.ReportConfiguration reportConfiguration27 = new org.apache.rat.ReportConfiguration(log26);
        java.io.FilenameFilter filenameFilter28 = reportConfiguration27.getInputFileFilter();
        org.apache.rat.license.LicenseSetFactory.LicenseFilter licenseFilter29 = org.apache.rat.license.LicenseSetFactory.LicenseFilter.all;
        java.util.SortedSet<org.apache.rat.license.ILicense> iLicenseSet30 = reportConfiguration27.getLicenses(licenseFilter29);
        org.apache.rat.config.AddLicenseHeaders addLicenseHeaders31 = org.apache.rat.config.AddLicenseHeaders.FALSE;
        reportConfiguration27.setAddLicenseHeaders(addLicenseHeaders31);
        org.apache.rat.utils.Log log33 = null;
        org.apache.rat.ReportConfiguration reportConfiguration34 = new org.apache.rat.ReportConfiguration(log33);
        org.apache.rat.report.claim.ClaimStatistic claimStatistic35 = org.apache.rat.Reporter.report(reportConfiguration34);
        org.apache.rat.license.LicenseSetFactory.LicenseFilter licenseFilter36 = org.apache.rat.license.LicenseSetFactory.LicenseFilter.all;
        org.apache.rat.Reporter.listLicenses(reportConfiguration34, licenseFilter36);
        org.apache.rat.Reporter.listLicenses(reportConfiguration27, licenseFilter36);
        org.apache.rat.Reporter.listLicenses(reportConfiguration14, licenseFilter36);
        org.apache.rat.utils.Log log40 = null;
        org.apache.rat.ReportConfiguration reportConfiguration41 = new org.apache.rat.ReportConfiguration(log40);
        org.apache.commons.io.function.IOSupplier<java.io.OutputStream> outputStreamIOSupplier42 = reportConfiguration41.getOutput();
        reportConfiguration14.setOut(outputStreamIOSupplier42);
        org.apache.rat.utils.Log.Level level44 = org.apache.rat.utils.Log.Level.WARN;
        reportConfiguration14.logLicenseCollisions(level44);
        defaultLog0.warn((java.lang.Object) level44);
        org.apache.rat.utils.Log.Level level47 = defaultLog0.getLevel();
        defaultLog0.warn((java.lang.Object) 0);
        org.apache.rat.configuration.builders.SpdxBuilder spdxBuilder50 = org.apache.rat.analysis.IHeaderMatcher.Builder.spdx();
        java.lang.String str51 = spdxBuilder50.toString();
        org.apache.rat.configuration.builders.SpdxBuilder spdxBuilder53 = spdxBuilder50.setName("ef7a8b13-64c3-4510-bb0c-dbf208e1e73f");
        org.apache.rat.analysis.IHeaderMatcher iHeaderMatcher54 = spdxBuilder50.build();
        org.apache.rat.configuration.builders.SpdxBuilder spdxBuilder56 = spdxBuilder50.setName("641dafc1-13c3-45d4-8272-f36f10392c53");
        org.apache.rat.analysis.IHeaderMatcher iHeaderMatcher57 = spdxBuilder56.build();
        org.apache.rat.configuration.builders.SpdxBuilder spdxBuilder59 = spdxBuilder56.setName("a1abad46-6a98-44f8-aa20-7839919a8270");
        defaultLog0.info((java.lang.Object) spdxBuilder56);
        java.lang.String str61 = spdxBuilder56.toString();
        org.junit.Assert.assertNotNull(defaultLog0);
        org.junit.Assert.assertNotNull(builder1);
        org.junit.Assert.assertNotNull(builder3);
        org.junit.Assert.assertTrue("'" + state8 + "' != '" + org.apache.rat.analysis.IHeaderMatcher.State.f + "'", state8.equals(org.apache.rat.analysis.IHeaderMatcher.State.f));
        org.junit.Assert.assertNotNull(builder9);
        org.junit.Assert.assertNotNull(builder11);
        org.junit.Assert.assertNull(filenameFilter15);
        org.junit.Assert.assertTrue("'" + licenseFilter16 + "' != '" + org.apache.rat.license.LicenseSetFactory.LicenseFilter.all + "'", licenseFilter16.equals(org.apache.rat.license.LicenseSetFactory.LicenseFilter.all));
        org.junit.Assert.assertNotNull(iLicenseSet17);
        org.junit.Assert.assertTrue("'" + addLicenseHeaders18 + "' != '" + org.apache.rat.config.AddLicenseHeaders.FALSE + "'", addLicenseHeaders18.equals(org.apache.rat.config.AddLicenseHeaders.FALSE));
        org.junit.Assert.assertNull(claimStatistic22);
        org.junit.Assert.assertTrue("'" + licenseFilter23 + "' != '" + org.apache.rat.license.LicenseSetFactory.LicenseFilter.all + "'", licenseFilter23.equals(org.apache.rat.license.LicenseSetFactory.LicenseFilter.all));
        org.junit.Assert.assertNull(filenameFilter28);
        org.junit.Assert.assertTrue("'" + licenseFilter29 + "' != '" + org.apache.rat.license.LicenseSetFactory.LicenseFilter.all + "'", licenseFilter29.equals(org.apache.rat.license.LicenseSetFactory.LicenseFilter.all));
        org.junit.Assert.assertNotNull(iLicenseSet30);
        org.junit.Assert.assertTrue("'" + addLicenseHeaders31 + "' != '" + org.apache.rat.config.AddLicenseHeaders.FALSE + "'", addLicenseHeaders31.equals(org.apache.rat.config.AddLicenseHeaders.FALSE));
        org.junit.Assert.assertNull(claimStatistic35);
        org.junit.Assert.assertTrue("'" + licenseFilter36 + "' != '" + org.apache.rat.license.LicenseSetFactory.LicenseFilter.all + "'", licenseFilter36.equals(org.apache.rat.license.LicenseSetFactory.LicenseFilter.all));
        org.junit.Assert.assertNotNull(outputStreamIOSupplier42);
        org.junit.Assert.assertTrue("'" + level44 + "' != '" + org.apache.rat.utils.Log.Level.WARN + "'", level44.equals(org.apache.rat.utils.Log.Level.WARN));
        org.junit.Assert.assertTrue("'" + level47 + "' != '" + org.apache.rat.utils.Log.Level.INFO + "'", level47.equals(org.apache.rat.utils.Log.Level.INFO));
        org.junit.Assert.assertNotNull(spdxBuilder50);
        org.junit.Assert.assertEquals("'" + str51 + "' != '" + "SpdxBuilder: null" + "'", str51, "SpdxBuilder: null");
        org.junit.Assert.assertNotNull(spdxBuilder53);
        org.junit.Assert.assertNotNull(iHeaderMatcher54);
        org.junit.Assert.assertNotNull(spdxBuilder56);
        org.junit.Assert.assertNotNull(iHeaderMatcher57);
        org.junit.Assert.assertNotNull(spdxBuilder59);
        org.junit.Assert.assertEquals("'" + str61 + "' != '" + "SpdxBuilder: a1abad46-6a98-44f8-aa20-7839919a8270" + "'", str61, "SpdxBuilder: a1abad46-6a98-44f8-aa20-7839919a8270");
    }

    @Test
    public void test13928() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest27.test13928");
        org.apache.rat.Defaults.Builder builder0 = org.apache.rat.Defaults.builder();
        org.apache.rat.Defaults defaults1 = builder0.build();
        org.apache.rat.Defaults.Builder builder2 = builder0.noDefault();
        org.apache.rat.Defaults.Builder builder4 = builder0.remove("AllBuilder:");
        org.apache.rat.Defaults.Builder builder6 = builder4.add("?????");
        org.apache.rat.Defaults.Builder builder8 = builder6.remove("");
        org.apache.rat.Defaults.Builder builder9 = builder6.noDefault();
        org.apache.rat.Defaults.Builder builder10 = builder9.noDefault();
        org.apache.rat.Defaults.Builder builder11 = builder10.noDefault();
        org.apache.rat.Defaults.Builder builder12 = builder11.noDefault();
        // The following exception was thrown during execution in test generation
        try {
            org.apache.rat.Defaults defaults13 = builder11.build();
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: No such suffix: /home/mopuser/workspace/creadur-rat/%3F%3F%3F%3F%3F");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(builder0);
        org.junit.Assert.assertNotNull(defaults1);
        org.junit.Assert.assertNotNull(builder2);
        org.junit.Assert.assertNotNull(builder4);
        org.junit.Assert.assertNotNull(builder6);
        org.junit.Assert.assertNotNull(builder8);
        org.junit.Assert.assertNotNull(builder9);
        org.junit.Assert.assertNotNull(builder10);
        org.junit.Assert.assertNotNull(builder11);
        org.junit.Assert.assertNotNull(builder12);
    }

    @Test
    public void test13929() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest27.test13929");
        org.apache.rat.api.MetaData metaData0 = new org.apache.rat.api.MetaData();
        java.lang.String str2 = metaData0.value("COMMON DEVELOPMENT AND DISTRIBUTION LICENSE Version 1.0");
        java.lang.String str4 = metaData0.value("W3C Document Copyright");
        boolean boolean6 = metaData0.clear("hi!");
        metaData0.clear();
        java.util.Collection<org.apache.rat.api.MetaData.Datum> datumCollection8 = metaData0.getData();
        org.apache.rat.api.MetaData.Datum datum9 = org.apache.rat.api.MetaData.RAT_LICENSE_FAMILY_NAME_DATUM_ACADEMIC_FREE_LICENSE_VERSION_2_1;
        java.lang.String str10 = datum9.toString();
        metaData0.set(datum9);
        org.apache.rat.api.MetaData.Datum datum12 = org.apache.rat.api.MetaData.RAT_APPROVED_LICENSE_DATUM_FALSE;
        metaData0.set(datum12);
        java.util.Collection<org.apache.rat.api.MetaData.Datum> datumCollection14 = metaData0.getData();
        org.junit.Assert.assertNull(str2);
        org.junit.Assert.assertNull(str4);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertNotNull(datumCollection8);
        org.junit.Assert.assertNotNull(datum9);
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "Datum [ name ='http://org/apache/rat/meta-data#LicenseFamilyName',value ='Academic Free License, Version 2.1 ']" + "'", str10, "Datum [ name ='http://org/apache/rat/meta-data#LicenseFamilyName',value ='Academic Free License, Version 2.1 ']");
        org.junit.Assert.assertNotNull(datum12);
        org.junit.Assert.assertNotNull(datumCollection14);
    }

    @Test
    public void test13930() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest27.test13930");
        org.apache.rat.analysis.matchers.SimpleTextMatcher simpleTextMatcher1 = new org.apache.rat.analysis.matchers.SimpleTextMatcher("binary");
        simpleTextMatcher1.reset();
        java.lang.String str3 = simpleTextMatcher1.getId();
        org.apache.rat.analysis.IHeaderMatcher.State state4 = simpleTextMatcher1.currentState();
        java.lang.String str5 = simpleTextMatcher1.getId();
        org.apache.rat.analysis.IHeaderMatcher.State state7 = simpleTextMatcher1.matches("48BB897A-E27B-468D-AF85-D73DCAACFB7F");
// flaky:         org.junit.Assert.assertEquals("'" + str3 + "' != '" + "ccc13818-cf35-442a-af8c-b5d308aa81fe" + "'", str3, "ccc13818-cf35-442a-af8c-b5d308aa81fe");
        org.junit.Assert.assertTrue("'" + state4 + "' != '" + org.apache.rat.analysis.IHeaderMatcher.State.i + "'", state4.equals(org.apache.rat.analysis.IHeaderMatcher.State.i));
// flaky:         org.junit.Assert.assertEquals("'" + str5 + "' != '" + "ccc13818-cf35-442a-af8c-b5d308aa81fe" + "'", str5, "ccc13818-cf35-442a-af8c-b5d308aa81fe");
        org.junit.Assert.assertTrue("'" + state7 + "' != '" + org.apache.rat.analysis.IHeaderMatcher.State.i + "'", state7.equals(org.apache.rat.analysis.IHeaderMatcher.State.i));
    }

    @Test
    public void test13931() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest27.test13931");
        org.apache.rat.utils.DefaultLog defaultLog0 = org.apache.rat.utils.DefaultLog.INSTANCE;
        org.apache.rat.utils.Log log1 = null;
        org.apache.rat.ReportConfiguration reportConfiguration2 = new org.apache.rat.ReportConfiguration(log1);
        java.io.FilenameFilter filenameFilter3 = reportConfiguration2.getInputFileFilter();
        org.apache.rat.license.LicenseSetFactory.LicenseFilter licenseFilter4 = org.apache.rat.license.LicenseSetFactory.LicenseFilter.all;
        java.util.SortedSet<org.apache.rat.license.ILicense> iLicenseSet5 = reportConfiguration2.getLicenses(licenseFilter4);
        org.apache.rat.config.AddLicenseHeaders addLicenseHeaders6 = org.apache.rat.config.AddLicenseHeaders.FALSE;
        reportConfiguration2.setAddLicenseHeaders(addLicenseHeaders6);
        org.apache.rat.utils.Log log8 = null;
        org.apache.rat.ReportConfiguration reportConfiguration9 = new org.apache.rat.ReportConfiguration(log8);
        org.apache.rat.report.claim.ClaimStatistic claimStatistic10 = org.apache.rat.Reporter.report(reportConfiguration9);
        org.apache.rat.license.LicenseSetFactory.LicenseFilter licenseFilter11 = org.apache.rat.license.LicenseSetFactory.LicenseFilter.all;
        org.apache.rat.Reporter.listLicenses(reportConfiguration9, licenseFilter11);
        org.apache.rat.Reporter.listLicenses(reportConfiguration2, licenseFilter11);
        org.apache.rat.utils.Log log14 = null;
        org.apache.rat.ReportConfiguration reportConfiguration15 = new org.apache.rat.ReportConfiguration(log14);
        java.io.FilenameFilter filenameFilter16 = reportConfiguration15.getInputFileFilter();
        org.apache.rat.license.LicenseSetFactory.LicenseFilter licenseFilter17 = org.apache.rat.license.LicenseSetFactory.LicenseFilter.all;
        java.util.SortedSet<org.apache.rat.license.ILicense> iLicenseSet18 = reportConfiguration15.getLicenses(licenseFilter17);
        org.apache.rat.config.AddLicenseHeaders addLicenseHeaders19 = org.apache.rat.config.AddLicenseHeaders.FALSE;
        reportConfiguration15.setAddLicenseHeaders(addLicenseHeaders19);
        org.apache.rat.utils.Log log21 = null;
        org.apache.rat.ReportConfiguration reportConfiguration22 = new org.apache.rat.ReportConfiguration(log21);
        org.apache.rat.report.claim.ClaimStatistic claimStatistic23 = org.apache.rat.Reporter.report(reportConfiguration22);
        org.apache.rat.license.LicenseSetFactory.LicenseFilter licenseFilter24 = org.apache.rat.license.LicenseSetFactory.LicenseFilter.all;
        org.apache.rat.Reporter.listLicenses(reportConfiguration22, licenseFilter24);
        org.apache.rat.Reporter.listLicenses(reportConfiguration15, licenseFilter24);
        org.apache.rat.Reporter.listLicenses(reportConfiguration2, licenseFilter24);
        org.apache.rat.utils.Log log28 = null;
        org.apache.rat.ReportConfiguration reportConfiguration29 = new org.apache.rat.ReportConfiguration(log28);
        org.apache.commons.io.function.IOSupplier<java.io.OutputStream> outputStreamIOSupplier30 = reportConfiguration29.getOutput();
        reportConfiguration2.setOut(outputStreamIOSupplier30);
        org.apache.rat.utils.Log log32 = null;
        org.apache.rat.ReportConfiguration reportConfiguration33 = new org.apache.rat.ReportConfiguration(log32);
        org.apache.rat.report.claim.ClaimStatistic claimStatistic34 = org.apache.rat.Reporter.report(reportConfiguration33);
        org.apache.rat.utils.Log log35 = null;
        org.apache.rat.ReportConfiguration reportConfiguration36 = new org.apache.rat.ReportConfiguration(log35);
        org.apache.rat.report.claim.ClaimStatistic claimStatistic37 = org.apache.rat.Reporter.report(reportConfiguration36);
        org.apache.rat.utils.ReportingSet.Options options38 = org.apache.rat.utils.ReportingSet.Options.OVERWRITE;
        reportConfiguration36.licenseDuplicateOption(options38);
        reportConfiguration33.familyDuplicateOption(options38);
        reportConfiguration2.licenseDuplicateOption(options38);
        reportConfiguration2.addApprovedLicenseCategory("W3C Document Copyright");
        org.apache.rat.utils.Log log44 = null;
        org.apache.rat.ReportConfiguration reportConfiguration45 = new org.apache.rat.ReportConfiguration(log44);
        reportConfiguration45.addApprovedLicenseCategory(".cvsignore");
        org.apache.rat.utils.Log.Level level48 = org.apache.rat.utils.Log.Level.ERROR;
        reportConfiguration45.logLicenseCollisions(level48);
        reportConfiguration2.logLicenseCollisions(level48);
        defaultLog0.setLevel(level48);
        org.apache.rat.ReportConfiguration reportConfiguration52 = new org.apache.rat.ReportConfiguration((org.apache.rat.utils.Log) defaultLog0);
        org.apache.rat.Defaults.Builder builder54 = org.apache.rat.Defaults.builder();
        org.apache.rat.Defaults defaults55 = builder54.build();
        org.apache.rat.utils.Log log56 = null;
        org.apache.rat.ReportConfiguration reportConfiguration57 = new org.apache.rat.ReportConfiguration(log56);
        java.io.FilenameFilter filenameFilter58 = reportConfiguration57.getInputFileFilter();
        org.apache.rat.license.LicenseSetFactory.LicenseFilter licenseFilter59 = org.apache.rat.license.LicenseSetFactory.LicenseFilter.all;
        java.util.SortedSet<org.apache.rat.license.ILicense> iLicenseSet60 = reportConfiguration57.getLicenses(licenseFilter59);
        org.apache.rat.config.AddLicenseHeaders addLicenseHeaders61 = org.apache.rat.config.AddLicenseHeaders.FALSE;
        reportConfiguration57.setAddLicenseHeaders(addLicenseHeaders61);
        org.apache.rat.utils.Log log63 = null;
        org.apache.rat.ReportConfiguration reportConfiguration64 = new org.apache.rat.ReportConfiguration(log63);
        org.apache.rat.report.claim.ClaimStatistic claimStatistic65 = org.apache.rat.Reporter.report(reportConfiguration64);
        org.apache.rat.license.LicenseSetFactory.LicenseFilter licenseFilter66 = org.apache.rat.license.LicenseSetFactory.LicenseFilter.all;
        org.apache.rat.Reporter.listLicenses(reportConfiguration64, licenseFilter66);
        org.apache.rat.Reporter.listLicenses(reportConfiguration57, licenseFilter66);
        org.apache.rat.utils.Log log69 = null;
        org.apache.rat.ReportConfiguration reportConfiguration70 = new org.apache.rat.ReportConfiguration(log69);
        java.io.FilenameFilter filenameFilter71 = reportConfiguration70.getInputFileFilter();
        org.apache.rat.license.LicenseSetFactory.LicenseFilter licenseFilter72 = org.apache.rat.license.LicenseSetFactory.LicenseFilter.all;
        java.util.SortedSet<org.apache.rat.license.ILicense> iLicenseSet73 = reportConfiguration70.getLicenses(licenseFilter72);
        org.apache.rat.config.AddLicenseHeaders addLicenseHeaders74 = org.apache.rat.config.AddLicenseHeaders.FALSE;
        reportConfiguration70.setAddLicenseHeaders(addLicenseHeaders74);
        org.apache.rat.utils.Log log76 = null;
        org.apache.rat.ReportConfiguration reportConfiguration77 = new org.apache.rat.ReportConfiguration(log76);
        org.apache.rat.report.claim.ClaimStatistic claimStatistic78 = org.apache.rat.Reporter.report(reportConfiguration77);
        org.apache.rat.license.LicenseSetFactory.LicenseFilter licenseFilter79 = org.apache.rat.license.LicenseSetFactory.LicenseFilter.all;
        org.apache.rat.Reporter.listLicenses(reportConfiguration77, licenseFilter79);
        org.apache.rat.Reporter.listLicenses(reportConfiguration70, licenseFilter79);
        java.util.SortedSet<org.apache.rat.license.ILicenseFamily> iLicenseFamilySet82 = reportConfiguration57.getLicenseFamilies(licenseFilter79);
        java.util.SortedSet<org.apache.rat.license.ILicense> iLicenseSet83 = defaults55.getLicenses(licenseFilter79);
        org.apache.rat.utils.ReportingSet<org.apache.rat.license.ILicense> iLicenseSet84 = new org.apache.rat.utils.ReportingSet<org.apache.rat.license.ILicense>(iLicenseSet83);
        org.apache.rat.license.ILicense iLicense85 = org.apache.rat.license.LicenseSetFactory.search("TMF", iLicenseSet83);
        org.apache.rat.license.ILicenseFamily iLicenseFamily86 = iLicense85.getLicenseFamily();
        defaultLog0.debug((java.lang.Object) iLicenseFamily86);
        org.junit.Assert.assertNotNull(defaultLog0);
        org.junit.Assert.assertNull(filenameFilter3);
        org.junit.Assert.assertTrue("'" + licenseFilter4 + "' != '" + org.apache.rat.license.LicenseSetFactory.LicenseFilter.all + "'", licenseFilter4.equals(org.apache.rat.license.LicenseSetFactory.LicenseFilter.all));
        org.junit.Assert.assertNotNull(iLicenseSet5);
        org.junit.Assert.assertTrue("'" + addLicenseHeaders6 + "' != '" + org.apache.rat.config.AddLicenseHeaders.FALSE + "'", addLicenseHeaders6.equals(org.apache.rat.config.AddLicenseHeaders.FALSE));
        org.junit.Assert.assertNull(claimStatistic10);
        org.junit.Assert.assertTrue("'" + licenseFilter11 + "' != '" + org.apache.rat.license.LicenseSetFactory.LicenseFilter.all + "'", licenseFilter11.equals(org.apache.rat.license.LicenseSetFactory.LicenseFilter.all));
        org.junit.Assert.assertNull(filenameFilter16);
        org.junit.Assert.assertTrue("'" + licenseFilter17 + "' != '" + org.apache.rat.license.LicenseSetFactory.LicenseFilter.all + "'", licenseFilter17.equals(org.apache.rat.license.LicenseSetFactory.LicenseFilter.all));
        org.junit.Assert.assertNotNull(iLicenseSet18);
        org.junit.Assert.assertTrue("'" + addLicenseHeaders19 + "' != '" + org.apache.rat.config.AddLicenseHeaders.FALSE + "'", addLicenseHeaders19.equals(org.apache.rat.config.AddLicenseHeaders.FALSE));
        org.junit.Assert.assertNull(claimStatistic23);
        org.junit.Assert.assertTrue("'" + licenseFilter24 + "' != '" + org.apache.rat.license.LicenseSetFactory.LicenseFilter.all + "'", licenseFilter24.equals(org.apache.rat.license.LicenseSetFactory.LicenseFilter.all));
        org.junit.Assert.assertNotNull(outputStreamIOSupplier30);
        org.junit.Assert.assertNull(claimStatistic34);
        org.junit.Assert.assertNull(claimStatistic37);
        org.junit.Assert.assertTrue("'" + options38 + "' != '" + org.apache.rat.utils.ReportingSet.Options.OVERWRITE + "'", options38.equals(org.apache.rat.utils.ReportingSet.Options.OVERWRITE));
        org.junit.Assert.assertTrue("'" + level48 + "' != '" + org.apache.rat.utils.Log.Level.ERROR + "'", level48.equals(org.apache.rat.utils.Log.Level.ERROR));
        org.junit.Assert.assertNotNull(builder54);
        org.junit.Assert.assertNotNull(defaults55);
        org.junit.Assert.assertNull(filenameFilter58);
        org.junit.Assert.assertTrue("'" + licenseFilter59 + "' != '" + org.apache.rat.license.LicenseSetFactory.LicenseFilter.all + "'", licenseFilter59.equals(org.apache.rat.license.LicenseSetFactory.LicenseFilter.all));
        org.junit.Assert.assertNotNull(iLicenseSet60);
        org.junit.Assert.assertTrue("'" + addLicenseHeaders61 + "' != '" + org.apache.rat.config.AddLicenseHeaders.FALSE + "'", addLicenseHeaders61.equals(org.apache.rat.config.AddLicenseHeaders.FALSE));
        org.junit.Assert.assertNull(claimStatistic65);
        org.junit.Assert.assertTrue("'" + licenseFilter66 + "' != '" + org.apache.rat.license.LicenseSetFactory.LicenseFilter.all + "'", licenseFilter66.equals(org.apache.rat.license.LicenseSetFactory.LicenseFilter.all));
        org.junit.Assert.assertNull(filenameFilter71);
        org.junit.Assert.assertTrue("'" + licenseFilter72 + "' != '" + org.apache.rat.license.LicenseSetFactory.LicenseFilter.all + "'", licenseFilter72.equals(org.apache.rat.license.LicenseSetFactory.LicenseFilter.all));
        org.junit.Assert.assertNotNull(iLicenseSet73);
        org.junit.Assert.assertTrue("'" + addLicenseHeaders74 + "' != '" + org.apache.rat.config.AddLicenseHeaders.FALSE + "'", addLicenseHeaders74.equals(org.apache.rat.config.AddLicenseHeaders.FALSE));
        org.junit.Assert.assertNull(claimStatistic78);
        org.junit.Assert.assertTrue("'" + licenseFilter79 + "' != '" + org.apache.rat.license.LicenseSetFactory.LicenseFilter.all + "'", licenseFilter79.equals(org.apache.rat.license.LicenseSetFactory.LicenseFilter.all));
        org.junit.Assert.assertNotNull(iLicenseFamilySet82);
        org.junit.Assert.assertNotNull(iLicenseSet83);
        org.junit.Assert.assertNotNull(iLicense85);
        org.junit.Assert.assertNotNull(iLicenseFamily86);
    }

    @Test
    public void test13932() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest27.test13932");
        boolean boolean1 = org.apache.rat.document.impl.guesser.BinaryGuesser.isBinaryData("TextBuilder: EBC30EB7B3EA4F39BAEA...");
        org.junit.Assert.assertTrue("'" + boolean1 + "' != '" + false + "'", boolean1 == false);
    }

    @Test
    public void test13933() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest27.test13933");
        org.apache.rat.analysis.license.FullTextMatchingLicense fullTextMatchingLicense0 = new org.apache.rat.analysis.license.FullTextMatchingLicense();
        fullTextMatchingLicense0.setLicenseFamilyName("hi!");
        java.lang.String str3 = fullTextMatchingLicense0.getLicenseFamilyCategory();
        java.lang.String str4 = fullTextMatchingLicense0.getLicenseFamilyName();
        fullTextMatchingLicense0.setLicenseFamilyName("SpdxBuilder: null");
        fullTextMatchingLicense0.setLicenseFamilyCategory("TMF");
        org.apache.rat.license.ILicenseFamily iLicenseFamily9 = fullTextMatchingLicense0.getLicenseFamily();
        fullTextMatchingLicense0.setFullText("Datum [ name ='http://org/apache/rat/meta-data#LicenseFamilyName',value ='GNU General Public License, version 1 ']");
        java.lang.String str12 = fullTextMatchingLicense0.getLicenseFamilyCategory();
        fullTextMatchingLicense0.setFullText("true|false|forced");
        org.apache.rat.license.ILicense.Builder builder15 = fullTextMatchingLicense0.getLicense();
        org.apache.rat.license.ILicense.Builder builder16 = fullTextMatchingLicense0.getLicense();
        fullTextMatchingLicense0.setLicenseFamilyName("564e6c73-3fcc-41b2-9c1f-62afec8968a8");
        org.junit.Assert.assertNull(str3);
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "hi!" + "'", str4, "hi!");
        org.junit.Assert.assertNotNull(iLicenseFamily9);
        org.junit.Assert.assertEquals("'" + str12 + "' != '" + "TMF" + "'", str12, "TMF");
        org.junit.Assert.assertNotNull(builder15);
        org.junit.Assert.assertNotNull(builder16);
    }

    @Test
    public void test13934() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest27.test13934");
        org.apache.rat.utils.Log log0 = null;
        org.apache.rat.ReportConfiguration reportConfiguration1 = new org.apache.rat.ReportConfiguration(log0);
        reportConfiguration1.addApprovedLicenseCategory(".cvsignore");
        org.apache.rat.utils.Log log4 = null;
        org.apache.rat.ReportConfiguration reportConfiguration5 = new org.apache.rat.ReportConfiguration(log4);
        java.io.FilenameFilter filenameFilter6 = reportConfiguration5.getInputFileFilter();
        org.apache.rat.license.LicenseSetFactory.LicenseFilter licenseFilter7 = org.apache.rat.license.LicenseSetFactory.LicenseFilter.all;
        java.util.SortedSet<org.apache.rat.license.ILicense> iLicenseSet8 = reportConfiguration5.getLicenses(licenseFilter7);
        reportConfiguration1.addLicensesIfNotPresent((java.util.Collection<org.apache.rat.license.ILicense>) iLicenseSet8);
        reportConfiguration1.setCopyrightMessage("MathcerRefBuilder: null");
        org.apache.commons.io.function.IOSupplier<java.io.InputStream> inputStreamIOSupplier12 = org.apache.rat.Defaults.getUnapprovedLicensesStyleSheet();
        reportConfiguration1.setStyleSheet(inputStreamIOSupplier12);
        org.apache.rat.utils.Log log14 = null;
        org.apache.rat.ReportConfiguration reportConfiguration15 = new org.apache.rat.ReportConfiguration(log14);
        org.apache.rat.report.claim.ClaimStatistic claimStatistic16 = org.apache.rat.Reporter.report(reportConfiguration15);
        org.apache.commons.io.function.IOSupplier<java.io.OutputStream> outputStreamIOSupplier17 = reportConfiguration15.getOutput();
        org.apache.rat.license.ILicense iLicense18 = null;
        reportConfiguration15.addLicense(iLicense18);
        reportConfiguration15.setCopyrightMessage("Copyright Builder: s:null e:null o:null");
        org.apache.rat.utils.Log log22 = null;
        org.apache.rat.ReportConfiguration reportConfiguration23 = new org.apache.rat.ReportConfiguration(log22);
        org.apache.rat.report.claim.ClaimStatistic claimStatistic24 = org.apache.rat.Reporter.report(reportConfiguration23);
        org.apache.rat.utils.Log log25 = null;
        org.apache.rat.ReportConfiguration reportConfiguration26 = new org.apache.rat.ReportConfiguration(log25);
        org.apache.rat.report.claim.ClaimStatistic claimStatistic27 = org.apache.rat.Reporter.report(reportConfiguration26);
        org.apache.rat.utils.ReportingSet.Options options28 = org.apache.rat.utils.ReportingSet.Options.OVERWRITE;
        reportConfiguration26.licenseDuplicateOption(options28);
        reportConfiguration23.familyDuplicateOption(options28);
        org.apache.commons.io.function.IOSupplier<java.io.PrintWriter> printWriterIOSupplier31 = reportConfiguration23.getWriter();
        boolean boolean32 = reportConfiguration23.isAddingLicensesForced();
        org.apache.rat.utils.Log log33 = null;
        org.apache.rat.ReportConfiguration reportConfiguration34 = new org.apache.rat.ReportConfiguration(log33);
        reportConfiguration34.addApprovedLicenseCategory(".cvsignore");
        org.apache.rat.utils.Log.Level level37 = org.apache.rat.utils.Log.Level.ERROR;
        reportConfiguration34.logFamilyCollisions(level37);
        reportConfiguration23.logLicenseCollisions(level37);
        org.apache.rat.utils.Log log40 = null;
        org.apache.rat.ReportConfiguration reportConfiguration41 = new org.apache.rat.ReportConfiguration(log40);
        java.io.FilenameFilter filenameFilter42 = reportConfiguration41.getInputFileFilter();
        org.apache.rat.license.LicenseSetFactory.LicenseFilter licenseFilter43 = org.apache.rat.license.LicenseSetFactory.LicenseFilter.all;
        java.util.SortedSet<org.apache.rat.license.ILicense> iLicenseSet44 = reportConfiguration41.getLicenses(licenseFilter43);
        org.apache.rat.config.AddLicenseHeaders addLicenseHeaders45 = org.apache.rat.config.AddLicenseHeaders.FALSE;
        reportConfiguration41.setAddLicenseHeaders(addLicenseHeaders45);
        org.apache.rat.utils.Log log47 = null;
        org.apache.rat.ReportConfiguration reportConfiguration48 = new org.apache.rat.ReportConfiguration(log47);
        org.apache.rat.report.claim.ClaimStatistic claimStatistic49 = org.apache.rat.Reporter.report(reportConfiguration48);
        org.apache.rat.license.LicenseSetFactory.LicenseFilter licenseFilter50 = org.apache.rat.license.LicenseSetFactory.LicenseFilter.all;
        org.apache.rat.Reporter.listLicenses(reportConfiguration48, licenseFilter50);
        org.apache.rat.Reporter.listLicenses(reportConfiguration41, licenseFilter50);
        org.apache.rat.config.AddLicenseHeaders addLicenseHeaders53 = org.apache.rat.config.AddLicenseHeaders.FORCED;
        reportConfiguration41.setAddLicenseHeaders(addLicenseHeaders53);
        reportConfiguration23.setAddLicenseHeaders(addLicenseHeaders53);
        reportConfiguration15.setAddLicenseHeaders(addLicenseHeaders53);
        reportConfiguration1.setAddLicenseHeaders(addLicenseHeaders53);
        org.apache.rat.license.ILicense.Builder builder58 = org.apache.rat.license.ILicense.builder();
        org.apache.rat.license.ILicense.Builder builder60 = builder58.setLicenseFamilyCategory("");
        org.apache.rat.license.ILicense.Builder builder62 = builder60.setDerivedFrom("GEN  ");
        org.apache.rat.license.ILicense.Builder builder64 = builder62.setId("DOJO ");
        org.apache.rat.analysis.IHeaderMatcher iHeaderMatcher65 = null;
        org.apache.rat.license.ILicense.Builder builder66 = builder64.setMatcher(iHeaderMatcher65);
        org.apache.rat.license.ILicense.Builder builder68 = builder66.setName("AL   ");
        org.apache.rat.license.ILicense.Builder builder70 = builder68.setDerivedFrom("");
        org.apache.rat.license.ILicense.Builder builder72 = builder68.setDerivedFrom("03F7B314-6887-4617-9C7E-BF1600B331CD");
        // The following exception was thrown during execution in test generation
        try {
            org.apache.rat.license.ILicense iLicense73 = reportConfiguration1.addLicense(builder72);
            org.junit.Assert.fail("Expected exception of type org.apache.rat.ConfigurationException; message: LicenseFamily Category must be specified");
        } catch (org.apache.rat.ConfigurationException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNull(filenameFilter6);
        org.junit.Assert.assertTrue("'" + licenseFilter7 + "' != '" + org.apache.rat.license.LicenseSetFactory.LicenseFilter.all + "'", licenseFilter7.equals(org.apache.rat.license.LicenseSetFactory.LicenseFilter.all));
        org.junit.Assert.assertNotNull(iLicenseSet8);
        org.junit.Assert.assertNotNull(inputStreamIOSupplier12);
        org.junit.Assert.assertNull(claimStatistic16);
        org.junit.Assert.assertNotNull(outputStreamIOSupplier17);
        org.junit.Assert.assertNull(claimStatistic24);
        org.junit.Assert.assertNull(claimStatistic27);
        org.junit.Assert.assertTrue("'" + options28 + "' != '" + org.apache.rat.utils.ReportingSet.Options.OVERWRITE + "'", options28.equals(org.apache.rat.utils.ReportingSet.Options.OVERWRITE));
        org.junit.Assert.assertNotNull(printWriterIOSupplier31);
        org.junit.Assert.assertTrue("'" + boolean32 + "' != '" + false + "'", boolean32 == false);
        org.junit.Assert.assertTrue("'" + level37 + "' != '" + org.apache.rat.utils.Log.Level.ERROR + "'", level37.equals(org.apache.rat.utils.Log.Level.ERROR));
        org.junit.Assert.assertNull(filenameFilter42);
        org.junit.Assert.assertTrue("'" + licenseFilter43 + "' != '" + org.apache.rat.license.LicenseSetFactory.LicenseFilter.all + "'", licenseFilter43.equals(org.apache.rat.license.LicenseSetFactory.LicenseFilter.all));
        org.junit.Assert.assertNotNull(iLicenseSet44);
        org.junit.Assert.assertTrue("'" + addLicenseHeaders45 + "' != '" + org.apache.rat.config.AddLicenseHeaders.FALSE + "'", addLicenseHeaders45.equals(org.apache.rat.config.AddLicenseHeaders.FALSE));
        org.junit.Assert.assertNull(claimStatistic49);
        org.junit.Assert.assertTrue("'" + licenseFilter50 + "' != '" + org.apache.rat.license.LicenseSetFactory.LicenseFilter.all + "'", licenseFilter50.equals(org.apache.rat.license.LicenseSetFactory.LicenseFilter.all));
        org.junit.Assert.assertTrue("'" + addLicenseHeaders53 + "' != '" + org.apache.rat.config.AddLicenseHeaders.FORCED + "'", addLicenseHeaders53.equals(org.apache.rat.config.AddLicenseHeaders.FORCED));
        org.junit.Assert.assertNotNull(builder58);
        org.junit.Assert.assertNotNull(builder60);
        org.junit.Assert.assertNotNull(builder62);
        org.junit.Assert.assertNotNull(builder64);
        org.junit.Assert.assertNotNull(builder66);
        org.junit.Assert.assertNotNull(builder68);
        org.junit.Assert.assertNotNull(builder70);
        org.junit.Assert.assertNotNull(builder72);
    }

    @Test
    public void test13935() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest27.test13935");
        org.apache.rat.utils.Log log0 = null;
        org.apache.rat.ReportConfiguration reportConfiguration1 = new org.apache.rat.ReportConfiguration(log0);
        org.apache.rat.report.claim.ClaimStatistic claimStatistic2 = org.apache.rat.Reporter.report(reportConfiguration1);
        org.apache.rat.license.ILicense[] iLicenseArray3 = new org.apache.rat.license.ILicense[] {};
        java.util.TreeSet<org.apache.rat.license.ILicense> iLicenseSet4 = new java.util.TreeSet<org.apache.rat.license.ILicense>();
        boolean boolean5 = java.util.Collections.addAll((java.util.Collection<org.apache.rat.license.ILicense>) iLicenseSet4, iLicenseArray3);
        java.lang.String[] strArray18 = new java.lang.String[] { "GPL2 ", "GPL1 ", "notice", "http://org/apache/rat/meta-data#LicenseFamilyName", "notice", "GPL2 ", "http://org/apache/rat/meta-data#LicenseFamilyName", "", "GPL2 ", "", "GPL1 ", "hi!" };
        java.util.ArrayList<java.lang.String> strList19 = new java.util.ArrayList<java.lang.String>();
        boolean boolean20 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strList19, strArray18);
        org.apache.rat.license.LicenseSetFactory licenseSetFactory21 = new org.apache.rat.license.LicenseSetFactory((java.util.SortedSet<org.apache.rat.license.ILicense>) iLicenseSet4, (java.util.Collection<java.lang.String>) strList19);
        org.apache.rat.utils.Log log22 = null;
        org.apache.rat.ReportConfiguration reportConfiguration23 = new org.apache.rat.ReportConfiguration(log22);
        java.io.FilenameFilter filenameFilter24 = reportConfiguration23.getInputFileFilter();
        org.apache.rat.license.LicenseSetFactory.LicenseFilter licenseFilter25 = org.apache.rat.license.LicenseSetFactory.LicenseFilter.all;
        java.util.SortedSet<org.apache.rat.license.ILicense> iLicenseSet26 = reportConfiguration23.getLicenses(licenseFilter25);
        org.apache.rat.config.AddLicenseHeaders addLicenseHeaders27 = org.apache.rat.config.AddLicenseHeaders.FALSE;
        reportConfiguration23.setAddLicenseHeaders(addLicenseHeaders27);
        org.apache.rat.utils.Log log29 = null;
        org.apache.rat.ReportConfiguration reportConfiguration30 = new org.apache.rat.ReportConfiguration(log29);
        org.apache.rat.report.claim.ClaimStatistic claimStatistic31 = org.apache.rat.Reporter.report(reportConfiguration30);
        org.apache.rat.license.LicenseSetFactory.LicenseFilter licenseFilter32 = org.apache.rat.license.LicenseSetFactory.LicenseFilter.all;
        org.apache.rat.Reporter.listLicenses(reportConfiguration30, licenseFilter32);
        org.apache.rat.Reporter.listLicenses(reportConfiguration23, licenseFilter32);
        org.apache.rat.utils.Log log35 = null;
        org.apache.rat.ReportConfiguration reportConfiguration36 = new org.apache.rat.ReportConfiguration(log35);
        java.io.FilenameFilter filenameFilter37 = reportConfiguration36.getInputFileFilter();
        org.apache.rat.license.LicenseSetFactory.LicenseFilter licenseFilter38 = org.apache.rat.license.LicenseSetFactory.LicenseFilter.all;
        java.util.SortedSet<org.apache.rat.license.ILicense> iLicenseSet39 = reportConfiguration36.getLicenses(licenseFilter38);
        org.apache.rat.config.AddLicenseHeaders addLicenseHeaders40 = org.apache.rat.config.AddLicenseHeaders.FALSE;
        reportConfiguration36.setAddLicenseHeaders(addLicenseHeaders40);
        org.apache.rat.utils.Log log42 = null;
        org.apache.rat.ReportConfiguration reportConfiguration43 = new org.apache.rat.ReportConfiguration(log42);
        org.apache.rat.report.claim.ClaimStatistic claimStatistic44 = org.apache.rat.Reporter.report(reportConfiguration43);
        org.apache.rat.license.LicenseSetFactory.LicenseFilter licenseFilter45 = org.apache.rat.license.LicenseSetFactory.LicenseFilter.all;
        org.apache.rat.Reporter.listLicenses(reportConfiguration43, licenseFilter45);
        org.apache.rat.Reporter.listLicenses(reportConfiguration36, licenseFilter45);
        org.apache.rat.Reporter.listLicenses(reportConfiguration23, licenseFilter45);
        java.util.SortedSet<org.apache.rat.license.ILicense> iLicenseSet49 = licenseSetFactory21.getLicenses(licenseFilter45);
        reportConfiguration1.addLicensesIfNotPresent((java.util.Collection<org.apache.rat.license.ILicense>) iLicenseSet49);
        org.apache.rat.utils.Log log51 = reportConfiguration1.getLog();
        reportConfiguration1.setCopyrightMessage("http://org/apache/rat/meta-data#FileCategory");
        org.apache.rat.report.IReportable iReportable54 = reportConfiguration1.getReportable();
        org.apache.rat.license.LicenseSetFactory.LicenseFilter licenseFilter55 = null;
        // The following exception was thrown during execution in test generation
        try {
            java.util.SortedSet<org.apache.rat.license.ILicense> iLicenseSet56 = reportConfiguration1.getLicenses(licenseFilter55);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNull(claimStatistic2);
        org.junit.Assert.assertNotNull(iLicenseArray3);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertNotNull(strArray18);
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + true + "'", boolean20 == true);
        org.junit.Assert.assertNull(filenameFilter24);
        org.junit.Assert.assertTrue("'" + licenseFilter25 + "' != '" + org.apache.rat.license.LicenseSetFactory.LicenseFilter.all + "'", licenseFilter25.equals(org.apache.rat.license.LicenseSetFactory.LicenseFilter.all));
        org.junit.Assert.assertNotNull(iLicenseSet26);
        org.junit.Assert.assertTrue("'" + addLicenseHeaders27 + "' != '" + org.apache.rat.config.AddLicenseHeaders.FALSE + "'", addLicenseHeaders27.equals(org.apache.rat.config.AddLicenseHeaders.FALSE));
        org.junit.Assert.assertNull(claimStatistic31);
        org.junit.Assert.assertTrue("'" + licenseFilter32 + "' != '" + org.apache.rat.license.LicenseSetFactory.LicenseFilter.all + "'", licenseFilter32.equals(org.apache.rat.license.LicenseSetFactory.LicenseFilter.all));
        org.junit.Assert.assertNull(filenameFilter37);
        org.junit.Assert.assertTrue("'" + licenseFilter38 + "' != '" + org.apache.rat.license.LicenseSetFactory.LicenseFilter.all + "'", licenseFilter38.equals(org.apache.rat.license.LicenseSetFactory.LicenseFilter.all));
        org.junit.Assert.assertNotNull(iLicenseSet39);
        org.junit.Assert.assertTrue("'" + addLicenseHeaders40 + "' != '" + org.apache.rat.config.AddLicenseHeaders.FALSE + "'", addLicenseHeaders40.equals(org.apache.rat.config.AddLicenseHeaders.FALSE));
        org.junit.Assert.assertNull(claimStatistic44);
        org.junit.Assert.assertTrue("'" + licenseFilter45 + "' != '" + org.apache.rat.license.LicenseSetFactory.LicenseFilter.all + "'", licenseFilter45.equals(org.apache.rat.license.LicenseSetFactory.LicenseFilter.all));
        org.junit.Assert.assertNotNull(iLicenseSet49);
        org.junit.Assert.assertNull(log51);
        org.junit.Assert.assertNull(iReportable54);
    }

    @Test
    public void test13936() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest27.test13936");
        java.io.Writer writer0 = null;
        org.apache.rat.report.xml.writer.impl.base.XmlWriter xmlWriter1 = new org.apache.rat.report.xml.writer.impl.base.XmlWriter(writer0);
        org.apache.rat.report.claim.impl.xml.SimpleXmlClaimReporter simpleXmlClaimReporter2 = new org.apache.rat.report.claim.impl.xml.SimpleXmlClaimReporter((org.apache.rat.report.xml.writer.IXmlWriter) xmlWriter1);
        org.apache.rat.report.claim.impl.xml.SimpleXmlClaimReporter simpleXmlClaimReporter3 = new org.apache.rat.report.claim.impl.xml.SimpleXmlClaimReporter((org.apache.rat.report.xml.writer.IXmlWriter) xmlWriter1);
        org.apache.rat.report.claim.impl.xml.SimpleXmlClaimReporter simpleXmlClaimReporter4 = new org.apache.rat.report.claim.impl.xml.SimpleXmlClaimReporter((org.apache.rat.report.xml.writer.IXmlWriter) xmlWriter1);
        org.apache.rat.report.claim.impl.xml.SimpleXmlClaimReporter simpleXmlClaimReporter5 = new org.apache.rat.report.claim.impl.xml.SimpleXmlClaimReporter((org.apache.rat.report.xml.writer.IXmlWriter) xmlWriter1);
        org.apache.rat.report.claim.impl.xml.SimpleXmlClaimReporter simpleXmlClaimReporter6 = new org.apache.rat.report.claim.impl.xml.SimpleXmlClaimReporter((org.apache.rat.report.xml.writer.IXmlWriter) xmlWriter1);
        org.apache.rat.report.claim.impl.xml.SimpleXmlClaimReporter simpleXmlClaimReporter7 = new org.apache.rat.report.claim.impl.xml.SimpleXmlClaimReporter((org.apache.rat.report.xml.writer.IXmlWriter) xmlWriter1);
        org.apache.rat.report.claim.impl.xml.SimpleXmlClaimReporter simpleXmlClaimReporter8 = new org.apache.rat.report.claim.impl.xml.SimpleXmlClaimReporter((org.apache.rat.report.xml.writer.IXmlWriter) xmlWriter1);
        // The following exception was thrown during execution in test generation
        try {
            org.apache.rat.report.xml.writer.IXmlWriter iXmlWriter10 = xmlWriter1.content((java.lang.CharSequence) "D399D24A-DACE-44C7-AA43-3A1C7A4EEE3D");
            org.junit.Assert.fail("Expected exception of type org.apache.rat.report.xml.writer.OperationNotAllowedException; message: An element must be opened before content can be written.");
        } catch (org.apache.rat.report.xml.writer.OperationNotAllowedException e) {
            // Expected exception.
        }
    }

    @Test
    public void test13937() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest27.test13937");
        org.apache.rat.header.HeaderBean headerBean0 = new org.apache.rat.header.HeaderBean();
        boolean boolean1 = headerBean0.isMatch();
        java.util.regex.Pattern pattern2 = null;
        headerBean0.setHeaderPattern(pattern2);
        headerBean0.setMatch(false);
        headerBean0.setMatch(true);
        headerBean0.setMatch(true);
        boolean boolean10 = headerBean0.isMatch();
        headerBean0.setMatch(false);
        java.util.regex.Pattern pattern13 = headerBean0.getHeaderPattern();
        headerBean0.setMatch(false);
        java.util.regex.Pattern pattern16 = headerBean0.getHeaderPattern();
        org.junit.Assert.assertTrue("'" + boolean1 + "' != '" + false + "'", boolean1 == false);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + true + "'", boolean10 == true);
        org.junit.Assert.assertNull(pattern13);
        org.junit.Assert.assertNull(pattern16);
    }

    @Test
    public void test13938() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest27.test13938");
        org.apache.rat.configuration.builders.NotBuilder notBuilder0 = new org.apache.rat.configuration.builders.NotBuilder();
        java.lang.String str1 = notBuilder0.toString();
        org.apache.rat.configuration.builders.SpdxBuilder spdxBuilder2 = org.apache.rat.analysis.IHeaderMatcher.Builder.spdx();
        java.lang.String str3 = spdxBuilder2.toString();
        org.apache.rat.configuration.builders.SpdxBuilder spdxBuilder5 = spdxBuilder2.setName("ef7a8b13-64c3-4510-bb0c-dbf208e1e73f");
        org.apache.rat.analysis.IHeaderMatcher iHeaderMatcher6 = spdxBuilder2.build();
        org.apache.rat.analysis.IHeaderMatcher iHeaderMatcher7 = spdxBuilder2.build();
        org.apache.rat.analysis.IHeaderMatcher iHeaderMatcher8 = spdxBuilder2.build();
        org.apache.rat.analysis.IHeaderMatcher iHeaderMatcher9 = spdxBuilder2.build();
        org.apache.rat.analysis.IHeaderMatcher iHeaderMatcher10 = spdxBuilder2.build();
        org.apache.rat.configuration.builders.AbstractBuilder abstractBuilder11 = notBuilder0.add((org.apache.rat.analysis.IHeaderMatcher.Builder) spdxBuilder2);
        java.lang.String str12 = notBuilder0.toString();
        org.junit.Assert.assertEquals("'" + str1 + "' != '" + "NotBuilder: null" + "'", str1, "NotBuilder: null");
        org.junit.Assert.assertNotNull(spdxBuilder2);
        org.junit.Assert.assertEquals("'" + str3 + "' != '" + "SpdxBuilder: null" + "'", str3, "SpdxBuilder: null");
        org.junit.Assert.assertNotNull(spdxBuilder5);
        org.junit.Assert.assertNotNull(iHeaderMatcher6);
        org.junit.Assert.assertNotNull(iHeaderMatcher7);
        org.junit.Assert.assertNotNull(iHeaderMatcher8);
        org.junit.Assert.assertNotNull(iHeaderMatcher9);
        org.junit.Assert.assertNotNull(iHeaderMatcher10);
        org.junit.Assert.assertNotNull(abstractBuilder11);
        org.junit.Assert.assertEquals("'" + str12 + "' != '" + "NotBuilder: SpdxBuilder: ef7a8b13-64c3-4510-bb0c-dbf208e1e73f" + "'", str12, "NotBuilder: SpdxBuilder: ef7a8b13-64c3-4510-bb0c-dbf208e1e73f");
    }

    @Test
    public void test13939() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest27.test13939");
        org.apache.rat.document.ToNameTransformer toNameTransformer0 = new org.apache.rat.document.ToNameTransformer();
        org.apache.rat.utils.DefaultLog defaultLog1 = org.apache.rat.utils.DefaultLog.INSTANCE;
        org.apache.rat.license.ILicense.Builder builder2 = org.apache.rat.license.ILicense.builder();
        org.apache.rat.license.ILicense.Builder builder4 = builder2.setLicenseFamilyCategory("");
        org.apache.rat.analysis.matchers.CopyrightMatcher copyrightMatcher8 = new org.apache.rat.analysis.matchers.CopyrightMatcher("", "GPL1 ", "hi!");
        org.apache.rat.analysis.IHeaderMatcher.State state9 = copyrightMatcher8.finalizeState();
        org.apache.rat.license.ILicense.Builder builder10 = builder4.setMatcher((org.apache.rat.analysis.IHeaderMatcher) copyrightMatcher8);
        org.apache.rat.license.ILicense.Builder builder12 = builder10.setLicenseFamilyCategory("");
        defaultLog1.error((java.lang.Object) builder12);
        java.lang.Object obj14 = toNameTransformer0.transform((java.lang.Object) defaultLog1);
        org.apache.rat.ReportConfiguration reportConfiguration15 = new org.apache.rat.ReportConfiguration((org.apache.rat.utils.Log) defaultLog1);
        java.util.regex.Pattern pattern17 = null;
        org.apache.rat.analysis.matchers.SimpleRegexMatcher simpleRegexMatcher18 = new org.apache.rat.analysis.matchers.SimpleRegexMatcher("", pattern17);
        simpleRegexMatcher18.reset();
        java.lang.String str20 = simpleRegexMatcher18.getId();
        org.apache.rat.analysis.matchers.NotMatcher notMatcher21 = new org.apache.rat.analysis.matchers.NotMatcher((org.apache.rat.analysis.IHeaderMatcher) simpleRegexMatcher18);
        simpleRegexMatcher18.reset();
        defaultLog1.info((java.lang.Object) simpleRegexMatcher18);
        org.apache.rat.utils.Log log24 = null;
        org.apache.rat.ReportConfiguration reportConfiguration25 = new org.apache.rat.ReportConfiguration(log24);
        java.io.FilenameFilter filenameFilter26 = reportConfiguration25.getInputFileFilter();
        org.apache.rat.license.LicenseSetFactory.LicenseFilter licenseFilter27 = org.apache.rat.license.LicenseSetFactory.LicenseFilter.all;
        java.util.SortedSet<org.apache.rat.license.ILicense> iLicenseSet28 = reportConfiguration25.getLicenses(licenseFilter27);
        org.apache.commons.io.function.IOSupplier<java.io.InputStream> inputStreamIOSupplier29 = reportConfiguration25.getStyleSheet();
        reportConfiguration25.addApprovedLicenseCategory("true");
        org.apache.rat.utils.Log log32 = null;
        org.apache.rat.ReportConfiguration reportConfiguration33 = new org.apache.rat.ReportConfiguration(log32);
        org.apache.rat.report.claim.ClaimStatistic claimStatistic34 = org.apache.rat.Reporter.report(reportConfiguration33);
        org.apache.commons.io.function.IOSupplier<java.io.OutputStream> outputStreamIOSupplier35 = reportConfiguration33.getOutput();
        boolean boolean36 = reportConfiguration33.isAddingLicensesForced();
        java.lang.String str37 = reportConfiguration33.getCopyrightMessage();
        reportConfiguration33.removeApprovedLicenseCategory("AnyBuilder:\nAllBuilder:");
        org.apache.commons.io.function.IOSupplier<java.io.OutputStream> outputStreamIOSupplier40 = reportConfiguration33.getOutput();
        reportConfiguration25.setOut(outputStreamIOSupplier40);
        reportConfiguration25.removeApprovedLicenseCategory("ac588fb8-47ff-4c8a-b192-4b692ac6762c");
        java.util.SortedSet<java.lang.String> strSet44 = reportConfiguration25.getApprovedLicenseCategories();
        defaultLog1.warn((java.lang.Object) reportConfiguration25);
        org.junit.Assert.assertNotNull(defaultLog1);
        org.junit.Assert.assertNotNull(builder2);
        org.junit.Assert.assertNotNull(builder4);
        org.junit.Assert.assertTrue("'" + state9 + "' != '" + org.apache.rat.analysis.IHeaderMatcher.State.f + "'", state9.equals(org.apache.rat.analysis.IHeaderMatcher.State.f));
        org.junit.Assert.assertNotNull(builder10);
        org.junit.Assert.assertNotNull(builder12);
        org.junit.Assert.assertNull(obj14);
// flaky:         org.junit.Assert.assertEquals("'" + str20 + "' != '" + "d8d39ac2-ff5a-4cf1-ba24-0a6c90cada0b" + "'", str20, "d8d39ac2-ff5a-4cf1-ba24-0a6c90cada0b");
        org.junit.Assert.assertNull(filenameFilter26);
        org.junit.Assert.assertTrue("'" + licenseFilter27 + "' != '" + org.apache.rat.license.LicenseSetFactory.LicenseFilter.all + "'", licenseFilter27.equals(org.apache.rat.license.LicenseSetFactory.LicenseFilter.all));
        org.junit.Assert.assertNotNull(iLicenseSet28);
        org.junit.Assert.assertNull(inputStreamIOSupplier29);
        org.junit.Assert.assertNull(claimStatistic34);
        org.junit.Assert.assertNotNull(outputStreamIOSupplier35);
        org.junit.Assert.assertTrue("'" + boolean36 + "' != '" + false + "'", boolean36 == false);
        org.junit.Assert.assertNull(str37);
        org.junit.Assert.assertNotNull(outputStreamIOSupplier40);
        org.junit.Assert.assertNotNull(strSet44);
    }

    @Test
    public void test13940() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest27.test13940");
        org.apache.rat.utils.Log log0 = null;
        org.apache.rat.ReportConfiguration reportConfiguration1 = new org.apache.rat.ReportConfiguration(log0);
        org.apache.rat.report.claim.ClaimStatistic claimStatistic2 = org.apache.rat.Reporter.report(reportConfiguration1);
        org.apache.rat.report.IReportable iReportable3 = null;
        reportConfiguration1.setReportable(iReportable3);
        boolean boolean5 = reportConfiguration1.isAddingLicensesForced();
        org.apache.commons.io.filefilter.IOFileFilter iOFileFilter6 = reportConfiguration1.getDirectoryFilter();
        org.apache.rat.report.IReportable iReportable7 = null;
        reportConfiguration1.setReportable(iReportable7);
        org.apache.rat.license.ILicenseFamilyBuilder iLicenseFamilyBuilder9 = new org.apache.rat.license.ILicenseFamilyBuilder();
        org.apache.rat.license.ILicenseFamily.Builder builder11 = iLicenseFamilyBuilder9.setLicenseFamilyCategory("Modified BSD License");
        org.apache.rat.license.ILicenseFamily.Builder builder13 = iLicenseFamilyBuilder9.setLicenseFamilyCategory("6486879f-fc81-4b57-aec7-c4c77d540c30");
        org.apache.rat.license.ILicenseFamily.Builder builder15 = iLicenseFamilyBuilder9.setLicenseFamilyName("MathcerRefBuilder: ");
        org.apache.rat.license.ILicenseFamily.Builder builder17 = iLicenseFamilyBuilder9.setLicenseFamilyName("Copyright Builder: s:6481fb19-38f0-43f5-ab95-caf84a069ee1 e:null o:null");
        java.lang.String str18 = iLicenseFamilyBuilder9.getCategory();
        org.apache.rat.license.ILicenseFamily.Builder builder20 = iLicenseFamilyBuilder9.setLicenseFamilyName("9340895e-47fd-411d-8917-58c71f9a32c4");
        org.apache.rat.license.ILicenseFamily iLicenseFamily21 = iLicenseFamilyBuilder9.build();
        org.apache.rat.license.ILicenseFamily.Builder builder23 = iLicenseFamilyBuilder9.setLicenseFamilyCategory("02f4d6d1-900a-4ff1-8f08-c218e73d02b3");
        org.apache.rat.license.ILicenseFamily iLicenseFamily24 = iLicenseFamilyBuilder9.build();
        reportConfiguration1.addFamily(iLicenseFamily24);
        reportConfiguration1.setCopyrightMessage("Datum [ name ='b9d57440-4b03-461e-a164-b29e1341bbc8',value =' ']");
        org.junit.Assert.assertNull(claimStatistic2);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertNotNull(iOFileFilter6);
        org.junit.Assert.assertNotNull(builder11);
        org.junit.Assert.assertNotNull(builder13);
        org.junit.Assert.assertNotNull(builder15);
        org.junit.Assert.assertNotNull(builder17);
        org.junit.Assert.assertEquals("'" + str18 + "' != '" + "6486879f-fc81-4b57-aec7-c4c77d540c30" + "'", str18, "6486879f-fc81-4b57-aec7-c4c77d540c30");
        org.junit.Assert.assertNotNull(builder20);
        org.junit.Assert.assertNotNull(iLicenseFamily21);
        org.junit.Assert.assertNotNull(builder23);
        org.junit.Assert.assertNotNull(iLicenseFamily24);
    }

    @Test
    public void test13941() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest27.test13941");
        org.apache.rat.utils.Log log0 = null;
        org.apache.rat.ReportConfiguration reportConfiguration1 = new org.apache.rat.ReportConfiguration(log0);
        java.io.FilenameFilter filenameFilter2 = reportConfiguration1.getInputFileFilter();
        org.apache.rat.license.LicenseSetFactory.LicenseFilter licenseFilter3 = org.apache.rat.license.LicenseSetFactory.LicenseFilter.all;
        java.util.SortedSet<org.apache.rat.license.ILicense> iLicenseSet4 = reportConfiguration1.getLicenses(licenseFilter3);
        org.apache.rat.config.AddLicenseHeaders addLicenseHeaders5 = org.apache.rat.config.AddLicenseHeaders.FALSE;
        reportConfiguration1.setAddLicenseHeaders(addLicenseHeaders5);
        org.apache.rat.utils.Log log7 = null;
        org.apache.rat.ReportConfiguration reportConfiguration8 = new org.apache.rat.ReportConfiguration(log7);
        reportConfiguration8.addApprovedLicenseCategory(".cvsignore");
        org.apache.rat.utils.Log.Level level11 = org.apache.rat.utils.Log.Level.ERROR;
        reportConfiguration8.logLicenseCollisions(level11);
        reportConfiguration1.logFamilyCollisions(level11);
        org.apache.rat.Defaults.Builder builder14 = org.apache.rat.Defaults.builder();
        org.apache.rat.Defaults.Builder builder15 = builder14.noDefault();
        org.apache.rat.Defaults defaults16 = builder15.build();
        org.apache.rat.Defaults.Builder builder17 = org.apache.rat.Defaults.builder();
        org.apache.rat.Defaults defaults18 = builder17.build();
        org.apache.rat.utils.Log log19 = null;
        org.apache.rat.ReportConfiguration reportConfiguration20 = new org.apache.rat.ReportConfiguration(log19);
        java.io.FilenameFilter filenameFilter21 = reportConfiguration20.getInputFileFilter();
        org.apache.rat.license.LicenseSetFactory.LicenseFilter licenseFilter22 = org.apache.rat.license.LicenseSetFactory.LicenseFilter.all;
        java.util.SortedSet<org.apache.rat.license.ILicense> iLicenseSet23 = reportConfiguration20.getLicenses(licenseFilter22);
        org.apache.rat.config.AddLicenseHeaders addLicenseHeaders24 = org.apache.rat.config.AddLicenseHeaders.FALSE;
        reportConfiguration20.setAddLicenseHeaders(addLicenseHeaders24);
        org.apache.rat.utils.Log log26 = null;
        org.apache.rat.ReportConfiguration reportConfiguration27 = new org.apache.rat.ReportConfiguration(log26);
        org.apache.rat.report.claim.ClaimStatistic claimStatistic28 = org.apache.rat.Reporter.report(reportConfiguration27);
        org.apache.rat.license.LicenseSetFactory.LicenseFilter licenseFilter29 = org.apache.rat.license.LicenseSetFactory.LicenseFilter.all;
        org.apache.rat.Reporter.listLicenses(reportConfiguration27, licenseFilter29);
        org.apache.rat.Reporter.listLicenses(reportConfiguration20, licenseFilter29);
        org.apache.rat.utils.Log log32 = null;
        org.apache.rat.ReportConfiguration reportConfiguration33 = new org.apache.rat.ReportConfiguration(log32);
        java.io.FilenameFilter filenameFilter34 = reportConfiguration33.getInputFileFilter();
        org.apache.rat.license.LicenseSetFactory.LicenseFilter licenseFilter35 = org.apache.rat.license.LicenseSetFactory.LicenseFilter.all;
        java.util.SortedSet<org.apache.rat.license.ILicense> iLicenseSet36 = reportConfiguration33.getLicenses(licenseFilter35);
        org.apache.rat.config.AddLicenseHeaders addLicenseHeaders37 = org.apache.rat.config.AddLicenseHeaders.FALSE;
        reportConfiguration33.setAddLicenseHeaders(addLicenseHeaders37);
        org.apache.rat.utils.Log log39 = null;
        org.apache.rat.ReportConfiguration reportConfiguration40 = new org.apache.rat.ReportConfiguration(log39);
        org.apache.rat.report.claim.ClaimStatistic claimStatistic41 = org.apache.rat.Reporter.report(reportConfiguration40);
        org.apache.rat.license.LicenseSetFactory.LicenseFilter licenseFilter42 = org.apache.rat.license.LicenseSetFactory.LicenseFilter.all;
        org.apache.rat.Reporter.listLicenses(reportConfiguration40, licenseFilter42);
        org.apache.rat.Reporter.listLicenses(reportConfiguration33, licenseFilter42);
        java.util.SortedSet<org.apache.rat.license.ILicenseFamily> iLicenseFamilySet45 = reportConfiguration20.getLicenseFamilies(licenseFilter42);
        java.util.SortedSet<org.apache.rat.license.ILicense> iLicenseSet46 = defaults18.getLicenses(licenseFilter42);
        java.util.SortedSet<org.apache.rat.license.ILicenseFamily> iLicenseFamilySet47 = defaults16.getLicenseFamilies(licenseFilter42);
        reportConfiguration1.addFamilies((java.util.Collection<org.apache.rat.license.ILicenseFamily>) iLicenseFamilySet47);
        org.junit.Assert.assertNull(filenameFilter2);
        org.junit.Assert.assertTrue("'" + licenseFilter3 + "' != '" + org.apache.rat.license.LicenseSetFactory.LicenseFilter.all + "'", licenseFilter3.equals(org.apache.rat.license.LicenseSetFactory.LicenseFilter.all));
        org.junit.Assert.assertNotNull(iLicenseSet4);
        org.junit.Assert.assertTrue("'" + addLicenseHeaders5 + "' != '" + org.apache.rat.config.AddLicenseHeaders.FALSE + "'", addLicenseHeaders5.equals(org.apache.rat.config.AddLicenseHeaders.FALSE));
        org.junit.Assert.assertTrue("'" + level11 + "' != '" + org.apache.rat.utils.Log.Level.ERROR + "'", level11.equals(org.apache.rat.utils.Log.Level.ERROR));
        org.junit.Assert.assertNotNull(builder14);
        org.junit.Assert.assertNotNull(builder15);
        org.junit.Assert.assertNotNull(defaults16);
        org.junit.Assert.assertNotNull(builder17);
        org.junit.Assert.assertNotNull(defaults18);
        org.junit.Assert.assertNull(filenameFilter21);
        org.junit.Assert.assertTrue("'" + licenseFilter22 + "' != '" + org.apache.rat.license.LicenseSetFactory.LicenseFilter.all + "'", licenseFilter22.equals(org.apache.rat.license.LicenseSetFactory.LicenseFilter.all));
        org.junit.Assert.assertNotNull(iLicenseSet23);
        org.junit.Assert.assertTrue("'" + addLicenseHeaders24 + "' != '" + org.apache.rat.config.AddLicenseHeaders.FALSE + "'", addLicenseHeaders24.equals(org.apache.rat.config.AddLicenseHeaders.FALSE));
        org.junit.Assert.assertNull(claimStatistic28);
        org.junit.Assert.assertTrue("'" + licenseFilter29 + "' != '" + org.apache.rat.license.LicenseSetFactory.LicenseFilter.all + "'", licenseFilter29.equals(org.apache.rat.license.LicenseSetFactory.LicenseFilter.all));
        org.junit.Assert.assertNull(filenameFilter34);
        org.junit.Assert.assertTrue("'" + licenseFilter35 + "' != '" + org.apache.rat.license.LicenseSetFactory.LicenseFilter.all + "'", licenseFilter35.equals(org.apache.rat.license.LicenseSetFactory.LicenseFilter.all));
        org.junit.Assert.assertNotNull(iLicenseSet36);
        org.junit.Assert.assertTrue("'" + addLicenseHeaders37 + "' != '" + org.apache.rat.config.AddLicenseHeaders.FALSE + "'", addLicenseHeaders37.equals(org.apache.rat.config.AddLicenseHeaders.FALSE));
        org.junit.Assert.assertNull(claimStatistic41);
        org.junit.Assert.assertTrue("'" + licenseFilter42 + "' != '" + org.apache.rat.license.LicenseSetFactory.LicenseFilter.all + "'", licenseFilter42.equals(org.apache.rat.license.LicenseSetFactory.LicenseFilter.all));
        org.junit.Assert.assertNotNull(iLicenseFamilySet45);
        org.junit.Assert.assertNotNull(iLicenseSet46);
        org.junit.Assert.assertNotNull(iLicenseFamilySet47);
    }

    @Test
    public void test13942() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest27.test13942");
        org.apache.rat.analysis.license.FullTextMatchingLicense fullTextMatchingLicense0 = new org.apache.rat.analysis.license.FullTextMatchingLicense();
        fullTextMatchingLicense0.setLicenseFamilyName("hi!");
        java.lang.String str3 = fullTextMatchingLicense0.getLicenseFamilyCategory();
        java.lang.String str4 = fullTextMatchingLicense0.getLicenseFamilyName();
        fullTextMatchingLicense0.setFullText("AnyBuilder:\nAllBuilder:");
        java.lang.String str7 = fullTextMatchingLicense0.getLicenseFamilyName();
        java.lang.String str8 = fullTextMatchingLicense0.getLicenseFamilyCategory();
        org.apache.rat.license.ILicense.Builder builder9 = fullTextMatchingLicense0.getLicense();
        fullTextMatchingLicense0.setFullText("336987e8-9ddb-46d8-8c1c-67ab8c91d714");
        fullTextMatchingLicense0.setFullText("fe6be119881745678d33352365bfa7c8");
        java.lang.String str14 = fullTextMatchingLicense0.getLicenseFamilyName();
        org.junit.Assert.assertNull(str3);
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "hi!" + "'", str4, "hi!");
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "hi!" + "'", str7, "hi!");
        org.junit.Assert.assertNull(str8);
        org.junit.Assert.assertNotNull(builder9);
        org.junit.Assert.assertEquals("'" + str14 + "' != '" + "hi!" + "'", str14, "hi!");
    }

    @Test
    public void test13943() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest27.test13943");
        org.apache.rat.Defaults.Builder builder0 = org.apache.rat.Defaults.builder();
        org.apache.rat.Defaults.Builder builder2 = builder0.add("META-DATA#LICENSEFAMILYNAME");
        org.apache.rat.Defaults.Builder builder4 = builder0.remove("Copyright Builder: s:null e:null o:null");
        org.apache.rat.Defaults.Builder builder6 = builder0.add("COMMON DEVELOPMENT AND DISTRIBUTION LICENSE Version 1.0");
        org.apache.rat.Defaults.Builder builder8 = builder6.add("Datum [ name ='http://org/apache/rat/meta-data#LicenseFamilyName',value ='????? ']");
        org.apache.rat.Defaults.Builder builder9 = builder6.noDefault();
        java.io.File file10 = null;
        // The following exception was thrown during execution in test generation
        try {
            org.apache.rat.Defaults.Builder builder11 = builder6.remove(file10);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(builder0);
        org.junit.Assert.assertNotNull(builder2);
        org.junit.Assert.assertNotNull(builder4);
        org.junit.Assert.assertNotNull(builder6);
        org.junit.Assert.assertNotNull(builder8);
        org.junit.Assert.assertNotNull(builder9);
    }

    @Test
    public void test13944() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest27.test13944");
        org.apache.rat.utils.Log log0 = null;
        org.apache.rat.ReportConfiguration reportConfiguration1 = new org.apache.rat.ReportConfiguration(log0);
        org.apache.rat.report.claim.ClaimStatistic claimStatistic2 = org.apache.rat.Reporter.report(reportConfiguration1);
        org.apache.commons.io.function.IOSupplier<java.io.OutputStream> outputStreamIOSupplier3 = reportConfiguration1.getOutput();
        org.apache.rat.license.ILicense iLicense4 = null;
        reportConfiguration1.addLicense(iLicense4);
        reportConfiguration1.setCopyrightMessage("Copyright Builder: s:null e:null o:null");
        org.apache.rat.utils.Log log8 = null;
        org.apache.rat.ReportConfiguration reportConfiguration9 = new org.apache.rat.ReportConfiguration(log8);
        org.apache.rat.report.claim.ClaimStatistic claimStatistic10 = org.apache.rat.Reporter.report(reportConfiguration9);
        org.apache.rat.utils.Log log11 = null;
        org.apache.rat.ReportConfiguration reportConfiguration12 = new org.apache.rat.ReportConfiguration(log11);
        org.apache.rat.report.claim.ClaimStatistic claimStatistic13 = org.apache.rat.Reporter.report(reportConfiguration12);
        org.apache.rat.utils.ReportingSet.Options options14 = org.apache.rat.utils.ReportingSet.Options.OVERWRITE;
        reportConfiguration12.licenseDuplicateOption(options14);
        reportConfiguration9.familyDuplicateOption(options14);
        org.apache.commons.io.function.IOSupplier<java.io.PrintWriter> printWriterIOSupplier17 = reportConfiguration9.getWriter();
        boolean boolean18 = reportConfiguration9.isAddingLicensesForced();
        org.apache.rat.utils.Log log19 = null;
        org.apache.rat.ReportConfiguration reportConfiguration20 = new org.apache.rat.ReportConfiguration(log19);
        reportConfiguration20.addApprovedLicenseCategory(".cvsignore");
        org.apache.rat.utils.Log.Level level23 = org.apache.rat.utils.Log.Level.ERROR;
        reportConfiguration20.logFamilyCollisions(level23);
        reportConfiguration9.logLicenseCollisions(level23);
        org.apache.rat.utils.Log log26 = null;
        org.apache.rat.ReportConfiguration reportConfiguration27 = new org.apache.rat.ReportConfiguration(log26);
        java.io.FilenameFilter filenameFilter28 = reportConfiguration27.getInputFileFilter();
        org.apache.rat.license.LicenseSetFactory.LicenseFilter licenseFilter29 = org.apache.rat.license.LicenseSetFactory.LicenseFilter.all;
        java.util.SortedSet<org.apache.rat.license.ILicense> iLicenseSet30 = reportConfiguration27.getLicenses(licenseFilter29);
        org.apache.rat.config.AddLicenseHeaders addLicenseHeaders31 = org.apache.rat.config.AddLicenseHeaders.FALSE;
        reportConfiguration27.setAddLicenseHeaders(addLicenseHeaders31);
        org.apache.rat.utils.Log log33 = null;
        org.apache.rat.ReportConfiguration reportConfiguration34 = new org.apache.rat.ReportConfiguration(log33);
        org.apache.rat.report.claim.ClaimStatistic claimStatistic35 = org.apache.rat.Reporter.report(reportConfiguration34);
        org.apache.rat.license.LicenseSetFactory.LicenseFilter licenseFilter36 = org.apache.rat.license.LicenseSetFactory.LicenseFilter.all;
        org.apache.rat.Reporter.listLicenses(reportConfiguration34, licenseFilter36);
        org.apache.rat.Reporter.listLicenses(reportConfiguration27, licenseFilter36);
        org.apache.rat.config.AddLicenseHeaders addLicenseHeaders39 = org.apache.rat.config.AddLicenseHeaders.FORCED;
        reportConfiguration27.setAddLicenseHeaders(addLicenseHeaders39);
        reportConfiguration9.setAddLicenseHeaders(addLicenseHeaders39);
        reportConfiguration1.setAddLicenseHeaders(addLicenseHeaders39);
        java.io.FilenameFilter filenameFilter43 = reportConfiguration1.getInputFileFilter();
        java.lang.String[] strArray49 = new java.lang.String[] { "http://org/apache/rat/meta-data#LicenseFamilyCategory", "Datum [ name ='http://org/apache/rat/meta-data#LicenseFamilyCategory',value ='GPL1  ']", "MANIFEST.MF", "AllBuilder:", "The MIT License" };
        org.apache.rat.utils.ReportingSet<java.lang.String> strSet50 = new org.apache.rat.utils.ReportingSet<java.lang.String>();
        boolean boolean51 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strSet50, strArray49);
        boolean boolean53 = strSet50.addIfNotPresent("http://org/apache/rat/meta-data#LicenseFamilyName");
        boolean boolean55 = strSet50.addIfNotPresent("ef7a8b13-64c3-4510-bb0c-dbf208e1e73f");
        java.util.stream.Stream<java.lang.String> strStream56 = strSet50.stream();
        org.apache.rat.utils.DefaultLog defaultLog57 = org.apache.rat.utils.DefaultLog.INSTANCE;
        org.apache.rat.utils.Log log58 = null;
        org.apache.rat.ReportConfiguration reportConfiguration59 = new org.apache.rat.ReportConfiguration(log58);
        reportConfiguration59.addApprovedLicenseCategory(".cvsignore");
        org.apache.rat.utils.Log.Level level62 = org.apache.rat.utils.Log.Level.ERROR;
        reportConfiguration59.logFamilyCollisions(level62);
        defaultLog57.setLevel(level62);
        org.apache.rat.utils.ReportingSet<java.lang.String> strSet65 = strSet50.setLogLevel(level62);
        org.apache.rat.utils.ReportingSet<java.lang.String> strSet67 = strSet50.headSet("d4148d3a-edbc-4672-b347-0fa619553f91");
        strSet67.clear();
        reportConfiguration1.addApprovedLicenseCategories((java.util.Collection<java.lang.String>) strSet67);
        org.apache.commons.io.filefilter.IOFileFilter iOFileFilter70 = reportConfiguration1.getDirectoryFilter();
        boolean boolean71 = reportConfiguration1.isStyleReport();
        org.junit.Assert.assertNull(claimStatistic2);
        org.junit.Assert.assertNotNull(outputStreamIOSupplier3);
        org.junit.Assert.assertNull(claimStatistic10);
        org.junit.Assert.assertNull(claimStatistic13);
        org.junit.Assert.assertTrue("'" + options14 + "' != '" + org.apache.rat.utils.ReportingSet.Options.OVERWRITE + "'", options14.equals(org.apache.rat.utils.ReportingSet.Options.OVERWRITE));
        org.junit.Assert.assertNotNull(printWriterIOSupplier17);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + false + "'", boolean18 == false);
        org.junit.Assert.assertTrue("'" + level23 + "' != '" + org.apache.rat.utils.Log.Level.ERROR + "'", level23.equals(org.apache.rat.utils.Log.Level.ERROR));
        org.junit.Assert.assertNull(filenameFilter28);
        org.junit.Assert.assertTrue("'" + licenseFilter29 + "' != '" + org.apache.rat.license.LicenseSetFactory.LicenseFilter.all + "'", licenseFilter29.equals(org.apache.rat.license.LicenseSetFactory.LicenseFilter.all));
        org.junit.Assert.assertNotNull(iLicenseSet30);
        org.junit.Assert.assertTrue("'" + addLicenseHeaders31 + "' != '" + org.apache.rat.config.AddLicenseHeaders.FALSE + "'", addLicenseHeaders31.equals(org.apache.rat.config.AddLicenseHeaders.FALSE));
        org.junit.Assert.assertNull(claimStatistic35);
        org.junit.Assert.assertTrue("'" + licenseFilter36 + "' != '" + org.apache.rat.license.LicenseSetFactory.LicenseFilter.all + "'", licenseFilter36.equals(org.apache.rat.license.LicenseSetFactory.LicenseFilter.all));
        org.junit.Assert.assertTrue("'" + addLicenseHeaders39 + "' != '" + org.apache.rat.config.AddLicenseHeaders.FORCED + "'", addLicenseHeaders39.equals(org.apache.rat.config.AddLicenseHeaders.FORCED));
        org.junit.Assert.assertNull(filenameFilter43);
        org.junit.Assert.assertNotNull(strArray49);
        org.junit.Assert.assertTrue("'" + boolean51 + "' != '" + true + "'", boolean51 == true);
        org.junit.Assert.assertTrue("'" + boolean53 + "' != '" + true + "'", boolean53 == true);
        org.junit.Assert.assertTrue("'" + boolean55 + "' != '" + true + "'", boolean55 == true);
        org.junit.Assert.assertNotNull(strStream56);
        org.junit.Assert.assertNotNull(defaultLog57);
        org.junit.Assert.assertTrue("'" + level62 + "' != '" + org.apache.rat.utils.Log.Level.ERROR + "'", level62.equals(org.apache.rat.utils.Log.Level.ERROR));
        org.junit.Assert.assertNotNull(strSet65);
        org.junit.Assert.assertNotNull(strSet67);
        org.junit.Assert.assertNotNull(iOFileFilter70);
        org.junit.Assert.assertTrue("'" + boolean71 + "' != '" + true + "'", boolean71 == true);
    }

    @Test
    public void test13945() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest27.test13945");
        org.apache.rat.analysis.matchers.FullTextMatcher fullTextMatcher1 = new org.apache.rat.analysis.matchers.FullTextMatcher("Copyright Builder: s:null e:null o:null");
        org.apache.rat.analysis.IHeaderMatcher.State state3 = fullTextMatcher1.matches("f false");
        fullTextMatcher1.reset();
        org.apache.rat.analysis.IHeaderMatcher.State state6 = fullTextMatcher1.matches("89426113-1da8-4591-9c20-8025b6ece33d");
        fullTextMatcher1.reset();
        fullTextMatcher1.reset();
        fullTextMatcher1.reset();
        org.junit.Assert.assertTrue("'" + state3 + "' != '" + org.apache.rat.analysis.IHeaderMatcher.State.i + "'", state3.equals(org.apache.rat.analysis.IHeaderMatcher.State.i));
        org.junit.Assert.assertTrue("'" + state6 + "' != '" + org.apache.rat.analysis.IHeaderMatcher.State.i + "'", state6.equals(org.apache.rat.analysis.IHeaderMatcher.State.i));
    }

    @Test
    public void test13946() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest27.test13946");
        org.apache.rat.license.ILicense.Builder builder0 = org.apache.rat.license.ILicense.builder();
        org.apache.rat.license.ILicense.Builder builder2 = builder0.setLicenseFamilyCategory("");
        org.apache.rat.license.ILicense.Builder builder4 = builder2.setDerivedFrom("GEN  ");
        org.apache.rat.license.ILicense.Builder builder6 = builder4.setId("i indeterminent");
        org.apache.rat.license.ILicense.Builder builder8 = builder4.setId("a8ad4");
        org.apache.rat.configuration.builders.SpdxBuilder spdxBuilder9 = org.apache.rat.analysis.IHeaderMatcher.Builder.spdx();
        java.lang.String str10 = spdxBuilder9.toString();
        org.apache.rat.configuration.builders.SpdxBuilder spdxBuilder12 = spdxBuilder9.setName("ef7a8b13-64c3-4510-bb0c-dbf208e1e73f");
        java.lang.String str13 = spdxBuilder12.toString();
        org.apache.rat.configuration.builders.SpdxBuilder spdxBuilder15 = spdxBuilder12.setName("9d334763-6150-4fa3-86d4-32f09aebbaad");
        org.apache.rat.license.ILicense.Builder builder16 = builder4.setMatcher((org.apache.rat.analysis.IHeaderMatcher.Builder) spdxBuilder15);
        org.apache.rat.analysis.IHeaderMatcher iHeaderMatcher17 = spdxBuilder15.build();
        java.lang.String str18 = spdxBuilder15.toString();
        org.junit.Assert.assertNotNull(builder0);
        org.junit.Assert.assertNotNull(builder2);
        org.junit.Assert.assertNotNull(builder4);
        org.junit.Assert.assertNotNull(builder6);
        org.junit.Assert.assertNotNull(builder8);
        org.junit.Assert.assertNotNull(spdxBuilder9);
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "SpdxBuilder: null" + "'", str10, "SpdxBuilder: null");
        org.junit.Assert.assertNotNull(spdxBuilder12);
        org.junit.Assert.assertEquals("'" + str13 + "' != '" + "SpdxBuilder: ef7a8b13-64c3-4510-bb0c-dbf208e1e73f" + "'", str13, "SpdxBuilder: ef7a8b13-64c3-4510-bb0c-dbf208e1e73f");
        org.junit.Assert.assertNotNull(spdxBuilder15);
        org.junit.Assert.assertNotNull(builder16);
        org.junit.Assert.assertNotNull(iHeaderMatcher17);
        org.junit.Assert.assertEquals("'" + str18 + "' != '" + "SpdxBuilder: 9d334763-6150-4fa3-86d4-32f09aebbaad" + "'", str18, "SpdxBuilder: 9d334763-6150-4fa3-86d4-32f09aebbaad");
    }

    @Test
    public void test13947() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest27.test13947");
        org.apache.rat.configuration.builders.CopyrightBuilder copyrightBuilder0 = org.apache.rat.analysis.IHeaderMatcher.Builder.copyright();
        java.lang.String str1 = copyrightBuilder0.toString();
        org.apache.rat.configuration.builders.CopyrightBuilder copyrightBuilder3 = copyrightBuilder0.setStart("archive");
        java.lang.String str4 = copyrightBuilder0.toString();
        org.apache.rat.configuration.builders.AbstractBuilder abstractBuilder6 = copyrightBuilder0.setId("255ef7d8-e270-4908-9de7-bebc7df6eb88");
        org.apache.rat.configuration.builders.CopyrightBuilder copyrightBuilder8 = copyrightBuilder0.setOwner("ffa6f6cf-d0e9-457f-aa74-6d159e7c6009");
        org.junit.Assert.assertNotNull(copyrightBuilder0);
        org.junit.Assert.assertEquals("'" + str1 + "' != '" + "Copyright Builder: s:null e:null o:null" + "'", str1, "Copyright Builder: s:null e:null o:null");
        org.junit.Assert.assertNotNull(copyrightBuilder3);
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "Copyright Builder: s:archive e:null o:null" + "'", str4, "Copyright Builder: s:archive e:null o:null");
        org.junit.Assert.assertNotNull(abstractBuilder6);
        org.junit.Assert.assertNotNull(copyrightBuilder8);
    }

    @Test
    public void test13948() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest27.test13948");
        org.apache.rat.api.MetaData metaData0 = new org.apache.rat.api.MetaData();
        java.lang.String str2 = metaData0.value("COMMON DEVELOPMENT AND DISTRIBUTION LICENSE Version 1.0");
        org.apache.rat.api.MetaData.Datum datum4 = metaData0.get("f false");
        org.apache.rat.api.MetaData.Datum datum5 = org.apache.rat.api.MetaData.RAT_LICENSE_FAMILY_NAME_DATUM_GPL_VERSION_3;
        metaData0.set(datum5);
        org.apache.rat.api.MetaData metaData7 = new org.apache.rat.api.MetaData();
        java.lang.String str9 = metaData7.value("COMMON DEVELOPMENT AND DISTRIBUTION LICENSE Version 1.0");
        java.lang.String str11 = metaData7.value("W3C Document Copyright");
        boolean boolean13 = metaData7.clear("hi!");
        java.lang.String str15 = metaData7.value("true");
        org.apache.rat.api.MetaData.Datum datum17 = metaData7.get("GNU General Public License, version 1");
        org.apache.rat.api.MetaData.Datum datum18 = org.apache.rat.api.MetaData.RAT_LICENSE_FAMILY_CATEGORY_DATUM_MIT;
        java.lang.String str19 = datum18.getName();
        metaData7.set(datum18);
        java.util.Collection<org.apache.rat.api.MetaData.Datum> datumCollection21 = metaData7.getData();
        java.lang.String str23 = metaData7.value("http://org/apache/rat/meta-data#FileCategory");
        org.apache.rat.api.MetaData.Datum datum24 = org.apache.rat.api.MetaData.RAT_APPROVED_LICENSE_DATIM_FALSE;
        java.lang.String str25 = datum24.toString();
        java.lang.String str26 = datum24.getName();
        metaData7.add(datum24);
        metaData0.set(datum24);
        boolean boolean30 = metaData0.clear("491b6ccf-4ab4-4414-ac34-a9dc2423c7de");
        org.junit.Assert.assertNull(str2);
        org.junit.Assert.assertNull(datum4);
        org.junit.Assert.assertNotNull(datum5);
        org.junit.Assert.assertNull(str9);
        org.junit.Assert.assertNull(str11);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
        org.junit.Assert.assertNull(str15);
        org.junit.Assert.assertNull(datum17);
        org.junit.Assert.assertNotNull(datum18);
        org.junit.Assert.assertEquals("'" + str19 + "' != '" + "http://org/apache/rat/meta-data#LicenseFamilyCategory" + "'", str19, "http://org/apache/rat/meta-data#LicenseFamilyCategory");
        org.junit.Assert.assertNotNull(datumCollection21);
        org.junit.Assert.assertNull(str23);
        org.junit.Assert.assertNotNull(datum24);
        org.junit.Assert.assertEquals("'" + str25 + "' != '" + "Datum [ name ='http://org/apache/rat/meta-data#ApprovedLicense',value ='false ']" + "'", str25, "Datum [ name ='http://org/apache/rat/meta-data#ApprovedLicense',value ='false ']");
        org.junit.Assert.assertEquals("'" + str26 + "' != '" + "http://org/apache/rat/meta-data#ApprovedLicense" + "'", str26, "http://org/apache/rat/meta-data#ApprovedLicense");
        org.junit.Assert.assertTrue("'" + boolean30 + "' != '" + false + "'", boolean30 == false);
    }

    @Test
    public void test13949() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest27.test13949");
        org.apache.rat.utils.Log log1 = null;
        org.apache.rat.ReportConfiguration reportConfiguration2 = new org.apache.rat.ReportConfiguration(log1);
        org.apache.rat.report.claim.ClaimStatistic claimStatistic3 = org.apache.rat.Reporter.report(reportConfiguration2);
        org.apache.rat.utils.Log log4 = null;
        org.apache.rat.ReportConfiguration reportConfiguration5 = new org.apache.rat.ReportConfiguration(log4);
        java.io.FilenameFilter filenameFilter6 = reportConfiguration5.getInputFileFilter();
        org.apache.rat.config.AddLicenseHeaders addLicenseHeaders7 = org.apache.rat.config.AddLicenseHeaders.TRUE;
        reportConfiguration5.setAddLicenseHeaders(addLicenseHeaders7);
        reportConfiguration2.setAddLicenseHeaders(addLicenseHeaders7);
        org.apache.rat.license.ILicenseFamilyBuilder iLicenseFamilyBuilder10 = new org.apache.rat.license.ILicenseFamilyBuilder();
        org.apache.rat.license.ILicenseFamily.Builder builder12 = iLicenseFamilyBuilder10.setLicenseFamilyCategory("Modified BSD License");
        org.apache.rat.license.ILicenseFamily.Builder builder14 = iLicenseFamilyBuilder10.setLicenseFamilyName("AllBuilder:\nCopyright Builder: s:null e:.cvsignore o:3c840dc2-bef0-42b5-b26c-35a568d53a24");
        reportConfiguration2.addFamily((org.apache.rat.license.ILicenseFamily.Builder) iLicenseFamilyBuilder10);
        reportConfiguration2.removeApprovedLicenseCategory("Datum");
        java.lang.String str18 = reportConfiguration2.getCopyrightMessage();
        org.apache.rat.utils.Log log19 = null;
        org.apache.rat.ReportConfiguration reportConfiguration20 = new org.apache.rat.ReportConfiguration(log19);
        org.apache.rat.report.claim.ClaimStatistic claimStatistic21 = org.apache.rat.Reporter.report(reportConfiguration20);
        org.apache.rat.license.ILicense[] iLicenseArray22 = new org.apache.rat.license.ILicense[] {};
        java.util.TreeSet<org.apache.rat.license.ILicense> iLicenseSet23 = new java.util.TreeSet<org.apache.rat.license.ILicense>();
        boolean boolean24 = java.util.Collections.addAll((java.util.Collection<org.apache.rat.license.ILicense>) iLicenseSet23, iLicenseArray22);
        java.lang.String[] strArray37 = new java.lang.String[] { "GPL2 ", "GPL1 ", "notice", "http://org/apache/rat/meta-data#LicenseFamilyName", "notice", "GPL2 ", "http://org/apache/rat/meta-data#LicenseFamilyName", "", "GPL2 ", "", "GPL1 ", "hi!" };
        java.util.ArrayList<java.lang.String> strList38 = new java.util.ArrayList<java.lang.String>();
        boolean boolean39 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strList38, strArray37);
        org.apache.rat.license.LicenseSetFactory licenseSetFactory40 = new org.apache.rat.license.LicenseSetFactory((java.util.SortedSet<org.apache.rat.license.ILicense>) iLicenseSet23, (java.util.Collection<java.lang.String>) strList38);
        org.apache.rat.utils.Log log41 = null;
        org.apache.rat.ReportConfiguration reportConfiguration42 = new org.apache.rat.ReportConfiguration(log41);
        java.io.FilenameFilter filenameFilter43 = reportConfiguration42.getInputFileFilter();
        org.apache.rat.license.LicenseSetFactory.LicenseFilter licenseFilter44 = org.apache.rat.license.LicenseSetFactory.LicenseFilter.all;
        java.util.SortedSet<org.apache.rat.license.ILicense> iLicenseSet45 = reportConfiguration42.getLicenses(licenseFilter44);
        org.apache.rat.config.AddLicenseHeaders addLicenseHeaders46 = org.apache.rat.config.AddLicenseHeaders.FALSE;
        reportConfiguration42.setAddLicenseHeaders(addLicenseHeaders46);
        org.apache.rat.utils.Log log48 = null;
        org.apache.rat.ReportConfiguration reportConfiguration49 = new org.apache.rat.ReportConfiguration(log48);
        org.apache.rat.report.claim.ClaimStatistic claimStatistic50 = org.apache.rat.Reporter.report(reportConfiguration49);
        org.apache.rat.license.LicenseSetFactory.LicenseFilter licenseFilter51 = org.apache.rat.license.LicenseSetFactory.LicenseFilter.all;
        org.apache.rat.Reporter.listLicenses(reportConfiguration49, licenseFilter51);
        org.apache.rat.Reporter.listLicenses(reportConfiguration42, licenseFilter51);
        org.apache.rat.utils.Log log54 = null;
        org.apache.rat.ReportConfiguration reportConfiguration55 = new org.apache.rat.ReportConfiguration(log54);
        java.io.FilenameFilter filenameFilter56 = reportConfiguration55.getInputFileFilter();
        org.apache.rat.license.LicenseSetFactory.LicenseFilter licenseFilter57 = org.apache.rat.license.LicenseSetFactory.LicenseFilter.all;
        java.util.SortedSet<org.apache.rat.license.ILicense> iLicenseSet58 = reportConfiguration55.getLicenses(licenseFilter57);
        org.apache.rat.config.AddLicenseHeaders addLicenseHeaders59 = org.apache.rat.config.AddLicenseHeaders.FALSE;
        reportConfiguration55.setAddLicenseHeaders(addLicenseHeaders59);
        org.apache.rat.utils.Log log61 = null;
        org.apache.rat.ReportConfiguration reportConfiguration62 = new org.apache.rat.ReportConfiguration(log61);
        org.apache.rat.report.claim.ClaimStatistic claimStatistic63 = org.apache.rat.Reporter.report(reportConfiguration62);
        org.apache.rat.license.LicenseSetFactory.LicenseFilter licenseFilter64 = org.apache.rat.license.LicenseSetFactory.LicenseFilter.all;
        org.apache.rat.Reporter.listLicenses(reportConfiguration62, licenseFilter64);
        org.apache.rat.Reporter.listLicenses(reportConfiguration55, licenseFilter64);
        org.apache.rat.Reporter.listLicenses(reportConfiguration42, licenseFilter64);
        java.util.SortedSet<org.apache.rat.license.ILicense> iLicenseSet68 = licenseSetFactory40.getLicenses(licenseFilter64);
        reportConfiguration20.addLicensesIfNotPresent((java.util.Collection<org.apache.rat.license.ILicense>) iLicenseSet68);
        reportConfiguration2.addLicensesIfNotPresent((java.util.Collection<org.apache.rat.license.ILicense>) iLicenseSet68);
        org.apache.rat.license.ILicense iLicense71 = org.apache.rat.license.LicenseSetFactory.search("GNU General Public License, version 1", iLicenseSet68);
        org.junit.Assert.assertNull(claimStatistic3);
        org.junit.Assert.assertNull(filenameFilter6);
        org.junit.Assert.assertTrue("'" + addLicenseHeaders7 + "' != '" + org.apache.rat.config.AddLicenseHeaders.TRUE + "'", addLicenseHeaders7.equals(org.apache.rat.config.AddLicenseHeaders.TRUE));
        org.junit.Assert.assertNotNull(builder12);
        org.junit.Assert.assertNotNull(builder14);
        org.junit.Assert.assertNull(str18);
        org.junit.Assert.assertNull(claimStatistic21);
        org.junit.Assert.assertNotNull(iLicenseArray22);
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + false + "'", boolean24 == false);
        org.junit.Assert.assertNotNull(strArray37);
        org.junit.Assert.assertTrue("'" + boolean39 + "' != '" + true + "'", boolean39 == true);
        org.junit.Assert.assertNull(filenameFilter43);
        org.junit.Assert.assertTrue("'" + licenseFilter44 + "' != '" + org.apache.rat.license.LicenseSetFactory.LicenseFilter.all + "'", licenseFilter44.equals(org.apache.rat.license.LicenseSetFactory.LicenseFilter.all));
        org.junit.Assert.assertNotNull(iLicenseSet45);
        org.junit.Assert.assertTrue("'" + addLicenseHeaders46 + "' != '" + org.apache.rat.config.AddLicenseHeaders.FALSE + "'", addLicenseHeaders46.equals(org.apache.rat.config.AddLicenseHeaders.FALSE));
        org.junit.Assert.assertNull(claimStatistic50);
        org.junit.Assert.assertTrue("'" + licenseFilter51 + "' != '" + org.apache.rat.license.LicenseSetFactory.LicenseFilter.all + "'", licenseFilter51.equals(org.apache.rat.license.LicenseSetFactory.LicenseFilter.all));
        org.junit.Assert.assertNull(filenameFilter56);
        org.junit.Assert.assertTrue("'" + licenseFilter57 + "' != '" + org.apache.rat.license.LicenseSetFactory.LicenseFilter.all + "'", licenseFilter57.equals(org.apache.rat.license.LicenseSetFactory.LicenseFilter.all));
        org.junit.Assert.assertNotNull(iLicenseSet58);
        org.junit.Assert.assertTrue("'" + addLicenseHeaders59 + "' != '" + org.apache.rat.config.AddLicenseHeaders.FALSE + "'", addLicenseHeaders59.equals(org.apache.rat.config.AddLicenseHeaders.FALSE));
        org.junit.Assert.assertNull(claimStatistic63);
        org.junit.Assert.assertTrue("'" + licenseFilter64 + "' != '" + org.apache.rat.license.LicenseSetFactory.LicenseFilter.all + "'", licenseFilter64.equals(org.apache.rat.license.LicenseSetFactory.LicenseFilter.all));
        org.junit.Assert.assertNotNull(iLicenseSet68);
        org.junit.Assert.assertNull(iLicense71);
    }

    @Test
    public void test13950() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest27.test13950");
        boolean boolean1 = org.apache.rat.document.impl.guesser.BinaryGuesser.isKeystore("43809821-803f-4c9d-a102-7e0a5a7fef3d");
        org.junit.Assert.assertTrue("'" + boolean1 + "' != '" + false + "'", boolean1 == false);
    }

    @Test
    public void test13951() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest27.test13951");
        boolean boolean1 = org.apache.rat.document.impl.guesser.BinaryGuesser.isNonBinary("11ca4826-0b63-487f-a0c1-91d3c1a086fd");
        org.junit.Assert.assertTrue("'" + boolean1 + "' != '" + false + "'", boolean1 == false);
    }

    @Test
    public void test13952() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest27.test13952");
        java.util.SortedSet<org.apache.rat.license.ILicenseFamily> iLicenseFamilySet0 = null;
        org.apache.rat.utils.Log log1 = null;
        org.apache.rat.ReportConfiguration reportConfiguration2 = new org.apache.rat.ReportConfiguration(log1);
        org.apache.rat.license.ILicenseFamily[] iLicenseFamilyArray3 = new org.apache.rat.license.ILicenseFamily[] {};
        java.util.ArrayList<org.apache.rat.license.ILicenseFamily> iLicenseFamilyList4 = new java.util.ArrayList<org.apache.rat.license.ILicenseFamily>();
        boolean boolean5 = java.util.Collections.addAll((java.util.Collection<org.apache.rat.license.ILicenseFamily>) iLicenseFamilyList4, iLicenseFamilyArray3);
        reportConfiguration2.addFamilies((java.util.Collection<org.apache.rat.license.ILicenseFamily>) iLicenseFamilyList4);
        org.apache.rat.report.IReportable iReportable7 = null;
        reportConfiguration2.setReportable(iReportable7);
        org.apache.rat.utils.ReportingSet<java.lang.String> strSet9 = new org.apache.rat.utils.ReportingSet<java.lang.String>();
        java.lang.Object[] objArray10 = strSet9.toArray();
        org.apache.rat.utils.Log log11 = null;
        org.apache.rat.ReportConfiguration reportConfiguration12 = new org.apache.rat.ReportConfiguration(log11);
        org.apache.rat.report.claim.ClaimStatistic claimStatistic13 = org.apache.rat.Reporter.report(reportConfiguration12);
        org.apache.rat.utils.Log log14 = null;
        org.apache.rat.ReportConfiguration reportConfiguration15 = new org.apache.rat.ReportConfiguration(log14);
        org.apache.rat.report.claim.ClaimStatistic claimStatistic16 = org.apache.rat.Reporter.report(reportConfiguration15);
        org.apache.rat.utils.ReportingSet.Options options17 = org.apache.rat.utils.ReportingSet.Options.OVERWRITE;
        reportConfiguration15.licenseDuplicateOption(options17);
        reportConfiguration12.familyDuplicateOption(options17);
        org.apache.commons.io.function.IOSupplier<java.io.PrintWriter> printWriterIOSupplier20 = reportConfiguration12.getWriter();
        boolean boolean21 = reportConfiguration12.isAddingLicensesForced();
        org.apache.rat.utils.Log log22 = null;
        org.apache.rat.ReportConfiguration reportConfiguration23 = new org.apache.rat.ReportConfiguration(log22);
        reportConfiguration23.addApprovedLicenseCategory(".cvsignore");
        org.apache.rat.utils.Log.Level level26 = org.apache.rat.utils.Log.Level.ERROR;
        reportConfiguration23.logFamilyCollisions(level26);
        reportConfiguration12.logLicenseCollisions(level26);
        org.apache.rat.utils.ReportingSet<java.lang.String> strSet29 = strSet9.setLogLevel(level26);
        java.util.stream.Stream<java.lang.String> strStream30 = strSet29.stream();
        reportConfiguration2.addApprovedLicenseCategories((java.util.Collection<java.lang.String>) strSet29);
        org.apache.rat.utils.ReportingSet.Options options32 = org.apache.rat.utils.ReportingSet.Options.OVERWRITE;
        org.apache.rat.utils.ReportingSet<java.lang.String> strSet33 = strSet29.setDuplicateOption(options32);
        java.util.Comparator<? super java.lang.String> wildcardComparator34 = strSet33.comparator();
        org.apache.rat.license.LicenseFamilySetFactory licenseFamilySetFactory35 = new org.apache.rat.license.LicenseFamilySetFactory(iLicenseFamilySet0, (java.util.Collection<java.lang.String>) strSet33);
        org.apache.rat.configuration.builders.CopyrightBuilder copyrightBuilder36 = org.apache.rat.analysis.IHeaderMatcher.Builder.copyright();
        org.apache.rat.configuration.builders.CopyrightBuilder copyrightBuilder38 = copyrightBuilder36.setStart("021187d7-27c2-4fd9-bc74-8cc00413ee52");
        org.apache.rat.configuration.builders.AbstractBuilder abstractBuilder40 = copyrightBuilder36.setId("");
        org.apache.rat.configuration.builders.CopyrightBuilder copyrightBuilder42 = copyrightBuilder36.setStart("d5e7a2c2-8d0f-4d83-b61d-957264d7bb7b");
        org.apache.rat.configuration.builders.CopyrightBuilder copyrightBuilder44 = copyrightBuilder42.setOwner("2f88b0fb-cbe0-494f-a237-c14d76af3d76");
        org.apache.rat.analysis.IHeaderMatcher iHeaderMatcher45 = copyrightBuilder44.build();
        boolean boolean46 = strSet33.equals((java.lang.Object) copyrightBuilder44);
        java.util.function.Function<java.lang.String, java.lang.String> strFunction47 = null;
        org.apache.rat.utils.ReportingSet<java.lang.String> strSet48 = strSet33.setMsgFormat(strFunction47);
        org.junit.Assert.assertNotNull(iLicenseFamilyArray3);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertNotNull(objArray10);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray10), "[]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray10), "[]");
        org.junit.Assert.assertNull(claimStatistic13);
        org.junit.Assert.assertNull(claimStatistic16);
        org.junit.Assert.assertTrue("'" + options17 + "' != '" + org.apache.rat.utils.ReportingSet.Options.OVERWRITE + "'", options17.equals(org.apache.rat.utils.ReportingSet.Options.OVERWRITE));
        org.junit.Assert.assertNotNull(printWriterIOSupplier20);
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + false + "'", boolean21 == false);
        org.junit.Assert.assertTrue("'" + level26 + "' != '" + org.apache.rat.utils.Log.Level.ERROR + "'", level26.equals(org.apache.rat.utils.Log.Level.ERROR));
        org.junit.Assert.assertNotNull(strSet29);
        org.junit.Assert.assertNotNull(strStream30);
        org.junit.Assert.assertTrue("'" + options32 + "' != '" + org.apache.rat.utils.ReportingSet.Options.OVERWRITE + "'", options32.equals(org.apache.rat.utils.ReportingSet.Options.OVERWRITE));
        org.junit.Assert.assertNotNull(strSet33);
        org.junit.Assert.assertNull(wildcardComparator34);
        org.junit.Assert.assertNotNull(copyrightBuilder36);
        org.junit.Assert.assertNotNull(copyrightBuilder38);
        org.junit.Assert.assertNotNull(abstractBuilder40);
        org.junit.Assert.assertNotNull(copyrightBuilder42);
        org.junit.Assert.assertNotNull(copyrightBuilder44);
        org.junit.Assert.assertNotNull(iHeaderMatcher45);
        org.junit.Assert.assertTrue("'" + boolean46 + "' != '" + false + "'", boolean46 == false);
        org.junit.Assert.assertNotNull(strSet48);
    }

    @Test
    public void test13953() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest27.test13953");
        org.apache.rat.utils.Log log0 = null;
        org.apache.rat.ReportConfiguration reportConfiguration1 = new org.apache.rat.ReportConfiguration(log0);
        org.apache.rat.utils.ReportingSet.Options options2 = org.apache.rat.utils.ReportingSet.Options.OVERWRITE;
        reportConfiguration1.licenseDuplicateOption(options2);
        org.apache.rat.license.ILicense iLicense4 = null;
        reportConfiguration1.addLicense(iLicense4);
        org.apache.rat.report.IReportable iReportable6 = null;
        reportConfiguration1.setReportable(iReportable6);
        reportConfiguration1.setStyleReport(true);
        java.lang.String[] strArray15 = new java.lang.String[] { "http://org/apache/rat/meta-data#LicenseFamilyCategory", "Datum [ name ='http://org/apache/rat/meta-data#LicenseFamilyCategory',value ='GPL1  ']", "MANIFEST.MF", "AllBuilder:", "The MIT License" };
        org.apache.rat.utils.ReportingSet<java.lang.String> strSet16 = new org.apache.rat.utils.ReportingSet<java.lang.String>();
        boolean boolean17 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strSet16, strArray15);
        boolean boolean19 = strSet16.addIfNotPresent("http://org/apache/rat/meta-data#LicenseFamilyName");
        java.util.Iterator<java.lang.String> strItor20 = strSet16.iterator();
        strSet16.clear();
        strSet16.clear();
        java.util.function.Function<java.lang.String, java.lang.String> strFunction23 = null;
        org.apache.rat.utils.ReportingSet<java.lang.String> strSet24 = strSet16.setMsgFormat(strFunction23);
        org.apache.rat.utils.Log log25 = null;
        org.apache.rat.ReportConfiguration reportConfiguration26 = new org.apache.rat.ReportConfiguration(log25);
        reportConfiguration26.addApprovedLicenseCategory(".cvsignore");
        org.apache.rat.utils.Log.Level level29 = org.apache.rat.utils.Log.Level.ERROR;
        reportConfiguration26.logFamilyCollisions(level29);
        org.apache.commons.io.function.IOSupplier<java.io.OutputStream> outputStreamIOSupplier31 = reportConfiguration26.getOutput();
        org.apache.rat.utils.Log log32 = null;
        org.apache.rat.ReportConfiguration reportConfiguration33 = new org.apache.rat.ReportConfiguration(log32);
        reportConfiguration33.addApprovedLicenseCategory(".cvsignore");
        org.apache.rat.utils.Log log36 = null;
        org.apache.rat.ReportConfiguration reportConfiguration37 = new org.apache.rat.ReportConfiguration(log36);
        java.io.FilenameFilter filenameFilter38 = reportConfiguration37.getInputFileFilter();
        org.apache.rat.license.LicenseSetFactory.LicenseFilter licenseFilter39 = org.apache.rat.license.LicenseSetFactory.LicenseFilter.all;
        java.util.SortedSet<org.apache.rat.license.ILicense> iLicenseSet40 = reportConfiguration37.getLicenses(licenseFilter39);
        reportConfiguration33.addLicensesIfNotPresent((java.util.Collection<org.apache.rat.license.ILicense>) iLicenseSet40);
        java.io.FilenameFilter filenameFilter42 = reportConfiguration33.getInputFileFilter();
        org.apache.rat.utils.Log log43 = null;
        org.apache.rat.ReportConfiguration reportConfiguration44 = new org.apache.rat.ReportConfiguration(log43);
        java.io.FilenameFilter filenameFilter45 = reportConfiguration44.getInputFileFilter();
        org.apache.rat.license.LicenseSetFactory.LicenseFilter licenseFilter46 = org.apache.rat.license.LicenseSetFactory.LicenseFilter.all;
        java.util.SortedSet<org.apache.rat.license.ILicense> iLicenseSet47 = reportConfiguration44.getLicenses(licenseFilter46);
        org.apache.rat.config.AddLicenseHeaders addLicenseHeaders48 = org.apache.rat.config.AddLicenseHeaders.FALSE;
        reportConfiguration44.setAddLicenseHeaders(addLicenseHeaders48);
        org.apache.rat.utils.Log log50 = null;
        org.apache.rat.ReportConfiguration reportConfiguration51 = new org.apache.rat.ReportConfiguration(log50);
        org.apache.rat.report.claim.ClaimStatistic claimStatistic52 = org.apache.rat.Reporter.report(reportConfiguration51);
        org.apache.rat.license.LicenseSetFactory.LicenseFilter licenseFilter53 = org.apache.rat.license.LicenseSetFactory.LicenseFilter.all;
        org.apache.rat.Reporter.listLicenses(reportConfiguration51, licenseFilter53);
        org.apache.rat.Reporter.listLicenses(reportConfiguration44, licenseFilter53);
        org.apache.rat.utils.Log log56 = null;
        org.apache.rat.ReportConfiguration reportConfiguration57 = new org.apache.rat.ReportConfiguration(log56);
        java.io.FilenameFilter filenameFilter58 = reportConfiguration57.getInputFileFilter();
        org.apache.rat.license.LicenseSetFactory.LicenseFilter licenseFilter59 = org.apache.rat.license.LicenseSetFactory.LicenseFilter.all;
        java.util.SortedSet<org.apache.rat.license.ILicense> iLicenseSet60 = reportConfiguration57.getLicenses(licenseFilter59);
        org.apache.rat.config.AddLicenseHeaders addLicenseHeaders61 = org.apache.rat.config.AddLicenseHeaders.FALSE;
        reportConfiguration57.setAddLicenseHeaders(addLicenseHeaders61);
        org.apache.rat.utils.Log log63 = null;
        org.apache.rat.ReportConfiguration reportConfiguration64 = new org.apache.rat.ReportConfiguration(log63);
        org.apache.rat.report.claim.ClaimStatistic claimStatistic65 = org.apache.rat.Reporter.report(reportConfiguration64);
        org.apache.rat.license.LicenseSetFactory.LicenseFilter licenseFilter66 = org.apache.rat.license.LicenseSetFactory.LicenseFilter.all;
        org.apache.rat.Reporter.listLicenses(reportConfiguration64, licenseFilter66);
        org.apache.rat.Reporter.listLicenses(reportConfiguration57, licenseFilter66);
        java.util.SortedSet<org.apache.rat.license.ILicenseFamily> iLicenseFamilySet69 = reportConfiguration44.getLicenseFamilies(licenseFilter66);
        org.apache.rat.Reporter.listLicenseFamilies(reportConfiguration33, licenseFilter66);
        java.util.SortedSet<org.apache.rat.license.ILicenseFamily> iLicenseFamilySet71 = reportConfiguration26.getLicenseFamilies(licenseFilter66);
        java.util.Collection<java.lang.String> strCollection72 = null;
        org.apache.rat.license.LicenseFamilySetFactory licenseFamilySetFactory73 = new org.apache.rat.license.LicenseFamilySetFactory(iLicenseFamilySet71, strCollection72);
        org.apache.rat.policy.DefaultPolicy defaultPolicy74 = new org.apache.rat.policy.DefaultPolicy((java.util.Collection<org.apache.rat.license.ILicenseFamily>) iLicenseFamilySet71);
        org.apache.rat.api.Document document75 = null;
        defaultPolicy74.analyse(document75);
        java.util.SortedSet<org.apache.rat.license.ILicenseFamily> iLicenseFamilySet77 = defaultPolicy74.getApprovedLicenseNames();
        java.util.SortedSet<org.apache.rat.license.ILicenseFamily> iLicenseFamilySet78 = defaultPolicy74.getApprovedLicenseNames();
        boolean boolean79 = strSet16.retainAll((java.util.Collection<org.apache.rat.license.ILicenseFamily>) iLicenseFamilySet78);
        reportConfiguration1.addApprovedLicenseCategories((java.util.Collection<java.lang.String>) strSet16);
        org.junit.Assert.assertTrue("'" + options2 + "' != '" + org.apache.rat.utils.ReportingSet.Options.OVERWRITE + "'", options2.equals(org.apache.rat.utils.ReportingSet.Options.OVERWRITE));
        org.junit.Assert.assertNotNull(strArray15);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + true + "'", boolean17 == true);
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + true + "'", boolean19 == true);
        org.junit.Assert.assertNotNull(strItor20);
        org.junit.Assert.assertNotNull(strSet24);
        org.junit.Assert.assertTrue("'" + level29 + "' != '" + org.apache.rat.utils.Log.Level.ERROR + "'", level29.equals(org.apache.rat.utils.Log.Level.ERROR));
        org.junit.Assert.assertNotNull(outputStreamIOSupplier31);
        org.junit.Assert.assertNull(filenameFilter38);
        org.junit.Assert.assertTrue("'" + licenseFilter39 + "' != '" + org.apache.rat.license.LicenseSetFactory.LicenseFilter.all + "'", licenseFilter39.equals(org.apache.rat.license.LicenseSetFactory.LicenseFilter.all));
        org.junit.Assert.assertNotNull(iLicenseSet40);
        org.junit.Assert.assertNull(filenameFilter42);
        org.junit.Assert.assertNull(filenameFilter45);
        org.junit.Assert.assertTrue("'" + licenseFilter46 + "' != '" + org.apache.rat.license.LicenseSetFactory.LicenseFilter.all + "'", licenseFilter46.equals(org.apache.rat.license.LicenseSetFactory.LicenseFilter.all));
        org.junit.Assert.assertNotNull(iLicenseSet47);
        org.junit.Assert.assertTrue("'" + addLicenseHeaders48 + "' != '" + org.apache.rat.config.AddLicenseHeaders.FALSE + "'", addLicenseHeaders48.equals(org.apache.rat.config.AddLicenseHeaders.FALSE));
        org.junit.Assert.assertNull(claimStatistic52);
        org.junit.Assert.assertTrue("'" + licenseFilter53 + "' != '" + org.apache.rat.license.LicenseSetFactory.LicenseFilter.all + "'", licenseFilter53.equals(org.apache.rat.license.LicenseSetFactory.LicenseFilter.all));
        org.junit.Assert.assertNull(filenameFilter58);
        org.junit.Assert.assertTrue("'" + licenseFilter59 + "' != '" + org.apache.rat.license.LicenseSetFactory.LicenseFilter.all + "'", licenseFilter59.equals(org.apache.rat.license.LicenseSetFactory.LicenseFilter.all));
        org.junit.Assert.assertNotNull(iLicenseSet60);
        org.junit.Assert.assertTrue("'" + addLicenseHeaders61 + "' != '" + org.apache.rat.config.AddLicenseHeaders.FALSE + "'", addLicenseHeaders61.equals(org.apache.rat.config.AddLicenseHeaders.FALSE));
        org.junit.Assert.assertNull(claimStatistic65);
        org.junit.Assert.assertTrue("'" + licenseFilter66 + "' != '" + org.apache.rat.license.LicenseSetFactory.LicenseFilter.all + "'", licenseFilter66.equals(org.apache.rat.license.LicenseSetFactory.LicenseFilter.all));
        org.junit.Assert.assertNotNull(iLicenseFamilySet69);
        org.junit.Assert.assertNotNull(iLicenseFamilySet71);
        org.junit.Assert.assertNotNull(iLicenseFamilySet77);
        org.junit.Assert.assertNotNull(iLicenseFamilySet78);
        org.junit.Assert.assertTrue("'" + boolean79 + "' != '" + false + "'", boolean79 == false);
    }

    @Test
    public void test13954() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest27.test13954");
        org.apache.rat.utils.DefaultLog defaultLog0 = org.apache.rat.utils.DefaultLog.INSTANCE;
        org.apache.rat.license.ILicense.Builder builder1 = org.apache.rat.license.ILicense.builder();
        org.apache.rat.license.ILicense.Builder builder3 = builder1.setLicenseFamilyCategory("");
        org.apache.rat.analysis.matchers.CopyrightMatcher copyrightMatcher7 = new org.apache.rat.analysis.matchers.CopyrightMatcher("", "GPL1 ", "hi!");
        org.apache.rat.analysis.IHeaderMatcher.State state8 = copyrightMatcher7.finalizeState();
        org.apache.rat.license.ILicense.Builder builder9 = builder3.setMatcher((org.apache.rat.analysis.IHeaderMatcher) copyrightMatcher7);
        org.apache.rat.license.ILicense.Builder builder11 = builder9.setLicenseFamilyCategory("");
        defaultLog0.error((java.lang.Object) builder11);
        org.apache.rat.ReportConfiguration reportConfiguration13 = new org.apache.rat.ReportConfiguration((org.apache.rat.utils.Log) defaultLog0);
        org.apache.rat.Defaults.Builder builder14 = org.apache.rat.Defaults.builder();
        org.apache.rat.Defaults defaults15 = builder14.build();
        org.apache.rat.utils.Log log16 = null;
        org.apache.rat.ReportConfiguration reportConfiguration17 = new org.apache.rat.ReportConfiguration(log16);
        java.io.FilenameFilter filenameFilter18 = reportConfiguration17.getInputFileFilter();
        org.apache.rat.license.LicenseSetFactory.LicenseFilter licenseFilter19 = org.apache.rat.license.LicenseSetFactory.LicenseFilter.all;
        java.util.SortedSet<org.apache.rat.license.ILicense> iLicenseSet20 = reportConfiguration17.getLicenses(licenseFilter19);
        org.apache.rat.config.AddLicenseHeaders addLicenseHeaders21 = org.apache.rat.config.AddLicenseHeaders.FALSE;
        reportConfiguration17.setAddLicenseHeaders(addLicenseHeaders21);
        org.apache.rat.utils.Log log23 = null;
        org.apache.rat.ReportConfiguration reportConfiguration24 = new org.apache.rat.ReportConfiguration(log23);
        org.apache.rat.report.claim.ClaimStatistic claimStatistic25 = org.apache.rat.Reporter.report(reportConfiguration24);
        org.apache.rat.license.LicenseSetFactory.LicenseFilter licenseFilter26 = org.apache.rat.license.LicenseSetFactory.LicenseFilter.all;
        org.apache.rat.Reporter.listLicenses(reportConfiguration24, licenseFilter26);
        org.apache.rat.Reporter.listLicenses(reportConfiguration17, licenseFilter26);
        org.apache.rat.utils.Log log29 = null;
        org.apache.rat.ReportConfiguration reportConfiguration30 = new org.apache.rat.ReportConfiguration(log29);
        java.io.FilenameFilter filenameFilter31 = reportConfiguration30.getInputFileFilter();
        org.apache.rat.license.LicenseSetFactory.LicenseFilter licenseFilter32 = org.apache.rat.license.LicenseSetFactory.LicenseFilter.all;
        java.util.SortedSet<org.apache.rat.license.ILicense> iLicenseSet33 = reportConfiguration30.getLicenses(licenseFilter32);
        org.apache.rat.config.AddLicenseHeaders addLicenseHeaders34 = org.apache.rat.config.AddLicenseHeaders.FALSE;
        reportConfiguration30.setAddLicenseHeaders(addLicenseHeaders34);
        org.apache.rat.utils.Log log36 = null;
        org.apache.rat.ReportConfiguration reportConfiguration37 = new org.apache.rat.ReportConfiguration(log36);
        org.apache.rat.report.claim.ClaimStatistic claimStatistic38 = org.apache.rat.Reporter.report(reportConfiguration37);
        org.apache.rat.license.LicenseSetFactory.LicenseFilter licenseFilter39 = org.apache.rat.license.LicenseSetFactory.LicenseFilter.all;
        org.apache.rat.Reporter.listLicenses(reportConfiguration37, licenseFilter39);
        org.apache.rat.Reporter.listLicenses(reportConfiguration30, licenseFilter39);
        java.util.SortedSet<org.apache.rat.license.ILicenseFamily> iLicenseFamilySet42 = reportConfiguration17.getLicenseFamilies(licenseFilter39);
        java.util.SortedSet<org.apache.rat.license.ILicense> iLicenseSet43 = defaults15.getLicenses(licenseFilter39);
        org.apache.rat.utils.ReportingSet<org.apache.rat.license.ILicense> iLicenseSet44 = new org.apache.rat.utils.ReportingSet<org.apache.rat.license.ILicense>(iLicenseSet43);
        org.apache.rat.document.IDocumentAnalyser iDocumentAnalyser45 = org.apache.rat.analysis.DefaultAnalyserFactory.createDefaultAnalyser((org.apache.rat.utils.Log) defaultLog0, (java.util.Collection<org.apache.rat.license.ILicense>) iLicenseSet43);
        org.apache.rat.utils.Log.Level level46 = defaultLog0.getLevel();
        org.apache.rat.utils.Log.Level level47 = defaultLog0.getLevel();
        org.apache.rat.configuration.builders.SpdxBuilder spdxBuilder48 = org.apache.rat.analysis.IHeaderMatcher.Builder.spdx();
        java.lang.String str49 = spdxBuilder48.toString();
        org.apache.rat.configuration.builders.SpdxBuilder spdxBuilder51 = spdxBuilder48.setName("ef7a8b13-64c3-4510-bb0c-dbf208e1e73f");
        org.apache.rat.analysis.IHeaderMatcher iHeaderMatcher52 = spdxBuilder48.build();
        org.apache.rat.analysis.IHeaderMatcher.State state54 = iHeaderMatcher52.matches("http:");
        defaultLog0.error((java.lang.Object) iHeaderMatcher52);
        org.apache.rat.utils.Log.Level level56 = defaultLog0.getLevel();
        org.apache.rat.document.ToNameTransformer toNameTransformer57 = new org.apache.rat.document.ToNameTransformer();
        org.apache.rat.report.claim.ClaimStatistic claimStatistic58 = new org.apache.rat.report.claim.ClaimStatistic();
        claimStatistic58.setNumApproved((int) (short) 10);
        claimStatistic58.setNumUnknown(30);
        java.lang.Object obj63 = toNameTransformer57.transform((java.lang.Object) claimStatistic58);
        int int64 = claimStatistic58.getNumUnknown();
        java.util.Map<java.lang.String, java.lang.Integer> strMap65 = claimStatistic58.getLicenseFileNameMap();
        claimStatistic58.setNumGenerated((int) (short) 100);
        java.lang.Throwable throwable68 = null;
        // The following exception was thrown during execution in test generation
        try {
            defaultLog0.debug((java.lang.Object) claimStatistic58, throwable68);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(defaultLog0);
        org.junit.Assert.assertNotNull(builder1);
        org.junit.Assert.assertNotNull(builder3);
        org.junit.Assert.assertTrue("'" + state8 + "' != '" + org.apache.rat.analysis.IHeaderMatcher.State.f + "'", state8.equals(org.apache.rat.analysis.IHeaderMatcher.State.f));
        org.junit.Assert.assertNotNull(builder9);
        org.junit.Assert.assertNotNull(builder11);
        org.junit.Assert.assertNotNull(builder14);
        org.junit.Assert.assertNotNull(defaults15);
        org.junit.Assert.assertNull(filenameFilter18);
        org.junit.Assert.assertTrue("'" + licenseFilter19 + "' != '" + org.apache.rat.license.LicenseSetFactory.LicenseFilter.all + "'", licenseFilter19.equals(org.apache.rat.license.LicenseSetFactory.LicenseFilter.all));
        org.junit.Assert.assertNotNull(iLicenseSet20);
        org.junit.Assert.assertTrue("'" + addLicenseHeaders21 + "' != '" + org.apache.rat.config.AddLicenseHeaders.FALSE + "'", addLicenseHeaders21.equals(org.apache.rat.config.AddLicenseHeaders.FALSE));
        org.junit.Assert.assertNull(claimStatistic25);
        org.junit.Assert.assertTrue("'" + licenseFilter26 + "' != '" + org.apache.rat.license.LicenseSetFactory.LicenseFilter.all + "'", licenseFilter26.equals(org.apache.rat.license.LicenseSetFactory.LicenseFilter.all));
        org.junit.Assert.assertNull(filenameFilter31);
        org.junit.Assert.assertTrue("'" + licenseFilter32 + "' != '" + org.apache.rat.license.LicenseSetFactory.LicenseFilter.all + "'", licenseFilter32.equals(org.apache.rat.license.LicenseSetFactory.LicenseFilter.all));
        org.junit.Assert.assertNotNull(iLicenseSet33);
        org.junit.Assert.assertTrue("'" + addLicenseHeaders34 + "' != '" + org.apache.rat.config.AddLicenseHeaders.FALSE + "'", addLicenseHeaders34.equals(org.apache.rat.config.AddLicenseHeaders.FALSE));
        org.junit.Assert.assertNull(claimStatistic38);
        org.junit.Assert.assertTrue("'" + licenseFilter39 + "' != '" + org.apache.rat.license.LicenseSetFactory.LicenseFilter.all + "'", licenseFilter39.equals(org.apache.rat.license.LicenseSetFactory.LicenseFilter.all));
        org.junit.Assert.assertNotNull(iLicenseFamilySet42);
        org.junit.Assert.assertNotNull(iLicenseSet43);
        org.junit.Assert.assertNotNull(iDocumentAnalyser45);
        org.junit.Assert.assertTrue("'" + level46 + "' != '" + org.apache.rat.utils.Log.Level.ERROR + "'", level46.equals(org.apache.rat.utils.Log.Level.ERROR));
        org.junit.Assert.assertTrue("'" + level47 + "' != '" + org.apache.rat.utils.Log.Level.ERROR + "'", level47.equals(org.apache.rat.utils.Log.Level.ERROR));
        org.junit.Assert.assertNotNull(spdxBuilder48);
        org.junit.Assert.assertEquals("'" + str49 + "' != '" + "SpdxBuilder: null" + "'", str49, "SpdxBuilder: null");
        org.junit.Assert.assertNotNull(spdxBuilder51);
        org.junit.Assert.assertNotNull(iHeaderMatcher52);
        org.junit.Assert.assertTrue("'" + state54 + "' != '" + org.apache.rat.analysis.IHeaderMatcher.State.i + "'", state54.equals(org.apache.rat.analysis.IHeaderMatcher.State.i));
        org.junit.Assert.assertTrue("'" + level56 + "' != '" + org.apache.rat.utils.Log.Level.ERROR + "'", level56.equals(org.apache.rat.utils.Log.Level.ERROR));
        org.junit.Assert.assertNull(obj63);
        org.junit.Assert.assertTrue("'" + int64 + "' != '" + 30 + "'", int64 == 30);
        org.junit.Assert.assertNull(strMap65);
    }

    @Test
    public void test13955() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest27.test13955");
        org.apache.rat.analysis.license.FullTextMatchingLicense fullTextMatchingLicense0 = new org.apache.rat.analysis.license.FullTextMatchingLicense();
        fullTextMatchingLicense0.setLicenseFamilyName("hi!");
        java.lang.String str3 = fullTextMatchingLicense0.getLicenseFamilyCategory();
        java.lang.String str4 = fullTextMatchingLicense0.getLicenseFamilyCategory();
        java.lang.String str5 = fullTextMatchingLicense0.getNotes();
        java.lang.String str6 = fullTextMatchingLicense0.getLicenseFamilyCategory();
        fullTextMatchingLicense0.setLicenseFamilyName("GEN  ");
        java.lang.String str9 = fullTextMatchingLicense0.getLicenseFamilyName();
        java.lang.String str10 = fullTextMatchingLicense0.getLicenseFamilyName();
        org.junit.Assert.assertNull(str3);
        org.junit.Assert.assertNull(str4);
        org.junit.Assert.assertNull(str5);
        org.junit.Assert.assertNull(str6);
        org.junit.Assert.assertEquals("'" + str9 + "' != '" + "GEN  " + "'", str9, "GEN  ");
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "GEN  " + "'", str10, "GEN  ");
    }

    @Test
    public void test13956() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest27.test13956");
        java.io.File file0 = null;
        java.util.regex.Pattern pattern1 = null;
        org.apache.rat.utils.Log log2 = null;
        org.apache.rat.ReportConfiguration reportConfiguration3 = new org.apache.rat.ReportConfiguration(log2);
        org.apache.commons.io.function.IOSupplier<java.io.OutputStream> outputStreamIOSupplier4 = reportConfiguration3.getOutput();
        org.apache.commons.io.filefilter.IOFileFilter iOFileFilter5 = reportConfiguration3.getDirectoryFilter();
        org.apache.commons.io.filefilter.IOFileFilter iOFileFilter6 = iOFileFilter5.negate();
        java.nio.file.Path path7 = null;
        boolean boolean8 = iOFileFilter6.matches(path7);
        // The following exception was thrown during execution in test generation
        try {
            org.apache.rat.walker.DirectoryWalker directoryWalker9 = new org.apache.rat.walker.DirectoryWalker(file0, pattern1, iOFileFilter6);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(outputStreamIOSupplier4);
        org.junit.Assert.assertNotNull(iOFileFilter5);
        org.junit.Assert.assertNotNull(iOFileFilter6);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + true + "'", boolean8 == true);
    }

    @Test
    public void test13957() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest27.test13957");
        boolean boolean1 = org.apache.rat.document.impl.guesser.BinaryGuesser.isImage("EBC30EB7B3EA4F39BAEA5FEA4FA0278B");
        org.junit.Assert.assertTrue("'" + boolean1 + "' != '" + false + "'", boolean1 == false);
    }

    @Test
    public void test13958() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest27.test13958");
        org.apache.rat.configuration.Format format0 = org.apache.rat.configuration.Format.XML;
        org.apache.rat.configuration.LicenseReader licenseReader1 = format0.licenseReader();
        java.util.SortedSet<org.apache.rat.license.ILicense> iLicenseSet2 = licenseReader1.readLicenses();
        java.lang.String[] strArray8 = new java.lang.String[] { "http://org/apache/rat/meta-data#LicenseFamilyCategory", "Datum [ name ='http://org/apache/rat/meta-data#LicenseFamilyCategory',value ='GPL1  ']", "MANIFEST.MF", "AllBuilder:", "The MIT License" };
        org.apache.rat.utils.ReportingSet<java.lang.String> strSet9 = new org.apache.rat.utils.ReportingSet<java.lang.String>();
        boolean boolean10 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strSet9, strArray8);
        boolean boolean12 = strSet9.addIfNotPresent("http://org/apache/rat/meta-data#LicenseFamilyName");
        boolean boolean14 = strSet9.addIfNotPresent("ef7a8b13-64c3-4510-bb0c-dbf208e1e73f");
        java.util.function.Function<java.lang.String, java.lang.String> strFunction15 = null;
        org.apache.rat.utils.ReportingSet<java.lang.String> strSet16 = strSet9.setMsgFormat(strFunction15);
        boolean boolean17 = strSet9.isEmpty();
        org.apache.rat.license.LicenseSetFactory licenseSetFactory18 = new org.apache.rat.license.LicenseSetFactory(iLicenseSet2, (java.util.Collection<java.lang.String>) strSet9);
        org.apache.rat.api.MetaData.Datum datum19 = org.apache.rat.api.MetaData.RAT_LICENSE_FAMILY_NAME_DATUM_GPL_VERSION_1;
        java.lang.String str20 = datum19.toString();
        boolean boolean21 = strSet9.equals((java.lang.Object) datum19);
        boolean boolean23 = strSet9.addIfNotPresent("46eea23e-d320-45bc-aa7f-844d2e1597ce");
        org.apache.rat.utils.ReportingSet<java.lang.String> strSet25 = strSet9.headSet("notice");
        org.apache.rat.utils.DefaultLog defaultLog26 = org.apache.rat.utils.DefaultLog.INSTANCE;
        org.apache.rat.utils.Log log27 = null;
        org.apache.rat.ReportConfiguration reportConfiguration28 = new org.apache.rat.ReportConfiguration(log27);
        reportConfiguration28.addApprovedLicenseCategory(".cvsignore");
        org.apache.rat.utils.Log.Level level31 = org.apache.rat.utils.Log.Level.ERROR;
        reportConfiguration28.logFamilyCollisions(level31);
        defaultLog26.setLevel(level31);
        org.apache.rat.utils.ReportingSet<java.lang.String> strSet34 = strSet9.setLog((org.apache.rat.utils.Log) defaultLog26);
        org.apache.rat.utils.Log log35 = null;
        org.apache.rat.ReportConfiguration reportConfiguration36 = new org.apache.rat.ReportConfiguration(log35);
        org.apache.rat.license.ILicenseFamily[] iLicenseFamilyArray37 = new org.apache.rat.license.ILicenseFamily[] {};
        java.util.ArrayList<org.apache.rat.license.ILicenseFamily> iLicenseFamilyList38 = new java.util.ArrayList<org.apache.rat.license.ILicenseFamily>();
        boolean boolean39 = java.util.Collections.addAll((java.util.Collection<org.apache.rat.license.ILicenseFamily>) iLicenseFamilyList38, iLicenseFamilyArray37);
        reportConfiguration36.addFamilies((java.util.Collection<org.apache.rat.license.ILicenseFamily>) iLicenseFamilyList38);
        org.apache.rat.report.IReportable iReportable41 = null;
        reportConfiguration36.setReportable(iReportable41);
        org.apache.rat.utils.ReportingSet<java.lang.String> strSet43 = new org.apache.rat.utils.ReportingSet<java.lang.String>();
        java.lang.Object[] objArray44 = strSet43.toArray();
        org.apache.rat.utils.Log log45 = null;
        org.apache.rat.ReportConfiguration reportConfiguration46 = new org.apache.rat.ReportConfiguration(log45);
        org.apache.rat.report.claim.ClaimStatistic claimStatistic47 = org.apache.rat.Reporter.report(reportConfiguration46);
        org.apache.rat.utils.Log log48 = null;
        org.apache.rat.ReportConfiguration reportConfiguration49 = new org.apache.rat.ReportConfiguration(log48);
        org.apache.rat.report.claim.ClaimStatistic claimStatistic50 = org.apache.rat.Reporter.report(reportConfiguration49);
        org.apache.rat.utils.ReportingSet.Options options51 = org.apache.rat.utils.ReportingSet.Options.OVERWRITE;
        reportConfiguration49.licenseDuplicateOption(options51);
        reportConfiguration46.familyDuplicateOption(options51);
        org.apache.commons.io.function.IOSupplier<java.io.PrintWriter> printWriterIOSupplier54 = reportConfiguration46.getWriter();
        boolean boolean55 = reportConfiguration46.isAddingLicensesForced();
        org.apache.rat.utils.Log log56 = null;
        org.apache.rat.ReportConfiguration reportConfiguration57 = new org.apache.rat.ReportConfiguration(log56);
        reportConfiguration57.addApprovedLicenseCategory(".cvsignore");
        org.apache.rat.utils.Log.Level level60 = org.apache.rat.utils.Log.Level.ERROR;
        reportConfiguration57.logFamilyCollisions(level60);
        reportConfiguration46.logLicenseCollisions(level60);
        org.apache.rat.utils.ReportingSet<java.lang.String> strSet63 = strSet43.setLogLevel(level60);
        java.util.stream.Stream<java.lang.String> strStream64 = strSet63.stream();
        reportConfiguration36.addApprovedLicenseCategories((java.util.Collection<java.lang.String>) strSet63);
        org.apache.rat.utils.ReportingSet.Options options66 = org.apache.rat.utils.ReportingSet.Options.OVERWRITE;
        org.apache.rat.utils.ReportingSet<java.lang.String> strSet67 = strSet63.setDuplicateOption(options66);
        org.apache.rat.utils.ReportingSet<java.lang.String> strSet68 = strSet34.setDuplicateOption(options66);
        java.util.Spliterator<java.lang.String> strSpliterator69 = strSet34.spliterator();
        org.junit.Assert.assertTrue("'" + format0 + "' != '" + org.apache.rat.configuration.Format.XML + "'", format0.equals(org.apache.rat.configuration.Format.XML));
        org.junit.Assert.assertNotNull(licenseReader1);
        org.junit.Assert.assertNotNull(iLicenseSet2);
        org.junit.Assert.assertNotNull(strArray8);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + true + "'", boolean10 == true);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + true + "'", boolean12 == true);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + true + "'", boolean14 == true);
        org.junit.Assert.assertNotNull(strSet16);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + false + "'", boolean17 == false);
        org.junit.Assert.assertNotNull(datum19);
        org.junit.Assert.assertEquals("'" + str20 + "' != '" + "Datum [ name ='http://org/apache/rat/meta-data#LicenseFamilyName',value ='GNU General Public License, version 1 ']" + "'", str20, "Datum [ name ='http://org/apache/rat/meta-data#LicenseFamilyName',value ='GNU General Public License, version 1 ']");
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + false + "'", boolean21 == false);
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + true + "'", boolean23 == true);
        org.junit.Assert.assertNotNull(strSet25);
        org.junit.Assert.assertNotNull(defaultLog26);
        org.junit.Assert.assertTrue("'" + level31 + "' != '" + org.apache.rat.utils.Log.Level.ERROR + "'", level31.equals(org.apache.rat.utils.Log.Level.ERROR));
        org.junit.Assert.assertNotNull(strSet34);
        org.junit.Assert.assertNotNull(iLicenseFamilyArray37);
        org.junit.Assert.assertTrue("'" + boolean39 + "' != '" + false + "'", boolean39 == false);
        org.junit.Assert.assertNotNull(objArray44);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray44), "[]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray44), "[]");
        org.junit.Assert.assertNull(claimStatistic47);
        org.junit.Assert.assertNull(claimStatistic50);
        org.junit.Assert.assertTrue("'" + options51 + "' != '" + org.apache.rat.utils.ReportingSet.Options.OVERWRITE + "'", options51.equals(org.apache.rat.utils.ReportingSet.Options.OVERWRITE));
        org.junit.Assert.assertNotNull(printWriterIOSupplier54);
        org.junit.Assert.assertTrue("'" + boolean55 + "' != '" + false + "'", boolean55 == false);
        org.junit.Assert.assertTrue("'" + level60 + "' != '" + org.apache.rat.utils.Log.Level.ERROR + "'", level60.equals(org.apache.rat.utils.Log.Level.ERROR));
        org.junit.Assert.assertNotNull(strSet63);
        org.junit.Assert.assertNotNull(strStream64);
        org.junit.Assert.assertTrue("'" + options66 + "' != '" + org.apache.rat.utils.ReportingSet.Options.OVERWRITE + "'", options66.equals(org.apache.rat.utils.ReportingSet.Options.OVERWRITE));
        org.junit.Assert.assertNotNull(strSet67);
        org.junit.Assert.assertNotNull(strSet68);
        org.junit.Assert.assertNotNull(strSpliterator69);
    }

    @Test
    public void test13959() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest27.test13959");
        org.apache.rat.utils.DefaultLog defaultLog0 = org.apache.rat.utils.DefaultLog.INSTANCE;
        org.apache.rat.license.ILicense.Builder builder1 = org.apache.rat.license.ILicense.builder();
        org.apache.rat.license.ILicense.Builder builder3 = builder1.setLicenseFamilyCategory("");
        org.apache.rat.analysis.matchers.CopyrightMatcher copyrightMatcher7 = new org.apache.rat.analysis.matchers.CopyrightMatcher("", "GPL1 ", "hi!");
        org.apache.rat.analysis.IHeaderMatcher.State state8 = copyrightMatcher7.finalizeState();
        org.apache.rat.license.ILicense.Builder builder9 = builder3.setMatcher((org.apache.rat.analysis.IHeaderMatcher) copyrightMatcher7);
        org.apache.rat.license.ILicense.Builder builder11 = builder9.setLicenseFamilyCategory("");
        defaultLog0.error((java.lang.Object) builder11);
        org.apache.rat.license.ILicense[] iLicenseArray13 = new org.apache.rat.license.ILicense[] {};
        java.util.TreeSet<org.apache.rat.license.ILicense> iLicenseSet14 = new java.util.TreeSet<org.apache.rat.license.ILicense>();
        boolean boolean15 = java.util.Collections.addAll((java.util.Collection<org.apache.rat.license.ILicense>) iLicenseSet14, iLicenseArray13);
        java.lang.String[] strArray28 = new java.lang.String[] { "GPL2 ", "GPL1 ", "notice", "http://org/apache/rat/meta-data#LicenseFamilyName", "notice", "GPL2 ", "http://org/apache/rat/meta-data#LicenseFamilyName", "", "GPL2 ", "", "GPL1 ", "hi!" };
        java.util.ArrayList<java.lang.String> strList29 = new java.util.ArrayList<java.lang.String>();
        boolean boolean30 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strList29, strArray28);
        org.apache.rat.license.LicenseSetFactory licenseSetFactory31 = new org.apache.rat.license.LicenseSetFactory((java.util.SortedSet<org.apache.rat.license.ILicense>) iLicenseSet14, (java.util.Collection<java.lang.String>) strList29);
        org.apache.rat.utils.Log log32 = null;
        org.apache.rat.ReportConfiguration reportConfiguration33 = new org.apache.rat.ReportConfiguration(log32);
        java.io.FilenameFilter filenameFilter34 = reportConfiguration33.getInputFileFilter();
        org.apache.rat.license.LicenseSetFactory.LicenseFilter licenseFilter35 = org.apache.rat.license.LicenseSetFactory.LicenseFilter.all;
        java.util.SortedSet<org.apache.rat.license.ILicense> iLicenseSet36 = reportConfiguration33.getLicenses(licenseFilter35);
        org.apache.rat.config.AddLicenseHeaders addLicenseHeaders37 = org.apache.rat.config.AddLicenseHeaders.FALSE;
        reportConfiguration33.setAddLicenseHeaders(addLicenseHeaders37);
        org.apache.rat.utils.Log log39 = null;
        org.apache.rat.ReportConfiguration reportConfiguration40 = new org.apache.rat.ReportConfiguration(log39);
        org.apache.rat.report.claim.ClaimStatistic claimStatistic41 = org.apache.rat.Reporter.report(reportConfiguration40);
        org.apache.rat.license.LicenseSetFactory.LicenseFilter licenseFilter42 = org.apache.rat.license.LicenseSetFactory.LicenseFilter.all;
        org.apache.rat.Reporter.listLicenses(reportConfiguration40, licenseFilter42);
        org.apache.rat.Reporter.listLicenses(reportConfiguration33, licenseFilter42);
        org.apache.rat.utils.Log log45 = null;
        org.apache.rat.ReportConfiguration reportConfiguration46 = new org.apache.rat.ReportConfiguration(log45);
        java.io.FilenameFilter filenameFilter47 = reportConfiguration46.getInputFileFilter();
        org.apache.rat.license.LicenseSetFactory.LicenseFilter licenseFilter48 = org.apache.rat.license.LicenseSetFactory.LicenseFilter.all;
        java.util.SortedSet<org.apache.rat.license.ILicense> iLicenseSet49 = reportConfiguration46.getLicenses(licenseFilter48);
        org.apache.rat.config.AddLicenseHeaders addLicenseHeaders50 = org.apache.rat.config.AddLicenseHeaders.FALSE;
        reportConfiguration46.setAddLicenseHeaders(addLicenseHeaders50);
        org.apache.rat.utils.Log log52 = null;
        org.apache.rat.ReportConfiguration reportConfiguration53 = new org.apache.rat.ReportConfiguration(log52);
        org.apache.rat.report.claim.ClaimStatistic claimStatistic54 = org.apache.rat.Reporter.report(reportConfiguration53);
        org.apache.rat.license.LicenseSetFactory.LicenseFilter licenseFilter55 = org.apache.rat.license.LicenseSetFactory.LicenseFilter.all;
        org.apache.rat.Reporter.listLicenses(reportConfiguration53, licenseFilter55);
        org.apache.rat.Reporter.listLicenses(reportConfiguration46, licenseFilter55);
        org.apache.rat.Reporter.listLicenses(reportConfiguration33, licenseFilter55);
        java.util.SortedSet<org.apache.rat.license.ILicense> iLicenseSet59 = licenseSetFactory31.getLicenses(licenseFilter55);
        defaultLog0.warn((java.lang.Object) licenseSetFactory31);
        org.apache.rat.utils.Log log61 = null;
        org.apache.rat.ReportConfiguration reportConfiguration62 = new org.apache.rat.ReportConfiguration(log61);
        org.apache.rat.license.ILicenseFamily[] iLicenseFamilyArray63 = new org.apache.rat.license.ILicenseFamily[] {};
        java.util.ArrayList<org.apache.rat.license.ILicenseFamily> iLicenseFamilyList64 = new java.util.ArrayList<org.apache.rat.license.ILicenseFamily>();
        boolean boolean65 = java.util.Collections.addAll((java.util.Collection<org.apache.rat.license.ILicenseFamily>) iLicenseFamilyList64, iLicenseFamilyArray63);
        reportConfiguration62.addFamilies((java.util.Collection<org.apache.rat.license.ILicenseFamily>) iLicenseFamilyList64);
        org.apache.rat.utils.Log.Level level67 = org.apache.rat.utils.Log.Level.ERROR;
        reportConfiguration62.logLicenseCollisions(level67);
        defaultLog0.setLevel(level67);
        org.apache.rat.document.ToNameTransformer toNameTransformer70 = new org.apache.rat.document.ToNameTransformer();
        org.apache.rat.utils.DefaultLog defaultLog71 = org.apache.rat.utils.DefaultLog.INSTANCE;
        org.apache.rat.license.ILicense.Builder builder72 = org.apache.rat.license.ILicense.builder();
        org.apache.rat.license.ILicense.Builder builder74 = builder72.setLicenseFamilyCategory("");
        org.apache.rat.analysis.matchers.CopyrightMatcher copyrightMatcher78 = new org.apache.rat.analysis.matchers.CopyrightMatcher("", "GPL1 ", "hi!");
        org.apache.rat.analysis.IHeaderMatcher.State state79 = copyrightMatcher78.finalizeState();
        org.apache.rat.license.ILicense.Builder builder80 = builder74.setMatcher((org.apache.rat.analysis.IHeaderMatcher) copyrightMatcher78);
        org.apache.rat.license.ILicense.Builder builder82 = builder80.setLicenseFamilyCategory("");
        defaultLog71.error((java.lang.Object) builder82);
        java.lang.Object obj84 = toNameTransformer70.transform((java.lang.Object) defaultLog71);
        java.lang.Object obj85 = null;
        defaultLog71.warn(obj85);
        org.apache.rat.annotation.ApacheV2LicenseAppender apacheV2LicenseAppender87 = new org.apache.rat.annotation.ApacheV2LicenseAppender((org.apache.rat.utils.Log) defaultLog71);
        defaultLog0.warn((java.lang.Object) defaultLog71);
        org.apache.rat.annotation.ApacheV2LicenseAppender apacheV2LicenseAppender89 = new org.apache.rat.annotation.ApacheV2LicenseAppender((org.apache.rat.utils.Log) defaultLog71);
        org.junit.Assert.assertNotNull(defaultLog0);
        org.junit.Assert.assertNotNull(builder1);
        org.junit.Assert.assertNotNull(builder3);
        org.junit.Assert.assertTrue("'" + state8 + "' != '" + org.apache.rat.analysis.IHeaderMatcher.State.f + "'", state8.equals(org.apache.rat.analysis.IHeaderMatcher.State.f));
        org.junit.Assert.assertNotNull(builder9);
        org.junit.Assert.assertNotNull(builder11);
        org.junit.Assert.assertNotNull(iLicenseArray13);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + false + "'", boolean15 == false);
        org.junit.Assert.assertNotNull(strArray28);
        org.junit.Assert.assertTrue("'" + boolean30 + "' != '" + true + "'", boolean30 == true);
        org.junit.Assert.assertNull(filenameFilter34);
        org.junit.Assert.assertTrue("'" + licenseFilter35 + "' != '" + org.apache.rat.license.LicenseSetFactory.LicenseFilter.all + "'", licenseFilter35.equals(org.apache.rat.license.LicenseSetFactory.LicenseFilter.all));
        org.junit.Assert.assertNotNull(iLicenseSet36);
        org.junit.Assert.assertTrue("'" + addLicenseHeaders37 + "' != '" + org.apache.rat.config.AddLicenseHeaders.FALSE + "'", addLicenseHeaders37.equals(org.apache.rat.config.AddLicenseHeaders.FALSE));
        org.junit.Assert.assertNull(claimStatistic41);
        org.junit.Assert.assertTrue("'" + licenseFilter42 + "' != '" + org.apache.rat.license.LicenseSetFactory.LicenseFilter.all + "'", licenseFilter42.equals(org.apache.rat.license.LicenseSetFactory.LicenseFilter.all));
        org.junit.Assert.assertNull(filenameFilter47);
        org.junit.Assert.assertTrue("'" + licenseFilter48 + "' != '" + org.apache.rat.license.LicenseSetFactory.LicenseFilter.all + "'", licenseFilter48.equals(org.apache.rat.license.LicenseSetFactory.LicenseFilter.all));
        org.junit.Assert.assertNotNull(iLicenseSet49);
        org.junit.Assert.assertTrue("'" + addLicenseHeaders50 + "' != '" + org.apache.rat.config.AddLicenseHeaders.FALSE + "'", addLicenseHeaders50.equals(org.apache.rat.config.AddLicenseHeaders.FALSE));
        org.junit.Assert.assertNull(claimStatistic54);
        org.junit.Assert.assertTrue("'" + licenseFilter55 + "' != '" + org.apache.rat.license.LicenseSetFactory.LicenseFilter.all + "'", licenseFilter55.equals(org.apache.rat.license.LicenseSetFactory.LicenseFilter.all));
        org.junit.Assert.assertNotNull(iLicenseSet59);
        org.junit.Assert.assertNotNull(iLicenseFamilyArray63);
        org.junit.Assert.assertTrue("'" + boolean65 + "' != '" + false + "'", boolean65 == false);
        org.junit.Assert.assertTrue("'" + level67 + "' != '" + org.apache.rat.utils.Log.Level.ERROR + "'", level67.equals(org.apache.rat.utils.Log.Level.ERROR));
        org.junit.Assert.assertNotNull(defaultLog71);
        org.junit.Assert.assertNotNull(builder72);
        org.junit.Assert.assertNotNull(builder74);
        org.junit.Assert.assertTrue("'" + state79 + "' != '" + org.apache.rat.analysis.IHeaderMatcher.State.f + "'", state79.equals(org.apache.rat.analysis.IHeaderMatcher.State.f));
        org.junit.Assert.assertNotNull(builder80);
        org.junit.Assert.assertNotNull(builder82);
        org.junit.Assert.assertNull(obj84);
    }

    @Test
    public void test13960() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest27.test13960");
        org.apache.rat.utils.Log log0 = null;
        org.apache.rat.ReportConfiguration reportConfiguration1 = new org.apache.rat.ReportConfiguration(log0);
        java.io.FilenameFilter filenameFilter2 = reportConfiguration1.getInputFileFilter();
        org.apache.rat.license.LicenseSetFactory.LicenseFilter licenseFilter3 = org.apache.rat.license.LicenseSetFactory.LicenseFilter.all;
        java.util.SortedSet<org.apache.rat.license.ILicense> iLicenseSet4 = reportConfiguration1.getLicenses(licenseFilter3);
        org.apache.commons.io.function.IOSupplier<java.io.InputStream> inputStreamIOSupplier5 = reportConfiguration1.getStyleSheet();
        reportConfiguration1.addApprovedLicenseCategory("true");
        org.apache.rat.utils.Log log8 = null;
        org.apache.rat.ReportConfiguration reportConfiguration9 = new org.apache.rat.ReportConfiguration(log8);
        org.apache.rat.report.claim.ClaimStatistic claimStatistic10 = org.apache.rat.Reporter.report(reportConfiguration9);
        org.apache.commons.io.function.IOSupplier<java.io.OutputStream> outputStreamIOSupplier11 = reportConfiguration9.getOutput();
        boolean boolean12 = reportConfiguration9.isAddingLicensesForced();
        java.lang.String str13 = reportConfiguration9.getCopyrightMessage();
        reportConfiguration9.removeApprovedLicenseCategory("AnyBuilder:\nAllBuilder:");
        org.apache.commons.io.function.IOSupplier<java.io.OutputStream> outputStreamIOSupplier16 = reportConfiguration9.getOutput();
        reportConfiguration1.setOut(outputStreamIOSupplier16);
        reportConfiguration1.removeApprovedLicenseCategory("ac588fb8-47ff-4c8a-b192-4b692ac6762c");
        java.util.SortedSet<java.lang.String> strSet20 = reportConfiguration1.getApprovedLicenseCategories();
        reportConfiguration1.setCopyrightMessage("");
        org.junit.Assert.assertNull(filenameFilter2);
        org.junit.Assert.assertTrue("'" + licenseFilter3 + "' != '" + org.apache.rat.license.LicenseSetFactory.LicenseFilter.all + "'", licenseFilter3.equals(org.apache.rat.license.LicenseSetFactory.LicenseFilter.all));
        org.junit.Assert.assertNotNull(iLicenseSet4);
        org.junit.Assert.assertNull(inputStreamIOSupplier5);
        org.junit.Assert.assertNull(claimStatistic10);
        org.junit.Assert.assertNotNull(outputStreamIOSupplier11);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertNull(str13);
        org.junit.Assert.assertNotNull(outputStreamIOSupplier16);
        org.junit.Assert.assertNotNull(strSet20);
    }

    @Test
    public void test13961() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest27.test13961");
        org.apache.rat.configuration.builders.TextBuilder textBuilder0 = new org.apache.rat.configuration.builders.TextBuilder();
        org.apache.rat.configuration.builders.TextBuilder textBuilder2 = textBuilder0.setText("true");
        org.apache.rat.configuration.builders.TextBuilder textBuilder4 = textBuilder0.setText("stand");
        org.apache.rat.configuration.builders.TextCaptureBuilder textCaptureBuilder6 = textBuilder4.setText("Datum [ name ='http://org/apache/rat/meta-data#LicenseFamilyCategory',value ='OASIS ']");
        org.apache.rat.configuration.builders.TextBuilder textBuilder8 = textBuilder4.setText("09515582-f498-42b1-81db-55dad652cc61");
        org.apache.rat.configuration.builders.TextBuilder textBuilder10 = textBuilder8.setText("EBC30EB7B3EA4F39BAEA5FEA4FA0278B");
        org.apache.rat.configuration.builders.TextBuilder textBuilder12 = textBuilder10.setText("RegexBuilder: ");
        java.lang.String str13 = textBuilder10.toString();
        org.junit.Assert.assertNotNull(textBuilder2);
        org.junit.Assert.assertNotNull(textBuilder4);
        org.junit.Assert.assertNotNull(textCaptureBuilder6);
        org.junit.Assert.assertNotNull(textBuilder8);
        org.junit.Assert.assertNotNull(textBuilder10);
        org.junit.Assert.assertNotNull(textBuilder12);
        org.junit.Assert.assertEquals("'" + str13 + "' != '" + "TextBuilder: RegexBuilder: " + "'", str13, "TextBuilder: RegexBuilder: ");
    }

    @Test
    public void test13962() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest27.test13962");
        org.apache.rat.utils.Log log0 = null;
        org.apache.rat.ReportConfiguration reportConfiguration1 = new org.apache.rat.ReportConfiguration(log0);
        org.apache.rat.report.claim.ClaimStatistic claimStatistic2 = org.apache.rat.Reporter.report(reportConfiguration1);
        org.apache.commons.io.function.IOSupplier<java.io.OutputStream> outputStreamIOSupplier3 = reportConfiguration1.getOutput();
        org.apache.rat.license.ILicense iLicense4 = null;
        reportConfiguration1.addLicense(iLicense4);
        org.apache.rat.Defaults.Builder builder6 = org.apache.rat.Defaults.builder();
        org.apache.rat.Defaults defaults7 = builder6.build();
        org.apache.rat.utils.Log log8 = null;
        org.apache.rat.ReportConfiguration reportConfiguration9 = new org.apache.rat.ReportConfiguration(log8);
        reportConfiguration9.addApprovedLicenseCategory(".cvsignore");
        org.apache.rat.utils.Log log12 = null;
        org.apache.rat.ReportConfiguration reportConfiguration13 = new org.apache.rat.ReportConfiguration(log12);
        java.io.FilenameFilter filenameFilter14 = reportConfiguration13.getInputFileFilter();
        org.apache.rat.license.LicenseSetFactory.LicenseFilter licenseFilter15 = org.apache.rat.license.LicenseSetFactory.LicenseFilter.all;
        java.util.SortedSet<org.apache.rat.license.ILicense> iLicenseSet16 = reportConfiguration13.getLicenses(licenseFilter15);
        reportConfiguration9.addLicensesIfNotPresent((java.util.Collection<org.apache.rat.license.ILicense>) iLicenseSet16);
        java.io.FilenameFilter filenameFilter18 = reportConfiguration9.getInputFileFilter();
        org.apache.rat.utils.Log log19 = null;
        org.apache.rat.ReportConfiguration reportConfiguration20 = new org.apache.rat.ReportConfiguration(log19);
        java.io.FilenameFilter filenameFilter21 = reportConfiguration20.getInputFileFilter();
        org.apache.rat.license.LicenseSetFactory.LicenseFilter licenseFilter22 = org.apache.rat.license.LicenseSetFactory.LicenseFilter.all;
        java.util.SortedSet<org.apache.rat.license.ILicense> iLicenseSet23 = reportConfiguration20.getLicenses(licenseFilter22);
        org.apache.rat.config.AddLicenseHeaders addLicenseHeaders24 = org.apache.rat.config.AddLicenseHeaders.FALSE;
        reportConfiguration20.setAddLicenseHeaders(addLicenseHeaders24);
        org.apache.rat.utils.Log log26 = null;
        org.apache.rat.ReportConfiguration reportConfiguration27 = new org.apache.rat.ReportConfiguration(log26);
        org.apache.rat.report.claim.ClaimStatistic claimStatistic28 = org.apache.rat.Reporter.report(reportConfiguration27);
        org.apache.rat.license.LicenseSetFactory.LicenseFilter licenseFilter29 = org.apache.rat.license.LicenseSetFactory.LicenseFilter.all;
        org.apache.rat.Reporter.listLicenses(reportConfiguration27, licenseFilter29);
        org.apache.rat.Reporter.listLicenses(reportConfiguration20, licenseFilter29);
        org.apache.rat.utils.Log log32 = null;
        org.apache.rat.ReportConfiguration reportConfiguration33 = new org.apache.rat.ReportConfiguration(log32);
        java.io.FilenameFilter filenameFilter34 = reportConfiguration33.getInputFileFilter();
        org.apache.rat.license.LicenseSetFactory.LicenseFilter licenseFilter35 = org.apache.rat.license.LicenseSetFactory.LicenseFilter.all;
        java.util.SortedSet<org.apache.rat.license.ILicense> iLicenseSet36 = reportConfiguration33.getLicenses(licenseFilter35);
        org.apache.rat.config.AddLicenseHeaders addLicenseHeaders37 = org.apache.rat.config.AddLicenseHeaders.FALSE;
        reportConfiguration33.setAddLicenseHeaders(addLicenseHeaders37);
        org.apache.rat.utils.Log log39 = null;
        org.apache.rat.ReportConfiguration reportConfiguration40 = new org.apache.rat.ReportConfiguration(log39);
        org.apache.rat.report.claim.ClaimStatistic claimStatistic41 = org.apache.rat.Reporter.report(reportConfiguration40);
        org.apache.rat.license.LicenseSetFactory.LicenseFilter licenseFilter42 = org.apache.rat.license.LicenseSetFactory.LicenseFilter.all;
        org.apache.rat.Reporter.listLicenses(reportConfiguration40, licenseFilter42);
        org.apache.rat.Reporter.listLicenses(reportConfiguration33, licenseFilter42);
        java.util.SortedSet<org.apache.rat.license.ILicenseFamily> iLicenseFamilySet45 = reportConfiguration20.getLicenseFamilies(licenseFilter42);
        org.apache.rat.Reporter.listLicenseFamilies(reportConfiguration9, licenseFilter42);
        java.util.SortedSet<java.lang.String> strSet47 = defaults7.getLicenseIds(licenseFilter42);
        java.util.SortedSet<org.apache.rat.license.ILicense> iLicenseSet48 = reportConfiguration1.getLicenses(licenseFilter42);
        java.io.FilenameFilter filenameFilter49 = reportConfiguration1.getInputFileFilter();
        org.junit.Assert.assertNull(claimStatistic2);
        org.junit.Assert.assertNotNull(outputStreamIOSupplier3);
        org.junit.Assert.assertNotNull(builder6);
        org.junit.Assert.assertNotNull(defaults7);
        org.junit.Assert.assertNull(filenameFilter14);
        org.junit.Assert.assertTrue("'" + licenseFilter15 + "' != '" + org.apache.rat.license.LicenseSetFactory.LicenseFilter.all + "'", licenseFilter15.equals(org.apache.rat.license.LicenseSetFactory.LicenseFilter.all));
        org.junit.Assert.assertNotNull(iLicenseSet16);
        org.junit.Assert.assertNull(filenameFilter18);
        org.junit.Assert.assertNull(filenameFilter21);
        org.junit.Assert.assertTrue("'" + licenseFilter22 + "' != '" + org.apache.rat.license.LicenseSetFactory.LicenseFilter.all + "'", licenseFilter22.equals(org.apache.rat.license.LicenseSetFactory.LicenseFilter.all));
        org.junit.Assert.assertNotNull(iLicenseSet23);
        org.junit.Assert.assertTrue("'" + addLicenseHeaders24 + "' != '" + org.apache.rat.config.AddLicenseHeaders.FALSE + "'", addLicenseHeaders24.equals(org.apache.rat.config.AddLicenseHeaders.FALSE));
        org.junit.Assert.assertNull(claimStatistic28);
        org.junit.Assert.assertTrue("'" + licenseFilter29 + "' != '" + org.apache.rat.license.LicenseSetFactory.LicenseFilter.all + "'", licenseFilter29.equals(org.apache.rat.license.LicenseSetFactory.LicenseFilter.all));
        org.junit.Assert.assertNull(filenameFilter34);
        org.junit.Assert.assertTrue("'" + licenseFilter35 + "' != '" + org.apache.rat.license.LicenseSetFactory.LicenseFilter.all + "'", licenseFilter35.equals(org.apache.rat.license.LicenseSetFactory.LicenseFilter.all));
        org.junit.Assert.assertNotNull(iLicenseSet36);
        org.junit.Assert.assertTrue("'" + addLicenseHeaders37 + "' != '" + org.apache.rat.config.AddLicenseHeaders.FALSE + "'", addLicenseHeaders37.equals(org.apache.rat.config.AddLicenseHeaders.FALSE));
        org.junit.Assert.assertNull(claimStatistic41);
        org.junit.Assert.assertTrue("'" + licenseFilter42 + "' != '" + org.apache.rat.license.LicenseSetFactory.LicenseFilter.all + "'", licenseFilter42.equals(org.apache.rat.license.LicenseSetFactory.LicenseFilter.all));
        org.junit.Assert.assertNotNull(iLicenseFamilySet45);
        org.junit.Assert.assertNotNull(strSet47);
        org.junit.Assert.assertNotNull(iLicenseSet48);
        org.junit.Assert.assertNull(filenameFilter49);
    }

    @Test
    public void test13963() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest27.test13963");
        org.apache.rat.report.claim.ClaimStatistic claimStatistic0 = new org.apache.rat.report.claim.ClaimStatistic();
        claimStatistic0.setNumApproved((int) (short) 10);
        java.util.Map<java.lang.String, java.lang.Integer> strMap3 = null;
        claimStatistic0.setDocumentCategoryMap(strMap3);
        java.util.Map<java.lang.String, java.lang.Integer> strMap5 = claimStatistic0.getLicenseFileNameMap();
        claimStatistic0.setNumUnknown((int) (byte) -1);
        claimStatistic0.setNumUnknown(30);
        java.util.Map<java.lang.String, java.lang.Integer> strMap10 = null;
        claimStatistic0.setDocumentCategoryMap(strMap10);
        int int12 = claimStatistic0.getNumGenerated();
        int int13 = claimStatistic0.getNumApproved();
        java.util.Map<java.lang.String, java.lang.Integer> strMap14 = null;
        claimStatistic0.setLicenseFileNameMap(strMap14);
        org.junit.Assert.assertNull(strMap5);
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + 0 + "'", int12 == 0);
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + 10 + "'", int13 == 10);
    }

    @Test
    public void test13964() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest27.test13964");
        org.apache.rat.config.SourceCodeManagementSystems sourceCodeManagementSystems0 = org.apache.rat.config.SourceCodeManagementSystems.BAZAAR;
        java.util.List<java.lang.String> strList1 = sourceCodeManagementSystems0.getExclusions();
        java.lang.String str2 = sourceCodeManagementSystems0.getIgnoreFile();
        java.util.List<java.lang.String> strList3 = sourceCodeManagementSystems0.getExclusions();
        boolean boolean4 = sourceCodeManagementSystems0.hasIgnoreFile();
        org.junit.Assert.assertTrue("'" + sourceCodeManagementSystems0 + "' != '" + org.apache.rat.config.SourceCodeManagementSystems.BAZAAR + "'", sourceCodeManagementSystems0.equals(org.apache.rat.config.SourceCodeManagementSystems.BAZAAR));
        org.junit.Assert.assertNotNull(strList1);
        org.junit.Assert.assertEquals("'" + str2 + "' != '" + ".bzrignore" + "'", str2, ".bzrignore");
        org.junit.Assert.assertNotNull(strList3);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + true + "'", boolean4 == true);
    }

    @Test
    public void test13965() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest27.test13965");
        org.apache.rat.Defaults.Builder builder0 = org.apache.rat.Defaults.builder();
        org.apache.rat.Defaults defaults1 = builder0.build();
        org.apache.rat.Defaults.Builder builder2 = builder0.noDefault();
        org.apache.rat.Defaults.Builder builder4 = builder0.add("W3C Document Copyright");
        org.apache.rat.Defaults.Builder builder6 = builder0.add("9c36f068-9920-4c66-98c2-ba24e3dffa9c");
        org.apache.rat.Defaults.Builder builder8 = builder6.add("The MIT License");
        // The following exception was thrown during execution in test generation
        try {
            org.apache.rat.Defaults defaults9 = builder8.build();
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: No such suffix: /home/mopuser/workspace/creadur-rat/9c36f068-9920-4c66-98c2-ba24e3dffa9c");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(builder0);
        org.junit.Assert.assertNotNull(defaults1);
        org.junit.Assert.assertNotNull(builder2);
        org.junit.Assert.assertNotNull(builder4);
        org.junit.Assert.assertNotNull(builder6);
        org.junit.Assert.assertNotNull(builder8);
    }

    @Test
    public void test13966() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest27.test13966");
        org.apache.rat.utils.DefaultLog defaultLog0 = org.apache.rat.utils.DefaultLog.INSTANCE;
        org.apache.rat.license.ILicense.Builder builder1 = org.apache.rat.license.ILicense.builder();
        org.apache.rat.license.ILicense.Builder builder3 = builder1.setLicenseFamilyCategory("");
        org.apache.rat.analysis.matchers.CopyrightMatcher copyrightMatcher7 = new org.apache.rat.analysis.matchers.CopyrightMatcher("", "GPL1 ", "hi!");
        org.apache.rat.analysis.IHeaderMatcher.State state8 = copyrightMatcher7.finalizeState();
        org.apache.rat.license.ILicense.Builder builder9 = builder3.setMatcher((org.apache.rat.analysis.IHeaderMatcher) copyrightMatcher7);
        org.apache.rat.license.ILicense.Builder builder11 = builder9.setLicenseFamilyCategory("");
        defaultLog0.error((java.lang.Object) builder11);
        org.apache.rat.license.ILicense[] iLicenseArray13 = new org.apache.rat.license.ILicense[] {};
        java.util.TreeSet<org.apache.rat.license.ILicense> iLicenseSet14 = new java.util.TreeSet<org.apache.rat.license.ILicense>();
        boolean boolean15 = java.util.Collections.addAll((java.util.Collection<org.apache.rat.license.ILicense>) iLicenseSet14, iLicenseArray13);
        java.lang.String[] strArray28 = new java.lang.String[] { "GPL2 ", "GPL1 ", "notice", "http://org/apache/rat/meta-data#LicenseFamilyName", "notice", "GPL2 ", "http://org/apache/rat/meta-data#LicenseFamilyName", "", "GPL2 ", "", "GPL1 ", "hi!" };
        java.util.ArrayList<java.lang.String> strList29 = new java.util.ArrayList<java.lang.String>();
        boolean boolean30 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strList29, strArray28);
        org.apache.rat.license.LicenseSetFactory licenseSetFactory31 = new org.apache.rat.license.LicenseSetFactory((java.util.SortedSet<org.apache.rat.license.ILicense>) iLicenseSet14, (java.util.Collection<java.lang.String>) strList29);
        org.apache.rat.utils.Log log32 = null;
        org.apache.rat.ReportConfiguration reportConfiguration33 = new org.apache.rat.ReportConfiguration(log32);
        java.io.FilenameFilter filenameFilter34 = reportConfiguration33.getInputFileFilter();
        org.apache.rat.license.LicenseSetFactory.LicenseFilter licenseFilter35 = org.apache.rat.license.LicenseSetFactory.LicenseFilter.all;
        java.util.SortedSet<org.apache.rat.license.ILicense> iLicenseSet36 = reportConfiguration33.getLicenses(licenseFilter35);
        org.apache.rat.config.AddLicenseHeaders addLicenseHeaders37 = org.apache.rat.config.AddLicenseHeaders.FALSE;
        reportConfiguration33.setAddLicenseHeaders(addLicenseHeaders37);
        org.apache.rat.utils.Log log39 = null;
        org.apache.rat.ReportConfiguration reportConfiguration40 = new org.apache.rat.ReportConfiguration(log39);
        org.apache.rat.report.claim.ClaimStatistic claimStatistic41 = org.apache.rat.Reporter.report(reportConfiguration40);
        org.apache.rat.license.LicenseSetFactory.LicenseFilter licenseFilter42 = org.apache.rat.license.LicenseSetFactory.LicenseFilter.all;
        org.apache.rat.Reporter.listLicenses(reportConfiguration40, licenseFilter42);
        org.apache.rat.Reporter.listLicenses(reportConfiguration33, licenseFilter42);
        org.apache.rat.utils.Log log45 = null;
        org.apache.rat.ReportConfiguration reportConfiguration46 = new org.apache.rat.ReportConfiguration(log45);
        java.io.FilenameFilter filenameFilter47 = reportConfiguration46.getInputFileFilter();
        org.apache.rat.license.LicenseSetFactory.LicenseFilter licenseFilter48 = org.apache.rat.license.LicenseSetFactory.LicenseFilter.all;
        java.util.SortedSet<org.apache.rat.license.ILicense> iLicenseSet49 = reportConfiguration46.getLicenses(licenseFilter48);
        org.apache.rat.config.AddLicenseHeaders addLicenseHeaders50 = org.apache.rat.config.AddLicenseHeaders.FALSE;
        reportConfiguration46.setAddLicenseHeaders(addLicenseHeaders50);
        org.apache.rat.utils.Log log52 = null;
        org.apache.rat.ReportConfiguration reportConfiguration53 = new org.apache.rat.ReportConfiguration(log52);
        org.apache.rat.report.claim.ClaimStatistic claimStatistic54 = org.apache.rat.Reporter.report(reportConfiguration53);
        org.apache.rat.license.LicenseSetFactory.LicenseFilter licenseFilter55 = org.apache.rat.license.LicenseSetFactory.LicenseFilter.all;
        org.apache.rat.Reporter.listLicenses(reportConfiguration53, licenseFilter55);
        org.apache.rat.Reporter.listLicenses(reportConfiguration46, licenseFilter55);
        org.apache.rat.Reporter.listLicenses(reportConfiguration33, licenseFilter55);
        java.util.SortedSet<org.apache.rat.license.ILicense> iLicenseSet59 = licenseSetFactory31.getLicenses(licenseFilter55);
        defaultLog0.warn((java.lang.Object) licenseSetFactory31);
        org.apache.rat.utils.Log log61 = null;
        org.apache.rat.ReportConfiguration reportConfiguration62 = new org.apache.rat.ReportConfiguration(log61);
        org.apache.rat.license.ILicenseFamily[] iLicenseFamilyArray63 = new org.apache.rat.license.ILicenseFamily[] {};
        java.util.ArrayList<org.apache.rat.license.ILicenseFamily> iLicenseFamilyList64 = new java.util.ArrayList<org.apache.rat.license.ILicenseFamily>();
        boolean boolean65 = java.util.Collections.addAll((java.util.Collection<org.apache.rat.license.ILicenseFamily>) iLicenseFamilyList64, iLicenseFamilyArray63);
        reportConfiguration62.addFamilies((java.util.Collection<org.apache.rat.license.ILicenseFamily>) iLicenseFamilyList64);
        org.apache.rat.utils.Log.Level level67 = org.apache.rat.utils.Log.Level.ERROR;
        reportConfiguration62.logLicenseCollisions(level67);
        defaultLog0.setLevel(level67);
        org.apache.rat.utils.Log log70 = null;
        org.apache.rat.ReportConfiguration reportConfiguration71 = new org.apache.rat.ReportConfiguration(log70);
        java.io.FilenameFilter filenameFilter72 = reportConfiguration71.getInputFileFilter();
        org.apache.rat.license.LicenseSetFactory.LicenseFilter licenseFilter73 = org.apache.rat.license.LicenseSetFactory.LicenseFilter.all;
        java.util.SortedSet<org.apache.rat.license.ILicense> iLicenseSet74 = reportConfiguration71.getLicenses(licenseFilter73);
        org.apache.rat.config.AddLicenseHeaders addLicenseHeaders75 = org.apache.rat.config.AddLicenseHeaders.FALSE;
        reportConfiguration71.setAddLicenseHeaders(addLicenseHeaders75);
        org.apache.rat.utils.Log log77 = null;
        org.apache.rat.ReportConfiguration reportConfiguration78 = new org.apache.rat.ReportConfiguration(log77);
        reportConfiguration78.addApprovedLicenseCategory(".cvsignore");
        org.apache.rat.utils.Log.Level level81 = org.apache.rat.utils.Log.Level.ERROR;
        reportConfiguration78.logLicenseCollisions(level81);
        reportConfiguration71.logFamilyCollisions(level81);
        org.apache.rat.configuration.Format format84 = org.apache.rat.configuration.Format.XML;
        org.apache.rat.configuration.LicenseReader licenseReader85 = format84.licenseReader();
        org.apache.rat.configuration.MatcherReader matcherReader86 = format84.matcherReader();
        org.apache.rat.configuration.LicenseReader licenseReader87 = format84.licenseReader();
        defaultLog0.log(level81, (java.lang.Object) licenseReader87);
        java.util.SortedSet<org.apache.rat.license.ILicenseFamily> iLicenseFamilySet89 = licenseReader87.readFamilies();
        java.util.SortedSet<org.apache.rat.license.ILicenseFamily> iLicenseFamilySet90 = licenseReader87.readFamilies();
        java.net.URL uRL91 = null;
        // The following exception was thrown during execution in test generation
        try {
            licenseReader87.addLicenses(uRL91);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(defaultLog0);
        org.junit.Assert.assertNotNull(builder1);
        org.junit.Assert.assertNotNull(builder3);
        org.junit.Assert.assertTrue("'" + state8 + "' != '" + org.apache.rat.analysis.IHeaderMatcher.State.f + "'", state8.equals(org.apache.rat.analysis.IHeaderMatcher.State.f));
        org.junit.Assert.assertNotNull(builder9);
        org.junit.Assert.assertNotNull(builder11);
        org.junit.Assert.assertNotNull(iLicenseArray13);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + false + "'", boolean15 == false);
        org.junit.Assert.assertNotNull(strArray28);
        org.junit.Assert.assertTrue("'" + boolean30 + "' != '" + true + "'", boolean30 == true);
        org.junit.Assert.assertNull(filenameFilter34);
        org.junit.Assert.assertTrue("'" + licenseFilter35 + "' != '" + org.apache.rat.license.LicenseSetFactory.LicenseFilter.all + "'", licenseFilter35.equals(org.apache.rat.license.LicenseSetFactory.LicenseFilter.all));
        org.junit.Assert.assertNotNull(iLicenseSet36);
        org.junit.Assert.assertTrue("'" + addLicenseHeaders37 + "' != '" + org.apache.rat.config.AddLicenseHeaders.FALSE + "'", addLicenseHeaders37.equals(org.apache.rat.config.AddLicenseHeaders.FALSE));
        org.junit.Assert.assertNull(claimStatistic41);
        org.junit.Assert.assertTrue("'" + licenseFilter42 + "' != '" + org.apache.rat.license.LicenseSetFactory.LicenseFilter.all + "'", licenseFilter42.equals(org.apache.rat.license.LicenseSetFactory.LicenseFilter.all));
        org.junit.Assert.assertNull(filenameFilter47);
        org.junit.Assert.assertTrue("'" + licenseFilter48 + "' != '" + org.apache.rat.license.LicenseSetFactory.LicenseFilter.all + "'", licenseFilter48.equals(org.apache.rat.license.LicenseSetFactory.LicenseFilter.all));
        org.junit.Assert.assertNotNull(iLicenseSet49);
        org.junit.Assert.assertTrue("'" + addLicenseHeaders50 + "' != '" + org.apache.rat.config.AddLicenseHeaders.FALSE + "'", addLicenseHeaders50.equals(org.apache.rat.config.AddLicenseHeaders.FALSE));
        org.junit.Assert.assertNull(claimStatistic54);
        org.junit.Assert.assertTrue("'" + licenseFilter55 + "' != '" + org.apache.rat.license.LicenseSetFactory.LicenseFilter.all + "'", licenseFilter55.equals(org.apache.rat.license.LicenseSetFactory.LicenseFilter.all));
        org.junit.Assert.assertNotNull(iLicenseSet59);
        org.junit.Assert.assertNotNull(iLicenseFamilyArray63);
        org.junit.Assert.assertTrue("'" + boolean65 + "' != '" + false + "'", boolean65 == false);
        org.junit.Assert.assertTrue("'" + level67 + "' != '" + org.apache.rat.utils.Log.Level.ERROR + "'", level67.equals(org.apache.rat.utils.Log.Level.ERROR));
        org.junit.Assert.assertNull(filenameFilter72);
        org.junit.Assert.assertTrue("'" + licenseFilter73 + "' != '" + org.apache.rat.license.LicenseSetFactory.LicenseFilter.all + "'", licenseFilter73.equals(org.apache.rat.license.LicenseSetFactory.LicenseFilter.all));
        org.junit.Assert.assertNotNull(iLicenseSet74);
        org.junit.Assert.assertTrue("'" + addLicenseHeaders75 + "' != '" + org.apache.rat.config.AddLicenseHeaders.FALSE + "'", addLicenseHeaders75.equals(org.apache.rat.config.AddLicenseHeaders.FALSE));
        org.junit.Assert.assertTrue("'" + level81 + "' != '" + org.apache.rat.utils.Log.Level.ERROR + "'", level81.equals(org.apache.rat.utils.Log.Level.ERROR));
        org.junit.Assert.assertTrue("'" + format84 + "' != '" + org.apache.rat.configuration.Format.XML + "'", format84.equals(org.apache.rat.configuration.Format.XML));
        org.junit.Assert.assertNotNull(licenseReader85);
        org.junit.Assert.assertNotNull(matcherReader86);
        org.junit.Assert.assertNotNull(licenseReader87);
        org.junit.Assert.assertNotNull(iLicenseFamilySet89);
        org.junit.Assert.assertNotNull(iLicenseFamilySet90);
    }

    @Test
    public void test13967() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest27.test13967");
        org.apache.rat.utils.Log log1 = null;
        org.apache.rat.ReportConfiguration reportConfiguration2 = new org.apache.rat.ReportConfiguration(log1);
        java.io.FilenameFilter filenameFilter3 = reportConfiguration2.getInputFileFilter();
        org.apache.rat.license.LicenseSetFactory.LicenseFilter licenseFilter4 = org.apache.rat.license.LicenseSetFactory.LicenseFilter.all;
        java.util.SortedSet<org.apache.rat.license.ILicense> iLicenseSet5 = reportConfiguration2.getLicenses(licenseFilter4);
        org.apache.rat.config.AddLicenseHeaders addLicenseHeaders6 = org.apache.rat.config.AddLicenseHeaders.FALSE;
        reportConfiguration2.setAddLicenseHeaders(addLicenseHeaders6);
        org.apache.rat.utils.Log log8 = null;
        org.apache.rat.ReportConfiguration reportConfiguration9 = new org.apache.rat.ReportConfiguration(log8);
        org.apache.rat.report.claim.ClaimStatistic claimStatistic10 = org.apache.rat.Reporter.report(reportConfiguration9);
        org.apache.rat.license.LicenseSetFactory.LicenseFilter licenseFilter11 = org.apache.rat.license.LicenseSetFactory.LicenseFilter.all;
        org.apache.rat.Reporter.listLicenses(reportConfiguration9, licenseFilter11);
        org.apache.rat.Reporter.listLicenses(reportConfiguration2, licenseFilter11);
        org.apache.rat.report.IReportable iReportable14 = null;
        reportConfiguration2.setReportable(iReportable14);
        java.io.FilenameFilter filenameFilter16 = reportConfiguration2.getInputFileFilter();
        org.apache.rat.utils.Log log17 = null;
        org.apache.rat.ReportConfiguration reportConfiguration18 = new org.apache.rat.ReportConfiguration(log17);
        org.apache.commons.io.function.IOSupplier<java.io.OutputStream> outputStreamIOSupplier19 = reportConfiguration18.getOutput();
        org.apache.commons.io.filefilter.IOFileFilter iOFileFilter20 = reportConfiguration18.getDirectoryFilter();
        org.apache.rat.utils.Log log21 = null;
        org.apache.rat.ReportConfiguration reportConfiguration22 = new org.apache.rat.ReportConfiguration(log21);
        org.apache.rat.report.claim.ClaimStatistic claimStatistic23 = org.apache.rat.Reporter.report(reportConfiguration22);
        org.apache.commons.io.function.IOSupplier<java.io.OutputStream> outputStreamIOSupplier24 = reportConfiguration22.getOutput();
        boolean boolean25 = reportConfiguration22.isAddingLicensesForced();
        org.apache.rat.license.ILicense[] iLicenseArray26 = new org.apache.rat.license.ILicense[] {};
        java.util.TreeSet<org.apache.rat.license.ILicense> iLicenseSet27 = new java.util.TreeSet<org.apache.rat.license.ILicense>();
        boolean boolean28 = java.util.Collections.addAll((java.util.Collection<org.apache.rat.license.ILicense>) iLicenseSet27, iLicenseArray26);
        java.lang.String[] strArray41 = new java.lang.String[] { "GPL2 ", "GPL1 ", "notice", "http://org/apache/rat/meta-data#LicenseFamilyName", "notice", "GPL2 ", "http://org/apache/rat/meta-data#LicenseFamilyName", "", "GPL2 ", "", "GPL1 ", "hi!" };
        java.util.ArrayList<java.lang.String> strList42 = new java.util.ArrayList<java.lang.String>();
        boolean boolean43 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strList42, strArray41);
        org.apache.rat.license.LicenseSetFactory licenseSetFactory44 = new org.apache.rat.license.LicenseSetFactory((java.util.SortedSet<org.apache.rat.license.ILicense>) iLicenseSet27, (java.util.Collection<java.lang.String>) strList42);
        reportConfiguration22.addLicenses((java.util.Collection<org.apache.rat.license.ILicense>) iLicenseSet27);
        reportConfiguration18.addLicensesIfNotPresent((java.util.Collection<org.apache.rat.license.ILicense>) iLicenseSet27);
        org.apache.rat.utils.ReportingSet<org.apache.rat.license.ILicense> iLicenseSet47 = new org.apache.rat.utils.ReportingSet<org.apache.rat.license.ILicense>((java.util.SortedSet<org.apache.rat.license.ILicense>) iLicenseSet27);
        reportConfiguration2.addLicenses((java.util.Collection<org.apache.rat.license.ILicense>) iLicenseSet47);
        org.apache.rat.license.ILicense iLicense49 = org.apache.rat.license.LicenseSetFactory.search("Datum [ name ='binary',value =' ']", (java.util.SortedSet<org.apache.rat.license.ILicense>) iLicenseSet47);
        org.apache.rat.utils.ReportingSet<org.apache.rat.license.ILicense> iLicenseSet50 = new org.apache.rat.utils.ReportingSet<org.apache.rat.license.ILicense>((java.util.SortedSet<org.apache.rat.license.ILicense>) iLicenseSet47);
        org.junit.Assert.assertNull(filenameFilter3);
        org.junit.Assert.assertTrue("'" + licenseFilter4 + "' != '" + org.apache.rat.license.LicenseSetFactory.LicenseFilter.all + "'", licenseFilter4.equals(org.apache.rat.license.LicenseSetFactory.LicenseFilter.all));
        org.junit.Assert.assertNotNull(iLicenseSet5);
        org.junit.Assert.assertTrue("'" + addLicenseHeaders6 + "' != '" + org.apache.rat.config.AddLicenseHeaders.FALSE + "'", addLicenseHeaders6.equals(org.apache.rat.config.AddLicenseHeaders.FALSE));
        org.junit.Assert.assertNull(claimStatistic10);
        org.junit.Assert.assertTrue("'" + licenseFilter11 + "' != '" + org.apache.rat.license.LicenseSetFactory.LicenseFilter.all + "'", licenseFilter11.equals(org.apache.rat.license.LicenseSetFactory.LicenseFilter.all));
        org.junit.Assert.assertNull(filenameFilter16);
        org.junit.Assert.assertNotNull(outputStreamIOSupplier19);
        org.junit.Assert.assertNotNull(iOFileFilter20);
        org.junit.Assert.assertNull(claimStatistic23);
        org.junit.Assert.assertNotNull(outputStreamIOSupplier24);
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + false + "'", boolean25 == false);
        org.junit.Assert.assertNotNull(iLicenseArray26);
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + false + "'", boolean28 == false);
        org.junit.Assert.assertNotNull(strArray41);
        org.junit.Assert.assertTrue("'" + boolean43 + "' != '" + true + "'", boolean43 == true);
        org.junit.Assert.assertNull(iLicense49);
    }

    @Test
    public void test13968() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest27.test13968");
        org.apache.rat.license.ILicenseFamilyBuilder iLicenseFamilyBuilder0 = new org.apache.rat.license.ILicenseFamilyBuilder();
        java.lang.String str1 = iLicenseFamilyBuilder0.getCategory();
        org.apache.rat.license.ILicenseFamily.Builder builder3 = iLicenseFamilyBuilder0.setLicenseFamilyCategory("AL   ");
        org.apache.rat.license.ILicenseFamily.Builder builder5 = iLicenseFamilyBuilder0.setLicenseFamilyCategory("MIT  ");
        org.apache.rat.license.ILicenseFamily.Builder builder7 = iLicenseFamilyBuilder0.setLicenseFamilyName("4a00cf7d-fe76-423e-917e-b03bbae6b8a5");
        java.lang.String str8 = iLicenseFamilyBuilder0.getCategory();
        org.apache.rat.license.ILicenseFamily.Builder builder10 = iLicenseFamilyBuilder0.setLicenseFamilyName("8ecb8cce-06e4-400f-84d9-ad1cf6289fda");
        org.apache.rat.license.ILicenseFamily iLicenseFamily11 = iLicenseFamilyBuilder0.build();
        java.lang.String str12 = iLicenseFamilyBuilder0.getCategory();
        org.apache.rat.license.ILicenseFamily.Builder builder14 = iLicenseFamilyBuilder0.setLicenseFamilyName("?????");
        java.lang.String str15 = iLicenseFamilyBuilder0.getCategory();
        org.apache.rat.license.ILicenseFamily.Builder builder17 = iLicenseFamilyBuilder0.setLicenseFamilyCategory("Copyright Builder: s:021187d7-27c2-4fd9-bc74-8cc00413ee52 e: o:null");
        org.apache.rat.license.ILicenseFamily.Builder builder19 = iLicenseFamilyBuilder0.setLicenseFamilyName("");
        org.apache.rat.license.ILicenseFamily.Builder builder21 = iLicenseFamilyBuilder0.setLicenseFamilyName("EF7A8");
        java.lang.String str22 = iLicenseFamilyBuilder0.getCategory();
        java.lang.String str23 = iLicenseFamilyBuilder0.getCategory();
        org.junit.Assert.assertNull(str1);
        org.junit.Assert.assertNotNull(builder3);
        org.junit.Assert.assertNotNull(builder5);
        org.junit.Assert.assertNotNull(builder7);
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "MIT  " + "'", str8, "MIT  ");
        org.junit.Assert.assertNotNull(builder10);
        org.junit.Assert.assertNotNull(iLicenseFamily11);
        org.junit.Assert.assertEquals("'" + str12 + "' != '" + "MIT  " + "'", str12, "MIT  ");
        org.junit.Assert.assertNotNull(builder14);
        org.junit.Assert.assertEquals("'" + str15 + "' != '" + "MIT  " + "'", str15, "MIT  ");
        org.junit.Assert.assertNotNull(builder17);
        org.junit.Assert.assertNotNull(builder19);
        org.junit.Assert.assertNotNull(builder21);
        org.junit.Assert.assertEquals("'" + str22 + "' != '" + "Copyright Builder: s:021187d7-27c2-4fd9-bc74-8cc00413ee52 e: o:null" + "'", str22, "Copyright Builder: s:021187d7-27c2-4fd9-bc74-8cc00413ee52 e: o:null");
        org.junit.Assert.assertEquals("'" + str23 + "' != '" + "Copyright Builder: s:021187d7-27c2-4fd9-bc74-8cc00413ee52 e: o:null" + "'", str23, "Copyright Builder: s:021187d7-27c2-4fd9-bc74-8cc00413ee52 e: o:null");
    }

    @Test
    public void test13969() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest27.test13969");
        org.apache.rat.header.HeaderBean headerBean0 = new org.apache.rat.header.HeaderBean();
        boolean boolean1 = headerBean0.isMatch();
        java.util.regex.Pattern pattern2 = null;
        headerBean0.setHeaderPattern(pattern2);
        boolean boolean4 = headerBean0.isMatch();
        java.util.regex.Pattern pattern5 = headerBean0.getHeaderPattern();
        boolean boolean6 = headerBean0.isMatch();
        java.util.regex.Pattern pattern7 = headerBean0.getHeaderPattern();
        boolean boolean8 = headerBean0.isMatch();
        boolean boolean9 = headerBean0.isMatch();
        java.util.regex.Pattern pattern10 = null;
        headerBean0.setHeaderPattern(pattern10);
        org.junit.Assert.assertTrue("'" + boolean1 + "' != '" + false + "'", boolean1 == false);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertNull(pattern5);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertNull(pattern7);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
    }

    @Test
    public void test13970() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest27.test13970");
        org.apache.rat.report.claim.ClaimStatistic claimStatistic0 = new org.apache.rat.report.claim.ClaimStatistic();
        claimStatistic0.setNumApproved((int) (short) 10);
        java.util.Map<java.lang.String, java.lang.Integer> strMap3 = null;
        claimStatistic0.setDocumentCategoryMap(strMap3);
        java.util.Map<java.lang.String, java.lang.Integer> strMap5 = claimStatistic0.getLicenseFileNameMap();
        claimStatistic0.setNumUnknown((int) (byte) -1);
        claimStatistic0.setNumApproved((int) (short) 1);
        java.util.Map<java.lang.String, java.lang.Integer> strMap10 = claimStatistic0.getDocumentCategoryMap();
        java.util.Map<java.lang.String, java.lang.Integer> strMap11 = null;
        claimStatistic0.setDocumentCategoryMap(strMap11);
        int int13 = claimStatistic0.getNumUnknown();
        int int14 = claimStatistic0.getNumUnknown();
        claimStatistic0.setNumUnApproved(26);
        org.junit.Assert.assertNull(strMap5);
        org.junit.Assert.assertNull(strMap10);
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + (-1) + "'", int13 == (-1));
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + (-1) + "'", int14 == (-1));
    }

    @Test
    public void test13971() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest27.test13971");
        org.apache.rat.Defaults.Builder builder0 = org.apache.rat.Defaults.builder();
        org.apache.rat.Defaults defaults1 = builder0.build();
        org.apache.rat.Defaults.Builder builder2 = builder0.noDefault();
        org.apache.rat.Defaults.Builder builder4 = builder0.remove("AllBuilder:");
        org.apache.rat.Defaults.Builder builder6 = builder4.add("?????");
        org.apache.rat.Defaults.Builder builder8 = builder6.remove("");
        org.apache.rat.Defaults.Builder builder10 = builder8.remove("COMMON DEVELOPMENT AND DISTRIBUTION LICENSE Version 1.0");
        org.apache.rat.Defaults.Builder builder12 = builder8.remove("8F0EE536-38AE-476A-A728-DE95E24C13C3");
        org.apache.rat.Defaults.Builder builder14 = builder12.remove("A3B53609-8989-4241-8AA6-1CC947F0D382");
        org.apache.rat.Defaults.Builder builder16 = builder12.add("GNU General Public License, version 2 ");
        org.junit.Assert.assertNotNull(builder0);
        org.junit.Assert.assertNotNull(defaults1);
        org.junit.Assert.assertNotNull(builder2);
        org.junit.Assert.assertNotNull(builder4);
        org.junit.Assert.assertNotNull(builder6);
        org.junit.Assert.assertNotNull(builder8);
        org.junit.Assert.assertNotNull(builder10);
        org.junit.Assert.assertNotNull(builder12);
        org.junit.Assert.assertNotNull(builder14);
        org.junit.Assert.assertNotNull(builder16);
    }

    @Test
    public void test13972() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest27.test13972");
        org.apache.rat.license.ILicense.Builder builder0 = org.apache.rat.license.ILicense.builder();
        org.apache.rat.license.ILicense.Builder builder2 = builder0.setLicenseFamilyCategory("");
        org.apache.rat.license.ILicense.Builder builder4 = builder0.setId("GPL2 ");
        org.apache.rat.license.ILicense.Builder builder6 = builder4.setDerivedFrom("3e2b228d-d5ff-4444-8d8c-d614494b2426");
        org.apache.rat.license.ILicense.Builder builder8 = builder4.setId("SpdxBuilder: null http://org/apache/rat/meta-data#LicenseFamilyName");
        org.apache.rat.license.ILicense.Builder builder10 = builder8.setName("535b5d01-f553-45e5-bb29-a646e4b8b66f");
        org.apache.rat.license.ILicense.Builder builder11 = org.apache.rat.license.ILicense.builder();
        org.apache.rat.license.ILicense.Builder builder13 = builder11.setLicenseFamilyCategory("");
        org.apache.rat.analysis.matchers.CopyrightMatcher copyrightMatcher17 = new org.apache.rat.analysis.matchers.CopyrightMatcher("", "GPL1 ", "hi!");
        org.apache.rat.analysis.IHeaderMatcher.State state18 = copyrightMatcher17.finalizeState();
        org.apache.rat.license.ILicense.Builder builder19 = builder13.setMatcher((org.apache.rat.analysis.IHeaderMatcher) copyrightMatcher17);
        org.apache.rat.analysis.IHeaderMatcher.State state21 = copyrightMatcher17.matches("GPL1 ");
        org.apache.rat.license.ILicense.Builder builder22 = builder10.setMatcher((org.apache.rat.analysis.IHeaderMatcher) copyrightMatcher17);
        org.junit.Assert.assertNotNull(builder0);
        org.junit.Assert.assertNotNull(builder2);
        org.junit.Assert.assertNotNull(builder4);
        org.junit.Assert.assertNotNull(builder6);
        org.junit.Assert.assertNotNull(builder8);
        org.junit.Assert.assertNotNull(builder10);
        org.junit.Assert.assertNotNull(builder11);
        org.junit.Assert.assertNotNull(builder13);
        org.junit.Assert.assertTrue("'" + state18 + "' != '" + org.apache.rat.analysis.IHeaderMatcher.State.f + "'", state18.equals(org.apache.rat.analysis.IHeaderMatcher.State.f));
        org.junit.Assert.assertNotNull(builder19);
        org.junit.Assert.assertTrue("'" + state21 + "' != '" + org.apache.rat.analysis.IHeaderMatcher.State.f + "'", state21.equals(org.apache.rat.analysis.IHeaderMatcher.State.f));
        org.junit.Assert.assertNotNull(builder22);
    }

    @Test
    public void test13973() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest27.test13973");
        org.apache.rat.utils.ReportingSet<java.lang.String> strSet1 = new org.apache.rat.utils.ReportingSet<java.lang.String>();
        int int2 = strSet1.size();
        org.apache.rat.utils.ReportingSet<java.lang.String> strSet4 = strSet1.headSet("?????");
        int int5 = strSet1.size();
        org.apache.rat.license.ILicense[] iLicenseArray6 = new org.apache.rat.license.ILicense[] {};
        java.util.TreeSet<org.apache.rat.license.ILicense> iLicenseSet7 = new java.util.TreeSet<org.apache.rat.license.ILicense>();
        boolean boolean8 = java.util.Collections.addAll((java.util.Collection<org.apache.rat.license.ILicense>) iLicenseSet7, iLicenseArray6);
        java.lang.String[] strArray21 = new java.lang.String[] { "GPL2 ", "GPL1 ", "notice", "http://org/apache/rat/meta-data#LicenseFamilyName", "notice", "GPL2 ", "http://org/apache/rat/meta-data#LicenseFamilyName", "", "GPL2 ", "", "GPL1 ", "hi!" };
        java.util.ArrayList<java.lang.String> strList22 = new java.util.ArrayList<java.lang.String>();
        boolean boolean23 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strList22, strArray21);
        org.apache.rat.license.LicenseSetFactory licenseSetFactory24 = new org.apache.rat.license.LicenseSetFactory((java.util.SortedSet<org.apache.rat.license.ILicense>) iLicenseSet7, (java.util.Collection<java.lang.String>) strList22);
        org.apache.rat.configuration.Format format25 = org.apache.rat.configuration.Format.XML;
        org.apache.rat.configuration.LicenseReader licenseReader26 = format25.licenseReader();
        java.util.SortedSet<java.lang.String> strSet27 = licenseReader26.approvedLicenseId();
        org.apache.rat.license.LicenseSetFactory licenseSetFactory28 = new org.apache.rat.license.LicenseSetFactory((java.util.SortedSet<org.apache.rat.license.ILicense>) iLicenseSet7, (java.util.Collection<java.lang.String>) strSet27);
        org.apache.rat.utils.Log log29 = null;
        org.apache.rat.ReportConfiguration reportConfiguration30 = new org.apache.rat.ReportConfiguration(log29);
        org.apache.rat.report.claim.ClaimStatistic claimStatistic31 = org.apache.rat.Reporter.report(reportConfiguration30);
        org.apache.rat.utils.ReportingSet.Options options32 = org.apache.rat.utils.ReportingSet.Options.OVERWRITE;
        reportConfiguration30.licenseDuplicateOption(options32);
        org.apache.rat.license.ILicenseFamily iLicenseFamily34 = null;
        reportConfiguration30.addFamily(iLicenseFamily34);
        org.apache.rat.Defaults.Builder builder36 = org.apache.rat.Defaults.builder();
        org.apache.rat.Defaults defaults37 = builder36.build();
        org.apache.rat.license.ILicense[] iLicenseArray38 = new org.apache.rat.license.ILicense[] {};
        java.util.TreeSet<org.apache.rat.license.ILicense> iLicenseSet39 = new java.util.TreeSet<org.apache.rat.license.ILicense>();
        boolean boolean40 = java.util.Collections.addAll((java.util.Collection<org.apache.rat.license.ILicense>) iLicenseSet39, iLicenseArray38);
        java.lang.String[] strArray53 = new java.lang.String[] { "GPL2 ", "GPL1 ", "notice", "http://org/apache/rat/meta-data#LicenseFamilyName", "notice", "GPL2 ", "http://org/apache/rat/meta-data#LicenseFamilyName", "", "GPL2 ", "", "GPL1 ", "hi!" };
        java.util.ArrayList<java.lang.String> strList54 = new java.util.ArrayList<java.lang.String>();
        boolean boolean55 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strList54, strArray53);
        org.apache.rat.license.LicenseSetFactory licenseSetFactory56 = new org.apache.rat.license.LicenseSetFactory((java.util.SortedSet<org.apache.rat.license.ILicense>) iLicenseSet39, (java.util.Collection<java.lang.String>) strList54);
        org.apache.rat.utils.Log log57 = null;
        org.apache.rat.ReportConfiguration reportConfiguration58 = new org.apache.rat.ReportConfiguration(log57);
        java.io.FilenameFilter filenameFilter59 = reportConfiguration58.getInputFileFilter();
        org.apache.rat.license.LicenseSetFactory.LicenseFilter licenseFilter60 = org.apache.rat.license.LicenseSetFactory.LicenseFilter.all;
        java.util.SortedSet<org.apache.rat.license.ILicense> iLicenseSet61 = reportConfiguration58.getLicenses(licenseFilter60);
        org.apache.rat.config.AddLicenseHeaders addLicenseHeaders62 = org.apache.rat.config.AddLicenseHeaders.FALSE;
        reportConfiguration58.setAddLicenseHeaders(addLicenseHeaders62);
        org.apache.rat.utils.Log log64 = null;
        org.apache.rat.ReportConfiguration reportConfiguration65 = new org.apache.rat.ReportConfiguration(log64);
        org.apache.rat.report.claim.ClaimStatistic claimStatistic66 = org.apache.rat.Reporter.report(reportConfiguration65);
        org.apache.rat.license.LicenseSetFactory.LicenseFilter licenseFilter67 = org.apache.rat.license.LicenseSetFactory.LicenseFilter.all;
        org.apache.rat.Reporter.listLicenses(reportConfiguration65, licenseFilter67);
        org.apache.rat.Reporter.listLicenses(reportConfiguration58, licenseFilter67);
        org.apache.rat.utils.Log log70 = null;
        org.apache.rat.ReportConfiguration reportConfiguration71 = new org.apache.rat.ReportConfiguration(log70);
        java.io.FilenameFilter filenameFilter72 = reportConfiguration71.getInputFileFilter();
        org.apache.rat.license.LicenseSetFactory.LicenseFilter licenseFilter73 = org.apache.rat.license.LicenseSetFactory.LicenseFilter.all;
        java.util.SortedSet<org.apache.rat.license.ILicense> iLicenseSet74 = reportConfiguration71.getLicenses(licenseFilter73);
        org.apache.rat.config.AddLicenseHeaders addLicenseHeaders75 = org.apache.rat.config.AddLicenseHeaders.FALSE;
        reportConfiguration71.setAddLicenseHeaders(addLicenseHeaders75);
        org.apache.rat.utils.Log log77 = null;
        org.apache.rat.ReportConfiguration reportConfiguration78 = new org.apache.rat.ReportConfiguration(log77);
        org.apache.rat.report.claim.ClaimStatistic claimStatistic79 = org.apache.rat.Reporter.report(reportConfiguration78);
        org.apache.rat.license.LicenseSetFactory.LicenseFilter licenseFilter80 = org.apache.rat.license.LicenseSetFactory.LicenseFilter.all;
        org.apache.rat.Reporter.listLicenses(reportConfiguration78, licenseFilter80);
        org.apache.rat.Reporter.listLicenses(reportConfiguration71, licenseFilter80);
        org.apache.rat.Reporter.listLicenses(reportConfiguration58, licenseFilter80);
        java.util.SortedSet<org.apache.rat.license.ILicense> iLicenseSet84 = licenseSetFactory56.getLicenses(licenseFilter80);
        java.util.SortedSet<org.apache.rat.license.ILicenseFamily> iLicenseFamilySet85 = defaults37.getLicenseFamilies(licenseFilter80);
        java.util.SortedSet<org.apache.rat.license.ILicenseFamily> iLicenseFamilySet86 = reportConfiguration30.getLicenseFamilies(licenseFilter80);
        java.util.SortedSet<org.apache.rat.license.ILicenseFamily> iLicenseFamilySet87 = licenseSetFactory28.getLicenseFamilies(licenseFilter80);
        boolean boolean88 = strSet1.removeAll((java.util.Collection<org.apache.rat.license.ILicenseFamily>) iLicenseFamilySet87);
        org.apache.rat.license.ILicenseFamily iLicenseFamily89 = org.apache.rat.license.LicenseFamilySetFactory.search("43a34b17-dc9c-465e-9004-34a7654ca88f", iLicenseFamilySet87);
        org.junit.Assert.assertTrue("'" + int2 + "' != '" + 0 + "'", int2 == 0);
        org.junit.Assert.assertNotNull(strSet4);
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 0 + "'", int5 == 0);
        org.junit.Assert.assertNotNull(iLicenseArray6);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertNotNull(strArray21);
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + true + "'", boolean23 == true);
        org.junit.Assert.assertTrue("'" + format25 + "' != '" + org.apache.rat.configuration.Format.XML + "'", format25.equals(org.apache.rat.configuration.Format.XML));
        org.junit.Assert.assertNotNull(licenseReader26);
        org.junit.Assert.assertNotNull(strSet27);
        org.junit.Assert.assertNull(claimStatistic31);
        org.junit.Assert.assertTrue("'" + options32 + "' != '" + org.apache.rat.utils.ReportingSet.Options.OVERWRITE + "'", options32.equals(org.apache.rat.utils.ReportingSet.Options.OVERWRITE));
        org.junit.Assert.assertNotNull(builder36);
        org.junit.Assert.assertNotNull(defaults37);
        org.junit.Assert.assertNotNull(iLicenseArray38);
        org.junit.Assert.assertTrue("'" + boolean40 + "' != '" + false + "'", boolean40 == false);
        org.junit.Assert.assertNotNull(strArray53);
        org.junit.Assert.assertTrue("'" + boolean55 + "' != '" + true + "'", boolean55 == true);
        org.junit.Assert.assertNull(filenameFilter59);
        org.junit.Assert.assertTrue("'" + licenseFilter60 + "' != '" + org.apache.rat.license.LicenseSetFactory.LicenseFilter.all + "'", licenseFilter60.equals(org.apache.rat.license.LicenseSetFactory.LicenseFilter.all));
        org.junit.Assert.assertNotNull(iLicenseSet61);
        org.junit.Assert.assertTrue("'" + addLicenseHeaders62 + "' != '" + org.apache.rat.config.AddLicenseHeaders.FALSE + "'", addLicenseHeaders62.equals(org.apache.rat.config.AddLicenseHeaders.FALSE));
        org.junit.Assert.assertNull(claimStatistic66);
        org.junit.Assert.assertTrue("'" + licenseFilter67 + "' != '" + org.apache.rat.license.LicenseSetFactory.LicenseFilter.all + "'", licenseFilter67.equals(org.apache.rat.license.LicenseSetFactory.LicenseFilter.all));
        org.junit.Assert.assertNull(filenameFilter72);
        org.junit.Assert.assertTrue("'" + licenseFilter73 + "' != '" + org.apache.rat.license.LicenseSetFactory.LicenseFilter.all + "'", licenseFilter73.equals(org.apache.rat.license.LicenseSetFactory.LicenseFilter.all));
        org.junit.Assert.assertNotNull(iLicenseSet74);
        org.junit.Assert.assertTrue("'" + addLicenseHeaders75 + "' != '" + org.apache.rat.config.AddLicenseHeaders.FALSE + "'", addLicenseHeaders75.equals(org.apache.rat.config.AddLicenseHeaders.FALSE));
        org.junit.Assert.assertNull(claimStatistic79);
        org.junit.Assert.assertTrue("'" + licenseFilter80 + "' != '" + org.apache.rat.license.LicenseSetFactory.LicenseFilter.all + "'", licenseFilter80.equals(org.apache.rat.license.LicenseSetFactory.LicenseFilter.all));
        org.junit.Assert.assertNotNull(iLicenseSet84);
        org.junit.Assert.assertNotNull(iLicenseFamilySet85);
        org.junit.Assert.assertNotNull(iLicenseFamilySet86);
        org.junit.Assert.assertNotNull(iLicenseFamilySet87);
        org.junit.Assert.assertTrue("'" + boolean88 + "' != '" + false + "'", boolean88 == false);
        org.junit.Assert.assertNull(iLicenseFamily89);
    }

    @Test
    public void test13974() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest27.test13974");
        org.apache.rat.api.MetaData.Datum datum2 = new org.apache.rat.api.MetaData.Datum("DOJO ", "a357a28e-849d-4383-9cc0-95ecd482d23e");
        java.lang.String str3 = datum2.toString();
        org.junit.Assert.assertEquals("'" + str3 + "' != '" + "Datum [ name ='DOJO ',value ='a357a28e-849d-4383-9cc0-95ecd482d23e ']" + "'", str3, "Datum [ name ='DOJO ',value ='a357a28e-849d-4383-9cc0-95ecd482d23e ']");
    }

    @Test
    public void test13975() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest27.test13975");
        org.apache.rat.utils.DefaultLog defaultLog0 = org.apache.rat.utils.DefaultLog.INSTANCE;
        org.apache.rat.configuration.builders.AllBuilder allBuilder1 = new org.apache.rat.configuration.builders.AllBuilder();
        org.apache.rat.configuration.builders.MatcherRefBuilder matcherRefBuilder2 = org.apache.rat.analysis.IHeaderMatcher.Builder.matcherRef();
        boolean boolean3 = matcherRefBuilder2.hasId();
        java.lang.String str4 = matcherRefBuilder2.toString();
        org.apache.rat.configuration.builders.AnyBuilder anyBuilder5 = org.apache.rat.analysis.IHeaderMatcher.Builder.any();
        org.apache.rat.configuration.builders.NotBuilder notBuilder6 = new org.apache.rat.configuration.builders.NotBuilder();
        java.lang.String str7 = notBuilder6.toString();
        org.apache.rat.configuration.builders.MatcherRefBuilder matcherRefBuilder8 = org.apache.rat.analysis.IHeaderMatcher.Builder.matcherRef();
        boolean boolean9 = matcherRefBuilder8.hasId();
        java.util.Map<java.lang.String, org.apache.rat.analysis.IHeaderMatcher> strMap10 = null;
        org.apache.rat.configuration.builders.MatcherRefBuilder matcherRefBuilder11 = matcherRefBuilder8.setMatchers(strMap10);
        org.apache.rat.configuration.builders.AllBuilder allBuilder12 = new org.apache.rat.configuration.builders.AllBuilder();
        org.apache.rat.configuration.builders.CopyrightBuilder copyrightBuilder13 = org.apache.rat.analysis.IHeaderMatcher.Builder.copyright();
        org.apache.rat.configuration.builders.CopyrightBuilder copyrightBuilder15 = copyrightBuilder13.setStart("OASIS");
        java.lang.String str16 = copyrightBuilder13.toString();
        org.apache.rat.configuration.builders.CopyrightBuilder copyrightBuilder18 = copyrightBuilder13.setStart("223f0aba-15d4-49e9-901e-5740c137aebf");
        org.apache.rat.configuration.builders.MatcherRefBuilder matcherRefBuilder19 = org.apache.rat.analysis.IHeaderMatcher.Builder.matcherRef();
        boolean boolean20 = matcherRefBuilder19.hasId();
        org.apache.rat.configuration.builders.CopyrightBuilder copyrightBuilder21 = org.apache.rat.analysis.IHeaderMatcher.Builder.copyright();
        org.apache.rat.configuration.builders.CopyrightBuilder copyrightBuilder23 = copyrightBuilder21.setStart("OASIS");
        java.lang.String str24 = copyrightBuilder21.toString();
        org.apache.rat.configuration.builders.CopyrightBuilder copyrightBuilder26 = copyrightBuilder21.setStart("223f0aba-15d4-49e9-901e-5740c137aebf");
        org.apache.rat.configuration.builders.CopyrightBuilder copyrightBuilder27 = org.apache.rat.analysis.IHeaderMatcher.Builder.copyright();
        org.apache.rat.configuration.builders.CopyrightBuilder copyrightBuilder28 = org.apache.rat.analysis.IHeaderMatcher.Builder.copyright();
        java.lang.String str29 = copyrightBuilder28.toString();
        org.apache.rat.configuration.builders.CopyrightBuilder copyrightBuilder31 = copyrightBuilder28.setEnd(".cvsignore");
        boolean boolean32 = copyrightBuilder28.hasId();
        org.apache.rat.configuration.builders.CopyrightBuilder copyrightBuilder33 = org.apache.rat.analysis.IHeaderMatcher.Builder.copyright();
        java.lang.String str34 = copyrightBuilder33.toString();
        org.apache.rat.configuration.builders.CopyrightBuilder copyrightBuilder36 = copyrightBuilder33.setEnd(".cvsignore");
        boolean boolean37 = copyrightBuilder33.hasId();
        java.lang.String str38 = copyrightBuilder33.toString();
        org.apache.rat.configuration.builders.CopyrightBuilder copyrightBuilder39 = org.apache.rat.analysis.IHeaderMatcher.Builder.copyright();
        org.apache.rat.configuration.builders.CopyrightBuilder copyrightBuilder41 = copyrightBuilder39.setStart("OASIS");
        org.apache.rat.configuration.builders.AnyBuilder anyBuilder42 = org.apache.rat.analysis.IHeaderMatcher.Builder.any();
        org.apache.rat.configuration.builders.MatcherRefBuilder matcherRefBuilder43 = org.apache.rat.analysis.IHeaderMatcher.Builder.matcherRef();
        boolean boolean44 = matcherRefBuilder43.hasId();
        java.util.Map<java.lang.String, org.apache.rat.analysis.IHeaderMatcher> strMap45 = null;
        org.apache.rat.configuration.builders.MatcherRefBuilder matcherRefBuilder46 = matcherRefBuilder43.setMatchers(strMap45);
        org.apache.rat.configuration.builders.CopyrightBuilder copyrightBuilder47 = org.apache.rat.analysis.IHeaderMatcher.Builder.copyright();
        org.apache.rat.configuration.builders.MatcherRefBuilder matcherRefBuilder48 = org.apache.rat.analysis.IHeaderMatcher.Builder.matcherRef();
        boolean boolean49 = matcherRefBuilder48.hasId();
        java.lang.String str50 = matcherRefBuilder48.toString();
        java.util.Map<java.lang.String, org.apache.rat.analysis.IHeaderMatcher> strMap51 = null;
        org.apache.rat.configuration.builders.MatcherRefBuilder matcherRefBuilder52 = matcherRefBuilder48.setMatchers(strMap51);
        org.apache.rat.analysis.IHeaderMatcher.Builder[] builderArray53 = new org.apache.rat.analysis.IHeaderMatcher.Builder[] { matcherRefBuilder8, allBuilder12, copyrightBuilder18, matcherRefBuilder19, copyrightBuilder21, copyrightBuilder27, copyrightBuilder28, copyrightBuilder33, copyrightBuilder39, anyBuilder42, matcherRefBuilder43, copyrightBuilder47, matcherRefBuilder48 };
        java.util.ArrayList<org.apache.rat.analysis.IHeaderMatcher.Builder> builderList54 = new java.util.ArrayList<org.apache.rat.analysis.IHeaderMatcher.Builder>();
        boolean boolean55 = java.util.Collections.addAll((java.util.Collection<org.apache.rat.analysis.IHeaderMatcher.Builder>) builderList54, builderArray53);
        org.apache.rat.configuration.builders.AbstractBuilder abstractBuilder56 = notBuilder6.add((java.util.Collection<org.apache.rat.analysis.IHeaderMatcher.Builder>) builderList54);
        org.apache.rat.configuration.builders.MatcherRefBuilder matcherRefBuilder57 = new org.apache.rat.configuration.builders.MatcherRefBuilder();
        org.apache.rat.analysis.IHeaderMatcher.Builder[] builderArray58 = new org.apache.rat.analysis.IHeaderMatcher.Builder[] { matcherRefBuilder2, anyBuilder5, notBuilder6, matcherRefBuilder57 };
        java.util.ArrayList<org.apache.rat.analysis.IHeaderMatcher.Builder> builderList59 = new java.util.ArrayList<org.apache.rat.analysis.IHeaderMatcher.Builder>();
        boolean boolean60 = java.util.Collections.addAll((java.util.Collection<org.apache.rat.analysis.IHeaderMatcher.Builder>) builderList59, builderArray58);
        org.apache.rat.configuration.builders.AbstractBuilder abstractBuilder61 = allBuilder1.add((java.util.Collection<org.apache.rat.analysis.IHeaderMatcher.Builder>) builderList59);
        defaultLog0.info((java.lang.Object) allBuilder1);
        org.apache.rat.ReportConfiguration reportConfiguration63 = new org.apache.rat.ReportConfiguration((org.apache.rat.utils.Log) defaultLog0);
        java.io.File file64 = null;
        // The following exception was thrown during execution in test generation
        try {
            reportConfiguration63.setOut(file64);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: output file should not be null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(defaultLog0);
        org.junit.Assert.assertNotNull(matcherRefBuilder2);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "MathcerRefBuilder: null" + "'", str4, "MathcerRefBuilder: null");
        org.junit.Assert.assertNotNull(anyBuilder5);
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "NotBuilder: null" + "'", str7, "NotBuilder: null");
        org.junit.Assert.assertNotNull(matcherRefBuilder8);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertNotNull(matcherRefBuilder11);
        org.junit.Assert.assertNotNull(copyrightBuilder13);
        org.junit.Assert.assertNotNull(copyrightBuilder15);
        org.junit.Assert.assertEquals("'" + str16 + "' != '" + "Copyright Builder: s:OASIS e:null o:null" + "'", str16, "Copyright Builder: s:OASIS e:null o:null");
        org.junit.Assert.assertNotNull(copyrightBuilder18);
        org.junit.Assert.assertNotNull(matcherRefBuilder19);
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + false + "'", boolean20 == false);
        org.junit.Assert.assertNotNull(copyrightBuilder21);
        org.junit.Assert.assertNotNull(copyrightBuilder23);
        org.junit.Assert.assertEquals("'" + str24 + "' != '" + "Copyright Builder: s:OASIS e:null o:null" + "'", str24, "Copyright Builder: s:OASIS e:null o:null");
        org.junit.Assert.assertNotNull(copyrightBuilder26);
        org.junit.Assert.assertNotNull(copyrightBuilder27);
        org.junit.Assert.assertNotNull(copyrightBuilder28);
        org.junit.Assert.assertEquals("'" + str29 + "' != '" + "Copyright Builder: s:null e:null o:null" + "'", str29, "Copyright Builder: s:null e:null o:null");
        org.junit.Assert.assertNotNull(copyrightBuilder31);
        org.junit.Assert.assertTrue("'" + boolean32 + "' != '" + false + "'", boolean32 == false);
        org.junit.Assert.assertNotNull(copyrightBuilder33);
        org.junit.Assert.assertEquals("'" + str34 + "' != '" + "Copyright Builder: s:null e:null o:null" + "'", str34, "Copyright Builder: s:null e:null o:null");
        org.junit.Assert.assertNotNull(copyrightBuilder36);
        org.junit.Assert.assertTrue("'" + boolean37 + "' != '" + false + "'", boolean37 == false);
        org.junit.Assert.assertEquals("'" + str38 + "' != '" + "Copyright Builder: s:null e:.cvsignore o:null" + "'", str38, "Copyright Builder: s:null e:.cvsignore o:null");
        org.junit.Assert.assertNotNull(copyrightBuilder39);
        org.junit.Assert.assertNotNull(copyrightBuilder41);
        org.junit.Assert.assertNotNull(anyBuilder42);
        org.junit.Assert.assertNotNull(matcherRefBuilder43);
        org.junit.Assert.assertTrue("'" + boolean44 + "' != '" + false + "'", boolean44 == false);
        org.junit.Assert.assertNotNull(matcherRefBuilder46);
        org.junit.Assert.assertNotNull(copyrightBuilder47);
        org.junit.Assert.assertNotNull(matcherRefBuilder48);
        org.junit.Assert.assertTrue("'" + boolean49 + "' != '" + false + "'", boolean49 == false);
        org.junit.Assert.assertEquals("'" + str50 + "' != '" + "MathcerRefBuilder: null" + "'", str50, "MathcerRefBuilder: null");
        org.junit.Assert.assertNotNull(matcherRefBuilder52);
        org.junit.Assert.assertNotNull(builderArray53);
        org.junit.Assert.assertTrue("'" + boolean55 + "' != '" + true + "'", boolean55 == true);
        org.junit.Assert.assertNotNull(abstractBuilder56);
        org.junit.Assert.assertNotNull(builderArray58);
        org.junit.Assert.assertTrue("'" + boolean60 + "' != '" + true + "'", boolean60 == true);
        org.junit.Assert.assertNotNull(abstractBuilder61);
    }

    @Test
    public void test13976() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest27.test13976");
        org.apache.rat.utils.Log log0 = null;
        org.apache.rat.ReportConfiguration reportConfiguration1 = new org.apache.rat.ReportConfiguration(log0);
        org.apache.rat.report.claim.ClaimStatistic claimStatistic2 = org.apache.rat.Reporter.report(reportConfiguration1);
        reportConfiguration1.addApprovedLicenseCategory("Copyright Builder: s:null e:null o:null");
        java.util.SortedSet<java.lang.String> strSet5 = reportConfiguration1.getApprovedLicenseCategories();
        java.io.FilenameFilter filenameFilter6 = reportConfiguration1.getInputFileFilter();
        org.apache.rat.utils.Log log7 = null;
        org.apache.rat.ReportConfiguration reportConfiguration8 = new org.apache.rat.ReportConfiguration(log7);
        org.apache.rat.report.claim.ClaimStatistic claimStatistic9 = org.apache.rat.Reporter.report(reportConfiguration8);
        org.apache.rat.utils.ReportingSet.Options options10 = org.apache.rat.utils.ReportingSet.Options.OVERWRITE;
        reportConfiguration8.licenseDuplicateOption(options10);
        java.util.SortedSet<org.apache.rat.license.ILicenseFamily> iLicenseFamilySet13 = org.apache.rat.license.LicenseFamilySetFactory.emptyLicenseFamilySet();
        org.apache.rat.license.ILicenseFamily iLicenseFamily14 = org.apache.rat.license.LicenseFamilySetFactory.search("http://org/apache/rat/meta-data", iLicenseFamilySet13);
        org.apache.rat.policy.DefaultPolicy defaultPolicy15 = new org.apache.rat.policy.DefaultPolicy((java.util.Collection<org.apache.rat.license.ILicenseFamily>) iLicenseFamilySet13);
        reportConfiguration8.addFamilies((java.util.Collection<org.apache.rat.license.ILicenseFamily>) iLicenseFamilySet13);
        org.apache.rat.utils.ReportingSet<java.lang.String> strSet17 = new org.apache.rat.utils.ReportingSet<java.lang.String>();
        java.lang.Object[] objArray18 = strSet17.toArray();
        org.apache.rat.license.LicenseFamilySetFactory licenseFamilySetFactory19 = new org.apache.rat.license.LicenseFamilySetFactory(iLicenseFamilySet13, (java.util.Collection<java.lang.String>) strSet17);
        reportConfiguration1.addApprovedLicenseCategories((java.util.Collection<java.lang.String>) strSet17);
        org.apache.rat.utils.Log log21 = null;
        org.apache.rat.ReportConfiguration reportConfiguration22 = new org.apache.rat.ReportConfiguration(log21);
        org.apache.rat.report.claim.ClaimStatistic claimStatistic23 = org.apache.rat.Reporter.report(reportConfiguration22);
        org.apache.rat.utils.Log log24 = null;
        org.apache.rat.ReportConfiguration reportConfiguration25 = new org.apache.rat.ReportConfiguration(log24);
        org.apache.rat.report.claim.ClaimStatistic claimStatistic26 = org.apache.rat.Reporter.report(reportConfiguration25);
        org.apache.rat.utils.ReportingSet.Options options27 = org.apache.rat.utils.ReportingSet.Options.OVERWRITE;
        reportConfiguration25.licenseDuplicateOption(options27);
        reportConfiguration22.familyDuplicateOption(options27);
        reportConfiguration1.familyDuplicateOption(options27);
        java.lang.String str31 = reportConfiguration1.getCopyrightMessage();
        org.junit.Assert.assertNull(claimStatistic2);
        org.junit.Assert.assertNotNull(strSet5);
        org.junit.Assert.assertNull(filenameFilter6);
        org.junit.Assert.assertNull(claimStatistic9);
        org.junit.Assert.assertTrue("'" + options10 + "' != '" + org.apache.rat.utils.ReportingSet.Options.OVERWRITE + "'", options10.equals(org.apache.rat.utils.ReportingSet.Options.OVERWRITE));
        org.junit.Assert.assertNotNull(iLicenseFamilySet13);
        org.junit.Assert.assertNull(iLicenseFamily14);
        org.junit.Assert.assertNotNull(objArray18);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray18), "[]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray18), "[]");
        org.junit.Assert.assertNull(claimStatistic23);
        org.junit.Assert.assertNull(claimStatistic26);
        org.junit.Assert.assertTrue("'" + options27 + "' != '" + org.apache.rat.utils.ReportingSet.Options.OVERWRITE + "'", options27.equals(org.apache.rat.utils.ReportingSet.Options.OVERWRITE));
        org.junit.Assert.assertNull(str31);
    }

    @Test
    public void test13977() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest27.test13977");
        org.apache.rat.analysis.license.FullTextMatchingLicense fullTextMatchingLicense0 = new org.apache.rat.analysis.license.FullTextMatchingLicense();
        fullTextMatchingLicense0.setLicenseFamilyName("hi!");
        java.lang.String str3 = fullTextMatchingLicense0.getLicenseFamilyCategory();
        java.lang.String str4 = fullTextMatchingLicense0.getLicenseFamilyName();
        fullTextMatchingLicense0.setLicenseFamilyName("http://org/apache/rat/meta-data#LicenseFamilyName");
        java.lang.String str7 = fullTextMatchingLicense0.getLicenseFamilyName();
        fullTextMatchingLicense0.setLicenseFamilyCategory("ed0faf32-f32c-46f1-a629-4fe87704cb0e");
        java.lang.String str10 = fullTextMatchingLicense0.getNotes();
        java.lang.String str11 = fullTextMatchingLicense0.getNotes();
        org.junit.Assert.assertNull(str3);
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "hi!" + "'", str4, "hi!");
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "http://org/apache/rat/meta-data#LicenseFamilyName" + "'", str7, "http://org/apache/rat/meta-data#LicenseFamilyName");
        org.junit.Assert.assertNull(str10);
        org.junit.Assert.assertNull(str11);
    }

    @Test
    public void test13978() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest27.test13978");
        org.apache.rat.utils.Log log0 = null;
        org.apache.rat.ReportConfiguration reportConfiguration1 = new org.apache.rat.ReportConfiguration(log0);
        org.apache.rat.report.claim.ClaimStatistic claimStatistic2 = org.apache.rat.Reporter.report(reportConfiguration1);
        org.apache.rat.utils.Log log3 = null;
        org.apache.rat.ReportConfiguration reportConfiguration4 = new org.apache.rat.ReportConfiguration(log3);
        org.apache.rat.report.claim.ClaimStatistic claimStatistic5 = org.apache.rat.Reporter.report(reportConfiguration4);
        org.apache.rat.utils.ReportingSet.Options options6 = org.apache.rat.utils.ReportingSet.Options.OVERWRITE;
        reportConfiguration4.licenseDuplicateOption(options6);
        reportConfiguration1.familyDuplicateOption(options6);
        org.apache.commons.io.function.IOSupplier<java.io.PrintWriter> printWriterIOSupplier9 = reportConfiguration1.getWriter();
        boolean boolean10 = reportConfiguration1.isAddingLicensesForced();
        java.io.FilenameFilter filenameFilter11 = reportConfiguration1.getInputFileFilter();
        java.io.FilenameFilter filenameFilter12 = reportConfiguration1.getInputFileFilter();
        boolean boolean13 = reportConfiguration1.isStyleReport();
        org.apache.rat.utils.Log log14 = reportConfiguration1.getLog();
        org.apache.rat.utils.ReportingSet.Options options15 = org.apache.rat.utils.ReportingSet.Options.IGNORE;
        reportConfiguration1.familyDuplicateOption(options15);
        org.junit.Assert.assertNull(claimStatistic2);
        org.junit.Assert.assertNull(claimStatistic5);
        org.junit.Assert.assertTrue("'" + options6 + "' != '" + org.apache.rat.utils.ReportingSet.Options.OVERWRITE + "'", options6.equals(org.apache.rat.utils.ReportingSet.Options.OVERWRITE));
        org.junit.Assert.assertNotNull(printWriterIOSupplier9);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertNull(filenameFilter11);
        org.junit.Assert.assertNull(filenameFilter12);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + true + "'", boolean13 == true);
        org.junit.Assert.assertNull(log14);
        org.junit.Assert.assertTrue("'" + options15 + "' != '" + org.apache.rat.utils.ReportingSet.Options.IGNORE + "'", options15.equals(org.apache.rat.utils.ReportingSet.Options.IGNORE));
    }

    @Test
    public void test13979() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest27.test13979");
        org.apache.rat.utils.Log log0 = null;
        org.apache.rat.ReportConfiguration reportConfiguration1 = new org.apache.rat.ReportConfiguration(log0);
        org.apache.rat.utils.ReportingSet.Options options2 = org.apache.rat.utils.ReportingSet.Options.OVERWRITE;
        reportConfiguration1.licenseDuplicateOption(options2);
        org.apache.rat.utils.Log log4 = null;
        org.apache.rat.ReportConfiguration reportConfiguration5 = new org.apache.rat.ReportConfiguration(log4);
        java.io.FilenameFilter filenameFilter6 = reportConfiguration5.getInputFileFilter();
        org.apache.rat.license.LicenseSetFactory.LicenseFilter licenseFilter7 = org.apache.rat.license.LicenseSetFactory.LicenseFilter.all;
        java.util.SortedSet<org.apache.rat.license.ILicense> iLicenseSet8 = reportConfiguration5.getLicenses(licenseFilter7);
        org.apache.rat.config.AddLicenseHeaders addLicenseHeaders9 = org.apache.rat.config.AddLicenseHeaders.FALSE;
        reportConfiguration5.setAddLicenseHeaders(addLicenseHeaders9);
        org.apache.rat.utils.Log log11 = null;
        org.apache.rat.ReportConfiguration reportConfiguration12 = new org.apache.rat.ReportConfiguration(log11);
        org.apache.rat.report.claim.ClaimStatistic claimStatistic13 = org.apache.rat.Reporter.report(reportConfiguration12);
        org.apache.rat.license.LicenseSetFactory.LicenseFilter licenseFilter14 = org.apache.rat.license.LicenseSetFactory.LicenseFilter.all;
        org.apache.rat.Reporter.listLicenses(reportConfiguration12, licenseFilter14);
        org.apache.rat.Reporter.listLicenses(reportConfiguration5, licenseFilter14);
        org.apache.rat.utils.Log log17 = null;
        org.apache.rat.ReportConfiguration reportConfiguration18 = new org.apache.rat.ReportConfiguration(log17);
        java.io.FilenameFilter filenameFilter19 = reportConfiguration18.getInputFileFilter();
        org.apache.rat.license.LicenseSetFactory.LicenseFilter licenseFilter20 = org.apache.rat.license.LicenseSetFactory.LicenseFilter.all;
        java.util.SortedSet<org.apache.rat.license.ILicense> iLicenseSet21 = reportConfiguration18.getLicenses(licenseFilter20);
        org.apache.rat.config.AddLicenseHeaders addLicenseHeaders22 = org.apache.rat.config.AddLicenseHeaders.FALSE;
        reportConfiguration18.setAddLicenseHeaders(addLicenseHeaders22);
        org.apache.rat.utils.Log log24 = null;
        org.apache.rat.ReportConfiguration reportConfiguration25 = new org.apache.rat.ReportConfiguration(log24);
        org.apache.rat.report.claim.ClaimStatistic claimStatistic26 = org.apache.rat.Reporter.report(reportConfiguration25);
        org.apache.rat.license.LicenseSetFactory.LicenseFilter licenseFilter27 = org.apache.rat.license.LicenseSetFactory.LicenseFilter.all;
        org.apache.rat.Reporter.listLicenses(reportConfiguration25, licenseFilter27);
        org.apache.rat.Reporter.listLicenses(reportConfiguration18, licenseFilter27);
        org.apache.rat.Reporter.listLicenses(reportConfiguration5, licenseFilter27);
        org.apache.rat.utils.Log log31 = null;
        org.apache.rat.ReportConfiguration reportConfiguration32 = new org.apache.rat.ReportConfiguration(log31);
        org.apache.commons.io.function.IOSupplier<java.io.OutputStream> outputStreamIOSupplier33 = reportConfiguration32.getOutput();
        reportConfiguration5.setOut(outputStreamIOSupplier33);
        org.apache.rat.utils.Log.Level level35 = org.apache.rat.utils.Log.Level.WARN;
        reportConfiguration5.logLicenseCollisions(level35);
        org.apache.commons.io.filefilter.IOFileFilter iOFileFilter37 = reportConfiguration5.getDirectoryFilter();
        reportConfiguration1.setInputFileFilter((java.io.FilenameFilter) iOFileFilter37);
        java.nio.file.Path path39 = null;
        boolean boolean40 = iOFileFilter37.matches(path39);
        org.apache.commons.io.filefilter.IOFileFilter iOFileFilter41 = iOFileFilter37.negate();
        org.apache.commons.io.filefilter.IOFileFilter iOFileFilter42 = iOFileFilter41.negate();
        java.nio.file.Path path43 = null;
        java.nio.file.attribute.BasicFileAttributes basicFileAttributes44 = null;
        java.nio.file.FileVisitResult fileVisitResult45 = iOFileFilter41.accept(path43, basicFileAttributes44);
        org.junit.Assert.assertTrue("'" + options2 + "' != '" + org.apache.rat.utils.ReportingSet.Options.OVERWRITE + "'", options2.equals(org.apache.rat.utils.ReportingSet.Options.OVERWRITE));
        org.junit.Assert.assertNull(filenameFilter6);
        org.junit.Assert.assertTrue("'" + licenseFilter7 + "' != '" + org.apache.rat.license.LicenseSetFactory.LicenseFilter.all + "'", licenseFilter7.equals(org.apache.rat.license.LicenseSetFactory.LicenseFilter.all));
        org.junit.Assert.assertNotNull(iLicenseSet8);
        org.junit.Assert.assertTrue("'" + addLicenseHeaders9 + "' != '" + org.apache.rat.config.AddLicenseHeaders.FALSE + "'", addLicenseHeaders9.equals(org.apache.rat.config.AddLicenseHeaders.FALSE));
        org.junit.Assert.assertNull(claimStatistic13);
        org.junit.Assert.assertTrue("'" + licenseFilter14 + "' != '" + org.apache.rat.license.LicenseSetFactory.LicenseFilter.all + "'", licenseFilter14.equals(org.apache.rat.license.LicenseSetFactory.LicenseFilter.all));
        org.junit.Assert.assertNull(filenameFilter19);
        org.junit.Assert.assertTrue("'" + licenseFilter20 + "' != '" + org.apache.rat.license.LicenseSetFactory.LicenseFilter.all + "'", licenseFilter20.equals(org.apache.rat.license.LicenseSetFactory.LicenseFilter.all));
        org.junit.Assert.assertNotNull(iLicenseSet21);
        org.junit.Assert.assertTrue("'" + addLicenseHeaders22 + "' != '" + org.apache.rat.config.AddLicenseHeaders.FALSE + "'", addLicenseHeaders22.equals(org.apache.rat.config.AddLicenseHeaders.FALSE));
        org.junit.Assert.assertNull(claimStatistic26);
        org.junit.Assert.assertTrue("'" + licenseFilter27 + "' != '" + org.apache.rat.license.LicenseSetFactory.LicenseFilter.all + "'", licenseFilter27.equals(org.apache.rat.license.LicenseSetFactory.LicenseFilter.all));
        org.junit.Assert.assertNotNull(outputStreamIOSupplier33);
        org.junit.Assert.assertTrue("'" + level35 + "' != '" + org.apache.rat.utils.Log.Level.WARN + "'", level35.equals(org.apache.rat.utils.Log.Level.WARN));
        org.junit.Assert.assertNotNull(iOFileFilter37);
        org.junit.Assert.assertTrue("'" + boolean40 + "' != '" + false + "'", boolean40 == false);
        org.junit.Assert.assertNotNull(iOFileFilter41);
        org.junit.Assert.assertNotNull(iOFileFilter42);
        org.junit.Assert.assertTrue("'" + fileVisitResult45 + "' != '" + java.nio.file.FileVisitResult.CONTINUE + "'", fileVisitResult45.equals(java.nio.file.FileVisitResult.CONTINUE));
    }

    @Test
    public void test13980() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest27.test13980");
        org.apache.rat.analysis.matchers.FullTextMatcher fullTextMatcher2 = new org.apache.rat.analysis.matchers.FullTextMatcher("http://org/apache/rat/meta-data", "Apache License Version 2.0");
        org.apache.rat.analysis.IHeaderMatcher.State state3 = fullTextMatcher2.currentState();
        org.apache.rat.analysis.matchers.NotMatcher notMatcher4 = new org.apache.rat.analysis.matchers.NotMatcher((org.apache.rat.analysis.IHeaderMatcher) fullTextMatcher2);
        org.apache.rat.analysis.IHeaderMatcher.State state6 = notMatcher4.matches("2b7a7df2-0dac-406a-96b5-ea6b08e88337");
        org.apache.rat.analysis.IHeaderMatcher.State state8 = notMatcher4.matches("RegexBuilder: d4148d3a-edbc-4672-b347-0fa619553f91");
        org.apache.rat.analysis.IHeaderMatcher.State state10 = notMatcher4.matches("2f88b0fb-cbe0-494f-a237-c14d76af3d76");
        org.apache.rat.analysis.IHeaderMatcher.State state11 = notMatcher4.currentState();
        org.apache.rat.analysis.IHeaderMatcher.State state12 = notMatcher4.currentState();
        org.junit.Assert.assertTrue("'" + state3 + "' != '" + org.apache.rat.analysis.IHeaderMatcher.State.i + "'", state3.equals(org.apache.rat.analysis.IHeaderMatcher.State.i));
        org.junit.Assert.assertTrue("'" + state6 + "' != '" + org.apache.rat.analysis.IHeaderMatcher.State.i + "'", state6.equals(org.apache.rat.analysis.IHeaderMatcher.State.i));
        org.junit.Assert.assertTrue("'" + state8 + "' != '" + org.apache.rat.analysis.IHeaderMatcher.State.i + "'", state8.equals(org.apache.rat.analysis.IHeaderMatcher.State.i));
        org.junit.Assert.assertTrue("'" + state10 + "' != '" + org.apache.rat.analysis.IHeaderMatcher.State.i + "'", state10.equals(org.apache.rat.analysis.IHeaderMatcher.State.i));
        org.junit.Assert.assertTrue("'" + state11 + "' != '" + org.apache.rat.analysis.IHeaderMatcher.State.i + "'", state11.equals(org.apache.rat.analysis.IHeaderMatcher.State.i));
        org.junit.Assert.assertTrue("'" + state12 + "' != '" + org.apache.rat.analysis.IHeaderMatcher.State.i + "'", state12.equals(org.apache.rat.analysis.IHeaderMatcher.State.i));
    }

    @Test
    public void test13981() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest27.test13981");
        org.apache.rat.analysis.matchers.FullTextMatcher fullTextMatcher1 = new org.apache.rat.analysis.matchers.FullTextMatcher("Datum [ name ='http://org/apache/rat/meta-data#LicenseFamilyName',value ='Academic Free License, Version 2.1 ']");
        fullTextMatcher1.reset();
        fullTextMatcher1.reset();
        org.apache.rat.analysis.IHeaderMatcher.State state4 = fullTextMatcher1.finalizeState();
        fullTextMatcher1.reset();
        org.junit.Assert.assertTrue("'" + state4 + "' != '" + org.apache.rat.analysis.IHeaderMatcher.State.f + "'", state4.equals(org.apache.rat.analysis.IHeaderMatcher.State.f));
    }

    @Test
    public void test13982() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest27.test13982");
        org.apache.rat.configuration.builders.CopyrightBuilder copyrightBuilder0 = org.apache.rat.analysis.IHeaderMatcher.Builder.copyright();
        java.lang.String str1 = copyrightBuilder0.toString();
        org.apache.rat.configuration.builders.CopyrightBuilder copyrightBuilder3 = copyrightBuilder0.setEnd(".cvsignore");
        boolean boolean4 = copyrightBuilder0.hasId();
        org.apache.rat.configuration.builders.CopyrightBuilder copyrightBuilder6 = copyrightBuilder0.setEnd("notice");
        org.apache.rat.configuration.builders.CopyrightBuilder copyrightBuilder8 = copyrightBuilder6.setEnd("9df69ca9-2229-47b6-966b-221652fd7d08");
        org.apache.rat.configuration.builders.CopyrightBuilder copyrightBuilder10 = copyrightBuilder6.setStart("GNU General Public License, version 1");
        org.apache.rat.analysis.IHeaderMatcher iHeaderMatcher11 = copyrightBuilder6.build();
        org.apache.rat.analysis.IHeaderMatcher iHeaderMatcher12 = copyrightBuilder6.build();
        org.junit.Assert.assertNotNull(copyrightBuilder0);
        org.junit.Assert.assertEquals("'" + str1 + "' != '" + "Copyright Builder: s:null e:null o:null" + "'", str1, "Copyright Builder: s:null e:null o:null");
        org.junit.Assert.assertNotNull(copyrightBuilder3);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertNotNull(copyrightBuilder6);
        org.junit.Assert.assertNotNull(copyrightBuilder8);
        org.junit.Assert.assertNotNull(copyrightBuilder10);
        org.junit.Assert.assertNotNull(iHeaderMatcher11);
        org.junit.Assert.assertNotNull(iHeaderMatcher12);
    }

    @Test
    public void test13983() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest27.test13983");
        org.apache.rat.utils.Log log0 = null;
        org.apache.rat.ReportConfiguration reportConfiguration1 = new org.apache.rat.ReportConfiguration(log0);
        org.apache.rat.report.claim.ClaimStatistic claimStatistic2 = org.apache.rat.Reporter.report(reportConfiguration1);
        org.apache.commons.io.function.IOSupplier<java.io.OutputStream> outputStreamIOSupplier3 = reportConfiguration1.getOutput();
        org.apache.rat.license.ILicense iLicense4 = null;
        reportConfiguration1.addLicense(iLicense4);
        java.io.File file6 = null;
        // The following exception was thrown during execution in test generation
        try {
            reportConfiguration1.setOut(file6);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: output file should not be null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNull(claimStatistic2);
        org.junit.Assert.assertNotNull(outputStreamIOSupplier3);
    }

    @Test
    public void test13984() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest27.test13984");
        java.util.regex.Pattern pattern1 = null;
        org.apache.rat.analysis.matchers.SimpleRegexMatcher simpleRegexMatcher2 = new org.apache.rat.analysis.matchers.SimpleRegexMatcher("", pattern1);
        simpleRegexMatcher2.reset();
        org.apache.rat.analysis.IHeaderMatcher.State state4 = simpleRegexMatcher2.finalizeState();
        java.lang.String str5 = simpleRegexMatcher2.toString();
        org.apache.rat.analysis.IHeaderMatcher.State state6 = simpleRegexMatcher2.currentState();
        java.lang.String str7 = simpleRegexMatcher2.getId();
        java.lang.String str8 = simpleRegexMatcher2.toString();
        // The following exception was thrown during execution in test generation
        try {
            boolean boolean10 = simpleRegexMatcher2.doMatch("223f0aba-15d4-49e9-901e-5740c137aebf null");
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + state4 + "' != '" + org.apache.rat.analysis.IHeaderMatcher.State.f + "'", state4.equals(org.apache.rat.analysis.IHeaderMatcher.State.f));
// flaky:         org.junit.Assert.assertEquals("'" + str5 + "' != '" + "e457cb71-b8b7-466b-8512-672e3fb20b1a" + "'", str5, "e457cb71-b8b7-466b-8512-672e3fb20b1a");
        org.junit.Assert.assertTrue("'" + state6 + "' != '" + org.apache.rat.analysis.IHeaderMatcher.State.f + "'", state6.equals(org.apache.rat.analysis.IHeaderMatcher.State.f));
// flaky:         org.junit.Assert.assertEquals("'" + str7 + "' != '" + "e457cb71-b8b7-466b-8512-672e3fb20b1a" + "'", str7, "e457cb71-b8b7-466b-8512-672e3fb20b1a");
// flaky:         org.junit.Assert.assertEquals("'" + str8 + "' != '" + "e457cb71-b8b7-466b-8512-672e3fb20b1a" + "'", str8, "e457cb71-b8b7-466b-8512-672e3fb20b1a");
    }

    @Test
    public void test13985() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest27.test13985");
        org.apache.rat.license.ILicenseFamily[] iLicenseFamilyArray0 = new org.apache.rat.license.ILicenseFamily[] {};
        java.util.ArrayList<org.apache.rat.license.ILicenseFamily> iLicenseFamilyList1 = new java.util.ArrayList<org.apache.rat.license.ILicenseFamily>();
        boolean boolean2 = java.util.Collections.addAll((java.util.Collection<org.apache.rat.license.ILicenseFamily>) iLicenseFamilyList1, iLicenseFamilyArray0);
        org.apache.rat.policy.DefaultPolicy defaultPolicy3 = new org.apache.rat.policy.DefaultPolicy((java.util.Collection<org.apache.rat.license.ILicenseFamily>) iLicenseFamilyList1);
        java.util.SortedSet<org.apache.rat.license.ILicenseFamily> iLicenseFamilySet4 = defaultPolicy3.getApprovedLicenseNames();
        java.lang.String[] strArray10 = new java.lang.String[] { "http://org/apache/rat/meta-data#LicenseFamilyCategory", "Datum [ name ='http://org/apache/rat/meta-data#LicenseFamilyCategory',value ='GPL1  ']", "MANIFEST.MF", "AllBuilder:", "The MIT License" };
        org.apache.rat.utils.ReportingSet<java.lang.String> strSet11 = new org.apache.rat.utils.ReportingSet<java.lang.String>();
        boolean boolean12 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strSet11, strArray10);
        boolean boolean14 = strSet11.addIfNotPresent("http://org/apache/rat/meta-data#LicenseFamilyName");
        boolean boolean16 = strSet11.addIfNotPresent("ef7a8b13-64c3-4510-bb0c-dbf208e1e73f");
        java.util.function.Function<java.lang.String, java.lang.String> strFunction17 = null;
        org.apache.rat.utils.ReportingSet<java.lang.String> strSet18 = strSet11.setMsgFormat(strFunction17);
        boolean boolean19 = strSet11.isEmpty();
        org.apache.rat.utils.ReportingSet<java.lang.String> strSet22 = strSet11.subSet("GNU General Public License, version 2", "d25f13bc-1910-4451-97b5-b72663551a5d");
        boolean boolean23 = strSet11.isEmpty();
        org.apache.rat.license.LicenseFamilySetFactory licenseFamilySetFactory24 = new org.apache.rat.license.LicenseFamilySetFactory(iLicenseFamilySet4, (java.util.Collection<java.lang.String>) strSet11);
        org.apache.rat.license.ILicense[] iLicenseArray25 = new org.apache.rat.license.ILicense[] {};
        java.util.TreeSet<org.apache.rat.license.ILicense> iLicenseSet26 = new java.util.TreeSet<org.apache.rat.license.ILicense>();
        boolean boolean27 = java.util.Collections.addAll((java.util.Collection<org.apache.rat.license.ILicense>) iLicenseSet26, iLicenseArray25);
        java.lang.String[] strArray40 = new java.lang.String[] { "GPL2 ", "GPL1 ", "notice", "http://org/apache/rat/meta-data#LicenseFamilyName", "notice", "GPL2 ", "http://org/apache/rat/meta-data#LicenseFamilyName", "", "GPL2 ", "", "GPL1 ", "hi!" };
        java.util.ArrayList<java.lang.String> strList41 = new java.util.ArrayList<java.lang.String>();
        boolean boolean42 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strList41, strArray40);
        org.apache.rat.license.LicenseSetFactory licenseSetFactory43 = new org.apache.rat.license.LicenseSetFactory((java.util.SortedSet<org.apache.rat.license.ILicense>) iLicenseSet26, (java.util.Collection<java.lang.String>) strList41);
        org.apache.rat.license.LicenseSetFactory.LicenseFilter licenseFilter44 = org.apache.rat.license.LicenseSetFactory.LicenseFilter.all;
        java.util.SortedSet<org.apache.rat.license.ILicenseFamily> iLicenseFamilySet45 = licenseSetFactory43.getLicenseFamilies(licenseFilter44);
        java.util.SortedSet<org.apache.rat.license.ILicenseFamily> iLicenseFamilySet46 = licenseFamilySetFactory24.getFamilies(licenseFilter44);
        org.junit.Assert.assertNotNull(iLicenseFamilyArray0);
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + false + "'", boolean2 == false);
        org.junit.Assert.assertNotNull(iLicenseFamilySet4);
        org.junit.Assert.assertNotNull(strArray10);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + true + "'", boolean12 == true);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + true + "'", boolean14 == true);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + true + "'", boolean16 == true);
        org.junit.Assert.assertNotNull(strSet18);
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + false + "'", boolean19 == false);
        org.junit.Assert.assertNotNull(strSet22);
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + false + "'", boolean23 == false);
        org.junit.Assert.assertNotNull(iLicenseArray25);
        org.junit.Assert.assertTrue("'" + boolean27 + "' != '" + false + "'", boolean27 == false);
        org.junit.Assert.assertNotNull(strArray40);
        org.junit.Assert.assertTrue("'" + boolean42 + "' != '" + true + "'", boolean42 == true);
        org.junit.Assert.assertTrue("'" + licenseFilter44 + "' != '" + org.apache.rat.license.LicenseSetFactory.LicenseFilter.all + "'", licenseFilter44.equals(org.apache.rat.license.LicenseSetFactory.LicenseFilter.all));
        org.junit.Assert.assertNotNull(iLicenseFamilySet45);
        org.junit.Assert.assertNotNull(iLicenseFamilySet46);
    }

    @Test
    public void test13986() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest27.test13986");
        java.lang.String[] strArray5 = new java.lang.String[] { "http://org/apache/rat/meta-data#LicenseFamilyCategory", "Datum [ name ='http://org/apache/rat/meta-data#LicenseFamilyCategory',value ='GPL1  ']", "MANIFEST.MF", "AllBuilder:", "The MIT License" };
        org.apache.rat.utils.ReportingSet<java.lang.String> strSet6 = new org.apache.rat.utils.ReportingSet<java.lang.String>();
        boolean boolean7 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strSet6, strArray5);
        boolean boolean9 = strSet6.addIfNotPresent("http://org/apache/rat/meta-data#LicenseFamilyName");
        java.util.Iterator<java.lang.String> strItor10 = strSet6.iterator();
        java.lang.Object[] objArray11 = strSet6.toArray();
        java.lang.String[] strArray17 = new java.lang.String[] { "http://org/apache/rat/meta-data#LicenseFamilyCategory", "Datum [ name ='http://org/apache/rat/meta-data#LicenseFamilyCategory',value ='GPL1  ']", "MANIFEST.MF", "AllBuilder:", "The MIT License" };
        org.apache.rat.utils.ReportingSet<java.lang.String> strSet18 = new org.apache.rat.utils.ReportingSet<java.lang.String>();
        boolean boolean19 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strSet18, strArray17);
        boolean boolean21 = strSet18.addIfNotPresent("http://org/apache/rat/meta-data#LicenseFamilyName");
        java.util.SortedSet<org.apache.rat.license.ILicenseFamily> iLicenseFamilySet22 = org.apache.rat.license.LicenseFamilySetFactory.emptyLicenseFamilySet();
        boolean boolean23 = strSet18.removeAll((java.util.Collection<org.apache.rat.license.ILicenseFamily>) iLicenseFamilySet22);
        boolean boolean24 = strSet6.containsAll((java.util.Collection<org.apache.rat.license.ILicenseFamily>) iLicenseFamilySet22);
        java.util.Spliterator<java.lang.String> strSpliterator25 = strSet6.spliterator();
        java.util.stream.Stream<java.lang.String> strStream26 = strSet6.parallelStream();
        java.util.Spliterator<java.lang.String> strSpliterator27 = strSet6.spliterator();
        boolean boolean29 = strSet6.remove((java.lang.Object) "ACADEMIC FREE LICENSE, VERSION 2.1");
        org.junit.Assert.assertNotNull(strArray5);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + true + "'", boolean7 == true);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + true + "'", boolean9 == true);
        org.junit.Assert.assertNotNull(strItor10);
        org.junit.Assert.assertNotNull(objArray11);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray11), "[AllBuilder:, Datum [ name ='http://org/apache/rat/meta-data#LicenseFamilyCategory',value ='GPL1  '], MANIFEST.MF, The MIT License, http://org/apache/rat/meta-data#LicenseFamilyCategory, http://org/apache/rat/meta-data#LicenseFamilyName]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray11), "[AllBuilder:, Datum [ name ='http://org/apache/rat/meta-data#LicenseFamilyCategory',value ='GPL1  '], MANIFEST.MF, The MIT License, http://org/apache/rat/meta-data#LicenseFamilyCategory, http://org/apache/rat/meta-data#LicenseFamilyName]");
        org.junit.Assert.assertNotNull(strArray17);
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + true + "'", boolean19 == true);
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + true + "'", boolean21 == true);
        org.junit.Assert.assertNotNull(iLicenseFamilySet22);
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + false + "'", boolean23 == false);
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + true + "'", boolean24 == true);
        org.junit.Assert.assertNotNull(strSpliterator25);
        org.junit.Assert.assertNotNull(strStream26);
        org.junit.Assert.assertNotNull(strSpliterator27);
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + false + "'", boolean29 == false);
    }

    @Test
    public void test13987() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest27.test13987");
        org.apache.rat.license.ILicenseFamilyBuilder iLicenseFamilyBuilder0 = new org.apache.rat.license.ILicenseFamilyBuilder();
        java.lang.String str1 = iLicenseFamilyBuilder0.getCategory();
        org.apache.rat.license.ILicenseFamily.Builder builder3 = iLicenseFamilyBuilder0.setLicenseFamilyCategory("AL   ");
        java.lang.String str4 = iLicenseFamilyBuilder0.getCategory();
        java.lang.String str5 = iLicenseFamilyBuilder0.getCategory();
        org.apache.rat.license.ILicenseFamily.Builder builder7 = iLicenseFamilyBuilder0.setLicenseFamilyName("httporgapacheratmetadataLicenseFamilyName");
        java.lang.String str8 = iLicenseFamilyBuilder0.getCategory();
        org.apache.rat.license.ILicenseFamily.Builder builder10 = iLicenseFamilyBuilder0.setLicenseFamilyName("2a9c4fbb-1cac-42b2-a01d-6ca9b606c9d9");
        org.junit.Assert.assertNull(str1);
        org.junit.Assert.assertNotNull(builder3);
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "AL   " + "'", str4, "AL   ");
        org.junit.Assert.assertEquals("'" + str5 + "' != '" + "AL   " + "'", str5, "AL   ");
        org.junit.Assert.assertNotNull(builder7);
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "AL   " + "'", str8, "AL   ");
        org.junit.Assert.assertNotNull(builder10);
    }

    @Test
    public void test13988() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest27.test13988");
        org.apache.rat.license.SimpleLicenseFamily simpleLicenseFamily0 = new org.apache.rat.license.SimpleLicenseFamily();
        java.lang.String str1 = simpleLicenseFamily0.getFamilyName();
        java.lang.String str2 = simpleLicenseFamily0.getFamilyCategory();
        java.lang.String str3 = simpleLicenseFamily0.getFamilyName();
        simpleLicenseFamily0.setFamilyName("W3C  ");
        java.lang.String str6 = simpleLicenseFamily0.getFamilyName();
        simpleLicenseFamily0.setFamilyName("TextBuilder: ae1d3f1b-6a63-45e7-a...");
        java.lang.String str9 = simpleLicenseFamily0.toString();
        simpleLicenseFamily0.setFamilyCategory("TextBuilder: http://org/apache/ra...");
        org.junit.Assert.assertNull(str1);
        org.junit.Assert.assertNull(str2);
        org.junit.Assert.assertNull(str3);
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "W3C  " + "'", str6, "W3C  ");
        org.junit.Assert.assertEquals("'" + str9 + "' != '" + "null TextBuilder: ae1d3f1b-6a63-45e7-a..." + "'", str9, "null TextBuilder: ae1d3f1b-6a63-45e7-a...");
    }

    @Test
    public void test13989() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest27.test13989");
        org.apache.rat.utils.Log log0 = null;
        org.apache.rat.ReportConfiguration reportConfiguration1 = new org.apache.rat.ReportConfiguration(log0);
        reportConfiguration1.addApprovedLicenseCategory(".cvsignore");
        boolean boolean4 = reportConfiguration1.isStyleReport();
        java.io.FilenameFilter filenameFilter5 = reportConfiguration1.getInputFileFilter();
        org.apache.rat.utils.Log log6 = reportConfiguration1.getLog();
        java.lang.String str7 = reportConfiguration1.getCopyrightMessage();
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + true + "'", boolean4 == true);
        org.junit.Assert.assertNull(filenameFilter5);
        org.junit.Assert.assertNull(log6);
        org.junit.Assert.assertNull(str7);
    }

    @Test
    public void test13990() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest27.test13990");
        org.apache.rat.license.ILicenseFamilyBuilder iLicenseFamilyBuilder0 = new org.apache.rat.license.ILicenseFamilyBuilder();
        java.lang.String str1 = iLicenseFamilyBuilder0.getCategory();
        org.apache.rat.license.ILicenseFamily.Builder builder3 = iLicenseFamilyBuilder0.setLicenseFamilyCategory("AL   ");
        org.apache.rat.license.ILicenseFamily.Builder builder5 = iLicenseFamilyBuilder0.setLicenseFamilyCategory("3c840dc2-bef0-42b5-b26c-35a568d53a24");
        java.lang.String str6 = iLicenseFamilyBuilder0.getCategory();
        org.apache.rat.license.ILicenseFamily.Builder builder8 = iLicenseFamilyBuilder0.setLicenseFamilyCategory("http");
        org.junit.Assert.assertNull(str1);
        org.junit.Assert.assertNotNull(builder3);
        org.junit.Assert.assertNotNull(builder5);
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "3c840dc2-bef0-42b5-b26c-35a568d53a24" + "'", str6, "3c840dc2-bef0-42b5-b26c-35a568d53a24");
        org.junit.Assert.assertNotNull(builder8);
    }

    @Test
    public void test13991() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest27.test13991");
        org.apache.rat.analysis.matchers.SimpleTextMatcher simpleTextMatcher2 = new org.apache.rat.analysis.matchers.SimpleTextMatcher("3af3d9f1-2089-4a2b-bde3-3e80aa30f07f", "Copyright Builder: s:RegexBuilder: 89662180-a89f-497b-9301-227d494d2bae e:151234cb-e980-4752-a4a0-64f20f78657d o:null");
    }

    @Test
    public void test13992() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest27.test13992");
        org.apache.rat.report.claim.ClaimStatistic claimStatistic0 = new org.apache.rat.report.claim.ClaimStatistic();
        claimStatistic0.setNumApproved((int) (short) 10);
        java.util.Map<java.lang.String, java.lang.Integer> strMap3 = null;
        claimStatistic0.setDocumentCategoryMap(strMap3);
        java.util.Map<java.lang.String, java.lang.Integer> strMap5 = claimStatistic0.getLicenseFileNameMap();
        claimStatistic0.setNumUnknown((int) (byte) -1);
        claimStatistic0.setNumUnknown(30);
        int int10 = claimStatistic0.getNumUnknown();
        int int11 = claimStatistic0.getNumUnApproved();
        int int12 = claimStatistic0.getNumApproved();
        int int13 = claimStatistic0.getNumGenerated();
        java.util.Map<java.lang.String, java.lang.Integer> strMap14 = claimStatistic0.getLicenseFileCodeMap();
        java.util.Map<java.lang.String, java.lang.Integer> strMap15 = claimStatistic0.getLicenseFileNameMap();
        org.junit.Assert.assertNull(strMap5);
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + 30 + "'", int10 == 30);
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 0 + "'", int11 == 0);
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + 10 + "'", int12 == 10);
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + 0 + "'", int13 == 0);
        org.junit.Assert.assertNull(strMap14);
        org.junit.Assert.assertNull(strMap15);
    }

    @Test
    public void test13993() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest27.test13993");
        org.apache.rat.api.MetaData.Datum datum2 = new org.apache.rat.api.MetaData.Datum("468725e6-3745-47e3-807f-06bc0b3c3beb", "9c36f068-9920-4c66-98c2-ba24e3dffa9c");
        java.lang.String str3 = datum2.getName();
        org.junit.Assert.assertEquals("'" + str3 + "' != '" + "468725e6-3745-47e3-807f-06bc0b3c3beb" + "'", str3, "468725e6-3745-47e3-807f-06bc0b3c3beb");
    }

    @Test
    public void test13994() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest27.test13994");
        org.apache.rat.utils.DefaultLog defaultLog0 = org.apache.rat.utils.DefaultLog.INSTANCE;
        org.apache.rat.license.ILicense.Builder builder1 = org.apache.rat.license.ILicense.builder();
        org.apache.rat.license.ILicense.Builder builder3 = builder1.setLicenseFamilyCategory("");
        org.apache.rat.analysis.matchers.CopyrightMatcher copyrightMatcher7 = new org.apache.rat.analysis.matchers.CopyrightMatcher("", "GPL1 ", "hi!");
        org.apache.rat.analysis.IHeaderMatcher.State state8 = copyrightMatcher7.finalizeState();
        org.apache.rat.license.ILicense.Builder builder9 = builder3.setMatcher((org.apache.rat.analysis.IHeaderMatcher) copyrightMatcher7);
        org.apache.rat.license.ILicense.Builder builder11 = builder9.setLicenseFamilyCategory("");
        defaultLog0.error((java.lang.Object) builder11);
        org.apache.rat.configuration.builders.CopyrightBuilder copyrightBuilder13 = org.apache.rat.analysis.IHeaderMatcher.Builder.copyright();
        org.apache.rat.configuration.builders.CopyrightBuilder copyrightBuilder15 = copyrightBuilder13.setStart("OASIS");
        org.apache.rat.license.ILicense.Builder builder16 = builder11.setMatcher((org.apache.rat.analysis.IHeaderMatcher.Builder) copyrightBuilder13);
        org.apache.rat.configuration.builders.AllBuilder allBuilder17 = org.apache.rat.analysis.IHeaderMatcher.Builder.all();
        org.apache.rat.analysis.IHeaderMatcher iHeaderMatcher18 = allBuilder17.build();
        org.apache.rat.analysis.IHeaderMatcher iHeaderMatcher19 = allBuilder17.build();
        org.apache.rat.license.ILicense.Builder builder20 = builder16.setMatcher((org.apache.rat.analysis.IHeaderMatcher.Builder) allBuilder17);
        org.apache.rat.configuration.builders.AllBuilder allBuilder21 = org.apache.rat.analysis.IHeaderMatcher.Builder.all();
        java.lang.String str22 = allBuilder21.toString();
        java.util.List<org.apache.rat.analysis.IHeaderMatcher> iHeaderMatcherList23 = allBuilder21.getChildren();
        org.apache.rat.analysis.IHeaderMatcher iHeaderMatcher24 = allBuilder21.build();
        org.apache.rat.configuration.builders.AbstractBuilder abstractBuilder25 = allBuilder17.add((org.apache.rat.analysis.IHeaderMatcher.Builder) allBuilder21);
        java.util.List<org.apache.rat.analysis.IHeaderMatcher> iHeaderMatcherList26 = allBuilder21.getChildren();
        org.junit.Assert.assertNotNull(defaultLog0);
        org.junit.Assert.assertNotNull(builder1);
        org.junit.Assert.assertNotNull(builder3);
        org.junit.Assert.assertTrue("'" + state8 + "' != '" + org.apache.rat.analysis.IHeaderMatcher.State.f + "'", state8.equals(org.apache.rat.analysis.IHeaderMatcher.State.f));
        org.junit.Assert.assertNotNull(builder9);
        org.junit.Assert.assertNotNull(builder11);
        org.junit.Assert.assertNotNull(copyrightBuilder13);
        org.junit.Assert.assertNotNull(copyrightBuilder15);
        org.junit.Assert.assertNotNull(builder16);
        org.junit.Assert.assertNotNull(allBuilder17);
        org.junit.Assert.assertNotNull(iHeaderMatcher18);
        org.junit.Assert.assertNotNull(iHeaderMatcher19);
        org.junit.Assert.assertNotNull(builder20);
        org.junit.Assert.assertNotNull(allBuilder21);
        org.junit.Assert.assertEquals("'" + str22 + "' != '" + "AllBuilder:" + "'", str22, "AllBuilder:");
        org.junit.Assert.assertNotNull(iHeaderMatcherList23);
        org.junit.Assert.assertNotNull(iHeaderMatcher24);
        org.junit.Assert.assertNotNull(abstractBuilder25);
        org.junit.Assert.assertNotNull(iHeaderMatcherList26);
    }

    @Test
    public void test13995() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest27.test13995");
        org.apache.rat.utils.Log log0 = null;
        org.apache.rat.ReportConfiguration reportConfiguration1 = new org.apache.rat.ReportConfiguration(log0);
        org.apache.rat.report.claim.ClaimStatistic claimStatistic2 = org.apache.rat.Reporter.report(reportConfiguration1);
        org.apache.commons.io.function.IOSupplier<java.io.OutputStream> outputStreamIOSupplier3 = reportConfiguration1.getOutput();
        org.apache.rat.license.ILicense iLicense4 = null;
        reportConfiguration1.addLicense(iLicense4);
        reportConfiguration1.addApprovedLicenseCategory("6481fb19-38f0-43f5-ab95-caf84a069ee1");
        org.apache.rat.utils.Log log8 = reportConfiguration1.getLog();
        java.net.URL uRL9 = null;
        // The following exception was thrown during execution in test generation
        try {
            reportConfiguration1.setStyleSheet(uRL9);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: styleSheet file should not be null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNull(claimStatistic2);
        org.junit.Assert.assertNotNull(outputStreamIOSupplier3);
        org.junit.Assert.assertNull(log8);
    }

    @Test
    public void test13996() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest27.test13996");
        java.util.Map<java.lang.String, java.lang.String> strMap2 = null;
        // The following exception was thrown during execution in test generation
        try {
            org.apache.rat.api.ContentType contentType3 = new org.apache.rat.api.ContentType("TextBuilder: Copyright Builder: s...", "Copyright Builder: s:org/a e:standard o:W3C  ", strMap2);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
    }

    @Test
    public void test13997() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest27.test13997");
        org.apache.rat.utils.Log log0 = null;
        org.apache.rat.ReportConfiguration reportConfiguration1 = new org.apache.rat.ReportConfiguration(log0);
        org.apache.commons.io.function.IOSupplier<java.io.OutputStream> outputStreamIOSupplier2 = reportConfiguration1.getOutput();
        reportConfiguration1.setCopyrightMessage("MANIFEST.MF");
        org.apache.rat.utils.Log log5 = reportConfiguration1.getLog();
        org.apache.rat.Defaults.Builder builder6 = org.apache.rat.Defaults.builder();
        org.apache.rat.Defaults.Builder builder7 = builder6.noDefault();
        org.apache.rat.Defaults defaults8 = builder7.build();
        reportConfiguration1.setFrom(defaults8);
        org.apache.rat.utils.Log log10 = null;
        org.apache.rat.ReportConfiguration reportConfiguration11 = new org.apache.rat.ReportConfiguration(log10);
        org.apache.commons.io.function.IOSupplier<java.io.OutputStream> outputStreamIOSupplier12 = reportConfiguration11.getOutput();
        reportConfiguration11.removeApprovedLicenseCategory("EF7A8B13-64C3-4510-BB0C-DBF208E1E73F");
        org.apache.rat.utils.Log log15 = null;
        org.apache.rat.ReportConfiguration reportConfiguration16 = new org.apache.rat.ReportConfiguration(log15);
        org.apache.rat.report.claim.ClaimStatistic claimStatistic17 = org.apache.rat.Reporter.report(reportConfiguration16);
        org.apache.rat.utils.Log log18 = null;
        org.apache.rat.ReportConfiguration reportConfiguration19 = new org.apache.rat.ReportConfiguration(log18);
        org.apache.rat.report.claim.ClaimStatistic claimStatistic20 = org.apache.rat.Reporter.report(reportConfiguration19);
        org.apache.rat.utils.ReportingSet.Options options21 = org.apache.rat.utils.ReportingSet.Options.OVERWRITE;
        reportConfiguration19.licenseDuplicateOption(options21);
        reportConfiguration16.familyDuplicateOption(options21);
        org.apache.commons.io.function.IOSupplier<java.io.PrintWriter> printWriterIOSupplier24 = reportConfiguration16.getWriter();
        org.apache.rat.report.IReportable iReportable25 = null;
        reportConfiguration16.setReportable(iReportable25);
        org.apache.rat.license.ILicenseFamily[] iLicenseFamilyArray27 = new org.apache.rat.license.ILicenseFamily[] {};
        java.util.ArrayList<org.apache.rat.license.ILicenseFamily> iLicenseFamilyList28 = new java.util.ArrayList<org.apache.rat.license.ILicenseFamily>();
        boolean boolean29 = java.util.Collections.addAll((java.util.Collection<org.apache.rat.license.ILicenseFamily>) iLicenseFamilyList28, iLicenseFamilyArray27);
        org.apache.rat.policy.DefaultPolicy defaultPolicy30 = new org.apache.rat.policy.DefaultPolicy((java.util.Collection<org.apache.rat.license.ILicenseFamily>) iLicenseFamilyList28);
        reportConfiguration16.addFamilies((java.util.Collection<org.apache.rat.license.ILicenseFamily>) iLicenseFamilyList28);
        org.apache.rat.utils.Log log32 = null;
        org.apache.rat.ReportConfiguration reportConfiguration33 = new org.apache.rat.ReportConfiguration(log32);
        java.io.FilenameFilter filenameFilter34 = reportConfiguration33.getInputFileFilter();
        org.apache.rat.license.LicenseSetFactory.LicenseFilter licenseFilter35 = org.apache.rat.license.LicenseSetFactory.LicenseFilter.all;
        java.util.SortedSet<org.apache.rat.license.ILicense> iLicenseSet36 = reportConfiguration33.getLicenses(licenseFilter35);
        org.apache.rat.config.AddLicenseHeaders addLicenseHeaders37 = org.apache.rat.config.AddLicenseHeaders.FALSE;
        reportConfiguration33.setAddLicenseHeaders(addLicenseHeaders37);
        org.apache.rat.utils.Log log39 = null;
        org.apache.rat.ReportConfiguration reportConfiguration40 = new org.apache.rat.ReportConfiguration(log39);
        org.apache.rat.report.claim.ClaimStatistic claimStatistic41 = org.apache.rat.Reporter.report(reportConfiguration40);
        org.apache.rat.license.LicenseSetFactory.LicenseFilter licenseFilter42 = org.apache.rat.license.LicenseSetFactory.LicenseFilter.all;
        org.apache.rat.Reporter.listLicenses(reportConfiguration40, licenseFilter42);
        org.apache.rat.Reporter.listLicenses(reportConfiguration33, licenseFilter42);
        org.apache.rat.utils.Log log45 = null;
        org.apache.rat.ReportConfiguration reportConfiguration46 = new org.apache.rat.ReportConfiguration(log45);
        java.io.FilenameFilter filenameFilter47 = reportConfiguration46.getInputFileFilter();
        org.apache.rat.license.LicenseSetFactory.LicenseFilter licenseFilter48 = org.apache.rat.license.LicenseSetFactory.LicenseFilter.all;
        java.util.SortedSet<org.apache.rat.license.ILicense> iLicenseSet49 = reportConfiguration46.getLicenses(licenseFilter48);
        org.apache.rat.config.AddLicenseHeaders addLicenseHeaders50 = org.apache.rat.config.AddLicenseHeaders.FALSE;
        reportConfiguration46.setAddLicenseHeaders(addLicenseHeaders50);
        org.apache.rat.utils.Log log52 = null;
        org.apache.rat.ReportConfiguration reportConfiguration53 = new org.apache.rat.ReportConfiguration(log52);
        org.apache.rat.report.claim.ClaimStatistic claimStatistic54 = org.apache.rat.Reporter.report(reportConfiguration53);
        org.apache.rat.license.LicenseSetFactory.LicenseFilter licenseFilter55 = org.apache.rat.license.LicenseSetFactory.LicenseFilter.all;
        org.apache.rat.Reporter.listLicenses(reportConfiguration53, licenseFilter55);
        org.apache.rat.Reporter.listLicenses(reportConfiguration46, licenseFilter55);
        java.util.SortedSet<org.apache.rat.license.ILicenseFamily> iLicenseFamilySet58 = reportConfiguration33.getLicenseFamilies(licenseFilter55);
        java.util.SortedSet<org.apache.rat.license.ILicense> iLicenseSet59 = reportConfiguration16.getLicenses(licenseFilter55);
        org.apache.rat.Reporter.listLicenseFamilies(reportConfiguration11, licenseFilter55);
        java.util.SortedSet<java.lang.String> strSet61 = defaults8.getLicenseIds(licenseFilter55);
        org.apache.rat.Defaults.Builder builder62 = org.apache.rat.Defaults.builder();
        org.apache.rat.Defaults defaults63 = builder62.build();
        org.apache.rat.Defaults.Builder builder64 = builder62.noDefault();
        org.apache.rat.Defaults.Builder builder66 = builder62.remove("AllBuilder:");
        org.apache.rat.Defaults.Builder builder68 = builder62.remove("GNU General Public License, version 2");
        org.apache.rat.Defaults defaults69 = builder68.build();
        org.apache.rat.utils.DefaultLog defaultLog70 = org.apache.rat.utils.DefaultLog.INSTANCE;
        org.apache.rat.license.ILicense.Builder builder71 = org.apache.rat.license.ILicense.builder();
        org.apache.rat.license.ILicense.Builder builder73 = builder71.setLicenseFamilyCategory("");
        org.apache.rat.analysis.matchers.CopyrightMatcher copyrightMatcher77 = new org.apache.rat.analysis.matchers.CopyrightMatcher("", "GPL1 ", "hi!");
        org.apache.rat.analysis.IHeaderMatcher.State state78 = copyrightMatcher77.finalizeState();
        org.apache.rat.license.ILicense.Builder builder79 = builder73.setMatcher((org.apache.rat.analysis.IHeaderMatcher) copyrightMatcher77);
        org.apache.rat.license.ILicense.Builder builder81 = builder79.setLicenseFamilyCategory("");
        defaultLog70.error((java.lang.Object) builder81);
        org.apache.rat.utils.Log.Level level83 = org.apache.rat.utils.Log.Level.INFO;
        defaultLog70.log(level83, "JAVA");
        org.apache.rat.license.LicenseSetFactory.LicenseFilter licenseFilter86 = org.apache.rat.license.LicenseSetFactory.LicenseFilter.approved;
        defaultLog70.info((java.lang.Object) licenseFilter86);
        java.util.SortedSet<org.apache.rat.license.ILicenseFamily> iLicenseFamilySet88 = defaults69.getLicenseFamilies(licenseFilter86);
        java.util.SortedSet<org.apache.rat.license.ILicenseFamily> iLicenseFamilySet89 = defaults8.getLicenseFamilies(licenseFilter86);
        org.junit.Assert.assertNotNull(outputStreamIOSupplier2);
        org.junit.Assert.assertNull(log5);
        org.junit.Assert.assertNotNull(builder6);
        org.junit.Assert.assertNotNull(builder7);
        org.junit.Assert.assertNotNull(defaults8);
        org.junit.Assert.assertNotNull(outputStreamIOSupplier12);
        org.junit.Assert.assertNull(claimStatistic17);
        org.junit.Assert.assertNull(claimStatistic20);
        org.junit.Assert.assertTrue("'" + options21 + "' != '" + org.apache.rat.utils.ReportingSet.Options.OVERWRITE + "'", options21.equals(org.apache.rat.utils.ReportingSet.Options.OVERWRITE));
        org.junit.Assert.assertNotNull(printWriterIOSupplier24);
        org.junit.Assert.assertNotNull(iLicenseFamilyArray27);
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + false + "'", boolean29 == false);
        org.junit.Assert.assertNull(filenameFilter34);
        org.junit.Assert.assertTrue("'" + licenseFilter35 + "' != '" + org.apache.rat.license.LicenseSetFactory.LicenseFilter.all + "'", licenseFilter35.equals(org.apache.rat.license.LicenseSetFactory.LicenseFilter.all));
        org.junit.Assert.assertNotNull(iLicenseSet36);
        org.junit.Assert.assertTrue("'" + addLicenseHeaders37 + "' != '" + org.apache.rat.config.AddLicenseHeaders.FALSE + "'", addLicenseHeaders37.equals(org.apache.rat.config.AddLicenseHeaders.FALSE));
        org.junit.Assert.assertNull(claimStatistic41);
        org.junit.Assert.assertTrue("'" + licenseFilter42 + "' != '" + org.apache.rat.license.LicenseSetFactory.LicenseFilter.all + "'", licenseFilter42.equals(org.apache.rat.license.LicenseSetFactory.LicenseFilter.all));
        org.junit.Assert.assertNull(filenameFilter47);
        org.junit.Assert.assertTrue("'" + licenseFilter48 + "' != '" + org.apache.rat.license.LicenseSetFactory.LicenseFilter.all + "'", licenseFilter48.equals(org.apache.rat.license.LicenseSetFactory.LicenseFilter.all));
        org.junit.Assert.assertNotNull(iLicenseSet49);
        org.junit.Assert.assertTrue("'" + addLicenseHeaders50 + "' != '" + org.apache.rat.config.AddLicenseHeaders.FALSE + "'", addLicenseHeaders50.equals(org.apache.rat.config.AddLicenseHeaders.FALSE));
        org.junit.Assert.assertNull(claimStatistic54);
        org.junit.Assert.assertTrue("'" + licenseFilter55 + "' != '" + org.apache.rat.license.LicenseSetFactory.LicenseFilter.all + "'", licenseFilter55.equals(org.apache.rat.license.LicenseSetFactory.LicenseFilter.all));
        org.junit.Assert.assertNotNull(iLicenseFamilySet58);
        org.junit.Assert.assertNotNull(iLicenseSet59);
        org.junit.Assert.assertNotNull(strSet61);
        org.junit.Assert.assertNotNull(builder62);
        org.junit.Assert.assertNotNull(defaults63);
        org.junit.Assert.assertNotNull(builder64);
        org.junit.Assert.assertNotNull(builder66);
        org.junit.Assert.assertNotNull(builder68);
        org.junit.Assert.assertNotNull(defaults69);
        org.junit.Assert.assertNotNull(defaultLog70);
        org.junit.Assert.assertNotNull(builder71);
        org.junit.Assert.assertNotNull(builder73);
        org.junit.Assert.assertTrue("'" + state78 + "' != '" + org.apache.rat.analysis.IHeaderMatcher.State.f + "'", state78.equals(org.apache.rat.analysis.IHeaderMatcher.State.f));
        org.junit.Assert.assertNotNull(builder79);
        org.junit.Assert.assertNotNull(builder81);
        org.junit.Assert.assertTrue("'" + level83 + "' != '" + org.apache.rat.utils.Log.Level.INFO + "'", level83.equals(org.apache.rat.utils.Log.Level.INFO));
        org.junit.Assert.assertTrue("'" + licenseFilter86 + "' != '" + org.apache.rat.license.LicenseSetFactory.LicenseFilter.approved + "'", licenseFilter86.equals(org.apache.rat.license.LicenseSetFactory.LicenseFilter.approved));
        org.junit.Assert.assertNotNull(iLicenseFamilySet88);
        org.junit.Assert.assertNotNull(iLicenseFamilySet89);
    }

    @Test
    public void test13998() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest27.test13998");
        org.apache.rat.utils.Log log0 = null;
        org.apache.rat.ReportConfiguration reportConfiguration1 = new org.apache.rat.ReportConfiguration(log0);
        org.apache.rat.license.ILicenseFamily[] iLicenseFamilyArray2 = new org.apache.rat.license.ILicenseFamily[] {};
        java.util.ArrayList<org.apache.rat.license.ILicenseFamily> iLicenseFamilyList3 = new java.util.ArrayList<org.apache.rat.license.ILicenseFamily>();
        boolean boolean4 = java.util.Collections.addAll((java.util.Collection<org.apache.rat.license.ILicenseFamily>) iLicenseFamilyList3, iLicenseFamilyArray2);
        reportConfiguration1.addFamilies((java.util.Collection<org.apache.rat.license.ILicenseFamily>) iLicenseFamilyList3);
        org.apache.rat.report.IReportable iReportable6 = null;
        reportConfiguration1.setReportable(iReportable6);
        reportConfiguration1.setStyleReport(true);
        java.lang.String str10 = reportConfiguration1.getCopyrightMessage();
        org.apache.commons.io.function.IOSupplier<java.io.OutputStream> outputStreamIOSupplier11 = reportConfiguration1.getOutput();
        org.apache.commons.io.filefilter.IOFileFilter iOFileFilter12 = null;
        // The following exception was thrown during execution in test generation
        try {
            reportConfiguration1.addDirectoryFilter(iOFileFilter12);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: fileFilter");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(iLicenseFamilyArray2);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertNull(str10);
        org.junit.Assert.assertNotNull(outputStreamIOSupplier11);
    }

    @Test
    public void test13999() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest27.test13999");
        org.apache.rat.utils.DefaultLog defaultLog0 = org.apache.rat.utils.DefaultLog.INSTANCE;
        org.apache.rat.annotation.ApacheV2LicenseAppender apacheV2LicenseAppender1 = new org.apache.rat.annotation.ApacheV2LicenseAppender((org.apache.rat.utils.Log) defaultLog0);
        org.apache.rat.utils.Log log2 = null;
        org.apache.rat.ReportConfiguration reportConfiguration3 = new org.apache.rat.ReportConfiguration(log2);
        org.apache.rat.report.claim.ClaimStatistic claimStatistic4 = org.apache.rat.Reporter.report(reportConfiguration3);
        org.apache.rat.utils.Log log5 = null;
        org.apache.rat.ReportConfiguration reportConfiguration6 = new org.apache.rat.ReportConfiguration(log5);
        org.apache.rat.report.claim.ClaimStatistic claimStatistic7 = org.apache.rat.Reporter.report(reportConfiguration6);
        org.apache.rat.utils.ReportingSet.Options options8 = org.apache.rat.utils.ReportingSet.Options.OVERWRITE;
        reportConfiguration6.licenseDuplicateOption(options8);
        reportConfiguration3.familyDuplicateOption(options8);
        org.apache.commons.io.function.IOSupplier<java.io.PrintWriter> printWriterIOSupplier11 = reportConfiguration3.getWriter();
        org.apache.rat.utils.Log log12 = null;
        org.apache.rat.ReportConfiguration reportConfiguration13 = new org.apache.rat.ReportConfiguration(log12);
        reportConfiguration13.addApprovedLicenseCategory(".cvsignore");
        org.apache.rat.utils.Log.Level level16 = org.apache.rat.utils.Log.Level.ERROR;
        reportConfiguration13.logFamilyCollisions(level16);
        reportConfiguration3.logFamilyCollisions(level16);
        org.apache.rat.Defaults.Builder builder19 = org.apache.rat.Defaults.builder();
        org.apache.rat.Defaults.Builder builder20 = builder19.noDefault();
        defaultLog0.log(level16, (java.lang.Object) builder19);
        org.apache.rat.Defaults defaults22 = builder19.build();
        org.apache.rat.Defaults defaults23 = builder19.build();
        org.apache.rat.Defaults.Builder builder25 = builder19.add("d399d24a-dace-44c7-aa43-3a1c7a4eee3d");
        org.junit.Assert.assertNotNull(defaultLog0);
        org.junit.Assert.assertNull(claimStatistic4);
        org.junit.Assert.assertNull(claimStatistic7);
        org.junit.Assert.assertTrue("'" + options8 + "' != '" + org.apache.rat.utils.ReportingSet.Options.OVERWRITE + "'", options8.equals(org.apache.rat.utils.ReportingSet.Options.OVERWRITE));
        org.junit.Assert.assertNotNull(printWriterIOSupplier11);
        org.junit.Assert.assertTrue("'" + level16 + "' != '" + org.apache.rat.utils.Log.Level.ERROR + "'", level16.equals(org.apache.rat.utils.Log.Level.ERROR));
        org.junit.Assert.assertNotNull(builder19);
        org.junit.Assert.assertNotNull(builder20);
        org.junit.Assert.assertNotNull(defaults22);
        org.junit.Assert.assertNotNull(defaults23);
        org.junit.Assert.assertNotNull(builder25);
    }

    @Test
    public void test14000() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest27.test14000");
        org.apache.rat.utils.ReportingSet<java.lang.String> strSet0 = new org.apache.rat.utils.ReportingSet<java.lang.String>();
        int int1 = strSet0.size();
        org.apache.rat.utils.ReportingSet<java.lang.String> strSet3 = strSet0.headSet("?????");
        org.apache.rat.utils.ReportingSet<java.lang.String> strSet5 = strSet0.tailSet("W3C Document Copyright");
        java.util.stream.Stream<java.lang.String> strStream6 = strSet0.parallelStream();
        boolean boolean8 = strSet0.addIfNotPresent("2953E6CB-20A5-4DCF-A9F5-85C51CC8C635");
        org.apache.rat.utils.ReportingSet<java.lang.String> strSet10 = strSet0.tailSet("01e3a8ec-2dad-483e-bb8e-20f7738c8a71");
        java.lang.String str11 = strSet0.first();
        org.junit.Assert.assertTrue("'" + int1 + "' != '" + 0 + "'", int1 == 0);
        org.junit.Assert.assertNotNull(strSet3);
        org.junit.Assert.assertNotNull(strSet5);
        org.junit.Assert.assertNotNull(strStream6);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + true + "'", boolean8 == true);
        org.junit.Assert.assertNotNull(strSet10);
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "2953E6CB-20A5-4DCF-A9F5-85C51CC8C635" + "'", str11, "2953E6CB-20A5-4DCF-A9F5-85C51CC8C635");
    }
}
